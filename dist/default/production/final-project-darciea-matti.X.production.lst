

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 20:42:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Version 2.35
    69                           ; Generated 05/05/2021 GMT
    70                           ; 
    71                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution. Publication is not required when
    85                           ;        this file is used in an embedded application.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F67K40 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103   000000                     _TX4REG	set	3812
   104   000000                     _RC4STAbits	set	3815
   105   000000                     _SP4BRGH	set	3814
   106   000000                     _LATGbits	set	3967
   107   000000                     _TRISFbits	set	3974
   108   000000                     _TRISDbits	set	3972
   109   000000                     _TRISGbits	set	3975
   110   000000                     _SSP2CON2bits	set	3802
   111   000000                     _RX4PPS	set	3605
   112   000000                     _SSP2CLKPPS	set	3612
   113   000000                     _SSP2DATPPS	set	3613
   114   000000                     _RC7PPS	set	3689
   115   000000                     _RE2PPS	set	3700
   116   000000                     _TRISCbits	set	3971
   117   000000                     _TRISEbits	set	3973
   118   000000                     _TRISHbits	set	3976
   119   000000                     _PORTFbits	set	3982
   120   000000                     _T2PR	set	4028
   121   000000                     _T2CONbits	set	4029
   122   000000                     _CCPR2H	set	4006
   123   000000                     _CCPR1H	set	4010
   124   000000                     _RE4PPS	set	3702
   125   000000                     _RG6PPS	set	3720
   126   000000                     _RD5PPS	set	3695
   127   000000                     _ANSELDbits	set	3751
   128   000000                     _SSP2ADD	set	3798
   129   000000                     _SSP2CON1bits	set	3801
   130   000000                     _CCPR4H	set	3873
   131   000000                     _CCPR3H	set	3877
   132   000000                     _TMR0L	set	4051
   133   000000                     _TMR0H	set	4052
   134   000000                     _T0CON0bits	set	4053
   135   000000                     _T0CON1bits	set	4054
   136   000000                     _T2CLKCONbits	set	4031
   137   000000                     _T2HLTbits	set	4030
   138   000000                     _CCP1CONbits	set	4011
   139   000000                     _CCPTMRS0bits	set	4013
   140   000000                     _CCP2CONbits	set	4007
   141   000000                     _LATAbits	set	3961
   142   000000                     _LATDbits	set	3964
   143   000000                     _CCP3CONbits	set	3878
   144   000000                     _CCP4CONbits	set	3874
   145   000000                     _RC4REG	set	3811
   146   000000                     _SP4BRGL	set	3813
   147   000000                     _TX4STAbits	set	3816
   148   000000                     _BAUD4CONbits	set	3817
   149   000000                     _SSP2CON2	set	3802
   150   000000                     _SSP2STAT	set	3800
   151   000000                     _ANSELFbits	set	3764
   152   000000                     _SSP2BUF	set	3797
   153   000000                     _IPR0bits	set	3615
   154   000000                     _PIE4bits	set	3629
   155   000000                     _PIR4bits	set	3639
   156   000000                     _RC0PPS	set	3682
   157   000000                     _TMR0IE	set	29005
   158   000000                     _RD6PPS	set	3696
   159   000000                     _LATFbits	set	3966
   160   000000                     _LATHbits	set	3968
   161   000000                     _TRISAbits	set	3969
   162   000000                     _TMR0IF	set	29085
   163   000000                     _INTCONbits	set	4082
   164                           
   165                           	psect	smallconst
   166   000E00                     __psmallconst:
   167                           	callstack 0
   168   000E00  00                 	db	0
   169   000E01                     STR_4:
   170                           
   171                           ; BSR set to: 14
   172   000E01  0A                 	db	10
   173   000E02  20                 	db	32
   174   000E03  41                 	db	65	;'A'
   175   000E04  56                 	db	86	;'V'
   176   000E05  47                 	db	71	;'G'
   177   000E06  3A                 	db	58	;':'
   178   000E07  20                 	db	32
   179   000E08  52                 	db	82	;'R'
   180   000E09  20                 	db	32
   181   000E0A  25                 	db	37
   182   000E0B  64                 	db	100	;'d'
   183   000E0C  2C                 	db	44
   184   000E0D  20                 	db	32
   185   000E0E  47                 	db	71	;'G'
   186   000E0F  20                 	db	32
   187   000E10  25                 	db	37
   188   000E11  64                 	db	100	;'d'
   189   000E12  2C                 	db	44
   190   000E13  20                 	db	32
   191   000E14  42                 	db	66	;'B'
   192   000E15  20                 	db	32
   193   000E16  25                 	db	37
   194   000E17  64                 	db	100	;'d'
   195   000E18  20                 	db	32
   196   000E19  0A                 	db	10
   197   000E1A  00                 	db	0
   198   000E1B                     STR_1:
   199                           
   200                           ; BSR set to: 14
   201   000E1B  0A                 	db	10
   202   000E1C  20                 	db	32
   203   000E1D  45                 	db	69	;'E'
   204   000E1E  78                 	db	120	;'x'
   205   000E1F  70                 	db	112	;'p'
   206   000E20  65                 	db	101	;'e'
   207   000E21  63                 	db	99	;'c'
   208   000E22  74                 	db	116	;'t'
   209   000E23  65                 	db	101	;'e'
   210   000E24  64                 	db	100	;'d'
   211   000E25  20                 	db	32
   212   000E26  63                 	db	99	;'c'
   213   000E27  6C                 	db	108	;'l'
   214   000E28  65                 	db	101	;'e'
   215   000E29  61                 	db	97	;'a'
   216   000E2A  72                 	db	114	;'r'
   217   000E2B  3A                 	db	58	;':'
   218   000E2C  20                 	db	32
   219   000E2D  25                 	db	37
   220   000E2E  64                 	db	100	;'d'
   221   000E2F  20                 	db	32
   222   000E30  0A                 	db	10
   223   000E31  00                 	db	0
   224   000E32                     STR_3:
   225                           
   226                           ; BSR set to: 14
   227   000E32  52                 	db	82	;'R'
   228   000E33  61                 	db	97	;'a'
   229   000E34  77                 	db	119	;'w'
   230   000E35  20                 	db	32
   231   000E36  25                 	db	37
   232   000E37  64                 	db	100	;'d'
   233   000E38  2C                 	db	44
   234   000E39  20                 	db	32
   235   000E3A  25                 	db	37
   236   000E3B  64                 	db	100	;'d'
   237   000E3C  2C                 	db	44
   238   000E3D  20                 	db	32
   239   000E3E  25                 	db	37
   240   000E3F  64                 	db	100	;'d'
   241   000E40  2C                 	db	44
   242   000E41  20                 	db	32
   243   000E42  25                 	db	37
   244   000E43  64                 	db	100	;'d'
   245   000E44  20                 	db	32
   246   000E45  0A                 	db	10
   247   000E46  00                 	db	0
   248   000E47                     STR_2:
   249                           
   250                           ; BSR set to: 14
   251   000E47  54                 	db	84	;'T'
   252   000E48  69                 	db	105	;'i'
   253   000E49  6D                 	db	109	;'m'
   254   000E4A  65                 	db	101	;'e'
   255   000E4B  72                 	db	114	;'r'
   256   000E4C  63                 	db	99	;'c'
   257   000E4D  6F                 	db	111	;'o'
   258   000E4E  75                 	db	117	;'u'
   259   000E4F  6E                 	db	110	;'n'
   260   000E50  74                 	db	116	;'t'
   261   000E51  20                 	db	32
   262   000E52  25                 	db	37
   263   000E53  64                 	db	100	;'d'
   264   000E54  20                 	db	32
   265   000E55  0A                 	db	10
   266   000E56  00                 	db	0
   267   000E57                     STR_5:
   268                           
   269                           ; BSR set to: 14
   270   000E57  43                 	db	67	;'C'
   271   000E58  41                 	db	65	;'A'
   272   000E59  52                 	db	82	;'R'
   273   000E5A  44                 	db	68	;'D'
   274   000E5B  20                 	db	32
   275   000E5C  25                 	db	37
   276   000E5D  64                 	db	100	;'d'
   277   000E5E  20                 	db	32
   278   000E5F  0A                 	db	10
   279   000E60  00                 	db	0
   280   000E61  00                 	db	0	; dummy byte at the end
   281   000000                     
   282                           ; #config settings
   283                           
   284                           	psect	cinit
   285   00324E                     __pcinit:
   286                           	callstack 0
   287   00324E                     start_initialization:
   288                           	callstack 0
   289   00324E                     __initialization:
   290                           	callstack 0
   291                           
   292                           ; Clear objects allocated to BANK2 (112 bytes)
   293   00324E  EE02  F072         	lfsr	0,__pbssBANK2
   294   003252  0E70               	movlw	112
   295   003254                     clear_0:
   296   003254  6AEE               	clrf	postinc0,c
   297   003256  06E8               	decf	wreg,f,c
   298   003258  E1FD               	bnz	clear_0
   299                           
   300                           ; Clear objects allocated to BANK1 (7 bytes)
   301   00325A  EE01  F0F3         	lfsr	0,__pbssBANK1
   302   00325E  0E07               	movlw	7
   303   003260                     clear_1:
   304   003260  6AEE               	clrf	postinc0,c
   305   003262  06E8               	decf	wreg,f,c
   306   003264  E1FD               	bnz	clear_1
   307                           
   308                           ; Clear objects allocated to BANK0 (1 bytes)
   309   003266  0100               	movlb	0
   310   003268  6BFD               	clrf	__pbssBANK0& (0+255),b
   311                           
   312                           ; Clear objects allocated to COMRAM (3 bytes)
   313   00326A  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   314   00326C  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   315   00326E  6A58               	clrf	__pbssCOMRAM& (0+255),c
   316   003270                     end_of_initialization:
   317                           	callstack 0
   318   003270                     __end_of__initialization:
   319                           	callstack 0
   320   003270  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321   003272  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322   003274  0100               	movlb	0
   323   003276  EF85  F009         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMRAM
   326   000058                     __pbssCOMRAM:
   327                           	callstack 0
   328   000058                     _TxBufReadCnt:
   329                           	callstack 0
   330   000058                     	ds	1
   331   000059                     _TxBufWriteCnt:
   332                           	callstack 0
   333   000059                     	ds	1
   334   00005A                     _RxBufWriteCnt:
   335                           	callstack 0
   336   00005A                     	ds	1
   337                           
   338                           	psect	bssBANK0
   339   0000FD                     __pbssBANK0:
   340                           	callstack 0
   341   0000FD                     _RxBufReadCnt:
   342                           	callstack 0
   343   0000FD                     	ds	1
   344                           
   345                           	psect	bssBANK1
   346   0001F3                     __pbssBANK1:
   347                           	callstack 0
   348   0001F3                     _width:
   349                           	callstack 0
   350   0001F3                     	ds	2
   351   0001F5                     _prec:
   352                           	callstack 0
   353   0001F5                     	ds	2
   354   0001F7                     _TimerFlag:
   355                           	callstack 0
   356   0001F7                     	ds	2
   357   0001F9                     _flags:
   358                           	callstack 0
   359   0001F9                     	ds	1
   360                           
   361                           	psect	bssBANK2
   362   000272                     __pbssBANK2:
   363                           	callstack 0
   364   000272                     _EUSART4TXbuf:
   365                           	callstack 0
   366   000272                     	ds	60
   367   0002AE                     _EUSART4RXbuf:
   368                           	callstack 0
   369   0002AE                     	ds	20
   370   0002C2                     _dbuf:
   371                           	callstack 0
   372   0002C2                     	ds	32
   373                           
   374                           	psect	cstackBANK2
   375   000200                     __pcstackBANK2:
   376                           	callstack 0
   377   000200                     main@expected_values:
   378                           	callstack 0
   379                           
   380                           ; 54 bytes @ 0x0
   381   000200                     	ds	54
   382   000236                     main@ReturnHomeArray:
   383                           	callstack 0
   384                           
   385                           ; 60 bytes @ 0x36
   386   000236                     	ds	60
   387                           
   388                           	psect	cstackBANK1
   389   000100                     __pcstackBANK1:
   390                           	callstack 0
   391   000100                     card_response@normalised_values:
   392                           	callstack 0
   393                           
   394                           ; 54 bytes @ 0x0
   395   000100                     	ds	54
   396   000136                     card_response@master_closeness:
   397                           	callstack 0
   398                           
   399                           ; 18 bytes @ 0x36
   400   000136                     	ds	18
   401   000148                     main@buf:
   402                           	callstack 0
   403                           
   404                           ; 150 bytes @ 0x48
   405   000148                     	ds	150
   406   0001DE                     main@i:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0xDE
   410   0001DE                     	ds	1
   411   0001DF                     main@clear_read:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0xDF
   415   0001DF                     	ds	2
   416   0001E1                     main@motorL:
   417                           	callstack 0
   418                           
   419                           ; 9 bytes @ 0xE1
   420   0001E1                     	ds	9
   421   0001EA                     main@motorR:
   422                           	callstack 0
   423                           
   424                           ; 9 bytes @ 0xEA
   425   0001EA                     	ds	9
   426                           
   427                           	psect	cstackBANK0
   428   000060                     __pcstackBANK0:
   429                           	callstack 0
   430   000060                     ?_vfprintf:
   431                           	callstack 0
   432   000060                     motor_response@mL:
   433                           	callstack 0
   434   000060                     vfprintf@fp:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x0
   438   000060                     	ds	2
   439   000062                     motor_response@mR:
   440                           	callstack 0
   441   000062                     vfprintf@fmt:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x2
   445   000062                     	ds	2
   446   000064                     vfprintf@ap:
   447                           	callstack 0
   448   000064                     motor_response@ReturnHomeArray:
   449                           	callstack 0
   450                           
   451                           ; 60 bytes @ 0x4
   452   000064                     	ds	2
   453   000066                     ?_sprintf:
   454                           	callstack 0
   455   000066                     sprintf@s:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459   000066                     	ds	2
   460   000068                     sprintf@fmt:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x8
   464   000068                     	ds	10
   465   000072                     sprintf@ap:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x12
   469   000072                     	ds	2
   470   000074                     sprintf@f:
   471                           	callstack 0
   472                           
   473                           ; 11 bytes @ 0x14
   474   000074                     	ds	44
   475   0000A0                     card_response@buf:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x40
   479   0000A0                     	ds	2
   480   0000A2                     card_response@red_read:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x42
   484   0000A2                     	ds	2
   485   0000A4                     card_response@green_read:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x44
   489   0000A4                     	ds	2
   490   0000A6                     card_response@blue_read:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x46
   494   0000A6                     	ds	2
   495   0000A8                     card_response@expected_values:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x48
   499   0000A8                     	ds	2
   500   0000AA                     card_response@card:
   501                           	callstack 0
   502                           
   503                           ; 1 bytes @ 0x4A
   504   0000AA                     	ds	1
   505   0000AB                     card_response@mL:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x4B
   509   0000AB                     	ds	2
   510   0000AD                     card_response@mR:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x4D
   514   0000AD                     	ds	2
   515   0000AF                     card_response@ReturnHomeArray:
   516                           	callstack 0
   517                           
   518                           ; 60 bytes @ 0x4F
   519   0000AF                     	ds	60
   520   0000EB                     main@clear_read_check:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x8B
   524   0000EB                     	ds	2
   525   0000ED                     main@PWMcycle:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x8D
   529   0000ED                     	ds	1
   530   0000EE                     main@card:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x8E
   534   0000EE                     	ds	1
   535   0000EF                     main@i_1233:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x8F
   539   0000EF                     	ds	2
   540   0000F1                     main@i_1235:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x91
   544   0000F1                     	ds	2
   545   0000F3                     main@TimerCount:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x93
   549   0000F3                     	ds	2
   550   0000F5                     main@CardCount:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x95
   554   0000F5                     	ds	2
   555   0000F7                     main@red_read:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x97
   559   0000F7                     	ds	2
   560   0000F9                     main@green_read:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x99
   564   0000F9                     	ds	2
   565   0000FB                     main@blue_read:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x9B
   569   0000FB                     	ds	2
   570                           
   571                           	psect	cstackCOMRAM
   572   000001                     __pcstackCOMRAM:
   573                           	callstack 0
   574   000001                     ??_LowISR:
   575   000001                     
   576                           ; 1 bytes @ 0x0
   577   000001                     	ds	3
   578   000004                     ??_I2C_2_Master_Idle:
   579   000004                     ?___wmul:
   580                           	callstack 0
   581   000004                     ?___aodiv:
   582                           	callstack 0
   583   000004                     ?___aomod:
   584                           	callstack 0
   585   000004                     sendCharSerial4@charToSend:
   586                           	callstack 0
   587   000004                     determine_card@master_closeness:
   588                           	callstack 0
   589   000004                     ___wmul@multiplier:
   590                           	callstack 0
   591   000004                     fputc@c:
   592                           	callstack 0
   593   000004                     ___aodiv@dividend:
   594                           	callstack 0
   595   000004                     ___aomod@dividend:
   596                           	callstack 0
   597                           
   598                           ; 8 bytes @ 0x3
   599   000004                     	ds	1
   600   000005                     ??_I2C_2_Master_Read:
   601   000005                     I2C_2_Master_Write@data_byte:
   602                           	callstack 0
   603   000005                     sendStringSerial4@string:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x4
   607   000005                     	ds	1
   608   000006                     ??_determine_card:
   609   000006                     color_writetoaddr@value:
   610                           	callstack 0
   611   000006                     I2C_2_Master_Read@ack:
   612                           	callstack 0
   613   000006                     ___wmul@multiplicand:
   614                           	callstack 0
   615   000006                     fputc@fp:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x5
   619   000006                     	ds	1
   620   000007                     color_writetoaddr@address:
   621                           	callstack 0
   622   000007                     I2C_2_Master_Read@tmp:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x6
   626   000007                     	ds	1
   627   000008                     ??_fputc:
   628   000008                     ??_color_click_init:
   629   000008                     ?_color_read_Red:
   630                           	callstack 0
   631   000008                     ?_color_read_Green:
   632                           	callstack 0
   633   000008                     ?_color_read_Blue:
   634                           	callstack 0
   635   000008                     ?_color_read_Clear:
   636                           	callstack 0
   637   000008                     ___wmul@product:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x7
   641   000008                     	ds	2
   642   00000A                     ??_color_read_Red:
   643   00000A                     ??_color_read_Green:
   644   00000A                     ??_color_read_Blue:
   645   00000A                     ??_color_read_Clear:
   646   00000A                     ?___lwdiv:
   647                           	callstack 0
   648   00000A                     determine_card@current_smallest:
   649                           	callstack 0
   650   00000A                     ___lwdiv@dividend:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x9
   654   00000A                     	ds	2
   655   00000C                     determine_card@predicted_colour:
   656                           	callstack 0
   657   00000C                     ___lwdiv@divisor:
   658                           	callstack 0
   659   00000C                     ___aodiv@divisor:
   660                           	callstack 0
   661   00000C                     ___aomod@divisor:
   662                           	callstack 0
   663                           
   664                           ; 8 bytes @ 0xB
   665   00000C                     	ds	1
   666   00000D                     determine_card@i:
   667                           	callstack 0
   668   00000D                     color_read_Red@tmp:
   669                           	callstack 0
   670   00000D                     color_read_Green@tmp:
   671                           	callstack 0
   672   00000D                     color_read_Blue@tmp:
   673                           	callstack 0
   674   00000D                     color_read_Clear@tmp:
   675                           	callstack 0
   676   00000D                     fputs@s:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0xC
   680   00000D                     	ds	1
   681   00000E                     ___lwdiv@quotient:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0xD
   685   00000E                     	ds	1
   686   00000F                     fputs@fp:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0xE
   690   00000F                     	ds	1
   691   000010                     ___lwdiv@counter:
   692                           	callstack 0
   693                           
   694                           ; 1 bytes @ 0xF
   695   000010                     	ds	1
   696   000011                     fputs@c:
   697                           	callstack 0
   698   000011                     setMotorPWM@m:
   699                           	callstack 0
   700   000011                     collect_avg_readings@red_read:
   701                           	callstack 0
   702   000011                     make_master_closeness@buf:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x10
   706   000011                     	ds	1
   707   000012                     fputs@i:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x11
   711   000012                     	ds	1
   712   000013                     ??_setMotorPWM:
   713   000013                     collect_avg_readings@green_read:
   714                           	callstack 0
   715   000013                     make_master_closeness@normalised_values:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x12
   719   000013                     	ds	1
   720   000014                     ___aodiv@counter:
   721                           	callstack 0
   722   000014                     ___aomod@counter:
   723                           	callstack 0
   724   000014                     pad@fp:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x13
   728   000014                     	ds	1
   729   000015                     setMotorPWM@posDuty:
   730                           	callstack 0
   731   000015                     ___aodiv@sign:
   732                           	callstack 0
   733   000015                     ___aomod@sign:
   734                           	callstack 0
   735   000015                     collect_avg_readings@blue_read:
   736                           	callstack 0
   737   000015                     make_master_closeness@master_closeness:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x14
   741   000015                     	ds	1
   742   000016                     ?_abs:
   743                           	callstack 0
   744   000016                     setMotorPWM@negDuty:
   745                           	callstack 0
   746   000016                     abs@a:
   747                           	callstack 0
   748   000016                     pad@buf:
   749                           	callstack 0
   750   000016                     ___aodiv@quotient:
   751                           	callstack 0
   752                           
   753                           ; 8 bytes @ 0x15
   754   000016                     	ds	1
   755   000017                     ??_collect_avg_readings:
   756   000017                     ??_make_master_closeness:
   757   000017                     stop@mL:
   758                           	callstack 0
   759   000017                     turnLeft45@mL:
   760                           	callstack 0
   761   000017                     turnRight45@mL:
   762                           	callstack 0
   763   000017                     fullSpeedAhead@mL:
   764                           	callstack 0
   765   000017                     reverseFullSpeed@mL:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x16
   769   000017                     	ds	1
   770   000018                     ??_abs:
   771   000018                     pad@p:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x17
   775   000018                     	ds	1
   776   000019                     stop@mR:
   777                           	callstack 0
   778   000019                     turnLeft45@mR:
   779                           	callstack 0
   780   000019                     turnRight45@mR:
   781                           	callstack 0
   782   000019                     fullSpeedAhead@mR:
   783                           	callstack 0
   784   000019                     reverseFullSpeed@mR:
   785                           	callstack 0
   786   000019                     collect_avg_readings@i:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x18
   790   000019                     	ds	1
   791   00001A                     ??_pad:
   792   00001A                     normalise_readings@buf:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x19
   796   00001A                     	ds	1
   797   00001B                     ??_stop:
   798   00001B                     ??_turnLeft45:
   799   00001B                     ??_turnRight45:
   800   00001B                     ??_fullSpeedAhead:
   801   00001B                     ??_reverseFullSpeed:
   802   00001B                     collect_avg_readings@i_1581:
   803                           	callstack 0
   804   00001B                     pad@i:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x1A
   808   00001B                     	ds	1
   809   00001C                     fullSpeedAhead@i:
   810                           	callstack 0
   811   00001C                     reverseFullSpeed@i:
   812                           	callstack 0
   813   00001C                     normalise_readings@red_read:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x1B
   817   00001C                     	ds	1
   818   00001D                     turnLeft45@i:
   819                           	callstack 0
   820   00001D                     turnRight45@i:
   821                           	callstack 0
   822   00001D                     collect_avg_readings@i_1582:
   823                           	callstack 0
   824   00001D                     pad@w:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x1C
   828   00001D                     	ds	1
   829   00001E                     normalise_readings@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x1D
   833   00001E                     	ds	1
   834   00001F                     collect_avg_readings@i_1583:
   835                           	callstack 0
   836   00001F                     home_response@mL:
   837                           	callstack 0
   838   00001F                     dtoa@fp:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x1E
   842   00001F                     	ds	1
   843   000020                     normalise_readings@blue_read:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0x1F
   847   000020                     	ds	1
   848   000021                     home_response@mR:
   849                           	callstack 0
   850   000021                     dtoa@d:
   851                           	callstack 0
   852                           
   853                           ; 8 bytes @ 0x20
   854   000021                     	ds	1
   855   000022                     normalise_readings@expected_values:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x21
   859   000022                     	ds	1
   860   000023                     ??_home_response:
   861                           
   862                           ; 1 bytes @ 0x22
   863   000023                     	ds	1
   864   000024                     normalise_readings@normalised_values:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x23
   868   000024                     	ds	1
   869   000025                     home_response@card:
   870                           	callstack 0
   871                           
   872                           ; 1 bytes @ 0x24
   873   000025                     	ds	1
   874   000026                     ??_normalise_readings:
   875   000026                     ??_motor_response:
   876                           
   877                           ; 1 bytes @ 0x25
   878   000026                     	ds	2
   879   000028                     motor_response@j:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x27
   883   000028                     	ds	1
   884   000029                     ??_dtoa:
   885                           
   886                           ; 1 bytes @ 0x28
   887   000029                     	ds	1
   888   00002A                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x29
   892   00002A                     	ds	1
   893   00002B                     make_master_closeness@i:
   894                           	callstack 0
   895   00002B                     motor_response@i:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x2A
   899   00002B                     	ds	3
   900   00002E                     normalise_readings@difference:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x2D
   904   00002E                     	ds	2
   905   000030                     normalise_readings@i:
   906                           	callstack 0
   907                           
   908                           ; 1 bytes @ 0x2F
   909   000030                     	ds	1
   910   000031                     _dtoa$2493:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x30
   914   000031                     	ds	2
   915   000033                     dtoa@p:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x32
   919   000033                     	ds	2
   920   000035                     dtoa@w:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x34
   924   000035                     	ds	2
   925   000037                     dtoa@n:
   926                           	callstack 0
   927                           
   928                           ; 8 bytes @ 0x36
   929   000037                     	ds	8
   930   00003F                     dtoa@i:
   931                           	callstack 0
   932                           
   933                           ; 2 bytes @ 0x3E
   934   00003F                     	ds	2
   935   000041                     dtoa@s:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x40
   939   000041                     	ds	1
   940   000042                     vfpfcnvrt@fp:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x41
   944   000042                     	ds	2
   945   000044                     vfpfcnvrt@fmt:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x43
   949   000044                     	ds	2
   950   000046                     vfpfcnvrt@ap:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x45
   954   000046                     	ds	2
   955   000048                     ??_vfpfcnvrt:
   956                           
   957                           ; 1 bytes @ 0x47
   958   000048                     	ds	2
   959   00004A                     vfpfcnvrt@convarg:
   960                           	callstack 0
   961                           
   962                           ; 8 bytes @ 0x49
   963   00004A                     	ds	8
   964   000052                     vfpfcnvrt@cp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x51
   968   000052                     	ds	2
   969   000054                     vfprintf@cfmt:
   970                           	callstack 0
   971                           
   972                           ; 2 bytes @ 0x53
   973   000054                     	ds	2
   974   000056                     ??_main:
   975                           
   976                           ; 1 bytes @ 0x55
   977   000056                     	ds	2
   978                           
   979 ;;
   980 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   981 ;;
   982 ;; *************** function _main *****************
   983 ;; Defined at:
   984 ;;		line 21 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  i               2  145[BANK0 ] int 
   989 ;;  i               2  143[BANK0 ] int 
   990 ;;  i               1  222[BANK1 ] enum E14569
   991 ;;  buf           150   72[BANK1 ] unsigned char [150]
   992 ;;  ReturnHomeAr   60   54[BANK2 ] struct HomeStored
   993 ;;  expected_val   54    0[BANK2 ] unsigned int [9][3]
   994 ;;  motorR          9  234[BANK1 ] struct DC_motor
   995 ;;  motorL          9  225[BANK1 ] struct DC_motor
   996 ;;  clear_read      2  223[BANK1 ] unsigned int 
   997 ;;  blue_read       2  155[BANK0 ] unsigned int 
   998 ;;  green_read      2  153[BANK0 ] unsigned int 
   999 ;;  red_read        2  151[BANK0 ] unsigned int 
  1000 ;;  CardCount       2  149[BANK0 ] unsigned int 
  1001 ;;  TimerCount      2  147[BANK0 ] unsigned int 
  1002 ;;  clear_read_c    2  139[BANK0 ] unsigned int 
  1003 ;;  card            1  142[BANK0 ] enum E14569
  1004 ;;  PWMcycle        1  141[BANK0 ] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      void 
  1007 ;; Registers used:
  1008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1015 ;;      Locals:         0      18     171     114       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Totals:         2      18     171     114       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;Total ram usage:      305 bytes
  1019 ;; Hardware stack levels required when called: 10
  1020 ;; This function calls:
  1021 ;;		_I2C_2_Master_Init
  1022 ;;		_Interrupts_init
  1023 ;;		_LEDSon_init
  1024 ;;		_card_response
  1025 ;;		_collect_avg_readings
  1026 ;;		_color_click_init
  1027 ;;		_color_read_Blue
  1028 ;;		_color_read_Clear
  1029 ;;		_color_read_Green
  1030 ;;		_color_read_Red
  1031 ;;		_fullSpeedAhead
  1032 ;;		_initDCmotorsPWM
  1033 ;;		_initUSART4
  1034 ;;		_sendStringSerial4
  1035 ;;		_setMotorPWM
  1036 ;;		_sprintf
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		Startup code after reset
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text0
  1044   00130A                     __ptext0:
  1045                           	callstack 0
  1046   00130A                     _main:
  1047                           	callstack 21
  1048   00130A                     
  1049                           ;main.c: 26:     LEDSon_init();
  1050   00130A  EC8E  F019         	call	_LEDSon_init	;wreg free
  1051   00130E                     
  1052                           ;main.c: 27:     I2C_2_Master_Init();
  1053   00130E  EC3D  F019         	call	_I2C_2_Master_Init	;wreg free
  1054   001312                     
  1055                           ;main.c: 28:     color_click_init();
  1056   001312  ECF5  F018         	call	_color_click_init	;wreg free
  1057   001316                     
  1058                           ;main.c: 29:     initDCmotorsPWM();
  1059   001316  EC61  F016         	call	_initDCmotorsPWM	;wreg free
  1060   00131A                     
  1061                           ;main.c: 30:     initUSART4();
  1062   00131A  EC9F  F019         	call	_initUSART4	;wreg free
  1063   00131E                     
  1064                           ;main.c: 31:     Interrupts_init();
  1065   00131E  EC52  F019         	call	_Interrupts_init	;wreg free
  1066   001322                     
  1067                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1068   001322  8486               	bsf	134,2,c	;volatile
  1069   001324                     
  1070                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1071   001324  010E               	movlb	14	; () banked
  1072   001326  95B4               	bcf	180,2,b	;volatile
  1073   001328                     
  1074                           ; BSR set to: 14
  1075                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1076   001328  CFBC F0ED          	movff	4028,main@PWMcycle	;volatile
  1077   00132C                     
  1078                           ; BSR set to: 14
  1079                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1080   00132C  0E00               	movlw	0
  1081   00132E  0101               	movlb	1	; () banked
  1082   001330  6FE1               	movwf	main@motorL& (0+255),b
  1083   001332                     
  1084                           ; BSR set to: 1
  1085                           ;main.c: 45:     motorL.direction=1;
  1086   001332  0E01               	movlw	1
  1087   001334  6FE2               	movwf	(main@motorL+1)& (0+255),b
  1088   001336                     
  1089                           ; BSR set to: 1
  1090                           ;main.c: 46:     motorL.brakemode=1;
  1091   001336  0E01               	movlw	1
  1092   001338  6FE3               	movwf	(main@motorL+2)& (0+255),b
  1093   00133A                     
  1094                           ; BSR set to: 1
  1095                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1096   00133A  0EAA               	movlw	170
  1097   00133C  6FE6               	movwf	(main@motorL+5)& (0+255),b
  1098   00133E  0E0F               	movlw	15
  1099   001340  6FE7               	movwf	(main@motorL+6)& (0+255),b
  1100   001342                     
  1101                           ; BSR set to: 1
  1102                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1103   001342  0EA6               	movlw	166
  1104   001344  6FE8               	movwf	(main@motorL+7)& (0+255),b
  1105   001346  0E0F               	movlw	15
  1106   001348  6FE9               	movwf	(main@motorL+8)& (0+255),b
  1107   00134A                     
  1108                           ; BSR set to: 1
  1109                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1110   00134A  C0ED  F1E4         	movff	main@PWMcycle,main@motorL+3
  1111   00134E  6BE5               	clrf	(main@motorL+4)& (0+255),b
  1112   001350                     
  1113                           ; BSR set to: 1
  1114                           ;main.c: 51:     motorR.power=0;
  1115   001350  0E00               	movlw	0
  1116   001352  6FEA               	movwf	main@motorR& (0+255),b
  1117   001354                     
  1118                           ; BSR set to: 1
  1119                           ;main.c: 52:     motorR.direction=1;
  1120   001354  0E01               	movlw	1
  1121   001356  6FEB               	movwf	(main@motorR+1)& (0+255),b
  1122   001358                     
  1123                           ; BSR set to: 1
  1124                           ;main.c: 53:     motorR.brakemode=1;
  1125   001358  0E01               	movlw	1
  1126   00135A  6FEC               	movwf	(main@motorR+2)& (0+255),b
  1127                           
  1128                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1129   00135C  0E25               	movlw	37
  1130   00135E  6FEF               	movwf	(main@motorR+5)& (0+255),b
  1131   001360  0E0F               	movlw	15
  1132   001362  6FF0               	movwf	(main@motorR+6)& (0+255),b
  1133                           
  1134                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1135   001364  0E21               	movlw	33
  1136   001366  6FF1               	movwf	(main@motorR+7)& (0+255),b
  1137   001368  0E0F               	movlw	15
  1138   00136A  6FF2               	movwf	(main@motorR+8)& (0+255),b
  1139   00136C                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1142   00136C  C0ED  F1ED         	movff	main@PWMcycle,main@motorR+3
  1143   001370  6BEE               	clrf	(main@motorR+4)& (0+255),b
  1144   001372                     
  1145                           ; BSR set to: 1
  1146                           ;main.c: 58:     setMotorPWM(&motorL);
  1147   001372  0EE1               	movlw	low main@motorL
  1148   001374  6E11               	movwf	setMotorPWM@m^0,c
  1149   001376  0E01               	movlw	high main@motorL
  1150   001378  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1151   00137A  ECA3  F011         	call	_setMotorPWM	;wreg free
  1152   00137E                     
  1153                           ;main.c: 59:     setMotorPWM(&motorR);
  1154   00137E  0EEA               	movlw	low main@motorR
  1155   001380  6E11               	movwf	setMotorPWM@m^0,c
  1156   001382  0E01               	movlw	high main@motorR
  1157   001384  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1158   001386  ECA3  F011         	call	_setMotorPWM	;wreg free
  1159   00138A                     
  1160                           ;main.c: 65:     colour card;;main.c: 66:     char buf[150];;main.c: 68:     unsigned in
      +                          t expected_values[3][9];;main.c: 69:     unsigned int red_read = 0;
  1161   00138A  0E00               	movlw	0
  1162   00138C  0100               	movlb	0	; () banked
  1163   00138E  6FF8               	movwf	(main@red_read+1)& (0+255),b
  1164   001390  0E00               	movlw	0
  1165   001392  6FF7               	movwf	main@red_read& (0+255),b
  1166   001394                     
  1167                           ; BSR set to: 0
  1168                           ;main.c: 70:     unsigned int green_read = 0;
  1169   001394  0E00               	movlw	0
  1170   001396  6FFA               	movwf	(main@green_read+1)& (0+255),b
  1171   001398  0E00               	movlw	0
  1172   00139A  6FF9               	movwf	main@green_read& (0+255),b
  1173   00139C                     
  1174                           ; BSR set to: 0
  1175                           ;main.c: 71:     unsigned int blue_read = 0;
  1176   00139C  0E00               	movlw	0
  1177   00139E  6FFC               	movwf	(main@blue_read+1)& (0+255),b
  1178   0013A0  0E00               	movlw	0
  1179   0013A2  6FFB               	movwf	main@blue_read& (0+255),b
  1180   0013A4                     
  1181                           ; BSR set to: 0
  1182                           ;main.c: 74:     unsigned int TimerCount = 0;
  1183   0013A4  0E00               	movlw	0
  1184   0013A6  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1185   0013A8  0E00               	movlw	0
  1186   0013AA  6FF3               	movwf	main@TimerCount& (0+255),b
  1187   0013AC                     
  1188                           ; BSR set to: 0
  1189                           ;main.c: 75:     unsigned int CardCount = 0;
  1190   0013AC  0E00               	movlw	0
  1191   0013AE  6FF6               	movwf	(main@CardCount+1)& (0+255),b
  1192   0013B0  0E00               	movlw	0
  1193   0013B2  6FF5               	movwf	main@CardCount& (0+255),b
  1194   0013B4                     
  1195                           ; BSR set to: 0
  1196                           ;main.c: 77:     HomeStored ReturnHomeArray;;main.c: 87:     for(colour i = RED; i<= BLA
      +                          CK; i++){
  1197   0013B4  0E00               	movlw	0
  1198   0013B6  0101               	movlb	1	; () banked
  1199   0013B8  6FDE               	movwf	main@i& (0+255),b
  1200   0013BA  EFE0  F009         	goto	l240
  1201   0013BE                     l241:
  1202                           
  1203                           ;main.c: 89:             LATDbits.LATD4 = 1;
  1204   0013BE  887C               	bsf	124,4,c	;volatile
  1205   0013C0                     l240:
  1206                           
  1207                           ;main.c: 88:         while(PORTFbits.RF2){
  1208   0013C0  B48E               	btfsc	142,2,c	;volatile
  1209   0013C2  EFE5  F009         	goto	u1711
  1210   0013C6  EFE7  F009         	goto	u1710
  1211   0013CA                     u1711:
  1212   0013CA  EFDF  F009         	goto	l241
  1213   0013CE                     u1710:
  1214   0013CE                     
  1215                           ;main.c: 91:         LATDbits.LATD4 = 0;
  1216   0013CE  987C               	bcf	124,4,c	;volatile
  1217   0013D0                     
  1218                           ;main.c: 92:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1219   0013D0  0EF7               	movlw	low main@red_read
  1220   0013D2  6E11               	movwf	collect_avg_readings@red_read^0,c
  1221   0013D4  0E00               	movlw	high main@red_read
  1222   0013D6  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1223   0013D8  0EF9               	movlw	low main@green_read
  1224   0013DA  6E13               	movwf	collect_avg_readings@green_read^0,c
  1225   0013DC  0E00               	movlw	high main@green_read
  1226   0013DE  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1227   0013E0  0EFB               	movlw	low main@blue_read
  1228   0013E2  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1229   0013E4  0E00               	movlw	high main@blue_read
  1230   0013E6  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1231   0013E8  ECEC  F00F         	call	_collect_avg_readings	;wreg free
  1232   0013EC                     
  1233                           ;main.c: 93:         expected_values[RED][i] = red_read;
  1234   0013EC  0101               	movlb	1	; () banked
  1235   0013EE  51DE               	movf	main@i& (0+255),w,b
  1236   0013F0  0D02               	mullw	2
  1237   0013F2  0E00               	movlw	low main@expected_values
  1238   0013F4  24F3               	addwf	243,w,c
  1239   0013F6  6ED9               	movwf	fsr2l,c
  1240   0013F8  0E02               	movlw	high main@expected_values
  1241   0013FA  20F4               	addwfc	prodh,w,c
  1242   0013FC  6EDA               	movwf	fsr2h,c
  1243   0013FE  C0F7  FFDE         	movff	main@red_read,postinc2
  1244   001402  C0F8  FFDD         	movff	main@red_read+1,postdec2
  1245   001406                     
  1246                           ; BSR set to: 1
  1247                           ;main.c: 94:         expected_values[GREEN][i] = green_read;
  1248   001406  51DE               	movf	main@i& (0+255),w,b
  1249   001408  0D02               	mullw	2
  1250   00140A  0E12               	movlw	18
  1251   00140C  26F3               	addwf	243,f,c
  1252   00140E  0E00               	movlw	0
  1253   001410  22F4               	addwfc	244,f,c
  1254   001412  0E00               	movlw	low main@expected_values
  1255   001414  24F3               	addwf	243,w,c
  1256   001416  6ED9               	movwf	fsr2l,c
  1257   001418  0E02               	movlw	high main@expected_values
  1258   00141A  20F4               	addwfc	prodh,w,c
  1259   00141C  6EDA               	movwf	fsr2h,c
  1260   00141E  C0F9  FFDE         	movff	main@green_read,postinc2
  1261   001422  C0FA  FFDD         	movff	main@green_read+1,postdec2
  1262   001426                     
  1263                           ; BSR set to: 1
  1264                           ;main.c: 95:         expected_values[BLUE][i] = blue_read;
  1265   001426  51DE               	movf	main@i& (0+255),w,b
  1266   001428  0D02               	mullw	2
  1267   00142A  0E24               	movlw	36
  1268   00142C  26F3               	addwf	243,f,c
  1269   00142E  0E00               	movlw	0
  1270   001430  22F4               	addwfc	244,f,c
  1271   001432  0E00               	movlw	low main@expected_values
  1272   001434  24F3               	addwf	243,w,c
  1273   001436  6ED9               	movwf	fsr2l,c
  1274   001438  0E02               	movlw	high main@expected_values
  1275   00143A  20F4               	addwfc	prodh,w,c
  1276   00143C  6EDA               	movwf	fsr2h,c
  1277   00143E  C0FB  FFDE         	movff	main@blue_read,postinc2
  1278   001442  C0FC  FFDD         	movff	main@blue_read+1,postdec2
  1279   001446                     
  1280                           ; BSR set to: 1
  1281                           ;main.c: 96:     }
  1282   001446  2BDE               	incf	main@i& (0+255),f,b
  1283   001448                     
  1284                           ; BSR set to: 1
  1285   001448  0E08               	movlw	8
  1286   00144A  65DE               	cpfsgt	main@i& (0+255),b
  1287   00144C  EF2A  F00A         	goto	u1721
  1288   001450  EF2C  F00A         	goto	u1720
  1289   001454                     u1721:
  1290   001454  EFE0  F009         	goto	l240
  1291   001458                     u1720:
  1292   001458                     
  1293                           ; BSR set to: 1
  1294                           ;main.c: 97:         for (int i = 0; i <= 500; i++){
  1295   001458  0E00               	movlw	0
  1296   00145A  0100               	movlb	0	; () banked
  1297   00145C  6FF0               	movwf	(main@i_1233+1)& (0+255),b
  1298   00145E  0E00               	movlw	0
  1299   001460  6FEF               	movwf	main@i_1233& (0+255),b
  1300   001462                     l3549:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 98:         clear_read = color_read_Clear();
  1304   001462  ECF2  F017         	call	_color_read_Clear	;wreg free
  1305   001466  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1306   00146A  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1307   00146E                     
  1308                           ;main.c: 99:     }
  1309   00146E  0100               	movlb	0	; () banked
  1310   001470  4BEF               	infsnz	main@i_1233& (0+255),f,b
  1311   001472  2BF0               	incf	(main@i_1233+1)& (0+255),f,b
  1312   001474                     
  1313                           ; BSR set to: 0
  1314   001474  BFF0               	btfsc	(main@i_1233+1)& (0+255),7,b
  1315   001476  EF46  F00A         	goto	u1731
  1316   00147A  0EF5               	movlw	245
  1317   00147C  5DEF               	subwf	main@i_1233& (0+255),w,b
  1318   00147E  0E01               	movlw	1
  1319   001480  59F0               	subwfb	(main@i_1233+1)& (0+255),w,b
  1320   001482  A0D8               	btfss	status,0,c
  1321   001484  EF46  F00A         	goto	u1731
  1322   001488  EF48  F00A         	goto	u1730
  1323   00148C                     u1731:
  1324   00148C  EF31  F00A         	goto	l3549
  1325   001490                     u1730:
  1326   001490                     
  1327                           ; BSR set to: 0
  1328                           ;main.c: 101:     for(int i = 0; i <= 2; i++){
  1329   001490  0E00               	movlw	0
  1330   001492  6FF2               	movwf	(main@i_1235+1)& (0+255),b
  1331   001494  0E00               	movlw	0
  1332   001496  6FF1               	movwf	main@i_1235& (0+255),b
  1333   001498                     l3561:
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 102:         clear_read += color_read_Clear();
  1337   001498  ECF2  F017         	call	_color_read_Clear	;wreg free
  1338   00149C  5008               	movf	?_color_read_Clear^0,w,c
  1339   00149E  0101               	movlb	1	; () banked
  1340   0014A0  27DF               	addwf	main@clear_read& (0+255),f,b
  1341   0014A2  5009               	movf	(?_color_read_Clear+1)^0,w,c
  1342   0014A4  23E0               	addwfc	(main@clear_read+1)& (0+255),f,b
  1343   0014A6                     
  1344                           ; BSR set to: 1
  1345                           ;main.c: 103:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1346   0014A6  0E11               	movlw	17
  1347   0014A8  6E57               	movwf	(??_main+1)^0,c
  1348   0014AA  0E3C               	movlw	60
  1349   0014AC  6E56               	movwf	??_main^0,c
  1350   0014AE  0ECB               	movlw	203
  1351   0014B0                     u1837:
  1352   0014B0  2EE8               	decfsz	wreg,f,c
  1353   0014B2  D7FE               	bra	u1837
  1354   0014B4  2E56               	decfsz	??_main^0,f,c
  1355   0014B6  D7FC               	bra	u1837
  1356   0014B8  2E57               	decfsz	(??_main+1)^0,f,c
  1357   0014BA  D7FA               	bra	u1837
  1358   0014BC  F000               	nop	
  1359   0014BE                     
  1360                           ;main.c: 104:     }
  1361   0014BE  0100               	movlb	0	; () banked
  1362   0014C0  4BF1               	infsnz	main@i_1235& (0+255),f,b
  1363   0014C2  2BF2               	incf	(main@i_1235+1)& (0+255),f,b
  1364   0014C4                     
  1365                           ; BSR set to: 0
  1366   0014C4  BFF2               	btfsc	(main@i_1235+1)& (0+255),7,b
  1367   0014C6  EF6E  F00A         	goto	u1741
  1368   0014CA  51F2               	movf	(main@i_1235+1)& (0+255),w,b
  1369   0014CC  E109               	bnz	u1740
  1370   0014CE  0E03               	movlw	3
  1371   0014D0  5DF1               	subwf	main@i_1235& (0+255),w,b
  1372   0014D2  A0D8               	btfss	status,0,c
  1373   0014D4  EF6E  F00A         	goto	u1741
  1374   0014D8  EF70  F00A         	goto	u1740
  1375   0014DC                     u1741:
  1376   0014DC  EF4C  F00A         	goto	l3561
  1377   0014E0                     u1740:
  1378   0014E0                     
  1379                           ; BSR set to: 0
  1380                           ;main.c: 106:     clear_read = clear_read/4;
  1381   0014E0  C1DF  F056         	movff	main@clear_read,??_main
  1382   0014E4  C1E0  F057         	movff	main@clear_read+1,??_main+1
  1383   0014E8  90D8               	bcf	status,0,c
  1384   0014EA  3257               	rrcf	(??_main+1)^0,f,c
  1385   0014EC  3256               	rrcf	??_main^0,f,c
  1386   0014EE  90D8               	bcf	status,0,c
  1387   0014F0  3257               	rrcf	(??_main+1)^0,f,c
  1388   0014F2  3256               	rrcf	??_main^0,f,c
  1389   0014F4  C056  F1DF         	movff	??_main,main@clear_read
  1390   0014F8  C057  F1E0         	movff	??_main+1,main@clear_read+1
  1391   0014FC                     
  1392                           ; BSR set to: 0
  1393                           ;main.c: 108:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1394   0014FC  0E48               	movlw	low main@buf
  1395   0014FE  6F66               	movwf	sprintf@s& (0+255),b
  1396   001500  0E01               	movlw	high main@buf
  1397   001502  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1398   001504  0E1B               	movlw	low STR_1
  1399   001506  6F68               	movwf	sprintf@fmt& (0+255),b
  1400   001508  0E0E               	movlw	high STR_1
  1401   00150A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1402   00150C  C1DF  F06A         	movff	main@clear_read,?_sprintf+4
  1403   001510  C1E0  F06B         	movff	main@clear_read+1,?_sprintf+5
  1404   001514  ECC9  F017         	call	_sprintf	;wreg free
  1405   001518                     
  1406                           ;main.c: 109:     sendStringSerial4(buf);
  1407   001518  0E48               	movlw	low main@buf
  1408   00151A  6E05               	movwf	sendStringSerial4@string^0,c
  1409   00151C  0E01               	movlw	high main@buf
  1410   00151E  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1411   001520  EC0F  F019         	call	_sendStringSerial4	;wreg free
  1412   001524                     
  1413                           ;main.c: 111:     unsigned int clear_read_check = clear_read + 800;
  1414   001524  0E20               	movlw	32
  1415   001526  0101               	movlb	1	; () banked
  1416   001528  25DF               	addwf	main@clear_read& (0+255),w,b
  1417   00152A  0100               	movlb	0	; () banked
  1418   00152C  6FEB               	movwf	main@clear_read_check& (0+255),b
  1419   00152E  0E03               	movlw	3
  1420   001530  0101               	movlb	1	; () banked
  1421   001532  21E0               	addwfc	(main@clear_read+1)& (0+255),w,b
  1422   001534  0100               	movlb	0	; () banked
  1423   001536  6FEC               	movwf	(main@clear_read_check+1)& (0+255),b
  1424   001538                     
  1425                           ; BSR set to: 0
  1426                           ;main.c: 116:     fullSpeedAhead(&motorL, &motorR);
  1427   001538  0EE1               	movlw	low main@motorL
  1428   00153A  6E17               	movwf	fullSpeedAhead@mL^0,c
  1429   00153C  0E01               	movlw	high main@motorL
  1430   00153E  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1431   001540  0EEA               	movlw	low main@motorR
  1432   001542  6E19               	movwf	fullSpeedAhead@mR^0,c
  1433   001544  0E01               	movlw	high main@motorR
  1434   001546  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1435   001548  EC1B  F016         	call	_fullSpeedAhead	;wreg free
  1436   00154C                     l3579:
  1437                           
  1438                           ;main.c: 119:         if (TimerFlag == 1){
  1439   00154C  0101               	movlb	1	; () banked
  1440   00154E  05F7               	decf	_TimerFlag& (0+255),w,b
  1441   001550  11F8               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1442   001552  A4D8               	btfss	status,2,c
  1443   001554  EFAE  F00A         	goto	u1751
  1444   001558  EFB0  F00A         	goto	u1750
  1445   00155C                     u1751:
  1446   00155C  EFD9  F00A         	goto	l3591
  1447   001560                     u1750:
  1448   001560                     
  1449                           ; BSR set to: 1
  1450                           ;main.c: 120:             TimerCount += 1;
  1451   001560  0100               	movlb	0	; () banked
  1452   001562  4BF3               	infsnz	main@TimerCount& (0+255),f,b
  1453   001564  2BF4               	incf	(main@TimerCount+1)& (0+255),f,b
  1454   001566                     
  1455                           ; BSR set to: 0
  1456                           ;main.c: 121:             if (TimerCount == 10){LATHbits.LATH3=!LATHbits.LATH3; TimerCou
      +                          nt = 0;}
  1457   001566  0E0A               	movlw	10
  1458   001568  19F3               	xorwf	main@TimerCount& (0+255),w,b
  1459   00156A  11F4               	iorwf	(main@TimerCount+1)& (0+255),w,b
  1460   00156C  A4D8               	btfss	status,2,c
  1461   00156E  EFBB  F00A         	goto	u1761
  1462   001572  EFBD  F00A         	goto	u1760
  1463   001576                     u1761:
  1464   001576  EFD4  F00A         	goto	l3589
  1465   00157A                     u1760:
  1466   00157A                     
  1467                           ; BSR set to: 0
  1468   00157A  A680               	btfss	128,3,c	;volatile
  1469   00157C  EFC2  F00A         	goto	u1771
  1470   001580  EFC6  F00A         	goto	u1770
  1471   001584                     u1771:
  1472   001584  6A56               	clrf	??_main^0,c
  1473   001586  2A56               	incf	??_main^0,f,c
  1474   001588  EFC7  F00A         	goto	u1788
  1475   00158C                     u1770:
  1476   00158C  6A56               	clrf	??_main^0,c
  1477   00158E                     u1788:
  1478   00158E  4656               	rlncf	??_main^0,f,c
  1479   001590  4656               	rlncf	??_main^0,f,c
  1480   001592  4656               	rlncf	??_main^0,f,c
  1481   001594  5080               	movf	128,w,c	;volatile
  1482   001596  1856               	xorwf	??_main^0,w,c
  1483   001598  0BF7               	andlw	-9
  1484   00159A  1856               	xorwf	??_main^0,w,c
  1485   00159C  6E80               	movwf	128,c	;volatile
  1486   00159E  0E00               	movlw	0
  1487   0015A0  0100               	movlb	0	; () banked
  1488   0015A2  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1489   0015A4  0E00               	movlw	0
  1490   0015A6  6FF3               	movwf	main@TimerCount& (0+255),b
  1491   0015A8                     l3589:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 122:             TimerFlag = 0;
  1495   0015A8  0E00               	movlw	0
  1496   0015AA  0101               	movlb	1	; () banked
  1497   0015AC  6FF8               	movwf	(_TimerFlag+1)& (0+255),b
  1498   0015AE  0E00               	movlw	0
  1499   0015B0  6FF7               	movwf	_TimerFlag& (0+255),b
  1500   0015B2                     l3591:
  1501                           
  1502                           ; BSR set to: 1
  1503                           ;main.c: 124:         clear_read = color_read_Clear();
  1504   0015B2  ECF2  F017         	call	_color_read_Clear	;wreg free
  1505   0015B6  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1506   0015BA  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1507   0015BE                     
  1508                           ;main.c: 125:         if (clear_read > clear_read_check){
  1509   0015BE  0101               	movlb	1	; () banked
  1510   0015C0  51DF               	movf	main@clear_read& (0+255),w,b
  1511   0015C2  0100               	movlb	0	; () banked
  1512   0015C4  5DEB               	subwf	main@clear_read_check& (0+255),w,b
  1513   0015C6  0101               	movlb	1	; () banked
  1514   0015C8  51E0               	movf	(main@clear_read+1)& (0+255),w,b
  1515   0015CA  0100               	movlb	0	; () banked
  1516   0015CC  59EC               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1517   0015CE  B0D8               	btfsc	status,0,c
  1518   0015D0  EFEC  F00A         	goto	u1791
  1519   0015D4  EFEE  F00A         	goto	u1790
  1520   0015D8                     u1791:
  1521   0015D8  EF67  F00B         	goto	l3615
  1522   0015DC                     u1790:
  1523   0015DC                     
  1524                           ; BSR set to: 0
  1525                           ;main.c: 128:             ReturnHomeArray.TimerCount[CardCount] = TimerCount;
  1526   0015DC  90D8               	bcf	status,0,c
  1527   0015DE  35F5               	rlcf	main@CardCount& (0+255),w,b
  1528   0015E0  6ED9               	movwf	fsr2l,c
  1529   0015E2  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1530   0015E4  6EDA               	movwf	fsr2h,c
  1531   0015E6  0E36               	movlw	low main@ReturnHomeArray
  1532   0015E8  26D9               	addwf	fsr2l,f,c
  1533   0015EA  0E02               	movlw	high main@ReturnHomeArray
  1534   0015EC  22DA               	addwfc	fsr2h,f,c
  1535   0015EE  0EF4               	movlw	244
  1536   0015F0  6EDE               	movwf	postinc2,c
  1537   0015F2  0E01               	movlw	1
  1538   0015F4  6EDD               	movwf	postdec2,c
  1539   0015F6                     
  1540                           ; BSR set to: 0
  1541                           ;main.c: 129:             stop(&motorL, &motorR);
  1542   0015F6  0EE1               	movlw	low main@motorL
  1543   0015F8  6E17               	movwf	stop@mL^0,c
  1544   0015FA  0E01               	movlw	high main@motorL
  1545   0015FC  6E18               	movwf	(stop@mL+1)^0,c
  1546   0015FE  0EEA               	movlw	low main@motorR
  1547   001600  6E19               	movwf	stop@mR^0,c
  1548   001602  0E01               	movlw	high main@motorR
  1549   001604  6E1A               	movwf	(stop@mR+1)^0,c
  1550   001606  ECA5  F016         	call	_stop	;wreg free
  1551   00160A                     
  1552                           ;main.c: 131:             sprintf(buf, "Timercount %d \n", ReturnHomeArray.TimerCount[Ca
      +                          rdCount]);
  1553   00160A  0E48               	movlw	low main@buf
  1554   00160C  0100               	movlb	0	; () banked
  1555   00160E  6F66               	movwf	sprintf@s& (0+255),b
  1556   001610  0E01               	movlw	high main@buf
  1557   001612  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1558   001614  0E47               	movlw	low STR_2
  1559   001616  6F68               	movwf	sprintf@fmt& (0+255),b
  1560   001618  0E0E               	movlw	high STR_2
  1561   00161A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1562   00161C  90D8               	bcf	status,0,c
  1563   00161E  35F5               	rlcf	main@CardCount& (0+255),w,b
  1564   001620  6ED9               	movwf	fsr2l,c
  1565   001622  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1566   001624  6EDA               	movwf	fsr2h,c
  1567   001626  0E36               	movlw	low main@ReturnHomeArray
  1568   001628  26D9               	addwf	fsr2l,f,c
  1569   00162A  0E02               	movlw	high main@ReturnHomeArray
  1570   00162C  22DA               	addwfc	fsr2h,f,c
  1571   00162E  CFDE F06A          	movff	postinc2,?_sprintf+4
  1572   001632  CFDD F06B          	movff	postdec2,?_sprintf+5
  1573   001636  ECC9  F017         	call	_sprintf	;wreg free
  1574   00163A                     
  1575                           ;main.c: 132:             sendStringSerial4(buf);
  1576   00163A  0E48               	movlw	low main@buf
  1577   00163C  6E05               	movwf	sendStringSerial4@string^0,c
  1578   00163E  0E01               	movlw	high main@buf
  1579   001640  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1580   001642  EC0F  F019         	call	_sendStringSerial4	;wreg free
  1581   001646                     
  1582                           ;main.c: 135:             card = card_response(buf, &red_read, &green_read, &blue_read, 
      +                          expected_values, card, &motorL, &motorR, ReturnHomeArray);
  1583   001646  0E48               	movlw	low main@buf
  1584   001648  0100               	movlb	0	; () banked
  1585   00164A  6FA0               	movwf	card_response@buf& (0+255),b
  1586   00164C  0E01               	movlw	high main@buf
  1587   00164E  6FA1               	movwf	(card_response@buf+1)& (0+255),b
  1588   001650  0EF7               	movlw	low main@red_read
  1589   001652  6FA2               	movwf	card_response@red_read& (0+255),b
  1590   001654  0E00               	movlw	high main@red_read
  1591   001656  6FA3               	movwf	(card_response@red_read+1)& (0+255),b
  1592   001658  0EF9               	movlw	low main@green_read
  1593   00165A  6FA4               	movwf	card_response@green_read& (0+255),b
  1594   00165C  0E00               	movlw	high main@green_read
  1595   00165E  6FA5               	movwf	(card_response@green_read+1)& (0+255),b
  1596   001660  0EFB               	movlw	low main@blue_read
  1597   001662  6FA6               	movwf	card_response@blue_read& (0+255),b
  1598   001664  0E00               	movlw	high main@blue_read
  1599   001666  6FA7               	movwf	(card_response@blue_read+1)& (0+255),b
  1600   001668  0E00               	movlw	low main@expected_values
  1601   00166A  6FA8               	movwf	card_response@expected_values& (0+255),b
  1602   00166C  0E02               	movlw	high main@expected_values
  1603   00166E  6FA9               	movwf	(card_response@expected_values+1)& (0+255),b
  1604   001670  C0EE  F0AA         	movff	main@card,card_response@card
  1605   001674  0EE1               	movlw	low main@motorL
  1606   001676  6FAB               	movwf	card_response@mL& (0+255),b
  1607   001678  0E01               	movlw	high main@motorL
  1608   00167A  6FAC               	movwf	(card_response@mL+1)& (0+255),b
  1609   00167C  0EEA               	movlw	low main@motorR
  1610   00167E  6FAD               	movwf	card_response@mR& (0+255),b
  1611   001680  0E01               	movlw	high main@motorR
  1612   001682  6FAE               	movwf	(card_response@mR+1)& (0+255),b
  1613   001684  EE22  F036         	lfsr	2,main@ReturnHomeArray
  1614   001688  EE00  F0AF         	lfsr	0,card_response@ReturnHomeArray
  1615   00168C  0E3B               	movlw	59
  1616   00168E                     u1801:
  1617   00168E  CFDB FFEB          	movff	plusw2,plusw0
  1618   001692  06E8               	decf	wreg,f,c
  1619   001694  E2FC               	bc	u1801
  1620   001696  ECBA  F013         	call	_card_response	;wreg free
  1621   00169A  0100               	movlb	0	; () banked
  1622   00169C  6FEE               	movwf	main@card& (0+255),b
  1623   00169E                     
  1624                           ; BSR set to: 0
  1625                           ;main.c: 137:             ReturnHomeArray.card[CardCount] = card;
  1626   00169E  0E36               	movlw	low main@ReturnHomeArray
  1627   0016A0  25F5               	addwf	main@CardCount& (0+255),w,b
  1628   0016A2  6ED9               	movwf	fsr2l,c
  1629   0016A4  0E02               	movlw	high main@ReturnHomeArray
  1630   0016A6  21F6               	addwfc	(main@CardCount+1)& (0+255),w,b
  1631   0016A8  6EDA               	movwf	fsr2h,c
  1632   0016AA  C0EE  FFDF         	movff	main@card,indf2
  1633   0016AE                     
  1634                           ; BSR set to: 0
  1635                           ;main.c: 139:             CardCount += 1;
  1636   0016AE  4BF5               	infsnz	main@CardCount& (0+255),f,b
  1637   0016B0  2BF6               	incf	(main@CardCount+1)& (0+255),f,b
  1638   0016B2                     
  1639                           ; BSR set to: 0
  1640                           ;main.c: 141:             TimerCount = 0;
  1641   0016B2  0E00               	movlw	0
  1642   0016B4  6FF4               	movwf	(main@TimerCount+1)& (0+255),b
  1643   0016B6  0E00               	movlw	0
  1644   0016B8  6FF3               	movwf	main@TimerCount& (0+255),b
  1645   0016BA                     
  1646                           ; BSR set to: 0
  1647                           ;main.c: 142:             fullSpeedAhead(&motorL, &motorR);
  1648   0016BA  0EE1               	movlw	low main@motorL
  1649   0016BC  6E17               	movwf	fullSpeedAhead@mL^0,c
  1650   0016BE  0E01               	movlw	high main@motorL
  1651   0016C0  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1652   0016C2  0EEA               	movlw	low main@motorR
  1653   0016C4  6E19               	movwf	fullSpeedAhead@mR^0,c
  1654   0016C6  0E01               	movlw	high main@motorR
  1655   0016C8  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1656   0016CA  EC1B  F016         	call	_fullSpeedAhead	;wreg free
  1657   0016CE                     l3615:
  1658                           
  1659                           ;main.c: 145:         red_read = color_read_Red();
  1660   0016CE  EC1A  F018         	call	_color_read_Red	;wreg free
  1661   0016D2  C008  F0F7         	movff	?_color_read_Red,main@red_read
  1662   0016D6  C009  F0F8         	movff	?_color_read_Red+1,main@red_read+1
  1663   0016DA                     
  1664                           ;main.c: 146:         blue_read = color_read_Blue();
  1665   0016DA  EC6A  F018         	call	_color_read_Blue	;wreg free
  1666   0016DE  C008  F0FB         	movff	?_color_read_Blue,main@blue_read
  1667   0016E2  C009  F0FC         	movff	?_color_read_Blue+1,main@blue_read+1
  1668   0016E6                     
  1669                           ;main.c: 147:         green_read = color_read_Green();
  1670   0016E6  EC42  F018         	call	_color_read_Green	;wreg free
  1671   0016EA  C008  F0F9         	movff	?_color_read_Green,main@green_read
  1672   0016EE  C009  F0FA         	movff	?_color_read_Green+1,main@green_read+1
  1673   0016F2                     
  1674                           ;main.c: 148:         clear_read = color_read_Clear();
  1675   0016F2  ECF2  F017         	call	_color_read_Clear	;wreg free
  1676   0016F6  C008  F1DF         	movff	?_color_read_Clear,main@clear_read
  1677   0016FA  C009  F1E0         	movff	?_color_read_Clear+1,main@clear_read+1
  1678   0016FE                     
  1679                           ;main.c: 151:         sprintf(buf, "Raw %d, %d, %d, %d \n", red_read, green_read, blue_r
      +                          ead, clear_read);
  1680   0016FE  0E48               	movlw	low main@buf
  1681   001700  0100               	movlb	0	; () banked
  1682   001702  6F66               	movwf	sprintf@s& (0+255),b
  1683   001704  0E01               	movlw	high main@buf
  1684   001706  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1685   001708  0E32               	movlw	low STR_3
  1686   00170A  6F68               	movwf	sprintf@fmt& (0+255),b
  1687   00170C  0E0E               	movlw	high STR_3
  1688   00170E  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1689   001710  C0F7  F06A         	movff	main@red_read,?_sprintf+4
  1690   001714  C0F8  F06B         	movff	main@red_read+1,?_sprintf+5
  1691   001718  C0F9  F06C         	movff	main@green_read,?_sprintf+6
  1692   00171C  C0FA  F06D         	movff	main@green_read+1,?_sprintf+7
  1693   001720  C0FB  F06E         	movff	main@blue_read,?_sprintf+8
  1694   001724  C0FC  F06F         	movff	main@blue_read+1,?_sprintf+9
  1695   001728  C1DF  F070         	movff	main@clear_read,?_sprintf+10
  1696   00172C  C1E0  F071         	movff	main@clear_read+1,?_sprintf+11
  1697   001730  ECC9  F017         	call	_sprintf	;wreg free
  1698   001734                     
  1699                           ;main.c: 152:         sendStringSerial4(buf);
  1700   001734  0E48               	movlw	low main@buf
  1701   001736  6E05               	movwf	sendStringSerial4@string^0,c
  1702   001738  0E01               	movlw	high main@buf
  1703   00173A  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1704   00173C  EC0F  F019         	call	_sendStringSerial4	;wreg free
  1705   001740                     
  1706                           ;main.c: 153:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1707   001740  0E29               	movlw	41
  1708   001742  6E57               	movwf	(??_main+1)^0,c
  1709   001744  0E96               	movlw	150
  1710   001746  6E56               	movwf	??_main^0,c
  1711   001748  0E7F               	movlw	127
  1712   00174A                     u1847:
  1713   00174A  2EE8               	decfsz	wreg,f,c
  1714   00174C  D7FE               	bra	u1847
  1715   00174E  2E56               	decfsz	??_main^0,f,c
  1716   001750  D7FC               	bra	u1847
  1717   001752  2E57               	decfsz	(??_main+1)^0,f,c
  1718   001754  D7FA               	bra	u1847
  1719   001756  F000               	nop	
  1720   001758                     
  1721                           ;main.c: 154:          LATHbits.LATH3=!LATHbits.LATH3;
  1722   001758  A680               	btfss	128,3,c	;volatile
  1723   00175A  EFB1  F00B         	goto	u1811
  1724   00175E  EFB5  F00B         	goto	u1810
  1725   001762                     u1811:
  1726   001762  6A56               	clrf	??_main^0,c
  1727   001764  2A56               	incf	??_main^0,f,c
  1728   001766  EFB6  F00B         	goto	u1828
  1729   00176A                     u1810:
  1730   00176A  6A56               	clrf	??_main^0,c
  1731   00176C                     u1828:
  1732   00176C  4656               	rlncf	??_main^0,f,c
  1733   00176E  4656               	rlncf	??_main^0,f,c
  1734   001770  4656               	rlncf	??_main^0,f,c
  1735   001772  5080               	movf	128,w,c	;volatile
  1736   001774  1856               	xorwf	??_main^0,w,c
  1737   001776  0BF7               	andlw	-9
  1738   001778  1856               	xorwf	??_main^0,w,c
  1739   00177A  6E80               	movwf	128,c	;volatile
  1740   00177C  EFA6  F00A         	goto	l3579
  1741   001780  EF2E  F000         	goto	start
  1742   001784                     __end_of_main:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _initUSART4 *****************
  1746 ;; Defined at:
  1747 ;;		line 6 in file "serial.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text1
  1776   00333E                     __ptext1:
  1777                           	callstack 0
  1778   00333E                     _initUSART4:
  1779                           	callstack 29
  1780   00333E                     
  1781                           ;serial.c: 10:     RC0PPS = 0x12;
  1782   00333E  0E12               	movlw	18
  1783   003340  010E               	movlb	14	; () banked
  1784   003342  6F62               	movwf	98,b	;volatile
  1785                           
  1786                           ;serial.c: 11:     RX4PPS = 0x11;
  1787   003344  0E11               	movlw	17
  1788   003346  6F15               	movwf	21,b	;volatile
  1789   003348                     
  1790                           ; BSR set to: 14
  1791                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1792   003348  8283               	bsf	131,1,c	;volatile
  1793   00334A                     
  1794                           ; BSR set to: 14
  1795                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1796   00334A  97E9               	bcf	233,3,b	;volatile
  1797   00334C                     
  1798                           ; BSR set to: 14
  1799                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1800   00334C  95E8               	bcf	232,2,b	;volatile
  1801                           
  1802                           ;serial.c: 17:     SP4BRGL = 51;
  1803   00334E  0E33               	movlw	51
  1804   003350  6FE5               	movwf	229,b	;volatile
  1805                           
  1806                           ;serial.c: 18:     SP4BRGH = 0;
  1807   003352  0E00               	movlw	0
  1808   003354  6FE6               	movwf	230,b	;volatile
  1809   003356                     
  1810                           ; BSR set to: 14
  1811                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1812   003356  89E7               	bsf	231,4,b	;volatile
  1813   003358                     
  1814                           ; BSR set to: 14
  1815                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1816   003358  8BE8               	bsf	232,5,b	;volatile
  1817   00335A                     
  1818                           ; BSR set to: 14
  1819                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1820   00335A  8FE7               	bsf	231,7,b	;volatile
  1821   00335C                     
  1822                           ; BSR set to: 14
  1823   00335C  0012               	return		;funcret
  1824   00335E                     __end_of_initUSART4:
  1825                           	callstack 0
  1826                           
  1827 ;; *************** function _initDCmotorsPWM *****************
  1828 ;; Defined at:
  1829 ;;		line 6 in file "dc_motor.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used: 1
  1849 ;; Hardware stack levels required when called: 1
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_main
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text2
  1858   002CC2                     __ptext2:
  1859                           	callstack 0
  1860   002CC2                     _initDCmotorsPWM:
  1861                           	callstack 29
  1862   002CC2                     
  1863                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1864   002CC2  9485               	bcf	133,2,c	;volatile
  1865                           
  1866                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1867   002CC4  9885               	bcf	133,4,c	;volatile
  1868                           
  1869                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1870   002CC6  9E83               	bcf	131,7,c	;volatile
  1871                           
  1872                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1873   002CC8  9C87               	bcf	135,6,c	;volatile
  1874   002CCA                     
  1875                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1876   002CCA  0E05               	movlw	5
  1877   002CCC  010E               	movlb	14	; () banked
  1878   002CCE  6F74               	movwf	116,b	;volatile
  1879                           
  1880                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1881   002CD0  0E06               	movlw	6
  1882   002CD2  6F76               	movwf	118,b	;volatile
  1883                           
  1884                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1885   002CD4  0E07               	movlw	7
  1886   002CD6  6F69               	movwf	105,b	;volatile
  1887                           
  1888                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1889   002CD8  0E08               	movlw	8
  1890   002CDA  6F88               	movwf	136,b	;volatile
  1891                           
  1892                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1893   002CDC  50BD               	movf	189,w,c	;volatile
  1894   002CDE  0B8F               	andlw	-113
  1895   002CE0  0940               	iorlw	64
  1896   002CE2  6EBD               	movwf	189,c	;volatile
  1897                           
  1898                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1899   002CE4  0EE0               	movlw	-32
  1900   002CE6  16BE               	andwf	190,f,c	;volatile
  1901                           
  1902                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1903   002CE8  50BF               	movf	191,w,c	;volatile
  1904   002CEA  0BF0               	andlw	-16
  1905   002CEC  0901               	iorlw	1
  1906   002CEE  6EBF               	movwf	191,c	;volatile
  1907                           
  1908                           ;dc_motor.c: 26:     T2PR=99;
  1909   002CF0  0E63               	movlw	99
  1910   002CF2  6EBC               	movwf	188,c	;volatile
  1911   002CF4                     
  1912                           ; BSR set to: 14
  1913                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1914   002CF4  8EBD               	bsf	189,7,c	;volatile
  1915                           
  1916                           ;dc_motor.c: 31:     CCPR1H=0;
  1917   002CF6  0E00               	movlw	0
  1918   002CF8  6EAA               	movwf	170,c	;volatile
  1919                           
  1920                           ;dc_motor.c: 32:     CCPR2H=0;
  1921   002CFA  0E00               	movlw	0
  1922   002CFC  6EA6               	movwf	166,c	;volatile
  1923                           
  1924                           ;dc_motor.c: 33:     CCPR3H=0;
  1925   002CFE  0E00               	movlw	0
  1926   002D00  010F               	movlb	15	; () banked
  1927   002D02  6F25               	movwf	37,b	;volatile
  1928                           
  1929                           ;dc_motor.c: 34:     CCPR4H=0;
  1930   002D04  0E00               	movlw	0
  1931   002D06  6F21               	movwf	33,b	;volatile
  1932                           
  1933                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1934   002D08  0EFC               	movlw	-4
  1935   002D0A  16AD               	andwf	173,f,c	;volatile
  1936                           
  1937                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1938   002D0C  0EF3               	movlw	-13
  1939   002D0E  16AD               	andwf	173,f,c	;volatile
  1940                           
  1941                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1942   002D10  0ECF               	movlw	-49
  1943   002D12  16AD               	andwf	173,f,c	;volatile
  1944                           
  1945                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1946   002D14  0E3F               	movlw	-193
  1947   002D16  16AD               	andwf	173,f,c	;volatile
  1948   002D18                     
  1949                           ; BSR set to: 15
  1950                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1951   002D18  88AB               	bsf	171,4,c	;volatile
  1952                           
  1953                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1954   002D1A  50AB               	movf	171,w,c	;volatile
  1955   002D1C  0BF0               	andlw	-16
  1956   002D1E  090C               	iorlw	12
  1957   002D20  6EAB               	movwf	171,c	;volatile
  1958   002D22                     
  1959                           ; BSR set to: 15
  1960                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1961   002D22  8EAB               	bsf	171,7,c	;volatile
  1962   002D24                     
  1963                           ; BSR set to: 15
  1964                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1965   002D24  88A7               	bsf	167,4,c	;volatile
  1966                           
  1967                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1968   002D26  50A7               	movf	167,w,c	;volatile
  1969   002D28  0BF0               	andlw	-16
  1970   002D2A  090C               	iorlw	12
  1971   002D2C  6EA7               	movwf	167,c	;volatile
  1972   002D2E                     
  1973                           ; BSR set to: 15
  1974                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1975   002D2E  8EA7               	bsf	167,7,c	;volatile
  1976   002D30                     
  1977                           ; BSR set to: 15
  1978                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1979   002D30  8926               	bsf	38,4,b	;volatile
  1980                           
  1981                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1982   002D32  5126               	movf	38,w,b	;volatile
  1983   002D34  0BF0               	andlw	-16
  1984   002D36  090C               	iorlw	12
  1985   002D38  6F26               	movwf	38,b	;volatile
  1986   002D3A                     
  1987                           ; BSR set to: 15
  1988                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1989   002D3A  8F26               	bsf	38,7,b	;volatile
  1990   002D3C                     
  1991                           ; BSR set to: 15
  1992                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1993   002D3C  8922               	bsf	34,4,b	;volatile
  1994                           
  1995                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1996   002D3E  5122               	movf	34,w,b	;volatile
  1997   002D40  0BF0               	andlw	-16
  1998   002D42  090C               	iorlw	12
  1999   002D44  6F22               	movwf	34,b	;volatile
  2000   002D46                     
  2001                           ; BSR set to: 15
  2002                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2003   002D46  8F22               	bsf	34,7,b	;volatile
  2004   002D48                     
  2005                           ; BSR set to: 15
  2006   002D48  0012               	return		;funcret
  2007   002D4A                     __end_of_initDCmotorsPWM:
  2008                           	callstack 0
  2009                           
  2010 ;; *************** function _color_read_Clear *****************
  2011 ;; Defined at:
  2012 ;;		line 71 in file "color.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  tmp             2   12[COMRAM] unsigned int 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  2    7[COMRAM] unsigned int 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;Total ram usage:        7 bytes
  2031 ;; Hardware stack levels used: 1
  2032 ;; Hardware stack levels required when called: 3
  2033 ;; This function calls:
  2034 ;;		_I2C_2_Master_Read
  2035 ;;		_I2C_2_Master_RepStart
  2036 ;;		_I2C_2_Master_Start
  2037 ;;		_I2C_2_Master_Stop
  2038 ;;		_I2C_2_Master_Write
  2039 ;; This function is called by:
  2040 ;;		_main
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text3
  2045   002FE4                     __ptext3:
  2046                           	callstack 0
  2047   002FE4                     _color_read_Clear:
  2048                           	callstack 27
  2049   002FE4  ECD6  F019         	call	_I2C_2_Master_Start	;wreg free
  2050   002FE8  0E52               	movlw	82
  2051   002FEA  ECCB  F019         	call	_I2C_2_Master_Write
  2052   002FEE  0EB4               	movlw	180
  2053   002FF0  ECCB  F019         	call	_I2C_2_Master_Write
  2054   002FF4  ECDB  F019         	call	_I2C_2_Master_RepStart	;wreg free
  2055   002FF8  0E53               	movlw	83
  2056   002FFA  ECCB  F019         	call	_I2C_2_Master_Write
  2057   002FFE  0E01               	movlw	1
  2058   003000  ECB4  F018         	call	_I2C_2_Master_Read
  2059   003004  6E0A               	movwf	??_color_read_Clear^0,c
  2060   003006  500A               	movf	??_color_read_Clear^0,w,c
  2061   003008  6E0D               	movwf	color_read_Clear@tmp^0,c
  2062   00300A  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  2063   00300C  0E00               	movlw	0
  2064   00300E  ECB4  F018         	call	_I2C_2_Master_Read
  2065   003012  6E0A               	movwf	??_color_read_Clear^0,c
  2066   003014  500A               	movf	??_color_read_Clear^0,w,c
  2067   003016  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  2068   003018  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  2069   00301A  500D               	movf	color_read_Clear@tmp^0,w,c
  2070   00301C  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  2071   00301E  6E0D               	movwf	color_read_Clear@tmp^0,c
  2072   003020  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  2073   003022  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  2074   003024  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  2075   003026  ECD1  F019         	call	_I2C_2_Master_Stop	;wreg free
  2076   00302A  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  2077   00302E  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2078   003032  0012               	return		;funcret
  2079   003034                     __end_of_color_read_Clear:
  2080                           	callstack 0
  2081                           
  2082 ;; *************** function _color_click_init *****************
  2083 ;; Defined at:
  2084 ;;		line 5 in file "color.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2102 ;;Total ram usage:        1 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; Hardware stack levels required when called: 4
  2105 ;; This function calls:
  2106 ;;		_I2C_2_Master_Init
  2107 ;;		_color_writetoaddr
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text4
  2114   0031EA                     __ptext4:
  2115                           	callstack 0
  2116   0031EA                     _color_click_init:
  2117                           	callstack 26
  2118   0031EA  EC3D  F019         	call	_I2C_2_Master_Init	;wreg free
  2119   0031EE  0E01               	movlw	1
  2120   0031F0  6E06               	movwf	color_writetoaddr@value^0,c
  2121   0031F2  0E00               	movlw	0
  2122   0031F4  ECAF  F019         	call	_color_writetoaddr
  2123   0031F8  0E3F               	movlw	63
  2124   0031FA  6E08               	movwf	??_color_click_init^0,c
  2125   0031FC  0E55               	movlw	85
  2126   0031FE                     u1857:
  2127   0031FE  2EE8               	decfsz	wreg,f,c
  2128   003200  D7FE               	bra	u1857
  2129   003202  2E08               	decfsz	??_color_click_init^0,f,c
  2130   003204  D7FC               	bra	u1857
  2131   003206  F000               	nop	
  2132   003208  0E03               	movlw	3
  2133   00320A  6E06               	movwf	color_writetoaddr@value^0,c
  2134   00320C  0E00               	movlw	0
  2135   00320E  ECAF  F019         	call	_color_writetoaddr
  2136   003212  0ED5               	movlw	213
  2137   003214  6E06               	movwf	color_writetoaddr@value^0,c
  2138   003216  0E01               	movlw	1
  2139   003218  ECAF  F019         	call	_color_writetoaddr
  2140   00321C  0012               	return		;funcret
  2141   00321E                     __end_of_color_click_init:
  2142                           	callstack 0
  2143                           
  2144 ;; *************** function _color_writetoaddr *****************
  2145 ;; Defined at:
  2146 ;;		line 21 in file "color.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  address         1    wreg     unsigned char 
  2149 ;;  value           1    5[COMRAM] unsigned char 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  address         1    6[COMRAM] unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0, cstack
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2165 ;;Total ram usage:        2 bytes
  2166 ;; Hardware stack levels used: 1
  2167 ;; Hardware stack levels required when called: 3
  2168 ;; This function calls:
  2169 ;;		_I2C_2_Master_Start
  2170 ;;		_I2C_2_Master_Stop
  2171 ;;		_I2C_2_Master_Write
  2172 ;; This function is called by:
  2173 ;;		_color_click_init
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text5
  2178   00335E                     __ptext5:
  2179                           	callstack 0
  2180   00335E                     _color_writetoaddr:
  2181                           	callstack 26
  2182                           
  2183                           ;incstack = 0
  2184                           ;color_writetoaddr@address stored from wreg
  2185   00335E  6E07               	movwf	color_writetoaddr@address^0,c
  2186   003360  ECD6  F019         	call	_I2C_2_Master_Start	;wreg free
  2187   003364  0E52               	movlw	82
  2188   003366  ECCB  F019         	call	_I2C_2_Master_Write
  2189   00336A  5007               	movf	color_writetoaddr@address^0,w,c
  2190   00336C  0980               	iorlw	128
  2191   00336E  ECCB  F019         	call	_I2C_2_Master_Write
  2192   003372  5006               	movf	color_writetoaddr@value^0,w,c
  2193   003374  ECCB  F019         	call	_I2C_2_Master_Write
  2194   003378  ECD1  F019         	call	_I2C_2_Master_Stop	;wreg free
  2195   00337C  0012               	return		;funcret
  2196   00337E                     __end_of_color_writetoaddr:
  2197                           	callstack 0
  2198                           
  2199 ;; *************** function _I2C_2_Master_Init *****************
  2200 ;; Defined at:
  2201 ;;		line 4 in file "i2c.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;Total ram usage:        0 bytes
  2220 ;; Hardware stack levels used: 1
  2221 ;; Hardware stack levels required when called: 1
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		_color_click_init
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text6
  2231   00327A                     __ptext6:
  2232                           	callstack 0
  2233   00327A                     _I2C_2_Master_Init:
  2234                           	callstack 28
  2235   00327A                     
  2236                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2237   00327A  010E               	movlb	14	; () banked
  2238   00327C  51D9               	movf	217,w,b	;volatile
  2239   00327E  0BF0               	andlw	-16
  2240   003280  0908               	iorlw	8
  2241   003282  6FD9               	movwf	217,b	;volatile
  2242   003284                     
  2243                           ; BSR set to: 14
  2244                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2245   003284  8BD9               	bsf	217,5,b	;volatile
  2246                           
  2247                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2248   003286  0E9F               	movlw	159
  2249   003288  6FD6               	movwf	214,b	;volatile
  2250   00328A                     
  2251                           ; BSR set to: 14
  2252                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2253   00328A  8A84               	bsf	132,5,c	;volatile
  2254   00328C                     
  2255                           ; BSR set to: 14
  2256                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2257   00328C  8C84               	bsf	132,6,c	;volatile
  2258   00328E                     
  2259                           ; BSR set to: 14
  2260                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2261   00328E  9BA7               	bcf	167,5,b	;volatile
  2262   003290                     
  2263                           ; BSR set to: 14
  2264                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2265   003290  9DA7               	bcf	167,6,b	;volatile
  2266                           
  2267                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2268   003292  0E1D               	movlw	29
  2269   003294  6F1D               	movwf	29,b	;volatile
  2270                           
  2271                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2272   003296  0E1E               	movlw	30
  2273   003298  6F1C               	movwf	28,b	;volatile
  2274                           
  2275                           ;i2c.c: 18:   RD5PPS=0x1C;
  2276   00329A  0E1C               	movlw	28
  2277   00329C  6F6F               	movwf	111,b	;volatile
  2278                           
  2279                           ;i2c.c: 19:   RD6PPS=0x1B;
  2280   00329E  0E1B               	movlw	27
  2281   0032A0  6F70               	movwf	112,b	;volatile
  2282   0032A2                     
  2283                           ; BSR set to: 14
  2284   0032A2  0012               	return		;funcret
  2285   0032A4                     __end_of_I2C_2_Master_Init:
  2286                           	callstack 0
  2287                           
  2288 ;; *************** function _card_response *****************
  2289 ;; Defined at:
  2290 ;;		line 262 in file "colour_identify.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  buf             2   64[BANK0 ] PTR unsigned char 
  2293 ;;		 -> main@buf(150), 
  2294 ;;  red_read        2   66[BANK0 ] PTR unsigned int 
  2295 ;;		 -> main@red_read(2), 
  2296 ;;  green_read      2   68[BANK0 ] PTR unsigned int 
  2297 ;;		 -> main@green_read(2), 
  2298 ;;  blue_read       2   70[BANK0 ] PTR unsigned int 
  2299 ;;		 -> main@blue_read(2), 
  2300 ;;  expected_val    2   72[BANK0 ] PTR unsigned int [9]
  2301 ;;		 -> main@expected_values(54), 
  2302 ;;  card            1   74[BANK0 ] enum E14551
  2303 ;;  mL              2   75[BANK0 ] PTR struct DC_motor
  2304 ;;		 -> main@motorL(9), 
  2305 ;;  mR              2   77[BANK0 ] PTR struct DC_motor
  2306 ;;		 -> main@motorR(9), 
  2307 ;;  ReturnHomeAr   60   79[BANK0 ] struct HomeStored
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  normalised_v   54    0[BANK1 ] unsigned int [9][3]
  2310 ;;  master_close   18   54[BANK1 ] unsigned int [9]
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      enum E14569
  2313 ;; Registers used:
  2314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2320 ;;      Params:         0      75       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Locals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;      Totals:         0      75      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2324 ;;Total ram usage:      147 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; Hardware stack levels required when called: 9
  2327 ;; This function calls:
  2328 ;;		_collect_avg_readings
  2329 ;;		_determine_card
  2330 ;;		_make_master_closeness
  2331 ;;		_motor_response
  2332 ;;		_normalise_readings
  2333 ;;		_sendStringSerial4
  2334 ;;		_sprintf
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text7
  2341   002774                     __ptext7:
  2342                           	callstack 0
  2343   002774                     _card_response:
  2344                           	callstack 21
  2345   002774                     
  2346                           ;colour_identify.c: 266:     unsigned int normalised_values[3][9];;colour_identify.c: 26
      +                          7:     unsigned int master_closeness[9];;colour_identify.c: 269:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  2347   002774  C0A2  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  2348   002778  C0A3  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2349   00277C  C0A4  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  2350   002780  C0A5  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2351   002784  C0A6  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2352   002788  C0A7  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2353   00278C  ECEC  F00F         	call	_collect_avg_readings	;wreg free
  2354   002790                     
  2355                           ;colour_identify.c: 270:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  2356   002790  C0A0  F066         	movff	card_response@buf,sprintf@s
  2357   002794  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  2358   002798  0E01               	movlw	low STR_4
  2359   00279A  0100               	movlb	0	; () banked
  2360   00279C  6F68               	movwf	sprintf@fmt& (0+255),b
  2361   00279E  0E0E               	movlw	high STR_4
  2362   0027A0  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2363   0027A2  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  2364   0027A6  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  2365   0027AA  CFDE F06A          	movff	postinc2,?_sprintf+4
  2366   0027AE  CFDD F06B          	movff	postdec2,?_sprintf+5
  2367   0027B2  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  2368   0027B6  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  2369   0027BA  CFDE F06C          	movff	postinc2,?_sprintf+6
  2370   0027BE  CFDD F06D          	movff	postdec2,?_sprintf+7
  2371   0027C2  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  2372   0027C6  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  2373   0027CA  CFDE F06E          	movff	postinc2,?_sprintf+8
  2374   0027CE  CFDD F06F          	movff	postdec2,?_sprintf+9
  2375   0027D2  ECC9  F017         	call	_sprintf	;wreg free
  2376   0027D6                     
  2377                           ;colour_identify.c: 271:     sendStringSerial4(buf);
  2378   0027D6  C0A0  F005         	movff	card_response@buf,sendStringSerial4@string
  2379   0027DA  C0A1  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2380   0027DE  EC0F  F019         	call	_sendStringSerial4	;wreg free
  2381   0027E2                     
  2382                           ;colour_identify.c: 273:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  2383   0027E2  C0A0  F01A         	movff	card_response@buf,normalise_readings@buf
  2384   0027E6  C0A1  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  2385   0027EA  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  2386   0027EE  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  2387   0027F2  CFDE F01C          	movff	postinc2,normalise_readings@red_read
  2388   0027F6  CFDD F01D          	movff	postdec2,normalise_readings@red_read+1
  2389   0027FA  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  2390   0027FE  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  2391   002802  CFDE F01E          	movff	postinc2,normalise_readings@green_read
  2392   002806  CFDD F01F          	movff	postdec2,normalise_readings@green_read+1
  2393   00280A  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  2394   00280E  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  2395   002812  CFDE F020          	movff	postinc2,normalise_readings@blue_read
  2396   002816  CFDD F021          	movff	postdec2,normalise_readings@blue_read+1
  2397   00281A  C0A8  F022         	movff	card_response@expected_values,normalise_readings@expected_values
  2398   00281E  C0A9  F023         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2399   002822  0E00               	movlw	low card_response@normalised_values
  2400   002824  6E24               	movwf	normalise_readings@normalised_values^0,c
  2401   002826  0E01               	movlw	high card_response@normalised_values
  2402   002828  6E25               	movwf	(normalise_readings@normalised_values+1)^0,c
  2403   00282A  ECD8  F00E         	call	_normalise_readings	;wreg free
  2404   00282E                     
  2405                           ;colour_identify.c: 275:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  2406   00282E  C0A0  F011         	movff	card_response@buf,make_master_closeness@buf
  2407   002832  C0A1  F012         	movff	card_response@buf+1,make_master_closeness@buf+1
  2408   002836  0E00               	movlw	low card_response@normalised_values
  2409   002838  6E13               	movwf	make_master_closeness@normalised_values^0,c
  2410   00283A  0E01               	movlw	high card_response@normalised_values
  2411   00283C  6E14               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2412   00283E  0E36               	movlw	low card_response@master_closeness
  2413   002840  6E15               	movwf	make_master_closeness@master_closeness^0,c
  2414   002842  0E01               	movlw	high card_response@master_closeness
  2415   002844  6E16               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2416   002846  EC58  F014         	call	_make_master_closeness	;wreg free
  2417   00284A                     
  2418                           ;colour_identify.c: 277:     card = determine_card(master_closeness);
  2419   00284A  0E36               	movlw	low card_response@master_closeness
  2420   00284C  6E04               	movwf	determine_card@master_closeness^0,c
  2421   00284E  0E01               	movlw	high card_response@master_closeness
  2422   002850  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  2423   002852  ECE8  F016         	call	_determine_card	;wreg free
  2424   002856  0100               	movlb	0	; () banked
  2425   002858  6FAA               	movwf	card_response@card& (0+255),b
  2426   00285A                     
  2427                           ; BSR set to: 0
  2428                           ;colour_identify.c: 278:     sprintf(buf, "CARD %d \n", card);
  2429   00285A  C0A0  F066         	movff	card_response@buf,sprintf@s
  2430   00285E  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  2431   002862  0E57               	movlw	low STR_5
  2432   002864  6F68               	movwf	sprintf@fmt& (0+255),b
  2433   002866  0E0E               	movlw	high STR_5
  2434   002868  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2435   00286A  C0AA  F06A         	movff	card_response@card,?_sprintf+4
  2436   00286E  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2437   002870  ECC9  F017         	call	_sprintf	;wreg free
  2438   002874                     
  2439                           ;colour_identify.c: 279:     sendStringSerial4(buf);
  2440   002874  C0A0  F005         	movff	card_response@buf,sendStringSerial4@string
  2441   002878  C0A1  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2442   00287C  EC0F  F019         	call	_sendStringSerial4	;wreg free
  2443   002880                     
  2444                           ;colour_identify.c: 281:     motor_response(card, mL, mR, ReturnHomeArray);
  2445   002880  C0AB  F060         	movff	card_response@mL,motor_response@mL
  2446   002884  C0AC  F061         	movff	card_response@mL+1,motor_response@mL+1
  2447   002888  C0AD  F062         	movff	card_response@mR,motor_response@mR
  2448   00288C  C0AE  F063         	movff	card_response@mR+1,motor_response@mR+1
  2449   002890  EE20  F0AF         	lfsr	2,card_response@ReturnHomeArray
  2450   002894  EE00  F064         	lfsr	0,motor_response@ReturnHomeArray
  2451   002898  0E3B               	movlw	59
  2452   00289A                     u1701:
  2453   00289A  CFDB FFEB          	movff	plusw2,plusw0
  2454   00289E  06E8               	decf	wreg,f,c
  2455   0028A0  E2FC               	bc	u1701
  2456   0028A2  0100               	movlb	0	; () banked
  2457   0028A4  51AA               	movf	card_response@card& (0+255),w,b
  2458   0028A6  EC31  F007         	call	_motor_response
  2459   0028AA                     
  2460                           ;colour_identify.c: 283:     return card;
  2461   0028AA  0100               	movlb	0	; () banked
  2462   0028AC  51AA               	movf	card_response@card& (0+255),w,b
  2463   0028AE                     
  2464                           ; BSR set to: 0
  2465   0028AE  0012               	return		;funcret
  2466   0028B0                     __end_of_card_response:
  2467                           	callstack 0
  2468                           
  2469 ;; *************** function _sprintf *****************
  2470 ;; Defined at:
  2471 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2474 ;;		 -> main@buf(150), 
  2475 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2476 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2477 ;;		 -> STR_1(23), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2480 ;;  ap              2   18[BANK0 ] PTR void [1]
  2481 ;;		 -> ?_sprintf(2), 
  2482 ;;  ret             2    0        int 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  2    6[BANK0 ] int 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2492 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2493 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2495 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2496 ;;Total ram usage:       25 bytes
  2497 ;; Hardware stack levels used: 1
  2498 ;; Hardware stack levels required when called: 8
  2499 ;; This function calls:
  2500 ;;		_vfprintf
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;;		_card_response
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text8
  2508   002F92                     __ptext8:
  2509                           	callstack 0
  2510   002F92                     _sprintf:
  2511                           	callstack 22
  2512   002F92  0E6A               	movlw	low (?_sprintf+4)
  2513   002F94  0100               	movlb	0	; () banked
  2514   002F96  6F72               	movwf	sprintf@ap& (0+255),b
  2515   002F98  0E00               	movlw	high (?_sprintf+4)
  2516   002F9A  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2517   002F9C  C066  F074         	movff	sprintf@s,sprintf@f
  2518   002FA0  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2519   002FA4                     
  2520                           ; BSR set to: 0
  2521   002FA4  0E00               	movlw	0
  2522   002FA6  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2523   002FA8  0E00               	movlw	0
  2524   002FAA  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2525   002FAC                     
  2526                           ; BSR set to: 0
  2527   002FAC  0E00               	movlw	0
  2528   002FAE  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2529   002FB0  0E00               	movlw	0
  2530   002FB2  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2531   002FB4                     
  2532                           ; BSR set to: 0
  2533   002FB4  0E74               	movlw	low sprintf@f
  2534   002FB6  6F60               	movwf	vfprintf@fp& (0+255),b
  2535   002FB8  0E00               	movlw	high sprintf@f
  2536   002FBA  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2537   002FBC  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2538   002FC0  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2539   002FC4  0E72               	movlw	low sprintf@ap
  2540   002FC6  6F64               	movwf	vfprintf@ap& (0+255),b
  2541   002FC8  0E00               	movlw	high sprintf@ap
  2542   002FCA  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2543   002FCC  EC9F  F017         	call	_vfprintf	;wreg free
  2544   002FD0  0100               	movlb	0	; () banked
  2545   002FD2  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2546   002FD4  2566               	addwf	sprintf@s& (0+255),w,b
  2547   002FD6  6ED9               	movwf	fsr2l,c
  2548   002FD8  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2549   002FDA  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2550   002FDC  6EDA               	movwf	fsr2h,c
  2551   002FDE  0E00               	movlw	0
  2552   002FE0  6EDF               	movwf	indf2,c
  2553   002FE2                     
  2554                           ; BSR set to: 0
  2555   002FE2  0012               	return		;funcret
  2556   002FE4                     __end_of_sprintf:
  2557                           	callstack 0
  2558                           
  2559 ;; *************** function _vfprintf *****************
  2560 ;; Defined at:
  2561 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2564 ;;		 -> sprintf@f(11), 
  2565 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2566 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2567 ;;		 -> STR_1(23), 
  2568 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2569 ;;		 -> sprintf@ap(2), 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  2572 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2573 ;;		 -> STR_1(23), 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  2    0[BANK0 ] int 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2583 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2587 ;;Total ram usage:        8 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 7
  2590 ;; This function calls:
  2591 ;;		_vfpfcnvrt
  2592 ;; This function is called by:
  2593 ;;		_sprintf
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text9
  2598   002F3E                     __ptext9:
  2599                           	callstack 0
  2600   002F3E                     _vfprintf:
  2601                           	callstack 22
  2602   002F3E                     
  2603                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2604   002F3E  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  2605   002F42  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2606                           
  2607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2608   002F46  EFB3  F017         	goto	l3429
  2609   002F4A                     l3427:
  2610                           
  2611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2612   002F4A  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  2613   002F4E  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2614   002F52  0E54               	movlw	low vfprintf@cfmt
  2615   002F54  6E44               	movwf	vfpfcnvrt@fmt^0,c
  2616   002F56  0E00               	movlw	high vfprintf@cfmt
  2617   002F58  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2618   002F5A  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  2619   002F5E  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2620   002F62  EC0B  F013         	call	_vfpfcnvrt	;wreg free
  2621   002F66                     l3429:
  2622                           
  2623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2624   002F66  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  2625   002F6A  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2626   002F6E                     	if	0	;tblptru may be non-zero
  2627   002F6E                     	endif
  2628   002F6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2629   002F6E  0E00               	movlw	low (__mediumconst shr (0+16))
  2630   002F70  6EF8               	movwf	tblptru,c
  2631   002F72                     	endif
  2632   002F72  0008               	tblrd		*
  2633   002F74  50F5               	movf	tablat,w,c
  2634   002F76  0900               	iorlw	0
  2635   002F78  A4D8               	btfss	status,2,c
  2636   002F7A  EFC1  F017         	goto	u1691
  2637   002F7E  EFC3  F017         	goto	u1690
  2638   002F82                     u1691:
  2639   002F82  EFA5  F017         	goto	l3427
  2640   002F86                     u1690:
  2641   002F86                     
  2642                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2643   002F86  0E00               	movlw	0
  2644   002F88  0100               	movlb	0	; () banked
  2645   002F8A  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2646   002F8C  0E00               	movlw	0
  2647   002F8E  6F60               	movwf	?_vfprintf& (0+255),b
  2648   002F90                     
  2649                           ; BSR set to: 0
  2650   002F90  0012               	return		;funcret
  2651   002F92                     __end_of_vfprintf:
  2652                           	callstack 0
  2653                           
  2654 ;; *************** function _vfpfcnvrt *****************
  2655 ;; Defined at:
  2656 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  2659 ;;		 -> sprintf@f(11), 
  2660 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  2661 ;;		 -> vfprintf@cfmt(2), 
  2662 ;;  ap              2   69[COMRAM] PTR PTR void 
  2663 ;;		 -> sprintf@ap(2), 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  convarg         8   73[COMRAM] struct .
  2666 ;;  cp              2   81[COMRAM] PTR unsigned char 
  2667 ;;		 -> STR_5(10), STR_4(26), STR_3(21), STR_2(16), 
  2668 ;;		 -> STR_1(23), 
  2669 ;;  i               2    0        int 
  2670 ;;  done            2    0        int 
  2671 ;;  c               1    0        unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2681 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2682 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2685 ;;Total ram usage:       18 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 6
  2688 ;; This function calls:
  2689 ;;		_dtoa
  2690 ;;		_fputc
  2691 ;; This function is called by:
  2692 ;;		_vfprintf
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text10
  2697   002616                     __ptext10:
  2698                           	callstack 0
  2699   002616                     _vfpfcnvrt:
  2700                           	callstack 22
  2701   002616                     
  2702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2703   002616  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2704   00261A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2705   00261E  CFDE FFF6          	movff	postinc2,tblptrl
  2706   002622  CFDD FFF7          	movff	postdec2,tblptrh
  2707   002626                     	if	0	;tblptru may be non-zero
  2708   002626                     	endif
  2709   002626                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2710   002626  0E00               	movlw	low (__mediumconst shr (0+16))
  2711   002628  6EF8               	movwf	tblptru,c
  2712   00262A                     	endif
  2713   00262A  0008               	tblrd		*
  2714   00262C  50F5               	movf	tablat,w,c
  2715   00262E  0A25               	xorlw	37
  2716   002630  A4D8               	btfss	status,2,c
  2717   002632  EF1D  F013         	goto	u1321
  2718   002636  EF1F  F013         	goto	u1320
  2719   00263A                     u1321:
  2720   00263A  EFA3  F013         	goto	l2709
  2721   00263E                     u1320:
  2722   00263E                     
  2723                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2724   00263E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2725   002642  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2726   002646  2ADE               	incf	postinc2,f,c
  2727   002648  0E00               	movlw	0
  2728   00264A  22DD               	addwfc	postdec2,f,c
  2729   00264C                     
  2730                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2731   00264C  0E00               	movlw	0
  2732   00264E  0101               	movlb	1	; () banked
  2733   002650  6FF4               	movwf	(_width+1)& (0+255),b
  2734   002652  0E00               	movlw	0
  2735   002654  6FF3               	movwf	_width& (0+255),b
  2736   002656  C1F3  F1F9         	movff	_width,_flags
  2737   00265A                     
  2738                           ; BSR set to: 1
  2739                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2740   00265A  69F5               	setf	_prec& (0+255),b
  2741   00265C  69F6               	setf	(_prec+1)& (0+255),b
  2742   00265E                     
  2743                           ; BSR set to: 1
  2744                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2745   00265E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2746   002662  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2747   002666  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  2748   00266A  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  2749   00266E                     
  2750                           ; BSR set to: 1
  2751                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2752   00266E  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2753   002672  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2754   002676                     	if	0	;tblptru may be non-zero
  2755   002676                     	endif
  2756   002676                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2757   002676  0E00               	movlw	low (__mediumconst shr (0+16))
  2758   002678  6EF8               	movwf	tblptru,c
  2759   00267A                     	endif
  2760   00267A  0008               	tblrd		*
  2761   00267C  50F5               	movf	tablat,w,c
  2762   00267E  0A64               	xorlw	100
  2763   002680  B4D8               	btfsc	status,2,c
  2764   002682  EF45  F013         	goto	u1331
  2765   002686  EF47  F013         	goto	u1330
  2766   00268A                     u1331:
  2767   00268A  EF57  F013         	goto	l2699
  2768   00268E                     u1330:
  2769   00268E                     
  2770                           ; BSR set to: 1
  2771   00268E  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2772   002692  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2773   002696                     	if	0	;tblptru may be non-zero
  2774   002696                     	endif
  2775   002696                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2776   002696  0E00               	movlw	low (__mediumconst shr (0+16))
  2777   002698  6EF8               	movwf	tblptru,c
  2778   00269A                     	endif
  2779   00269A  0008               	tblrd		*
  2780   00269C  50F5               	movf	tablat,w,c
  2781   00269E  0A69               	xorlw	105
  2782   0026A0  A4D8               	btfss	status,2,c
  2783   0026A2  EF55  F013         	goto	u1341
  2784   0026A6  EF57  F013         	goto	u1340
  2785   0026AA                     u1341:
  2786   0026AA  EF9A  F013         	goto	l2705
  2787   0026AE                     u1340:
  2788   0026AE                     l2699:
  2789                           
  2790                           ; BSR set to: 1
  2791                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2792   0026AE  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2793   0026B2  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2794   0026B6  CFDF F048          	movff	indf2,??_vfpfcnvrt
  2795   0026BA  0E02               	movlw	2
  2796   0026BC  26DE               	addwf	postinc2,f,c
  2797   0026BE  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  2798   0026C2  0E00               	movlw	0
  2799   0026C4  22DD               	addwfc	postdec2,f,c
  2800   0026C6  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2801   0026CA  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2802   0026CE  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  2803   0026D2  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  2804   0026D6  0E00               	movlw	0
  2805   0026D8  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2806   0026DA  0EFF               	movlw	-1
  2807   0026DC  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2808   0026DE  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2809   0026E0  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2810   0026E2  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2811   0026E4  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2812   0026E6  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2813                           
  2814                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2815   0026E8  0E01               	movlw	1
  2816   0026EA  2452               	addwf	vfpfcnvrt@cp^0,w,c
  2817   0026EC  6E48               	movwf	??_vfpfcnvrt^0,c
  2818   0026EE  0E00               	movlw	0
  2819   0026F0  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2820   0026F2  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  2821   0026F4  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2822   0026F8  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2823   0026FC  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  2824   002700  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2825   002704                     
  2826                           ; BSR set to: 1
  2827                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2828   002704  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  2829   002708  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2830   00270C  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  2831   002710  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2832   002714  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2833   002718  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2834   00271C  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2835   002720  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2836   002724  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2837   002728  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2838   00272C  EC99  F00D         	call	_dtoa	;wreg free
  2839   002730  EFB9  F013         	goto	l1234
  2840   002734                     l2705:
  2841                           
  2842                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2843   002734  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2844   002738  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2845   00273C  2ADE               	incf	postinc2,f,c
  2846   00273E  0E00               	movlw	0
  2847   002740  22DD               	addwfc	postdec2,f,c
  2848   002742  EFB9  F013         	goto	l1234
  2849   002746                     l2709:
  2850                           
  2851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2852   002746  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2853   00274A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2854   00274E  CFDE FFF6          	movff	postinc2,tblptrl
  2855   002752  CFDD FFF7          	movff	postdec2,tblptrh
  2856   002756                     	if	0	;tblptru may be non-zero
  2857   002756                     	endif
  2858   002756                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2859   002756  0E00               	movlw	low (__mediumconst shr (0+16))
  2860   002758  6EF8               	movwf	tblptru,c
  2861   00275A                     	endif
  2862   00275A  0008               	tblrd		*
  2863   00275C  50F5               	movf	tablat,w,c
  2864   00275E  6E04               	movwf	fputc@c^0,c
  2865   002760  6A05               	clrf	(fputc@c+1)^0,c
  2866   002762  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  2867   002766  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2868   00276A  ECC2  F014         	call	_fputc	;wreg free
  2869   00276E  EF9A  F013         	goto	l2705
  2870   002772                     l1234:
  2871   002772  0012               	return		;funcret
  2872   002774                     __end_of_vfpfcnvrt:
  2873                           	callstack 0
  2874                           
  2875 ;; *************** function _dtoa *****************
  2876 ;; Defined at:
  2877 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  2880 ;;		 -> sprintf@f(11), 
  2881 ;;  d               8   32[COMRAM] long long 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  n               8   54[COMRAM] long long 
  2884 ;;  i               2   62[COMRAM] int 
  2885 ;;  w               2   52[COMRAM] int 
  2886 ;;  p               2   50[COMRAM] int 
  2887 ;;  s               1   64[COMRAM] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2897 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2898 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2899 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2900 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2901 ;;Total ram usage:       35 bytes
  2902 ;; Hardware stack levels used: 1
  2903 ;; Hardware stack levels required when called: 5
  2904 ;; This function calls:
  2905 ;;		___aodiv
  2906 ;;		___aomod
  2907 ;;		_abs
  2908 ;;		_pad
  2909 ;; This function is called by:
  2910 ;;		_vfpfcnvrt
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text11
  2915   001B32                     __ptext11:
  2916                           	callstack 0
  2917   001B32                     _dtoa:
  2918                           	callstack 22
  2919   001B32                     
  2920                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2921   001B32  C021  F037         	movff	dtoa@d,dtoa@n
  2922   001B36  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  2923   001B3A  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  2924   001B3E  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  2925   001B42  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  2926   001B46  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  2927   001B4A  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  2928   001B4E  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  2929   001B52                     
  2930                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2931   001B52  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  2932   001B54  EFAE  F00D         	goto	u1151
  2933   001B58  EFB1  F00D         	goto	u1150
  2934   001B5C                     u1151:
  2935   001B5C  0E01               	movlw	1
  2936   001B5E  EFB2  F00D         	goto	u1160
  2937   001B62                     u1150:
  2938   001B62  0E00               	movlw	0
  2939   001B64                     u1160:
  2940   001B64  6E41               	movwf	dtoa@s^0,c
  2941   001B66                     
  2942                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2943   001B66  5041               	movf	dtoa@s^0,w,c
  2944   001B68  B4D8               	btfsc	status,2,c
  2945   001B6A  EFB9  F00D         	goto	u1171
  2946   001B6E  EFBB  F00D         	goto	u1170
  2947   001B72                     u1171:
  2948   001B72  EFCB  F00D         	goto	l2529
  2949   001B76                     u1170:
  2950   001B76                     
  2951                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2952   001B76  1E3E               	comf	(dtoa@n+7)^0,f,c
  2953   001B78  1E3D               	comf	(dtoa@n+6)^0,f,c
  2954   001B7A  1E3C               	comf	(dtoa@n+5)^0,f,c
  2955   001B7C  1E3B               	comf	(dtoa@n+4)^0,f,c
  2956   001B7E  1E3A               	comf	(dtoa@n+3)^0,f,c
  2957   001B80  1E39               	comf	(dtoa@n+2)^0,f,c
  2958   001B82  1E38               	comf	(dtoa@n+1)^0,f,c
  2959   001B84  6C37               	negf	dtoa@n^0,c
  2960   001B86  0E00               	movlw	0
  2961   001B88  2238               	addwfc	(dtoa@n+1)^0,f,c
  2962   001B8A  2239               	addwfc	(dtoa@n+2)^0,f,c
  2963   001B8C  223A               	addwfc	(dtoa@n+3)^0,f,c
  2964   001B8E  223B               	addwfc	(dtoa@n+4)^0,f,c
  2965   001B90  223C               	addwfc	(dtoa@n+5)^0,f,c
  2966   001B92  223D               	addwfc	(dtoa@n+6)^0,f,c
  2967   001B94  223E               	addwfc	(dtoa@n+7)^0,f,c
  2968   001B96                     l2529:
  2969                           
  2970                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2971   001B96  0101               	movlb	1	; () banked
  2972   001B98  BFF6               	btfsc	(_prec+1)& (0+255),7,b
  2973   001B9A  EFD9  F00D         	goto	u1180
  2974   001B9E  51F6               	movf	(_prec+1)& (0+255),w,b
  2975   001BA0  E106               	bnz	u1181
  2976   001BA2  05F5               	decf	_prec& (0+255),w,b
  2977   001BA4  B0D8               	btfsc	status,0,c
  2978   001BA6  EFD7  F00D         	goto	u1181
  2979   001BAA  EFD9  F00D         	goto	u1180
  2980   001BAE                     u1181:
  2981   001BAE  EFDF  F00D         	goto	l1213
  2982   001BB2                     u1180:
  2983   001BB2                     
  2984                           ; BSR set to: 1
  2985   001BB2  0E00               	movlw	0
  2986   001BB4  6E34               	movwf	(dtoa@p+1)^0,c
  2987   001BB6  0E01               	movlw	1
  2988   001BB8  6E33               	movwf	dtoa@p^0,c
  2989   001BBA  EFE3  F00D         	goto	l1215
  2990   001BBE                     l1213:
  2991                           
  2992                           ; BSR set to: 1
  2993   001BBE  C1F5  F033         	movff	_prec,dtoa@p
  2994   001BC2  C1F6  F034         	movff	_prec+1,dtoa@p+1
  2995   001BC6                     l1215:
  2996                           
  2997                           ; BSR set to: 1
  2998                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2999   001BC6  C1F3  F035         	movff	_width,dtoa@w
  3000   001BCA  C1F4  F036         	movff	_width+1,dtoa@w+1
  3001   001BCE                     
  3002                           ; BSR set to: 1
  3003                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  3004   001BCE  5041               	movf	dtoa@s^0,w,c
  3005   001BD0  B4D8               	btfsc	status,2,c
  3006   001BD2  EFED  F00D         	goto	u1191
  3007   001BD6  EFEF  F00D         	goto	u1190
  3008   001BDA                     u1191:
  3009   001BDA  EF06  F00E         	goto	l1216
  3010   001BDE                     u1190:
  3011   001BDE                     
  3012                           ; BSR set to: 1
  3013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3014   001BDE  0635               	decf	dtoa@w^0,f,c
  3015   001BE0  A0D8               	btfss	status,0,c
  3016   001BE2  0636               	decf	(dtoa@w+1)^0,f,c
  3017   001BE4                     
  3018                           ; BSR set to: 1
  3019                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3020   001BE4  5041               	movf	dtoa@s^0,w,c
  3021   001BE6  A4D8               	btfss	status,2,c
  3022   001BE8  EFF8  F00D         	goto	u1201
  3023   001BEC  EFFA  F00D         	goto	u1200
  3024   001BF0                     u1201:
  3025   001BF0  EF00  F00E         	goto	l2541
  3026   001BF4                     u1200:
  3027   001BF4                     
  3028                           ; BSR set to: 1
  3029   001BF4  0E00               	movlw	0
  3030   001BF6  6E32               	movwf	(_dtoa$2493+1)^0,c
  3031   001BF8  0E2B               	movlw	43
  3032   001BFA  6E31               	movwf	_dtoa$2493^0,c
  3033   001BFC  EF04  F00E         	goto	l2543
  3034   001C00                     l2541:
  3035                           
  3036                           ; BSR set to: 1
  3037   001C00  0E00               	movlw	0
  3038   001C02  6E32               	movwf	(_dtoa$2493+1)^0,c
  3039   001C04  0E2D               	movlw	45
  3040   001C06  6E31               	movwf	_dtoa$2493^0,c
  3041   001C08                     l2543:
  3042                           
  3043                           ; BSR set to: 1
  3044   001C08  C031  F041         	movff	_dtoa$2493,dtoa@s
  3045   001C0C                     l1216:
  3046                           
  3047                           ; BSR set to: 1
  3048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3049   001C0C  0E00               	movlw	0
  3050   001C0E  6E40               	movwf	(dtoa@i+1)^0,c
  3051   001C10  0E1F               	movlw	31
  3052   001C12  6E3F               	movwf	dtoa@i^0,c
  3053   001C14                     
  3054                           ; BSR set to: 1
  3055                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3056   001C14  0E00               	movlw	0
  3057   001C16  0102               	movlb	2	; () banked
  3058   001C18  6FE1               	movwf	(_dbuf+31)& (0+255),b
  3059                           
  3060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3061   001C1A  EF8B  F00E         	goto	l2557
  3062   001C1E                     l2547:
  3063                           
  3064                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3065   001C1E  063F               	decf	dtoa@i^0,f,c
  3066   001C20  A0D8               	btfss	status,0,c
  3067   001C22  0640               	decf	(dtoa@i+1)^0,f,c
  3068   001C24                     
  3069                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3070   001C24  0EC2               	movlw	low _dbuf
  3071   001C26  243F               	addwf	dtoa@i^0,w,c
  3072   001C28  6ED9               	movwf	fsr2l,c
  3073   001C2A  0E02               	movlw	high _dbuf
  3074   001C2C  2040               	addwfc	(dtoa@i+1)^0,w,c
  3075   001C2E  6EDA               	movwf	fsr2h,c
  3076   001C30  C037  F004         	movff	dtoa@n,___aomod@dividend
  3077   001C34  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  3078   001C38  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  3079   001C3C  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  3080   001C40  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  3081   001C44  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  3082   001C48  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  3083   001C4C  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  3084   001C50  0E0A               	movlw	10
  3085   001C52  6E0C               	movwf	___aomod@divisor^0,c
  3086   001C54  0E00               	movlw	0
  3087   001C56  6E0D               	movwf	(___aomod@divisor+1)^0,c
  3088   001C58  0E00               	movlw	0
  3089   001C5A  6E0E               	movwf	(___aomod@divisor+2)^0,c
  3090   001C5C  0E00               	movlw	0
  3091   001C5E  6E0F               	movwf	(___aomod@divisor+3)^0,c
  3092   001C60  0E00               	movlw	0
  3093   001C62  6E10               	movwf	(___aomod@divisor+4)^0,c
  3094   001C64  0E00               	movlw	0
  3095   001C66  6E11               	movwf	(___aomod@divisor+5)^0,c
  3096   001C68  0E00               	movlw	0
  3097   001C6A  6E12               	movwf	(___aomod@divisor+6)^0,c
  3098   001C6C  0E00               	movlw	0
  3099   001C6E  6E13               	movwf	(___aomod@divisor+7)^0,c
  3100   001C70  EC59  F012         	call	___aomod	;wreg free
  3101   001C74  C004  F029         	movff	?___aomod,??_dtoa
  3102   001C78  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  3103   001C7C  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  3104   001C80  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  3105   001C84  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  3106   001C88  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  3107   001C8C  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  3108   001C90  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  3109   001C94  C029  F016         	movff	??_dtoa,abs@a
  3110   001C98  C02A  F017         	movff	??_dtoa+1,abs@a+1
  3111   001C9C  ECD5  F018         	call	_abs	;wreg free
  3112   001CA0  5016               	movf	?_abs^0,w,c
  3113   001CA2  0F30               	addlw	48
  3114   001CA4  6EDF               	movwf	indf2,c
  3115   001CA6                     
  3116                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3117   001CA6  0633               	decf	dtoa@p^0,f,c
  3118   001CA8  A0D8               	btfss	status,0,c
  3119   001CAA  0634               	decf	(dtoa@p+1)^0,f,c
  3120   001CAC                     
  3121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3122   001CAC  0635               	decf	dtoa@w^0,f,c
  3123   001CAE  A0D8               	btfss	status,0,c
  3124   001CB0  0636               	decf	(dtoa@w+1)^0,f,c
  3125   001CB2                     
  3126                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3127   001CB2  C037  F004         	movff	dtoa@n,___aodiv@dividend
  3128   001CB6  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  3129   001CBA  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  3130   001CBE  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  3131   001CC2  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  3132   001CC6  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  3133   001CCA  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  3134   001CCE  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  3135   001CD2  0E0A               	movlw	10
  3136   001CD4  6E0C               	movwf	___aodiv@divisor^0,c
  3137   001CD6  0E00               	movlw	0
  3138   001CD8  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  3139   001CDA  0E00               	movlw	0
  3140   001CDC  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  3141   001CDE  0E00               	movlw	0
  3142   001CE0  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  3143   001CE2  0E00               	movlw	0
  3144   001CE4  6E10               	movwf	(___aodiv@divisor+4)^0,c
  3145   001CE6  0E00               	movlw	0
  3146   001CE8  6E11               	movwf	(___aodiv@divisor+5)^0,c
  3147   001CEA  0E00               	movlw	0
  3148   001CEC  6E12               	movwf	(___aodiv@divisor+6)^0,c
  3149   001CEE  0E00               	movlw	0
  3150   001CF0  6E13               	movwf	(___aodiv@divisor+7)^0,c
  3151   001CF2  ECDF  F010         	call	___aodiv	;wreg free
  3152   001CF6  C004  F037         	movff	?___aodiv,dtoa@n
  3153   001CFA  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  3154   001CFE  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  3155   001D02  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  3156   001D06  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  3157   001D0A  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  3158   001D0E  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  3159   001D12  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  3160   001D16                     l2557:
  3161                           
  3162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3163   001D16  BE40               	btfsc	(dtoa@i+1)^0,7,c
  3164   001D18  EF96  F00E         	goto	u1211
  3165   001D1C  5040               	movf	(dtoa@i+1)^0,w,c
  3166   001D1E  E108               	bnz	u1210
  3167   001D20  043F               	decf	dtoa@i^0,w,c
  3168   001D22  A0D8               	btfss	status,0,c
  3169   001D24  EF96  F00E         	goto	u1211
  3170   001D28  EF98  F00E         	goto	u1210
  3171   001D2C                     u1211:
  3172   001D2C  EFB4  F00E         	goto	l2563
  3173   001D30                     u1210:
  3174   001D30  5037               	movf	dtoa@n^0,w,c
  3175   001D32  1038               	iorwf	(dtoa@n+1)^0,w,c
  3176   001D34  1039               	iorwf	(dtoa@n+2)^0,w,c
  3177   001D36  103A               	iorwf	(dtoa@n+3)^0,w,c
  3178   001D38  103B               	iorwf	(dtoa@n+4)^0,w,c
  3179   001D3A  103C               	iorwf	(dtoa@n+5)^0,w,c
  3180   001D3C  103D               	iorwf	(dtoa@n+6)^0,w,c
  3181   001D3E  103E               	iorwf	(dtoa@n+7)^0,w,c
  3182   001D40  A4D8               	btfss	status,2,c
  3183   001D42  EFA5  F00E         	goto	u1221
  3184   001D46  EFA7  F00E         	goto	u1220
  3185   001D4A                     u1221:
  3186   001D4A  EF0F  F00E         	goto	l2547
  3187   001D4E                     u1220:
  3188   001D4E  BE34               	btfsc	(dtoa@p+1)^0,7,c
  3189   001D50  EFB4  F00E         	goto	u1230
  3190   001D54  5034               	movf	(dtoa@p+1)^0,w,c
  3191   001D56  E106               	bnz	u1231
  3192   001D58  0433               	decf	dtoa@p^0,w,c
  3193   001D5A  B0D8               	btfsc	status,0,c
  3194   001D5C  EFB2  F00E         	goto	u1231
  3195   001D60  EFB4  F00E         	goto	u1230
  3196   001D64                     u1231:
  3197   001D64  EF0F  F00E         	goto	l2547
  3198   001D68                     u1230:
  3199   001D68                     l2563:
  3200                           
  3201                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3202   001D68  5041               	movf	dtoa@s^0,w,c
  3203   001D6A  B4D8               	btfsc	status,2,c
  3204   001D6C  EFBA  F00E         	goto	u1241
  3205   001D70  EFBC  F00E         	goto	u1240
  3206   001D74                     u1241:
  3207   001D74  EFC7  F00E         	goto	l2569
  3208   001D78                     u1240:
  3209   001D78                     
  3210                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3211   001D78  063F               	decf	dtoa@i^0,f,c
  3212   001D7A  A0D8               	btfss	status,0,c
  3213   001D7C  0640               	decf	(dtoa@i+1)^0,f,c
  3214   001D7E                     
  3215                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3216   001D7E  0EC2               	movlw	low _dbuf
  3217   001D80  243F               	addwf	dtoa@i^0,w,c
  3218   001D82  6ED9               	movwf	fsr2l,c
  3219   001D84  0E02               	movlw	high _dbuf
  3220   001D86  2040               	addwfc	(dtoa@i+1)^0,w,c
  3221   001D88  6EDA               	movwf	fsr2h,c
  3222   001D8A  C041  FFDF         	movff	dtoa@s,indf2
  3223   001D8E                     l2569:
  3224                           
  3225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3226   001D8E  C01F  F014         	movff	dtoa@fp,pad@fp
  3227   001D92  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  3228   001D96  0EC2               	movlw	low _dbuf
  3229   001D98  243F               	addwf	dtoa@i^0,w,c
  3230   001D9A  6E16               	movwf	pad@buf^0,c
  3231   001D9C  0E02               	movlw	high _dbuf
  3232   001D9E  2040               	addwfc	(dtoa@i+1)^0,w,c
  3233   001DA0  6E17               	movwf	(pad@buf+1)^0,c
  3234   001DA2  C035  F018         	movff	dtoa@w,pad@p
  3235   001DA6  C036  F019         	movff	dtoa@w+1,pad@p+1
  3236   001DAA  EC28  F017         	call	_pad	;wreg free
  3237   001DAE  0012               	return		;funcret
  3238   001DB0                     __end_of_dtoa:
  3239                           	callstack 0
  3240                           
  3241 ;; *************** function _pad *****************
  3242 ;; Defined at:
  3243 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  3246 ;;		 -> sprintf@f(11), 
  3247 ;;  buf             2   21[COMRAM] PTR unsigned char 
  3248 ;;		 -> dbuf(32), 
  3249 ;;  p               2   23[COMRAM] int 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  w               2   28[COMRAM] int 
  3252 ;;  i               2   26[COMRAM] int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3262 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3263 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3265 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3266 ;;Total ram usage:       11 bytes
  3267 ;; Hardware stack levels used: 1
  3268 ;; Hardware stack levels required when called: 4
  3269 ;; This function calls:
  3270 ;;		_fputc
  3271 ;;		_fputs
  3272 ;; This function is called by:
  3273 ;;		_dtoa
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text12
  3278   002E50                     __ptext12:
  3279                           	callstack 0
  3280   002E50                     _pad:
  3281                           	callstack 22
  3282   002E50                     
  3283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3284   002E50  BE19               	btfsc	(pad@p+1)^0,7,c
  3285   002E52  EF2D  F017         	goto	u1091
  3286   002E56  EF2F  F017         	goto	u1090
  3287   002E5A                     u1091:
  3288   002E5A  EF35  F017         	goto	l2491
  3289   002E5E                     u1090:
  3290   002E5E  C018  F01D         	movff	pad@p,pad@w
  3291   002E62  C019  F01E         	movff	pad@p+1,pad@w+1
  3292   002E66  EF39  F017         	goto	l1204
  3293   002E6A                     l2491:
  3294   002E6A  0E00               	movlw	0
  3295   002E6C  6E1E               	movwf	(pad@w+1)^0,c
  3296   002E6E  0E00               	movlw	0
  3297   002E70  6E1D               	movwf	pad@w^0,c
  3298   002E72                     l1204:
  3299                           
  3300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3301   002E72  0E00               	movlw	0
  3302   002E74  6E1C               	movwf	(pad@i+1)^0,c
  3303   002E76  0E00               	movlw	0
  3304   002E78  6E1B               	movwf	pad@i^0,c
  3305                           
  3306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3307   002E7A  EF4B  F017         	goto	l2497
  3308   002E7E                     l2493:
  3309                           
  3310                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3311   002E7E  0E00               	movlw	0
  3312   002E80  6E05               	movwf	(fputc@c+1)^0,c
  3313   002E82  0E20               	movlw	32
  3314   002E84  6E04               	movwf	fputc@c^0,c
  3315   002E86  C014  F006         	movff	pad@fp,fputc@fp
  3316   002E8A  C015  F007         	movff	pad@fp+1,fputc@fp+1
  3317   002E8E  ECC2  F014         	call	_fputc	;wreg free
  3318   002E92                     
  3319                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3320   002E92  4A1B               	infsnz	pad@i^0,f,c
  3321   002E94  2A1C               	incf	(pad@i+1)^0,f,c
  3322   002E96                     l2497:
  3323                           
  3324                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3325   002E96  501D               	movf	pad@w^0,w,c
  3326   002E98  5C1B               	subwf	pad@i^0,w,c
  3327   002E9A  501C               	movf	(pad@i+1)^0,w,c
  3328   002E9C  0A80               	xorlw	128
  3329   002E9E  6E1A               	movwf	??_pad^0,c
  3330   002EA0  501E               	movf	(pad@w+1)^0,w,c
  3331   002EA2  0A80               	xorlw	128
  3332   002EA4  581A               	subwfb	??_pad^0,w,c
  3333   002EA6  A0D8               	btfss	status,0,c
  3334   002EA8  EF58  F017         	goto	u1101
  3335   002EAC  EF5A  F017         	goto	u1100
  3336   002EB0                     u1101:
  3337   002EB0  EF3F  F017         	goto	l2493
  3338   002EB4                     u1100:
  3339   002EB4                     
  3340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3341   002EB4  C016  F00D         	movff	pad@buf,fputs@s
  3342   002EB8  C017  F00E         	movff	pad@buf+1,fputs@s+1
  3343   002EBC  C014  F00F         	movff	pad@fp,fputs@fp
  3344   002EC0  C015  F010         	movff	pad@fp+1,fputs@fp+1
  3345   002EC4  EC92  F018         	call	_fputs	;wreg free
  3346   002EC8  0012               	return		;funcret
  3347   002ECA                     __end_of_pad:
  3348                           	callstack 0
  3349                           
  3350 ;; *************** function _fputs *****************
  3351 ;; Defined at:
  3352 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  s               2   12[COMRAM] PTR const unsigned char 
  3355 ;;		 -> dbuf(32), 
  3356 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  3357 ;;		 -> sprintf@f(11), 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  i               2   17[COMRAM] int 
  3360 ;;  c               1   16[COMRAM] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  2   12[COMRAM] int 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3371 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;Total ram usage:        7 bytes
  3375 ;; Hardware stack levels used: 1
  3376 ;; Hardware stack levels required when called: 3
  3377 ;; This function calls:
  3378 ;;		_fputc
  3379 ;; This function is called by:
  3380 ;;		_pad
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text13
  3385   003124                     __ptext13:
  3386                           	callstack 0
  3387   003124                     _fputs:
  3388                           	callstack 22
  3389   003124  0E00               	movlw	0
  3390   003126  6E13               	movwf	(fputs@i+1)^0,c
  3391   003128  0E00               	movlw	0
  3392   00312A  6E12               	movwf	fputs@i^0,c
  3393   00312C  EFA3  F018         	goto	l2373
  3394   003130                     l2369:
  3395   003130  C011  F004         	movff	fputs@c,fputc@c
  3396   003134  6A05               	clrf	(fputc@c+1)^0,c
  3397   003136  C00F  F006         	movff	fputs@fp,fputc@fp
  3398   00313A  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  3399   00313E  ECC2  F014         	call	_fputc	;wreg free
  3400   003142  4A12               	infsnz	fputs@i^0,f,c
  3401   003144  2A13               	incf	(fputs@i+1)^0,f,c
  3402   003146                     l2373:
  3403   003146  5012               	movf	fputs@i^0,w,c
  3404   003148  240D               	addwf	fputs@s^0,w,c
  3405   00314A  6ED9               	movwf	fsr2l,c
  3406   00314C  5013               	movf	(fputs@i+1)^0,w,c
  3407   00314E  200E               	addwfc	(fputs@s+1)^0,w,c
  3408   003150  6EDA               	movwf	fsr2h,c
  3409   003152  50DF               	movf	indf2,w,c
  3410   003154  6E11               	movwf	fputs@c^0,c
  3411   003156  5011               	movf	fputs@c^0,w,c
  3412   003158  A4D8               	btfss	status,2,c
  3413   00315A  EFB1  F018         	goto	u911
  3414   00315E  EFB3  F018         	goto	u910
  3415   003162                     u911:
  3416   003162  EF98  F018         	goto	l2369
  3417   003166                     u910:
  3418   003166  0012               	return		;funcret
  3419   003168                     __end_of_fputs:
  3420                           	callstack 0
  3421                           
  3422 ;; *************** function _fputc *****************
  3423 ;; Defined at:
  3424 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  c               2    3[COMRAM] int 
  3427 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  3428 ;;		 -> sprintf@f(11), 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  2    3[COMRAM] int 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3440 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3444 ;;Total ram usage:        9 bytes
  3445 ;; Hardware stack levels used: 1
  3446 ;; Hardware stack levels required when called: 2
  3447 ;; This function calls:
  3448 ;;		_putch
  3449 ;; This function is called by:
  3450 ;;		_pad
  3451 ;;		_vfpfcnvrt
  3452 ;;		_fputs
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text14
  3457   002984                     __ptext14:
  3458                           	callstack 0
  3459   002984                     _fputc:
  3460                           	callstack 25
  3461   002984  5006               	movf	fputc@fp^0,w,c
  3462   002986  1007               	iorwf	(fputc@fp+1)^0,w,c
  3463   002988  B4D8               	btfsc	status,2,c
  3464   00298A  EFC9  F014         	goto	u871
  3465   00298E  EFCB  F014         	goto	u870
  3466   002992                     u871:
  3467   002992  EFD4  F014         	goto	l2357
  3468   002996                     u870:
  3469   002996  5006               	movf	fputc@fp^0,w,c
  3470   002998  1007               	iorwf	(fputc@fp+1)^0,w,c
  3471   00299A  A4D8               	btfss	status,2,c
  3472   00299C  EFD2  F014         	goto	u881
  3473   0029A0  EFD4  F014         	goto	u880
  3474   0029A4                     u881:
  3475   0029A4  EFD9  F014         	goto	l2359
  3476   0029A8                     u880:
  3477   0029A8                     l2357:
  3478   0029A8  5004               	movf	fputc@c^0,w,c
  3479   0029AA  ECE0  F019         	call	_putch
  3480   0029AE  EF26  F015         	goto	l1252
  3481   0029B2                     l2359:
  3482   0029B2  EE20 F009          	lfsr	2,9
  3483   0029B6  5006               	movf	fputc@fp^0,w,c
  3484   0029B8  26D9               	addwf	fsr2l,f,c
  3485   0029BA  5007               	movf	(fputc@fp+1)^0,w,c
  3486   0029BC  22DA               	addwfc	fsr2h,f,c
  3487   0029BE  50DE               	movf	postinc2,w,c
  3488   0029C0  10DE               	iorwf	postinc2,w,c
  3489   0029C2  B4D8               	btfsc	status,2,c
  3490   0029C4  EFE6  F014         	goto	u891
  3491   0029C8  EFE8  F014         	goto	u890
  3492   0029CC                     u891:
  3493   0029CC  EF03  F015         	goto	l2363
  3494   0029D0                     u890:
  3495   0029D0  EE20 F009          	lfsr	2,9
  3496   0029D4  5006               	movf	fputc@fp^0,w,c
  3497   0029D6  26D9               	addwf	fsr2l,f,c
  3498   0029D8  5007               	movf	(fputc@fp+1)^0,w,c
  3499   0029DA  22DA               	addwfc	fsr2h,f,c
  3500   0029DC  EE10 F003          	lfsr	1,3
  3501   0029E0  5006               	movf	fputc@fp^0,w,c
  3502   0029E2  26E1               	addwf	fsr1l,f,c
  3503   0029E4  5007               	movf	(fputc@fp+1)^0,w,c
  3504   0029E6  22E2               	addwfc	fsr1h,f,c
  3505   0029E8  50DE               	movf	postinc2,w,c
  3506   0029EA  5CE6               	subwf	postinc1,w,c
  3507   0029EC  50E6               	movf	postinc1,w,c
  3508   0029EE  0A80               	xorlw	128
  3509   0029F0  6E0C               	movwf	(??_fputc+4)^0,c
  3510   0029F2  50DE               	movf	postinc2,w,c
  3511   0029F4  0A80               	xorlw	128
  3512   0029F6  580C               	subwfb	(??_fputc+4)^0,w,c
  3513   0029F8  B0D8               	btfsc	status,0,c
  3514   0029FA  EF01  F015         	goto	u901
  3515   0029FE  EF03  F015         	goto	u900
  3516   002A02                     u901:
  3517   002A02  EF26  F015         	goto	l1252
  3518   002A06                     u900:
  3519   002A06                     l2363:
  3520   002A06  EE20 F003          	lfsr	2,3
  3521   002A0A  5006               	movf	fputc@fp^0,w,c
  3522   002A0C  26D9               	addwf	fsr2l,f,c
  3523   002A0E  5007               	movf	(fputc@fp+1)^0,w,c
  3524   002A10  22DA               	addwfc	fsr2h,f,c
  3525   002A12  CFDE F008          	movff	postinc2,??_fputc
  3526   002A16  CFDD F009          	movff	postdec2,??_fputc+1
  3527   002A1A  C006  FFD9         	movff	fputc@fp,fsr2l
  3528   002A1E  C007  FFDA         	movff	fputc@fp+1,fsr2h
  3529   002A22  CFDE F00A          	movff	postinc2,??_fputc+2
  3530   002A26  CFDD F00B          	movff	postdec2,??_fputc+3
  3531   002A2A  5008               	movf	??_fputc^0,w,c
  3532   002A2C  240A               	addwf	(??_fputc+2)^0,w,c
  3533   002A2E  6ED9               	movwf	fsr2l,c
  3534   002A30  5009               	movf	(??_fputc+1)^0,w,c
  3535   002A32  200B               	addwfc	(??_fputc+3)^0,w,c
  3536   002A34  6EDA               	movwf	fsr2h,c
  3537   002A36  C004  FFDF         	movff	fputc@c,indf2
  3538   002A3A  EE20 F003          	lfsr	2,3
  3539   002A3E  5006               	movf	fputc@fp^0,w,c
  3540   002A40  26D9               	addwf	fsr2l,f,c
  3541   002A42  5007               	movf	(fputc@fp+1)^0,w,c
  3542   002A44  22DA               	addwfc	fsr2h,f,c
  3543   002A46  2ADE               	incf	postinc2,f,c
  3544   002A48  0E00               	movlw	0
  3545   002A4A  22DD               	addwfc	postdec2,f,c
  3546   002A4C                     l1252:
  3547   002A4C  0012               	return		;funcret
  3548   002A4E                     __end_of_fputc:
  3549                           	callstack 0
  3550                           
  3551 ;; *************** function _putch *****************
  3552 ;; Defined at:
  3553 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  c               1    wreg     unsigned char 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  c               1    0[COMRAM] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used: 1
  3573 ;; Hardware stack levels required when called: 1
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_fputc
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text15
  3582   0033C0                     __ptext15:
  3583                           	callstack 0
  3584   0033C0                     _putch:
  3585                           	callstack 25
  3586   0033C0  0012               	return		;funcret
  3587   0033C2                     __end_of_putch:
  3588                           	callstack 0
  3589                           
  3590 ;; *************** function ___aomod *****************
  3591 ;; Defined at:
  3592 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  dividend        8    3[COMRAM] long long 
  3595 ;;  divisor         8   11[COMRAM] long long 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  sign            1   20[COMRAM] unsigned char 
  3598 ;;  counter         1   19[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  8    3[COMRAM] long long 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3608 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3611 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3612 ;;Total ram usage:       18 bytes
  3613 ;; Hardware stack levels used: 1
  3614 ;; Hardware stack levels required when called: 1
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_dtoa
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text16
  3623   0024B2                     __ptext16:
  3624                           	callstack 0
  3625   0024B2                     ___aomod:
  3626                           	callstack 25
  3627   0024B2  0E00               	movlw	0
  3628   0024B4  6E15               	movwf	___aomod@sign^0,c
  3629   0024B6  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  3630   0024B8  EF62  F012         	goto	u1000
  3631   0024BC  EF60  F012         	goto	u1001
  3632   0024C0                     u1001:
  3633   0024C0  EF74  F012         	goto	l2437
  3634   0024C4                     u1000:
  3635   0024C4  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3636   0024C6  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3637   0024C8  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3638   0024CA  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3639   0024CC  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3640   0024CE  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3641   0024D0  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3642   0024D2  6C04               	negf	___aomod@dividend^0,c
  3643   0024D4  0E00               	movlw	0
  3644   0024D6  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3645   0024D8  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3646   0024DA  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3647   0024DC  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3648   0024DE  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3649   0024E0  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3650   0024E2  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3651   0024E4  0E01               	movlw	1
  3652   0024E6  6E15               	movwf	___aomod@sign^0,c
  3653   0024E8                     l2437:
  3654   0024E8  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  3655   0024EA  EF7B  F012         	goto	u1010
  3656   0024EE  EF79  F012         	goto	u1011
  3657   0024F2                     u1011:
  3658   0024F2  EF8B  F012         	goto	l2441
  3659   0024F6                     u1010:
  3660   0024F6  1E13               	comf	(___aomod@divisor+7)^0,f,c
  3661   0024F8  1E12               	comf	(___aomod@divisor+6)^0,f,c
  3662   0024FA  1E11               	comf	(___aomod@divisor+5)^0,f,c
  3663   0024FC  1E10               	comf	(___aomod@divisor+4)^0,f,c
  3664   0024FE  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  3665   002500  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  3666   002502  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  3667   002504  6C0C               	negf	___aomod@divisor^0,c
  3668   002506  0E00               	movlw	0
  3669   002508  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  3670   00250A  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  3671   00250C  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  3672   00250E  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  3673   002510  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  3674   002512  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  3675   002514  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  3676   002516                     l2441:
  3677   002516  500C               	movf	___aomod@divisor^0,w,c
  3678   002518  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  3679   00251A  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  3680   00251C  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  3681   00251E  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  3682   002520  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  3683   002522  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  3684   002524  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  3685   002526  B4D8               	btfsc	status,2,c
  3686   002528  EF98  F012         	goto	u1021
  3687   00252C  EF9A  F012         	goto	u1020
  3688   002530                     u1021:
  3689   002530  EFE2  F012         	goto	l2457
  3690   002534                     u1020:
  3691   002534  0E01               	movlw	1
  3692   002536  6E14               	movwf	___aomod@counter^0,c
  3693   002538  EFA8  F012         	goto	l2447
  3694   00253C                     l2445:
  3695   00253C  90D8               	bcf	status,0,c
  3696   00253E  360C               	rlcf	___aomod@divisor^0,f,c
  3697   002540  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  3698   002542  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  3699   002544  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  3700   002546  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  3701   002548  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  3702   00254A  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  3703   00254C  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  3704   00254E  2A14               	incf	___aomod@counter^0,f,c
  3705   002550                     l2447:
  3706   002550  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  3707   002552  EFAD  F012         	goto	u1031
  3708   002556  EFAF  F012         	goto	u1030
  3709   00255A                     u1031:
  3710   00255A  EF9E  F012         	goto	l2445
  3711   00255E                     u1030:
  3712   00255E                     l2449:
  3713   00255E  500C               	movf	___aomod@divisor^0,w,c
  3714   002560  5C04               	subwf	___aomod@dividend^0,w,c
  3715   002562  500D               	movf	(___aomod@divisor+1)^0,w,c
  3716   002564  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  3717   002566  500E               	movf	(___aomod@divisor+2)^0,w,c
  3718   002568  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  3719   00256A  500F               	movf	(___aomod@divisor+3)^0,w,c
  3720   00256C  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  3721   00256E  5010               	movf	(___aomod@divisor+4)^0,w,c
  3722   002570  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  3723   002572  5011               	movf	(___aomod@divisor+5)^0,w,c
  3724   002574  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  3725   002576  5012               	movf	(___aomod@divisor+6)^0,w,c
  3726   002578  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  3727   00257A  5013               	movf	(___aomod@divisor+7)^0,w,c
  3728   00257C  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  3729   00257E  A0D8               	btfss	status,0,c
  3730   002580  EFC4  F012         	goto	u1041
  3731   002584  EFC6  F012         	goto	u1040
  3732   002588                     u1041:
  3733   002588  EFD6  F012         	goto	l2453
  3734   00258C                     u1040:
  3735   00258C  500C               	movf	___aomod@divisor^0,w,c
  3736   00258E  5E04               	subwf	___aomod@dividend^0,f,c
  3737   002590  500D               	movf	(___aomod@divisor+1)^0,w,c
  3738   002592  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  3739   002594  500E               	movf	(___aomod@divisor+2)^0,w,c
  3740   002596  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  3741   002598  500F               	movf	(___aomod@divisor+3)^0,w,c
  3742   00259A  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  3743   00259C  5010               	movf	(___aomod@divisor+4)^0,w,c
  3744   00259E  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  3745   0025A0  5011               	movf	(___aomod@divisor+5)^0,w,c
  3746   0025A2  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  3747   0025A4  5012               	movf	(___aomod@divisor+6)^0,w,c
  3748   0025A6  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  3749   0025A8  5013               	movf	(___aomod@divisor+7)^0,w,c
  3750   0025AA  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  3751   0025AC                     l2453:
  3752   0025AC  90D8               	bcf	status,0,c
  3753   0025AE  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  3754   0025B0  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  3755   0025B2  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  3756   0025B4  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  3757   0025B6  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  3758   0025B8  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  3759   0025BA  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  3760   0025BC  320C               	rrcf	___aomod@divisor^0,f,c
  3761   0025BE  2E14               	decfsz	___aomod@counter^0,f,c
  3762   0025C0  EFAF  F012         	goto	l2449
  3763   0025C4                     l2457:
  3764   0025C4  5015               	movf	___aomod@sign^0,w,c
  3765   0025C6  B4D8               	btfsc	status,2,c
  3766   0025C8  EFE8  F012         	goto	u1051
  3767   0025CC  EFEA  F012         	goto	u1050
  3768   0025D0                     u1051:
  3769   0025D0  EFFA  F012         	goto	l2461
  3770   0025D4                     u1050:
  3771   0025D4  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3772   0025D6  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3773   0025D8  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3774   0025DA  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3775   0025DC  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3776   0025DE  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3777   0025E0  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3778   0025E2  6C04               	negf	___aomod@dividend^0,c
  3779   0025E4  0E00               	movlw	0
  3780   0025E6  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3781   0025E8  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3782   0025EA  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3783   0025EC  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3784   0025EE  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3785   0025F0  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3786   0025F2  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3787   0025F4                     l2461:
  3788   0025F4  C004  F004         	movff	___aomod@dividend,?___aomod
  3789   0025F8  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  3790   0025FC  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  3791   002600  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  3792   002604  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  3793   002608  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  3794   00260C  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  3795   002610  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  3796   002614  0012               	return		;funcret
  3797   002616                     __end_of___aomod:
  3798                           	callstack 0
  3799                           
  3800 ;; *************** function ___aodiv *****************
  3801 ;; Defined at:
  3802 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  dividend        8    3[COMRAM] long long 
  3805 ;;  divisor         8   11[COMRAM] long long 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  quotient        8   21[COMRAM] long long 
  3808 ;;  sign            1   20[COMRAM] unsigned char 
  3809 ;;  counter         1   19[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  8    3[COMRAM] long long 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3819 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3822 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3823 ;;Total ram usage:       26 bytes
  3824 ;; Hardware stack levels used: 1
  3825 ;; Hardware stack levels required when called: 1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_dtoa
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text17
  3834   0021BE                     __ptext17:
  3835                           	callstack 0
  3836   0021BE                     ___aodiv:
  3837                           	callstack 25
  3838   0021BE  0E00               	movlw	0
  3839   0021C0  6E15               	movwf	___aodiv@sign^0,c
  3840   0021C2  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  3841   0021C4  EFE8  F010         	goto	u930
  3842   0021C8  EFE6  F010         	goto	u931
  3843   0021CC                     u931:
  3844   0021CC  EFFA  F010         	goto	l2393
  3845   0021D0                     u930:
  3846   0021D0  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  3847   0021D2  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  3848   0021D4  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  3849   0021D6  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  3850   0021D8  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  3851   0021DA  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  3852   0021DC  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  3853   0021DE  6C0C               	negf	___aodiv@divisor^0,c
  3854   0021E0  0E00               	movlw	0
  3855   0021E2  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  3856   0021E4  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  3857   0021E6  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  3858   0021E8  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  3859   0021EA  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  3860   0021EC  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  3861   0021EE  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  3862   0021F0  0E01               	movlw	1
  3863   0021F2  6E15               	movwf	___aodiv@sign^0,c
  3864   0021F4                     l2393:
  3865   0021F4  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  3866   0021F6  EF01  F011         	goto	u940
  3867   0021FA  EFFF  F010         	goto	u941
  3868   0021FE                     u941:
  3869   0021FE  EF13  F011         	goto	l2399
  3870   002202                     u940:
  3871   002202  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  3872   002204  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  3873   002206  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  3874   002208  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  3875   00220A  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  3876   00220C  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  3877   00220E  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  3878   002210  6C04               	negf	___aodiv@dividend^0,c
  3879   002212  0E00               	movlw	0
  3880   002214  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  3881   002216  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  3882   002218  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  3883   00221A  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  3884   00221C  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  3885   00221E  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  3886   002220  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  3887   002222  0E01               	movlw	1
  3888   002224  1A15               	xorwf	___aodiv@sign^0,f,c
  3889   002226                     l2399:
  3890   002226  EE20  F016         	lfsr	2,___aodiv@quotient
  3891   00222A  0E07               	movlw	7
  3892   00222C                     u951:
  3893   00222C  6ADE               	clrf	postinc2,c
  3894   00222E  06E8               	decf	wreg,f,c
  3895   002230  E2FD               	bc	u951
  3896   002232  500C               	movf	___aodiv@divisor^0,w,c
  3897   002234  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  3898   002236  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  3899   002238  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  3900   00223A  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  3901   00223C  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  3902   00223E  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  3903   002240  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  3904   002242  B4D8               	btfsc	status,2,c
  3905   002244  EF26  F011         	goto	u961
  3906   002248  EF28  F011         	goto	u960
  3907   00224C                     u961:
  3908   00224C  EF7A  F011         	goto	l2421
  3909   002250                     u960:
  3910   002250  0E01               	movlw	1
  3911   002252  6E14               	movwf	___aodiv@counter^0,c
  3912   002254  EF36  F011         	goto	l2407
  3913   002258                     l2405:
  3914   002258  90D8               	bcf	status,0,c
  3915   00225A  360C               	rlcf	___aodiv@divisor^0,f,c
  3916   00225C  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  3917   00225E  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  3918   002260  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  3919   002262  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  3920   002264  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  3921   002266  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  3922   002268  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  3923   00226A  2A14               	incf	___aodiv@counter^0,f,c
  3924   00226C                     l2407:
  3925   00226C  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  3926   00226E  EF3B  F011         	goto	u971
  3927   002272  EF3D  F011         	goto	u970
  3928   002276                     u971:
  3929   002276  EF2C  F011         	goto	l2405
  3930   00227A                     u970:
  3931   00227A                     l2409:
  3932   00227A  90D8               	bcf	status,0,c
  3933   00227C  3616               	rlcf	___aodiv@quotient^0,f,c
  3934   00227E  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  3935   002280  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  3936   002282  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  3937   002284  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  3938   002286  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  3939   002288  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  3940   00228A  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  3941   00228C  500C               	movf	___aodiv@divisor^0,w,c
  3942   00228E  5C04               	subwf	___aodiv@dividend^0,w,c
  3943   002290  500D               	movf	(___aodiv@divisor+1)^0,w,c
  3944   002292  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  3945   002294  500E               	movf	(___aodiv@divisor+2)^0,w,c
  3946   002296  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  3947   002298  500F               	movf	(___aodiv@divisor+3)^0,w,c
  3948   00229A  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  3949   00229C  5010               	movf	(___aodiv@divisor+4)^0,w,c
  3950   00229E  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  3951   0022A0  5011               	movf	(___aodiv@divisor+5)^0,w,c
  3952   0022A2  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  3953   0022A4  5012               	movf	(___aodiv@divisor+6)^0,w,c
  3954   0022A6  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  3955   0022A8  5013               	movf	(___aodiv@divisor+7)^0,w,c
  3956   0022AA  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  3957   0022AC  A0D8               	btfss	status,0,c
  3958   0022AE  EF5B  F011         	goto	u981
  3959   0022B2  EF5D  F011         	goto	u980
  3960   0022B6                     u981:
  3961   0022B6  EF6E  F011         	goto	l2417
  3962   0022BA                     u980:
  3963   0022BA  500C               	movf	___aodiv@divisor^0,w,c
  3964   0022BC  5E04               	subwf	___aodiv@dividend^0,f,c
  3965   0022BE  500D               	movf	(___aodiv@divisor+1)^0,w,c
  3966   0022C0  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  3967   0022C2  500E               	movf	(___aodiv@divisor+2)^0,w,c
  3968   0022C4  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  3969   0022C6  500F               	movf	(___aodiv@divisor+3)^0,w,c
  3970   0022C8  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  3971   0022CA  5010               	movf	(___aodiv@divisor+4)^0,w,c
  3972   0022CC  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  3973   0022CE  5011               	movf	(___aodiv@divisor+5)^0,w,c
  3974   0022D0  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  3975   0022D2  5012               	movf	(___aodiv@divisor+6)^0,w,c
  3976   0022D4  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  3977   0022D6  5013               	movf	(___aodiv@divisor+7)^0,w,c
  3978   0022D8  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  3979   0022DA  8016               	bsf	___aodiv@quotient^0,0,c
  3980   0022DC                     l2417:
  3981   0022DC  90D8               	bcf	status,0,c
  3982   0022DE  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  3983   0022E0  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  3984   0022E2  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  3985   0022E4  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  3986   0022E6  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  3987   0022E8  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  3988   0022EA  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  3989   0022EC  320C               	rrcf	___aodiv@divisor^0,f,c
  3990   0022EE  2E14               	decfsz	___aodiv@counter^0,f,c
  3991   0022F0  EF3D  F011         	goto	l2409
  3992   0022F4                     l2421:
  3993   0022F4  5015               	movf	___aodiv@sign^0,w,c
  3994   0022F6  B4D8               	btfsc	status,2,c
  3995   0022F8  EF80  F011         	goto	u991
  3996   0022FC  EF82  F011         	goto	u990
  3997   002300                     u991:
  3998   002300  EF92  F011         	goto	l2425
  3999   002304                     u990:
  4000   002304  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  4001   002306  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  4002   002308  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  4003   00230A  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  4004   00230C  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  4005   00230E  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  4006   002310  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  4007   002312  6C16               	negf	___aodiv@quotient^0,c
  4008   002314  0E00               	movlw	0
  4009   002316  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  4010   002318  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  4011   00231A  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  4012   00231C  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  4013   00231E  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  4014   002320  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  4015   002322  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  4016   002324                     l2425:
  4017   002324  C016  F004         	movff	___aodiv@quotient,?___aodiv
  4018   002328  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  4019   00232C  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  4020   002330  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  4021   002334  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  4022   002338  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  4023   00233C  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  4024   002340  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  4025   002344  0012               	return		;funcret
  4026   002346                     __end_of___aodiv:
  4027                           	callstack 0
  4028                           
  4029 ;; *************** function _sendStringSerial4 *****************
  4030 ;; Defined at:
  4031 ;;		line 39 in file "serial.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  string          2    4[COMRAM] PTR unsigned char 
  4034 ;;		 -> main@buf(150), 
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4046 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4049 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;Total ram usage:        2 bytes
  4051 ;; Hardware stack levels used: 1
  4052 ;; Hardware stack levels required when called: 2
  4053 ;; This function calls:
  4054 ;;		_sendCharSerial4
  4055 ;; This function is called by:
  4056 ;;		_main
  4057 ;;		_card_response
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text18
  4062   00321E                     __ptext18:
  4063                           	callstack 0
  4064   00321E                     _sendStringSerial4:
  4065                           	callstack 28
  4066   00321E                     
  4067                           ;serial.c: 40:  while(*string != 0) {
  4068   00321E  EF1A  F019         	goto	l2887
  4069   003222                     l2883:
  4070                           
  4071                           ;serial.c: 41:         sendCharSerial4(*string++);
  4072   003222  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  4073   003226  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4074   00322A  50DF               	movf	indf2,w,c
  4075   00322C  ECBF  F019         	call	_sendCharSerial4
  4076   003230  4A05               	infsnz	sendStringSerial4@string^0,f,c
  4077   003232  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  4078   003234                     l2887:
  4079                           
  4080                           ;serial.c: 40:  while(*string != 0) {
  4081   003234  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  4082   003238  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4083   00323C  50DF               	movf	indf2,w,c
  4084   00323E  A4D8               	btfss	status,2,c
  4085   003240  EF24  F019         	goto	u1421
  4086   003244  EF26  F019         	goto	u1420
  4087   003248                     u1421:
  4088   003248  EF11  F019         	goto	l2883
  4089   00324C                     u1420:
  4090   00324C  0012               	return		;funcret
  4091   00324E                     __end_of_sendStringSerial4:
  4092                           	callstack 0
  4093                           
  4094 ;; *************** function _sendCharSerial4 *****************
  4095 ;; Defined at:
  4096 ;;		line 32 in file "serial.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  charToSend      1    wreg     unsigned char 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  charToSend      1    3[COMRAM] unsigned char 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      void 
  4103 ;; Registers used:
  4104 ;;		wreg
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4113 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4114 ;;Total ram usage:        1 bytes
  4115 ;; Hardware stack levels used: 1
  4116 ;; Hardware stack levels required when called: 1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_sendStringSerial4
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text19
  4125   00337E                     __ptext19:
  4126                           	callstack 0
  4127   00337E                     _sendCharSerial4:
  4128                           	callstack 28
  4129                           
  4130                           ;incstack = 0
  4131                           ;sendCharSerial4@charToSend stored from wreg
  4132   00337E  6E04               	movwf	sendCharSerial4@charToSend^0,c
  4133   003380                     l426:
  4134   003380  010E               	movlb	14	; () banked
  4135   003382  A537               	btfss	55,2,b	;volatile
  4136   003384  EFC6  F019         	goto	u1361
  4137   003388  EFC8  F019         	goto	u1360
  4138   00338C                     u1361:
  4139   00338C  EFC0  F019         	goto	l426
  4140   003390                     u1360:
  4141   003390                     
  4142                           ; BSR set to: 14
  4143                           ;serial.c: 34:     TX4REG = charToSend;
  4144   003390  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4145   003394                     
  4146                           ; BSR set to: 14
  4147   003394  0012               	return		;funcret
  4148   003396                     __end_of_sendCharSerial4:
  4149                           	callstack 0
  4150                           
  4151 ;; *************** function _normalise_readings *****************
  4152 ;; Defined at:
  4153 ;;		line 42 in file "colour_identify.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  buf             2   25[COMRAM] PTR unsigned char 
  4156 ;;		 -> main@buf(150), 
  4157 ;;  red_read        2   27[COMRAM] unsigned int 
  4158 ;;  green_read      2   29[COMRAM] unsigned int 
  4159 ;;  blue_read       2   31[COMRAM] unsigned int 
  4160 ;;  expected_val    2   33[COMRAM] PTR unsigned int [9]
  4161 ;;		 -> main@expected_values(54), 
  4162 ;;  normalised_v    2   35[COMRAM] PTR unsigned int [9]
  4163 ;;		 -> card_response@normalised_values(54), 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  difference      2   45[COMRAM] unsigned int 
  4166 ;;  i               1   47[COMRAM] enum E14551
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4176 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;Total ram usage:       23 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 2
  4183 ;; This function calls:
  4184 ;;		___lwdiv
  4185 ;;		___wmul
  4186 ;;		_abs
  4187 ;; This function is called by:
  4188 ;;		_card_response
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text20
  4193   001DB0                     __ptext20:
  4194                           	callstack 0
  4195   001DB0                     _normalise_readings:
  4196                           	callstack 27
  4197   001DB0                     
  4198                           ;colour_identify.c: 49:     for(colour i = RED; i<= BLACK; i++){
  4199   001DB0  0E00               	movlw	0
  4200   001DB2  6E30               	movwf	normalise_readings@i^0,c
  4201   001DB4                     l2895:
  4202                           
  4203                           ;colour_identify.c: 53:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  4204   001DB4  5030               	movf	normalise_readings@i^0,w,c
  4205   001DB6  0D02               	mullw	2
  4206   001DB8  CFF3 F026          	movff	prodl,??_normalise_readings
  4207   001DBC  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4208   001DC0  5026               	movf	??_normalise_readings^0,w,c
  4209   001DC2  2422               	addwf	normalise_readings@expected_values^0,w,c
  4210   001DC4  6ED9               	movwf	fsr2l,c
  4211   001DC6  5027               	movf	(??_normalise_readings+1)^0,w,c
  4212   001DC8  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4213   001DCA  6EDA               	movwf	fsr2h,c
  4214   001DCC  CFDE F028          	movff	postinc2,??_normalise_readings+2
  4215   001DD0  CFDD F029          	movff	postdec2,??_normalise_readings+3
  4216   001DD4  5028               	movf	(??_normalise_readings+2)^0,w,c
  4217   001DD6  5C1C               	subwf	normalise_readings@red_read^0,w,c
  4218   001DD8  6E16               	movwf	abs@a^0,c
  4219   001DDA  5029               	movf	(??_normalise_readings+3)^0,w,c
  4220   001DDC  581D               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4221   001DDE  6E17               	movwf	(abs@a+1)^0,c
  4222   001DE0  ECD5  F018         	call	_abs	;wreg free
  4223   001DE4  C016  F02E         	movff	?_abs,normalise_readings@difference
  4224   001DE8  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4225                           
  4226                           ;colour_identify.c: 54:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4227   001DEC  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4228   001DF0  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4229   001DF4  0E00               	movlw	0
  4230   001DF6  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4231   001DF8  0E64               	movlw	100
  4232   001DFA  6E06               	movwf	___wmul@multiplicand^0,c
  4233   001DFC  EC7B  F019         	call	___wmul	;wreg free
  4234   001E00  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4235   001E04  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4236   001E08  5030               	movf	normalise_readings@i^0,w,c
  4237   001E0A  0D02               	mullw	2
  4238   001E0C  CFF3 F026          	movff	prodl,??_normalise_readings
  4239   001E10  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4240   001E14  5026               	movf	??_normalise_readings^0,w,c
  4241   001E16  2422               	addwf	normalise_readings@expected_values^0,w,c
  4242   001E18  6ED9               	movwf	fsr2l,c
  4243   001E1A  5027               	movf	(??_normalise_readings+1)^0,w,c
  4244   001E1C  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4245   001E1E  6EDA               	movwf	fsr2h,c
  4246   001E20  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4247   001E24  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4248   001E28  EC65  F017         	call	___lwdiv	;wreg free
  4249   001E2C  5030               	movf	normalise_readings@i^0,w,c
  4250   001E2E  0D02               	mullw	2
  4251   001E30  CFF3 F028          	movff	prodl,??_normalise_readings+2
  4252   001E34  CFF4 F029          	movff	prodh,??_normalise_readings+3
  4253   001E38  5028               	movf	(??_normalise_readings+2)^0,w,c
  4254   001E3A  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4255   001E3C  6ED9               	movwf	fsr2l,c
  4256   001E3E  5029               	movf	(??_normalise_readings+3)^0,w,c
  4257   001E40  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4258   001E42  6EDA               	movwf	fsr2h,c
  4259   001E44  C00A  FFDE         	movff	?___lwdiv,postinc2
  4260   001E48  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4261                           
  4262                           ;colour_identify.c: 57:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4263   001E4C  5030               	movf	normalise_readings@i^0,w,c
  4264   001E4E  0D02               	mullw	2
  4265   001E50  CFF3 F026          	movff	prodl,??_normalise_readings
  4266   001E54  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4267   001E58  5026               	movf	??_normalise_readings^0,w,c
  4268   001E5A  2422               	addwf	normalise_readings@expected_values^0,w,c
  4269   001E5C  6E28               	movwf	(??_normalise_readings+2)^0,c
  4270   001E5E  5027               	movf	(??_normalise_readings+1)^0,w,c
  4271   001E60  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4272   001E62  6E29               	movwf	(??_normalise_readings+3)^0,c
  4273   001E64  0E12               	movlw	18
  4274   001E66  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4275   001E68  6ED9               	movwf	fsr2l,c
  4276   001E6A  0E00               	movlw	0
  4277   001E6C  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4278   001E6E  6EDA               	movwf	fsr2h,c
  4279   001E70  CFDE F02A          	movff	postinc2,??_normalise_readings+4
  4280   001E74  CFDD F02B          	movff	postdec2,??_normalise_readings+5
  4281   001E78  502A               	movf	(??_normalise_readings+4)^0,w,c
  4282   001E7A  5C1E               	subwf	normalise_readings@green_read^0,w,c
  4283   001E7C  6E16               	movwf	abs@a^0,c
  4284   001E7E  502B               	movf	(??_normalise_readings+5)^0,w,c
  4285   001E80  581F               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4286   001E82  6E17               	movwf	(abs@a+1)^0,c
  4287   001E84  ECD5  F018         	call	_abs	;wreg free
  4288   001E88  C016  F02E         	movff	?_abs,normalise_readings@difference
  4289   001E8C  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4290                           
  4291                           ;colour_identify.c: 58:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4292   001E90  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4293   001E94  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4294   001E98  0E00               	movlw	0
  4295   001E9A  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4296   001E9C  0E64               	movlw	100
  4297   001E9E  6E06               	movwf	___wmul@multiplicand^0,c
  4298   001EA0  EC7B  F019         	call	___wmul	;wreg free
  4299   001EA4  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4300   001EA8  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4301   001EAC  5030               	movf	normalise_readings@i^0,w,c
  4302   001EAE  0D02               	mullw	2
  4303   001EB0  CFF3 F026          	movff	prodl,??_normalise_readings
  4304   001EB4  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4305   001EB8  5026               	movf	??_normalise_readings^0,w,c
  4306   001EBA  2422               	addwf	normalise_readings@expected_values^0,w,c
  4307   001EBC  6E28               	movwf	(??_normalise_readings+2)^0,c
  4308   001EBE  5027               	movf	(??_normalise_readings+1)^0,w,c
  4309   001EC0  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4310   001EC2  6E29               	movwf	(??_normalise_readings+3)^0,c
  4311   001EC4  0E12               	movlw	18
  4312   001EC6  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4313   001EC8  6ED9               	movwf	fsr2l,c
  4314   001ECA  0E00               	movlw	0
  4315   001ECC  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4316   001ECE  6EDA               	movwf	fsr2h,c
  4317   001ED0  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4318   001ED4  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4319   001ED8  EC65  F017         	call	___lwdiv	;wreg free
  4320   001EDC  5030               	movf	normalise_readings@i^0,w,c
  4321   001EDE  0D02               	mullw	2
  4322   001EE0  CFF3 F02A          	movff	prodl,??_normalise_readings+4
  4323   001EE4  CFF4 F02B          	movff	prodh,??_normalise_readings+5
  4324   001EE8  502A               	movf	(??_normalise_readings+4)^0,w,c
  4325   001EEA  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4326   001EEC  6E2C               	movwf	(??_normalise_readings+6)^0,c
  4327   001EEE  502B               	movf	(??_normalise_readings+5)^0,w,c
  4328   001EF0  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4329   001EF2  6E2D               	movwf	(??_normalise_readings+7)^0,c
  4330   001EF4  0E12               	movlw	18
  4331   001EF6  242C               	addwf	(??_normalise_readings+6)^0,w,c
  4332   001EF8  6ED9               	movwf	fsr2l,c
  4333   001EFA  0E00               	movlw	0
  4334   001EFC  202D               	addwfc	(??_normalise_readings+7)^0,w,c
  4335   001EFE  6EDA               	movwf	fsr2h,c
  4336   001F00  C00A  FFDE         	movff	?___lwdiv,postinc2
  4337   001F04  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4338                           
  4339                           ;colour_identify.c: 61:         difference = abs(blue_read - expected_values[BLUE][i]);
  4340   001F08  5030               	movf	normalise_readings@i^0,w,c
  4341   001F0A  0D02               	mullw	2
  4342   001F0C  CFF3 F026          	movff	prodl,??_normalise_readings
  4343   001F10  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4344   001F14  5026               	movf	??_normalise_readings^0,w,c
  4345   001F16  2422               	addwf	normalise_readings@expected_values^0,w,c
  4346   001F18  6E28               	movwf	(??_normalise_readings+2)^0,c
  4347   001F1A  5027               	movf	(??_normalise_readings+1)^0,w,c
  4348   001F1C  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4349   001F1E  6E29               	movwf	(??_normalise_readings+3)^0,c
  4350   001F20  0E24               	movlw	36
  4351   001F22  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4352   001F24  6ED9               	movwf	fsr2l,c
  4353   001F26  0E00               	movlw	0
  4354   001F28  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4355   001F2A  6EDA               	movwf	fsr2h,c
  4356   001F2C  CFDE F02A          	movff	postinc2,??_normalise_readings+4
  4357   001F30  CFDD F02B          	movff	postdec2,??_normalise_readings+5
  4358   001F34  502A               	movf	(??_normalise_readings+4)^0,w,c
  4359   001F36  5C20               	subwf	normalise_readings@blue_read^0,w,c
  4360   001F38  6E16               	movwf	abs@a^0,c
  4361   001F3A  502B               	movf	(??_normalise_readings+5)^0,w,c
  4362   001F3C  5821               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4363   001F3E  6E17               	movwf	(abs@a+1)^0,c
  4364   001F40  ECD5  F018         	call	_abs	;wreg free
  4365   001F44  C016  F02E         	movff	?_abs,normalise_readings@difference
  4366   001F48  C017  F02F         	movff	?_abs+1,normalise_readings@difference+1
  4367                           
  4368                           ;colour_identify.c: 62:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4369   001F4C  C02E  F004         	movff	normalise_readings@difference,___wmul@multiplier
  4370   001F50  C02F  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4371   001F54  0E00               	movlw	0
  4372   001F56  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  4373   001F58  0E64               	movlw	100
  4374   001F5A  6E06               	movwf	___wmul@multiplicand^0,c
  4375   001F5C  EC7B  F019         	call	___wmul	;wreg free
  4376   001F60  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  4377   001F64  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  4378   001F68  5030               	movf	normalise_readings@i^0,w,c
  4379   001F6A  0D02               	mullw	2
  4380   001F6C  CFF3 F026          	movff	prodl,??_normalise_readings
  4381   001F70  CFF4 F027          	movff	prodh,??_normalise_readings+1
  4382   001F74  5026               	movf	??_normalise_readings^0,w,c
  4383   001F76  2422               	addwf	normalise_readings@expected_values^0,w,c
  4384   001F78  6E28               	movwf	(??_normalise_readings+2)^0,c
  4385   001F7A  5027               	movf	(??_normalise_readings+1)^0,w,c
  4386   001F7C  2023               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4387   001F7E  6E29               	movwf	(??_normalise_readings+3)^0,c
  4388   001F80  0E24               	movlw	36
  4389   001F82  2428               	addwf	(??_normalise_readings+2)^0,w,c
  4390   001F84  6ED9               	movwf	fsr2l,c
  4391   001F86  0E00               	movlw	0
  4392   001F88  2029               	addwfc	(??_normalise_readings+3)^0,w,c
  4393   001F8A  6EDA               	movwf	fsr2h,c
  4394   001F8C  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  4395   001F90  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  4396   001F94  EC65  F017         	call	___lwdiv	;wreg free
  4397   001F98  5030               	movf	normalise_readings@i^0,w,c
  4398   001F9A  0D02               	mullw	2
  4399   001F9C  CFF3 F02A          	movff	prodl,??_normalise_readings+4
  4400   001FA0  CFF4 F02B          	movff	prodh,??_normalise_readings+5
  4401   001FA4  502A               	movf	(??_normalise_readings+4)^0,w,c
  4402   001FA6  2424               	addwf	normalise_readings@normalised_values^0,w,c
  4403   001FA8  6E2C               	movwf	(??_normalise_readings+6)^0,c
  4404   001FAA  502B               	movf	(??_normalise_readings+5)^0,w,c
  4405   001FAC  2025               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4406   001FAE  6E2D               	movwf	(??_normalise_readings+7)^0,c
  4407   001FB0  0E24               	movlw	36
  4408   001FB2  242C               	addwf	(??_normalise_readings+6)^0,w,c
  4409   001FB4  6ED9               	movwf	fsr2l,c
  4410   001FB6  0E00               	movlw	0
  4411   001FB8  202D               	addwfc	(??_normalise_readings+7)^0,w,c
  4412   001FBA  6EDA               	movwf	fsr2h,c
  4413   001FBC  C00A  FFDE         	movff	?___lwdiv,postinc2
  4414   001FC0  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  4415   001FC4                     
  4416                           ;colour_identify.c: 63:     }
  4417   001FC4  2A30               	incf	normalise_readings@i^0,f,c
  4418   001FC6  0E08               	movlw	8
  4419   001FC8  6430               	cpfsgt	normalise_readings@i^0,c
  4420   001FCA  EFE9  F00F         	goto	u1431
  4421   001FCE  EFEB  F00F         	goto	u1430
  4422   001FD2                     u1431:
  4423   001FD2  EFDA  F00E         	goto	l2895
  4424   001FD6                     u1430:
  4425   001FD6  0012               	return		;funcret
  4426   001FD8                     __end_of_normalise_readings:
  4427                           	callstack 0
  4428                           
  4429 ;; *************** function _abs *****************
  4430 ;; Defined at:
  4431 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  a               2   21[COMRAM] int 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  2   21[COMRAM] int 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4445 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4448 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4449 ;;Total ram usage:        4 bytes
  4450 ;; Hardware stack levels used: 1
  4451 ;; Hardware stack levels required when called: 1
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_normalise_readings
  4456 ;;		_dtoa
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text21
  4461   0031AA                     __ptext21:
  4462                           	callstack 0
  4463   0031AA                     _abs:
  4464                           	callstack 25
  4465   0031AA  BE17               	btfsc	(abs@a+1)^0,7,c
  4466   0031AC  EFE2  F018         	goto	u920
  4467   0031B0  5017               	movf	(abs@a+1)^0,w,c
  4468   0031B2  E106               	bnz	u921
  4469   0031B4  0416               	decf	abs@a^0,w,c
  4470   0031B6  B0D8               	btfsc	status,0,c
  4471   0031B8  EFE0  F018         	goto	u921
  4472   0031BC  EFE2  F018         	goto	u920
  4473   0031C0                     u921:
  4474   0031C0  EFF0  F018         	goto	l1172
  4475   0031C4                     u920:
  4476   0031C4  C016  F018         	movff	abs@a,??_abs
  4477   0031C8  C017  F019         	movff	abs@a+1,??_abs+1
  4478   0031CC  1E18               	comf	??_abs^0,f,c
  4479   0031CE  1E19               	comf	(??_abs+1)^0,f,c
  4480   0031D0  4A18               	infsnz	??_abs^0,f,c
  4481   0031D2  2A19               	incf	(??_abs+1)^0,f,c
  4482   0031D4  C018  F016         	movff	??_abs,?_abs
  4483   0031D8  C019  F017         	movff	??_abs+1,?_abs+1
  4484   0031DC  EFF4  F018         	goto	l1175
  4485   0031E0                     l1172:
  4486   0031E0  C016  F016         	movff	abs@a,?_abs
  4487   0031E4  C017  F017         	movff	abs@a+1,?_abs+1
  4488   0031E8                     l1175:
  4489   0031E8  0012               	return		;funcret
  4490   0031EA                     __end_of_abs:
  4491                           	callstack 0
  4492                           
  4493 ;; *************** function _motor_response *****************
  4494 ;; Defined at:
  4495 ;;		line 91 in file "colour_identify.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  card            1    wreg     enum E14551
  4498 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  4499 ;;		 -> main@motorL(9), 
  4500 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  4501 ;;		 -> main@motorR(9), 
  4502 ;;  ReturnHomeAr   60    4[BANK0 ] struct HomeStored
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  card            1   41[COMRAM] enum E14551
  4505 ;;  j               2   39[COMRAM] int 
  4506 ;;  i               2   42[COMRAM] int 
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4516 ;;      Params:         0      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4517 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4519 ;;      Totals:         7      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4520 ;;Total ram usage:       71 bytes
  4521 ;; Hardware stack levels used: 1
  4522 ;; Hardware stack levels required when called: 5
  4523 ;; This function calls:
  4524 ;;		_fullSpeedAhead
  4525 ;;		_home_response
  4526 ;;		_reverseFullSpeed
  4527 ;;		_stop
  4528 ;;		_turnLeft45
  4529 ;;		_turnRight45
  4530 ;; This function is called by:
  4531 ;;		_card_response
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text22
  4536   000E62                     __ptext22:
  4537                           	callstack 0
  4538   000E62                     _motor_response:
  4539                           	callstack 24
  4540                           
  4541                           ;incstack = 0
  4542                           ;motor_response@card stored from wreg
  4543   000E62  6E2A               	movwf	motor_response@card^0,c
  4544   000E64                     
  4545                           ;colour_identify.c: 96:     switch (card){
  4546   000E64  EF53  F009         	goto	l3075
  4547   000E68                     l2939:
  4548                           
  4549                           ;colour_identify.c: 98:             reverseFullSpeed(mL,mR);
  4550   000E68  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4551   000E6C  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4552   000E70  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4553   000E74  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4554   000E78  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4555   000E7C                     
  4556                           ;colour_identify.c: 99:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4557   000E7C  0E05               	movlw	5
  4558   000E7E  6E27               	movwf	(??_motor_response+1)^0,c
  4559   000E80  0E0F               	movlw	15
  4560   000E82  6E26               	movwf	??_motor_response^0,c
  4561   000E84  0EF1               	movlw	241
  4562   000E86                     u1867:
  4563   000E86  2EE8               	decfsz	wreg,f,c
  4564   000E88  D7FE               	bra	u1867
  4565   000E8A  2E26               	decfsz	??_motor_response^0,f,c
  4566   000E8C  D7FC               	bra	u1867
  4567   000E8E  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4568   000E90  D7FA               	bra	u1867
  4569   000E92  F000               	nop	
  4570   000E94                     l2943:
  4571                           
  4572                           ;colour_identify.c: 100:             turnRight45(mL,mR);
  4573   000E94  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4574   000E98  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4575   000E9C  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4576   000EA0  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4577   000EA4  EC27  F015         	call	_turnRight45	;wreg free
  4578   000EA8                     
  4579                           ;colour_identify.c: 101:             stop(mL,mR);
  4580   000EA8  C060  F017         	movff	motor_response@mL,stop@mL
  4581   000EAC  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4582   000EB0  C062  F019         	movff	motor_response@mR,stop@mR
  4583   000EB4  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4584   000EB8  ECA5  F016         	call	_stop	;wreg free
  4585   000EBC                     
  4586                           ;colour_identify.c: 102:             turnRight45(mL,mR);
  4587   000EBC  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4588   000EC0  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4589   000EC4  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4590   000EC8  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4591   000ECC  EC27  F015         	call	_turnRight45	;wreg free
  4592   000ED0                     l2949:
  4593                           
  4594                           ;colour_identify.c: 103:             stop(mL,mR);
  4595   000ED0  C060  F017         	movff	motor_response@mL,stop@mL
  4596   000ED4  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4597   000ED8  C062  F019         	movff	motor_response@mR,stop@mR
  4598   000EDC  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4599   000EE0  ECA5  F016         	call	_stop	;wreg free
  4600                           
  4601                           ;colour_identify.c: 104:             break;
  4602   000EE4  EF84  F009         	goto	l362
  4603   000EE8                     l2951:
  4604                           
  4605                           ;colour_identify.c: 106:             reverseFullSpeed(mL,mR);
  4606   000EE8  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4607   000EEC  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4608   000EF0  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4609   000EF4  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4610   000EF8  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4611   000EFC                     
  4612                           ;colour_identify.c: 107:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4613   000EFC  0E05               	movlw	5
  4614   000EFE  6E27               	movwf	(??_motor_response+1)^0,c
  4615   000F00  0E0F               	movlw	15
  4616   000F02  6E26               	movwf	??_motor_response^0,c
  4617   000F04  0EF1               	movlw	241
  4618   000F06                     u1877:
  4619   000F06  2EE8               	decfsz	wreg,f,c
  4620   000F08  D7FE               	bra	u1877
  4621   000F0A  2E26               	decfsz	??_motor_response^0,f,c
  4622   000F0C  D7FC               	bra	u1877
  4623   000F0E  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4624   000F10  D7FA               	bra	u1877
  4625   000F12  F000               	nop	
  4626   000F14                     l2955:
  4627                           
  4628                           ;colour_identify.c: 108:             turnLeft45(mL,mR);
  4629   000F14  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4630   000F18  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4631   000F1C  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4632   000F20  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4633   000F24  EC7E  F015         	call	_turnLeft45	;wreg free
  4634   000F28                     
  4635                           ;colour_identify.c: 109:             stop(mL,mR);
  4636   000F28  C060  F017         	movff	motor_response@mL,stop@mL
  4637   000F2C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4638   000F30  C062  F019         	movff	motor_response@mR,stop@mR
  4639   000F34  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4640   000F38  ECA5  F016         	call	_stop	;wreg free
  4641   000F3C                     
  4642                           ;colour_identify.c: 110:             turnLeft45(mL,mR);
  4643   000F3C  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4644   000F40  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4645   000F44  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4646   000F48  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4647   000F4C  EC7E  F015         	call	_turnLeft45	;wreg free
  4648   000F50  EF68  F007         	goto	l2949
  4649   000F54                     l2963:
  4650                           
  4651                           ;colour_identify.c: 114:             reverseFullSpeed(mL,mR);
  4652   000F54  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4653   000F58  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4654   000F5C  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4655   000F60  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4656   000F64  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4657   000F68                     
  4658                           ;colour_identify.c: 115:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4659   000F68  0E05               	movlw	5
  4660   000F6A  6E27               	movwf	(??_motor_response+1)^0,c
  4661   000F6C  0E0F               	movlw	15
  4662   000F6E  6E26               	movwf	??_motor_response^0,c
  4663   000F70  0EF1               	movlw	241
  4664   000F72                     u1887:
  4665   000F72  2EE8               	decfsz	wreg,f,c
  4666   000F74  D7FE               	bra	u1887
  4667   000F76  2E26               	decfsz	??_motor_response^0,f,c
  4668   000F78  D7FC               	bra	u1887
  4669   000F7A  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4670   000F7C  D7FA               	bra	u1887
  4671   000F7E  F000               	nop	
  4672   000F80                     
  4673                           ;colour_identify.c: 116:             turnRight45(mL,mR);
  4674   000F80  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4675   000F84  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4676   000F88  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4677   000F8C  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4678   000F90  EC27  F015         	call	_turnRight45	;wreg free
  4679   000F94                     
  4680                           ;colour_identify.c: 117:             stop(mL,mR);
  4681   000F94  C060  F017         	movff	motor_response@mL,stop@mL
  4682   000F98  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4683   000F9C  C062  F019         	movff	motor_response@mR,stop@mR
  4684   000FA0  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4685   000FA4  ECA5  F016         	call	_stop	;wreg free
  4686   000FA8                     l2971:
  4687                           
  4688                           ;colour_identify.c: 118:             turnRight45(mL,mR);
  4689   000FA8  C060  F017         	movff	motor_response@mL,turnRight45@mL
  4690   000FAC  C061  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  4691   000FB0  C062  F019         	movff	motor_response@mR,turnRight45@mR
  4692   000FB4  C063  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  4693   000FB8  EC27  F015         	call	_turnRight45	;wreg free
  4694   000FBC                     l2973:
  4695                           
  4696                           ;colour_identify.c: 119:             stop(mL,mR);
  4697   000FBC  C060  F017         	movff	motor_response@mL,stop@mL
  4698   000FC0  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4699   000FC4  C062  F019         	movff	motor_response@mR,stop@mR
  4700   000FC8  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4701   000FCC  ECA5  F016         	call	_stop	;wreg free
  4702   000FD0  EF4A  F007         	goto	l2943
  4703   000FD4                     l2983:
  4704                           
  4705                           ;colour_identify.c: 126:             reverseFullSpeed(mL,mR);
  4706   000FD4  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4707   000FD8  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4708   000FDC  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4709   000FE0  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4710   000FE4  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4711   000FE8                     
  4712                           ;colour_identify.c: 127:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4713   000FE8  0E05               	movlw	5
  4714   000FEA  6E27               	movwf	(??_motor_response+1)^0,c
  4715   000FEC  0E0F               	movlw	15
  4716   000FEE  6E26               	movwf	??_motor_response^0,c
  4717   000FF0  0EF1               	movlw	241
  4718   000FF2                     u1897:
  4719   000FF2  2EE8               	decfsz	wreg,f,c
  4720   000FF4  D7FE               	bra	u1897
  4721   000FF6  2E26               	decfsz	??_motor_response^0,f,c
  4722   000FF8  D7FC               	bra	u1897
  4723   000FFA  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4724   000FFC  D7FA               	bra	u1897
  4725   000FFE  F000               	nop	
  4726   001000                     
  4727                           ;colour_identify.c: 128:             reverseFullSpeed(mL,mR);
  4728   001000  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4729   001004  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4730   001008  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4731   00100C  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4732   001010  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4733                           
  4734                           ;colour_identify.c: 129:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4735   001014  0E29               	movlw	41
  4736   001016  6E27               	movwf	(??_motor_response+1)^0,c
  4737   001018  0E96               	movlw	150
  4738   00101A  6E26               	movwf	??_motor_response^0,c
  4739   00101C  0E7F               	movlw	127
  4740   00101E                     u1907:
  4741   00101E  2EE8               	decfsz	wreg,f,c
  4742   001020  D7FE               	bra	u1907
  4743   001022  2E26               	decfsz	??_motor_response^0,f,c
  4744   001024  D7FC               	bra	u1907
  4745   001026  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4746   001028  D7FA               	bra	u1907
  4747   00102A  F000               	nop	
  4748   00102C  EFDE  F007         	goto	l2973
  4749   001030                     l2999:
  4750                           
  4751                           ;colour_identify.c: 137:             reverseFullSpeed(mL,mR);
  4752   001030  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4753   001034  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4754   001038  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4755   00103C  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4756   001040  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4757   001044                     
  4758                           ;colour_identify.c: 138:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4759   001044  0E05               	movlw	5
  4760   001046  6E27               	movwf	(??_motor_response+1)^0,c
  4761   001048  0E0F               	movlw	15
  4762   00104A  6E26               	movwf	??_motor_response^0,c
  4763   00104C  0EF1               	movlw	241
  4764   00104E                     u1917:
  4765   00104E  2EE8               	decfsz	wreg,f,c
  4766   001050  D7FE               	bra	u1917
  4767   001052  2E26               	decfsz	??_motor_response^0,f,c
  4768   001054  D7FC               	bra	u1917
  4769   001056  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4770   001058  D7FA               	bra	u1917
  4771   00105A  F000               	nop	
  4772   00105C                     
  4773                           ;colour_identify.c: 139:             reverseFullSpeed(mL,mR);
  4774   00105C  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4775   001060  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4776   001064  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4777   001068  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4778   00106C  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4779                           
  4780                           ;colour_identify.c: 140:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4781   001070  0E29               	movlw	41
  4782   001072  6E27               	movwf	(??_motor_response+1)^0,c
  4783   001074  0E96               	movlw	150
  4784   001076  6E26               	movwf	??_motor_response^0,c
  4785   001078  0E7F               	movlw	127
  4786   00107A                     u1927:
  4787   00107A  2EE8               	decfsz	wreg,f,c
  4788   00107C  D7FE               	bra	u1927
  4789   00107E  2E26               	decfsz	??_motor_response^0,f,c
  4790   001080  D7FC               	bra	u1927
  4791   001082  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4792   001084  D7FA               	bra	u1927
  4793   001086  F000               	nop	
  4794   001088                     l3005:
  4795                           
  4796                           ;colour_identify.c: 141:             stop(mL,mR);
  4797   001088  C060  F017         	movff	motor_response@mL,stop@mL
  4798   00108C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4799   001090  C062  F019         	movff	motor_response@mR,stop@mR
  4800   001094  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4801   001098  ECA5  F016         	call	_stop	;wreg free
  4802   00109C  EF8A  F007         	goto	l2955
  4803   0010A0                     l3015:
  4804                           
  4805                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  4806   0010A0  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4807   0010A4  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4808   0010A8  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4809   0010AC  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4810   0010B0  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4811   0010B4                     
  4812                           ;colour_identify.c: 149:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4813   0010B4  0E05               	movlw	5
  4814   0010B6  6E27               	movwf	(??_motor_response+1)^0,c
  4815   0010B8  0E0F               	movlw	15
  4816   0010BA  6E26               	movwf	??_motor_response^0,c
  4817   0010BC  0EF1               	movlw	241
  4818   0010BE                     u1937:
  4819   0010BE  2EE8               	decfsz	wreg,f,c
  4820   0010C0  D7FE               	bra	u1937
  4821   0010C2  2E26               	decfsz	??_motor_response^0,f,c
  4822   0010C4  D7FC               	bra	u1937
  4823   0010C6  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4824   0010C8  D7FA               	bra	u1937
  4825   0010CA  F000               	nop	
  4826   0010CC  EFD4  F007         	goto	l2971
  4827   0010D0                     l3031:
  4828                           
  4829                           ;colour_identify.c: 158:             reverseFullSpeed(mL,mR);
  4830   0010D0  C060  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  4831   0010D4  C061  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4832   0010D8  C062  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  4833   0010DC  C063  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4834   0010E0  ECD5  F015         	call	_reverseFullSpeed	;wreg free
  4835   0010E4                     
  4836                           ;colour_identify.c: 159:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4837   0010E4  0E05               	movlw	5
  4838   0010E6  6E27               	movwf	(??_motor_response+1)^0,c
  4839   0010E8  0E0F               	movlw	15
  4840   0010EA  6E26               	movwf	??_motor_response^0,c
  4841   0010EC  0EF1               	movlw	241
  4842   0010EE                     u1947:
  4843   0010EE  2EE8               	decfsz	wreg,f,c
  4844   0010F0  D7FE               	bra	u1947
  4845   0010F2  2E26               	decfsz	??_motor_response^0,f,c
  4846   0010F4  D7FC               	bra	u1947
  4847   0010F6  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4848   0010F8  D7FA               	bra	u1947
  4849   0010FA  F000               	nop	
  4850   0010FC                     
  4851                           ;colour_identify.c: 160:             turnLeft45(mL,mR);
  4852   0010FC  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4853   001100  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4854   001104  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4855   001108  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4856   00110C  EC7E  F015         	call	_turnLeft45	;wreg free
  4857   001110  EF44  F008         	goto	l3005
  4858   001114                     l3047:
  4859                           
  4860                           ;colour_identify.c: 169:             stop(mL,mR);
  4861   001114  C060  F017         	movff	motor_response@mL,stop@mL
  4862   001118  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4863   00111C  C062  F019         	movff	motor_response@mR,stop@mR
  4864   001120  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4865   001124  ECA5  F016         	call	_stop	;wreg free
  4866                           
  4867                           ;colour_identify.c: 170:             turnLeft45(mL,mR);
  4868   001128  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4869   00112C  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4870   001130  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4871   001134  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4872   001138  EC7E  F015         	call	_turnLeft45	;wreg free
  4873                           
  4874                           ;colour_identify.c: 171:             stop(mL,mR);
  4875   00113C  C060  F017         	movff	motor_response@mL,stop@mL
  4876   001140  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4877   001144  C062  F019         	movff	motor_response@mR,stop@mR
  4878   001148  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4879   00114C  ECA5  F016         	call	_stop	;wreg free
  4880                           
  4881                           ;colour_identify.c: 172:             turnLeft45(mL,mR);
  4882   001150  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4883   001154  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4884   001158  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4885   00115C  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4886   001160  EC7E  F015         	call	_turnLeft45	;wreg free
  4887                           
  4888                           ;colour_identify.c: 173:             stop(mL,mR);
  4889   001164  C060  F017         	movff	motor_response@mL,stop@mL
  4890   001168  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4891   00116C  C062  F019         	movff	motor_response@mR,stop@mR
  4892   001170  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4893   001174  ECA5  F016         	call	_stop	;wreg free
  4894                           
  4895                           ;colour_identify.c: 174:             turnLeft45(mL,mR);
  4896   001178  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4897   00117C  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4898   001180  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4899   001184  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4900   001188  EC7E  F015         	call	_turnLeft45	;wreg free
  4901                           
  4902                           ;colour_identify.c: 175:             stop(mL,mR);
  4903   00118C  C060  F017         	movff	motor_response@mL,stop@mL
  4904   001190  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4905   001194  C062  F019         	movff	motor_response@mR,stop@mR
  4906   001198  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4907   00119C  ECA5  F016         	call	_stop	;wreg free
  4908                           
  4909                           ;colour_identify.c: 176:             turnLeft45(mL,mR);
  4910   0011A0  C060  F017         	movff	motor_response@mL,turnLeft45@mL
  4911   0011A4  C061  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  4912   0011A8  C062  F019         	movff	motor_response@mR,turnLeft45@mR
  4913   0011AC  C063  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  4914   0011B0  EC7E  F015         	call	_turnLeft45	;wreg free
  4915                           
  4916                           ;colour_identify.c: 177:             stop(mL,mR);
  4917   0011B4  C060  F017         	movff	motor_response@mL,stop@mL
  4918   0011B8  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  4919   0011BC  C062  F019         	movff	motor_response@mR,stop@mR
  4920   0011C0  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  4921   0011C4  ECA5  F016         	call	_stop	;wreg free
  4922   0011C8                     
  4923                           ;colour_identify.c: 178:             for(int i = 29; i >= 0; i--){
  4924   0011C8  0E00               	movlw	0
  4925   0011CA  6E2C               	movwf	(motor_response@i+1)^0,c
  4926   0011CC  0E1D               	movlw	29
  4927   0011CE  6E2B               	movwf	motor_response@i^0,c
  4928   0011D0                     l3055:
  4929                           
  4930                           ;colour_identify.c: 179:                 if (ReturnHomeArray.TimerCount[i] != 0){
  4931   0011D0  90D8               	bcf	status,0,c
  4932   0011D2  342B               	rlcf	motor_response@i^0,w,c
  4933   0011D4  6ED9               	movwf	fsr2l,c
  4934   0011D6  342C               	rlcf	(motor_response@i+1)^0,w,c
  4935   0011D8  6EDA               	movwf	fsr2h,c
  4936   0011DA  0E64               	movlw	low motor_response@ReturnHomeArray
  4937   0011DC  26D9               	addwf	fsr2l,f,c
  4938   0011DE  0E00               	movlw	high motor_response@ReturnHomeArray
  4939   0011E0  22DA               	addwfc	fsr2h,f,c
  4940   0011E2  50DE               	movf	postinc2,w,c
  4941   0011E4  10DE               	iorwf	postinc2,w,c
  4942   0011E6  B4D8               	btfsc	status,2,c
  4943   0011E8  EFF8  F008         	goto	u1471
  4944   0011EC  EFFA  F008         	goto	u1470
  4945   0011F0                     u1471:
  4946   0011F0  EF47  F009         	goto	l3069
  4947   0011F4                     u1470:
  4948   0011F4                     
  4949                           ;colour_identify.c: 180:                     fullSpeedAhead(mL,mR);
  4950   0011F4  C060  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4951   0011F8  C061  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4952   0011FC  C062  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4953   001200  C063  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4954   001204  EC1B  F016         	call	_fullSpeedAhead	;wreg free
  4955   001208                     
  4956                           ;colour_identify.c: 181:                     for (int j=0; j<= ReturnHomeArray.TimerCoun
      +                          t[i]; i++){
  4957   001208  0E00               	movlw	0
  4958   00120A  6E29               	movwf	(motor_response@j+1)^0,c
  4959   00120C  0E00               	movlw	0
  4960   00120E  6E28               	movwf	motor_response@j^0,c
  4961   001210  EF18  F009         	goto	l3065
  4962   001214                     l3061:
  4963                           
  4964                           ;colour_identify.c: 182:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  4965   001214  0E09               	movlw	9
  4966   001216  6E27               	movwf	(??_motor_response+1)^0,c
  4967   001218  0E1E               	movlw	30
  4968   00121A  6E26               	movwf	??_motor_response^0,c
  4969   00121C  0EE4               	movlw	228
  4970   00121E                     u1957:
  4971   00121E  2EE8               	decfsz	wreg,f,c
  4972   001220  D7FE               	bra	u1957
  4973   001222  2E26               	decfsz	??_motor_response^0,f,c
  4974   001224  D7FC               	bra	u1957
  4975   001226  2E27               	decfsz	(??_motor_response+1)^0,f,c
  4976   001228  D7FA               	bra	u1957
  4977   00122A  D000               	nop2	
  4978   00122C                     
  4979                           ;colour_identify.c: 183:                     }
  4980   00122C  4A2B               	infsnz	motor_response@i^0,f,c
  4981   00122E  2A2C               	incf	(motor_response@i+1)^0,f,c
  4982   001230                     l3065:
  4983   001230  90D8               	bcf	status,0,c
  4984   001232  342B               	rlcf	motor_response@i^0,w,c
  4985   001234  6ED9               	movwf	fsr2l,c
  4986   001236  342C               	rlcf	(motor_response@i+1)^0,w,c
  4987   001238  6EDA               	movwf	fsr2h,c
  4988   00123A  0E64               	movlw	low motor_response@ReturnHomeArray
  4989   00123C  26D9               	addwf	fsr2l,f,c
  4990   00123E  0E00               	movlw	high motor_response@ReturnHomeArray
  4991   001240  22DA               	addwfc	fsr2h,f,c
  4992   001242  5028               	movf	motor_response@j^0,w,c
  4993   001244  5CDE               	subwf	postinc2,w,c
  4994   001246  5029               	movf	(motor_response@j+1)^0,w,c
  4995   001248  58DE               	subwfb	postinc2,w,c
  4996   00124A  B0D8               	btfsc	status,0,c
  4997   00124C  EF2A  F009         	goto	u1481
  4998   001250  EF2C  F009         	goto	u1480
  4999   001254                     u1481:
  5000   001254  EF0A  F009         	goto	l3061
  5001   001258                     u1480:
  5002   001258                     
  5003                           ;colour_identify.c: 184:                     stop(mL,mR);
  5004   001258  C060  F017         	movff	motor_response@mL,stop@mL
  5005   00125C  C061  F018         	movff	motor_response@mL+1,stop@mL+1
  5006   001260  C062  F019         	movff	motor_response@mR,stop@mR
  5007   001264  C063  F01A         	movff	motor_response@mR+1,stop@mR+1
  5008   001268  ECA5  F016         	call	_stop	;wreg free
  5009                           
  5010                           ;colour_identify.c: 185:                     home_response(ReturnHomeArray.card[i], mL, 
      +                          mR);
  5011   00126C  C060  F01F         	movff	motor_response@mL,home_response@mL
  5012   001270  C061  F020         	movff	motor_response@mL+1,home_response@mL+1
  5013   001274  C062  F021         	movff	motor_response@mR,home_response@mR
  5014   001278  C063  F022         	movff	motor_response@mR+1,home_response@mR+1
  5015   00127C  0E64               	movlw	low motor_response@ReturnHomeArray
  5016   00127E  242B               	addwf	motor_response@i^0,w,c
  5017   001280  6ED9               	movwf	fsr2l,c
  5018   001282  0E00               	movlw	high motor_response@ReturnHomeArray
  5019   001284  202C               	addwfc	(motor_response@i+1)^0,w,c
  5020   001286  6EDA               	movwf	fsr2h,c
  5021   001288  50DF               	movf	indf2,w,c
  5022   00128A  ECC2  F00B         	call	_home_response
  5023   00128E                     l3069:
  5024                           
  5025                           ;colour_identify.c: 187:             }
  5026   00128E  062B               	decf	motor_response@i^0,f,c
  5027   001290  A0D8               	btfss	status,0,c
  5028   001292  062C               	decf	(motor_response@i+1)^0,f,c
  5029   001294  BE2C               	btfsc	(motor_response@i+1)^0,7,c
  5030   001296  EF51  F009         	goto	u1490
  5031   00129A  EF4F  F009         	goto	u1491
  5032   00129E                     u1491:
  5033   00129E  EFE8  F008         	goto	l3055
  5034   0012A2                     u1490:
  5035   0012A2  EF84  F009         	goto	l362
  5036   0012A6                     l3075:
  5037   0012A6  502A               	movf	motor_response@card^0,w,c
  5038   0012A8  6E26               	movwf	??_motor_response^0,c
  5039   0012AA  6A27               	clrf	(??_motor_response+1)^0,c
  5040                           
  5041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5042                           ; Switch size 1, requested type "simple"
  5043                           ; Number of cases is 1, Range of values is 0 to 0
  5044                           ; switch strategies available:
  5045                           ; Name         Instructions Cycles
  5046                           ; simple_byte            4     3 (average)
  5047                           ;	Chosen strategy is simple_byte
  5048   0012AC  5027               	movf	(??_motor_response+1)^0,w,c
  5049   0012AE  0A00               	xorlw	0	; case 0
  5050   0012B0  B4D8               	btfsc	status,2,c
  5051   0012B2  EF5D  F009         	goto	l3671
  5052   0012B6  EF84  F009         	goto	l362
  5053   0012BA                     l3671:
  5054                           
  5055                           ; Switch size 1, requested type "simple"
  5056                           ; Number of cases is 9, Range of values is 0 to 8
  5057                           ; switch strategies available:
  5058                           ; Name         Instructions Cycles
  5059                           ; simple_byte           28    15 (average)
  5060                           ;	Chosen strategy is simple_byte
  5061   0012BA  5026               	movf	??_motor_response^0,w,c
  5062   0012BC  0A00               	xorlw	0	; case 0
  5063   0012BE  B4D8               	btfsc	status,2,c
  5064   0012C0  EF34  F007         	goto	l2939
  5065   0012C4  0A01               	xorlw	1	; case 1
  5066   0012C6  B4D8               	btfsc	status,2,c
  5067   0012C8  EF74  F007         	goto	l2951
  5068   0012CC  0A03               	xorlw	3	; case 2
  5069   0012CE  B4D8               	btfsc	status,2,c
  5070   0012D0  EFAA  F007         	goto	l2963
  5071   0012D4  0A01               	xorlw	1	; case 3
  5072   0012D6  B4D8               	btfsc	status,2,c
  5073   0012D8  EFEA  F007         	goto	l2983
  5074   0012DC  0A07               	xorlw	7	; case 4
  5075   0012DE  B4D8               	btfsc	status,2,c
  5076   0012E0  EF18  F008         	goto	l2999
  5077   0012E4  0A01               	xorlw	1	; case 5
  5078   0012E6  B4D8               	btfsc	status,2,c
  5079   0012E8  EF50  F008         	goto	l3015
  5080   0012EC  0A03               	xorlw	3	; case 6
  5081   0012EE  B4D8               	btfsc	status,2,c
  5082   0012F0  EF68  F008         	goto	l3031
  5083   0012F4  0A01               	xorlw	1	; case 7
  5084   0012F6  B4D8               	btfsc	status,2,c
  5085   0012F8  EF8A  F008         	goto	l3047
  5086   0012FC  0A0F               	xorlw	15	; case 8
  5087   0012FE  B4D8               	btfsc	status,2,c
  5088   001300  EF84  F009         	goto	l362
  5089   001304  EF84  F009         	goto	l362
  5090   001308                     l362:
  5091   001308  0012               	return		;funcret
  5092   00130A                     __end_of_motor_response:
  5093                           	callstack 0
  5094                           
  5095 ;; *************** function _reverseFullSpeed *****************
  5096 ;; Defined at:
  5097 ;;		line 145 in file "dc_motor.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5100 ;;		 -> main@motorL(9), 
  5101 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5102 ;;		 -> main@motorR(9), 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  i               2   27[COMRAM] int 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      void 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5116 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5117 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5118 ;;Total ram usage:        7 bytes
  5119 ;; Hardware stack levels used: 1
  5120 ;; Hardware stack levels required when called: 3
  5121 ;; This function calls:
  5122 ;;		_setMotorPWM
  5123 ;; This function is called by:
  5124 ;;		_motor_response
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text23
  5129   002BAA                     __ptext23:
  5130                           	callstack 0
  5131   002BAA                     _reverseFullSpeed:
  5132                           	callstack 25
  5133   002BAA                     
  5134                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5135   002BAA  EE20 F001          	lfsr	2,1
  5136   002BAE  5017               	movf	reverseFullSpeed@mL^0,w,c
  5137   002BB0  26D9               	addwf	fsr2l,f,c
  5138   002BB2  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5139   002BB4  22DA               	addwfc	fsr2h,f,c
  5140   002BB6  0E00               	movlw	0
  5141   002BB8  6EDF               	movwf	indf2,c
  5142                           
  5143                           ;dc_motor.c: 148:     mR->direction=0;
  5144   002BBA  EE20 F001          	lfsr	2,1
  5145   002BBE  5019               	movf	reverseFullSpeed@mR^0,w,c
  5146   002BC0  26D9               	addwf	fsr2l,f,c
  5147   002BC2  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5148   002BC4  22DA               	addwfc	fsr2h,f,c
  5149   002BC6  0E00               	movlw	0
  5150   002BC8  6EDF               	movwf	indf2,c
  5151   002BCA                     
  5152                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5153   002BCA  0E00               	movlw	0
  5154   002BCC  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  5155   002BCE  0E00               	movlw	0
  5156   002BD0  6E1C               	movwf	reverseFullSpeed@i^0,c
  5157   002BD2                     l2741:
  5158                           
  5159                           ;dc_motor.c: 150:         mL->power=i;
  5160   002BD2  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5161   002BD6  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5162   002BDA  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5163                           
  5164                           ;dc_motor.c: 151:         mR->power=i;
  5165   002BDE  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5166   002BE2  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5167   002BE6  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5168   002BEA                     
  5169                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5170   002BEA  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5171   002BEE  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5172   002BF2  ECA3  F011         	call	_setMotorPWM	;wreg free
  5173   002BF6                     
  5174                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5175   002BF6  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5176   002BFA  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5177   002BFE  ECA3  F011         	call	_setMotorPWM	;wreg free
  5178   002C02                     
  5179                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5180   002C02  0ED0               	movlw	208
  5181   002C04  6E1B               	movwf	??_reverseFullSpeed^0,c
  5182   002C06  0ECA               	movlw	202
  5183   002C08                     u1967:
  5184   002C08  2EE8               	decfsz	wreg,f,c
  5185   002C0A  D7FE               	bra	u1967
  5186   002C0C  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  5187   002C0E  D7FC               	bra	u1967
  5188   002C10                     
  5189                           ;dc_motor.c: 155:     }
  5190   002C10  0E0A               	movlw	10
  5191   002C12  261C               	addwf	reverseFullSpeed@i^0,f,c
  5192   002C14  0E00               	movlw	0
  5193   002C16  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5194   002C18  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5195   002C1A  EF18  F016         	goto	u1351
  5196   002C1E  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  5197   002C20  E109               	bnz	u1350
  5198   002C22  0E3C               	movlw	60
  5199   002C24  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  5200   002C26  A0D8               	btfss	status,0,c
  5201   002C28  EF18  F016         	goto	u1351
  5202   002C2C  EF1A  F016         	goto	u1350
  5203   002C30                     u1351:
  5204   002C30  EFE9  F015         	goto	l2741
  5205   002C34                     u1350:
  5206   002C34  0012               	return		;funcret
  5207   002C36                     __end_of_reverseFullSpeed:
  5208                           	callstack 0
  5209                           
  5210 ;; *************** function _home_response *****************
  5211 ;; Defined at:
  5212 ;;		line 198 in file "colour_identify.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  card            1    wreg     enum E14551
  5215 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  5216 ;;		 -> main@motorL(9), 
  5217 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  5218 ;;		 -> main@motorR(9), 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  card            1   36[COMRAM] enum E14551
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5233 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5234 ;;Total ram usage:        7 bytes
  5235 ;; Hardware stack levels used: 1
  5236 ;; Hardware stack levels required when called: 4
  5237 ;; This function calls:
  5238 ;;		_fullSpeedAhead
  5239 ;;		_stop
  5240 ;;		_turnLeft45
  5241 ;;		_turnRight45
  5242 ;; This function is called by:
  5243 ;;		_motor_response
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text24
  5248   001784                     __ptext24:
  5249                           	callstack 0
  5250   001784                     _home_response:
  5251                           	callstack 24
  5252                           
  5253                           ;incstack = 0
  5254                           ;home_response@card stored from wreg
  5255   001784  6E25               	movwf	home_response@card^0,c
  5256   001786                     
  5257                           ;colour_identify.c: 199:     switch(card){
  5258   001786  EF6F  F00D         	goto	l2775
  5259   00178A                     l2755:
  5260                           
  5261                           ;colour_identify.c: 201:             turnLeft45(mL,mR);
  5262   00178A  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5263   00178E  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5264   001792  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5265   001796  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5266   00179A  EC7E  F015         	call	_turnLeft45	;wreg free
  5267                           
  5268                           ;colour_identify.c: 202:             stop(mL,mR);
  5269   00179E  C01F  F017         	movff	home_response@mL,stop@mL
  5270   0017A2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5271   0017A6  C021  F019         	movff	home_response@mR,stop@mR
  5272   0017AA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5273   0017AE  ECA5  F016         	call	_stop	;wreg free
  5274                           
  5275                           ;colour_identify.c: 203:             turnLeft45(mL,mR);
  5276   0017B2  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5277   0017B6  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5278   0017BA  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5279   0017BE  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5280   0017C2  EC7E  F015         	call	_turnLeft45	;wreg free
  5281                           
  5282                           ;colour_identify.c: 204:             stop(mL,mR);
  5283   0017C6  C01F  F017         	movff	home_response@mL,stop@mL
  5284   0017CA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5285   0017CE  C021  F019         	movff	home_response@mR,stop@mR
  5286   0017D2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5287   0017D6  ECA5  F016         	call	_stop	;wreg free
  5288                           
  5289                           ;colour_identify.c: 205:             break;
  5290   0017DA  EF98  F00D         	goto	l375
  5291   0017DE                     l2757:
  5292                           
  5293                           ;colour_identify.c: 207:             turnRight45(mL,mR);
  5294   0017DE  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5295   0017E2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5296   0017E6  C021  F019         	movff	home_response@mR,turnRight45@mR
  5297   0017EA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5298   0017EE  EC27  F015         	call	_turnRight45	;wreg free
  5299                           
  5300                           ;colour_identify.c: 208:             stop(mL,mR);
  5301   0017F2  C01F  F017         	movff	home_response@mL,stop@mL
  5302   0017F6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5303   0017FA  C021  F019         	movff	home_response@mR,stop@mR
  5304   0017FE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5305   001802  ECA5  F016         	call	_stop	;wreg free
  5306                           
  5307                           ;colour_identify.c: 209:             turnRight45(mL,mR);
  5308   001806  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5309   00180A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5310   00180E  C021  F019         	movff	home_response@mR,turnRight45@mR
  5311   001812  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5312   001816  EC27  F015         	call	_turnRight45	;wreg free
  5313                           
  5314                           ;colour_identify.c: 210:             stop(mL,mR);
  5315   00181A  C01F  F017         	movff	home_response@mL,stop@mL
  5316   00181E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5317   001822  C021  F019         	movff	home_response@mR,stop@mR
  5318   001826  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5319   00182A  ECA5  F016         	call	_stop	;wreg free
  5320                           
  5321                           ;colour_identify.c: 211:             break;
  5322   00182E  EF98  F00D         	goto	l375
  5323   001832                     l2759:
  5324                           
  5325                           ;colour_identify.c: 213:             turnRight45(mL,mR);
  5326   001832  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5327   001836  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5328   00183A  C021  F019         	movff	home_response@mR,turnRight45@mR
  5329   00183E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5330   001842  EC27  F015         	call	_turnRight45	;wreg free
  5331                           
  5332                           ;colour_identify.c: 214:             stop(mL,mR);
  5333   001846  C01F  F017         	movff	home_response@mL,stop@mL
  5334   00184A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5335   00184E  C021  F019         	movff	home_response@mR,stop@mR
  5336   001852  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5337   001856  ECA5  F016         	call	_stop	;wreg free
  5338                           
  5339                           ;colour_identify.c: 215:             turnRight45(mL,mR);
  5340   00185A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5341   00185E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5342   001862  C021  F019         	movff	home_response@mR,turnRight45@mR
  5343   001866  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5344   00186A  EC27  F015         	call	_turnRight45	;wreg free
  5345                           
  5346                           ;colour_identify.c: 216:             stop(mL,mR);
  5347   00186E  C01F  F017         	movff	home_response@mL,stop@mL
  5348   001872  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5349   001876  C021  F019         	movff	home_response@mR,stop@mR
  5350   00187A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5351   00187E  ECA5  F016         	call	_stop	;wreg free
  5352                           
  5353                           ;colour_identify.c: 217:             turnRight45(mL,mR);
  5354   001882  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5355   001886  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5356   00188A  C021  F019         	movff	home_response@mR,turnRight45@mR
  5357   00188E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5358   001892  EC27  F015         	call	_turnRight45	;wreg free
  5359                           
  5360                           ;colour_identify.c: 218:             stop(mL,mR);
  5361   001896  C01F  F017         	movff	home_response@mL,stop@mL
  5362   00189A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5363   00189E  C021  F019         	movff	home_response@mR,stop@mR
  5364   0018A2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5365   0018A6  ECA5  F016         	call	_stop	;wreg free
  5366                           
  5367                           ;colour_identify.c: 219:             turnRight45(mL,mR);
  5368   0018AA  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5369   0018AE  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5370   0018B2  C021  F019         	movff	home_response@mR,turnRight45@mR
  5371   0018B6  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5372   0018BA  EC27  F015         	call	_turnRight45	;wreg free
  5373                           
  5374                           ;colour_identify.c: 220:             stop(mL,mR);
  5375   0018BE  C01F  F017         	movff	home_response@mL,stop@mL
  5376   0018C2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5377   0018C6  C021  F019         	movff	home_response@mR,stop@mR
  5378   0018CA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5379   0018CE  ECA5  F016         	call	_stop	;wreg free
  5380                           
  5381                           ;colour_identify.c: 221:             break;
  5382   0018D2  EF98  F00D         	goto	l375
  5383   0018D6                     l2761:
  5384                           
  5385                           ;colour_identify.c: 223:             stop(mL,mR);
  5386   0018D6  C01F  F017         	movff	home_response@mL,stop@mL
  5387   0018DA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5388   0018DE  C021  F019         	movff	home_response@mR,stop@mR
  5389   0018E2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5390   0018E6  ECA5  F016         	call	_stop	;wreg free
  5391                           
  5392                           ;colour_identify.c: 224:             turnLeft45(mL,mR);
  5393   0018EA  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5394   0018EE  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5395   0018F2  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5396   0018F6  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5397   0018FA  EC7E  F015         	call	_turnLeft45	;wreg free
  5398                           
  5399                           ;colour_identify.c: 225:             stop(mL,mR);
  5400   0018FE  C01F  F017         	movff	home_response@mL,stop@mL
  5401   001902  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5402   001906  C021  F019         	movff	home_response@mR,stop@mR
  5403   00190A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5404   00190E  ECA5  F016         	call	_stop	;wreg free
  5405                           
  5406                           ;colour_identify.c: 226:             turnLeft45(mL,mR);
  5407   001912  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5408   001916  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5409   00191A  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5410   00191E  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5411   001922  EC7E  F015         	call	_turnLeft45	;wreg free
  5412                           
  5413                           ;colour_identify.c: 227:             stop(mL,mR);
  5414   001926  C01F  F017         	movff	home_response@mL,stop@mL
  5415   00192A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5416   00192E  C021  F019         	movff	home_response@mR,stop@mR
  5417   001932  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5418   001936  ECA5  F016         	call	_stop	;wreg free
  5419                           
  5420                           ;colour_identify.c: 228:             fullSpeedAhead(mL,mR);
  5421   00193A  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  5422   00193E  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  5423   001942  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  5424   001946  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  5425   00194A  EC1B  F016         	call	_fullSpeedAhead	;wreg free
  5426   00194E                     l2763:
  5427                           
  5428                           ;colour_identify.c: 229:             _delay((unsigned long)((500)*(64000000/4000.0)));
  5429   00194E  0E29               	movlw	41
  5430   001950  6E24               	movwf	(??_home_response+1)^0,c
  5431   001952  0E96               	movlw	150
  5432   001954  6E23               	movwf	??_home_response^0,c
  5433   001956  0E7F               	movlw	127
  5434   001958                     u1977:
  5435   001958  2EE8               	decfsz	wreg,f,c
  5436   00195A  D7FE               	bra	u1977
  5437   00195C  2E23               	decfsz	??_home_response^0,f,c
  5438   00195E  D7FC               	bra	u1977
  5439   001960  2E24               	decfsz	(??_home_response+1)^0,f,c
  5440   001962  D7FA               	bra	u1977
  5441   001964  F000               	nop	
  5442                           
  5443                           ;colour_identify.c: 230:             break;
  5444   001966  EF98  F00D         	goto	l375
  5445   00196A                     l2765:
  5446                           
  5447                           ;colour_identify.c: 232:             stop(mL,mR);
  5448   00196A  C01F  F017         	movff	home_response@mL,stop@mL
  5449   00196E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5450   001972  C021  F019         	movff	home_response@mR,stop@mR
  5451   001976  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5452   00197A  ECA5  F016         	call	_stop	;wreg free
  5453                           
  5454                           ;colour_identify.c: 233:             turnRight45(mL,mR);
  5455   00197E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5456   001982  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5457   001986  C021  F019         	movff	home_response@mR,turnRight45@mR
  5458   00198A  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5459   00198E  EC27  F015         	call	_turnRight45	;wreg free
  5460                           
  5461                           ;colour_identify.c: 234:             stop(mL,mR);
  5462   001992  C01F  F017         	movff	home_response@mL,stop@mL
  5463   001996  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5464   00199A  C021  F019         	movff	home_response@mR,stop@mR
  5465   00199E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5466   0019A2  ECA5  F016         	call	_stop	;wreg free
  5467                           
  5468                           ;colour_identify.c: 235:             turnRight45(mL,mR);
  5469   0019A6  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5470   0019AA  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5471   0019AE  C021  F019         	movff	home_response@mR,turnRight45@mR
  5472   0019B2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5473   0019B6  EC27  F015         	call	_turnRight45	;wreg free
  5474                           
  5475                           ;colour_identify.c: 236:             stop(mL,mR);
  5476   0019BA  C01F  F017         	movff	home_response@mL,stop@mL
  5477   0019BE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5478   0019C2  C021  F019         	movff	home_response@mR,stop@mR
  5479   0019C6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5480   0019CA  ECA5  F016         	call	_stop	;wreg free
  5481                           
  5482                           ;colour_identify.c: 237:             fullSpeedAhead(mL,mR);
  5483   0019CE  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  5484   0019D2  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  5485   0019D6  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  5486   0019DA  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  5487   0019DE  EC1B  F016         	call	_fullSpeedAhead	;wreg free
  5488   0019E2  EFA7  F00C         	goto	l2763
  5489   0019E6                     l2769:
  5490                           
  5491                           ;colour_identify.c: 241:             turnLeft45(mL,mR);
  5492   0019E6  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5493   0019EA  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5494   0019EE  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5495   0019F2  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5496   0019F6  EC7E  F015         	call	_turnLeft45	;wreg free
  5497                           
  5498                           ;colour_identify.c: 242:             stop(mL,mR);
  5499   0019FA  C01F  F017         	movff	home_response@mL,stop@mL
  5500   0019FE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5501   001A02  C021  F019         	movff	home_response@mR,stop@mR
  5502   001A06  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5503   001A0A  ECA5  F016         	call	_stop	;wreg free
  5504                           
  5505                           ;colour_identify.c: 243:             turnLeft45(mL,mR);
  5506   001A0E  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5507   001A12  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5508   001A16  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5509   001A1A  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5510   001A1E  EC7E  F015         	call	_turnLeft45	;wreg free
  5511                           
  5512                           ;colour_identify.c: 244:             stop(mL,mR);
  5513   001A22  C01F  F017         	movff	home_response@mL,stop@mL
  5514   001A26  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5515   001A2A  C021  F019         	movff	home_response@mR,stop@mR
  5516   001A2E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5517   001A32  ECA5  F016         	call	_stop	;wreg free
  5518                           
  5519                           ;colour_identify.c: 245:             turnLeft45(mL,mR);
  5520   001A36  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  5521   001A3A  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  5522   001A3E  C021  F019         	movff	home_response@mR,turnLeft45@mR
  5523   001A42  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  5524   001A46  EC7E  F015         	call	_turnLeft45	;wreg free
  5525                           
  5526                           ;colour_identify.c: 246:             stop(mL,mR);
  5527   001A4A  C01F  F017         	movff	home_response@mL,stop@mL
  5528   001A4E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5529   001A52  C021  F019         	movff	home_response@mR,stop@mR
  5530   001A56  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5531   001A5A  ECA5  F016         	call	_stop	;wreg free
  5532                           
  5533                           ;colour_identify.c: 247:             break;
  5534   001A5E  EF98  F00D         	goto	l375
  5535   001A62                     l2771:
  5536                           
  5537                           ;colour_identify.c: 249:             turnRight45(mL,mR);
  5538   001A62  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5539   001A66  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5540   001A6A  C021  F019         	movff	home_response@mR,turnRight45@mR
  5541   001A6E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5542   001A72  EC27  F015         	call	_turnRight45	;wreg free
  5543                           
  5544                           ;colour_identify.c: 250:             stop(mL,mR);
  5545   001A76  C01F  F017         	movff	home_response@mL,stop@mL
  5546   001A7A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5547   001A7E  C021  F019         	movff	home_response@mR,stop@mR
  5548   001A82  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5549   001A86  ECA5  F016         	call	_stop	;wreg free
  5550                           
  5551                           ;colour_identify.c: 251:             turnRight45(mL,mR);
  5552   001A8A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5553   001A8E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5554   001A92  C021  F019         	movff	home_response@mR,turnRight45@mR
  5555   001A96  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5556   001A9A  EC27  F015         	call	_turnRight45	;wreg free
  5557                           
  5558                           ;colour_identify.c: 252:             stop(mL,mR);
  5559   001A9E  C01F  F017         	movff	home_response@mL,stop@mL
  5560   001AA2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5561   001AA6  C021  F019         	movff	home_response@mR,stop@mR
  5562   001AAA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5563   001AAE  ECA5  F016         	call	_stop	;wreg free
  5564                           
  5565                           ;colour_identify.c: 253:             turnRight45(mL,mR);
  5566   001AB2  C01F  F017         	movff	home_response@mL,turnRight45@mL
  5567   001AB6  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  5568   001ABA  C021  F019         	movff	home_response@mR,turnRight45@mR
  5569   001ABE  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  5570   001AC2  EC27  F015         	call	_turnRight45	;wreg free
  5571                           
  5572                           ;colour_identify.c: 254:             stop(mL,mR);
  5573   001AC6  C01F  F017         	movff	home_response@mL,stop@mL
  5574   001ACA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  5575   001ACE  C021  F019         	movff	home_response@mR,stop@mR
  5576   001AD2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  5577   001AD6  ECA5  F016         	call	_stop	;wreg free
  5578                           
  5579                           ;colour_identify.c: 255:             break;
  5580   001ADA  EF98  F00D         	goto	l375
  5581   001ADE                     l2775:
  5582   001ADE  5025               	movf	home_response@card^0,w,c
  5583   001AE0  6E23               	movwf	??_home_response^0,c
  5584   001AE2  6A24               	clrf	(??_home_response+1)^0,c
  5585                           
  5586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5587                           ; Switch size 1, requested type "simple"
  5588                           ; Number of cases is 1, Range of values is 0 to 0
  5589                           ; switch strategies available:
  5590                           ; Name         Instructions Cycles
  5591                           ; simple_byte            4     3 (average)
  5592                           ;	Chosen strategy is simple_byte
  5593   001AE4  5024               	movf	(??_home_response+1)^0,w,c
  5594   001AE6  0A00               	xorlw	0	; case 0
  5595   001AE8  B4D8               	btfsc	status,2,c
  5596   001AEA  EF79  F00D         	goto	l3673
  5597   001AEE  EF98  F00D         	goto	l375
  5598   001AF2                     l3673:
  5599                           
  5600                           ; Switch size 1, requested type "simple"
  5601                           ; Number of cases is 7, Range of values is 0 to 6
  5602                           ; switch strategies available:
  5603                           ; Name         Instructions Cycles
  5604                           ; simple_byte           22    12 (average)
  5605                           ;	Chosen strategy is simple_byte
  5606   001AF2  5023               	movf	??_home_response^0,w,c
  5607   001AF4  0A00               	xorlw	0	; case 0
  5608   001AF6  B4D8               	btfsc	status,2,c
  5609   001AF8  EFC5  F00B         	goto	l2755
  5610   001AFC  0A01               	xorlw	1	; case 1
  5611   001AFE  B4D8               	btfsc	status,2,c
  5612   001B00  EFEF  F00B         	goto	l2757
  5613   001B04  0A03               	xorlw	3	; case 2
  5614   001B06  B4D8               	btfsc	status,2,c
  5615   001B08  EF19  F00C         	goto	l2759
  5616   001B0C  0A01               	xorlw	1	; case 3
  5617   001B0E  B4D8               	btfsc	status,2,c
  5618   001B10  EF6B  F00C         	goto	l2761
  5619   001B14  0A07               	xorlw	7	; case 4
  5620   001B16  B4D8               	btfsc	status,2,c
  5621   001B18  EFB5  F00C         	goto	l2765
  5622   001B1C  0A01               	xorlw	1	; case 5
  5623   001B1E  B4D8               	btfsc	status,2,c
  5624   001B20  EFF3  F00C         	goto	l2769
  5625   001B24  0A03               	xorlw	3	; case 6
  5626   001B26  B4D8               	btfsc	status,2,c
  5627   001B28  EF31  F00D         	goto	l2771
  5628   001B2C  EF98  F00D         	goto	l375
  5629   001B30                     l375:
  5630   001B30  0012               	return		;funcret
  5631   001B32                     __end_of_home_response:
  5632                           	callstack 0
  5633                           
  5634 ;; *************** function _turnRight45 *****************
  5635 ;; Defined at:
  5636 ;;		line 116 in file "dc_motor.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5639 ;;		 -> main@motorL(9), 
  5640 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5641 ;;		 -> main@motorR(9), 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  i               2   28[COMRAM] int 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      void 
  5646 ;; Registers used:
  5647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5653 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5656 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5657 ;;Total ram usage:        8 bytes
  5658 ;; Hardware stack levels used: 1
  5659 ;; Hardware stack levels required when called: 3
  5660 ;; This function calls:
  5661 ;;		_setMotorPWM
  5662 ;; This function is called by:
  5663 ;;		_motor_response
  5664 ;;		_home_response
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text25
  5669   002A4E                     __ptext25:
  5670                           	callstack 0
  5671   002A4E                     _turnRight45:
  5672                           	callstack 25
  5673   002A4E                     
  5674                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5675   002A4E  EE20 F001          	lfsr	2,1
  5676   002A52  5017               	movf	turnRight45@mL^0,w,c
  5677   002A54  26D9               	addwf	fsr2l,f,c
  5678   002A56  5018               	movf	(turnRight45@mL+1)^0,w,c
  5679   002A58  22DA               	addwfc	fsr2h,f,c
  5680   002A5A  0E01               	movlw	1
  5681   002A5C  6EDF               	movwf	indf2,c
  5682                           
  5683                           ;dc_motor.c: 119:     mR->direction=0;
  5684   002A5E  EE20 F001          	lfsr	2,1
  5685   002A62  5019               	movf	turnRight45@mR^0,w,c
  5686   002A64  26D9               	addwf	fsr2l,f,c
  5687   002A66  501A               	movf	(turnRight45@mR+1)^0,w,c
  5688   002A68  22DA               	addwfc	fsr2h,f,c
  5689   002A6A  0E00               	movlw	0
  5690   002A6C  6EDF               	movwf	indf2,c
  5691   002A6E                     
  5692                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5693   002A6E  0E00               	movlw	0
  5694   002A70  6E1E               	movwf	(turnRight45@i+1)^0,c
  5695   002A72  0E00               	movlw	0
  5696   002A74  6E1D               	movwf	turnRight45@i^0,c
  5697   002A76                     l2651:
  5698                           
  5699                           ;dc_motor.c: 122:         mR->power=i;
  5700   002A76  C019  FFD9         	movff	turnRight45@mR,fsr2l
  5701   002A7A  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  5702   002A7E  C01D  FFDF         	movff	turnRight45@i,indf2
  5703                           
  5704                           ;dc_motor.c: 123:         mL->power=i;
  5705   002A82  C017  FFD9         	movff	turnRight45@mL,fsr2l
  5706   002A86  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  5707   002A8A  C01D  FFDF         	movff	turnRight45@i,indf2
  5708   002A8E                     
  5709                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5710   002A8E  0E02               	movlw	2
  5711   002A90  6E1C               	movwf	(??_turnRight45+1)^0,c
  5712   002A92  0E38               	movlw	56
  5713   002A94  6E1B               	movwf	??_turnRight45^0,c
  5714   002A96  0EAD               	movlw	173
  5715   002A98                     u1987:
  5716   002A98  2EE8               	decfsz	wreg,f,c
  5717   002A9A  D7FE               	bra	u1987
  5718   002A9C  2E1B               	decfsz	??_turnRight45^0,f,c
  5719   002A9E  D7FC               	bra	u1987
  5720   002AA0  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  5721   002AA2  D7FA               	bra	u1987
  5722   002AA4  F000               	nop	
  5723   002AA6                     
  5724                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5725   002AA6  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  5726   002AAA  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5727   002AAE  ECA3  F011         	call	_setMotorPWM	;wreg free
  5728   002AB2                     
  5729                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5730   002AB2  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  5731   002AB6  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5732   002ABA  ECA3  F011         	call	_setMotorPWM	;wreg free
  5733   002ABE  0E0A               	movlw	10
  5734   002AC0  261D               	addwf	turnRight45@i^0,f,c
  5735   002AC2  0E00               	movlw	0
  5736   002AC4  221E               	addwfc	(turnRight45@i+1)^0,f,c
  5737   002AC6  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  5738   002AC8  EF6F  F015         	goto	u1301
  5739   002ACC  501E               	movf	(turnRight45@i+1)^0,w,c
  5740   002ACE  E109               	bnz	u1300
  5741   002AD0  0E50               	movlw	80
  5742   002AD2  5C1D               	subwf	turnRight45@i^0,w,c
  5743   002AD4  A0D8               	btfss	status,0,c
  5744   002AD6  EF6F  F015         	goto	u1301
  5745   002ADA  EF71  F015         	goto	u1300
  5746   002ADE                     u1301:
  5747   002ADE  EF3B  F015         	goto	l2651
  5748   002AE2                     u1300:
  5749   002AE2                     
  5750                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5751   002AE2  0E06               	movlw	6
  5752   002AE4  6E1C               	movwf	(??_turnRight45+1)^0,c
  5753   002AE6  0E47               	movlw	71
  5754   002AE8  6E1B               	movwf	??_turnRight45^0,c
  5755   002AEA  0EA0               	movlw	160
  5756   002AEC                     u1997:
  5757   002AEC  2EE8               	decfsz	wreg,f,c
  5758   002AEE  D7FE               	bra	u1997
  5759   002AF0  2E1B               	decfsz	??_turnRight45^0,f,c
  5760   002AF2  D7FC               	bra	u1997
  5761   002AF4  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  5762   002AF6  D7FA               	bra	u1997
  5763   002AF8  D000               	nop2	
  5764   002AFA  0012               	return		;funcret
  5765   002AFC                     __end_of_turnRight45:
  5766                           	callstack 0
  5767                           
  5768 ;; *************** function _turnLeft45 *****************
  5769 ;; Defined at:
  5770 ;;		line 101 in file "dc_motor.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5773 ;;		 -> main@motorL(9), 
  5774 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5775 ;;		 -> main@motorR(9), 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  i               2   28[COMRAM] int 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5789 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5790 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5791 ;;Total ram usage:        8 bytes
  5792 ;; Hardware stack levels used: 1
  5793 ;; Hardware stack levels required when called: 3
  5794 ;; This function calls:
  5795 ;;		_setMotorPWM
  5796 ;; This function is called by:
  5797 ;;		_motor_response
  5798 ;;		_home_response
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text26
  5803   002AFC                     __ptext26:
  5804                           	callstack 0
  5805   002AFC                     _turnLeft45:
  5806                           	callstack 25
  5807   002AFC                     
  5808                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5809   002AFC  EE20 F001          	lfsr	2,1
  5810   002B00  5017               	movf	turnLeft45@mL^0,w,c
  5811   002B02  26D9               	addwf	fsr2l,f,c
  5812   002B04  5018               	movf	(turnLeft45@mL+1)^0,w,c
  5813   002B06  22DA               	addwfc	fsr2h,f,c
  5814   002B08  0E00               	movlw	0
  5815   002B0A  6EDF               	movwf	indf2,c
  5816                           
  5817                           ;dc_motor.c: 104:     mR->direction=1;
  5818   002B0C  EE20 F001          	lfsr	2,1
  5819   002B10  5019               	movf	turnLeft45@mR^0,w,c
  5820   002B12  26D9               	addwf	fsr2l,f,c
  5821   002B14  501A               	movf	(turnLeft45@mR+1)^0,w,c
  5822   002B16  22DA               	addwfc	fsr2h,f,c
  5823   002B18  0E01               	movlw	1
  5824   002B1A  6EDF               	movwf	indf2,c
  5825   002B1C                     
  5826                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5827   002B1C  0E00               	movlw	0
  5828   002B1E  6E1E               	movwf	(turnLeft45@i+1)^0,c
  5829   002B20  0E00               	movlw	0
  5830   002B22  6E1D               	movwf	turnLeft45@i^0,c
  5831   002B24                     l2629:
  5832                           
  5833                           ;dc_motor.c: 107:         mR->power=i;
  5834   002B24  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  5835   002B28  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5836   002B2C  C01D  FFDF         	movff	turnLeft45@i,indf2
  5837                           
  5838                           ;dc_motor.c: 108:         mL->power=i;
  5839   002B30  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  5840   002B34  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5841   002B38  C01D  FFDF         	movff	turnLeft45@i,indf2
  5842   002B3C                     
  5843                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5844   002B3C  0E02               	movlw	2
  5845   002B3E  6E1C               	movwf	(??_turnLeft45+1)^0,c
  5846   002B40  0E38               	movlw	56
  5847   002B42  6E1B               	movwf	??_turnLeft45^0,c
  5848   002B44  0EAD               	movlw	173
  5849   002B46                     u2007:
  5850   002B46  2EE8               	decfsz	wreg,f,c
  5851   002B48  D7FE               	bra	u2007
  5852   002B4A  2E1B               	decfsz	??_turnLeft45^0,f,c
  5853   002B4C  D7FC               	bra	u2007
  5854   002B4E  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  5855   002B50  D7FA               	bra	u2007
  5856   002B52  F000               	nop	
  5857   002B54                     
  5858                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5859   002B54  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  5860   002B58  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5861   002B5C  ECA3  F011         	call	_setMotorPWM	;wreg free
  5862   002B60                     
  5863                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5864   002B60  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  5865   002B64  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5866   002B68  ECA3  F011         	call	_setMotorPWM	;wreg free
  5867   002B6C  0E0A               	movlw	10
  5868   002B6E  261D               	addwf	turnLeft45@i^0,f,c
  5869   002B70  0E00               	movlw	0
  5870   002B72  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  5871   002B74  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  5872   002B76  EFC6  F015         	goto	u1291
  5873   002B7A  501E               	movf	(turnLeft45@i+1)^0,w,c
  5874   002B7C  E109               	bnz	u1290
  5875   002B7E  0E50               	movlw	80
  5876   002B80  5C1D               	subwf	turnLeft45@i^0,w,c
  5877   002B82  A0D8               	btfss	status,0,c
  5878   002B84  EFC6  F015         	goto	u1291
  5879   002B88  EFC8  F015         	goto	u1290
  5880   002B8C                     u1291:
  5881   002B8C  EF92  F015         	goto	l2629
  5882   002B90                     u1290:
  5883   002B90                     
  5884                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5885   002B90  0E06               	movlw	6
  5886   002B92  6E1C               	movwf	(??_turnLeft45+1)^0,c
  5887   002B94  0E47               	movlw	71
  5888   002B96  6E1B               	movwf	??_turnLeft45^0,c
  5889   002B98  0EA0               	movlw	160
  5890   002B9A                     u2017:
  5891   002B9A  2EE8               	decfsz	wreg,f,c
  5892   002B9C  D7FE               	bra	u2017
  5893   002B9E  2E1B               	decfsz	??_turnLeft45^0,f,c
  5894   002BA0  D7FC               	bra	u2017
  5895   002BA2  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  5896   002BA4  D7FA               	bra	u2017
  5897   002BA6  D000               	nop2	
  5898   002BA8  0012               	return		;funcret
  5899   002BAA                     __end_of_turnLeft45:
  5900                           	callstack 0
  5901                           
  5902 ;; *************** function _stop *****************
  5903 ;; Defined at:
  5904 ;;		line 84 in file "dc_motor.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5907 ;;		 -> main@motorL(9), 
  5908 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5909 ;;		 -> main@motorR(9), 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5924 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5925 ;;Total ram usage:        5 bytes
  5926 ;; Hardware stack levels used: 1
  5927 ;; Hardware stack levels required when called: 3
  5928 ;; This function calls:
  5929 ;;		_setMotorPWM
  5930 ;; This function is called by:
  5931 ;;		_main
  5932 ;;		_motor_response
  5933 ;;		_home_response
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text27
  5938   002D4A                     __ptext27:
  5939                           	callstack 0
  5940   002D4A                     _stop:
  5941                           	callstack 27
  5942   002D4A                     
  5943                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5944   002D4A  EFBA  F016         	goto	l2611
  5945   002D4E                     l2605:
  5946                           
  5947                           ;dc_motor.c: 87:         mL->power -=10;
  5948   002D4E  C017  FFD9         	movff	stop@mL,fsr2l
  5949   002D52  C018  FFDA         	movff	stop@mL+1,fsr2h
  5950   002D56  0E0A               	movlw	10
  5951   002D58  5EDF               	subwf	indf2,f,c
  5952   002D5A                     
  5953                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5954   002D5A  0E2A               	movlw	42
  5955   002D5C  6E1B               	movwf	??_stop^0,c
  5956   002D5E  0E8E               	movlw	142
  5957   002D60                     u2027:
  5958   002D60  2EE8               	decfsz	wreg,f,c
  5959   002D62  D7FE               	bra	u2027
  5960   002D64  2E1B               	decfsz	??_stop^0,f,c
  5961   002D66  D7FC               	bra	u2027
  5962   002D68                     
  5963                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5964   002D68  C017  F011         	movff	stop@mL,setMotorPWM@m
  5965   002D6C  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  5966   002D70  ECA3  F011         	call	_setMotorPWM	;wreg free
  5967   002D74                     l2611:
  5968                           
  5969                           ;dc_motor.c: 86:     while(mL->power !=0){
  5970   002D74  C017  FFD9         	movff	stop@mL,fsr2l
  5971   002D78  C018  FFDA         	movff	stop@mL+1,fsr2h
  5972   002D7C  50DF               	movf	indf2,w,c
  5973   002D7E  A4D8               	btfss	status,2,c
  5974   002D80  EFC4  F016         	goto	u1271
  5975   002D84  EFC6  F016         	goto	u1270
  5976   002D88                     u1271:
  5977   002D88  EFA7  F016         	goto	l2605
  5978   002D8C                     u1270:
  5979   002D8C  EFDB  F016         	goto	l2619
  5980   002D90                     l2613:
  5981                           
  5982                           ;dc_motor.c: 92:         mR->power -=10;
  5983   002D90  C019  FFD9         	movff	stop@mR,fsr2l
  5984   002D94  C01A  FFDA         	movff	stop@mR+1,fsr2h
  5985   002D98  0E0A               	movlw	10
  5986   002D9A  5EDF               	subwf	indf2,f,c
  5987   002D9C                     
  5988                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5989   002D9C  0E2A               	movlw	42
  5990   002D9E  6E1B               	movwf	??_stop^0,c
  5991   002DA0  0E8E               	movlw	142
  5992   002DA2                     u2037:
  5993   002DA2  2EE8               	decfsz	wreg,f,c
  5994   002DA4  D7FE               	bra	u2037
  5995   002DA6  2E1B               	decfsz	??_stop^0,f,c
  5996   002DA8  D7FC               	bra	u2037
  5997   002DAA                     
  5998                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5999   002DAA  C019  F011         	movff	stop@mR,setMotorPWM@m
  6000   002DAE  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  6001   002DB2  ECA3  F011         	call	_setMotorPWM	;wreg free
  6002   002DB6                     l2619:
  6003                           
  6004                           ;dc_motor.c: 91:     while(mR -> power !=0){
  6005   002DB6  C019  FFD9         	movff	stop@mR,fsr2l
  6006   002DBA  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6007   002DBE  50DF               	movf	indf2,w,c
  6008   002DC0  A4D8               	btfss	status,2,c
  6009   002DC2  EFE5  F016         	goto	u1281
  6010   002DC6  EFE7  F016         	goto	u1280
  6011   002DCA                     u1281:
  6012   002DCA  EFC8  F016         	goto	l2613
  6013   002DCE                     u1280:
  6014   002DCE  0012               	return		;funcret
  6015   002DD0                     __end_of_stop:
  6016                           	callstack 0
  6017                           
  6018 ;; *************** function _fullSpeedAhead *****************
  6019 ;; Defined at:
  6020 ;;		line 131 in file "dc_motor.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6023 ;;		 -> main@motorL(9), 
  6024 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6025 ;;		 -> main@motorR(9), 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  i               2   27[COMRAM] int 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6040 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6041 ;;Total ram usage:        7 bytes
  6042 ;; Hardware stack levels used: 1
  6043 ;; Hardware stack levels required when called: 3
  6044 ;; This function calls:
  6045 ;;		_setMotorPWM
  6046 ;; This function is called by:
  6047 ;;		_main
  6048 ;;		_motor_response
  6049 ;;		_home_response
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           	psect	text28
  6054   002C36                     __ptext28:
  6055                           	callstack 0
  6056   002C36                     _fullSpeedAhead:
  6057                           	callstack 27
  6058   002C36                     
  6059                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  6060   002C36  EE20 F001          	lfsr	2,1
  6061   002C3A  5017               	movf	fullSpeedAhead@mL^0,w,c
  6062   002C3C  26D9               	addwf	fsr2l,f,c
  6063   002C3E  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  6064   002C40  22DA               	addwfc	fsr2h,f,c
  6065   002C42  0E01               	movlw	1
  6066   002C44  6EDF               	movwf	indf2,c
  6067                           
  6068                           ;dc_motor.c: 134:     mR->direction=1;
  6069   002C46  EE20 F001          	lfsr	2,1
  6070   002C4A  5019               	movf	fullSpeedAhead@mR^0,w,c
  6071   002C4C  26D9               	addwf	fsr2l,f,c
  6072   002C4E  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  6073   002C50  22DA               	addwfc	fsr2h,f,c
  6074   002C52  0E01               	movlw	1
  6075   002C54  6EDF               	movwf	indf2,c
  6076   002C56                     
  6077                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  6078   002C56  0E00               	movlw	0
  6079   002C58  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  6080   002C5A  0E00               	movlw	0
  6081   002C5C  6E1C               	movwf	fullSpeedAhead@i^0,c
  6082   002C5E                     l2673:
  6083                           
  6084                           ;dc_motor.c: 136:         mL->power=i;
  6085   002C5E  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  6086   002C62  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  6087   002C66  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6088                           
  6089                           ;dc_motor.c: 137:         mR->power=i;
  6090   002C6A  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  6091   002C6E  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  6092   002C72  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6093   002C76                     
  6094                           ;dc_motor.c: 138:         setMotorPWM(mL);
  6095   002C76  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6096   002C7A  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  6097   002C7E  ECA3  F011         	call	_setMotorPWM	;wreg free
  6098   002C82                     
  6099                           ;dc_motor.c: 139:         setMotorPWM(mR);
  6100   002C82  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6101   002C86  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  6102   002C8A  ECA3  F011         	call	_setMotorPWM	;wreg free
  6103   002C8E                     
  6104                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6105   002C8E  0ED0               	movlw	208
  6106   002C90  6E1B               	movwf	??_fullSpeedAhead^0,c
  6107   002C92  0ECA               	movlw	202
  6108   002C94                     u2047:
  6109   002C94  2EE8               	decfsz	wreg,f,c
  6110   002C96  D7FE               	bra	u2047
  6111   002C98  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  6112   002C9A  D7FC               	bra	u2047
  6113   002C9C                     
  6114                           ;dc_motor.c: 141:     }
  6115   002C9C  0E0A               	movlw	10
  6116   002C9E  261C               	addwf	fullSpeedAhead@i^0,f,c
  6117   002CA0  0E00               	movlw	0
  6118   002CA2  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  6119   002CA4  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  6120   002CA6  EF5E  F016         	goto	u1311
  6121   002CAA  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  6122   002CAC  E109               	bnz	u1310
  6123   002CAE  0E3C               	movlw	60
  6124   002CB0  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  6125   002CB2  A0D8               	btfss	status,0,c
  6126   002CB4  EF5E  F016         	goto	u1311
  6127   002CB8  EF60  F016         	goto	u1310
  6128   002CBC                     u1311:
  6129   002CBC  EF2F  F016         	goto	l2673
  6130   002CC0                     u1310:
  6131   002CC0  0012               	return		;funcret
  6132   002CC2                     __end_of_fullSpeedAhead:
  6133                           	callstack 0
  6134                           
  6135 ;; *************** function _setMotorPWM *****************
  6136 ;; Defined at:
  6137 ;;		line 61 in file "dc_motor.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  m               2   16[COMRAM] PTR struct DC_motor
  6140 ;;		 -> main@motorR(9), main@motorL(9), 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  negDuty         1   21[COMRAM] unsigned char 
  6143 ;;  posDuty         1   20[COMRAM] unsigned char 
  6144 ;; Return value:  Size  Location     Type
  6145 ;;                  1    wreg      void 
  6146 ;; Registers used:
  6147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6153 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6155 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6156 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6157 ;;Total ram usage:        6 bytes
  6158 ;; Hardware stack levels used: 1
  6159 ;; Hardware stack levels required when called: 2
  6160 ;; This function calls:
  6161 ;;		___lwdiv
  6162 ;;		___wmul
  6163 ;; This function is called by:
  6164 ;;		_stop
  6165 ;;		_turnLeft45
  6166 ;;		_turnRight45
  6167 ;;		_fullSpeedAhead
  6168 ;;		_reverseFullSpeed
  6169 ;;		_main
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text29
  6174   002346                     __ptext29:
  6175                           	callstack 0
  6176   002346                     _setMotorPWM:
  6177                           	callstack 27
  6178   002346                     
  6179                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  6180   002346  EE20 F002          	lfsr	2,2
  6181   00234A  5011               	movf	setMotorPWM@m^0,w,c
  6182   00234C  26D9               	addwf	fsr2l,f,c
  6183   00234E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6184   002350  22DA               	addwfc	fsr2h,f,c
  6185   002352  50DF               	movf	indf2,w,c
  6186   002354  B4D8               	btfsc	status,2,c
  6187   002356  EFAF  F011         	goto	u1111
  6188   00235A  EFB1  F011         	goto	u1110
  6189   00235E                     u1111:
  6190   00235E  EFE5  F011         	goto	l2507
  6191   002362                     u1110:
  6192   002362                     
  6193                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6194   002362  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  6195   002366  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6196   00236A  50DF               	movf	indf2,w,c
  6197   00236C  6E13               	movwf	??_setMotorPWM^0,c
  6198   00236E  5013               	movf	??_setMotorPWM^0,w,c
  6199   002370  6E04               	movwf	___wmul@multiplier^0,c
  6200   002372  6A05               	clrf	(___wmul@multiplier+1)^0,c
  6201   002374  EE20 F003          	lfsr	2,3
  6202   002378  5011               	movf	setMotorPWM@m^0,w,c
  6203   00237A  26D9               	addwf	fsr2l,f,c
  6204   00237C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6205   00237E  22DA               	addwfc	fsr2h,f,c
  6206   002380  CFDE F006          	movff	postinc2,___wmul@multiplicand
  6207   002384  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  6208   002388  EC7B  F019         	call	___wmul	;wreg free
  6209   00238C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  6210   002390  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  6211   002394  0E00               	movlw	0
  6212   002396  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6213   002398  0E64               	movlw	100
  6214   00239A  6E0C               	movwf	___lwdiv@divisor^0,c
  6215   00239C  EC65  F017         	call	___lwdiv	;wreg free
  6216   0023A0  EE20 F003          	lfsr	2,3
  6217   0023A4  5011               	movf	setMotorPWM@m^0,w,c
  6218   0023A6  26D9               	addwf	fsr2l,f,c
  6219   0023A8  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6220   0023AA  22DA               	addwfc	fsr2h,f,c
  6221   0023AC  50DF               	movf	indf2,w,c
  6222   0023AE  6E14               	movwf	(??_setMotorPWM+1)^0,c
  6223   0023B0  500A               	movf	?___lwdiv^0,w,c
  6224   0023B2  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  6225   0023B4  6E15               	movwf	setMotorPWM@posDuty^0,c
  6226   0023B6                     
  6227                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  6228   0023B6  EE20 F003          	lfsr	2,3
  6229   0023BA  5011               	movf	setMotorPWM@m^0,w,c
  6230   0023BC  26D9               	addwf	fsr2l,f,c
  6231   0023BE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6232   0023C0  22DA               	addwfc	fsr2h,f,c
  6233   0023C2  50DF               	movf	indf2,w,c
  6234   0023C4  6E16               	movwf	setMotorPWM@negDuty^0,c
  6235                           
  6236                           ;dc_motor.c: 68:     }
  6237   0023C6  EF08  F012         	goto	l2511
  6238   0023CA                     l2507:
  6239                           
  6240                           ;dc_motor.c: 70:         posDuty=0;
  6241   0023CA  0E00               	movlw	0
  6242   0023CC  6E15               	movwf	setMotorPWM@posDuty^0,c
  6243   0023CE                     
  6244                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6245   0023CE  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  6246   0023D2  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6247   0023D6  50DF               	movf	indf2,w,c
  6248   0023D8  6E13               	movwf	??_setMotorPWM^0,c
  6249   0023DA  5013               	movf	??_setMotorPWM^0,w,c
  6250   0023DC  6E04               	movwf	___wmul@multiplier^0,c
  6251   0023DE  6A05               	clrf	(___wmul@multiplier+1)^0,c
  6252   0023E0  EE20 F003          	lfsr	2,3
  6253   0023E4  5011               	movf	setMotorPWM@m^0,w,c
  6254   0023E6  26D9               	addwf	fsr2l,f,c
  6255   0023E8  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6256   0023EA  22DA               	addwfc	fsr2h,f,c
  6257   0023EC  CFDE F006          	movff	postinc2,___wmul@multiplicand
  6258   0023F0  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  6259   0023F4  EC7B  F019         	call	___wmul	;wreg free
  6260   0023F8  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  6261   0023FC  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  6262   002400  0E00               	movlw	0
  6263   002402  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6264   002404  0E64               	movlw	100
  6265   002406  6E0C               	movwf	___lwdiv@divisor^0,c
  6266   002408  EC65  F017         	call	___lwdiv	;wreg free
  6267   00240C  500A               	movf	?___lwdiv^0,w,c
  6268   00240E  6E16               	movwf	setMotorPWM@negDuty^0,c
  6269   002410                     l2511:
  6270                           
  6271                           ;dc_motor.c: 74:     if (m->direction) {
  6272   002410  EE20 F001          	lfsr	2,1
  6273   002414  5011               	movf	setMotorPWM@m^0,w,c
  6274   002416  26D9               	addwf	fsr2l,f,c
  6275   002418  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6276   00241A  22DA               	addwfc	fsr2h,f,c
  6277   00241C  50DF               	movf	indf2,w,c
  6278   00241E  B4D8               	btfsc	status,2,c
  6279   002420  EF14  F012         	goto	u1121
  6280   002424  EF16  F012         	goto	u1120
  6281   002428                     u1121:
  6282   002428  EF38  F012         	goto	l2515
  6283   00242C                     u1120:
  6284   00242C                     
  6285                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  6286   00242C  EE20 F005          	lfsr	2,5
  6287   002430  5011               	movf	setMotorPWM@m^0,w,c
  6288   002432  26D9               	addwf	fsr2l,f,c
  6289   002434  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6290   002436  22DA               	addwfc	fsr2h,f,c
  6291   002438  CFDE F013          	movff	postinc2,??_setMotorPWM
  6292   00243C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6293   002440  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6294   002444  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6295   002448  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6296                           
  6297                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  6298   00244C  EE20 F007          	lfsr	2,7
  6299   002450  5011               	movf	setMotorPWM@m^0,w,c
  6300   002452  26D9               	addwf	fsr2l,f,c
  6301   002454  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6302   002456  22DA               	addwfc	fsr2h,f,c
  6303   002458  CFDE F013          	movff	postinc2,??_setMotorPWM
  6304   00245C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6305   002460  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6306   002464  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6307   002468  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6308                           
  6309                           ;dc_motor.c: 77:     } else {
  6310   00246C  EF58  F012         	goto	l86
  6311   002470                     l2515:
  6312                           
  6313                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  6314   002470  EE20 F005          	lfsr	2,5
  6315   002474  5011               	movf	setMotorPWM@m^0,w,c
  6316   002476  26D9               	addwf	fsr2l,f,c
  6317   002478  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6318   00247A  22DA               	addwfc	fsr2h,f,c
  6319   00247C  CFDE F013          	movff	postinc2,??_setMotorPWM
  6320   002480  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6321   002484  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6322   002488  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6323   00248C  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  6324                           
  6325                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  6326   002490  EE20 F007          	lfsr	2,7
  6327   002494  5011               	movf	setMotorPWM@m^0,w,c
  6328   002496  26D9               	addwf	fsr2l,f,c
  6329   002498  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6330   00249A  22DA               	addwfc	fsr2h,f,c
  6331   00249C  CFDE F013          	movff	postinc2,??_setMotorPWM
  6332   0024A0  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  6333   0024A4  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  6334   0024A8  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6335   0024AC  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  6336   0024B0                     l86:
  6337   0024B0  0012               	return		;funcret
  6338   0024B2                     __end_of_setMotorPWM:
  6339                           	callstack 0
  6340                           
  6341 ;; *************** function ___wmul *****************
  6342 ;; Defined at:
  6343 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  multiplier      2    3[COMRAM] unsigned int 
  6346 ;;  multiplicand    2    5[COMRAM] unsigned int 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  product         2    7[COMRAM] unsigned int 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  2    3[COMRAM] unsigned int 
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0, prodl, prodh
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6362 ;;Total ram usage:        6 bytes
  6363 ;; Hardware stack levels used: 1
  6364 ;; Hardware stack levels required when called: 1
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		_setMotorPWM
  6369 ;;		_normalise_readings
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text30
  6374   0032F6                     __ptext30:
  6375                           	callstack 0
  6376   0032F6                     ___wmul:
  6377                           	callstack 27
  6378   0032F6  5004               	movf	___wmul@multiplier^0,w,c
  6379   0032F8  0206               	mulwf	___wmul@multiplicand^0,c
  6380   0032FA  CFF3 F008          	movff	prodl,___wmul@product
  6381   0032FE  CFF4 F009          	movff	prodh,___wmul@product+1
  6382   003302  5004               	movf	___wmul@multiplier^0,w,c
  6383   003304  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  6384   003306  50F3               	movf	243,w,c
  6385   003308  2609               	addwf	(___wmul@product+1)^0,f,c
  6386   00330A  5005               	movf	(___wmul@multiplier+1)^0,w,c
  6387   00330C  0206               	mulwf	___wmul@multiplicand^0,c
  6388   00330E  50F3               	movf	243,w,c
  6389   003310  2609               	addwf	(___wmul@product+1)^0,f,c
  6390   003312  C008  F004         	movff	___wmul@product,?___wmul
  6391   003316  C009  F005         	movff	___wmul@product+1,?___wmul+1
  6392   00331A  0012               	return		;funcret
  6393   00331C                     __end_of___wmul:
  6394                           	callstack 0
  6395                           
  6396 ;; *************** function _make_master_closeness *****************
  6397 ;; Defined at:
  6398 ;;		line 67 in file "colour_identify.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  buf             2   16[COMRAM] PTR unsigned char 
  6401 ;;		 -> main@buf(150), 
  6402 ;;  normalised_v    2   18[COMRAM] PTR unsigned int [9]
  6403 ;;		 -> card_response@normalised_values(54), 
  6404 ;;  master_close    2   20[COMRAM] PTR unsigned int 
  6405 ;;		 -> card_response@master_closeness(18), 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  i               1   42[COMRAM] enum E14551
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6417 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6419 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6420 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6421 ;;Total ram usage:       27 bytes
  6422 ;; Hardware stack levels used: 1
  6423 ;; Hardware stack levels required when called: 2
  6424 ;; This function calls:
  6425 ;;		___lwdiv
  6426 ;; This function is called by:
  6427 ;;		_card_response
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text31
  6432   0028B0                     __ptext31:
  6433                           	callstack 0
  6434   0028B0                     _make_master_closeness:
  6435                           	callstack 27
  6436   0028B0                     
  6437                           ;colour_identify.c: 68:     for(colour i = RED; i<=BLACK; i++){
  6438   0028B0  0E00               	movlw	0
  6439   0028B2  6E2B               	movwf	make_master_closeness@i^0,c
  6440   0028B4                     l2907:
  6441                           
  6442                           ;colour_identify.c: 70:         master_closeness[i] = (normalised_values[RED][i] + norma
      +                          lised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  6443   0028B4  502B               	movf	make_master_closeness@i^0,w,c
  6444   0028B6  0D02               	mullw	2
  6445   0028B8  CFF3 F017          	movff	prodl,??_make_master_closeness
  6446   0028BC  CFF4 F018          	movff	prodh,??_make_master_closeness+1
  6447   0028C0  5017               	movf	??_make_master_closeness^0,w,c
  6448   0028C2  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6449   0028C4  6E19               	movwf	(??_make_master_closeness+2)^0,c
  6450   0028C6  5018               	movf	(??_make_master_closeness+1)^0,w,c
  6451   0028C8  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6452   0028CA  6E1A               	movwf	(??_make_master_closeness+3)^0,c
  6453   0028CC  0E24               	movlw	36
  6454   0028CE  2419               	addwf	(??_make_master_closeness+2)^0,w,c
  6455   0028D0  6ED9               	movwf	fsr2l,c
  6456   0028D2  0E00               	movlw	0
  6457   0028D4  201A               	addwfc	(??_make_master_closeness+3)^0,w,c
  6458   0028D6  6EDA               	movwf	fsr2h,c
  6459   0028D8  CFDE F01B          	movff	postinc2,??_make_master_closeness+4
  6460   0028DC  CFDD F01C          	movff	postdec2,??_make_master_closeness+5
  6461   0028E0  502B               	movf	make_master_closeness@i^0,w,c
  6462   0028E2  0D02               	mullw	2
  6463   0028E4  CFF3 F01D          	movff	prodl,??_make_master_closeness+6
  6464   0028E8  CFF4 F01E          	movff	prodh,??_make_master_closeness+7
  6465   0028EC  501D               	movf	(??_make_master_closeness+6)^0,w,c
  6466   0028EE  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6467   0028F0  6E1F               	movwf	(??_make_master_closeness+8)^0,c
  6468   0028F2  501E               	movf	(??_make_master_closeness+7)^0,w,c
  6469   0028F4  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6470   0028F6  6E20               	movwf	(??_make_master_closeness+9)^0,c
  6471   0028F8  0E12               	movlw	18
  6472   0028FA  241F               	addwf	(??_make_master_closeness+8)^0,w,c
  6473   0028FC  6ED9               	movwf	fsr2l,c
  6474   0028FE  0E00               	movlw	0
  6475   002900  2020               	addwfc	(??_make_master_closeness+9)^0,w,c
  6476   002902  6EDA               	movwf	fsr2h,c
  6477   002904  CFDE F021          	movff	postinc2,??_make_master_closeness+10
  6478   002908  CFDD F022          	movff	postdec2,??_make_master_closeness+11
  6479   00290C  502B               	movf	make_master_closeness@i^0,w,c
  6480   00290E  0D02               	mullw	2
  6481   002910  CFF3 F023          	movff	prodl,??_make_master_closeness+12
  6482   002914  CFF4 F024          	movff	prodh,??_make_master_closeness+13
  6483   002918  5023               	movf	(??_make_master_closeness+12)^0,w,c
  6484   00291A  2413               	addwf	make_master_closeness@normalised_values^0,w,c
  6485   00291C  6ED9               	movwf	fsr2l,c
  6486   00291E  5024               	movf	(??_make_master_closeness+13)^0,w,c
  6487   002920  2014               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6488   002922  6EDA               	movwf	fsr2h,c
  6489   002924  CFDE F025          	movff	postinc2,??_make_master_closeness+14
  6490   002928  CFDD F026          	movff	postdec2,??_make_master_closeness+15
  6491   00292C  5021               	movf	(??_make_master_closeness+10)^0,w,c
  6492   00292E  2425               	addwf	(??_make_master_closeness+14)^0,w,c
  6493   002930  6E27               	movwf	(??_make_master_closeness+16)^0,c
  6494   002932  5022               	movf	(??_make_master_closeness+11)^0,w,c
  6495   002934  2026               	addwfc	(??_make_master_closeness+15)^0,w,c
  6496   002936  6E28               	movwf	(??_make_master_closeness+17)^0,c
  6497   002938  501B               	movf	(??_make_master_closeness+4)^0,w,c
  6498   00293A  2427               	addwf	(??_make_master_closeness+16)^0,w,c
  6499   00293C  6E0A               	movwf	___lwdiv@dividend^0,c
  6500   00293E  501C               	movf	(??_make_master_closeness+5)^0,w,c
  6501   002940  2028               	addwfc	(??_make_master_closeness+17)^0,w,c
  6502   002942  6E0B               	movwf	(___lwdiv@dividend+1)^0,c
  6503   002944  0E00               	movlw	0
  6504   002946  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6505   002948  0E03               	movlw	3
  6506   00294A  6E0C               	movwf	___lwdiv@divisor^0,c
  6507   00294C  EC65  F017         	call	___lwdiv	;wreg free
  6508   002950  502B               	movf	make_master_closeness@i^0,w,c
  6509   002952  0D02               	mullw	2
  6510   002954  CFF3 F029          	movff	prodl,??_make_master_closeness+18
  6511   002958  CFF4 F02A          	movff	prodh,??_make_master_closeness+19
  6512   00295C  5029               	movf	(??_make_master_closeness+18)^0,w,c
  6513   00295E  2415               	addwf	make_master_closeness@master_closeness^0,w,c
  6514   002960  6ED9               	movwf	fsr2l,c
  6515   002962  502A               	movf	(??_make_master_closeness+19)^0,w,c
  6516   002964  2016               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6517   002966  6EDA               	movwf	fsr2h,c
  6518   002968  C00A  FFDE         	movff	?___lwdiv,postinc2
  6519   00296C  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6520   002970                     
  6521                           ;colour_identify.c: 75:     }
  6522   002970  2A2B               	incf	make_master_closeness@i^0,f,c
  6523   002972  0E08               	movlw	8
  6524   002974  642B               	cpfsgt	make_master_closeness@i^0,c
  6525   002976  EFBF  F014         	goto	u1441
  6526   00297A  EFC1  F014         	goto	u1440
  6527   00297E                     u1441:
  6528   00297E  EF5A  F014         	goto	l2907
  6529   002982                     u1440:
  6530   002982  0012               	return		;funcret
  6531   002984                     __end_of_make_master_closeness:
  6532                           	callstack 0
  6533                           
  6534 ;; *************** function _determine_card *****************
  6535 ;; Defined at:
  6536 ;;		line 78 in file "colour_identify.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  6539 ;;		 -> card_response@master_closeness(18), 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  i               1   12[COMRAM] enum E14551
  6542 ;;  current_smal    2    9[COMRAM] unsigned int 
  6543 ;;  predicted_co    1   11[COMRAM] enum E14551
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      enum E14551
  6546 ;; Registers used:
  6547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6557 ;;Total ram usage:       10 bytes
  6558 ;; Hardware stack levels used: 1
  6559 ;; Hardware stack levels required when called: 1
  6560 ;; This function calls:
  6561 ;;		Nothing
  6562 ;; This function is called by:
  6563 ;;		_card_response
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text32
  6568   002DD0                     __ptext32:
  6569                           	callstack 0
  6570   002DD0                     _determine_card:
  6571                           	callstack 28
  6572   002DD0                     
  6573                           ;colour_identify.c: 80:     colour predicted_colour = RED;
  6574   002DD0  0E00               	movlw	0
  6575   002DD2  6E0C               	movwf	determine_card@predicted_colour^0,c
  6576   002DD4                     
  6577                           ;colour_identify.c: 81:     unsigned int current_smallest = master_closeness[RED];
  6578   002DD4  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  6579   002DD8  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  6580   002DDC  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  6581   002DE0  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  6582   002DE4                     
  6583                           ;colour_identify.c: 82:     for(colour i = GREEN; i<=BLACK; i++){
  6584   002DE4  0E01               	movlw	1
  6585   002DE6  6E0D               	movwf	determine_card@i^0,c
  6586   002DE8                     l2923:
  6587                           
  6588                           ;colour_identify.c: 83:         if(master_closeness[i] < current_smallest){
  6589   002DE8  500D               	movf	determine_card@i^0,w,c
  6590   002DEA  0D02               	mullw	2
  6591   002DEC  CFF3 F006          	movff	prodl,??_determine_card
  6592   002DF0  CFF4 F007          	movff	prodh,??_determine_card+1
  6593   002DF4  5006               	movf	??_determine_card^0,w,c
  6594   002DF6  2404               	addwf	determine_card@master_closeness^0,w,c
  6595   002DF8  6ED9               	movwf	fsr2l,c
  6596   002DFA  5007               	movf	(??_determine_card+1)^0,w,c
  6597   002DFC  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6598   002DFE  6EDA               	movwf	fsr2h,c
  6599   002E00  500A               	movf	determine_card@current_smallest^0,w,c
  6600   002E02  5CDE               	subwf	postinc2,w,c
  6601   002E04  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  6602   002E06  58DE               	subwfb	postinc2,w,c
  6603   002E08  B0D8               	btfsc	status,0,c
  6604   002E0A  EF09  F017         	goto	u1451
  6605   002E0E  EF0B  F017         	goto	u1450
  6606   002E12                     u1451:
  6607   002E12  EF1D  F017         	goto	l2929
  6608   002E16                     u1450:
  6609   002E16                     
  6610                           ;colour_identify.c: 84:             current_smallest = master_closeness[i];
  6611   002E16  500D               	movf	determine_card@i^0,w,c
  6612   002E18  0D02               	mullw	2
  6613   002E1A  CFF3 F006          	movff	prodl,??_determine_card
  6614   002E1E  CFF4 F007          	movff	prodh,??_determine_card+1
  6615   002E22  5006               	movf	??_determine_card^0,w,c
  6616   002E24  2404               	addwf	determine_card@master_closeness^0,w,c
  6617   002E26  6ED9               	movwf	fsr2l,c
  6618   002E28  5007               	movf	(??_determine_card+1)^0,w,c
  6619   002E2A  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6620   002E2C  6EDA               	movwf	fsr2h,c
  6621   002E2E  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  6622   002E32  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  6623   002E36                     
  6624                           ;colour_identify.c: 85:             predicted_colour = i;
  6625   002E36  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  6626   002E3A                     l2929:
  6627                           
  6628                           ;colour_identify.c: 87:     }
  6629   002E3A  2A0D               	incf	determine_card@i^0,f,c
  6630   002E3C  0E08               	movlw	8
  6631   002E3E  640D               	cpfsgt	determine_card@i^0,c
  6632   002E40  EF24  F017         	goto	u1461
  6633   002E44  EF26  F017         	goto	u1460
  6634   002E48                     u1461:
  6635   002E48  EFF4  F016         	goto	l2923
  6636   002E4C                     u1460:
  6637   002E4C                     
  6638                           ;colour_identify.c: 88:     return predicted_colour;
  6639   002E4C  500C               	movf	determine_card@predicted_colour^0,w,c
  6640   002E4E  0012               	return		;funcret
  6641   002E50                     __end_of_determine_card:
  6642                           	callstack 0
  6643                           
  6644 ;; *************** function _collect_avg_readings *****************
  6645 ;; Defined at:
  6646 ;;		line 10 in file "colour_identify.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  6649 ;;		 -> main@red_read(2), 
  6650 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  6651 ;;		 -> main@green_read(2), 
  6652 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  6653 ;;		 -> main@blue_read(2), 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  i               2   30[COMRAM] int 
  6656 ;;  i               2   28[COMRAM] int 
  6657 ;;  i               2   26[COMRAM] int 
  6658 ;;  i               2   24[COMRAM] int 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6668 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6669 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6671 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6672 ;;Total ram usage:       16 bytes
  6673 ;; Hardware stack levels used: 1
  6674 ;; Hardware stack levels required when called: 4
  6675 ;; This function calls:
  6676 ;;		___lwdiv
  6677 ;;		_color_read_Blue
  6678 ;;		_color_read_Green
  6679 ;;		_color_read_Red
  6680 ;; This function is called by:
  6681 ;;		_main
  6682 ;;		_card_response
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text33
  6687   001FD8                     __ptext33:
  6688                           	callstack 0
  6689   001FD8                     _collect_avg_readings:
  6690                           	callstack 26
  6691   001FD8                     
  6692                           ;colour_identify.c: 10: void collect_avg_readings( unsigned int *red_read, unsigned int 
      +                          *green_read, unsigned int *blue_read);colour_identify.c: 11: {;colour_identify.c: 14:   
      +                            for (int i = 0; i <= 500; i++){
  6693   001FD8  0E00               	movlw	0
  6694   001FDA  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  6695   001FDC  0E00               	movlw	0
  6696   001FDE  6E19               	movwf	collect_avg_readings@i^0,c
  6697   001FE0                     l2815:
  6698                           
  6699                           ;colour_identify.c: 15:         *red_read = color_read_Red();
  6700   001FE0  EC1A  F018         	call	_color_read_Red	;wreg free
  6701   001FE4  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6702   001FE8  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6703   001FEC  C008  FFDE         	movff	?_color_read_Red,postinc2
  6704   001FF0  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  6705                           
  6706                           ;colour_identify.c: 16:         *green_read = color_read_Green();
  6707   001FF4  EC42  F018         	call	_color_read_Green	;wreg free
  6708   001FF8  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6709   001FFC  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6710   002000  C008  FFDE         	movff	?_color_read_Green,postinc2
  6711   002004  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  6712                           
  6713                           ;colour_identify.c: 17:         *blue_read = color_read_Blue();
  6714   002008  EC6A  F018         	call	_color_read_Blue	;wreg free
  6715   00200C  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6716   002010  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6717   002014  C008  FFDE         	movff	?_color_read_Blue,postinc2
  6718   002018  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  6719   00201C                     
  6720                           ;colour_identify.c: 18:     }
  6721   00201C  4A19               	infsnz	collect_avg_readings@i^0,f,c
  6722   00201E  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  6723   002020  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6724   002022  EF1C  F010         	goto	u1381
  6725   002026  0EF5               	movlw	245
  6726   002028  5C19               	subwf	collect_avg_readings@i^0,w,c
  6727   00202A  0E01               	movlw	1
  6728   00202C  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6729   00202E  A0D8               	btfss	status,0,c
  6730   002030  EF1C  F010         	goto	u1381
  6731   002034  EF1E  F010         	goto	u1380
  6732   002038                     u1381:
  6733   002038  EFF0  F00F         	goto	l2815
  6734   00203C                     u1380:
  6735   00203C                     
  6736                           ;colour_identify.c: 22:     for(int i = 0; i <= 2; i++){
  6737   00203C  0E00               	movlw	0
  6738   00203E  6E1C               	movwf	(collect_avg_readings@i_1581+1)^0,c
  6739   002040  0E00               	movlw	0
  6740   002042  6E1B               	movwf	collect_avg_readings@i_1581^0,c
  6741   002044                     l2827:
  6742                           
  6743                           ;colour_identify.c: 23:         *red_read += color_read_Red();
  6744   002044  EC1A  F018         	call	_color_read_Red	;wreg free
  6745   002048  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6746   00204C  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6747   002050  5008               	movf	?_color_read_Red^0,w,c
  6748   002052  26DE               	addwf	postinc2,f,c
  6749   002054  5009               	movf	(?_color_read_Red+1)^0,w,c
  6750   002056  22DD               	addwfc	postdec2,f,c
  6751   002058                     
  6752                           ;colour_identify.c: 24:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6753   002058  0E11               	movlw	17
  6754   00205A  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6755   00205C  0E3C               	movlw	60
  6756   00205E  6E17               	movwf	??_collect_avg_readings^0,c
  6757   002060  0ECB               	movlw	203
  6758   002062                     u2057:
  6759   002062  2EE8               	decfsz	wreg,f,c
  6760   002064  D7FE               	bra	u2057
  6761   002066  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6762   002068  D7FC               	bra	u2057
  6763   00206A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6764   00206C  D7FA               	bra	u2057
  6765   00206E  F000               	nop	
  6766   002070                     
  6767                           ;colour_identify.c: 25:     }
  6768   002070  4A1B               	infsnz	collect_avg_readings@i_1581^0,f,c
  6769   002072  2A1C               	incf	(collect_avg_readings@i_1581+1)^0,f,c
  6770   002074  BE1C               	btfsc	(collect_avg_readings@i_1581+1)^0,7,c
  6771   002076  EF46  F010         	goto	u1391
  6772   00207A  501C               	movf	(collect_avg_readings@i_1581+1)^0,w,c
  6773   00207C  E109               	bnz	u1390
  6774   00207E  0E03               	movlw	3
  6775   002080  5C1B               	subwf	collect_avg_readings@i_1581^0,w,c
  6776   002082  A0D8               	btfss	status,0,c
  6777   002084  EF46  F010         	goto	u1391
  6778   002088  EF48  F010         	goto	u1390
  6779   00208C                     u1391:
  6780   00208C  EF22  F010         	goto	l2827
  6781   002090                     u1390:
  6782   002090                     
  6783                           ;colour_identify.c: 26:     *red_read = *red_read/3;
  6784   002090  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6785   002094  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6786   002098  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6787   00209C  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6788   0020A0  0E00               	movlw	0
  6789   0020A2  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6790   0020A4  0E03               	movlw	3
  6791   0020A6  6E0C               	movwf	___lwdiv@divisor^0,c
  6792   0020A8  EC65  F017         	call	___lwdiv	;wreg free
  6793   0020AC  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6794   0020B0  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6795   0020B4  C00A  FFDE         	movff	?___lwdiv,postinc2
  6796   0020B8  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6797   0020BC                     
  6798                           ;colour_identify.c: 28:     for(int i = 0; i <= 2; i++){
  6799   0020BC  0E00               	movlw	0
  6800   0020BE  6E1E               	movwf	(collect_avg_readings@i_1582+1)^0,c
  6801   0020C0  0E00               	movlw	0
  6802   0020C2  6E1D               	movwf	collect_avg_readings@i_1582^0,c
  6803   0020C4                     l2843:
  6804                           
  6805                           ;colour_identify.c: 29:         *green_read += color_read_Green();
  6806   0020C4  EC42  F018         	call	_color_read_Green	;wreg free
  6807   0020C8  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6808   0020CC  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6809   0020D0  5008               	movf	?_color_read_Green^0,w,c
  6810   0020D2  26DE               	addwf	postinc2,f,c
  6811   0020D4  5009               	movf	(?_color_read_Green+1)^0,w,c
  6812   0020D6  22DD               	addwfc	postdec2,f,c
  6813   0020D8                     
  6814                           ;colour_identify.c: 30:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6815   0020D8  0E11               	movlw	17
  6816   0020DA  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6817   0020DC  0E3C               	movlw	60
  6818   0020DE  6E17               	movwf	??_collect_avg_readings^0,c
  6819   0020E0  0ECB               	movlw	203
  6820   0020E2                     u2067:
  6821   0020E2  2EE8               	decfsz	wreg,f,c
  6822   0020E4  D7FE               	bra	u2067
  6823   0020E6  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6824   0020E8  D7FC               	bra	u2067
  6825   0020EA  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6826   0020EC  D7FA               	bra	u2067
  6827   0020EE  F000               	nop	
  6828   0020F0                     
  6829                           ;colour_identify.c: 31:     }
  6830   0020F0  4A1D               	infsnz	collect_avg_readings@i_1582^0,f,c
  6831   0020F2  2A1E               	incf	(collect_avg_readings@i_1582+1)^0,f,c
  6832   0020F4  BE1E               	btfsc	(collect_avg_readings@i_1582+1)^0,7,c
  6833   0020F6  EF86  F010         	goto	u1401
  6834   0020FA  501E               	movf	(collect_avg_readings@i_1582+1)^0,w,c
  6835   0020FC  E109               	bnz	u1400
  6836   0020FE  0E03               	movlw	3
  6837   002100  5C1D               	subwf	collect_avg_readings@i_1582^0,w,c
  6838   002102  A0D8               	btfss	status,0,c
  6839   002104  EF86  F010         	goto	u1401
  6840   002108  EF88  F010         	goto	u1400
  6841   00210C                     u1401:
  6842   00210C  EF62  F010         	goto	l2843
  6843   002110                     u1400:
  6844   002110                     
  6845                           ;colour_identify.c: 32:     *green_read = *green_read/3;
  6846   002110  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6847   002114  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6848   002118  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6849   00211C  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6850   002120  0E00               	movlw	0
  6851   002122  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6852   002124  0E03               	movlw	3
  6853   002126  6E0C               	movwf	___lwdiv@divisor^0,c
  6854   002128  EC65  F017         	call	___lwdiv	;wreg free
  6855   00212C  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6856   002130  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6857   002134  C00A  FFDE         	movff	?___lwdiv,postinc2
  6858   002138  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6859   00213C                     
  6860                           ;colour_identify.c: 34:     for(int i = 0; i <= 2; i++){
  6861   00213C  0E00               	movlw	0
  6862   00213E  6E20               	movwf	(collect_avg_readings@i_1583+1)^0,c
  6863   002140  0E00               	movlw	0
  6864   002142  6E1F               	movwf	collect_avg_readings@i_1583^0,c
  6865   002144                     l2859:
  6866                           
  6867                           ;colour_identify.c: 35:         *blue_read += color_read_Blue();
  6868   002144  EC6A  F018         	call	_color_read_Blue	;wreg free
  6869   002148  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6870   00214C  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6871   002150  5008               	movf	?_color_read_Blue^0,w,c
  6872   002152  26DE               	addwf	postinc2,f,c
  6873   002154  5009               	movf	(?_color_read_Blue+1)^0,w,c
  6874   002156  22DD               	addwfc	postdec2,f,c
  6875   002158                     
  6876                           ;colour_identify.c: 36:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6877   002158  0E11               	movlw	17
  6878   00215A  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  6879   00215C  0E3C               	movlw	60
  6880   00215E  6E17               	movwf	??_collect_avg_readings^0,c
  6881   002160  0ECB               	movlw	203
  6882   002162                     u2077:
  6883   002162  2EE8               	decfsz	wreg,f,c
  6884   002164  D7FE               	bra	u2077
  6885   002166  2E17               	decfsz	??_collect_avg_readings^0,f,c
  6886   002168  D7FC               	bra	u2077
  6887   00216A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6888   00216C  D7FA               	bra	u2077
  6889   00216E  F000               	nop	
  6890   002170                     
  6891                           ;colour_identify.c: 37:     }
  6892   002170  4A1F               	infsnz	collect_avg_readings@i_1583^0,f,c
  6893   002172  2A20               	incf	(collect_avg_readings@i_1583+1)^0,f,c
  6894   002174  BE20               	btfsc	(collect_avg_readings@i_1583+1)^0,7,c
  6895   002176  EFC6  F010         	goto	u1411
  6896   00217A  5020               	movf	(collect_avg_readings@i_1583+1)^0,w,c
  6897   00217C  E109               	bnz	u1410
  6898   00217E  0E03               	movlw	3
  6899   002180  5C1F               	subwf	collect_avg_readings@i_1583^0,w,c
  6900   002182  A0D8               	btfss	status,0,c
  6901   002184  EFC6  F010         	goto	u1411
  6902   002188  EFC8  F010         	goto	u1410
  6903   00218C                     u1411:
  6904   00218C  EFA2  F010         	goto	l2859
  6905   002190                     u1410:
  6906   002190                     
  6907                           ;colour_identify.c: 38:     *blue_read = *blue_read/3;
  6908   002190  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6909   002194  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6910   002198  CFDE F00A          	movff	postinc2,___lwdiv@dividend
  6911   00219C  CFDD F00B          	movff	postdec2,___lwdiv@dividend+1
  6912   0021A0  0E00               	movlw	0
  6913   0021A2  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6914   0021A4  0E03               	movlw	3
  6915   0021A6  6E0C               	movwf	___lwdiv@divisor^0,c
  6916   0021A8  EC65  F017         	call	___lwdiv	;wreg free
  6917   0021AC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6918   0021B0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6919   0021B4  C00A  FFDE         	movff	?___lwdiv,postinc2
  6920   0021B8  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  6921   0021BC  0012               	return		;funcret
  6922   0021BE                     __end_of_collect_avg_readings:
  6923                           	callstack 0
  6924                           
  6925 ;; *************** function _color_read_Red *****************
  6926 ;; Defined at:
  6927 ;;		line 29 in file "color.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  tmp             2   12[COMRAM] unsigned int 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  2    7[COMRAM] unsigned int 
  6934 ;; Registers used:
  6935 ;;		wreg, status,2, status,0, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6943 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6944 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6945 ;;Total ram usage:        7 bytes
  6946 ;; Hardware stack levels used: 1
  6947 ;; Hardware stack levels required when called: 3
  6948 ;; This function calls:
  6949 ;;		_I2C_2_Master_Read
  6950 ;;		_I2C_2_Master_RepStart
  6951 ;;		_I2C_2_Master_Start
  6952 ;;		_I2C_2_Master_Stop
  6953 ;;		_I2C_2_Master_Write
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;;		_collect_avg_readings
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text34
  6961   003034                     __ptext34:
  6962                           	callstack 0
  6963   003034                     _color_read_Red:
  6964                           	callstack 27
  6965   003034  ECD6  F019         	call	_I2C_2_Master_Start	;wreg free
  6966   003038  0E52               	movlw	82
  6967   00303A  ECCB  F019         	call	_I2C_2_Master_Write
  6968   00303E  0EB6               	movlw	182
  6969   003040  ECCB  F019         	call	_I2C_2_Master_Write
  6970   003044  ECDB  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6971   003048  0E53               	movlw	83
  6972   00304A  ECCB  F019         	call	_I2C_2_Master_Write
  6973   00304E  0E01               	movlw	1
  6974   003050  ECB4  F018         	call	_I2C_2_Master_Read
  6975   003054  6E0A               	movwf	??_color_read_Red^0,c
  6976   003056  500A               	movf	??_color_read_Red^0,w,c
  6977   003058  6E0D               	movwf	color_read_Red@tmp^0,c
  6978   00305A  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  6979   00305C  0E00               	movlw	0
  6980   00305E  ECB4  F018         	call	_I2C_2_Master_Read
  6981   003062  6E0A               	movwf	??_color_read_Red^0,c
  6982   003064  500A               	movf	??_color_read_Red^0,w,c
  6983   003066  6E0C               	movwf	(??_color_read_Red+2)^0,c
  6984   003068  6A0B               	clrf	(??_color_read_Red+1)^0,c
  6985   00306A  500D               	movf	color_read_Red@tmp^0,w,c
  6986   00306C  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  6987   00306E  6E0D               	movwf	color_read_Red@tmp^0,c
  6988   003070  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  6989   003072  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  6990   003074  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  6991   003076  ECD1  F019         	call	_I2C_2_Master_Stop	;wreg free
  6992   00307A  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  6993   00307E  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6994   003082  0012               	return		;funcret
  6995   003084                     __end_of_color_read_Red:
  6996                           	callstack 0
  6997                           
  6998 ;; *************** function _color_read_Green *****************
  6999 ;; Defined at:
  7000 ;;		line 43 in file "color.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  tmp             2   12[COMRAM] unsigned int 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  2    7[COMRAM] unsigned int 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7014 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7016 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7017 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7018 ;;Total ram usage:        7 bytes
  7019 ;; Hardware stack levels used: 1
  7020 ;; Hardware stack levels required when called: 3
  7021 ;; This function calls:
  7022 ;;		_I2C_2_Master_Read
  7023 ;;		_I2C_2_Master_RepStart
  7024 ;;		_I2C_2_Master_Start
  7025 ;;		_I2C_2_Master_Stop
  7026 ;;		_I2C_2_Master_Write
  7027 ;; This function is called by:
  7028 ;;		_main
  7029 ;;		_collect_avg_readings
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text35
  7034   003084                     __ptext35:
  7035                           	callstack 0
  7036   003084                     _color_read_Green:
  7037                           	callstack 27
  7038   003084  ECD6  F019         	call	_I2C_2_Master_Start	;wreg free
  7039   003088  0E52               	movlw	82
  7040   00308A  ECCB  F019         	call	_I2C_2_Master_Write
  7041   00308E  0EB8               	movlw	184
  7042   003090  ECCB  F019         	call	_I2C_2_Master_Write
  7043   003094  ECDB  F019         	call	_I2C_2_Master_RepStart	;wreg free
  7044   003098  0E53               	movlw	83
  7045   00309A  ECCB  F019         	call	_I2C_2_Master_Write
  7046   00309E  0E01               	movlw	1
  7047   0030A0  ECB4  F018         	call	_I2C_2_Master_Read
  7048   0030A4  6E0A               	movwf	??_color_read_Green^0,c
  7049   0030A6  500A               	movf	??_color_read_Green^0,w,c
  7050   0030A8  6E0D               	movwf	color_read_Green@tmp^0,c
  7051   0030AA  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  7052   0030AC  0E00               	movlw	0
  7053   0030AE  ECB4  F018         	call	_I2C_2_Master_Read
  7054   0030B2  6E0A               	movwf	??_color_read_Green^0,c
  7055   0030B4  500A               	movf	??_color_read_Green^0,w,c
  7056   0030B6  6E0C               	movwf	(??_color_read_Green+2)^0,c
  7057   0030B8  6A0B               	clrf	(??_color_read_Green+1)^0,c
  7058   0030BA  500D               	movf	color_read_Green@tmp^0,w,c
  7059   0030BC  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  7060   0030BE  6E0D               	movwf	color_read_Green@tmp^0,c
  7061   0030C0  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  7062   0030C2  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  7063   0030C4  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  7064   0030C6  ECD1  F019         	call	_I2C_2_Master_Stop	;wreg free
  7065   0030CA  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  7066   0030CE  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  7067   0030D2  0012               	return		;funcret
  7068   0030D4                     __end_of_color_read_Green:
  7069                           	callstack 0
  7070                           
  7071 ;; *************** function _color_read_Blue *****************
  7072 ;; Defined at:
  7073 ;;		line 57 in file "color.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  tmp             2   12[COMRAM] unsigned int 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  2    7[COMRAM] unsigned int 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7089 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7090 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7091 ;;Total ram usage:        7 bytes
  7092 ;; Hardware stack levels used: 1
  7093 ;; Hardware stack levels required when called: 3
  7094 ;; This function calls:
  7095 ;;		_I2C_2_Master_Read
  7096 ;;		_I2C_2_Master_RepStart
  7097 ;;		_I2C_2_Master_Start
  7098 ;;		_I2C_2_Master_Stop
  7099 ;;		_I2C_2_Master_Write
  7100 ;; This function is called by:
  7101 ;;		_main
  7102 ;;		_collect_avg_readings
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text36
  7107   0030D4                     __ptext36:
  7108                           	callstack 0
  7109   0030D4                     _color_read_Blue:
  7110                           	callstack 27
  7111   0030D4  ECD6  F019         	call	_I2C_2_Master_Start	;wreg free
  7112   0030D8  0E52               	movlw	82
  7113   0030DA  ECCB  F019         	call	_I2C_2_Master_Write
  7114   0030DE  0EBA               	movlw	186
  7115   0030E0  ECCB  F019         	call	_I2C_2_Master_Write
  7116   0030E4  ECDB  F019         	call	_I2C_2_Master_RepStart	;wreg free
  7117   0030E8  0E53               	movlw	83
  7118   0030EA  ECCB  F019         	call	_I2C_2_Master_Write
  7119   0030EE  0E01               	movlw	1
  7120   0030F0  ECB4  F018         	call	_I2C_2_Master_Read
  7121   0030F4  6E0A               	movwf	??_color_read_Blue^0,c
  7122   0030F6  500A               	movf	??_color_read_Blue^0,w,c
  7123   0030F8  6E0D               	movwf	color_read_Blue@tmp^0,c
  7124   0030FA  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  7125   0030FC  0E00               	movlw	0
  7126   0030FE  ECB4  F018         	call	_I2C_2_Master_Read
  7127   003102  6E0A               	movwf	??_color_read_Blue^0,c
  7128   003104  500A               	movf	??_color_read_Blue^0,w,c
  7129   003106  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  7130   003108  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  7131   00310A  500D               	movf	color_read_Blue@tmp^0,w,c
  7132   00310C  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  7133   00310E  6E0D               	movwf	color_read_Blue@tmp^0,c
  7134   003110  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  7135   003112  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  7136   003114  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  7137   003116  ECD1  F019         	call	_I2C_2_Master_Stop	;wreg free
  7138   00311A  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  7139   00311E  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  7140   003122  0012               	return		;funcret
  7141   003124                     __end_of_color_read_Blue:
  7142                           	callstack 0
  7143                           
  7144 ;; *************** function _I2C_2_Master_Write *****************
  7145 ;; Defined at:
  7146 ;;		line 45 in file "i2c.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  data_byte       1    wreg     unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  data_byte       1    4[COMRAM] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      void 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7164 ;;Total ram usage:        1 bytes
  7165 ;; Hardware stack levels used: 1
  7166 ;; Hardware stack levels required when called: 2
  7167 ;; This function calls:
  7168 ;;		_I2C_2_Master_Idle
  7169 ;; This function is called by:
  7170 ;;		_color_writetoaddr
  7171 ;;		_color_read_Red
  7172 ;;		_color_read_Green
  7173 ;;		_color_read_Blue
  7174 ;;		_color_read_Clear
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text37
  7179   003396                     __ptext37:
  7180                           	callstack 0
  7181   003396                     _I2C_2_Master_Write:
  7182                           	callstack 27
  7183                           
  7184                           ;incstack = 0
  7185                           ;I2C_2_Master_Write@data_byte stored from wreg
  7186   003396  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  7187   003398                     
  7188                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7189   003398  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7190   00339C                     
  7191                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7192   00339C  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7193   0033A0  0012               	return		;funcret
  7194   0033A2                     __end_of_I2C_2_Master_Write:
  7195                           	callstack 0
  7196                           
  7197 ;; *************** function _I2C_2_Master_Stop *****************
  7198 ;; Defined at:
  7199 ;;		line 39 in file "i2c.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used: 1
  7219 ;; Hardware stack levels required when called: 2
  7220 ;; This function calls:
  7221 ;;		_I2C_2_Master_Idle
  7222 ;; This function is called by:
  7223 ;;		_color_writetoaddr
  7224 ;;		_color_read_Red
  7225 ;;		_color_read_Green
  7226 ;;		_color_read_Blue
  7227 ;;		_color_read_Clear
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text38
  7232   0033A2                     __ptext38:
  7233                           	callstack 0
  7234   0033A2                     _I2C_2_Master_Stop:
  7235                           	callstack 27
  7236   0033A2                     
  7237                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7238   0033A2  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7239   0033A6                     
  7240                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7241   0033A6  010E               	movlb	14	; () banked
  7242   0033A8  85DA               	bsf	218,2,b	;volatile
  7243   0033AA                     
  7244                           ; BSR set to: 14
  7245   0033AA  0012               	return		;funcret
  7246   0033AC                     __end_of_I2C_2_Master_Stop:
  7247                           	callstack 0
  7248                           
  7249 ;; *************** function _I2C_2_Master_Start *****************
  7250 ;; Defined at:
  7251 ;;		line 27 in file "i2c.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;		None
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, status,0, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7269 ;;Total ram usage:        0 bytes
  7270 ;; Hardware stack levels used: 1
  7271 ;; Hardware stack levels required when called: 2
  7272 ;; This function calls:
  7273 ;;		_I2C_2_Master_Idle
  7274 ;; This function is called by:
  7275 ;;		_color_writetoaddr
  7276 ;;		_color_read_Red
  7277 ;;		_color_read_Green
  7278 ;;		_color_read_Blue
  7279 ;;		_color_read_Clear
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           	psect	text39
  7284   0033AC                     __ptext39:
  7285                           	callstack 0
  7286   0033AC                     _I2C_2_Master_Start:
  7287                           	callstack 27
  7288   0033AC                     
  7289                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7290   0033AC  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7291   0033B0                     
  7292                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7293   0033B0  010E               	movlb	14	; () banked
  7294   0033B2  81DA               	bsf	218,0,b	;volatile
  7295   0033B4                     
  7296                           ; BSR set to: 14
  7297   0033B4  0012               	return		;funcret
  7298   0033B6                     __end_of_I2C_2_Master_Start:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _I2C_2_Master_RepStart *****************
  7302 ;; Defined at:
  7303 ;;		line 33 in file "i2c.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used: 1
  7323 ;; Hardware stack levels required when called: 2
  7324 ;; This function calls:
  7325 ;;		_I2C_2_Master_Idle
  7326 ;; This function is called by:
  7327 ;;		_color_read_Red
  7328 ;;		_color_read_Green
  7329 ;;		_color_read_Blue
  7330 ;;		_color_read_Clear
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text40
  7335   0033B6                     __ptext40:
  7336                           	callstack 0
  7337   0033B6                     _I2C_2_Master_RepStart:
  7338                           	callstack 27
  7339   0033B6                     
  7340                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7341   0033B6  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7342   0033BA                     
  7343                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7344   0033BA  010E               	movlb	14	; () banked
  7345   0033BC  83DA               	bsf	218,1,b	;volatile
  7346   0033BE                     
  7347                           ; BSR set to: 14
  7348   0033BE  0012               	return		;funcret
  7349   0033C0                     __end_of_I2C_2_Master_RepStart:
  7350                           	callstack 0
  7351                           
  7352 ;; *************** function _I2C_2_Master_Read *****************
  7353 ;; Defined at:
  7354 ;;		line 51 in file "i2c.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  ack             1    wreg     unsigned char 
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;  ack             1    5[COMRAM] unsigned char 
  7359 ;;  tmp             1    6[COMRAM] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      unsigned char 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used: 1
  7375 ;; Hardware stack levels required when called: 2
  7376 ;; This function calls:
  7377 ;;		_I2C_2_Master_Idle
  7378 ;; This function is called by:
  7379 ;;		_color_read_Red
  7380 ;;		_color_read_Green
  7381 ;;		_color_read_Blue
  7382 ;;		_color_read_Clear
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text41
  7387   003168                     __ptext41:
  7388                           	callstack 0
  7389   003168                     _I2C_2_Master_Read:
  7390                           	callstack 27
  7391                           
  7392                           ; BSR set to: 14
  7393                           ;incstack = 0
  7394                           ;I2C_2_Master_Read@ack stored from wreg
  7395   003168  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  7396   00316A                     
  7397                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7398   00316A  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7399   00316E                     
  7400                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7401   00316E  010E               	movlb	14	; () banked
  7402   003170  87DA               	bsf	218,3,b	;volatile
  7403                           
  7404                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7405   003172  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7406   003176                     
  7407                           ;i2c.c: 57:   tmp = SSP2BUF;
  7408   003176  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7409                           
  7410                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7411   00317A  EC67  F019         	call	_I2C_2_Master_Idle	;wreg free
  7412   00317E                     
  7413                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7414   00317E  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  7415   003180  B4D8               	btfsc	status,2,c
  7416   003182  EFC5  F018         	goto	u1251
  7417   003186  EFC9  F018         	goto	u1250
  7418   00318A                     u1251:
  7419   00318A  6A05               	clrf	??_I2C_2_Master_Read^0,c
  7420   00318C  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  7421   00318E  EFCA  F018         	goto	u1268
  7422   003192                     u1250:
  7423   003192  6A05               	clrf	??_I2C_2_Master_Read^0,c
  7424   003194                     u1268:
  7425   003194  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  7426   003196  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  7427   003198  010E               	movlb	14	; () banked
  7428   00319A  51DA               	movf	218,w,b	;volatile
  7429   00319C  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  7430   00319E  0BDF               	andlw	-33
  7431   0031A0  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  7432   0031A2  6FDA               	movwf	218,b	;volatile
  7433   0031A4                     
  7434                           ; BSR set to: 14
  7435                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7436   0031A4  89DA               	bsf	218,4,b	;volatile
  7437   0031A6                     
  7438                           ; BSR set to: 14
  7439                           ;i2c.c: 61:   return tmp;
  7440   0031A6  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  7441   0031A8                     
  7442                           ; BSR set to: 14
  7443   0031A8  0012               	return		;funcret
  7444   0031AA                     __end_of_I2C_2_Master_Read:
  7445                           	callstack 0
  7446                           
  7447 ;; *************** function _I2C_2_Master_Idle *****************
  7448 ;; Defined at:
  7449 ;;		line 22 in file "i2c.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;Total ram usage:        1 bytes
  7468 ;; Hardware stack levels used: 1
  7469 ;; Hardware stack levels required when called: 1
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_I2C_2_Master_Start
  7474 ;;		_I2C_2_Master_RepStart
  7475 ;;		_I2C_2_Master_Stop
  7476 ;;		_I2C_2_Master_Write
  7477 ;;		_I2C_2_Master_Read
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text42
  7482   0032CE                     __ptext42:
  7483                           	callstack 0
  7484   0032CE                     _I2C_2_Master_Idle:
  7485                           	callstack 27
  7486   0032CE                     l145:
  7487   0032CE  010E               	movlb	14	; () banked
  7488   0032D0  B5D8               	btfsc	216,2,b	;volatile
  7489   0032D2  EF6D  F019         	goto	u1131
  7490   0032D6  EF6F  F019         	goto	u1130
  7491   0032DA                     u1131:
  7492   0032DA  EF67  F019         	goto	l145
  7493   0032DE                     u1130:
  7494   0032DE                     
  7495                           ; BSR set to: 14
  7496   0032DE  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7497   0032E2  0E1F               	movlw	31
  7498   0032E4  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  7499   0032E6  A4D8               	btfss	status,2,c
  7500   0032E8  EF78  F019         	goto	u1141
  7501   0032EC  EF7A  F019         	goto	u1140
  7502   0032F0                     u1141:
  7503   0032F0  EF67  F019         	goto	l145
  7504   0032F4                     u1140:
  7505   0032F4                     
  7506                           ; BSR set to: 14
  7507   0032F4  0012               	return		;funcret
  7508   0032F6                     __end_of_I2C_2_Master_Idle:
  7509                           	callstack 0
  7510                           
  7511 ;; *************** function ___lwdiv *****************
  7512 ;; Defined at:
  7513 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  dividend        2    9[COMRAM] unsigned int 
  7516 ;;  divisor         2   11[COMRAM] unsigned int 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  quotient        2   13[COMRAM] unsigned int 
  7519 ;;  counter         1   15[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  2    9[COMRAM] unsigned int 
  7522 ;; Registers used:
  7523 ;;		wreg, status,2, status,0
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7530 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7532 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7533 ;;Total ram usage:        7 bytes
  7534 ;; Hardware stack levels used: 1
  7535 ;; Hardware stack levels required when called: 1
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_setMotorPWM
  7540 ;;		_collect_avg_readings
  7541 ;;		_normalise_readings
  7542 ;;		_make_master_closeness
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text43
  7547   002ECA                     __ptext43:
  7548                           	callstack 0
  7549   002ECA                     ___lwdiv:
  7550                           	callstack 27
  7551   002ECA  0E00               	movlw	0
  7552   002ECC  6E0F               	movwf	(___lwdiv@quotient+1)^0,c
  7553   002ECE  0E00               	movlw	0
  7554   002ED0  6E0E               	movwf	___lwdiv@quotient^0,c
  7555   002ED2  500C               	movf	___lwdiv@divisor^0,w,c
  7556   002ED4  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7557   002ED6  B4D8               	btfsc	status,2,c
  7558   002ED8  EF70  F017         	goto	u1061
  7559   002EDC  EF72  F017         	goto	u1060
  7560   002EE0                     u1061:
  7561   002EE0  EF9A  F017         	goto	l988
  7562   002EE4                     u1060:
  7563   002EE4  0E01               	movlw	1
  7564   002EE6  6E10               	movwf	___lwdiv@counter^0,c
  7565   002EE8  EF7A  F017         	goto	l2473
  7566   002EEC                     l2471:
  7567   002EEC  90D8               	bcf	status,0,c
  7568   002EEE  360C               	rlcf	___lwdiv@divisor^0,f,c
  7569   002EF0  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7570   002EF2  2A10               	incf	___lwdiv@counter^0,f,c
  7571   002EF4                     l2473:
  7572   002EF4  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7573   002EF6  EF7F  F017         	goto	u1071
  7574   002EFA  EF81  F017         	goto	u1070
  7575   002EFE                     u1071:
  7576   002EFE  EF76  F017         	goto	l2471
  7577   002F02                     u1070:
  7578   002F02                     l2475:
  7579   002F02  90D8               	bcf	status,0,c
  7580   002F04  360E               	rlcf	___lwdiv@quotient^0,f,c
  7581   002F06  360F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7582   002F08  500C               	movf	___lwdiv@divisor^0,w,c
  7583   002F0A  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7584   002F0C  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7585   002F0E  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7586   002F10  A0D8               	btfss	status,0,c
  7587   002F12  EF8D  F017         	goto	u1081
  7588   002F16  EF8F  F017         	goto	u1080
  7589   002F1A                     u1081:
  7590   002F1A  EF94  F017         	goto	l2483
  7591   002F1E                     u1080:
  7592   002F1E  500C               	movf	___lwdiv@divisor^0,w,c
  7593   002F20  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7594   002F22  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7595   002F24  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7596   002F26  800E               	bsf	___lwdiv@quotient^0,0,c
  7597   002F28                     l2483:
  7598   002F28  90D8               	bcf	status,0,c
  7599   002F2A  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7600   002F2C  320C               	rrcf	___lwdiv@divisor^0,f,c
  7601   002F2E  2E10               	decfsz	___lwdiv@counter^0,f,c
  7602   002F30  EF81  F017         	goto	l2475
  7603   002F34                     l988:
  7604   002F34  C00E  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7605   002F38  C00F  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7606   002F3C  0012               	return		;funcret
  7607   002F3E                     __end_of___lwdiv:
  7608                           	callstack 0
  7609                           
  7610 ;; *************** function _LEDSon_init *****************
  7611 ;; Defined at:
  7612 ;;		line 18 in file "LEDsOn.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		None
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;Total ram usage:        0 bytes
  7631 ;; Hardware stack levels used: 1
  7632 ;; Hardware stack levels required when called: 1
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_main
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text44
  7641   00331C                     __ptext44:
  7642                           	callstack 0
  7643   00331C                     _LEDSon_init:
  7644                           	callstack 29
  7645   00331C                     
  7646                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7647   00331C  9288               	bcf	136,1,c	;volatile
  7648                           
  7649                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7650   00331E  9088               	bcf	136,0,c	;volatile
  7651                           
  7652                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7653   003320  9884               	bcf	132,4,c	;volatile
  7654                           
  7655                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7656   003322  9684               	bcf	132,3,c	;volatile
  7657                           
  7658                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7659   003324  9086               	bcf	134,0,c	;volatile
  7660                           
  7661                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7662   003326  9287               	bcf	135,1,c	;volatile
  7663                           
  7664                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7665   003328  9E86               	bcf	134,7,c	;volatile
  7666                           
  7667                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7668   00332A  9881               	bcf	129,4,c	;volatile
  7669                           
  7670                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7671   00332C  8E7E               	bsf	126,7,c	;volatile
  7672                           
  7673                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7674   00332E  827F               	bsf	127,1,c	;volatile
  7675                           
  7676                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7677   003330  8879               	bsf	121,4,c	;volatile
  7678                           
  7679                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7680   003332  987C               	bcf	124,4,c	;volatile
  7681                           
  7682                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7683   003334  9280               	bcf	128,1,c	;volatile
  7684                           
  7685                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7686   003336  907E               	bcf	126,0,c	;volatile
  7687                           
  7688                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7689   003338  9080               	bcf	128,0,c	;volatile
  7690                           
  7691                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7692   00333A  967C               	bcf	124,3,c	;volatile
  7693   00333C  0012               	return		;funcret
  7694   00333E                     __end_of_LEDSon_init:
  7695                           	callstack 0
  7696                           
  7697 ;; *************** function _Interrupts_init *****************
  7698 ;; Defined at:
  7699 ;;		line 7 in file "interrupts.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;		None
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;		None
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  1    wreg      void 
  7706 ;; Registers used:
  7707 ;;		wreg, status,2
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7717 ;;Total ram usage:        0 bytes
  7718 ;; Hardware stack levels used: 1
  7719 ;; Hardware stack levels required when called: 1
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_main
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text45
  7728   0032A4                     __ptext45:
  7729                           	callstack 0
  7730   0032A4                     _Interrupts_init:
  7731                           	callstack 29
  7732   0032A4                     
  7733                           ;interrupts.c: 10:     TMR0IE=1;
  7734   0032A4  010E               	movlb	14	; () banked
  7735   0032A6  8B29               	bsf	41,5,b	;volatile
  7736   0032A8                     
  7737                           ; BSR set to: 14
  7738                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  7739   0032A8  50D6               	movf	214,w,c	;volatile
  7740   0032AA  0B1F               	andlw	-225
  7741   0032AC  0940               	iorlw	64
  7742   0032AE  6ED6               	movwf	214,c	;volatile
  7743   0032B0                     
  7744                           ; BSR set to: 14
  7745                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  7746   0032B0  88D6               	bsf	214,4,c	;volatile
  7747                           
  7748                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  7749   0032B2  50D6               	movf	214,w,c	;volatile
  7750   0032B4  0BF0               	andlw	-16
  7751   0032B6  0905               	iorlw	5
  7752   0032B8  6ED6               	movwf	214,c	;volatile
  7753   0032BA                     
  7754                           ; BSR set to: 14
  7755                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  7756   0032BA  88D5               	bsf	213,4,c	;volatile
  7757   0032BC                     
  7758                           ; BSR set to: 14
  7759                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  7760   0032BC  9B1F               	bcf	31,5,b	;volatile
  7761                           
  7762                           ;interrupts.c: 16:     TMR0H=0b00111100;
  7763   0032BE  0E3C               	movlw	60
  7764   0032C0  6ED4               	movwf	212,c	;volatile
  7765                           
  7766                           ;interrupts.c: 17:     TMR0L=0b10101111;
  7767   0032C2  0EAF               	movlw	175
  7768   0032C4  6ED3               	movwf	211,c	;volatile
  7769   0032C6                     
  7770                           ; BSR set to: 14
  7771                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  7772   0032C6  8ED5               	bsf	213,7,c	;volatile
  7773   0032C8                     
  7774                           ; BSR set to: 14
  7775                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7776   0032C8  8CF2               	bsf	242,6,c	;volatile
  7777   0032CA                     
  7778                           ; BSR set to: 14
  7779                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7780   0032CA  8EF2               	bsf	242,7,c	;volatile
  7781   0032CC                     
  7782                           ; BSR set to: 14
  7783   0032CC  0012               	return		;funcret
  7784   0032CE                     __end_of_Interrupts_init:
  7785                           	callstack 0
  7786                           
  7787 ;; *************** function _LowISR *****************
  7788 ;; Defined at:
  7789 ;;		line 24 in file "interrupts.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7806 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7807 ;;Total ram usage:        3 bytes
  7808 ;; Hardware stack levels used: 1
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		Interrupt level 1
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	intcodelo
  7817   000018                     __pintcodelo:
  7818                           	callstack 0
  7819   000018                     _LowISR:
  7820                           	callstack 21
  7821                           
  7822                           ; BSR set to: 14
  7823                           ;incstack = 0
  7824   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7825   00001A  CFD8 F001          	movff	status,??_LowISR
  7826   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  7827   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  7828   000026                     
  7829                           ;interrupts.c: 27:     if(TMR0IF){
  7830   000026  010E               	movlb	14	; () banked
  7831   000028  AB33               	btfss	51,5,b	;volatile
  7832   00002A  EF19  F000         	goto	i1u168_21
  7833   00002E  EF1B  F000         	goto	i1u168_20
  7834   000032                     i1u168_21:
  7835   000032  EF26  F000         	goto	i1l494
  7836   000036                     i1u168_20:
  7837   000036                     
  7838                           ; BSR set to: 14
  7839                           ;interrupts.c: 28:     TMR0H=0b00111100;
  7840   000036  0E3C               	movlw	60
  7841   000038  6ED4               	movwf	212,c	;volatile
  7842                           
  7843                           ;interrupts.c: 29:     TMR0L=0b10101111;
  7844   00003A  0EAF               	movlw	175
  7845   00003C  6ED3               	movwf	211,c	;volatile
  7846                           
  7847                           ;interrupts.c: 34:         TimerFlag=1;
  7848   00003E  0E00               	movlw	0
  7849   000040  0101               	movlb	1	; () banked
  7850   000042  6FF8               	movwf	(_TimerFlag+1)& (0+255),b
  7851   000044  0E01               	movlw	1
  7852   000046  6FF7               	movwf	_TimerFlag& (0+255),b
  7853   000048                     
  7854                           ; BSR set to: 1
  7855                           ;interrupts.c: 36:        TMR0IF=0;
  7856   000048  010E               	movlb	14	; () banked
  7857   00004A  9B33               	bcf	51,5,b	;volatile
  7858   00004C                     i1l494:
  7859                           
  7860                           ; BSR set to: 14
  7861   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  7862   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  7863   000054  C001  FFD8         	movff	??_LowISR,status
  7864   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7865   00005A  0010               	retfie	
  7866   00005C                     __end_of_LowISR:
  7867                           	callstack 0
  7868                           
  7869                           	psect	rparam
  7870   000000                     
  7871                           	psect	temp
  7872   00005B                     btemp:
  7873                           	callstack 0
  7874   00005B                     	ds	1
  7875   000000                     int$flags	set	btemp
  7876   000000                     wtemp8	set	btemp+1
  7877   000000                     ttemp5	set	btemp+1
  7878   000000                     ttemp6	set	btemp+4
  7879   000000                     ttemp7	set	btemp+8
  7880                           
  7881                           	psect	idloc
  7882                           
  7883                           ;Config register IDLOC0 @ 0x200000
  7884                           ;	unspecified, using default values
  7885   200000                     	org	2097152
  7886   200000  0FFF               	dw	4095
  7887                           
  7888                           ;Config register IDLOC1 @ 0x200002
  7889                           ;	unspecified, using default values
  7890   200002                     	org	2097154
  7891   200002  0FFF               	dw	4095
  7892                           
  7893                           ;Config register IDLOC2 @ 0x200004
  7894                           ;	unspecified, using default values
  7895   200004                     	org	2097156
  7896   200004  0FFF               	dw	4095
  7897                           
  7898                           ;Config register IDLOC3 @ 0x200006
  7899                           ;	unspecified, using default values
  7900   200006                     	org	2097158
  7901   200006  0FFF               	dw	4095
  7902                           
  7903                           ;Config register IDLOC4 @ 0x200008
  7904                           ;	unspecified, using default values
  7905   200008                     	org	2097160
  7906   200008  0FFF               	dw	4095
  7907                           
  7908                           ;Config register IDLOC5 @ 0x20000A
  7909                           ;	unspecified, using default values
  7910   20000A                     	org	2097162
  7911   20000A  0FFF               	dw	4095
  7912                           
  7913                           ;Config register IDLOC6 @ 0x20000C
  7914                           ;	unspecified, using default values
  7915   20000C                     	org	2097164
  7916   20000C  0FFF               	dw	4095
  7917                           
  7918                           ;Config register IDLOC7 @ 0x20000E
  7919                           ;	unspecified, using default values
  7920   20000E                     	org	2097166
  7921   20000E  0FFF               	dw	4095
  7922                           
  7923                           	psect	config
  7924                           
  7925                           ;Config register CONFIG1L @ 0x300000
  7926                           ;	External Oscillator mode Selection bits
  7927                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7928                           ;	Power-up default value for COSC bits
  7929                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7930   300000                     	org	3145728
  7931   300000  AA                 	db	170
  7932                           
  7933                           ;Config register CONFIG1H @ 0x300001
  7934                           ;	unspecified, using default values
  7935                           ;	Clock Out Enable bit
  7936                           ;	CLKOUTEN = 0x1, unprogrammed default
  7937                           ;	Clock Switch Enable bit
  7938                           ;	CSWEN = 0x1, unprogrammed default
  7939                           ;	Fail-Safe Clock Monitor Enable bit
  7940                           ;	FCMEN = 0x1, unprogrammed default
  7941   300001                     	org	3145729
  7942   300001  FF                 	db	255
  7943                           
  7944                           ;Config register CONFIG2L @ 0x300002
  7945                           ;	unspecified, using default values
  7946                           ;	Master Clear Enable bit
  7947                           ;	MCLRE = 0x1, unprogrammed default
  7948                           ;	Power-up Timer Enable bit
  7949                           ;	PWRTE = 0x1, unprogrammed default
  7950                           ;	Low-power BOR enable bit
  7951                           ;	LPBOREN = 0x1, unprogrammed default
  7952                           ;	Brown-out Reset Enable bits
  7953                           ;	BOREN = 0x3, unprogrammed default
  7954   300002                     	org	3145730
  7955   300002  FF                 	db	255
  7956                           
  7957                           ;Config register CONFIG2H @ 0x300003
  7958                           ;	unspecified, using default values
  7959                           ;	Brown Out Reset Voltage selection bits
  7960                           ;	BORV = 0x3, unprogrammed default
  7961                           ;	ZCD Disable bit
  7962                           ;	ZCD = 0x1, unprogrammed default
  7963                           ;	PPSLOCK bit One-Way Set Enable bit
  7964                           ;	PPS1WAY = 0x1, unprogrammed default
  7965                           ;	Stack Full/Underflow Reset Enable bit
  7966                           ;	STVREN = 0x1, unprogrammed default
  7967                           ;	Debugger Enable bit
  7968                           ;	DEBUG = 0x1, unprogrammed default
  7969                           ;	Extended Instruction Set Enable bit
  7970                           ;	XINST = 0x1, unprogrammed default
  7971   300003                     	org	3145731
  7972   300003  FF                 	db	255
  7973                           
  7974                           ;Config register CONFIG3L @ 0x300004
  7975                           ;	WDT Period Select bits
  7976                           ;	WDTCPS = 0x1F, unprogrammed default
  7977                           ;	WDT operating mode
  7978                           ;	WDTE = OFF, WDT Disabled
  7979   300004                     	org	3145732
  7980   300004  9F                 	db	159
  7981                           
  7982                           ;Config register CONFIG3H @ 0x300005
  7983                           ;	unspecified, using default values
  7984                           ;	WDT Window Select bits
  7985                           ;	WDTCWS = 0x7, unprogrammed default
  7986                           ;	WDT input clock selector
  7987                           ;	WDTCCS = 0x7, unprogrammed default
  7988   300005                     	org	3145733
  7989   300005  FF                 	db	255
  7990                           
  7991                           ;Config register CONFIG4L @ 0x300006
  7992                           ;	unspecified, using default values
  7993                           ;	Write Protection Block 0
  7994                           ;	WRT0 = 0x1, unprogrammed default
  7995                           ;	Write Protection Block 1
  7996                           ;	WRT1 = 0x1, unprogrammed default
  7997                           ;	Write Protection Block 2
  7998                           ;	WRT2 = 0x1, unprogrammed default
  7999                           ;	Write Protection Block 3
  8000                           ;	WRT3 = 0x1, unprogrammed default
  8001                           ;	Write Protection Block 3
  8002                           ;	WRT4 = 0x1, unprogrammed default
  8003                           ;	Write Protection Block 3
  8004                           ;	WRT5 = 0x1, unprogrammed default
  8005                           ;	Write Protection Block 3
  8006                           ;	WRT6 = 0x1, unprogrammed default
  8007                           ;	Write Protection Block 3
  8008                           ;	WRT7 = 0x1, unprogrammed default
  8009   300006                     	org	3145734
  8010   300006  FF                 	db	255
  8011                           
  8012                           ;Config register CONFIG4H @ 0x300007
  8013                           ;	unspecified, using default values
  8014                           ;	Configuration Register Write Protection bit
  8015                           ;	WRTC = 0x1, unprogrammed default
  8016                           ;	Boot Block Write Protection bit
  8017                           ;	WRTB = 0x1, unprogrammed default
  8018                           ;	Data EEPROM Write Protection bit
  8019                           ;	WRTD = 0x1, unprogrammed default
  8020                           ;	Scanner Enable bit
  8021                           ;	SCANE = 0x1, unprogrammed default
  8022                           ;	Low Voltage Programming Enable bit
  8023                           ;	LVP = 0x1, unprogrammed default
  8024   300007                     	org	3145735
  8025   300007  FF                 	db	255
  8026                           
  8027                           ;Config register CONFIG5L @ 0x300008
  8028                           ;	unspecified, using default values
  8029                           ;	UserNVM Program Memory Code Protection bit
  8030                           ;	CP = 0x1, unprogrammed default
  8031                           ;	DataNVM Memory Code Protection bit
  8032                           ;	CPD = 0x1, unprogrammed default
  8033   300008                     	org	3145736
  8034   300008  FF                 	db	255
  8035                           
  8036                           ;Config register CONFIG5H @ 0x300009
  8037                           ;	unspecified, using default values
  8038   300009                     	org	3145737
  8039   300009  FF                 	db	255
  8040                           
  8041                           ;Config register CONFIG6L @ 0x30000A
  8042                           ;	unspecified, using default values
  8043                           ;	Table Read Protection Block 0
  8044                           ;	EBTR0 = 0x1, unprogrammed default
  8045                           ;	Table Read Protection Block 1
  8046                           ;	EBTR1 = 0x1, unprogrammed default
  8047                           ;	Table Read Protection Block 2
  8048                           ;	EBTR2 = 0x1, unprogrammed default
  8049                           ;	Table Read Protection Block 3
  8050                           ;	EBTR3 = 0x1, unprogrammed default
  8051                           ;	Table Read Protection Block 4
  8052                           ;	EBTR4 = 0x1, unprogrammed default
  8053                           ;	Table Read Protection Block 5
  8054                           ;	EBTR5 = 0x1, unprogrammed default
  8055                           ;	Table Read Protection Block 6
  8056                           ;	EBTR6 = 0x1, unprogrammed default
  8057                           ;	Table Read Protection Block 7
  8058                           ;	EBTR7 = 0x1, unprogrammed default
  8059   30000A                     	org	3145738
  8060   30000A  FF                 	db	255
  8061                           
  8062                           ;Config register CONFIG6H @ 0x30000B
  8063                           ;	unspecified, using default values
  8064                           ;	Boot Block Table Read Protection bit
  8065                           ;	EBTRB = 0x1, unprogrammed default
  8066   30000B                     	org	3145739
  8067   30000B  FF                 	db	255
  8068                           tosu	equ	0xFFF
  8069                           tosh	equ	0xFFE
  8070                           tosl	equ	0xFFD
  8071                           stkptr	equ	0xFFC
  8072                           pclatu	equ	0xFFB
  8073                           pclath	equ	0xFFA
  8074                           pcl	equ	0xFF9
  8075                           tblptru	equ	0xFF8
  8076                           tblptrh	equ	0xFF7
  8077                           tblptrl	equ	0xFF6
  8078                           tablat	equ	0xFF5
  8079                           prodh	equ	0xFF4
  8080                           prodl	equ	0xFF3
  8081                           indf0	equ	0xFEF
  8082                           postinc0	equ	0xFEE
  8083                           postdec0	equ	0xFED
  8084                           preinc0	equ	0xFEC
  8085                           plusw0	equ	0xFEB
  8086                           fsr0h	equ	0xFEA
  8087                           fsr0l	equ	0xFE9
  8088                           wreg	equ	0xFE8
  8089                           indf1	equ	0xFE7
  8090                           postinc1	equ	0xFE6
  8091                           postdec1	equ	0xFE5
  8092                           preinc1	equ	0xFE4
  8093                           plusw1	equ	0xFE3
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           bsr	equ	0xFE0
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           preinc2	equ	0xFDC
  8101                           plusw2	equ	0xFDB
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8

Data Sizes:
    Strings     96
    Constant    0
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160    157     158
    BANK1           256    243     250
    BANK2           256    114     226
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2465$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[10]), STR_4(CODE[26]), STR_3(CODE[21]), STR_2(CODE[16]), 
		 -> STR_1(CODE[23]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2416$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2416$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_read_Clear->_I2C_2_Master_Read
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_home_response
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    _make_master_closeness->___lwdiv
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_motor_response
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               305   305      0  113612
                                             85 COMRAM     2     2      0
                                            139 BANK0     18    18      0
                                             72 BANK1    171   171      0
                                              0 BANK2    114   114      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                      147    72     75   82406
                                             64 BANK0     75     0     75
                                              0 BANK1     72    72      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    6764
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5558
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5097
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3877
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     447
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  23    11     12    3420
                                             25 COMRAM    23    11     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     370
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      71     7     64   65704
                                             37 COMRAM     7     7      0
                                              0 BANK0     64     0     64
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4875
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        7     3      4   29856
                                             30 COMRAM     7     3      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    6851
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    6243
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   10561
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    4267
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3285
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    1656
                                             16 COMRAM    27    21      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    2449
                                             16 COMRAM    16    10      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1206
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   _card_response
     _collect_avg_readings
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Blue
   _color_read_Clear
     _I2C_2_Master_Read
     _I2C_2_Master_RepStart
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _color_read_Green
   _color_read_Red
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     72      E2       9       88.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F3      FA       7       97.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D4      64        0.0%
DATA                 0      0     2D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 20:42:19 2022

                        _color_read_Red 3034                         _color_read_Blue 30D4  
                                    l22 337C                                      l31 3122  
                                    l25 3082                                      l34 3032  
                                    l19 321C                                      l28 30D2  
                                    l86 24B0                                      l95 2DCE  
                                    l79 2D48                                      bsr 000FE0  
                   ___wmul@multiplicand 0006                        _color_read_Clear 2FE4  
                      _color_read_Green 3084                       ??_Interrupts_init 0004  
                                   l100 2BA8                                     l110 2CC0  
                                   l105 2AFA                                     l115 2C34  
                                   l142 32A2                                     l151 33B4  
                                   l160 33A0                                     l240 13C0  
                                   l145 32CE                                     l241 13BE  
                                   l154 33BE                                     l330 1FD6  
                                   l242 13CE                                     l163 31A8  
                                   l148 32F4                                     l157 33AA  
                                   l325 21BC                                     l341 2E4E  
                                   l335 2982                                     l417 335C  
                                   l362 1308                                     l426 3380  
                                   l435 324C                                     l611 2344  
                                   l276 333C                                     l429 3394  
                                   l375 1B30                                     l624 2614  
                                   l378 28AE                                     l488 32CC  
                                   l497 331A                                     l995 2F3C  
                                   l988 2F34                                     u900 2A06  
                                   u901 2A02                                     u910 3166  
                                   u911 3162                                     u920 31C4  
                                   u921 31C0                                     u930 21D0  
                                   u931 21CC                                     u940 2202  
                                   u941 21FE                                     u870 2996  
                                   u951 222C                                     u871 2992  
                                   u960 2250                                     u880 29A8  
                                   u961 224C                                     u881 29A4  
                                   u970 227A                                     u890 29D0  
                                   u971 2276                                     u891 29CC  
                                   u980 22BA                                     u981 22B6  
                                   u990 2304                                     u991 2300  
   normalise_readings@normalised_values 0024                        ??_motor_response 0026  
                                   _abs 31AA                                     _pad 2E50  
                 __end_of_card_response 28B0                                     prod 000FF3  
                                   wreg 000FE8                                    ?_abs 0016  
                                  l1204 2E72                                    l1213 1BBE  
                                  l1215 1BC6                                    l1208 2EC8  
                                  l1216 1C0C                                    l1240 2F90  
                                  l3001 1044                                    l1234 2772  
                                  l3003 105C                                    l1227 1DAE  
                                  l1172 31E0                                    l1252 2A4C  
                                  l1260 3166                                    l3005 1088  
                                  l3101 2CF4                                    l1182 2FE2  
                                  l3031 10D0                                    l3015 10A0  
                                  l1175 31E8                                    l1263 33C0  
                                  l3111 2D30                                    l3103 2D18  
                                  l3033 10E4                                    l3017 10B4  
                                  l2401 2232                                    l3113 2D3A  
                                  l3105 2D22                                    l3121 333E  
                                  l3035 10FC                                    l2411 228C  
                                  l2403 2250                                    l3115 2D3C  
                                  l3107 2D24                                    l3131 3358  
                                  l3123 3348                                    l3141 32BA  
                                  l2501 2346                                    l3061 1214  
                                  l2413 22BA                                    l2405 2258  
                                  l2421 22F4                                    l3117 2D46  
                                  l3109 2D2E                                    l3133 335A  
                                  l3125 334A                                    l3143 32BC  
                                  l3135 32A4                                    l3119 331C  
                                  l2511 2410                                    l2503 2362  
                                  l3071 1294                                    l3063 122C  
                                  l3055 11D0                                    l3047 1114  
                                  l2423 2304                                    l2415 22DA  
                                  l2407 226C                                    l2431 24B6  
                                  l3127 334C                                    l3145 32C6  
                                  l3137 32A8                                    l2513 242C  
                                  l2505 23B6                                    l3065 1230  
                                  l3057 11F4                                    l3049 11C8  
                                  l2425 2324                                    l2417 22DC  
                                  l2409 227A                                    l2441 2516  
                                  l2433 24C4                                    l2361 29D0  
                                  l2353 2984                                    l2521 1B32  
                                  l3081 31EA                                    l3129 3356  
                                  l3147 32C8                                    l3139 32B0  
                                  l2515 2470                                    l2507 23CA  
                                  l2611 2D74                                    l2603 2D4A  
                                  l3067 1258                                    l3059 1208  
                                  l3075 12A6                                    l2419 22EE  
                                  l2451 258C                                    l2443 2534  
                                  l2435 24E4                                    l2363 2A06  
                                  l2355 2996                                    l2371 3142  
                                  l2531 1BB2                                    l2523 1B52  
                                  l3083 31EE                                    l3091 2FE4  
                                  l3149 32CA                                    l2517 32CE  
                                  l2381 3312                                    l2509 23CE  
                                  l2613 2D90                                    l2605 2D4E  
                                  l2621 2AFC                                    l3069 128E  
                                  l2461 25F4                                    l2453 25AC  
                                  l2445 253C                                    l2437 24E8  
                                  l2429 24B2                                    l2357 29A8  
                                  l2373 3146                                    l2541 1C00  
                                  l2533 1BCE                                    l2525 1B66  
                                  l2701 2704                                    l3085 31F8  
                                  l3093 302A                                    l3501 1350  
                                  l2471 2EEC                                    l2519 32DE  
                                  l2615 2D9C                                    l2607 2D5A  
                                  l2631 2B3C                                    l2623 2B1C  
                                  l2375 31AA                                    l2391 21F0  
                                  l2455 25BE                                    l2447 2550  
                                  l2439 24F6                                    l2359 29B2  
                                  l2367 3124                                    l2551 1CA6  
                                  l2543 1C08                                    l2535 1BDE  
                                  l2527 1B76                                    l3431 2F86  
                                  l3087 3208                                    l3511 137E  
                                  l3503 1354                                    l2481 2F26  
                                  l2473 2EF4                                    l2465 2ECA  
                                  l2721 3084                                    l2617 2DAA  
                                  l2609 2D68                                    l2641 2B90  
                                  l2633 2B54                                    l2377 31C4  
                                  l2393 21F4                                    l2385 21BE  
                                  l2449 255E                                    l2457 25C4  
                                  l2369 3130                                    l2561 1D4E  
                                  l2553 1CAC                                    l2545 1C14  
                                  l2537 1BE4                                    l2529 1B96  
                                  l2705 2734                                    l3425 2F3E  
                                  l3441 2FB4                                    l2801 328C  
                                  l3089 3212                                    l3097 2CC2  
                                  l3601 160A                                    l3521 13A4  
                                  l3513 138A                                    l3505 1358  
                                  l2483 2F28                                    l2475 2F02  
                                  l2467 2ED2                                    l2723 30CA  
                                  l2715 3034                                    l2379 32F6  
                                  l2619 2DB6                                    l2635 2B60  
                                  l2651 2A76                                    l2643 2A4E  
                                  l2395 2202                                    l2387 21C2  
                                  l2459 25D4                                    l2491 2E6A  
                                  l2563 1D68                                    l2555 1CB2  
                                  l2547 1C1E                                    l2539 1BF4  
                                  l3427 2F4A                                    l3443 2FD0  
                                  l3435 2F92                                    l3451 2790  
                                  l2803 328E                                    l3099 2CCA  
                                  l3611 16B2                                    l3603 163A  
                                  l3531 13D0                                    l3523 13AC  
                                  l3515 1394                                    l3507 136C  
                                  l2485 2F2E                                    l2477 2F08  
                                  l2469 2EE4                                    l2573 33AC  
                                  l2581 33A2                                    l2717 307A  
                                  l2821 203C                                    l2901 28B0  
                                  l2637 2B6C                                    l2629 2B24  
                                  l2661 2AC6                                    l2653 2A8E  
                                  l2645 2A6E                                    l2741 2BD2  
                                  l2733 2BAA                                    l2397 2222  
                                  l2389 21D0                                    l2493 2E7E  
                                  l2565 1D78                                    l2549 1C24  
                                  l2557 1D16                                    l2709 2746  
                                  l3429 2F66                                    l3437 2FA4  
                                  l3461 285A                                    l3453 27D6  
                                  l2805 3290                                    l3621 16F2  
                                  l3613 16BA                                    l3605 1646  
                                  l3541 1448                                    l3533 13EC  
                                  l3525 13B4                                    l3517 139C  
                                  l3509 1372                                    l2479 2F1E  
                                  l2591 316E                                    l2575 33B0  
                                  l2583 33A6                                    l2727 30D4  
                                  l2831 2070                                    l2815 1FE0  
                                  l2911 2972                                    l2639 2B74  
                                  l2663 2AE2                                    l2655 2AA6  
                                  l2751 2C18                                    l2743 2BEA  
                                  l2735 2BCA                                    l2399 2226  
                                  l2495 2E92                                    l2487 2E50  
                                  l2567 1D7E                                    l2559 1D30  
                                  l3439 2FAC                                    l3463 2874  
                                  l3455 27E2                                    l3447 2774  
                                  l2807 3360                                    l3623 16FE  
                                  l3607 169E                                    l3615 16CE  
                                  l3551 146E                                    l3543 1458  
                                  l3535 1406                                    l3519 13A4  
                                  l3471 130A                                    l2593 3176  
                                  l2585 33B6                                    l2577 3398  
                                  l2729 311A                                    l2833 2074  
                                  l2817 201C                                    l2809 1FD8  
                                  l2913 2DD0                                    l2681 2C9C  
                                  l2673 2C5E                                    l2665 2C36  
                                  l2657 2AB2                                    l2761 18D6  
                                  l2753 1786                                    l2745 2BF6  
                                  l2497 2E96                                    l2489 2E5E  
                                  l2569 1D8E                                    l3465 2880  
                                  l3457 282E                                    l3449 2774  
                                  l3625 1734                                    l3617 16DA  
                                  l3609 16AE                                    l3561 1498  
                                  l3553 1474                                    l3537 1426  
                                  l3481 131E                                    l3473 130E  
                                  l2595 317E                                    l2587 33BA  
                                  l2579 339C                                    l2851 2110  
                                  l2843 20C4                                    l2835 2090  
                                  l2827 2044                                    l2819 2020  
                                  l2931 2E3C                                    l2923 2DE8  
                                  l2915 2DD4                                    l2907 28B4  
                                  l2683 2CA4                                    l2675 2C76  
                                  l2667 2C56                                    l2659 2ABE  
                                  l2771 1A62                                    l2763 194E  
                                  l2755 178A                                    l2747 2C02  
                                  l2499 2EB4                                    l2691 265A  
                                  l3467 28AA                                    l3459 284A  
                                  l3627 1740                                    l3619 16E6  
                                  l3571 14FC                                    l3563 14A6  
                                  l3555 1490                                    l3539 1446  
                                  l3491 1332                                    l3483 1322  
                                  l3475 1312                                    l2597 31A4  
                                  l2589 316A                                    l2861 2158  
                                  l2853 213C                                    l2845 20D8  
                                  l2837 20BC                                    l2829 2058  
                                  l2933 2E4C                                    l2925 2E16  
                                  l2917 2DE4                                    l2909 2970  
                                  l2677 2C82                                    l2765 196A  
                                  l2757 17DE                                    l2749 2C10  
                                  l2941 0E7C                                    l2781 3380  
                                  l2693 265E                                    l2685 2616  
                                  l3629 1758                                    l3581 1560  
                                  l3573 1518                                    l3565 14BE  
                                  l3549 1462                                    l3493 1336  
                                  l3485 1324                                    l3477 1316  
                                  ?_pad 0014                                    l2599 31A6  
                                  l2863 2170                                    l2847 20F0  
                                  l2927 2E36                                    l2679 2C8E  
                                  l2759 1832                                    l2775 1ADE  
                                  l3671 12BA                                    l2951 0EE8  
                                  l2943 0E94                                    l2783 3390  
                                  l2695 266E                                    l2687 263E  
                                  l3583 1566                                    l3591 15B2  
                                  l3575 1524                                    l3567 14C4  
                                  l3495 133A                                    l3487 1328  
                                  l3479 131A                                    l2865 2174  
                                  l2849 20F4                                    l2929 2E3A  
                                  l3673 1AF2                                    l2769 19E6  
                                  l2953 0EFC                                    l2945 0EA8  
                                  l2937 0E64                                    l2881 321E  
                                  l2697 268E                                    l2689 264C  
                                  l3593 15BE                                    l3585 157A  
                                  l3577 1538                                    l3569 14E0  
                                  l3497 1342                                    l3489 132C  
                                  l2867 2190                                    l2859 2144  
                                  l2971 0FA8                                    l2963 0F54  
                                  l2955 0F14                                    l2947 0EBC  
                                  l2939 0E68                                    l2883 3222  
                                  l2699 26AE                                    l2795 327A  
                                  l3595 15DC                                    l3587 159E  
                                  l3579 154C                                    l3499 134A  
                                  l2973 0FBC                                    l2965 0F68  
                                  l2957 0F28                                    l2949 0ED0  
                                  l2885 3230                                    l2797 3284  
                                  l3597 15DC                                    l3589 15A8  
                                  l2983 0FD4                                    l2967 0F80  
                                  l2959 0F3C                                    l2895 1DB4  
                                  l2887 3234                                    l2799 328A  
                                  l3599 15F6                                    l2985 0FE8  
                                  l2969 0F94                                    l2897 1FC4  
                                  l2889 1DB0                                    l2987 1000  
                                  l2899 1FC6                                    l2999 1030  
                                  STR_1 0E1B                                    STR_2 0E47  
                                  STR_3 0E32                                    STR_4 0E01  
                                  STR_5 0E57                                    u1000 24C4  
                                  u1001 24C0                                    u1010 24F6  
                                  u1011 24F2                                    u1020 2534  
                                  u1100 2EB4                                    u1021 2530  
                                  u1101 2EB0                                    u1110 2362  
                                  u1030 255E                                    u1111 235E  
                                  u1031 255A                                    u1120 242C  
                                  u1040 258C                                    u1200 1BF4  
                                  u1121 2428                                    u1041 2588  
                                  u1201 1BF0                                    u1130 32DE  
                                  u1050 25D4                                    u1210 1D30  
                                  u1131 32DA                                    u1051 25D0  
                                  u1211 1D2C                                    u1060 2EE4  
                                  u1140 32F4                                    u1300 2AE2  
                                  u1220 1D4E                            ?_LEDSon_init 0001  
                                  u1061 2EE0                                    u1141 32F0  
                                  u1301 2ADE                                    u1221 1D4A  
                                  u1070 2F02                                    u1310 2CC0  
                                  u1230 1D68                                    u1150 1B62  
                                  u1071 2EFE                                    u1311 2CBC  
                                  u2007 2B46                                    u1231 1D64  
                                  u1151 1B5C                                    u1080 2F1E  
                                  u1400 2110                                    u1240 1D78  
                                  u1160 1B64                                    u1320 263E  
                                  u1081 2F1A                                    u1401 210C  
                                  u2017 2B9A                                    u1241 1D74  
                                  u1321 263A                                    u1250 3192  
                                  u1410 2190                                    u1090 2E5E  
                                  u1170 1B76                                    u1330 268E  
                                  u1251 318A                                    u1411 218C  
                                  u2027 2D60                                    u1091 2E5A  
                                  u1171 1B72                                    u1331 268A  
                                  u1420 324C                                    u1180 1BB2  
                                  u1340 26AE                                    u2037 2DA2  
                                  u1421 3248                                    u1181 1BAE  
                                  u1341 26AA                                    u1270 2D8C  
                                  u1350 2C34                                    u1430 1FD6  
                                  u1190 1BDE                                    u2047 2C94  
                                  u1271 2D88                                    u1351 2C30  
                                  u1431 1FD2                                    u1191 1BDA  
                                  u1440 2982                                    u1280 2DCE  
                                  u1360 3390                            _BAUD4CONbits 000EE9  
                                  u2057 2062                                    u1441 297E  
                                  u1281 2DCA                                    u1361 338C  
                                  u1450 2E16                                    u1290 2B90  
                                  u2067 20E2                                    u1451 2E12  
                                  u1291 2B8C                                    u1268 3194  
                                  u1380 203C                                    u1460 2E4C  
                                  u2077 2162                                    u1381 2038  
                                  u1461 2E48                                    u1701 289A  
                                  u1390 2090                                    u1470 11F4  
                                  u1710 13CE                                    u1391 208C  
                                  u1471 11F0                                    u1711 13CA  
                                  u1480 1258                                    u1720 1458  
                                  u1481 1254                                    u1801 168E  
                                  u1721 1454                                    u1490 12A2  
                                  u1810 176A                                    u1730 1490  
                                  _T2PR 000FBC                                    u1491 129E  
                                  u1811 1762                                    u1731 148C  
                                  u1740 14E0                                    u1741 14DC  
                                  u1750 1560                                    u1751 155C  
                                  u1760 157A                                    u1761 1576  
                                  u1690 2F86                                    u1770 158C  
                                  u1907 101E                                    u1691 2F82  
                                  u1771 1584                                    u1828 176C  
                                  u1917 104E                                    u1837 14B0  
                                  u1790 15DC                                    u1927 107A  
                                  u1847 174A                                    u1791 15D8  
                                  u1937 10BE                                    u1857 31FE  
                                  u1947 10EE                                    u1867 0E86  
                                  u1788 158E                                    u1957 121E  
                                  u1877 0F06                                    u1967 2C08  
                                  u1887 0F72                                    u1977 1958  
                                  u1897 0FF2                                    u1987 2A98  
                                  u1997 2AEC              normalise_readings@red_read 001C  
                                  abs@a 0016                                    _dbuf 02C2  
                                  _main 130A                                    _dtoa 1B32  
                                  _prec 01F5                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2D4A                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
                       card_response@mL 00AB                         card_response@mR 00AD  
                __end_of_color_read_Red 3084             normalise_readings@blue_read 0020  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 2A4E  
                       __end_of___aodiv 2346                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 2616  
                                 ?_stop 0017                         __end_of___lwdiv 2F3E  
                                 i1l494 004C                            vfpfcnvrt@fmt 0044  
                                 _TMR0H 000FD4                                   _TMR0L 000FD3  
                          main@red_read 00F7                 __end_of_sendCharSerial4 3396  
            __end_of_I2C_2_Master_Start 33B6              __end_of_I2C_2_Master_Write 33A2  
                                 _flags 01F9                                   _fputc 2984  
                                 _fputs 3124                                   pad@fp 0014  
        determine_card@master_closeness 0004                 ??_make_master_closeness 0017  
                                 _width 01F3                                   _putch 33C0  
                                 main@i 01DE                                   dtoa@d 0021  
                                 dtoa@i 003F                                   dtoa@n 0037  
                                 dtoa@p 0033                                   dtoa@s 0041  
                                 dtoa@w 0035                     normalise_readings@i 0030  
          card_response@ReturnHomeArray 00AF                                   tablat 000FF5  
                                 plusw0 000FEB                                   plusw2 000FDB  
                                 ttemp5 005C                                   ttemp6 005F  
                                 ttemp7 0063                                   status 000FD8  
                                 wtemp8 005C                         __end_of_sprintf 2FE4  
        card_response@normalised_values 0100                        card_response@buf 00A0  
               __end_of_color_read_Blue 3124                   _I2C_2_Master_RepStart 33B6  
                       ?_color_read_Red 0008                         __initialization 324E  
                          __end_of_main 1784                            __end_of_dtoa 1DB0  
                          __end_of_stop 2DD0                                  ??_main 0056  
                                ??_dtoa 0029                                  ??_stop 001B  
                         __activetblptr 000003                           main@blue_read 00FB  
                  main@clear_read_check 00EB                            ?_setMotorPWM 0011  
                                ?_fputc 0004                                  ?_fputs 000D  
                                _CCPR1H 000FAA                                  _CCPR2H 000FA6  
                                _CCPR3H 000F25                                  _CCPR4H 000F21  
                        main@TimerCount 00F3            collect_avg_readings@red_read 0011  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i1l3381 0036                                  i1l3383 0048  
                                i1l3379 0026                                  _RG6PPS 000E88  
              __end_of_color_click_init 321E                                  _TMR0IE 00714D  
                                _TMR0IF 00719D                  make_master_closeness@i 002B  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                                _LowISR 0018                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0054                               ??___aodiv 0014  
                             ??___aomod 0014                                  ___wmul 32F6  
                    _normalise_readings 1DB0                               ??___lwdiv 000E  
                                clear_0 3254                                  clear_1 3260  
                                isa$std 000001                                  pad@buf 0016  
                                dtoa@fp 001F                     ?_normalise_readings 001A  
                                fputc@c 0004                                  fputs@c 0011  
                                fputs@i 0012                                  fputs@s 000D  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 1784  
                                putch@c 0001                        __end_of_vfprintf 2F92  
                                stop@mL 0017                                  stop@mR 0019  
                     ??_initDCmotorsPWM 0004                               ??_sprintf 0056  
                     card_response@card 00AA                              __accesstop 0060  
               __end_of__initialization 3270                __end_of_color_read_Clear 3034  
                       fullSpeedAhead@i 001C                __end_of_color_read_Green 30D4  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0026  
                         ___rparam_used 000001                        ?_color_read_Blue 0008  
                       _Interrupts_init 32A4            __end_of_collect_avg_readings 21BE  
                        __pcstackCOMRAM 0001                        _reverseFullSpeed 2BAA  
            collect_avg_readings@i_1581 001B              collect_avg_readings@i_1582 001D  
            collect_avg_readings@i_1583 001F                           __end_of_fputc 2A4E  
                         __end_of_fputs 3168                           __end_of_putch 33C2  
                        ?_home_response 001F                          main@clear_read 01DF  
                               ??_fputc 0008                                 ??_fputs 0011  
                               ??_putch 0004                              __pbssBANK0 00FD  
                            __pbssBANK1 01F3                              __pbssBANK2 0272  
                               ?_LowISR 0001                       _color_writetoaddr 335E  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0060  
                      motor_response@mR 0062                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 002A  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 00F9                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                 __end_of_Interrupts_init 32CE  
                color_writetoaddr@value 0006                        ??_color_read_Red 000A  
         __end_of_make_master_closeness 2984          determine_card@predicted_colour 000C  
             __end_of_color_writetoaddr 337E                      _I2C_2_Master_Start 33AC  
                            _initUSART4 333E                      _I2C_2_Master_Write 3396  
                               __Hparam 0000                                 __Lparam 0000  
                     color_read_Red@tmp 000D  make_master_closeness@normalised_values 0013  
               sendStringSerial4@string 0005                       reverseFullSpeed@i 001C  
                               ___aodiv 21BE                                 ___aomod 24B2  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 2ECA  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 324E  
                               __ramtop 0E00                                 __ptext0 130A  
                               __ptext1 333E                                 __ptext2 2CC2  
                               __ptext3 2FE4                                 __ptext4 31EA  
                               __ptext5 335E                                 __ptext6 327A  
                               __ptext7 2774                                 __ptext8 2F92  
                               __ptext9 2F3E                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 1FD8  
                               main@buf 0148                                 _sprintf 2F92  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 3270          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                     __end_of_vfpfcnvrt 2774                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004A  
                            ??_vfprintf 0054                         _initDCmotorsPWM 2CC2  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0016  
     normalise_readings@expected_values 0022                           _card_response 2774  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0015  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 0011                __end_of_reverseFullSpeed 2C36  
                            main@i_1233 00EF                              main@i_1235 00F1  
                      fullSpeedAhead@mL 0017                        fullSpeedAhead@mR 0019  
                   main@expected_values 0200                color_writetoaddr@address 0007  
               ??_I2C_2_Master_RepStart 0005                        ?_Interrupts_init 0001  
                           _CCP1CONbits 000FAB                       ?_color_read_Clear 0008  
                          _EUSART4RXbuf 02AE                            _EUSART4TXbuf 0272  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0008  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0004  
                            main@motorL 01E1                              main@motorR 01EA  
                    ??_color_read_Clear 000A                      ??_color_read_Green 000A  
                            _turnLeft45 2AFC                          __end_of_LowISR 005C  
                        _fullSpeedAhead 2C36                             vfpfcnvrt@ap 0046  
                           vfpfcnvrt@cp 0052                             vfpfcnvrt@fp 0042  
                        __end_of___wmul 331C                         determine_card@i 000D  
                        ?_card_response 00A0                     color_read_Clear@tmp 000D  
                   start_initialization 324E                             __end_of_abs 31EA  
                           __end_of_pad 2ECA                           _TxBufWriteCnt 0059  
                         ??_LEDSon_init 0004                     color_read_Green@tmp 000D  
                              ??_LowISR 0001                 __end_of_initDCmotorsPWM 2D4A  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 2CC2  
                             _TimerFlag 01F7                                ??___wmul 0008  
                        _determine_card 2DD0                             __pbssCOMRAM 0058  
                ??_collect_avg_readings 0017                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                           __pcstackBANK2 0200  
                      ___aodiv@dividend 0004                          _motor_response 0E62  
                   __end_of_LEDSon_init 333E                        ___lwdiv@dividend 000A  
                             _dtoa$2493 0031                             ?_turnLeft45 0017  
                       motor_response@i 002B                         motor_response@j 0028  
                       ?_fullSpeedAhead 0017                                ?___aodiv 0004  
                              ?___aomod 0004                        ___aodiv@quotient 0016  
                __end_of_determine_card 2E50                                ?___lwdiv 000A  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0056                    I2C_2_Master_Read@tmp 0007  
                           __smallconst 0E00                       _I2C_2_Master_Idle 32CE  
                     _I2C_2_Master_Init 327A                       _I2C_2_Master_Read 3168  
                     _I2C_2_Master_Stop 33A2                            _RxBufReadCnt 00FD  
          normalise_readings@difference 002E                     main@ReturnHomeArray 0236  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0013  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000E  
                __end_of_motor_response 130A                             turnLeft45@i 001D  
                              ?_sprintf 0066                       _sendStringSerial4 321E  
                   ??_I2C_2_Master_Idle 0004                     ??_I2C_2_Master_Init 0004  
                   ??_I2C_2_Master_Read 0005                          ___wmul@product 0008  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0005  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                      ?_sendStringSerial4 0005  
                              _PIE4bits 000E2D                   _make_master_closeness 28B0  
                              i1u168_20 0036                                i1u168_21 0032  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0004                make_master_closeness@buf 0011  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0007  
                              _SSP2STAT 000ED8                         ?_determine_card 0004  
                             _vfpfcnvrt 2616               __end_of_I2C_2_Master_Idle 32F6  
             __end_of_I2C_2_Master_Init 32A4               __end_of_I2C_2_Master_Read 31AA  
                     ___wmul@multiplier 0004               __end_of_I2C_2_Master_Stop 33AC  
                          setMotorPWM@m 0011             I2C_2_Master_Write@data_byte 0005  
          normalise_readings@green_read 001E                   __end_of_home_response 1B32  
                     ??_color_read_Blue 000A                            _TxBufReadCnt 0058  
                       ?_motor_response 0060                       ?_reverseFullSpeed 0017  
             __end_of_sendStringSerial4 324E                             _LEDSon_init 331C  
                    ??_reverseFullSpeed 001B           __end_of_I2C_2_Master_RepStart 33C0  
                    color_read_Blue@tmp 000D                     __end_of_setMotorPWM 24B2  
                          ??_initUSART4 0004                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0015  
                    reverseFullSpeed@mL 0017                      reverseFullSpeed@mR 0019  
                     home_response@card 0025                              ?_vfpfcnvrt 0042  
                       ___aodiv@divisor 000C                         ___aodiv@counter 0014  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0068                              _T0CON0bits 000FD5  
                            _T0CON1bits 000FD6                         ___lwdiv@divisor 000C  
                    __end_of_initUSART4 335E                         ___lwdiv@counter 0010  
                              __ptext10 2616                                __ptext11 1B32  
                              __ptext20 1DB0                                __ptext12 2E50  
                              __ptext21 31AA                                __ptext13 3124  
                              __ptext30 32F6                                __ptext22 0E62  
                              __ptext14 2984                                __ptext31 28B0  
                              __ptext23 2BAA                                __ptext15 33C0  
                              __ptext40 33B6                                __ptext32 2DD0  
                              __ptext24 1784                                __ptext16 24B2  
                              __ptext41 3168                                __ptext33 1FD8  
                              __ptext25 2A4E                                __ptext17 21BE  
                              __ptext42 32CE                                __ptext34 3034  
                              __ptext26 2AFC                                __ptext18 321E  
                              __ptext43 2ECA                                __ptext35 3084  
                              __ptext27 2D4A                                __ptext19 337E  
                              __ptext44 331C                                __ptext36 30D4  
                              __ptext28 2C36                                __ptext45 32A4  
                              __ptext37 3396                                __ptext29 2346  
                              __ptext38 33A2                                __ptext39 33AC  
         motor_response@ReturnHomeArray 0064                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0011  
                              isa$xinst 000000                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 2F3E  
                         ??_turnRight45 001B                                main@card 00EE  
                      ___aomod@dividend 0004                   collect_avg_readings@i 0019  
                            _INTCONbits 000FF2                             _setMotorPWM 2346  
         collect_avg_readings@blue_read 0015                           turnRight45@mL 0017  
                         turnRight45@mR 0019                                intlevel1 0000  
                             sprintf@ap 0072              __end_of_normalise_readings 1FD8  
          card_response@expected_values 00A8                        ??_fullSpeedAhead 001B  
               card_response@green_read 00A4                            ??_turnLeft45 001B  
        determine_card@current_smallest 000A                         ___aomod@divisor 000C  
                           ??_vfpfcnvrt 0048                         ___aomod@counter 0014  
                card_response@blue_read 00A6                        _color_click_init 31EA  
                       home_response@mL 001F                         home_response@mR 0021  
         card_response@master_closeness 0136                                sprintf@f 0074  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                     __end_of_turnRight45 2AFC  
                    __end_of_turnLeft45 2BAA                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0015                         _sendCharSerial4 337E  
                 card_response@red_read 00A2                            ___aomod@sign 0015  
                      ??_determine_card 0006                           main@CardCount 00F5  
                          main@PWMcycle 00ED  
