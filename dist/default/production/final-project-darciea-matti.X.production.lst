

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 21:15:07 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Version 2.35
    63                           ; Generated 05/05/2021 GMT
    64                           ; 
    65                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F67K40 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97   000000                     _TX4REG	set	3812
    98   000000                     _RC4STAbits	set	3815
    99   000000                     _SP4BRGH	set	3814
   100   000000                     _LATHbits	set	3968
   101   000000                     _LATGbits	set	3967
   102   000000                     _TRISAbits	set	3969
   103   000000                     _TRISFbits	set	3974
   104   000000                     _TRISDbits	set	3972
   105   000000                     _TRISGbits	set	3975
   106   000000                     _SSP2CON2bits	set	3802
   107   000000                     _RX4PPS	set	3605
   108   000000                     _SSP2CLKPPS	set	3612
   109   000000                     _SSP2DATPPS	set	3613
   110   000000                     _RC7PPS	set	3689
   111   000000                     _RE2PPS	set	3700
   112   000000                     _TRISCbits	set	3971
   113   000000                     _TRISEbits	set	3973
   114   000000                     _TRISHbits	set	3976
   115   000000                     _PORTFbits	set	3982
   116   000000                     _T2PR	set	4028
   117   000000                     _T2CONbits	set	4029
   118   000000                     _CCPR2H	set	4006
   119   000000                     _CCPR1H	set	4010
   120   000000                     _RE4PPS	set	3702
   121   000000                     _RG6PPS	set	3720
   122   000000                     _RD5PPS	set	3695
   123   000000                     _ANSELDbits	set	3751
   124   000000                     _SSP2ADD	set	3798
   125   000000                     _SSP2CON1bits	set	3801
   126   000000                     _CCPR4H	set	3873
   127   000000                     _CCPR3H	set	3877
   128   000000                     _T2CLKCONbits	set	4031
   129   000000                     _T2HLTbits	set	4030
   130   000000                     _CCP1CONbits	set	4011
   131   000000                     _CCPTMRS0bits	set	4013
   132   000000                     _CCP2CONbits	set	4007
   133   000000                     _LATAbits	set	3961
   134   000000                     _LATDbits	set	3964
   135   000000                     _CCP3CONbits	set	3878
   136   000000                     _CCP4CONbits	set	3874
   137   000000                     _RC4REG	set	3811
   138   000000                     _SP4BRGL	set	3813
   139   000000                     _TX4STAbits	set	3816
   140   000000                     _BAUD4CONbits	set	3817
   141   000000                     _SSP2CON2	set	3802
   142   000000                     _SSP2STAT	set	3800
   143   000000                     _ANSELFbits	set	3764
   144   000000                     _SSP2BUF	set	3797
   145   000000                     _PIE4bits	set	3629
   146   000000                     _PIR4bits	set	3639
   147   000000                     _RC0PPS	set	3682
   148   000000                     _RD6PPS	set	3696
   149   000000                     _LATFbits	set	3966
   150                           
   151                           	psect	smallconst
   152   000E00                     __psmallconst:
   153                           	callstack 0
   154   000E00  00                 	db	0
   155   000E01                     STR_1:
   156   000E01  0A                 	db	10
   157   000E02  20                 	db	32
   158   000E03  45                 	db	69	;'E'
   159   000E04  58                 	db	88	;'X'
   160   000E05  50                 	db	80	;'P'
   161   000E06  45                 	db	69	;'E'
   162   000E07  43                 	db	67	;'C'
   163   000E08  54                 	db	84	;'T'
   164   000E09  45                 	db	69	;'E'
   165   000E0A  44                 	db	68	;'D'
   166   000E0B  3A                 	db	58	;':'
   167   000E0C  20                 	db	32
   168   000E0D  43                 	db	67	;'C'
   169   000E0E  6C                 	db	108	;'l'
   170   000E0F  65                 	db	101	;'e'
   171   000E10  61                 	db	97	;'a'
   172   000E11  72                 	db	114	;'r'
   173   000E12  20                 	db	32
   174   000E13  25                 	db	37
   175   000E14  64                 	db	100	;'d'
   176   000E15  2C                 	db	44
   177   000E16  52                 	db	82	;'R'
   178   000E17  20                 	db	32
   179   000E18  25                 	db	37
   180   000E19  64                 	db	100	;'d'
   181   000E1A  2C                 	db	44
   182   000E1B  20                 	db	32
   183   000E1C  47                 	db	71	;'G'
   184   000E1D  20                 	db	32
   185   000E1E  25                 	db	37
   186   000E1F  64                 	db	100	;'d'
   187   000E20  2C                 	db	44
   188   000E21  20                 	db	32
   189   000E22  42                 	db	66	;'B'
   190   000E23  20                 	db	32
   191   000E24  25                 	db	37
   192   000E25  64                 	db	100	;'d'
   193   000E26  20                 	db	32
   194   000E27  20                 	db	32
   195   000E28  43                 	db	67	;'C'
   196   000E29  41                 	db	65	;'A'
   197   000E2A  52                 	db	82	;'R'
   198   000E2B  44                 	db	68	;'D'
   199   000E2C  3A                 	db	58	;':'
   200   000E2D  20                 	db	32
   201   000E2E  25                 	db	37
   202   000E2F  64                 	db	100	;'d'
   203   000E30  20                 	db	32
   204   000E31  0A                 	db	10
   205   000E32  00                 	db	0
   206   000E33                     STR_3:
   207   000E33  0A                 	db	10
   208   000E34  20                 	db	32
   209   000E35  41                 	db	65	;'A'
   210   000E36  56                 	db	86	;'V'
   211   000E37  47                 	db	71	;'G'
   212   000E38  3A                 	db	58	;':'
   213   000E39  20                 	db	32
   214   000E3A  43                 	db	67	;'C'
   215   000E3B  6C                 	db	108	;'l'
   216   000E3C  65                 	db	101	;'e'
   217   000E3D  61                 	db	97	;'a'
   218   000E3E  72                 	db	114	;'r'
   219   000E3F  20                 	db	32
   220   000E40  25                 	db	37
   221   000E41  64                 	db	100	;'d'
   222   000E42  2C                 	db	44
   223   000E43  20                 	db	32
   224   000E44  52                 	db	82	;'R'
   225   000E45  20                 	db	32
   226   000E46  25                 	db	37
   227   000E47  64                 	db	100	;'d'
   228   000E48  2C                 	db	44
   229   000E49  20                 	db	32
   230   000E4A  47                 	db	71	;'G'
   231   000E4B  20                 	db	32
   232   000E4C  25                 	db	37
   233   000E4D  64                 	db	100	;'d'
   234   000E4E  2C                 	db	44
   235   000E4F  20                 	db	32
   236   000E50  42                 	db	66	;'B'
   237   000E51  20                 	db	32
   238   000E52  25                 	db	37
   239   000E53  64                 	db	100	;'d'
   240   000E54  20                 	db	32
   241   000E55  0A                 	db	10
   242   000E56  00                 	db	0
   243   000E57                     STR_2:
   244   000E57  0A                 	db	10
   245   000E58  20                 	db	32
   246   000E59  45                 	db	69	;'E'
   247   000E5A  78                 	db	120	;'x'
   248   000E5B  70                 	db	112	;'p'
   249   000E5C  65                 	db	101	;'e'
   250   000E5D  63                 	db	99	;'c'
   251   000E5E  74                 	db	116	;'t'
   252   000E5F  65                 	db	101	;'e'
   253   000E60  64                 	db	100	;'d'
   254   000E61  20                 	db	32
   255   000E62  63                 	db	99	;'c'
   256   000E63  6C                 	db	108	;'l'
   257   000E64  65                 	db	101	;'e'
   258   000E65  61                 	db	97	;'a'
   259   000E66  72                 	db	114	;'r'
   260   000E67  3A                 	db	58	;':'
   261   000E68  20                 	db	32
   262   000E69  25                 	db	37
   263   000E6A  64                 	db	100	;'d'
   264   000E6B  20                 	db	32
   265   000E6C  0A                 	db	10
   266   000E6D  00                 	db	0
   267   000E6E                     STR_4:
   268   000E6E  43                 	db	67	;'C'
   269   000E6F  41                 	db	65	;'A'
   270   000E70  52                 	db	82	;'R'
   271   000E71  44                 	db	68	;'D'
   272   000E72  20                 	db	32
   273   000E73  25                 	db	37
   274   000E74  64                 	db	100	;'d'
   275   000E75  20                 	db	32
   276   000E76  0A                 	db	10
   277   000E77  00                 	db	0
   278   000E78  00                 	db	0	; dummy byte at the end
   279   000000                     
   280                           ; #config settings
   281                           
   282                           	psect	cinit
   283   002DE2                     __pcinit:
   284                           	callstack 0
   285   002DE2                     start_initialization:
   286                           	callstack 0
   287   002DE2                     __initialization:
   288                           	callstack 0
   289                           
   290                           ; Clear objects allocated to BANK2 (112 bytes)
   291   002DE2  EE02  F000         	lfsr	0,__pbssBANK2
   292   002DE6  0E70               	movlw	112
   293   002DE8                     clear_0:
   294   002DE8  6AEE               	clrf	postinc0,c
   295   002DEA  06E8               	decf	wreg,f,c
   296   002DEC  E1FD               	bnz	clear_0
   297                           
   298                           ; Clear objects allocated to BANK0 (8 bytes)
   299   002DEE  EE00  F0E6         	lfsr	0,__pbssBANK0
   300   002DF2  0E08               	movlw	8
   301   002DF4                     clear_1:
   302   002DF4  6AEE               	clrf	postinc0,c
   303   002DF6  06E8               	decf	wreg,f,c
   304   002DF8  E1FD               	bnz	clear_1
   305                           
   306                           ; Clear objects allocated to COMRAM (1 bytes)
   307   002DFA  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   308   002DFC                     end_of_initialization:
   309                           	callstack 0
   310   002DFC                     __end_of__initialization:
   311                           	callstack 0
   312   002DFC  0100               	movlb	0
   313   002DFE  EFB6  F00C         	goto	_main	;jump to C main() function
   314                           
   315                           	psect	bssCOMRAM
   316   00005F                     __pbssCOMRAM:
   317                           	callstack 0
   318   00005F                     _TxBufWriteCnt:
   319                           	callstack 0
   320   00005F                     	ds	1
   321                           
   322                           	psect	bssBANK0
   323   0000E6                     __pbssBANK0:
   324                           	callstack 0
   325   0000E6                     _width:
   326                           	callstack 0
   327   0000E6                     	ds	2
   328   0000E8                     _prec:
   329                           	callstack 0
   330   0000E8                     	ds	2
   331   0000EA                     _flags:
   332                           	callstack 0
   333   0000EA                     	ds	1
   334   0000EB                     _TxBufReadCnt:
   335                           	callstack 0
   336   0000EB                     	ds	1
   337   0000EC                     _RxBufReadCnt:
   338                           	callstack 0
   339   0000EC                     	ds	1
   340   0000ED                     _RxBufWriteCnt:
   341                           	callstack 0
   342   0000ED                     	ds	1
   343                           
   344                           	psect	bssBANK2
   345   000200                     __pbssBANK2:
   346                           	callstack 0
   347   000200                     _EUSART4TXbuf:
   348                           	callstack 0
   349   000200                     	ds	60
   350   00023C                     _EUSART4RXbuf:
   351                           	callstack 0
   352   00023C                     	ds	20
   353   000250                     _dbuf:
   354                           	callstack 0
   355   000250                     	ds	32
   356                           
   357                           	psect	cstackBANK1
   358   000100                     __pcstackBANK1:
   359                           	callstack 0
   360   000100                     main@buf:
   361                           	callstack 0
   362                           
   363                           ; 150 bytes @ 0x0
   364   000100                     	ds	150
   365   000196                     main@expected_values:
   366                           	callstack 0
   367                           
   368                           ; 72 bytes @ 0x96
   369   000196                     	ds	72
   370   0001DE                     main@clear_read_check:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xDE
   374   0001DE                     	ds	2
   375   0001E0                     main@PWMcycle:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0xE0
   379   0001E0                     	ds	1
   380   0001E1                     main@red_read:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0xE1
   384   0001E1                     	ds	2
   385   0001E3                     main@green_read:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xE3
   389   0001E3                     	ds	2
   390   0001E5                     main@blue_read:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0xE5
   394   0001E5                     	ds	2
   395   0001E7                     main@i:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0xE7
   399   0001E7                     	ds	1
   400   0001E8                     main@clear_read:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0xE8
   404   0001E8                     	ds	2
   405   0001EA                     main@motorL:
   406                           	callstack 0
   407                           
   408                           ; 9 bytes @ 0xEA
   409   0001EA                     	ds	9
   410   0001F3                     main@motorR:
   411                           	callstack 0
   412                           
   413                           ; 9 bytes @ 0xF3
   414   0001F3                     	ds	9
   415                           
   416                           	psect	cstackBANK0
   417   000060                     __pcstackBANK0:
   418                           	callstack 0
   419   000060                     ?_sprintf:
   420                           	callstack 0
   421   000060                     sprintf@s:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0x0
   425   000060                     	ds	2
   426   000062                     sprintf@fmt:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x2
   430   000062                     	ds	12
   431   00006E                     sprintf@ap:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0xE
   435   00006E                     	ds	2
   436   000070                     sprintf@f:
   437                           	callstack 0
   438                           
   439                           ; 11 bytes @ 0x10
   440   000070                     	ds	11
   441   00007B                     clear_read_calibration@buf:
   442                           	callstack 0
   443   00007B                     card_response@buf:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x1B
   447   00007B                     	ds	2
   448   00007D                     clear_read_calibration@clear_read:
   449                           	callstack 0
   450   00007D                     card_response@clear_read:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x1D
   454   00007D                     	ds	2
   455   00007F                     clear_read_calibration@clear_read_check:
   456                           	callstack 0
   457   00007F                     card_response@red_read:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x1F
   461   00007F                     	ds	2
   462   000081                     clear_read_calibration@i:
   463                           	callstack 0
   464   000081                     card_response@green_read:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x21
   468   000081                     	ds	2
   469   000083                     clear_read_calibration@i_1550:
   470                           	callstack 0
   471   000083                     card_response@blue_read:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x23
   475   000083                     	ds	2
   476   000085                     card_response@expected_values:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x25
   480   000085                     	ds	2
   481   000087                     card_response@mL:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x27
   485   000087                     	ds	2
   486   000089                     card_response@mR:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x29
   490   000089                     	ds	2
   491   00008B                     card_response@normalised_values:
   492                           	callstack 0
   493                           
   494                           ; 72 bytes @ 0x2B
   495   00008B                     	ds	72
   496   0000D3                     card_response@master_closeness:
   497                           	callstack 0
   498                           
   499                           ; 18 bytes @ 0x73
   500   0000D3                     	ds	18
   501   0000E5                     card_response@card:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x85
   505   0000E5                     	ds	1
   506                           
   507                           	psect	cstackCOMRAM
   508   000001                     __pcstackCOMRAM:
   509                           	callstack 0
   510   000001                     ??_I2C_2_Master_Idle:
   511   000001                     ?___wmul:
   512                           	callstack 0
   513   000001                     ?___aodiv:
   514                           	callstack 0
   515   000001                     ?___aomod:
   516                           	callstack 0
   517   000001                     sendCharSerial4@charToSend:
   518                           	callstack 0
   519   000001                     make_master_closeness@buf:
   520                           	callstack 0
   521   000001                     determine_card@master_closeness:
   522                           	callstack 0
   523   000001                     ___wmul@multiplier:
   524                           	callstack 0
   525   000001                     fputc@c:
   526                           	callstack 0
   527   000001                     ___aodiv@dividend:
   528                           	callstack 0
   529   000001                     ___aomod@dividend:
   530                           	callstack 0
   531                           
   532                           ; 8 bytes @ 0x0
   533   000001                     	ds	1
   534   000002                     ??_I2C_2_Master_Read:
   535   000002                     I2C_2_Master_Write@data_byte:
   536                           	callstack 0
   537   000002                     sendStringSerial4@string:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x1
   541   000002                     	ds	1
   542   000003                     ??_determine_card:
   543   000003                     color_writetoaddr@value:
   544                           	callstack 0
   545   000003                     I2C_2_Master_Read@ack:
   546                           	callstack 0
   547   000003                     make_master_closeness@normalised_values:
   548                           	callstack 0
   549   000003                     ___wmul@multiplicand:
   550                           	callstack 0
   551   000003                     fputc@fp:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x2
   555   000003                     	ds	1
   556   000004                     color_writetoaddr@address:
   557                           	callstack 0
   558   000004                     I2C_2_Master_Read@tmp:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x3
   562   000004                     	ds	1
   563   000005                     ??_fputc:
   564   000005                     ??_color_click_init:
   565   000005                     ?_color_read_Red:
   566                           	callstack 0
   567   000005                     ?_color_read_Green:
   568                           	callstack 0
   569   000005                     ?_color_read_Blue:
   570                           	callstack 0
   571   000005                     ?_color_read_Clear:
   572                           	callstack 0
   573   000005                     make_master_closeness@master_closeness:
   574                           	callstack 0
   575   000005                     ___wmul@product:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0x4
   579   000005                     	ds	2
   580   000007                     ??_color_read_Red:
   581   000007                     ??_color_read_Green:
   582   000007                     ??_color_read_Blue:
   583   000007                     ??_color_read_Clear:
   584   000007                     ??_make_master_closeness:
   585   000007                     ?___lwdiv:
   586                           	callstack 0
   587   000007                     determine_card@current_smallest:
   588                           	callstack 0
   589   000007                     ___lwdiv@dividend:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x6
   593   000007                     	ds	2
   594   000009                     determine_card@predicted_colour:
   595                           	callstack 0
   596   000009                     ___lwdiv@divisor:
   597                           	callstack 0
   598   000009                     ___aodiv@divisor:
   599                           	callstack 0
   600   000009                     ___aomod@divisor:
   601                           	callstack 0
   602                           
   603                           ; 8 bytes @ 0x8
   604   000009                     	ds	1
   605   00000A                     determine_card@i:
   606                           	callstack 0
   607   00000A                     color_read_Red@tmp:
   608                           	callstack 0
   609   00000A                     color_read_Green@tmp:
   610                           	callstack 0
   611   00000A                     color_read_Blue@tmp:
   612                           	callstack 0
   613   00000A                     color_read_Clear@tmp:
   614                           	callstack 0
   615   00000A                     fputs@s:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x9
   619   00000A                     	ds	1
   620   00000B                     ___lwdiv@quotient:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0xA
   624   00000B                     	ds	1
   625   00000C                     collect_avg_readings@clear_read:
   626                           	callstack 0
   627   00000C                     fputs@fp:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0xB
   631   00000C                     	ds	1
   632   00000D                     ___lwdiv@counter:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0xC
   636   00000D                     	ds	1
   637   00000E                     fputs@c:
   638                           	callstack 0
   639   00000E                     setMotorPWM@m:
   640                           	callstack 0
   641   00000E                     collect_avg_readings@red_read:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0xD
   645   00000E                     	ds	1
   646   00000F                     fputs@i:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0xE
   650   00000F                     	ds	1
   651   000010                     ??_setMotorPWM:
   652   000010                     collect_avg_readings@green_read:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0xF
   656   000010                     	ds	1
   657   000011                     ___aodiv@counter:
   658                           	callstack 0
   659   000011                     ___aomod@counter:
   660                           	callstack 0
   661   000011                     pad@fp:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x10
   665   000011                     	ds	1
   666   000012                     setMotorPWM@posDuty:
   667                           	callstack 0
   668   000012                     ___aodiv@sign:
   669                           	callstack 0
   670   000012                     ___aomod@sign:
   671                           	callstack 0
   672   000012                     collect_avg_readings@blue_read:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x11
   676   000012                     	ds	1
   677   000013                     ?_abs:
   678                           	callstack 0
   679   000013                     setMotorPWM@negDuty:
   680                           	callstack 0
   681   000013                     abs@a:
   682                           	callstack 0
   683   000013                     pad@buf:
   684                           	callstack 0
   685   000013                     ___aodiv@quotient:
   686                           	callstack 0
   687                           
   688                           ; 8 bytes @ 0x12
   689   000013                     	ds	1
   690   000014                     ??_collect_avg_readings:
   691   000014                     stop@mL:
   692                           	callstack 0
   693   000014                     turnLeft45@mL:
   694                           	callstack 0
   695   000014                     turnRight45@mL:
   696                           	callstack 0
   697   000014                     reverseFullSpeed@mL:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x13
   701   000014                     	ds	1
   702   000015                     ??_abs:
   703   000015                     pad@p:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x14
   707   000015                     	ds	1
   708   000016                     stop@mR:
   709                           	callstack 0
   710   000016                     turnLeft45@mR:
   711                           	callstack 0
   712   000016                     turnRight45@mR:
   713                           	callstack 0
   714   000016                     reverseFullSpeed@mR:
   715                           	callstack 0
   716   000016                     collect_avg_readings@i:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x15
   720   000016                     	ds	1
   721   000017                     ??_pad:
   722   000017                     normalise_readings@buf:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x16
   726   000017                     	ds	1
   727   000018                     ??_stop:
   728   000018                     ??_turnLeft45:
   729   000018                     ??_turnRight45:
   730   000018                     ??_reverseFullSpeed:
   731   000018                     collect_avg_readings@i_1561:
   732                           	callstack 0
   733   000018                     pad@i:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x17
   737   000018                     	ds	1
   738   000019                     reverseFullSpeed@i:
   739                           	callstack 0
   740   000019                     normalise_readings@clear_read:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x18
   744   000019                     	ds	1
   745   00001A                     turnLeft45@i:
   746                           	callstack 0
   747   00001A                     turnRight45@i:
   748                           	callstack 0
   749   00001A                     collect_avg_readings@i_1562:
   750                           	callstack 0
   751   00001A                     pad@w:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x19
   755   00001A                     	ds	1
   756   00001B                     normalise_readings@red_read:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x1A
   760   00001B                     	ds	1
   761   00001C                     collect_avg_readings@i_1563:
   762                           	callstack 0
   763   00001C                     motor_response@mL:
   764                           	callstack 0
   765   00001C                     dtoa@fp:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x1B
   769   00001C                     	ds	1
   770   00001D                     normalise_readings@green_read:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x1C
   774   00001D                     	ds	1
   775   00001E                     collect_avg_readings@i_1564:
   776                           	callstack 0
   777   00001E                     motor_response@mR:
   778                           	callstack 0
   779   00001E                     dtoa@d:
   780                           	callstack 0
   781                           
   782                           ; 8 bytes @ 0x1D
   783   00001E                     	ds	1
   784   00001F                     normalise_readings@blue_read:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x1E
   788   00001F                     	ds	1
   789   000020                     ??_motor_response:
   790                           
   791                           ; 1 bytes @ 0x1F
   792   000020                     	ds	1
   793   000021                     normalise_readings@expected_values:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x20
   797   000021                     	ds	1
   798   000022                     motor_response@card:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0x21
   802   000022                     	ds	1
   803   000023                     normalise_readings@normalised_values:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x22
   807   000023                     	ds	2
   808   000025                     ??_normalise_readings:
   809   000025                     make_master_closeness@i:
   810                           	callstack 0
   811                           
   812                           ; 1 bytes @ 0x24
   813   000025                     	ds	1
   814   000026                     ??_dtoa:
   815                           
   816                           ; 1 bytes @ 0x25
   817   000026                     	ds	7
   818   00002D                     normalise_readings@difference:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x2C
   822   00002D                     	ds	1
   823   00002E                     _dtoa$2309:
   824                           	callstack 0
   825                           
   826                           ; 2 bytes @ 0x2D
   827   00002E                     	ds	1
   828   00002F                     normalise_readings@i:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x2E
   832   00002F                     	ds	1
   833   000030                     dtoa@p:
   834                           	callstack 0
   835                           
   836                           ; 2 bytes @ 0x2F
   837   000030                     	ds	2
   838   000032                     dtoa@w:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x31
   842   000032                     	ds	2
   843   000034                     dtoa@n:
   844                           	callstack 0
   845                           
   846                           ; 8 bytes @ 0x33
   847   000034                     	ds	8
   848   00003C                     dtoa@i:
   849                           	callstack 0
   850                           
   851                           ; 2 bytes @ 0x3B
   852   00003C                     	ds	2
   853   00003E                     dtoa@s:
   854                           	callstack 0
   855                           
   856                           ; 1 bytes @ 0x3D
   857   00003E                     	ds	1
   858   00003F                     vfpfcnvrt@fp:
   859                           	callstack 0
   860                           
   861                           ; 2 bytes @ 0x3E
   862   00003F                     	ds	2
   863   000041                     vfpfcnvrt@fmt:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0x40
   867   000041                     	ds	2
   868   000043                     vfpfcnvrt@ap:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x42
   872   000043                     	ds	2
   873   000045                     ??_vfpfcnvrt:
   874                           
   875                           ; 1 bytes @ 0x44
   876   000045                     	ds	2
   877   000047                     vfpfcnvrt@convarg:
   878                           	callstack 0
   879                           
   880                           ; 8 bytes @ 0x46
   881   000047                     	ds	8
   882   00004F                     vfpfcnvrt@cp:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x4E
   886   00004F                     	ds	2
   887   000051                     ?_vfprintf:
   888                           	callstack 0
   889   000051                     vfprintf@fp:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x50
   893   000051                     	ds	2
   894   000053                     vfprintf@fmt:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x52
   898   000053                     	ds	2
   899   000055                     vfprintf@ap:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x54
   903   000055                     	ds	2
   904   000057                     vfprintf@cfmt:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x56
   908   000057                     	ds	2
   909   000059                     ??_clear_read_calibration:
   910   000059                     
   911                           ; 1 bytes @ 0x58
   912   000059                     	ds	4
   913   00005D                     ??_main:
   914                           
   915                           ; 1 bytes @ 0x5C
   916   00005D                     	ds	2
   917                           
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 20 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  i               1  231[BANK1 ] enum E14575
   928 ;;  buf           150    0[BANK1 ] unsigned char [150]
   929 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   930 ;;  motorR          9  243[BANK1 ] struct DC_motor
   931 ;;  motorL          9  234[BANK1 ] struct DC_motor
   932 ;;  clear_read      2  232[BANK1 ] unsigned int 
   933 ;;  blue_read       2  229[BANK1 ] unsigned int 
   934 ;;  green_read      2  227[BANK1 ] unsigned int 
   935 ;;  red_read        2  225[BANK1 ] unsigned int 
   936 ;;  clear_read_c    2  222[BANK1 ] unsigned int 
   937 ;;  PWMcycle        1  224[BANK1 ] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   948 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
   949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   950 ;;      Totals:         2       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
   951 ;;Total ram usage:      254 bytes
   952 ;; Hardware stack levels required when called: 9
   953 ;; This function calls:
   954 ;;		_I2C_2_Master_Init
   955 ;;		_LEDSon_init
   956 ;;		_card_response
   957 ;;		_clear_read_calibration
   958 ;;		_collect_avg_readings
   959 ;;		_color_click_init
   960 ;;		_initDCmotorsPWM
   961 ;;		_initUSART4
   962 ;;		_sendStringSerial4
   963 ;;		_setMotorPWM
   964 ;;		_sprintf
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text0
   971   00196C                     __ptext0:
   972                           	callstack 0
   973   00196C                     _main:
   974                           	callstack 22
   975   00196C                     
   976                           ;main.c: 25:     LEDSon_init();
   977   00196C  ECE0  F016         	call	_LEDSon_init	;wreg free
   978   001970                     
   979                           ;main.c: 26:     I2C_2_Master_Init();
   980   001970  ECA4  F016         	call	_I2C_2_Master_Init	;wreg free
   981   001974                     
   982                           ;main.c: 27:     color_click_init();
   983   001974  EC72  F016         	call	_color_click_init	;wreg free
   984   001978                     
   985                           ;main.c: 28:     initDCmotorsPWM();
   986   001978  ECDD  F013         	call	_initDCmotorsPWM	;wreg free
   987   00197C                     
   988                           ;main.c: 29:     initUSART4();
   989   00197C  EC01  F017         	call	_initUSART4	;wreg free
   990   001980                     
   991                           ;main.c: 31:     TRISFbits.TRISF2=1;
   992   001980  8486               	bsf	134,2,c	;volatile
   993   001982                     
   994                           ;main.c: 32:     ANSELFbits.ANSELF2=0;
   995   001982  010E               	movlb	14	; () banked
   996   001984  95B4               	bcf	180,2,b	;volatile
   997   001986                     
   998                           ; BSR set to: 14
   999                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1000   001986  CFBC F1E0          	movff	4028,main@PWMcycle	;volatile
  1001   00198A                     
  1002                           ; BSR set to: 14
  1003                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1004   00198A  0E00               	movlw	0
  1005   00198C  0101               	movlb	1	; () banked
  1006   00198E  6FEA               	movwf	main@motorL& (0+255),b
  1007   001990                     
  1008                           ; BSR set to: 1
  1009                           ;main.c: 45:     motorL.direction=1;
  1010   001990  0E01               	movlw	1
  1011   001992  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1012   001994                     
  1013                           ; BSR set to: 1
  1014                           ;main.c: 46:     motorL.brakemode=1;
  1015   001994  0E01               	movlw	1
  1016   001996  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1017   001998                     
  1018                           ; BSR set to: 1
  1019                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1020   001998  0EAA               	movlw	170
  1021   00199A  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1022   00199C  0E0F               	movlw	15
  1023   00199E  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1024   0019A0                     
  1025                           ; BSR set to: 1
  1026                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1027   0019A0  0EA6               	movlw	166
  1028   0019A2  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1029   0019A4  0E0F               	movlw	15
  1030   0019A6  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1031   0019A8                     
  1032                           ; BSR set to: 1
  1033                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1034   0019A8  C1E0  F1ED         	movff	main@PWMcycle,main@motorL+3
  1035   0019AC  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1036   0019AE                     
  1037                           ; BSR set to: 1
  1038                           ;main.c: 51:     motorR.power=0;
  1039   0019AE  0E00               	movlw	0
  1040   0019B0  6FF3               	movwf	main@motorR& (0+255),b
  1041   0019B2                     
  1042                           ; BSR set to: 1
  1043                           ;main.c: 52:     motorR.direction=1;
  1044   0019B2  0E01               	movlw	1
  1045   0019B4  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1046   0019B6                     
  1047                           ; BSR set to: 1
  1048                           ;main.c: 53:     motorR.brakemode=1;
  1049   0019B6  0E01               	movlw	1
  1050   0019B8  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1051   0019BA                     
  1052                           ; BSR set to: 1
  1053                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1054   0019BA  0E25               	movlw	37
  1055   0019BC  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1056   0019BE  0E0F               	movlw	15
  1057   0019C0  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1058   0019C2                     
  1059                           ; BSR set to: 1
  1060                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1061   0019C2  0E21               	movlw	33
  1062   0019C4  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1063   0019C6  0E0F               	movlw	15
  1064   0019C8  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1065   0019CA                     
  1066                           ; BSR set to: 1
  1067                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1068   0019CA  C1E0  F1F6         	movff	main@PWMcycle,main@motorR+3
  1069   0019CE  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1070   0019D0                     
  1071                           ; BSR set to: 1
  1072                           ;main.c: 58:     setMotorPWM(&motorL);
  1073   0019D0  0EEA               	movlw	low main@motorL
  1074   0019D2  6E0E               	movwf	setMotorPWM@m^0,c
  1075   0019D4  0E01               	movlw	high main@motorL
  1076   0019D6  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1077   0019D8  ECB1  F00E         	call	_setMotorPWM	;wreg free
  1078   0019DC                     
  1079                           ;main.c: 59:     setMotorPWM(&motorR);
  1080   0019DC  0EF3               	movlw	low main@motorR
  1081   0019DE  6E0E               	movwf	setMotorPWM@m^0,c
  1082   0019E0  0E01               	movlw	high main@motorR
  1083   0019E2  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1084   0019E4  ECB1  F00E         	call	_setMotorPWM	;wreg free
  1085   0019E8                     
  1086                           ;main.c: 64:     char buf[150];;main.c: 66:     unsigned int red_read = 0;
  1087   0019E8  0E00               	movlw	0
  1088   0019EA  0101               	movlb	1	; () banked
  1089   0019EC  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1090   0019EE  0E00               	movlw	0
  1091   0019F0  6FE1               	movwf	main@red_read& (0+255),b
  1092   0019F2                     
  1093                           ; BSR set to: 1
  1094                           ;main.c: 67:     unsigned int green_read = 0;
  1095   0019F2  0E00               	movlw	0
  1096   0019F4  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1097   0019F6  0E00               	movlw	0
  1098   0019F8  6FE3               	movwf	main@green_read& (0+255),b
  1099   0019FA                     
  1100                           ; BSR set to: 1
  1101                           ;main.c: 68:     unsigned int blue_read = 0;
  1102   0019FA  0E00               	movlw	0
  1103   0019FC  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1104   0019FE  0E00               	movlw	0
  1105   001A00  6FE5               	movwf	main@blue_read& (0+255),b
  1106   001A02                     
  1107                           ; BSR set to: 1
  1108                           ;main.c: 69:     unsigned int clear_read = 0;
  1109   001A02  0E00               	movlw	0
  1110   001A04  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1111   001A06  0E00               	movlw	0
  1112   001A08  6FE8               	movwf	main@clear_read& (0+255),b
  1113   001A0A                     
  1114                           ; BSR set to: 1
  1115                           ;main.c: 70:     unsigned int clear_read_check = 0;
  1116   001A0A  0E00               	movlw	0
  1117   001A0C  6FDF               	movwf	(main@clear_read_check+1)& (0+255),b
  1118   001A0E  0E00               	movlw	0
  1119   001A10  6FDE               	movwf	main@clear_read_check& (0+255),b
  1120   001A12                     
  1121                           ; BSR set to: 1
  1122                           ;main.c: 71:     unsigned int expected_values[4][9];;main.c: 82:     LATDbits.LATD4 = 0;
  1123   001A12  987C               	bcf	124,4,c	;volatile
  1124   001A14                     
  1125                           ; BSR set to: 1
  1126                           ;main.c: 83:     for(colour i = RED; i<= BLACK; i++){
  1127   001A14  0E01               	movlw	1
  1128   001A16  6FE7               	movwf	main@i& (0+255),b
  1129   001A18  EF0F  F00D         	goto	l235
  1130   001A1C                     l236:
  1131                           
  1132                           ;main.c: 85:             LATDbits.LATD4 = 1;
  1133   001A1C  887C               	bsf	124,4,c	;volatile
  1134   001A1E                     l235:
  1135                           
  1136                           ;main.c: 84:         while(PORTFbits.RF2){
  1137   001A1E  B48E               	btfsc	142,2,c	;volatile
  1138   001A20  EF14  F00D         	goto	u1431
  1139   001A24  EF16  F00D         	goto	u1430
  1140   001A28                     u1431:
  1141   001A28  EF0E  F00D         	goto	l236
  1142   001A2C                     u1430:
  1143   001A2C                     
  1144                           ;main.c: 87:         LATDbits.LATD4 = 0;
  1145   001A2C  987C               	bcf	124,4,c	;volatile
  1146   001A2E                     
  1147                           ;main.c: 88:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1148   001A2E  0E29               	movlw	41
  1149   001A30  6E5E               	movwf	(??_main+1)^0,c
  1150   001A32  0E96               	movlw	150
  1151   001A34  6E5D               	movwf	??_main^0,c
  1152   001A36  0E7F               	movlw	127
  1153   001A38                     u1527:
  1154   001A38  2EE8               	decfsz	wreg,f,c
  1155   001A3A  D7FE               	bra	u1527
  1156   001A3C  2E5D               	decfsz	??_main^0,f,c
  1157   001A3E  D7FC               	bra	u1527
  1158   001A40  2E5E               	decfsz	(??_main+1)^0,f,c
  1159   001A42  D7FA               	bra	u1527
  1160   001A44  F000               	nop	
  1161   001A46                     
  1162                           ;main.c: 89:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1163   001A46  0EE8               	movlw	low main@clear_read
  1164   001A48  6E0C               	movwf	collect_avg_readings@clear_read^0,c
  1165   001A4A  0E01               	movlw	high main@clear_read
  1166   001A4C  6E0D               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1167   001A4E  0EE1               	movlw	low main@red_read
  1168   001A50  6E0E               	movwf	collect_avg_readings@red_read^0,c
  1169   001A52  0E01               	movlw	high main@red_read
  1170   001A54  6E0F               	movwf	(collect_avg_readings@red_read+1)^0,c
  1171   001A56  0EE3               	movlw	low main@green_read
  1172   001A58  6E10               	movwf	collect_avg_readings@green_read^0,c
  1173   001A5A  0E01               	movlw	high main@green_read
  1174   001A5C  6E11               	movwf	(collect_avg_readings@green_read+1)^0,c
  1175   001A5E  0EE5               	movlw	low main@blue_read
  1176   001A60  6E12               	movwf	collect_avg_readings@blue_read^0,c
  1177   001A62  0E01               	movlw	high main@blue_read
  1178   001A64  6E13               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1179   001A66  EC79  F00B         	call	_collect_avg_readings	;wreg free
  1180   001A6A                     
  1181                           ;main.c: 90:         expected_values[CLEAR][i] = clear_read;
  1182   001A6A  0101               	movlb	1	; () banked
  1183   001A6C  51E7               	movf	main@i& (0+255),w,b
  1184   001A6E  0D02               	mullw	2
  1185   001A70  0E96               	movlw	low main@expected_values
  1186   001A72  24F3               	addwf	243,w,c
  1187   001A74  6ED9               	movwf	fsr2l,c
  1188   001A76  0E01               	movlw	high main@expected_values
  1189   001A78  20F4               	addwfc	prodh,w,c
  1190   001A7A  6EDA               	movwf	fsr2h,c
  1191   001A7C  C1E8  FFDE         	movff	main@clear_read,postinc2
  1192   001A80  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1193   001A84                     
  1194                           ; BSR set to: 1
  1195                           ;main.c: 91:         expected_values[RED][i] = red_read;
  1196   001A84  51E7               	movf	main@i& (0+255),w,b
  1197   001A86  0D02               	mullw	2
  1198   001A88  0E12               	movlw	18
  1199   001A8A  26F3               	addwf	243,f,c
  1200   001A8C  0E00               	movlw	0
  1201   001A8E  22F4               	addwfc	244,f,c
  1202   001A90  0E96               	movlw	low main@expected_values
  1203   001A92  24F3               	addwf	243,w,c
  1204   001A94  6ED9               	movwf	fsr2l,c
  1205   001A96  0E01               	movlw	high main@expected_values
  1206   001A98  20F4               	addwfc	prodh,w,c
  1207   001A9A  6EDA               	movwf	fsr2h,c
  1208   001A9C  C1E1  FFDE         	movff	main@red_read,postinc2
  1209   001AA0  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1210   001AA4                     
  1211                           ; BSR set to: 1
  1212                           ;main.c: 92:         expected_values[GREEN][i] = green_read;
  1213   001AA4  51E7               	movf	main@i& (0+255),w,b
  1214   001AA6  0D02               	mullw	2
  1215   001AA8  0E24               	movlw	36
  1216   001AAA  26F3               	addwf	243,f,c
  1217   001AAC  0E00               	movlw	0
  1218   001AAE  22F4               	addwfc	244,f,c
  1219   001AB0  0E96               	movlw	low main@expected_values
  1220   001AB2  24F3               	addwf	243,w,c
  1221   001AB4  6ED9               	movwf	fsr2l,c
  1222   001AB6  0E01               	movlw	high main@expected_values
  1223   001AB8  20F4               	addwfc	prodh,w,c
  1224   001ABA  6EDA               	movwf	fsr2h,c
  1225   001ABC  C1E3  FFDE         	movff	main@green_read,postinc2
  1226   001AC0  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1227   001AC4                     
  1228                           ; BSR set to: 1
  1229                           ;main.c: 93:         expected_values[BLUE][i] = blue_read;
  1230   001AC4  51E7               	movf	main@i& (0+255),w,b
  1231   001AC6  0D02               	mullw	2
  1232   001AC8  0E36               	movlw	54
  1233   001ACA  26F3               	addwf	243,f,c
  1234   001ACC  0E00               	movlw	0
  1235   001ACE  22F4               	addwfc	244,f,c
  1236   001AD0  0E96               	movlw	low main@expected_values
  1237   001AD2  24F3               	addwf	243,w,c
  1238   001AD4  6ED9               	movwf	fsr2l,c
  1239   001AD6  0E01               	movlw	high main@expected_values
  1240   001AD8  20F4               	addwfc	prodh,w,c
  1241   001ADA  6EDA               	movwf	fsr2h,c
  1242   001ADC  C1E5  FFDE         	movff	main@blue_read,postinc2
  1243   001AE0  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1244   001AE4                     
  1245                           ; BSR set to: 1
  1246                           ;main.c: 94:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n",
      +                           clear_read, red_read, green_read, blue_read, i);
  1247   001AE4  0E00               	movlw	low main@buf
  1248   001AE6  0100               	movlb	0	; () banked
  1249   001AE8  6F60               	movwf	sprintf@s& (0+255),b
  1250   001AEA  0E01               	movlw	high main@buf
  1251   001AEC  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1252   001AEE  0E01               	movlw	low STR_1
  1253   001AF0  6F62               	movwf	sprintf@fmt& (0+255),b
  1254   001AF2  0E0E               	movlw	high STR_1
  1255   001AF4  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1256   001AF6  C1E8  F064         	movff	main@clear_read,?_sprintf+4
  1257   001AFA  C1E9  F065         	movff	main@clear_read+1,?_sprintf+5
  1258   001AFE  C1E1  F066         	movff	main@red_read,?_sprintf+6
  1259   001B02  C1E2  F067         	movff	main@red_read+1,?_sprintf+7
  1260   001B06  C1E3  F068         	movff	main@green_read,?_sprintf+8
  1261   001B0A  C1E4  F069         	movff	main@green_read+1,?_sprintf+9
  1262   001B0E  C1E5  F06A         	movff	main@blue_read,?_sprintf+10
  1263   001B12  C1E6  F06B         	movff	main@blue_read+1,?_sprintf+11
  1264   001B16  C1E7  F06C         	movff	main@i,?_sprintf+12
  1265   001B1A  6B6D               	clrf	(?_sprintf+13)& (0+255),b
  1266   001B1C  EC1D  F015         	call	_sprintf	;wreg free
  1267   001B20                     
  1268                           ;main.c: 95:         sendStringSerial4(buf);
  1269   001B20  0E00               	movlw	low main@buf
  1270   001B22  6E02               	movwf	sendStringSerial4@string^0,c
  1271   001B24  0E01               	movlw	high main@buf
  1272   001B26  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1273   001B28  EC8C  F016         	call	_sendStringSerial4	;wreg free
  1274   001B2C                     
  1275                           ;main.c: 96:     }
  1276   001B2C  0101               	movlb	1	; () banked
  1277   001B2E  2BE7               	incf	main@i& (0+255),f,b
  1278   001B30                     
  1279                           ; BSR set to: 1
  1280   001B30  0E09               	movlw	9
  1281   001B32  65E7               	cpfsgt	main@i& (0+255),b
  1282   001B34  EF9E  F00D         	goto	u1441
  1283   001B38  EFA0  F00D         	goto	u1440
  1284   001B3C                     u1441:
  1285   001B3C  EF0F  F00D         	goto	l235
  1286   001B40                     u1440:
  1287   001B40                     
  1288                           ; BSR set to: 1
  1289                           ;main.c: 97:     LATDbits.LATD4 = 1;
  1290   001B40  887C               	bsf	124,4,c	;volatile
  1291                           
  1292                           ;main.c: 98:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1293   001B42  EFA4  F00D         	goto	l238
  1294   001B46                     l239:
  1295   001B46  987C               	bcf	124,4,c	;volatile
  1296   001B48                     l238:
  1297   001B48  B48E               	btfsc	142,2,c	;volatile
  1298   001B4A  EFA9  F00D         	goto	u1451
  1299   001B4E  EFAB  F00D         	goto	u1450
  1300   001B52                     u1451:
  1301   001B52  EFA3  F00D         	goto	l239
  1302   001B56                     u1450:
  1303   001B56                     
  1304                           ;main.c: 99:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1305   001B56  0E00               	movlw	low main@buf
  1306   001B58  0100               	movlb	0	; () banked
  1307   001B5A  6F7B               	movwf	clear_read_calibration@buf& (0+255),b
  1308   001B5C  0E01               	movlw	high main@buf
  1309   001B5E  6F7C               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1310   001B60  0EE8               	movlw	low main@clear_read
  1311   001B62  6F7D               	movwf	clear_read_calibration@clear_read& (0+255),b
  1312   001B64  0E01               	movlw	high main@clear_read
  1313   001B66  6F7E               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1314   001B68  0EDE               	movlw	low main@clear_read_check
  1315   001B6A  6F7F               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1316   001B6C  0E01               	movlw	high main@clear_read_check
  1317   001B6E  6F80               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1318   001B70  EC6F  F011         	call	_clear_read_calibration	;wreg free
  1319   001B74  EFBE  F00D         	goto	l242
  1320   001B78                     l243:
  1321                           
  1322                           ;main.c: 124:             LATDbits.LATD4 = 1;
  1323   001B78  887C               	bsf	124,4,c	;volatile
  1324                           
  1325                           ;main.c: 125:             LATFbits.LATF0 = 1;
  1326   001B7A  807E               	bsf	126,0,c	;volatile
  1327   001B7C                     l242:
  1328                           
  1329                           ;main.c: 123:         while(PORTFbits.RF2){
  1330   001B7C  B48E               	btfsc	142,2,c	;volatile
  1331   001B7E  EFC3  F00D         	goto	u1461
  1332   001B82  EFC5  F00D         	goto	u1460
  1333   001B86                     u1461:
  1334   001B86  EFBC  F00D         	goto	l243
  1335   001B8A                     u1460:
  1336   001B8A                     
  1337                           ;main.c: 127:         LATFbits.LATF0 = 0;
  1338   001B8A  907E               	bcf	126,0,c	;volatile
  1339   001B8C                     
  1340                           ;main.c: 129:         card_response(buf, &clear_read, &red_read, &green_read, &blue_read
      +                          , expected_values, &motorL, &motorR);
  1341   001B8C  0E00               	movlw	low main@buf
  1342   001B8E  0100               	movlb	0	; () banked
  1343   001B90  6F7B               	movwf	card_response@buf& (0+255),b
  1344   001B92  0E01               	movlw	high main@buf
  1345   001B94  6F7C               	movwf	(card_response@buf+1)& (0+255),b
  1346   001B96  0EE8               	movlw	low main@clear_read
  1347   001B98  6F7D               	movwf	card_response@clear_read& (0+255),b
  1348   001B9A  0E01               	movlw	high main@clear_read
  1349   001B9C  6F7E               	movwf	(card_response@clear_read+1)& (0+255),b
  1350   001B9E  0EE1               	movlw	low main@red_read
  1351   001BA0  6F7F               	movwf	card_response@red_read& (0+255),b
  1352   001BA2  0E01               	movlw	high main@red_read
  1353   001BA4  6F80               	movwf	(card_response@red_read+1)& (0+255),b
  1354   001BA6  0EE3               	movlw	low main@green_read
  1355   001BA8  6F81               	movwf	card_response@green_read& (0+255),b
  1356   001BAA  0E01               	movlw	high main@green_read
  1357   001BAC  6F82               	movwf	(card_response@green_read+1)& (0+255),b
  1358   001BAE  0EE5               	movlw	low main@blue_read
  1359   001BB0  6F83               	movwf	card_response@blue_read& (0+255),b
  1360   001BB2  0E01               	movlw	high main@blue_read
  1361   001BB4  6F84               	movwf	(card_response@blue_read+1)& (0+255),b
  1362   001BB6  0E96               	movlw	low main@expected_values
  1363   001BB8  6F85               	movwf	card_response@expected_values& (0+255),b
  1364   001BBA  0E01               	movlw	high main@expected_values
  1365   001BBC  6F86               	movwf	(card_response@expected_values+1)& (0+255),b
  1366   001BBE  0EEA               	movlw	low main@motorL
  1367   001BC0  6F87               	movwf	card_response@mL& (0+255),b
  1368   001BC2  0E01               	movlw	high main@motorL
  1369   001BC4  6F88               	movwf	(card_response@mL+1)& (0+255),b
  1370   001BC6  0EF3               	movlw	low main@motorR
  1371   001BC8  6F89               	movwf	card_response@mR& (0+255),b
  1372   001BCA  0E01               	movlw	high main@motorR
  1373   001BCC  6F8A               	movwf	(card_response@mR+1)& (0+255),b
  1374   001BCE  ECC8  F010         	call	_card_response	;wreg free
  1375   001BD2  EFBE  F00D         	goto	l242
  1376   001BD6  EF00  F000         	goto	start
  1377   001BDA                     __end_of_main:
  1378                           	callstack 0
  1379                           
  1380 ;; *************** function _initUSART4 *****************
  1381 ;; Defined at:
  1382 ;;		line 6 in file "serial.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1400 ;;Total ram usage:        0 bytes
  1401 ;; Hardware stack levels used: 1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text1
  1410   002E02                     __ptext1:
  1411                           	callstack 0
  1412   002E02                     _initUSART4:
  1413                           	callstack 30
  1414   002E02                     
  1415                           ;serial.c: 10:     RC0PPS = 0x12;
  1416   002E02  0E12               	movlw	18
  1417   002E04  010E               	movlb	14	; () banked
  1418   002E06  6F62               	movwf	98,b	;volatile
  1419                           
  1420                           ;serial.c: 11:     RX4PPS = 0x11;
  1421   002E08  0E11               	movlw	17
  1422   002E0A  6F15               	movwf	21,b	;volatile
  1423   002E0C                     
  1424                           ; BSR set to: 14
  1425                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1426   002E0C  8283               	bsf	131,1,c	;volatile
  1427   002E0E                     
  1428                           ; BSR set to: 14
  1429                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1430   002E0E  97E9               	bcf	233,3,b	;volatile
  1431   002E10                     
  1432                           ; BSR set to: 14
  1433                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1434   002E10  95E8               	bcf	232,2,b	;volatile
  1435                           
  1436                           ;serial.c: 17:     SP4BRGL = 51;
  1437   002E12  0E33               	movlw	51
  1438   002E14  6FE5               	movwf	229,b	;volatile
  1439                           
  1440                           ;serial.c: 18:     SP4BRGH = 0;
  1441   002E16  0E00               	movlw	0
  1442   002E18  6FE6               	movwf	230,b	;volatile
  1443   002E1A                     
  1444                           ; BSR set to: 14
  1445                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1446   002E1A  89E7               	bsf	231,4,b	;volatile
  1447   002E1C                     
  1448                           ; BSR set to: 14
  1449                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1450   002E1C  8BE8               	bsf	232,5,b	;volatile
  1451   002E1E                     
  1452                           ; BSR set to: 14
  1453                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1454   002E1E  8FE7               	bsf	231,7,b	;volatile
  1455   002E20                     
  1456                           ; BSR set to: 14
  1457   002E20  0012               	return		;funcret
  1458   002E22                     __end_of_initUSART4:
  1459                           	callstack 0
  1460                           
  1461 ;; *************** function _initDCmotorsPWM *****************
  1462 ;; Defined at:
  1463 ;;		line 6 in file "dc_motor.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, status,2
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;Total ram usage:        0 bytes
  1482 ;; Hardware stack levels used: 1
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text2
  1491   0027BA                     __ptext2:
  1492                           	callstack 0
  1493   0027BA                     _initDCmotorsPWM:
  1494                           	callstack 30
  1495   0027BA                     
  1496                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1497   0027BA  9485               	bcf	133,2,c	;volatile
  1498                           
  1499                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1500   0027BC  9885               	bcf	133,4,c	;volatile
  1501                           
  1502                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1503   0027BE  9E83               	bcf	131,7,c	;volatile
  1504                           
  1505                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1506   0027C0  9C87               	bcf	135,6,c	;volatile
  1507   0027C2                     
  1508                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1509   0027C2  0E05               	movlw	5
  1510   0027C4  010E               	movlb	14	; () banked
  1511   0027C6  6F74               	movwf	116,b	;volatile
  1512                           
  1513                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1514   0027C8  0E06               	movlw	6
  1515   0027CA  6F76               	movwf	118,b	;volatile
  1516                           
  1517                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1518   0027CC  0E07               	movlw	7
  1519   0027CE  6F69               	movwf	105,b	;volatile
  1520                           
  1521                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1522   0027D0  0E08               	movlw	8
  1523   0027D2  6F88               	movwf	136,b	;volatile
  1524                           
  1525                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1526   0027D4  50BD               	movf	189,w,c	;volatile
  1527   0027D6  0B8F               	andlw	-113
  1528   0027D8  0940               	iorlw	64
  1529   0027DA  6EBD               	movwf	189,c	;volatile
  1530                           
  1531                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1532   0027DC  0EE0               	movlw	-32
  1533   0027DE  16BE               	andwf	190,f,c	;volatile
  1534                           
  1535                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1536   0027E0  50BF               	movf	191,w,c	;volatile
  1537   0027E2  0BF0               	andlw	-16
  1538   0027E4  0901               	iorlw	1
  1539   0027E6  6EBF               	movwf	191,c	;volatile
  1540                           
  1541                           ;dc_motor.c: 26:     T2PR=99;
  1542   0027E8  0E63               	movlw	99
  1543   0027EA  6EBC               	movwf	188,c	;volatile
  1544   0027EC                     
  1545                           ; BSR set to: 14
  1546                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1547   0027EC  8EBD               	bsf	189,7,c	;volatile
  1548                           
  1549                           ;dc_motor.c: 31:     CCPR1H=0;
  1550   0027EE  0E00               	movlw	0
  1551   0027F0  6EAA               	movwf	170,c	;volatile
  1552                           
  1553                           ;dc_motor.c: 32:     CCPR2H=0;
  1554   0027F2  0E00               	movlw	0
  1555   0027F4  6EA6               	movwf	166,c	;volatile
  1556                           
  1557                           ;dc_motor.c: 33:     CCPR3H=0;
  1558   0027F6  0E00               	movlw	0
  1559   0027F8  010F               	movlb	15	; () banked
  1560   0027FA  6F25               	movwf	37,b	;volatile
  1561                           
  1562                           ;dc_motor.c: 34:     CCPR4H=0;
  1563   0027FC  0E00               	movlw	0
  1564   0027FE  6F21               	movwf	33,b	;volatile
  1565                           
  1566                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1567   002800  0EFC               	movlw	-4
  1568   002802  16AD               	andwf	173,f,c	;volatile
  1569                           
  1570                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1571   002804  0EF3               	movlw	-13
  1572   002806  16AD               	andwf	173,f,c	;volatile
  1573                           
  1574                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1575   002808  0ECF               	movlw	-49
  1576   00280A  16AD               	andwf	173,f,c	;volatile
  1577                           
  1578                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1579   00280C  0E3F               	movlw	-193
  1580   00280E  16AD               	andwf	173,f,c	;volatile
  1581   002810                     
  1582                           ; BSR set to: 15
  1583                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1584   002810  88AB               	bsf	171,4,c	;volatile
  1585                           
  1586                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1587   002812  50AB               	movf	171,w,c	;volatile
  1588   002814  0BF0               	andlw	-16
  1589   002816  090C               	iorlw	12
  1590   002818  6EAB               	movwf	171,c	;volatile
  1591   00281A                     
  1592                           ; BSR set to: 15
  1593                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1594   00281A  8EAB               	bsf	171,7,c	;volatile
  1595   00281C                     
  1596                           ; BSR set to: 15
  1597                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1598   00281C  88A7               	bsf	167,4,c	;volatile
  1599                           
  1600                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1601   00281E  50A7               	movf	167,w,c	;volatile
  1602   002820  0BF0               	andlw	-16
  1603   002822  090C               	iorlw	12
  1604   002824  6EA7               	movwf	167,c	;volatile
  1605   002826                     
  1606                           ; BSR set to: 15
  1607                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1608   002826  8EA7               	bsf	167,7,c	;volatile
  1609   002828                     
  1610                           ; BSR set to: 15
  1611                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1612   002828  8926               	bsf	38,4,b	;volatile
  1613                           
  1614                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1615   00282A  5126               	movf	38,w,b	;volatile
  1616   00282C  0BF0               	andlw	-16
  1617   00282E  090C               	iorlw	12
  1618   002830  6F26               	movwf	38,b	;volatile
  1619   002832                     
  1620                           ; BSR set to: 15
  1621                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1622   002832  8F26               	bsf	38,7,b	;volatile
  1623   002834                     
  1624                           ; BSR set to: 15
  1625                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1626   002834  8922               	bsf	34,4,b	;volatile
  1627                           
  1628                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1629   002836  5122               	movf	34,w,b	;volatile
  1630   002838  0BF0               	andlw	-16
  1631   00283A  090C               	iorlw	12
  1632   00283C  6F22               	movwf	34,b	;volatile
  1633   00283E                     
  1634                           ; BSR set to: 15
  1635                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1636   00283E  8F22               	bsf	34,7,b	;volatile
  1637   002840                     
  1638                           ; BSR set to: 15
  1639   002840  0012               	return		;funcret
  1640   002842                     __end_of_initDCmotorsPWM:
  1641                           	callstack 0
  1642                           
  1643 ;; *************** function _color_click_init *****************
  1644 ;; Defined at:
  1645 ;;		line 5 in file "color.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;Total ram usage:        1 bytes
  1664 ;; Hardware stack levels used: 1
  1665 ;; Hardware stack levels required when called: 3
  1666 ;; This function calls:
  1667 ;;		_I2C_2_Master_Init
  1668 ;;		_color_writetoaddr
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text3
  1675   002CE4                     __ptext3:
  1676                           	callstack 0
  1677   002CE4                     _color_click_init:
  1678                           	callstack 27
  1679   002CE4                     
  1680                           ;color.c: 8:     I2C_2_Master_Init();
  1681   002CE4  ECA4  F016         	call	_I2C_2_Master_Init	;wreg free
  1682   002CE8                     
  1683                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1684   002CE8  0E01               	movlw	1
  1685   002CEA  6E03               	movwf	color_writetoaddr@value^0,c
  1686   002CEC  0E00               	movlw	0
  1687   002CEE  EC11  F017         	call	_color_writetoaddr
  1688   002CF2                     
  1689                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1690   002CF2  0E3F               	movlw	63
  1691   002CF4  6E05               	movwf	??_color_click_init^0,c
  1692   002CF6  0E55               	movlw	85
  1693   002CF8                     u1537:
  1694   002CF8  2EE8               	decfsz	wreg,f,c
  1695   002CFA  D7FE               	bra	u1537
  1696   002CFC  2E05               	decfsz	??_color_click_init^0,f,c
  1697   002CFE  D7FC               	bra	u1537
  1698   002D00  F000               	nop	
  1699   002D02                     
  1700                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1701   002D02  0E03               	movlw	3
  1702   002D04  6E03               	movwf	color_writetoaddr@value^0,c
  1703   002D06  0E00               	movlw	0
  1704   002D08  EC11  F017         	call	_color_writetoaddr
  1705   002D0C                     
  1706                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1707   002D0C  0ED5               	movlw	213
  1708   002D0E  6E03               	movwf	color_writetoaddr@value^0,c
  1709   002D10  0E01               	movlw	1
  1710   002D12  EC11  F017         	call	_color_writetoaddr
  1711   002D16  0012               	return		;funcret
  1712   002D18                     __end_of_color_click_init:
  1713                           	callstack 0
  1714                           
  1715 ;; *************** function _color_writetoaddr *****************
  1716 ;; Defined at:
  1717 ;;		line 21 in file "color.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  address         1    wreg     unsigned char 
  1720 ;;  value           1    2[COMRAM] unsigned char 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  address         1    3[COMRAM] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1732 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;Total ram usage:        2 bytes
  1737 ;; Hardware stack levels used: 1
  1738 ;; Hardware stack levels required when called: 2
  1739 ;; This function calls:
  1740 ;;		_I2C_2_Master_Start
  1741 ;;		_I2C_2_Master_Stop
  1742 ;;		_I2C_2_Master_Write
  1743 ;; This function is called by:
  1744 ;;		_color_click_init
  1745 ;;		_enable_color_interrupt
  1746 ;;		_set_interrupt_threshold
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text4
  1751   002E22                     __ptext4:
  1752                           	callstack 0
  1753   002E22                     _color_writetoaddr:
  1754                           	callstack 27
  1755                           
  1756                           ;incstack = 0
  1757                           ;color_writetoaddr@address stored from wreg
  1758   002E22  6E04               	movwf	color_writetoaddr@address^0,c
  1759   002E24                     
  1760                           ;color.c: 22:     I2C_2_Master_Start();
  1761   002E24  EC38  F017         	call	_I2C_2_Master_Start	;wreg free
  1762                           
  1763                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1764   002E28  0E52               	movlw	82
  1765   002E2A  EC2D  F017         	call	_I2C_2_Master_Write
  1766                           
  1767                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1768   002E2E  5004               	movf	color_writetoaddr@address^0,w,c
  1769   002E30  0980               	iorlw	128
  1770   002E32  EC2D  F017         	call	_I2C_2_Master_Write
  1771                           
  1772                           ;color.c: 25:     I2C_2_Master_Write(value);
  1773   002E36  5003               	movf	color_writetoaddr@value^0,w,c
  1774   002E38  EC2D  F017         	call	_I2C_2_Master_Write
  1775                           
  1776                           ;color.c: 26:     I2C_2_Master_Stop();
  1777   002E3C  EC33  F017         	call	_I2C_2_Master_Stop	;wreg free
  1778   002E40  0012               	return		;funcret
  1779   002E42                     __end_of_color_writetoaddr:
  1780                           	callstack 0
  1781                           
  1782 ;; *************** function _I2C_2_Master_Init *****************
  1783 ;; Defined at:
  1784 ;;		line 4 in file "i2c.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;		None
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;Total ram usage:        0 bytes
  1803 ;; Hardware stack levels used: 1
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_color_click_init
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text5
  1813   002D48                     __ptext5:
  1814                           	callstack 0
  1815   002D48                     _I2C_2_Master_Init:
  1816                           	callstack 29
  1817   002D48                     
  1818                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1819   002D48  010E               	movlb	14	; () banked
  1820   002D4A  51D9               	movf	217,w,b	;volatile
  1821   002D4C  0BF0               	andlw	-16
  1822   002D4E  0908               	iorlw	8
  1823   002D50  6FD9               	movwf	217,b	;volatile
  1824   002D52                     
  1825                           ; BSR set to: 14
  1826                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1827   002D52  8BD9               	bsf	217,5,b	;volatile
  1828                           
  1829                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1830   002D54  0E9F               	movlw	159
  1831   002D56  6FD6               	movwf	214,b	;volatile
  1832   002D58                     
  1833                           ; BSR set to: 14
  1834                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1835   002D58  8A84               	bsf	132,5,c	;volatile
  1836   002D5A                     
  1837                           ; BSR set to: 14
  1838                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1839   002D5A  8C84               	bsf	132,6,c	;volatile
  1840   002D5C                     
  1841                           ; BSR set to: 14
  1842                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1843   002D5C  9BA7               	bcf	167,5,b	;volatile
  1844   002D5E                     
  1845                           ; BSR set to: 14
  1846                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1847   002D5E  9DA7               	bcf	167,6,b	;volatile
  1848                           
  1849                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1850   002D60  0E1D               	movlw	29
  1851   002D62  6F1D               	movwf	29,b	;volatile
  1852                           
  1853                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1854   002D64  0E1E               	movlw	30
  1855   002D66  6F1C               	movwf	28,b	;volatile
  1856                           
  1857                           ;i2c.c: 18:   RD5PPS=0x1C;
  1858   002D68  0E1C               	movlw	28
  1859   002D6A  6F6F               	movwf	111,b	;volatile
  1860                           
  1861                           ;i2c.c: 19:   RD6PPS=0x1B;
  1862   002D6C  0E1B               	movlw	27
  1863   002D6E  6F70               	movwf	112,b	;volatile
  1864   002D70                     
  1865                           ; BSR set to: 14
  1866   002D70  0012               	return		;funcret
  1867   002D72                     __end_of_I2C_2_Master_Init:
  1868                           	callstack 0
  1869                           
  1870 ;; *************** function _clear_read_calibration *****************
  1871 ;; Defined at:
  1872 ;;		line 26 in file "colour_identify.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  1875 ;;		 -> main@buf(150), 
  1876 ;;  clear_read      2   29[BANK0 ] PTR unsigned int 
  1877 ;;		 -> main@clear_read(2), 
  1878 ;;  clear_read_c    2   31[BANK0 ] PTR unsigned int 
  1879 ;;		 -> main@clear_read_check(2), 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  i               2   35[BANK0 ] int 
  1882 ;;  i               2   33[BANK0 ] int 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1892 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1893 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1894 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1895 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1896 ;;Total ram usage:       14 bytes
  1897 ;; Hardware stack levels used: 1
  1898 ;; Hardware stack levels required when called: 8
  1899 ;; This function calls:
  1900 ;;		_color_read_Clear
  1901 ;;		_sendStringSerial4
  1902 ;;		_sprintf
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text6
  1909   0022DE                     __ptext6:
  1910                           	callstack 0
  1911   0022DE                     _clear_read_calibration:
  1912                           	callstack 22
  1913   0022DE                     
  1914                           ;colour_identify.c: 28:     for (int i = 0; i <= 500; i++){
  1915   0022DE  0E00               	movlw	0
  1916   0022E0  0100               	movlb	0	; () banked
  1917   0022E2  6F82               	movwf	(clear_read_calibration@i+1)& (0+255),b
  1918   0022E4  0E00               	movlw	0
  1919   0022E6  6F81               	movwf	clear_read_calibration@i& (0+255),b
  1920   0022E8                     l2916:
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;colour_identify.c: 29:         *clear_read = color_read_Clear();
  1924   0022E8  ECBF  F015         	call	_color_read_Clear	;wreg free
  1925   0022EC  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1926   0022F0  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  1927   0022F4  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1928   0022F8  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1929   0022FC                     
  1930                           ;colour_identify.c: 30:     }
  1931   0022FC  0100               	movlb	0	; () banked
  1932   0022FE  4B81               	infsnz	clear_read_calibration@i& (0+255),f,b
  1933   002300  2B82               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  1934   002302                     
  1935                           ; BSR set to: 0
  1936   002302  BF82               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  1937   002304  EF8D  F011         	goto	u1371
  1938   002308  0EF5               	movlw	245
  1939   00230A  5D81               	subwf	clear_read_calibration@i& (0+255),w,b
  1940   00230C  0E01               	movlw	1
  1941   00230E  5982               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  1942   002310  A0D8               	btfss	status,0,c
  1943   002312  EF8D  F011         	goto	u1371
  1944   002316  EF8F  F011         	goto	u1370
  1945   00231A                     u1371:
  1946   00231A  EF74  F011         	goto	l2916
  1947   00231E                     u1370:
  1948   00231E                     
  1949                           ; BSR set to: 0
  1950                           ;colour_identify.c: 32:     for(int i = 0; i <= 2; i++){
  1951   00231E  0E00               	movlw	0
  1952   002320  6F84               	movwf	(clear_read_calibration@i_1550+1)& (0+255),b
  1953   002322  0E00               	movlw	0
  1954   002324  6F83               	movwf	clear_read_calibration@i_1550& (0+255),b
  1955   002326                     l2928:
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;colour_identify.c: 33:         *clear_read += color_read_Clear();
  1959   002326  ECBF  F015         	call	_color_read_Clear	;wreg free
  1960   00232A  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1961   00232E  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  1962   002332  5005               	movf	?_color_read_Clear^0,w,c
  1963   002334  26DE               	addwf	postinc2,f,c
  1964   002336  5006               	movf	(?_color_read_Clear+1)^0,w,c
  1965   002338  22DD               	addwfc	postdec2,f,c
  1966   00233A                     
  1967                           ;colour_identify.c: 34:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1968   00233A  0E11               	movlw	17
  1969   00233C  6E5A               	movwf	(??_clear_read_calibration+1)^0,c
  1970   00233E  0E3C               	movlw	60
  1971   002340  6E59               	movwf	??_clear_read_calibration^0,c
  1972   002342  0ECB               	movlw	203
  1973   002344                     u1547:
  1974   002344  2EE8               	decfsz	wreg,f,c
  1975   002346  D7FE               	bra	u1547
  1976   002348  2E59               	decfsz	??_clear_read_calibration^0,f,c
  1977   00234A  D7FC               	bra	u1547
  1978   00234C  2E5A               	decfsz	(??_clear_read_calibration+1)^0,f,c
  1979   00234E  D7FA               	bra	u1547
  1980   002350  F000               	nop	
  1981   002352                     
  1982                           ;colour_identify.c: 35:     }
  1983   002352  0100               	movlb	0	; () banked
  1984   002354  4B83               	infsnz	clear_read_calibration@i_1550& (0+255),f,b
  1985   002356  2B84               	incf	(clear_read_calibration@i_1550+1)& (0+255),f,b
  1986   002358                     
  1987                           ; BSR set to: 0
  1988   002358  BF84               	btfsc	(clear_read_calibration@i_1550+1)& (0+255),7,b
  1989   00235A  EFB8  F011         	goto	u1381
  1990   00235E  5184               	movf	(clear_read_calibration@i_1550+1)& (0+255),w,b
  1991   002360  E109               	bnz	u1380
  1992   002362  0E03               	movlw	3
  1993   002364  5D83               	subwf	clear_read_calibration@i_1550& (0+255),w,b
  1994   002366  A0D8               	btfss	status,0,c
  1995   002368  EFB8  F011         	goto	u1381
  1996   00236C  EFBA  F011         	goto	u1380
  1997   002370                     u1381:
  1998   002370  EF93  F011         	goto	l2928
  1999   002374                     u1380:
  2000   002374                     
  2001                           ; BSR set to: 0
  2002                           ;colour_identify.c: 37:     *clear_read = *clear_read/4;
  2003   002374  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2004   002378  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2005   00237C  CFDE F059          	movff	postinc2,??_clear_read_calibration
  2006   002380  CFDD F05A          	movff	postdec2,??_clear_read_calibration+1
  2007   002384  90D8               	bcf	status,0,c
  2008   002386  325A               	rrcf	(??_clear_read_calibration+1)^0,f,c
  2009   002388  3259               	rrcf	??_clear_read_calibration^0,f,c
  2010   00238A  90D8               	bcf	status,0,c
  2011   00238C  325A               	rrcf	(??_clear_read_calibration+1)^0,f,c
  2012   00238E  3259               	rrcf	??_clear_read_calibration^0,f,c
  2013   002390  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2014   002394  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2015   002398  C059  FFDE         	movff	??_clear_read_calibration,postinc2
  2016   00239C  C05A  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2017   0023A0                     
  2018                           ; BSR set to: 0
  2019                           ;colour_identify.c: 39:     sprintf(buf, "\n Expected clear: %d \n", *clear_read);
  2020   0023A0  C07B  F060         	movff	clear_read_calibration@buf,sprintf@s
  2021   0023A4  C07C  F061         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2022   0023A8  0E57               	movlw	low STR_2
  2023   0023AA  6F62               	movwf	sprintf@fmt& (0+255),b
  2024   0023AC  0E0E               	movlw	high STR_2
  2025   0023AE  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2026   0023B0  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2027   0023B4  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2028   0023B8  CFDE F064          	movff	postinc2,?_sprintf+4
  2029   0023BC  CFDD F065          	movff	postdec2,?_sprintf+5
  2030   0023C0  EC1D  F015         	call	_sprintf	;wreg free
  2031   0023C4                     
  2032                           ;colour_identify.c: 40:     sendStringSerial4(buf);
  2033   0023C4  C07B  F002         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2034   0023C8  C07C  F003         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2035   0023CC  EC8C  F016         	call	_sendStringSerial4	;wreg free
  2036   0023D0                     
  2037                           ;colour_identify.c: 42:     *clear_read_check = *clear_read + 800;
  2038   0023D0  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2039   0023D4  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2040   0023D8  CFDE F059          	movff	postinc2,??_clear_read_calibration
  2041   0023DC  CFDD F05A          	movff	postdec2,??_clear_read_calibration+1
  2042   0023E0  0E20               	movlw	32
  2043   0023E2  2459               	addwf	??_clear_read_calibration^0,w,c
  2044   0023E4  6E5B               	movwf	(??_clear_read_calibration+2)^0,c
  2045   0023E6  0E03               	movlw	3
  2046   0023E8  205A               	addwfc	(??_clear_read_calibration+1)^0,w,c
  2047   0023EA  6E5C               	movwf	(??_clear_read_calibration+3)^0,c
  2048   0023EC  C07F  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2049   0023F0  C080  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2050   0023F4  C05B  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2051   0023F8  C05C  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2052   0023FC  0012               	return		;funcret
  2053   0023FE                     __end_of_clear_read_calibration:
  2054                           	callstack 0
  2055                           
  2056 ;; *************** function _card_response *****************
  2057 ;; Defined at:
  2058 ;;		line 224 in file "colour_identify.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  2061 ;;		 -> main@buf(150), 
  2062 ;;  clear_read      2   29[BANK0 ] PTR unsigned int 
  2063 ;;		 -> main@clear_read(2), 
  2064 ;;  red_read        2   31[BANK0 ] PTR unsigned int 
  2065 ;;		 -> main@red_read(2), 
  2066 ;;  green_read      2   33[BANK0 ] PTR unsigned int 
  2067 ;;		 -> main@green_read(2), 
  2068 ;;  blue_read       2   35[BANK0 ] PTR unsigned int 
  2069 ;;		 -> main@blue_read(2), 
  2070 ;;  expected_val    2   37[BANK0 ] PTR unsigned int [9]
  2071 ;;		 -> main@expected_values(72), 
  2072 ;;  mL              2   39[BANK0 ] PTR struct DC_motor
  2073 ;;		 -> main@motorL(9), 
  2074 ;;  mR              2   41[BANK0 ] PTR struct DC_motor
  2075 ;;		 -> main@motorR(9), 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  normalised_v   72   43[BANK0 ] unsigned int [9][4]
  2078 ;;  master_close   18  115[BANK0 ] unsigned int [9]
  2079 ;;  card            1  133[BANK0 ] enum E14551
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2089 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;Total ram usage:      107 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 8
  2096 ;; This function calls:
  2097 ;;		_collect_avg_readings
  2098 ;;		_determine_card
  2099 ;;		_make_master_closeness
  2100 ;;		_motor_response
  2101 ;;		_normalise_readings
  2102 ;;		_sendStringSerial4
  2103 ;;		_sprintf
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text7
  2110   002190                     __ptext7:
  2111                           	callstack 0
  2112   002190                     _card_response:
  2113                           	callstack 22
  2114   002190                     
  2115                           ;colour_identify.c: 228:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          9:     unsigned int master_closeness[9];;colour_identify.c: 231:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2116   002190  C07D  F00C         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2117   002194  C07E  F00D         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2118   002198  C07F  F00E         	movff	card_response@red_read,collect_avg_readings@red_read
  2119   00219C  C080  F00F         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2120   0021A0  C081  F010         	movff	card_response@green_read,collect_avg_readings@green_read
  2121   0021A4  C082  F011         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2122   0021A8  C083  F012         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2123   0021AC  C084  F013         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2124   0021B0  EC79  F00B         	call	_collect_avg_readings	;wreg free
  2125   0021B4                     
  2126                           ;colour_identify.c: 232:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2127   0021B4  C07B  F060         	movff	card_response@buf,sprintf@s
  2128   0021B8  C07C  F061         	movff	card_response@buf+1,sprintf@s+1
  2129   0021BC  0E33               	movlw	low STR_3
  2130   0021BE  0100               	movlb	0	; () banked
  2131   0021C0  6F62               	movwf	sprintf@fmt& (0+255),b
  2132   0021C2  0E0E               	movlw	high STR_3
  2133   0021C4  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2134   0021C6  C07D  FFD9         	movff	card_response@clear_read,fsr2l
  2135   0021CA  C07E  FFDA         	movff	card_response@clear_read+1,fsr2h
  2136   0021CE  CFDE F064          	movff	postinc2,?_sprintf+4
  2137   0021D2  CFDD F065          	movff	postdec2,?_sprintf+5
  2138   0021D6  C07F  FFD9         	movff	card_response@red_read,fsr2l
  2139   0021DA  C080  FFDA         	movff	card_response@red_read+1,fsr2h
  2140   0021DE  CFDE F066          	movff	postinc2,?_sprintf+6
  2141   0021E2  CFDD F067          	movff	postdec2,?_sprintf+7
  2142   0021E6  C081  FFD9         	movff	card_response@green_read,fsr2l
  2143   0021EA  C082  FFDA         	movff	card_response@green_read+1,fsr2h
  2144   0021EE  CFDE F068          	movff	postinc2,?_sprintf+8
  2145   0021F2  CFDD F069          	movff	postdec2,?_sprintf+9
  2146   0021F6  C083  FFD9         	movff	card_response@blue_read,fsr2l
  2147   0021FA  C084  FFDA         	movff	card_response@blue_read+1,fsr2h
  2148   0021FE  CFDE F06A          	movff	postinc2,?_sprintf+10
  2149   002202  CFDD F06B          	movff	postdec2,?_sprintf+11
  2150   002206  EC1D  F015         	call	_sprintf	;wreg free
  2151   00220A                     
  2152                           ;colour_identify.c: 233:     sendStringSerial4(buf);
  2153   00220A  C07B  F002         	movff	card_response@buf,sendStringSerial4@string
  2154   00220E  C07C  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  2155   002212  EC8C  F016         	call	_sendStringSerial4	;wreg free
  2156   002216                     
  2157                           ;colour_identify.c: 235:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2158   002216  C07B  F017         	movff	card_response@buf,normalise_readings@buf
  2159   00221A  C07C  F018         	movff	card_response@buf+1,normalise_readings@buf+1
  2160   00221E  C07D  FFD9         	movff	card_response@clear_read,fsr2l
  2161   002222  C07E  FFDA         	movff	card_response@clear_read+1,fsr2h
  2162   002226  CFDE F019          	movff	postinc2,normalise_readings@clear_read
  2163   00222A  CFDD F01A          	movff	postdec2,normalise_readings@clear_read+1
  2164   00222E  C07F  FFD9         	movff	card_response@red_read,fsr2l
  2165   002232  C080  FFDA         	movff	card_response@red_read+1,fsr2h
  2166   002236  CFDE F01B          	movff	postinc2,normalise_readings@red_read
  2167   00223A  CFDD F01C          	movff	postdec2,normalise_readings@red_read+1
  2168   00223E  C081  FFD9         	movff	card_response@green_read,fsr2l
  2169   002242  C082  FFDA         	movff	card_response@green_read+1,fsr2h
  2170   002246  CFDE F01D          	movff	postinc2,normalise_readings@green_read
  2171   00224A  CFDD F01E          	movff	postdec2,normalise_readings@green_read+1
  2172   00224E  C083  FFD9         	movff	card_response@blue_read,fsr2l
  2173   002252  C084  FFDA         	movff	card_response@blue_read+1,fsr2h
  2174   002256  CFDE F01F          	movff	postinc2,normalise_readings@blue_read
  2175   00225A  CFDD F020          	movff	postdec2,normalise_readings@blue_read+1
  2176   00225E  C085  F021         	movff	card_response@expected_values,normalise_readings@expected_values
  2177   002262  C086  F022         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2178   002266  0E8B               	movlw	low card_response@normalised_values
  2179   002268  6E23               	movwf	normalise_readings@normalised_values^0,c
  2180   00226A  0E00               	movlw	high card_response@normalised_values
  2181   00226C  6E24               	movwf	(normalise_readings@normalised_values+1)^0,c
  2182   00226E  ECC8  F008         	call	_normalise_readings	;wreg free
  2183   002272                     
  2184                           ;colour_identify.c: 237:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2185   002272  C07B  F001         	movff	card_response@buf,make_master_closeness@buf
  2186   002276  C07C  F002         	movff	card_response@buf+1,make_master_closeness@buf+1
  2187   00227A  0E8B               	movlw	low card_response@normalised_values
  2188   00227C  6E03               	movwf	make_master_closeness@normalised_values^0,c
  2189   00227E  0E00               	movlw	high card_response@normalised_values
  2190   002280  6E04               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2191   002282  0ED3               	movlw	low card_response@master_closeness
  2192   002284  6E05               	movwf	make_master_closeness@master_closeness^0,c
  2193   002286  0E00               	movlw	high card_response@master_closeness
  2194   002288  6E06               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2195   00228A  ECFF  F011         	call	_make_master_closeness	;wreg free
  2196   00228E                     
  2197                           ;colour_identify.c: 239:     card = determine_card(master_closeness);
  2198   00228E  0ED3               	movlw	low card_response@master_closeness
  2199   002290  6E01               	movwf	determine_card@master_closeness^0,c
  2200   002292  0E00               	movlw	high card_response@master_closeness
  2201   002294  6E02               	movwf	(determine_card@master_closeness+1)^0,c
  2202   002296  EC64  F014         	call	_determine_card	;wreg free
  2203   00229A  0100               	movlb	0	; () banked
  2204   00229C  6FE5               	movwf	card_response@card& (0+255),b
  2205   00229E                     
  2206                           ; BSR set to: 0
  2207                           ;colour_identify.c: 240:     sprintf(buf, "CARD %d \n", card);
  2208   00229E  C07B  F060         	movff	card_response@buf,sprintf@s
  2209   0022A2  C07C  F061         	movff	card_response@buf+1,sprintf@s+1
  2210   0022A6  0E6E               	movlw	low STR_4
  2211   0022A8  6F62               	movwf	sprintf@fmt& (0+255),b
  2212   0022AA  0E0E               	movlw	high STR_4
  2213   0022AC  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2214   0022AE  C0E5  F064         	movff	card_response@card,?_sprintf+4
  2215   0022B2  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2216   0022B4  EC1D  F015         	call	_sprintf	;wreg free
  2217   0022B8                     
  2218                           ;colour_identify.c: 241:     sendStringSerial4(buf);
  2219   0022B8  C07B  F002         	movff	card_response@buf,sendStringSerial4@string
  2220   0022BC  C07C  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  2221   0022C0  EC8C  F016         	call	_sendStringSerial4	;wreg free
  2222   0022C4                     
  2223                           ;colour_identify.c: 243:     motor_response(card, mL, mR);
  2224   0022C4  C087  F01C         	movff	card_response@mL,motor_response@mL
  2225   0022C8  C088  F01D         	movff	card_response@mL+1,motor_response@mL+1
  2226   0022CC  C089  F01E         	movff	card_response@mR,motor_response@mR
  2227   0022D0  C08A  F01F         	movff	card_response@mR+1,motor_response@mR+1
  2228   0022D4  0100               	movlb	0	; () banked
  2229   0022D6  51E5               	movf	card_response@card& (0+255),w,b
  2230   0022D8  EC3D  F007         	call	_motor_response
  2231   0022DC  0012               	return		;funcret
  2232   0022DE                     __end_of_card_response:
  2233                           	callstack 0
  2234                           
  2235 ;; *************** function _sprintf *****************
  2236 ;; Defined at:
  2237 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2240 ;;		 -> main@buf(150), 
  2241 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2242 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  f              11   16[BANK0 ] struct _IO_FILE
  2245 ;;  ap              2   14[BANK0 ] PTR void [1]
  2246 ;;		 -> ?_sprintf(2), 
  2247 ;;  ret             2    0        int 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  2    0[BANK0 ] int 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2257 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2258 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2260 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2261 ;;Total ram usage:       27 bytes
  2262 ;; Hardware stack levels used: 1
  2263 ;; Hardware stack levels required when called: 7
  2264 ;; This function calls:
  2265 ;;		_vfprintf
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;;		_clear_read_calibration
  2269 ;;		_card_response
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text8
  2274   002A3A                     __ptext8:
  2275                           	callstack 0
  2276   002A3A                     _sprintf:
  2277                           	callstack 23
  2278   002A3A  0E64               	movlw	low (?_sprintf+4)
  2279   002A3C  0100               	movlb	0	; () banked
  2280   002A3E  6F6E               	movwf	sprintf@ap& (0+255),b
  2281   002A40  0E00               	movlw	high (?_sprintf+4)
  2282   002A42  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  2283   002A44  C060  F070         	movff	sprintf@s,sprintf@f
  2284   002A48  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  2285   002A4C                     
  2286                           ; BSR set to: 0
  2287   002A4C  0E00               	movlw	0
  2288   002A4E  6F74               	movwf	(sprintf@f+4)& (0+255),b
  2289   002A50  0E00               	movlw	0
  2290   002A52  6F73               	movwf	(sprintf@f+3)& (0+255),b
  2291   002A54                     
  2292                           ; BSR set to: 0
  2293   002A54  0E00               	movlw	0
  2294   002A56  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  2295   002A58  0E00               	movlw	0
  2296   002A5A  6F79               	movwf	(sprintf@f+9)& (0+255),b
  2297   002A5C                     
  2298                           ; BSR set to: 0
  2299   002A5C  0E70               	movlw	low sprintf@f
  2300   002A5E  6E51               	movwf	vfprintf@fp^0,c
  2301   002A60  0E00               	movlw	high sprintf@f
  2302   002A62  6E52               	movwf	(vfprintf@fp+1)^0,c
  2303   002A64  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  2304   002A68  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2305   002A6C  0E6E               	movlw	low sprintf@ap
  2306   002A6E  6E55               	movwf	vfprintf@ap^0,c
  2307   002A70  0E00               	movlw	high sprintf@ap
  2308   002A72  6E56               	movwf	(vfprintf@ap+1)^0,c
  2309   002A74  EC46  F015         	call	_vfprintf	;wreg free
  2310   002A78  0100               	movlb	0	; () banked
  2311   002A7A  5173               	movf	(sprintf@f+3)& (0+255),w,b
  2312   002A7C  2560               	addwf	sprintf@s& (0+255),w,b
  2313   002A7E  6ED9               	movwf	fsr2l,c
  2314   002A80  5174               	movf	(sprintf@f+4)& (0+255),w,b
  2315   002A82  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  2316   002A84  6EDA               	movwf	fsr2h,c
  2317   002A86  0E00               	movlw	0
  2318   002A88  6EDF               	movwf	indf2,c
  2319   002A8A                     
  2320                           ; BSR set to: 0
  2321   002A8A  0012               	return		;funcret
  2322   002A8C                     __end_of_sprintf:
  2323                           	callstack 0
  2324                           
  2325 ;; *************** function _vfprintf *****************
  2326 ;; Defined at:
  2327 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  2330 ;;		 -> sprintf@f(11), 
  2331 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  2332 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2333 ;;  ap              2   84[COMRAM] PTR PTR void 
  2334 ;;		 -> sprintf@ap(2), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  2337 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  2   80[COMRAM] int 
  2340 ;; Registers used:
  2341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2347 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;Total ram usage:        8 bytes
  2352 ;; Hardware stack levels used: 1
  2353 ;; Hardware stack levels required when called: 6
  2354 ;; This function calls:
  2355 ;;		_vfpfcnvrt
  2356 ;; This function is called by:
  2357 ;;		_sprintf
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text9
  2362   002A8C                     __ptext9:
  2363                           	callstack 0
  2364   002A8C                     _vfprintf:
  2365                           	callstack 23
  2366   002A8C                     
  2367                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2368   002A8C  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  2369   002A90  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2370                           
  2371                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2372   002A94  EF5A  F015         	goto	l2580
  2373   002A98                     l2578:
  2374                           
  2375                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2376   002A98  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  2377   002A9C  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2378   002AA0  0E57               	movlw	low vfprintf@cfmt
  2379   002AA2  6E41               	movwf	vfpfcnvrt@fmt^0,c
  2380   002AA4  0E00               	movlw	high vfprintf@cfmt
  2381   002AA6  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2382   002AA8  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  2383   002AAC  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2384   002AB0  EC19  F010         	call	_vfpfcnvrt	;wreg free
  2385   002AB4                     l2580:
  2386                           
  2387                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2388   002AB4  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  2389   002AB8  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2390   002ABC                     	if	0	;tblptru may be non-zero
  2391   002ABC                     	endif
  2392   002ABC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2393   002ABC  0E00               	movlw	low (__mediumconst shr (0+16))
  2394   002ABE  6EF8               	movwf	tblptru,c
  2395   002AC0                     	endif
  2396   002AC0  0008               	tblrd		*
  2397   002AC2  50F5               	movf	tablat,w,c
  2398   002AC4  0900               	iorlw	0
  2399   002AC6  A4D8               	btfss	status,2,c
  2400   002AC8  EF68  F015         	goto	u1261
  2401   002ACC  EF6A  F015         	goto	u1260
  2402   002AD0                     u1261:
  2403   002AD0  EF4C  F015         	goto	l2578
  2404   002AD4                     u1260:
  2405   002AD4                     
  2406                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2407   002AD4  0E00               	movlw	0
  2408   002AD6  6E52               	movwf	(?_vfprintf+1)^0,c
  2409   002AD8  0E00               	movlw	0
  2410   002ADA  6E51               	movwf	?_vfprintf^0,c
  2411   002ADC  0012               	return		;funcret
  2412   002ADE                     __end_of_vfprintf:
  2413                           	callstack 0
  2414                           
  2415 ;; *************** function _vfpfcnvrt *****************
  2416 ;; Defined at:
  2417 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  2420 ;;		 -> sprintf@f(11), 
  2421 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  2422 ;;		 -> vfprintf@cfmt(2), 
  2423 ;;  ap              2   66[COMRAM] PTR PTR void 
  2424 ;;		 -> sprintf@ap(2), 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  convarg         8   70[COMRAM] struct .
  2427 ;;  cp              2   78[COMRAM] PTR unsigned char 
  2428 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2429 ;;  i               2    0        int 
  2430 ;;  done            2    0        int 
  2431 ;;  c               1    0        unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2441 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2442 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2443 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2444 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2445 ;;Total ram usage:       18 bytes
  2446 ;; Hardware stack levels used: 1
  2447 ;; Hardware stack levels required when called: 5
  2448 ;; This function calls:
  2449 ;;		_dtoa
  2450 ;;		_fputc
  2451 ;; This function is called by:
  2452 ;;		_vfprintf
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text10
  2457   002032                     __ptext10:
  2458                           	callstack 0
  2459   002032                     _vfpfcnvrt:
  2460                           	callstack 23
  2461   002032                     
  2462                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2463   002032  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2464   002036  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2465   00203A  CFDE FFF6          	movff	postinc2,tblptrl
  2466   00203E  CFDD FFF7          	movff	postdec2,tblptrh
  2467   002042                     	if	0	;tblptru may be non-zero
  2468   002042                     	endif
  2469   002042                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2470   002042  0E00               	movlw	low (__mediumconst shr (0+16))
  2471   002044  6EF8               	movwf	tblptru,c
  2472   002046                     	endif
  2473   002046  0008               	tblrd		*
  2474   002048  50F5               	movf	tablat,w,c
  2475   00204A  0A25               	xorlw	37
  2476   00204C  A4D8               	btfss	status,2,c
  2477   00204E  EF2B  F010         	goto	u1171
  2478   002052  EF2D  F010         	goto	u1170
  2479   002056                     u1171:
  2480   002056  EFB1  F010         	goto	l2460
  2481   00205A                     u1170:
  2482   00205A                     
  2483                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2484   00205A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2485   00205E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2486   002062  2ADE               	incf	postinc2,f,c
  2487   002064  0E00               	movlw	0
  2488   002066  22DD               	addwfc	postdec2,f,c
  2489   002068                     
  2490                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2491   002068  0E00               	movlw	0
  2492   00206A  0100               	movlb	0	; () banked
  2493   00206C  6FE7               	movwf	(_width+1)& (0+255),b
  2494   00206E  0E00               	movlw	0
  2495   002070  6FE6               	movwf	_width& (0+255),b
  2496   002072  C0E6  F0EA         	movff	_width,_flags
  2497   002076                     
  2498                           ; BSR set to: 0
  2499                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2500   002076  69E8               	setf	_prec& (0+255),b
  2501   002078  69E9               	setf	(_prec+1)& (0+255),b
  2502   00207A                     
  2503                           ; BSR set to: 0
  2504                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2505   00207A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2506   00207E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2507   002082  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  2508   002086  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  2509   00208A                     
  2510                           ; BSR set to: 0
  2511                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2512   00208A  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2513   00208E  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2514   002092                     	if	0	;tblptru may be non-zero
  2515   002092                     	endif
  2516   002092                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2517   002092  0E00               	movlw	low (__mediumconst shr (0+16))
  2518   002094  6EF8               	movwf	tblptru,c
  2519   002096                     	endif
  2520   002096  0008               	tblrd		*
  2521   002098  50F5               	movf	tablat,w,c
  2522   00209A  0A64               	xorlw	100
  2523   00209C  B4D8               	btfsc	status,2,c
  2524   00209E  EF53  F010         	goto	u1181
  2525   0020A2  EF55  F010         	goto	u1180
  2526   0020A6                     u1181:
  2527   0020A6  EF65  F010         	goto	l2450
  2528   0020AA                     u1180:
  2529   0020AA                     
  2530                           ; BSR set to: 0
  2531   0020AA  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2532   0020AE  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2533   0020B2                     	if	0	;tblptru may be non-zero
  2534   0020B2                     	endif
  2535   0020B2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2536   0020B2  0E00               	movlw	low (__mediumconst shr (0+16))
  2537   0020B4  6EF8               	movwf	tblptru,c
  2538   0020B6                     	endif
  2539   0020B6  0008               	tblrd		*
  2540   0020B8  50F5               	movf	tablat,w,c
  2541   0020BA  0A69               	xorlw	105
  2542   0020BC  A4D8               	btfss	status,2,c
  2543   0020BE  EF63  F010         	goto	u1191
  2544   0020C2  EF65  F010         	goto	u1190
  2545   0020C6                     u1191:
  2546   0020C6  EFA8  F010         	goto	l2456
  2547   0020CA                     u1190:
  2548   0020CA                     l2450:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2552   0020CA  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2553   0020CE  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2554   0020D2  CFDF F045          	movff	indf2,??_vfpfcnvrt
  2555   0020D6  0E02               	movlw	2
  2556   0020D8  26DE               	addwf	postinc2,f,c
  2557   0020DA  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  2558   0020DE  0E00               	movlw	0
  2559   0020E0  22DD               	addwfc	postdec2,f,c
  2560   0020E2  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2561   0020E6  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2562   0020EA  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  2563   0020EE  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  2564   0020F2  0E00               	movlw	0
  2565   0020F4  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2566   0020F6  0EFF               	movlw	-1
  2567   0020F8  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2568   0020FA  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2569   0020FC  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2570   0020FE  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2571   002100  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2572   002102  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2573                           
  2574                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2575   002104  0E01               	movlw	1
  2576   002106  244F               	addwf	vfpfcnvrt@cp^0,w,c
  2577   002108  6E45               	movwf	??_vfpfcnvrt^0,c
  2578   00210A  0E00               	movlw	0
  2579   00210C  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2580   00210E  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  2581   002110  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2582   002114  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2583   002118  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  2584   00211C  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2585   002120                     
  2586                           ; BSR set to: 0
  2587                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2588   002120  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2589   002124  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2590   002128  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  2591   00212C  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2592   002130  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2593   002134  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2594   002138  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2595   00213C  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2596   002140  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2597   002144  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2598   002148  EC3A  F00A         	call	_dtoa	;wreg free
  2599   00214C  EFC7  F010         	goto	l1189
  2600   002150                     l2456:
  2601                           
  2602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2603   002150  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2604   002154  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2605   002158  2ADE               	incf	postinc2,f,c
  2606   00215A  0E00               	movlw	0
  2607   00215C  22DD               	addwfc	postdec2,f,c
  2608   00215E  EFC7  F010         	goto	l1189
  2609   002162                     l2460:
  2610                           
  2611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2612   002162  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2613   002166  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2614   00216A  CFDE FFF6          	movff	postinc2,tblptrl
  2615   00216E  CFDD FFF7          	movff	postdec2,tblptrh
  2616   002172                     	if	0	;tblptru may be non-zero
  2617   002172                     	endif
  2618   002172                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2619   002172  0E00               	movlw	low (__mediumconst shr (0+16))
  2620   002174  6EF8               	movwf	tblptru,c
  2621   002176                     	endif
  2622   002176  0008               	tblrd		*
  2623   002178  50F5               	movf	tablat,w,c
  2624   00217A  6E01               	movwf	fputc@c^0,c
  2625   00217C  6A02               	clrf	(fputc@c+1)^0,c
  2626   00217E  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2627   002182  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2628   002186  EC85  F012         	call	_fputc	;wreg free
  2629   00218A  EFA8  F010         	goto	l2456
  2630   00218E                     l1189:
  2631   00218E  0012               	return		;funcret
  2632   002190                     __end_of_vfpfcnvrt:
  2633                           	callstack 0
  2634                           
  2635 ;; *************** function _dtoa *****************
  2636 ;; Defined at:
  2637 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2640 ;;		 -> sprintf@f(11), 
  2641 ;;  d               8   29[COMRAM] long long 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  n               8   51[COMRAM] long long 
  2644 ;;  i               2   59[COMRAM] int 
  2645 ;;  w               2   49[COMRAM] int 
  2646 ;;  p               2   47[COMRAM] int 
  2647 ;;  s               1   61[COMRAM] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2657 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2660 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;Total ram usage:       35 bytes
  2662 ;; Hardware stack levels used: 1
  2663 ;; Hardware stack levels required when called: 4
  2664 ;; This function calls:
  2665 ;;		___aodiv
  2666 ;;		___aomod
  2667 ;;		_abs
  2668 ;;		_pad
  2669 ;; This function is called by:
  2670 ;;		_vfpfcnvrt
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text11
  2675   001474                     __ptext11:
  2676                           	callstack 0
  2677   001474                     _dtoa:
  2678                           	callstack 23
  2679   001474                     
  2680                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2681   001474  C01E  F034         	movff	dtoa@d,dtoa@n
  2682   001478  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2683   00147C  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2684   001480  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2685   001484  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2686   001488  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2687   00148C  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2688   001490  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2689   001494                     
  2690                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2691   001494  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2692   001496  EF4F  F00A         	goto	u1031
  2693   00149A  EF52  F00A         	goto	u1030
  2694   00149E                     u1031:
  2695   00149E  0E01               	movlw	1
  2696   0014A0  EF53  F00A         	goto	u1040
  2697   0014A4                     u1030:
  2698   0014A4  0E00               	movlw	0
  2699   0014A6                     u1040:
  2700   0014A6  6E3E               	movwf	dtoa@s^0,c
  2701   0014A8                     
  2702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2703   0014A8  503E               	movf	dtoa@s^0,w,c
  2704   0014AA  B4D8               	btfsc	status,2,c
  2705   0014AC  EF5A  F00A         	goto	u1051
  2706   0014B0  EF5C  F00A         	goto	u1050
  2707   0014B4                     u1051:
  2708   0014B4  EF6C  F00A         	goto	l2346
  2709   0014B8                     u1050:
  2710   0014B8                     
  2711                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2712   0014B8  1E3B               	comf	(dtoa@n+7)^0,f,c
  2713   0014BA  1E3A               	comf	(dtoa@n+6)^0,f,c
  2714   0014BC  1E39               	comf	(dtoa@n+5)^0,f,c
  2715   0014BE  1E38               	comf	(dtoa@n+4)^0,f,c
  2716   0014C0  1E37               	comf	(dtoa@n+3)^0,f,c
  2717   0014C2  1E36               	comf	(dtoa@n+2)^0,f,c
  2718   0014C4  1E35               	comf	(dtoa@n+1)^0,f,c
  2719   0014C6  6C34               	negf	dtoa@n^0,c
  2720   0014C8  0E00               	movlw	0
  2721   0014CA  2235               	addwfc	(dtoa@n+1)^0,f,c
  2722   0014CC  2236               	addwfc	(dtoa@n+2)^0,f,c
  2723   0014CE  2237               	addwfc	(dtoa@n+3)^0,f,c
  2724   0014D0  2238               	addwfc	(dtoa@n+4)^0,f,c
  2725   0014D2  2239               	addwfc	(dtoa@n+5)^0,f,c
  2726   0014D4  223A               	addwfc	(dtoa@n+6)^0,f,c
  2727   0014D6  223B               	addwfc	(dtoa@n+7)^0,f,c
  2728   0014D8                     l2346:
  2729                           
  2730                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2731   0014D8  0100               	movlb	0	; () banked
  2732   0014DA  BFE9               	btfsc	(_prec+1)& (0+255),7,b
  2733   0014DC  EF7A  F00A         	goto	u1060
  2734   0014E0  51E9               	movf	(_prec+1)& (0+255),w,b
  2735   0014E2  E106               	bnz	u1061
  2736   0014E4  05E8               	decf	_prec& (0+255),w,b
  2737   0014E6  B0D8               	btfsc	status,0,c
  2738   0014E8  EF78  F00A         	goto	u1061
  2739   0014EC  EF7A  F00A         	goto	u1060
  2740   0014F0                     u1061:
  2741   0014F0  EF80  F00A         	goto	l1168
  2742   0014F4                     u1060:
  2743   0014F4                     
  2744                           ; BSR set to: 0
  2745   0014F4  0E00               	movlw	0
  2746   0014F6  6E31               	movwf	(dtoa@p+1)^0,c
  2747   0014F8  0E01               	movlw	1
  2748   0014FA  6E30               	movwf	dtoa@p^0,c
  2749   0014FC  EF84  F00A         	goto	l1170
  2750   001500                     l1168:
  2751                           
  2752                           ; BSR set to: 0
  2753   001500  C0E8  F030         	movff	_prec,dtoa@p
  2754   001504  C0E9  F031         	movff	_prec+1,dtoa@p+1
  2755   001508                     l1170:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2759   001508  C0E6  F032         	movff	_width,dtoa@w
  2760   00150C  C0E7  F033         	movff	_width+1,dtoa@w+1
  2761   001510                     
  2762                           ; BSR set to: 0
  2763                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2764   001510  503E               	movf	dtoa@s^0,w,c
  2765   001512  B4D8               	btfsc	status,2,c
  2766   001514  EF8E  F00A         	goto	u1071
  2767   001518  EF90  F00A         	goto	u1070
  2768   00151C                     u1071:
  2769   00151C  EFA7  F00A         	goto	l1171
  2770   001520                     u1070:
  2771   001520                     
  2772                           ; BSR set to: 0
  2773                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2774   001520  0632               	decf	dtoa@w^0,f,c
  2775   001522  A0D8               	btfss	status,0,c
  2776   001524  0633               	decf	(dtoa@w+1)^0,f,c
  2777   001526                     
  2778                           ; BSR set to: 0
  2779                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2780   001526  503E               	movf	dtoa@s^0,w,c
  2781   001528  A4D8               	btfss	status,2,c
  2782   00152A  EF99  F00A         	goto	u1081
  2783   00152E  EF9B  F00A         	goto	u1080
  2784   001532                     u1081:
  2785   001532  EFA1  F00A         	goto	l2358
  2786   001536                     u1080:
  2787   001536                     
  2788                           ; BSR set to: 0
  2789   001536  0E00               	movlw	0
  2790   001538  6E2F               	movwf	(_dtoa$2309+1)^0,c
  2791   00153A  0E2B               	movlw	43
  2792   00153C  6E2E               	movwf	_dtoa$2309^0,c
  2793   00153E  EFA5  F00A         	goto	l2360
  2794   001542                     l2358:
  2795                           
  2796                           ; BSR set to: 0
  2797   001542  0E00               	movlw	0
  2798   001544  6E2F               	movwf	(_dtoa$2309+1)^0,c
  2799   001546  0E2D               	movlw	45
  2800   001548  6E2E               	movwf	_dtoa$2309^0,c
  2801   00154A                     l2360:
  2802                           
  2803                           ; BSR set to: 0
  2804   00154A  C02E  F03E         	movff	_dtoa$2309,dtoa@s
  2805   00154E                     l1171:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2809   00154E  0E00               	movlw	0
  2810   001550  6E3D               	movwf	(dtoa@i+1)^0,c
  2811   001552  0E1F               	movlw	31
  2812   001554  6E3C               	movwf	dtoa@i^0,c
  2813   001556                     
  2814                           ; BSR set to: 0
  2815                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2816   001556  0E00               	movlw	0
  2817   001558  0102               	movlb	2	; () banked
  2818   00155A  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2819                           
  2820                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2821   00155C  EF2C  F00B         	goto	l2374
  2822   001560                     l2364:
  2823                           
  2824                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2825   001560  063C               	decf	dtoa@i^0,f,c
  2826   001562  A0D8               	btfss	status,0,c
  2827   001564  063D               	decf	(dtoa@i+1)^0,f,c
  2828   001566                     
  2829                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2830   001566  0E50               	movlw	low _dbuf
  2831   001568  243C               	addwf	dtoa@i^0,w,c
  2832   00156A  6ED9               	movwf	fsr2l,c
  2833   00156C  0E02               	movlw	high _dbuf
  2834   00156E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2835   001570  6EDA               	movwf	fsr2h,c
  2836   001572  C034  F001         	movff	dtoa@n,___aomod@dividend
  2837   001576  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2838   00157A  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2839   00157E  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2840   001582  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2841   001586  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2842   00158A  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2843   00158E  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2844   001592  0E0A               	movlw	10
  2845   001594  6E09               	movwf	___aomod@divisor^0,c
  2846   001596  0E00               	movlw	0
  2847   001598  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2848   00159A  0E00               	movlw	0
  2849   00159C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2850   00159E  0E00               	movlw	0
  2851   0015A0  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2852   0015A2  0E00               	movlw	0
  2853   0015A4  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2854   0015A6  0E00               	movlw	0
  2855   0015A8  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2856   0015AA  0E00               	movlw	0
  2857   0015AC  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2858   0015AE  0E00               	movlw	0
  2859   0015B0  6E10               	movwf	(___aomod@divisor+7)^0,c
  2860   0015B2  EC67  F00F         	call	___aomod	;wreg free
  2861   0015B6  C001  F026         	movff	?___aomod,??_dtoa
  2862   0015BA  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2863   0015BE  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2864   0015C2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2865   0015C6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2866   0015CA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2867   0015CE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2868   0015D2  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2869   0015D6  C026  F013         	movff	??_dtoa,abs@a
  2870   0015DA  C027  F014         	movff	??_dtoa+1,abs@a+1
  2871   0015DE  EC52  F016         	call	_abs	;wreg free
  2872   0015E2  5013               	movf	?_abs^0,w,c
  2873   0015E4  0F30               	addlw	48
  2874   0015E6  6EDF               	movwf	indf2,c
  2875   0015E8                     
  2876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2877   0015E8  0630               	decf	dtoa@p^0,f,c
  2878   0015EA  A0D8               	btfss	status,0,c
  2879   0015EC  0631               	decf	(dtoa@p+1)^0,f,c
  2880   0015EE                     
  2881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2882   0015EE  0632               	decf	dtoa@w^0,f,c
  2883   0015F0  A0D8               	btfss	status,0,c
  2884   0015F2  0633               	decf	(dtoa@w+1)^0,f,c
  2885   0015F4                     
  2886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2887   0015F4  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2888   0015F8  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2889   0015FC  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2890   001600  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2891   001604  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2892   001608  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2893   00160C  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2894   001610  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2895   001614  0E0A               	movlw	10
  2896   001616  6E09               	movwf	___aodiv@divisor^0,c
  2897   001618  0E00               	movlw	0
  2898   00161A  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2899   00161C  0E00               	movlw	0
  2900   00161E  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2901   001620  0E00               	movlw	0
  2902   001622  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2903   001624  0E00               	movlw	0
  2904   001626  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2905   001628  0E00               	movlw	0
  2906   00162A  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2907   00162C  0E00               	movlw	0
  2908   00162E  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2909   001630  0E00               	movlw	0
  2910   001632  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2911   001634  ECED  F00D         	call	___aodiv	;wreg free
  2912   001638  C001  F034         	movff	?___aodiv,dtoa@n
  2913   00163C  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2914   001640  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2915   001644  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2916   001648  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2917   00164C  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2918   001650  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2919   001654  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2920   001658                     l2374:
  2921                           
  2922                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2923   001658  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2924   00165A  EF37  F00B         	goto	u1091
  2925   00165E  503D               	movf	(dtoa@i+1)^0,w,c
  2926   001660  E108               	bnz	u1090
  2927   001662  043C               	decf	dtoa@i^0,w,c
  2928   001664  A0D8               	btfss	status,0,c
  2929   001666  EF37  F00B         	goto	u1091
  2930   00166A  EF39  F00B         	goto	u1090
  2931   00166E                     u1091:
  2932   00166E  EF55  F00B         	goto	l2380
  2933   001672                     u1090:
  2934   001672  5034               	movf	dtoa@n^0,w,c
  2935   001674  1035               	iorwf	(dtoa@n+1)^0,w,c
  2936   001676  1036               	iorwf	(dtoa@n+2)^0,w,c
  2937   001678  1037               	iorwf	(dtoa@n+3)^0,w,c
  2938   00167A  1038               	iorwf	(dtoa@n+4)^0,w,c
  2939   00167C  1039               	iorwf	(dtoa@n+5)^0,w,c
  2940   00167E  103A               	iorwf	(dtoa@n+6)^0,w,c
  2941   001680  103B               	iorwf	(dtoa@n+7)^0,w,c
  2942   001682  A4D8               	btfss	status,2,c
  2943   001684  EF46  F00B         	goto	u1101
  2944   001688  EF48  F00B         	goto	u1100
  2945   00168C                     u1101:
  2946   00168C  EFB0  F00A         	goto	l2364
  2947   001690                     u1100:
  2948   001690  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2949   001692  EF55  F00B         	goto	u1110
  2950   001696  5031               	movf	(dtoa@p+1)^0,w,c
  2951   001698  E106               	bnz	u1111
  2952   00169A  0430               	decf	dtoa@p^0,w,c
  2953   00169C  B0D8               	btfsc	status,0,c
  2954   00169E  EF53  F00B         	goto	u1111
  2955   0016A2  EF55  F00B         	goto	u1110
  2956   0016A6                     u1111:
  2957   0016A6  EFB0  F00A         	goto	l2364
  2958   0016AA                     u1110:
  2959   0016AA                     l2380:
  2960                           
  2961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2962   0016AA  503E               	movf	dtoa@s^0,w,c
  2963   0016AC  B4D8               	btfsc	status,2,c
  2964   0016AE  EF5B  F00B         	goto	u1121
  2965   0016B2  EF5D  F00B         	goto	u1120
  2966   0016B6                     u1121:
  2967   0016B6  EF68  F00B         	goto	l2386
  2968   0016BA                     u1120:
  2969   0016BA                     
  2970                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2971   0016BA  063C               	decf	dtoa@i^0,f,c
  2972   0016BC  A0D8               	btfss	status,0,c
  2973   0016BE  063D               	decf	(dtoa@i+1)^0,f,c
  2974   0016C0                     
  2975                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2976   0016C0  0E50               	movlw	low _dbuf
  2977   0016C2  243C               	addwf	dtoa@i^0,w,c
  2978   0016C4  6ED9               	movwf	fsr2l,c
  2979   0016C6  0E02               	movlw	high _dbuf
  2980   0016C8  203D               	addwfc	(dtoa@i+1)^0,w,c
  2981   0016CA  6EDA               	movwf	fsr2h,c
  2982   0016CC  C03E  FFDF         	movff	dtoa@s,indf2
  2983   0016D0                     l2386:
  2984                           
  2985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2986   0016D0  C01C  F011         	movff	dtoa@fp,pad@fp
  2987   0016D4  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2988   0016D8  0E50               	movlw	low _dbuf
  2989   0016DA  243C               	addwf	dtoa@i^0,w,c
  2990   0016DC  6E13               	movwf	pad@buf^0,c
  2991   0016DE  0E02               	movlw	high _dbuf
  2992   0016E0  203D               	addwfc	(dtoa@i+1)^0,w,c
  2993   0016E2  6E14               	movwf	(pad@buf+1)^0,c
  2994   0016E4  C032  F015         	movff	dtoa@w,pad@p
  2995   0016E8  C033  F016         	movff	dtoa@w+1,pad@p+1
  2996   0016EC  ECA6  F014         	call	_pad	;wreg free
  2997   0016F0  0012               	return		;funcret
  2998   0016F2                     __end_of_dtoa:
  2999                           	callstack 0
  3000                           
  3001 ;; *************** function _pad *****************
  3002 ;; Defined at:
  3003 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3006 ;;		 -> sprintf@f(11), 
  3007 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3008 ;;		 -> dbuf(32), 
  3009 ;;  p               2   20[COMRAM] int 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  w               2   25[COMRAM] int 
  3012 ;;  i               2   23[COMRAM] int 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3022 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3023 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3025 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3026 ;;Total ram usage:       11 bytes
  3027 ;; Hardware stack levels used: 1
  3028 ;; Hardware stack levels required when called: 3
  3029 ;; This function calls:
  3030 ;;		_fputc
  3031 ;;		_fputs
  3032 ;; This function is called by:
  3033 ;;		_dtoa
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text12
  3038   00294C                     __ptext12:
  3039                           	callstack 0
  3040   00294C                     _pad:
  3041                           	callstack 23
  3042   00294C                     
  3043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3044   00294C  BE16               	btfsc	(pad@p+1)^0,7,c
  3045   00294E  EFAB  F014         	goto	u961
  3046   002952  EFAD  F014         	goto	u960
  3047   002956                     u961:
  3048   002956  EFB3  F014         	goto	l2296
  3049   00295A                     u960:
  3050   00295A  C015  F01A         	movff	pad@p,pad@w
  3051   00295E  C016  F01B         	movff	pad@p+1,pad@w+1
  3052   002962  EFB7  F014         	goto	l1159
  3053   002966                     l2296:
  3054   002966  0E00               	movlw	0
  3055   002968  6E1B               	movwf	(pad@w+1)^0,c
  3056   00296A  0E00               	movlw	0
  3057   00296C  6E1A               	movwf	pad@w^0,c
  3058   00296E                     l1159:
  3059                           
  3060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3061   00296E  0E00               	movlw	0
  3062   002970  6E19               	movwf	(pad@i+1)^0,c
  3063   002972  0E00               	movlw	0
  3064   002974  6E18               	movwf	pad@i^0,c
  3065                           
  3066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3067   002976  EFC9  F014         	goto	l2302
  3068   00297A                     l2298:
  3069                           
  3070                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3071   00297A  0E00               	movlw	0
  3072   00297C  6E02               	movwf	(fputc@c+1)^0,c
  3073   00297E  0E20               	movlw	32
  3074   002980  6E01               	movwf	fputc@c^0,c
  3075   002982  C011  F003         	movff	pad@fp,fputc@fp
  3076   002986  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3077   00298A  EC85  F012         	call	_fputc	;wreg free
  3078   00298E                     
  3079                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3080   00298E  4A18               	infsnz	pad@i^0,f,c
  3081   002990  2A19               	incf	(pad@i+1)^0,f,c
  3082   002992                     l2302:
  3083                           
  3084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3085   002992  501A               	movf	pad@w^0,w,c
  3086   002994  5C18               	subwf	pad@i^0,w,c
  3087   002996  5019               	movf	(pad@i+1)^0,w,c
  3088   002998  0A80               	xorlw	128
  3089   00299A  6E17               	movwf	??_pad^0,c
  3090   00299C  501B               	movf	(pad@w+1)^0,w,c
  3091   00299E  0A80               	xorlw	128
  3092   0029A0  5817               	subwfb	??_pad^0,w,c
  3093   0029A2  A0D8               	btfss	status,0,c
  3094   0029A4  EFD6  F014         	goto	u971
  3095   0029A8  EFD8  F014         	goto	u970
  3096   0029AC                     u971:
  3097   0029AC  EFBD  F014         	goto	l2298
  3098   0029B0                     u970:
  3099   0029B0                     
  3100                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3101   0029B0  C013  F00A         	movff	pad@buf,fputs@s
  3102   0029B4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3103   0029B8  C011  F00C         	movff	pad@fp,fputs@fp
  3104   0029BC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3105   0029C0  EC0F  F016         	call	_fputs	;wreg free
  3106   0029C4  0012               	return		;funcret
  3107   0029C6                     __end_of_pad:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _fputs *****************
  3111 ;; Defined at:
  3112 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3115 ;;		 -> dbuf(32), 
  3116 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3117 ;;		 -> sprintf@f(11), 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  i               2   14[COMRAM] int 
  3120 ;;  c               1   13[COMRAM] unsigned char 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  2    9[COMRAM] int 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3131 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3133 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3134 ;;Total ram usage:        7 bytes
  3135 ;; Hardware stack levels used: 1
  3136 ;; Hardware stack levels required when called: 2
  3137 ;; This function calls:
  3138 ;;		_fputc
  3139 ;; This function is called by:
  3140 ;;		_pad
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text13
  3145   002C1E                     __ptext13:
  3146                           	callstack 0
  3147   002C1E                     _fputs:
  3148                           	callstack 23
  3149   002C1E  0E00               	movlw	0
  3150   002C20  6E10               	movwf	(fputs@i+1)^0,c
  3151   002C22  0E00               	movlw	0
  3152   002C24  6E0F               	movwf	fputs@i^0,c
  3153   002C26  EF20  F016         	goto	l2206
  3154   002C2A                     l2202:
  3155   002C2A  C00E  F001         	movff	fputs@c,fputc@c
  3156   002C2E  6A02               	clrf	(fputc@c+1)^0,c
  3157   002C30  C00C  F003         	movff	fputs@fp,fputc@fp
  3158   002C34  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3159   002C38  EC85  F012         	call	_fputc	;wreg free
  3160   002C3C  4A0F               	infsnz	fputs@i^0,f,c
  3161   002C3E  2A10               	incf	(fputs@i+1)^0,f,c
  3162   002C40                     l2206:
  3163   002C40  500F               	movf	fputs@i^0,w,c
  3164   002C42  240A               	addwf	fputs@s^0,w,c
  3165   002C44  6ED9               	movwf	fsr2l,c
  3166   002C46  5010               	movf	(fputs@i+1)^0,w,c
  3167   002C48  200B               	addwfc	(fputs@s+1)^0,w,c
  3168   002C4A  6EDA               	movwf	fsr2h,c
  3169   002C4C  50DF               	movf	indf2,w,c
  3170   002C4E  6E0E               	movwf	fputs@c^0,c
  3171   002C50  500E               	movf	fputs@c^0,w,c
  3172   002C52  A4D8               	btfss	status,2,c
  3173   002C54  EF2E  F016         	goto	u811
  3174   002C58  EF30  F016         	goto	u810
  3175   002C5C                     u811:
  3176   002C5C  EF15  F016         	goto	l2202
  3177   002C60                     u810:
  3178   002C60  0012               	return		;funcret
  3179   002C62                     __end_of_fputs:
  3180                           	callstack 0
  3181                           
  3182 ;; *************** function _fputc *****************
  3183 ;; Defined at:
  3184 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  c               2    0[COMRAM] int 
  3187 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3188 ;;		 -> sprintf@f(11), 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  2    0[COMRAM] int 
  3193 ;; Registers used:
  3194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3204 ;;Total ram usage:        9 bytes
  3205 ;; Hardware stack levels used: 1
  3206 ;; Hardware stack levels required when called: 1
  3207 ;; This function calls:
  3208 ;;		_putch
  3209 ;; This function is called by:
  3210 ;;		_pad
  3211 ;;		_vfpfcnvrt
  3212 ;;		_fputs
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text14
  3217   00250A                     __ptext14:
  3218                           	callstack 0
  3219   00250A                     _fputc:
  3220                           	callstack 26
  3221   00250A  5003               	movf	fputc@fp^0,w,c
  3222   00250C  1004               	iorwf	(fputc@fp+1)^0,w,c
  3223   00250E  B4D8               	btfsc	status,2,c
  3224   002510  EF8C  F012         	goto	u771
  3225   002514  EF8E  F012         	goto	u770
  3226   002518                     u771:
  3227   002518  EF97  F012         	goto	l2190
  3228   00251C                     u770:
  3229   00251C  5003               	movf	fputc@fp^0,w,c
  3230   00251E  1004               	iorwf	(fputc@fp+1)^0,w,c
  3231   002520  A4D8               	btfss	status,2,c
  3232   002522  EF95  F012         	goto	u781
  3233   002526  EF97  F012         	goto	u780
  3234   00252A                     u781:
  3235   00252A  EF9C  F012         	goto	l2192
  3236   00252E                     u780:
  3237   00252E                     l2190:
  3238   00252E  5001               	movf	fputc@c^0,w,c
  3239   002530  EC42  F017         	call	_putch
  3240   002534  EFE9  F012         	goto	l1207
  3241   002538                     l2192:
  3242   002538  EE20 F009          	lfsr	2,9
  3243   00253C  5003               	movf	fputc@fp^0,w,c
  3244   00253E  26D9               	addwf	fsr2l,f,c
  3245   002540  5004               	movf	(fputc@fp+1)^0,w,c
  3246   002542  22DA               	addwfc	fsr2h,f,c
  3247   002544  50DE               	movf	postinc2,w,c
  3248   002546  10DE               	iorwf	postinc2,w,c
  3249   002548  B4D8               	btfsc	status,2,c
  3250   00254A  EFA9  F012         	goto	u791
  3251   00254E  EFAB  F012         	goto	u790
  3252   002552                     u791:
  3253   002552  EFC6  F012         	goto	l2196
  3254   002556                     u790:
  3255   002556  EE20 F009          	lfsr	2,9
  3256   00255A  5003               	movf	fputc@fp^0,w,c
  3257   00255C  26D9               	addwf	fsr2l,f,c
  3258   00255E  5004               	movf	(fputc@fp+1)^0,w,c
  3259   002560  22DA               	addwfc	fsr2h,f,c
  3260   002562  EE10 F003          	lfsr	1,3
  3261   002566  5003               	movf	fputc@fp^0,w,c
  3262   002568  26E1               	addwf	fsr1l,f,c
  3263   00256A  5004               	movf	(fputc@fp+1)^0,w,c
  3264   00256C  22E2               	addwfc	fsr1h,f,c
  3265   00256E  50DE               	movf	postinc2,w,c
  3266   002570  5CE6               	subwf	postinc1,w,c
  3267   002572  50E6               	movf	postinc1,w,c
  3268   002574  0A80               	xorlw	128
  3269   002576  6E09               	movwf	(??_fputc+4)^0,c
  3270   002578  50DE               	movf	postinc2,w,c
  3271   00257A  0A80               	xorlw	128
  3272   00257C  5809               	subwfb	(??_fputc+4)^0,w,c
  3273   00257E  B0D8               	btfsc	status,0,c
  3274   002580  EFC4  F012         	goto	u801
  3275   002584  EFC6  F012         	goto	u800
  3276   002588                     u801:
  3277   002588  EFE9  F012         	goto	l1207
  3278   00258C                     u800:
  3279   00258C                     l2196:
  3280   00258C  EE20 F003          	lfsr	2,3
  3281   002590  5003               	movf	fputc@fp^0,w,c
  3282   002592  26D9               	addwf	fsr2l,f,c
  3283   002594  5004               	movf	(fputc@fp+1)^0,w,c
  3284   002596  22DA               	addwfc	fsr2h,f,c
  3285   002598  CFDE F005          	movff	postinc2,??_fputc
  3286   00259C  CFDD F006          	movff	postdec2,??_fputc+1
  3287   0025A0  C003  FFD9         	movff	fputc@fp,fsr2l
  3288   0025A4  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3289   0025A8  CFDE F007          	movff	postinc2,??_fputc+2
  3290   0025AC  CFDD F008          	movff	postdec2,??_fputc+3
  3291   0025B0  5005               	movf	??_fputc^0,w,c
  3292   0025B2  2407               	addwf	(??_fputc+2)^0,w,c
  3293   0025B4  6ED9               	movwf	fsr2l,c
  3294   0025B6  5006               	movf	(??_fputc+1)^0,w,c
  3295   0025B8  2008               	addwfc	(??_fputc+3)^0,w,c
  3296   0025BA  6EDA               	movwf	fsr2h,c
  3297   0025BC  C001  FFDF         	movff	fputc@c,indf2
  3298   0025C0  EE20 F003          	lfsr	2,3
  3299   0025C4  5003               	movf	fputc@fp^0,w,c
  3300   0025C6  26D9               	addwf	fsr2l,f,c
  3301   0025C8  5004               	movf	(fputc@fp+1)^0,w,c
  3302   0025CA  22DA               	addwfc	fsr2h,f,c
  3303   0025CC  2ADE               	incf	postinc2,f,c
  3304   0025CE  0E00               	movlw	0
  3305   0025D0  22DD               	addwfc	postdec2,f,c
  3306   0025D2                     l1207:
  3307   0025D2  0012               	return		;funcret
  3308   0025D4                     __end_of_fputc:
  3309                           	callstack 0
  3310                           
  3311 ;; *************** function _putch *****************
  3312 ;; Defined at:
  3313 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  c               1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  c               1    0[COMRAM] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;Total ram usage:        0 bytes
  3332 ;; Hardware stack levels used: 1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_fputc
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text15
  3341   002E84                     __ptext15:
  3342                           	callstack 0
  3343   002E84                     _putch:
  3344                           	callstack 26
  3345   002E84  0012               	return		;funcret
  3346   002E86                     __end_of_putch:
  3347                           	callstack 0
  3348                           
  3349 ;; *************** function ___aomod *****************
  3350 ;; Defined at:
  3351 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  dividend        8    0[COMRAM] long long 
  3354 ;;  divisor         8    8[COMRAM] long long 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  sign            1   17[COMRAM] unsigned char 
  3357 ;;  counter         1   16[COMRAM] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  8    0[COMRAM] long long 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3367 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3370 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3371 ;;Total ram usage:       18 bytes
  3372 ;; Hardware stack levels used: 1
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_dtoa
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text16
  3381   001ECE                     __ptext16:
  3382                           	callstack 0
  3383   001ECE                     ___aomod:
  3384                           	callstack 26
  3385   001ECE  0E00               	movlw	0
  3386   001ED0  6E12               	movwf	___aomod@sign^0,c
  3387   001ED2  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  3388   001ED4  EF70  F00F         	goto	u900
  3389   001ED8  EF6E  F00F         	goto	u901
  3390   001EDC                     u901:
  3391   001EDC  EF82  F00F         	goto	l2264
  3392   001EE0                     u900:
  3393   001EE0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3394   001EE2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3395   001EE4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3396   001EE6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3397   001EE8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3398   001EEA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3399   001EEC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3400   001EEE  6C01               	negf	___aomod@dividend^0,c
  3401   001EF0  0E00               	movlw	0
  3402   001EF2  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3403   001EF4  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3404   001EF6  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3405   001EF8  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3406   001EFA  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3407   001EFC  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3408   001EFE  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3409   001F00  0E01               	movlw	1
  3410   001F02  6E12               	movwf	___aomod@sign^0,c
  3411   001F04                     l2264:
  3412   001F04  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  3413   001F06  EF89  F00F         	goto	u910
  3414   001F0A  EF87  F00F         	goto	u911
  3415   001F0E                     u911:
  3416   001F0E  EF99  F00F         	goto	l2268
  3417   001F12                     u910:
  3418   001F12  1E10               	comf	(___aomod@divisor+7)^0,f,c
  3419   001F14  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  3420   001F16  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  3421   001F18  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  3422   001F1A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  3423   001F1C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  3424   001F1E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  3425   001F20  6C09               	negf	___aomod@divisor^0,c
  3426   001F22  0E00               	movlw	0
  3427   001F24  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  3428   001F26  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  3429   001F28  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  3430   001F2A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  3431   001F2C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  3432   001F2E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  3433   001F30  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  3434   001F32                     l2268:
  3435   001F32  5009               	movf	___aomod@divisor^0,w,c
  3436   001F34  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  3437   001F36  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  3438   001F38  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  3439   001F3A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  3440   001F3C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  3441   001F3E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  3442   001F40  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  3443   001F42  B4D8               	btfsc	status,2,c
  3444   001F44  EFA6  F00F         	goto	u921
  3445   001F48  EFA8  F00F         	goto	u920
  3446   001F4C                     u921:
  3447   001F4C  EFF0  F00F         	goto	l2284
  3448   001F50                     u920:
  3449   001F50  0E01               	movlw	1
  3450   001F52  6E11               	movwf	___aomod@counter^0,c
  3451   001F54  EFB6  F00F         	goto	l2274
  3452   001F58                     l2272:
  3453   001F58  90D8               	bcf	status,0,c
  3454   001F5A  3609               	rlcf	___aomod@divisor^0,f,c
  3455   001F5C  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  3456   001F5E  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  3457   001F60  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  3458   001F62  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  3459   001F64  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  3460   001F66  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  3461   001F68  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  3462   001F6A  2A11               	incf	___aomod@counter^0,f,c
  3463   001F6C                     l2274:
  3464   001F6C  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  3465   001F6E  EFBB  F00F         	goto	u931
  3466   001F72  EFBD  F00F         	goto	u930
  3467   001F76                     u931:
  3468   001F76  EFAC  F00F         	goto	l2272
  3469   001F7A                     u930:
  3470   001F7A                     l2276:
  3471   001F7A  5009               	movf	___aomod@divisor^0,w,c
  3472   001F7C  5C01               	subwf	___aomod@dividend^0,w,c
  3473   001F7E  500A               	movf	(___aomod@divisor+1)^0,w,c
  3474   001F80  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  3475   001F82  500B               	movf	(___aomod@divisor+2)^0,w,c
  3476   001F84  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  3477   001F86  500C               	movf	(___aomod@divisor+3)^0,w,c
  3478   001F88  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  3479   001F8A  500D               	movf	(___aomod@divisor+4)^0,w,c
  3480   001F8C  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  3481   001F8E  500E               	movf	(___aomod@divisor+5)^0,w,c
  3482   001F90  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  3483   001F92  500F               	movf	(___aomod@divisor+6)^0,w,c
  3484   001F94  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  3485   001F96  5010               	movf	(___aomod@divisor+7)^0,w,c
  3486   001F98  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  3487   001F9A  A0D8               	btfss	status,0,c
  3488   001F9C  EFD2  F00F         	goto	u941
  3489   001FA0  EFD4  F00F         	goto	u940
  3490   001FA4                     u941:
  3491   001FA4  EFE4  F00F         	goto	l2280
  3492   001FA8                     u940:
  3493   001FA8  5009               	movf	___aomod@divisor^0,w,c
  3494   001FAA  5E01               	subwf	___aomod@dividend^0,f,c
  3495   001FAC  500A               	movf	(___aomod@divisor+1)^0,w,c
  3496   001FAE  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  3497   001FB0  500B               	movf	(___aomod@divisor+2)^0,w,c
  3498   001FB2  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  3499   001FB4  500C               	movf	(___aomod@divisor+3)^0,w,c
  3500   001FB6  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  3501   001FB8  500D               	movf	(___aomod@divisor+4)^0,w,c
  3502   001FBA  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  3503   001FBC  500E               	movf	(___aomod@divisor+5)^0,w,c
  3504   001FBE  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  3505   001FC0  500F               	movf	(___aomod@divisor+6)^0,w,c
  3506   001FC2  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  3507   001FC4  5010               	movf	(___aomod@divisor+7)^0,w,c
  3508   001FC6  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  3509   001FC8                     l2280:
  3510   001FC8  90D8               	bcf	status,0,c
  3511   001FCA  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  3512   001FCC  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  3513   001FCE  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  3514   001FD0  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  3515   001FD2  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  3516   001FD4  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  3517   001FD6  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  3518   001FD8  3209               	rrcf	___aomod@divisor^0,f,c
  3519   001FDA  2E11               	decfsz	___aomod@counter^0,f,c
  3520   001FDC  EFBD  F00F         	goto	l2276
  3521   001FE0                     l2284:
  3522   001FE0  5012               	movf	___aomod@sign^0,w,c
  3523   001FE2  B4D8               	btfsc	status,2,c
  3524   001FE4  EFF6  F00F         	goto	u951
  3525   001FE8  EFF8  F00F         	goto	u950
  3526   001FEC                     u951:
  3527   001FEC  EF08  F010         	goto	l2288
  3528   001FF0                     u950:
  3529   001FF0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3530   001FF2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3531   001FF4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3532   001FF6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3533   001FF8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3534   001FFA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3535   001FFC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3536   001FFE  6C01               	negf	___aomod@dividend^0,c
  3537   002000  0E00               	movlw	0
  3538   002002  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3539   002004  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3540   002006  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3541   002008  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3542   00200A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3543   00200C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3544   00200E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3545   002010                     l2288:
  3546   002010  C001  F001         	movff	___aomod@dividend,?___aomod
  3547   002014  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3548   002018  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3549   00201C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3550   002020  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3551   002024  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3552   002028  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3553   00202C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3554   002030  0012               	return		;funcret
  3555   002032                     __end_of___aomod:
  3556                           	callstack 0
  3557                           
  3558 ;; *************** function ___aodiv *****************
  3559 ;; Defined at:
  3560 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  dividend        8    0[COMRAM] long long 
  3563 ;;  divisor         8    8[COMRAM] long long 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  quotient        8   18[COMRAM] long long 
  3566 ;;  sign            1   17[COMRAM] unsigned char 
  3567 ;;  counter         1   16[COMRAM] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  8    0[COMRAM] long long 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3577 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3578 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;Total ram usage:       26 bytes
  3582 ;; Hardware stack levels used: 1
  3583 ;; This function calls:
  3584 ;;		Nothing
  3585 ;; This function is called by:
  3586 ;;		_dtoa
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text17
  3591   001BDA                     __ptext17:
  3592                           	callstack 0
  3593   001BDA                     ___aodiv:
  3594                           	callstack 26
  3595   001BDA  0E00               	movlw	0
  3596   001BDC  6E12               	movwf	___aodiv@sign^0,c
  3597   001BDE  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3598   001BE0  EFF6  F00D         	goto	u830
  3599   001BE4  EFF4  F00D         	goto	u831
  3600   001BE8                     u831:
  3601   001BE8  EF08  F00E         	goto	l2220
  3602   001BEC                     u830:
  3603   001BEC  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3604   001BEE  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3605   001BF0  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3606   001BF2  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3607   001BF4  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3608   001BF6  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3609   001BF8  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3610   001BFA  6C09               	negf	___aodiv@divisor^0,c
  3611   001BFC  0E00               	movlw	0
  3612   001BFE  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3613   001C00  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3614   001C02  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3615   001C04  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3616   001C06  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3617   001C08  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3618   001C0A  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3619   001C0C  0E01               	movlw	1
  3620   001C0E  6E12               	movwf	___aodiv@sign^0,c
  3621   001C10                     l2220:
  3622   001C10  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3623   001C12  EF0F  F00E         	goto	u840
  3624   001C16  EF0D  F00E         	goto	u841
  3625   001C1A                     u841:
  3626   001C1A  EF21  F00E         	goto	l2226
  3627   001C1E                     u840:
  3628   001C1E  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3629   001C20  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3630   001C22  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3631   001C24  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3632   001C26  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3633   001C28  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3634   001C2A  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3635   001C2C  6C01               	negf	___aodiv@dividend^0,c
  3636   001C2E  0E00               	movlw	0
  3637   001C30  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3638   001C32  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3639   001C34  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3640   001C36  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3641   001C38  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3642   001C3A  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3643   001C3C  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3644   001C3E  0E01               	movlw	1
  3645   001C40  1A12               	xorwf	___aodiv@sign^0,f,c
  3646   001C42                     l2226:
  3647   001C42  EE20  F013         	lfsr	2,___aodiv@quotient
  3648   001C46  0E07               	movlw	7
  3649   001C48                     u851:
  3650   001C48  6ADE               	clrf	postinc2,c
  3651   001C4A  06E8               	decf	wreg,f,c
  3652   001C4C  E2FD               	bc	u851
  3653   001C4E  5009               	movf	___aodiv@divisor^0,w,c
  3654   001C50  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3655   001C52  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3656   001C54  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3657   001C56  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3658   001C58  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3659   001C5A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3660   001C5C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3661   001C5E  B4D8               	btfsc	status,2,c
  3662   001C60  EF34  F00E         	goto	u861
  3663   001C64  EF36  F00E         	goto	u860
  3664   001C68                     u861:
  3665   001C68  EF88  F00E         	goto	l2248
  3666   001C6C                     u860:
  3667   001C6C  0E01               	movlw	1
  3668   001C6E  6E11               	movwf	___aodiv@counter^0,c
  3669   001C70  EF44  F00E         	goto	l2234
  3670   001C74                     l2232:
  3671   001C74  90D8               	bcf	status,0,c
  3672   001C76  3609               	rlcf	___aodiv@divisor^0,f,c
  3673   001C78  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3674   001C7A  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3675   001C7C  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3676   001C7E  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3677   001C80  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3678   001C82  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3679   001C84  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3680   001C86  2A11               	incf	___aodiv@counter^0,f,c
  3681   001C88                     l2234:
  3682   001C88  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3683   001C8A  EF49  F00E         	goto	u871
  3684   001C8E  EF4B  F00E         	goto	u870
  3685   001C92                     u871:
  3686   001C92  EF3A  F00E         	goto	l2232
  3687   001C96                     u870:
  3688   001C96                     l2236:
  3689   001C96  90D8               	bcf	status,0,c
  3690   001C98  3613               	rlcf	___aodiv@quotient^0,f,c
  3691   001C9A  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3692   001C9C  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3693   001C9E  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3694   001CA0  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3695   001CA2  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3696   001CA4  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3697   001CA6  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3698   001CA8  5009               	movf	___aodiv@divisor^0,w,c
  3699   001CAA  5C01               	subwf	___aodiv@dividend^0,w,c
  3700   001CAC  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3701   001CAE  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3702   001CB0  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3703   001CB2  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3704   001CB4  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3705   001CB6  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3706   001CB8  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3707   001CBA  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3708   001CBC  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3709   001CBE  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3710   001CC0  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3711   001CC2  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3712   001CC4  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3713   001CC6  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3714   001CC8  A0D8               	btfss	status,0,c
  3715   001CCA  EF69  F00E         	goto	u881
  3716   001CCE  EF6B  F00E         	goto	u880
  3717   001CD2                     u881:
  3718   001CD2  EF7C  F00E         	goto	l2244
  3719   001CD6                     u880:
  3720   001CD6  5009               	movf	___aodiv@divisor^0,w,c
  3721   001CD8  5E01               	subwf	___aodiv@dividend^0,f,c
  3722   001CDA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3723   001CDC  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3724   001CDE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3725   001CE0  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3726   001CE2  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3727   001CE4  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3728   001CE6  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3729   001CE8  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3730   001CEA  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3731   001CEC  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3732   001CEE  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3733   001CF0  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3734   001CF2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3735   001CF4  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3736   001CF6  8013               	bsf	___aodiv@quotient^0,0,c
  3737   001CF8                     l2244:
  3738   001CF8  90D8               	bcf	status,0,c
  3739   001CFA  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3740   001CFC  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3741   001CFE  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3742   001D00  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3743   001D02  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3744   001D04  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3745   001D06  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3746   001D08  3209               	rrcf	___aodiv@divisor^0,f,c
  3747   001D0A  2E11               	decfsz	___aodiv@counter^0,f,c
  3748   001D0C  EF4B  F00E         	goto	l2236
  3749   001D10                     l2248:
  3750   001D10  5012               	movf	___aodiv@sign^0,w,c
  3751   001D12  B4D8               	btfsc	status,2,c
  3752   001D14  EF8E  F00E         	goto	u891
  3753   001D18  EF90  F00E         	goto	u890
  3754   001D1C                     u891:
  3755   001D1C  EFA0  F00E         	goto	l2252
  3756   001D20                     u890:
  3757   001D20  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3758   001D22  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3759   001D24  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3760   001D26  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3761   001D28  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3762   001D2A  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3763   001D2C  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3764   001D2E  6C13               	negf	___aodiv@quotient^0,c
  3765   001D30  0E00               	movlw	0
  3766   001D32  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3767   001D34  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3768   001D36  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3769   001D38  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3770   001D3A  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3771   001D3C  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3772   001D3E  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3773   001D40                     l2252:
  3774   001D40  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3775   001D44  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3776   001D48  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3777   001D4C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3778   001D50  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3779   001D54  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3780   001D58  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3781   001D5C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3782   001D60  0012               	return		;funcret
  3783   001D62                     __end_of___aodiv:
  3784                           	callstack 0
  3785                           
  3786 ;; *************** function _sendStringSerial4 *****************
  3787 ;; Defined at:
  3788 ;;		line 39 in file "serial.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  string          2    1[COMRAM] PTR unsigned char 
  3791 ;;		 -> main@buf(150), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;Total ram usage:        2 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; Hardware stack levels required when called: 1
  3810 ;; This function calls:
  3811 ;;		_sendCharSerial4
  3812 ;; This function is called by:
  3813 ;;		_main
  3814 ;;		_clear_read_calibration
  3815 ;;		_card_response
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text18
  3820   002D18                     __ptext18:
  3821                           	callstack 0
  3822   002D18                     _sendStringSerial4:
  3823                           	callstack 29
  3824   002D18                     
  3825                           ;serial.c: 40:  while(*string != 0) {
  3826   002D18  EF97  F016         	goto	l2694
  3827   002D1C                     l2690:
  3828                           
  3829                           ;serial.c: 41:         sendCharSerial4(*string++);
  3830   002D1C  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3831   002D20  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3832   002D24  50DF               	movf	indf2,w,c
  3833   002D26  EC21  F017         	call	_sendCharSerial4
  3834   002D2A  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3835   002D2C  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3836   002D2E                     l2694:
  3837                           
  3838                           ;serial.c: 40:  while(*string != 0) {
  3839   002D2E  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3840   002D32  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3841   002D36  50DF               	movf	indf2,w,c
  3842   002D38  A4D8               	btfss	status,2,c
  3843   002D3A  EFA1  F016         	goto	u1321
  3844   002D3E  EFA3  F016         	goto	u1320
  3845   002D42                     u1321:
  3846   002D42  EF8E  F016         	goto	l2690
  3847   002D46                     u1320:
  3848   002D46  0012               	return		;funcret
  3849   002D48                     __end_of_sendStringSerial4:
  3850                           	callstack 0
  3851                           
  3852 ;; *************** function _sendCharSerial4 *****************
  3853 ;; Defined at:
  3854 ;;		line 32 in file "serial.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  charToSend      1    wreg     unsigned char 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  charToSend      1    0[COMRAM] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3872 ;;Total ram usage:        1 bytes
  3873 ;; Hardware stack levels used: 1
  3874 ;; This function calls:
  3875 ;;		Nothing
  3876 ;; This function is called by:
  3877 ;;		_sendStringSerial4
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text19
  3882   002E42                     __ptext19:
  3883                           	callstack 0
  3884   002E42                     _sendCharSerial4:
  3885                           	callstack 29
  3886                           
  3887                           ;incstack = 0
  3888                           ;sendCharSerial4@charToSend stored from wreg
  3889   002E42  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3890   002E44                     l408:
  3891   002E44  010E               	movlb	14	; () banked
  3892   002E46  A537               	btfss	55,2,b	;volatile
  3893   002E48  EF28  F017         	goto	u1251
  3894   002E4C  EF2A  F017         	goto	u1250
  3895   002E50                     u1251:
  3896   002E50  EF22  F017         	goto	l408
  3897   002E54                     u1250:
  3898   002E54                     
  3899                           ; BSR set to: 14
  3900                           ;serial.c: 34:     TX4REG = charToSend;
  3901   002E54  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3902   002E58                     
  3903                           ; BSR set to: 14
  3904   002E58  0012               	return		;funcret
  3905   002E5A                     __end_of_sendCharSerial4:
  3906                           	callstack 0
  3907                           
  3908 ;; *************** function _normalise_readings *****************
  3909 ;; Defined at:
  3910 ;;		line 85 in file "colour_identify.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3913 ;;		 -> main@buf(150), 
  3914 ;;  clear_read      2   24[COMRAM] unsigned int 
  3915 ;;  red_read        2   26[COMRAM] unsigned int 
  3916 ;;  green_read      2   28[COMRAM] unsigned int 
  3917 ;;  blue_read       2   30[COMRAM] unsigned int 
  3918 ;;  expected_val    2   32[COMRAM] PTR unsigned int [9]
  3919 ;;		 -> main@expected_values(72), 
  3920 ;;  normalised_v    2   34[COMRAM] PTR unsigned int [9]
  3921 ;;		 -> card_response@normalised_values(72), 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  difference      2   44[COMRAM] unsigned int 
  3924 ;;  i               1   46[COMRAM] enum E14551
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3934 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;Total ram usage:       25 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; Hardware stack levels required when called: 1
  3941 ;; This function calls:
  3942 ;;		___lwdiv
  3943 ;;		___wmul
  3944 ;;		_abs
  3945 ;; This function is called by:
  3946 ;;		_card_response
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text20
  3951   001190                     __ptext20:
  3952                           	callstack 0
  3953   001190                     _normalise_readings:
  3954                           	callstack 28
  3955   001190                     
  3956                           ;colour_identify.c: 92:     for(colour i = RED; i<= BLACK; i++){
  3957   001190  0E01               	movlw	1
  3958   001192  6E2F               	movwf	normalise_readings@i^0,c
  3959   001194                     l2702:
  3960                           
  3961                           ;colour_identify.c: 96:         unsigned int difference = abs(clear_read - expected_valu
      +                          es[CLEAR][i]);
  3962   001194  502F               	movf	normalise_readings@i^0,w,c
  3963   001196  0D02               	mullw	2
  3964   001198  CFF3 F025          	movff	prodl,??_normalise_readings
  3965   00119C  CFF4 F026          	movff	prodh,??_normalise_readings+1
  3966   0011A0  5025               	movf	??_normalise_readings^0,w,c
  3967   0011A2  2421               	addwf	normalise_readings@expected_values^0,w,c
  3968   0011A4  6ED9               	movwf	fsr2l,c
  3969   0011A6  5026               	movf	(??_normalise_readings+1)^0,w,c
  3970   0011A8  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3971   0011AA  6EDA               	movwf	fsr2h,c
  3972   0011AC  CFDE F027          	movff	postinc2,??_normalise_readings+2
  3973   0011B0  CFDD F028          	movff	postdec2,??_normalise_readings+3
  3974   0011B4  5027               	movf	(??_normalise_readings+2)^0,w,c
  3975   0011B6  5C19               	subwf	normalise_readings@clear_read^0,w,c
  3976   0011B8  6E13               	movwf	abs@a^0,c
  3977   0011BA  5028               	movf	(??_normalise_readings+3)^0,w,c
  3978   0011BC  581A               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3979   0011BE  6E14               	movwf	(abs@a+1)^0,c
  3980   0011C0  EC52  F016         	call	_abs	;wreg free
  3981   0011C4  C013  F02D         	movff	?_abs,normalise_readings@difference
  3982   0011C8  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  3983                           
  3984                           ;colour_identify.c: 97:         normalised_values[CLEAR][i] = (difference*100) / expecte
      +                          d_values[CLEAR][i];
  3985   0011CC  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  3986   0011D0  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3987   0011D4  0E00               	movlw	0
  3988   0011D6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3989   0011D8  0E64               	movlw	100
  3990   0011DA  6E03               	movwf	___wmul@multiplicand^0,c
  3991   0011DC  ECCD  F016         	call	___wmul	;wreg free
  3992   0011E0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3993   0011E4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3994   0011E8  502F               	movf	normalise_readings@i^0,w,c
  3995   0011EA  0D02               	mullw	2
  3996   0011EC  CFF3 F025          	movff	prodl,??_normalise_readings
  3997   0011F0  CFF4 F026          	movff	prodh,??_normalise_readings+1
  3998   0011F4  5025               	movf	??_normalise_readings^0,w,c
  3999   0011F6  2421               	addwf	normalise_readings@expected_values^0,w,c
  4000   0011F8  6ED9               	movwf	fsr2l,c
  4001   0011FA  5026               	movf	(??_normalise_readings+1)^0,w,c
  4002   0011FC  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4003   0011FE  6EDA               	movwf	fsr2h,c
  4004   001200  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4005   001204  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4006   001208  ECE3  F014         	call	___lwdiv	;wreg free
  4007   00120C  502F               	movf	normalise_readings@i^0,w,c
  4008   00120E  0D02               	mullw	2
  4009   001210  CFF3 F027          	movff	prodl,??_normalise_readings+2
  4010   001214  CFF4 F028          	movff	prodh,??_normalise_readings+3
  4011   001218  5027               	movf	(??_normalise_readings+2)^0,w,c
  4012   00121A  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4013   00121C  6ED9               	movwf	fsr2l,c
  4014   00121E  5028               	movf	(??_normalise_readings+3)^0,w,c
  4015   001220  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4016   001222  6EDA               	movwf	fsr2h,c
  4017   001224  C007  FFDE         	movff	?___lwdiv,postinc2
  4018   001228  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4019                           
  4020                           ;colour_identify.c: 100:         difference = abs(red_read - expected_values[RED][i]);
  4021   00122C  502F               	movf	normalise_readings@i^0,w,c
  4022   00122E  0D02               	mullw	2
  4023   001230  CFF3 F025          	movff	prodl,??_normalise_readings
  4024   001234  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4025   001238  5025               	movf	??_normalise_readings^0,w,c
  4026   00123A  2421               	addwf	normalise_readings@expected_values^0,w,c
  4027   00123C  6E27               	movwf	(??_normalise_readings+2)^0,c
  4028   00123E  5026               	movf	(??_normalise_readings+1)^0,w,c
  4029   001240  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4030   001242  6E28               	movwf	(??_normalise_readings+3)^0,c
  4031   001244  0E12               	movlw	18
  4032   001246  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4033   001248  6ED9               	movwf	fsr2l,c
  4034   00124A  0E00               	movlw	0
  4035   00124C  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4036   00124E  6EDA               	movwf	fsr2h,c
  4037   001250  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4038   001254  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4039   001258  5029               	movf	(??_normalise_readings+4)^0,w,c
  4040   00125A  5C1B               	subwf	normalise_readings@red_read^0,w,c
  4041   00125C  6E13               	movwf	abs@a^0,c
  4042   00125E  502A               	movf	(??_normalise_readings+5)^0,w,c
  4043   001260  581C               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4044   001262  6E14               	movwf	(abs@a+1)^0,c
  4045   001264  EC52  F016         	call	_abs	;wreg free
  4046   001268  C013  F02D         	movff	?_abs,normalise_readings@difference
  4047   00126C  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4048                           
  4049                           ;colour_identify.c: 101:         normalised_values[RED][i] = (difference*100) / expected
      +                          _values[RED][i];
  4050   001270  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4051   001274  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4052   001278  0E00               	movlw	0
  4053   00127A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4054   00127C  0E64               	movlw	100
  4055   00127E  6E03               	movwf	___wmul@multiplicand^0,c
  4056   001280  ECCD  F016         	call	___wmul	;wreg free
  4057   001284  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4058   001288  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4059   00128C  502F               	movf	normalise_readings@i^0,w,c
  4060   00128E  0D02               	mullw	2
  4061   001290  CFF3 F025          	movff	prodl,??_normalise_readings
  4062   001294  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4063   001298  5025               	movf	??_normalise_readings^0,w,c
  4064   00129A  2421               	addwf	normalise_readings@expected_values^0,w,c
  4065   00129C  6E27               	movwf	(??_normalise_readings+2)^0,c
  4066   00129E  5026               	movf	(??_normalise_readings+1)^0,w,c
  4067   0012A0  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4068   0012A2  6E28               	movwf	(??_normalise_readings+3)^0,c
  4069   0012A4  0E12               	movlw	18
  4070   0012A6  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4071   0012A8  6ED9               	movwf	fsr2l,c
  4072   0012AA  0E00               	movlw	0
  4073   0012AC  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4074   0012AE  6EDA               	movwf	fsr2h,c
  4075   0012B0  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4076   0012B4  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4077   0012B8  ECE3  F014         	call	___lwdiv	;wreg free
  4078   0012BC  502F               	movf	normalise_readings@i^0,w,c
  4079   0012BE  0D02               	mullw	2
  4080   0012C0  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4081   0012C4  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4082   0012C8  5029               	movf	(??_normalise_readings+4)^0,w,c
  4083   0012CA  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4084   0012CC  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4085   0012CE  502A               	movf	(??_normalise_readings+5)^0,w,c
  4086   0012D0  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4087   0012D2  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4088   0012D4  0E12               	movlw	18
  4089   0012D6  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4090   0012D8  6ED9               	movwf	fsr2l,c
  4091   0012DA  0E00               	movlw	0
  4092   0012DC  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4093   0012DE  6EDA               	movwf	fsr2h,c
  4094   0012E0  C007  FFDE         	movff	?___lwdiv,postinc2
  4095   0012E4  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4096                           
  4097                           ;colour_identify.c: 104:         difference = abs(green_read - expected_values[GREEN][i]
      +                          );
  4098   0012E8  502F               	movf	normalise_readings@i^0,w,c
  4099   0012EA  0D02               	mullw	2
  4100   0012EC  CFF3 F025          	movff	prodl,??_normalise_readings
  4101   0012F0  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4102   0012F4  5025               	movf	??_normalise_readings^0,w,c
  4103   0012F6  2421               	addwf	normalise_readings@expected_values^0,w,c
  4104   0012F8  6E27               	movwf	(??_normalise_readings+2)^0,c
  4105   0012FA  5026               	movf	(??_normalise_readings+1)^0,w,c
  4106   0012FC  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4107   0012FE  6E28               	movwf	(??_normalise_readings+3)^0,c
  4108   001300  0E24               	movlw	36
  4109   001302  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4110   001304  6ED9               	movwf	fsr2l,c
  4111   001306  0E00               	movlw	0
  4112   001308  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4113   00130A  6EDA               	movwf	fsr2h,c
  4114   00130C  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4115   001310  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4116   001314  5029               	movf	(??_normalise_readings+4)^0,w,c
  4117   001316  5C1D               	subwf	normalise_readings@green_read^0,w,c
  4118   001318  6E13               	movwf	abs@a^0,c
  4119   00131A  502A               	movf	(??_normalise_readings+5)^0,w,c
  4120   00131C  581E               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4121   00131E  6E14               	movwf	(abs@a+1)^0,c
  4122   001320  EC52  F016         	call	_abs	;wreg free
  4123   001324  C013  F02D         	movff	?_abs,normalise_readings@difference
  4124   001328  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4125                           
  4126                           ;colour_identify.c: 105:         normalised_values[GREEN][i] = (difference*100) / expect
      +                          ed_values[GREEN][i];
  4127   00132C  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4128   001330  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4129   001334  0E00               	movlw	0
  4130   001336  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4131   001338  0E64               	movlw	100
  4132   00133A  6E03               	movwf	___wmul@multiplicand^0,c
  4133   00133C  ECCD  F016         	call	___wmul	;wreg free
  4134   001340  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4135   001344  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4136   001348  502F               	movf	normalise_readings@i^0,w,c
  4137   00134A  0D02               	mullw	2
  4138   00134C  CFF3 F025          	movff	prodl,??_normalise_readings
  4139   001350  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4140   001354  5025               	movf	??_normalise_readings^0,w,c
  4141   001356  2421               	addwf	normalise_readings@expected_values^0,w,c
  4142   001358  6E27               	movwf	(??_normalise_readings+2)^0,c
  4143   00135A  5026               	movf	(??_normalise_readings+1)^0,w,c
  4144   00135C  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4145   00135E  6E28               	movwf	(??_normalise_readings+3)^0,c
  4146   001360  0E24               	movlw	36
  4147   001362  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4148   001364  6ED9               	movwf	fsr2l,c
  4149   001366  0E00               	movlw	0
  4150   001368  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4151   00136A  6EDA               	movwf	fsr2h,c
  4152   00136C  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4153   001370  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4154   001374  ECE3  F014         	call	___lwdiv	;wreg free
  4155   001378  502F               	movf	normalise_readings@i^0,w,c
  4156   00137A  0D02               	mullw	2
  4157   00137C  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4158   001380  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4159   001384  5029               	movf	(??_normalise_readings+4)^0,w,c
  4160   001386  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4161   001388  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4162   00138A  502A               	movf	(??_normalise_readings+5)^0,w,c
  4163   00138C  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4164   00138E  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4165   001390  0E24               	movlw	36
  4166   001392  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4167   001394  6ED9               	movwf	fsr2l,c
  4168   001396  0E00               	movlw	0
  4169   001398  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4170   00139A  6EDA               	movwf	fsr2h,c
  4171   00139C  C007  FFDE         	movff	?___lwdiv,postinc2
  4172   0013A0  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4173                           
  4174                           ;colour_identify.c: 108:         difference = abs(blue_read - expected_values[BLUE][i]);
  4175   0013A4  502F               	movf	normalise_readings@i^0,w,c
  4176   0013A6  0D02               	mullw	2
  4177   0013A8  CFF3 F025          	movff	prodl,??_normalise_readings
  4178   0013AC  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4179   0013B0  5025               	movf	??_normalise_readings^0,w,c
  4180   0013B2  2421               	addwf	normalise_readings@expected_values^0,w,c
  4181   0013B4  6E27               	movwf	(??_normalise_readings+2)^0,c
  4182   0013B6  5026               	movf	(??_normalise_readings+1)^0,w,c
  4183   0013B8  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4184   0013BA  6E28               	movwf	(??_normalise_readings+3)^0,c
  4185   0013BC  0E36               	movlw	54
  4186   0013BE  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4187   0013C0  6ED9               	movwf	fsr2l,c
  4188   0013C2  0E00               	movlw	0
  4189   0013C4  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4190   0013C6  6EDA               	movwf	fsr2h,c
  4191   0013C8  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4192   0013CC  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4193   0013D0  5029               	movf	(??_normalise_readings+4)^0,w,c
  4194   0013D2  5C1F               	subwf	normalise_readings@blue_read^0,w,c
  4195   0013D4  6E13               	movwf	abs@a^0,c
  4196   0013D6  502A               	movf	(??_normalise_readings+5)^0,w,c
  4197   0013D8  5820               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4198   0013DA  6E14               	movwf	(abs@a+1)^0,c
  4199   0013DC  EC52  F016         	call	_abs	;wreg free
  4200   0013E0  C013  F02D         	movff	?_abs,normalise_readings@difference
  4201   0013E4  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4202                           
  4203                           ;colour_identify.c: 109:         normalised_values[BLUE][i] = (difference*100) / expecte
      +                          d_values[BLUE][i];
  4204   0013E8  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4205   0013EC  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4206   0013F0  0E00               	movlw	0
  4207   0013F2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4208   0013F4  0E64               	movlw	100
  4209   0013F6  6E03               	movwf	___wmul@multiplicand^0,c
  4210   0013F8  ECCD  F016         	call	___wmul	;wreg free
  4211   0013FC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4212   001400  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4213   001404  502F               	movf	normalise_readings@i^0,w,c
  4214   001406  0D02               	mullw	2
  4215   001408  CFF3 F025          	movff	prodl,??_normalise_readings
  4216   00140C  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4217   001410  5025               	movf	??_normalise_readings^0,w,c
  4218   001412  2421               	addwf	normalise_readings@expected_values^0,w,c
  4219   001414  6E27               	movwf	(??_normalise_readings+2)^0,c
  4220   001416  5026               	movf	(??_normalise_readings+1)^0,w,c
  4221   001418  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4222   00141A  6E28               	movwf	(??_normalise_readings+3)^0,c
  4223   00141C  0E36               	movlw	54
  4224   00141E  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4225   001420  6ED9               	movwf	fsr2l,c
  4226   001422  0E00               	movlw	0
  4227   001424  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4228   001426  6EDA               	movwf	fsr2h,c
  4229   001428  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4230   00142C  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4231   001430  ECE3  F014         	call	___lwdiv	;wreg free
  4232   001434  502F               	movf	normalise_readings@i^0,w,c
  4233   001436  0D02               	mullw	2
  4234   001438  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4235   00143C  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4236   001440  5029               	movf	(??_normalise_readings+4)^0,w,c
  4237   001442  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4238   001444  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4239   001446  502A               	movf	(??_normalise_readings+5)^0,w,c
  4240   001448  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4241   00144A  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4242   00144C  0E36               	movlw	54
  4243   00144E  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4244   001450  6ED9               	movwf	fsr2l,c
  4245   001452  0E00               	movlw	0
  4246   001454  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4247   001456  6EDA               	movwf	fsr2h,c
  4248   001458  C007  FFDE         	movff	?___lwdiv,postinc2
  4249   00145C  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4250   001460                     
  4251                           ;colour_identify.c: 110:     }
  4252   001460  2A2F               	incf	normalise_readings@i^0,f,c
  4253   001462  0E09               	movlw	9
  4254   001464  642F               	cpfsgt	normalise_readings@i^0,c
  4255   001466  EF37  F00A         	goto	u1331
  4256   00146A  EF39  F00A         	goto	u1330
  4257   00146E                     u1331:
  4258   00146E  EFCA  F008         	goto	l2702
  4259   001472                     u1330:
  4260   001472  0012               	return		;funcret
  4261   001474                     __end_of_normalise_readings:
  4262                           	callstack 0
  4263                           
  4264 ;; *************** function _abs *****************
  4265 ;; Defined at:
  4266 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  a               2   18[COMRAM] int 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  2   18[COMRAM] int 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;Total ram usage:        4 bytes
  4285 ;; Hardware stack levels used: 1
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_normalise_readings
  4290 ;;		_dtoa
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text21
  4295   002CA4                     __ptext21:
  4296                           	callstack 0
  4297   002CA4                     _abs:
  4298                           	callstack 26
  4299   002CA4  BE14               	btfsc	(abs@a+1)^0,7,c
  4300   002CA6  EF5F  F016         	goto	u820
  4301   002CAA  5014               	movf	(abs@a+1)^0,w,c
  4302   002CAC  E106               	bnz	u821
  4303   002CAE  0413               	decf	abs@a^0,w,c
  4304   002CB0  B0D8               	btfsc	status,0,c
  4305   002CB2  EF5D  F016         	goto	u821
  4306   002CB6  EF5F  F016         	goto	u820
  4307   002CBA                     u821:
  4308   002CBA  EF6D  F016         	goto	l1127
  4309   002CBE                     u820:
  4310   002CBE  C013  F015         	movff	abs@a,??_abs
  4311   002CC2  C014  F016         	movff	abs@a+1,??_abs+1
  4312   002CC6  1E15               	comf	??_abs^0,f,c
  4313   002CC8  1E16               	comf	(??_abs+1)^0,f,c
  4314   002CCA  4A15               	infsnz	??_abs^0,f,c
  4315   002CCC  2A16               	incf	(??_abs+1)^0,f,c
  4316   002CCE  C015  F013         	movff	??_abs,?_abs
  4317   002CD2  C016  F014         	movff	??_abs+1,?_abs+1
  4318   002CD6  EF71  F016         	goto	l1130
  4319   002CDA                     l1127:
  4320   002CDA  C013  F013         	movff	abs@a,?_abs
  4321   002CDE  C014  F014         	movff	abs@a+1,?_abs+1
  4322   002CE2                     l1130:
  4323   002CE2  0012               	return		;funcret
  4324   002CE4                     __end_of_abs:
  4325                           	callstack 0
  4326                           
  4327 ;; *************** function _motor_response *****************
  4328 ;; Defined at:
  4329 ;;		line 139 in file "colour_identify.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  card            1    wreg     enum E14551
  4332 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4333 ;;		 -> main@motorL(9), 
  4334 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4335 ;;		 -> main@motorR(9), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  card            1   33[COMRAM] enum E14551
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;Total ram usage:        7 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; Hardware stack levels required when called: 3
  4354 ;; This function calls:
  4355 ;;		_reverseFullSpeed
  4356 ;;		_stop
  4357 ;;		_turnLeft45
  4358 ;;		_turnRight45
  4359 ;; This function is called by:
  4360 ;;		_card_response
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text22
  4365   000E7A                     __ptext22:
  4366                           	callstack 0
  4367   000E7A                     _motor_response:
  4368                           	callstack 26
  4369                           
  4370                           ;incstack = 0
  4371                           ;motor_response@card stored from wreg
  4372   000E7A  6E22               	movwf	motor_response@card^0,c
  4373   000E7C                     
  4374                           ;colour_identify.c: 141:     switch (card){
  4375   000E7C  EF96  F008         	goto	l2856
  4376   000E80                     l2746:
  4377                           
  4378                           ;colour_identify.c: 143:             reverseFullSpeed(mL,mR);
  4379   000E80  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4380   000E84  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4381   000E88  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4382   000E8C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4383   000E90  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4384   000E94                     
  4385                           ;colour_identify.c: 144:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4386   000E94  0E05               	movlw	5
  4387   000E96  6E21               	movwf	(??_motor_response+1)^0,c
  4388   000E98  0E0F               	movlw	15
  4389   000E9A  6E20               	movwf	??_motor_response^0,c
  4390   000E9C  0EF1               	movlw	241
  4391   000E9E                     u1557:
  4392   000E9E  2EE8               	decfsz	wreg,f,c
  4393   000EA0  D7FE               	bra	u1557
  4394   000EA2  2E20               	decfsz	??_motor_response^0,f,c
  4395   000EA4  D7FC               	bra	u1557
  4396   000EA6  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4397   000EA8  D7FA               	bra	u1557
  4398   000EAA  F000               	nop	
  4399   000EAC                     l2750:
  4400                           
  4401                           ;colour_identify.c: 145:             turnRight45(mL,mR);
  4402   000EAC  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4403   000EB0  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4404   000EB4  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4405   000EB8  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4406   000EBC  EC41  F013         	call	_turnRight45	;wreg free
  4407   000EC0                     
  4408                           ;colour_identify.c: 146:             stop(mL,mR);
  4409   000EC0  C01C  F014         	movff	motor_response@mL,stop@mL
  4410   000EC4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4411   000EC8  C01E  F016         	movff	motor_response@mR,stop@mR
  4412   000ECC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4413   000ED0  EC21  F014         	call	_stop	;wreg free
  4414   000ED4                     
  4415                           ;colour_identify.c: 147:             turnRight45(mL,mR);
  4416   000ED4  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4417   000ED8  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4418   000EDC  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4419   000EE0  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4420   000EE4  EC41  F013         	call	_turnRight45	;wreg free
  4421   000EE8                     l2756:
  4422                           
  4423                           ;colour_identify.c: 148:             stop(mL,mR);
  4424   000EE8  C01C  F014         	movff	motor_response@mL,stop@mL
  4425   000EEC  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4426   000EF0  C01E  F016         	movff	motor_response@mR,stop@mR
  4427   000EF4  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4428   000EF8  EC21  F014         	call	_stop	;wreg free
  4429                           
  4430                           ;colour_identify.c: 149:             break;
  4431   000EFC  EFC7  F008         	goto	l357
  4432   000F00                     l2758:
  4433                           
  4434                           ;colour_identify.c: 151:             reverseFullSpeed(mL,mR);
  4435   000F00  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4436   000F04  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4437   000F08  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4438   000F0C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4439   000F10  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4440   000F14                     
  4441                           ;colour_identify.c: 152:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4442   000F14  0E05               	movlw	5
  4443   000F16  6E21               	movwf	(??_motor_response+1)^0,c
  4444   000F18  0E0F               	movlw	15
  4445   000F1A  6E20               	movwf	??_motor_response^0,c
  4446   000F1C  0EF1               	movlw	241
  4447   000F1E                     u1567:
  4448   000F1E  2EE8               	decfsz	wreg,f,c
  4449   000F20  D7FE               	bra	u1567
  4450   000F22  2E20               	decfsz	??_motor_response^0,f,c
  4451   000F24  D7FC               	bra	u1567
  4452   000F26  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4453   000F28  D7FA               	bra	u1567
  4454   000F2A  F000               	nop	
  4455   000F2C                     l2762:
  4456                           
  4457                           ;colour_identify.c: 153:             turnLeft45(mL,mR);
  4458   000F2C  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4459   000F30  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4460   000F34  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4461   000F38  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4462   000F3C  ECEA  F012         	call	_turnLeft45	;wreg free
  4463   000F40                     
  4464                           ;colour_identify.c: 154:             stop(mL,mR);
  4465   000F40  C01C  F014         	movff	motor_response@mL,stop@mL
  4466   000F44  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4467   000F48  C01E  F016         	movff	motor_response@mR,stop@mR
  4468   000F4C  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4469   000F50  EC21  F014         	call	_stop	;wreg free
  4470   000F54                     
  4471                           ;colour_identify.c: 155:             turnLeft45(mL,mR);
  4472   000F54  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4473   000F58  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4474   000F5C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4475   000F60  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4476   000F64  ECEA  F012         	call	_turnLeft45	;wreg free
  4477   000F68  EF74  F007         	goto	l2756
  4478   000F6C                     l2770:
  4479                           
  4480                           ;colour_identify.c: 159:             reverseFullSpeed(mL,mR);
  4481   000F6C  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4482   000F70  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4483   000F74  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4484   000F78  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4485   000F7C  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4486   000F80                     
  4487                           ;colour_identify.c: 160:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4488   000F80  0E05               	movlw	5
  4489   000F82  6E21               	movwf	(??_motor_response+1)^0,c
  4490   000F84  0E0F               	movlw	15
  4491   000F86  6E20               	movwf	??_motor_response^0,c
  4492   000F88  0EF1               	movlw	241
  4493   000F8A                     u1577:
  4494   000F8A  2EE8               	decfsz	wreg,f,c
  4495   000F8C  D7FE               	bra	u1577
  4496   000F8E  2E20               	decfsz	??_motor_response^0,f,c
  4497   000F90  D7FC               	bra	u1577
  4498   000F92  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4499   000F94  D7FA               	bra	u1577
  4500   000F96  F000               	nop	
  4501   000F98                     
  4502                           ;colour_identify.c: 161:             turnRight45(mL,mR);
  4503   000F98  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4504   000F9C  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4505   000FA0  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4506   000FA4  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4507   000FA8  EC41  F013         	call	_turnRight45	;wreg free
  4508   000FAC                     
  4509                           ;colour_identify.c: 162:             stop(mL,mR);
  4510   000FAC  C01C  F014         	movff	motor_response@mL,stop@mL
  4511   000FB0  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4512   000FB4  C01E  F016         	movff	motor_response@mR,stop@mR
  4513   000FB8  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4514   000FBC  EC21  F014         	call	_stop	;wreg free
  4515   000FC0                     l2778:
  4516                           
  4517                           ;colour_identify.c: 163:             turnRight45(mL,mR);
  4518   000FC0  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4519   000FC4  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4520   000FC8  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4521   000FCC  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4522   000FD0  EC41  F013         	call	_turnRight45	;wreg free
  4523   000FD4                     l2780:
  4524                           
  4525                           ;colour_identify.c: 164:             stop(mL,mR);
  4526   000FD4  C01C  F014         	movff	motor_response@mL,stop@mL
  4527   000FD8  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4528   000FDC  C01E  F016         	movff	motor_response@mR,stop@mR
  4529   000FE0  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4530   000FE4  EC21  F014         	call	_stop	;wreg free
  4531   000FE8  EF56  F007         	goto	l2750
  4532   000FEC                     l2790:
  4533                           
  4534                           ;colour_identify.c: 171:             reverseFullSpeed(mL,mR);
  4535   000FEC  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4536   000FF0  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4537   000FF4  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4538   000FF8  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4539   000FFC  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4540   001000                     
  4541                           ;colour_identify.c: 172:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4542   001000  0E05               	movlw	5
  4543   001002  6E21               	movwf	(??_motor_response+1)^0,c
  4544   001004  0E0F               	movlw	15
  4545   001006  6E20               	movwf	??_motor_response^0,c
  4546   001008  0EF1               	movlw	241
  4547   00100A                     u1587:
  4548   00100A  2EE8               	decfsz	wreg,f,c
  4549   00100C  D7FE               	bra	u1587
  4550   00100E  2E20               	decfsz	??_motor_response^0,f,c
  4551   001010  D7FC               	bra	u1587
  4552   001012  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4553   001014  D7FA               	bra	u1587
  4554   001016  F000               	nop	
  4555   001018                     
  4556                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  4557   001018  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4558   00101C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4559   001020  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4560   001024  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4561   001028  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4562                           
  4563                           ;colour_identify.c: 174:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4564   00102C  0E29               	movlw	41
  4565   00102E  6E21               	movwf	(??_motor_response+1)^0,c
  4566   001030  0E96               	movlw	150
  4567   001032  6E20               	movwf	??_motor_response^0,c
  4568   001034  0E7F               	movlw	127
  4569   001036                     u1597:
  4570   001036  2EE8               	decfsz	wreg,f,c
  4571   001038  D7FE               	bra	u1597
  4572   00103A  2E20               	decfsz	??_motor_response^0,f,c
  4573   00103C  D7FC               	bra	u1597
  4574   00103E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4575   001040  D7FA               	bra	u1597
  4576   001042  F000               	nop	
  4577   001044  EFEA  F007         	goto	l2780
  4578   001048                     l2806:
  4579                           
  4580                           ;colour_identify.c: 182:             reverseFullSpeed(mL,mR);
  4581   001048  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4582   00104C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4583   001050  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4584   001054  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4585   001058  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4586   00105C                     
  4587                           ;colour_identify.c: 183:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4588   00105C  0E05               	movlw	5
  4589   00105E  6E21               	movwf	(??_motor_response+1)^0,c
  4590   001060  0E0F               	movlw	15
  4591   001062  6E20               	movwf	??_motor_response^0,c
  4592   001064  0EF1               	movlw	241
  4593   001066                     u1607:
  4594   001066  2EE8               	decfsz	wreg,f,c
  4595   001068  D7FE               	bra	u1607
  4596   00106A  2E20               	decfsz	??_motor_response^0,f,c
  4597   00106C  D7FC               	bra	u1607
  4598   00106E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4599   001070  D7FA               	bra	u1607
  4600   001072  F000               	nop	
  4601   001074                     
  4602                           ;colour_identify.c: 184:             reverseFullSpeed(mL,mR);
  4603   001074  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4604   001078  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4605   00107C  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4606   001080  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4607   001084  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4608                           
  4609                           ;colour_identify.c: 185:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4610   001088  0E29               	movlw	41
  4611   00108A  6E21               	movwf	(??_motor_response+1)^0,c
  4612   00108C  0E96               	movlw	150
  4613   00108E  6E20               	movwf	??_motor_response^0,c
  4614   001090  0E7F               	movlw	127
  4615   001092                     u1617:
  4616   001092  2EE8               	decfsz	wreg,f,c
  4617   001094  D7FE               	bra	u1617
  4618   001096  2E20               	decfsz	??_motor_response^0,f,c
  4619   001098  D7FC               	bra	u1617
  4620   00109A  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4621   00109C  D7FA               	bra	u1617
  4622   00109E  F000               	nop	
  4623   0010A0                     l2812:
  4624                           
  4625                           ;colour_identify.c: 186:             stop(mL,mR);
  4626   0010A0  C01C  F014         	movff	motor_response@mL,stop@mL
  4627   0010A4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4628   0010A8  C01E  F016         	movff	motor_response@mR,stop@mR
  4629   0010AC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4630   0010B0  EC21  F014         	call	_stop	;wreg free
  4631   0010B4  EF96  F007         	goto	l2762
  4632   0010B8                     l2822:
  4633                           
  4634                           ;colour_identify.c: 193:             reverseFullSpeed(mL,mR);
  4635   0010B8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4636   0010BC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4637   0010C0  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4638   0010C4  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4639   0010C8  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4640   0010CC                     
  4641                           ;colour_identify.c: 194:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4642   0010CC  0E05               	movlw	5
  4643   0010CE  6E21               	movwf	(??_motor_response+1)^0,c
  4644   0010D0  0E0F               	movlw	15
  4645   0010D2  6E20               	movwf	??_motor_response^0,c
  4646   0010D4  0EF1               	movlw	241
  4647   0010D6                     u1627:
  4648   0010D6  2EE8               	decfsz	wreg,f,c
  4649   0010D8  D7FE               	bra	u1627
  4650   0010DA  2E20               	decfsz	??_motor_response^0,f,c
  4651   0010DC  D7FC               	bra	u1627
  4652   0010DE  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4653   0010E0  D7FA               	bra	u1627
  4654   0010E2  F000               	nop	
  4655   0010E4  EFE0  F007         	goto	l2778
  4656   0010E8                     l2838:
  4657                           
  4658                           ;colour_identify.c: 203:             reverseFullSpeed(mL,mR);
  4659   0010E8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4660   0010EC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4661   0010F0  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4662   0010F4  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4663   0010F8  EC97  F013         	call	_reverseFullSpeed	;wreg free
  4664   0010FC                     
  4665                           ;colour_identify.c: 204:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4666   0010FC  0E05               	movlw	5
  4667   0010FE  6E21               	movwf	(??_motor_response+1)^0,c
  4668   001100  0E0F               	movlw	15
  4669   001102  6E20               	movwf	??_motor_response^0,c
  4670   001104  0EF1               	movlw	241
  4671   001106                     u1637:
  4672   001106  2EE8               	decfsz	wreg,f,c
  4673   001108  D7FE               	bra	u1637
  4674   00110A  2E20               	decfsz	??_motor_response^0,f,c
  4675   00110C  D7FC               	bra	u1637
  4676   00110E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4677   001110  D7FA               	bra	u1637
  4678   001112  F000               	nop	
  4679   001114                     
  4680                           ;colour_identify.c: 205:             turnLeft45(mL,mR);
  4681   001114  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4682   001118  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4683   00111C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4684   001120  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4685   001124  ECEA  F012         	call	_turnLeft45	;wreg free
  4686   001128  EF50  F008         	goto	l2812
  4687   00112C                     l2856:
  4688   00112C  5022               	movf	motor_response@card^0,w,c
  4689   00112E  6E20               	movwf	??_motor_response^0,c
  4690   001130  6A21               	clrf	(??_motor_response+1)^0,c
  4691                           
  4692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4693                           ; Switch size 1, requested type "simple"
  4694                           ; Number of cases is 1, Range of values is 0 to 0
  4695                           ; switch strategies available:
  4696                           ; Name         Instructions Cycles
  4697                           ; simple_byte            4     3 (average)
  4698                           ;	Chosen strategy is simple_byte
  4699   001132  5021               	movf	(??_motor_response+1)^0,w,c
  4700   001134  0A00               	xorlw	0	; case 0
  4701   001136  B4D8               	btfsc	status,2,c
  4702   001138  EFA0  F008         	goto	l3144
  4703   00113C  EFC7  F008         	goto	l357
  4704   001140                     l3144:
  4705                           
  4706                           ; Switch size 1, requested type "simple"
  4707                           ; Number of cases is 9, Range of values is 1 to 9
  4708                           ; switch strategies available:
  4709                           ; Name         Instructions Cycles
  4710                           ; simple_byte           28    15 (average)
  4711                           ;	Chosen strategy is simple_byte
  4712   001140  5020               	movf	??_motor_response^0,w,c
  4713   001142  0A01               	xorlw	1	; case 1
  4714   001144  B4D8               	btfsc	status,2,c
  4715   001146  EF40  F007         	goto	l2746
  4716   00114A  0A03               	xorlw	3	; case 2
  4717   00114C  B4D8               	btfsc	status,2,c
  4718   00114E  EF80  F007         	goto	l2758
  4719   001152  0A01               	xorlw	1	; case 3
  4720   001154  B4D8               	btfsc	status,2,c
  4721   001156  EFB6  F007         	goto	l2770
  4722   00115A  0A07               	xorlw	7	; case 4
  4723   00115C  B4D8               	btfsc	status,2,c
  4724   00115E  EFF6  F007         	goto	l2790
  4725   001162  0A01               	xorlw	1	; case 5
  4726   001164  B4D8               	btfsc	status,2,c
  4727   001166  EF24  F008         	goto	l2806
  4728   00116A  0A03               	xorlw	3	; case 6
  4729   00116C  B4D8               	btfsc	status,2,c
  4730   00116E  EF5C  F008         	goto	l2822
  4731   001172  0A01               	xorlw	1	; case 7
  4732   001174  B4D8               	btfsc	status,2,c
  4733   001176  EF74  F008         	goto	l2838
  4734   00117A  0A0F               	xorlw	15	; case 8
  4735   00117C  B4D8               	btfsc	status,2,c
  4736   00117E  EFC7  F008         	goto	l357
  4737   001182  0A01               	xorlw	1	; case 9
  4738   001184  B4D8               	btfsc	status,2,c
  4739   001186  EFC7  F008         	goto	l357
  4740   00118A  EFC7  F008         	goto	l357
  4741   00118E                     l357:
  4742   00118E  0012               	return		;funcret
  4743   001190                     __end_of_motor_response:
  4744                           	callstack 0
  4745                           
  4746 ;; *************** function _turnRight45 *****************
  4747 ;; Defined at:
  4748 ;;		line 116 in file "dc_motor.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4751 ;;		 -> main@motorL(9), 
  4752 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4753 ;;		 -> main@motorR(9), 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  i               2   25[COMRAM] int 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4767 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;Total ram usage:        8 bytes
  4770 ;; Hardware stack levels used: 1
  4771 ;; Hardware stack levels required when called: 2
  4772 ;; This function calls:
  4773 ;;		_setMotorPWM
  4774 ;; This function is called by:
  4775 ;;		_motor_response
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text23
  4780   002682                     __ptext23:
  4781                           	callstack 0
  4782   002682                     _turnRight45:
  4783                           	callstack 26
  4784   002682                     
  4785                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  4786   002682  EE20 F001          	lfsr	2,1
  4787   002686  5014               	movf	turnRight45@mL^0,w,c
  4788   002688  26D9               	addwf	fsr2l,f,c
  4789   00268A  5015               	movf	(turnRight45@mL+1)^0,w,c
  4790   00268C  22DA               	addwfc	fsr2h,f,c
  4791   00268E  0E01               	movlw	1
  4792   002690  6EDF               	movwf	indf2,c
  4793                           
  4794                           ;dc_motor.c: 119:     mR->direction=0;
  4795   002692  EE20 F001          	lfsr	2,1
  4796   002696  5016               	movf	turnRight45@mR^0,w,c
  4797   002698  26D9               	addwf	fsr2l,f,c
  4798   00269A  5017               	movf	(turnRight45@mR+1)^0,w,c
  4799   00269C  22DA               	addwfc	fsr2h,f,c
  4800   00269E  0E00               	movlw	0
  4801   0026A0  6EDF               	movwf	indf2,c
  4802   0026A2                     
  4803                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  4804   0026A2  0E00               	movlw	0
  4805   0026A4  6E1B               	movwf	(turnRight45@i+1)^0,c
  4806   0026A6  0E00               	movlw	0
  4807   0026A8  6E1A               	movwf	turnRight45@i^0,c
  4808   0026AA                     l2538:
  4809                           
  4810                           ;dc_motor.c: 122:         mR->power=i;
  4811   0026AA  C016  FFD9         	movff	turnRight45@mR,fsr2l
  4812   0026AE  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
  4813   0026B2  C01A  FFDF         	movff	turnRight45@i,indf2
  4814                           
  4815                           ;dc_motor.c: 123:         mL->power=i;
  4816   0026B6  C014  FFD9         	movff	turnRight45@mL,fsr2l
  4817   0026BA  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
  4818   0026BE  C01A  FFDF         	movff	turnRight45@i,indf2
  4819   0026C2                     
  4820                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4821   0026C2  0E02               	movlw	2
  4822   0026C4  6E19               	movwf	(??_turnRight45+1)^0,c
  4823   0026C6  0E38               	movlw	56
  4824   0026C8  6E18               	movwf	??_turnRight45^0,c
  4825   0026CA  0EAD               	movlw	173
  4826   0026CC                     u1647:
  4827   0026CC  2EE8               	decfsz	wreg,f,c
  4828   0026CE  D7FE               	bra	u1647
  4829   0026D0  2E18               	decfsz	??_turnRight45^0,f,c
  4830   0026D2  D7FC               	bra	u1647
  4831   0026D4  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  4832   0026D6  D7FA               	bra	u1647
  4833   0026D8  F000               	nop	
  4834   0026DA                     
  4835                           ;dc_motor.c: 125:         setMotorPWM(mL);
  4836   0026DA  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
  4837   0026DE  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
  4838   0026E2  ECB1  F00E         	call	_setMotorPWM	;wreg free
  4839   0026E6                     
  4840                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  4841   0026E6  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
  4842   0026EA  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
  4843   0026EE  ECB1  F00E         	call	_setMotorPWM	;wreg free
  4844   0026F2  0E0A               	movlw	10
  4845   0026F4  261A               	addwf	turnRight45@i^0,f,c
  4846   0026F6  0E00               	movlw	0
  4847   0026F8  221B               	addwfc	(turnRight45@i+1)^0,f,c
  4848   0026FA  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
  4849   0026FC  EF89  F013         	goto	u1231
  4850   002700  501B               	movf	(turnRight45@i+1)^0,w,c
  4851   002702  E109               	bnz	u1230
  4852   002704  0E50               	movlw	80
  4853   002706  5C1A               	subwf	turnRight45@i^0,w,c
  4854   002708  A0D8               	btfss	status,0,c
  4855   00270A  EF89  F013         	goto	u1231
  4856   00270E  EF8B  F013         	goto	u1230
  4857   002712                     u1231:
  4858   002712  EF55  F013         	goto	l2538
  4859   002716                     u1230:
  4860   002716                     
  4861                           ;dc_motor.c: 127:     _delay((unsigned long)((45)*(64000000/4000.0)));
  4862   002716  0E04               	movlw	4
  4863   002718  6E19               	movwf	(??_turnRight45+1)^0,c
  4864   00271A  0EA8               	movlw	168
  4865   00271C  6E18               	movwf	??_turnRight45^0,c
  4866   00271E  0E0C               	movlw	12
  4867   002720                     u1657:
  4868   002720  2EE8               	decfsz	wreg,f,c
  4869   002722  D7FE               	bra	u1657
  4870   002724  2E18               	decfsz	??_turnRight45^0,f,c
  4871   002726  D7FC               	bra	u1657
  4872   002728  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  4873   00272A  D7FA               	bra	u1657
  4874   00272C  0012               	return		;funcret
  4875   00272E                     __end_of_turnRight45:
  4876                           	callstack 0
  4877                           
  4878 ;; *************** function _turnLeft45 *****************
  4879 ;; Defined at:
  4880 ;;		line 101 in file "dc_motor.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4883 ;;		 -> main@motorL(9), 
  4884 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4885 ;;		 -> main@motorR(9), 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  i               2   25[COMRAM] int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4901 ;;Total ram usage:        8 bytes
  4902 ;; Hardware stack levels used: 1
  4903 ;; Hardware stack levels required when called: 2
  4904 ;; This function calls:
  4905 ;;		_setMotorPWM
  4906 ;; This function is called by:
  4907 ;;		_motor_response
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text24
  4912   0025D4                     __ptext24:
  4913                           	callstack 0
  4914   0025D4                     _turnLeft45:
  4915                           	callstack 26
  4916   0025D4                     
  4917                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  4918   0025D4  EE20 F001          	lfsr	2,1
  4919   0025D8  5014               	movf	turnLeft45@mL^0,w,c
  4920   0025DA  26D9               	addwf	fsr2l,f,c
  4921   0025DC  5015               	movf	(turnLeft45@mL+1)^0,w,c
  4922   0025DE  22DA               	addwfc	fsr2h,f,c
  4923   0025E0  0E00               	movlw	0
  4924   0025E2  6EDF               	movwf	indf2,c
  4925                           
  4926                           ;dc_motor.c: 104:     mR->direction=1;
  4927   0025E4  EE20 F001          	lfsr	2,1
  4928   0025E8  5016               	movf	turnLeft45@mR^0,w,c
  4929   0025EA  26D9               	addwf	fsr2l,f,c
  4930   0025EC  5017               	movf	(turnLeft45@mR+1)^0,w,c
  4931   0025EE  22DA               	addwfc	fsr2h,f,c
  4932   0025F0  0E01               	movlw	1
  4933   0025F2  6EDF               	movwf	indf2,c
  4934   0025F4                     
  4935                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  4936   0025F4  0E00               	movlw	0
  4937   0025F6  6E1B               	movwf	(turnLeft45@i+1)^0,c
  4938   0025F8  0E00               	movlw	0
  4939   0025FA  6E1A               	movwf	turnLeft45@i^0,c
  4940   0025FC                     l2516:
  4941                           
  4942                           ;dc_motor.c: 107:         mR->power=i;
  4943   0025FC  C016  FFD9         	movff	turnLeft45@mR,fsr2l
  4944   002600  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
  4945   002604  C01A  FFDF         	movff	turnLeft45@i,indf2
  4946                           
  4947                           ;dc_motor.c: 108:         mL->power=i;
  4948   002608  C014  FFD9         	movff	turnLeft45@mL,fsr2l
  4949   00260C  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
  4950   002610  C01A  FFDF         	movff	turnLeft45@i,indf2
  4951   002614                     
  4952                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4953   002614  0E02               	movlw	2
  4954   002616  6E19               	movwf	(??_turnLeft45+1)^0,c
  4955   002618  0E38               	movlw	56
  4956   00261A  6E18               	movwf	??_turnLeft45^0,c
  4957   00261C  0EAD               	movlw	173
  4958   00261E                     u1667:
  4959   00261E  2EE8               	decfsz	wreg,f,c
  4960   002620  D7FE               	bra	u1667
  4961   002622  2E18               	decfsz	??_turnLeft45^0,f,c
  4962   002624  D7FC               	bra	u1667
  4963   002626  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  4964   002628  D7FA               	bra	u1667
  4965   00262A  F000               	nop	
  4966   00262C                     
  4967                           ;dc_motor.c: 110:         setMotorPWM(mL);
  4968   00262C  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
  4969   002630  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  4970   002634  ECB1  F00E         	call	_setMotorPWM	;wreg free
  4971   002638                     
  4972                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  4973   002638  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
  4974   00263C  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  4975   002640  ECB1  F00E         	call	_setMotorPWM	;wreg free
  4976   002644  0E0A               	movlw	10
  4977   002646  261A               	addwf	turnLeft45@i^0,f,c
  4978   002648  0E00               	movlw	0
  4979   00264A  221B               	addwfc	(turnLeft45@i+1)^0,f,c
  4980   00264C  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
  4981   00264E  EF32  F013         	goto	u1221
  4982   002652  501B               	movf	(turnLeft45@i+1)^0,w,c
  4983   002654  E109               	bnz	u1220
  4984   002656  0E50               	movlw	80
  4985   002658  5C1A               	subwf	turnLeft45@i^0,w,c
  4986   00265A  A0D8               	btfss	status,0,c
  4987   00265C  EF32  F013         	goto	u1221
  4988   002660  EF34  F013         	goto	u1220
  4989   002664                     u1221:
  4990   002664  EFFE  F012         	goto	l2516
  4991   002668                     u1220:
  4992   002668                     
  4993                           ;dc_motor.c: 112:     _delay((unsigned long)((40)*(64000000/4000.0)));
  4994   002668  0E04               	movlw	4
  4995   00266A  6E19               	movwf	(??_turnLeft45+1)^0,c
  4996   00266C  0E40               	movlw	64
  4997   00266E  6E18               	movwf	??_turnLeft45^0,c
  4998   002670  0E26               	movlw	38
  4999   002672                     u1677:
  5000   002672  2EE8               	decfsz	wreg,f,c
  5001   002674  D7FE               	bra	u1677
  5002   002676  2E18               	decfsz	??_turnLeft45^0,f,c
  5003   002678  D7FC               	bra	u1677
  5004   00267A  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  5005   00267C  D7FA               	bra	u1677
  5006   00267E  D000               	nop2	
  5007   002680  0012               	return		;funcret
  5008   002682                     __end_of_turnLeft45:
  5009                           	callstack 0
  5010                           
  5011 ;; *************** function _stop *****************
  5012 ;; Defined at:
  5013 ;;		line 84 in file "dc_motor.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5016 ;;		 -> main@motorL(9), 
  5017 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5018 ;;		 -> main@motorR(9), 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;Total ram usage:        5 bytes
  5035 ;; Hardware stack levels used: 1
  5036 ;; Hardware stack levels required when called: 2
  5037 ;; This function calls:
  5038 ;;		_setMotorPWM
  5039 ;; This function is called by:
  5040 ;;		_motor_response
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text25
  5045   002842                     __ptext25:
  5046                           	callstack 0
  5047   002842                     _stop:
  5048                           	callstack 26
  5049   002842                     
  5050                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5051   002842  EF36  F014         	goto	l2498
  5052   002846                     l2492:
  5053                           
  5054                           ;dc_motor.c: 87:         mL->power -=10;
  5055   002846  C014  FFD9         	movff	stop@mL,fsr2l
  5056   00284A  C015  FFDA         	movff	stop@mL+1,fsr2h
  5057   00284E  0E0A               	movlw	10
  5058   002850  5EDF               	subwf	indf2,f,c
  5059   002852                     
  5060                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5061   002852  0E2A               	movlw	42
  5062   002854  6E18               	movwf	??_stop^0,c
  5063   002856  0E8E               	movlw	142
  5064   002858                     u1687:
  5065   002858  2EE8               	decfsz	wreg,f,c
  5066   00285A  D7FE               	bra	u1687
  5067   00285C  2E18               	decfsz	??_stop^0,f,c
  5068   00285E  D7FC               	bra	u1687
  5069   002860                     
  5070                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5071   002860  C014  F00E         	movff	stop@mL,setMotorPWM@m
  5072   002864  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  5073   002868  ECB1  F00E         	call	_setMotorPWM	;wreg free
  5074   00286C                     l2498:
  5075                           
  5076                           ;dc_motor.c: 86:     while(mL->power !=0){
  5077   00286C  C014  FFD9         	movff	stop@mL,fsr2l
  5078   002870  C015  FFDA         	movff	stop@mL+1,fsr2h
  5079   002874  50DF               	movf	indf2,w,c
  5080   002876  A4D8               	btfss	status,2,c
  5081   002878  EF40  F014         	goto	u1201
  5082   00287C  EF42  F014         	goto	u1200
  5083   002880                     u1201:
  5084   002880  EF23  F014         	goto	l2492
  5085   002884                     u1200:
  5086   002884  EF57  F014         	goto	l2506
  5087   002888                     l2500:
  5088                           
  5089                           ;dc_motor.c: 92:         mR->power -=10;
  5090   002888  C016  FFD9         	movff	stop@mR,fsr2l
  5091   00288C  C017  FFDA         	movff	stop@mR+1,fsr2h
  5092   002890  0E0A               	movlw	10
  5093   002892  5EDF               	subwf	indf2,f,c
  5094   002894                     
  5095                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5096   002894  0E2A               	movlw	42
  5097   002896  6E18               	movwf	??_stop^0,c
  5098   002898  0E8E               	movlw	142
  5099   00289A                     u1697:
  5100   00289A  2EE8               	decfsz	wreg,f,c
  5101   00289C  D7FE               	bra	u1697
  5102   00289E  2E18               	decfsz	??_stop^0,f,c
  5103   0028A0  D7FC               	bra	u1697
  5104   0028A2                     
  5105                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5106   0028A2  C016  F00E         	movff	stop@mR,setMotorPWM@m
  5107   0028A6  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  5108   0028AA  ECB1  F00E         	call	_setMotorPWM	;wreg free
  5109   0028AE                     l2506:
  5110                           
  5111                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5112   0028AE  C016  FFD9         	movff	stop@mR,fsr2l
  5113   0028B2  C017  FFDA         	movff	stop@mR+1,fsr2h
  5114   0028B6  50DF               	movf	indf2,w,c
  5115   0028B8  A4D8               	btfss	status,2,c
  5116   0028BA  EF61  F014         	goto	u1211
  5117   0028BE  EF63  F014         	goto	u1210
  5118   0028C2                     u1211:
  5119   0028C2  EF44  F014         	goto	l2500
  5120   0028C6                     u1210:
  5121   0028C6  0012               	return		;funcret
  5122   0028C8                     __end_of_stop:
  5123                           	callstack 0
  5124                           
  5125 ;; *************** function _reverseFullSpeed *****************
  5126 ;; Defined at:
  5127 ;;		line 145 in file "dc_motor.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5130 ;;		 -> main@motorL(9), 
  5131 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5132 ;;		 -> main@motorR(9), 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  i               2   24[COMRAM] int 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      void 
  5137 ;; Registers used:
  5138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5144 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5147 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;Total ram usage:        7 bytes
  5149 ;; Hardware stack levels used: 1
  5150 ;; Hardware stack levels required when called: 2
  5151 ;; This function calls:
  5152 ;;		_setMotorPWM
  5153 ;; This function is called by:
  5154 ;;		_motor_response
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text26
  5159   00272E                     __ptext26:
  5160                           	callstack 0
  5161   00272E                     _reverseFullSpeed:
  5162                           	callstack 26
  5163   00272E                     
  5164                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5165   00272E  EE20 F001          	lfsr	2,1
  5166   002732  5014               	movf	reverseFullSpeed@mL^0,w,c
  5167   002734  26D9               	addwf	fsr2l,f,c
  5168   002736  5015               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5169   002738  22DA               	addwfc	fsr2h,f,c
  5170   00273A  0E00               	movlw	0
  5171   00273C  6EDF               	movwf	indf2,c
  5172                           
  5173                           ;dc_motor.c: 148:     mR->direction=0;
  5174   00273E  EE20 F001          	lfsr	2,1
  5175   002742  5016               	movf	reverseFullSpeed@mR^0,w,c
  5176   002744  26D9               	addwf	fsr2l,f,c
  5177   002746  5017               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5178   002748  22DA               	addwfc	fsr2h,f,c
  5179   00274A  0E00               	movlw	0
  5180   00274C  6EDF               	movwf	indf2,c
  5181   00274E                     
  5182                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5183   00274E  0E00               	movlw	0
  5184   002750  6E1A               	movwf	(reverseFullSpeed@i+1)^0,c
  5185   002752  0E00               	movlw	0
  5186   002754  6E19               	movwf	reverseFullSpeed@i^0,c
  5187   002756                     l2560:
  5188                           
  5189                           ;dc_motor.c: 150:         mL->power=i;
  5190   002756  C014  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5191   00275A  C015  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5192   00275E  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  5193                           
  5194                           ;dc_motor.c: 151:         mR->power=i;
  5195   002762  C016  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5196   002766  C017  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5197   00276A  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  5198   00276E                     
  5199                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5200   00276E  C014  F00E         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5201   002772  C015  F00F         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5202   002776  ECB1  F00E         	call	_setMotorPWM	;wreg free
  5203   00277A                     
  5204                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5205   00277A  C016  F00E         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5206   00277E  C017  F00F         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5207   002782  ECB1  F00E         	call	_setMotorPWM	;wreg free
  5208   002786                     
  5209                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5210   002786  0ED0               	movlw	208
  5211   002788  6E18               	movwf	??_reverseFullSpeed^0,c
  5212   00278A  0ECA               	movlw	202
  5213   00278C                     u1707:
  5214   00278C  2EE8               	decfsz	wreg,f,c
  5215   00278E  D7FE               	bra	u1707
  5216   002790  2E18               	decfsz	??_reverseFullSpeed^0,f,c
  5217   002792  D7FC               	bra	u1707
  5218   002794                     
  5219                           ;dc_motor.c: 155:     }
  5220   002794  0E0A               	movlw	10
  5221   002796  2619               	addwf	reverseFullSpeed@i^0,f,c
  5222   002798  0E00               	movlw	0
  5223   00279A  221A               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5224   00279C  BE1A               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5225   00279E  EFDA  F013         	goto	u1241
  5226   0027A2  501A               	movf	(reverseFullSpeed@i+1)^0,w,c
  5227   0027A4  E109               	bnz	u1240
  5228   0027A6  0E3C               	movlw	60
  5229   0027A8  5C19               	subwf	reverseFullSpeed@i^0,w,c
  5230   0027AA  A0D8               	btfss	status,0,c
  5231   0027AC  EFDA  F013         	goto	u1241
  5232   0027B0  EFDC  F013         	goto	u1240
  5233   0027B4                     u1241:
  5234   0027B4  EFAB  F013         	goto	l2560
  5235   0027B8                     u1240:
  5236   0027B8  0012               	return		;funcret
  5237   0027BA                     __end_of_reverseFullSpeed:
  5238                           	callstack 0
  5239                           
  5240 ;; *************** function _setMotorPWM *****************
  5241 ;; Defined at:
  5242 ;;		line 61 in file "dc_motor.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  m               2   13[COMRAM] PTR struct DC_motor
  5245 ;;		 -> main@motorR(9), main@motorL(9), 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  negDuty         1   18[COMRAM] unsigned char 
  5248 ;;  posDuty         1   17[COMRAM] unsigned char 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5262 ;;Total ram usage:        6 bytes
  5263 ;; Hardware stack levels used: 1
  5264 ;; Hardware stack levels required when called: 1
  5265 ;; This function calls:
  5266 ;;		___lwdiv
  5267 ;;		___wmul
  5268 ;; This function is called by:
  5269 ;;		_stop
  5270 ;;		_turnLeft45
  5271 ;;		_turnRight45
  5272 ;;		_reverseFullSpeed
  5273 ;;		_main
  5274 ;;		_fullSpeedAhead
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text27
  5279   001D62                     __ptext27:
  5280                           	callstack 0
  5281   001D62                     _setMotorPWM:
  5282                           	callstack 29
  5283   001D62                     
  5284                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5285   001D62  EE20 F002          	lfsr	2,2
  5286   001D66  500E               	movf	setMotorPWM@m^0,w,c
  5287   001D68  26D9               	addwf	fsr2l,f,c
  5288   001D6A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5289   001D6C  22DA               	addwfc	fsr2h,f,c
  5290   001D6E  50DF               	movf	indf2,w,c
  5291   001D70  B4D8               	btfsc	status,2,c
  5292   001D72  EFBD  F00E         	goto	u1151
  5293   001D76  EFBF  F00E         	goto	u1150
  5294   001D7A                     u1151:
  5295   001D7A  EFF3  F00E         	goto	l2426
  5296   001D7E                     u1150:
  5297   001D7E                     
  5298                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5299   001D7E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5300   001D82  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5301   001D86  50DF               	movf	indf2,w,c
  5302   001D88  6E10               	movwf	??_setMotorPWM^0,c
  5303   001D8A  5010               	movf	??_setMotorPWM^0,w,c
  5304   001D8C  6E01               	movwf	___wmul@multiplier^0,c
  5305   001D8E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5306   001D90  EE20 F003          	lfsr	2,3
  5307   001D94  500E               	movf	setMotorPWM@m^0,w,c
  5308   001D96  26D9               	addwf	fsr2l,f,c
  5309   001D98  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5310   001D9A  22DA               	addwfc	fsr2h,f,c
  5311   001D9C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5312   001DA0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5313   001DA4  ECCD  F016         	call	___wmul	;wreg free
  5314   001DA8  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5315   001DAC  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5316   001DB0  0E00               	movlw	0
  5317   001DB2  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5318   001DB4  0E64               	movlw	100
  5319   001DB6  6E09               	movwf	___lwdiv@divisor^0,c
  5320   001DB8  ECE3  F014         	call	___lwdiv	;wreg free
  5321   001DBC  EE20 F003          	lfsr	2,3
  5322   001DC0  500E               	movf	setMotorPWM@m^0,w,c
  5323   001DC2  26D9               	addwf	fsr2l,f,c
  5324   001DC4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5325   001DC6  22DA               	addwfc	fsr2h,f,c
  5326   001DC8  50DF               	movf	indf2,w,c
  5327   001DCA  6E11               	movwf	(??_setMotorPWM+1)^0,c
  5328   001DCC  5007               	movf	?___lwdiv^0,w,c
  5329   001DCE  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  5330   001DD0  6E12               	movwf	setMotorPWM@posDuty^0,c
  5331   001DD2                     
  5332                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5333   001DD2  EE20 F003          	lfsr	2,3
  5334   001DD6  500E               	movf	setMotorPWM@m^0,w,c
  5335   001DD8  26D9               	addwf	fsr2l,f,c
  5336   001DDA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5337   001DDC  22DA               	addwfc	fsr2h,f,c
  5338   001DDE  50DF               	movf	indf2,w,c
  5339   001DE0  6E13               	movwf	setMotorPWM@negDuty^0,c
  5340                           
  5341                           ;dc_motor.c: 68:     }
  5342   001DE2  EF16  F00F         	goto	l2430
  5343   001DE6                     l2426:
  5344                           
  5345                           ;dc_motor.c: 70:         posDuty=0;
  5346   001DE6  0E00               	movlw	0
  5347   001DE8  6E12               	movwf	setMotorPWM@posDuty^0,c
  5348   001DEA                     
  5349                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5350   001DEA  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5351   001DEE  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5352   001DF2  50DF               	movf	indf2,w,c
  5353   001DF4  6E10               	movwf	??_setMotorPWM^0,c
  5354   001DF6  5010               	movf	??_setMotorPWM^0,w,c
  5355   001DF8  6E01               	movwf	___wmul@multiplier^0,c
  5356   001DFA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5357   001DFC  EE20 F003          	lfsr	2,3
  5358   001E00  500E               	movf	setMotorPWM@m^0,w,c
  5359   001E02  26D9               	addwf	fsr2l,f,c
  5360   001E04  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5361   001E06  22DA               	addwfc	fsr2h,f,c
  5362   001E08  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5363   001E0C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5364   001E10  ECCD  F016         	call	___wmul	;wreg free
  5365   001E14  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5366   001E18  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5367   001E1C  0E00               	movlw	0
  5368   001E1E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5369   001E20  0E64               	movlw	100
  5370   001E22  6E09               	movwf	___lwdiv@divisor^0,c
  5371   001E24  ECE3  F014         	call	___lwdiv	;wreg free
  5372   001E28  5007               	movf	?___lwdiv^0,w,c
  5373   001E2A  6E13               	movwf	setMotorPWM@negDuty^0,c
  5374   001E2C                     l2430:
  5375                           
  5376                           ;dc_motor.c: 74:     if (m->direction) {
  5377   001E2C  EE20 F001          	lfsr	2,1
  5378   001E30  500E               	movf	setMotorPWM@m^0,w,c
  5379   001E32  26D9               	addwf	fsr2l,f,c
  5380   001E34  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5381   001E36  22DA               	addwfc	fsr2h,f,c
  5382   001E38  50DF               	movf	indf2,w,c
  5383   001E3A  B4D8               	btfsc	status,2,c
  5384   001E3C  EF22  F00F         	goto	u1161
  5385   001E40  EF24  F00F         	goto	u1160
  5386   001E44                     u1161:
  5387   001E44  EF46  F00F         	goto	l2434
  5388   001E48                     u1160:
  5389   001E48                     
  5390                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5391   001E48  EE20 F005          	lfsr	2,5
  5392   001E4C  500E               	movf	setMotorPWM@m^0,w,c
  5393   001E4E  26D9               	addwf	fsr2l,f,c
  5394   001E50  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5395   001E52  22DA               	addwfc	fsr2h,f,c
  5396   001E54  CFDE F010          	movff	postinc2,??_setMotorPWM
  5397   001E58  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5398   001E5C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5399   001E60  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5400   001E64  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5401                           
  5402                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5403   001E68  EE20 F007          	lfsr	2,7
  5404   001E6C  500E               	movf	setMotorPWM@m^0,w,c
  5405   001E6E  26D9               	addwf	fsr2l,f,c
  5406   001E70  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5407   001E72  22DA               	addwfc	fsr2h,f,c
  5408   001E74  CFDE F010          	movff	postinc2,??_setMotorPWM
  5409   001E78  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5410   001E7C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5411   001E80  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5412   001E84  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5413                           
  5414                           ;dc_motor.c: 77:     } else {
  5415   001E88  EF66  F00F         	goto	l95
  5416   001E8C                     l2434:
  5417                           
  5418                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5419   001E8C  EE20 F005          	lfsr	2,5
  5420   001E90  500E               	movf	setMotorPWM@m^0,w,c
  5421   001E92  26D9               	addwf	fsr2l,f,c
  5422   001E94  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5423   001E96  22DA               	addwfc	fsr2h,f,c
  5424   001E98  CFDE F010          	movff	postinc2,??_setMotorPWM
  5425   001E9C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5426   001EA0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5427   001EA4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5428   001EA8  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5429                           
  5430                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5431   001EAC  EE20 F007          	lfsr	2,7
  5432   001EB0  500E               	movf	setMotorPWM@m^0,w,c
  5433   001EB2  26D9               	addwf	fsr2l,f,c
  5434   001EB4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5435   001EB6  22DA               	addwfc	fsr2h,f,c
  5436   001EB8  CFDE F010          	movff	postinc2,??_setMotorPWM
  5437   001EBC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5438   001EC0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5439   001EC4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5440   001EC8  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5441   001ECC                     l95:
  5442   001ECC  0012               	return		;funcret
  5443   001ECE                     __end_of_setMotorPWM:
  5444                           	callstack 0
  5445                           
  5446 ;; *************** function ___wmul *****************
  5447 ;; Defined at:
  5448 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  multiplier      2    0[COMRAM] unsigned int 
  5451 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  product         2    4[COMRAM] unsigned int 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  2    0[COMRAM] unsigned int 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, prodl, prodh
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5467 ;;Total ram usage:        6 bytes
  5468 ;; Hardware stack levels used: 1
  5469 ;; This function calls:
  5470 ;;		Nothing
  5471 ;; This function is called by:
  5472 ;;		_setMotorPWM
  5473 ;;		_normalise_readings
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text28
  5478   002D9A                     __ptext28:
  5479                           	callstack 0
  5480   002D9A                     ___wmul:
  5481                           	callstack 29
  5482   002D9A  5001               	movf	___wmul@multiplier^0,w,c
  5483   002D9C  0203               	mulwf	___wmul@multiplicand^0,c
  5484   002D9E  CFF3 F005          	movff	prodl,___wmul@product
  5485   002DA2  CFF4 F006          	movff	prodh,___wmul@product+1
  5486   002DA6  5001               	movf	___wmul@multiplier^0,w,c
  5487   002DA8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5488   002DAA  50F3               	movf	243,w,c
  5489   002DAC  2606               	addwf	(___wmul@product+1)^0,f,c
  5490   002DAE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5491   002DB0  0203               	mulwf	___wmul@multiplicand^0,c
  5492   002DB2  50F3               	movf	243,w,c
  5493   002DB4  2606               	addwf	(___wmul@product+1)^0,f,c
  5494   002DB6  C005  F001         	movff	___wmul@product,?___wmul
  5495   002DBA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5496   002DBE  0012               	return		;funcret
  5497   002DC0                     __end_of___wmul:
  5498                           	callstack 0
  5499                           
  5500 ;; *************** function ___lwdiv *****************
  5501 ;; Defined at:
  5502 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  dividend        2    6[COMRAM] unsigned int 
  5505 ;;  divisor         2    8[COMRAM] unsigned int 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  quotient        2   10[COMRAM] unsigned int 
  5508 ;;  counter         1   12[COMRAM] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  2    6[COMRAM] unsigned int 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5519 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;Total ram usage:        7 bytes
  5523 ;; Hardware stack levels used: 1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_setMotorPWM
  5528 ;;		_normalise_readings
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text29
  5533   0029C6                     __ptext29:
  5534                           	callstack 0
  5535   0029C6                     ___lwdiv:
  5536                           	callstack 29
  5537   0029C6  0E00               	movlw	0
  5538   0029C8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  5539   0029CA  0E00               	movlw	0
  5540   0029CC  6E0B               	movwf	___lwdiv@quotient^0,c
  5541   0029CE  5009               	movf	___lwdiv@divisor^0,w,c
  5542   0029D0  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5543   0029D2  B4D8               	btfsc	status,2,c
  5544   0029D4  EFEE  F014         	goto	u1001
  5545   0029D8  EFF0  F014         	goto	u1000
  5546   0029DC                     u1001:
  5547   0029DC  EF18  F015         	goto	l943
  5548   0029E0                     u1000:
  5549   0029E0  0E01               	movlw	1
  5550   0029E2  6E0D               	movwf	___lwdiv@counter^0,c
  5551   0029E4  EFF8  F014         	goto	l2324
  5552   0029E8                     l2322:
  5553   0029E8  90D8               	bcf	status,0,c
  5554   0029EA  3609               	rlcf	___lwdiv@divisor^0,f,c
  5555   0029EC  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5556   0029EE  2A0D               	incf	___lwdiv@counter^0,f,c
  5557   0029F0                     l2324:
  5558   0029F0  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  5559   0029F2  EFFD  F014         	goto	u1011
  5560   0029F6  EFFF  F014         	goto	u1010
  5561   0029FA                     u1011:
  5562   0029FA  EFF4  F014         	goto	l2322
  5563   0029FE                     u1010:
  5564   0029FE                     l2326:
  5565   0029FE  90D8               	bcf	status,0,c
  5566   002A00  360B               	rlcf	___lwdiv@quotient^0,f,c
  5567   002A02  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5568   002A04  5009               	movf	___lwdiv@divisor^0,w,c
  5569   002A06  5C07               	subwf	___lwdiv@dividend^0,w,c
  5570   002A08  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  5571   002A0A  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5572   002A0C  A0D8               	btfss	status,0,c
  5573   002A0E  EF0B  F015         	goto	u1021
  5574   002A12  EF0D  F015         	goto	u1020
  5575   002A16                     u1021:
  5576   002A16  EF12  F015         	goto	l2334
  5577   002A1A                     u1020:
  5578   002A1A  5009               	movf	___lwdiv@divisor^0,w,c
  5579   002A1C  5E07               	subwf	___lwdiv@dividend^0,f,c
  5580   002A1E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  5581   002A20  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5582   002A22  800B               	bsf	___lwdiv@quotient^0,0,c
  5583   002A24                     l2334:
  5584   002A24  90D8               	bcf	status,0,c
  5585   002A26  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5586   002A28  3209               	rrcf	___lwdiv@divisor^0,f,c
  5587   002A2A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  5588   002A2C  EFFF  F014         	goto	l2326
  5589   002A30                     l943:
  5590   002A30  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  5591   002A34  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5592   002A38  0012               	return		;funcret
  5593   002A3A                     __end_of___lwdiv:
  5594                           	callstack 0
  5595                           
  5596 ;; *************** function _make_master_closeness *****************
  5597 ;; Defined at:
  5598 ;;		line 114 in file "colour_identify.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  buf             2    0[COMRAM] PTR unsigned char 
  5601 ;;		 -> main@buf(150), 
  5602 ;;  normalised_v    2    2[COMRAM] PTR unsigned int [9]
  5603 ;;		 -> card_response@normalised_values(72), 
  5604 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  5605 ;;		 -> card_response@master_closeness(18), 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  i               1   36[COMRAM] enum E14551
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5617 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5621 ;;Total ram usage:       37 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_card_response
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text30
  5631   0023FE                     __ptext30:
  5632                           	callstack 0
  5633   0023FE                     _make_master_closeness:
  5634                           	callstack 29
  5635   0023FE                     
  5636                           ;colour_identify.c: 115:     for(colour i = RED; i<=BLACK; i++){
  5637   0023FE  0E01               	movlw	1
  5638   002400  6E25               	movwf	make_master_closeness@i^0,c
  5639   002402                     l2714:
  5640                           
  5641                           ;colour_identify.c: 117:         master_closeness[i] = (normalised_values[CLEAR][i] + no
      +                          rmalised_values[RED][i] + normalised_values[GREEN][i] + normalised_values[BLUE][i])/4;
  5642   002402  5025               	movf	make_master_closeness@i^0,w,c
  5643   002404  0D02               	mullw	2
  5644   002406  CFF3 F007          	movff	prodl,??_make_master_closeness
  5645   00240A  CFF4 F008          	movff	prodh,??_make_master_closeness+1
  5646   00240E  5007               	movf	??_make_master_closeness^0,w,c
  5647   002410  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5648   002412  6E09               	movwf	(??_make_master_closeness+2)^0,c
  5649   002414  5008               	movf	(??_make_master_closeness+1)^0,w,c
  5650   002416  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5651   002418  6E0A               	movwf	(??_make_master_closeness+3)^0,c
  5652   00241A  0E36               	movlw	54
  5653   00241C  2409               	addwf	(??_make_master_closeness+2)^0,w,c
  5654   00241E  6ED9               	movwf	fsr2l,c
  5655   002420  0E00               	movlw	0
  5656   002422  200A               	addwfc	(??_make_master_closeness+3)^0,w,c
  5657   002424  6EDA               	movwf	fsr2h,c
  5658   002426  CFDE F00B          	movff	postinc2,??_make_master_closeness+4
  5659   00242A  CFDD F00C          	movff	postdec2,??_make_master_closeness+5
  5660   00242E  5025               	movf	make_master_closeness@i^0,w,c
  5661   002430  0D02               	mullw	2
  5662   002432  CFF3 F00D          	movff	prodl,??_make_master_closeness+6
  5663   002436  CFF4 F00E          	movff	prodh,??_make_master_closeness+7
  5664   00243A  500D               	movf	(??_make_master_closeness+6)^0,w,c
  5665   00243C  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5666   00243E  6E0F               	movwf	(??_make_master_closeness+8)^0,c
  5667   002440  500E               	movf	(??_make_master_closeness+7)^0,w,c
  5668   002442  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5669   002444  6E10               	movwf	(??_make_master_closeness+9)^0,c
  5670   002446  0E24               	movlw	36
  5671   002448  240F               	addwf	(??_make_master_closeness+8)^0,w,c
  5672   00244A  6ED9               	movwf	fsr2l,c
  5673   00244C  0E00               	movlw	0
  5674   00244E  2010               	addwfc	(??_make_master_closeness+9)^0,w,c
  5675   002450  6EDA               	movwf	fsr2h,c
  5676   002452  CFDE F011          	movff	postinc2,??_make_master_closeness+10
  5677   002456  CFDD F012          	movff	postdec2,??_make_master_closeness+11
  5678   00245A  5025               	movf	make_master_closeness@i^0,w,c
  5679   00245C  0D02               	mullw	2
  5680   00245E  CFF3 F013          	movff	prodl,??_make_master_closeness+12
  5681   002462  CFF4 F014          	movff	prodh,??_make_master_closeness+13
  5682   002466  5013               	movf	(??_make_master_closeness+12)^0,w,c
  5683   002468  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5684   00246A  6E15               	movwf	(??_make_master_closeness+14)^0,c
  5685   00246C  5014               	movf	(??_make_master_closeness+13)^0,w,c
  5686   00246E  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5687   002470  6E16               	movwf	(??_make_master_closeness+15)^0,c
  5688   002472  0E12               	movlw	18
  5689   002474  2415               	addwf	(??_make_master_closeness+14)^0,w,c
  5690   002476  6ED9               	movwf	fsr2l,c
  5691   002478  0E00               	movlw	0
  5692   00247A  2016               	addwfc	(??_make_master_closeness+15)^0,w,c
  5693   00247C  6EDA               	movwf	fsr2h,c
  5694   00247E  CFDE F017          	movff	postinc2,??_make_master_closeness+16
  5695   002482  CFDD F018          	movff	postdec2,??_make_master_closeness+17
  5696   002486  5025               	movf	make_master_closeness@i^0,w,c
  5697   002488  0D02               	mullw	2
  5698   00248A  CFF3 F019          	movff	prodl,??_make_master_closeness+18
  5699   00248E  CFF4 F01A          	movff	prodh,??_make_master_closeness+19
  5700   002492  5019               	movf	(??_make_master_closeness+18)^0,w,c
  5701   002494  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5702   002496  6ED9               	movwf	fsr2l,c
  5703   002498  501A               	movf	(??_make_master_closeness+19)^0,w,c
  5704   00249A  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5705   00249C  6EDA               	movwf	fsr2h,c
  5706   00249E  CFDE F01B          	movff	postinc2,??_make_master_closeness+20
  5707   0024A2  CFDD F01C          	movff	postdec2,??_make_master_closeness+21
  5708   0024A6  5017               	movf	(??_make_master_closeness+16)^0,w,c
  5709   0024A8  241B               	addwf	(??_make_master_closeness+20)^0,w,c
  5710   0024AA  6E1D               	movwf	(??_make_master_closeness+22)^0,c
  5711   0024AC  5018               	movf	(??_make_master_closeness+17)^0,w,c
  5712   0024AE  201C               	addwfc	(??_make_master_closeness+21)^0,w,c
  5713   0024B0  6E1E               	movwf	(??_make_master_closeness+23)^0,c
  5714   0024B2  5011               	movf	(??_make_master_closeness+10)^0,w,c
  5715   0024B4  241D               	addwf	(??_make_master_closeness+22)^0,w,c
  5716   0024B6  6E1F               	movwf	(??_make_master_closeness+24)^0,c
  5717   0024B8  5012               	movf	(??_make_master_closeness+11)^0,w,c
  5718   0024BA  201E               	addwfc	(??_make_master_closeness+23)^0,w,c
  5719   0024BC  6E20               	movwf	(??_make_master_closeness+25)^0,c
  5720   0024BE  500B               	movf	(??_make_master_closeness+4)^0,w,c
  5721   0024C0  241F               	addwf	(??_make_master_closeness+24)^0,w,c
  5722   0024C2  6E21               	movwf	(??_make_master_closeness+26)^0,c
  5723   0024C4  500C               	movf	(??_make_master_closeness+5)^0,w,c
  5724   0024C6  2020               	addwfc	(??_make_master_closeness+25)^0,w,c
  5725   0024C8  6E22               	movwf	(??_make_master_closeness+27)^0,c
  5726   0024CA  90D8               	bcf	status,0,c
  5727   0024CC  3222               	rrcf	(??_make_master_closeness+27)^0,f,c
  5728   0024CE  3221               	rrcf	(??_make_master_closeness+26)^0,f,c
  5729   0024D0  90D8               	bcf	status,0,c
  5730   0024D2  3222               	rrcf	(??_make_master_closeness+27)^0,f,c
  5731   0024D4  3221               	rrcf	(??_make_master_closeness+26)^0,f,c
  5732   0024D6  5025               	movf	make_master_closeness@i^0,w,c
  5733   0024D8  0D02               	mullw	2
  5734   0024DA  CFF3 F023          	movff	prodl,??_make_master_closeness+28
  5735   0024DE  CFF4 F024          	movff	prodh,??_make_master_closeness+29
  5736   0024E2  5023               	movf	(??_make_master_closeness+28)^0,w,c
  5737   0024E4  2405               	addwf	make_master_closeness@master_closeness^0,w,c
  5738   0024E6  6ED9               	movwf	fsr2l,c
  5739   0024E8  5024               	movf	(??_make_master_closeness+29)^0,w,c
  5740   0024EA  2006               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  5741   0024EC  6EDA               	movwf	fsr2h,c
  5742   0024EE  C021  FFDE         	movff	??_make_master_closeness+26,postinc2
  5743   0024F2  C022  FFDD         	movff	??_make_master_closeness+27,postdec2
  5744   0024F6                     
  5745                           ;colour_identify.c: 122:     }
  5746   0024F6  2A25               	incf	make_master_closeness@i^0,f,c
  5747   0024F8  0E09               	movlw	9
  5748   0024FA  6425               	cpfsgt	make_master_closeness@i^0,c
  5749   0024FC  EF82  F012         	goto	u1341
  5750   002500  EF84  F012         	goto	u1340
  5751   002504                     u1341:
  5752   002504  EF01  F012         	goto	l2714
  5753   002508                     u1340:
  5754   002508  0012               	return		;funcret
  5755   00250A                     __end_of_make_master_closeness:
  5756                           	callstack 0
  5757                           
  5758 ;; *************** function _determine_card *****************
  5759 ;; Defined at:
  5760 ;;		line 125 in file "colour_identify.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  master_close    2    0[COMRAM] PTR unsigned int 
  5763 ;;		 -> card_response@master_closeness(18), 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  i               1    9[COMRAM] enum E14551
  5766 ;;  current_smal    2    6[COMRAM] unsigned int 
  5767 ;;  predicted_co    1    8[COMRAM] enum E14551
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      enum E14551
  5770 ;; Registers used:
  5771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5777 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5778 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5780 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5781 ;;Total ram usage:       10 bytes
  5782 ;; Hardware stack levels used: 1
  5783 ;; This function calls:
  5784 ;;		Nothing
  5785 ;; This function is called by:
  5786 ;;		_card_response
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text31
  5791   0028C8                     __ptext31:
  5792                           	callstack 0
  5793   0028C8                     _determine_card:
  5794                           	callstack 29
  5795   0028C8                     
  5796                           ;colour_identify.c: 127:     colour predicted_colour = RED;
  5797   0028C8  0E01               	movlw	1
  5798   0028CA  6E09               	movwf	determine_card@predicted_colour^0,c
  5799   0028CC                     
  5800                           ;colour_identify.c: 128:     unsigned int current_smallest = master_closeness[RED];
  5801   0028CC  EE20 F002          	lfsr	2,2
  5802   0028D0  5001               	movf	determine_card@master_closeness^0,w,c
  5803   0028D2  26D9               	addwf	fsr2l,f,c
  5804   0028D4  5002               	movf	(determine_card@master_closeness+1)^0,w,c
  5805   0028D6  22DA               	addwfc	fsr2h,f,c
  5806   0028D8  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5807   0028DC  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5808   0028E0                     
  5809                           ;colour_identify.c: 129:     for(colour i = GREEN; i<=BLACK; i++){
  5810   0028E0  0E02               	movlw	2
  5811   0028E2  6E0A               	movwf	determine_card@i^0,c
  5812   0028E4                     l2730:
  5813                           
  5814                           ;colour_identify.c: 130:         if(master_closeness[i] < current_smallest){
  5815   0028E4  500A               	movf	determine_card@i^0,w,c
  5816   0028E6  0D02               	mullw	2
  5817   0028E8  CFF3 F003          	movff	prodl,??_determine_card
  5818   0028EC  CFF4 F004          	movff	prodh,??_determine_card+1
  5819   0028F0  5003               	movf	??_determine_card^0,w,c
  5820   0028F2  2401               	addwf	determine_card@master_closeness^0,w,c
  5821   0028F4  6ED9               	movwf	fsr2l,c
  5822   0028F6  5004               	movf	(??_determine_card+1)^0,w,c
  5823   0028F8  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5824   0028FA  6EDA               	movwf	fsr2h,c
  5825   0028FC  5007               	movf	determine_card@current_smallest^0,w,c
  5826   0028FE  5CDE               	subwf	postinc2,w,c
  5827   002900  5008               	movf	(determine_card@current_smallest+1)^0,w,c
  5828   002902  58DE               	subwfb	postinc2,w,c
  5829   002904  B0D8               	btfsc	status,0,c
  5830   002906  EF87  F014         	goto	u1351
  5831   00290A  EF89  F014         	goto	u1350
  5832   00290E                     u1351:
  5833   00290E  EF9B  F014         	goto	l2736
  5834   002912                     u1350:
  5835   002912                     
  5836                           ;colour_identify.c: 131:             current_smallest = master_closeness[i];
  5837   002912  500A               	movf	determine_card@i^0,w,c
  5838   002914  0D02               	mullw	2
  5839   002916  CFF3 F003          	movff	prodl,??_determine_card
  5840   00291A  CFF4 F004          	movff	prodh,??_determine_card+1
  5841   00291E  5003               	movf	??_determine_card^0,w,c
  5842   002920  2401               	addwf	determine_card@master_closeness^0,w,c
  5843   002922  6ED9               	movwf	fsr2l,c
  5844   002924  5004               	movf	(??_determine_card+1)^0,w,c
  5845   002926  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5846   002928  6EDA               	movwf	fsr2h,c
  5847   00292A  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5848   00292E  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5849   002932                     
  5850                           ;colour_identify.c: 132:             predicted_colour = i;
  5851   002932  C00A  F009         	movff	determine_card@i,determine_card@predicted_colour
  5852   002936                     l2736:
  5853                           
  5854                           ;colour_identify.c: 134:     }
  5855   002936  2A0A               	incf	determine_card@i^0,f,c
  5856   002938  0E09               	movlw	9
  5857   00293A  640A               	cpfsgt	determine_card@i^0,c
  5858   00293C  EFA2  F014         	goto	u1361
  5859   002940  EFA4  F014         	goto	u1360
  5860   002944                     u1361:
  5861   002944  EF72  F014         	goto	l2730
  5862   002948                     u1360:
  5863   002948                     
  5864                           ;colour_identify.c: 135:     return predicted_colour;
  5865   002948  5009               	movf	determine_card@predicted_colour^0,w,c
  5866   00294A  0012               	return		;funcret
  5867   00294C                     __end_of_determine_card:
  5868                           	callstack 0
  5869                           
  5870 ;; *************** function _collect_avg_readings *****************
  5871 ;; Defined at:
  5872 ;;		line 46 in file "colour_identify.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;  clear_read      2   11[COMRAM] PTR unsigned int 
  5875 ;;		 -> main@clear_read(2), 
  5876 ;;  red_read        2   13[COMRAM] PTR unsigned int 
  5877 ;;		 -> main@red_read(2), 
  5878 ;;  green_read      2   15[COMRAM] PTR unsigned int 
  5879 ;;		 -> main@green_read(2), 
  5880 ;;  blue_read       2   17[COMRAM] PTR unsigned int 
  5881 ;;		 -> main@blue_read(2), 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  i               2   29[COMRAM] int 
  5884 ;;  i               2   27[COMRAM] int 
  5885 ;;  i               2   25[COMRAM] int 
  5886 ;;  i               2   23[COMRAM] int 
  5887 ;;  i               2   21[COMRAM] int 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5897 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5898 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5899 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;Total ram usage:       20 bytes
  5902 ;; Hardware stack levels used: 1
  5903 ;; Hardware stack levels required when called: 3
  5904 ;; This function calls:
  5905 ;;		_color_read_Blue
  5906 ;;		_color_read_Clear
  5907 ;;		_color_read_Green
  5908 ;;		_color_read_Red
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;;		_card_response
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text32
  5916   0016F2                     __ptext32:
  5917                           	callstack 0
  5918   0016F2                     _collect_avg_readings:
  5919                           	callstack 27
  5920   0016F2                     
  5921                           ;colour_identify.c: 46: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 47: {;
      +                          colour_identify.c: 50:     for (int i = 0; i <= 500; i++){
  5922   0016F2  0E00               	movlw	0
  5923   0016F4  6E17               	movwf	(collect_avg_readings@i+1)^0,c
  5924   0016F6  0E00               	movlw	0
  5925   0016F8  6E16               	movwf	collect_avg_readings@i^0,c
  5926   0016FA                     l2606:
  5927                           
  5928                           ;colour_identify.c: 51:         *clear_read = color_read_Clear();
  5929   0016FA  ECBF  F015         	call	_color_read_Clear	;wreg free
  5930   0016FE  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  5931   001702  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  5932   001706  C005  FFDE         	movff	?_color_read_Clear,postinc2
  5933   00170A  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  5934                           
  5935                           ;colour_identify.c: 52:         *red_read = color_read_Red();
  5936   00170E  EC6F  F015         	call	_color_read_Red	;wreg free
  5937   001712  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5938   001716  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5939   00171A  C005  FFDE         	movff	?_color_read_Red,postinc2
  5940   00171E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5941                           
  5942                           ;colour_identify.c: 53:         *green_read = color_read_Green();
  5943   001722  EC97  F015         	call	_color_read_Green	;wreg free
  5944   001726  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5945   00172A  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5946   00172E  C005  FFDE         	movff	?_color_read_Green,postinc2
  5947   001732  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5948                           
  5949                           ;colour_identify.c: 54:         *blue_read = color_read_Blue();
  5950   001736  ECE7  F015         	call	_color_read_Blue	;wreg free
  5951   00173A  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5952   00173E  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5953   001742  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5954   001746  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5955   00174A                     
  5956                           ;colour_identify.c: 55:     }
  5957   00174A  4A16               	infsnz	collect_avg_readings@i^0,f,c
  5958   00174C  2A17               	incf	(collect_avg_readings@i+1)^0,f,c
  5959   00174E  BE17               	btfsc	(collect_avg_readings@i+1)^0,7,c
  5960   001750  EFB3  F00B         	goto	u1271
  5961   001754  0EF5               	movlw	245
  5962   001756  5C16               	subwf	collect_avg_readings@i^0,w,c
  5963   001758  0E01               	movlw	1
  5964   00175A  5817               	subwfb	(collect_avg_readings@i+1)^0,w,c
  5965   00175C  A0D8               	btfss	status,0,c
  5966   00175E  EFB3  F00B         	goto	u1271
  5967   001762  EFB5  F00B         	goto	u1270
  5968   001766                     u1271:
  5969   001766  EF7D  F00B         	goto	l2606
  5970   00176A                     u1270:
  5971   00176A                     
  5972                           ;colour_identify.c: 59:     for(int i = 0; i <= 2; i++){
  5973   00176A  0E00               	movlw	0
  5974   00176C  6E19               	movwf	(collect_avg_readings@i_1561+1)^0,c
  5975   00176E  0E00               	movlw	0
  5976   001770  6E18               	movwf	collect_avg_readings@i_1561^0,c
  5977   001772                     l2618:
  5978                           
  5979                           ;colour_identify.c: 60:         *clear_read += color_read_Clear();
  5980   001772  ECBF  F015         	call	_color_read_Clear	;wreg free
  5981   001776  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  5982   00177A  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  5983   00177E  5005               	movf	?_color_read_Clear^0,w,c
  5984   001780  26DE               	addwf	postinc2,f,c
  5985   001782  5006               	movf	(?_color_read_Clear+1)^0,w,c
  5986   001784  22DD               	addwfc	postdec2,f,c
  5987   001786                     
  5988                           ;colour_identify.c: 61:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5989   001786  0E11               	movlw	17
  5990   001788  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  5991   00178A  0E3C               	movlw	60
  5992   00178C  6E14               	movwf	??_collect_avg_readings^0,c
  5993   00178E  0ECB               	movlw	203
  5994   001790                     u1717:
  5995   001790  2EE8               	decfsz	wreg,f,c
  5996   001792  D7FE               	bra	u1717
  5997   001794  2E14               	decfsz	??_collect_avg_readings^0,f,c
  5998   001796  D7FC               	bra	u1717
  5999   001798  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6000   00179A  D7FA               	bra	u1717
  6001   00179C  F000               	nop	
  6002   00179E                     
  6003                           ;colour_identify.c: 62:     }
  6004   00179E  4A18               	infsnz	collect_avg_readings@i_1561^0,f,c
  6005   0017A0  2A19               	incf	(collect_avg_readings@i_1561+1)^0,f,c
  6006   0017A2  BE19               	btfsc	(collect_avg_readings@i_1561+1)^0,7,c
  6007   0017A4  EFDD  F00B         	goto	u1281
  6008   0017A8  5019               	movf	(collect_avg_readings@i_1561+1)^0,w,c
  6009   0017AA  E109               	bnz	u1280
  6010   0017AC  0E03               	movlw	3
  6011   0017AE  5C18               	subwf	collect_avg_readings@i_1561^0,w,c
  6012   0017B0  A0D8               	btfss	status,0,c
  6013   0017B2  EFDD  F00B         	goto	u1281
  6014   0017B6  EFDF  F00B         	goto	u1280
  6015   0017BA                     u1281:
  6016   0017BA  EFB9  F00B         	goto	l2618
  6017   0017BE                     u1280:
  6018   0017BE                     
  6019                           ;colour_identify.c: 63:     *clear_read = *clear_read/4;
  6020   0017BE  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6021   0017C2  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6022   0017C6  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6023   0017CA  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6024   0017CE  90D8               	bcf	status,0,c
  6025   0017D0  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6026   0017D2  3214               	rrcf	??_collect_avg_readings^0,f,c
  6027   0017D4  90D8               	bcf	status,0,c
  6028   0017D6  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6029   0017D8  3214               	rrcf	??_collect_avg_readings^0,f,c
  6030   0017DA  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6031   0017DE  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6032   0017E2  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6033   0017E6  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6034   0017EA                     
  6035                           ;colour_identify.c: 65:     for(int i = 0; i <= 2; i++){
  6036   0017EA  0E00               	movlw	0
  6037   0017EC  6E1B               	movwf	(collect_avg_readings@i_1562+1)^0,c
  6038   0017EE  0E00               	movlw	0
  6039   0017F0  6E1A               	movwf	collect_avg_readings@i_1562^0,c
  6040   0017F2                     l2634:
  6041                           
  6042                           ;colour_identify.c: 66:         *red_read += color_read_Red();
  6043   0017F2  EC6F  F015         	call	_color_read_Red	;wreg free
  6044   0017F6  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6045   0017FA  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6046   0017FE  5005               	movf	?_color_read_Red^0,w,c
  6047   001800  26DE               	addwf	postinc2,f,c
  6048   001802  5006               	movf	(?_color_read_Red+1)^0,w,c
  6049   001804  22DD               	addwfc	postdec2,f,c
  6050   001806                     
  6051                           ;colour_identify.c: 67:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6052   001806  0E11               	movlw	17
  6053   001808  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6054   00180A  0E3C               	movlw	60
  6055   00180C  6E14               	movwf	??_collect_avg_readings^0,c
  6056   00180E  0ECB               	movlw	203
  6057   001810                     u1727:
  6058   001810  2EE8               	decfsz	wreg,f,c
  6059   001812  D7FE               	bra	u1727
  6060   001814  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6061   001816  D7FC               	bra	u1727
  6062   001818  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6063   00181A  D7FA               	bra	u1727
  6064   00181C  F000               	nop	
  6065   00181E                     
  6066                           ;colour_identify.c: 68:     }
  6067   00181E  4A1A               	infsnz	collect_avg_readings@i_1562^0,f,c
  6068   001820  2A1B               	incf	(collect_avg_readings@i_1562+1)^0,f,c
  6069   001822  BE1B               	btfsc	(collect_avg_readings@i_1562+1)^0,7,c
  6070   001824  EF1D  F00C         	goto	u1291
  6071   001828  501B               	movf	(collect_avg_readings@i_1562+1)^0,w,c
  6072   00182A  E109               	bnz	u1290
  6073   00182C  0E03               	movlw	3
  6074   00182E  5C1A               	subwf	collect_avg_readings@i_1562^0,w,c
  6075   001830  A0D8               	btfss	status,0,c
  6076   001832  EF1D  F00C         	goto	u1291
  6077   001836  EF1F  F00C         	goto	u1290
  6078   00183A                     u1291:
  6079   00183A  EFF9  F00B         	goto	l2634
  6080   00183E                     u1290:
  6081   00183E                     
  6082                           ;colour_identify.c: 69:     *red_read = *red_read/4;
  6083   00183E  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6084   001842  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6085   001846  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6086   00184A  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6087   00184E  90D8               	bcf	status,0,c
  6088   001850  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6089   001852  3214               	rrcf	??_collect_avg_readings^0,f,c
  6090   001854  90D8               	bcf	status,0,c
  6091   001856  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6092   001858  3214               	rrcf	??_collect_avg_readings^0,f,c
  6093   00185A  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6094   00185E  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6095   001862  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6096   001866  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6097   00186A                     
  6098                           ;colour_identify.c: 71:     for(int i = 0; i <= 2; i++){
  6099   00186A  0E00               	movlw	0
  6100   00186C  6E1D               	movwf	(collect_avg_readings@i_1563+1)^0,c
  6101   00186E  0E00               	movlw	0
  6102   001870  6E1C               	movwf	collect_avg_readings@i_1563^0,c
  6103   001872                     l2650:
  6104                           
  6105                           ;colour_identify.c: 72:         *green_read += color_read_Green();
  6106   001872  EC97  F015         	call	_color_read_Green	;wreg free
  6107   001876  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6108   00187A  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6109   00187E  5005               	movf	?_color_read_Green^0,w,c
  6110   001880  26DE               	addwf	postinc2,f,c
  6111   001882  5006               	movf	(?_color_read_Green+1)^0,w,c
  6112   001884  22DD               	addwfc	postdec2,f,c
  6113   001886                     
  6114                           ;colour_identify.c: 73:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6115   001886  0E11               	movlw	17
  6116   001888  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6117   00188A  0E3C               	movlw	60
  6118   00188C  6E14               	movwf	??_collect_avg_readings^0,c
  6119   00188E  0ECB               	movlw	203
  6120   001890                     u1737:
  6121   001890  2EE8               	decfsz	wreg,f,c
  6122   001892  D7FE               	bra	u1737
  6123   001894  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6124   001896  D7FC               	bra	u1737
  6125   001898  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6126   00189A  D7FA               	bra	u1737
  6127   00189C  F000               	nop	
  6128   00189E                     
  6129                           ;colour_identify.c: 74:     }
  6130   00189E  4A1C               	infsnz	collect_avg_readings@i_1563^0,f,c
  6131   0018A0  2A1D               	incf	(collect_avg_readings@i_1563+1)^0,f,c
  6132   0018A2  BE1D               	btfsc	(collect_avg_readings@i_1563+1)^0,7,c
  6133   0018A4  EF5D  F00C         	goto	u1301
  6134   0018A8  501D               	movf	(collect_avg_readings@i_1563+1)^0,w,c
  6135   0018AA  E109               	bnz	u1300
  6136   0018AC  0E03               	movlw	3
  6137   0018AE  5C1C               	subwf	collect_avg_readings@i_1563^0,w,c
  6138   0018B0  A0D8               	btfss	status,0,c
  6139   0018B2  EF5D  F00C         	goto	u1301
  6140   0018B6  EF5F  F00C         	goto	u1300
  6141   0018BA                     u1301:
  6142   0018BA  EF39  F00C         	goto	l2650
  6143   0018BE                     u1300:
  6144   0018BE                     
  6145                           ;colour_identify.c: 75:     *green_read = *green_read/4;
  6146   0018BE  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6147   0018C2  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6148   0018C6  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6149   0018CA  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6150   0018CE  90D8               	bcf	status,0,c
  6151   0018D0  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6152   0018D2  3214               	rrcf	??_collect_avg_readings^0,f,c
  6153   0018D4  90D8               	bcf	status,0,c
  6154   0018D6  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6155   0018D8  3214               	rrcf	??_collect_avg_readings^0,f,c
  6156   0018DA  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6157   0018DE  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6158   0018E2  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6159   0018E6  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6160   0018EA                     
  6161                           ;colour_identify.c: 77:     for(int i = 0; i <= 2; i++){
  6162   0018EA  0E00               	movlw	0
  6163   0018EC  6E1F               	movwf	(collect_avg_readings@i_1564+1)^0,c
  6164   0018EE  0E00               	movlw	0
  6165   0018F0  6E1E               	movwf	collect_avg_readings@i_1564^0,c
  6166   0018F2                     l2666:
  6167                           
  6168                           ;colour_identify.c: 78:         *blue_read += color_read_Blue();
  6169   0018F2  ECE7  F015         	call	_color_read_Blue	;wreg free
  6170   0018F6  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6171   0018FA  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6172   0018FE  5005               	movf	?_color_read_Blue^0,w,c
  6173   001900  26DE               	addwf	postinc2,f,c
  6174   001902  5006               	movf	(?_color_read_Blue+1)^0,w,c
  6175   001904  22DD               	addwfc	postdec2,f,c
  6176   001906                     
  6177                           ;colour_identify.c: 79:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6178   001906  0E11               	movlw	17
  6179   001908  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6180   00190A  0E3C               	movlw	60
  6181   00190C  6E14               	movwf	??_collect_avg_readings^0,c
  6182   00190E  0ECB               	movlw	203
  6183   001910                     u1747:
  6184   001910  2EE8               	decfsz	wreg,f,c
  6185   001912  D7FE               	bra	u1747
  6186   001914  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6187   001916  D7FC               	bra	u1747
  6188   001918  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6189   00191A  D7FA               	bra	u1747
  6190   00191C  F000               	nop	
  6191   00191E                     
  6192                           ;colour_identify.c: 80:     }
  6193   00191E  4A1E               	infsnz	collect_avg_readings@i_1564^0,f,c
  6194   001920  2A1F               	incf	(collect_avg_readings@i_1564+1)^0,f,c
  6195   001922  BE1F               	btfsc	(collect_avg_readings@i_1564+1)^0,7,c
  6196   001924  EF9D  F00C         	goto	u1311
  6197   001928  501F               	movf	(collect_avg_readings@i_1564+1)^0,w,c
  6198   00192A  E109               	bnz	u1310
  6199   00192C  0E03               	movlw	3
  6200   00192E  5C1E               	subwf	collect_avg_readings@i_1564^0,w,c
  6201   001930  A0D8               	btfss	status,0,c
  6202   001932  EF9D  F00C         	goto	u1311
  6203   001936  EF9F  F00C         	goto	u1310
  6204   00193A                     u1311:
  6205   00193A  EF79  F00C         	goto	l2666
  6206   00193E                     u1310:
  6207   00193E                     
  6208                           ;colour_identify.c: 81:     *blue_read = *blue_read/4;
  6209   00193E  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6210   001942  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6211   001946  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6212   00194A  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6213   00194E  90D8               	bcf	status,0,c
  6214   001950  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6215   001952  3214               	rrcf	??_collect_avg_readings^0,f,c
  6216   001954  90D8               	bcf	status,0,c
  6217   001956  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6218   001958  3214               	rrcf	??_collect_avg_readings^0,f,c
  6219   00195A  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6220   00195E  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6221   001962  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6222   001966  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6223   00196A  0012               	return		;funcret
  6224   00196C                     __end_of_collect_avg_readings:
  6225                           	callstack 0
  6226                           
  6227 ;; *************** function _color_read_Red *****************
  6228 ;; Defined at:
  6229 ;;		line 29 in file "color.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  tmp             2    9[COMRAM] unsigned int 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  2    4[COMRAM] unsigned int 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6245 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6246 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6247 ;;Total ram usage:        7 bytes
  6248 ;; Hardware stack levels used: 1
  6249 ;; Hardware stack levels required when called: 2
  6250 ;; This function calls:
  6251 ;;		_I2C_2_Master_Read
  6252 ;;		_I2C_2_Master_RepStart
  6253 ;;		_I2C_2_Master_Start
  6254 ;;		_I2C_2_Master_Stop
  6255 ;;		_I2C_2_Master_Write
  6256 ;; This function is called by:
  6257 ;;		_collect_avg_readings
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text33
  6262   002ADE                     __ptext33:
  6263                           	callstack 0
  6264   002ADE                     _color_read_Red:
  6265                           	callstack 27
  6266   002ADE                     
  6267                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6268   002ADE  EC38  F017         	call	_I2C_2_Master_Start	;wreg free
  6269                           
  6270                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6271   002AE2  0E52               	movlw	82
  6272   002AE4  EC2D  F017         	call	_I2C_2_Master_Write
  6273                           
  6274                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6275   002AE8  0EB6               	movlw	182
  6276   002AEA  EC2D  F017         	call	_I2C_2_Master_Write
  6277                           
  6278                           ;color.c: 35:  I2C_2_Master_RepStart();
  6279   002AEE  EC3D  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6280                           
  6281                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6282   002AF2  0E53               	movlw	83
  6283   002AF4  EC2D  F017         	call	_I2C_2_Master_Write
  6284                           
  6285                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6286   002AF8  0E01               	movlw	1
  6287   002AFA  EC31  F016         	call	_I2C_2_Master_Read
  6288   002AFE  6E07               	movwf	??_color_read_Red^0,c
  6289   002B00  5007               	movf	??_color_read_Red^0,w,c
  6290   002B02  6E0A               	movwf	color_read_Red@tmp^0,c
  6291   002B04  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  6292                           
  6293                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6294   002B06  0E00               	movlw	0
  6295   002B08  EC31  F016         	call	_I2C_2_Master_Read
  6296   002B0C  6E07               	movwf	??_color_read_Red^0,c
  6297   002B0E  5007               	movf	??_color_read_Red^0,w,c
  6298   002B10  6E09               	movwf	(??_color_read_Red+2)^0,c
  6299   002B12  6A08               	clrf	(??_color_read_Red+1)^0,c
  6300   002B14  500A               	movf	color_read_Red@tmp^0,w,c
  6301   002B16  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  6302   002B18  6E0A               	movwf	color_read_Red@tmp^0,c
  6303   002B1A  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  6304   002B1C  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  6305   002B1E  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  6306                           
  6307                           ;color.c: 39:  I2C_2_Master_Stop();
  6308   002B20  EC33  F017         	call	_I2C_2_Master_Stop	;wreg free
  6309   002B24                     
  6310                           ;color.c: 40:  return tmp;
  6311   002B24  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  6312   002B28  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6313   002B2C  0012               	return		;funcret
  6314   002B2E                     __end_of_color_read_Red:
  6315                           	callstack 0
  6316                           
  6317 ;; *************** function _color_read_Green *****************
  6318 ;; Defined at:
  6319 ;;		line 43 in file "color.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  tmp             2    9[COMRAM] unsigned int 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  2    4[COMRAM] unsigned int 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;Total ram usage:        7 bytes
  6338 ;; Hardware stack levels used: 1
  6339 ;; Hardware stack levels required when called: 2
  6340 ;; This function calls:
  6341 ;;		_I2C_2_Master_Read
  6342 ;;		_I2C_2_Master_RepStart
  6343 ;;		_I2C_2_Master_Start
  6344 ;;		_I2C_2_Master_Stop
  6345 ;;		_I2C_2_Master_Write
  6346 ;; This function is called by:
  6347 ;;		_collect_avg_readings
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text34
  6352   002B2E                     __ptext34:
  6353                           	callstack 0
  6354   002B2E                     _color_read_Green:
  6355                           	callstack 27
  6356   002B2E                     
  6357                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6358   002B2E  EC38  F017         	call	_I2C_2_Master_Start	;wreg free
  6359                           
  6360                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6361   002B32  0E52               	movlw	82
  6362   002B34  EC2D  F017         	call	_I2C_2_Master_Write
  6363                           
  6364                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6365   002B38  0EB8               	movlw	184
  6366   002B3A  EC2D  F017         	call	_I2C_2_Master_Write
  6367                           
  6368                           ;color.c: 49:  I2C_2_Master_RepStart();
  6369   002B3E  EC3D  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6370                           
  6371                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6372   002B42  0E53               	movlw	83
  6373   002B44  EC2D  F017         	call	_I2C_2_Master_Write
  6374                           
  6375                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6376   002B48  0E01               	movlw	1
  6377   002B4A  EC31  F016         	call	_I2C_2_Master_Read
  6378   002B4E  6E07               	movwf	??_color_read_Green^0,c
  6379   002B50  5007               	movf	??_color_read_Green^0,w,c
  6380   002B52  6E0A               	movwf	color_read_Green@tmp^0,c
  6381   002B54  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  6382                           
  6383                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6384   002B56  0E00               	movlw	0
  6385   002B58  EC31  F016         	call	_I2C_2_Master_Read
  6386   002B5C  6E07               	movwf	??_color_read_Green^0,c
  6387   002B5E  5007               	movf	??_color_read_Green^0,w,c
  6388   002B60  6E09               	movwf	(??_color_read_Green+2)^0,c
  6389   002B62  6A08               	clrf	(??_color_read_Green+1)^0,c
  6390   002B64  500A               	movf	color_read_Green@tmp^0,w,c
  6391   002B66  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  6392   002B68  6E0A               	movwf	color_read_Green@tmp^0,c
  6393   002B6A  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  6394   002B6C  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  6395   002B6E  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  6396                           
  6397                           ;color.c: 53:  I2C_2_Master_Stop();
  6398   002B70  EC33  F017         	call	_I2C_2_Master_Stop	;wreg free
  6399   002B74                     
  6400                           ;color.c: 54:  return tmp;
  6401   002B74  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  6402   002B78  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6403   002B7C  0012               	return		;funcret
  6404   002B7E                     __end_of_color_read_Green:
  6405                           	callstack 0
  6406                           
  6407 ;; *************** function _color_read_Clear *****************
  6408 ;; Defined at:
  6409 ;;		line 71 in file "color.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;  tmp             2    9[COMRAM] unsigned int 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  2    4[COMRAM] unsigned int 
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6425 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6426 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6427 ;;Total ram usage:        7 bytes
  6428 ;; Hardware stack levels used: 1
  6429 ;; Hardware stack levels required when called: 2
  6430 ;; This function calls:
  6431 ;;		_I2C_2_Master_Read
  6432 ;;		_I2C_2_Master_RepStart
  6433 ;;		_I2C_2_Master_Start
  6434 ;;		_I2C_2_Master_Stop
  6435 ;;		_I2C_2_Master_Write
  6436 ;; This function is called by:
  6437 ;;		_clear_read_calibration
  6438 ;;		_collect_avg_readings
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text35
  6443   002B7E                     __ptext35:
  6444                           	callstack 0
  6445   002B7E                     _color_read_Clear:
  6446                           	callstack 27
  6447   002B7E                     
  6448                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6449   002B7E  EC38  F017         	call	_I2C_2_Master_Start	;wreg free
  6450                           
  6451                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6452   002B82  0E52               	movlw	82
  6453   002B84  EC2D  F017         	call	_I2C_2_Master_Write
  6454                           
  6455                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6456   002B88  0EB4               	movlw	180
  6457   002B8A  EC2D  F017         	call	_I2C_2_Master_Write
  6458                           
  6459                           ;color.c: 77:  I2C_2_Master_RepStart();
  6460   002B8E  EC3D  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6461                           
  6462                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6463   002B92  0E53               	movlw	83
  6464   002B94  EC2D  F017         	call	_I2C_2_Master_Write
  6465                           
  6466                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6467   002B98  0E01               	movlw	1
  6468   002B9A  EC31  F016         	call	_I2C_2_Master_Read
  6469   002B9E  6E07               	movwf	??_color_read_Clear^0,c
  6470   002BA0  5007               	movf	??_color_read_Clear^0,w,c
  6471   002BA2  6E0A               	movwf	color_read_Clear@tmp^0,c
  6472   002BA4  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  6473                           
  6474                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6475   002BA6  0E00               	movlw	0
  6476   002BA8  EC31  F016         	call	_I2C_2_Master_Read
  6477   002BAC  6E07               	movwf	??_color_read_Clear^0,c
  6478   002BAE  5007               	movf	??_color_read_Clear^0,w,c
  6479   002BB0  6E09               	movwf	(??_color_read_Clear+2)^0,c
  6480   002BB2  6A08               	clrf	(??_color_read_Clear+1)^0,c
  6481   002BB4  500A               	movf	color_read_Clear@tmp^0,w,c
  6482   002BB6  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  6483   002BB8  6E0A               	movwf	color_read_Clear@tmp^0,c
  6484   002BBA  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  6485   002BBC  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  6486   002BBE  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  6487                           
  6488                           ;color.c: 81:  I2C_2_Master_Stop();
  6489   002BC0  EC33  F017         	call	_I2C_2_Master_Stop	;wreg free
  6490   002BC4                     
  6491                           ;color.c: 82:  return tmp;
  6492   002BC4  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  6493   002BC8  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6494   002BCC  0012               	return		;funcret
  6495   002BCE                     __end_of_color_read_Clear:
  6496                           	callstack 0
  6497                           
  6498 ;; *************** function _color_read_Blue *****************
  6499 ;; Defined at:
  6500 ;;		line 57 in file "color.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;		None
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  tmp             2    9[COMRAM] unsigned int 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  2    4[COMRAM] unsigned int 
  6507 ;; Registers used:
  6508 ;;		wreg, status,2, status,0, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6514 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6516 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6517 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6518 ;;Total ram usage:        7 bytes
  6519 ;; Hardware stack levels used: 1
  6520 ;; Hardware stack levels required when called: 2
  6521 ;; This function calls:
  6522 ;;		_I2C_2_Master_Read
  6523 ;;		_I2C_2_Master_RepStart
  6524 ;;		_I2C_2_Master_Start
  6525 ;;		_I2C_2_Master_Stop
  6526 ;;		_I2C_2_Master_Write
  6527 ;; This function is called by:
  6528 ;;		_collect_avg_readings
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text36
  6533   002BCE                     __ptext36:
  6534                           	callstack 0
  6535   002BCE                     _color_read_Blue:
  6536                           	callstack 27
  6537   002BCE                     
  6538                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6539   002BCE  EC38  F017         	call	_I2C_2_Master_Start	;wreg free
  6540                           
  6541                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6542   002BD2  0E52               	movlw	82
  6543   002BD4  EC2D  F017         	call	_I2C_2_Master_Write
  6544                           
  6545                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6546   002BD8  0EBA               	movlw	186
  6547   002BDA  EC2D  F017         	call	_I2C_2_Master_Write
  6548                           
  6549                           ;color.c: 63:  I2C_2_Master_RepStart();
  6550   002BDE  EC3D  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6551                           
  6552                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6553   002BE2  0E53               	movlw	83
  6554   002BE4  EC2D  F017         	call	_I2C_2_Master_Write
  6555                           
  6556                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6557   002BE8  0E01               	movlw	1
  6558   002BEA  EC31  F016         	call	_I2C_2_Master_Read
  6559   002BEE  6E07               	movwf	??_color_read_Blue^0,c
  6560   002BF0  5007               	movf	??_color_read_Blue^0,w,c
  6561   002BF2  6E0A               	movwf	color_read_Blue@tmp^0,c
  6562   002BF4  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  6563                           
  6564                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6565   002BF6  0E00               	movlw	0
  6566   002BF8  EC31  F016         	call	_I2C_2_Master_Read
  6567   002BFC  6E07               	movwf	??_color_read_Blue^0,c
  6568   002BFE  5007               	movf	??_color_read_Blue^0,w,c
  6569   002C00  6E09               	movwf	(??_color_read_Blue+2)^0,c
  6570   002C02  6A08               	clrf	(??_color_read_Blue+1)^0,c
  6571   002C04  500A               	movf	color_read_Blue@tmp^0,w,c
  6572   002C06  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  6573   002C08  6E0A               	movwf	color_read_Blue@tmp^0,c
  6574   002C0A  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  6575   002C0C  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  6576   002C0E  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  6577                           
  6578                           ;color.c: 67:  I2C_2_Master_Stop();
  6579   002C10  EC33  F017         	call	_I2C_2_Master_Stop	;wreg free
  6580   002C14                     
  6581                           ;color.c: 68:  return tmp;
  6582   002C14  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  6583   002C18  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6584   002C1C  0012               	return		;funcret
  6585   002C1E                     __end_of_color_read_Blue:
  6586                           	callstack 0
  6587                           
  6588 ;; *************** function _I2C_2_Master_Write *****************
  6589 ;; Defined at:
  6590 ;;		line 45 in file "i2c.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;  data_byte       1    wreg     unsigned char 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  data_byte       1    1[COMRAM] unsigned char 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6608 ;;Total ram usage:        1 bytes
  6609 ;; Hardware stack levels used: 1
  6610 ;; Hardware stack levels required when called: 1
  6611 ;; This function calls:
  6612 ;;		_I2C_2_Master_Idle
  6613 ;; This function is called by:
  6614 ;;		_color_writetoaddr
  6615 ;;		_color_read_Red
  6616 ;;		_color_read_Green
  6617 ;;		_color_read_Blue
  6618 ;;		_color_read_Clear
  6619 ;;		_read_interrupt_status
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text37
  6624   002E5A                     __ptext37:
  6625                           	callstack 0
  6626   002E5A                     _I2C_2_Master_Write:
  6627                           	callstack 27
  6628                           
  6629                           ;incstack = 0
  6630                           ;I2C_2_Master_Write@data_byte stored from wreg
  6631   002E5A  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6632   002E5C                     
  6633                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6634   002E5C  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6635   002E60                     
  6636                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6637   002E60  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6638   002E64  0012               	return		;funcret
  6639   002E66                     __end_of_I2C_2_Master_Write:
  6640                           	callstack 0
  6641                           
  6642 ;; *************** function _I2C_2_Master_Stop *****************
  6643 ;; Defined at:
  6644 ;;		line 39 in file "i2c.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      void 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used: 1
  6664 ;; Hardware stack levels required when called: 1
  6665 ;; This function calls:
  6666 ;;		_I2C_2_Master_Idle
  6667 ;; This function is called by:
  6668 ;;		_color_writetoaddr
  6669 ;;		_color_read_Red
  6670 ;;		_color_read_Green
  6671 ;;		_color_read_Blue
  6672 ;;		_color_read_Clear
  6673 ;;		_read_interrupt_status
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text38
  6678   002E66                     __ptext38:
  6679                           	callstack 0
  6680   002E66                     _I2C_2_Master_Stop:
  6681                           	callstack 27
  6682   002E66                     
  6683                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6684   002E66  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6685   002E6A                     
  6686                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6687   002E6A  010E               	movlb	14	; () banked
  6688   002E6C  85DA               	bsf	218,2,b	;volatile
  6689   002E6E                     
  6690                           ; BSR set to: 14
  6691   002E6E  0012               	return		;funcret
  6692   002E70                     __end_of_I2C_2_Master_Stop:
  6693                           	callstack 0
  6694                           
  6695 ;; *************** function _I2C_2_Master_Start *****************
  6696 ;; Defined at:
  6697 ;;		line 27 in file "i2c.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, status,2, status,0, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6715 ;;Total ram usage:        0 bytes
  6716 ;; Hardware stack levels used: 1
  6717 ;; Hardware stack levels required when called: 1
  6718 ;; This function calls:
  6719 ;;		_I2C_2_Master_Idle
  6720 ;; This function is called by:
  6721 ;;		_color_writetoaddr
  6722 ;;		_color_read_Red
  6723 ;;		_color_read_Green
  6724 ;;		_color_read_Blue
  6725 ;;		_color_read_Clear
  6726 ;;		_read_interrupt_status
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text39
  6731   002E70                     __ptext39:
  6732                           	callstack 0
  6733   002E70                     _I2C_2_Master_Start:
  6734                           	callstack 27
  6735   002E70                     
  6736                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6737   002E70  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6738   002E74                     
  6739                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6740   002E74  010E               	movlb	14	; () banked
  6741   002E76  81DA               	bsf	218,0,b	;volatile
  6742   002E78                     
  6743                           ; BSR set to: 14
  6744   002E78  0012               	return		;funcret
  6745   002E7A                     __end_of_I2C_2_Master_Start:
  6746                           	callstack 0
  6747                           
  6748 ;; *************** function _I2C_2_Master_RepStart *****************
  6749 ;; Defined at:
  6750 ;;		line 33 in file "i2c.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;		None
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, status,2, status,0, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6768 ;;Total ram usage:        0 bytes
  6769 ;; Hardware stack levels used: 1
  6770 ;; Hardware stack levels required when called: 1
  6771 ;; This function calls:
  6772 ;;		_I2C_2_Master_Idle
  6773 ;; This function is called by:
  6774 ;;		_color_read_Red
  6775 ;;		_color_read_Green
  6776 ;;		_color_read_Blue
  6777 ;;		_color_read_Clear
  6778 ;;		_read_interrupt_status
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text40
  6783   002E7A                     __ptext40:
  6784                           	callstack 0
  6785   002E7A                     _I2C_2_Master_RepStart:
  6786                           	callstack 27
  6787   002E7A                     
  6788                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6789   002E7A  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6790   002E7E                     
  6791                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6792   002E7E  010E               	movlb	14	; () banked
  6793   002E80  83DA               	bsf	218,1,b	;volatile
  6794   002E82                     
  6795                           ; BSR set to: 14
  6796   002E82  0012               	return		;funcret
  6797   002E84                     __end_of_I2C_2_Master_RepStart:
  6798                           	callstack 0
  6799                           
  6800 ;; *************** function _I2C_2_Master_Read *****************
  6801 ;; Defined at:
  6802 ;;		line 51 in file "i2c.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  ack             1    wreg     unsigned char 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  ack             1    2[COMRAM] unsigned char 
  6807 ;;  tmp             1    3[COMRAM] unsigned char 
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      unsigned char 
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6821 ;;Total ram usage:        3 bytes
  6822 ;; Hardware stack levels used: 1
  6823 ;; Hardware stack levels required when called: 1
  6824 ;; This function calls:
  6825 ;;		_I2C_2_Master_Idle
  6826 ;; This function is called by:
  6827 ;;		_color_read_Red
  6828 ;;		_color_read_Green
  6829 ;;		_color_read_Blue
  6830 ;;		_color_read_Clear
  6831 ;;		_read_interrupt_status
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text41
  6836   002C62                     __ptext41:
  6837                           	callstack 0
  6838   002C62                     _I2C_2_Master_Read:
  6839                           	callstack 27
  6840                           
  6841                           ; BSR set to: 14
  6842                           ;incstack = 0
  6843                           ;I2C_2_Master_Read@ack stored from wreg
  6844   002C62  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6845   002C64                     
  6846                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6847   002C64  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6848   002C68                     
  6849                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6850   002C68  010E               	movlb	14	; () banked
  6851   002C6A  87DA               	bsf	218,3,b	;volatile
  6852                           
  6853                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6854   002C6C  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6855   002C70                     
  6856                           ;i2c.c: 57:   tmp = SSP2BUF;
  6857   002C70  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6858                           
  6859                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6860   002C74  ECB9  F016         	call	_I2C_2_Master_Idle	;wreg free
  6861   002C78                     
  6862                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6863   002C78  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6864   002C7A  B4D8               	btfsc	status,2,c
  6865   002C7C  EF42  F016         	goto	u1131
  6866   002C80  EF46  F016         	goto	u1130
  6867   002C84                     u1131:
  6868   002C84  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6869   002C86  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6870   002C88  EF47  F016         	goto	u1148
  6871   002C8C                     u1130:
  6872   002C8C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6873   002C8E                     u1148:
  6874   002C8E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6875   002C90  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6876   002C92  010E               	movlb	14	; () banked
  6877   002C94  51DA               	movf	218,w,b	;volatile
  6878   002C96  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6879   002C98  0BDF               	andlw	-33
  6880   002C9A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6881   002C9C  6FDA               	movwf	218,b	;volatile
  6882   002C9E                     
  6883                           ; BSR set to: 14
  6884                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6885   002C9E  89DA               	bsf	218,4,b	;volatile
  6886   002CA0                     
  6887                           ; BSR set to: 14
  6888                           ;i2c.c: 61:   return tmp;
  6889   002CA0  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6890   002CA2                     
  6891                           ; BSR set to: 14
  6892   002CA2  0012               	return		;funcret
  6893   002CA4                     __end_of_I2C_2_Master_Read:
  6894                           	callstack 0
  6895                           
  6896 ;; *************** function _I2C_2_Master_Idle *****************
  6897 ;; Defined at:
  6898 ;;		line 22 in file "i2c.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;		None
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;		None
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  1    wreg      void 
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0
  6907 ;; Tracked objects:
  6908 ;;		On entry : 0/0
  6909 ;;		On exit  : 0/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6916 ;;Total ram usage:        1 bytes
  6917 ;; Hardware stack levels used: 1
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_I2C_2_Master_Start
  6922 ;;		_I2C_2_Master_RepStart
  6923 ;;		_I2C_2_Master_Stop
  6924 ;;		_I2C_2_Master_Write
  6925 ;;		_I2C_2_Master_Read
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text42
  6930   002D72                     __ptext42:
  6931                           	callstack 0
  6932   002D72                     _I2C_2_Master_Idle:
  6933                           	callstack 27
  6934   002D72                     l154:
  6935   002D72  010E               	movlb	14	; () banked
  6936   002D74  B5D8               	btfsc	216,2,b	;volatile
  6937   002D76  EFBF  F016         	goto	u981
  6938   002D7A  EFC1  F016         	goto	u980
  6939   002D7E                     u981:
  6940   002D7E  EFB9  F016         	goto	l154
  6941   002D82                     u980:
  6942   002D82                     
  6943                           ; BSR set to: 14
  6944   002D82  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6945   002D86  0E1F               	movlw	31
  6946   002D88  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6947   002D8A  A4D8               	btfss	status,2,c
  6948   002D8C  EFCA  F016         	goto	u991
  6949   002D90  EFCC  F016         	goto	u990
  6950   002D94                     u991:
  6951   002D94  EFB9  F016         	goto	l154
  6952   002D98                     u990:
  6953   002D98                     
  6954                           ; BSR set to: 14
  6955   002D98  0012               	return		;funcret
  6956   002D9A                     __end_of_I2C_2_Master_Idle:
  6957                           	callstack 0
  6958                           
  6959 ;; *************** function _LEDSon_init *****************
  6960 ;; Defined at:
  6961 ;;		line 18 in file "LEDsOn.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      void 
  6968 ;; Registers used:
  6969 ;;		None
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6979 ;;Total ram usage:        0 bytes
  6980 ;; Hardware stack levels used: 1
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_main
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text43
  6989   002DC0                     __ptext43:
  6990                           	callstack 0
  6991   002DC0                     _LEDSon_init:
  6992                           	callstack 30
  6993   002DC0                     
  6994                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  6995   002DC0  9288               	bcf	136,1,c	;volatile
  6996                           
  6997                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  6998   002DC2  9088               	bcf	136,0,c	;volatile
  6999                           
  7000                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7001   002DC4  9884               	bcf	132,4,c	;volatile
  7002                           
  7003                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7004   002DC6  9684               	bcf	132,3,c	;volatile
  7005                           
  7006                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7007   002DC8  9086               	bcf	134,0,c	;volatile
  7008                           
  7009                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7010   002DCA  9287               	bcf	135,1,c	;volatile
  7011                           
  7012                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7013   002DCC  9E86               	bcf	134,7,c	;volatile
  7014                           
  7015                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7016   002DCE  9881               	bcf	129,4,c	;volatile
  7017                           
  7018                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7019   002DD0  8E7E               	bsf	126,7,c	;volatile
  7020                           
  7021                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7022   002DD2  827F               	bsf	127,1,c	;volatile
  7023                           
  7024                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7025   002DD4  8879               	bsf	121,4,c	;volatile
  7026                           
  7027                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7028   002DD6  987C               	bcf	124,4,c	;volatile
  7029                           
  7030                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7031   002DD8  9280               	bcf	128,1,c	;volatile
  7032                           
  7033                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7034   002DDA  907E               	bcf	126,0,c	;volatile
  7035                           
  7036                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7037   002DDC  9080               	bcf	128,0,c	;volatile
  7038                           
  7039                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7040   002DDE  967C               	bcf	124,3,c	;volatile
  7041   002DE0  0012               	return		;funcret
  7042   002DE2                     __end_of_LEDSon_init:
  7043                           	callstack 0
  7044                           
  7045                           	psect	rparam
  7046   000000                     
  7047                           	psect	idloc
  7048                           
  7049                           ;Config register IDLOC0 @ 0x200000
  7050                           ;	unspecified, using default values
  7051   200000                     	org	2097152
  7052   200000  0FFF               	dw	4095
  7053                           
  7054                           ;Config register IDLOC1 @ 0x200002
  7055                           ;	unspecified, using default values
  7056   200002                     	org	2097154
  7057   200002  0FFF               	dw	4095
  7058                           
  7059                           ;Config register IDLOC2 @ 0x200004
  7060                           ;	unspecified, using default values
  7061   200004                     	org	2097156
  7062   200004  0FFF               	dw	4095
  7063                           
  7064                           ;Config register IDLOC3 @ 0x200006
  7065                           ;	unspecified, using default values
  7066   200006                     	org	2097158
  7067   200006  0FFF               	dw	4095
  7068                           
  7069                           ;Config register IDLOC4 @ 0x200008
  7070                           ;	unspecified, using default values
  7071   200008                     	org	2097160
  7072   200008  0FFF               	dw	4095
  7073                           
  7074                           ;Config register IDLOC5 @ 0x20000A
  7075                           ;	unspecified, using default values
  7076   20000A                     	org	2097162
  7077   20000A  0FFF               	dw	4095
  7078                           
  7079                           ;Config register IDLOC6 @ 0x20000C
  7080                           ;	unspecified, using default values
  7081   20000C                     	org	2097164
  7082   20000C  0FFF               	dw	4095
  7083                           
  7084                           ;Config register IDLOC7 @ 0x20000E
  7085                           ;	unspecified, using default values
  7086   20000E                     	org	2097166
  7087   20000E  0FFF               	dw	4095
  7088                           
  7089                           	psect	config
  7090                           
  7091                           ;Config register CONFIG1L @ 0x300000
  7092                           ;	External Oscillator mode Selection bits
  7093                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7094                           ;	Power-up default value for COSC bits
  7095                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7096   300000                     	org	3145728
  7097   300000  AA                 	db	170
  7098                           
  7099                           ;Config register CONFIG1H @ 0x300001
  7100                           ;	unspecified, using default values
  7101                           ;	Clock Out Enable bit
  7102                           ;	CLKOUTEN = 0x1, unprogrammed default
  7103                           ;	Clock Switch Enable bit
  7104                           ;	CSWEN = 0x1, unprogrammed default
  7105                           ;	Fail-Safe Clock Monitor Enable bit
  7106                           ;	FCMEN = 0x1, unprogrammed default
  7107   300001                     	org	3145729
  7108   300001  FF                 	db	255
  7109                           
  7110                           ;Config register CONFIG2L @ 0x300002
  7111                           ;	unspecified, using default values
  7112                           ;	Master Clear Enable bit
  7113                           ;	MCLRE = 0x1, unprogrammed default
  7114                           ;	Power-up Timer Enable bit
  7115                           ;	PWRTE = 0x1, unprogrammed default
  7116                           ;	Low-power BOR enable bit
  7117                           ;	LPBOREN = 0x1, unprogrammed default
  7118                           ;	Brown-out Reset Enable bits
  7119                           ;	BOREN = 0x3, unprogrammed default
  7120   300002                     	org	3145730
  7121   300002  FF                 	db	255
  7122                           
  7123                           ;Config register CONFIG2H @ 0x300003
  7124                           ;	unspecified, using default values
  7125                           ;	Brown Out Reset Voltage selection bits
  7126                           ;	BORV = 0x3, unprogrammed default
  7127                           ;	ZCD Disable bit
  7128                           ;	ZCD = 0x1, unprogrammed default
  7129                           ;	PPSLOCK bit One-Way Set Enable bit
  7130                           ;	PPS1WAY = 0x1, unprogrammed default
  7131                           ;	Stack Full/Underflow Reset Enable bit
  7132                           ;	STVREN = 0x1, unprogrammed default
  7133                           ;	Debugger Enable bit
  7134                           ;	DEBUG = 0x1, unprogrammed default
  7135                           ;	Extended Instruction Set Enable bit
  7136                           ;	XINST = 0x1, unprogrammed default
  7137   300003                     	org	3145731
  7138   300003  FF                 	db	255
  7139                           
  7140                           ;Config register CONFIG3L @ 0x300004
  7141                           ;	WDT Period Select bits
  7142                           ;	WDTCPS = 0x1F, unprogrammed default
  7143                           ;	WDT operating mode
  7144                           ;	WDTE = OFF, WDT Disabled
  7145   300004                     	org	3145732
  7146   300004  9F                 	db	159
  7147                           
  7148                           ;Config register CONFIG3H @ 0x300005
  7149                           ;	unspecified, using default values
  7150                           ;	WDT Window Select bits
  7151                           ;	WDTCWS = 0x7, unprogrammed default
  7152                           ;	WDT input clock selector
  7153                           ;	WDTCCS = 0x7, unprogrammed default
  7154   300005                     	org	3145733
  7155   300005  FF                 	db	255
  7156                           
  7157                           ;Config register CONFIG4L @ 0x300006
  7158                           ;	unspecified, using default values
  7159                           ;	Write Protection Block 0
  7160                           ;	WRT0 = 0x1, unprogrammed default
  7161                           ;	Write Protection Block 1
  7162                           ;	WRT1 = 0x1, unprogrammed default
  7163                           ;	Write Protection Block 2
  7164                           ;	WRT2 = 0x1, unprogrammed default
  7165                           ;	Write Protection Block 3
  7166                           ;	WRT3 = 0x1, unprogrammed default
  7167                           ;	Write Protection Block 3
  7168                           ;	WRT4 = 0x1, unprogrammed default
  7169                           ;	Write Protection Block 3
  7170                           ;	WRT5 = 0x1, unprogrammed default
  7171                           ;	Write Protection Block 3
  7172                           ;	WRT6 = 0x1, unprogrammed default
  7173                           ;	Write Protection Block 3
  7174                           ;	WRT7 = 0x1, unprogrammed default
  7175   300006                     	org	3145734
  7176   300006  FF                 	db	255
  7177                           
  7178                           ;Config register CONFIG4H @ 0x300007
  7179                           ;	unspecified, using default values
  7180                           ;	Configuration Register Write Protection bit
  7181                           ;	WRTC = 0x1, unprogrammed default
  7182                           ;	Boot Block Write Protection bit
  7183                           ;	WRTB = 0x1, unprogrammed default
  7184                           ;	Data EEPROM Write Protection bit
  7185                           ;	WRTD = 0x1, unprogrammed default
  7186                           ;	Scanner Enable bit
  7187                           ;	SCANE = 0x1, unprogrammed default
  7188                           ;	Low Voltage Programming Enable bit
  7189                           ;	LVP = 0x1, unprogrammed default
  7190   300007                     	org	3145735
  7191   300007  FF                 	db	255
  7192                           
  7193                           ;Config register CONFIG5L @ 0x300008
  7194                           ;	unspecified, using default values
  7195                           ;	UserNVM Program Memory Code Protection bit
  7196                           ;	CP = 0x1, unprogrammed default
  7197                           ;	DataNVM Memory Code Protection bit
  7198                           ;	CPD = 0x1, unprogrammed default
  7199   300008                     	org	3145736
  7200   300008  FF                 	db	255
  7201                           
  7202                           ;Config register CONFIG5H @ 0x300009
  7203                           ;	unspecified, using default values
  7204   300009                     	org	3145737
  7205   300009  FF                 	db	255
  7206                           
  7207                           ;Config register CONFIG6L @ 0x30000A
  7208                           ;	unspecified, using default values
  7209                           ;	Table Read Protection Block 0
  7210                           ;	EBTR0 = 0x1, unprogrammed default
  7211                           ;	Table Read Protection Block 1
  7212                           ;	EBTR1 = 0x1, unprogrammed default
  7213                           ;	Table Read Protection Block 2
  7214                           ;	EBTR2 = 0x1, unprogrammed default
  7215                           ;	Table Read Protection Block 3
  7216                           ;	EBTR3 = 0x1, unprogrammed default
  7217                           ;	Table Read Protection Block 4
  7218                           ;	EBTR4 = 0x1, unprogrammed default
  7219                           ;	Table Read Protection Block 5
  7220                           ;	EBTR5 = 0x1, unprogrammed default
  7221                           ;	Table Read Protection Block 6
  7222                           ;	EBTR6 = 0x1, unprogrammed default
  7223                           ;	Table Read Protection Block 7
  7224                           ;	EBTR7 = 0x1, unprogrammed default
  7225   30000A                     	org	3145738
  7226   30000A  FF                 	db	255
  7227                           
  7228                           ;Config register CONFIG6H @ 0x30000B
  7229                           ;	unspecified, using default values
  7230                           ;	Boot Block Table Read Protection bit
  7231                           ;	EBTRB = 0x1, unprogrammed default
  7232   30000B                     	org	3145739
  7233   30000B  FF                 	db	255
  7234                           tosu	equ	0xFFF
  7235                           tosh	equ	0xFFE
  7236                           tosl	equ	0xFFD
  7237                           stkptr	equ	0xFFC
  7238                           pclatu	equ	0xFFB
  7239                           pclath	equ	0xFFA
  7240                           pcl	equ	0xFF9
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           indf0	equ	0xFEF
  7248                           postinc0	equ	0xFEE
  7249                           postdec0	equ	0xFED
  7250                           preinc0	equ	0xFEC
  7251                           plusw0	equ	0xFEB
  7252                           fsr0h	equ	0xFEA
  7253                           fsr0l	equ	0xFE9
  7254                           wreg	equ	0xFE8
  7255                           indf1	equ	0xFE7
  7256                           postinc1	equ	0xFE6
  7257                           postdec1	equ	0xFE5
  7258                           preinc1	equ	0xFE4
  7259                           plusw1	equ	0xFE3
  7260                           fsr1h	equ	0xFE2
  7261                           fsr1l	equ	0xFE1
  7262                           bsr	equ	0xFE0
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           postdec2	equ	0xFDD
  7266                           preinc2	equ	0xFDC
  7267                           plusw2	equ	0xFDB
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160    134     142
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2281$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2232$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2232$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S532DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S532DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_clear_read_calibration
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               254   254      0   56420
                                             92 COMRAM     2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    7332
                                             88 COMRAM     4     4      0
                                             27 BANK0     10     4      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   35913
                                             27 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    6330
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5523
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5173
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3953
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    3445
                                             22 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     446
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   22108
                                             27 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    4875
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4267
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    6153
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4571
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    2981
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     963
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     750
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     494
                                              0 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1642
                                             11 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRllhhhl     1E      0       0      48        0.0%
BITBIGSFRhhlllh     17      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      49        0.0%
BITBIGSFRllllhl      F      0       0      56        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      55        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      57        0.0%
BITBIGSFRllllhh      6      0       0      53        0.0%
BITBIGSFRlllhl       5      0       0      52        0.0%
BITBIGSFRhhllll      5      0       0      37        0.0%
BITBIGSFRlllhh       3      0       0      51        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      50        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     259      59        0.0%
DATA                 0      0     259       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 21:15:07 2022

clear_read_calibration@clear_read_check 007F                          _color_read_Red 2ADE  
                       _color_read_Blue 2BCE                                      l22 2E40  
                                    l31 2C1C                                      l25 2B2C  
                                    l34 2BCC                                      l19 2D16  
                                    l28 2B7C                                      l95 1ECC  
                                    l88 2840                     ___wmul@multiplicand 0003  
                      _color_read_Clear 2B7E                        _color_read_Green 2B2E  
                                   l104 28C6                                     l114 272C  
                                   l124 27B8                                     l109 2680  
                                   l151 2D70                                     l160 2E78  
                                   l313 23FC                                     l154 2D72  
                                   l242 1B7C                                     l234 1B40  
                                   l163 2E82                                     l331 1472  
                                   l411 2E58                                     l243 1B78  
                                   l235 1A1E                                     l172 2CA2  
                                   l244 1B8A                                     l236 1A1C  
                                   l157 2D98                                     l237 1A2C  
                                   l270 2DE0                                     l166 2E6E  
                                   l326 196A                                     l342 294A  
                                   l238 1B48                                     l239 1B46  
                                   l336 2508                                     l408 2E44  
                                   l360 22DC                                     l169 2E64  
                                   l417 2D46                                     l452 2DBE  
                                   l357 118E                                     l566 1D60  
                                   l399 2E20                                     l579 2030  
                                   l950 2A38                                     l943 2A30  
                                   u800 258C                                     u801 2588  
                                   u810 2C60                                     u811 2C5C  
                                   u820 2CBE                                     u900 1EE0  
                                   u821 2CBA                                     u901 1EDC  
                                   u830 1BEC                                     u910 1F12  
                                   u831 1BE8                                     u911 1F0E  
                                   u840 1C1E                                     u920 1F50  
                                   u841 1C1A                                     u921 1F4C  
                                   u930 1F7A                                     u770 251C  
                                   u851 1C48                                     u931 1F76  
                                   u771 2518                                     u860 1C6C  
                                   u940 1FA8                                     u780 252E  
                                   u861 1C68                                     u941 1FA4  
                                   u781 252A                                     u870 1C96  
                                   u950 1FF0                                     u790 2556  
                                   u871 1C92                                     u951 1FEC  
                                   u791 2552                                     u880 1CD6  
                                   u960 295A                                     u881 1CD2  
                                   u961 2956                                     u890 1D20  
                                   u970 29B0                                     u891 1D1C  
                                   u971 29AC                                     u980 2D82  
                                   u981 2D7E                                     u990 2D98  
                                   u991 2D94     normalise_readings@normalised_values 0023  
                      ??_motor_response 0020                                     _abs 2CA4  
                                   _pad 294C                   __end_of_card_response 22DE  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0059                                    l1130 2CE2  
                                  ?_abs 0013                                    l1127 2CDA  
                                  l1207 25D2                                    l1215 2C60  
                                  l2200 2C1E                                    l3000 1970  
                                  l1137 2A8A                                    l2210 2CBE  
                                  l1218 2E84                                    l2202 2C2A  
                                  l1170 1508                                    l3010 1982  
                                  l3002 1974                                    l1163 29C4  
                                  l1171 154E                                    l2220 1C10  
                                  l2212 1BDA                                    l2204 2C3C  
                                  l2300 298E                                    l3020 1998  
                                  l3012 1986                                    l3004 1978  
                                  l2310 2D9A                                    l2230 1C6C  
                                  l2222 1C1E                                    l2214 1BDE  
                                  l2206 2C40                                    l2302 2992  
                                  l1182 16F0                                    l3030 19B6  
                                  l3022 19A0                                    l3014 198A  
                                  l3006 197C                                    l1159 296E  
                                  l2400 2E6A                                    l2320 29E0  
                                  l2312 2DB6                                    l2208 2CA4  
                                  l2240 1CD6                                    l2232 1C74  
                                  l2224 1C3E                                    l2216 1BEC  
                                  l2304 29B0                                    l1168 1500  
                                  l3040 19DC                                    l3032 19BA  
                                  l3024 19A8                                    l3016 1990  
                                  l3008 1980                                    l2306 2D72  
                                  l2410 2C70                                    l2402 2E7A  
                                  l2330 2A1A                                    l2322 29E8  
                                  l2250 1D20                                    l2242 1CF6  
                                  l2234 1C88                                    l2226 1C42  
                                  l2218 1C0C                                    l3050 1A0A  
                                  l3042 19E8                                    l3034 19C2  
                                  l3026 19AE                                    l3018 1994  
                                  l1195 2ADC                                    l2308 2D82  
                                  l2412 2C78                                    l2404 2E7E  
                                  l2332 2A22                                    l2324 29F0  
                                  l2316 29C6                                    l2420 1D62  
                                  l2500 2888                                    l2252 1D40  
                                  l2244 1CF8                                    l2236 1C96  
                                  l2228 1C4E                                    l2260 1EE0  
                                  l2340 1494                                    l3060 1A2E  
                                  l3052 1A12                                    l3044 19F2  
                                  l3036 19CA                                    l3028 19B2  
                                  l1189 218E                                    l2414 2C9E  
                                  l2406 2C64                                    l2334 2A24  
                                  l2326 29FE                                    l2318 29CE  
                                  l2430 1E2C                                    l2422 1D7E  
                                  l2502 2894                                    l2510 25F4  
                                  l2246 1D0A                                    l2238 1CA8  
                                  l2270 1F50                                    l2262 1F00  
                                  l2190 252E                                    l2350 1510  
                                  l2342 14A8                                    l3070 1AC4  
                                  l3062 1A46                                    l3054 1A14  
                                  l3046 19FA                                    l3038 19D0  
                                  l2416 2CA0                                    l2408 2C68  
                                  l2600 16F2                                    l2336 2A2A  
                                  l2328 2A04                                    l2432 1E48  
                                  l2424 1DD2                                    l2504 28A2  
                                  l2520 262C                                    l3144 1140  
                                  l2248 1D10                                    l2280 1FC8  
                                  l2272 1F58                                    l2264 1F04  
                                  l2256 1ECE                                    l2192 2538  
                                  l2360 154A                                    l2352 1520  
                                  l2344 14B8                                    l2440 2068  
                                  l3080 1B56                                    l3072 1AE4  
                                  l3064 1A6A                                    l3048 1A02  
                                  l2610 174E                                    l2434 1E8C  
                                  l2426 1DE6                                    l2506 28AE  
                                  l2522 2638                                    l2530 2682  
                                  l2282 1FDA                                    l2274 1F6C  
                                  l2266 1F12                                    l2258 1ED2  
                                  l2194 2556                                    l2186 250A  
                                  l2370 15EE                                    l2362 1556  
                                  l2354 1526                                    l2346 14D8  
                                  l2338 1474                                    l2450 20CA  
                                  l2442 2076                                    l3082 1B8C  
                                  l3074 1B20                                    l3066 1A84  
                                  l2620 1786                                    l2612 176A  
                                  l2428 1DEA                                    l2524 2644  
                                  l2516 25FC                                    l2508 25D4  
                                  l2540 26C2                                    l2532 26A2  
                                  l2276 1F7A                                    l2284 1FE0  
                                  l2268 1F32                                    l2196 258C  
                                  l2188 251C                                    l2292 294C  
                                  l2380 16AA                                    l2372 15F4  
                                  l2364 1560                                    l2356 1536  
                                  l2348 14F4                                    l2452 2120  
                                  l2444 207A                                    l2460 2162  
                                  l2436 2032                                    l3076 1B2C  
                                  l3068 1AA4                                    l2390 2E70  
                                  l2622 179E                                    l2606 16FA  
                                  l2526 264C                                    l2518 2614  
                                  l2550 2716                                    l2542 26DA  
                                  l2702 1194                                    l2286 1FF0  
                                  l2278 1FA8                                    l2294 295A  
                                  l2382 16BA                                    l2366 1566  
                                  l2374 1658                                    l2358 1542  
                                  l2446 208A                                    l2438 205A  
                                  l3078 1B30                                    l2392 2E74  
                                  l2480 2C14                                    l2472 2B2E  
                                  l2640 1822                                    l2624 17A2  
                                  l2608 174A                                    l2720 28C8  
                                  l2560 2756                                    l2552 272E  
                                  l2528 2668                                    l2544 26E6  
                                  l2704 1460                                    l2288 2010  
                                  l2296 2966                                    l2384 16C0  
                                  l2376 1672                                    l2368 15E8  
                                  l2456 2150                                    l2448 20AA  
                                  l2394 2E5C                                    l2474 2B74  
                                  l2466 2ADE                                    l2650 1872  
                                  l2642 183E                                    l2634 17F2  
                                  l2626 17BE                                    l2618 1772  
                                  l2730 28E4                                    l2722 28CC  
                                  l2714 2402                                    l2570 279C  
                                  l2562 276E                                    l2554 274E  
                                  l2490 2842                                    l2546 26F2  
                                  l2538 26AA                                    l2810 1074  
                                  l2706 1462                                    l2298 297A  
                                  l2386 16D0                                    l2378 1690  
                                  l2396 2E60                                    l2484 2B7E  
                                  l2468 2B24                                    l2660 18EA  
                                  l2652 1886                                    l2644 186A  
                                  l2636 1806                                    l2628 17EA  
                                  l2740 2948                                    l2732 2912  
                                  l2724 28E0                                    l2716 24F6  
                                  l2708 23FE                                    l2564 277A  
                                  l2492 2846                                    l2548 26FA  
                                  l2812 10A0                                    l2572 2E44  
                                  l2580 2AB4                                    l2900 2E0E  
                                  l2398 2E66                                    l2478 2BCE  
                                  l2486 2BC4                                    l2670 191E  
                                  l2654 189E                                    l2638 181E  
                                  l2734 2932                                    l2718 24F8  
                                  l2566 2786                                    l2494 2852  
                                  l2822 10B8                                    l2806 1048  
                                  l2750 0EAC                                    l2574 2E54  
                                  l2582 2AD4                                    l2910 22DE  
                                  l2590 2D58                                    l2902 2E10  
                                  l2672 1922                                    l2656 18A2  
                                  l2736 2936                                    l2568 2794  
                                  l2496 2860                                    l2840 10FC  
                                  l2824 10CC                                    l2808 105C  
                                  l2760 0F14                                    l2752 0EC0  
                                  l2744 0E7C                                    l2576 2A8C  
                                  l2680 2A54                                    l2920 2302  
                                  l2592 2D5A                                    l2904 2E1A  
                                  l2674 193E                                    l2666 18F2  
                                  l2658 18BE                                    l2738 2938  
                                  l2498 286C                                    l2842 1114  
                                  l2770 0F6C                                    l2762 0F2C  
                                  l2754 0ED4                                    l2746 0E80  
                                  l2690 2D1C                                    l2578 2A98  
                                  l2682 2A5C                                    l2930 233A  
                                  l2922 231E                                    l2594 2D5C  
                                  l2586 2D48                                    l2906 2E1C  
                                  l2668 1906                                    l2780 0FD4  
                                  l2772 0F80                                    l2764 0F40  
                                  l2756 0EE8                                    l2748 0E94  
                                  l2692 2D2A                                    l2684 2A78  
                                  l2676 2A3A                                    l2940 23C4  
                                  l2932 2352                                    l2916 22E8  
                                  l2596 2D5E                                    l2588 2D52  
                                  l2908 2E1E                                    l2838 10E8  
                                  l2790 0FEC                                    l2774 0F98  
                                  l2766 0F54                                    l2758 0F00  
                                  l2694 2D2E                                    l2678 2A4C  
                                  l2950 220A                                    l2942 23D0  
                                  l2934 2358                                    l2918 22FC  
                                  l2598 2E24                                    l2870 2D0C  
                                  l2862 2CE4                                    ?_pad 0011  
                                  l2792 1000                                    l2776 0FAC  
                                  l2856 112C                                    l2696 1190  
                                  l2688 2D18                                    l2960 22B8  
                                  l2952 2216                                    l2944 2190  
                                  l2936 2374                                    l2928 2326  
                                  l2864 2CE8                                    l2880 281A  
                                  l2872 27BA                                    l2794 1018  
                                  l2778 0FC0                                    l2962 22C4  
                                  l2954 2272                                    l2946 2190  
                                  l2938 23A0                                    l2866 2CF2  
                                  l2890 2834                                    l2882 281C  
                                  l2874 27C2                                    l2956 228E  
                                  l2948 21B4                                    l2868 2D02  
                                  l2892 283E                                    l2884 2826  
                                  l2876 27EC                                    l2894 2DC0  
                                  l2958 229E                                    l2886 2828  
                                  l2878 2810                                    l2888 2832  
                                  l2896 2E02                                    l2898 2E0C  
                                  l2998 196C                                    STR_1 0E01  
                                  STR_2 0E57                                    STR_3 0E33  
                                  STR_4 0E6E                                    u1000 29E0  
                                  u1001 29DC                                    u1010 29FE  
                                  u1011 29FA                                    u1020 2A1A  
                                  u1100 1690                                    u1021 2A16  
                                  u1101 168C                                    u1110 16AA  
                                  u1030 14A4                                    u1111 16A6  
                                  u1031 149E                                    u1200 2884  
                                  u1120 16BA                                    u1040 14A6  
                                  u1201 2880                                    u1121 16B6  
                                  u1130 2C8C                                    u1210 28C6  
                                  u1050 14B8                                    u1131 2C84  
                                  u1211 28C2                                    u1051 14B4  
                                  u1300 18BE                                    u1220 2668  
                                  u1060 14F4                            ?_LEDSon_init 0001  
                                  u1301 18BA                                    u1221 2664  
                                  u1061 14F0                                    u1310 193E  
                                  u1150 1D7E                                    u1230 2716  
                                  u1070 1520                                    u1311 193A  
                                  u1151 1D7A                                    u1231 2712  
                                  u1071 151C                                    u1160 1E48  
                                  u1240 27B8                                    u1320 2D46  
                                  u1080 1536                                    u1161 1E44  
                                  u1241 27B4                                    u1321 2D42  
                                  u1081 1532                                    u1330 1472  
                                  u1250 2E54                                    u1090 1672  
                                  u1170 205A                                    u1331 146E  
                                  u1251 2E50                                    u1091 166E  
                                  u1171 2056                                    u1148 2C8E  
                                  u1340 2508                                    u1180 20AA  
                                  u1260 2AD4                                    u1341 2504  
                                  u1181 20A6                                    u1261 2AD0  
                                  u1270 176A                                    u1350 2912  
                                  u1190 20CA                                    u1430 1A2C  
                                  u1271 1766                                    u1351 290E  
                                  u1191 20C6                                    u1431 1A28  
                                  u1280 17BE                                    u1360 2948  
                                  u1440 1B40                            _BAUD4CONbits 000EE9  
                                  u1281 17BA                                    u1361 2944  
                                  u1441 1B3C                                    u1290 183E  
                                  u1370 231E                                    u1450 1B56  
                                  u1291 183A                                    u1371 231A  
                                  u1451 1B52                                    u1380 2374  
                                  u1460 1B8A                                    u1381 2370  
                                  u1461 1B86                                    u1607 1066  
                                  u1527 1A38                                    u1617 1092  
                                  u1537 2CF8                                    _T2PR 000FBC  
                                  u1707 278C                                    u1627 10D6  
                                  u1547 2344                                    u1717 1790  
                                  u1637 1106                                    u1557 0E9E  
                                  u1727 1810                                    u1647 26CC  
                                  u1567 0F1E                                    u1737 1890  
                                  u1657 2720                                    u1577 0F8A  
                                  u1747 1910                                    u1667 261E  
                                  u1587 100A                                    u1677 2672  
                                  u1597 1036                                    u1687 2858  
                                  u1697 289A              normalise_readings@red_read 001B  
                                  abs@a 0013                                    _dbuf 0250  
                                  _main 196C                                    _dtoa 1474  
                                  _prec 00E8                                    pad@i 0018  
                                  pad@p 0015                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001A  
                                  fsr2l 000FD9                                    _stop 2842  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0000        clear_read_calibration@clear_read 007D  
                       card_response@mL 0087                         card_response@mR 0089  
                __end_of_color_read_Red 2B2E             normalise_readings@blue_read 001F  
                          ___param_bank 000000                                   ??_abs 0015  
                                 ??_pad 0017                             _turnRight45 2682  
                       __end_of___aodiv 1D62                                   ?_main 0001  
                                 ?_dtoa 001C                         __end_of___aomod 2032  
                                 ?_stop 0014                         __end_of___lwdiv 2A3A  
                          vfpfcnvrt@fmt 0041                            main@red_read 01E1  
               __end_of_sendCharSerial4 2E5A              __end_of_I2C_2_Master_Start 2E7A  
            __end_of_I2C_2_Master_Write 2E66                                   _flags 00EA  
                                 _fputc 250A                                   _fputs 2C1E  
                                 pad@fp 0011          determine_card@master_closeness 0001  
               ??_make_master_closeness 0007                                   _width 00E6  
                                 _putch 2E84                                   main@i 01E7  
                                 dtoa@d 001E                                   dtoa@i 003C  
                                 dtoa@n 0034                                   dtoa@p 0030  
                                 dtoa@s 003E                                   dtoa@w 0032  
                   normalise_readings@i 002F                                   tablat 000FF5  
                                 status 000FD8                         __end_of_sprintf 2A8C  
        card_response@normalised_values 008B                        card_response@buf 007B  
               __end_of_color_read_Blue 2C1E                   _I2C_2_Master_RepStart 2E7A  
                       ?_color_read_Red 0005                         __initialization 2DE2  
                          __end_of_main 1BDA                            __end_of_dtoa 16F2  
                          __end_of_stop 28C8                                  ??_main 005D  
                                ??_dtoa 0026                                  ??_stop 0018  
                         __activetblptr 000003                           main@blue_read 01E5  
                  main@clear_read_check 01DE               clear_read_calibration@buf 007B  
                          ?_setMotorPWM 000E                                  ?_fputc 0001  
                                ?_fputs 000A                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 000E  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                _RG6PPS 000E88                __end_of_color_click_init 2D18  
                make_master_closeness@i 0025                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0057                               ??___aodiv 0011  
                             ??___aomod 0011                                  ___wmul 2D9A  
                    _normalise_readings 1190                               ??___lwdiv 000B  
                                clear_0 2DE8                                  clear_1 2DF4  
                                isa$std 000001                                  pad@buf 0013  
                                dtoa@fp 001C                     ?_normalise_readings 0017  
                                fputc@c 0001                                  fputs@c 000E  
                                fputs@i 000F                                  fputs@s 000A  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                                  putch@c 0001  
                      __end_of_vfprintf 2ADE                                  stop@mL 0014  
                                stop@mR 0016                       ??_initDCmotorsPWM 0001  
                             ??_sprintf 0059                       card_response@card 00E5  
                            __accesstop 0060                 __end_of__initialization 2DFC  
              __end_of_color_read_Clear 2BCE                __end_of_color_read_Green 2B7E  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0025  
                         ___rparam_used 000001                        ?_color_read_Blue 0005  
          __end_of_collect_avg_readings 196C                          __pcstackCOMRAM 0001  
                _clear_read_calibration 22DE                        _reverseFullSpeed 272E  
            collect_avg_readings@i_1561 0018              collect_avg_readings@i_1562 001A  
            collect_avg_readings@i_1563 001C              collect_avg_readings@i_1564 001E  
                         __end_of_fputc 25D4                           __end_of_fputs 2C62  
                         __end_of_putch 2E86                          main@clear_read 01E8  
                               ??_fputc 0005                                 ??_fputs 000E  
                               ??_putch 0001                              __pbssBANK0 00E6  
                            __pbssBANK2 0200                       _color_writetoaddr 2E22  
                          _T2CLKCONbits 000FBF                        motor_response@mL 001C  
                      motor_response@mR 001E                      ?_color_writetoaddr 0003  
                               ?___wmul 0001                      motor_response@card 0022  
                          ?_turnRight45 0014                     ??_color_writetoaddr 0004  
                        main@green_read 01E3                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5          collect_avg_readings@clear_read 000C  
                color_writetoaddr@value 0003                        ??_color_read_Red 0007  
         __end_of_make_master_closeness 250A          determine_card@predicted_colour 0009  
             __end_of_color_writetoaddr 2E42                      _I2C_2_Master_Start 2E70  
                            _initUSART4 2E02                      _I2C_2_Master_Write 2E5A  
                               __Hparam 0000                                 __Lparam 0000  
                     color_read_Red@tmp 000A  make_master_closeness@normalised_values 0003  
               sendStringSerial4@string 0002                       reverseFullSpeed@i 0019  
                               ___aodiv 1BDA                                 ___aomod 1ECE  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 29C6  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0051  
                          __psmallconst 0E00                            turnLeft45@mL 0014  
                          turnLeft45@mR 0016                                 __pcinit 2DE2  
                               __ramtop 0E00                                 __ptext0 196C  
                               __ptext1 2E02                                 __ptext2 27BA  
                               __ptext3 2CE4                                 __ptext4 2E22  
                               __ptext5 2D48                                 __ptext6 22DE  
                               __ptext7 2190                                 __ptext8 2A3A  
                               __ptext9 2A8C                               _T2CONbits 000FBD  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 00ED  
                  _collect_avg_readings 16F2                                 main@buf 0100  
                               _sprintf 2A3A                    ??_I2C_2_Master_Start 0002  
                  ??_I2C_2_Master_Write 0002                    end_of_initialization 2DFC  
        collect_avg_readings@green_read 0010                   normalise_readings@buf 0017  
                               fputc@fp 0003                                 fputs@fp 000C  
                     ?_color_click_init 0001                            turnRight45@i 001A  
                    ??_color_click_init 0005                       __end_of_vfpfcnvrt 2190  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 0047                              ??_vfprintf 0057  
                       _initDCmotorsPWM 27BA                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0013       normalise_readings@expected_values 0021  
                         _card_response 2190                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0012                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 000C  
              __end_of_reverseFullSpeed 27BA                     main@expected_values 0196  
              color_writetoaddr@address 0004                 ??_I2C_2_Master_RepStart 0002  
                           _CCP1CONbits 000FAB                       ?_color_read_Clear 0005  
                          _EUSART4RXbuf 023C                            _EUSART4TXbuf 0200  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0005  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
               ?_clear_read_calibration 007B                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0001                              main@motorL 01EA  
                            main@motorR 01F3                      ??_color_read_Clear 0007  
                    ??_color_read_Green 0007                              _turnLeft45 25D4  
                           vfpfcnvrt@ap 0043                             vfpfcnvrt@cp 004F  
                           vfpfcnvrt@fp 003F                          __end_of___wmul 2DC0  
                       determine_card@i 000A                          ?_card_response 007B  
                   color_read_Clear@tmp 000A                     start_initialization 2DE2  
                           __end_of_abs 2CE4                             __end_of_pad 29C6  
                         _TxBufWriteCnt 005F                           ??_LEDSon_init 0001  
        __end_of_clear_read_calibration 23FE                     color_read_Green@tmp 000A  
               __end_of_initDCmotorsPWM 2842                             vfprintf@fmt 0053  
                              ??___wmul 0005                          _determine_card 28C8  
                           __pbssCOMRAM 005F                  ??_collect_avg_readings 0014  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                      ___aodiv@dividend 0001                 clear_read_calibration@i 0081  
                        _motor_response 0E7A                     __end_of_LEDSon_init 2DE2  
                      ___lwdiv@dividend 0007                               _dtoa$2309 002E  
                           ?_turnLeft45 0014                                ?___aodiv 0001  
                              ?___aomod 0001                        ___aodiv@quotient 0013  
                __end_of_determine_card 294C                                ?___lwdiv 0007  
                  I2C_2_Master_Read@ack 0003                         ??_card_response 0059  
                  I2C_2_Master_Read@tmp 0004                             __smallconst 0E00  
                     _I2C_2_Master_Idle 2D72                       _I2C_2_Master_Init 2D48  
                     _I2C_2_Master_Read 2C62                       _I2C_2_Master_Stop 2E66  
                          _RxBufReadCnt 00EC            normalise_readings@clear_read 0019  
          normalise_readings@difference 002D                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0010                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000B                  __end_of_motor_response 1190  
                           turnLeft45@i 001A                                ?_sprintf 0060  
          clear_read_calibration@i_1550 0083                       _sendStringSerial4 2D18  
                   ??_I2C_2_Master_Idle 0001                     ??_I2C_2_Master_Init 0001  
                   ??_I2C_2_Master_Read 0002                          ___wmul@product 0005  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0002  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                    ?_sendStringSerial4 0002                                _PIE4bits 000E2D  
                 _make_master_closeness 23FE                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0001  
              make_master_closeness@buf 0001                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0004                                _SSP2STAT 000ED8  
                       ?_determine_card 0001                               _vfpfcnvrt 2032  
             __end_of_I2C_2_Master_Idle 2D9A               __end_of_I2C_2_Master_Init 2D72  
             __end_of_I2C_2_Master_Read 2CA4                       ___wmul@multiplier 0001  
             __end_of_I2C_2_Master_Stop 2E70                            setMotorPWM@m 000E  
           I2C_2_Master_Write@data_byte 0002            normalise_readings@green_read 001D  
                     ??_color_read_Blue 0007                            _TxBufReadCnt 00EB  
                       ?_motor_response 001C                       ?_reverseFullSpeed 0014  
             __end_of_sendStringSerial4 2D48                             _LEDSon_init 2DC0  
                    ??_reverseFullSpeed 0018           __end_of_I2C_2_Master_RepStart 2E84  
                    color_read_Blue@tmp 000A                     __end_of_setMotorPWM 1ECE  
                          ??_initUSART4 0001                                __Hrparam 0000  
                            vfprintf@ap 0055                                __Lrparam 0000  
                            vfprintf@fp 0051   make_master_closeness@master_closeness 0005  
                    reverseFullSpeed@mL 0014                      reverseFullSpeed@mR 0016  
                            ?_vfpfcnvrt 003F                         ___aodiv@divisor 0009  
                       ___aodiv@counter 0011                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0062  
                       ___lwdiv@divisor 0009                      __end_of_initUSART4 2E22  
                       ___lwdiv@counter 000D                                __ptext10 2032  
                              __ptext11 1474                                __ptext20 1190  
                              __ptext12 294C                                __ptext21 2CA4  
                              __ptext13 2C1E                                __ptext30 23FE  
                              __ptext22 0E7A                                __ptext14 250A  
                              __ptext31 28C8                                __ptext23 2682  
                              __ptext15 2E84                                __ptext40 2E7A  
                              __ptext32 16F2                                __ptext24 25D4  
                              __ptext16 1ECE                                __ptext41 2C62  
                              __ptext33 2ADE                                __ptext25 2842  
                              __ptext17 1BDA                                __ptext42 2D72  
                              __ptext34 2B2E                                __ptext26 272E  
                              __ptext18 2D18                                __ptext43 2DC0  
                              __ptext35 2B7E                                __ptext27 1D62  
                              __ptext19 2E42                                __ptext36 2BCE  
                              __ptext28 2D9A                                __ptext37 2E5A  
                              __ptext29 29C6                                __ptext38 2E66  
                              __ptext39 2E70                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0001  
                              isa$xinst 000000                 card_response@clear_read 007D  
                            _RC4STAbits 000EE7                                _vfprintf 2A8C  
                         ??_turnRight45 0018                        ___aomod@dividend 0001  
                 collect_avg_readings@i 0016                             _setMotorPWM 1D62  
         collect_avg_readings@blue_read 0012                           turnRight45@mL 0014  
                         turnRight45@mR 0016                               sprintf@ap 006E  
            __end_of_normalise_readings 1474            card_response@expected_values 0085  
               card_response@green_read 0081                            ??_turnLeft45 0018  
        determine_card@current_smallest 0007                         ___aomod@divisor 0009  
                           ??_vfpfcnvrt 0045                         ___aomod@counter 0011  
                card_response@blue_read 0083                        _color_click_init 2CE4  
         card_response@master_closeness 00D3                                sprintf@f 0070  
                              sprintf@s 0060                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                     __end_of_turnRight45 272E  
                    __end_of_turnLeft45 2682                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0012                         _sendCharSerial4 2E42  
                 card_response@red_read 007F                            ___aomod@sign 0012  
                      ??_determine_card 0003                            main@PWMcycle 01E0  
