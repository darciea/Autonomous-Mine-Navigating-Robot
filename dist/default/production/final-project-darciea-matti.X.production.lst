

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 01 09:56:35 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	text15,global,reloc=2,class=CODE,delta=1
    23                           	psect	text16,global,reloc=2,class=CODE,delta=1
    24                           	psect	text17,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29   000000                     
    30                           ; Version 2.35
    31                           ; Generated 05/05/2021 GMT
    32                           ; 
    33                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F67K40 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65   000000                     _LATHbits	set	3968
    66   000000                     _LATGbits	set	3967
    67   000000                     _TRISAbits	set	3969
    68   000000                     _TRISFbits	set	3974
    69   000000                     _TRISDbits	set	3972
    70   000000                     _TRISGbits	set	3975
    71   000000                     _SSP2CON2bits	set	3802
    72   000000                     _SSP2CLKPPS	set	3612
    73   000000                     _SSP2DATPPS	set	3613
    74   000000                     _RC7PPS	set	3689
    75   000000                     _RE2PPS	set	3700
    76   000000                     _TRISCbits	set	3971
    77   000000                     _TRISEbits	set	3973
    78   000000                     _TRISHbits	set	3976
    79   000000                     _T2PR	set	4028
    80   000000                     _T2CONbits	set	4029
    81   000000                     _CCPR2H	set	4006
    82   000000                     _CCPR1H	set	4010
    83   000000                     _RE4PPS	set	3702
    84   000000                     _RG6PPS	set	3720
    85   000000                     _RD5PPS	set	3695
    86   000000                     _ANSELDbits	set	3751
    87   000000                     _SSP2ADD	set	3798
    88   000000                     _SSP2CON1bits	set	3801
    89   000000                     _CCPR4H	set	3873
    90   000000                     _CCPR3H	set	3877
    91   000000                     _T2CLKCONbits	set	4031
    92   000000                     _T2HLTbits	set	4030
    93   000000                     _CCP1CONbits	set	4011
    94   000000                     _CCPTMRS0bits	set	4013
    95   000000                     _CCP2CONbits	set	4007
    96   000000                     _LATAbits	set	3961
    97   000000                     _LATDbits	set	3964
    98   000000                     _CCP3CONbits	set	3878
    99   000000                     _CCP4CONbits	set	3874
   100   000000                     _SSP2CON2	set	3802
   101   000000                     _SSP2STAT	set	3800
   102   000000                     _SSP2BUF	set	3797
   103   000000                     _RD6PPS	set	3696
   104   000000                     _LATFbits	set	3966
   105                           
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109   01F5A2                     __pcinit:
   110                           	callstack 0
   111   01F5A2                     start_initialization:
   112                           	callstack 0
   113   01F5A2                     __initialization:
   114                           	callstack 0
   115   01F5A2                     end_of_initialization:
   116                           	callstack 0
   117   01F5A2                     __end_of__initialization:
   118                           	callstack 0
   119   01F5A2  0100               	movlb	0
   120   01F5A4  EF10  F0FD         	goto	_main	;jump to C main() function
   121                           
   122                           	psect	cstackCOMRAM
   123   000001                     __pcstackCOMRAM:
   124                           	callstack 0
   125   000001                     ??_I2C_2_Master_Idle:
   126   000001                     ?___wmul:
   127                           	callstack 0
   128   000001                     ___wmul@multiplier:
   129                           	callstack 0
   130                           
   131                           ; 2 bytes @ 0x0
   132   000001                     	ds	1
   133   000002                     I2C_2_Master_Write@data_byte:
   134                           	callstack 0
   135                           
   136                           ; 1 bytes @ 0x1
   137   000002                     	ds	1
   138   000003                     color_writetoaddr@value:
   139                           	callstack 0
   140   000003                     ___wmul@multiplicand:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x2
   144   000003                     	ds	1
   145   000004                     color_writetoaddr@address:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x3
   149   000004                     	ds	1
   150   000005                     ??_color_click_init:
   151   000005                     ___wmul@product:
   152                           	callstack 0
   153                           
   154                           ; 2 bytes @ 0x4
   155   000005                     	ds	2
   156   000007                     ?___lwdiv:
   157                           	callstack 0
   158   000007                     ___lwdiv@dividend:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0x6
   162   000007                     	ds	2
   163   000009                     ___lwdiv@divisor:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x8
   167   000009                     	ds	2
   168   00000B                     ___lwdiv@quotient:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0xA
   172   00000B                     	ds	2
   173   00000D                     ___lwdiv@counter:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0xC
   177   00000D                     	ds	1
   178   00000E                     setMotorPWM@m:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0xD
   182   00000E                     	ds	2
   183   000010                     ??_setMotorPWM:
   184                           
   185                           ; 1 bytes @ 0xF
   186   000010                     	ds	2
   187   000012                     setMotorPWM@posDuty:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x11
   191   000012                     	ds	1
   192   000013                     setMotorPWM@negDuty:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0x12
   196   000013                     	ds	1
   197   000014                     stop@mL:
   198                           	callstack 0
   199   000014                     turnLeft45@mL:
   200                           	callstack 0
   201   000014                     turnRight45@mL:
   202                           	callstack 0
   203   000014                     reverseFullSpeed@mL:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x13
   207   000014                     	ds	2
   208   000016                     stop@mR:
   209                           	callstack 0
   210   000016                     turnLeft45@mR:
   211                           	callstack 0
   212   000016                     turnRight45@mR:
   213                           	callstack 0
   214   000016                     reverseFullSpeed@mR:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x15
   218   000016                     	ds	2
   219   000018                     ??_stop:
   220   000018                     ??_turnLeft45:
   221   000018                     ??_turnRight45:
   222   000018                     ??_reverseFullSpeed:
   223                           
   224                           ; 1 bytes @ 0x17
   225   000018                     	ds	1
   226   000019                     reverseFullSpeed@i:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x18
   230   000019                     	ds	1
   231   00001A                     turnLeft45@i:
   232                           	callstack 0
   233   00001A                     turnRight45@i:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0x19
   237   00001A                     	ds	2
   238   00001C                     respond_to_card@mL:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0x1B
   242   00001C                     	ds	2
   243   00001E                     respond_to_card@mR:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x1D
   247   00001E                     	ds	2
   248   000020                     ??_respond_to_card:
   249                           
   250                           ; 1 bytes @ 0x1F
   251   000020                     	ds	2
   252   000022                     respond_to_card@card:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0x21
   256   000022                     	ds	1
   257   000023                     ??_main:
   258                           
   259                           ; 1 bytes @ 0x22
   260   000023                     	ds	2
   261   000025                     main@card:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x24
   265   000025                     	ds	1
   266   000026                     main@PWMcycle:
   267                           	callstack 0
   268                           
   269                           ; 1 bytes @ 0x25
   270   000026                     	ds	1
   271   000027                     main@motorL:
   272                           	callstack 0
   273                           
   274                           ; 9 bytes @ 0x26
   275   000027                     	ds	9
   276   000030                     main@motorR:
   277                           	callstack 0
   278                           
   279                           ; 9 bytes @ 0x2F
   280   000030                     	ds	9
   281                           
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 18 in file "main.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  normalised_v   24    0        unsigned char [3][8]
   292 ;;  expected_val   24    0        unsigned char [3][8]
   293 ;;  motorR          9   47[COMRAM] struct DC_motor
   294 ;;  motorL          9   38[COMRAM] struct DC_motor
   295 ;;  master_close    8    0        unsigned char [8]
   296 ;;  PWMcycle        1   37[COMRAM] unsigned char 
   297 ;;  card            1   36[COMRAM] enum E14250
   298 ;;  blue_read       1    0        unsigned char 
   299 ;;  green_read      1    0        unsigned char 
   300 ;;  red_read        1    0        unsigned char 
   301 ;; Return value:  Size  Location     Type
   302 ;;                  1    wreg      void 
   303 ;; Registers used:
   304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : 0/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   311 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   313 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   314 ;;Total ram usage:       22 bytes
   315 ;; Hardware stack levels required when called: 4
   316 ;; This function calls:
   317 ;;		_I2C_2_Master_Init
   318 ;;		_LEDSon_init
   319 ;;		_color_click_init
   320 ;;		_initDCmotorsPWM
   321 ;;		_respond_to_card
   322 ;;		_setMotorPWM
   323 ;; This function is called by:
   324 ;;		Startup code after reset
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text0
   329   01FA20                     __ptext0:
   330                           	callstack 0
   331   01FA20                     _main:
   332                           	callstack 27
   333   01FA20                     
   334                           ;main.c: 23:     LEDSon_init();
   335   01FA20  ECF4  F0FA         	call	_LEDSon_init	;wreg free
   336   01FA24                     
   337                           ;main.c: 24:     I2C_2_Master_Init();
   338   01FA24  EC2C  F0FB         	call	_I2C_2_Master_Init	;wreg free
   339   01FA28                     
   340                           ;main.c: 25:     color_click_init();
   341   01FA28  EC41  F0FB         	call	_color_click_init	;wreg free
   342   01FA2C                     
   343                           ;main.c: 26:     initDCmotorsPWM();
   344   01FA2C  ECD8  F0FB         	call	_initDCmotorsPWM	;wreg free
   345   01FA30                     
   346                           ;main.c: 34:     unsigned char PWMcycle = T2PR;
   347   01FA30  CFBC F026          	movff	4028,main@PWMcycle	;volatile
   348   01FA34                     
   349                           ;main.c: 36:     struct DC_motor motorL, motorR;;main.c: 38:     motorL.power=0;
   350   01FA34  0E00               	movlw	0
   351   01FA36  6E27               	movwf	main@motorL^0,c
   352   01FA38                     
   353                           ;main.c: 39:     motorL.direction=1;
   354   01FA38  0E01               	movlw	1
   355   01FA3A  6E28               	movwf	(main@motorL+1)^0,c
   356   01FA3C                     
   357                           ;main.c: 40:     motorL.brakemode=1;
   358   01FA3C  0E01               	movlw	1
   359   01FA3E  6E29               	movwf	(main@motorL+2)^0,c
   360   01FA40                     
   361                           ;main.c: 41:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   362   01FA40  0EAA               	movlw	170
   363   01FA42  6E2C               	movwf	(main@motorL+5)^0,c
   364   01FA44  0E0F               	movlw	15
   365   01FA46  6E2D               	movwf	(main@motorL+6)^0,c
   366   01FA48                     
   367                           ;main.c: 42:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   368   01FA48  0EA6               	movlw	166
   369   01FA4A  6E2E               	movwf	(main@motorL+7)^0,c
   370   01FA4C  0E0F               	movlw	15
   371   01FA4E  6E2F               	movwf	(main@motorL+8)^0,c
   372   01FA50                     
   373                           ;main.c: 43:     motorL.PWMperiod=PWMcycle;
   374   01FA50  C026  F02A         	movff	main@PWMcycle,main@motorL+3
   375   01FA54  6A2B               	clrf	(main@motorL+4)^0,c
   376   01FA56                     
   377                           ;main.c: 45:     motorR.power=0;
   378   01FA56  0E00               	movlw	0
   379   01FA58  6E30               	movwf	main@motorR^0,c
   380   01FA5A                     
   381                           ;main.c: 46:     motorR.direction=1;
   382   01FA5A  0E01               	movlw	1
   383   01FA5C  6E31               	movwf	(main@motorR+1)^0,c
   384   01FA5E                     
   385                           ;main.c: 47:     motorR.brakemode=1;
   386   01FA5E  0E01               	movlw	1
   387   01FA60  6E32               	movwf	(main@motorR+2)^0,c
   388                           
   389                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   390   01FA62  0E25               	movlw	37
   391   01FA64  6E35               	movwf	(main@motorR+5)^0,c
   392   01FA66  0E0F               	movlw	15
   393   01FA68  6E36               	movwf	(main@motorR+6)^0,c
   394                           
   395                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   396   01FA6A  0E21               	movlw	33
   397   01FA6C  6E37               	movwf	(main@motorR+7)^0,c
   398   01FA6E  0E0F               	movlw	15
   399   01FA70  6E38               	movwf	(main@motorR+8)^0,c
   400   01FA72                     
   401                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
   402   01FA72  C026  F033         	movff	main@PWMcycle,main@motorR+3
   403   01FA76  6A34               	clrf	(main@motorR+4)^0,c
   404   01FA78                     
   405                           ;main.c: 52:     setMotorPWM(&motorL);
   406   01FA78  0E27               	movlw	low main@motorL
   407   01FA7A  6E0E               	movwf	setMotorPWM@m^0,c
   408   01FA7C  0E00               	movlw	high main@motorL
   409   01FA7E  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   410   01FA80  EC69  F0FD         	call	_setMotorPWM	;wreg free
   411   01FA84                     
   412                           ;main.c: 53:     setMotorPWM(&motorR);
   413   01FA84  0E30               	movlw	low main@motorR
   414   01FA86  6E0E               	movwf	setMotorPWM@m^0,c
   415   01FA88  0E00               	movlw	high main@motorR
   416   01FA8A  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   417   01FA8C  EC69  F0FD         	call	_setMotorPWM	;wreg free
   418   01FA90                     
   419                           ;main.c: 103:     card = GREEN;
   420   01FA90  0E01               	movlw	1
   421   01FA92  6E25               	movwf	main@card^0,c
   422   01FA94                     
   423                           ;main.c: 110:     LATDbits.LATD7=1;
   424   01FA94  8E7C               	bsf	124,7,c	;volatile
   425   01FA96                     
   426                           ;main.c: 111:     TRISDbits.TRISD7=0;
   427   01FA96  9E84               	bcf	132,7,c	;volatile
   428   01FA98                     l1538:
   429                           
   430                           ;main.c: 114:         LATDbits.LATD4 = 1;
   431   01FA98  887C               	bsf	124,4,c	;volatile
   432   01FA9A                     
   433                           ;main.c: 115:         respond_to_card(card, &motorL, &motorR);
   434   01FA9A  0E27               	movlw	low main@motorL
   435   01FA9C  6E1C               	movwf	respond_to_card@mL^0,c
   436   01FA9E  0E00               	movlw	high main@motorL
   437   01FAA0  6E1D               	movwf	(respond_to_card@mL+1)^0,c
   438   01FAA2  0E30               	movlw	low main@motorR
   439   01FAA4  6E1E               	movwf	respond_to_card@mR^0,c
   440   01FAA6  0E00               	movlw	high main@motorR
   441   01FAA8  6E1F               	movwf	(respond_to_card@mR+1)^0,c
   442   01FAAA  5025               	movf	main@card^0,w,c
   443   01FAAC  EC1F  F0FE         	call	_respond_to_card
   444   01FAB0                     
   445                           ;main.c: 119:         _delay((unsigned long)((3000)*(64000000/4000.0)));
   446   01FAB0  0EF4               	movlw	244
   447   01FAB2  6E24               	movwf	(??_main+1)^0,c
   448   01FAB4  0E82               	movlw	130
   449   01FAB6  6E23               	movwf	??_main^0,c
   450   01FAB8  0E05               	movlw	5
   451   01FABA                     u277:
   452   01FABA  2EE8               	decfsz	wreg,f,c
   453   01FABC  D7FE               	bra	u277
   454   01FABE  2E23               	decfsz	??_main^0,f,c
   455   01FAC0  D7FC               	bra	u277
   456   01FAC2  2E24               	decfsz	(??_main+1)^0,f,c
   457   01FAC4  D7FA               	bra	u277
   458   01FAC6  F000               	nop	
   459   01FAC8                     
   460                           ;main.c: 120:         LATFbits.LATF0 = 1;
   461   01FAC8  807E               	bsf	126,0,c	;volatile
   462   01FACA  EF4C  F0FD         	goto	l1538
   463   01FACE  EF00  F000         	goto	start
   464   01FAD2                     __end_of_main:
   465                           	callstack 0
   466                           
   467 ;; *************** function _respond_to_card *****************
   468 ;; Defined at:
   469 ;;		line 70 in file "colour_identify.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;  card            1    wreg     enum E14551
   472 ;;  mL              2   27[COMRAM] PTR struct DC_motor
   473 ;;		 -> main@motorL(9), 
   474 ;;  mR              2   29[COMRAM] PTR struct DC_motor
   475 ;;		 -> main@motorR(9), 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  card            1   33[COMRAM] enum E14551
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   489 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   490 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   491 ;;Total ram usage:        7 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; Hardware stack levels required when called: 3
   494 ;; This function calls:
   495 ;;		_reverseFullSpeed
   496 ;;		_stop
   497 ;;		_turnLeft45
   498 ;;		_turnRight45
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text1
   505   01FC3E                     __ptext1:
   506                           	callstack 0
   507   01FC3E                     _respond_to_card:
   508                           	callstack 27
   509                           
   510                           ;incstack = 0
   511                           ;respond_to_card@card stored from wreg
   512   01FC3E  6E22               	movwf	respond_to_card@card^0,c
   513   01FC40                     
   514                           ;colour_identify.c: 73:     switch (card){
   515   01FC40  EFCE  F0FF         	goto	l1468
   516   01FC44                     l1428:
   517                           
   518                           ;colour_identify.c: 75:             turnRight45(mL,mR);
   519   01FC44  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   520   01FC48  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   521   01FC4C  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   522   01FC50  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   523   01FC54  ECB9  F0FC         	call	_turnRight45	;wreg free
   524                           
   525                           ;colour_identify.c: 76:             stop(mL,mR);
   526   01FC58  C01C  F014         	movff	respond_to_card@mL,stop@mL
   527   01FC5C  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   528   01FC60  C01E  F016         	movff	respond_to_card@mR,stop@mR
   529   01FC64  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   530   01FC68  EC95  F0FB         	call	_stop	;wreg free
   531                           
   532                           ;colour_identify.c: 77:             turnRight45(mL,mR);
   533   01FC6C  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   534   01FC70  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   535   01FC74  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   536   01FC78  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   537   01FC7C  ECB9  F0FC         	call	_turnRight45	;wreg free
   538                           
   539                           ;colour_identify.c: 78:             stop(mL,mR);
   540   01FC80  C01C  F014         	movff	respond_to_card@mL,stop@mL
   541   01FC84  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   542   01FC88  C01E  F016         	movff	respond_to_card@mR,stop@mR
   543   01FC8C  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   544   01FC90  EC95  F0FB         	call	_stop	;wreg free
   545                           
   546                           ;colour_identify.c: 79:             break;
   547   01FC94  EFFF  F0FF         	goto	l246
   548   01FC98                     l1430:
   549                           
   550                           ;colour_identify.c: 81:             turnLeft45(mL,mR);
   551   01FC98  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   552   01FC9C  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   553   01FCA0  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   554   01FCA4  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   555   01FCA8  EC62  F0FC         	call	_turnLeft45	;wreg free
   556                           
   557                           ;colour_identify.c: 82:             stop(mL,mR);
   558   01FCAC  C01C  F014         	movff	respond_to_card@mL,stop@mL
   559   01FCB0  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   560   01FCB4  C01E  F016         	movff	respond_to_card@mR,stop@mR
   561   01FCB8  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   562   01FCBC  EC95  F0FB         	call	_stop	;wreg free
   563                           
   564                           ;colour_identify.c: 83:             turnLeft45(mL,mR);
   565   01FCC0  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   566   01FCC4  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   567   01FCC8  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   568   01FCCC  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   569   01FCD0  EC62  F0FC         	call	_turnLeft45	;wreg free
   570                           
   571                           ;colour_identify.c: 84:             stop(mL,mR);
   572   01FCD4  C01C  F014         	movff	respond_to_card@mL,stop@mL
   573   01FCD8  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   574   01FCDC  C01E  F016         	movff	respond_to_card@mR,stop@mR
   575   01FCE0  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   576   01FCE4  EC95  F0FB         	call	_stop	;wreg free
   577                           
   578                           ;colour_identify.c: 85:             break;
   579   01FCE8  EFFF  F0FF         	goto	l246
   580   01FCEC                     l1432:
   581                           
   582                           ;colour_identify.c: 87:             turnRight45(mL,mR);
   583   01FCEC  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   584   01FCF0  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   585   01FCF4  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   586   01FCF8  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   587   01FCFC  ECB9  F0FC         	call	_turnRight45	;wreg free
   588                           
   589                           ;colour_identify.c: 88:             stop(mL,mR);
   590   01FD00  C01C  F014         	movff	respond_to_card@mL,stop@mL
   591   01FD04  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   592   01FD08  C01E  F016         	movff	respond_to_card@mR,stop@mR
   593   01FD0C  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   594   01FD10  EC95  F0FB         	call	_stop	;wreg free
   595                           
   596                           ;colour_identify.c: 89:             turnRight45(mL,mR);
   597   01FD14  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   598   01FD18  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   599   01FD1C  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   600   01FD20  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   601   01FD24  ECB9  F0FC         	call	_turnRight45	;wreg free
   602                           
   603                           ;colour_identify.c: 90:             stop(mL,mR);
   604   01FD28  C01C  F014         	movff	respond_to_card@mL,stop@mL
   605   01FD2C  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   606   01FD30  C01E  F016         	movff	respond_to_card@mR,stop@mR
   607   01FD34  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   608   01FD38  EC95  F0FB         	call	_stop	;wreg free
   609                           
   610                           ;colour_identify.c: 91:             turnRight45(mL,mR);
   611   01FD3C  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   612   01FD40  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   613   01FD44  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   614   01FD48  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   615   01FD4C  ECB9  F0FC         	call	_turnRight45	;wreg free
   616                           
   617                           ;colour_identify.c: 92:             stop(mL,mR);
   618   01FD50  C01C  F014         	movff	respond_to_card@mL,stop@mL
   619   01FD54  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   620   01FD58  C01E  F016         	movff	respond_to_card@mR,stop@mR
   621   01FD5C  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   622   01FD60  EC95  F0FB         	call	_stop	;wreg free
   623                           
   624                           ;colour_identify.c: 93:             turnRight45(mL,mR);
   625   01FD64  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   626   01FD68  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   627   01FD6C  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   628   01FD70  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   629   01FD74  ECB9  F0FC         	call	_turnRight45	;wreg free
   630                           
   631                           ;colour_identify.c: 94:             stop(mL,mR);
   632   01FD78  C01C  F014         	movff	respond_to_card@mL,stop@mL
   633   01FD7C  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   634   01FD80  C01E  F016         	movff	respond_to_card@mR,stop@mR
   635   01FD84  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   636   01FD88  EC95  F0FB         	call	_stop	;wreg free
   637                           
   638                           ;colour_identify.c: 95:             break;
   639   01FD8C  EFFF  F0FF         	goto	l246
   640   01FD90                     l1434:
   641                           
   642                           ;colour_identify.c: 97:             reverseFullSpeed(mL,mR);
   643   01FD90  C01C  F014         	movff	respond_to_card@mL,reverseFullSpeed@mL
   644   01FD94  C01D  F015         	movff	respond_to_card@mL+1,reverseFullSpeed@mL+1
   645   01FD98  C01E  F016         	movff	respond_to_card@mR,reverseFullSpeed@mR
   646   01FD9C  C01F  F017         	movff	respond_to_card@mR+1,reverseFullSpeed@mR+1
   647   01FDA0  EC1C  F0FC         	call	_reverseFullSpeed	;wreg free
   648   01FDA4                     
   649                           ;colour_identify.c: 98:             _delay((unsigned long)((500)*(64000000/4000.0)));
   650   01FDA4  0E29               	movlw	41
   651   01FDA6  6E21               	movwf	(??_respond_to_card+1)^0,c
   652   01FDA8  0E96               	movlw	150
   653   01FDAA  6E20               	movwf	??_respond_to_card^0,c
   654   01FDAC  0E7F               	movlw	127
   655   01FDAE                     u287:
   656   01FDAE  2EE8               	decfsz	wreg,f,c
   657   01FDB0  D7FE               	bra	u287
   658   01FDB2  2E20               	decfsz	??_respond_to_card^0,f,c
   659   01FDB4  D7FC               	bra	u287
   660   01FDB6  2E21               	decfsz	(??_respond_to_card+1)^0,f,c
   661   01FDB8  D7FA               	bra	u287
   662   01FDBA  F000               	nop	
   663   01FDBC                     
   664                           ;colour_identify.c: 99:             stop(mL,mR);
   665   01FDBC  C01C  F014         	movff	respond_to_card@mL,stop@mL
   666   01FDC0  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   667   01FDC4  C01E  F016         	movff	respond_to_card@mR,stop@mR
   668   01FDC8  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   669   01FDCC  EC95  F0FB         	call	_stop	;wreg free
   670   01FDD0                     
   671                           ;colour_identify.c: 100:             turnRight45(mL,mR);
   672   01FDD0  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   673   01FDD4  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   674   01FDD8  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   675   01FDDC  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   676   01FDE0  ECB9  F0FC         	call	_turnRight45	;wreg free
   677   01FDE4                     
   678                           ;colour_identify.c: 101:             stop(mL,mR);
   679   01FDE4  C01C  F014         	movff	respond_to_card@mL,stop@mL
   680   01FDE8  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   681   01FDEC  C01E  F016         	movff	respond_to_card@mR,stop@mR
   682   01FDF0  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   683   01FDF4  EC95  F0FB         	call	_stop	;wreg free
   684   01FDF8                     
   685                           ;colour_identify.c: 102:             turnRight45(mL,mR);
   686   01FDF8  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   687   01FDFC  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   688   01FE00  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   689   01FE04  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   690   01FE08  ECB9  F0FC         	call	_turnRight45	;wreg free
   691   01FE0C                     l1446:
   692                           
   693                           ;colour_identify.c: 103:             stop(mL,mR);
   694   01FE0C  C01C  F014         	movff	respond_to_card@mL,stop@mL
   695   01FE10  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   696   01FE14  C01E  F016         	movff	respond_to_card@mR,stop@mR
   697   01FE18  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   698   01FE1C  EC95  F0FB         	call	_stop	;wreg free
   699                           
   700                           ;colour_identify.c: 104:             break;
   701   01FE20  EFFF  F0FF         	goto	l246
   702   01FE24                     l1448:
   703                           
   704                           ;colour_identify.c: 106:             reverseFullSpeed(mL,mR);
   705   01FE24  C01C  F014         	movff	respond_to_card@mL,reverseFullSpeed@mL
   706   01FE28  C01D  F015         	movff	respond_to_card@mL+1,reverseFullSpeed@mL+1
   707   01FE2C  C01E  F016         	movff	respond_to_card@mR,reverseFullSpeed@mR
   708   01FE30  C01F  F017         	movff	respond_to_card@mR+1,reverseFullSpeed@mR+1
   709   01FE34  EC1C  F0FC         	call	_reverseFullSpeed	;wreg free
   710   01FE38                     
   711                           ;colour_identify.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
   712   01FE38  0E29               	movlw	41
   713   01FE3A  6E21               	movwf	(??_respond_to_card+1)^0,c
   714   01FE3C  0E96               	movlw	150
   715   01FE3E  6E20               	movwf	??_respond_to_card^0,c
   716   01FE40  0E7F               	movlw	127
   717   01FE42                     u297:
   718   01FE42  2EE8               	decfsz	wreg,f,c
   719   01FE44  D7FE               	bra	u297
   720   01FE46  2E20               	decfsz	??_respond_to_card^0,f,c
   721   01FE48  D7FC               	bra	u297
   722   01FE4A  2E21               	decfsz	(??_respond_to_card+1)^0,f,c
   723   01FE4C  D7FA               	bra	u297
   724   01FE4E  F000               	nop	
   725   01FE50                     
   726                           ;colour_identify.c: 108:             stop(mL,mR);
   727   01FE50  C01C  F014         	movff	respond_to_card@mL,stop@mL
   728   01FE54  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   729   01FE58  C01E  F016         	movff	respond_to_card@mR,stop@mR
   730   01FE5C  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   731   01FE60  EC95  F0FB         	call	_stop	;wreg free
   732   01FE64                     
   733                           ;colour_identify.c: 109:             turnLeft45(mL,mR);
   734   01FE64  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   735   01FE68  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   736   01FE6C  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   737   01FE70  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   738   01FE74  EC62  F0FC         	call	_turnLeft45	;wreg free
   739   01FE78                     
   740                           ;colour_identify.c: 110:             stop(mL,mR);
   741   01FE78  C01C  F014         	movff	respond_to_card@mL,stop@mL
   742   01FE7C  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   743   01FE80  C01E  F016         	movff	respond_to_card@mR,stop@mR
   744   01FE84  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   745   01FE88  EC95  F0FB         	call	_stop	;wreg free
   746   01FE8C                     
   747                           ;colour_identify.c: 111:             turnLeft45(mL,mR);
   748   01FE8C  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   749   01FE90  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   750   01FE94  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   751   01FE98  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   752   01FE9C  EC62  F0FC         	call	_turnLeft45	;wreg free
   753   01FEA0  EF06  F0FF         	goto	l1446
   754   01FEA4                     l1462:
   755                           
   756                           ;colour_identify.c: 115:             turnRight45(mL,mR);
   757   01FEA4  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   758   01FEA8  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   759   01FEAC  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   760   01FEB0  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   761   01FEB4  ECB9  F0FC         	call	_turnRight45	;wreg free
   762                           
   763                           ;colour_identify.c: 116:             stop(mL,mR);
   764   01FEB8  C01C  F014         	movff	respond_to_card@mL,stop@mL
   765   01FEBC  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   766   01FEC0  C01E  F016         	movff	respond_to_card@mR,stop@mR
   767   01FEC4  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   768   01FEC8  EC95  F0FB         	call	_stop	;wreg free
   769                           
   770                           ;colour_identify.c: 117:             turnRight45(mL,mR);
   771   01FECC  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   772   01FED0  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   773   01FED4  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   774   01FED8  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   775   01FEDC  ECB9  F0FC         	call	_turnRight45	;wreg free
   776                           
   777                           ;colour_identify.c: 118:             stop(mL,mR);
   778   01FEE0  C01C  F014         	movff	respond_to_card@mL,stop@mL
   779   01FEE4  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   780   01FEE8  C01E  F016         	movff	respond_to_card@mR,stop@mR
   781   01FEEC  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   782   01FEF0  EC95  F0FB         	call	_stop	;wreg free
   783                           
   784                           ;colour_identify.c: 119:             turnRight45(mL,mR);
   785   01FEF4  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   786   01FEF8  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   787   01FEFC  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   788   01FF00  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   789   01FF04  ECB9  F0FC         	call	_turnRight45	;wreg free
   790                           
   791                           ;colour_identify.c: 120:             stop(mL,mR);
   792   01FF08  C01C  F014         	movff	respond_to_card@mL,stop@mL
   793   01FF0C  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   794   01FF10  C01E  F016         	movff	respond_to_card@mR,stop@mR
   795   01FF14  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   796   01FF18  EC95  F0FB         	call	_stop	;wreg free
   797                           
   798                           ;colour_identify.c: 121:             break;
   799   01FF1C  EFFF  F0FF         	goto	l246
   800   01FF20                     l1464:
   801                           
   802                           ;colour_identify.c: 123:             turnLeft45(mL,mR);
   803   01FF20  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   804   01FF24  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   805   01FF28  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   806   01FF2C  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   807   01FF30  EC62  F0FC         	call	_turnLeft45	;wreg free
   808                           
   809                           ;colour_identify.c: 124:             stop(mL,mR);
   810   01FF34  C01C  F014         	movff	respond_to_card@mL,stop@mL
   811   01FF38  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   812   01FF3C  C01E  F016         	movff	respond_to_card@mR,stop@mR
   813   01FF40  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   814   01FF44  EC95  F0FB         	call	_stop	;wreg free
   815                           
   816                           ;colour_identify.c: 125:             turnLeft45(mL,mR);
   817   01FF48  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   818   01FF4C  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   819   01FF50  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   820   01FF54  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   821   01FF58  EC62  F0FC         	call	_turnLeft45	;wreg free
   822                           
   823                           ;colour_identify.c: 126:             stop(mL,mR);
   824   01FF5C  C01C  F014         	movff	respond_to_card@mL,stop@mL
   825   01FF60  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   826   01FF64  C01E  F016         	movff	respond_to_card@mR,stop@mR
   827   01FF68  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   828   01FF6C  EC95  F0FB         	call	_stop	;wreg free
   829                           
   830                           ;colour_identify.c: 127:             turnLeft45(mL,mR);
   831   01FF70  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   832   01FF74  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   833   01FF78  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   834   01FF7C  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   835   01FF80  EC62  F0FC         	call	_turnLeft45	;wreg free
   836                           
   837                           ;colour_identify.c: 128:             stop(mL,mR);
   838   01FF84  C01C  F014         	movff	respond_to_card@mL,stop@mL
   839   01FF88  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   840   01FF8C  C01E  F016         	movff	respond_to_card@mR,stop@mR
   841   01FF90  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   842   01FF94  EC95  F0FB         	call	_stop	;wreg free
   843                           
   844                           ;colour_identify.c: 129:             break;
   845   01FF98  EFFF  F0FF         	goto	l246
   846   01FF9C                     l1468:
   847   01FF9C  5022               	movf	respond_to_card@card^0,w,c
   848   01FF9E  6E20               	movwf	??_respond_to_card^0,c
   849   01FFA0  6A21               	clrf	(??_respond_to_card+1)^0,c
   850                           
   851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   852                           ; Switch size 1, requested type "simple"
   853                           ; Number of cases is 1, Range of values is 0 to 0
   854                           ; switch strategies available:
   855                           ; Name         Instructions Cycles
   856                           ; simple_byte            4     3 (average)
   857                           ;	Chosen strategy is simple_byte
   858   01FFA2  5021               	movf	(??_respond_to_card+1)^0,w,c
   859   01FFA4  0A00               	xorlw	0	; case 0
   860   01FFA6  B4D8               	btfsc	status,2,c
   861   01FFA8  EFD8  F0FF         	goto	l1566
   862   01FFAC  EFFF  F0FF         	goto	l246
   863   01FFB0                     l1566:
   864                           
   865                           ; Switch size 1, requested type "simple"
   866                           ; Number of cases is 9, Range of values is 0 to 8
   867                           ; switch strategies available:
   868                           ; Name         Instructions Cycles
   869                           ; simple_byte           28    15 (average)
   870                           ;	Chosen strategy is simple_byte
   871   01FFB0  5020               	movf	??_respond_to_card^0,w,c
   872   01FFB2  0A00               	xorlw	0	; case 0
   873   01FFB4  B4D8               	btfsc	status,2,c
   874   01FFB6  EF22  F0FE         	goto	l1428
   875   01FFBA  0A01               	xorlw	1	; case 1
   876   01FFBC  B4D8               	btfsc	status,2,c
   877   01FFBE  EF4C  F0FE         	goto	l1430
   878   01FFC2  0A03               	xorlw	3	; case 2
   879   01FFC4  B4D8               	btfsc	status,2,c
   880   01FFC6  EF76  F0FE         	goto	l1432
   881   01FFCA  0A01               	xorlw	1	; case 3
   882   01FFCC  B4D8               	btfsc	status,2,c
   883   01FFCE  EFC8  F0FE         	goto	l1434
   884   01FFD2  0A07               	xorlw	7	; case 4
   885   01FFD4  B4D8               	btfsc	status,2,c
   886   01FFD6  EF12  F0FF         	goto	l1448
   887   01FFDA  0A01               	xorlw	1	; case 5
   888   01FFDC  B4D8               	btfsc	status,2,c
   889   01FFDE  EF52  F0FF         	goto	l1462
   890   01FFE2  0A03               	xorlw	3	; case 6
   891   01FFE4  B4D8               	btfsc	status,2,c
   892   01FFE6  EF90  F0FF         	goto	l1464
   893   01FFEA  0A01               	xorlw	1	; case 7
   894   01FFEC  B4D8               	btfsc	status,2,c
   895   01FFEE  EFFF  F0FF         	goto	l246
   896   01FFF2  0A0F               	xorlw	15	; case 8
   897   01FFF4  B4D8               	btfsc	status,2,c
   898   01FFF6  EFFF  F0FF         	goto	l246
   899   01FFFA  EFFF  F0FF         	goto	l246
   900   01FFFE                     l246:
   901   01FFFE  0012               	return		;funcret
   902   020000                     __end_of_respond_to_card:
   903                           	callstack 0
   904                           
   905 ;; *************** function _turnRight45 *****************
   906 ;; Defined at:
   907 ;;		line 116 in file "dc_motor.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   910 ;;		 -> main@motorL(9), 
   911 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   912 ;;		 -> main@motorR(9), 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  i               2   25[COMRAM] int 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   924 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   927 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   928 ;;Total ram usage:        8 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; Hardware stack levels required when called: 2
   931 ;; This function calls:
   932 ;;		_setMotorPWM
   933 ;; This function is called by:
   934 ;;		_respond_to_card
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text2
   939   01F972                     __ptext2:
   940                           	callstack 0
   941   01F972                     _turnRight45:
   942                           	callstack 27
   943   01F972                     
   944                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
   945   01F972  EE20 F001          	lfsr	2,1
   946   01F976  5014               	movf	turnRight45@mL^0,w,c
   947   01F978  26D9               	addwf	fsr2l,f,c
   948   01F97A  5015               	movf	(turnRight45@mL+1)^0,w,c
   949   01F97C  22DA               	addwfc	fsr2h,f,c
   950   01F97E  0E01               	movlw	1
   951   01F980  6EDF               	movwf	indf2,c
   952                           
   953                           ;dc_motor.c: 119:     mR->direction=0;
   954   01F982  EE20 F001          	lfsr	2,1
   955   01F986  5016               	movf	turnRight45@mR^0,w,c
   956   01F988  26D9               	addwf	fsr2l,f,c
   957   01F98A  5017               	movf	(turnRight45@mR+1)^0,w,c
   958   01F98C  22DA               	addwfc	fsr2h,f,c
   959   01F98E  0E00               	movlw	0
   960   01F990  6EDF               	movwf	indf2,c
   961   01F992                     
   962                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
   963   01F992  0E00               	movlw	0
   964   01F994  6E1B               	movwf	(turnRight45@i+1)^0,c
   965   01F996  0E00               	movlw	0
   966   01F998  6E1A               	movwf	turnRight45@i^0,c
   967   01F99A                     l1382:
   968                           
   969                           ;dc_motor.c: 122:         mR->power=i;
   970   01F99A  C016  FFD9         	movff	turnRight45@mR,fsr2l
   971   01F99E  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
   972   01F9A2  C01A  FFDF         	movff	turnRight45@i,indf2
   973                           
   974                           ;dc_motor.c: 123:         mL->power=i;
   975   01F9A6  C014  FFD9         	movff	turnRight45@mL,fsr2l
   976   01F9AA  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
   977   01F9AE  C01A  FFDF         	movff	turnRight45@i,indf2
   978   01F9B2                     
   979                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
   980   01F9B2  0E02               	movlw	2
   981   01F9B4  6E19               	movwf	(??_turnRight45+1)^0,c
   982   01F9B6  0E38               	movlw	56
   983   01F9B8  6E18               	movwf	??_turnRight45^0,c
   984   01F9BA  0EAD               	movlw	173
   985   01F9BC                     u307:
   986   01F9BC  2EE8               	decfsz	wreg,f,c
   987   01F9BE  D7FE               	bra	u307
   988   01F9C0  2E18               	decfsz	??_turnRight45^0,f,c
   989   01F9C2  D7FC               	bra	u307
   990   01F9C4  2E19               	decfsz	(??_turnRight45+1)^0,f,c
   991   01F9C6  D7FA               	bra	u307
   992   01F9C8  F000               	nop	
   993   01F9CA                     
   994                           ;dc_motor.c: 125:         setMotorPWM(mL);
   995   01F9CA  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
   996   01F9CE  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
   997   01F9D2  EC69  F0FD         	call	_setMotorPWM	;wreg free
   998   01F9D6                     
   999                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  1000   01F9D6  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
  1001   01F9DA  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
  1002   01F9DE  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1003   01F9E2  0E0A               	movlw	10
  1004   01F9E4  261A               	addwf	turnRight45@i^0,f,c
  1005   01F9E6  0E00               	movlw	0
  1006   01F9E8  221B               	addwfc	(turnRight45@i+1)^0,f,c
  1007   01F9EA  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
  1008   01F9EC  EF01  F0FD         	goto	u241
  1009   01F9F0  501B               	movf	(turnRight45@i+1)^0,w,c
  1010   01F9F2  E109               	bnz	u240
  1011   01F9F4  0E50               	movlw	80
  1012   01F9F6  5C1A               	subwf	turnRight45@i^0,w,c
  1013   01F9F8  A0D8               	btfss	status,0,c
  1014   01F9FA  EF01  F0FD         	goto	u241
  1015   01F9FE  EF03  F0FD         	goto	u240
  1016   01FA02                     u241:
  1017   01FA02  EFCD  F0FC         	goto	l1382
  1018   01FA06                     u240:
  1019   01FA06                     
  1020                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  1021   01FA06  0E06               	movlw	6
  1022   01FA08  6E19               	movwf	(??_turnRight45+1)^0,c
  1023   01FA0A  0E47               	movlw	71
  1024   01FA0C  6E18               	movwf	??_turnRight45^0,c
  1025   01FA0E  0EA0               	movlw	160
  1026   01FA10                     u317:
  1027   01FA10  2EE8               	decfsz	wreg,f,c
  1028   01FA12  D7FE               	bra	u317
  1029   01FA14  2E18               	decfsz	??_turnRight45^0,f,c
  1030   01FA16  D7FC               	bra	u317
  1031   01FA18  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  1032   01FA1A  D7FA               	bra	u317
  1033   01FA1C  D000               	nop2	
  1034   01FA1E  0012               	return		;funcret
  1035   01FA20                     __end_of_turnRight45:
  1036                           	callstack 0
  1037                           
  1038 ;; *************** function _turnLeft45 *****************
  1039 ;; Defined at:
  1040 ;;		line 101 in file "dc_motor.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1043 ;;		 -> main@motorL(9), 
  1044 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1045 ;;		 -> main@motorR(9), 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  i               2   25[COMRAM] int 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1057 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;Total ram usage:        8 bytes
  1062 ;; Hardware stack levels used: 1
  1063 ;; Hardware stack levels required when called: 2
  1064 ;; This function calls:
  1065 ;;		_setMotorPWM
  1066 ;; This function is called by:
  1067 ;;		_respond_to_card
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text3
  1072   01F8C4                     __ptext3:
  1073                           	callstack 0
  1074   01F8C4                     _turnLeft45:
  1075                           	callstack 27
  1076   01F8C4                     
  1077                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  1078   01F8C4  EE20 F001          	lfsr	2,1
  1079   01F8C8  5014               	movf	turnLeft45@mL^0,w,c
  1080   01F8CA  26D9               	addwf	fsr2l,f,c
  1081   01F8CC  5015               	movf	(turnLeft45@mL+1)^0,w,c
  1082   01F8CE  22DA               	addwfc	fsr2h,f,c
  1083   01F8D0  0E00               	movlw	0
  1084   01F8D2  6EDF               	movwf	indf2,c
  1085                           
  1086                           ;dc_motor.c: 104:     mR->direction=1;
  1087   01F8D4  EE20 F001          	lfsr	2,1
  1088   01F8D8  5016               	movf	turnLeft45@mR^0,w,c
  1089   01F8DA  26D9               	addwf	fsr2l,f,c
  1090   01F8DC  5017               	movf	(turnLeft45@mR+1)^0,w,c
  1091   01F8DE  22DA               	addwfc	fsr2h,f,c
  1092   01F8E0  0E01               	movlw	1
  1093   01F8E2  6EDF               	movwf	indf2,c
  1094   01F8E4                     
  1095                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  1096   01F8E4  0E00               	movlw	0
  1097   01F8E6  6E1B               	movwf	(turnLeft45@i+1)^0,c
  1098   01F8E8  0E00               	movlw	0
  1099   01F8EA  6E1A               	movwf	turnLeft45@i^0,c
  1100   01F8EC                     l1360:
  1101                           
  1102                           ;dc_motor.c: 107:         mR->power=i;
  1103   01F8EC  C016  FFD9         	movff	turnLeft45@mR,fsr2l
  1104   01F8F0  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
  1105   01F8F4  C01A  FFDF         	movff	turnLeft45@i,indf2
  1106                           
  1107                           ;dc_motor.c: 108:         mL->power=i;
  1108   01F8F8  C014  FFD9         	movff	turnLeft45@mL,fsr2l
  1109   01F8FC  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
  1110   01F900  C01A  FFDF         	movff	turnLeft45@i,indf2
  1111   01F904                     
  1112                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  1113   01F904  0E02               	movlw	2
  1114   01F906  6E19               	movwf	(??_turnLeft45+1)^0,c
  1115   01F908  0E38               	movlw	56
  1116   01F90A  6E18               	movwf	??_turnLeft45^0,c
  1117   01F90C  0EAD               	movlw	173
  1118   01F90E                     u327:
  1119   01F90E  2EE8               	decfsz	wreg,f,c
  1120   01F910  D7FE               	bra	u327
  1121   01F912  2E18               	decfsz	??_turnLeft45^0,f,c
  1122   01F914  D7FC               	bra	u327
  1123   01F916  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  1124   01F918  D7FA               	bra	u327
  1125   01F91A  F000               	nop	
  1126   01F91C                     
  1127                           ;dc_motor.c: 110:         setMotorPWM(mL);
  1128   01F91C  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
  1129   01F920  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  1130   01F924  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1131   01F928                     
  1132                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  1133   01F928  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
  1134   01F92C  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  1135   01F930  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1136   01F934  0E0A               	movlw	10
  1137   01F936  261A               	addwf	turnLeft45@i^0,f,c
  1138   01F938  0E00               	movlw	0
  1139   01F93A  221B               	addwfc	(turnLeft45@i+1)^0,f,c
  1140   01F93C  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
  1141   01F93E  EFAA  F0FC         	goto	u231
  1142   01F942  501B               	movf	(turnLeft45@i+1)^0,w,c
  1143   01F944  E109               	bnz	u230
  1144   01F946  0E50               	movlw	80
  1145   01F948  5C1A               	subwf	turnLeft45@i^0,w,c
  1146   01F94A  A0D8               	btfss	status,0,c
  1147   01F94C  EFAA  F0FC         	goto	u231
  1148   01F950  EFAC  F0FC         	goto	u230
  1149   01F954                     u231:
  1150   01F954  EF76  F0FC         	goto	l1360
  1151   01F958                     u230:
  1152   01F958                     
  1153                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  1154   01F958  0E06               	movlw	6
  1155   01F95A  6E19               	movwf	(??_turnLeft45+1)^0,c
  1156   01F95C  0E47               	movlw	71
  1157   01F95E  6E18               	movwf	??_turnLeft45^0,c
  1158   01F960  0EA0               	movlw	160
  1159   01F962                     u337:
  1160   01F962  2EE8               	decfsz	wreg,f,c
  1161   01F964  D7FE               	bra	u337
  1162   01F966  2E18               	decfsz	??_turnLeft45^0,f,c
  1163   01F968  D7FC               	bra	u337
  1164   01F96A  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  1165   01F96C  D7FA               	bra	u337
  1166   01F96E  D000               	nop2	
  1167   01F970  0012               	return		;funcret
  1168   01F972                     __end_of_turnLeft45:
  1169                           	callstack 0
  1170                           
  1171 ;; *************** function _stop *****************
  1172 ;; Defined at:
  1173 ;;		line 84 in file "dc_motor.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1176 ;;		 -> main@motorL(9), 
  1177 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1178 ;;		 -> main@motorR(9), 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1193 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1194 ;;Total ram usage:        5 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 2
  1197 ;; This function calls:
  1198 ;;		_setMotorPWM
  1199 ;; This function is called by:
  1200 ;;		_respond_to_card
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text4
  1205   01F72A                     __ptext4:
  1206                           	callstack 0
  1207   01F72A                     _stop:
  1208                           	callstack 27
  1209   01F72A                     
  1210                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  1211   01F72A  EFAA  F0FB         	goto	l1342
  1212   01F72E                     l1336:
  1213                           
  1214                           ;dc_motor.c: 87:         mL->power -=10;
  1215   01F72E  C014  FFD9         	movff	stop@mL,fsr2l
  1216   01F732  C015  FFDA         	movff	stop@mL+1,fsr2h
  1217   01F736  0E0A               	movlw	10
  1218   01F738  5EDF               	subwf	indf2,f,c
  1219   01F73A                     
  1220                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  1221   01F73A  0E2A               	movlw	42
  1222   01F73C  6E18               	movwf	??_stop^0,c
  1223   01F73E  0E8E               	movlw	142
  1224   01F740                     u347:
  1225   01F740  2EE8               	decfsz	wreg,f,c
  1226   01F742  D7FE               	bra	u347
  1227   01F744  2E18               	decfsz	??_stop^0,f,c
  1228   01F746  D7FC               	bra	u347
  1229   01F748                     
  1230                           ;dc_motor.c: 89:         setMotorPWM(mL);
  1231   01F748  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1232   01F74C  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1233   01F750  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1234   01F754                     l1342:
  1235                           
  1236                           ;dc_motor.c: 86:     while(mL->power !=0){
  1237   01F754  C014  FFD9         	movff	stop@mL,fsr2l
  1238   01F758  C015  FFDA         	movff	stop@mL+1,fsr2h
  1239   01F75C  50DF               	movf	indf2,w,c
  1240   01F75E  A4D8               	btfss	status,2,c
  1241   01F760  EFB4  F0FB         	goto	u211
  1242   01F764  EFB6  F0FB         	goto	u210
  1243   01F768                     u211:
  1244   01F768  EF97  F0FB         	goto	l1336
  1245   01F76C                     u210:
  1246   01F76C  EFCB  F0FB         	goto	l1350
  1247   01F770                     l1344:
  1248                           
  1249                           ;dc_motor.c: 92:         mR->power -=10;
  1250   01F770  C016  FFD9         	movff	stop@mR,fsr2l
  1251   01F774  C017  FFDA         	movff	stop@mR+1,fsr2h
  1252   01F778  0E0A               	movlw	10
  1253   01F77A  5EDF               	subwf	indf2,f,c
  1254   01F77C                     
  1255                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  1256   01F77C  0E2A               	movlw	42
  1257   01F77E  6E18               	movwf	??_stop^0,c
  1258   01F780  0E8E               	movlw	142
  1259   01F782                     u357:
  1260   01F782  2EE8               	decfsz	wreg,f,c
  1261   01F784  D7FE               	bra	u357
  1262   01F786  2E18               	decfsz	??_stop^0,f,c
  1263   01F788  D7FC               	bra	u357
  1264   01F78A                     
  1265                           ;dc_motor.c: 94:         setMotorPWM(mR);
  1266   01F78A  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1267   01F78E  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1268   01F792  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1269   01F796                     l1350:
  1270                           
  1271                           ;dc_motor.c: 91:     while(mR -> power !=0){
  1272   01F796  C016  FFD9         	movff	stop@mR,fsr2l
  1273   01F79A  C017  FFDA         	movff	stop@mR+1,fsr2h
  1274   01F79E  50DF               	movf	indf2,w,c
  1275   01F7A0  A4D8               	btfss	status,2,c
  1276   01F7A2  EFD5  F0FB         	goto	u221
  1277   01F7A6  EFD7  F0FB         	goto	u220
  1278   01F7AA                     u221:
  1279   01F7AA  EFB8  F0FB         	goto	l1344
  1280   01F7AE                     u220:
  1281   01F7AE  0012               	return		;funcret
  1282   01F7B0                     __end_of_stop:
  1283                           	callstack 0
  1284                           
  1285 ;; *************** function _reverseFullSpeed *****************
  1286 ;; Defined at:
  1287 ;;		line 146 in file "dc_motor.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1290 ;;		 -> main@motorL(9), 
  1291 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1292 ;;		 -> main@motorR(9), 
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  i               2   24[COMRAM] int 
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1307 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1308 ;;Total ram usage:        7 bytes
  1309 ;; Hardware stack levels used: 1
  1310 ;; Hardware stack levels required when called: 2
  1311 ;; This function calls:
  1312 ;;		_setMotorPWM
  1313 ;; This function is called by:
  1314 ;;		_respond_to_card
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text5
  1319   01F838                     __ptext5:
  1320                           	callstack 0
  1321   01F838                     _reverseFullSpeed:
  1322                           	callstack 27
  1323   01F838                     
  1324                           ;dc_motor.c: 146: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 147: {;d
      +                          c_motor.c: 148:     mL->direction=0;
  1325   01F838  EE20 F001          	lfsr	2,1
  1326   01F83C  5014               	movf	reverseFullSpeed@mL^0,w,c
  1327   01F83E  26D9               	addwf	fsr2l,f,c
  1328   01F840  5015               	movf	(reverseFullSpeed@mL+1)^0,w,c
  1329   01F842  22DA               	addwfc	fsr2h,f,c
  1330   01F844  0E00               	movlw	0
  1331   01F846  6EDF               	movwf	indf2,c
  1332                           
  1333                           ;dc_motor.c: 149:     mR->direction=0;
  1334   01F848  EE20 F001          	lfsr	2,1
  1335   01F84C  5016               	movf	reverseFullSpeed@mR^0,w,c
  1336   01F84E  26D9               	addwf	fsr2l,f,c
  1337   01F850  5017               	movf	(reverseFullSpeed@mR+1)^0,w,c
  1338   01F852  22DA               	addwfc	fsr2h,f,c
  1339   01F854  0E00               	movlw	0
  1340   01F856  6EDF               	movwf	indf2,c
  1341   01F858                     
  1342                           ;dc_motor.c: 150:     for(int i=0;i<60;i+=10){
  1343   01F858  0E00               	movlw	0
  1344   01F85A  6E1A               	movwf	(reverseFullSpeed@i+1)^0,c
  1345   01F85C  0E00               	movlw	0
  1346   01F85E  6E19               	movwf	reverseFullSpeed@i^0,c
  1347   01F860                     l1404:
  1348                           
  1349                           ;dc_motor.c: 151:         mL->power=i;
  1350   01F860  C014  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  1351   01F864  C015  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  1352   01F868  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  1353                           
  1354                           ;dc_motor.c: 152:         mR->power=i;
  1355   01F86C  C016  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  1356   01F870  C017  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  1357   01F874  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  1358   01F878                     
  1359                           ;dc_motor.c: 153:         setMotorPWM(mL);
  1360   01F878  C014  F00E         	movff	reverseFullSpeed@mL,setMotorPWM@m
  1361   01F87C  C015  F00F         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  1362   01F880  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1363   01F884                     
  1364                           ;dc_motor.c: 154:         setMotorPWM(mR);
  1365   01F884  C016  F00E         	movff	reverseFullSpeed@mR,setMotorPWM@m
  1366   01F888  C017  F00F         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  1367   01F88C  EC69  F0FD         	call	_setMotorPWM	;wreg free
  1368   01F890                     
  1369                           ;dc_motor.c: 155:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1370   01F890  0ED0               	movlw	208
  1371   01F892  6E18               	movwf	??_reverseFullSpeed^0,c
  1372   01F894  0ECA               	movlw	202
  1373   01F896                     u367:
  1374   01F896  2EE8               	decfsz	wreg,f,c
  1375   01F898  D7FE               	bra	u367
  1376   01F89A  2E18               	decfsz	??_reverseFullSpeed^0,f,c
  1377   01F89C  D7FC               	bra	u367
  1378   01F89E                     
  1379                           ;dc_motor.c: 156:     }
  1380   01F89E  0E0A               	movlw	10
  1381   01F8A0  2619               	addwf	reverseFullSpeed@i^0,f,c
  1382   01F8A2  0E00               	movlw	0
  1383   01F8A4  221A               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  1384   01F8A6  BE1A               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  1385   01F8A8  EF5F  F0FC         	goto	u251
  1386   01F8AC  501A               	movf	(reverseFullSpeed@i+1)^0,w,c
  1387   01F8AE  E109               	bnz	u250
  1388   01F8B0  0E3C               	movlw	60
  1389   01F8B2  5C19               	subwf	reverseFullSpeed@i^0,w,c
  1390   01F8B4  A0D8               	btfss	status,0,c
  1391   01F8B6  EF5F  F0FC         	goto	u251
  1392   01F8BA  EF61  F0FC         	goto	u250
  1393   01F8BE                     u251:
  1394   01F8BE  EF30  F0FC         	goto	l1404
  1395   01F8C2                     u250:
  1396   01F8C2  0012               	return		;funcret
  1397   01F8C4                     __end_of_reverseFullSpeed:
  1398                           	callstack 0
  1399                           
  1400 ;; *************** function _setMotorPWM *****************
  1401 ;; Defined at:
  1402 ;;		line 61 in file "dc_motor.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  m               2   13[COMRAM] PTR struct DC_motor
  1405 ;;		 -> main@motorR(9), main@motorL(9), 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  negDuty         1   18[COMRAM] unsigned char 
  1408 ;;  posDuty         1   17[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1422 ;;Total ram usage:        6 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 1
  1425 ;; This function calls:
  1426 ;;		___lwdiv
  1427 ;;		___wmul
  1428 ;; This function is called by:
  1429 ;;		_stop
  1430 ;;		_turnLeft45
  1431 ;;		_turnRight45
  1432 ;;		_reverseFullSpeed
  1433 ;;		_main
  1434 ;;		_fullSpeedAhead
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text6
  1439   01FAD2                     __ptext6:
  1440                           	callstack 0
  1441   01FAD2                     _setMotorPWM:
  1442                           	callstack 29
  1443   01FAD2                     
  1444                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  1445   01FAD2  EE20 F002          	lfsr	2,2
  1446   01FAD6  500E               	movf	setMotorPWM@m^0,w,c
  1447   01FAD8  26D9               	addwf	fsr2l,f,c
  1448   01FADA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1449   01FADC  22DA               	addwfc	fsr2h,f,c
  1450   01FADE  50DF               	movf	indf2,w,c
  1451   01FAE0  B4D8               	btfsc	status,2,c
  1452   01FAE2  EF75  F0FD         	goto	u191
  1453   01FAE6  EF77  F0FD         	goto	u190
  1454   01FAEA                     u191:
  1455   01FAEA  EFAB  F0FD         	goto	l1322
  1456   01FAEE                     u190:
  1457   01FAEE                     
  1458                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1459   01FAEE  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1460   01FAF2  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1461   01FAF6  50DF               	movf	indf2,w,c
  1462   01FAF8  6E10               	movwf	??_setMotorPWM^0,c
  1463   01FAFA  5010               	movf	??_setMotorPWM^0,w,c
  1464   01FAFC  6E01               	movwf	___wmul@multiplier^0,c
  1465   01FAFE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1466   01FB00  EE20 F003          	lfsr	2,3
  1467   01FB04  500E               	movf	setMotorPWM@m^0,w,c
  1468   01FB06  26D9               	addwf	fsr2l,f,c
  1469   01FB08  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1470   01FB0A  22DA               	addwfc	fsr2h,f,c
  1471   01FB0C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1472   01FB10  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1473   01FB14  EC05  F0FB         	call	___wmul	;wreg free
  1474   01FB18  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1475   01FB1C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1476   01FB20  0E00               	movlw	0
  1477   01FB22  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1478   01FB24  0E64               	movlw	100
  1479   01FB26  6E09               	movwf	___lwdiv@divisor^0,c
  1480   01FB28  EC5B  F0FB         	call	___lwdiv	;wreg free
  1481   01FB2C  EE20 F003          	lfsr	2,3
  1482   01FB30  500E               	movf	setMotorPWM@m^0,w,c
  1483   01FB32  26D9               	addwf	fsr2l,f,c
  1484   01FB34  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1485   01FB36  22DA               	addwfc	fsr2h,f,c
  1486   01FB38  50DF               	movf	indf2,w,c
  1487   01FB3A  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1488   01FB3C  5007               	movf	?___lwdiv^0,w,c
  1489   01FB3E  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1490   01FB40  6E12               	movwf	setMotorPWM@posDuty^0,c
  1491   01FB42                     
  1492                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  1493   01FB42  EE20 F003          	lfsr	2,3
  1494   01FB46  500E               	movf	setMotorPWM@m^0,w,c
  1495   01FB48  26D9               	addwf	fsr2l,f,c
  1496   01FB4A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1497   01FB4C  22DA               	addwfc	fsr2h,f,c
  1498   01FB4E  50DF               	movf	indf2,w,c
  1499   01FB50  6E13               	movwf	setMotorPWM@negDuty^0,c
  1500                           
  1501                           ;dc_motor.c: 68:     }
  1502   01FB52  EFCE  F0FD         	goto	l1326
  1503   01FB56                     l1322:
  1504                           
  1505                           ;dc_motor.c: 70:         posDuty=0;
  1506   01FB56  0E00               	movlw	0
  1507   01FB58  6E12               	movwf	setMotorPWM@posDuty^0,c
  1508   01FB5A                     
  1509                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1510   01FB5A  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1511   01FB5E  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1512   01FB62  50DF               	movf	indf2,w,c
  1513   01FB64  6E10               	movwf	??_setMotorPWM^0,c
  1514   01FB66  5010               	movf	??_setMotorPWM^0,w,c
  1515   01FB68  6E01               	movwf	___wmul@multiplier^0,c
  1516   01FB6A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1517   01FB6C  EE20 F003          	lfsr	2,3
  1518   01FB70  500E               	movf	setMotorPWM@m^0,w,c
  1519   01FB72  26D9               	addwf	fsr2l,f,c
  1520   01FB74  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1521   01FB76  22DA               	addwfc	fsr2h,f,c
  1522   01FB78  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1523   01FB7C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1524   01FB80  EC05  F0FB         	call	___wmul	;wreg free
  1525   01FB84  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1526   01FB88  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1527   01FB8C  0E00               	movlw	0
  1528   01FB8E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1529   01FB90  0E64               	movlw	100
  1530   01FB92  6E09               	movwf	___lwdiv@divisor^0,c
  1531   01FB94  EC5B  F0FB         	call	___lwdiv	;wreg free
  1532   01FB98  5007               	movf	?___lwdiv^0,w,c
  1533   01FB9A  6E13               	movwf	setMotorPWM@negDuty^0,c
  1534   01FB9C                     l1326:
  1535                           
  1536                           ;dc_motor.c: 74:     if (m->direction) {
  1537   01FB9C  EE20 F001          	lfsr	2,1
  1538   01FBA0  500E               	movf	setMotorPWM@m^0,w,c
  1539   01FBA2  26D9               	addwf	fsr2l,f,c
  1540   01FBA4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1541   01FBA6  22DA               	addwfc	fsr2h,f,c
  1542   01FBA8  50DF               	movf	indf2,w,c
  1543   01FBAA  B4D8               	btfsc	status,2,c
  1544   01FBAC  EFDA  F0FD         	goto	u201
  1545   01FBB0  EFDC  F0FD         	goto	u200
  1546   01FBB4                     u201:
  1547   01FBB4  EFFE  F0FD         	goto	l1330
  1548   01FBB8                     u200:
  1549   01FBB8                     
  1550                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  1551   01FBB8  EE20 F005          	lfsr	2,5
  1552   01FBBC  500E               	movf	setMotorPWM@m^0,w,c
  1553   01FBBE  26D9               	addwf	fsr2l,f,c
  1554   01FBC0  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1555   01FBC2  22DA               	addwfc	fsr2h,f,c
  1556   01FBC4  CFDE F010          	movff	postinc2,??_setMotorPWM
  1557   01FBC8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1558   01FBCC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1559   01FBD0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1560   01FBD4  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1561                           
  1562                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  1563   01FBD8  EE20 F007          	lfsr	2,7
  1564   01FBDC  500E               	movf	setMotorPWM@m^0,w,c
  1565   01FBDE  26D9               	addwf	fsr2l,f,c
  1566   01FBE0  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1567   01FBE2  22DA               	addwfc	fsr2h,f,c
  1568   01FBE4  CFDE F010          	movff	postinc2,??_setMotorPWM
  1569   01FBE8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1570   01FBEC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1571   01FBF0  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1572   01FBF4  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1573                           
  1574                           ;dc_motor.c: 77:     } else {
  1575   01FBF8  EF1E  F0FE         	goto	l83
  1576   01FBFC                     l1330:
  1577                           
  1578                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  1579   01FBFC  EE20 F005          	lfsr	2,5
  1580   01FC00  500E               	movf	setMotorPWM@m^0,w,c
  1581   01FC02  26D9               	addwf	fsr2l,f,c
  1582   01FC04  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1583   01FC06  22DA               	addwfc	fsr2h,f,c
  1584   01FC08  CFDE F010          	movff	postinc2,??_setMotorPWM
  1585   01FC0C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1586   01FC10  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1587   01FC14  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1588   01FC18  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1589                           
  1590                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  1591   01FC1C  EE20 F007          	lfsr	2,7
  1592   01FC20  500E               	movf	setMotorPWM@m^0,w,c
  1593   01FC22  26D9               	addwf	fsr2l,f,c
  1594   01FC24  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1595   01FC26  22DA               	addwfc	fsr2h,f,c
  1596   01FC28  CFDE F010          	movff	postinc2,??_setMotorPWM
  1597   01FC2C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1598   01FC30  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1599   01FC34  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1600   01FC38  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1601   01FC3C                     l83:
  1602   01FC3C  0012               	return		;funcret
  1603   01FC3E                     __end_of_setMotorPWM:
  1604                           	callstack 0
  1605                           
  1606 ;; *************** function ___wmul *****************
  1607 ;; Defined at:
  1608 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  multiplier      2    0[COMRAM] unsigned int 
  1611 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  product         2    4[COMRAM] unsigned int 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  2    0[COMRAM] unsigned int 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, prodl, prodh
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;Total ram usage:        6 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_setMotorPWM
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text7
  1637   01F60A                     __ptext7:
  1638                           	callstack 0
  1639   01F60A                     ___wmul:
  1640                           	callstack 29
  1641   01F60A  5001               	movf	___wmul@multiplier^0,w,c
  1642   01F60C  0203               	mulwf	___wmul@multiplicand^0,c
  1643   01F60E  CFF3 F005          	movff	prodl,___wmul@product
  1644   01F612  CFF4 F006          	movff	prodh,___wmul@product+1
  1645   01F616  5001               	movf	___wmul@multiplier^0,w,c
  1646   01F618  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1647   01F61A  50F3               	movf	243,w,c
  1648   01F61C  2606               	addwf	(___wmul@product+1)^0,f,c
  1649   01F61E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1650   01F620  0203               	mulwf	___wmul@multiplicand^0,c
  1651   01F622  50F3               	movf	243,w,c
  1652   01F624  2606               	addwf	(___wmul@product+1)^0,f,c
  1653   01F626  C005  F001         	movff	___wmul@product,?___wmul
  1654   01F62A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1655   01F62E  0012               	return		;funcret
  1656   01F630                     __end_of___wmul:
  1657                           	callstack 0
  1658                           
  1659 ;; *************** function ___lwdiv *****************
  1660 ;; Defined at:
  1661 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  dividend        2    6[COMRAM] unsigned int 
  1664 ;;  divisor         2    8[COMRAM] unsigned int 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  quotient        2   10[COMRAM] unsigned int 
  1667 ;;  counter         1   12[COMRAM] unsigned char 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  2    6[COMRAM] unsigned int 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2, status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1680 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;Total ram usage:        7 bytes
  1682 ;; Hardware stack levels used: 1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_setMotorPWM
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text8
  1691   01F6B6                     __ptext8:
  1692                           	callstack 0
  1693   01F6B6                     ___lwdiv:
  1694                           	callstack 29
  1695   01F6B6  0E00               	movlw	0
  1696   01F6B8  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1697   01F6BA  0E00               	movlw	0
  1698   01F6BC  6E0B               	movwf	___lwdiv@quotient^0,c
  1699   01F6BE  5009               	movf	___lwdiv@divisor^0,w,c
  1700   01F6C0  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1701   01F6C2  B4D8               	btfsc	status,2,c
  1702   01F6C4  EF66  F0FB         	goto	u161
  1703   01F6C8  EF68  F0FB         	goto	u160
  1704   01F6CC                     u161:
  1705   01F6CC  EF90  F0FB         	goto	l740
  1706   01F6D0                     u160:
  1707   01F6D0  0E01               	movlw	1
  1708   01F6D2  6E0D               	movwf	___lwdiv@counter^0,c
  1709   01F6D4  EF70  F0FB         	goto	l1302
  1710   01F6D8                     l1300:
  1711   01F6D8  90D8               	bcf	status,0,c
  1712   01F6DA  3609               	rlcf	___lwdiv@divisor^0,f,c
  1713   01F6DC  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1714   01F6DE  2A0D               	incf	___lwdiv@counter^0,f,c
  1715   01F6E0                     l1302:
  1716   01F6E0  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1717   01F6E2  EF75  F0FB         	goto	u171
  1718   01F6E6  EF77  F0FB         	goto	u170
  1719   01F6EA                     u171:
  1720   01F6EA  EF6C  F0FB         	goto	l1300
  1721   01F6EE                     u170:
  1722   01F6EE                     l1304:
  1723   01F6EE  90D8               	bcf	status,0,c
  1724   01F6F0  360B               	rlcf	___lwdiv@quotient^0,f,c
  1725   01F6F2  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1726   01F6F4  5009               	movf	___lwdiv@divisor^0,w,c
  1727   01F6F6  5C07               	subwf	___lwdiv@dividend^0,w,c
  1728   01F6F8  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1729   01F6FA  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1730   01F6FC  A0D8               	btfss	status,0,c
  1731   01F6FE  EF83  F0FB         	goto	u181
  1732   01F702  EF85  F0FB         	goto	u180
  1733   01F706                     u181:
  1734   01F706  EF8A  F0FB         	goto	l1312
  1735   01F70A                     u180:
  1736   01F70A  5009               	movf	___lwdiv@divisor^0,w,c
  1737   01F70C  5E07               	subwf	___lwdiv@dividend^0,f,c
  1738   01F70E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1739   01F710  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1740   01F712  800B               	bsf	___lwdiv@quotient^0,0,c
  1741   01F714                     l1312:
  1742   01F714  90D8               	bcf	status,0,c
  1743   01F716  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1744   01F718  3209               	rrcf	___lwdiv@divisor^0,f,c
  1745   01F71A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1746   01F71C  EF77  F0FB         	goto	l1304
  1747   01F720                     l740:
  1748   01F720  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1749   01F724  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1750   01F728  0012               	return		;funcret
  1751   01F72A                     __end_of___lwdiv:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _initDCmotorsPWM *****************
  1755 ;; Defined at:
  1756 ;;		line 6 in file "dc_motor.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text9
  1784   01F7B0                     __ptext9:
  1785                           	callstack 0
  1786   01F7B0                     _initDCmotorsPWM:
  1787                           	callstack 30
  1788   01F7B0                     
  1789                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1790   01F7B0  9485               	bcf	133,2,c	;volatile
  1791                           
  1792                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1793   01F7B2  9885               	bcf	133,4,c	;volatile
  1794                           
  1795                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1796   01F7B4  9E83               	bcf	131,7,c	;volatile
  1797                           
  1798                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1799   01F7B6  9C87               	bcf	135,6,c	;volatile
  1800   01F7B8                     
  1801                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1802   01F7B8  0E05               	movlw	5
  1803   01F7BA  010E               	movlb	14	; () banked
  1804   01F7BC  6F74               	movwf	116,b	;volatile
  1805                           
  1806                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1807   01F7BE  0E06               	movlw	6
  1808   01F7C0  6F76               	movwf	118,b	;volatile
  1809                           
  1810                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1811   01F7C2  0E07               	movlw	7
  1812   01F7C4  6F69               	movwf	105,b	;volatile
  1813                           
  1814                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1815   01F7C6  0E08               	movlw	8
  1816   01F7C8  6F88               	movwf	136,b	;volatile
  1817                           
  1818                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1819   01F7CA  50BD               	movf	189,w,c	;volatile
  1820   01F7CC  0B8F               	andlw	-113
  1821   01F7CE  0940               	iorlw	64
  1822   01F7D0  6EBD               	movwf	189,c	;volatile
  1823                           
  1824                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1825   01F7D2  0EE0               	movlw	-32
  1826   01F7D4  16BE               	andwf	190,f,c	;volatile
  1827                           
  1828                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1829   01F7D6  50BF               	movf	191,w,c	;volatile
  1830   01F7D8  0BF0               	andlw	-16
  1831   01F7DA  0901               	iorlw	1
  1832   01F7DC  6EBF               	movwf	191,c	;volatile
  1833                           
  1834                           ;dc_motor.c: 26:     T2PR=99;
  1835   01F7DE  0E63               	movlw	99
  1836   01F7E0  6EBC               	movwf	188,c	;volatile
  1837   01F7E2                     
  1838                           ; BSR set to: 14
  1839                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1840   01F7E2  8EBD               	bsf	189,7,c	;volatile
  1841                           
  1842                           ;dc_motor.c: 31:     CCPR1H=0;
  1843   01F7E4  0E00               	movlw	0
  1844   01F7E6  6EAA               	movwf	170,c	;volatile
  1845                           
  1846                           ;dc_motor.c: 32:     CCPR2H=0;
  1847   01F7E8  0E00               	movlw	0
  1848   01F7EA  6EA6               	movwf	166,c	;volatile
  1849                           
  1850                           ;dc_motor.c: 33:     CCPR3H=0;
  1851   01F7EC  0E00               	movlw	0
  1852   01F7EE  010F               	movlb	15	; () banked
  1853   01F7F0  6F25               	movwf	37,b	;volatile
  1854                           
  1855                           ;dc_motor.c: 34:     CCPR4H=0;
  1856   01F7F2  0E00               	movlw	0
  1857   01F7F4  6F21               	movwf	33,b	;volatile
  1858                           
  1859                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1860   01F7F6  0EFC               	movlw	-4
  1861   01F7F8  16AD               	andwf	173,f,c	;volatile
  1862                           
  1863                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1864   01F7FA  0EF3               	movlw	-13
  1865   01F7FC  16AD               	andwf	173,f,c	;volatile
  1866                           
  1867                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1868   01F7FE  0ECF               	movlw	-49
  1869   01F800  16AD               	andwf	173,f,c	;volatile
  1870                           
  1871                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1872   01F802  0E3F               	movlw	-193
  1873   01F804  16AD               	andwf	173,f,c	;volatile
  1874   01F806                     
  1875                           ; BSR set to: 15
  1876                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1877   01F806  88AB               	bsf	171,4,c	;volatile
  1878                           
  1879                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1880   01F808  50AB               	movf	171,w,c	;volatile
  1881   01F80A  0BF0               	andlw	-16
  1882   01F80C  090C               	iorlw	12
  1883   01F80E  6EAB               	movwf	171,c	;volatile
  1884   01F810                     
  1885                           ; BSR set to: 15
  1886                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1887   01F810  8EAB               	bsf	171,7,c	;volatile
  1888   01F812                     
  1889                           ; BSR set to: 15
  1890                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1891   01F812  88A7               	bsf	167,4,c	;volatile
  1892                           
  1893                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1894   01F814  50A7               	movf	167,w,c	;volatile
  1895   01F816  0BF0               	andlw	-16
  1896   01F818  090C               	iorlw	12
  1897   01F81A  6EA7               	movwf	167,c	;volatile
  1898   01F81C                     
  1899                           ; BSR set to: 15
  1900                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1901   01F81C  8EA7               	bsf	167,7,c	;volatile
  1902   01F81E                     
  1903                           ; BSR set to: 15
  1904                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1905   01F81E  8926               	bsf	38,4,b	;volatile
  1906                           
  1907                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1908   01F820  5126               	movf	38,w,b	;volatile
  1909   01F822  0BF0               	andlw	-16
  1910   01F824  090C               	iorlw	12
  1911   01F826  6F26               	movwf	38,b	;volatile
  1912   01F828                     
  1913                           ; BSR set to: 15
  1914                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1915   01F828  8F26               	bsf	38,7,b	;volatile
  1916   01F82A                     
  1917                           ; BSR set to: 15
  1918                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1919   01F82A  8922               	bsf	34,4,b	;volatile
  1920                           
  1921                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1922   01F82C  5122               	movf	34,w,b	;volatile
  1923   01F82E  0BF0               	andlw	-16
  1924   01F830  090C               	iorlw	12
  1925   01F832  6F22               	movwf	34,b	;volatile
  1926   01F834                     
  1927                           ; BSR set to: 15
  1928                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1929   01F834  8F22               	bsf	34,7,b	;volatile
  1930   01F836                     
  1931                           ; BSR set to: 15
  1932   01F836  0012               	return		;funcret
  1933   01F838                     __end_of_initDCmotorsPWM:
  1934                           	callstack 0
  1935                           
  1936 ;; *************** function _color_click_init *****************
  1937 ;; Defined at:
  1938 ;;		line 5 in file "color.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1956 ;;Total ram usage:        1 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; Hardware stack levels required when called: 3
  1959 ;; This function calls:
  1960 ;;		_I2C_2_Master_Init
  1961 ;;		_color_writetoaddr
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text10
  1968   01F682                     __ptext10:
  1969                           	callstack 0
  1970   01F682                     _color_click_init:
  1971                           	callstack 27
  1972   01F682                     
  1973                           ;color.c: 8:     I2C_2_Master_Init();
  1974   01F682  EC2C  F0FB         	call	_I2C_2_Master_Init	;wreg free
  1975   01F686                     
  1976                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1977   01F686  0E01               	movlw	1
  1978   01F688  6E03               	movwf	color_writetoaddr@value^0,c
  1979   01F68A  0E00               	movlw	0
  1980   01F68C  ECE4  F0FA         	call	_color_writetoaddr
  1981   01F690                     
  1982                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1983   01F690  0E3F               	movlw	63
  1984   01F692  6E05               	movwf	??_color_click_init^0,c
  1985   01F694  0E55               	movlw	85
  1986   01F696                     u377:
  1987   01F696  2EE8               	decfsz	wreg,f,c
  1988   01F698  D7FE               	bra	u377
  1989   01F69A  2E05               	decfsz	??_color_click_init^0,f,c
  1990   01F69C  D7FC               	bra	u377
  1991   01F69E  F000               	nop	
  1992   01F6A0                     
  1993                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1994   01F6A0  0E03               	movlw	3
  1995   01F6A2  6E03               	movwf	color_writetoaddr@value^0,c
  1996   01F6A4  0E00               	movlw	0
  1997   01F6A6  ECE4  F0FA         	call	_color_writetoaddr
  1998   01F6AA                     
  1999                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2000   01F6AA  0ED5               	movlw	213
  2001   01F6AC  6E03               	movwf	color_writetoaddr@value^0,c
  2002   01F6AE  0E01               	movlw	1
  2003   01F6B0  ECE4  F0FA         	call	_color_writetoaddr
  2004   01F6B4  0012               	return		;funcret
  2005   01F6B6                     __end_of_color_click_init:
  2006                           	callstack 0
  2007                           
  2008 ;; *************** function _color_writetoaddr *****************
  2009 ;; Defined at:
  2010 ;;		line 21 in file "color.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  address         1    wreg     unsigned char 
  2013 ;;  value           1    2[COMRAM] unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  address         1    3[COMRAM] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2025 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;Total ram usage:        2 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; Hardware stack levels required when called: 2
  2032 ;; This function calls:
  2033 ;;		_I2C_2_Master_Start
  2034 ;;		_I2C_2_Master_Stop
  2035 ;;		_I2C_2_Master_Write
  2036 ;; This function is called by:
  2037 ;;		_color_click_init
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text11
  2042   01F5C8                     __ptext11:
  2043                           	callstack 0
  2044   01F5C8                     _color_writetoaddr:
  2045                           	callstack 27
  2046                           
  2047                           ;incstack = 0
  2048                           ;color_writetoaddr@address stored from wreg
  2049   01F5C8  6E04               	movwf	color_writetoaddr@address^0,c
  2050   01F5CA                     
  2051                           ;color.c: 22:     I2C_2_Master_Start();
  2052   01F5CA  ECD4  F0FA         	call	_I2C_2_Master_Start	;wreg free
  2053                           
  2054                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2055   01F5CE  0E52               	movlw	82
  2056   01F5D0  ECDE  F0FA         	call	_I2C_2_Master_Write
  2057                           
  2058                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2059   01F5D4  5004               	movf	color_writetoaddr@address^0,w,c
  2060   01F5D6  0980               	iorlw	128
  2061   01F5D8  ECDE  F0FA         	call	_I2C_2_Master_Write
  2062                           
  2063                           ;color.c: 25:     I2C_2_Master_Write(value);
  2064   01F5DC  5003               	movf	color_writetoaddr@value^0,w,c
  2065   01F5DE  ECDE  F0FA         	call	_I2C_2_Master_Write
  2066                           
  2067                           ;color.c: 26:     I2C_2_Master_Stop();
  2068   01F5E2  ECD9  F0FA         	call	_I2C_2_Master_Stop	;wreg free
  2069   01F5E6  0012               	return		;funcret
  2070   01F5E8                     __end_of_color_writetoaddr:
  2071                           	callstack 0
  2072                           
  2073 ;; *************** function _I2C_2_Master_Write *****************
  2074 ;; Defined at:
  2075 ;;		line 45 in file "i2c.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  data_byte       1    wreg     unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  data_byte       1    1[COMRAM] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2093 ;;Total ram usage:        1 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 1
  2096 ;; This function calls:
  2097 ;;		_I2C_2_Master_Idle
  2098 ;; This function is called by:
  2099 ;;		_color_writetoaddr
  2100 ;;		_color_read_Red
  2101 ;;		_color_read_Green
  2102 ;;		_color_read_Blue
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text12
  2107   01F5BC                     __ptext12:
  2108                           	callstack 0
  2109   01F5BC                     _I2C_2_Master_Write:
  2110                           	callstack 27
  2111                           
  2112                           ;incstack = 0
  2113                           ;I2C_2_Master_Write@data_byte stored from wreg
  2114   01F5BC  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  2115   01F5BE                     
  2116                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2117   01F5BE  EC18  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2118   01F5C2                     
  2119                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2120   01F5C2  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2121   01F5C6  0012               	return		;funcret
  2122   01F5C8                     __end_of_I2C_2_Master_Write:
  2123                           	callstack 0
  2124                           
  2125 ;; *************** function _I2C_2_Master_Stop *****************
  2126 ;; Defined at:
  2127 ;;		line 39 in file "i2c.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2145 ;;Total ram usage:        0 bytes
  2146 ;; Hardware stack levels used: 1
  2147 ;; Hardware stack levels required when called: 1
  2148 ;; This function calls:
  2149 ;;		_I2C_2_Master_Idle
  2150 ;; This function is called by:
  2151 ;;		_color_writetoaddr
  2152 ;;		_color_read_Red
  2153 ;;		_color_read_Green
  2154 ;;		_color_read_Blue
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text13
  2159   01F5B2                     __ptext13:
  2160                           	callstack 0
  2161   01F5B2                     _I2C_2_Master_Stop:
  2162                           	callstack 27
  2163   01F5B2                     
  2164                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2165   01F5B2  EC18  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2166   01F5B6                     
  2167                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2168   01F5B6  010E               	movlb	14	; () banked
  2169   01F5B8  85DA               	bsf	218,2,b	;volatile
  2170   01F5BA                     
  2171                           ; BSR set to: 14
  2172   01F5BA  0012               	return		;funcret
  2173   01F5BC                     __end_of_I2C_2_Master_Stop:
  2174                           	callstack 0
  2175                           
  2176 ;; *************** function _I2C_2_Master_Start *****************
  2177 ;; Defined at:
  2178 ;;		line 27 in file "i2c.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg, status,2, status,0, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2196 ;;Total ram usage:        0 bytes
  2197 ;; Hardware stack levels used: 1
  2198 ;; Hardware stack levels required when called: 1
  2199 ;; This function calls:
  2200 ;;		_I2C_2_Master_Idle
  2201 ;; This function is called by:
  2202 ;;		_color_writetoaddr
  2203 ;;		_color_read_Red
  2204 ;;		_color_read_Green
  2205 ;;		_color_read_Blue
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text14
  2210   01F5A8                     __ptext14:
  2211                           	callstack 0
  2212   01F5A8                     _I2C_2_Master_Start:
  2213                           	callstack 27
  2214   01F5A8                     
  2215                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2216   01F5A8  EC18  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2217   01F5AC                     
  2218                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2219   01F5AC  010E               	movlb	14	; () banked
  2220   01F5AE  81DA               	bsf	218,0,b	;volatile
  2221   01F5B0                     
  2222                           ; BSR set to: 14
  2223   01F5B0  0012               	return		;funcret
  2224   01F5B2                     __end_of_I2C_2_Master_Start:
  2225                           	callstack 0
  2226                           
  2227 ;; *************** function _I2C_2_Master_Idle *****************
  2228 ;; Defined at:
  2229 ;;		line 22 in file "i2c.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2246 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;Total ram usage:        1 bytes
  2248 ;; Hardware stack levels used: 1
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_I2C_2_Master_Start
  2253 ;;		_I2C_2_Master_Stop
  2254 ;;		_I2C_2_Master_Write
  2255 ;;		_I2C_2_Master_RepStart
  2256 ;;		_I2C_2_Master_Read
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text15
  2261   01F630                     __ptext15:
  2262                           	callstack 0
  2263   01F630                     _I2C_2_Master_Idle:
  2264                           	callstack 27
  2265   01F630                     l142:
  2266   01F630  010E               	movlb	14	; () banked
  2267   01F632  B5D8               	btfsc	216,2,b	;volatile
  2268   01F634  EF1E  F0FB         	goto	u11
  2269   01F638  EF20  F0FB         	goto	u10
  2270   01F63C                     u11:
  2271   01F63C  EF18  F0FB         	goto	l142
  2272   01F640                     u10:
  2273   01F640                     
  2274                           ; BSR set to: 14
  2275   01F640  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2276   01F644  0E1F               	movlw	31
  2277   01F646  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2278   01F648  A4D8               	btfss	status,2,c
  2279   01F64A  EF29  F0FB         	goto	u21
  2280   01F64E  EF2B  F0FB         	goto	u20
  2281   01F652                     u21:
  2282   01F652  EF18  F0FB         	goto	l142
  2283   01F656                     u20:
  2284   01F656                     
  2285                           ; BSR set to: 14
  2286   01F656  0012               	return		;funcret
  2287   01F658                     __end_of_I2C_2_Master_Idle:
  2288                           	callstack 0
  2289                           
  2290 ;; *************** function _I2C_2_Master_Init *****************
  2291 ;; Defined at:
  2292 ;;		line 4 in file "i2c.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2310 ;;Total ram usage:        0 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_color_click_init
  2316 ;;		_main
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text16
  2321   01F658                     __ptext16:
  2322                           	callstack 0
  2323   01F658                     _I2C_2_Master_Init:
  2324                           	callstack 29
  2325   01F658                     
  2326                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2327   01F658  010E               	movlb	14	; () banked
  2328   01F65A  51D9               	movf	217,w,b	;volatile
  2329   01F65C  0BF0               	andlw	-16
  2330   01F65E  0908               	iorlw	8
  2331   01F660  6FD9               	movwf	217,b	;volatile
  2332   01F662                     
  2333                           ; BSR set to: 14
  2334                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2335   01F662  8BD9               	bsf	217,5,b	;volatile
  2336                           
  2337                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2338   01F664  0E9F               	movlw	159
  2339   01F666  6FD6               	movwf	214,b	;volatile
  2340   01F668                     
  2341                           ; BSR set to: 14
  2342                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2343   01F668  8A84               	bsf	132,5,c	;volatile
  2344   01F66A                     
  2345                           ; BSR set to: 14
  2346                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2347   01F66A  8C84               	bsf	132,6,c	;volatile
  2348   01F66C                     
  2349                           ; BSR set to: 14
  2350                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2351   01F66C  9BA7               	bcf	167,5,b	;volatile
  2352   01F66E                     
  2353                           ; BSR set to: 14
  2354                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2355   01F66E  9DA7               	bcf	167,6,b	;volatile
  2356                           
  2357                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2358   01F670  0E1D               	movlw	29
  2359   01F672  6F1D               	movwf	29,b	;volatile
  2360                           
  2361                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2362   01F674  0E1E               	movlw	30
  2363   01F676  6F1C               	movwf	28,b	;volatile
  2364                           
  2365                           ;i2c.c: 18:   RD5PPS=0x1C;
  2366   01F678  0E1C               	movlw	28
  2367   01F67A  6F6F               	movwf	111,b	;volatile
  2368                           
  2369                           ;i2c.c: 19:   RD6PPS=0x1B;
  2370   01F67C  0E1B               	movlw	27
  2371   01F67E  6F70               	movwf	112,b	;volatile
  2372   01F680                     
  2373                           ; BSR set to: 14
  2374   01F680  0012               	return		;funcret
  2375   01F682                     __end_of_I2C_2_Master_Init:
  2376                           	callstack 0
  2377                           
  2378 ;; *************** function _LEDSon_init *****************
  2379 ;; Defined at:
  2380 ;;		line 18 in file "LEDsOn.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		None
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used: 1
  2400 ;; This function calls:
  2401 ;;		Nothing
  2402 ;; This function is called by:
  2403 ;;		_main
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text17
  2408   01F5E8                     __ptext17:
  2409                           	callstack 0
  2410   01F5E8                     _LEDSon_init:
  2411                           	callstack 30
  2412   01F5E8                     
  2413                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  2414   01F5E8  9288               	bcf	136,1,c	;volatile
  2415                           
  2416                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  2417   01F5EA  9088               	bcf	136,0,c	;volatile
  2418                           
  2419                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  2420   01F5EC  9884               	bcf	132,4,c	;volatile
  2421                           
  2422                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  2423   01F5EE  9684               	bcf	132,3,c	;volatile
  2424                           
  2425                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  2426   01F5F0  9086               	bcf	134,0,c	;volatile
  2427                           
  2428                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  2429   01F5F2  9287               	bcf	135,1,c	;volatile
  2430                           
  2431                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  2432   01F5F4  9E86               	bcf	134,7,c	;volatile
  2433                           
  2434                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  2435   01F5F6  9881               	bcf	129,4,c	;volatile
  2436                           
  2437                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  2438   01F5F8  8E7E               	bsf	126,7,c	;volatile
  2439                           
  2440                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  2441   01F5FA  827F               	bsf	127,1,c	;volatile
  2442                           
  2443                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  2444   01F5FC  8879               	bsf	121,4,c	;volatile
  2445                           
  2446                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  2447   01F5FE  987C               	bcf	124,4,c	;volatile
  2448                           
  2449                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  2450   01F600  9280               	bcf	128,1,c	;volatile
  2451                           
  2452                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  2453   01F602  907E               	bcf	126,0,c	;volatile
  2454                           
  2455                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  2456   01F604  9080               	bcf	128,0,c	;volatile
  2457                           
  2458                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  2459   01F606  967C               	bcf	124,3,c	;volatile
  2460   01F608  0012               	return		;funcret
  2461   01F60A                     __end_of_LEDSon_init:
  2462                           	callstack 0
  2463   000000                     
  2464                           	psect	rparam
  2465   000000                     
  2466                           	psect	idloc
  2467                           
  2468                           ;Config register IDLOC0 @ 0x200000
  2469                           ;	unspecified, using default values
  2470   200000                     	org	2097152
  2471   200000  0FFF               	dw	4095
  2472                           
  2473                           ;Config register IDLOC1 @ 0x200002
  2474                           ;	unspecified, using default values
  2475   200002                     	org	2097154
  2476   200002  0FFF               	dw	4095
  2477                           
  2478                           ;Config register IDLOC2 @ 0x200004
  2479                           ;	unspecified, using default values
  2480   200004                     	org	2097156
  2481   200004  0FFF               	dw	4095
  2482                           
  2483                           ;Config register IDLOC3 @ 0x200006
  2484                           ;	unspecified, using default values
  2485   200006                     	org	2097158
  2486   200006  0FFF               	dw	4095
  2487                           
  2488                           ;Config register IDLOC4 @ 0x200008
  2489                           ;	unspecified, using default values
  2490   200008                     	org	2097160
  2491   200008  0FFF               	dw	4095
  2492                           
  2493                           ;Config register IDLOC5 @ 0x20000A
  2494                           ;	unspecified, using default values
  2495   20000A                     	org	2097162
  2496   20000A  0FFF               	dw	4095
  2497                           
  2498                           ;Config register IDLOC6 @ 0x20000C
  2499                           ;	unspecified, using default values
  2500   20000C                     	org	2097164
  2501   20000C  0FFF               	dw	4095
  2502                           
  2503                           ;Config register IDLOC7 @ 0x20000E
  2504                           ;	unspecified, using default values
  2505   20000E                     	org	2097166
  2506   20000E  0FFF               	dw	4095
  2507                           
  2508                           	psect	config
  2509                           
  2510                           ;Config register CONFIG1L @ 0x300000
  2511                           ;	External Oscillator mode Selection bits
  2512                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2513                           ;	Power-up default value for COSC bits
  2514                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2515   300000                     	org	3145728
  2516   300000  AA                 	db	170
  2517                           
  2518                           ;Config register CONFIG1H @ 0x300001
  2519                           ;	unspecified, using default values
  2520                           ;	Clock Out Enable bit
  2521                           ;	CLKOUTEN = 0x1, unprogrammed default
  2522                           ;	Clock Switch Enable bit
  2523                           ;	CSWEN = 0x1, unprogrammed default
  2524                           ;	Fail-Safe Clock Monitor Enable bit
  2525                           ;	FCMEN = 0x1, unprogrammed default
  2526   300001                     	org	3145729
  2527   300001  FF                 	db	255
  2528                           
  2529                           ;Config register CONFIG2L @ 0x300002
  2530                           ;	unspecified, using default values
  2531                           ;	Master Clear Enable bit
  2532                           ;	MCLRE = 0x1, unprogrammed default
  2533                           ;	Power-up Timer Enable bit
  2534                           ;	PWRTE = 0x1, unprogrammed default
  2535                           ;	Low-power BOR enable bit
  2536                           ;	LPBOREN = 0x1, unprogrammed default
  2537                           ;	Brown-out Reset Enable bits
  2538                           ;	BOREN = 0x3, unprogrammed default
  2539   300002                     	org	3145730
  2540   300002  FF                 	db	255
  2541                           
  2542                           ;Config register CONFIG2H @ 0x300003
  2543                           ;	unspecified, using default values
  2544                           ;	Brown Out Reset Voltage selection bits
  2545                           ;	BORV = 0x3, unprogrammed default
  2546                           ;	ZCD Disable bit
  2547                           ;	ZCD = 0x1, unprogrammed default
  2548                           ;	PPSLOCK bit One-Way Set Enable bit
  2549                           ;	PPS1WAY = 0x1, unprogrammed default
  2550                           ;	Stack Full/Underflow Reset Enable bit
  2551                           ;	STVREN = 0x1, unprogrammed default
  2552                           ;	Debugger Enable bit
  2553                           ;	DEBUG = 0x1, unprogrammed default
  2554                           ;	Extended Instruction Set Enable bit
  2555                           ;	XINST = 0x1, unprogrammed default
  2556   300003                     	org	3145731
  2557   300003  FF                 	db	255
  2558                           
  2559                           ;Config register CONFIG3L @ 0x300004
  2560                           ;	WDT Period Select bits
  2561                           ;	WDTCPS = 0x1F, unprogrammed default
  2562                           ;	WDT operating mode
  2563                           ;	WDTE = OFF, WDT Disabled
  2564   300004                     	org	3145732
  2565   300004  9F                 	db	159
  2566                           
  2567                           ;Config register CONFIG3H @ 0x300005
  2568                           ;	unspecified, using default values
  2569                           ;	WDT Window Select bits
  2570                           ;	WDTCWS = 0x7, unprogrammed default
  2571                           ;	WDT input clock selector
  2572                           ;	WDTCCS = 0x7, unprogrammed default
  2573   300005                     	org	3145733
  2574   300005  FF                 	db	255
  2575                           
  2576                           ;Config register CONFIG4L @ 0x300006
  2577                           ;	unspecified, using default values
  2578                           ;	Write Protection Block 0
  2579                           ;	WRT0 = 0x1, unprogrammed default
  2580                           ;	Write Protection Block 1
  2581                           ;	WRT1 = 0x1, unprogrammed default
  2582                           ;	Write Protection Block 2
  2583                           ;	WRT2 = 0x1, unprogrammed default
  2584                           ;	Write Protection Block 3
  2585                           ;	WRT3 = 0x1, unprogrammed default
  2586                           ;	Write Protection Block 3
  2587                           ;	WRT4 = 0x1, unprogrammed default
  2588                           ;	Write Protection Block 3
  2589                           ;	WRT5 = 0x1, unprogrammed default
  2590                           ;	Write Protection Block 3
  2591                           ;	WRT6 = 0x1, unprogrammed default
  2592                           ;	Write Protection Block 3
  2593                           ;	WRT7 = 0x1, unprogrammed default
  2594   300006                     	org	3145734
  2595   300006  FF                 	db	255
  2596                           
  2597                           ;Config register CONFIG4H @ 0x300007
  2598                           ;	unspecified, using default values
  2599                           ;	Configuration Register Write Protection bit
  2600                           ;	WRTC = 0x1, unprogrammed default
  2601                           ;	Boot Block Write Protection bit
  2602                           ;	WRTB = 0x1, unprogrammed default
  2603                           ;	Data EEPROM Write Protection bit
  2604                           ;	WRTD = 0x1, unprogrammed default
  2605                           ;	Scanner Enable bit
  2606                           ;	SCANE = 0x1, unprogrammed default
  2607                           ;	Low Voltage Programming Enable bit
  2608                           ;	LVP = 0x1, unprogrammed default
  2609   300007                     	org	3145735
  2610   300007  FF                 	db	255
  2611                           
  2612                           ;Config register CONFIG5L @ 0x300008
  2613                           ;	unspecified, using default values
  2614                           ;	UserNVM Program Memory Code Protection bit
  2615                           ;	CP = 0x1, unprogrammed default
  2616                           ;	DataNVM Memory Code Protection bit
  2617                           ;	CPD = 0x1, unprogrammed default
  2618   300008                     	org	3145736
  2619   300008  FF                 	db	255
  2620                           
  2621                           ;Config register CONFIG5H @ 0x300009
  2622                           ;	unspecified, using default values
  2623   300009                     	org	3145737
  2624   300009  FF                 	db	255
  2625                           
  2626                           ;Config register CONFIG6L @ 0x30000A
  2627                           ;	unspecified, using default values
  2628                           ;	Table Read Protection Block 0
  2629                           ;	EBTR0 = 0x1, unprogrammed default
  2630                           ;	Table Read Protection Block 1
  2631                           ;	EBTR1 = 0x1, unprogrammed default
  2632                           ;	Table Read Protection Block 2
  2633                           ;	EBTR2 = 0x1, unprogrammed default
  2634                           ;	Table Read Protection Block 3
  2635                           ;	EBTR3 = 0x1, unprogrammed default
  2636                           ;	Table Read Protection Block 4
  2637                           ;	EBTR4 = 0x1, unprogrammed default
  2638                           ;	Table Read Protection Block 5
  2639                           ;	EBTR5 = 0x1, unprogrammed default
  2640                           ;	Table Read Protection Block 6
  2641                           ;	EBTR6 = 0x1, unprogrammed default
  2642                           ;	Table Read Protection Block 7
  2643                           ;	EBTR7 = 0x1, unprogrammed default
  2644   30000A                     	org	3145738
  2645   30000A  FF                 	db	255
  2646                           
  2647                           ;Config register CONFIG6H @ 0x30000B
  2648                           ;	unspecified, using default values
  2649                           ;	Boot Block Table Read Protection bit
  2650                           ;	EBTRB = 0x1, unprogrammed default
  2651   30000B                     	org	3145739
  2652   30000B  FF                 	db	255
  2653                           tosu	equ	0xFFF
  2654                           tosh	equ	0xFFE
  2655                           tosl	equ	0xFFD
  2656                           stkptr	equ	0xFFC
  2657                           pclatu	equ	0xFFB
  2658                           pclath	equ	0xFFA
  2659                           pcl	equ	0xFF9
  2660                           tblptru	equ	0xFF8
  2661                           tblptrh	equ	0xFF7
  2662                           tblptrl	equ	0xFF6
  2663                           tablat	equ	0xFF5
  2664                           prodh	equ	0xFF4
  2665                           prodl	equ	0xFF3
  2666                           indf0	equ	0xFEF
  2667                           postinc0	equ	0xFEE
  2668                           postdec0	equ	0xFED
  2669                           preinc0	equ	0xFEC
  2670                           plusw0	equ	0xFEB
  2671                           fsr0h	equ	0xFEA
  2672                           fsr0l	equ	0xFE9
  2673                           wreg	equ	0xFE8
  2674                           indf1	equ	0xFE7
  2675                           postinc1	equ	0xFE6
  2676                           postdec1	equ	0xFE5
  2677                           preinc1	equ	0xFE4
  2678                           plusw1	equ	0xFE3
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           bsr	equ	0xFE0
  2682                           indf2	equ	0xFDF
  2683                           postinc2	equ	0xFDE
  2684                           postdec2	equ	0xFDD
  2685                           preinc2	equ	0xFDC
  2686                           plusw2	equ	0xFDB
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      56
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    respond_to_card@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    respond_to_card@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S523DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S523DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_respond_to_card
    _respond_to_card->_turnLeft45
    _respond_to_card->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0   19460
                                             34 COMRAM    22    22      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                   _color_click_init
                    _initDCmotorsPWM
                    _respond_to_card
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _respond_to_card                                      7     3      4   16736
                                             27 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (2) _turnRight45                                          8     4      4    3875
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft45                                           8     4      4    3267
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    5153
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseFullSpeed                                     7     3      4    2507
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    1981
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _respond_to_card
     _reverseFullSpeed
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
     _turnLeft45
       _setMotorPWM
     _turnRight45
       _setMotorPWM
   _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     38      38       1       58.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhhh      1      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      2      0       0      39        0.0%
BITBIGSFRllhhhh     52      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      41        0.0%
BITBIGSFRllhhhl     46      0       0      42        0.0%
BITBIGSFRllhhhl      1      0       0      43        0.0%
BITBIGSFRllhhhl     2D      0       0      44        0.0%
BITBIGSFRllhhhl     1E      0       0      45        0.0%
BITBIGSFRllhhl      11      0       0      46        0.0%
BITBIGSFRllhl        1      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      48        0.0%
BITBIGSFRlllhl       5      0       0      49        0.0%
BITBIGSFRllllh      4B      0       0      50        0.0%
BITBIGSFRlllll      2D      0       0      51        0.0%
ABS                  0      0       0      52        0.0%
BIGRAM             DE9      0       0      53        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 01 09:56:35 2022

                         l22 F5E6                           l19 F6B4                           l83 FC3C  
                         l76 F836                           l92 F7AE                           l97 F970  
                         u10 F640                           u11 F63C                           u20 F656  
                         u21 F652          ___wmul@multiplicand 0003            ??_respond_to_card 0020  
                        l102 FA1E                          l112 F8C2                          l221 F608  
                        l142 F630                          l145 F656                          l154 F5BA  
                        l139 F680                          l148 F5B0                          l157 F5C6  
                        l246 FFFE                          l249 F62E                          l740 F720  
                        l922 F630                          l747 F728                          l924 F640  
                        l960 F5C2                          l954 F5A8                          l962 F5B2  
                        l956 F5AC                          l964 F5B6                          l990 F66C  
                        l982 F658                          l958 F5BE                          l992 F66E  
                        l984 F662                          l986 F668                          l988 F66A  
                        u200 FBB8                          u201 FBB4                          u210 F76C  
                        u211 F768                          u220 F7AE                          u221 F7AA  
                        u230 F958                          u231 F954                          u160 F6D0  
                        u240 FA06                          u161 F6CC                          u241 FA02  
                        u170 F6EE                          u250 F8C2                          u171 F6EA  
                        u251 F8BE                          u307 F9BC                          u180 F70A  
                        u181 F706                          u317 FA10                          u190 FAEE  
                        u191 FAEA                          u327 F90E                          u337 F962  
                        u347 F740                          u357 F782                          u277 FABA  
                        u367 F896                          u287 FDAE                          u377 F696  
                        u297 FE42                          wreg 000FE8                         l1100 F81C  
                       l1110 F5E8                         l1102 F81E                         l1104 F828  
                       l1106 F82A                         l1108 F834                         l1300 F6D8  
                       l1310 F712                         l1302 F6E0                         l1312 F714  
                       l1304 F6EE                         l1320 FB42                         l1090 F7B8  
                       l1314 F71A                         l1306 F6F4                         l1330 FBFC  
                       l1322 FB56                         l1410 F890                         l1332 F5CA  
                       l1420 F690                         l1092 F7E2                         l1308 F70A  
                       l1324 FB5A                         l1316 FAD2                         l1412 F89E  
                       l1404 F860                         l1340 F748                         l1500 FA34  
                       l1422 F6A0                         l1094 F806                         l1326 FB9C  
                       l1318 FAEE                         l1414 F8A6                         l1406 F878  
                       l1350 F796                         l1342 F754                         l1334 F72A  
                       l1430 FC98                         l1510 FA50                         l1502 FA38  
                       l1424 F6AA                         l1416 F682                         l1096 F810  
                       l1088 F7B0                         l1328 FBB8                         l1408 F884  
                       l1344 F770                         l1336 F72E                         l1360 F8EC  
                       l1352 F8C4                         l1440 FDD0                         l1432 FCEC  
                       l1520 FA78                         l1512 FA56                         l1504 FA3C  
                       l1418 F686                         l1098 F812                         l1290 F626  
                       l1346 F77C                         l1338 F73A                         l1370 F93C  
                       l1362 F904                         l1354 F8E4                         l1450 FE38  
                       l1442 FDE4                         l1434 FD90                         l1426 FC40  
                       l1530 FA90                         l1522 FA84                         l1514 FA5A  
                       l1506 FA40                         l1348 F78A                         l1372 F958  
                       l1364 F91C                         l1452 FE50                         l1444 FDF8  
                       l1436 FDA4                         l1428 FC44                         l1540 FA9A  
                       l1532 FA90                         l1524 FA90                         l1516 FA5E  
                       l1508 FA48                         l1294 F6B6                         l1366 F928  
                       l1390 F9E2                         l1382 F99A                         l1374 F972  
                       l1462 FEA4                         l1454 FE64                         l1446 FE0C  
                       l1438 FDBC                         l1542 FAB0                         l1534 FA94  
                       l1526 FA90                         l1518 FA72                         l1296 F6BE  
                       l1288 F60A                         l1368 F934                         l1392 F9EA  
                       l1384 F9B2                         l1376 F992                         l1464 FF20  
                       l1456 FE78                         l1448 FE24                         l1544 FAC8  
                       l1536 FA96                         l1528 FA90                         l1298 F6D0  
                       l1394 FA06                         l1386 F9CA                         l1458 FE8C  
                       l1538 FA98                         l1490 FA20                         l1396 F838  
                       l1388 F9D6                         l1468 FF9C                         l1492 FA24  
                       l1398 F858                         l1566 FFB0                         l1494 FA28  
                       l1496 FA2C                         l1498 FA30                 ?_LEDSon_init 0001  
                       _T2PR 000FBC                         _main FA20                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         _stop F72A  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___param_bank 000000                  _turnRight45 F972                        ?_main 0001  
                      ?_stop 0014              __end_of___lwdiv F72A   __end_of_I2C_2_Master_Start F5B2  
 __end_of_I2C_2_Master_Write F5C8                        status 000FD8              __initialization F5A2  
               __end_of_main FAD2                 __end_of_stop F7B0                       ??_main 0023  
                     ??_stop 0018                __activetblptr 000003                 ?_setMotorPWM 000E  
                     _CCPR1H 000FAA                       _CCPR2H 000FA6                       _CCPR3H 000F25  
                     _CCPR4H 000F21                       _RE2PPS 000E74                       _RD5PPS 000E6F  
                     _RC7PPS 000E69                       _RD6PPS 000E70                       _RE4PPS 000E76  
                     _RG6PPS 000E88     __end_of_color_click_init F6B6                 _CCPTMRS0bits 000FAD  
                     ___wmul F60A                    ??___lwdiv 000B                       isa$std 000001  
                     stop@mL 0014                       stop@mR 0016            ??_initDCmotorsPWM 0001  
                 __accesstop 0060      __end_of__initialization F5A2                ___rparam_used 000001  
            _respond_to_card FC3E               __pcstackCOMRAM 0001             _reverseFullSpeed F838  
          _color_writetoaddr F5C8                 _T2CLKCONbits 000FBF           ?_color_writetoaddr 0003  
                    ?___wmul 0001                 ?_turnRight45 0014          ??_color_writetoaddr 0004  
                    _SSP2ADD 000ED6                      _SSP2BUF 000ED5      __end_of_respond_to_card 0000  
     color_writetoaddr@value 0003    __end_of_color_writetoaddr F5E8            respond_to_card@mL 001C  
          respond_to_card@mR 001E           _I2C_2_Master_Start F5A8           _I2C_2_Master_Write F5BC  
                    __Hparam 0000                      __Lparam 0000            reverseFullSpeed@i 0019  
        ?_I2C_2_Master_Start 0001                      ___lwdiv F6B6          ?_I2C_2_Master_Write 0001  
               turnLeft45@mL 0014                 turnLeft45@mR 0016                      __pcinit F5A2  
                    __ramtop 0E00                      __ptext0 FA20                      __ptext1 FC3E  
                    __ptext2 F972                      __ptext3 F8C4                      __ptext4 F72A  
                    __ptext5 F838                      __ptext6 FAD2                      __ptext7 F60A  
                    __ptext8 F6B6                      __ptext9 F7B0                    _T2CONbits 000FBD  
                  _T2HLTbits 000FBE         ??_I2C_2_Master_Start 0002         ??_I2C_2_Master_Write 0002  
       end_of_initialization F5A2            ?_color_click_init 0001                 turnRight45@i 001A  
         ??_color_click_init 0005                      postdec2 000FDD                      postinc2 000FDE  
            _initDCmotorsPWM F7B0           setMotorPWM@negDuty 0013                    _TRISAbits 000F81  
         setMotorPWM@posDuty 0012                    _TRISCbits 000F83                    _TRISDbits 000F84  
                  _TRISEbits 000F85                    _TRISFbits 000F86                    _TRISGbits 000F87  
                  _TRISHbits 000F88     __end_of_reverseFullSpeed F8C4     color_writetoaddr@address 0004  
           ?_respond_to_card 001C                  _CCP1CONbits 000FAB                  _CCP2CONbits 000FA7  
                _CCP3CONbits 000F26                  _CCP4CONbits 000F22                   main@motorL 0027  
                 main@motorR 0030                   _turnLeft45 F8C4               __end_of___wmul F630  
        start_initialization F5A2          respond_to_card@card 0022                ??_LEDSon_init 0001  
    __end_of_initDCmotorsPWM F838                     ??___wmul 0005          __end_of_LEDSon_init F60A  
           ___lwdiv@dividend 0007                  ?_turnLeft45 0014                     ?___lwdiv 0007  
          _I2C_2_Master_Idle F630            _I2C_2_Master_Init F658            _I2C_2_Master_Stop F5B2  
         ?_I2C_2_Master_Idle 0001           ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0010  
         ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B                  turnLeft45@i 001A  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
                   _LATAbits 000F79          ??_I2C_2_Master_Stop 0002                     _LATDbits 000F7C  
                   _LATFbits 000F7E                     _LATGbits 000F7F                     _LATHbits 000F80  
           ?_initDCmotorsPWM 0001                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle F658    __end_of_I2C_2_Master_Init F682            ___wmul@multiplier 0001  
  __end_of_I2C_2_Master_Stop F5BC                 setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002  
          ?_reverseFullSpeed 0014                  _LEDSon_init F5E8           ??_reverseFullSpeed 0018  
        __end_of_setMotorPWM FC3E                     __Hrparam 0000                     __Lrparam 0000  
         reverseFullSpeed@mL 0014           reverseFullSpeed@mR 0016                   _ANSELDbits 000EA7  
            ___lwdiv@divisor 0009              ___lwdiv@counter 000D                     __ptext10 F682  
                   __ptext11 F5C8                     __ptext12 F5BC                     __ptext13 F5B2  
                   __ptext14 F5A8                     __ptext15 F630                     __ptext16 F658  
                   __ptext17 F5E8                 _SSP2CON1bits 000ED9                 _SSP2CON2bits 000EDA  
                   isa$xinst 000000                ??_turnRight45 0018                     main@card 0025  
                _setMotorPWM FAD2                turnRight45@mL 0014                turnRight45@mR 0016  
               ??_turnLeft45 0018             _color_click_init F682                   _SSP2DATPPS 000E1D  
                 _SSP2CLKPPS 000E1C          __end_of_turnRight45 FA20           __end_of_turnLeft45 F972  
               main@PWMcycle 0026  
