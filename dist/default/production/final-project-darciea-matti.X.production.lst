

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 20:49:56 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74   000000                     
    75                           ; Version 2.35
    76                           ; Generated 05/05/2021 GMT
    77                           ; 
    78                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution. Publication is not required when
    92                           ;        this file is used in an embedded application.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F67K40 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110   000000                     _TRISBbits	set	3970
   111   000000                     _TX4REG	set	3812
   112   000000                     _RC4STAbits	set	3815
   113   000000                     _SP4BRGH	set	3814
   114   000000                     _LATHbits	set	3968
   115   000000                     _LATGbits	set	3967
   116   000000                     _TRISAbits	set	3969
   117   000000                     _TRISFbits	set	3974
   118   000000                     _TRISDbits	set	3972
   119   000000                     _TRISGbits	set	3975
   120   000000                     _SSP2CON2bits	set	3802
   121   000000                     _INT1PPS	set	3569
   122   000000                     _RX4PPS	set	3605
   123   000000                     _SSP2CLKPPS	set	3612
   124   000000                     _SSP2DATPPS	set	3613
   125   000000                     _RC7PPS	set	3689
   126   000000                     _RE2PPS	set	3700
   127   000000                     _TRISCbits	set	3971
   128   000000                     _TRISEbits	set	3973
   129   000000                     _TRISHbits	set	3976
   130   000000                     _PORTFbits	set	3982
   131   000000                     _T2PR	set	4028
   132   000000                     _T2CONbits	set	4029
   133   000000                     _CCPR2H	set	4006
   134   000000                     _CCPR1H	set	4010
   135   000000                     _RE4PPS	set	3702
   136   000000                     _RG6PPS	set	3720
   137   000000                     _RD5PPS	set	3695
   138   000000                     _ANSELBbits	set	3738
   139   000000                     _ANSELDbits	set	3751
   140   000000                     _SSP2ADD	set	3798
   141   000000                     _SSP2CON1bits	set	3801
   142   000000                     _CCPR4H	set	3873
   143   000000                     _CCPR3H	set	3877
   144   000000                     _INTCONbits	set	4082
   145   000000                     _T2CLKCONbits	set	4031
   146   000000                     _T2HLTbits	set	4030
   147   000000                     _CCP1CONbits	set	4011
   148   000000                     _CCPTMRS0bits	set	4013
   149   000000                     _CCP2CONbits	set	4007
   150   000000                     _LATAbits	set	3961
   151   000000                     _LATDbits	set	3964
   152   000000                     _CCP3CONbits	set	3878
   153   000000                     _CCP4CONbits	set	3874
   154   000000                     _RC4REG	set	3811
   155   000000                     _SP4BRGL	set	3813
   156   000000                     _TX4STAbits	set	3816
   157   000000                     _BAUD4CONbits	set	3817
   158   000000                     _SSP2CON2	set	3802
   159   000000                     _SSP2STAT	set	3800
   160   000000                     _ANSELFbits	set	3764
   161   000000                     _SSP2BUF	set	3797
   162   000000                     _IPR0bits	set	3615
   163   000000                     _PIE0bits	set	3625
   164   000000                     _PIE4bits	set	3629
   165   000000                     _PIR4bits	set	3639
   166   000000                     _RC0PPS	set	3682
   167   000000                     _RD6PPS	set	3696
   168   000000                     _LATFbits	set	3966
   169   000000                     _PIR0bits	set	3635
   170                           
   171                           	psect	smallconst
   172   000E00                     __psmallconst:
   173                           	callstack 0
   174   000E00  00                 	db	0
   175   000E01                     STR_2:
   176                           
   177                           ; BSR set to: 14
   178   000E01  0A                 	db	10
   179   000E02  20                 	db	32
   180   000E03  41                 	db	65	;'A'
   181   000E04  56                 	db	86	;'V'
   182   000E05  47                 	db	71	;'G'
   183   000E06  3A                 	db	58	;':'
   184   000E07  20                 	db	32
   185   000E08  52                 	db	82	;'R'
   186   000E09  20                 	db	32
   187   000E0A  25                 	db	37
   188   000E0B  64                 	db	100	;'d'
   189   000E0C  2C                 	db	44
   190   000E0D  20                 	db	32
   191   000E0E  47                 	db	71	;'G'
   192   000E0F  20                 	db	32
   193   000E10  25                 	db	37
   194   000E11  64                 	db	100	;'d'
   195   000E12  2C                 	db	44
   196   000E13  20                 	db	32
   197   000E14  42                 	db	66	;'B'
   198   000E15  20                 	db	32
   199   000E16  25                 	db	37
   200   000E17  64                 	db	100	;'d'
   201   000E18  20                 	db	32
   202   000E19  0A                 	db	10
   203   000E1A  00                 	db	0
   204   000E1B                     STR_1:
   205                           
   206                           ; BSR set to: 14
   207   000E1B  54                 	db	84	;'T'
   208   000E1C  69                 	db	105	;'i'
   209   000E1D  6D                 	db	109	;'m'
   210   000E1E  65                 	db	101	;'e'
   211   000E1F  72                 	db	114	;'r'
   212   000E20  63                 	db	99	;'c'
   213   000E21  6F                 	db	111	;'o'
   214   000E22  75                 	db	117	;'u'
   215   000E23  6E                 	db	110	;'n'
   216   000E24  74                 	db	116	;'t'
   217   000E25  20                 	db	32
   218   000E26  25                 	db	37
   219   000E27  64                 	db	100	;'d'
   220   000E28  20                 	db	32
   221   000E29  0A                 	db	10
   222   000E2A  00                 	db	0
   223   000E2B                     STR_3:
   224                           
   225                           ; BSR set to: 14
   226   000E2B  43                 	db	67	;'C'
   227   000E2C  41                 	db	65	;'A'
   228   000E2D  52                 	db	82	;'R'
   229   000E2E  44                 	db	68	;'D'
   230   000E2F  20                 	db	32
   231   000E30  25                 	db	37
   232   000E31  64                 	db	100	;'d'
   233   000E32  20                 	db	32
   234   000E33  0A                 	db	10
   235   000E34  00                 	db	0
   236   000E35  00                 	db	0	; dummy byte at the end
   237   000000                     
   238                           ; #config settings
   239                           
   240                           	psect	cinit
   241   002FF2                     __pcinit:
   242                           	callstack 0
   243   002FF2                     start_initialization:
   244                           	callstack 0
   245   002FF2                     __initialization:
   246                           	callstack 0
   247                           
   248                           ; Clear objects allocated to BANK2 (112 bytes)
   249   002FF2  EE02  F072         	lfsr	0,__pbssBANK2
   250   002FF6  0E70               	movlw	112
   251   002FF8                     clear_0:
   252   002FF8  6AEE               	clrf	postinc0,c
   253   002FFA  06E8               	decf	wreg,f,c
   254   002FFC  E1FD               	bnz	clear_0
   255                           
   256                           ; Clear objects allocated to BANK1 (4 bytes)
   257   002FFE  0101               	movlb	1
   258   003000  6BF3               	clrf	(__pbssBANK1+3)& (0+255),b
   259   003002  6BF2               	clrf	(__pbssBANK1+2)& (0+255),b
   260   003004  6BF1               	clrf	(__pbssBANK1+1)& (0+255),b
   261   003006  6BF0               	clrf	__pbssBANK1& (0+255),b
   262                           
   263                           ; Clear objects allocated to BANK0 (7 bytes)
   264   003008  EE00  F0F8         	lfsr	0,__pbssBANK0
   265   00300C  0E07               	movlw	7
   266   00300E                     clear_1:
   267   00300E  6AEE               	clrf	postinc0,c
   268   003010  06E8               	decf	wreg,f,c
   269   003012  E1FD               	bnz	clear_1
   270                           
   271                           ; Clear objects allocated to COMRAM (4 bytes)
   272   003014  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   273   003016  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   274   003018  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   275   00301A  6A57               	clrf	__pbssCOMRAM& (0+255),c
   276   00301C                     end_of_initialization:
   277                           	callstack 0
   278   00301C                     __end_of__initialization:
   279                           	callstack 0
   280   00301C  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   281   00301E  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   282   003020  0100               	movlb	0
   283   003022  EF85  F00C         	goto	_main	;jump to C main() function
   284                           
   285                           	psect	bssCOMRAM
   286   000057                     __pbssCOMRAM:
   287                           	callstack 0
   288   000057                     _TxBufReadCnt:
   289                           	callstack 0
   290   000057                     	ds	1
   291   000058                     _TxBufWriteCnt:
   292                           	callstack 0
   293   000058                     	ds	1
   294   000059                     _RxBufReadCnt:
   295                           	callstack 0
   296   000059                     	ds	1
   297   00005A                     _RxBufWriteCnt:
   298                           	callstack 0
   299   00005A                     	ds	1
   300                           
   301                           	psect	bssBANK0
   302   0000F8                     __pbssBANK0:
   303                           	callstack 0
   304   0000F8                     _width:
   305                           	callstack 0
   306   0000F8                     	ds	2
   307   0000FA                     _prec:
   308                           	callstack 0
   309   0000FA                     	ds	2
   310   0000FC                     _card_detected:
   311                           	callstack 0
   312   0000FC                     	ds	2
   313   0000FE                     _flags:
   314                           	callstack 0
   315   0000FE                     	ds	1
   316                           
   317                           	psect	bssBANK1
   318   0001F0                     __pbssBANK1:
   319                           	callstack 0
   320   0001F0                     _response_in_progress:
   321                           	callstack 0
   322   0001F0                     	ds	2
   323   0001F2                     _TimerFlag:
   324                           	callstack 0
   325   0001F2                     	ds	2
   326                           
   327                           	psect	bssBANK2
   328   000272                     __pbssBANK2:
   329                           	callstack 0
   330   000272                     _EUSART4TXbuf:
   331                           	callstack 0
   332   000272                     	ds	60
   333   0002AE                     _EUSART4RXbuf:
   334                           	callstack 0
   335   0002AE                     	ds	20
   336   0002C2                     _dbuf:
   337                           	callstack 0
   338   0002C2                     	ds	32
   339                           
   340                           	psect	cstackBANK2
   341   000200                     __pcstackBANK2:
   342                           	callstack 0
   343   000200                     main@expected_values:
   344                           	callstack 0
   345                           
   346                           ; 54 bytes @ 0x0
   347   000200                     	ds	54
   348   000236                     main@ReturnHomeArray:
   349                           	callstack 0
   350                           
   351                           ; 60 bytes @ 0x36
   352   000236                     	ds	60
   353                           
   354                           	psect	cstackBANK1
   355   000100                     __pcstackBANK1:
   356                           	callstack 0
   357   000100                     card_response@normalised_values:
   358                           	callstack 0
   359                           
   360                           ; 54 bytes @ 0x0
   361   000100                     	ds	54
   362   000136                     card_response@master_closeness:
   363                           	callstack 0
   364                           
   365                           ; 18 bytes @ 0x36
   366   000136                     	ds	18
   367   000148                     main@buf:
   368                           	callstack 0
   369                           
   370                           ; 150 bytes @ 0x48
   371   000148                     	ds	150
   372   0001DE                     main@motorL:
   373                           	callstack 0
   374                           
   375                           ; 9 bytes @ 0xDE
   376   0001DE                     	ds	9
   377   0001E7                     main@motorR:
   378                           	callstack 0
   379                           
   380                           ; 9 bytes @ 0xE7
   381   0001E7                     	ds	9
   382                           
   383                           	psect	cstackBANK0
   384   000060                     __pcstackBANK0:
   385                           	callstack 0
   386   000060                     ?_vfprintf:
   387                           	callstack 0
   388   000060                     motor_response@mL:
   389                           	callstack 0
   390   000060                     vfprintf@fp:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x0
   394   000060                     	ds	2
   395   000062                     motor_response@mR:
   396                           	callstack 0
   397   000062                     vfprintf@fmt:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0x2
   401   000062                     	ds	2
   402   000064                     vfprintf@ap:
   403                           	callstack 0
   404   000064                     motor_response@ReturnHomeArray:
   405                           	callstack 0
   406                           
   407                           ; 60 bytes @ 0x4
   408   000064                     	ds	2
   409   000066                     ?_sprintf:
   410                           	callstack 0
   411   000066                     sprintf@s:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x6
   415   000066                     	ds	2
   416   000068                     sprintf@fmt:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x8
   420   000068                     	ds	8
   421   000070                     sprintf@ap:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0x10
   425   000070                     	ds	2
   426   000072                     sprintf@f:
   427                           	callstack 0
   428                           
   429                           ; 11 bytes @ 0x12
   430   000072                     	ds	46
   431   0000A0                     card_response@buf:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x40
   435   0000A0                     	ds	2
   436   0000A2                     card_response@red_read:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x42
   440   0000A2                     	ds	2
   441   0000A4                     card_response@green_read:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x44
   445   0000A4                     	ds	2
   446   0000A6                     card_response@blue_read:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x46
   450   0000A6                     	ds	2
   451   0000A8                     card_response@expected_values:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x48
   455   0000A8                     	ds	2
   456   0000AA                     card_response@card:
   457                           	callstack 0
   458                           
   459                           ; 1 bytes @ 0x4A
   460   0000AA                     	ds	1
   461   0000AB                     card_response@mL:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x4B
   465   0000AB                     	ds	2
   466   0000AD                     card_response@mR:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x4D
   470   0000AD                     	ds	2
   471   0000AF                     card_response@ReturnHomeArray:
   472                           	callstack 0
   473                           
   474                           ; 60 bytes @ 0x4F
   475   0000AF                     	ds	60
   476   0000EB                     main@TimerCount:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x8B
   480   0000EB                     	ds	2
   481   0000ED                     main@PWMcycle:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0x8D
   485   0000ED                     	ds	1
   486   0000EE                     main@card:
   487                           	callstack 0
   488                           
   489                           ; 1 bytes @ 0x8E
   490   0000EE                     	ds	1
   491   0000EF                     main@CardCount:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x8F
   495   0000EF                     	ds	2
   496   0000F1                     main@red_read:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x91
   500   0000F1                     	ds	2
   501   0000F3                     main@green_read:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x93
   505   0000F3                     	ds	2
   506   0000F5                     main@blue_read:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x95
   510   0000F5                     	ds	2
   511   0000F7                     main@i:
   512                           	callstack 0
   513                           
   514                           ; 1 bytes @ 0x97
   515   0000F7                     	ds	1
   516                           
   517                           	psect	cstackCOMRAM
   518   000001                     __pcstackCOMRAM:
   519                           	callstack 0
   520   000001                     ??i2_I2C_2_Master_Idle:
   521   000001                     
   522                           ; 1 bytes @ 0x0
   523   000001                     	ds	1
   524   000002                     i2I2C_2_Master_Write@data_byte:
   525                           	callstack 0
   526                           
   527                           ; 1 bytes @ 0x1
   528   000002                     	ds	1
   529   000003                     ??_HighISR:
   530   000003                     
   531                           ; 1 bytes @ 0x2
   532   000003                     	ds	2
   533   000005                     ??_I2C_2_Master_Idle:
   534   000005                     ?___wmul:
   535                           	callstack 0
   536   000005                     ?___aodiv:
   537                           	callstack 0
   538   000005                     ?___aomod:
   539                           	callstack 0
   540   000005                     sendCharSerial4@charToSend:
   541                           	callstack 0
   542   000005                     determine_card@master_closeness:
   543                           	callstack 0
   544   000005                     ___wmul@multiplier:
   545                           	callstack 0
   546   000005                     fputc@c:
   547                           	callstack 0
   548   000005                     ___aodiv@dividend:
   549                           	callstack 0
   550   000005                     ___aomod@dividend:
   551                           	callstack 0
   552                           
   553                           ; 8 bytes @ 0x4
   554   000005                     	ds	1
   555   000006                     ??_I2C_2_Master_Read:
   556   000006                     I2C_2_Master_Write@data_byte:
   557                           	callstack 0
   558   000006                     sendStringSerial4@string:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x5
   562   000006                     	ds	1
   563   000007                     ??_determine_card:
   564   000007                     color_writetoaddr@value:
   565                           	callstack 0
   566   000007                     I2C_2_Master_Read@ack:
   567                           	callstack 0
   568   000007                     ___wmul@multiplicand:
   569                           	callstack 0
   570   000007                     fputc@fp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574   000007                     	ds	1
   575   000008                     color_writetoaddr@address:
   576                           	callstack 0
   577   000008                     I2C_2_Master_Read@tmp:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x7
   581   000008                     	ds	1
   582   000009                     ??_fputc:
   583   000009                     ??_color_click_init:
   584   000009                     ?_color_read_Red:
   585                           	callstack 0
   586   000009                     ?_color_read_Green:
   587                           	callstack 0
   588   000009                     ?_color_read_Blue:
   589                           	callstack 0
   590   000009                     set_interrupt_threshold@AIHT:
   591                           	callstack 0
   592   000009                     ___wmul@product:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x8
   596   000009                     	ds	1
   597   00000A                     set_interrupt_threshold@persistence:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0x9
   601   00000A                     	ds	1
   602   00000B                     ??_color_read_Red:
   603   00000B                     ??_color_read_Green:
   604   00000B                     ??_color_read_Blue:
   605   00000B                     ?___lwdiv:
   606                           	callstack 0
   607   00000B                     _set_interrupt_threshold$2036:
   608                           	callstack 0
   609   00000B                     determine_card@current_smallest:
   610                           	callstack 0
   611   00000B                     ___lwdiv@dividend:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0xA
   615   00000B                     	ds	1
   616   00000C                     _set_interrupt_threshold$2037:
   617                           	callstack 0
   618                           
   619                           ; 1 bytes @ 0xB
   620   00000C                     	ds	1
   621   00000D                     determine_card@predicted_colour:
   622                           	callstack 0
   623   00000D                     _set_interrupt_threshold$2038:
   624                           	callstack 0
   625   00000D                     ___lwdiv@divisor:
   626                           	callstack 0
   627   00000D                     ___aodiv@divisor:
   628                           	callstack 0
   629   00000D                     ___aomod@divisor:
   630                           	callstack 0
   631                           
   632                           ; 8 bytes @ 0xC
   633   00000D                     	ds	1
   634   00000E                     determine_card@i:
   635                           	callstack 0
   636   00000E                     _set_interrupt_threshold$2039:
   637                           	callstack 0
   638   00000E                     color_read_Red@tmp:
   639                           	callstack 0
   640   00000E                     color_read_Green@tmp:
   641                           	callstack 0
   642   00000E                     color_read_Blue@tmp:
   643                           	callstack 0
   644   00000E                     fputs@s:
   645                           	callstack 0
   646                           
   647                           ; 2 bytes @ 0xD
   648   00000E                     	ds	1
   649   00000F                     set_interrupt_threshold@AILT:
   650                           	callstack 0
   651   00000F                     ___lwdiv@quotient:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0xE
   655   00000F                     	ds	1
   656   000010                     fputs@fp:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0xF
   660   000010                     	ds	1
   661   000011                     ___lwdiv@counter:
   662                           	callstack 0
   663                           
   664                           ; 1 bytes @ 0x10
   665   000011                     	ds	1
   666   000012                     fputs@c:
   667                           	callstack 0
   668   000012                     setMotorPWM@m:
   669                           	callstack 0
   670   000012                     collect_avg_readings@red_read:
   671                           	callstack 0
   672   000012                     make_master_closeness@buf:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x11
   676   000012                     	ds	1
   677   000013                     fputs@i:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x12
   681   000013                     	ds	1
   682   000014                     ??_setMotorPWM:
   683   000014                     collect_avg_readings@green_read:
   684                           	callstack 0
   685   000014                     make_master_closeness@normalised_values:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x13
   689   000014                     	ds	1
   690   000015                     ___aodiv@counter:
   691                           	callstack 0
   692   000015                     ___aomod@counter:
   693                           	callstack 0
   694   000015                     pad@fp:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x14
   698   000015                     	ds	1
   699   000016                     setMotorPWM@posDuty:
   700                           	callstack 0
   701   000016                     ___aodiv@sign:
   702                           	callstack 0
   703   000016                     ___aomod@sign:
   704                           	callstack 0
   705   000016                     collect_avg_readings@blue_read:
   706                           	callstack 0
   707   000016                     make_master_closeness@master_closeness:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x15
   711   000016                     	ds	1
   712   000017                     ?_abs:
   713                           	callstack 0
   714   000017                     setMotorPWM@negDuty:
   715                           	callstack 0
   716   000017                     abs@a:
   717                           	callstack 0
   718   000017                     pad@buf:
   719                           	callstack 0
   720   000017                     ___aodiv@quotient:
   721                           	callstack 0
   722                           
   723                           ; 8 bytes @ 0x16
   724   000017                     	ds	1
   725   000018                     ??_collect_avg_readings:
   726   000018                     ??_make_master_closeness:
   727   000018                     stop@mL:
   728                           	callstack 0
   729   000018                     turnLeft45@mL:
   730                           	callstack 0
   731   000018                     turnRight45@mL:
   732                           	callstack 0
   733   000018                     fullSpeedAhead@mL:
   734                           	callstack 0
   735   000018                     reverseFullSpeed@mL:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x17
   739   000018                     	ds	1
   740   000019                     ??_abs:
   741   000019                     pad@p:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x18
   745   000019                     	ds	1
   746   00001A                     stop@mR:
   747                           	callstack 0
   748   00001A                     turnLeft45@mR:
   749                           	callstack 0
   750   00001A                     turnRight45@mR:
   751                           	callstack 0
   752   00001A                     fullSpeedAhead@mR:
   753                           	callstack 0
   754   00001A                     reverseFullSpeed@mR:
   755                           	callstack 0
   756   00001A                     collect_avg_readings@i:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x19
   760   00001A                     	ds	1
   761   00001B                     ??_pad:
   762   00001B                     normalise_readings@buf:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x1A
   766   00001B                     	ds	1
   767   00001C                     ??_stop:
   768   00001C                     ??_turnLeft45:
   769   00001C                     ??_turnRight45:
   770   00001C                     ??_fullSpeedAhead:
   771   00001C                     ??_reverseFullSpeed:
   772   00001C                     collect_avg_readings@i_1561:
   773                           	callstack 0
   774   00001C                     pad@i:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x1B
   778   00001C                     	ds	1
   779   00001D                     fullSpeedAhead@i:
   780                           	callstack 0
   781   00001D                     reverseFullSpeed@i:
   782                           	callstack 0
   783   00001D                     normalise_readings@red_read:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x1C
   787   00001D                     	ds	1
   788   00001E                     turnLeft45@i:
   789                           	callstack 0
   790   00001E                     turnRight45@i:
   791                           	callstack 0
   792   00001E                     collect_avg_readings@i_1562:
   793                           	callstack 0
   794   00001E                     pad@w:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x1D
   798   00001E                     	ds	1
   799   00001F                     normalise_readings@green_read:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x1E
   803   00001F                     	ds	1
   804   000020                     collect_avg_readings@i_1563:
   805                           	callstack 0
   806   000020                     home_response@mL:
   807                           	callstack 0
   808   000020                     dtoa@fp:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x1F
   812   000020                     	ds	1
   813   000021                     normalise_readings@blue_read:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x20
   817   000021                     	ds	1
   818   000022                     home_response@mR:
   819                           	callstack 0
   820   000022                     dtoa@d:
   821                           	callstack 0
   822                           
   823                           ; 8 bytes @ 0x21
   824   000022                     	ds	1
   825   000023                     normalise_readings@expected_values:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x22
   829   000023                     	ds	1
   830   000024                     ??_home_response:
   831                           
   832                           ; 1 bytes @ 0x23
   833   000024                     	ds	1
   834   000025                     normalise_readings@normalised_values:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x24
   838   000025                     	ds	1
   839   000026                     home_response@card:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x25
   843   000026                     	ds	1
   844   000027                     ??_normalise_readings:
   845   000027                     ??_motor_response:
   846                           
   847                           ; 1 bytes @ 0x26
   848   000027                     	ds	2
   849   000029                     motor_response@j:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x28
   853   000029                     	ds	1
   854   00002A                     ??_dtoa:
   855                           
   856                           ; 1 bytes @ 0x29
   857   00002A                     	ds	1
   858   00002B                     motor_response@card:
   859                           	callstack 0
   860                           
   861                           ; 1 bytes @ 0x2A
   862   00002B                     	ds	1
   863   00002C                     make_master_closeness@i:
   864                           	callstack 0
   865   00002C                     motor_response@i:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x2B
   869   00002C                     	ds	3
   870   00002F                     normalise_readings@difference:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0x2E
   874   00002F                     	ds	2
   875   000031                     normalise_readings@i:
   876                           	callstack 0
   877                           
   878                           ; 1 bytes @ 0x30
   879   000031                     	ds	1
   880   000032                     _dtoa$2557:
   881                           	callstack 0
   882                           
   883                           ; 2 bytes @ 0x31
   884   000032                     	ds	2
   885   000034                     dtoa@p:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0x33
   889   000034                     	ds	2
   890   000036                     dtoa@w:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x35
   894   000036                     	ds	2
   895   000038                     dtoa@n:
   896                           	callstack 0
   897                           
   898                           ; 8 bytes @ 0x37
   899   000038                     	ds	8
   900   000040                     dtoa@s:
   901                           	callstack 0
   902                           
   903                           ; 1 bytes @ 0x3F
   904   000040                     	ds	1
   905   000041                     dtoa@i:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x40
   909   000041                     	ds	2
   910   000043                     vfpfcnvrt@fp:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x42
   914   000043                     	ds	2
   915   000045                     vfpfcnvrt@fmt:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x44
   919   000045                     	ds	2
   920   000047                     vfpfcnvrt@ap:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x46
   924   000047                     	ds	2
   925   000049                     ??_vfpfcnvrt:
   926                           
   927                           ; 1 bytes @ 0x48
   928   000049                     	ds	2
   929   00004B                     vfpfcnvrt@convarg:
   930                           	callstack 0
   931                           
   932                           ; 8 bytes @ 0x4A
   933   00004B                     	ds	8
   934   000053                     vfpfcnvrt@cp:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x52
   938   000053                     	ds	2
   939   000055                     vfprintf@cfmt:
   940                           	callstack 0
   941                           
   942                           ; 2 bytes @ 0x54
   943   000055                     	ds	2
   944   000057                     
   945                           ; 1 bytes @ 0x56
   946 ;;
   947 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   948 ;;
   949 ;; *************** function _main *****************
   950 ;; Defined at:
   951 ;;		line 22 in file "main.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  i               1  151[BANK0 ] enum E14569
   956 ;;  buf           150   72[BANK1 ] unsigned char [150]
   957 ;;  ReturnHomeAr   60   54[BANK2 ] struct HomeStored
   958 ;;  expected_val   54    0[BANK2 ] unsigned int [9][3]
   959 ;;  motorR          9  231[BANK1 ] struct DC_motor
   960 ;;  motorL          9  222[BANK1 ] struct DC_motor
   961 ;;  blue_read       2  149[BANK0 ] unsigned int 
   962 ;;  green_read      2  147[BANK0 ] unsigned int 
   963 ;;  red_read        2  145[BANK0 ] unsigned int 
   964 ;;  CardCount       2  143[BANK0 ] unsigned int 
   965 ;;  TimerCount      2  139[BANK0 ] unsigned int 
   966 ;;  clear_read      2    0        unsigned int 
   967 ;;  card            1  142[BANK0 ] enum E14569
   968 ;;  PWMcycle        1  141[BANK0 ] unsigned char 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   979 ;;      Locals:         0      13     168     114       0       0       0       0       0       0       0       0       
      +0       0       0
   980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   981 ;;      Totals:         0      13     168     114       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;Total ram usage:      295 bytes
   983 ;; Hardware stack levels required when called: 13
   984 ;; This function calls:
   985 ;;		_I2C_2_Master_Init
   986 ;;		_Interrupts_init
   987 ;;		_LEDSon_init
   988 ;;		_card_response
   989 ;;		_collect_avg_readings
   990 ;;		_color_click_init
   991 ;;		_fullSpeedAhead
   992 ;;		_initDCmotorsPWM
   993 ;;		_initUSART4
   994 ;;		_sendStringSerial4
   995 ;;		_setMotorPWM
   996 ;;		_sprintf
   997 ;;		_stop
   998 ;; This function is called by:
   999 ;;		Startup code after reset
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text0
  1004   00190A                     __ptext0:
  1005                           	callstack 0
  1006   00190A                     _main:
  1007                           	callstack 18
  1008   00190A                     
  1009                           ;main.c: 27:     LEDSon_init();
  1010   00190A  ECAC  F018         	call	_LEDSon_init	;wreg free
  1011   00190E                     
  1012                           ;main.c: 28:     I2C_2_Master_Init();
  1013   00190E  EC5C  F018         	call	_I2C_2_Master_Init	;wreg free
  1014   001912                     
  1015                           ;main.c: 29:     color_click_init();
  1016   001912  EC13  F018         	call	_color_click_init	;wreg free
  1017   001916                     
  1018                           ;main.c: 30:     initDCmotorsPWM();
  1019   001916  EC8D  F015         	call	_initDCmotorsPWM	;wreg free
  1020   00191A                     
  1021                           ;main.c: 31:     initUSART4();
  1022   00191A  ECBD  F018         	call	_initUSART4	;wreg free
  1023   00191E                     
  1024                           ;main.c: 32:     Interrupts_init();
  1025   00191E  EC45  F018         	call	_Interrupts_init	;wreg free
  1026   001922                     
  1027                           ;main.c: 34:     TRISFbits.TRISF2=1;
  1028   001922  8486               	bsf	134,2,c	;volatile
  1029   001924                     
  1030                           ;main.c: 35:     ANSELFbits.ANSELF2=0;
  1031   001924  010E               	movlb	14	; () banked
  1032   001926  95B4               	bcf	180,2,b	;volatile
  1033   001928                     
  1034                           ; BSR set to: 14
  1035                           ;main.c: 41:     unsigned char PWMcycle = T2PR;
  1036   001928  CFBC F0ED          	movff	4028,main@PWMcycle	;volatile
  1037                           
  1038                           ;main.c: 43:     struct DC_motor motorL, motorR;;main.c: 45:     motorL.power=0;
  1039   00192C  0E00               	movlw	0
  1040   00192E  0101               	movlb	1	; () banked
  1041   001930  6FDE               	movwf	main@motorL& (0+255),b
  1042                           
  1043                           ;main.c: 46:     motorL.direction=1;
  1044   001932  0E01               	movlw	1
  1045   001934  6FDF               	movwf	(main@motorL+1)& (0+255),b
  1046                           
  1047                           ;main.c: 47:     motorL.brakemode=1;
  1048   001936  0E01               	movlw	1
  1049   001938  6FE0               	movwf	(main@motorL+2)& (0+255),b
  1050   00193A                     
  1051                           ; BSR set to: 1
  1052                           ;main.c: 48:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1053   00193A  0EAA               	movlw	170
  1054   00193C  6FE3               	movwf	(main@motorL+5)& (0+255),b
  1055   00193E  0E0F               	movlw	15
  1056   001940  6FE4               	movwf	(main@motorL+6)& (0+255),b
  1057   001942                     
  1058                           ; BSR set to: 1
  1059                           ;main.c: 49:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1060   001942  0EA6               	movlw	166
  1061   001944  6FE5               	movwf	(main@motorL+7)& (0+255),b
  1062   001946  0E0F               	movlw	15
  1063   001948  6FE6               	movwf	(main@motorL+8)& (0+255),b
  1064   00194A                     
  1065                           ; BSR set to: 1
  1066                           ;main.c: 50:     motorL.PWMperiod=PWMcycle;
  1067   00194A  C0ED  F1E1         	movff	main@PWMcycle,main@motorL+3
  1068   00194E  6BE2               	clrf	(main@motorL+4)& (0+255),b
  1069                           
  1070                           ;main.c: 52:     motorR.power=0;
  1071   001950  0E00               	movlw	0
  1072   001952  6FE7               	movwf	main@motorR& (0+255),b
  1073                           
  1074                           ;main.c: 53:     motorR.direction=1;
  1075   001954  0E01               	movlw	1
  1076   001956  6FE8               	movwf	(main@motorR+1)& (0+255),b
  1077                           
  1078                           ;main.c: 54:     motorR.brakemode=1;
  1079   001958  0E01               	movlw	1
  1080   00195A  6FE9               	movwf	(main@motorR+2)& (0+255),b
  1081   00195C                     
  1082                           ; BSR set to: 1
  1083                           ;main.c: 55:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1084   00195C  0E25               	movlw	37
  1085   00195E  6FEC               	movwf	(main@motorR+5)& (0+255),b
  1086   001960  0E0F               	movlw	15
  1087   001962  6FED               	movwf	(main@motorR+6)& (0+255),b
  1088   001964                     
  1089                           ; BSR set to: 1
  1090                           ;main.c: 56:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1091   001964  0E21               	movlw	33
  1092   001966  6FEE               	movwf	(main@motorR+7)& (0+255),b
  1093   001968  0E0F               	movlw	15
  1094   00196A  6FEF               	movwf	(main@motorR+8)& (0+255),b
  1095   00196C                     
  1096                           ; BSR set to: 1
  1097                           ;main.c: 57:     motorR.PWMperiod=PWMcycle;
  1098   00196C  C0ED  F1EA         	movff	main@PWMcycle,main@motorR+3
  1099   001970  6BEB               	clrf	(main@motorR+4)& (0+255),b
  1100   001972                     
  1101                           ; BSR set to: 1
  1102                           ;main.c: 59:     setMotorPWM(&motorL);
  1103   001972  0EDE               	movlw	low main@motorL
  1104   001974  6E12               	movwf	setMotorPWM@m^0,c
  1105   001976  0E01               	movlw	high main@motorL
  1106   001978  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1107   00197A  EC84  F010         	call	_setMotorPWM	;wreg free
  1108   00197E                     
  1109                           ;main.c: 60:     setMotorPWM(&motorR);
  1110   00197E  0EE7               	movlw	low main@motorR
  1111   001980  6E12               	movwf	setMotorPWM@m^0,c
  1112   001982  0E01               	movlw	high main@motorR
  1113   001984  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1114   001986  EC84  F010         	call	_setMotorPWM	;wreg free
  1115                           
  1116                           ;main.c: 66:     colour card;;main.c: 67:     char buf[150];;main.c: 69:     unsigned in
      +                          t expected_values[3][9];;main.c: 70:     unsigned int red_read = 0;
  1117   00198A  0E00               	movlw	0
  1118   00198C  0100               	movlb	0	; () banked
  1119   00198E  6FF2               	movwf	(main@red_read+1)& (0+255),b
  1120   001990  0E00               	movlw	0
  1121   001992  6FF1               	movwf	main@red_read& (0+255),b
  1122                           
  1123                           ;main.c: 71:     unsigned int green_read = 0;
  1124   001994  0E00               	movlw	0
  1125   001996  6FF4               	movwf	(main@green_read+1)& (0+255),b
  1126   001998  0E00               	movlw	0
  1127   00199A  6FF3               	movwf	main@green_read& (0+255),b
  1128                           
  1129                           ;main.c: 72:     unsigned int blue_read = 0;
  1130   00199C  0E00               	movlw	0
  1131   00199E  6FF6               	movwf	(main@blue_read+1)& (0+255),b
  1132   0019A0  0E00               	movlw	0
  1133   0019A2  6FF5               	movwf	main@blue_read& (0+255),b
  1134                           
  1135                           ;main.c: 75:     unsigned int TimerCount = 0;
  1136   0019A4  0E00               	movlw	0
  1137   0019A6  6FEC               	movwf	(main@TimerCount+1)& (0+255),b
  1138   0019A8  0E00               	movlw	0
  1139   0019AA  6FEB               	movwf	main@TimerCount& (0+255),b
  1140                           
  1141                           ;main.c: 76:     unsigned int CardCount = 0;
  1142   0019AC  0E00               	movlw	0
  1143   0019AE  6FF0               	movwf	(main@CardCount+1)& (0+255),b
  1144   0019B0  0E00               	movlw	0
  1145   0019B2  6FEF               	movwf	main@CardCount& (0+255),b
  1146                           
  1147                           ;main.c: 78:     HomeStored ReturnHomeArray;;main.c: 88:     for(colour i = RED; i<= BLA
      +                          CK; i++){
  1148   0019B4  0E00               	movlw	0
  1149   0019B6  6FF7               	movwf	main@i& (0+255),b
  1150   0019B8  EFDF  F00C         	goto	l230
  1151   0019BC                     l231:
  1152                           
  1153                           ;main.c: 90:             LATDbits.LATD4 = 1;
  1154   0019BC  887C               	bsf	124,4,c	;volatile
  1155   0019BE                     l230:
  1156                           
  1157                           ;main.c: 89:         while(PORTFbits.RF2){
  1158   0019BE  B48E               	btfsc	142,2,c	;volatile
  1159   0019C0  EFE4  F00C         	goto	u2021
  1160   0019C4  EFE6  F00C         	goto	u2020
  1161   0019C8                     u2021:
  1162   0019C8  EFDE  F00C         	goto	l231
  1163   0019CC                     u2020:
  1164   0019CC                     
  1165                           ;main.c: 92:         LATDbits.LATD4 = 0;
  1166   0019CC  987C               	bcf	124,4,c	;volatile
  1167   0019CE                     
  1168                           ;main.c: 93:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1169   0019CE  0EF1               	movlw	low main@red_read
  1170   0019D0  6E12               	movwf	collect_avg_readings@red_read^0,c
  1171   0019D2  0E00               	movlw	high main@red_read
  1172   0019D4  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1173   0019D6  0EF3               	movlw	low main@green_read
  1174   0019D8  6E14               	movwf	collect_avg_readings@green_read^0,c
  1175   0019DA  0E00               	movlw	high main@green_read
  1176   0019DC  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1177   0019DE  0EF5               	movlw	low main@blue_read
  1178   0019E0  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1179   0019E2  0E00               	movlw	high main@blue_read
  1180   0019E4  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1181   0019E6  ECCD  F00E         	call	_collect_avg_readings	;wreg free
  1182   0019EA                     
  1183                           ;main.c: 94:         expected_values[RED][i] = red_read;
  1184   0019EA  0100               	movlb	0	; () banked
  1185   0019EC  51F7               	movf	main@i& (0+255),w,b
  1186   0019EE  0D02               	mullw	2
  1187   0019F0  0E00               	movlw	low main@expected_values
  1188   0019F2  24F3               	addwf	243,w,c
  1189   0019F4  6ED9               	movwf	fsr2l,c
  1190   0019F6  0E02               	movlw	high main@expected_values
  1191   0019F8  20F4               	addwfc	prodh,w,c
  1192   0019FA  6EDA               	movwf	fsr2h,c
  1193   0019FC  C0F1  FFDE         	movff	main@red_read,postinc2
  1194   001A00  C0F2  FFDD         	movff	main@red_read+1,postdec2
  1195   001A04                     
  1196                           ; BSR set to: 0
  1197                           ;main.c: 95:         expected_values[GREEN][i] = green_read;
  1198   001A04  51F7               	movf	main@i& (0+255),w,b
  1199   001A06  0D02               	mullw	2
  1200   001A08  0E12               	movlw	18
  1201   001A0A  26F3               	addwf	243,f,c
  1202   001A0C  0E00               	movlw	0
  1203   001A0E  22F4               	addwfc	244,f,c
  1204   001A10  0E00               	movlw	low main@expected_values
  1205   001A12  24F3               	addwf	243,w,c
  1206   001A14  6ED9               	movwf	fsr2l,c
  1207   001A16  0E02               	movlw	high main@expected_values
  1208   001A18  20F4               	addwfc	prodh,w,c
  1209   001A1A  6EDA               	movwf	fsr2h,c
  1210   001A1C  C0F3  FFDE         	movff	main@green_read,postinc2
  1211   001A20  C0F4  FFDD         	movff	main@green_read+1,postdec2
  1212   001A24                     
  1213                           ; BSR set to: 0
  1214                           ;main.c: 96:         expected_values[BLUE][i] = blue_read;
  1215   001A24  51F7               	movf	main@i& (0+255),w,b
  1216   001A26  0D02               	mullw	2
  1217   001A28  0E24               	movlw	36
  1218   001A2A  26F3               	addwf	243,f,c
  1219   001A2C  0E00               	movlw	0
  1220   001A2E  22F4               	addwfc	244,f,c
  1221   001A30  0E00               	movlw	low main@expected_values
  1222   001A32  24F3               	addwf	243,w,c
  1223   001A34  6ED9               	movwf	fsr2l,c
  1224   001A36  0E02               	movlw	high main@expected_values
  1225   001A38  20F4               	addwfc	prodh,w,c
  1226   001A3A  6EDA               	movwf	fsr2h,c
  1227   001A3C  C0F5  FFDE         	movff	main@blue_read,postinc2
  1228   001A40  C0F6  FFDD         	movff	main@blue_read+1,postdec2
  1229   001A44                     
  1230                           ; BSR set to: 0
  1231                           ;main.c: 97:     }
  1232   001A44  2BF7               	incf	main@i& (0+255),f,b
  1233   001A46                     
  1234                           ; BSR set to: 0
  1235   001A46  0E08               	movlw	8
  1236   001A48  65F7               	cpfsgt	main@i& (0+255),b
  1237   001A4A  EF29  F00D         	goto	u2031
  1238   001A4E  EF2B  F00D         	goto	u2030
  1239   001A52                     u2031:
  1240   001A52  EFDF  F00C         	goto	l230
  1241   001A56                     u2030:
  1242   001A56  EF2F  F00D         	goto	l234
  1243   001A5A                     l235:
  1244                           
  1245                           ;main.c: 108:             LATDbits.LATD4 = 1;
  1246   001A5A  887C               	bsf	124,4,c	;volatile
  1247                           
  1248                           ;main.c: 109:             LATFbits.LATF0 = 1;
  1249   001A5C  807E               	bsf	126,0,c	;volatile
  1250   001A5E                     l234:
  1251                           
  1252                           ;main.c: 107:         while(PORTFbits.RF2){
  1253   001A5E  B48E               	btfsc	142,2,c	;volatile
  1254   001A60  EF34  F00D         	goto	u2041
  1255   001A64  EF36  F00D         	goto	u2040
  1256   001A68                     u2041:
  1257   001A68  EF2D  F00D         	goto	l235
  1258   001A6C                     u2040:
  1259   001A6C                     
  1260                           ;main.c: 111:         LATFbits.LATF0 = 0;
  1261   001A6C  907E               	bcf	126,0,c	;volatile
  1262   001A6E                     
  1263                           ;main.c: 112:         card_detected = 1;
  1264   001A6E  0E00               	movlw	0
  1265   001A70  0100               	movlb	0	; () banked
  1266   001A72  6FFD               	movwf	(_card_detected+1)& (0+255),b
  1267   001A74  0E01               	movlw	1
  1268   001A76  6FFC               	movwf	_card_detected& (0+255),b
  1269   001A78                     
  1270                           ; BSR set to: 0
  1271                           ;main.c: 125:             ReturnHomeArray.TimerCount[CardCount] = TimerCount;
  1272   001A78  90D8               	bcf	status,0,c
  1273   001A7A  35EF               	rlcf	main@CardCount& (0+255),w,b
  1274   001A7C  6ED9               	movwf	fsr2l,c
  1275   001A7E  35F0               	rlcf	(main@CardCount+1)& (0+255),w,b
  1276   001A80  6EDA               	movwf	fsr2h,c
  1277   001A82  0E36               	movlw	low main@ReturnHomeArray
  1278   001A84  26D9               	addwf	fsr2l,f,c
  1279   001A86  0E02               	movlw	high main@ReturnHomeArray
  1280   001A88  22DA               	addwfc	fsr2h,f,c
  1281   001A8A  0EF4               	movlw	244
  1282   001A8C  6EDE               	movwf	postinc2,c
  1283   001A8E  0E01               	movlw	1
  1284   001A90  6EDD               	movwf	postdec2,c
  1285   001A92                     
  1286                           ; BSR set to: 0
  1287                           ;main.c: 126:             stop(&motorL, &motorR);
  1288   001A92  0EDE               	movlw	low main@motorL
  1289   001A94  6E18               	movwf	stop@mL^0,c
  1290   001A96  0E01               	movlw	high main@motorL
  1291   001A98  6E19               	movwf	(stop@mL+1)^0,c
  1292   001A9A  0EE7               	movlw	low main@motorR
  1293   001A9C  6E1A               	movwf	stop@mR^0,c
  1294   001A9E  0E01               	movlw	high main@motorR
  1295   001AA0  6E1B               	movwf	(stop@mR+1)^0,c
  1296   001AA2  ECD1  F015         	call	_stop	;wreg free
  1297   001AA6                     
  1298                           ;main.c: 128:             sprintf(buf, "Timercount %d \n", ReturnHomeArray.TimerCount[Ca
      +                          rdCount]);
  1299   001AA6  0E48               	movlw	low main@buf
  1300   001AA8  0100               	movlb	0	; () banked
  1301   001AAA  6F66               	movwf	sprintf@s& (0+255),b
  1302   001AAC  0E01               	movlw	high main@buf
  1303   001AAE  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1304   001AB0  0E1B               	movlw	low STR_1
  1305   001AB2  6F68               	movwf	sprintf@fmt& (0+255),b
  1306   001AB4  0E0E               	movlw	high STR_1
  1307   001AB6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1308   001AB8  90D8               	bcf	status,0,c
  1309   001ABA  35EF               	rlcf	main@CardCount& (0+255),w,b
  1310   001ABC  6ED9               	movwf	fsr2l,c
  1311   001ABE  35F0               	rlcf	(main@CardCount+1)& (0+255),w,b
  1312   001AC0  6EDA               	movwf	fsr2h,c
  1313   001AC2  0E36               	movlw	low main@ReturnHomeArray
  1314   001AC4  26D9               	addwf	fsr2l,f,c
  1315   001AC6  0E02               	movlw	high main@ReturnHomeArray
  1316   001AC8  22DA               	addwfc	fsr2h,f,c
  1317   001ACA  CFDE F06A          	movff	postinc2,?_sprintf+4
  1318   001ACE  CFDD F06B          	movff	postdec2,?_sprintf+5
  1319   001AD2  ECF5  F016         	call	_sprintf	;wreg free
  1320   001AD6                     
  1321                           ;main.c: 129:             sendStringSerial4(buf);
  1322   001AD6  0E48               	movlw	low main@buf
  1323   001AD8  6E06               	movwf	sendStringSerial4@string^0,c
  1324   001ADA  0E01               	movlw	high main@buf
  1325   001ADC  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1326   001ADE  EC2D  F018         	call	_sendStringSerial4	;wreg free
  1327   001AE2                     
  1328                           ;main.c: 132:             card = card_response(buf, &red_read, &green_read, &blue_read, 
      +                          expected_values, card, &motorL, &motorR, ReturnHomeArray);
  1329   001AE2  0E48               	movlw	low main@buf
  1330   001AE4  0100               	movlb	0	; () banked
  1331   001AE6  6FA0               	movwf	card_response@buf& (0+255),b
  1332   001AE8  0E01               	movlw	high main@buf
  1333   001AEA  6FA1               	movwf	(card_response@buf+1)& (0+255),b
  1334   001AEC  0EF1               	movlw	low main@red_read
  1335   001AEE  6FA2               	movwf	card_response@red_read& (0+255),b
  1336   001AF0  0E00               	movlw	high main@red_read
  1337   001AF2  6FA3               	movwf	(card_response@red_read+1)& (0+255),b
  1338   001AF4  0EF3               	movlw	low main@green_read
  1339   001AF6  6FA4               	movwf	card_response@green_read& (0+255),b
  1340   001AF8  0E00               	movlw	high main@green_read
  1341   001AFA  6FA5               	movwf	(card_response@green_read+1)& (0+255),b
  1342   001AFC  0EF5               	movlw	low main@blue_read
  1343   001AFE  6FA6               	movwf	card_response@blue_read& (0+255),b
  1344   001B00  0E00               	movlw	high main@blue_read
  1345   001B02  6FA7               	movwf	(card_response@blue_read+1)& (0+255),b
  1346   001B04  0E00               	movlw	low main@expected_values
  1347   001B06  6FA8               	movwf	card_response@expected_values& (0+255),b
  1348   001B08  0E02               	movlw	high main@expected_values
  1349   001B0A  6FA9               	movwf	(card_response@expected_values+1)& (0+255),b
  1350   001B0C  C0EE  F0AA         	movff	main@card,card_response@card
  1351   001B10  0EDE               	movlw	low main@motorL
  1352   001B12  6FAB               	movwf	card_response@mL& (0+255),b
  1353   001B14  0E01               	movlw	high main@motorL
  1354   001B16  6FAC               	movwf	(card_response@mL+1)& (0+255),b
  1355   001B18  0EE7               	movlw	low main@motorR
  1356   001B1A  6FAD               	movwf	card_response@mR& (0+255),b
  1357   001B1C  0E01               	movlw	high main@motorR
  1358   001B1E  6FAE               	movwf	(card_response@mR+1)& (0+255),b
  1359   001B20  EE22  F036         	lfsr	2,main@ReturnHomeArray
  1360   001B24  EE00  F0AF         	lfsr	0,card_response@ReturnHomeArray
  1361   001B28  0E3B               	movlw	59
  1362   001B2A                     u2051:
  1363   001B2A  CFDB FFEB          	movff	plusw2,plusw0
  1364   001B2E  06E8               	decf	wreg,f,c
  1365   001B30  E2FC               	bc	u2051
  1366   001B32  EC9B  F012         	call	_card_response	;wreg free
  1367   001B36  0100               	movlb	0	; () banked
  1368   001B38  6FEE               	movwf	main@card& (0+255),b
  1369   001B3A                     
  1370                           ; BSR set to: 0
  1371                           ;main.c: 134:             ReturnHomeArray.card[CardCount] = card;
  1372   001B3A  0E36               	movlw	low main@ReturnHomeArray
  1373   001B3C  25EF               	addwf	main@CardCount& (0+255),w,b
  1374   001B3E  6ED9               	movwf	fsr2l,c
  1375   001B40  0E02               	movlw	high main@ReturnHomeArray
  1376   001B42  21F0               	addwfc	(main@CardCount+1)& (0+255),w,b
  1377   001B44  6EDA               	movwf	fsr2h,c
  1378   001B46  C0EE  FFDF         	movff	main@card,indf2
  1379   001B4A                     
  1380                           ; BSR set to: 0
  1381                           ;main.c: 136:             CardCount += 1;
  1382   001B4A  4BEF               	infsnz	main@CardCount& (0+255),f,b
  1383   001B4C  2BF0               	incf	(main@CardCount+1)& (0+255),f,b
  1384   001B4E                     
  1385                           ; BSR set to: 0
  1386                           ;main.c: 139:             card_detected = 0;
  1387   001B4E  0E00               	movlw	0
  1388   001B50  6FFD               	movwf	(_card_detected+1)& (0+255),b
  1389   001B52  0E00               	movlw	0
  1390   001B54  6FFC               	movwf	_card_detected& (0+255),b
  1391   001B56                     
  1392                           ; BSR set to: 0
  1393                           ;main.c: 141:             fullSpeedAhead(&motorL, &motorR);
  1394   001B56  0EDE               	movlw	low main@motorL
  1395   001B58  6E18               	movwf	fullSpeedAhead@mL^0,c
  1396   001B5A  0E01               	movlw	high main@motorL
  1397   001B5C  6E19               	movwf	(fullSpeedAhead@mL+1)^0,c
  1398   001B5E  0EE7               	movlw	low main@motorR
  1399   001B60  6E1A               	movwf	fullSpeedAhead@mR^0,c
  1400   001B62  0E01               	movlw	high main@motorR
  1401   001B64  6E1B               	movwf	(fullSpeedAhead@mR+1)^0,c
  1402   001B66  EC47  F015         	call	_fullSpeedAhead	;wreg free
  1403   001B6A  EF2F  F00D         	goto	l234
  1404   001B6E  EF2D  F000         	goto	start
  1405   001B72                     __end_of_main:
  1406                           	callstack 0
  1407                           
  1408 ;; *************** function _initUSART4 *****************
  1409 ;; Defined at:
  1410 ;;		line 6 in file "serial.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 4
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text1
  1439   00317A                     __ptext1:
  1440                           	callstack 0
  1441   00317A                     _initUSART4:
  1442                           	callstack 26
  1443   00317A                     
  1444                           ;serial.c: 10:     RC0PPS = 0x12;
  1445   00317A  0E12               	movlw	18
  1446   00317C  010E               	movlb	14	; () banked
  1447   00317E  6F62               	movwf	98,b	;volatile
  1448                           
  1449                           ;serial.c: 11:     RX4PPS = 0x11;
  1450   003180  0E11               	movlw	17
  1451   003182  6F15               	movwf	21,b	;volatile
  1452   003184                     
  1453                           ; BSR set to: 14
  1454                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1455   003184  8283               	bsf	131,1,c	;volatile
  1456   003186                     
  1457                           ; BSR set to: 14
  1458                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1459   003186  97E9               	bcf	233,3,b	;volatile
  1460   003188                     
  1461                           ; BSR set to: 14
  1462                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1463   003188  95E8               	bcf	232,2,b	;volatile
  1464                           
  1465                           ;serial.c: 17:     SP4BRGL = 51;
  1466   00318A  0E33               	movlw	51
  1467   00318C  6FE5               	movwf	229,b	;volatile
  1468                           
  1469                           ;serial.c: 18:     SP4BRGH = 0;
  1470   00318E  0E00               	movlw	0
  1471   003190  6FE6               	movwf	230,b	;volatile
  1472   003192                     
  1473                           ; BSR set to: 14
  1474                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1475   003192  89E7               	bsf	231,4,b	;volatile
  1476   003194                     
  1477                           ; BSR set to: 14
  1478                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1479   003194  8BE8               	bsf	232,5,b	;volatile
  1480   003196                     
  1481                           ; BSR set to: 14
  1482                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1483   003196  8FE7               	bsf	231,7,b	;volatile
  1484   003198                     
  1485                           ; BSR set to: 14
  1486   003198  0012               	return		;funcret
  1487   00319A                     __end_of_initUSART4:
  1488                           	callstack 0
  1489                           
  1490 ;; *************** function _initDCmotorsPWM *****************
  1491 ;; Defined at:
  1492 ;;		line 6 in file "dc_motor.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 4
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_main
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text2
  1521   002B1A                     __ptext2:
  1522                           	callstack 0
  1523   002B1A                     _initDCmotorsPWM:
  1524                           	callstack 26
  1525   002B1A                     
  1526                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1527   002B1A  9485               	bcf	133,2,c	;volatile
  1528                           
  1529                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1530   002B1C  9885               	bcf	133,4,c	;volatile
  1531                           
  1532                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1533   002B1E  9E83               	bcf	131,7,c	;volatile
  1534                           
  1535                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1536   002B20  9C87               	bcf	135,6,c	;volatile
  1537   002B22                     
  1538                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1539   002B22  0E05               	movlw	5
  1540   002B24  010E               	movlb	14	; () banked
  1541   002B26  6F74               	movwf	116,b	;volatile
  1542                           
  1543                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1544   002B28  0E06               	movlw	6
  1545   002B2A  6F76               	movwf	118,b	;volatile
  1546                           
  1547                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1548   002B2C  0E07               	movlw	7
  1549   002B2E  6F69               	movwf	105,b	;volatile
  1550                           
  1551                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1552   002B30  0E08               	movlw	8
  1553   002B32  6F88               	movwf	136,b	;volatile
  1554                           
  1555                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1556   002B34  50BD               	movf	189,w,c	;volatile
  1557   002B36  0B8F               	andlw	-113
  1558   002B38  0940               	iorlw	64
  1559   002B3A  6EBD               	movwf	189,c	;volatile
  1560                           
  1561                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1562   002B3C  0EE0               	movlw	-32
  1563   002B3E  16BE               	andwf	190,f,c	;volatile
  1564                           
  1565                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1566   002B40  50BF               	movf	191,w,c	;volatile
  1567   002B42  0BF0               	andlw	-16
  1568   002B44  0901               	iorlw	1
  1569   002B46  6EBF               	movwf	191,c	;volatile
  1570                           
  1571                           ;dc_motor.c: 26:     T2PR=99;
  1572   002B48  0E63               	movlw	99
  1573   002B4A  6EBC               	movwf	188,c	;volatile
  1574   002B4C                     
  1575                           ; BSR set to: 14
  1576                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1577   002B4C  8EBD               	bsf	189,7,c	;volatile
  1578                           
  1579                           ;dc_motor.c: 31:     CCPR1H=0;
  1580   002B4E  0E00               	movlw	0
  1581   002B50  6EAA               	movwf	170,c	;volatile
  1582                           
  1583                           ;dc_motor.c: 32:     CCPR2H=0;
  1584   002B52  0E00               	movlw	0
  1585   002B54  6EA6               	movwf	166,c	;volatile
  1586                           
  1587                           ;dc_motor.c: 33:     CCPR3H=0;
  1588   002B56  0E00               	movlw	0
  1589   002B58  010F               	movlb	15	; () banked
  1590   002B5A  6F25               	movwf	37,b	;volatile
  1591                           
  1592                           ;dc_motor.c: 34:     CCPR4H=0;
  1593   002B5C  0E00               	movlw	0
  1594   002B5E  6F21               	movwf	33,b	;volatile
  1595                           
  1596                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1597   002B60  0EFC               	movlw	-4
  1598   002B62  16AD               	andwf	173,f,c	;volatile
  1599                           
  1600                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1601   002B64  0EF3               	movlw	-13
  1602   002B66  16AD               	andwf	173,f,c	;volatile
  1603                           
  1604                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1605   002B68  0ECF               	movlw	-49
  1606   002B6A  16AD               	andwf	173,f,c	;volatile
  1607                           
  1608                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1609   002B6C  0E3F               	movlw	-193
  1610   002B6E  16AD               	andwf	173,f,c	;volatile
  1611   002B70                     
  1612                           ; BSR set to: 15
  1613                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1614   002B70  88AB               	bsf	171,4,c	;volatile
  1615                           
  1616                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1617   002B72  50AB               	movf	171,w,c	;volatile
  1618   002B74  0BF0               	andlw	-16
  1619   002B76  090C               	iorlw	12
  1620   002B78  6EAB               	movwf	171,c	;volatile
  1621   002B7A                     
  1622                           ; BSR set to: 15
  1623                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1624   002B7A  8EAB               	bsf	171,7,c	;volatile
  1625   002B7C                     
  1626                           ; BSR set to: 15
  1627                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1628   002B7C  88A7               	bsf	167,4,c	;volatile
  1629                           
  1630                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1631   002B7E  50A7               	movf	167,w,c	;volatile
  1632   002B80  0BF0               	andlw	-16
  1633   002B82  090C               	iorlw	12
  1634   002B84  6EA7               	movwf	167,c	;volatile
  1635   002B86                     
  1636                           ; BSR set to: 15
  1637                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1638   002B86  8EA7               	bsf	167,7,c	;volatile
  1639   002B88                     
  1640                           ; BSR set to: 15
  1641                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1642   002B88  8926               	bsf	38,4,b	;volatile
  1643                           
  1644                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1645   002B8A  5126               	movf	38,w,b	;volatile
  1646   002B8C  0BF0               	andlw	-16
  1647   002B8E  090C               	iorlw	12
  1648   002B90  6F26               	movwf	38,b	;volatile
  1649   002B92                     
  1650                           ; BSR set to: 15
  1651                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1652   002B92  8F26               	bsf	38,7,b	;volatile
  1653   002B94                     
  1654                           ; BSR set to: 15
  1655                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1656   002B94  8922               	bsf	34,4,b	;volatile
  1657                           
  1658                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1659   002B96  5122               	movf	34,w,b	;volatile
  1660   002B98  0BF0               	andlw	-16
  1661   002B9A  090C               	iorlw	12
  1662   002B9C  6F22               	movwf	34,b	;volatile
  1663   002B9E                     
  1664                           ; BSR set to: 15
  1665                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1666   002B9E  8F22               	bsf	34,7,b	;volatile
  1667   002BA0                     
  1668                           ; BSR set to: 15
  1669   002BA0  0012               	return		;funcret
  1670   002BA2                     __end_of_initDCmotorsPWM:
  1671                           	callstack 0
  1672                           
  1673 ;; *************** function _color_click_init *****************
  1674 ;; Defined at:
  1675 ;;		line 5 in file "color.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, status,2, status,0, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1692 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1693 ;;Total ram usage:        1 bytes
  1694 ;; Hardware stack levels used: 1
  1695 ;; Hardware stack levels required when called: 7
  1696 ;; This function calls:
  1697 ;;		_I2C_2_Master_Init
  1698 ;;		_color_writetoaddr
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text3
  1705   003026                     __ptext3:
  1706                           	callstack 0
  1707   003026                     _color_click_init:
  1708                           	callstack 23
  1709   003026                     
  1710                           ;color.c: 8:     I2C_2_Master_Init();
  1711   003026  EC5C  F018         	call	_I2C_2_Master_Init	;wreg free
  1712   00302A                     
  1713                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1714   00302A  0E01               	movlw	1
  1715   00302C  6E07               	movwf	color_writetoaddr@value^0,c
  1716   00302E  0E00               	movlw	0
  1717   003030  ECCD  F018         	call	_color_writetoaddr
  1718   003034                     
  1719                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1720   003034  0E3F               	movlw	63
  1721   003036  6E09               	movwf	??_color_click_init^0,c
  1722   003038  0E55               	movlw	85
  1723   00303A                     u2067:
  1724   00303A  2EE8               	decfsz	wreg,f,c
  1725   00303C  D7FE               	bra	u2067
  1726   00303E  2E09               	decfsz	??_color_click_init^0,f,c
  1727   003040  D7FC               	bra	u2067
  1728   003042  F000               	nop	
  1729   003044                     
  1730                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1731   003044  0E03               	movlw	3
  1732   003046  6E07               	movwf	color_writetoaddr@value^0,c
  1733   003048  0E00               	movlw	0
  1734   00304A  ECCD  F018         	call	_color_writetoaddr
  1735   00304E                     
  1736                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1737   00304E  0ED5               	movlw	213
  1738   003050  6E07               	movwf	color_writetoaddr@value^0,c
  1739   003052  0E01               	movlw	1
  1740   003054  ECCD  F018         	call	_color_writetoaddr
  1741   003058  0012               	return		;funcret
  1742   00305A                     __end_of_color_click_init:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _I2C_2_Master_Init *****************
  1746 ;; Defined at:
  1747 ;;		line 4 in file "i2c.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 4
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_color_click_init
  1772 ;;		_main
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text4
  1777   0030B8                     __ptext4:
  1778                           	callstack 0
  1779   0030B8                     _I2C_2_Master_Init:
  1780                           	callstack 25
  1781   0030B8                     
  1782                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1783   0030B8  010E               	movlb	14	; () banked
  1784   0030BA  51D9               	movf	217,w,b	;volatile
  1785   0030BC  0BF0               	andlw	-16
  1786   0030BE  0908               	iorlw	8
  1787   0030C0  6FD9               	movwf	217,b	;volatile
  1788   0030C2                     
  1789                           ; BSR set to: 14
  1790                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1791   0030C2  8BD9               	bsf	217,5,b	;volatile
  1792                           
  1793                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1794   0030C4  0E9F               	movlw	159
  1795   0030C6  6FD6               	movwf	214,b	;volatile
  1796   0030C8                     
  1797                           ; BSR set to: 14
  1798                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1799   0030C8  8A84               	bsf	132,5,c	;volatile
  1800   0030CA                     
  1801                           ; BSR set to: 14
  1802                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1803   0030CA  8C84               	bsf	132,6,c	;volatile
  1804   0030CC                     
  1805                           ; BSR set to: 14
  1806                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1807   0030CC  9BA7               	bcf	167,5,b	;volatile
  1808   0030CE                     
  1809                           ; BSR set to: 14
  1810                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1811   0030CE  9DA7               	bcf	167,6,b	;volatile
  1812                           
  1813                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1814   0030D0  0E1D               	movlw	29
  1815   0030D2  6F1D               	movwf	29,b	;volatile
  1816                           
  1817                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1818   0030D4  0E1E               	movlw	30
  1819   0030D6  6F1C               	movwf	28,b	;volatile
  1820                           
  1821                           ;i2c.c: 18:   RD5PPS=0x1C;
  1822   0030D8  0E1C               	movlw	28
  1823   0030DA  6F6F               	movwf	111,b	;volatile
  1824                           
  1825                           ;i2c.c: 19:   RD6PPS=0x1B;
  1826   0030DC  0E1B               	movlw	27
  1827   0030DE  6F70               	movwf	112,b	;volatile
  1828   0030E0                     
  1829                           ; BSR set to: 14
  1830   0030E0  0012               	return		;funcret
  1831   0030E2                     __end_of_I2C_2_Master_Init:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function _card_response *****************
  1835 ;; Defined at:
  1836 ;;		line 277 in file "colour_identify.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  buf             2   64[BANK0 ] PTR unsigned char 
  1839 ;;		 -> main@buf(150), 
  1840 ;;  red_read        2   66[BANK0 ] PTR unsigned int 
  1841 ;;		 -> main@red_read(2), 
  1842 ;;  green_read      2   68[BANK0 ] PTR unsigned int 
  1843 ;;		 -> main@green_read(2), 
  1844 ;;  blue_read       2   70[BANK0 ] PTR unsigned int 
  1845 ;;		 -> main@blue_read(2), 
  1846 ;;  expected_val    2   72[BANK0 ] PTR unsigned int [9]
  1847 ;;		 -> main@expected_values(54), 
  1848 ;;  card            1   74[BANK0 ] enum E14551
  1849 ;;  mL              2   75[BANK0 ] PTR struct DC_motor
  1850 ;;		 -> main@motorL(9), 
  1851 ;;  mR              2   77[BANK0 ] PTR struct DC_motor
  1852 ;;		 -> main@motorR(9), 
  1853 ;;  ReturnHomeAr   60   79[BANK0 ] struct HomeStored
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  normalised_v   54    0[BANK1 ] unsigned int [9][3]
  1856 ;;  master_close   18   54[BANK1 ] unsigned int [9]
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      enum E14569
  1859 ;; Registers used:
  1860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1866 ;;      Params:         0      75       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1867 ;;      Locals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;      Totals:         0      75      72       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;Total ram usage:      147 bytes
  1871 ;; Hardware stack levels used: 1
  1872 ;; Hardware stack levels required when called: 12
  1873 ;; This function calls:
  1874 ;;		_collect_avg_readings
  1875 ;;		_determine_card
  1876 ;;		_make_master_closeness
  1877 ;;		_motor_response
  1878 ;;		_normalise_readings
  1879 ;;		_sendStringSerial4
  1880 ;;		_sprintf
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text5
  1887   002536                     __ptext5:
  1888                           	callstack 0
  1889   002536                     _card_response:
  1890                           	callstack 18
  1891   002536                     
  1892                           ;colour_identify.c: 281:     unsigned int normalised_values[3][9];;colour_identify.c: 28
      +                          2:     unsigned int master_closeness[9];;colour_identify.c: 284:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  1893   002536  C0A2  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  1894   00253A  C0A3  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  1895   00253E  C0A4  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  1896   002542  C0A5  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  1897   002546  C0A6  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  1898   00254A  C0A7  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  1899   00254E  ECCD  F00E         	call	_collect_avg_readings	;wreg free
  1900   002552                     
  1901                           ;colour_identify.c: 285:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  1902   002552  C0A0  F066         	movff	card_response@buf,sprintf@s
  1903   002556  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  1904   00255A  0E01               	movlw	low STR_2
  1905   00255C  0100               	movlb	0	; () banked
  1906   00255E  6F68               	movwf	sprintf@fmt& (0+255),b
  1907   002560  0E0E               	movlw	high STR_2
  1908   002562  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1909   002564  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  1910   002568  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  1911   00256C  CFDE F06A          	movff	postinc2,?_sprintf+4
  1912   002570  CFDD F06B          	movff	postdec2,?_sprintf+5
  1913   002574  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  1914   002578  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  1915   00257C  CFDE F06C          	movff	postinc2,?_sprintf+6
  1916   002580  CFDD F06D          	movff	postdec2,?_sprintf+7
  1917   002584  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  1918   002588  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  1919   00258C  CFDE F06E          	movff	postinc2,?_sprintf+8
  1920   002590  CFDD F06F          	movff	postdec2,?_sprintf+9
  1921   002594  ECF5  F016         	call	_sprintf	;wreg free
  1922   002598                     
  1923                           ;colour_identify.c: 286:     sendStringSerial4(buf);
  1924   002598  C0A0  F006         	movff	card_response@buf,sendStringSerial4@string
  1925   00259C  C0A1  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  1926   0025A0  EC2D  F018         	call	_sendStringSerial4	;wreg free
  1927   0025A4                     
  1928                           ;colour_identify.c: 288:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  1929   0025A4  C0A0  F01B         	movff	card_response@buf,normalise_readings@buf
  1930   0025A8  C0A1  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  1931   0025AC  C0A2  FFD9         	movff	card_response@red_read,fsr2l
  1932   0025B0  C0A3  FFDA         	movff	card_response@red_read+1,fsr2h
  1933   0025B4  CFDE F01D          	movff	postinc2,normalise_readings@red_read
  1934   0025B8  CFDD F01E          	movff	postdec2,normalise_readings@red_read+1
  1935   0025BC  C0A4  FFD9         	movff	card_response@green_read,fsr2l
  1936   0025C0  C0A5  FFDA         	movff	card_response@green_read+1,fsr2h
  1937   0025C4  CFDE F01F          	movff	postinc2,normalise_readings@green_read
  1938   0025C8  CFDD F020          	movff	postdec2,normalise_readings@green_read+1
  1939   0025CC  C0A6  FFD9         	movff	card_response@blue_read,fsr2l
  1940   0025D0  C0A7  FFDA         	movff	card_response@blue_read+1,fsr2h
  1941   0025D4  CFDE F021          	movff	postinc2,normalise_readings@blue_read
  1942   0025D8  CFDD F022          	movff	postdec2,normalise_readings@blue_read+1
  1943   0025DC  C0A8  F023         	movff	card_response@expected_values,normalise_readings@expected_values
  1944   0025E0  C0A9  F024         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  1945   0025E4  0E00               	movlw	low card_response@normalised_values
  1946   0025E6  6E25               	movwf	normalise_readings@normalised_values^0,c
  1947   0025E8  0E01               	movlw	high card_response@normalised_values
  1948   0025EA  6E26               	movwf	(normalise_readings@normalised_values+1)^0,c
  1949   0025EC  ECB9  F00D         	call	_normalise_readings	;wreg free
  1950   0025F0                     
  1951                           ;colour_identify.c: 290:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  1952   0025F0  C0A0  F012         	movff	card_response@buf,make_master_closeness@buf
  1953   0025F4  C0A1  F013         	movff	card_response@buf+1,make_master_closeness@buf+1
  1954   0025F8  0E00               	movlw	low card_response@normalised_values
  1955   0025FA  6E14               	movwf	make_master_closeness@normalised_values^0,c
  1956   0025FC  0E01               	movlw	high card_response@normalised_values
  1957   0025FE  6E15               	movwf	(make_master_closeness@normalised_values+1)^0,c
  1958   002600  0E36               	movlw	low card_response@master_closeness
  1959   002602  6E16               	movwf	make_master_closeness@master_closeness^0,c
  1960   002604  0E01               	movlw	high card_response@master_closeness
  1961   002606  6E17               	movwf	(make_master_closeness@master_closeness+1)^0,c
  1962   002608  EC39  F013         	call	_make_master_closeness	;wreg free
  1963   00260C                     
  1964                           ;colour_identify.c: 292:     card = determine_card(master_closeness);
  1965   00260C  0E36               	movlw	low card_response@master_closeness
  1966   00260E  6E05               	movwf	determine_card@master_closeness^0,c
  1967   002610  0E01               	movlw	high card_response@master_closeness
  1968   002612  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  1969   002614  EC14  F016         	call	_determine_card	;wreg free
  1970   002618  0100               	movlb	0	; () banked
  1971   00261A  6FAA               	movwf	card_response@card& (0+255),b
  1972   00261C                     
  1973                           ; BSR set to: 0
  1974                           ;colour_identify.c: 293:     sprintf(buf, "CARD %d \n", card);
  1975   00261C  C0A0  F066         	movff	card_response@buf,sprintf@s
  1976   002620  C0A1  F067         	movff	card_response@buf+1,sprintf@s+1
  1977   002624  0E2B               	movlw	low STR_3
  1978   002626  6F68               	movwf	sprintf@fmt& (0+255),b
  1979   002628  0E0E               	movlw	high STR_3
  1980   00262A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1981   00262C  C0AA  F06A         	movff	card_response@card,?_sprintf+4
  1982   002630  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  1983   002632  ECF5  F016         	call	_sprintf	;wreg free
  1984   002636                     
  1985                           ;colour_identify.c: 294:     sendStringSerial4(buf);
  1986   002636  C0A0  F006         	movff	card_response@buf,sendStringSerial4@string
  1987   00263A  C0A1  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  1988   00263E  EC2D  F018         	call	_sendStringSerial4	;wreg free
  1989   002642                     
  1990                           ;colour_identify.c: 296:     motor_response(card, mL, mR, ReturnHomeArray);
  1991   002642  C0AB  F060         	movff	card_response@mL,motor_response@mL
  1992   002646  C0AC  F061         	movff	card_response@mL+1,motor_response@mL+1
  1993   00264A  C0AD  F062         	movff	card_response@mR,motor_response@mR
  1994   00264E  C0AE  F063         	movff	card_response@mR+1,motor_response@mR+1
  1995   002652  EE20  F0AF         	lfsr	2,card_response@ReturnHomeArray
  1996   002656  EE00  F064         	lfsr	0,motor_response@ReturnHomeArray
  1997   00265A  0E3B               	movlw	59
  1998   00265C                     u2011:
  1999   00265C  CFDB FFEB          	movff	plusw2,plusw0
  2000   002660  06E8               	decf	wreg,f,c
  2001   002662  E2FC               	bc	u2011
  2002   002664  0100               	movlb	0	; () banked
  2003   002666  51AA               	movf	card_response@card& (0+255),w,b
  2004   002668  EC1B  F007         	call	_motor_response
  2005   00266C                     
  2006                           ;colour_identify.c: 298:     return card;
  2007   00266C  0100               	movlb	0	; () banked
  2008   00266E  51AA               	movf	card_response@card& (0+255),w,b
  2009   002670                     
  2010                           ; BSR set to: 0
  2011   002670  0012               	return		;funcret
  2012   002672                     __end_of_card_response:
  2013                           	callstack 0
  2014                           
  2015 ;; *************** function _sprintf *****************
  2016 ;; Defined at:
  2017 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2020 ;;		 -> main@buf(150), 
  2021 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2022 ;;		 -> STR_3(10), STR_2(26), STR_1(16), 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  f              11   18[BANK0 ] struct _IO_FILE
  2025 ;;  ap              2   16[BANK0 ] PTR void [1]
  2026 ;;		 -> ?_sprintf(2), 
  2027 ;;  ret             2    0        int 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2    6[BANK0 ] int 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2037 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2040 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2041 ;;Total ram usage:       23 bytes
  2042 ;; Hardware stack levels used: 1
  2043 ;; Hardware stack levels required when called: 11
  2044 ;; This function calls:
  2045 ;;		_vfprintf
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;;		_card_response
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text6
  2053   002DEA                     __ptext6:
  2054                           	callstack 0
  2055   002DEA                     _sprintf:
  2056                           	callstack 19
  2057   002DEA  0E6A               	movlw	low (?_sprintf+4)
  2058   002DEC  0100               	movlb	0	; () banked
  2059   002DEE  6F70               	movwf	sprintf@ap& (0+255),b
  2060   002DF0  0E00               	movlw	high (?_sprintf+4)
  2061   002DF2  6F71               	movwf	(sprintf@ap+1)& (0+255),b
  2062   002DF4  C066  F072         	movff	sprintf@s,sprintf@f
  2063   002DF8  C067  F073         	movff	sprintf@s+1,sprintf@f+1
  2064   002DFC                     
  2065                           ; BSR set to: 0
  2066   002DFC  0E00               	movlw	0
  2067   002DFE  6F76               	movwf	(sprintf@f+4)& (0+255),b
  2068   002E00  0E00               	movlw	0
  2069   002E02  6F75               	movwf	(sprintf@f+3)& (0+255),b
  2070   002E04                     
  2071                           ; BSR set to: 0
  2072   002E04  0E00               	movlw	0
  2073   002E06  6F7C               	movwf	(sprintf@f+10)& (0+255),b
  2074   002E08  0E00               	movlw	0
  2075   002E0A  6F7B               	movwf	(sprintf@f+9)& (0+255),b
  2076   002E0C                     
  2077                           ; BSR set to: 0
  2078   002E0C  0E72               	movlw	low sprintf@f
  2079   002E0E  6F60               	movwf	vfprintf@fp& (0+255),b
  2080   002E10  0E00               	movlw	high sprintf@f
  2081   002E12  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2082   002E14  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2083   002E18  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2084   002E1C  0E70               	movlw	low sprintf@ap
  2085   002E1E  6F64               	movwf	vfprintf@ap& (0+255),b
  2086   002E20  0E00               	movlw	high sprintf@ap
  2087   002E22  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2088   002E24  ECCB  F016         	call	_vfprintf	;wreg free
  2089   002E28  0100               	movlb	0	; () banked
  2090   002E2A  5175               	movf	(sprintf@f+3)& (0+255),w,b
  2091   002E2C  2566               	addwf	sprintf@s& (0+255),w,b
  2092   002E2E  6ED9               	movwf	fsr2l,c
  2093   002E30  5176               	movf	(sprintf@f+4)& (0+255),w,b
  2094   002E32  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2095   002E34  6EDA               	movwf	fsr2h,c
  2096   002E36  0E00               	movlw	0
  2097   002E38  6EDF               	movwf	indf2,c
  2098   002E3A                     
  2099                           ; BSR set to: 0
  2100   002E3A  0012               	return		;funcret
  2101   002E3C                     __end_of_sprintf:
  2102                           	callstack 0
  2103                           
  2104 ;; *************** function _vfprintf *****************
  2105 ;; Defined at:
  2106 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2109 ;;		 -> sprintf@f(11), 
  2110 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2111 ;;		 -> STR_3(10), STR_2(26), STR_1(16), 
  2112 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2113 ;;		 -> sprintf@ap(2), 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2116 ;;		 -> STR_3(10), STR_2(26), STR_1(16), 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  2    0[BANK0 ] int 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2126 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;Total ram usage:        8 bytes
  2131 ;; Hardware stack levels used: 1
  2132 ;; Hardware stack levels required when called: 10
  2133 ;; This function calls:
  2134 ;;		_vfpfcnvrt
  2135 ;; This function is called by:
  2136 ;;		_sprintf
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text7
  2141   002D96                     __ptext7:
  2142                           	callstack 0
  2143   002D96                     _vfprintf:
  2144                           	callstack 19
  2145   002D96                     
  2146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2147   002D96  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2148   002D9A  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2149                           
  2150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2151   002D9E  EFDF  F016         	goto	l3615
  2152   002DA2                     l3613:
  2153                           
  2154                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2155   002DA2  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2156   002DA6  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2157   002DAA  0E55               	movlw	low vfprintf@cfmt
  2158   002DAC  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2159   002DAE  0E00               	movlw	high vfprintf@cfmt
  2160   002DB0  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2161   002DB2  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2162   002DB6  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2163   002DBA  ECEC  F011         	call	_vfpfcnvrt	;wreg free
  2164   002DBE                     l3615:
  2165                           
  2166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2167   002DBE  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2168   002DC2  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2169   002DC6                     	if	0	;tblptru may be non-zero
  2170   002DC6                     	endif
  2171   002DC6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2172   002DC6  0E00               	movlw	low (__mediumconst shr (0+16))
  2173   002DC8  6EF8               	movwf	tblptru,c
  2174   002DCA                     	endif
  2175   002DCA  0008               	tblrd		*
  2176   002DCC  50F5               	movf	tablat,w,c
  2177   002DCE  0900               	iorlw	0
  2178   002DD0  A4D8               	btfss	status,2,c
  2179   002DD2  EFED  F016         	goto	u1991
  2180   002DD6  EFEF  F016         	goto	u1990
  2181   002DDA                     u1991:
  2182   002DDA  EFD1  F016         	goto	l3613
  2183   002DDE                     u1990:
  2184   002DDE                     
  2185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2186   002DDE  0E00               	movlw	0
  2187   002DE0  0100               	movlb	0	; () banked
  2188   002DE2  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2189   002DE4  0E00               	movlw	0
  2190   002DE6  6F60               	movwf	?_vfprintf& (0+255),b
  2191   002DE8                     
  2192                           ; BSR set to: 0
  2193   002DE8  0012               	return		;funcret
  2194   002DEA                     __end_of_vfprintf:
  2195                           	callstack 0
  2196                           
  2197 ;; *************** function _vfpfcnvrt *****************
  2198 ;; Defined at:
  2199 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2202 ;;		 -> sprintf@f(11), 
  2203 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2204 ;;		 -> vfprintf@cfmt(2), 
  2205 ;;  ap              2   70[COMRAM] PTR PTR void 
  2206 ;;		 -> sprintf@ap(2), 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  convarg         8   74[COMRAM] struct .
  2209 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2210 ;;		 -> STR_3(10), STR_2(26), STR_1(16), 
  2211 ;;  i               2    0        int 
  2212 ;;  done            2    0        int 
  2213 ;;  c               1    0        unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2223 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2224 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;Total ram usage:       18 bytes
  2228 ;; Hardware stack levels used: 1
  2229 ;; Hardware stack levels required when called: 9
  2230 ;; This function calls:
  2231 ;;		_dtoa
  2232 ;;		_fputc
  2233 ;; This function is called by:
  2234 ;;		_vfprintf
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text8
  2239   0023D8                     __ptext8:
  2240                           	callstack 0
  2241   0023D8                     _vfpfcnvrt:
  2242                           	callstack 19
  2243   0023D8                     
  2244                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2245   0023D8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2246   0023DC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2247   0023E0  CFDE FFF6          	movff	postinc2,tblptrl
  2248   0023E4  CFDD FFF7          	movff	postdec2,tblptrh
  2249   0023E8                     	if	0	;tblptru may be non-zero
  2250   0023E8                     	endif
  2251   0023E8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2252   0023E8  0E00               	movlw	low (__mediumconst shr (0+16))
  2253   0023EA  6EF8               	movwf	tblptru,c
  2254   0023EC                     	endif
  2255   0023EC  0008               	tblrd		*
  2256   0023EE  50F5               	movf	tablat,w,c
  2257   0023F0  0A25               	xorlw	37
  2258   0023F2  A4D8               	btfss	status,2,c
  2259   0023F4  EFFE  F011         	goto	u1961
  2260   0023F8  EF00  F012         	goto	u1960
  2261   0023FC                     u1961:
  2262   0023FC  EF84  F012         	goto	l3605
  2263   002400                     u1960:
  2264   002400                     
  2265                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2266   002400  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2267   002404  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2268   002408  2ADE               	incf	postinc2,f,c
  2269   00240A  0E00               	movlw	0
  2270   00240C  22DD               	addwfc	postdec2,f,c
  2271   00240E                     
  2272                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2273   00240E  0E00               	movlw	0
  2274   002410  0100               	movlb	0	; () banked
  2275   002412  6FF9               	movwf	(_width+1)& (0+255),b
  2276   002414  0E00               	movlw	0
  2277   002416  6FF8               	movwf	_width& (0+255),b
  2278   002418  C0F8  F0FE         	movff	_width,_flags
  2279   00241C                     
  2280                           ; BSR set to: 0
  2281                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2282   00241C  69FA               	setf	_prec& (0+255),b
  2283   00241E  69FB               	setf	(_prec+1)& (0+255),b
  2284   002420                     
  2285                           ; BSR set to: 0
  2286                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2287   002420  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2288   002424  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2289   002428  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2290   00242C  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2291   002430                     
  2292                           ; BSR set to: 0
  2293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2294   002430  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2295   002434  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2296   002438                     	if	0	;tblptru may be non-zero
  2297   002438                     	endif
  2298   002438                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2299   002438  0E00               	movlw	low (__mediumconst shr (0+16))
  2300   00243A  6EF8               	movwf	tblptru,c
  2301   00243C                     	endif
  2302   00243C  0008               	tblrd		*
  2303   00243E  50F5               	movf	tablat,w,c
  2304   002440  0A64               	xorlw	100
  2305   002442  B4D8               	btfsc	status,2,c
  2306   002444  EF26  F012         	goto	u1971
  2307   002448  EF28  F012         	goto	u1970
  2308   00244C                     u1971:
  2309   00244C  EF38  F012         	goto	l3595
  2310   002450                     u1970:
  2311   002450                     
  2312                           ; BSR set to: 0
  2313   002450  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2314   002454  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2315   002458                     	if	0	;tblptru may be non-zero
  2316   002458                     	endif
  2317   002458                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2318   002458  0E00               	movlw	low (__mediumconst shr (0+16))
  2319   00245A  6EF8               	movwf	tblptru,c
  2320   00245C                     	endif
  2321   00245C  0008               	tblrd		*
  2322   00245E  50F5               	movf	tablat,w,c
  2323   002460  0A69               	xorlw	105
  2324   002462  A4D8               	btfss	status,2,c
  2325   002464  EF36  F012         	goto	u1981
  2326   002468  EF38  F012         	goto	u1980
  2327   00246C                     u1981:
  2328   00246C  EF7B  F012         	goto	l3601
  2329   002470                     u1980:
  2330   002470                     l3595:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2334   002470  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2335   002474  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2336   002478  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2337   00247C  0E02               	movlw	2
  2338   00247E  26DE               	addwf	postinc2,f,c
  2339   002480  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2340   002484  0E00               	movlw	0
  2341   002486  22DD               	addwfc	postdec2,f,c
  2342   002488  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2343   00248C  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2344   002490  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2345   002494  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2346   002498  0E00               	movlw	0
  2347   00249A  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2348   00249C  0EFF               	movlw	-1
  2349   00249E  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2350   0024A0  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2351   0024A2  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2352   0024A4  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2353   0024A6  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2354   0024A8  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2355                           
  2356                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2357   0024AA  0E01               	movlw	1
  2358   0024AC  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2359   0024AE  6E49               	movwf	??_vfpfcnvrt^0,c
  2360   0024B0  0E00               	movlw	0
  2361   0024B2  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2362   0024B4  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2363   0024B6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2364   0024BA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2365   0024BE  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2366   0024C2  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2367   0024C6                     
  2368                           ; BSR set to: 0
  2369                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2370   0024C6  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2371   0024CA  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2372   0024CE  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2373   0024D2  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2374   0024D6  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2375   0024DA  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2376   0024DE  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2377   0024E2  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2378   0024E6  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2379   0024EA  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2380   0024EE  EC46  F00B         	call	_dtoa	;wreg free
  2381   0024F2  EF9A  F012         	goto	l1258
  2382   0024F6                     l3601:
  2383                           
  2384                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2385   0024F6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2386   0024FA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2387   0024FE  2ADE               	incf	postinc2,f,c
  2388   002500  0E00               	movlw	0
  2389   002502  22DD               	addwfc	postdec2,f,c
  2390   002504  EF9A  F012         	goto	l1258
  2391   002508                     l3605:
  2392                           
  2393                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2394   002508  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2395   00250C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2396   002510  CFDE FFF6          	movff	postinc2,tblptrl
  2397   002514  CFDD FFF7          	movff	postdec2,tblptrh
  2398   002518                     	if	0	;tblptru may be non-zero
  2399   002518                     	endif
  2400   002518                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2401   002518  0E00               	movlw	low (__mediumconst shr (0+16))
  2402   00251A  6EF8               	movwf	tblptru,c
  2403   00251C                     	endif
  2404   00251C  0008               	tblrd		*
  2405   00251E  50F5               	movf	tablat,w,c
  2406   002520  6E05               	movwf	fputc@c^0,c
  2407   002522  6A06               	clrf	(fputc@c+1)^0,c
  2408   002524  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2409   002528  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2410   00252C  ECA3  F013         	call	_fputc	;wreg free
  2411   002530  EF7B  F012         	goto	l3601
  2412   002534                     l1258:
  2413   002534  0012               	return		;funcret
  2414   002536                     __end_of_vfpfcnvrt:
  2415                           	callstack 0
  2416                           
  2417 ;; *************** function _dtoa *****************
  2418 ;; Defined at:
  2419 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2422 ;;		 -> sprintf@f(11), 
  2423 ;;  d               8   33[COMRAM] long long 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  n               8   55[COMRAM] long long 
  2426 ;;  i               2   64[COMRAM] int 
  2427 ;;  w               2   53[COMRAM] int 
  2428 ;;  p               2   51[COMRAM] int 
  2429 ;;  s               1   63[COMRAM] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2439 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2440 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2441 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2442 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2443 ;;Total ram usage:       35 bytes
  2444 ;; Hardware stack levels used: 1
  2445 ;; Hardware stack levels required when called: 8
  2446 ;; This function calls:
  2447 ;;		___aodiv
  2448 ;;		___aomod
  2449 ;;		_abs
  2450 ;;		_pad
  2451 ;; This function is called by:
  2452 ;;		_vfpfcnvrt
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text9
  2457   00168C                     __ptext9:
  2458                           	callstack 0
  2459   00168C                     _dtoa:
  2460                           	callstack 19
  2461   00168C                     
  2462                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2463   00168C  C022  F038         	movff	dtoa@d,dtoa@n
  2464   001690  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2465   001694  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2466   001698  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2467   00169C  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2468   0016A0  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2469   0016A4  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2470   0016A8  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2471   0016AC                     
  2472                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2473   0016AC  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2474   0016AE  EF5B  F00B         	goto	u1861
  2475   0016B2  EF5E  F00B         	goto	u1860
  2476   0016B6                     u1861:
  2477   0016B6  0E01               	movlw	1
  2478   0016B8  EF5F  F00B         	goto	u1870
  2479   0016BC                     u1860:
  2480   0016BC  0E00               	movlw	0
  2481   0016BE                     u1870:
  2482   0016BE  6E40               	movwf	dtoa@s^0,c
  2483   0016C0                     
  2484                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2485   0016C0  5040               	movf	dtoa@s^0,w,c
  2486   0016C2  B4D8               	btfsc	status,2,c
  2487   0016C4  EF66  F00B         	goto	u1881
  2488   0016C8  EF68  F00B         	goto	u1880
  2489   0016CC                     u1881:
  2490   0016CC  EF78  F00B         	goto	l3537
  2491   0016D0                     u1880:
  2492   0016D0                     
  2493                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2494   0016D0  1E3F               	comf	(dtoa@n+7)^0,f,c
  2495   0016D2  1E3E               	comf	(dtoa@n+6)^0,f,c
  2496   0016D4  1E3D               	comf	(dtoa@n+5)^0,f,c
  2497   0016D6  1E3C               	comf	(dtoa@n+4)^0,f,c
  2498   0016D8  1E3B               	comf	(dtoa@n+3)^0,f,c
  2499   0016DA  1E3A               	comf	(dtoa@n+2)^0,f,c
  2500   0016DC  1E39               	comf	(dtoa@n+1)^0,f,c
  2501   0016DE  6C38               	negf	dtoa@n^0,c
  2502   0016E0  0E00               	movlw	0
  2503   0016E2  2239               	addwfc	(dtoa@n+1)^0,f,c
  2504   0016E4  223A               	addwfc	(dtoa@n+2)^0,f,c
  2505   0016E6  223B               	addwfc	(dtoa@n+3)^0,f,c
  2506   0016E8  223C               	addwfc	(dtoa@n+4)^0,f,c
  2507   0016EA  223D               	addwfc	(dtoa@n+5)^0,f,c
  2508   0016EC  223E               	addwfc	(dtoa@n+6)^0,f,c
  2509   0016EE  223F               	addwfc	(dtoa@n+7)^0,f,c
  2510   0016F0                     l3537:
  2511                           
  2512                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2513   0016F0  0100               	movlb	0	; () banked
  2514   0016F2  BFFB               	btfsc	(_prec+1)& (0+255),7,b
  2515   0016F4  EF86  F00B         	goto	u1890
  2516   0016F8  51FB               	movf	(_prec+1)& (0+255),w,b
  2517   0016FA  E106               	bnz	u1891
  2518   0016FC  05FA               	decf	_prec& (0+255),w,b
  2519   0016FE  B0D8               	btfsc	status,0,c
  2520   001700  EF84  F00B         	goto	u1891
  2521   001704  EF86  F00B         	goto	u1890
  2522   001708                     u1891:
  2523   001708  EF8C  F00B         	goto	l1237
  2524   00170C                     u1890:
  2525   00170C                     
  2526                           ; BSR set to: 0
  2527   00170C  0E00               	movlw	0
  2528   00170E  6E35               	movwf	(dtoa@p+1)^0,c
  2529   001710  0E01               	movlw	1
  2530   001712  6E34               	movwf	dtoa@p^0,c
  2531   001714  EF90  F00B         	goto	l1239
  2532   001718                     l1237:
  2533                           
  2534                           ; BSR set to: 0
  2535   001718  C0FA  F034         	movff	_prec,dtoa@p
  2536   00171C  C0FB  F035         	movff	_prec+1,dtoa@p+1
  2537   001720                     l1239:
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2541   001720  C0F8  F036         	movff	_width,dtoa@w
  2542   001724  C0F9  F037         	movff	_width+1,dtoa@w+1
  2543   001728                     
  2544                           ; BSR set to: 0
  2545                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2546   001728  5040               	movf	dtoa@s^0,w,c
  2547   00172A  B4D8               	btfsc	status,2,c
  2548   00172C  EF9A  F00B         	goto	u1901
  2549   001730  EF9C  F00B         	goto	u1900
  2550   001734                     u1901:
  2551   001734  EFB3  F00B         	goto	l1240
  2552   001738                     u1900:
  2553   001738                     
  2554                           ; BSR set to: 0
  2555                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2556   001738  0636               	decf	dtoa@w^0,f,c
  2557   00173A  A0D8               	btfss	status,0,c
  2558   00173C  0637               	decf	(dtoa@w+1)^0,f,c
  2559   00173E                     
  2560                           ; BSR set to: 0
  2561                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2562   00173E  5040               	movf	dtoa@s^0,w,c
  2563   001740  A4D8               	btfss	status,2,c
  2564   001742  EFA5  F00B         	goto	u1911
  2565   001746  EFA7  F00B         	goto	u1910
  2566   00174A                     u1911:
  2567   00174A  EFAD  F00B         	goto	l3549
  2568   00174E                     u1910:
  2569   00174E                     
  2570                           ; BSR set to: 0
  2571   00174E  0E00               	movlw	0
  2572   001750  6E33               	movwf	(_dtoa$2557+1)^0,c
  2573   001752  0E2B               	movlw	43
  2574   001754  6E32               	movwf	_dtoa$2557^0,c
  2575   001756  EFB1  F00B         	goto	l3551
  2576   00175A                     l3549:
  2577                           
  2578                           ; BSR set to: 0
  2579   00175A  0E00               	movlw	0
  2580   00175C  6E33               	movwf	(_dtoa$2557+1)^0,c
  2581   00175E  0E2D               	movlw	45
  2582   001760  6E32               	movwf	_dtoa$2557^0,c
  2583   001762                     l3551:
  2584                           
  2585                           ; BSR set to: 0
  2586   001762  C032  F040         	movff	_dtoa$2557,dtoa@s
  2587   001766                     l1240:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2591   001766  0E00               	movlw	0
  2592   001768  6E42               	movwf	(dtoa@i+1)^0,c
  2593   00176A  0E1F               	movlw	31
  2594   00176C  6E41               	movwf	dtoa@i^0,c
  2595   00176E                     
  2596                           ; BSR set to: 0
  2597                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2598   00176E  0E00               	movlw	0
  2599   001770  0102               	movlb	2	; () banked
  2600   001772  6FE1               	movwf	(_dbuf+31)& (0+255),b
  2601                           
  2602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2603   001774  EF38  F00C         	goto	l3565
  2604   001778                     l3555:
  2605                           
  2606                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2607   001778  0641               	decf	dtoa@i^0,f,c
  2608   00177A  A0D8               	btfss	status,0,c
  2609   00177C  0642               	decf	(dtoa@i+1)^0,f,c
  2610   00177E                     
  2611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2612   00177E  0EC2               	movlw	low _dbuf
  2613   001780  2441               	addwf	dtoa@i^0,w,c
  2614   001782  6ED9               	movwf	fsr2l,c
  2615   001784  0E02               	movlw	high _dbuf
  2616   001786  2042               	addwfc	(dtoa@i+1)^0,w,c
  2617   001788  6EDA               	movwf	fsr2h,c
  2618   00178A  C038  F005         	movff	dtoa@n,___aomod@dividend
  2619   00178E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2620   001792  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2621   001796  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2622   00179A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2623   00179E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2624   0017A2  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2625   0017A6  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2626   0017AA  0E0A               	movlw	10
  2627   0017AC  6E0D               	movwf	___aomod@divisor^0,c
  2628   0017AE  0E00               	movlw	0
  2629   0017B0  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2630   0017B2  0E00               	movlw	0
  2631   0017B4  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2632   0017B6  0E00               	movlw	0
  2633   0017B8  6E10               	movwf	(___aomod@divisor+3)^0,c
  2634   0017BA  0E00               	movlw	0
  2635   0017BC  6E11               	movwf	(___aomod@divisor+4)^0,c
  2636   0017BE  0E00               	movlw	0
  2637   0017C0  6E12               	movwf	(___aomod@divisor+5)^0,c
  2638   0017C2  0E00               	movlw	0
  2639   0017C4  6E13               	movwf	(___aomod@divisor+6)^0,c
  2640   0017C6  0E00               	movlw	0
  2641   0017C8  6E14               	movwf	(___aomod@divisor+7)^0,c
  2642   0017CA  EC3A  F011         	call	___aomod	;wreg free
  2643   0017CE  C005  F02A         	movff	?___aomod,??_dtoa
  2644   0017D2  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2645   0017D6  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2646   0017DA  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2647   0017DE  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2648   0017E2  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2649   0017E6  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2650   0017EA  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2651   0017EE  C02A  F017         	movff	??_dtoa,abs@a
  2652   0017F2  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2653   0017F6  ECD9  F017         	call	_abs	;wreg free
  2654   0017FA  5017               	movf	?_abs^0,w,c
  2655   0017FC  0F30               	addlw	48
  2656   0017FE  6EDF               	movwf	indf2,c
  2657   001800                     
  2658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2659   001800  0634               	decf	dtoa@p^0,f,c
  2660   001802  A0D8               	btfss	status,0,c
  2661   001804  0635               	decf	(dtoa@p+1)^0,f,c
  2662   001806                     
  2663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2664   001806  0636               	decf	dtoa@w^0,f,c
  2665   001808  A0D8               	btfss	status,0,c
  2666   00180A  0637               	decf	(dtoa@w+1)^0,f,c
  2667   00180C                     
  2668                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2669   00180C  C038  F005         	movff	dtoa@n,___aodiv@dividend
  2670   001810  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  2671   001814  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  2672   001818  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  2673   00181C  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  2674   001820  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  2675   001824  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  2676   001828  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  2677   00182C  0E0A               	movlw	10
  2678   00182E  6E0D               	movwf	___aodiv@divisor^0,c
  2679   001830  0E00               	movlw	0
  2680   001832  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  2681   001834  0E00               	movlw	0
  2682   001836  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  2683   001838  0E00               	movlw	0
  2684   00183A  6E10               	movwf	(___aodiv@divisor+3)^0,c
  2685   00183C  0E00               	movlw	0
  2686   00183E  6E11               	movwf	(___aodiv@divisor+4)^0,c
  2687   001840  0E00               	movlw	0
  2688   001842  6E12               	movwf	(___aodiv@divisor+5)^0,c
  2689   001844  0E00               	movlw	0
  2690   001846  6E13               	movwf	(___aodiv@divisor+6)^0,c
  2691   001848  0E00               	movlw	0
  2692   00184A  6E14               	movwf	(___aodiv@divisor+7)^0,c
  2693   00184C  ECC0  F00F         	call	___aodiv	;wreg free
  2694   001850  C005  F038         	movff	?___aodiv,dtoa@n
  2695   001854  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  2696   001858  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  2697   00185C  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  2698   001860  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  2699   001864  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  2700   001868  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  2701   00186C  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  2702   001870                     l3565:
  2703                           
  2704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2705   001870  BE42               	btfsc	(dtoa@i+1)^0,7,c
  2706   001872  EF43  F00C         	goto	u1921
  2707   001876  5042               	movf	(dtoa@i+1)^0,w,c
  2708   001878  E108               	bnz	u1920
  2709   00187A  0441               	decf	dtoa@i^0,w,c
  2710   00187C  A0D8               	btfss	status,0,c
  2711   00187E  EF43  F00C         	goto	u1921
  2712   001882  EF45  F00C         	goto	u1920
  2713   001886                     u1921:
  2714   001886  EF61  F00C         	goto	l3571
  2715   00188A                     u1920:
  2716   00188A  5038               	movf	dtoa@n^0,w,c
  2717   00188C  1039               	iorwf	(dtoa@n+1)^0,w,c
  2718   00188E  103A               	iorwf	(dtoa@n+2)^0,w,c
  2719   001890  103B               	iorwf	(dtoa@n+3)^0,w,c
  2720   001892  103C               	iorwf	(dtoa@n+4)^0,w,c
  2721   001894  103D               	iorwf	(dtoa@n+5)^0,w,c
  2722   001896  103E               	iorwf	(dtoa@n+6)^0,w,c
  2723   001898  103F               	iorwf	(dtoa@n+7)^0,w,c
  2724   00189A  A4D8               	btfss	status,2,c
  2725   00189C  EF52  F00C         	goto	u1931
  2726   0018A0  EF54  F00C         	goto	u1930
  2727   0018A4                     u1931:
  2728   0018A4  EFBC  F00B         	goto	l3555
  2729   0018A8                     u1930:
  2730   0018A8  BE35               	btfsc	(dtoa@p+1)^0,7,c
  2731   0018AA  EF61  F00C         	goto	u1940
  2732   0018AE  5035               	movf	(dtoa@p+1)^0,w,c
  2733   0018B0  E106               	bnz	u1941
  2734   0018B2  0434               	decf	dtoa@p^0,w,c
  2735   0018B4  B0D8               	btfsc	status,0,c
  2736   0018B6  EF5F  F00C         	goto	u1941
  2737   0018BA  EF61  F00C         	goto	u1940
  2738   0018BE                     u1941:
  2739   0018BE  EFBC  F00B         	goto	l3555
  2740   0018C2                     u1940:
  2741   0018C2                     l3571:
  2742                           
  2743                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2744   0018C2  5040               	movf	dtoa@s^0,w,c
  2745   0018C4  B4D8               	btfsc	status,2,c
  2746   0018C6  EF67  F00C         	goto	u1951
  2747   0018CA  EF69  F00C         	goto	u1950
  2748   0018CE                     u1951:
  2749   0018CE  EF74  F00C         	goto	l3577
  2750   0018D2                     u1950:
  2751   0018D2                     
  2752                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2753   0018D2  0641               	decf	dtoa@i^0,f,c
  2754   0018D4  A0D8               	btfss	status,0,c
  2755   0018D6  0642               	decf	(dtoa@i+1)^0,f,c
  2756   0018D8                     
  2757                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2758   0018D8  0EC2               	movlw	low _dbuf
  2759   0018DA  2441               	addwf	dtoa@i^0,w,c
  2760   0018DC  6ED9               	movwf	fsr2l,c
  2761   0018DE  0E02               	movlw	high _dbuf
  2762   0018E0  2042               	addwfc	(dtoa@i+1)^0,w,c
  2763   0018E2  6EDA               	movwf	fsr2h,c
  2764   0018E4  C040  FFDF         	movff	dtoa@s,indf2
  2765   0018E8                     l3577:
  2766                           
  2767                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2768   0018E8  C020  F015         	movff	dtoa@fp,pad@fp
  2769   0018EC  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  2770   0018F0  0EC2               	movlw	low _dbuf
  2771   0018F2  2441               	addwf	dtoa@i^0,w,c
  2772   0018F4  6E17               	movwf	pad@buf^0,c
  2773   0018F6  0E02               	movlw	high _dbuf
  2774   0018F8  2042               	addwfc	(dtoa@i+1)^0,w,c
  2775   0018FA  6E18               	movwf	(pad@buf+1)^0,c
  2776   0018FC  C036  F019         	movff	dtoa@w,pad@p
  2777   001900  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2778   001904  EC54  F016         	call	_pad	;wreg free
  2779   001908  0012               	return		;funcret
  2780   00190A                     __end_of_dtoa:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _pad *****************
  2784 ;; Defined at:
  2785 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2788 ;;		 -> sprintf@f(11), 
  2789 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2790 ;;		 -> dbuf(32), 
  2791 ;;  p               2   24[COMRAM] int 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  w               2   29[COMRAM] int 
  2794 ;;  i               2   27[COMRAM] int 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2804 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2805 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2807 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2808 ;;Total ram usage:       11 bytes
  2809 ;; Hardware stack levels used: 1
  2810 ;; Hardware stack levels required when called: 7
  2811 ;; This function calls:
  2812 ;;		_fputc
  2813 ;;		_fputs
  2814 ;; This function is called by:
  2815 ;;		_dtoa
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text10
  2820   002CA8                     __ptext10:
  2821                           	callstack 0
  2822   002CA8                     _pad:
  2823                           	callstack 19
  2824   002CA8                     
  2825                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2826   002CA8  BE1A               	btfsc	(pad@p+1)^0,7,c
  2827   002CAA  EF59  F016         	goto	u1841
  2828   002CAE  EF5B  F016         	goto	u1840
  2829   002CB2                     u1841:
  2830   002CB2  EF61  F016         	goto	l3519
  2831   002CB6                     u1840:
  2832   002CB6  C019  F01E         	movff	pad@p,pad@w
  2833   002CBA  C01A  F01F         	movff	pad@p+1,pad@w+1
  2834   002CBE  EF65  F016         	goto	l1228
  2835   002CC2                     l3519:
  2836   002CC2  0E00               	movlw	0
  2837   002CC4  6E1F               	movwf	(pad@w+1)^0,c
  2838   002CC6  0E00               	movlw	0
  2839   002CC8  6E1E               	movwf	pad@w^0,c
  2840   002CCA                     l1228:
  2841                           
  2842                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2843   002CCA  0E00               	movlw	0
  2844   002CCC  6E1D               	movwf	(pad@i+1)^0,c
  2845   002CCE  0E00               	movlw	0
  2846   002CD0  6E1C               	movwf	pad@i^0,c
  2847                           
  2848                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2849   002CD2  EF77  F016         	goto	l3525
  2850   002CD6                     l3521:
  2851                           
  2852                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2853   002CD6  0E00               	movlw	0
  2854   002CD8  6E06               	movwf	(fputc@c+1)^0,c
  2855   002CDA  0E20               	movlw	32
  2856   002CDC  6E05               	movwf	fputc@c^0,c
  2857   002CDE  C015  F007         	movff	pad@fp,fputc@fp
  2858   002CE2  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2859   002CE6  ECA3  F013         	call	_fputc	;wreg free
  2860   002CEA                     
  2861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2862   002CEA  4A1C               	infsnz	pad@i^0,f,c
  2863   002CEC  2A1D               	incf	(pad@i+1)^0,f,c
  2864   002CEE                     l3525:
  2865                           
  2866                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2867   002CEE  501E               	movf	pad@w^0,w,c
  2868   002CF0  5C1C               	subwf	pad@i^0,w,c
  2869   002CF2  501D               	movf	(pad@i+1)^0,w,c
  2870   002CF4  0A80               	xorlw	128
  2871   002CF6  6E1B               	movwf	??_pad^0,c
  2872   002CF8  501F               	movf	(pad@w+1)^0,w,c
  2873   002CFA  0A80               	xorlw	128
  2874   002CFC  581B               	subwfb	??_pad^0,w,c
  2875   002CFE  A0D8               	btfss	status,0,c
  2876   002D00  EF84  F016         	goto	u1851
  2877   002D04  EF86  F016         	goto	u1850
  2878   002D08                     u1851:
  2879   002D08  EF6B  F016         	goto	l3521
  2880   002D0C                     u1850:
  2881   002D0C                     
  2882                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2883   002D0C  C017  F00E         	movff	pad@buf,fputs@s
  2884   002D10  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2885   002D14  C015  F010         	movff	pad@fp,fputs@fp
  2886   002D18  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2887   002D1C  EC96  F017         	call	_fputs	;wreg free
  2888   002D20  0012               	return		;funcret
  2889   002D22                     __end_of_pad:
  2890                           	callstack 0
  2891                           
  2892 ;; *************** function _fputs *****************
  2893 ;; Defined at:
  2894 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2897 ;;		 -> dbuf(32), 
  2898 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2899 ;;		 -> sprintf@f(11), 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  i               2   18[COMRAM] int 
  2902 ;;  c               1   17[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  2   13[COMRAM] int 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2915 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2916 ;;Total ram usage:        7 bytes
  2917 ;; Hardware stack levels used: 1
  2918 ;; Hardware stack levels required when called: 6
  2919 ;; This function calls:
  2920 ;;		_fputc
  2921 ;; This function is called by:
  2922 ;;		_pad
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text11
  2927   002F2C                     __ptext11:
  2928                           	callstack 0
  2929   002F2C                     _fputs:
  2930                           	callstack 19
  2931   002F2C  0E00               	movlw	0
  2932   002F2E  6E14               	movwf	(fputs@i+1)^0,c
  2933   002F30  0E00               	movlw	0
  2934   002F32  6E13               	movwf	fputs@i^0,c
  2935   002F34  EFA7  F017         	goto	l3429
  2936   002F38                     l3425:
  2937   002F38  C012  F005         	movff	fputs@c,fputc@c
  2938   002F3C  6A06               	clrf	(fputc@c+1)^0,c
  2939   002F3E  C010  F007         	movff	fputs@fp,fputc@fp
  2940   002F42  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2941   002F46  ECA3  F013         	call	_fputc	;wreg free
  2942   002F4A  4A13               	infsnz	fputs@i^0,f,c
  2943   002F4C  2A14               	incf	(fputs@i+1)^0,f,c
  2944   002F4E                     l3429:
  2945   002F4E  5013               	movf	fputs@i^0,w,c
  2946   002F50  240E               	addwf	fputs@s^0,w,c
  2947   002F52  6ED9               	movwf	fsr2l,c
  2948   002F54  5014               	movf	(fputs@i+1)^0,w,c
  2949   002F56  200F               	addwfc	(fputs@s+1)^0,w,c
  2950   002F58  6EDA               	movwf	fsr2h,c
  2951   002F5A  50DF               	movf	indf2,w,c
  2952   002F5C  6E12               	movwf	fputs@c^0,c
  2953   002F5E  5012               	movf	fputs@c^0,w,c
  2954   002F60  A4D8               	btfss	status,2,c
  2955   002F62  EFB5  F017         	goto	u1691
  2956   002F66  EFB7  F017         	goto	u1690
  2957   002F6A                     u1691:
  2958   002F6A  EF9C  F017         	goto	l3425
  2959   002F6E                     u1690:
  2960   002F6E  0012               	return		;funcret
  2961   002F70                     __end_of_fputs:
  2962                           	callstack 0
  2963                           
  2964 ;; *************** function _fputc *****************
  2965 ;; Defined at:
  2966 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  c               2    4[COMRAM] int 
  2969 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2970 ;;		 -> sprintf@f(11), 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  2    4[COMRAM] int 
  2975 ;; Registers used:
  2976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2984 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2985 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2986 ;;Total ram usage:        9 bytes
  2987 ;; Hardware stack levels used: 1
  2988 ;; Hardware stack levels required when called: 5
  2989 ;; This function calls:
  2990 ;;		_putch
  2991 ;; This function is called by:
  2992 ;;		_pad
  2993 ;;		_vfpfcnvrt
  2994 ;;		_fputs
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text12
  2999   002746                     __ptext12:
  3000                           	callstack 0
  3001   002746                     _fputc:
  3002                           	callstack 22
  3003   002746  5007               	movf	fputc@fp^0,w,c
  3004   002748  1008               	iorwf	(fputc@fp+1)^0,w,c
  3005   00274A  B4D8               	btfsc	status,2,c
  3006   00274C  EFAA  F013         	goto	u1651
  3007   002750  EFAC  F013         	goto	u1650
  3008   002754                     u1651:
  3009   002754  EFB5  F013         	goto	l3413
  3010   002758                     u1650:
  3011   002758  5007               	movf	fputc@fp^0,w,c
  3012   00275A  1008               	iorwf	(fputc@fp+1)^0,w,c
  3013   00275C  A4D8               	btfss	status,2,c
  3014   00275E  EFB3  F013         	goto	u1661
  3015   002762  EFB5  F013         	goto	u1660
  3016   002766                     u1661:
  3017   002766  EFBA  F013         	goto	l3415
  3018   00276A                     u1660:
  3019   00276A                     l3413:
  3020   00276A  5005               	movf	fputc@c^0,w,c
  3021   00276C  EC2C  F019         	call	_putch
  3022   002770  EF07  F014         	goto	l1276
  3023   002774                     l3415:
  3024   002774  EE20 F009          	lfsr	2,9
  3025   002778  5007               	movf	fputc@fp^0,w,c
  3026   00277A  26D9               	addwf	fsr2l,f,c
  3027   00277C  5008               	movf	(fputc@fp+1)^0,w,c
  3028   00277E  22DA               	addwfc	fsr2h,f,c
  3029   002780  50DE               	movf	postinc2,w,c
  3030   002782  10DE               	iorwf	postinc2,w,c
  3031   002784  B4D8               	btfsc	status,2,c
  3032   002786  EFC7  F013         	goto	u1671
  3033   00278A  EFC9  F013         	goto	u1670
  3034   00278E                     u1671:
  3035   00278E  EFE4  F013         	goto	l3419
  3036   002792                     u1670:
  3037   002792  EE20 F009          	lfsr	2,9
  3038   002796  5007               	movf	fputc@fp^0,w,c
  3039   002798  26D9               	addwf	fsr2l,f,c
  3040   00279A  5008               	movf	(fputc@fp+1)^0,w,c
  3041   00279C  22DA               	addwfc	fsr2h,f,c
  3042   00279E  EE10 F003          	lfsr	1,3
  3043   0027A2  5007               	movf	fputc@fp^0,w,c
  3044   0027A4  26E1               	addwf	fsr1l,f,c
  3045   0027A6  5008               	movf	(fputc@fp+1)^0,w,c
  3046   0027A8  22E2               	addwfc	fsr1h,f,c
  3047   0027AA  50DE               	movf	postinc2,w,c
  3048   0027AC  5CE6               	subwf	postinc1,w,c
  3049   0027AE  50E6               	movf	postinc1,w,c
  3050   0027B0  0A80               	xorlw	128
  3051   0027B2  6E0D               	movwf	(??_fputc+4)^0,c
  3052   0027B4  50DE               	movf	postinc2,w,c
  3053   0027B6  0A80               	xorlw	128
  3054   0027B8  580D               	subwfb	(??_fputc+4)^0,w,c
  3055   0027BA  B0D8               	btfsc	status,0,c
  3056   0027BC  EFE2  F013         	goto	u1681
  3057   0027C0  EFE4  F013         	goto	u1680
  3058   0027C4                     u1681:
  3059   0027C4  EF07  F014         	goto	l1276
  3060   0027C8                     u1680:
  3061   0027C8                     l3419:
  3062   0027C8  EE20 F003          	lfsr	2,3
  3063   0027CC  5007               	movf	fputc@fp^0,w,c
  3064   0027CE  26D9               	addwf	fsr2l,f,c
  3065   0027D0  5008               	movf	(fputc@fp+1)^0,w,c
  3066   0027D2  22DA               	addwfc	fsr2h,f,c
  3067   0027D4  CFDE F009          	movff	postinc2,??_fputc
  3068   0027D8  CFDD F00A          	movff	postdec2,??_fputc+1
  3069   0027DC  C007  FFD9         	movff	fputc@fp,fsr2l
  3070   0027E0  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3071   0027E4  CFDE F00B          	movff	postinc2,??_fputc+2
  3072   0027E8  CFDD F00C          	movff	postdec2,??_fputc+3
  3073   0027EC  5009               	movf	??_fputc^0,w,c
  3074   0027EE  240B               	addwf	(??_fputc+2)^0,w,c
  3075   0027F0  6ED9               	movwf	fsr2l,c
  3076   0027F2  500A               	movf	(??_fputc+1)^0,w,c
  3077   0027F4  200C               	addwfc	(??_fputc+3)^0,w,c
  3078   0027F6  6EDA               	movwf	fsr2h,c
  3079   0027F8  C005  FFDF         	movff	fputc@c,indf2
  3080   0027FC  EE20 F003          	lfsr	2,3
  3081   002800  5007               	movf	fputc@fp^0,w,c
  3082   002802  26D9               	addwf	fsr2l,f,c
  3083   002804  5008               	movf	(fputc@fp+1)^0,w,c
  3084   002806  22DA               	addwfc	fsr2h,f,c
  3085   002808  2ADE               	incf	postinc2,f,c
  3086   00280A  0E00               	movlw	0
  3087   00280C  22DD               	addwfc	postdec2,f,c
  3088   00280E                     l1276:
  3089   00280E  0012               	return		;funcret
  3090   002810                     __end_of_fputc:
  3091                           	callstack 0
  3092                           
  3093 ;; *************** function _putch *****************
  3094 ;; Defined at:
  3095 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  c               1    wreg     unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  c               1    0[COMRAM] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;Total ram usage:        0 bytes
  3114 ;; Hardware stack levels used: 1
  3115 ;; Hardware stack levels required when called: 4
  3116 ;; This function calls:
  3117 ;;		Nothing
  3118 ;; This function is called by:
  3119 ;;		_fputc
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text13
  3124   003258                     __ptext13:
  3125                           	callstack 0
  3126   003258                     _putch:
  3127                           	callstack 22
  3128   003258  0012               	return		;funcret
  3129   00325A                     __end_of_putch:
  3130                           	callstack 0
  3131                           
  3132 ;; *************** function ___aomod *****************
  3133 ;; Defined at:
  3134 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;  dividend        8    4[COMRAM] long long 
  3137 ;;  divisor         8   12[COMRAM] long long 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  sign            1   21[COMRAM] unsigned char 
  3140 ;;  counter         1   20[COMRAM] unsigned char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  8    4[COMRAM] long long 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3150 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;Total ram usage:       18 bytes
  3155 ;; Hardware stack levels used: 1
  3156 ;; Hardware stack levels required when called: 4
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_dtoa
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text14
  3165   002274                     __ptext14:
  3166                           	callstack 0
  3167   002274                     ___aomod:
  3168                           	callstack 22
  3169   002274  0E00               	movlw	0
  3170   002276  6E16               	movwf	___aomod@sign^0,c
  3171   002278  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3172   00227A  EF43  F011         	goto	u1780
  3173   00227E  EF41  F011         	goto	u1781
  3174   002282                     u1781:
  3175   002282  EF55  F011         	goto	l3487
  3176   002286                     u1780:
  3177   002286  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3178   002288  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3179   00228A  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3180   00228C  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3181   00228E  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3182   002290  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3183   002292  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3184   002294  6C05               	negf	___aomod@dividend^0,c
  3185   002296  0E00               	movlw	0
  3186   002298  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3187   00229A  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3188   00229C  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3189   00229E  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3190   0022A0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3191   0022A2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3192   0022A4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3193   0022A6  0E01               	movlw	1
  3194   0022A8  6E16               	movwf	___aomod@sign^0,c
  3195   0022AA                     l3487:
  3196   0022AA  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3197   0022AC  EF5C  F011         	goto	u1790
  3198   0022B0  EF5A  F011         	goto	u1791
  3199   0022B4                     u1791:
  3200   0022B4  EF6C  F011         	goto	l3491
  3201   0022B8                     u1790:
  3202   0022B8  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3203   0022BA  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3204   0022BC  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3205   0022BE  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3206   0022C0  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3207   0022C2  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3208   0022C4  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3209   0022C6  6C0D               	negf	___aomod@divisor^0,c
  3210   0022C8  0E00               	movlw	0
  3211   0022CA  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3212   0022CC  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3213   0022CE  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3214   0022D0  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3215   0022D2  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3216   0022D4  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3217   0022D6  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3218   0022D8                     l3491:
  3219   0022D8  500D               	movf	___aomod@divisor^0,w,c
  3220   0022DA  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3221   0022DC  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3222   0022DE  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3223   0022E0  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3224   0022E2  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3225   0022E4  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3226   0022E6  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3227   0022E8  B4D8               	btfsc	status,2,c
  3228   0022EA  EF79  F011         	goto	u1801
  3229   0022EE  EF7B  F011         	goto	u1800
  3230   0022F2                     u1801:
  3231   0022F2  EFC3  F011         	goto	l3507
  3232   0022F6                     u1800:
  3233   0022F6  0E01               	movlw	1
  3234   0022F8  6E15               	movwf	___aomod@counter^0,c
  3235   0022FA  EF89  F011         	goto	l3497
  3236   0022FE                     l3495:
  3237   0022FE  90D8               	bcf	status,0,c
  3238   002300  360D               	rlcf	___aomod@divisor^0,f,c
  3239   002302  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3240   002304  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3241   002306  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3242   002308  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3243   00230A  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3244   00230C  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3245   00230E  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3246   002310  2A15               	incf	___aomod@counter^0,f,c
  3247   002312                     l3497:
  3248   002312  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3249   002314  EF8E  F011         	goto	u1811
  3250   002318  EF90  F011         	goto	u1810
  3251   00231C                     u1811:
  3252   00231C  EF7F  F011         	goto	l3495
  3253   002320                     u1810:
  3254   002320                     l3499:
  3255   002320  500D               	movf	___aomod@divisor^0,w,c
  3256   002322  5C05               	subwf	___aomod@dividend^0,w,c
  3257   002324  500E               	movf	(___aomod@divisor+1)^0,w,c
  3258   002326  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3259   002328  500F               	movf	(___aomod@divisor+2)^0,w,c
  3260   00232A  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3261   00232C  5010               	movf	(___aomod@divisor+3)^0,w,c
  3262   00232E  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3263   002330  5011               	movf	(___aomod@divisor+4)^0,w,c
  3264   002332  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3265   002334  5012               	movf	(___aomod@divisor+5)^0,w,c
  3266   002336  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3267   002338  5013               	movf	(___aomod@divisor+6)^0,w,c
  3268   00233A  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3269   00233C  5014               	movf	(___aomod@divisor+7)^0,w,c
  3270   00233E  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3271   002340  A0D8               	btfss	status,0,c
  3272   002342  EFA5  F011         	goto	u1821
  3273   002346  EFA7  F011         	goto	u1820
  3274   00234A                     u1821:
  3275   00234A  EFB7  F011         	goto	l3503
  3276   00234E                     u1820:
  3277   00234E  500D               	movf	___aomod@divisor^0,w,c
  3278   002350  5E05               	subwf	___aomod@dividend^0,f,c
  3279   002352  500E               	movf	(___aomod@divisor+1)^0,w,c
  3280   002354  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3281   002356  500F               	movf	(___aomod@divisor+2)^0,w,c
  3282   002358  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3283   00235A  5010               	movf	(___aomod@divisor+3)^0,w,c
  3284   00235C  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3285   00235E  5011               	movf	(___aomod@divisor+4)^0,w,c
  3286   002360  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3287   002362  5012               	movf	(___aomod@divisor+5)^0,w,c
  3288   002364  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3289   002366  5013               	movf	(___aomod@divisor+6)^0,w,c
  3290   002368  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3291   00236A  5014               	movf	(___aomod@divisor+7)^0,w,c
  3292   00236C  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3293   00236E                     l3503:
  3294   00236E  90D8               	bcf	status,0,c
  3295   002370  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3296   002372  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3297   002374  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3298   002376  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3299   002378  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3300   00237A  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3301   00237C  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3302   00237E  320D               	rrcf	___aomod@divisor^0,f,c
  3303   002380  2E15               	decfsz	___aomod@counter^0,f,c
  3304   002382  EF90  F011         	goto	l3499
  3305   002386                     l3507:
  3306   002386  5016               	movf	___aomod@sign^0,w,c
  3307   002388  B4D8               	btfsc	status,2,c
  3308   00238A  EFC9  F011         	goto	u1831
  3309   00238E  EFCB  F011         	goto	u1830
  3310   002392                     u1831:
  3311   002392  EFDB  F011         	goto	l3511
  3312   002396                     u1830:
  3313   002396  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3314   002398  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3315   00239A  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3316   00239C  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3317   00239E  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3318   0023A0  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3319   0023A2  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3320   0023A4  6C05               	negf	___aomod@dividend^0,c
  3321   0023A6  0E00               	movlw	0
  3322   0023A8  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3323   0023AA  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3324   0023AC  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3325   0023AE  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3326   0023B0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3327   0023B2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3328   0023B4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3329   0023B6                     l3511:
  3330   0023B6  C005  F005         	movff	___aomod@dividend,?___aomod
  3331   0023BA  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3332   0023BE  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3333   0023C2  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3334   0023C6  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3335   0023CA  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3336   0023CE  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3337   0023D2  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3338   0023D6  0012               	return		;funcret
  3339   0023D8                     __end_of___aomod:
  3340                           	callstack 0
  3341                           
  3342 ;; *************** function ___aodiv *****************
  3343 ;; Defined at:
  3344 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  dividend        8    4[COMRAM] long long 
  3347 ;;  divisor         8   12[COMRAM] long long 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  quotient        8   22[COMRAM] long long 
  3350 ;;  sign            1   21[COMRAM] unsigned char 
  3351 ;;  counter         1   20[COMRAM] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  8    4[COMRAM] long long 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3361 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3362 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3365 ;;Total ram usage:       26 bytes
  3366 ;; Hardware stack levels used: 1
  3367 ;; Hardware stack levels required when called: 4
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_dtoa
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text15
  3376   001F80                     __ptext15:
  3377                           	callstack 0
  3378   001F80                     ___aodiv:
  3379                           	callstack 22
  3380   001F80  0E00               	movlw	0
  3381   001F82  6E16               	movwf	___aodiv@sign^0,c
  3382   001F84  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3383   001F86  EFC9  F00F         	goto	u1710
  3384   001F8A  EFC7  F00F         	goto	u1711
  3385   001F8E                     u1711:
  3386   001F8E  EFDB  F00F         	goto	l3443
  3387   001F92                     u1710:
  3388   001F92  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3389   001F94  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3390   001F96  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3391   001F98  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3392   001F9A  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3393   001F9C  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3394   001F9E  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3395   001FA0  6C0D               	negf	___aodiv@divisor^0,c
  3396   001FA2  0E00               	movlw	0
  3397   001FA4  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3398   001FA6  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3399   001FA8  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3400   001FAA  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3401   001FAC  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3402   001FAE  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3403   001FB0  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3404   001FB2  0E01               	movlw	1
  3405   001FB4  6E16               	movwf	___aodiv@sign^0,c
  3406   001FB6                     l3443:
  3407   001FB6  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3408   001FB8  EFE2  F00F         	goto	u1720
  3409   001FBC  EFE0  F00F         	goto	u1721
  3410   001FC0                     u1721:
  3411   001FC0  EFF4  F00F         	goto	l3449
  3412   001FC4                     u1720:
  3413   001FC4  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3414   001FC6  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3415   001FC8  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3416   001FCA  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3417   001FCC  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3418   001FCE  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3419   001FD0  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3420   001FD2  6C05               	negf	___aodiv@dividend^0,c
  3421   001FD4  0E00               	movlw	0
  3422   001FD6  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3423   001FD8  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3424   001FDA  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3425   001FDC  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3426   001FDE  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3427   001FE0  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3428   001FE2  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3429   001FE4  0E01               	movlw	1
  3430   001FE6  1A16               	xorwf	___aodiv@sign^0,f,c
  3431   001FE8                     l3449:
  3432   001FE8  EE20  F017         	lfsr	2,___aodiv@quotient
  3433   001FEC  0E07               	movlw	7
  3434   001FEE                     u1731:
  3435   001FEE  6ADE               	clrf	postinc2,c
  3436   001FF0  06E8               	decf	wreg,f,c
  3437   001FF2  E2FD               	bc	u1731
  3438   001FF4  500D               	movf	___aodiv@divisor^0,w,c
  3439   001FF6  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3440   001FF8  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3441   001FFA  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3442   001FFC  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3443   001FFE  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3444   002000  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3445   002002  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3446   002004  B4D8               	btfsc	status,2,c
  3447   002006  EF07  F010         	goto	u1741
  3448   00200A  EF09  F010         	goto	u1740
  3449   00200E                     u1741:
  3450   00200E  EF5B  F010         	goto	l3471
  3451   002012                     u1740:
  3452   002012  0E01               	movlw	1
  3453   002014  6E15               	movwf	___aodiv@counter^0,c
  3454   002016  EF17  F010         	goto	l3457
  3455   00201A                     l3455:
  3456   00201A  90D8               	bcf	status,0,c
  3457   00201C  360D               	rlcf	___aodiv@divisor^0,f,c
  3458   00201E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3459   002020  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3460   002022  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3461   002024  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3462   002026  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3463   002028  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3464   00202A  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3465   00202C  2A15               	incf	___aodiv@counter^0,f,c
  3466   00202E                     l3457:
  3467   00202E  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3468   002030  EF1C  F010         	goto	u1751
  3469   002034  EF1E  F010         	goto	u1750
  3470   002038                     u1751:
  3471   002038  EF0D  F010         	goto	l3455
  3472   00203C                     u1750:
  3473   00203C                     l3459:
  3474   00203C  90D8               	bcf	status,0,c
  3475   00203E  3617               	rlcf	___aodiv@quotient^0,f,c
  3476   002040  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3477   002042  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3478   002044  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3479   002046  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3480   002048  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3481   00204A  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3482   00204C  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3483   00204E  500D               	movf	___aodiv@divisor^0,w,c
  3484   002050  5C05               	subwf	___aodiv@dividend^0,w,c
  3485   002052  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3486   002054  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3487   002056  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3488   002058  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3489   00205A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3490   00205C  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3491   00205E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3492   002060  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3493   002062  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3494   002064  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3495   002066  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3496   002068  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3497   00206A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3498   00206C  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3499   00206E  A0D8               	btfss	status,0,c
  3500   002070  EF3C  F010         	goto	u1761
  3501   002074  EF3E  F010         	goto	u1760
  3502   002078                     u1761:
  3503   002078  EF4F  F010         	goto	l3467
  3504   00207C                     u1760:
  3505   00207C  500D               	movf	___aodiv@divisor^0,w,c
  3506   00207E  5E05               	subwf	___aodiv@dividend^0,f,c
  3507   002080  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3508   002082  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3509   002084  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3510   002086  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3511   002088  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3512   00208A  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3513   00208C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3514   00208E  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3515   002090  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3516   002092  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3517   002094  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3518   002096  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3519   002098  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3520   00209A  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3521   00209C  8017               	bsf	___aodiv@quotient^0,0,c
  3522   00209E                     l3467:
  3523   00209E  90D8               	bcf	status,0,c
  3524   0020A0  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3525   0020A2  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3526   0020A4  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3527   0020A6  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3528   0020A8  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3529   0020AA  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3530   0020AC  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3531   0020AE  320D               	rrcf	___aodiv@divisor^0,f,c
  3532   0020B0  2E15               	decfsz	___aodiv@counter^0,f,c
  3533   0020B2  EF1E  F010         	goto	l3459
  3534   0020B6                     l3471:
  3535   0020B6  5016               	movf	___aodiv@sign^0,w,c
  3536   0020B8  B4D8               	btfsc	status,2,c
  3537   0020BA  EF61  F010         	goto	u1771
  3538   0020BE  EF63  F010         	goto	u1770
  3539   0020C2                     u1771:
  3540   0020C2  EF73  F010         	goto	l3475
  3541   0020C6                     u1770:
  3542   0020C6  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3543   0020C8  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3544   0020CA  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3545   0020CC  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3546   0020CE  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3547   0020D0  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3548   0020D2  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3549   0020D4  6C17               	negf	___aodiv@quotient^0,c
  3550   0020D6  0E00               	movlw	0
  3551   0020D8  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3552   0020DA  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3553   0020DC  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3554   0020DE  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3555   0020E0  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3556   0020E2  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3557   0020E4  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3558   0020E6                     l3475:
  3559   0020E6  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3560   0020EA  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3561   0020EE  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3562   0020F2  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3563   0020F6  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3564   0020FA  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3565   0020FE  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3566   002102  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3567   002106  0012               	return		;funcret
  3568   002108                     __end_of___aodiv:
  3569                           	callstack 0
  3570                           
  3571 ;; *************** function _sendStringSerial4 *****************
  3572 ;; Defined at:
  3573 ;;		line 39 in file "serial.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  string          2    5[COMRAM] PTR unsigned char 
  3576 ;;		 -> main@buf(150), 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3592 ;;Total ram usage:        2 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; Hardware stack levels required when called: 5
  3595 ;; This function calls:
  3596 ;;		_sendCharSerial4
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;;		_card_response
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text16
  3604   00305A                     __ptext16:
  3605                           	callstack 0
  3606   00305A                     _sendStringSerial4:
  3607                           	callstack 25
  3608   00305A                     
  3609                           ;serial.c: 40:  while(*string != 0) {
  3610   00305A  EF38  F018         	goto	l2897
  3611   00305E                     l2893:
  3612                           
  3613                           ;serial.c: 41:         sendCharSerial4(*string++);
  3614   00305E  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3615   003062  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3616   003066  50DF               	movf	indf2,w,c
  3617   003068  ECDD  F018         	call	_sendCharSerial4
  3618   00306C  4A06               	infsnz	sendStringSerial4@string^0,f,c
  3619   00306E  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  3620   003070                     l2897:
  3621                           
  3622                           ;serial.c: 40:  while(*string != 0) {
  3623   003070  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3624   003074  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3625   003078  50DF               	movf	indf2,w,c
  3626   00307A  A4D8               	btfss	status,2,c
  3627   00307C  EF42  F018         	goto	u1421
  3628   003080  EF44  F018         	goto	u1420
  3629   003084                     u1421:
  3630   003084  EF2F  F018         	goto	l2893
  3631   003088                     u1420:
  3632   003088  0012               	return		;funcret
  3633   00308A                     __end_of_sendStringSerial4:
  3634                           	callstack 0
  3635                           
  3636 ;; *************** function _sendCharSerial4 *****************
  3637 ;; Defined at:
  3638 ;;		line 32 in file "serial.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  charToSend      1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  charToSend      1    4[COMRAM] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3656 ;;Total ram usage:        1 bytes
  3657 ;; Hardware stack levels used: 1
  3658 ;; Hardware stack levels required when called: 4
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_sendStringSerial4
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text17
  3667   0031BA                     __ptext17:
  3668                           	callstack 0
  3669   0031BA                     _sendCharSerial4:
  3670                           	callstack 25
  3671                           
  3672                           ;incstack = 0
  3673                           ;sendCharSerial4@charToSend stored from wreg
  3674   0031BA  6E05               	movwf	sendCharSerial4@charToSend^0,c
  3675   0031BC                     l413:
  3676   0031BC  010E               	movlb	14	; () banked
  3677   0031BE  A537               	btfss	55,2,b	;volatile
  3678   0031C0  EFE4  F018         	goto	u1341
  3679   0031C4  EFE6  F018         	goto	u1340
  3680   0031C8                     u1341:
  3681   0031C8  EFDE  F018         	goto	l413
  3682   0031CC                     u1340:
  3683   0031CC                     
  3684                           ; BSR set to: 14
  3685                           ;serial.c: 34:     TX4REG = charToSend;
  3686   0031CC  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3687   0031D0                     
  3688                           ; BSR set to: 14
  3689   0031D0  0012               	return		;funcret
  3690   0031D2                     __end_of_sendCharSerial4:
  3691                           	callstack 0
  3692                           
  3693 ;; *************** function _normalise_readings *****************
  3694 ;; Defined at:
  3695 ;;		line 57 in file "colour_identify.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  buf             2   26[COMRAM] PTR unsigned char 
  3698 ;;		 -> main@buf(150), 
  3699 ;;  red_read        2   28[COMRAM] unsigned int 
  3700 ;;  green_read      2   30[COMRAM] unsigned int 
  3701 ;;  blue_read       2   32[COMRAM] unsigned int 
  3702 ;;  expected_val    2   34[COMRAM] PTR unsigned int [9]
  3703 ;;		 -> main@expected_values(54), 
  3704 ;;  normalised_v    2   36[COMRAM] PTR unsigned int [9]
  3705 ;;		 -> card_response@normalised_values(54), 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  difference      2   46[COMRAM] unsigned int 
  3708 ;;  i               1   48[COMRAM] enum E14551
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3718 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3720 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3722 ;;Total ram usage:       23 bytes
  3723 ;; Hardware stack levels used: 1
  3724 ;; Hardware stack levels required when called: 5
  3725 ;; This function calls:
  3726 ;;		___lwdiv
  3727 ;;		___wmul
  3728 ;;		_abs
  3729 ;; This function is called by:
  3730 ;;		_card_response
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text18
  3735   001B72                     __ptext18:
  3736                           	callstack 0
  3737   001B72                     _normalise_readings:
  3738                           	callstack 24
  3739   001B72                     
  3740                           ;colour_identify.c: 64:     for(colour i = RED; i<= BLACK; i++){
  3741   001B72  0E00               	movlw	0
  3742   001B74  6E31               	movwf	normalise_readings@i^0,c
  3743   001B76                     l3639:
  3744                           
  3745                           ;colour_identify.c: 68:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3746   001B76  5031               	movf	normalise_readings@i^0,w,c
  3747   001B78  0D02               	mullw	2
  3748   001B7A  CFF3 F027          	movff	prodl,??_normalise_readings
  3749   001B7E  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3750   001B82  5027               	movf	??_normalise_readings^0,w,c
  3751   001B84  2423               	addwf	normalise_readings@expected_values^0,w,c
  3752   001B86  6ED9               	movwf	fsr2l,c
  3753   001B88  5028               	movf	(??_normalise_readings+1)^0,w,c
  3754   001B8A  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3755   001B8C  6EDA               	movwf	fsr2h,c
  3756   001B8E  CFDE F029          	movff	postinc2,??_normalise_readings+2
  3757   001B92  CFDD F02A          	movff	postdec2,??_normalise_readings+3
  3758   001B96  5029               	movf	(??_normalise_readings+2)^0,w,c
  3759   001B98  5C1D               	subwf	normalise_readings@red_read^0,w,c
  3760   001B9A  6E17               	movwf	abs@a^0,c
  3761   001B9C  502A               	movf	(??_normalise_readings+3)^0,w,c
  3762   001B9E  581E               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3763   001BA0  6E18               	movwf	(abs@a+1)^0,c
  3764   001BA2  ECD9  F017         	call	_abs	;wreg free
  3765   001BA6  C017  F02F         	movff	?_abs,normalise_readings@difference
  3766   001BAA  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3767                           
  3768                           ;colour_identify.c: 69:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3769   001BAE  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3770   001BB2  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3771   001BB6  0E00               	movlw	0
  3772   001BB8  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3773   001BBA  0E64               	movlw	100
  3774   001BBC  6E07               	movwf	___wmul@multiplicand^0,c
  3775   001BBE  EC99  F018         	call	___wmul	;wreg free
  3776   001BC2  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3777   001BC6  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3778   001BCA  5031               	movf	normalise_readings@i^0,w,c
  3779   001BCC  0D02               	mullw	2
  3780   001BCE  CFF3 F027          	movff	prodl,??_normalise_readings
  3781   001BD2  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3782   001BD6  5027               	movf	??_normalise_readings^0,w,c
  3783   001BD8  2423               	addwf	normalise_readings@expected_values^0,w,c
  3784   001BDA  6ED9               	movwf	fsr2l,c
  3785   001BDC  5028               	movf	(??_normalise_readings+1)^0,w,c
  3786   001BDE  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3787   001BE0  6EDA               	movwf	fsr2h,c
  3788   001BE2  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3789   001BE6  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3790   001BEA  EC91  F016         	call	___lwdiv	;wreg free
  3791   001BEE  5031               	movf	normalise_readings@i^0,w,c
  3792   001BF0  0D02               	mullw	2
  3793   001BF2  CFF3 F029          	movff	prodl,??_normalise_readings+2
  3794   001BF6  CFF4 F02A          	movff	prodh,??_normalise_readings+3
  3795   001BFA  5029               	movf	(??_normalise_readings+2)^0,w,c
  3796   001BFC  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3797   001BFE  6ED9               	movwf	fsr2l,c
  3798   001C00  502A               	movf	(??_normalise_readings+3)^0,w,c
  3799   001C02  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3800   001C04  6EDA               	movwf	fsr2h,c
  3801   001C06  C00B  FFDE         	movff	?___lwdiv,postinc2
  3802   001C0A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3803                           
  3804                           ;colour_identify.c: 72:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3805   001C0E  5031               	movf	normalise_readings@i^0,w,c
  3806   001C10  0D02               	mullw	2
  3807   001C12  CFF3 F027          	movff	prodl,??_normalise_readings
  3808   001C16  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3809   001C1A  5027               	movf	??_normalise_readings^0,w,c
  3810   001C1C  2423               	addwf	normalise_readings@expected_values^0,w,c
  3811   001C1E  6E29               	movwf	(??_normalise_readings+2)^0,c
  3812   001C20  5028               	movf	(??_normalise_readings+1)^0,w,c
  3813   001C22  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3814   001C24  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3815   001C26  0E12               	movlw	18
  3816   001C28  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3817   001C2A  6ED9               	movwf	fsr2l,c
  3818   001C2C  0E00               	movlw	0
  3819   001C2E  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3820   001C30  6EDA               	movwf	fsr2h,c
  3821   001C32  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  3822   001C36  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  3823   001C3A  502B               	movf	(??_normalise_readings+4)^0,w,c
  3824   001C3C  5C1F               	subwf	normalise_readings@green_read^0,w,c
  3825   001C3E  6E17               	movwf	abs@a^0,c
  3826   001C40  502C               	movf	(??_normalise_readings+5)^0,w,c
  3827   001C42  5820               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3828   001C44  6E18               	movwf	(abs@a+1)^0,c
  3829   001C46  ECD9  F017         	call	_abs	;wreg free
  3830   001C4A  C017  F02F         	movff	?_abs,normalise_readings@difference
  3831   001C4E  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3832                           
  3833                           ;colour_identify.c: 73:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3834   001C52  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3835   001C56  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3836   001C5A  0E00               	movlw	0
  3837   001C5C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3838   001C5E  0E64               	movlw	100
  3839   001C60  6E07               	movwf	___wmul@multiplicand^0,c
  3840   001C62  EC99  F018         	call	___wmul	;wreg free
  3841   001C66  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3842   001C6A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3843   001C6E  5031               	movf	normalise_readings@i^0,w,c
  3844   001C70  0D02               	mullw	2
  3845   001C72  CFF3 F027          	movff	prodl,??_normalise_readings
  3846   001C76  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3847   001C7A  5027               	movf	??_normalise_readings^0,w,c
  3848   001C7C  2423               	addwf	normalise_readings@expected_values^0,w,c
  3849   001C7E  6E29               	movwf	(??_normalise_readings+2)^0,c
  3850   001C80  5028               	movf	(??_normalise_readings+1)^0,w,c
  3851   001C82  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3852   001C84  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3853   001C86  0E12               	movlw	18
  3854   001C88  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3855   001C8A  6ED9               	movwf	fsr2l,c
  3856   001C8C  0E00               	movlw	0
  3857   001C8E  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3858   001C90  6EDA               	movwf	fsr2h,c
  3859   001C92  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3860   001C96  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3861   001C9A  EC91  F016         	call	___lwdiv	;wreg free
  3862   001C9E  5031               	movf	normalise_readings@i^0,w,c
  3863   001CA0  0D02               	mullw	2
  3864   001CA2  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  3865   001CA6  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  3866   001CAA  502B               	movf	(??_normalise_readings+4)^0,w,c
  3867   001CAC  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3868   001CAE  6E2D               	movwf	(??_normalise_readings+6)^0,c
  3869   001CB0  502C               	movf	(??_normalise_readings+5)^0,w,c
  3870   001CB2  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3871   001CB4  6E2E               	movwf	(??_normalise_readings+7)^0,c
  3872   001CB6  0E12               	movlw	18
  3873   001CB8  242D               	addwf	(??_normalise_readings+6)^0,w,c
  3874   001CBA  6ED9               	movwf	fsr2l,c
  3875   001CBC  0E00               	movlw	0
  3876   001CBE  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  3877   001CC0  6EDA               	movwf	fsr2h,c
  3878   001CC2  C00B  FFDE         	movff	?___lwdiv,postinc2
  3879   001CC6  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3880                           
  3881                           ;colour_identify.c: 76:         difference = abs(blue_read - expected_values[BLUE][i]);
  3882   001CCA  5031               	movf	normalise_readings@i^0,w,c
  3883   001CCC  0D02               	mullw	2
  3884   001CCE  CFF3 F027          	movff	prodl,??_normalise_readings
  3885   001CD2  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3886   001CD6  5027               	movf	??_normalise_readings^0,w,c
  3887   001CD8  2423               	addwf	normalise_readings@expected_values^0,w,c
  3888   001CDA  6E29               	movwf	(??_normalise_readings+2)^0,c
  3889   001CDC  5028               	movf	(??_normalise_readings+1)^0,w,c
  3890   001CDE  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3891   001CE0  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3892   001CE2  0E24               	movlw	36
  3893   001CE4  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3894   001CE6  6ED9               	movwf	fsr2l,c
  3895   001CE8  0E00               	movlw	0
  3896   001CEA  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3897   001CEC  6EDA               	movwf	fsr2h,c
  3898   001CEE  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  3899   001CF2  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  3900   001CF6  502B               	movf	(??_normalise_readings+4)^0,w,c
  3901   001CF8  5C21               	subwf	normalise_readings@blue_read^0,w,c
  3902   001CFA  6E17               	movwf	abs@a^0,c
  3903   001CFC  502C               	movf	(??_normalise_readings+5)^0,w,c
  3904   001CFE  5822               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3905   001D00  6E18               	movwf	(abs@a+1)^0,c
  3906   001D02  ECD9  F017         	call	_abs	;wreg free
  3907   001D06  C017  F02F         	movff	?_abs,normalise_readings@difference
  3908   001D0A  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3909                           
  3910                           ;colour_identify.c: 77:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3911   001D0E  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3912   001D12  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3913   001D16  0E00               	movlw	0
  3914   001D18  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3915   001D1A  0E64               	movlw	100
  3916   001D1C  6E07               	movwf	___wmul@multiplicand^0,c
  3917   001D1E  EC99  F018         	call	___wmul	;wreg free
  3918   001D22  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3919   001D26  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3920   001D2A  5031               	movf	normalise_readings@i^0,w,c
  3921   001D2C  0D02               	mullw	2
  3922   001D2E  CFF3 F027          	movff	prodl,??_normalise_readings
  3923   001D32  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3924   001D36  5027               	movf	??_normalise_readings^0,w,c
  3925   001D38  2423               	addwf	normalise_readings@expected_values^0,w,c
  3926   001D3A  6E29               	movwf	(??_normalise_readings+2)^0,c
  3927   001D3C  5028               	movf	(??_normalise_readings+1)^0,w,c
  3928   001D3E  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3929   001D40  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3930   001D42  0E24               	movlw	36
  3931   001D44  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3932   001D46  6ED9               	movwf	fsr2l,c
  3933   001D48  0E00               	movlw	0
  3934   001D4A  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3935   001D4C  6EDA               	movwf	fsr2h,c
  3936   001D4E  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3937   001D52  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3938   001D56  EC91  F016         	call	___lwdiv	;wreg free
  3939   001D5A  5031               	movf	normalise_readings@i^0,w,c
  3940   001D5C  0D02               	mullw	2
  3941   001D5E  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  3942   001D62  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  3943   001D66  502B               	movf	(??_normalise_readings+4)^0,w,c
  3944   001D68  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3945   001D6A  6E2D               	movwf	(??_normalise_readings+6)^0,c
  3946   001D6C  502C               	movf	(??_normalise_readings+5)^0,w,c
  3947   001D6E  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3948   001D70  6E2E               	movwf	(??_normalise_readings+7)^0,c
  3949   001D72  0E24               	movlw	36
  3950   001D74  242D               	addwf	(??_normalise_readings+6)^0,w,c
  3951   001D76  6ED9               	movwf	fsr2l,c
  3952   001D78  0E00               	movlw	0
  3953   001D7A  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  3954   001D7C  6EDA               	movwf	fsr2h,c
  3955   001D7E  C00B  FFDE         	movff	?___lwdiv,postinc2
  3956   001D82  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3957   001D86                     
  3958                           ;colour_identify.c: 78:     }
  3959   001D86  2A31               	incf	normalise_readings@i^0,f,c
  3960   001D88  0E08               	movlw	8
  3961   001D8A  6431               	cpfsgt	normalise_readings@i^0,c
  3962   001D8C  EFCA  F00E         	goto	u2001
  3963   001D90  EFCC  F00E         	goto	u2000
  3964   001D94                     u2001:
  3965   001D94  EFBB  F00D         	goto	l3639
  3966   001D98                     u2000:
  3967   001D98  0012               	return		;funcret
  3968   001D9A                     __end_of_normalise_readings:
  3969                           	callstack 0
  3970                           
  3971 ;; *************** function _abs *****************
  3972 ;; Defined at:
  3973 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  a               2   22[COMRAM] int 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  2   22[COMRAM] int 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3990 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3991 ;;Total ram usage:        4 bytes
  3992 ;; Hardware stack levels used: 1
  3993 ;; Hardware stack levels required when called: 4
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_normalise_readings
  3998 ;;		_dtoa
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text19
  4003   002FB2                     __ptext19:
  4004                           	callstack 0
  4005   002FB2                     _abs:
  4006                           	callstack 22
  4007   002FB2  BE18               	btfsc	(abs@a+1)^0,7,c
  4008   002FB4  EFE6  F017         	goto	u1700
  4009   002FB8  5018               	movf	(abs@a+1)^0,w,c
  4010   002FBA  E106               	bnz	u1701
  4011   002FBC  0417               	decf	abs@a^0,w,c
  4012   002FBE  B0D8               	btfsc	status,0,c
  4013   002FC0  EFE4  F017         	goto	u1701
  4014   002FC4  EFE6  F017         	goto	u1700
  4015   002FC8                     u1701:
  4016   002FC8  EFF4  F017         	goto	l1196
  4017   002FCC                     u1700:
  4018   002FCC  C017  F019         	movff	abs@a,??_abs
  4019   002FD0  C018  F01A         	movff	abs@a+1,??_abs+1
  4020   002FD4  1E19               	comf	??_abs^0,f,c
  4021   002FD6  1E1A               	comf	(??_abs+1)^0,f,c
  4022   002FD8  4A19               	infsnz	??_abs^0,f,c
  4023   002FDA  2A1A               	incf	(??_abs+1)^0,f,c
  4024   002FDC  C019  F017         	movff	??_abs,?_abs
  4025   002FE0  C01A  F018         	movff	??_abs+1,?_abs+1
  4026   002FE4  EFF8  F017         	goto	l1199
  4027   002FE8                     l1196:
  4028   002FE8  C017  F017         	movff	abs@a,?_abs
  4029   002FEC  C018  F018         	movff	abs@a+1,?_abs+1
  4030   002FF0                     l1199:
  4031   002FF0  0012               	return		;funcret
  4032   002FF2                     __end_of_abs:
  4033                           	callstack 0
  4034                           
  4035 ;; *************** function _motor_response *****************
  4036 ;; Defined at:
  4037 ;;		line 106 in file "colour_identify.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  card            1    wreg     enum E14551
  4040 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  4041 ;;		 -> main@motorL(9), 
  4042 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  4043 ;;		 -> main@motorR(9), 
  4044 ;;  ReturnHomeAr   60    4[BANK0 ] struct HomeStored
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  card            1   42[COMRAM] enum E14551
  4047 ;;  j               2   40[COMRAM] int 
  4048 ;;  i               2   43[COMRAM] int 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4058 ;;      Params:         0      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Totals:         7      64       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;Total ram usage:       71 bytes
  4063 ;; Hardware stack levels used: 1
  4064 ;; Hardware stack levels required when called: 8
  4065 ;; This function calls:
  4066 ;;		_fullSpeedAhead
  4067 ;;		_home_response
  4068 ;;		_reverseFullSpeed
  4069 ;;		_stop
  4070 ;;		_turnLeft45
  4071 ;;		_turnRight45
  4072 ;; This function is called by:
  4073 ;;		_card_response
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text20
  4078   000E36                     __ptext20:
  4079                           	callstack 0
  4080   000E36                     _motor_response:
  4081                           	callstack 21
  4082                           
  4083                           ;incstack = 0
  4084                           ;motor_response@card stored from wreg
  4085   000E36  6E2B               	movwf	motor_response@card^0,c
  4086   000E38                     
  4087                           ;colour_identify.c: 111:     switch (card){
  4088   000E38  EF3D  F009         	goto	l3085
  4089   000E3C                     l2949:
  4090                           
  4091                           ;colour_identify.c: 113:             reverseFullSpeed(mL,mR);
  4092   000E3C  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4093   000E40  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4094   000E44  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4095   000E48  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4096   000E4C  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4097   000E50                     
  4098                           ;colour_identify.c: 114:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4099   000E50  0E05               	movlw	5
  4100   000E52  6E28               	movwf	(??_motor_response+1)^0,c
  4101   000E54  0E0F               	movlw	15
  4102   000E56  6E27               	movwf	??_motor_response^0,c
  4103   000E58  0EF1               	movlw	241
  4104   000E5A                     u2077:
  4105   000E5A  2EE8               	decfsz	wreg,f,c
  4106   000E5C  D7FE               	bra	u2077
  4107   000E5E  2E27               	decfsz	??_motor_response^0,f,c
  4108   000E60  D7FC               	bra	u2077
  4109   000E62  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4110   000E64  D7FA               	bra	u2077
  4111   000E66  F000               	nop	
  4112   000E68                     l2953:
  4113                           
  4114                           ;colour_identify.c: 115:             turnRight45(mL,mR);
  4115   000E68  C060  F018         	movff	motor_response@mL,turnRight45@mL
  4116   000E6C  C061  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4117   000E70  C062  F01A         	movff	motor_response@mR,turnRight45@mR
  4118   000E74  C063  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4119   000E78  EC08  F014         	call	_turnRight45	;wreg free
  4120   000E7C                     
  4121                           ;colour_identify.c: 116:             stop(mL,mR);
  4122   000E7C  C060  F018         	movff	motor_response@mL,stop@mL
  4123   000E80  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4124   000E84  C062  F01A         	movff	motor_response@mR,stop@mR
  4125   000E88  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4126   000E8C  ECD1  F015         	call	_stop	;wreg free
  4127   000E90                     
  4128                           ;colour_identify.c: 117:             turnRight45(mL,mR);
  4129   000E90  C060  F018         	movff	motor_response@mL,turnRight45@mL
  4130   000E94  C061  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4131   000E98  C062  F01A         	movff	motor_response@mR,turnRight45@mR
  4132   000E9C  C063  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4133   000EA0  EC08  F014         	call	_turnRight45	;wreg free
  4134   000EA4                     l2959:
  4135                           
  4136                           ;colour_identify.c: 118:             stop(mL,mR);
  4137   000EA4  C060  F018         	movff	motor_response@mL,stop@mL
  4138   000EA8  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4139   000EAC  C062  F01A         	movff	motor_response@mR,stop@mR
  4140   000EB0  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4141   000EB4  ECD1  F015         	call	_stop	;wreg free
  4142                           
  4143                           ;colour_identify.c: 119:             break;
  4144   000EB8  EF6E  F009         	goto	l349
  4145   000EBC                     l2961:
  4146                           
  4147                           ;colour_identify.c: 121:             reverseFullSpeed(mL,mR);
  4148   000EBC  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4149   000EC0  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4150   000EC4  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4151   000EC8  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4152   000ECC  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4153   000ED0                     
  4154                           ;colour_identify.c: 122:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4155   000ED0  0E05               	movlw	5
  4156   000ED2  6E28               	movwf	(??_motor_response+1)^0,c
  4157   000ED4  0E0F               	movlw	15
  4158   000ED6  6E27               	movwf	??_motor_response^0,c
  4159   000ED8  0EF1               	movlw	241
  4160   000EDA                     u2087:
  4161   000EDA  2EE8               	decfsz	wreg,f,c
  4162   000EDC  D7FE               	bra	u2087
  4163   000EDE  2E27               	decfsz	??_motor_response^0,f,c
  4164   000EE0  D7FC               	bra	u2087
  4165   000EE2  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4166   000EE4  D7FA               	bra	u2087
  4167   000EE6  F000               	nop	
  4168   000EE8                     l2965:
  4169                           
  4170                           ;colour_identify.c: 123:             turnLeft45(mL,mR);
  4171   000EE8  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4172   000EEC  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4173   000EF0  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4174   000EF4  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4175   000EF8  EC5F  F014         	call	_turnLeft45	;wreg free
  4176   000EFC                     
  4177                           ;colour_identify.c: 124:             stop(mL,mR);
  4178   000EFC  C060  F018         	movff	motor_response@mL,stop@mL
  4179   000F00  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4180   000F04  C062  F01A         	movff	motor_response@mR,stop@mR
  4181   000F08  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4182   000F0C  ECD1  F015         	call	_stop	;wreg free
  4183   000F10                     
  4184                           ;colour_identify.c: 125:             turnLeft45(mL,mR);
  4185   000F10  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4186   000F14  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4187   000F18  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4188   000F1C  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4189   000F20  EC5F  F014         	call	_turnLeft45	;wreg free
  4190   000F24  EF52  F007         	goto	l2959
  4191   000F28                     l2973:
  4192                           
  4193                           ;colour_identify.c: 129:             reverseFullSpeed(mL,mR);
  4194   000F28  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4195   000F2C  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4196   000F30  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4197   000F34  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4198   000F38  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4199   000F3C                     
  4200                           ;colour_identify.c: 130:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4201   000F3C  0E05               	movlw	5
  4202   000F3E  6E28               	movwf	(??_motor_response+1)^0,c
  4203   000F40  0E0F               	movlw	15
  4204   000F42  6E27               	movwf	??_motor_response^0,c
  4205   000F44  0EF1               	movlw	241
  4206   000F46                     u2097:
  4207   000F46  2EE8               	decfsz	wreg,f,c
  4208   000F48  D7FE               	bra	u2097
  4209   000F4A  2E27               	decfsz	??_motor_response^0,f,c
  4210   000F4C  D7FC               	bra	u2097
  4211   000F4E  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4212   000F50  D7FA               	bra	u2097
  4213   000F52  F000               	nop	
  4214   000F54                     
  4215                           ;colour_identify.c: 131:             turnRight45(mL,mR);
  4216   000F54  C060  F018         	movff	motor_response@mL,turnRight45@mL
  4217   000F58  C061  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4218   000F5C  C062  F01A         	movff	motor_response@mR,turnRight45@mR
  4219   000F60  C063  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4220   000F64  EC08  F014         	call	_turnRight45	;wreg free
  4221   000F68                     
  4222                           ;colour_identify.c: 132:             stop(mL,mR);
  4223   000F68  C060  F018         	movff	motor_response@mL,stop@mL
  4224   000F6C  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4225   000F70  C062  F01A         	movff	motor_response@mR,stop@mR
  4226   000F74  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4227   000F78  ECD1  F015         	call	_stop	;wreg free
  4228   000F7C                     l2981:
  4229                           
  4230                           ;colour_identify.c: 133:             turnRight45(mL,mR);
  4231   000F7C  C060  F018         	movff	motor_response@mL,turnRight45@mL
  4232   000F80  C061  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4233   000F84  C062  F01A         	movff	motor_response@mR,turnRight45@mR
  4234   000F88  C063  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4235   000F8C  EC08  F014         	call	_turnRight45	;wreg free
  4236   000F90                     l2983:
  4237                           
  4238                           ;colour_identify.c: 134:             stop(mL,mR);
  4239   000F90  C060  F018         	movff	motor_response@mL,stop@mL
  4240   000F94  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4241   000F98  C062  F01A         	movff	motor_response@mR,stop@mR
  4242   000F9C  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4243   000FA0  ECD1  F015         	call	_stop	;wreg free
  4244   000FA4  EF34  F007         	goto	l2953
  4245   000FA8                     l2993:
  4246                           
  4247                           ;colour_identify.c: 141:             reverseFullSpeed(mL,mR);
  4248   000FA8  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4249   000FAC  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4250   000FB0  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4251   000FB4  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4252   000FB8  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4253   000FBC                     
  4254                           ;colour_identify.c: 142:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4255   000FBC  0E05               	movlw	5
  4256   000FBE  6E28               	movwf	(??_motor_response+1)^0,c
  4257   000FC0  0E0F               	movlw	15
  4258   000FC2  6E27               	movwf	??_motor_response^0,c
  4259   000FC4  0EF1               	movlw	241
  4260   000FC6                     u2107:
  4261   000FC6  2EE8               	decfsz	wreg,f,c
  4262   000FC8  D7FE               	bra	u2107
  4263   000FCA  2E27               	decfsz	??_motor_response^0,f,c
  4264   000FCC  D7FC               	bra	u2107
  4265   000FCE  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4266   000FD0  D7FA               	bra	u2107
  4267   000FD2  F000               	nop	
  4268   000FD4                     
  4269                           ;colour_identify.c: 143:             reverseFullSpeed(mL,mR);
  4270   000FD4  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4271   000FD8  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4272   000FDC  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4273   000FE0  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4274   000FE4  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4275                           
  4276                           ;colour_identify.c: 144:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4277   000FE8  0E29               	movlw	41
  4278   000FEA  6E28               	movwf	(??_motor_response+1)^0,c
  4279   000FEC  0E96               	movlw	150
  4280   000FEE  6E27               	movwf	??_motor_response^0,c
  4281   000FF0  0E7F               	movlw	127
  4282   000FF2                     u2117:
  4283   000FF2  2EE8               	decfsz	wreg,f,c
  4284   000FF4  D7FE               	bra	u2117
  4285   000FF6  2E27               	decfsz	??_motor_response^0,f,c
  4286   000FF8  D7FC               	bra	u2117
  4287   000FFA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4288   000FFC  D7FA               	bra	u2117
  4289   000FFE  F000               	nop	
  4290   001000  EFC8  F007         	goto	l2983
  4291   001004                     l3009:
  4292                           
  4293                           ;colour_identify.c: 152:             reverseFullSpeed(mL,mR);
  4294   001004  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4295   001008  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4296   00100C  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4297   001010  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4298   001014  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4299   001018                     
  4300                           ;colour_identify.c: 153:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4301   001018  0E05               	movlw	5
  4302   00101A  6E28               	movwf	(??_motor_response+1)^0,c
  4303   00101C  0E0F               	movlw	15
  4304   00101E  6E27               	movwf	??_motor_response^0,c
  4305   001020  0EF1               	movlw	241
  4306   001022                     u2127:
  4307   001022  2EE8               	decfsz	wreg,f,c
  4308   001024  D7FE               	bra	u2127
  4309   001026  2E27               	decfsz	??_motor_response^0,f,c
  4310   001028  D7FC               	bra	u2127
  4311   00102A  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4312   00102C  D7FA               	bra	u2127
  4313   00102E  F000               	nop	
  4314   001030                     
  4315                           ;colour_identify.c: 154:             reverseFullSpeed(mL,mR);
  4316   001030  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4317   001034  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4318   001038  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4319   00103C  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4320   001040  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4321                           
  4322                           ;colour_identify.c: 155:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4323   001044  0E29               	movlw	41
  4324   001046  6E28               	movwf	(??_motor_response+1)^0,c
  4325   001048  0E96               	movlw	150
  4326   00104A  6E27               	movwf	??_motor_response^0,c
  4327   00104C  0E7F               	movlw	127
  4328   00104E                     u2137:
  4329   00104E  2EE8               	decfsz	wreg,f,c
  4330   001050  D7FE               	bra	u2137
  4331   001052  2E27               	decfsz	??_motor_response^0,f,c
  4332   001054  D7FC               	bra	u2137
  4333   001056  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4334   001058  D7FA               	bra	u2137
  4335   00105A  F000               	nop	
  4336   00105C                     l3015:
  4337                           
  4338                           ;colour_identify.c: 156:             stop(mL,mR);
  4339   00105C  C060  F018         	movff	motor_response@mL,stop@mL
  4340   001060  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4341   001064  C062  F01A         	movff	motor_response@mR,stop@mR
  4342   001068  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4343   00106C  ECD1  F015         	call	_stop	;wreg free
  4344   001070  EF74  F007         	goto	l2965
  4345   001074                     l3025:
  4346                           
  4347                           ;colour_identify.c: 163:             reverseFullSpeed(mL,mR);
  4348   001074  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4349   001078  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4350   00107C  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4351   001080  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4352   001084  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4353   001088                     
  4354                           ;colour_identify.c: 164:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4355   001088  0E05               	movlw	5
  4356   00108A  6E28               	movwf	(??_motor_response+1)^0,c
  4357   00108C  0E0F               	movlw	15
  4358   00108E  6E27               	movwf	??_motor_response^0,c
  4359   001090  0EF1               	movlw	241
  4360   001092                     u2147:
  4361   001092  2EE8               	decfsz	wreg,f,c
  4362   001094  D7FE               	bra	u2147
  4363   001096  2E27               	decfsz	??_motor_response^0,f,c
  4364   001098  D7FC               	bra	u2147
  4365   00109A  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4366   00109C  D7FA               	bra	u2147
  4367   00109E  F000               	nop	
  4368   0010A0  EFBE  F007         	goto	l2981
  4369   0010A4                     l3041:
  4370                           
  4371                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  4372   0010A4  C060  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4373   0010A8  C061  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4374   0010AC  C062  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4375   0010B0  C063  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4376   0010B4  EC01  F015         	call	_reverseFullSpeed	;wreg free
  4377   0010B8                     
  4378                           ;colour_identify.c: 174:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4379   0010B8  0E05               	movlw	5
  4380   0010BA  6E28               	movwf	(??_motor_response+1)^0,c
  4381   0010BC  0E0F               	movlw	15
  4382   0010BE  6E27               	movwf	??_motor_response^0,c
  4383   0010C0  0EF1               	movlw	241
  4384   0010C2                     u2157:
  4385   0010C2  2EE8               	decfsz	wreg,f,c
  4386   0010C4  D7FE               	bra	u2157
  4387   0010C6  2E27               	decfsz	??_motor_response^0,f,c
  4388   0010C8  D7FC               	bra	u2157
  4389   0010CA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4390   0010CC  D7FA               	bra	u2157
  4391   0010CE  F000               	nop	
  4392   0010D0                     
  4393                           ;colour_identify.c: 175:             turnLeft45(mL,mR);
  4394   0010D0  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4395   0010D4  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4396   0010D8  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4397   0010DC  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4398   0010E0  EC5F  F014         	call	_turnLeft45	;wreg free
  4399   0010E4  EF2E  F008         	goto	l3015
  4400   0010E8                     l3057:
  4401                           
  4402                           ;colour_identify.c: 184:             stop(mL,mR);
  4403   0010E8  C060  F018         	movff	motor_response@mL,stop@mL
  4404   0010EC  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4405   0010F0  C062  F01A         	movff	motor_response@mR,stop@mR
  4406   0010F4  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4407   0010F8  ECD1  F015         	call	_stop	;wreg free
  4408                           
  4409                           ;colour_identify.c: 185:             turnLeft45(mL,mR);
  4410   0010FC  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4411   001100  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4412   001104  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4413   001108  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4414   00110C  EC5F  F014         	call	_turnLeft45	;wreg free
  4415                           
  4416                           ;colour_identify.c: 186:             stop(mL,mR);
  4417   001110  C060  F018         	movff	motor_response@mL,stop@mL
  4418   001114  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4419   001118  C062  F01A         	movff	motor_response@mR,stop@mR
  4420   00111C  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4421   001120  ECD1  F015         	call	_stop	;wreg free
  4422                           
  4423                           ;colour_identify.c: 187:             turnLeft45(mL,mR);
  4424   001124  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4425   001128  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4426   00112C  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4427   001130  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4428   001134  EC5F  F014         	call	_turnLeft45	;wreg free
  4429                           
  4430                           ;colour_identify.c: 188:             stop(mL,mR);
  4431   001138  C060  F018         	movff	motor_response@mL,stop@mL
  4432   00113C  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4433   001140  C062  F01A         	movff	motor_response@mR,stop@mR
  4434   001144  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4435   001148  ECD1  F015         	call	_stop	;wreg free
  4436                           
  4437                           ;colour_identify.c: 189:             turnLeft45(mL,mR);
  4438   00114C  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4439   001150  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4440   001154  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4441   001158  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4442   00115C  EC5F  F014         	call	_turnLeft45	;wreg free
  4443                           
  4444                           ;colour_identify.c: 190:             stop(mL,mR);
  4445   001160  C060  F018         	movff	motor_response@mL,stop@mL
  4446   001164  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4447   001168  C062  F01A         	movff	motor_response@mR,stop@mR
  4448   00116C  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4449   001170  ECD1  F015         	call	_stop	;wreg free
  4450                           
  4451                           ;colour_identify.c: 191:             turnLeft45(mL,mR);
  4452   001174  C060  F018         	movff	motor_response@mL,turnLeft45@mL
  4453   001178  C061  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4454   00117C  C062  F01A         	movff	motor_response@mR,turnLeft45@mR
  4455   001180  C063  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4456   001184  EC5F  F014         	call	_turnLeft45	;wreg free
  4457                           
  4458                           ;colour_identify.c: 192:             stop(mL,mR);
  4459   001188  C060  F018         	movff	motor_response@mL,stop@mL
  4460   00118C  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4461   001190  C062  F01A         	movff	motor_response@mR,stop@mR
  4462   001194  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4463   001198  ECD1  F015         	call	_stop	;wreg free
  4464   00119C                     
  4465                           ;colour_identify.c: 193:             for(int i = 29; i >= 0; i--){
  4466   00119C  0E00               	movlw	0
  4467   00119E  6E2D               	movwf	(motor_response@i+1)^0,c
  4468   0011A0  0E1D               	movlw	29
  4469   0011A2  6E2C               	movwf	motor_response@i^0,c
  4470   0011A4                     l3065:
  4471                           
  4472                           ;colour_identify.c: 194:                 if (ReturnHomeArray.TimerCount[i] != 0){
  4473   0011A4  90D8               	bcf	status,0,c
  4474   0011A6  342C               	rlcf	motor_response@i^0,w,c
  4475   0011A8  6ED9               	movwf	fsr2l,c
  4476   0011AA  342D               	rlcf	(motor_response@i+1)^0,w,c
  4477   0011AC  6EDA               	movwf	fsr2h,c
  4478   0011AE  0E64               	movlw	low motor_response@ReturnHomeArray
  4479   0011B0  26D9               	addwf	fsr2l,f,c
  4480   0011B2  0E00               	movlw	high motor_response@ReturnHomeArray
  4481   0011B4  22DA               	addwfc	fsr2h,f,c
  4482   0011B6  50DE               	movf	postinc2,w,c
  4483   0011B8  10DE               	iorwf	postinc2,w,c
  4484   0011BA  B4D8               	btfsc	status,2,c
  4485   0011BC  EFE2  F008         	goto	u1471
  4486   0011C0  EFE4  F008         	goto	u1470
  4487   0011C4                     u1471:
  4488   0011C4  EF31  F009         	goto	l3079
  4489   0011C8                     u1470:
  4490   0011C8                     
  4491                           ;colour_identify.c: 195:                     fullSpeedAhead(mL,mR);
  4492   0011C8  C060  F018         	movff	motor_response@mL,fullSpeedAhead@mL
  4493   0011CC  C061  F019         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4494   0011D0  C062  F01A         	movff	motor_response@mR,fullSpeedAhead@mR
  4495   0011D4  C063  F01B         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4496   0011D8  EC47  F015         	call	_fullSpeedAhead	;wreg free
  4497   0011DC                     
  4498                           ;colour_identify.c: 196:                     for (int j=0; j<= ReturnHomeArray.TimerCoun
      +                          t[i]; i++){
  4499   0011DC  0E00               	movlw	0
  4500   0011DE  6E2A               	movwf	(motor_response@j+1)^0,c
  4501   0011E0  0E00               	movlw	0
  4502   0011E2  6E29               	movwf	motor_response@j^0,c
  4503   0011E4  EF02  F009         	goto	l3075
  4504   0011E8                     l3071:
  4505                           
  4506                           ;colour_identify.c: 197:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  4507   0011E8  0E09               	movlw	9
  4508   0011EA  6E28               	movwf	(??_motor_response+1)^0,c
  4509   0011EC  0E1E               	movlw	30
  4510   0011EE  6E27               	movwf	??_motor_response^0,c
  4511   0011F0  0EE4               	movlw	228
  4512   0011F2                     u2167:
  4513   0011F2  2EE8               	decfsz	wreg,f,c
  4514   0011F4  D7FE               	bra	u2167
  4515   0011F6  2E27               	decfsz	??_motor_response^0,f,c
  4516   0011F8  D7FC               	bra	u2167
  4517   0011FA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  4518   0011FC  D7FA               	bra	u2167
  4519   0011FE  D000               	nop2	
  4520   001200                     
  4521                           ;colour_identify.c: 198:                     }
  4522   001200  4A2C               	infsnz	motor_response@i^0,f,c
  4523   001202  2A2D               	incf	(motor_response@i+1)^0,f,c
  4524   001204                     l3075:
  4525   001204  90D8               	bcf	status,0,c
  4526   001206  342C               	rlcf	motor_response@i^0,w,c
  4527   001208  6ED9               	movwf	fsr2l,c
  4528   00120A  342D               	rlcf	(motor_response@i+1)^0,w,c
  4529   00120C  6EDA               	movwf	fsr2h,c
  4530   00120E  0E64               	movlw	low motor_response@ReturnHomeArray
  4531   001210  26D9               	addwf	fsr2l,f,c
  4532   001212  0E00               	movlw	high motor_response@ReturnHomeArray
  4533   001214  22DA               	addwfc	fsr2h,f,c
  4534   001216  5029               	movf	motor_response@j^0,w,c
  4535   001218  5CDE               	subwf	postinc2,w,c
  4536   00121A  502A               	movf	(motor_response@j+1)^0,w,c
  4537   00121C  58DE               	subwfb	postinc2,w,c
  4538   00121E  B0D8               	btfsc	status,0,c
  4539   001220  EF14  F009         	goto	u1481
  4540   001224  EF16  F009         	goto	u1480
  4541   001228                     u1481:
  4542   001228  EFF4  F008         	goto	l3071
  4543   00122C                     u1480:
  4544   00122C                     
  4545                           ;colour_identify.c: 199:                     stop(mL,mR);
  4546   00122C  C060  F018         	movff	motor_response@mL,stop@mL
  4547   001230  C061  F019         	movff	motor_response@mL+1,stop@mL+1
  4548   001234  C062  F01A         	movff	motor_response@mR,stop@mR
  4549   001238  C063  F01B         	movff	motor_response@mR+1,stop@mR+1
  4550   00123C  ECD1  F015         	call	_stop	;wreg free
  4551                           
  4552                           ;colour_identify.c: 200:                     home_response(ReturnHomeArray.card[i], mL, 
      +                          mR);
  4553   001240  C060  F020         	movff	motor_response@mL,home_response@mL
  4554   001244  C061  F021         	movff	motor_response@mL+1,home_response@mL+1
  4555   001248  C062  F022         	movff	motor_response@mR,home_response@mR
  4556   00124C  C063  F023         	movff	motor_response@mR+1,home_response@mR+1
  4557   001250  0E64               	movlw	low motor_response@ReturnHomeArray
  4558   001252  242C               	addwf	motor_response@i^0,w,c
  4559   001254  6ED9               	movwf	fsr2l,c
  4560   001256  0E00               	movlw	high motor_response@ReturnHomeArray
  4561   001258  202D               	addwfc	(motor_response@i+1)^0,w,c
  4562   00125A  6EDA               	movwf	fsr2h,c
  4563   00125C  50DF               	movf	indf2,w,c
  4564   00125E  EC6F  F009         	call	_home_response
  4565   001262                     l3079:
  4566                           
  4567                           ;colour_identify.c: 202:             }
  4568   001262  062C               	decf	motor_response@i^0,f,c
  4569   001264  A0D8               	btfss	status,0,c
  4570   001266  062D               	decf	(motor_response@i+1)^0,f,c
  4571   001268  BE2D               	btfsc	(motor_response@i+1)^0,7,c
  4572   00126A  EF3B  F009         	goto	u1490
  4573   00126E  EF39  F009         	goto	u1491
  4574   001272                     u1491:
  4575   001272  EFD2  F008         	goto	l3065
  4576   001276                     u1490:
  4577   001276  EF6E  F009         	goto	l349
  4578   00127A                     l3085:
  4579   00127A  502B               	movf	motor_response@card^0,w,c
  4580   00127C  6E27               	movwf	??_motor_response^0,c
  4581   00127E  6A28               	clrf	(??_motor_response+1)^0,c
  4582                           
  4583                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4584                           ; Switch size 1, requested type "simple"
  4585                           ; Number of cases is 1, Range of values is 0 to 0
  4586                           ; switch strategies available:
  4587                           ; Name         Instructions Cycles
  4588                           ; simple_byte            4     3 (average)
  4589                           ;	Chosen strategy is simple_byte
  4590   001280  5028               	movf	(??_motor_response+1)^0,w,c
  4591   001282  0A00               	xorlw	0	; case 0
  4592   001284  B4D8               	btfsc	status,2,c
  4593   001286  EF47  F009         	goto	l3785
  4594   00128A  EF6E  F009         	goto	l349
  4595   00128E                     l3785:
  4596                           
  4597                           ; Switch size 1, requested type "simple"
  4598                           ; Number of cases is 9, Range of values is 0 to 8
  4599                           ; switch strategies available:
  4600                           ; Name         Instructions Cycles
  4601                           ; simple_byte           28    15 (average)
  4602                           ;	Chosen strategy is simple_byte
  4603   00128E  5027               	movf	??_motor_response^0,w,c
  4604   001290  0A00               	xorlw	0	; case 0
  4605   001292  B4D8               	btfsc	status,2,c
  4606   001294  EF1E  F007         	goto	l2949
  4607   001298  0A01               	xorlw	1	; case 1
  4608   00129A  B4D8               	btfsc	status,2,c
  4609   00129C  EF5E  F007         	goto	l2961
  4610   0012A0  0A03               	xorlw	3	; case 2
  4611   0012A2  B4D8               	btfsc	status,2,c
  4612   0012A4  EF94  F007         	goto	l2973
  4613   0012A8  0A01               	xorlw	1	; case 3
  4614   0012AA  B4D8               	btfsc	status,2,c
  4615   0012AC  EFD4  F007         	goto	l2993
  4616   0012B0  0A07               	xorlw	7	; case 4
  4617   0012B2  B4D8               	btfsc	status,2,c
  4618   0012B4  EF02  F008         	goto	l3009
  4619   0012B8  0A01               	xorlw	1	; case 5
  4620   0012BA  B4D8               	btfsc	status,2,c
  4621   0012BC  EF3A  F008         	goto	l3025
  4622   0012C0  0A03               	xorlw	3	; case 6
  4623   0012C2  B4D8               	btfsc	status,2,c
  4624   0012C4  EF52  F008         	goto	l3041
  4625   0012C8  0A01               	xorlw	1	; case 7
  4626   0012CA  B4D8               	btfsc	status,2,c
  4627   0012CC  EF74  F008         	goto	l3057
  4628   0012D0  0A0F               	xorlw	15	; case 8
  4629   0012D2  B4D8               	btfsc	status,2,c
  4630   0012D4  EF6E  F009         	goto	l349
  4631   0012D8  EF6E  F009         	goto	l349
  4632   0012DC                     l349:
  4633   0012DC  0012               	return		;funcret
  4634   0012DE                     __end_of_motor_response:
  4635                           	callstack 0
  4636                           
  4637 ;; *************** function _reverseFullSpeed *****************
  4638 ;; Defined at:
  4639 ;;		line 145 in file "dc_motor.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4642 ;;		 -> main@motorL(9), 
  4643 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4644 ;;		 -> main@motorR(9), 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  i               2   28[COMRAM] int 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4660 ;;Total ram usage:        7 bytes
  4661 ;; Hardware stack levels used: 1
  4662 ;; Hardware stack levels required when called: 6
  4663 ;; This function calls:
  4664 ;;		_setMotorPWM
  4665 ;; This function is called by:
  4666 ;;		_motor_response
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text21
  4671   002A02                     __ptext21:
  4672                           	callstack 0
  4673   002A02                     _reverseFullSpeed:
  4674                           	callstack 22
  4675   002A02                     
  4676                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  4677   002A02  EE20 F001          	lfsr	2,1
  4678   002A06  5018               	movf	reverseFullSpeed@mL^0,w,c
  4679   002A08  26D9               	addwf	fsr2l,f,c
  4680   002A0A  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  4681   002A0C  22DA               	addwfc	fsr2h,f,c
  4682   002A0E  0E00               	movlw	0
  4683   002A10  6EDF               	movwf	indf2,c
  4684                           
  4685                           ;dc_motor.c: 148:     mR->direction=0;
  4686   002A12  EE20 F001          	lfsr	2,1
  4687   002A16  501A               	movf	reverseFullSpeed@mR^0,w,c
  4688   002A18  26D9               	addwf	fsr2l,f,c
  4689   002A1A  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  4690   002A1C  22DA               	addwfc	fsr2h,f,c
  4691   002A1E  0E00               	movlw	0
  4692   002A20  6EDF               	movwf	indf2,c
  4693   002A22                     
  4694                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  4695   002A22  0E00               	movlw	0
  4696   002A24  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  4697   002A26  0E00               	movlw	0
  4698   002A28  6E1D               	movwf	reverseFullSpeed@i^0,c
  4699   002A2A                     l2747:
  4700                           
  4701                           ;dc_motor.c: 150:         mL->power=i;
  4702   002A2A  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  4703   002A2E  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  4704   002A32  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  4705                           
  4706                           ;dc_motor.c: 151:         mR->power=i;
  4707   002A36  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  4708   002A3A  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  4709   002A3E  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  4710   002A42                     
  4711                           ;dc_motor.c: 152:         setMotorPWM(mL);
  4712   002A42  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  4713   002A46  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  4714   002A4A  EC84  F010         	call	_setMotorPWM	;wreg free
  4715   002A4E                     
  4716                           ;dc_motor.c: 153:         setMotorPWM(mR);
  4717   002A4E  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  4718   002A52  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  4719   002A56  EC84  F010         	call	_setMotorPWM	;wreg free
  4720   002A5A                     
  4721                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4722   002A5A  0ED0               	movlw	208
  4723   002A5C  6E1C               	movwf	??_reverseFullSpeed^0,c
  4724   002A5E  0ECA               	movlw	202
  4725   002A60                     u2177:
  4726   002A60  2EE8               	decfsz	wreg,f,c
  4727   002A62  D7FE               	bra	u2177
  4728   002A64  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  4729   002A66  D7FC               	bra	u2177
  4730   002A68                     
  4731                           ;dc_motor.c: 155:     }
  4732   002A68  0E0A               	movlw	10
  4733   002A6A  261D               	addwf	reverseFullSpeed@i^0,f,c
  4734   002A6C  0E00               	movlw	0
  4735   002A6E  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  4736   002A70  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  4737   002A72  EF44  F015         	goto	u1331
  4738   002A76  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  4739   002A78  E109               	bnz	u1330
  4740   002A7A  0E3C               	movlw	60
  4741   002A7C  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  4742   002A7E  A0D8               	btfss	status,0,c
  4743   002A80  EF44  F015         	goto	u1331
  4744   002A84  EF46  F015         	goto	u1330
  4745   002A88                     u1331:
  4746   002A88  EF15  F015         	goto	l2747
  4747   002A8C                     u1330:
  4748   002A8C  0012               	return		;funcret
  4749   002A8E                     __end_of_reverseFullSpeed:
  4750                           	callstack 0
  4751                           
  4752 ;; *************** function _home_response *****************
  4753 ;; Defined at:
  4754 ;;		line 213 in file "colour_identify.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  card            1    wreg     enum E14551
  4757 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4758 ;;		 -> main@motorL(9), 
  4759 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4760 ;;		 -> main@motorR(9), 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  card            1   37[COMRAM] enum E14551
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4773 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4775 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4776 ;;Total ram usage:        7 bytes
  4777 ;; Hardware stack levels used: 1
  4778 ;; Hardware stack levels required when called: 7
  4779 ;; This function calls:
  4780 ;;		_fullSpeedAhead
  4781 ;;		_stop
  4782 ;;		_turnLeft45
  4783 ;;		_turnRight45
  4784 ;; This function is called by:
  4785 ;;		_motor_response
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text22
  4790   0012DE                     __ptext22:
  4791                           	callstack 0
  4792   0012DE                     _home_response:
  4793                           	callstack 21
  4794                           
  4795                           ;incstack = 0
  4796                           ;home_response@card stored from wreg
  4797   0012DE  6E26               	movwf	home_response@card^0,c
  4798   0012E0                     
  4799                           ;colour_identify.c: 214:     switch(card){
  4800   0012E0  EF1C  F00B         	goto	l2781
  4801   0012E4                     l2761:
  4802                           
  4803                           ;colour_identify.c: 216:             turnLeft45(mL,mR);
  4804   0012E4  C020  F018         	movff	home_response@mL,turnLeft45@mL
  4805   0012E8  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  4806   0012EC  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  4807   0012F0  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  4808   0012F4  EC5F  F014         	call	_turnLeft45	;wreg free
  4809                           
  4810                           ;colour_identify.c: 217:             stop(mL,mR);
  4811   0012F8  C020  F018         	movff	home_response@mL,stop@mL
  4812   0012FC  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4813   001300  C022  F01A         	movff	home_response@mR,stop@mR
  4814   001304  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4815   001308  ECD1  F015         	call	_stop	;wreg free
  4816                           
  4817                           ;colour_identify.c: 218:             turnLeft45(mL,mR);
  4818   00130C  C020  F018         	movff	home_response@mL,turnLeft45@mL
  4819   001310  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  4820   001314  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  4821   001318  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  4822   00131C  EC5F  F014         	call	_turnLeft45	;wreg free
  4823                           
  4824                           ;colour_identify.c: 219:             stop(mL,mR);
  4825   001320  C020  F018         	movff	home_response@mL,stop@mL
  4826   001324  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4827   001328  C022  F01A         	movff	home_response@mR,stop@mR
  4828   00132C  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4829   001330  ECD1  F015         	call	_stop	;wreg free
  4830                           
  4831                           ;colour_identify.c: 220:             break;
  4832   001334  EF45  F00B         	goto	l362
  4833   001338                     l2763:
  4834                           
  4835                           ;colour_identify.c: 222:             turnRight45(mL,mR);
  4836   001338  C020  F018         	movff	home_response@mL,turnRight45@mL
  4837   00133C  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4838   001340  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4839   001344  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4840   001348  EC08  F014         	call	_turnRight45	;wreg free
  4841                           
  4842                           ;colour_identify.c: 223:             stop(mL,mR);
  4843   00134C  C020  F018         	movff	home_response@mL,stop@mL
  4844   001350  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4845   001354  C022  F01A         	movff	home_response@mR,stop@mR
  4846   001358  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4847   00135C  ECD1  F015         	call	_stop	;wreg free
  4848                           
  4849                           ;colour_identify.c: 224:             turnRight45(mL,mR);
  4850   001360  C020  F018         	movff	home_response@mL,turnRight45@mL
  4851   001364  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4852   001368  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4853   00136C  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4854   001370  EC08  F014         	call	_turnRight45	;wreg free
  4855                           
  4856                           ;colour_identify.c: 225:             stop(mL,mR);
  4857   001374  C020  F018         	movff	home_response@mL,stop@mL
  4858   001378  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4859   00137C  C022  F01A         	movff	home_response@mR,stop@mR
  4860   001380  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4861   001384  ECD1  F015         	call	_stop	;wreg free
  4862                           
  4863                           ;colour_identify.c: 226:             break;
  4864   001388  EF45  F00B         	goto	l362
  4865   00138C                     l2765:
  4866                           
  4867                           ;colour_identify.c: 228:             turnRight45(mL,mR);
  4868   00138C  C020  F018         	movff	home_response@mL,turnRight45@mL
  4869   001390  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4870   001394  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4871   001398  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4872   00139C  EC08  F014         	call	_turnRight45	;wreg free
  4873                           
  4874                           ;colour_identify.c: 229:             stop(mL,mR);
  4875   0013A0  C020  F018         	movff	home_response@mL,stop@mL
  4876   0013A4  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4877   0013A8  C022  F01A         	movff	home_response@mR,stop@mR
  4878   0013AC  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4879   0013B0  ECD1  F015         	call	_stop	;wreg free
  4880                           
  4881                           ;colour_identify.c: 230:             turnRight45(mL,mR);
  4882   0013B4  C020  F018         	movff	home_response@mL,turnRight45@mL
  4883   0013B8  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4884   0013BC  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4885   0013C0  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4886   0013C4  EC08  F014         	call	_turnRight45	;wreg free
  4887                           
  4888                           ;colour_identify.c: 231:             stop(mL,mR);
  4889   0013C8  C020  F018         	movff	home_response@mL,stop@mL
  4890   0013CC  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4891   0013D0  C022  F01A         	movff	home_response@mR,stop@mR
  4892   0013D4  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4893   0013D8  ECD1  F015         	call	_stop	;wreg free
  4894                           
  4895                           ;colour_identify.c: 232:             turnRight45(mL,mR);
  4896   0013DC  C020  F018         	movff	home_response@mL,turnRight45@mL
  4897   0013E0  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4898   0013E4  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4899   0013E8  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4900   0013EC  EC08  F014         	call	_turnRight45	;wreg free
  4901                           
  4902                           ;colour_identify.c: 233:             stop(mL,mR);
  4903   0013F0  C020  F018         	movff	home_response@mL,stop@mL
  4904   0013F4  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4905   0013F8  C022  F01A         	movff	home_response@mR,stop@mR
  4906   0013FC  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4907   001400  ECD1  F015         	call	_stop	;wreg free
  4908                           
  4909                           ;colour_identify.c: 234:             turnRight45(mL,mR);
  4910   001404  C020  F018         	movff	home_response@mL,turnRight45@mL
  4911   001408  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4912   00140C  C022  F01A         	movff	home_response@mR,turnRight45@mR
  4913   001410  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  4914   001414  EC08  F014         	call	_turnRight45	;wreg free
  4915                           
  4916                           ;colour_identify.c: 235:             stop(mL,mR);
  4917   001418  C020  F018         	movff	home_response@mL,stop@mL
  4918   00141C  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4919   001420  C022  F01A         	movff	home_response@mR,stop@mR
  4920   001424  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4921   001428  ECD1  F015         	call	_stop	;wreg free
  4922                           
  4923                           ;colour_identify.c: 236:             break;
  4924   00142C  EF45  F00B         	goto	l362
  4925   001430                     l2767:
  4926                           
  4927                           ;colour_identify.c: 238:             stop(mL,mR);
  4928   001430  C020  F018         	movff	home_response@mL,stop@mL
  4929   001434  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4930   001438  C022  F01A         	movff	home_response@mR,stop@mR
  4931   00143C  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4932   001440  ECD1  F015         	call	_stop	;wreg free
  4933                           
  4934                           ;colour_identify.c: 239:             turnLeft45(mL,mR);
  4935   001444  C020  F018         	movff	home_response@mL,turnLeft45@mL
  4936   001448  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  4937   00144C  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  4938   001450  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  4939   001454  EC5F  F014         	call	_turnLeft45	;wreg free
  4940                           
  4941                           ;colour_identify.c: 240:             stop(mL,mR);
  4942   001458  C020  F018         	movff	home_response@mL,stop@mL
  4943   00145C  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4944   001460  C022  F01A         	movff	home_response@mR,stop@mR
  4945   001464  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4946   001468  ECD1  F015         	call	_stop	;wreg free
  4947                           
  4948                           ;colour_identify.c: 241:             turnLeft45(mL,mR);
  4949   00146C  C020  F018         	movff	home_response@mL,turnLeft45@mL
  4950   001470  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  4951   001474  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  4952   001478  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  4953   00147C  EC5F  F014         	call	_turnLeft45	;wreg free
  4954                           
  4955                           ;colour_identify.c: 242:             stop(mL,mR);
  4956   001480  C020  F018         	movff	home_response@mL,stop@mL
  4957   001484  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4958   001488  C022  F01A         	movff	home_response@mR,stop@mR
  4959   00148C  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4960   001490  ECD1  F015         	call	_stop	;wreg free
  4961                           
  4962                           ;colour_identify.c: 243:             fullSpeedAhead(mL,mR);
  4963   001494  C020  F018         	movff	home_response@mL,fullSpeedAhead@mL
  4964   001498  C021  F019         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  4965   00149C  C022  F01A         	movff	home_response@mR,fullSpeedAhead@mR
  4966   0014A0  C023  F01B         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  4967   0014A4  EC47  F015         	call	_fullSpeedAhead	;wreg free
  4968   0014A8                     l2769:
  4969                           
  4970                           ;colour_identify.c: 244:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4971   0014A8  0E29               	movlw	41
  4972   0014AA  6E25               	movwf	(??_home_response+1)^0,c
  4973   0014AC  0E96               	movlw	150
  4974   0014AE  6E24               	movwf	??_home_response^0,c
  4975   0014B0  0E7F               	movlw	127
  4976   0014B2                     u2187:
  4977   0014B2  2EE8               	decfsz	wreg,f,c
  4978   0014B4  D7FE               	bra	u2187
  4979   0014B6  2E24               	decfsz	??_home_response^0,f,c
  4980   0014B8  D7FC               	bra	u2187
  4981   0014BA  2E25               	decfsz	(??_home_response+1)^0,f,c
  4982   0014BC  D7FA               	bra	u2187
  4983   0014BE  F000               	nop	
  4984                           
  4985                           ;colour_identify.c: 245:             break;
  4986   0014C0  EF45  F00B         	goto	l362
  4987   0014C4                     l2771:
  4988                           
  4989                           ;colour_identify.c: 247:             stop(mL,mR);
  4990   0014C4  C020  F018         	movff	home_response@mL,stop@mL
  4991   0014C8  C021  F019         	movff	home_response@mL+1,stop@mL+1
  4992   0014CC  C022  F01A         	movff	home_response@mR,stop@mR
  4993   0014D0  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  4994   0014D4  ECD1  F015         	call	_stop	;wreg free
  4995                           
  4996                           ;colour_identify.c: 248:             turnRight45(mL,mR);
  4997   0014D8  C020  F018         	movff	home_response@mL,turnRight45@mL
  4998   0014DC  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  4999   0014E0  C022  F01A         	movff	home_response@mR,turnRight45@mR
  5000   0014E4  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  5001   0014E8  EC08  F014         	call	_turnRight45	;wreg free
  5002                           
  5003                           ;colour_identify.c: 249:             stop(mL,mR);
  5004   0014EC  C020  F018         	movff	home_response@mL,stop@mL
  5005   0014F0  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5006   0014F4  C022  F01A         	movff	home_response@mR,stop@mR
  5007   0014F8  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5008   0014FC  ECD1  F015         	call	_stop	;wreg free
  5009                           
  5010                           ;colour_identify.c: 250:             turnRight45(mL,mR);
  5011   001500  C020  F018         	movff	home_response@mL,turnRight45@mL
  5012   001504  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  5013   001508  C022  F01A         	movff	home_response@mR,turnRight45@mR
  5014   00150C  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  5015   001510  EC08  F014         	call	_turnRight45	;wreg free
  5016                           
  5017                           ;colour_identify.c: 251:             stop(mL,mR);
  5018   001514  C020  F018         	movff	home_response@mL,stop@mL
  5019   001518  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5020   00151C  C022  F01A         	movff	home_response@mR,stop@mR
  5021   001520  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5022   001524  ECD1  F015         	call	_stop	;wreg free
  5023                           
  5024                           ;colour_identify.c: 252:             fullSpeedAhead(mL,mR);
  5025   001528  C020  F018         	movff	home_response@mL,fullSpeedAhead@mL
  5026   00152C  C021  F019         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  5027   001530  C022  F01A         	movff	home_response@mR,fullSpeedAhead@mR
  5028   001534  C023  F01B         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  5029   001538  EC47  F015         	call	_fullSpeedAhead	;wreg free
  5030   00153C  EF54  F00A         	goto	l2769
  5031   001540                     l2775:
  5032                           
  5033                           ;colour_identify.c: 256:             turnLeft45(mL,mR);
  5034   001540  C020  F018         	movff	home_response@mL,turnLeft45@mL
  5035   001544  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  5036   001548  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  5037   00154C  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  5038   001550  EC5F  F014         	call	_turnLeft45	;wreg free
  5039                           
  5040                           ;colour_identify.c: 257:             stop(mL,mR);
  5041   001554  C020  F018         	movff	home_response@mL,stop@mL
  5042   001558  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5043   00155C  C022  F01A         	movff	home_response@mR,stop@mR
  5044   001560  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5045   001564  ECD1  F015         	call	_stop	;wreg free
  5046                           
  5047                           ;colour_identify.c: 258:             turnLeft45(mL,mR);
  5048   001568  C020  F018         	movff	home_response@mL,turnLeft45@mL
  5049   00156C  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  5050   001570  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  5051   001574  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  5052   001578  EC5F  F014         	call	_turnLeft45	;wreg free
  5053                           
  5054                           ;colour_identify.c: 259:             stop(mL,mR);
  5055   00157C  C020  F018         	movff	home_response@mL,stop@mL
  5056   001580  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5057   001584  C022  F01A         	movff	home_response@mR,stop@mR
  5058   001588  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5059   00158C  ECD1  F015         	call	_stop	;wreg free
  5060                           
  5061                           ;colour_identify.c: 260:             turnLeft45(mL,mR);
  5062   001590  C020  F018         	movff	home_response@mL,turnLeft45@mL
  5063   001594  C021  F019         	movff	home_response@mL+1,turnLeft45@mL+1
  5064   001598  C022  F01A         	movff	home_response@mR,turnLeft45@mR
  5065   00159C  C023  F01B         	movff	home_response@mR+1,turnLeft45@mR+1
  5066   0015A0  EC5F  F014         	call	_turnLeft45	;wreg free
  5067                           
  5068                           ;colour_identify.c: 261:             stop(mL,mR);
  5069   0015A4  C020  F018         	movff	home_response@mL,stop@mL
  5070   0015A8  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5071   0015AC  C022  F01A         	movff	home_response@mR,stop@mR
  5072   0015B0  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5073   0015B4  ECD1  F015         	call	_stop	;wreg free
  5074                           
  5075                           ;colour_identify.c: 262:             break;
  5076   0015B8  EF45  F00B         	goto	l362
  5077   0015BC                     l2777:
  5078                           
  5079                           ;colour_identify.c: 264:             turnRight45(mL,mR);
  5080   0015BC  C020  F018         	movff	home_response@mL,turnRight45@mL
  5081   0015C0  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  5082   0015C4  C022  F01A         	movff	home_response@mR,turnRight45@mR
  5083   0015C8  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  5084   0015CC  EC08  F014         	call	_turnRight45	;wreg free
  5085                           
  5086                           ;colour_identify.c: 265:             stop(mL,mR);
  5087   0015D0  C020  F018         	movff	home_response@mL,stop@mL
  5088   0015D4  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5089   0015D8  C022  F01A         	movff	home_response@mR,stop@mR
  5090   0015DC  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5091   0015E0  ECD1  F015         	call	_stop	;wreg free
  5092                           
  5093                           ;colour_identify.c: 266:             turnRight45(mL,mR);
  5094   0015E4  C020  F018         	movff	home_response@mL,turnRight45@mL
  5095   0015E8  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  5096   0015EC  C022  F01A         	movff	home_response@mR,turnRight45@mR
  5097   0015F0  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  5098   0015F4  EC08  F014         	call	_turnRight45	;wreg free
  5099                           
  5100                           ;colour_identify.c: 267:             stop(mL,mR);
  5101   0015F8  C020  F018         	movff	home_response@mL,stop@mL
  5102   0015FC  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5103   001600  C022  F01A         	movff	home_response@mR,stop@mR
  5104   001604  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5105   001608  ECD1  F015         	call	_stop	;wreg free
  5106                           
  5107                           ;colour_identify.c: 268:             turnRight45(mL,mR);
  5108   00160C  C020  F018         	movff	home_response@mL,turnRight45@mL
  5109   001610  C021  F019         	movff	home_response@mL+1,turnRight45@mL+1
  5110   001614  C022  F01A         	movff	home_response@mR,turnRight45@mR
  5111   001618  C023  F01B         	movff	home_response@mR+1,turnRight45@mR+1
  5112   00161C  EC08  F014         	call	_turnRight45	;wreg free
  5113                           
  5114                           ;colour_identify.c: 269:             stop(mL,mR);
  5115   001620  C020  F018         	movff	home_response@mL,stop@mL
  5116   001624  C021  F019         	movff	home_response@mL+1,stop@mL+1
  5117   001628  C022  F01A         	movff	home_response@mR,stop@mR
  5118   00162C  C023  F01B         	movff	home_response@mR+1,stop@mR+1
  5119   001630  ECD1  F015         	call	_stop	;wreg free
  5120                           
  5121                           ;colour_identify.c: 270:             break;
  5122   001634  EF45  F00B         	goto	l362
  5123   001638                     l2781:
  5124   001638  5026               	movf	home_response@card^0,w,c
  5125   00163A  6E24               	movwf	??_home_response^0,c
  5126   00163C  6A25               	clrf	(??_home_response+1)^0,c
  5127                           
  5128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5129                           ; Switch size 1, requested type "simple"
  5130                           ; Number of cases is 1, Range of values is 0 to 0
  5131                           ; switch strategies available:
  5132                           ; Name         Instructions Cycles
  5133                           ; simple_byte            4     3 (average)
  5134                           ;	Chosen strategy is simple_byte
  5135   00163E  5025               	movf	(??_home_response+1)^0,w,c
  5136   001640  0A00               	xorlw	0	; case 0
  5137   001642  B4D8               	btfsc	status,2,c
  5138   001644  EF26  F00B         	goto	l3787
  5139   001648  EF45  F00B         	goto	l362
  5140   00164C                     l3787:
  5141                           
  5142                           ; Switch size 1, requested type "simple"
  5143                           ; Number of cases is 7, Range of values is 0 to 6
  5144                           ; switch strategies available:
  5145                           ; Name         Instructions Cycles
  5146                           ; simple_byte           22    12 (average)
  5147                           ;	Chosen strategy is simple_byte
  5148   00164C  5024               	movf	??_home_response^0,w,c
  5149   00164E  0A00               	xorlw	0	; case 0
  5150   001650  B4D8               	btfsc	status,2,c
  5151   001652  EF72  F009         	goto	l2761
  5152   001656  0A01               	xorlw	1	; case 1
  5153   001658  B4D8               	btfsc	status,2,c
  5154   00165A  EF9C  F009         	goto	l2763
  5155   00165E  0A03               	xorlw	3	; case 2
  5156   001660  B4D8               	btfsc	status,2,c
  5157   001662  EFC6  F009         	goto	l2765
  5158   001666  0A01               	xorlw	1	; case 3
  5159   001668  B4D8               	btfsc	status,2,c
  5160   00166A  EF18  F00A         	goto	l2767
  5161   00166E  0A07               	xorlw	7	; case 4
  5162   001670  B4D8               	btfsc	status,2,c
  5163   001672  EF62  F00A         	goto	l2771
  5164   001676  0A01               	xorlw	1	; case 5
  5165   001678  B4D8               	btfsc	status,2,c
  5166   00167A  EFA0  F00A         	goto	l2775
  5167   00167E  0A03               	xorlw	3	; case 6
  5168   001680  B4D8               	btfsc	status,2,c
  5169   001682  EFDE  F00A         	goto	l2777
  5170   001686  EF45  F00B         	goto	l362
  5171   00168A                     l362:
  5172   00168A  0012               	return		;funcret
  5173   00168C                     __end_of_home_response:
  5174                           	callstack 0
  5175                           
  5176 ;; *************** function _turnRight45 *****************
  5177 ;; Defined at:
  5178 ;;		line 116 in file "dc_motor.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5181 ;;		 -> main@motorL(9), 
  5182 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5183 ;;		 -> main@motorR(9), 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  i               2   29[COMRAM] int 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5198 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5199 ;;Total ram usage:        8 bytes
  5200 ;; Hardware stack levels used: 1
  5201 ;; Hardware stack levels required when called: 6
  5202 ;; This function calls:
  5203 ;;		_setMotorPWM
  5204 ;; This function is called by:
  5205 ;;		_motor_response
  5206 ;;		_home_response
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text23
  5211   002810                     __ptext23:
  5212                           	callstack 0
  5213   002810                     _turnRight45:
  5214                           	callstack 22
  5215   002810                     
  5216                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5217   002810  EE20 F001          	lfsr	2,1
  5218   002814  5018               	movf	turnRight45@mL^0,w,c
  5219   002816  26D9               	addwf	fsr2l,f,c
  5220   002818  5019               	movf	(turnRight45@mL+1)^0,w,c
  5221   00281A  22DA               	addwfc	fsr2h,f,c
  5222   00281C  0E01               	movlw	1
  5223   00281E  6EDF               	movwf	indf2,c
  5224                           
  5225                           ;dc_motor.c: 119:     mR->direction=0;
  5226   002820  EE20 F001          	lfsr	2,1
  5227   002824  501A               	movf	turnRight45@mR^0,w,c
  5228   002826  26D9               	addwf	fsr2l,f,c
  5229   002828  501B               	movf	(turnRight45@mR+1)^0,w,c
  5230   00282A  22DA               	addwfc	fsr2h,f,c
  5231   00282C  0E00               	movlw	0
  5232   00282E  6EDF               	movwf	indf2,c
  5233   002830                     
  5234                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5235   002830  0E00               	movlw	0
  5236   002832  6E1F               	movwf	(turnRight45@i+1)^0,c
  5237   002834  0E00               	movlw	0
  5238   002836  6E1E               	movwf	turnRight45@i^0,c
  5239   002838                     l2655:
  5240                           
  5241                           ;dc_motor.c: 122:         mR->power=i;
  5242   002838  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  5243   00283C  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  5244   002840  C01E  FFDF         	movff	turnRight45@i,indf2
  5245                           
  5246                           ;dc_motor.c: 123:         mL->power=i;
  5247   002844  C018  FFD9         	movff	turnRight45@mL,fsr2l
  5248   002848  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  5249   00284C  C01E  FFDF         	movff	turnRight45@i,indf2
  5250   002850                     
  5251                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5252   002850  0E02               	movlw	2
  5253   002852  6E1D               	movwf	(??_turnRight45+1)^0,c
  5254   002854  0E38               	movlw	56
  5255   002856  6E1C               	movwf	??_turnRight45^0,c
  5256   002858  0EAD               	movlw	173
  5257   00285A                     u2197:
  5258   00285A  2EE8               	decfsz	wreg,f,c
  5259   00285C  D7FE               	bra	u2197
  5260   00285E  2E1C               	decfsz	??_turnRight45^0,f,c
  5261   002860  D7FC               	bra	u2197
  5262   002862  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5263   002864  D7FA               	bra	u2197
  5264   002866  F000               	nop	
  5265   002868                     
  5266                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5267   002868  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  5268   00286C  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5269   002870  EC84  F010         	call	_setMotorPWM	;wreg free
  5270   002874                     
  5271                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5272   002874  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  5273   002878  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5274   00287C  EC84  F010         	call	_setMotorPWM	;wreg free
  5275   002880  0E0A               	movlw	10
  5276   002882  261E               	addwf	turnRight45@i^0,f,c
  5277   002884  0E00               	movlw	0
  5278   002886  221F               	addwfc	(turnRight45@i+1)^0,f,c
  5279   002888  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  5280   00288A  EF50  F014         	goto	u1281
  5281   00288E  501F               	movf	(turnRight45@i+1)^0,w,c
  5282   002890  E109               	bnz	u1280
  5283   002892  0E50               	movlw	80
  5284   002894  5C1E               	subwf	turnRight45@i^0,w,c
  5285   002896  A0D8               	btfss	status,0,c
  5286   002898  EF50  F014         	goto	u1281
  5287   00289C  EF52  F014         	goto	u1280
  5288   0028A0                     u1281:
  5289   0028A0  EF1C  F014         	goto	l2655
  5290   0028A4                     u1280:
  5291   0028A4                     
  5292                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5293   0028A4  0E06               	movlw	6
  5294   0028A6  6E1D               	movwf	(??_turnRight45+1)^0,c
  5295   0028A8  0E47               	movlw	71
  5296   0028AA  6E1C               	movwf	??_turnRight45^0,c
  5297   0028AC  0EA0               	movlw	160
  5298   0028AE                     u2207:
  5299   0028AE  2EE8               	decfsz	wreg,f,c
  5300   0028B0  D7FE               	bra	u2207
  5301   0028B2  2E1C               	decfsz	??_turnRight45^0,f,c
  5302   0028B4  D7FC               	bra	u2207
  5303   0028B6  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5304   0028B8  D7FA               	bra	u2207
  5305   0028BA  D000               	nop2	
  5306   0028BC  0012               	return		;funcret
  5307   0028BE                     __end_of_turnRight45:
  5308                           	callstack 0
  5309                           
  5310 ;; *************** function _turnLeft45 *****************
  5311 ;; Defined at:
  5312 ;;		line 101 in file "dc_motor.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5315 ;;		 -> main@motorL(9), 
  5316 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5317 ;;		 -> main@motorR(9), 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  i               2   29[COMRAM] int 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5331 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5332 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5333 ;;Total ram usage:        8 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; Hardware stack levels required when called: 6
  5336 ;; This function calls:
  5337 ;;		_setMotorPWM
  5338 ;; This function is called by:
  5339 ;;		_motor_response
  5340 ;;		_home_response
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text24
  5345   0028BE                     __ptext24:
  5346                           	callstack 0
  5347   0028BE                     _turnLeft45:
  5348                           	callstack 22
  5349   0028BE                     
  5350                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5351   0028BE  EE20 F001          	lfsr	2,1
  5352   0028C2  5018               	movf	turnLeft45@mL^0,w,c
  5353   0028C4  26D9               	addwf	fsr2l,f,c
  5354   0028C6  5019               	movf	(turnLeft45@mL+1)^0,w,c
  5355   0028C8  22DA               	addwfc	fsr2h,f,c
  5356   0028CA  0E00               	movlw	0
  5357   0028CC  6EDF               	movwf	indf2,c
  5358                           
  5359                           ;dc_motor.c: 104:     mR->direction=1;
  5360   0028CE  EE20 F001          	lfsr	2,1
  5361   0028D2  501A               	movf	turnLeft45@mR^0,w,c
  5362   0028D4  26D9               	addwf	fsr2l,f,c
  5363   0028D6  501B               	movf	(turnLeft45@mR+1)^0,w,c
  5364   0028D8  22DA               	addwfc	fsr2h,f,c
  5365   0028DA  0E01               	movlw	1
  5366   0028DC  6EDF               	movwf	indf2,c
  5367   0028DE                     
  5368                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5369   0028DE  0E00               	movlw	0
  5370   0028E0  6E1F               	movwf	(turnLeft45@i+1)^0,c
  5371   0028E2  0E00               	movlw	0
  5372   0028E4  6E1E               	movwf	turnLeft45@i^0,c
  5373   0028E6                     l2633:
  5374                           
  5375                           ;dc_motor.c: 107:         mR->power=i;
  5376   0028E6  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  5377   0028EA  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5378   0028EE  C01E  FFDF         	movff	turnLeft45@i,indf2
  5379                           
  5380                           ;dc_motor.c: 108:         mL->power=i;
  5381   0028F2  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  5382   0028F6  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5383   0028FA  C01E  FFDF         	movff	turnLeft45@i,indf2
  5384   0028FE                     
  5385                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5386   0028FE  0E02               	movlw	2
  5387   002900  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5388   002902  0E38               	movlw	56
  5389   002904  6E1C               	movwf	??_turnLeft45^0,c
  5390   002906  0EAD               	movlw	173
  5391   002908                     u2217:
  5392   002908  2EE8               	decfsz	wreg,f,c
  5393   00290A  D7FE               	bra	u2217
  5394   00290C  2E1C               	decfsz	??_turnLeft45^0,f,c
  5395   00290E  D7FC               	bra	u2217
  5396   002910  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5397   002912  D7FA               	bra	u2217
  5398   002914  F000               	nop	
  5399   002916                     
  5400                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5401   002916  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  5402   00291A  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5403   00291E  EC84  F010         	call	_setMotorPWM	;wreg free
  5404   002922                     
  5405                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5406   002922  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  5407   002926  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5408   00292A  EC84  F010         	call	_setMotorPWM	;wreg free
  5409   00292E  0E0A               	movlw	10
  5410   002930  261E               	addwf	turnLeft45@i^0,f,c
  5411   002932  0E00               	movlw	0
  5412   002934  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  5413   002936  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  5414   002938  EFA7  F014         	goto	u1271
  5415   00293C  501F               	movf	(turnLeft45@i+1)^0,w,c
  5416   00293E  E109               	bnz	u1270
  5417   002940  0E50               	movlw	80
  5418   002942  5C1E               	subwf	turnLeft45@i^0,w,c
  5419   002944  A0D8               	btfss	status,0,c
  5420   002946  EFA7  F014         	goto	u1271
  5421   00294A  EFA9  F014         	goto	u1270
  5422   00294E                     u1271:
  5423   00294E  EF73  F014         	goto	l2633
  5424   002952                     u1270:
  5425   002952                     
  5426                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5427   002952  0E06               	movlw	6
  5428   002954  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5429   002956  0E47               	movlw	71
  5430   002958  6E1C               	movwf	??_turnLeft45^0,c
  5431   00295A  0EA0               	movlw	160
  5432   00295C                     u2227:
  5433   00295C  2EE8               	decfsz	wreg,f,c
  5434   00295E  D7FE               	bra	u2227
  5435   002960  2E1C               	decfsz	??_turnLeft45^0,f,c
  5436   002962  D7FC               	bra	u2227
  5437   002964  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5438   002966  D7FA               	bra	u2227
  5439   002968  D000               	nop2	
  5440   00296A  0012               	return		;funcret
  5441   00296C                     __end_of_turnLeft45:
  5442                           	callstack 0
  5443                           
  5444 ;; *************** function _stop *****************
  5445 ;; Defined at:
  5446 ;;		line 84 in file "dc_motor.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5449 ;;		 -> main@motorL(9), 
  5450 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5451 ;;		 -> main@motorR(9), 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5466 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5467 ;;Total ram usage:        5 bytes
  5468 ;; Hardware stack levels used: 1
  5469 ;; Hardware stack levels required when called: 6
  5470 ;; This function calls:
  5471 ;;		_setMotorPWM
  5472 ;; This function is called by:
  5473 ;;		_main
  5474 ;;		_motor_response
  5475 ;;		_home_response
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text25
  5480   002BA2                     __ptext25:
  5481                           	callstack 0
  5482   002BA2                     _stop:
  5483                           	callstack 24
  5484   002BA2                     
  5485                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5486   002BA2  EFE6  F015         	goto	l2615
  5487   002BA6                     l2609:
  5488                           
  5489                           ;dc_motor.c: 87:         mL->power -=10;
  5490   002BA6  C018  FFD9         	movff	stop@mL,fsr2l
  5491   002BAA  C019  FFDA         	movff	stop@mL+1,fsr2h
  5492   002BAE  0E0A               	movlw	10
  5493   002BB0  5EDF               	subwf	indf2,f,c
  5494   002BB2                     
  5495                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5496   002BB2  0E2A               	movlw	42
  5497   002BB4  6E1C               	movwf	??_stop^0,c
  5498   002BB6  0E8E               	movlw	142
  5499   002BB8                     u2237:
  5500   002BB8  2EE8               	decfsz	wreg,f,c
  5501   002BBA  D7FE               	bra	u2237
  5502   002BBC  2E1C               	decfsz	??_stop^0,f,c
  5503   002BBE  D7FC               	bra	u2237
  5504   002BC0                     
  5505                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5506   002BC0  C018  F012         	movff	stop@mL,setMotorPWM@m
  5507   002BC4  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5508   002BC8  EC84  F010         	call	_setMotorPWM	;wreg free
  5509   002BCC                     l2615:
  5510                           
  5511                           ;dc_motor.c: 86:     while(mL->power !=0){
  5512   002BCC  C018  FFD9         	movff	stop@mL,fsr2l
  5513   002BD0  C019  FFDA         	movff	stop@mL+1,fsr2h
  5514   002BD4  50DF               	movf	indf2,w,c
  5515   002BD6  A4D8               	btfss	status,2,c
  5516   002BD8  EFF0  F015         	goto	u1251
  5517   002BDC  EFF2  F015         	goto	u1250
  5518   002BE0                     u1251:
  5519   002BE0  EFD3  F015         	goto	l2609
  5520   002BE4                     u1250:
  5521   002BE4  EF07  F016         	goto	l2623
  5522   002BE8                     l2617:
  5523                           
  5524                           ;dc_motor.c: 92:         mR->power -=10;
  5525   002BE8  C01A  FFD9         	movff	stop@mR,fsr2l
  5526   002BEC  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5527   002BF0  0E0A               	movlw	10
  5528   002BF2  5EDF               	subwf	indf2,f,c
  5529   002BF4                     
  5530                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5531   002BF4  0E2A               	movlw	42
  5532   002BF6  6E1C               	movwf	??_stop^0,c
  5533   002BF8  0E8E               	movlw	142
  5534   002BFA                     u2247:
  5535   002BFA  2EE8               	decfsz	wreg,f,c
  5536   002BFC  D7FE               	bra	u2247
  5537   002BFE  2E1C               	decfsz	??_stop^0,f,c
  5538   002C00  D7FC               	bra	u2247
  5539   002C02                     
  5540                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5541   002C02  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5542   002C06  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5543   002C0A  EC84  F010         	call	_setMotorPWM	;wreg free
  5544   002C0E                     l2623:
  5545                           
  5546                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5547   002C0E  C01A  FFD9         	movff	stop@mR,fsr2l
  5548   002C12  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5549   002C16  50DF               	movf	indf2,w,c
  5550   002C18  A4D8               	btfss	status,2,c
  5551   002C1A  EF11  F016         	goto	u1261
  5552   002C1E  EF13  F016         	goto	u1260
  5553   002C22                     u1261:
  5554   002C22  EFF4  F015         	goto	l2617
  5555   002C26                     u1260:
  5556   002C26  0012               	return		;funcret
  5557   002C28                     __end_of_stop:
  5558                           	callstack 0
  5559                           
  5560 ;; *************** function _fullSpeedAhead *****************
  5561 ;; Defined at:
  5562 ;;		line 131 in file "dc_motor.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5565 ;;		 -> main@motorL(9), 
  5566 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5567 ;;		 -> main@motorR(9), 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  i               2   28[COMRAM] int 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5583 ;;Total ram usage:        7 bytes
  5584 ;; Hardware stack levels used: 1
  5585 ;; Hardware stack levels required when called: 6
  5586 ;; This function calls:
  5587 ;;		_setMotorPWM
  5588 ;; This function is called by:
  5589 ;;		_main
  5590 ;;		_motor_response
  5591 ;;		_home_response
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text26
  5596   002A8E                     __ptext26:
  5597                           	callstack 0
  5598   002A8E                     _fullSpeedAhead:
  5599                           	callstack 24
  5600   002A8E                     
  5601                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  5602   002A8E  EE20 F001          	lfsr	2,1
  5603   002A92  5018               	movf	fullSpeedAhead@mL^0,w,c
  5604   002A94  26D9               	addwf	fsr2l,f,c
  5605   002A96  5019               	movf	(fullSpeedAhead@mL+1)^0,w,c
  5606   002A98  22DA               	addwfc	fsr2h,f,c
  5607   002A9A  0E01               	movlw	1
  5608   002A9C  6EDF               	movwf	indf2,c
  5609                           
  5610                           ;dc_motor.c: 134:     mR->direction=1;
  5611   002A9E  EE20 F001          	lfsr	2,1
  5612   002AA2  501A               	movf	fullSpeedAhead@mR^0,w,c
  5613   002AA4  26D9               	addwf	fsr2l,f,c
  5614   002AA6  501B               	movf	(fullSpeedAhead@mR+1)^0,w,c
  5615   002AA8  22DA               	addwfc	fsr2h,f,c
  5616   002AAA  0E01               	movlw	1
  5617   002AAC  6EDF               	movwf	indf2,c
  5618   002AAE                     
  5619                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  5620   002AAE  0E00               	movlw	0
  5621   002AB0  6E1E               	movwf	(fullSpeedAhead@i+1)^0,c
  5622   002AB2  0E00               	movlw	0
  5623   002AB4  6E1D               	movwf	fullSpeedAhead@i^0,c
  5624   002AB6                     l2677:
  5625                           
  5626                           ;dc_motor.c: 136:         mL->power=i;
  5627   002AB6  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5628   002ABA  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5629   002ABE  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  5630                           
  5631                           ;dc_motor.c: 137:         mR->power=i;
  5632   002AC2  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5633   002AC6  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5634   002ACA  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  5635   002ACE                     
  5636                           ;dc_motor.c: 138:         setMotorPWM(mL);
  5637   002ACE  C018  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  5638   002AD2  C019  F013         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  5639   002AD6  EC84  F010         	call	_setMotorPWM	;wreg free
  5640   002ADA                     
  5641                           ;dc_motor.c: 139:         setMotorPWM(mR);
  5642   002ADA  C01A  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  5643   002ADE  C01B  F013         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  5644   002AE2  EC84  F010         	call	_setMotorPWM	;wreg free
  5645   002AE6                     
  5646                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5647   002AE6  0ED0               	movlw	208
  5648   002AE8  6E1C               	movwf	??_fullSpeedAhead^0,c
  5649   002AEA  0ECA               	movlw	202
  5650   002AEC                     u2257:
  5651   002AEC  2EE8               	decfsz	wreg,f,c
  5652   002AEE  D7FE               	bra	u2257
  5653   002AF0  2E1C               	decfsz	??_fullSpeedAhead^0,f,c
  5654   002AF2  D7FC               	bra	u2257
  5655   002AF4                     
  5656                           ;dc_motor.c: 141:     }
  5657   002AF4  0E0A               	movlw	10
  5658   002AF6  261D               	addwf	fullSpeedAhead@i^0,f,c
  5659   002AF8  0E00               	movlw	0
  5660   002AFA  221E               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  5661   002AFC  BE1E               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  5662   002AFE  EF8A  F015         	goto	u1291
  5663   002B02  501E               	movf	(fullSpeedAhead@i+1)^0,w,c
  5664   002B04  E109               	bnz	u1290
  5665   002B06  0E3C               	movlw	60
  5666   002B08  5C1D               	subwf	fullSpeedAhead@i^0,w,c
  5667   002B0A  A0D8               	btfss	status,0,c
  5668   002B0C  EF8A  F015         	goto	u1291
  5669   002B10  EF8C  F015         	goto	u1290
  5670   002B14                     u1291:
  5671   002B14  EF5B  F015         	goto	l2677
  5672   002B18                     u1290:
  5673   002B18  0012               	return		;funcret
  5674   002B1A                     __end_of_fullSpeedAhead:
  5675                           	callstack 0
  5676                           
  5677 ;; *************** function _setMotorPWM *****************
  5678 ;; Defined at:
  5679 ;;		line 61 in file "dc_motor.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5682 ;;		 -> main@motorR(9), main@motorL(9), 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  negDuty         1   22[COMRAM] unsigned char 
  5685 ;;  posDuty         1   21[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5698 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5699 ;;Total ram usage:        6 bytes
  5700 ;; Hardware stack levels used: 1
  5701 ;; Hardware stack levels required when called: 5
  5702 ;; This function calls:
  5703 ;;		___lwdiv
  5704 ;;		___wmul
  5705 ;; This function is called by:
  5706 ;;		_stop
  5707 ;;		_turnLeft45
  5708 ;;		_turnRight45
  5709 ;;		_fullSpeedAhead
  5710 ;;		_reverseFullSpeed
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text27
  5716   002108                     __ptext27:
  5717                           	callstack 0
  5718   002108                     _setMotorPWM:
  5719                           	callstack 24
  5720   002108                     
  5721                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5722   002108  EE20 F002          	lfsr	2,2
  5723   00210C  5012               	movf	setMotorPWM@m^0,w,c
  5724   00210E  26D9               	addwf	fsr2l,f,c
  5725   002110  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5726   002112  22DA               	addwfc	fsr2h,f,c
  5727   002114  50DF               	movf	indf2,w,c
  5728   002116  B4D8               	btfsc	status,2,c
  5729   002118  EF90  F010         	goto	u1091
  5730   00211C  EF92  F010         	goto	u1090
  5731   002120                     u1091:
  5732   002120  EFC6  F010         	goto	l2511
  5733   002124                     u1090:
  5734   002124                     
  5735                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5736   002124  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5737   002128  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5738   00212C  50DF               	movf	indf2,w,c
  5739   00212E  6E14               	movwf	??_setMotorPWM^0,c
  5740   002130  5014               	movf	??_setMotorPWM^0,w,c
  5741   002132  6E05               	movwf	___wmul@multiplier^0,c
  5742   002134  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5743   002136  EE20 F003          	lfsr	2,3
  5744   00213A  5012               	movf	setMotorPWM@m^0,w,c
  5745   00213C  26D9               	addwf	fsr2l,f,c
  5746   00213E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5747   002140  22DA               	addwfc	fsr2h,f,c
  5748   002142  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5749   002146  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5750   00214A  EC99  F018         	call	___wmul	;wreg free
  5751   00214E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5752   002152  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5753   002156  0E00               	movlw	0
  5754   002158  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5755   00215A  0E64               	movlw	100
  5756   00215C  6E0D               	movwf	___lwdiv@divisor^0,c
  5757   00215E  EC91  F016         	call	___lwdiv	;wreg free
  5758   002162  EE20 F003          	lfsr	2,3
  5759   002166  5012               	movf	setMotorPWM@m^0,w,c
  5760   002168  26D9               	addwf	fsr2l,f,c
  5761   00216A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5762   00216C  22DA               	addwfc	fsr2h,f,c
  5763   00216E  50DF               	movf	indf2,w,c
  5764   002170  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5765   002172  500B               	movf	?___lwdiv^0,w,c
  5766   002174  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5767   002176  6E16               	movwf	setMotorPWM@posDuty^0,c
  5768   002178                     
  5769                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5770   002178  EE20 F003          	lfsr	2,3
  5771   00217C  5012               	movf	setMotorPWM@m^0,w,c
  5772   00217E  26D9               	addwf	fsr2l,f,c
  5773   002180  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5774   002182  22DA               	addwfc	fsr2h,f,c
  5775   002184  50DF               	movf	indf2,w,c
  5776   002186  6E17               	movwf	setMotorPWM@negDuty^0,c
  5777                           
  5778                           ;dc_motor.c: 68:     }
  5779   002188  EFE9  F010         	goto	l2515
  5780   00218C                     l2511:
  5781                           
  5782                           ;dc_motor.c: 70:         posDuty=0;
  5783   00218C  0E00               	movlw	0
  5784   00218E  6E16               	movwf	setMotorPWM@posDuty^0,c
  5785   002190                     
  5786                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5787   002190  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5788   002194  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5789   002198  50DF               	movf	indf2,w,c
  5790   00219A  6E14               	movwf	??_setMotorPWM^0,c
  5791   00219C  5014               	movf	??_setMotorPWM^0,w,c
  5792   00219E  6E05               	movwf	___wmul@multiplier^0,c
  5793   0021A0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5794   0021A2  EE20 F003          	lfsr	2,3
  5795   0021A6  5012               	movf	setMotorPWM@m^0,w,c
  5796   0021A8  26D9               	addwf	fsr2l,f,c
  5797   0021AA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5798   0021AC  22DA               	addwfc	fsr2h,f,c
  5799   0021AE  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5800   0021B2  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5801   0021B6  EC99  F018         	call	___wmul	;wreg free
  5802   0021BA  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5803   0021BE  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5804   0021C2  0E00               	movlw	0
  5805   0021C4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5806   0021C6  0E64               	movlw	100
  5807   0021C8  6E0D               	movwf	___lwdiv@divisor^0,c
  5808   0021CA  EC91  F016         	call	___lwdiv	;wreg free
  5809   0021CE  500B               	movf	?___lwdiv^0,w,c
  5810   0021D0  6E17               	movwf	setMotorPWM@negDuty^0,c
  5811   0021D2                     l2515:
  5812                           
  5813                           ;dc_motor.c: 74:     if (m->direction) {
  5814   0021D2  EE20 F001          	lfsr	2,1
  5815   0021D6  5012               	movf	setMotorPWM@m^0,w,c
  5816   0021D8  26D9               	addwf	fsr2l,f,c
  5817   0021DA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5818   0021DC  22DA               	addwfc	fsr2h,f,c
  5819   0021DE  50DF               	movf	indf2,w,c
  5820   0021E0  B4D8               	btfsc	status,2,c
  5821   0021E2  EFF5  F010         	goto	u1101
  5822   0021E6  EFF7  F010         	goto	u1100
  5823   0021EA                     u1101:
  5824   0021EA  EF19  F011         	goto	l2519
  5825   0021EE                     u1100:
  5826   0021EE                     
  5827                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5828   0021EE  EE20 F005          	lfsr	2,5
  5829   0021F2  5012               	movf	setMotorPWM@m^0,w,c
  5830   0021F4  26D9               	addwf	fsr2l,f,c
  5831   0021F6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5832   0021F8  22DA               	addwfc	fsr2h,f,c
  5833   0021FA  CFDE F014          	movff	postinc2,??_setMotorPWM
  5834   0021FE  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5835   002202  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5836   002206  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5837   00220A  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5838                           
  5839                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5840   00220E  EE20 F007          	lfsr	2,7
  5841   002212  5012               	movf	setMotorPWM@m^0,w,c
  5842   002214  26D9               	addwf	fsr2l,f,c
  5843   002216  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5844   002218  22DA               	addwfc	fsr2h,f,c
  5845   00221A  CFDE F014          	movff	postinc2,??_setMotorPWM
  5846   00221E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5847   002222  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5848   002226  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5849   00222A  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5850                           
  5851                           ;dc_motor.c: 77:     } else {
  5852   00222E  EF39  F011         	goto	l86
  5853   002232                     l2519:
  5854                           
  5855                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5856   002232  EE20 F005          	lfsr	2,5
  5857   002236  5012               	movf	setMotorPWM@m^0,w,c
  5858   002238  26D9               	addwf	fsr2l,f,c
  5859   00223A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5860   00223C  22DA               	addwfc	fsr2h,f,c
  5861   00223E  CFDE F014          	movff	postinc2,??_setMotorPWM
  5862   002242  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5863   002246  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5864   00224A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5865   00224E  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5866                           
  5867                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5868   002252  EE20 F007          	lfsr	2,7
  5869   002256  5012               	movf	setMotorPWM@m^0,w,c
  5870   002258  26D9               	addwf	fsr2l,f,c
  5871   00225A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5872   00225C  22DA               	addwfc	fsr2h,f,c
  5873   00225E  CFDE F014          	movff	postinc2,??_setMotorPWM
  5874   002262  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5875   002266  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5876   00226A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5877   00226E  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5878   002272                     l86:
  5879   002272  0012               	return		;funcret
  5880   002274                     __end_of_setMotorPWM:
  5881                           	callstack 0
  5882                           
  5883 ;; *************** function ___wmul *****************
  5884 ;; Defined at:
  5885 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  multiplier      2    4[COMRAM] unsigned int 
  5888 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  product         2    8[COMRAM] unsigned int 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  2    4[COMRAM] unsigned int 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0, prodl, prodh
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5904 ;;Total ram usage:        6 bytes
  5905 ;; Hardware stack levels used: 1
  5906 ;; Hardware stack levels required when called: 4
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_setMotorPWM
  5911 ;;		_normalise_readings
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text28
  5916   003132                     __ptext28:
  5917                           	callstack 0
  5918   003132                     ___wmul:
  5919                           	callstack 24
  5920   003132  5005               	movf	___wmul@multiplier^0,w,c
  5921   003134  0207               	mulwf	___wmul@multiplicand^0,c
  5922   003136  CFF3 F009          	movff	prodl,___wmul@product
  5923   00313A  CFF4 F00A          	movff	prodh,___wmul@product+1
  5924   00313E  5005               	movf	___wmul@multiplier^0,w,c
  5925   003140  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5926   003142  50F3               	movf	243,w,c
  5927   003144  260A               	addwf	(___wmul@product+1)^0,f,c
  5928   003146  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5929   003148  0207               	mulwf	___wmul@multiplicand^0,c
  5930   00314A  50F3               	movf	243,w,c
  5931   00314C  260A               	addwf	(___wmul@product+1)^0,f,c
  5932   00314E  C009  F005         	movff	___wmul@product,?___wmul
  5933   003152  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5934   003156  0012               	return		;funcret
  5935   003158                     __end_of___wmul:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _make_master_closeness *****************
  5939 ;; Defined at:
  5940 ;;		line 82 in file "colour_identify.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  buf             2   17[COMRAM] PTR unsigned char 
  5943 ;;		 -> main@buf(150), 
  5944 ;;  normalised_v    2   19[COMRAM] PTR unsigned int [9]
  5945 ;;		 -> card_response@normalised_values(54), 
  5946 ;;  master_close    2   21[COMRAM] PTR unsigned int 
  5947 ;;		 -> card_response@master_closeness(18), 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  i               1   43[COMRAM] enum E14551
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      void 
  5952 ;; Registers used:
  5953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5959 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;Total ram usage:       27 bytes
  5964 ;; Hardware stack levels used: 1
  5965 ;; Hardware stack levels required when called: 5
  5966 ;; This function calls:
  5967 ;;		___lwdiv
  5968 ;; This function is called by:
  5969 ;;		_card_response
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text29
  5974   002672                     __ptext29:
  5975                           	callstack 0
  5976   002672                     _make_master_closeness:
  5977                           	callstack 24
  5978   002672                     
  5979                           ;colour_identify.c: 83:     for(colour i = RED; i<=BLACK; i++){
  5980   002672  0E00               	movlw	0
  5981   002674  6E2C               	movwf	make_master_closeness@i^0,c
  5982   002676                     l2917:
  5983                           
  5984                           ;colour_identify.c: 85:         master_closeness[i] = (normalised_values[RED][i] + norma
      +                          lised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  5985   002676  502C               	movf	make_master_closeness@i^0,w,c
  5986   002678  0D02               	mullw	2
  5987   00267A  CFF3 F018          	movff	prodl,??_make_master_closeness
  5988   00267E  CFF4 F019          	movff	prodh,??_make_master_closeness+1
  5989   002682  5018               	movf	??_make_master_closeness^0,w,c
  5990   002684  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5991   002686  6E1A               	movwf	(??_make_master_closeness+2)^0,c
  5992   002688  5019               	movf	(??_make_master_closeness+1)^0,w,c
  5993   00268A  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5994   00268C  6E1B               	movwf	(??_make_master_closeness+3)^0,c
  5995   00268E  0E24               	movlw	36
  5996   002690  241A               	addwf	(??_make_master_closeness+2)^0,w,c
  5997   002692  6ED9               	movwf	fsr2l,c
  5998   002694  0E00               	movlw	0
  5999   002696  201B               	addwfc	(??_make_master_closeness+3)^0,w,c
  6000   002698  6EDA               	movwf	fsr2h,c
  6001   00269A  CFDE F01C          	movff	postinc2,??_make_master_closeness+4
  6002   00269E  CFDD F01D          	movff	postdec2,??_make_master_closeness+5
  6003   0026A2  502C               	movf	make_master_closeness@i^0,w,c
  6004   0026A4  0D02               	mullw	2
  6005   0026A6  CFF3 F01E          	movff	prodl,??_make_master_closeness+6
  6006   0026AA  CFF4 F01F          	movff	prodh,??_make_master_closeness+7
  6007   0026AE  501E               	movf	(??_make_master_closeness+6)^0,w,c
  6008   0026B0  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  6009   0026B2  6E20               	movwf	(??_make_master_closeness+8)^0,c
  6010   0026B4  501F               	movf	(??_make_master_closeness+7)^0,w,c
  6011   0026B6  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6012   0026B8  6E21               	movwf	(??_make_master_closeness+9)^0,c
  6013   0026BA  0E12               	movlw	18
  6014   0026BC  2420               	addwf	(??_make_master_closeness+8)^0,w,c
  6015   0026BE  6ED9               	movwf	fsr2l,c
  6016   0026C0  0E00               	movlw	0
  6017   0026C2  2021               	addwfc	(??_make_master_closeness+9)^0,w,c
  6018   0026C4  6EDA               	movwf	fsr2h,c
  6019   0026C6  CFDE F022          	movff	postinc2,??_make_master_closeness+10
  6020   0026CA  CFDD F023          	movff	postdec2,??_make_master_closeness+11
  6021   0026CE  502C               	movf	make_master_closeness@i^0,w,c
  6022   0026D0  0D02               	mullw	2
  6023   0026D2  CFF3 F024          	movff	prodl,??_make_master_closeness+12
  6024   0026D6  CFF4 F025          	movff	prodh,??_make_master_closeness+13
  6025   0026DA  5024               	movf	(??_make_master_closeness+12)^0,w,c
  6026   0026DC  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  6027   0026DE  6ED9               	movwf	fsr2l,c
  6028   0026E0  5025               	movf	(??_make_master_closeness+13)^0,w,c
  6029   0026E2  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6030   0026E4  6EDA               	movwf	fsr2h,c
  6031   0026E6  CFDE F026          	movff	postinc2,??_make_master_closeness+14
  6032   0026EA  CFDD F027          	movff	postdec2,??_make_master_closeness+15
  6033   0026EE  5022               	movf	(??_make_master_closeness+10)^0,w,c
  6034   0026F0  2426               	addwf	(??_make_master_closeness+14)^0,w,c
  6035   0026F2  6E28               	movwf	(??_make_master_closeness+16)^0,c
  6036   0026F4  5023               	movf	(??_make_master_closeness+11)^0,w,c
  6037   0026F6  2027               	addwfc	(??_make_master_closeness+15)^0,w,c
  6038   0026F8  6E29               	movwf	(??_make_master_closeness+17)^0,c
  6039   0026FA  501C               	movf	(??_make_master_closeness+4)^0,w,c
  6040   0026FC  2428               	addwf	(??_make_master_closeness+16)^0,w,c
  6041   0026FE  6E0B               	movwf	___lwdiv@dividend^0,c
  6042   002700  501D               	movf	(??_make_master_closeness+5)^0,w,c
  6043   002702  2029               	addwfc	(??_make_master_closeness+17)^0,w,c
  6044   002704  6E0C               	movwf	(___lwdiv@dividend+1)^0,c
  6045   002706  0E00               	movlw	0
  6046   002708  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6047   00270A  0E03               	movlw	3
  6048   00270C  6E0D               	movwf	___lwdiv@divisor^0,c
  6049   00270E  EC91  F016         	call	___lwdiv	;wreg free
  6050   002712  502C               	movf	make_master_closeness@i^0,w,c
  6051   002714  0D02               	mullw	2
  6052   002716  CFF3 F02A          	movff	prodl,??_make_master_closeness+18
  6053   00271A  CFF4 F02B          	movff	prodh,??_make_master_closeness+19
  6054   00271E  502A               	movf	(??_make_master_closeness+18)^0,w,c
  6055   002720  2416               	addwf	make_master_closeness@master_closeness^0,w,c
  6056   002722  6ED9               	movwf	fsr2l,c
  6057   002724  502B               	movf	(??_make_master_closeness+19)^0,w,c
  6058   002726  2017               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6059   002728  6EDA               	movwf	fsr2h,c
  6060   00272A  C00B  FFDE         	movff	?___lwdiv,postinc2
  6061   00272E  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  6062   002732                     
  6063                           ;colour_identify.c: 90:     }
  6064   002732  2A2C               	incf	make_master_closeness@i^0,f,c
  6065   002734  0E08               	movlw	8
  6066   002736  642C               	cpfsgt	make_master_closeness@i^0,c
  6067   002738  EFA0  F013         	goto	u1441
  6068   00273C  EFA2  F013         	goto	u1440
  6069   002740                     u1441:
  6070   002740  EF3B  F013         	goto	l2917
  6071   002744                     u1440:
  6072   002744  0012               	return		;funcret
  6073   002746                     __end_of_make_master_closeness:
  6074                           	callstack 0
  6075                           
  6076 ;; *************** function _determine_card *****************
  6077 ;; Defined at:
  6078 ;;		line 93 in file "colour_identify.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  6081 ;;		 -> card_response@master_closeness(18), 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  i               1   13[COMRAM] enum E14551
  6084 ;;  current_smal    2   10[COMRAM] unsigned int 
  6085 ;;  predicted_co    1   12[COMRAM] enum E14551
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      enum E14551
  6088 ;; Registers used:
  6089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6096 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6097 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6098 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6099 ;;Total ram usage:       10 bytes
  6100 ;; Hardware stack levels used: 1
  6101 ;; Hardware stack levels required when called: 4
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_card_response
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text30
  6110   002C28                     __ptext30:
  6111                           	callstack 0
  6112   002C28                     _determine_card:
  6113                           	callstack 25
  6114   002C28                     
  6115                           ;colour_identify.c: 95:     colour predicted_colour = RED;
  6116   002C28  0E00               	movlw	0
  6117   002C2A  6E0D               	movwf	determine_card@predicted_colour^0,c
  6118   002C2C                     
  6119                           ;colour_identify.c: 96:     unsigned int current_smallest = master_closeness[RED];
  6120   002C2C  C005  FFD9         	movff	determine_card@master_closeness,fsr2l
  6121   002C30  C006  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  6122   002C34  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6123   002C38  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6124   002C3C                     
  6125                           ;colour_identify.c: 97:     for(colour i = GREEN; i<=BLACK; i++){
  6126   002C3C  0E01               	movlw	1
  6127   002C3E  6E0E               	movwf	determine_card@i^0,c
  6128   002C40                     l2933:
  6129                           
  6130                           ;colour_identify.c: 98:         if(master_closeness[i] < current_smallest){
  6131   002C40  500E               	movf	determine_card@i^0,w,c
  6132   002C42  0D02               	mullw	2
  6133   002C44  CFF3 F007          	movff	prodl,??_determine_card
  6134   002C48  CFF4 F008          	movff	prodh,??_determine_card+1
  6135   002C4C  5007               	movf	??_determine_card^0,w,c
  6136   002C4E  2405               	addwf	determine_card@master_closeness^0,w,c
  6137   002C50  6ED9               	movwf	fsr2l,c
  6138   002C52  5008               	movf	(??_determine_card+1)^0,w,c
  6139   002C54  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6140   002C56  6EDA               	movwf	fsr2h,c
  6141   002C58  500B               	movf	determine_card@current_smallest^0,w,c
  6142   002C5A  5CDE               	subwf	postinc2,w,c
  6143   002C5C  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  6144   002C5E  58DE               	subwfb	postinc2,w,c
  6145   002C60  B0D8               	btfsc	status,0,c
  6146   002C62  EF35  F016         	goto	u1451
  6147   002C66  EF37  F016         	goto	u1450
  6148   002C6A                     u1451:
  6149   002C6A  EF49  F016         	goto	l2939
  6150   002C6E                     u1450:
  6151   002C6E                     
  6152                           ;colour_identify.c: 99:             current_smallest = master_closeness[i];
  6153   002C6E  500E               	movf	determine_card@i^0,w,c
  6154   002C70  0D02               	mullw	2
  6155   002C72  CFF3 F007          	movff	prodl,??_determine_card
  6156   002C76  CFF4 F008          	movff	prodh,??_determine_card+1
  6157   002C7A  5007               	movf	??_determine_card^0,w,c
  6158   002C7C  2405               	addwf	determine_card@master_closeness^0,w,c
  6159   002C7E  6ED9               	movwf	fsr2l,c
  6160   002C80  5008               	movf	(??_determine_card+1)^0,w,c
  6161   002C82  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6162   002C84  6EDA               	movwf	fsr2h,c
  6163   002C86  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6164   002C8A  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6165   002C8E                     
  6166                           ;colour_identify.c: 100:             predicted_colour = i;
  6167   002C8E  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  6168   002C92                     l2939:
  6169                           
  6170                           ;colour_identify.c: 102:     }
  6171   002C92  2A0E               	incf	determine_card@i^0,f,c
  6172   002C94  0E08               	movlw	8
  6173   002C96  640E               	cpfsgt	determine_card@i^0,c
  6174   002C98  EF50  F016         	goto	u1461
  6175   002C9C  EF52  F016         	goto	u1460
  6176   002CA0                     u1461:
  6177   002CA0  EF20  F016         	goto	l2933
  6178   002CA4                     u1460:
  6179   002CA4                     
  6180                           ;colour_identify.c: 103:     return predicted_colour;
  6181   002CA4  500D               	movf	determine_card@predicted_colour^0,w,c
  6182   002CA6  0012               	return		;funcret
  6183   002CA8                     __end_of_determine_card:
  6184                           	callstack 0
  6185                           
  6186 ;; *************** function _collect_avg_readings *****************
  6187 ;; Defined at:
  6188 ;;		line 25 in file "colour_identify.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  6191 ;;		 -> main@red_read(2), 
  6192 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  6193 ;;		 -> main@green_read(2), 
  6194 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  6195 ;;		 -> main@blue_read(2), 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  i               2   31[COMRAM] int 
  6198 ;;  i               2   29[COMRAM] int 
  6199 ;;  i               2   27[COMRAM] int 
  6200 ;;  i               2   25[COMRAM] int 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6210 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6211 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6213 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6214 ;;Total ram usage:       16 bytes
  6215 ;; Hardware stack levels used: 1
  6216 ;; Hardware stack levels required when called: 7
  6217 ;; This function calls:
  6218 ;;		___lwdiv
  6219 ;;		_color_read_Blue
  6220 ;;		_color_read_Green
  6221 ;;		_color_read_Red
  6222 ;; This function is called by:
  6223 ;;		_main
  6224 ;;		_card_response
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text31
  6229   001D9A                     __ptext31:
  6230                           	callstack 0
  6231   001D9A                     _collect_avg_readings:
  6232                           	callstack 23
  6233   001D9A                     
  6234                           ;colour_identify.c: 25: void collect_avg_readings( unsigned int *red_read, unsigned int 
      +                          *green_read, unsigned int *blue_read);colour_identify.c: 26: {;colour_identify.c: 29:   
      +                            for (int i = 0; i <= 500; i++){
  6235   001D9A  0E00               	movlw	0
  6236   001D9C  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  6237   001D9E  0E00               	movlw	0
  6238   001DA0  6E1A               	movwf	collect_avg_readings@i^0,c
  6239   001DA2                     l2825:
  6240                           
  6241                           ;colour_identify.c: 30:         *red_read = color_read_Red();
  6242   001DA2  EC1E  F017         	call	_color_read_Red	;wreg free
  6243   001DA6  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6244   001DAA  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6245   001DAE  C009  FFDE         	movff	?_color_read_Red,postinc2
  6246   001DB2  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  6247                           
  6248                           ;colour_identify.c: 31:         *green_read = color_read_Green();
  6249   001DB6  EC46  F017         	call	_color_read_Green	;wreg free
  6250   001DBA  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6251   001DBE  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6252   001DC2  C009  FFDE         	movff	?_color_read_Green,postinc2
  6253   001DC6  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  6254                           
  6255                           ;colour_identify.c: 32:         *blue_read = color_read_Blue();
  6256   001DCA  EC6E  F017         	call	_color_read_Blue	;wreg free
  6257   001DCE  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6258   001DD2  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6259   001DD6  C009  FFDE         	movff	?_color_read_Blue,postinc2
  6260   001DDA  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  6261   001DDE                     
  6262                           ;colour_identify.c: 33:     }
  6263   001DDE  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  6264   001DE0  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  6265   001DE2  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6266   001DE4  EFFD  F00E         	goto	u1381
  6267   001DE8  0EF5               	movlw	245
  6268   001DEA  5C1A               	subwf	collect_avg_readings@i^0,w,c
  6269   001DEC  0E01               	movlw	1
  6270   001DEE  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6271   001DF0  A0D8               	btfss	status,0,c
  6272   001DF2  EFFD  F00E         	goto	u1381
  6273   001DF6  EFFF  F00E         	goto	u1380
  6274   001DFA                     u1381:
  6275   001DFA  EFD1  F00E         	goto	l2825
  6276   001DFE                     u1380:
  6277   001DFE                     
  6278                           ;colour_identify.c: 37:     for(int i = 0; i <= 2; i++){
  6279   001DFE  0E00               	movlw	0
  6280   001E00  6E1D               	movwf	(collect_avg_readings@i_1561+1)^0,c
  6281   001E02  0E00               	movlw	0
  6282   001E04  6E1C               	movwf	collect_avg_readings@i_1561^0,c
  6283   001E06                     l2837:
  6284                           
  6285                           ;colour_identify.c: 38:         *red_read += color_read_Red();
  6286   001E06  EC1E  F017         	call	_color_read_Red	;wreg free
  6287   001E0A  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6288   001E0E  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6289   001E12  5009               	movf	?_color_read_Red^0,w,c
  6290   001E14  26DE               	addwf	postinc2,f,c
  6291   001E16  500A               	movf	(?_color_read_Red+1)^0,w,c
  6292   001E18  22DD               	addwfc	postdec2,f,c
  6293   001E1A                     
  6294                           ;colour_identify.c: 39:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6295   001E1A  0E11               	movlw	17
  6296   001E1C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6297   001E1E  0E3C               	movlw	60
  6298   001E20  6E18               	movwf	??_collect_avg_readings^0,c
  6299   001E22  0ECB               	movlw	203
  6300   001E24                     u2267:
  6301   001E24  2EE8               	decfsz	wreg,f,c
  6302   001E26  D7FE               	bra	u2267
  6303   001E28  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6304   001E2A  D7FC               	bra	u2267
  6305   001E2C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6306   001E2E  D7FA               	bra	u2267
  6307   001E30  F000               	nop	
  6308   001E32                     
  6309                           ;colour_identify.c: 40:     }
  6310   001E32  4A1C               	infsnz	collect_avg_readings@i_1561^0,f,c
  6311   001E34  2A1D               	incf	(collect_avg_readings@i_1561+1)^0,f,c
  6312   001E36  BE1D               	btfsc	(collect_avg_readings@i_1561+1)^0,7,c
  6313   001E38  EF27  F00F         	goto	u1391
  6314   001E3C  501D               	movf	(collect_avg_readings@i_1561+1)^0,w,c
  6315   001E3E  E109               	bnz	u1390
  6316   001E40  0E03               	movlw	3
  6317   001E42  5C1C               	subwf	collect_avg_readings@i_1561^0,w,c
  6318   001E44  A0D8               	btfss	status,0,c
  6319   001E46  EF27  F00F         	goto	u1391
  6320   001E4A  EF29  F00F         	goto	u1390
  6321   001E4E                     u1391:
  6322   001E4E  EF03  F00F         	goto	l2837
  6323   001E52                     u1390:
  6324   001E52                     
  6325                           ;colour_identify.c: 41:     *red_read = *red_read/3;
  6326   001E52  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6327   001E56  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6328   001E5A  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  6329   001E5E  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  6330   001E62  0E00               	movlw	0
  6331   001E64  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6332   001E66  0E03               	movlw	3
  6333   001E68  6E0D               	movwf	___lwdiv@divisor^0,c
  6334   001E6A  EC91  F016         	call	___lwdiv	;wreg free
  6335   001E6E  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6336   001E72  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6337   001E76  C00B  FFDE         	movff	?___lwdiv,postinc2
  6338   001E7A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  6339   001E7E                     
  6340                           ;colour_identify.c: 43:     for(int i = 0; i <= 2; i++){
  6341   001E7E  0E00               	movlw	0
  6342   001E80  6E1F               	movwf	(collect_avg_readings@i_1562+1)^0,c
  6343   001E82  0E00               	movlw	0
  6344   001E84  6E1E               	movwf	collect_avg_readings@i_1562^0,c
  6345   001E86                     l2853:
  6346                           
  6347                           ;colour_identify.c: 44:         *green_read += color_read_Green();
  6348   001E86  EC46  F017         	call	_color_read_Green	;wreg free
  6349   001E8A  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6350   001E8E  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6351   001E92  5009               	movf	?_color_read_Green^0,w,c
  6352   001E94  26DE               	addwf	postinc2,f,c
  6353   001E96  500A               	movf	(?_color_read_Green+1)^0,w,c
  6354   001E98  22DD               	addwfc	postdec2,f,c
  6355   001E9A                     
  6356                           ;colour_identify.c: 45:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6357   001E9A  0E11               	movlw	17
  6358   001E9C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6359   001E9E  0E3C               	movlw	60
  6360   001EA0  6E18               	movwf	??_collect_avg_readings^0,c
  6361   001EA2  0ECB               	movlw	203
  6362   001EA4                     u2277:
  6363   001EA4  2EE8               	decfsz	wreg,f,c
  6364   001EA6  D7FE               	bra	u2277
  6365   001EA8  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6366   001EAA  D7FC               	bra	u2277
  6367   001EAC  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6368   001EAE  D7FA               	bra	u2277
  6369   001EB0  F000               	nop	
  6370   001EB2                     
  6371                           ;colour_identify.c: 46:     }
  6372   001EB2  4A1E               	infsnz	collect_avg_readings@i_1562^0,f,c
  6373   001EB4  2A1F               	incf	(collect_avg_readings@i_1562+1)^0,f,c
  6374   001EB6  BE1F               	btfsc	(collect_avg_readings@i_1562+1)^0,7,c
  6375   001EB8  EF67  F00F         	goto	u1401
  6376   001EBC  501F               	movf	(collect_avg_readings@i_1562+1)^0,w,c
  6377   001EBE  E109               	bnz	u1400
  6378   001EC0  0E03               	movlw	3
  6379   001EC2  5C1E               	subwf	collect_avg_readings@i_1562^0,w,c
  6380   001EC4  A0D8               	btfss	status,0,c
  6381   001EC6  EF67  F00F         	goto	u1401
  6382   001ECA  EF69  F00F         	goto	u1400
  6383   001ECE                     u1401:
  6384   001ECE  EF43  F00F         	goto	l2853
  6385   001ED2                     u1400:
  6386   001ED2                     
  6387                           ;colour_identify.c: 47:     *green_read = *green_read/3;
  6388   001ED2  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6389   001ED6  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6390   001EDA  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  6391   001EDE  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  6392   001EE2  0E00               	movlw	0
  6393   001EE4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6394   001EE6  0E03               	movlw	3
  6395   001EE8  6E0D               	movwf	___lwdiv@divisor^0,c
  6396   001EEA  EC91  F016         	call	___lwdiv	;wreg free
  6397   001EEE  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6398   001EF2  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6399   001EF6  C00B  FFDE         	movff	?___lwdiv,postinc2
  6400   001EFA  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  6401   001EFE                     
  6402                           ;colour_identify.c: 49:     for(int i = 0; i <= 2; i++){
  6403   001EFE  0E00               	movlw	0
  6404   001F00  6E21               	movwf	(collect_avg_readings@i_1563+1)^0,c
  6405   001F02  0E00               	movlw	0
  6406   001F04  6E20               	movwf	collect_avg_readings@i_1563^0,c
  6407   001F06                     l2869:
  6408                           
  6409                           ;colour_identify.c: 50:         *blue_read += color_read_Blue();
  6410   001F06  EC6E  F017         	call	_color_read_Blue	;wreg free
  6411   001F0A  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6412   001F0E  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6413   001F12  5009               	movf	?_color_read_Blue^0,w,c
  6414   001F14  26DE               	addwf	postinc2,f,c
  6415   001F16  500A               	movf	(?_color_read_Blue+1)^0,w,c
  6416   001F18  22DD               	addwfc	postdec2,f,c
  6417   001F1A                     
  6418                           ;colour_identify.c: 51:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6419   001F1A  0E11               	movlw	17
  6420   001F1C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6421   001F1E  0E3C               	movlw	60
  6422   001F20  6E18               	movwf	??_collect_avg_readings^0,c
  6423   001F22  0ECB               	movlw	203
  6424   001F24                     u2287:
  6425   001F24  2EE8               	decfsz	wreg,f,c
  6426   001F26  D7FE               	bra	u2287
  6427   001F28  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6428   001F2A  D7FC               	bra	u2287
  6429   001F2C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6430   001F2E  D7FA               	bra	u2287
  6431   001F30  F000               	nop	
  6432   001F32                     
  6433                           ;colour_identify.c: 52:     }
  6434   001F32  4A20               	infsnz	collect_avg_readings@i_1563^0,f,c
  6435   001F34  2A21               	incf	(collect_avg_readings@i_1563+1)^0,f,c
  6436   001F36  BE21               	btfsc	(collect_avg_readings@i_1563+1)^0,7,c
  6437   001F38  EFA7  F00F         	goto	u1411
  6438   001F3C  5021               	movf	(collect_avg_readings@i_1563+1)^0,w,c
  6439   001F3E  E109               	bnz	u1410
  6440   001F40  0E03               	movlw	3
  6441   001F42  5C20               	subwf	collect_avg_readings@i_1563^0,w,c
  6442   001F44  A0D8               	btfss	status,0,c
  6443   001F46  EFA7  F00F         	goto	u1411
  6444   001F4A  EFA9  F00F         	goto	u1410
  6445   001F4E                     u1411:
  6446   001F4E  EF83  F00F         	goto	l2869
  6447   001F52                     u1410:
  6448   001F52                     
  6449                           ;colour_identify.c: 53:     *blue_read = *blue_read/3;
  6450   001F52  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6451   001F56  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6452   001F5A  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  6453   001F5E  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  6454   001F62  0E00               	movlw	0
  6455   001F64  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6456   001F66  0E03               	movlw	3
  6457   001F68  6E0D               	movwf	___lwdiv@divisor^0,c
  6458   001F6A  EC91  F016         	call	___lwdiv	;wreg free
  6459   001F6E  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6460   001F72  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6461   001F76  C00B  FFDE         	movff	?___lwdiv,postinc2
  6462   001F7A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  6463   001F7E  0012               	return		;funcret
  6464   001F80                     __end_of_collect_avg_readings:
  6465                           	callstack 0
  6466                           
  6467 ;; *************** function _color_read_Red *****************
  6468 ;; Defined at:
  6469 ;;		line 29 in file "color.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  tmp             2   13[COMRAM] unsigned int 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  2    8[COMRAM] unsigned int 
  6476 ;; Registers used:
  6477 ;;		wreg, status,2, status,0, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6487 ;;Total ram usage:        7 bytes
  6488 ;; Hardware stack levels used: 1
  6489 ;; Hardware stack levels required when called: 6
  6490 ;; This function calls:
  6491 ;;		_I2C_2_Master_Read
  6492 ;;		_I2C_2_Master_RepStart
  6493 ;;		_I2C_2_Master_Start
  6494 ;;		_I2C_2_Master_Stop
  6495 ;;		_I2C_2_Master_Write
  6496 ;; This function is called by:
  6497 ;;		_collect_avg_readings
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text32
  6502   002E3C                     __ptext32:
  6503                           	callstack 0
  6504   002E3C                     _color_read_Red:
  6505                           	callstack 23
  6506   002E3C                     
  6507                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6508   002E3C  EC1D  F019         	call	_I2C_2_Master_Start	;wreg free
  6509                           
  6510                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6511   002E40  0E52               	movlw	82
  6512   002E42  EC07  F019         	call	_I2C_2_Master_Write
  6513                           
  6514                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6515   002E46  0EB6               	movlw	182
  6516   002E48  EC07  F019         	call	_I2C_2_Master_Write
  6517                           
  6518                           ;color.c: 35:  I2C_2_Master_RepStart();
  6519   002E4C  EC13  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6520                           
  6521                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6522   002E50  0E53               	movlw	83
  6523   002E52  EC07  F019         	call	_I2C_2_Master_Write
  6524                           
  6525                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6526   002E56  0E01               	movlw	1
  6527   002E58  ECB8  F017         	call	_I2C_2_Master_Read
  6528   002E5C  6E0B               	movwf	??_color_read_Red^0,c
  6529   002E5E  500B               	movf	??_color_read_Red^0,w,c
  6530   002E60  6E0E               	movwf	color_read_Red@tmp^0,c
  6531   002E62  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6532                           
  6533                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6534   002E64  0E00               	movlw	0
  6535   002E66  ECB8  F017         	call	_I2C_2_Master_Read
  6536   002E6A  6E0B               	movwf	??_color_read_Red^0,c
  6537   002E6C  500B               	movf	??_color_read_Red^0,w,c
  6538   002E6E  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6539   002E70  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6540   002E72  500E               	movf	color_read_Red@tmp^0,w,c
  6541   002E74  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6542   002E76  6E0E               	movwf	color_read_Red@tmp^0,c
  6543   002E78  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6544   002E7A  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6545   002E7C  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6546                           
  6547                           ;color.c: 39:  I2C_2_Master_Stop();
  6548   002E7E  EC18  F019         	call	_I2C_2_Master_Stop	;wreg free
  6549   002E82                     
  6550                           ;color.c: 40:  return tmp;
  6551   002E82  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6552   002E86  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6553   002E8A  0012               	return		;funcret
  6554   002E8C                     __end_of_color_read_Red:
  6555                           	callstack 0
  6556                           
  6557 ;; *************** function _color_read_Green *****************
  6558 ;; Defined at:
  6559 ;;		line 43 in file "color.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  tmp             2   13[COMRAM] unsigned int 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  2    8[COMRAM] unsigned int 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6575 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6576 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6577 ;;Total ram usage:        7 bytes
  6578 ;; Hardware stack levels used: 1
  6579 ;; Hardware stack levels required when called: 6
  6580 ;; This function calls:
  6581 ;;		_I2C_2_Master_Read
  6582 ;;		_I2C_2_Master_RepStart
  6583 ;;		_I2C_2_Master_Start
  6584 ;;		_I2C_2_Master_Stop
  6585 ;;		_I2C_2_Master_Write
  6586 ;; This function is called by:
  6587 ;;		_collect_avg_readings
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text33
  6592   002E8C                     __ptext33:
  6593                           	callstack 0
  6594   002E8C                     _color_read_Green:
  6595                           	callstack 23
  6596   002E8C                     
  6597                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6598   002E8C  EC1D  F019         	call	_I2C_2_Master_Start	;wreg free
  6599                           
  6600                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6601   002E90  0E52               	movlw	82
  6602   002E92  EC07  F019         	call	_I2C_2_Master_Write
  6603                           
  6604                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6605   002E96  0EB8               	movlw	184
  6606   002E98  EC07  F019         	call	_I2C_2_Master_Write
  6607                           
  6608                           ;color.c: 49:  I2C_2_Master_RepStart();
  6609   002E9C  EC13  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6610                           
  6611                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6612   002EA0  0E53               	movlw	83
  6613   002EA2  EC07  F019         	call	_I2C_2_Master_Write
  6614                           
  6615                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6616   002EA6  0E01               	movlw	1
  6617   002EA8  ECB8  F017         	call	_I2C_2_Master_Read
  6618   002EAC  6E0B               	movwf	??_color_read_Green^0,c
  6619   002EAE  500B               	movf	??_color_read_Green^0,w,c
  6620   002EB0  6E0E               	movwf	color_read_Green@tmp^0,c
  6621   002EB2  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6622                           
  6623                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6624   002EB4  0E00               	movlw	0
  6625   002EB6  ECB8  F017         	call	_I2C_2_Master_Read
  6626   002EBA  6E0B               	movwf	??_color_read_Green^0,c
  6627   002EBC  500B               	movf	??_color_read_Green^0,w,c
  6628   002EBE  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6629   002EC0  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6630   002EC2  500E               	movf	color_read_Green@tmp^0,w,c
  6631   002EC4  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6632   002EC6  6E0E               	movwf	color_read_Green@tmp^0,c
  6633   002EC8  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6634   002ECA  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6635   002ECC  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6636                           
  6637                           ;color.c: 53:  I2C_2_Master_Stop();
  6638   002ECE  EC18  F019         	call	_I2C_2_Master_Stop	;wreg free
  6639   002ED2                     
  6640                           ;color.c: 54:  return tmp;
  6641   002ED2  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6642   002ED6  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6643   002EDA  0012               	return		;funcret
  6644   002EDC                     __end_of_color_read_Green:
  6645                           	callstack 0
  6646                           
  6647 ;; *************** function _color_read_Blue *****************
  6648 ;; Defined at:
  6649 ;;		line 57 in file "color.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  tmp             2   13[COMRAM] unsigned int 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  2    8[COMRAM] unsigned int 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;Total ram usage:        7 bytes
  6668 ;; Hardware stack levels used: 1
  6669 ;; Hardware stack levels required when called: 6
  6670 ;; This function calls:
  6671 ;;		_I2C_2_Master_Read
  6672 ;;		_I2C_2_Master_RepStart
  6673 ;;		_I2C_2_Master_Start
  6674 ;;		_I2C_2_Master_Stop
  6675 ;;		_I2C_2_Master_Write
  6676 ;; This function is called by:
  6677 ;;		_collect_avg_readings
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text34
  6682   002EDC                     __ptext34:
  6683                           	callstack 0
  6684   002EDC                     _color_read_Blue:
  6685                           	callstack 23
  6686   002EDC                     
  6687                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6688   002EDC  EC1D  F019         	call	_I2C_2_Master_Start	;wreg free
  6689                           
  6690                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6691   002EE0  0E52               	movlw	82
  6692   002EE2  EC07  F019         	call	_I2C_2_Master_Write
  6693                           
  6694                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6695   002EE6  0EBA               	movlw	186
  6696   002EE8  EC07  F019         	call	_I2C_2_Master_Write
  6697                           
  6698                           ;color.c: 63:  I2C_2_Master_RepStart();
  6699   002EEC  EC13  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6700                           
  6701                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6702   002EF0  0E53               	movlw	83
  6703   002EF2  EC07  F019         	call	_I2C_2_Master_Write
  6704                           
  6705                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6706   002EF6  0E01               	movlw	1
  6707   002EF8  ECB8  F017         	call	_I2C_2_Master_Read
  6708   002EFC  6E0B               	movwf	??_color_read_Blue^0,c
  6709   002EFE  500B               	movf	??_color_read_Blue^0,w,c
  6710   002F00  6E0E               	movwf	color_read_Blue@tmp^0,c
  6711   002F02  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  6712                           
  6713                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6714   002F04  0E00               	movlw	0
  6715   002F06  ECB8  F017         	call	_I2C_2_Master_Read
  6716   002F0A  6E0B               	movwf	??_color_read_Blue^0,c
  6717   002F0C  500B               	movf	??_color_read_Blue^0,w,c
  6718   002F0E  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  6719   002F10  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  6720   002F12  500E               	movf	color_read_Blue@tmp^0,w,c
  6721   002F14  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  6722   002F16  6E0E               	movwf	color_read_Blue@tmp^0,c
  6723   002F18  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  6724   002F1A  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  6725   002F1C  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  6726                           
  6727                           ;color.c: 67:  I2C_2_Master_Stop();
  6728   002F1E  EC18  F019         	call	_I2C_2_Master_Stop	;wreg free
  6729   002F22                     
  6730                           ;color.c: 68:  return tmp;
  6731   002F22  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  6732   002F26  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6733   002F2A  0012               	return		;funcret
  6734   002F2C                     __end_of_color_read_Blue:
  6735                           	callstack 0
  6736                           
  6737 ;; *************** function _I2C_2_Master_RepStart *****************
  6738 ;; Defined at:
  6739 ;;		line 33 in file "i2c.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;		None
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;		None
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, status,2, status,0, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;Total ram usage:        0 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 5
  6760 ;; This function calls:
  6761 ;;		_I2C_2_Master_Idle
  6762 ;; This function is called by:
  6763 ;;		_color_read_Red
  6764 ;;		_color_read_Green
  6765 ;;		_color_read_Blue
  6766 ;;		_color_read_Clear
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text35
  6771   003226                     __ptext35:
  6772                           	callstack 0
  6773   003226                     _I2C_2_Master_RepStart:
  6774                           	callstack 23
  6775   003226                     
  6776                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6777   003226  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  6778   00322A                     
  6779                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6780   00322A  010E               	movlb	14	; () banked
  6781   00322C  83DA               	bsf	218,1,b	;volatile
  6782   00322E                     
  6783                           ; BSR set to: 14
  6784   00322E  0012               	return		;funcret
  6785   003230                     __end_of_I2C_2_Master_RepStart:
  6786                           	callstack 0
  6787                           
  6788 ;; *************** function _I2C_2_Master_Read *****************
  6789 ;; Defined at:
  6790 ;;		line 51 in file "i2c.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;  ack             1    wreg     unsigned char 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  ack             1    6[COMRAM] unsigned char 
  6795 ;;  tmp             1    7[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      unsigned char 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6807 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6809 ;;Total ram usage:        3 bytes
  6810 ;; Hardware stack levels used: 1
  6811 ;; Hardware stack levels required when called: 5
  6812 ;; This function calls:
  6813 ;;		_I2C_2_Master_Idle
  6814 ;; This function is called by:
  6815 ;;		_color_read_Red
  6816 ;;		_color_read_Green
  6817 ;;		_color_read_Blue
  6818 ;;		_color_read_Clear
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text36
  6823   002F70                     __ptext36:
  6824                           	callstack 0
  6825   002F70                     _I2C_2_Master_Read:
  6826                           	callstack 23
  6827                           
  6828                           ; BSR set to: 14
  6829                           ;incstack = 0
  6830                           ;I2C_2_Master_Read@ack stored from wreg
  6831   002F70  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6832   002F72                     
  6833                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6834   002F72  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  6835   002F76                     
  6836                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6837   002F76  010E               	movlb	14	; () banked
  6838   002F78  87DA               	bsf	218,3,b	;volatile
  6839                           
  6840                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6841   002F7A  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  6842   002F7E                     
  6843                           ;i2c.c: 57:   tmp = SSP2BUF;
  6844   002F7E  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6845                           
  6846                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6847   002F82  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  6848   002F86                     
  6849                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6850   002F86  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  6851   002F88  B4D8               	btfsc	status,2,c
  6852   002F8A  EFC9  F017         	goto	u1231
  6853   002F8E  EFCD  F017         	goto	u1230
  6854   002F92                     u1231:
  6855   002F92  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6856   002F94  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  6857   002F96  EFCE  F017         	goto	u1248
  6858   002F9A                     u1230:
  6859   002F9A  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6860   002F9C                     u1248:
  6861   002F9C  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  6862   002F9E  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  6863   002FA0  010E               	movlb	14	; () banked
  6864   002FA2  51DA               	movf	218,w,b	;volatile
  6865   002FA4  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6866   002FA6  0BDF               	andlw	-33
  6867   002FA8  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6868   002FAA  6FDA               	movwf	218,b	;volatile
  6869   002FAC                     
  6870                           ; BSR set to: 14
  6871                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6872   002FAC  89DA               	bsf	218,4,b	;volatile
  6873   002FAE                     
  6874                           ; BSR set to: 14
  6875                           ;i2c.c: 61:   return tmp;
  6876   002FAE  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  6877   002FB0                     
  6878                           ; BSR set to: 14
  6879   002FB0  0012               	return		;funcret
  6880   002FB2                     __end_of_I2C_2_Master_Read:
  6881                           	callstack 0
  6882                           
  6883 ;; *************** function ___lwdiv *****************
  6884 ;; Defined at:
  6885 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  dividend        2   10[COMRAM] unsigned int 
  6888 ;;  divisor         2   12[COMRAM] unsigned int 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  quotient        2   14[COMRAM] unsigned int 
  6891 ;;  counter         1   16[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  2   10[COMRAM] unsigned int 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;Total ram usage:        7 bytes
  6906 ;; Hardware stack levels used: 1
  6907 ;; Hardware stack levels required when called: 4
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		_setMotorPWM
  6912 ;;		_collect_avg_readings
  6913 ;;		_normalise_readings
  6914 ;;		_make_master_closeness
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text37
  6919   002D22                     __ptext37:
  6920                           	callstack 0
  6921   002D22                     ___lwdiv:
  6922                           	callstack 24
  6923   002D22  0E00               	movlw	0
  6924   002D24  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  6925   002D26  0E00               	movlw	0
  6926   002D28  6E0F               	movwf	___lwdiv@quotient^0,c
  6927   002D2A  500D               	movf	___lwdiv@divisor^0,w,c
  6928   002D2C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6929   002D2E  B4D8               	btfsc	status,2,c
  6930   002D30  EF9C  F016         	goto	u1041
  6931   002D34  EF9E  F016         	goto	u1040
  6932   002D38                     u1041:
  6933   002D38  EFC6  F016         	goto	l1012
  6934   002D3C                     u1040:
  6935   002D3C  0E01               	movlw	1
  6936   002D3E  6E11               	movwf	___lwdiv@counter^0,c
  6937   002D40  EFA6  F016         	goto	l2477
  6938   002D44                     l2475:
  6939   002D44  90D8               	bcf	status,0,c
  6940   002D46  360D               	rlcf	___lwdiv@divisor^0,f,c
  6941   002D48  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6942   002D4A  2A11               	incf	___lwdiv@counter^0,f,c
  6943   002D4C                     l2477:
  6944   002D4C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  6945   002D4E  EFAB  F016         	goto	u1051
  6946   002D52  EFAD  F016         	goto	u1050
  6947   002D56                     u1051:
  6948   002D56  EFA2  F016         	goto	l2475
  6949   002D5A                     u1050:
  6950   002D5A                     l2479:
  6951   002D5A  90D8               	bcf	status,0,c
  6952   002D5C  360F               	rlcf	___lwdiv@quotient^0,f,c
  6953   002D5E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6954   002D60  500D               	movf	___lwdiv@divisor^0,w,c
  6955   002D62  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6956   002D64  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6957   002D66  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6958   002D68  A0D8               	btfss	status,0,c
  6959   002D6A  EFB9  F016         	goto	u1061
  6960   002D6E  EFBB  F016         	goto	u1060
  6961   002D72                     u1061:
  6962   002D72  EFC0  F016         	goto	l2487
  6963   002D76                     u1060:
  6964   002D76  500D               	movf	___lwdiv@divisor^0,w,c
  6965   002D78  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6966   002D7A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6967   002D7C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6968   002D7E  800F               	bsf	___lwdiv@quotient^0,0,c
  6969   002D80                     l2487:
  6970   002D80  90D8               	bcf	status,0,c
  6971   002D82  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6972   002D84  320D               	rrcf	___lwdiv@divisor^0,f,c
  6973   002D86  2E11               	decfsz	___lwdiv@counter^0,f,c
  6974   002D88  EFAD  F016         	goto	l2479
  6975   002D8C                     l1012:
  6976   002D8C  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6977   002D90  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6978   002D94  0012               	return		;funcret
  6979   002D96                     __end_of___lwdiv:
  6980                           	callstack 0
  6981                           
  6982 ;; *************** function _LEDSon_init *****************
  6983 ;; Defined at:
  6984 ;;		line 18 in file "LEDsOn.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;		None
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;		None
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      void 
  6991 ;; Registers used:
  6992 ;;		None
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7002 ;;Total ram usage:        0 bytes
  7003 ;; Hardware stack levels used: 1
  7004 ;; Hardware stack levels required when called: 4
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_main
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text38
  7013   003158                     __ptext38:
  7014                           	callstack 0
  7015   003158                     _LEDSon_init:
  7016                           	callstack 26
  7017   003158                     
  7018                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7019   003158  9288               	bcf	136,1,c	;volatile
  7020                           
  7021                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7022   00315A  9088               	bcf	136,0,c	;volatile
  7023                           
  7024                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7025   00315C  9884               	bcf	132,4,c	;volatile
  7026                           
  7027                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7028   00315E  9684               	bcf	132,3,c	;volatile
  7029                           
  7030                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7031   003160  9086               	bcf	134,0,c	;volatile
  7032                           
  7033                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7034   003162  9287               	bcf	135,1,c	;volatile
  7035                           
  7036                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7037   003164  9E86               	bcf	134,7,c	;volatile
  7038                           
  7039                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7040   003166  9881               	bcf	129,4,c	;volatile
  7041                           
  7042                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7043   003168  8E7E               	bsf	126,7,c	;volatile
  7044                           
  7045                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7046   00316A  827F               	bsf	127,1,c	;volatile
  7047                           
  7048                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7049   00316C  8879               	bsf	121,4,c	;volatile
  7050                           
  7051                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7052   00316E  987C               	bcf	124,4,c	;volatile
  7053                           
  7054                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7055   003170  9280               	bcf	128,1,c	;volatile
  7056                           
  7057                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7058   003172  907E               	bcf	126,0,c	;volatile
  7059                           
  7060                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7061   003174  9080               	bcf	128,0,c	;volatile
  7062                           
  7063                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7064   003176  967C               	bcf	124,3,c	;volatile
  7065   003178  0012               	return		;funcret
  7066   00317A                     __end_of_LEDSon_init:
  7067                           	callstack 0
  7068                           
  7069 ;; *************** function _Interrupts_init *****************
  7070 ;; Defined at:
  7071 ;;		line 7 in file "interrupts.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg, status,2, status,0, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7089 ;;Total ram usage:        0 bytes
  7090 ;; Hardware stack levels used: 1
  7091 ;; Hardware stack levels required when called: 8
  7092 ;; This function calls:
  7093 ;;		_enable_color_interrupt
  7094 ;;		_set_interrupt_threshold
  7095 ;; This function is called by:
  7096 ;;		_main
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text39
  7101   00308A                     __ptext39:
  7102                           	callstack 0
  7103   00308A                     _Interrupts_init:
  7104                           	callstack 22
  7105   00308A                     
  7106                           ;interrupts.c: 9:     enable_color_interrupt();
  7107   00308A  ECFF  F018         	call	_enable_color_interrupt	;wreg free
  7108                           
  7109                           ;interrupts.c: 10:     set_interrupt_threshold(5, 5000, 0b0100);
  7110   00308E  0E88               	movlw	136
  7111   003090  6E09               	movwf	set_interrupt_threshold@AIHT^0,c
  7112   003092  0E04               	movlw	4
  7113   003094  6E0A               	movwf	set_interrupt_threshold@persistence^0,c
  7114   003096  0E05               	movlw	5
  7115   003098  ECB6  F014         	call	_set_interrupt_threshold
  7116   00309C                     
  7117                           ;interrupts.c: 11:     TRISBbits.TRISB1 = 1;
  7118   00309C  8282               	bsf	130,1,c	;volatile
  7119   00309E                     
  7120                           ;interrupts.c: 12:     ANSELBbits.ANSELB1 = 0;
  7121   00309E  010E               	movlb	14	; () banked
  7122   0030A0  939A               	bcf	154,1,b	;volatile
  7123   0030A2                     
  7124                           ; BSR set to: 14
  7125                           ;interrupts.c: 13:     INT1PPS=0x09;
  7126   0030A2  0E09               	movlw	9
  7127   0030A4  010D               	movlb	13	; () banked
  7128   0030A6  6FF1               	movwf	241,b	;volatile
  7129   0030A8                     
  7130                           ; BSR set to: 13
  7131                           ;interrupts.c: 14:     PIE0bits.INT1IE = 1;
  7132   0030A8  010E               	movlb	14	; () banked
  7133   0030AA  8329               	bsf	41,1,b	;volatile
  7134   0030AC                     
  7135                           ; BSR set to: 14
  7136                           ;interrupts.c: 15:     IPR0bits.INT1IP = 1;
  7137   0030AC  831F               	bsf	31,1,b	;volatile
  7138   0030AE                     
  7139                           ; BSR set to: 14
  7140                           ;interrupts.c: 16:     INTCONbits.INT1EDG = 0;
  7141   0030AE  92F2               	bcf	242,1,c	;volatile
  7142   0030B0                     
  7143                           ; BSR set to: 14
  7144                           ;interrupts.c: 17:     INTCONbits.IPEN = 1;
  7145   0030B0  8AF2               	bsf	242,5,c	;volatile
  7146   0030B2                     
  7147                           ; BSR set to: 14
  7148                           ;interrupts.c: 18:     INTCONbits.GIEL = 1;
  7149   0030B2  8CF2               	bsf	242,6,c	;volatile
  7150   0030B4                     
  7151                           ; BSR set to: 14
  7152                           ;interrupts.c: 19:     INTCONbits.GIEH=1;}
  7153   0030B4  8EF2               	bsf	242,7,c	;volatile
  7154   0030B6                     
  7155                           ; BSR set to: 14
  7156   0030B6  0012               	return		;funcret
  7157   0030B8                     __end_of_Interrupts_init:
  7158                           	callstack 0
  7159                           
  7160 ;; *************** function _set_interrupt_threshold *****************
  7161 ;; Defined at:
  7162 ;;		line 40 in file "interrupts.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  AILT            1    wreg     unsigned char 
  7165 ;;  AIHT            1    8[COMRAM] unsigned char 
  7166 ;;  persistence     1    9[COMRAM] unsigned char 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  AILT            1   14[COMRAM] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7179 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7181 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7182 ;;Total ram usage:        7 bytes
  7183 ;; Hardware stack levels used: 1
  7184 ;; Hardware stack levels required when called: 7
  7185 ;; This function calls:
  7186 ;;		_color_writetoaddr
  7187 ;; This function is called by:
  7188 ;;		_Interrupts_init
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text40
  7193   00296C                     __ptext40:
  7194                           	callstack 0
  7195   00296C                     _set_interrupt_threshold:
  7196                           	callstack 22
  7197                           
  7198                           ; BSR set to: 14
  7199                           ;incstack = 0
  7200                           ;set_interrupt_threshold@AILT stored from wreg
  7201   00296C  6E0F               	movwf	set_interrupt_threshold@AILT^0,c
  7202   00296E                     
  7203                           ;interrupts.c: 42:     color_writetoaddr(0x0C, persistence);
  7204   00296E  C00A  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  7205   002972  0E0C               	movlw	12
  7206   002974  ECCD  F018         	call	_color_writetoaddr
  7207   002978                     
  7208                           ;interrupts.c: 43:     color_writetoaddr(0x05, AILT && 0b1111111100000000);
  7209   002978  0E00               	movlw	0
  7210   00297A  6E0B               	movwf	_set_interrupt_threshold$2036^0,c
  7211   00297C  500F               	movf	set_interrupt_threshold@AILT^0,w,c
  7212   00297E  B4D8               	btfsc	status,2,c
  7213   002980  EFC4  F014         	goto	u1501
  7214   002984  EFC6  F014         	goto	u1500
  7215   002988                     u1501:
  7216   002988  EFC8  F014         	goto	l3101
  7217   00298C                     u1500:
  7218   00298C  0E01               	movlw	1
  7219   00298E  6E0B               	movwf	_set_interrupt_threshold$2036^0,c
  7220   002990                     l3101:
  7221   002990  C00B  F007         	movff	_set_interrupt_threshold$2036,color_writetoaddr@value
  7222   002994  0E05               	movlw	5
  7223   002996  ECCD  F018         	call	_color_writetoaddr
  7224   00299A                     
  7225                           ;interrupts.c: 44:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  7226   00299A  0E00               	movlw	0
  7227   00299C  6E0C               	movwf	_set_interrupt_threshold$2037^0,c
  7228   00299E  500F               	movf	set_interrupt_threshold@AILT^0,w,c
  7229   0029A0  B4D8               	btfsc	status,2,c
  7230   0029A2  EFD5  F014         	goto	u1511
  7231   0029A6  EFD7  F014         	goto	u1510
  7232   0029AA                     u1511:
  7233   0029AA  EFD9  F014         	goto	l3109
  7234   0029AE                     u1510:
  7235   0029AE  0E01               	movlw	1
  7236   0029B0  6E0C               	movwf	_set_interrupt_threshold$2037^0,c
  7237   0029B2                     l3109:
  7238   0029B2  C00C  F007         	movff	_set_interrupt_threshold$2037,color_writetoaddr@value
  7239   0029B6  0E04               	movlw	4
  7240   0029B8  ECCD  F018         	call	_color_writetoaddr
  7241   0029BC                     
  7242                           ;interrupts.c: 45:     color_writetoaddr(0x07, AIHT && 0b1111111100000000);
  7243   0029BC  0E00               	movlw	0
  7244   0029BE  6E0D               	movwf	_set_interrupt_threshold$2038^0,c
  7245   0029C0  5009               	movf	set_interrupt_threshold@AIHT^0,w,c
  7246   0029C2  B4D8               	btfsc	status,2,c
  7247   0029C4  EFE6  F014         	goto	u1521
  7248   0029C8  EFE8  F014         	goto	u1520
  7249   0029CC                     u1521:
  7250   0029CC  EFEA  F014         	goto	l3117
  7251   0029D0                     u1520:
  7252   0029D0  0E01               	movlw	1
  7253   0029D2  6E0D               	movwf	_set_interrupt_threshold$2038^0,c
  7254   0029D4                     l3117:
  7255   0029D4  C00D  F007         	movff	_set_interrupt_threshold$2038,color_writetoaddr@value
  7256   0029D8  0E07               	movlw	7
  7257   0029DA  ECCD  F018         	call	_color_writetoaddr
  7258   0029DE                     
  7259                           ;interrupts.c: 46:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  7260   0029DE  0E00               	movlw	0
  7261   0029E0  6E0E               	movwf	_set_interrupt_threshold$2039^0,c
  7262   0029E2  5009               	movf	set_interrupt_threshold@AIHT^0,w,c
  7263   0029E4  B4D8               	btfsc	status,2,c
  7264   0029E6  EFF7  F014         	goto	u1531
  7265   0029EA  EFF9  F014         	goto	u1530
  7266   0029EE                     u1531:
  7267   0029EE  EFFB  F014         	goto	l3125
  7268   0029F2                     u1530:
  7269   0029F2  0E01               	movlw	1
  7270   0029F4  6E0E               	movwf	_set_interrupt_threshold$2039^0,c
  7271   0029F6                     l3125:
  7272   0029F6  C00E  F007         	movff	_set_interrupt_threshold$2039,color_writetoaddr@value
  7273   0029FA  0E06               	movlw	6
  7274   0029FC  ECCD  F018         	call	_color_writetoaddr
  7275   002A00  0012               	return		;funcret
  7276   002A02                     __end_of_set_interrupt_threshold:
  7277                           	callstack 0
  7278                           
  7279 ;; *************** function _enable_color_interrupt *****************
  7280 ;; Defined at:
  7281 ;;		line 35 in file "interrupts.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;		None
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      void 
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, status,0, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used: 1
  7301 ;; Hardware stack levels required when called: 7
  7302 ;; This function calls:
  7303 ;;		_clear_interrupt_flag
  7304 ;;		_color_writetoaddr
  7305 ;; This function is called by:
  7306 ;;		_Interrupts_init
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text41
  7311   0031FE                     __ptext41:
  7312                           	callstack 0
  7313   0031FE                     _enable_color_interrupt:
  7314                           	callstack 22
  7315   0031FE                     
  7316                           ;interrupts.c: 36:     clear_interrupt_flag();
  7317   0031FE  ECE9  F018         	call	_clear_interrupt_flag	;wreg free
  7318                           
  7319                           ;interrupts.c: 37:  color_writetoaddr(0x00, 0b10011);
  7320   003202  0E13               	movlw	19
  7321   003204  6E07               	movwf	color_writetoaddr@value^0,c
  7322   003206  0E00               	movlw	0
  7323   003208  ECCD  F018         	call	_color_writetoaddr
  7324   00320C  0012               	return		;funcret
  7325   00320E                     __end_of_enable_color_interrupt:
  7326                           	callstack 0
  7327                           
  7328 ;; *************** function _color_writetoaddr *****************
  7329 ;; Defined at:
  7330 ;;		line 21 in file "color.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  address         1    wreg     unsigned char 
  7333 ;;  value           1    6[COMRAM] unsigned char 
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  address         1    7[COMRAM] unsigned char 
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      void 
  7338 ;; Registers used:
  7339 ;;		wreg, status,2, status,0, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;Total ram usage:        2 bytes
  7350 ;; Hardware stack levels used: 1
  7351 ;; Hardware stack levels required when called: 6
  7352 ;; This function calls:
  7353 ;;		_I2C_2_Master_Start
  7354 ;;		_I2C_2_Master_Stop
  7355 ;;		_I2C_2_Master_Write
  7356 ;; This function is called by:
  7357 ;;		_color_click_init
  7358 ;;		_enable_color_interrupt
  7359 ;;		_set_interrupt_threshold
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text42
  7364   00319A                     __ptext42:
  7365                           	callstack 0
  7366   00319A                     _color_writetoaddr:
  7367                           	callstack 23
  7368                           
  7369                           ;incstack = 0
  7370                           ;color_writetoaddr@address stored from wreg
  7371   00319A  6E08               	movwf	color_writetoaddr@address^0,c
  7372   00319C                     
  7373                           ;color.c: 22:     I2C_2_Master_Start();
  7374   00319C  EC1D  F019         	call	_I2C_2_Master_Start	;wreg free
  7375                           
  7376                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  7377   0031A0  0E52               	movlw	82
  7378   0031A2  EC07  F019         	call	_I2C_2_Master_Write
  7379                           
  7380                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  7381   0031A6  5008               	movf	color_writetoaddr@address^0,w,c
  7382   0031A8  0980               	iorlw	128
  7383   0031AA  EC07  F019         	call	_I2C_2_Master_Write
  7384                           
  7385                           ;color.c: 25:     I2C_2_Master_Write(value);
  7386   0031AE  5007               	movf	color_writetoaddr@value^0,w,c
  7387   0031B0  EC07  F019         	call	_I2C_2_Master_Write
  7388                           
  7389                           ;color.c: 26:     I2C_2_Master_Stop();
  7390   0031B4  EC18  F019         	call	_I2C_2_Master_Stop	;wreg free
  7391   0031B8  0012               	return		;funcret
  7392   0031BA                     __end_of_color_writetoaddr:
  7393                           	callstack 0
  7394                           
  7395 ;; *************** function _clear_interrupt_flag *****************
  7396 ;; Defined at:
  7397 ;;		line 49 in file "interrupts.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;		None
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;		None
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2, status,0, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7415 ;;Total ram usage:        0 bytes
  7416 ;; Hardware stack levels used: 1
  7417 ;; Hardware stack levels required when called: 6
  7418 ;; This function calls:
  7419 ;;		_I2C_2_Master_Start
  7420 ;;		_I2C_2_Master_Stop
  7421 ;;		_I2C_2_Master_Write
  7422 ;; This function is called by:
  7423 ;;		_enable_color_interrupt
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text43
  7428   0031D2                     __ptext43:
  7429                           	callstack 0
  7430   0031D2                     _clear_interrupt_flag:
  7431                           	callstack 22
  7432   0031D2                     
  7433                           ;interrupts.c: 50:     I2C_2_Master_Start();
  7434   0031D2  EC1D  F019         	call	_I2C_2_Master_Start	;wreg free
  7435                           
  7436                           ;interrupts.c: 51:     I2C_2_Master_Write(0x52 | 0x00);
  7437   0031D6  0E52               	movlw	82
  7438   0031D8  EC07  F019         	call	_I2C_2_Master_Write
  7439                           
  7440                           ;interrupts.c: 52:     I2C_2_Master_Write(0b11100110);
  7441   0031DC  0EE6               	movlw	230
  7442   0031DE  EC07  F019         	call	_I2C_2_Master_Write
  7443                           
  7444                           ;interrupts.c: 53:     I2C_2_Master_Stop();
  7445   0031E2  EC18  F019         	call	_I2C_2_Master_Stop	;wreg free
  7446   0031E6  0012               	return		;funcret
  7447   0031E8                     __end_of_clear_interrupt_flag:
  7448                           	callstack 0
  7449                           
  7450 ;; *************** function _I2C_2_Master_Write *****************
  7451 ;; Defined at:
  7452 ;;		line 45 in file "i2c.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  data_byte       1    wreg     unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  data_byte       1    5[COMRAM] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;Total ram usage:        1 bytes
  7471 ;; Hardware stack levels used: 1
  7472 ;; Hardware stack levels required when called: 5
  7473 ;; This function calls:
  7474 ;;		_I2C_2_Master_Idle
  7475 ;; This function is called by:
  7476 ;;		_color_writetoaddr
  7477 ;;		_color_read_Red
  7478 ;;		_color_read_Green
  7479 ;;		_color_read_Blue
  7480 ;;		_clear_interrupt_flag
  7481 ;;		_color_read_Clear
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text44
  7486   00320E                     __ptext44:
  7487                           	callstack 0
  7488   00320E                     _I2C_2_Master_Write:
  7489                           	callstack 23
  7490                           
  7491                           ;incstack = 0
  7492                           ;I2C_2_Master_Write@data_byte stored from wreg
  7493   00320E  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  7494   003210                     
  7495                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7496   003210  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  7497   003214                     
  7498                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7499   003214  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7500   003218  0012               	return		;funcret
  7501   00321A                     __end_of_I2C_2_Master_Write:
  7502                           	callstack 0
  7503                           
  7504 ;; *************** function _I2C_2_Master_Stop *****************
  7505 ;; Defined at:
  7506 ;;		line 39 in file "i2c.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;		None
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;		None
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      void 
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7524 ;;Total ram usage:        0 bytes
  7525 ;; Hardware stack levels used: 1
  7526 ;; Hardware stack levels required when called: 5
  7527 ;; This function calls:
  7528 ;;		_I2C_2_Master_Idle
  7529 ;; This function is called by:
  7530 ;;		_color_writetoaddr
  7531 ;;		_color_read_Red
  7532 ;;		_color_read_Green
  7533 ;;		_color_read_Blue
  7534 ;;		_clear_interrupt_flag
  7535 ;;		_color_read_Clear
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text45
  7540   003230                     __ptext45:
  7541                           	callstack 0
  7542   003230                     _I2C_2_Master_Stop:
  7543                           	callstack 23
  7544   003230                     
  7545                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7546   003230  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  7547   003234                     
  7548                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7549   003234  010E               	movlb	14	; () banked
  7550   003236  85DA               	bsf	218,2,b	;volatile
  7551   003238                     
  7552                           ; BSR set to: 14
  7553   003238  0012               	return		;funcret
  7554   00323A                     __end_of_I2C_2_Master_Stop:
  7555                           	callstack 0
  7556                           
  7557 ;; *************** function _I2C_2_Master_Start *****************
  7558 ;; Defined at:
  7559 ;;		line 27 in file "i2c.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7577 ;;Total ram usage:        0 bytes
  7578 ;; Hardware stack levels used: 1
  7579 ;; Hardware stack levels required when called: 5
  7580 ;; This function calls:
  7581 ;;		_I2C_2_Master_Idle
  7582 ;; This function is called by:
  7583 ;;		_color_writetoaddr
  7584 ;;		_color_read_Red
  7585 ;;		_color_read_Green
  7586 ;;		_color_read_Blue
  7587 ;;		_clear_interrupt_flag
  7588 ;;		_color_read_Clear
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text46
  7593   00323A                     __ptext46:
  7594                           	callstack 0
  7595   00323A                     _I2C_2_Master_Start:
  7596                           	callstack 23
  7597   00323A                     
  7598                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7599   00323A  EC71  F018         	call	_I2C_2_Master_Idle	;wreg free
  7600   00323E                     
  7601                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7602   00323E  010E               	movlb	14	; () banked
  7603   003240  81DA               	bsf	218,0,b	;volatile
  7604   003242                     
  7605                           ; BSR set to: 14
  7606   003242  0012               	return		;funcret
  7607   003244                     __end_of_I2C_2_Master_Start:
  7608                           	callstack 0
  7609                           
  7610 ;; *************** function _I2C_2_Master_Idle *****************
  7611 ;; Defined at:
  7612 ;;		line 22 in file "i2c.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;Total ram usage:        1 bytes
  7631 ;; Hardware stack levels used: 1
  7632 ;; Hardware stack levels required when called: 4
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_I2C_2_Master_Start
  7637 ;;		_I2C_2_Master_RepStart
  7638 ;;		_I2C_2_Master_Stop
  7639 ;;		_I2C_2_Master_Write
  7640 ;;		_I2C_2_Master_Read
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text47
  7645   0030E2                     __ptext47:
  7646                           	callstack 0
  7647   0030E2                     _I2C_2_Master_Idle:
  7648                           	callstack 23
  7649   0030E2                     l145:
  7650   0030E2  010E               	movlb	14	; () banked
  7651   0030E4  B5D8               	btfsc	216,2,b	;volatile
  7652   0030E6  EF77  F018         	goto	u1111
  7653   0030EA  EF79  F018         	goto	u1110
  7654   0030EE                     u1111:
  7655   0030EE  EF71  F018         	goto	l145
  7656   0030F2                     u1110:
  7657   0030F2                     
  7658                           ; BSR set to: 14
  7659   0030F2  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7660   0030F6  0E1F               	movlw	31
  7661   0030F8  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7662   0030FA  A4D8               	btfss	status,2,c
  7663   0030FC  EF82  F018         	goto	u1121
  7664   003100  EF84  F018         	goto	u1120
  7665   003104                     u1121:
  7666   003104  EF71  F018         	goto	l145
  7667   003108                     u1120:
  7668   003108                     
  7669                           ; BSR set to: 14
  7670   003108  0012               	return		;funcret
  7671   00310A                     __end_of_I2C_2_Master_Idle:
  7672                           	callstack 0
  7673                           
  7674 ;; *************** function _HighISR *****************
  7675 ;; Defined at:
  7676 ;;		line 21 in file "interrupts.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;		None
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;		None
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  1    wreg      void 
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7694 ;;Total ram usage:        2 bytes
  7695 ;; Hardware stack levels used: 1
  7696 ;; Hardware stack levels required when called: 3
  7697 ;; This function calls:
  7698 ;;		i2_clear_interrupt_flag
  7699 ;; This function is called by:
  7700 ;;		Interrupt level 2
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	intcode
  7705   000008                     __pintcode:
  7706                           	callstack 0
  7707   000008                     _HighISR:
  7708                           	callstack 18
  7709                           
  7710                           ; BSR set to: 14
  7711                           ;incstack = 0
  7712   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7713   00000A                     
  7714                           ;interrupts.c: 24:     if(PIR0bits.INT1IF == 1) {
  7715   00000A  010E               	movlb	14	; () banked
  7716   00000C  A333               	btfss	51,1,b	;volatile
  7717   00000E  EF0B  F000         	goto	i2u164_41
  7718   000012  EF0D  F000         	goto	i2u164_40
  7719   000016                     i2u164_41:
  7720   000016  EF2B  F000         	goto	i2l501
  7721   00001A                     i2u164_40:
  7722   00001A                     
  7723                           ; BSR set to: 14
  7724                           ;interrupts.c: 25:         LATDbits.LATD7=1;
  7725   00001A  8E7C               	bsf	124,7,c	;volatile
  7726   00001C                     
  7727                           ; BSR set to: 14
  7728                           ;interrupts.c: 26:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7729   00001C  0E05               	movlw	5
  7730   00001E  6E04               	movwf	(??_HighISR+1)^0,c
  7731   000020  0E0F               	movlw	15
  7732   000022  6E03               	movwf	??_HighISR^0,c
  7733   000024  0EF1               	movlw	241
  7734   000026                     i2u229_47:
  7735   000026  2EE8               	decfsz	wreg,f,c
  7736   000028  D7FE               	bra	i2u229_47
  7737   00002A  2E03               	decfsz	??_HighISR^0,f,c
  7738   00002C  D7FC               	bra	i2u229_47
  7739   00002E  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7740   000030  D7FA               	bra	i2u229_47
  7741   000032  F000               	nop	
  7742   000034                     
  7743                           ;interrupts.c: 27:         LATDbits.LATD7=0;
  7744   000034  9E7C               	bcf	124,7,c	;volatile
  7745                           
  7746                           ;interrupts.c: 28:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7747   000036  0E05               	movlw	5
  7748   000038  6E04               	movwf	(??_HighISR+1)^0,c
  7749   00003A  0E0F               	movlw	15
  7750   00003C  6E03               	movwf	??_HighISR^0,c
  7751   00003E  0EF1               	movlw	241
  7752   000040                     i2u230_47:
  7753   000040  2EE8               	decfsz	wreg,f,c
  7754   000042  D7FE               	bra	i2u230_47
  7755   000044  2E03               	decfsz	??_HighISR^0,f,c
  7756   000046  D7FC               	bra	i2u230_47
  7757   000048  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7758   00004A  D7FA               	bra	i2u230_47
  7759   00004C  F000               	nop	
  7760   00004E                     
  7761                           ;interrupts.c: 29:         clear_interrupt_flag();
  7762   00004E  ECF4  F018         	call	i2_clear_interrupt_flag	;wreg free
  7763   000052                     
  7764                           ;interrupts.c: 30:         PIR0bits.INT1IF = 0;
  7765   000052  010E               	movlb	14	; () banked
  7766   000054  9333               	bcf	51,1,b	;volatile
  7767   000056                     i2l501:
  7768                           
  7769                           ; BSR set to: 14
  7770   000056  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7771   000058  0011               	retfie		f
  7772   00005A                     __end_of_HighISR:
  7773                           	callstack 0
  7774                           
  7775 ;; *************** function i2_clear_interrupt_flag *****************
  7776 ;; Defined at:
  7777 ;;		line 49 in file "interrupts.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      void 
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;Total ram usage:        0 bytes
  7796 ;; Hardware stack levels used: 1
  7797 ;; Hardware stack levels required when called: 2
  7798 ;; This function calls:
  7799 ;;		i2_I2C_2_Master_Start
  7800 ;;		i2_I2C_2_Master_Stop
  7801 ;;		i2_I2C_2_Master_Write
  7802 ;; This function is called by:
  7803 ;;		_HighISR
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text49
  7808   0031E8                     __ptext49:
  7809                           	callstack 0
  7810   0031E8                     i2_clear_interrupt_flag:
  7811                           	callstack 18
  7812   0031E8                     
  7813                           ;interrupts.c: 50:     I2C_2_Master_Start();
  7814   0031E8  EC27  F019         	call	i2_I2C_2_Master_Start	;wreg free
  7815                           
  7816                           ;interrupts.c: 51:     I2C_2_Master_Write(0x52 | 0x00);
  7817   0031EC  0E52               	movlw	82
  7818   0031EE  EC0D  F019         	call	i2_I2C_2_Master_Write
  7819                           
  7820                           ;interrupts.c: 52:     I2C_2_Master_Write(0b11100110);
  7821   0031F2  0EE6               	movlw	230
  7822   0031F4  EC0D  F019         	call	i2_I2C_2_Master_Write
  7823                           
  7824                           ;interrupts.c: 53:     I2C_2_Master_Stop();
  7825   0031F8  EC22  F019         	call	i2_I2C_2_Master_Stop	;wreg free
  7826   0031FC  0012               	return		;funcret
  7827   0031FE                     __end_ofi2_clear_interrupt_flag:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function i2_I2C_2_Master_Write *****************
  7831 ;; Defined at:
  7832 ;;		line 45 in file "i2c.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  data_byte       1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  data_byte       1    1[COMRAM] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      void 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, status,0, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;Total ram usage:        1 bytes
  7851 ;; Hardware stack levels used: 1
  7852 ;; Hardware stack levels required when called: 1
  7853 ;; This function calls:
  7854 ;;		i2_I2C_2_Master_Idle
  7855 ;; This function is called by:
  7856 ;;		i2_clear_interrupt_flag
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text50
  7861   00321A                     __ptext50:
  7862                           	callstack 0
  7863   00321A                     i2_I2C_2_Master_Write:
  7864                           	callstack 18
  7865                           
  7866                           ;incstack = 0
  7867                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7868   00321A  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7869   00321C                     
  7870                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7871   00321C  EC85  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  7872   003220                     
  7873                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7874   003220  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7875   003224  0012               	return		;funcret
  7876   003226                     __end_ofi2_I2C_2_Master_Write:
  7877                           	callstack 0
  7878                           
  7879 ;; *************** function i2_I2C_2_Master_Stop *****************
  7880 ;; Defined at:
  7881 ;;		line 39 in file "i2c.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;		None
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;		None
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      void 
  7888 ;; Registers used:
  7889 ;;		wreg, status,2, status,0, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7899 ;;Total ram usage:        0 bytes
  7900 ;; Hardware stack levels used: 1
  7901 ;; Hardware stack levels required when called: 1
  7902 ;; This function calls:
  7903 ;;		i2_I2C_2_Master_Idle
  7904 ;; This function is called by:
  7905 ;;		i2_clear_interrupt_flag
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text51
  7910   003244                     __ptext51:
  7911                           	callstack 0
  7912   003244                     i2_I2C_2_Master_Stop:
  7913                           	callstack 18
  7914   003244                     
  7915                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7916   003244  EC85  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  7917   003248                     
  7918                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7919   003248  010E               	movlb	14	; () banked
  7920   00324A  85DA               	bsf	218,2,b	;volatile
  7921   00324C                     
  7922                           ; BSR set to: 14
  7923   00324C  0012               	return		;funcret
  7924   00324E                     __end_ofi2_I2C_2_Master_Stop:
  7925                           	callstack 0
  7926                           
  7927 ;; *************** function i2_I2C_2_Master_Start *****************
  7928 ;; Defined at:
  7929 ;;		line 27 in file "i2c.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used: 1
  7949 ;; Hardware stack levels required when called: 1
  7950 ;; This function calls:
  7951 ;;		i2_I2C_2_Master_Idle
  7952 ;; This function is called by:
  7953 ;;		i2_clear_interrupt_flag
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text52
  7958   00324E                     __ptext52:
  7959                           	callstack 0
  7960   00324E                     i2_I2C_2_Master_Start:
  7961                           	callstack 18
  7962   00324E                     
  7963                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7964   00324E  EC85  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  7965   003252                     
  7966                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7967   003252  010E               	movlb	14	; () banked
  7968   003254  81DA               	bsf	218,0,b	;volatile
  7969   003256                     
  7970                           ; BSR set to: 14
  7971   003256  0012               	return		;funcret
  7972   003258                     __end_ofi2_I2C_2_Master_Start:
  7973                           	callstack 0
  7974                           
  7975 ;; *************** function i2_I2C_2_Master_Idle *****************
  7976 ;; Defined at:
  7977 ;;		line 22 in file "i2c.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;		None
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;		None
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      void 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7994 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7995 ;;Total ram usage:        1 bytes
  7996 ;; Hardware stack levels used: 1
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		i2_I2C_2_Master_Start
  8001 ;;		i2_I2C_2_Master_Stop
  8002 ;;		i2_I2C_2_Master_Write
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text53
  8007   00310A                     __ptext53:
  8008                           	callstack 0
  8009   00310A                     i2_I2C_2_Master_Idle:
  8010                           	callstack 18
  8011   00310A                     i2l145:
  8012   00310A  010E               	movlb	14	; () banked
  8013   00310C  B5D8               	btfsc	216,2,b	;volatile
  8014   00310E  EF8B  F018         	goto	i2u136_41
  8015   003112  EF8D  F018         	goto	i2u136_40
  8016   003116                     i2u136_41:
  8017   003116  EF85  F018         	goto	i2l145
  8018   00311A                     i2u136_40:
  8019   00311A                     
  8020                           ; BSR set to: 14
  8021   00311A  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8022   00311E  0E1F               	movlw	31
  8023   003120  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8024   003122  A4D8               	btfss	status,2,c
  8025   003124  EF96  F018         	goto	i2u137_41
  8026   003128  EF98  F018         	goto	i2u137_40
  8027   00312C                     i2u137_41:
  8028   00312C  EF85  F018         	goto	i2l145
  8029   003130                     i2u137_40:
  8030   003130                     
  8031                           ; BSR set to: 14
  8032   003130  0012               	return		;funcret
  8033   003132                     __end_ofi2_I2C_2_Master_Idle:
  8034                           	callstack 0
  8035                           
  8036                           	psect	rparam
  8037   000000                     
  8038                           	psect	temp
  8039   00005B                     btemp:
  8040                           	callstack 0
  8041   00005B                     	ds	1
  8042   000000                     int$flags	set	btemp
  8043   000000                     wtemp8	set	btemp+1
  8044   000000                     ttemp5	set	btemp+1
  8045   000000                     ttemp6	set	btemp+4
  8046   000000                     ttemp7	set	btemp+8
  8047                           
  8048                           	psect	idloc
  8049                           
  8050                           ;Config register IDLOC0 @ 0x200000
  8051                           ;	unspecified, using default values
  8052   200000                     	org	2097152
  8053   200000  0FFF               	dw	4095
  8054                           
  8055                           ;Config register IDLOC1 @ 0x200002
  8056                           ;	unspecified, using default values
  8057   200002                     	org	2097154
  8058   200002  0FFF               	dw	4095
  8059                           
  8060                           ;Config register IDLOC2 @ 0x200004
  8061                           ;	unspecified, using default values
  8062   200004                     	org	2097156
  8063   200004  0FFF               	dw	4095
  8064                           
  8065                           ;Config register IDLOC3 @ 0x200006
  8066                           ;	unspecified, using default values
  8067   200006                     	org	2097158
  8068   200006  0FFF               	dw	4095
  8069                           
  8070                           ;Config register IDLOC4 @ 0x200008
  8071                           ;	unspecified, using default values
  8072   200008                     	org	2097160
  8073   200008  0FFF               	dw	4095
  8074                           
  8075                           ;Config register IDLOC5 @ 0x20000A
  8076                           ;	unspecified, using default values
  8077   20000A                     	org	2097162
  8078   20000A  0FFF               	dw	4095
  8079                           
  8080                           ;Config register IDLOC6 @ 0x20000C
  8081                           ;	unspecified, using default values
  8082   20000C                     	org	2097164
  8083   20000C  0FFF               	dw	4095
  8084                           
  8085                           ;Config register IDLOC7 @ 0x20000E
  8086                           ;	unspecified, using default values
  8087   20000E                     	org	2097166
  8088   20000E  0FFF               	dw	4095
  8089                           
  8090                           	psect	config
  8091                           
  8092                           ;Config register CONFIG1L @ 0x300000
  8093                           ;	External Oscillator mode Selection bits
  8094                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8095                           ;	Power-up default value for COSC bits
  8096                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8097   300000                     	org	3145728
  8098   300000  AA                 	db	170
  8099                           
  8100                           ;Config register CONFIG1H @ 0x300001
  8101                           ;	unspecified, using default values
  8102                           ;	Clock Out Enable bit
  8103                           ;	CLKOUTEN = 0x1, unprogrammed default
  8104                           ;	Clock Switch Enable bit
  8105                           ;	CSWEN = 0x1, unprogrammed default
  8106                           ;	Fail-Safe Clock Monitor Enable bit
  8107                           ;	FCMEN = 0x1, unprogrammed default
  8108   300001                     	org	3145729
  8109   300001  FF                 	db	255
  8110                           
  8111                           ;Config register CONFIG2L @ 0x300002
  8112                           ;	unspecified, using default values
  8113                           ;	Master Clear Enable bit
  8114                           ;	MCLRE = 0x1, unprogrammed default
  8115                           ;	Power-up Timer Enable bit
  8116                           ;	PWRTE = 0x1, unprogrammed default
  8117                           ;	Low-power BOR enable bit
  8118                           ;	LPBOREN = 0x1, unprogrammed default
  8119                           ;	Brown-out Reset Enable bits
  8120                           ;	BOREN = 0x3, unprogrammed default
  8121   300002                     	org	3145730
  8122   300002  FF                 	db	255
  8123                           
  8124                           ;Config register CONFIG2H @ 0x300003
  8125                           ;	unspecified, using default values
  8126                           ;	Brown Out Reset Voltage selection bits
  8127                           ;	BORV = 0x3, unprogrammed default
  8128                           ;	ZCD Disable bit
  8129                           ;	ZCD = 0x1, unprogrammed default
  8130                           ;	PPSLOCK bit One-Way Set Enable bit
  8131                           ;	PPS1WAY = 0x1, unprogrammed default
  8132                           ;	Stack Full/Underflow Reset Enable bit
  8133                           ;	STVREN = 0x1, unprogrammed default
  8134                           ;	Debugger Enable bit
  8135                           ;	DEBUG = 0x1, unprogrammed default
  8136                           ;	Extended Instruction Set Enable bit
  8137                           ;	XINST = 0x1, unprogrammed default
  8138   300003                     	org	3145731
  8139   300003  FF                 	db	255
  8140                           
  8141                           ;Config register CONFIG3L @ 0x300004
  8142                           ;	WDT Period Select bits
  8143                           ;	WDTCPS = 0x1F, unprogrammed default
  8144                           ;	WDT operating mode
  8145                           ;	WDTE = OFF, WDT Disabled
  8146   300004                     	org	3145732
  8147   300004  9F                 	db	159
  8148                           
  8149                           ;Config register CONFIG3H @ 0x300005
  8150                           ;	unspecified, using default values
  8151                           ;	WDT Window Select bits
  8152                           ;	WDTCWS = 0x7, unprogrammed default
  8153                           ;	WDT input clock selector
  8154                           ;	WDTCCS = 0x7, unprogrammed default
  8155   300005                     	org	3145733
  8156   300005  FF                 	db	255
  8157                           
  8158                           ;Config register CONFIG4L @ 0x300006
  8159                           ;	unspecified, using default values
  8160                           ;	Write Protection Block 0
  8161                           ;	WRT0 = 0x1, unprogrammed default
  8162                           ;	Write Protection Block 1
  8163                           ;	WRT1 = 0x1, unprogrammed default
  8164                           ;	Write Protection Block 2
  8165                           ;	WRT2 = 0x1, unprogrammed default
  8166                           ;	Write Protection Block 3
  8167                           ;	WRT3 = 0x1, unprogrammed default
  8168                           ;	Write Protection Block 3
  8169                           ;	WRT4 = 0x1, unprogrammed default
  8170                           ;	Write Protection Block 3
  8171                           ;	WRT5 = 0x1, unprogrammed default
  8172                           ;	Write Protection Block 3
  8173                           ;	WRT6 = 0x1, unprogrammed default
  8174                           ;	Write Protection Block 3
  8175                           ;	WRT7 = 0x1, unprogrammed default
  8176   300006                     	org	3145734
  8177   300006  FF                 	db	255
  8178                           
  8179                           ;Config register CONFIG4H @ 0x300007
  8180                           ;	unspecified, using default values
  8181                           ;	Configuration Register Write Protection bit
  8182                           ;	WRTC = 0x1, unprogrammed default
  8183                           ;	Boot Block Write Protection bit
  8184                           ;	WRTB = 0x1, unprogrammed default
  8185                           ;	Data EEPROM Write Protection bit
  8186                           ;	WRTD = 0x1, unprogrammed default
  8187                           ;	Scanner Enable bit
  8188                           ;	SCANE = 0x1, unprogrammed default
  8189                           ;	Low Voltage Programming Enable bit
  8190                           ;	LVP = 0x1, unprogrammed default
  8191   300007                     	org	3145735
  8192   300007  FF                 	db	255
  8193                           
  8194                           ;Config register CONFIG5L @ 0x300008
  8195                           ;	unspecified, using default values
  8196                           ;	UserNVM Program Memory Code Protection bit
  8197                           ;	CP = 0x1, unprogrammed default
  8198                           ;	DataNVM Memory Code Protection bit
  8199                           ;	CPD = 0x1, unprogrammed default
  8200   300008                     	org	3145736
  8201   300008  FF                 	db	255
  8202                           
  8203                           ;Config register CONFIG5H @ 0x300009
  8204                           ;	unspecified, using default values
  8205   300009                     	org	3145737
  8206   300009  FF                 	db	255
  8207                           
  8208                           ;Config register CONFIG6L @ 0x30000A
  8209                           ;	unspecified, using default values
  8210                           ;	Table Read Protection Block 0
  8211                           ;	EBTR0 = 0x1, unprogrammed default
  8212                           ;	Table Read Protection Block 1
  8213                           ;	EBTR1 = 0x1, unprogrammed default
  8214                           ;	Table Read Protection Block 2
  8215                           ;	EBTR2 = 0x1, unprogrammed default
  8216                           ;	Table Read Protection Block 3
  8217                           ;	EBTR3 = 0x1, unprogrammed default
  8218                           ;	Table Read Protection Block 4
  8219                           ;	EBTR4 = 0x1, unprogrammed default
  8220                           ;	Table Read Protection Block 5
  8221                           ;	EBTR5 = 0x1, unprogrammed default
  8222                           ;	Table Read Protection Block 6
  8223                           ;	EBTR6 = 0x1, unprogrammed default
  8224                           ;	Table Read Protection Block 7
  8225                           ;	EBTR7 = 0x1, unprogrammed default
  8226   30000A                     	org	3145738
  8227   30000A  FF                 	db	255
  8228                           
  8229                           ;Config register CONFIG6H @ 0x30000B
  8230                           ;	unspecified, using default values
  8231                           ;	Boot Block Table Read Protection bit
  8232                           ;	EBTRB = 0x1, unprogrammed default
  8233   30000B                     	org	3145739
  8234   30000B  FF                 	db	255
  8235                           tosu	equ	0xFFF
  8236                           tosh	equ	0xFFE
  8237                           tosl	equ	0xFFD
  8238                           stkptr	equ	0xFFC
  8239                           pclatu	equ	0xFFB
  8240                           pclath	equ	0xFFA
  8241                           pcl	equ	0xFF9
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodh	equ	0xFF4
  8247                           prodl	equ	0xFF3
  8248                           indf0	equ	0xFEF
  8249                           postinc0	equ	0xFEE
  8250                           postdec0	equ	0xFED
  8251                           preinc0	equ	0xFEC
  8252                           plusw0	equ	0xFEB
  8253                           fsr0h	equ	0xFEA
  8254                           fsr0l	equ	0xFE9
  8255                           wreg	equ	0xFE8
  8256                           indf1	equ	0xFE7
  8257                           postinc1	equ	0xFE6
  8258                           postdec1	equ	0xFE5
  8259                           preinc1	equ	0xFE4
  8260                           plusw1	equ	0xFE3
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           bsr	equ	0xFE0
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           preinc2	equ	0xFDC
  8268                           plusw2	equ	0xFDB
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8

Data Sizes:
    Strings     52
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    152     159
    BANK1           256    240     244
    BANK2           256    114     226
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_3(CODE[10]), STR_2(CODE[26]), STR_1(CODE[16]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 26
		 -> STR_3(CODE[10]), STR_2(CODE[26]), STR_1(CODE[16]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 26
		 -> STR_3(CODE[10]), STR_2(CODE[26]), STR_1(CODE[16]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2529$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_3(CODE[10]), STR_2(CODE[26]), STR_1(CODE[16]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2480$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2480$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK1[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK2[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_home_response
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    _make_master_closeness->___lwdiv
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_motor_response
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               297   297      0  116846
                                            139 BANK0     13    13      0
                                             72 BANK1    168   168      0
                                              0 BANK2    114   114      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                      147    72     75   83543
                                             64 BANK0     75     0     75
                                              0 BANK1     72    72      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    7946
                                              6 BANK0     23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7100
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6639
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5072
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     295
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  23    11     12    3831
                                             26 COMRAM    23    11     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     453
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      71     7     64   65400
                                             38 COMRAM     7     7      0
                                              0 BANK0     64     0     64
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4875
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        7     3      4   29704
                                             31 COMRAM     7     3      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    6851
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    6243
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   10561
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    4115
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3285
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     811
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    1656
                                             17 COMRAM    27    21      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    2449
                                             17 COMRAM    16    10      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1206
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1880
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              7     5      2    1108
                                              8 COMRAM     7     5      2
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     72      E2       9       88.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      F4       7       95.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CF      64        0.0%
DATA                 0      0     2CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 20:49:56 2022

                        _color_read_Red 2E3C                         _color_read_Blue 2EDC  
                                    l22 31B8                                      l31 2F2A  
                                    l25 2E8A                                      l19 3058  
                                    l28 2EDA                                      l86 2272  
                                    l95 2C26                                      l79 2BA0  
                   ___wmul@multiplicand 0007                        _color_read_Green 2E8C  
                     ??_Interrupts_init 0010                                     l100 296A  
                                   l110 2B18                                     l105 28BC  
                                   l115 2A8C                                     l142 30E0  
                                   l230 19BE                                     l151 3242  
                                   l231 19BC                                     l160 3218  
                                   l312 1F7E                                     l232 19CC  
                                   l145 30E2                                     l154 322E  
                                   l322 2744                                     l234 1A5E  
                                   l163 2FB0                                     l235 1A5A  
                                   l148 3108                                     l404 3198  
                                   l236 1A6C                                     l157 3238  
                                   l317 1D98                                     l413 31BC  
                                   l422 3088                                     l263 3178  
                                   l504 320C                                     l328 2CA6  
                                   l416 31D0                                     l521 3156  
                                   l362 168A                                     l515 2A00  
                                   l349 12DC                                     l365 2670  
                                   l518 31E6                                     l635 2106  
                                   l495 30B6                                     l648 23D6  
   normalise_readings@normalised_values 0025                        ??_motor_response 0027  
                                   _abs 2FB2                                     _pad 2CA8  
                 __end_of_card_response 2672                                     prod 000FF3  
                                   wreg 000FE8                                    l1012 2D8C  
                                  l1019 2D94                                    ?_abs 0017  
                                  l1206 2E3A                                    l1232 2D20  
                                  l1240 1766                                    l3011 1018  
                                  l1251 1908                                    l1228 2CCA  
                                  l3101 2990                                    l3013 1030  
                                  l1237 1718                                    l3111 29BC  
                                  l3103 299A                                    l3015 105C  
                                  l1239 1720                                    l1264 2DE8  
                                  l3121 29E2                                    l3113 29C0  
                                  l3105 299E                                    l3201 30B0  
                                  l3041 10A4                                    l3025 1074  
                                  l3009 1004                                    l1258 2534  
                                  l3123 29F2                                    l3115 29D0  
                                  l3107 29AE                                    l3203 30B2  
                                  l3043 10B8                                    l3027 1088  
                                  l1196 2FE8                                    l1276 280E  
                                  l1284 2F6E                                    l3125 29F6  
                                  l3117 29D4                                    l3109 29B2  
                                  l3205 30B4                                    l3045 10D0  
                                  l3141 302A                                    l3119 29DE  
                                  l2511 218C                                    l3071 11E8  
                                  l1199 2FF0                                    l1287 3258  
                                  l3143 3034                                    l3151 2B22  
                                  l2521 30E2                                    l2601 2FAC  
                                  l2513 2190                                    l2505 2108  
                                  l3081 1268                                    l3073 1200  
                                  l3065 11A4                                    l3057 10E8  
                                  l3145 3044                                    l3161 2B86  
                                  l3153 2B4C                                    l2523 30F2  
                                  l3091 31FE                                    l3171 3158  
                                  l2603 2FAE                                    l2515 21D2  
                                  l2507 2124                                    l2611 2BB2  
                                  l3075 1204                                    l3067 11C8  
                                  l3059 119C                                    l3411 2758  
                                  l3147 304E                                    l3139 3026  
                                  l3163 2B88                                    l3155 2B70  
                                  l3093 296E                                    l2517 21EE  
                                  l2509 2178                                    l2621 2C02  
                                  l2613 2BC0                                    l3077 122C  
                                  l3069 11DC                                    l3085 127A  
                                  l3501 234E                                    l3413 276A  
                                  l3165 2B92                                    l3157 2B7A  
                                  l3149 2B1A                                    l3181 3192  
                                  l3173 317A                                    l3095 2978  
                                  l3191 309E                                    l2471 2D2A  
                                  l2383 3132                                    l2519 2232  
                                  l2623 2C0E                                    l2615 2BCC  
                                  l2607 2BA2                                    l3079 1262  
                                  l3431 2FB2                                    l3511 23B6  
                                  l3503 236E                                    l3415 2774  
                                  l3423 2F2C                                    l3167 2B94  
                                  l3159 2B7C                                    l3183 3194  
                                  l3175 3184                                    l3097 297C  
                                  l3193 30A2                                    l2481 2D60  
                                  l2473 2D3C                                    l2721 2E3C  
                                  l2385 314E                                    l2617 2BE8  
                                  l2609 2BA6                                    l2641 292E  
                                  l2633 28E6                                    l2625 28BE  
                                  l3433 2FCC                                    l3441 1FB2  
                                  l3505 2380                                    l3417 2792  
                                  l3409 2746                                    l3425 2F38  
                                  l3521 2CD6                                    l3601 24F6  
                                  l3169 2B9E                                    l3185 3196  
                                  l3177 3186                                    l3099 298C  
                                  l3195 30A8                                    l3187 308A  
                                  l2483 2D76                                    l2475 2D44  
                                  l2723 2E82                                    l2619 2BF4  
                                  l2643 2936                                    l2635 28FE  
                                  l2627 28DE                                    l3451 1FF4  
                                  l3443 1FB6                                    l3435 1F80  
                                  l3507 2386                                    l3419 27C8  
                                  l3427 2F4A                                    l3523 2CEA  
                                  l3515 2CA8                                    l3531 16AC  
                                  l3611 2D96                                    l2811 30C8  
                                  l3179 3188                                    l2581 3210  
                                  l3197 30AC                                    l3189 309C  
                                  l2485 2D7E                                    l2477 2D4C  
                                  l2469 2D22                                    l2733 2EDC  
                                  l2645 2952                                    l2637 2916  
                                  l2661 2874                                    l2741 2A22  
                                  l3461 204E                                    l3453 2012  
                                  l3445 1FC4                                    l3437 1F84  
                                  l3509 2396                                    l3429 2F4E  
                                  l3525 2CEE                                    l3517 2CB6  
                                  l3541 1728                                    l3533 16C0  
                                  l3605 2508                                    l3613 2DA2  
                                  l3621 2DEA                                    l2813 30CA  
                                  l3701 197E                                    l2583 3214  
                                  l2719 319C                                    l3199 30AE  
                                  l2487 2D80                                    l2479 2D5A  
                                  l2591 322A                                    l2735 2F22  
                                  l2727 2E8C                                    l2831 1DFE  
                                  l2911 2672                                    l2671 2AAE  
                                  l2639 2922                                    l2663 2880  
                                  l2655 2838                                    l2647 2810  
                                  l2751 2A4E                                    l3463 207C  
                                  l3455 201A                                    l3471 20B6  
                                  l3447 1FE4                                    l3439 1F92  
                                  l3527 2D0C                                    l3519 2CC2  
                                  l3551 1762                                    l3543 1738  
                                  l3535 16D0                                    l3615 2DBE  
                                  l3623 2DFC                                    l2815 30CC  
                                  l2807 30B8                                    l3711 1A04  
                                  l2577 323A                                    l2585 3230  
                                  l2489 2D86                                    l2593 2F72  
                                  l2729 2ED2                                    l2841 1E32  
                                  l2825 1DA2                                    l2921 2734  
                                  l2681 2ADA                                    l2665 2888  
                                  l2657 2850                                    l2649 2830  
                                  l2761 12E4                                    l2753 2A5A  
                                  l3641 1D86                                    l3633 1B72  
                                  l3473 20C6                                    l3465 209C  
                                  l3457 202E                                    l3449 1FE8  
                                  l3481 2278                                    l3561 1806  
                                  l3553 176E                                    l3545 173E  
                                  l3537 16F0                                    l3529 168C  
                                  l3617 2DDE                                    l3625 2E04  
                                  l2817 30CE                                    l2809 30C2  
                                  l3721 1A78                                    l3713 1A24  
                                  l2579 323E                                    l2587 3234  
                                  l2595 2F76                                    l2843 1E36  
                                  l2827 1DDE                                    l2819 1D9A  
                                  l2923 2C28                                    l2683 2AE6  
                                  l2667 28A4                                    l2659 2868  
                                  l2771 14C4                                    l2763 1338  
                                  l2755 2A68                                    l2747 2A2A  
                                  l2739 2A02                                    l3643 1D88  
                                  l3475 20E6                                    l3467 209E  
                                  l3459 203C                                    l3491 22D8  
                                  l3483 2286                                    l3571 18C2  
                                  l3563 180C                                    l3555 1778  
                                  l3547 174E                                    l3539 170C  
                                  l3627 2E0C                                    l3651 2598  
                                  l3731 1AD6                                    l3723 1A78  
                                  l3715 1A44                                    l3707 19CE  
                                  l2597 2F7E                                    l2589 3226  
                                  l2861 1ED2                                    l2853 1E86  
                                  l2845 1E52                                    l2837 1E06  
                                  l2829 1DE2                                    l2941 2C94  
                                  l2933 2C40                                    l2925 2C2C  
                                  l2917 2676                                    l2685 2AF4  
                                  l2677 2AB6                                    l2669 2A8E  
                                  l2765 138C                                    l2781 1638  
                                  l2757 2A70                                    l2749 2A42  
                                  l3469 20B0                                    l3493 22F6  
                                  l3485 22A6                                    l3573 18D2  
                                  l3557 177E                                    l3565 1870  
                                  l3549 175A                                    l3581 23D8  
                                  l3629 2E28                                    l3661 2636  
                                  l3653 25A4                                    l3645 2536  
                                  l3741 1B56                                    l3733 1AE2  
                                  l3725 1A78                                    l3717 1A46  
                                  l3709 19EA                                    ?_pad 0015  
                                  l2791 31D2                                    l2599 2F86  
                                  l2871 1F1A                                    l2863 1EFE  
                                  l2855 1E9A                                    l2847 1E7E  
                                  l2839 1E1A                                    l2943 2CA4  
                                  l2935 2C6E                                    l2927 2C3C  
                                  l2919 2732                                    l2687 2AFC  
                                  l2679 2ACE                                    l2775 1540  
                                  l2767 1430                                    l2759 12E0  
                                  l2951 0E50                                    l3639 1B76  
                                  l3495 22FE                                    l3487 22AA  
                                  l3479 2274                                    l3575 18D8  
                                  l3567 188A                                    l3559 1800  
                                  l3591 2430                                    l3583 2400  
                                  l3663 2642                                    l3655 25F0  
                                  l3647 2536                                    l3743 1B56  
                                  l3735 1B3A                                    l3727 1A92  
                                  l3719 1A6E                                    l3671 190E  
                                  l2873 1F32                                    l2857 1EB2  
                                  l2937 2C8E                                    l2777 15BC  
                                  l2769 14A8                                    l2961 0EBC  
                                  l2953 0E68                                    l3497 2312  
                                  l3489 22B8                                    l3577 18E8  
                                  l3569 18A8                                    l3593 2450  
                                  l3585 240E                                    l3665 266C  
                                  l3657 260C                                    l3649 2552  
                                  l3737 1B4A                                    l3729 1AA6  
                                  l3681 1922                                    l3673 1912  
                                  l2875 1F36                                    l2859 1EB6  
                                  l2939 2C92                                    l2963 0ED0  
                                  l2955 0E7C                                    l2947 0E38  
                                  l2787 31BC                                    l2891 305A  
                                  l3499 2320                                    l3595 2470  
                                  l3587 241C                                    l3659 261C  
                                  l3739 1B4E                                    l3691 194A  
                                  l3683 1924                                    l3675 1916  
                                  l2877 1F52                                    l2869 1F06  
                                  l2981 0F7C                                    l2973 0F28  
                                  l2965 0EE8                                    l2957 0E90  
                                  l2949 0E3C                                    l2789 31CC  
                                  l2893 305E                                    l3597 24C6  
                                  l3589 2420                                    l3693 195C  
                                  l3685 1928                                    l3677 191A  
                                  l3669 190A                                    l2983 0F90  
                                  l2975 0F3C                                    l2967 0EFC  
                                  l2959 0EA4                                    l2895 306C  
                                  l3695 1964                                    l3687 193A  
                                  l3679 191E                                    l3785 128E  
                                  l2993 0FA8                                    l2977 0F54  
                                  l2969 0F10                                    l2897 3070  
                                  l3697 196C                                    l3689 1942  
                                  l3787 164C                                    l2995 0FBC  
                                  l2979 0F68                                    l3699 1972  
                                  l2997 0FD4                                    STR_1 0E1B  
                                  STR_2 0E01                                    STR_3 0E2B  
                                  u1100 21EE                                    u1101 21EA  
                                  u1110 30F2                                    u1111 30EE  
                                  u1120 3108                                    u1040 2D3C  
                                  u2000 1D98                                    u1121 3104  
                                  u1041 2D38                                    u2001 1D94  
                                  u1050 2D5A                                    u1051 2D56  
                                  u2011 265C                                    u1060 2D76  
                                  u2020 19CC                            ?_LEDSon_init 0001  
                                  u1061 2D72                                    u2021 19C8  
                                  u1230 2F9A                                    u2030 1A56  
                                  u1231 2F92                                    u2031 1A52  
                                  u1400 1ED2                                    u2040 1A6C  
                                  u1401 1ECE                                    u2041 1A68  
                                  u1410 1F52                                    u1090 2124  
                                  u1250 2BE4                                    u1330 2A8C  
                                  u1411 1F4E                                    u1091 2120  
                                  u1251 2BE0                                    u1331 2A88  
                                  u2107 0FC6                                    u2051 1B2A  
                                  u1500 298C                                    u1260 2C26  
                                  u1340 31CC                                    u1420 3088  
                                  u1501 2988                                    u1261 2C22  
                                  u2117 0FF2                                    u1341 31C8  
                                  u1421 3084                                    u1510 29AE  
                                  u1270 2952                                    u1511 29AA  
                                  u1271 294E                                    u2207 28AE  
                                  u2127 1022                                    u1520 29D0  
                                  u1248 2F9C                                    u1440 2744  
                                  u1280 28A4                            _BAUD4CONbits 000EE9  
                                  u1521 29CC                                    u1441 2740  
                                  u2217 2908                                    u1281 28A0  
                                  u2137 104E                                    u1530 29F2  
                                  u1450 2C6E                                    u1290 2B18  
                                  u1531 29EE                                    u1451 2C6A  
                                  u1291 2B14                                    u2227 295C  
                                  u2147 1092                                    u2067 303A  
                                  u1380 1DFE                                    u1460 2CA4  
                                  u1700 2FCC                                    u1381 1DFA  
                                  u1461 2CA0                                    u2237 2BB8  
                                  u2157 10C2                                    u2077 0E5A  
                                  u1701 2FC8                                    u1390 1E52  
                                  u1470 11C8                                    u1710 1F92  
                                  u1391 1E4E                                    u2247 2BFA  
                                  u2167 11F2                                    u1471 11C4  
                                  u2087 0EDA                                    u1711 1F8E  
                                  u1480 122C                                    u1720 1FC4  
                                  u1800 22F6                                    u2257 2AEC  
                                  u2177 2A60                                    u1481 1228  
                                  u2097 0F46                                    u1721 1FC0  
                                  u1801 22F2                                    u1490 1276  
                                  u1810 2320                                    u1650 2758  
                                  _T2PR 000FBC                                    u2267 1E24  
                                  u2187 14B2                                    u1491 1272  
                                  u1731 1FEE                                    u1811 231C  
                                  u1651 2754                                    u1740 2012  
                                  u1820 234E                                    u1660 276A  
                                  u1900 1738                                    u2277 1EA4  
                                  u2197 285A                                    u1741 200E  
                                  u1821 234A                                    u1661 2766  
                                  u1901 1734                                    u1750 203C  
                                  u1830 2396                                    u1670 2792  
                                  u1910 174E                                    u2287 1F24  
                                  u1751 2038                                    u1831 2392  
                                  u1671 278E                                    u1911 174A  
                                  u1760 207C                                    u1680 27C8  
                                  u1840 2CB6                                    u1920 188A  
                                  u1761 2078                                    u1681 27C4  
                                  u1841 2CB2                                    u1921 1886  
                                  u1770 20C6                                    u1690 2F6E  
                                  u1850 2D0C                                    u1930 18A8  
                                  u1771 20C2                                    u1691 2F6A  
                                  u1851 2D08                                    u1931 18A4  
                                  u1780 2286                                    u1940 18C2  
                                  u1860 16BC                                    u1781 2282  
                                  u1941 18BE                                    u1861 16B6  
                                  u1790 22B8                                    u1950 18D2  
                                  u1870 16BE                                    u1791 22B4  
                                  u1951 18CE                                    u1880 16D0  
                                  u1960 2400                                    u1881 16CC  
                                  u1961 23FC                                    u1890 170C  
                                  u1970 2450                                    u1891 1708  
                                  u1971 244C                                    u1980 2470  
                                  u1981 246C                                    u1990 2DDE  
                                  u1991 2DDA              normalise_readings@red_read 001D  
                                  abs@a 0017                                    _dbuf 02C2  
                                  _main 190A                                    _dtoa 168C  
                                  _prec 00FA                                    pad@i 001C  
                                  pad@p 0019                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001E  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2BA2                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005A  
                       card_response@mL 00AB                         card_response@mR 00AD  
                __end_of_color_read_Red 2E8C                         __end_of_HighISR 005A  
                  _response_in_progress 01F0             normalise_readings@blue_read 0021  
                          ___param_bank 000000                                   ??_abs 0019  
                                 ??_pad 001B                             _turnRight45 2810  
                       __end_of___aodiv 2108                                   ?_main 0001  
                                 ?_dtoa 0020                         __end_of___aomod 23D8  
                                 ?_stop 0018                         __end_of___lwdiv 2D96  
                                 i2l151 3256                                   i2l160 3224  
                                 i2l145 310A                                   i2l148 3130  
                                 i2l157 324C                                   i2l501 0056  
                                 i2l518 31FC                            vfpfcnvrt@fmt 0045  
               ?_enable_color_interrupt 0001                            main@red_read 00F1  
               __end_of_sendCharSerial4 31D2              __end_of_I2C_2_Master_Start 3244  
            __end_of_I2C_2_Master_Write 321A                                   _flags 00FE  
                                 _fputc 2746                                   _fputs 2F2C  
                                 pad@fp 0015          determine_card@master_closeness 0005  
               ??_make_master_closeness 0018                                   _width 00F8  
                                 _putch 3258                                   main@i 00F7  
                                 dtoa@d 0022                                   dtoa@i 0041  
                                 dtoa@n 0038                                   dtoa@p 0034  
                                 dtoa@s 0040                                   dtoa@w 0036  
                   normalise_readings@i 0031            card_response@ReturnHomeArray 00AF  
                                 tablat 000FF5                                   plusw0 000FEB  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2E3C          card_response@normalised_values 0100  
                      card_response@buf 00A0                 __end_of_color_read_Blue 2F2C  
                 _I2C_2_Master_RepStart 3226                         ?_color_read_Red 0009  
                       __initialization 2FF2                            __end_of_main 1B72  
                          __end_of_dtoa 190A                            __end_of_stop 2C28  
        __end_of_enable_color_interrupt 320E                                  ??_main 0057  
                                ??_dtoa 002A                                  ??_stop 001C  
                         __activetblptr 000003                           main@blue_read 00F5  
                          ?_setMotorPWM 0012                                  ?_fputc 0005  
                                ?_fputs 000E                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 00EB  
          collect_avg_readings@red_read 0012                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i2l3131 3244  
                                i2l3133 3248                                  i2l3127 324E  
                                i2l3135 321C                                  i2l3129 3252  
                                i2l3137 3220                                  i2l3239 31E8  
                                i2l3361 001C                                  i2l2803 310A  
                                i2l3363 0034                                  i2l2805 311A  
                                i2l3365 004E                                  i2l3357 000A  
                                i2l3367 0052                                  i2l3359 001A  
                                _RG6PPS 000E88                               ??_HighISR 0003  
              __end_of_color_click_init 305A                  make_master_closeness@i 002C  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0055  
                             ??___aodiv 0015                               ??___aomod 0015  
                                ___wmul 3132                      _normalise_readings 1B72  
                             ??___lwdiv 000F                                  clear_0 2FF8  
                                clear_1 300E                                  isa$std 000001  
                                pad@buf 0017                                  dtoa@fp 0020  
          __end_of_clear_interrupt_flag 31E8                     ?_normalise_readings 001B  
                                fputc@c 0005                                  fputs@c 0012  
                                fputs@i 0013                                  fputs@s 000E  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 12DE  
                                putch@c 0001                        __end_of_vfprintf 2DEA  
                                stop@mL 0018                                  stop@mR 001A  
                     ??_initDCmotorsPWM 0005                               ??_sprintf 0057  
               ?i2_clear_interrupt_flag 0001                       card_response@card 00AA  
                            __accesstop 0060                 __end_of__initialization 301C  
                       fullSpeedAhead@i 001D                __end_of_color_read_Green 2EDC  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0027  
                         ___rparam_used 000001                        ?_color_read_Blue 0009  
                       _Interrupts_init 308A            __end_of_collect_avg_readings 1F80  
                        __pcstackCOMRAM 0001                        _reverseFullSpeed 2A02  
            collect_avg_readings@i_1561 001C              collect_avg_readings@i_1562 001E  
            collect_avg_readings@i_1563 0020                 _set_interrupt_threshold 296C  
                         __end_of_fputc 2810                           __end_of_fputs 2F70  
                         __end_of_putch 325A                          ?_home_response 0020  
        __end_ofi2_clear_interrupt_flag 31FE                                 ??_fputc 0009  
                               ??_fputs 0012                                 ??_putch 0005  
                            __pbssBANK0 00F8                              __pbssBANK1 01F0  
                            __pbssBANK2 0272                       _color_writetoaddr 319A  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0060  
                      motor_response@mR 0062                      ?_color_writetoaddr 0007  
                               ?___wmul 0005                      motor_response@card 002B  
                          ?_turnRight45 0018                     ??_color_writetoaddr 0008  
                               _INT1PPS 000DF1                          main@green_read 00F3  
                               _SP4BRGH 000EE6                                 _SP4BRGL 000EE5  
                               _SSP2ADD 000ED6                                 _SSP2BUF 000ED5  
           set_interrupt_threshold@AIHT 0009             set_interrupt_threshold@AILT 000F  
               __end_of_Interrupts_init 30B8                  color_writetoaddr@value 0007  
                      ??_color_read_Red 000B           __end_of_make_master_closeness 2746  
                               _HighISR 0008          determine_card@predicted_colour 000D  
             __end_of_color_writetoaddr 31BA                    _clear_interrupt_flag 31D2  
                    _I2C_2_Master_Start 323A                              _initUSART4 317A  
                   i2_I2C_2_Master_Idle 310A                      _I2C_2_Master_Write 320E  
                               __Hparam 0000                     i2_I2C_2_Master_Stop 3244  
                               __Lparam 0000                       color_read_Red@tmp 000E  
             ??_set_interrupt_threshold 000B  make_master_closeness@normalised_values 0014  
               sendStringSerial4@string 0006                       reverseFullSpeed@i 001D  
                               ___aodiv 1F80                                 ___aomod 2274  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 2D22  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0018  
                          turnLeft45@mR 001A                                 __pcinit 2FF2  
                               __ramtop 0E00                                 __ptext0 190A  
                               __ptext1 317A                                 __ptext2 2B1A  
                               __ptext3 3026                                 __ptext4 30B8  
                               __ptext5 2536                                 __ptext6 2DEA  
                               __ptext7 2D96                                 __ptext8 23D8  
                               __ptext9 168C                         ??_home_response 0024  
                  ?i2_I2C_2_Master_Idle 0001                               _T2CONbits 000FBD  
                  ?i2_I2C_2_Master_Stop 0001                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 1D9A  
                               main@buf 0148                                 _sprintf 2DEA  
                  ??_I2C_2_Master_Start 0006                    ??_I2C_2_Master_Write 0006  
                  end_of_initialization 301C          collect_avg_readings@green_read 0014  
                 normalise_readings@buf 001B                                 fputc@fp 0007  
                               fputs@fp 0010                       ?_color_click_init 0001  
                          turnRight45@i 001E                   ?_clear_interrupt_flag 0001  
                    ??_color_click_init 0009                           _card_detected 00FC  
                     __end_of_vfpfcnvrt 2536                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004B  
                            ??_vfprintf 0055                         _initDCmotorsPWM 2B1A  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0017  
                 ??i2_I2C_2_Master_Idle 0001                   ??i2_I2C_2_Master_Stop 0002  
     normalise_readings@expected_values 0023         __end_of_set_interrupt_threshold 2A02  
                         _card_response 2536                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0016                               _TRISBbits 000F82  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 0012                __end_of_reverseFullSpeed 2A8E  
                      fullSpeedAhead@mL 0018                        fullSpeedAhead@mR 001A  
                   main@expected_values 0200                color_writetoaddr@address 0008  
               ??_I2C_2_Master_RepStart 0006                        ?_Interrupts_init 0001  
                           _CCP1CONbits 000FAB                            _EUSART4RXbuf 02AE  
                          _EUSART4TXbuf 0272                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0009                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0005                              main@motorL 01DE  
                            main@motorR 01E7                      ??_color_read_Green 000B  
                            _turnLeft45 28BE                          _fullSpeedAhead 2A8E  
                           vfpfcnvrt@ap 0047                             vfpfcnvrt@cp 0053  
                           vfpfcnvrt@fp 0043                          __end_of___wmul 3158  
                       determine_card@i 000E                          ?_card_response 00A0  
                   start_initialization 2FF2                             __end_of_abs 2FF2  
                           __end_of_pad 2D22                           _TxBufWriteCnt 0058  
                         ??_LEDSon_init 0005                  ??_clear_interrupt_flag 0007  
                   color_read_Green@tmp 000E                 __end_of_initDCmotorsPWM 2BA2  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 2B1A  
                             _TimerFlag 01F2                ??_enable_color_interrupt 0009  
                              ??___wmul 0009           i2I2C_2_Master_Write@data_byte 0002  
                        _determine_card 2C28            __end_ofi2_I2C_2_Master_Start 3258  
          __end_ofi2_I2C_2_Master_Write 3226                             __pbssCOMRAM 0057  
                ??_collect_avg_readings 0018                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                           __pcstackBANK2 0200  
                      ___aodiv@dividend 0005                          _motor_response 0E36  
                              ?_HighISR 0001                     __end_of_LEDSon_init 317A  
                      ___lwdiv@dividend 000B                               _dtoa$2557 0032  
                           ?_turnLeft45 0018                         motor_response@i 002C  
                       motor_response@j 0029                         ?_fullSpeedAhead 0018  
                             __pintcode 0008                                ?___aodiv 0005  
                              ?___aomod 0005                        ___aodiv@quotient 0017  
                __end_of_determine_card 2CA8                                ?___lwdiv 000B  
                  I2C_2_Master_Read@ack 0007                         ??_card_response 0057  
                  I2C_2_Master_Read@tmp 0008                             __smallconst 0E00  
                     _I2C_2_Master_Idle 30E2                       _I2C_2_Master_Init 30B8  
                     _I2C_2_Master_Read 2F70                       _I2C_2_Master_Stop 3230  
                          _RxBufReadCnt 0059            normalise_readings@difference 002F  
                   main@ReturnHomeArray 0236                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0014                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000F                  __end_of_motor_response 12DE  
                           turnLeft45@i 001E                                ?_sprintf 0066  
                     _sendStringSerial4 305A                     ??_I2C_2_Master_Idle 0005  
                   ??_I2C_2_Master_Init 0005                     ??_I2C_2_Master_Read 0006  
    set_interrupt_threshold@persistence 000A                          ___wmul@product 0009  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0006  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                                _PIE0bits 000E29  
                    ?_sendStringSerial4 0006                                _PIE4bits 000E2D  
                 _make_master_closeness 2672                                i2u230_47 0040  
                              i2u136_40 311A                                i2u136_41 3116  
                              i2u137_40 3130                                i2u137_41 312C  
                              i2u164_40 001A                                i2u164_41 0016  
                              i2u229_47 0026                                _PIR0bits 000E33  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0005                make_master_closeness@buf 0012  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0008  
                              _SSP2STAT 000ED8                         ?_determine_card 0005  
                             _vfpfcnvrt 23D8               __end_of_I2C_2_Master_Idle 310A  
             __end_of_I2C_2_Master_Init 30E2               __end_of_I2C_2_Master_Read 2FB2  
                     ___wmul@multiplier 0005               __end_of_I2C_2_Master_Stop 323A  
              ??i2_clear_interrupt_flag 0003                            setMotorPWM@m 0012  
           I2C_2_Master_Write@data_byte 0006            normalise_readings@green_read 001F  
                 __end_of_home_response 168C                       ??_color_read_Blue 000B  
                          _TxBufReadCnt 0057                         ?_motor_response 0060  
                     ?_reverseFullSpeed 0018               __end_of_sendStringSerial4 308A  
                           _LEDSon_init 3158                      ??_reverseFullSpeed 001C  
         __end_of_I2C_2_Master_RepStart 3230                      color_read_Blue@tmp 000E  
              ?_set_interrupt_threshold 0009                     __end_of_setMotorPWM 2274  
                          ??_initUSART4 0005                    i2_I2C_2_Master_Start 324E  
                  i2_I2C_2_Master_Write 321A                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0016  
           __end_ofi2_I2C_2_Master_Idle 3132                      reverseFullSpeed@mL 0018  
                    reverseFullSpeed@mR 001A                       home_response@card 0026  
           __end_ofi2_I2C_2_Master_Stop 324E                              ?_vfpfcnvrt 0043  
                       ___aodiv@divisor 000D                         ___aodiv@counter 0015  
                            _ANSELBbits 000E9A                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                       ___lwdiv@divisor 000D                      __end_of_initUSART4 319A  
                       ___lwdiv@counter 0011                                __ptext10 2CA8  
                              __ptext11 2F2C                                __ptext20 0E36  
                              __ptext12 2746                                __ptext21 2A02  
                              __ptext13 3258                  _enable_color_interrupt 31FE  
                              __ptext30 2C28                                __ptext22 12DE  
                              __ptext14 2274                                __ptext31 1D9A  
                              __ptext23 2810                                __ptext15 1F80  
                              __ptext40 296C                                __ptext32 2E3C  
                              __ptext24 28BE                                __ptext16 305A  
                              __ptext41 31FE                                __ptext33 2E8C  
                              __ptext25 2BA2                                __ptext17 31BA  
                              __ptext50 321A                                __ptext42 319A  
                              __ptext34 2EDC                                __ptext26 2A8E  
                              __ptext18 1B72                                __ptext51 3244  
                              __ptext43 31D2                                __ptext35 3226  
                              __ptext27 2108                                __ptext19 2FB2  
                              __ptext52 324E                                __ptext44 320E  
                              __ptext36 2F70                                __ptext28 3132  
                              __ptext53 310A                                __ptext45 3230  
                              __ptext37 2D22                                __ptext29 2672  
                              __ptext46 323A                                __ptext38 3158  
                              __ptext47 30E2                                __ptext39 308A  
                              __ptext49 31E8           motor_response@ReturnHomeArray 0064  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0012                   ?i2_I2C_2_Master_Start 0001  
                 ?i2_I2C_2_Master_Write 0001                                isa$xinst 000000  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2D96                           ??_turnRight45 001C  
                              main@card 00EE                        ___aomod@dividend 0005  
                 collect_avg_readings@i 001A                              _INTCONbits 000FF2  
          _set_interrupt_threshold$2036 000B            _set_interrupt_threshold$2037 000C  
          _set_interrupt_threshold$2038 000D            _set_interrupt_threshold$2039 000E  
                           _setMotorPWM 2108           collect_avg_readings@blue_read 0016  
                         turnRight45@mL 0018                           turnRight45@mR 001A  
                              intlevel2 0000                               sprintf@ap 0070  
            __end_of_normalise_readings 1D9A            card_response@expected_values 00A8  
                      ??_fullSpeedAhead 001C                 card_response@green_read 00A4  
                          ??_turnLeft45 001C          determine_card@current_smallest 000B  
                       ___aomod@divisor 000D                             ??_vfpfcnvrt 0049  
                       ___aomod@counter 0015                  card_response@blue_read 00A6  
                      _color_click_init 3026                         home_response@mL 0020  
                       home_response@mR 0022           card_response@master_closeness 0136  
                              sprintf@f 0072                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 28BE                      __end_of_turnLeft45 296C  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0016  
                       _sendCharSerial4 31BA                  ??i2_I2C_2_Master_Start 0002  
                ??i2_I2C_2_Master_Write 0002                  i2_clear_interrupt_flag 31E8  
                 card_response@red_read 00A2                            ___aomod@sign 0016  
                      ??_determine_card 0007                           main@CardCount 00EF  
                          main@PWMcycle 00ED  
