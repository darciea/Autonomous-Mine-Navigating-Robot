

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 10:31:50 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Version 2.35
    75                           ; Generated 05/05/2021 GMT
    76                           ; 
    77                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F67K40 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000000                     _TRISBbits	set	3970
   110   000000                     _TX4REG	set	3812
   111   000000                     _RC4STAbits	set	3815
   112   000000                     _SP4BRGH	set	3814
   113   000000                     _LATHbits	set	3968
   114   000000                     _LATGbits	set	3967
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISDbits	set	3972
   117   000000                     _TRISGbits	set	3975
   118   000000                     _SSP2CON2bits	set	3802
   119   000000                     _INT1PPS	set	3569
   120   000000                     _RX4PPS	set	3605
   121   000000                     _SSP2CLKPPS	set	3612
   122   000000                     _SSP2DATPPS	set	3613
   123   000000                     _RC7PPS	set	3689
   124   000000                     _RE2PPS	set	3700
   125   000000                     _TRISCbits	set	3971
   126   000000                     _TRISEbits	set	3973
   127   000000                     _TRISHbits	set	3976
   128   000000                     _PORTFbits	set	3982
   129   000000                     _T2PR	set	4028
   130   000000                     _T2CONbits	set	4029
   131   000000                     _CCPR2H	set	4006
   132   000000                     _CCPR1H	set	4010
   133   000000                     _RE4PPS	set	3702
   134   000000                     _RG6PPS	set	3720
   135   000000                     _RD5PPS	set	3695
   136   000000                     _ANSELBbits	set	3738
   137   000000                     _ANSELDbits	set	3751
   138   000000                     _SSP2ADD	set	3798
   139   000000                     _SSP2CON1bits	set	3801
   140   000000                     _CCPR4H	set	3873
   141   000000                     _CCPR3H	set	3877
   142   000000                     _INTCONbits	set	4082
   143   000000                     _T2CLKCONbits	set	4031
   144   000000                     _T2HLTbits	set	4030
   145   000000                     _CCP1CONbits	set	4011
   146   000000                     _CCPTMRS0bits	set	4013
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _LATAbits	set	3961
   149   000000                     _LATDbits	set	3964
   150   000000                     _CCP3CONbits	set	3878
   151   000000                     _CCP4CONbits	set	3874
   152   000000                     _RC4REG	set	3811
   153   000000                     _SP4BRGL	set	3813
   154   000000                     _TX4STAbits	set	3816
   155   000000                     _BAUD4CONbits	set	3817
   156   000000                     _SSP2CON2	set	3802
   157   000000                     _SSP2STAT	set	3800
   158   000000                     _ANSELFbits	set	3764
   159   000000                     _SSP2BUF	set	3797
   160   000000                     _IPR0bits	set	3615
   161   000000                     _PIE0bits	set	3625
   162   000000                     _PIE4bits	set	3629
   163   000000                     _PIR4bits	set	3639
   164   000000                     _RC0PPS	set	3682
   165   000000                     _RD6PPS	set	3696
   166   000000                     _LATFbits	set	3966
   167   000000                     _TRISAbits	set	3969
   168   000000                     _PIR0bits	set	3635
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01                     STR_1:
   175                           
   176                           ; BSR set to: 14
   177   000E01  0A                 	db	10
   178   000E02  20                 	db	32
   179   000E03  45                 	db	69	;'E'
   180   000E04  58                 	db	88	;'X'
   181   000E05  50                 	db	80	;'P'
   182   000E06  45                 	db	69	;'E'
   183   000E07  43                 	db	67	;'C'
   184   000E08  54                 	db	84	;'T'
   185   000E09  45                 	db	69	;'E'
   186   000E0A  44                 	db	68	;'D'
   187   000E0B  3A                 	db	58	;':'
   188   000E0C  20                 	db	32
   189   000E0D  43                 	db	67	;'C'
   190   000E0E  6C                 	db	108	;'l'
   191   000E0F  65                 	db	101	;'e'
   192   000E10  61                 	db	97	;'a'
   193   000E11  72                 	db	114	;'r'
   194   000E12  20                 	db	32
   195   000E13  25                 	db	37
   196   000E14  64                 	db	100	;'d'
   197   000E15  2C                 	db	44
   198   000E16  52                 	db	82	;'R'
   199   000E17  20                 	db	32
   200   000E18  25                 	db	37
   201   000E19  64                 	db	100	;'d'
   202   000E1A  2C                 	db	44
   203   000E1B  20                 	db	32
   204   000E1C  47                 	db	71	;'G'
   205   000E1D  20                 	db	32
   206   000E1E  25                 	db	37
   207   000E1F  64                 	db	100	;'d'
   208   000E20  2C                 	db	44
   209   000E21  20                 	db	32
   210   000E22  42                 	db	66	;'B'
   211   000E23  20                 	db	32
   212   000E24  25                 	db	37
   213   000E25  64                 	db	100	;'d'
   214   000E26  20                 	db	32
   215   000E27  20                 	db	32
   216   000E28  43                 	db	67	;'C'
   217   000E29  41                 	db	65	;'A'
   218   000E2A  52                 	db	82	;'R'
   219   000E2B  44                 	db	68	;'D'
   220   000E2C  3A                 	db	58	;':'
   221   000E2D  20                 	db	32
   222   000E2E  25                 	db	37
   223   000E2F  64                 	db	100	;'d'
   224   000E30  20                 	db	32
   225   000E31  0A                 	db	10
   226   000E32  00                 	db	0
   227   000E33                     STR_3:
   228                           
   229                           ; BSR set to: 14
   230   000E33  0A                 	db	10
   231   000E34  20                 	db	32
   232   000E35  41                 	db	65	;'A'
   233   000E36  56                 	db	86	;'V'
   234   000E37  47                 	db	71	;'G'
   235   000E38  3A                 	db	58	;':'
   236   000E39  20                 	db	32
   237   000E3A  43                 	db	67	;'C'
   238   000E3B  6C                 	db	108	;'l'
   239   000E3C  65                 	db	101	;'e'
   240   000E3D  61                 	db	97	;'a'
   241   000E3E  72                 	db	114	;'r'
   242   000E3F  20                 	db	32
   243   000E40  25                 	db	37
   244   000E41  64                 	db	100	;'d'
   245   000E42  2C                 	db	44
   246   000E43  20                 	db	32
   247   000E44  52                 	db	82	;'R'
   248   000E45  20                 	db	32
   249   000E46  25                 	db	37
   250   000E47  64                 	db	100	;'d'
   251   000E48  2C                 	db	44
   252   000E49  20                 	db	32
   253   000E4A  47                 	db	71	;'G'
   254   000E4B  20                 	db	32
   255   000E4C  25                 	db	37
   256   000E4D  64                 	db	100	;'d'
   257   000E4E  2C                 	db	44
   258   000E4F  20                 	db	32
   259   000E50  42                 	db	66	;'B'
   260   000E51  20                 	db	32
   261   000E52  25                 	db	37
   262   000E53  64                 	db	100	;'d'
   263   000E54  20                 	db	32
   264   000E55  0A                 	db	10
   265   000E56  00                 	db	0
   266   000E57                     STR_2:
   267                           
   268                           ; BSR set to: 14
   269   000E57  0A                 	db	10
   270   000E58  20                 	db	32
   271   000E59  45                 	db	69	;'E'
   272   000E5A  78                 	db	120	;'x'
   273   000E5B  70                 	db	112	;'p'
   274   000E5C  65                 	db	101	;'e'
   275   000E5D  63                 	db	99	;'c'
   276   000E5E  74                 	db	116	;'t'
   277   000E5F  65                 	db	101	;'e'
   278   000E60  64                 	db	100	;'d'
   279   000E61  20                 	db	32
   280   000E62  63                 	db	99	;'c'
   281   000E63  6C                 	db	108	;'l'
   282   000E64  65                 	db	101	;'e'
   283   000E65  61                 	db	97	;'a'
   284   000E66  72                 	db	114	;'r'
   285   000E67  3A                 	db	58	;':'
   286   000E68  20                 	db	32
   287   000E69  25                 	db	37
   288   000E6A  64                 	db	100	;'d'
   289   000E6B  20                 	db	32
   290   000E6C  0A                 	db	10
   291   000E6D  00                 	db	0
   292   000E6E                     STR_4:
   293                           
   294                           ; BSR set to: 14
   295   000E6E  43                 	db	67	;'C'
   296   000E6F  41                 	db	65	;'A'
   297   000E70  52                 	db	82	;'R'
   298   000E71  44                 	db	68	;'D'
   299   000E72  20                 	db	32
   300   000E73  25                 	db	37
   301   000E74  64                 	db	100	;'d'
   302   000E75  20                 	db	32
   303   000E76  0A                 	db	10
   304   000E77  00                 	db	0
   305   000E78  00                 	db	0	; dummy byte at the end
   306   000000                     
   307                           ; #config settings
   308                           
   309                           	psect	cinit
   310   003020                     __pcinit:
   311                           	callstack 0
   312   003020                     start_initialization:
   313                           	callstack 0
   314   003020                     __initialization:
   315                           	callstack 0
   316                           
   317                           ; Clear objects allocated to BANK2 (112 bytes)
   318   003020  EE02  F000         	lfsr	0,__pbssBANK2
   319   003024  0E70               	movlw	112
   320   003026                     clear_0:
   321   003026  6AEE               	clrf	postinc0,c
   322   003028  06E8               	decf	wreg,f,c
   323   00302A  E1FD               	bnz	clear_0
   324                           
   325                           ; Clear objects allocated to BANK0 (9 bytes)
   326   00302C  EE00  F0EE         	lfsr	0,__pbssBANK0
   327   003030  0E09               	movlw	9
   328   003032                     clear_1:
   329   003032  6AEE               	clrf	postinc0,c
   330   003034  06E8               	decf	wreg,f,c
   331   003036  E1FD               	bnz	clear_1
   332                           
   333                           ; Clear objects allocated to COMRAM (4 bytes)
   334   003038  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   335   00303A  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   336   00303C  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   337   00303E  6A57               	clrf	__pbssCOMRAM& (0+255),c
   338   003040                     end_of_initialization:
   339                           	callstack 0
   340   003040                     __end_of__initialization:
   341                           	callstack 0
   342   003040  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   343   003042  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   344   003044  0100               	movlb	0
   345   003046  EF39  F009         	goto	_main	;jump to C main() function
   346                           
   347                           	psect	bssCOMRAM
   348   000057                     __pbssCOMRAM:
   349                           	callstack 0
   350   000057                     _TxBufReadCnt:
   351                           	callstack 0
   352   000057                     	ds	1
   353   000058                     _TxBufWriteCnt:
   354                           	callstack 0
   355   000058                     	ds	1
   356   000059                     _RxBufReadCnt:
   357                           	callstack 0
   358   000059                     	ds	1
   359   00005A                     _RxBufWriteCnt:
   360                           	callstack 0
   361   00005A                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364   0000EE                     __pbssBANK0:
   365                           	callstack 0
   366   0000EE                     _width:
   367                           	callstack 0
   368   0000EE                     	ds	2
   369   0000F0                     _prec:
   370                           	callstack 0
   371   0000F0                     	ds	2
   372   0000F2                     _card_detected:
   373                           	callstack 0
   374   0000F2                     	ds	2
   375   0000F4                     _response_in_progress:
   376                           	callstack 0
   377   0000F4                     	ds	2
   378   0000F6                     _flags:
   379                           	callstack 0
   380   0000F6                     	ds	1
   381                           
   382                           	psect	bssBANK2
   383   000200                     __pbssBANK2:
   384                           	callstack 0
   385   000200                     _EUSART4TXbuf:
   386                           	callstack 0
   387   000200                     	ds	60
   388   00023C                     _EUSART4RXbuf:
   389                           	callstack 0
   390   00023C                     	ds	20
   391   000250                     _dbuf:
   392                           	callstack 0
   393   000250                     	ds	32
   394                           
   395                           	psect	cstackBANK1
   396   000100                     __pcstackBANK1:
   397                           	callstack 0
   398   000100                     main@buf:
   399                           	callstack 0
   400                           
   401                           ; 150 bytes @ 0x0
   402   000100                     	ds	150
   403   000196                     main@expected_values:
   404                           	callstack 0
   405                           
   406                           ; 72 bytes @ 0x96
   407   000196                     	ds	72
   408   0001DE                     main@PWMcycle:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xDE
   412   0001DE                     	ds	1
   413   0001DF                     main@clear_read_check:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0xDF
   417   0001DF                     	ds	2
   418   0001E1                     main@red_read:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0xE1
   422   0001E1                     	ds	2
   423   0001E3                     main@green_read:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xE3
   427   0001E3                     	ds	2
   428   0001E5                     main@blue_read:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xE5
   432   0001E5                     	ds	2
   433   0001E7                     main@i:
   434                           	callstack 0
   435                           
   436                           ; 1 bytes @ 0xE7
   437   0001E7                     	ds	1
   438   0001E8                     main@clear_read:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0xE8
   442   0001E8                     	ds	2
   443   0001EA                     main@motorL:
   444                           	callstack 0
   445                           
   446                           ; 9 bytes @ 0xEA
   447   0001EA                     	ds	9
   448   0001F3                     main@motorR:
   449                           	callstack 0
   450                           
   451                           ; 9 bytes @ 0xF3
   452   0001F3                     	ds	9
   453                           
   454                           	psect	cstackBANK0
   455   000060                     __pcstackBANK0:
   456                           	callstack 0
   457   000060                     ?_vfprintf:
   458                           	callstack 0
   459   000060                     vfprintf@fp:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463   000060                     	ds	2
   464   000062                     vfprintf@fmt:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x2
   468   000062                     	ds	2
   469   000064                     vfprintf@ap:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473   000064                     	ds	2
   474   000066                     ?_sprintf:
   475                           	callstack 0
   476   000066                     sprintf@s:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x6
   480   000066                     	ds	2
   481   000068                     sprintf@fmt:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x8
   485   000068                     	ds	12
   486   000074                     sprintf@ap:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x14
   490   000074                     	ds	2
   491   000076                     sprintf@f:
   492                           	callstack 0
   493                           
   494                           ; 11 bytes @ 0x16
   495   000076                     	ds	11
   496   000081                     clear_read_calibration@buf:
   497                           	callstack 0
   498   000081                     card_response@buf:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x21
   502   000081                     	ds	2
   503   000083                     clear_read_calibration@clear_read:
   504                           	callstack 0
   505   000083                     card_response@clear_read:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x23
   509   000083                     	ds	2
   510   000085                     clear_read_calibration@clear_read_check:
   511                           	callstack 0
   512   000085                     card_response@red_read:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x25
   516   000085                     	ds	2
   517   000087                     ??_clear_read_calibration:
   518   000087                     card_response@green_read:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x27
   522   000087                     	ds	2
   523   000089                     card_response@blue_read:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x29
   527   000089                     	ds	2
   528   00008B                     clear_read_calibration@i:
   529                           	callstack 0
   530   00008B                     card_response@expected_values:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x2B
   534   00008B                     	ds	2
   535   00008D                     clear_read_calibration@i_1591:
   536                           	callstack 0
   537   00008D                     card_response@mL:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x2D
   541   00008D                     	ds	2
   542   00008F                     card_response@mR:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x2F
   546   00008F                     	ds	2
   547   000091                     card_response@normalised_values:
   548                           	callstack 0
   549                           
   550                           ; 72 bytes @ 0x31
   551   000091                     	ds	72
   552   0000D9                     card_response@master_closeness:
   553                           	callstack 0
   554                           
   555                           ; 18 bytes @ 0x79
   556   0000D9                     	ds	18
   557   0000EB                     card_response@card:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x8B
   561   0000EB                     	ds	1
   562   0000EC                     ??_main:
   563                           
   564                           ; 1 bytes @ 0x8C
   565   0000EC                     	ds	2
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     
   572                           ; 1 bytes @ 0x0
   573   000001                     	ds	1
   574   000002                     i2I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576                           
   577                           ; 1 bytes @ 0x1
   578   000002                     	ds	1
   579   000003                     ??_HighISR:
   580   000003                     
   581                           ; 1 bytes @ 0x2
   582   000003                     	ds	2
   583   000005                     ??_I2C_2_Master_Idle:
   584   000005                     ?___wmul:
   585                           	callstack 0
   586   000005                     ?___aodiv:
   587                           	callstack 0
   588   000005                     ?___aomod:
   589                           	callstack 0
   590   000005                     sendCharSerial4@charToSend:
   591                           	callstack 0
   592   000005                     make_master_closeness@buf:
   593                           	callstack 0
   594   000005                     determine_card@master_closeness:
   595                           	callstack 0
   596   000005                     ___wmul@multiplier:
   597                           	callstack 0
   598   000005                     fputc@c:
   599                           	callstack 0
   600   000005                     ___aodiv@dividend:
   601                           	callstack 0
   602   000005                     ___aomod@dividend:
   603                           	callstack 0
   604                           
   605                           ; 8 bytes @ 0x4
   606   000005                     	ds	1
   607   000006                     ??_I2C_2_Master_Read:
   608   000006                     I2C_2_Master_Write@data_byte:
   609                           	callstack 0
   610   000006                     sendStringSerial4@string:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x5
   614   000006                     	ds	1
   615   000007                     ??_determine_card:
   616   000007                     color_writetoaddr@value:
   617                           	callstack 0
   618   000007                     I2C_2_Master_Read@ack:
   619                           	callstack 0
   620   000007                     make_master_closeness@normalised_values:
   621                           	callstack 0
   622   000007                     ___wmul@multiplicand:
   623                           	callstack 0
   624   000007                     fputc@fp:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x6
   628   000007                     	ds	1
   629   000008                     color_writetoaddr@address:
   630                           	callstack 0
   631   000008                     I2C_2_Master_Read@tmp:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x7
   635   000008                     	ds	1
   636   000009                     ??_fputc:
   637   000009                     ??_color_click_init:
   638   000009                     ?_color_read_Red:
   639                           	callstack 0
   640   000009                     ?_color_read_Green:
   641                           	callstack 0
   642   000009                     ?_color_read_Blue:
   643                           	callstack 0
   644   000009                     ?_color_read_Clear:
   645                           	callstack 0
   646   000009                     make_master_closeness@master_closeness:
   647                           	callstack 0
   648   000009                     set_interrupt_threshold@AILT:
   649                           	callstack 0
   650   000009                     ___wmul@product:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654   000009                     	ds	2
   655   00000B                     ??_color_read_Red:
   656   00000B                     ??_color_read_Green:
   657   00000B                     ??_color_read_Blue:
   658   00000B                     ??_color_read_Clear:
   659   00000B                     ??_make_master_closeness:
   660   00000B                     ?___lwdiv:
   661                           	callstack 0
   662   00000B                     determine_card@current_smallest:
   663                           	callstack 0
   664   00000B                     set_interrupt_threshold@AIHT:
   665                           	callstack 0
   666   00000B                     ___lwdiv@dividend:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0xA
   670   00000B                     	ds	2
   671   00000D                     determine_card@predicted_colour:
   672                           	callstack 0
   673   00000D                     set_interrupt_threshold@persistence:
   674                           	callstack 0
   675   00000D                     ___lwdiv@divisor:
   676                           	callstack 0
   677   00000D                     ___aodiv@divisor:
   678                           	callstack 0
   679   00000D                     ___aomod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 8 bytes @ 0xC
   683   00000D                     	ds	1
   684   00000E                     determine_card@i:
   685                           	callstack 0
   686   00000E                     color_read_Red@tmp:
   687                           	callstack 0
   688   00000E                     color_read_Green@tmp:
   689                           	callstack 0
   690   00000E                     color_read_Blue@tmp:
   691                           	callstack 0
   692   00000E                     color_read_Clear@tmp:
   693                           	callstack 0
   694   00000E                     fputs@s:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0xD
   698   00000E                     	ds	1
   699   00000F                     _set_interrupt_threshold$2092:
   700                           	callstack 0
   701   00000F                     ___lwdiv@quotient:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0xE
   705   00000F                     	ds	1
   706   000010                     _set_interrupt_threshold$2093:
   707                           	callstack 0
   708   000010                     collect_avg_readings@clear_read:
   709                           	callstack 0
   710   000010                     fputs@fp:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0xF
   714   000010                     	ds	1
   715   000011                     ___lwdiv@counter:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x10
   719   000011                     	ds	1
   720   000012                     fputs@c:
   721                           	callstack 0
   722   000012                     setMotorPWM@m:
   723                           	callstack 0
   724   000012                     collect_avg_readings@red_read:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x11
   728   000012                     	ds	1
   729   000013                     fputs@i:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x12
   733   000013                     	ds	1
   734   000014                     ??_setMotorPWM:
   735   000014                     collect_avg_readings@green_read:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x13
   739   000014                     	ds	1
   740   000015                     ___aodiv@counter:
   741                           	callstack 0
   742   000015                     ___aomod@counter:
   743                           	callstack 0
   744   000015                     pad@fp:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x14
   748   000015                     	ds	1
   749   000016                     setMotorPWM@posDuty:
   750                           	callstack 0
   751   000016                     ___aodiv@sign:
   752                           	callstack 0
   753   000016                     ___aomod@sign:
   754                           	callstack 0
   755   000016                     collect_avg_readings@blue_read:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x15
   759   000016                     	ds	1
   760   000017                     ?_abs:
   761                           	callstack 0
   762   000017                     setMotorPWM@negDuty:
   763                           	callstack 0
   764   000017                     abs@a:
   765                           	callstack 0
   766   000017                     pad@buf:
   767                           	callstack 0
   768   000017                     ___aodiv@quotient:
   769                           	callstack 0
   770                           
   771                           ; 8 bytes @ 0x16
   772   000017                     	ds	1
   773   000018                     ??_collect_avg_readings:
   774   000018                     stop@mL:
   775                           	callstack 0
   776   000018                     turnLeft45@mL:
   777                           	callstack 0
   778   000018                     turnRight45@mL:
   779                           	callstack 0
   780   000018                     fullSpeedAhead@mL:
   781                           	callstack 0
   782   000018                     reverseFullSpeed@mL:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x17
   786   000018                     	ds	1
   787   000019                     ??_abs:
   788   000019                     pad@p:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x18
   792   000019                     	ds	1
   793   00001A                     stop@mR:
   794                           	callstack 0
   795   00001A                     turnLeft45@mR:
   796                           	callstack 0
   797   00001A                     turnRight45@mR:
   798                           	callstack 0
   799   00001A                     fullSpeedAhead@mR:
   800                           	callstack 0
   801   00001A                     reverseFullSpeed@mR:
   802                           	callstack 0
   803   00001A                     collect_avg_readings@i:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x19
   807   00001A                     	ds	1
   808   00001B                     ??_pad:
   809   00001B                     normalise_readings@buf:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x1A
   813   00001B                     	ds	1
   814   00001C                     ??_stop:
   815   00001C                     ??_turnLeft45:
   816   00001C                     ??_turnRight45:
   817   00001C                     ??_fullSpeedAhead:
   818   00001C                     ??_reverseFullSpeed:
   819   00001C                     collect_avg_readings@i_1602:
   820                           	callstack 0
   821   00001C                     pad@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x1B
   825   00001C                     	ds	1
   826   00001D                     fullSpeedAhead@i:
   827                           	callstack 0
   828   00001D                     reverseFullSpeed@i:
   829                           	callstack 0
   830   00001D                     normalise_readings@clear_read:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x1C
   834   00001D                     	ds	1
   835   00001E                     turnLeft45@i:
   836                           	callstack 0
   837   00001E                     turnRight45@i:
   838                           	callstack 0
   839   00001E                     collect_avg_readings@i_1603:
   840                           	callstack 0
   841   00001E                     pad@w:
   842                           	callstack 0
   843                           
   844                           ; 2 bytes @ 0x1D
   845   00001E                     	ds	1
   846   00001F                     normalise_readings@red_read:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x1E
   850   00001F                     	ds	1
   851   000020                     collect_avg_readings@i_1604:
   852                           	callstack 0
   853   000020                     motor_response@mL:
   854                           	callstack 0
   855   000020                     dtoa@fp:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x1F
   859   000020                     	ds	1
   860   000021                     normalise_readings@green_read:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x20
   864   000021                     	ds	1
   865   000022                     collect_avg_readings@i_1605:
   866                           	callstack 0
   867   000022                     motor_response@mR:
   868                           	callstack 0
   869   000022                     dtoa@d:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x21
   873   000022                     	ds	1
   874   000023                     normalise_readings@blue_read:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x22
   878   000023                     	ds	1
   879   000024                     ??_motor_response:
   880                           
   881                           ; 1 bytes @ 0x23
   882   000024                     	ds	1
   883   000025                     normalise_readings@expected_values:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x24
   887   000025                     	ds	1
   888   000026                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x25
   892   000026                     	ds	1
   893   000027                     normalise_readings@normalised_values:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ??_normalise_readings:
   899   000029                     make_master_closeness@i:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x28
   903   000029                     	ds	1
   904   00002A                     ??_dtoa:
   905                           
   906                           ; 1 bytes @ 0x29
   907   00002A                     	ds	7
   908   000031                     normalise_readings@difference:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x30
   912   000031                     	ds	1
   913   000032                     _dtoa$2611:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x31
   917   000032                     	ds	1
   918   000033                     normalise_readings@i:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x32
   922   000033                     	ds	1
   923   000034                     dtoa@p:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x33
   927   000034                     	ds	2
   928   000036                     dtoa@w:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x35
   932   000036                     	ds	2
   933   000038                     dtoa@n:
   934                           	callstack 0
   935                           
   936                           ; 8 bytes @ 0x37
   937   000038                     	ds	8
   938   000040                     dtoa@s:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x3F
   942   000040                     	ds	1
   943   000041                     dtoa@i:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x40
   947   000041                     	ds	2
   948   000043                     vfpfcnvrt@fp:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x42
   952   000043                     	ds	2
   953   000045                     vfpfcnvrt@fmt:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x44
   957   000045                     	ds	2
   958   000047                     vfpfcnvrt@ap:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x46
   962   000047                     	ds	2
   963   000049                     ??_vfpfcnvrt:
   964                           
   965                           ; 1 bytes @ 0x48
   966   000049                     	ds	2
   967   00004B                     vfpfcnvrt@convarg:
   968                           	callstack 0
   969                           
   970                           ; 8 bytes @ 0x4A
   971   00004B                     	ds	8
   972   000053                     vfpfcnvrt@cp:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x52
   976   000053                     	ds	2
   977   000055                     vfprintf@cfmt:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x54
   981   000055                     	ds	2
   982   000057                     
   983                           ; 1 bytes @ 0x56
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 21 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  i               1  231[BANK1 ] enum E14569
   994 ;;  buf           150    0[BANK1 ] unsigned char [150]
   995 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   996 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   997 ;;  expected_val   40    0        unsigned int [5][4]
   998 ;;  motorR          9  243[BANK1 ] struct DC_motor
   999 ;;  motorL          9  234[BANK1 ] struct DC_motor
  1000 ;;  clear_read      2  232[BANK1 ] unsigned int 
  1001 ;;  blue_read       2  229[BANK1 ] unsigned int 
  1002 ;;  green_read      2  227[BANK1 ] unsigned int 
  1003 ;;  red_read        2  225[BANK1 ] unsigned int 
  1004 ;;  clear_read_c    2  223[BANK1 ] unsigned int 
  1005 ;;  PWMcycle        1  222[BANK1 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;      Totals:         0       2     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1019 ;;Total ram usage:      254 bytes
  1020 ;; Hardware stack levels required when called: 13
  1021 ;; This function calls:
  1022 ;;		_I2C_2_Master_Init
  1023 ;;		_Interrupts_init
  1024 ;;		_LEDSon_init
  1025 ;;		_card_response
  1026 ;;		_clear_read_calibration
  1027 ;;		_collect_avg_readings
  1028 ;;		_color_click_init
  1029 ;;		_color_read_Clear
  1030 ;;		_fullSpeedAhead
  1031 ;;		_initDCmotorsPWM
  1032 ;;		_initUSART4
  1033 ;;		_reverseFullSpeed
  1034 ;;		_sendStringSerial4
  1035 ;;		_setMotorPWM
  1036 ;;		_sprintf
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		Startup code after reset
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text0
  1044   001272                     __ptext0:
  1045                           	callstack 0
  1046   001272                     _main:
  1047                           	callstack 18
  1048   001272                     
  1049                           ;main.c: 26:     LEDSon_init();
  1050   001272  EC75  F018         	call	_LEDSon_init	;wreg free
  1051   001276                     
  1052                           ;main.c: 27:     I2C_2_Master_Init();
  1053   001276  EC25  F018         	call	_I2C_2_Master_Init	;wreg free
  1054   00127A                     
  1055                           ;main.c: 28:     color_click_init();
  1056   00127A  ECDE  F017         	call	_color_click_init	;wreg free
  1057   00127E                     
  1058                           ;main.c: 29:     initDCmotorsPWM();
  1059   00127E  ECF5  F014         	call	_initDCmotorsPWM	;wreg free
  1060   001282                     
  1061                           ;main.c: 30:     initUSART4();
  1062   001282  EC86  F018         	call	_initUSART4	;wreg free
  1063   001286                     
  1064                           ;main.c: 31:     Interrupts_init();
  1065   001286  ECBF  F017         	call	_Interrupts_init	;wreg free
  1066   00128A                     
  1067                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1068   00128A  8486               	bsf	134,2,c	;volatile
  1069   00128C                     
  1070                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1071   00128C  010E               	movlb	14	; () banked
  1072   00128E  95B4               	bcf	180,2,b	;volatile
  1073   001290                     
  1074                           ; BSR set to: 14
  1075                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1076   001290  CFBC F1DE          	movff	4028,main@PWMcycle	;volatile
  1077                           
  1078                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1079   001294  0E00               	movlw	0
  1080   001296  0101               	movlb	1	; () banked
  1081   001298  6FEA               	movwf	main@motorL& (0+255),b
  1082                           
  1083                           ;main.c: 47:     motorL.direction=1;
  1084   00129A  0E01               	movlw	1
  1085   00129C  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1086                           
  1087                           ;main.c: 48:     motorL.brakemode=1;
  1088   00129E  0E01               	movlw	1
  1089   0012A0  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1090   0012A2                     
  1091                           ; BSR set to: 1
  1092                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1093   0012A2  0EAA               	movlw	170
  1094   0012A4  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1095   0012A6  0E0F               	movlw	15
  1096   0012A8  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1097   0012AA                     
  1098                           ; BSR set to: 1
  1099                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1100   0012AA  0EA6               	movlw	166
  1101   0012AC  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1102   0012AE  0E0F               	movlw	15
  1103   0012B0  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1104   0012B2                     
  1105                           ; BSR set to: 1
  1106                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1107   0012B2  C1DE  F1ED         	movff	main@PWMcycle,main@motorL+3
  1108   0012B6  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1109                           
  1110                           ;main.c: 53:     motorR.power=0;
  1111   0012B8  0E00               	movlw	0
  1112   0012BA  6FF3               	movwf	main@motorR& (0+255),b
  1113                           
  1114                           ;main.c: 54:     motorR.direction=1;
  1115   0012BC  0E01               	movlw	1
  1116   0012BE  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1117                           
  1118                           ;main.c: 55:     motorR.brakemode=1;
  1119   0012C0  0E01               	movlw	1
  1120   0012C2  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1121   0012C4                     
  1122                           ; BSR set to: 1
  1123                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1124   0012C4  0E25               	movlw	37
  1125   0012C6  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1126   0012C8  0E0F               	movlw	15
  1127   0012CA  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1128   0012CC                     
  1129                           ; BSR set to: 1
  1130                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1131   0012CC  0E21               	movlw	33
  1132   0012CE  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1133   0012D0  0E0F               	movlw	15
  1134   0012D2  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1135   0012D4                     
  1136                           ; BSR set to: 1
  1137                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1138   0012D4  C1DE  F1F6         	movff	main@PWMcycle,main@motorR+3
  1139   0012D8  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1140   0012DA                     
  1141                           ; BSR set to: 1
  1142                           ;main.c: 60:     setMotorPWM(&motorL);
  1143   0012DA  0EEA               	movlw	low main@motorL
  1144   0012DC  6E12               	movwf	setMotorPWM@m^0,c
  1145   0012DE  0E01               	movlw	high main@motorL
  1146   0012E0  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1147   0012E2  EC85  F00F         	call	_setMotorPWM	;wreg free
  1148   0012E6                     
  1149                           ;main.c: 61:     setMotorPWM(&motorR);
  1150   0012E6  0EF3               	movlw	low main@motorR
  1151   0012E8  6E12               	movwf	setMotorPWM@m^0,c
  1152   0012EA  0E01               	movlw	high main@motorR
  1153   0012EC  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1154   0012EE  EC85  F00F         	call	_setMotorPWM	;wreg free
  1155                           
  1156                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1157   0012F2  0E00               	movlw	0
  1158   0012F4  0101               	movlb	1	; () banked
  1159   0012F6  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1160   0012F8  0E00               	movlw	0
  1161   0012FA  6FE1               	movwf	main@red_read& (0+255),b
  1162                           
  1163                           ;main.c: 69:     unsigned int green_read = 0;
  1164   0012FC  0E00               	movlw	0
  1165   0012FE  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1166   001300  0E00               	movlw	0
  1167   001302  6FE3               	movwf	main@green_read& (0+255),b
  1168                           
  1169                           ;main.c: 70:     unsigned int blue_read = 0;
  1170   001304  0E00               	movlw	0
  1171   001306  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1172   001308  0E00               	movlw	0
  1173   00130A  6FE5               	movwf	main@blue_read& (0+255),b
  1174                           
  1175                           ;main.c: 71:     unsigned int clear_read = 0;
  1176   00130C  0E00               	movlw	0
  1177   00130E  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1178   001310  0E00               	movlw	0
  1179   001312  6FE8               	movwf	main@clear_read& (0+255),b
  1180                           
  1181                           ;main.c: 72:     unsigned int clear_read_check = 0;
  1182   001314  0E00               	movlw	0
  1183   001316  6FE0               	movwf	(main@clear_read_check+1)& (0+255),b
  1184   001318  0E00               	movlw	0
  1185   00131A  6FDF               	movwf	main@clear_read_check& (0+255),b
  1186   00131C                     
  1187                           ; BSR set to: 1
  1188                           ;main.c: 73:     unsigned int expected_values[4][9];;main.c: 74:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 75:     unsigned int ReturnHomeArray[2][30];;main.c: 85:  
      +                             LATDbits.LATD4 = 0;
  1189   00131C  987C               	bcf	124,4,c	;volatile
  1190                           
  1191                           ;main.c: 86:     for(colour i = RED; i<= PINK; i++){
  1192   00131E  0E01               	movlw	1
  1193   001320  6FE7               	movwf	main@i& (0+255),b
  1194   001322  EF94  F009         	goto	l238
  1195   001326                     l239:
  1196                           
  1197                           ;main.c: 88:             LATDbits.LATD4 = 1;
  1198   001326  887C               	bsf	124,4,c	;volatile
  1199   001328                     l238:
  1200                           
  1201                           ;main.c: 87:         while(PORTFbits.RF2){
  1202   001328  B48E               	btfsc	142,2,c	;volatile
  1203   00132A  EF99  F009         	goto	u2011
  1204   00132E  EF9B  F009         	goto	u2010
  1205   001332                     u2011:
  1206   001332  EF93  F009         	goto	l239
  1207   001336                     u2010:
  1208   001336                     
  1209                           ;main.c: 90:         LATDbits.LATD4 = 0;
  1210   001336  987C               	bcf	124,4,c	;volatile
  1211   001338                     
  1212                           ;main.c: 91:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1213   001338  0E29               	movlw	41
  1214   00133A  0100               	movlb	0	; () banked
  1215   00133C  6FED               	movwf	(??_main+1)& (0+255),b
  1216   00133E  0E96               	movlw	150
  1217   001340  6FEC               	movwf	??_main& (0+255),b
  1218   001342  0E7F               	movlw	127
  1219   001344                     u2067:
  1220   001344  2EE8               	decfsz	wreg,f,c
  1221   001346  D7FE               	bra	u2067
  1222   001348  2FEC               	decfsz	??_main& (0+255),f,b
  1223   00134A  D7FC               	bra	u2067
  1224   00134C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1225   00134E  D7FA               	bra	u2067
  1226   001350                     
  1227                           ;main.c: 92:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1228   001350  0EE8               	movlw	low main@clear_read
  1229   001352  6E10               	movwf	collect_avg_readings@clear_read^0,c
  1230   001354  0E01               	movlw	high main@clear_read
  1231   001356  6E11               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1232   001358  0EE1               	movlw	low main@red_read
  1233   00135A  6E12               	movwf	collect_avg_readings@red_read^0,c
  1234   00135C  0E01               	movlw	high main@red_read
  1235   00135E  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1236   001360  0EE3               	movlw	low main@green_read
  1237   001362  6E14               	movwf	collect_avg_readings@green_read^0,c
  1238   001364  0E01               	movlw	high main@green_read
  1239   001366  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1240   001368  0EE5               	movlw	low main@blue_read
  1241   00136A  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1242   00136C  0E01               	movlw	high main@blue_read
  1243   00136E  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1244   001370  EC84  F00D         	call	_collect_avg_readings	;wreg free
  1245   001374                     
  1246                           ;main.c: 93:         expected_values[CLEAR][i] = clear_read;
  1247   001374  0101               	movlb	1	; () banked
  1248   001376  51E7               	movf	main@i& (0+255),w,b
  1249   001378  0D02               	mullw	2
  1250   00137A  0E96               	movlw	low main@expected_values
  1251   00137C  24F3               	addwf	243,w,c
  1252   00137E  6ED9               	movwf	fsr2l,c
  1253   001380  0E01               	movlw	high main@expected_values
  1254   001382  20F4               	addwfc	prodh,w,c
  1255   001384  6EDA               	movwf	fsr2h,c
  1256   001386  C1E8  FFDE         	movff	main@clear_read,postinc2
  1257   00138A  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1258   00138E                     
  1259                           ; BSR set to: 1
  1260                           ;main.c: 94:         expected_values[RED][i] = red_read;
  1261   00138E  51E7               	movf	main@i& (0+255),w,b
  1262   001390  0D02               	mullw	2
  1263   001392  0E12               	movlw	18
  1264   001394  26F3               	addwf	243,f,c
  1265   001396  0E00               	movlw	0
  1266   001398  22F4               	addwfc	244,f,c
  1267   00139A  0E96               	movlw	low main@expected_values
  1268   00139C  24F3               	addwf	243,w,c
  1269   00139E  6ED9               	movwf	fsr2l,c
  1270   0013A0  0E01               	movlw	high main@expected_values
  1271   0013A2  20F4               	addwfc	prodh,w,c
  1272   0013A4  6EDA               	movwf	fsr2h,c
  1273   0013A6  C1E1  FFDE         	movff	main@red_read,postinc2
  1274   0013AA  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1275   0013AE                     
  1276                           ; BSR set to: 1
  1277                           ;main.c: 95:         expected_values[GREEN][i] = green_read;
  1278   0013AE  51E7               	movf	main@i& (0+255),w,b
  1279   0013B0  0D02               	mullw	2
  1280   0013B2  0E24               	movlw	36
  1281   0013B4  26F3               	addwf	243,f,c
  1282   0013B6  0E00               	movlw	0
  1283   0013B8  22F4               	addwfc	244,f,c
  1284   0013BA  0E96               	movlw	low main@expected_values
  1285   0013BC  24F3               	addwf	243,w,c
  1286   0013BE  6ED9               	movwf	fsr2l,c
  1287   0013C0  0E01               	movlw	high main@expected_values
  1288   0013C2  20F4               	addwfc	prodh,w,c
  1289   0013C4  6EDA               	movwf	fsr2h,c
  1290   0013C6  C1E3  FFDE         	movff	main@green_read,postinc2
  1291   0013CA  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1292   0013CE                     
  1293                           ; BSR set to: 1
  1294                           ;main.c: 96:         expected_values[BLUE][i] = blue_read;
  1295   0013CE  51E7               	movf	main@i& (0+255),w,b
  1296   0013D0  0D02               	mullw	2
  1297   0013D2  0E36               	movlw	54
  1298   0013D4  26F3               	addwf	243,f,c
  1299   0013D6  0E00               	movlw	0
  1300   0013D8  22F4               	addwfc	244,f,c
  1301   0013DA  0E96               	movlw	low main@expected_values
  1302   0013DC  24F3               	addwf	243,w,c
  1303   0013DE  6ED9               	movwf	fsr2l,c
  1304   0013E0  0E01               	movlw	high main@expected_values
  1305   0013E2  20F4               	addwfc	prodh,w,c
  1306   0013E4  6EDA               	movwf	fsr2h,c
  1307   0013E6  C1E5  FFDE         	movff	main@blue_read,postinc2
  1308   0013EA  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1309   0013EE                     
  1310                           ; BSR set to: 1
  1311                           ;main.c: 97:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n",
      +                           clear_read, red_read, green_read, blue_read, i);
  1312   0013EE  0E00               	movlw	low main@buf
  1313   0013F0  0100               	movlb	0	; () banked
  1314   0013F2  6F66               	movwf	sprintf@s& (0+255),b
  1315   0013F4  0E01               	movlw	high main@buf
  1316   0013F6  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1317   0013F8  0E01               	movlw	low STR_1
  1318   0013FA  6F68               	movwf	sprintf@fmt& (0+255),b
  1319   0013FC  0E0E               	movlw	high STR_1
  1320   0013FE  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1321   001400  C1E8  F06A         	movff	main@clear_read,?_sprintf+4
  1322   001404  C1E9  F06B         	movff	main@clear_read+1,?_sprintf+5
  1323   001408  C1E1  F06C         	movff	main@red_read,?_sprintf+6
  1324   00140C  C1E2  F06D         	movff	main@red_read+1,?_sprintf+7
  1325   001410  C1E3  F06E         	movff	main@green_read,?_sprintf+8
  1326   001414  C1E4  F06F         	movff	main@green_read+1,?_sprintf+9
  1327   001418  C1E5  F070         	movff	main@blue_read,?_sprintf+10
  1328   00141C  C1E6  F071         	movff	main@blue_read+1,?_sprintf+11
  1329   001420  C1E7  F072         	movff	main@i,?_sprintf+12
  1330   001424  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1331   001426  EC93  F016         	call	_sprintf	;wreg free
  1332   00142A                     
  1333                           ;main.c: 98:         sendStringSerial4(buf);
  1334   00142A  0E00               	movlw	low main@buf
  1335   00142C  6E06               	movwf	sendStringSerial4@string^0,c
  1336   00142E  0E01               	movlw	high main@buf
  1337   001430  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1338   001432  ECF8  F017         	call	_sendStringSerial4	;wreg free
  1339   001436                     
  1340                           ;main.c: 99:     }
  1341   001436  0101               	movlb	1	; () banked
  1342   001438  2BE7               	incf	main@i& (0+255),f,b
  1343   00143A                     
  1344                           ; BSR set to: 1
  1345   00143A  0E05               	movlw	5
  1346   00143C  65E7               	cpfsgt	main@i& (0+255),b
  1347   00143E  EF23  F00A         	goto	u2021
  1348   001442  EF25  F00A         	goto	u2020
  1349   001446                     u2021:
  1350   001446  EF94  F009         	goto	l238
  1351   00144A                     u2020:
  1352   00144A                     
  1353                           ; BSR set to: 1
  1354                           ;main.c: 100:     LATDbits.LATD4 = 1;
  1355   00144A  887C               	bsf	124,4,c	;volatile
  1356                           
  1357                           ;main.c: 101:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1358   00144C  EF29  F00A         	goto	l241
  1359   001450                     l242:
  1360   001450  987C               	bcf	124,4,c	;volatile
  1361   001452                     l241:
  1362   001452  B48E               	btfsc	142,2,c	;volatile
  1363   001454  EF2E  F00A         	goto	u2031
  1364   001458  EF30  F00A         	goto	u2030
  1365   00145C                     u2031:
  1366   00145C  EF28  F00A         	goto	l242
  1367   001460                     u2030:
  1368   001460                     
  1369                           ;main.c: 102:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1370   001460  0E00               	movlw	low main@buf
  1371   001462  0100               	movlb	0	; () banked
  1372   001464  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1373   001466  0E01               	movlw	high main@buf
  1374   001468  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1375   00146A  0EE8               	movlw	low main@clear_read
  1376   00146C  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1377   00146E  0E01               	movlw	high main@clear_read
  1378   001470  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1379   001472  0EDF               	movlw	low main@clear_read_check
  1380   001474  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1381   001476  0E01               	movlw	high main@clear_read_check
  1382   001478  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1383   00147A  EC43  F012         	call	_clear_read_calibration	;wreg free
  1384   00147E                     l244:
  1385   00147E  B48E               	btfsc	142,2,c	;volatile
  1386   001480  EF44  F00A         	goto	u2041
  1387   001484  EF46  F00A         	goto	u2040
  1388   001488                     u2041:
  1389   001488  EF3F  F00A         	goto	l244
  1390   00148C                     u2040:
  1391   00148C                     l3904:
  1392                           
  1393                           ;main.c: 122:     fullSpeedAhead(&motorL, &motorR);
  1394   00148C  0EEA               	movlw	low main@motorL
  1395   00148E  6E18               	movwf	fullSpeedAhead@mL^0,c
  1396   001490  0E01               	movlw	high main@motorL
  1397   001492  6E19               	movwf	(fullSpeedAhead@mL+1)^0,c
  1398   001494  0EF3               	movlw	low main@motorR
  1399   001496  6E1A               	movwf	fullSpeedAhead@mR^0,c
  1400   001498  0E01               	movlw	high main@motorR
  1401   00149A  6E1B               	movwf	(fullSpeedAhead@mR+1)^0,c
  1402   00149C  EC69  F014         	call	_fullSpeedAhead	;wreg free
  1403   0014A0                     l3906:
  1404                           
  1405                           ;main.c: 125:         clear_read = color_read_Clear();
  1406   0014A0  EC0C  F017         	call	_color_read_Clear	;wreg free
  1407   0014A4  C009  F1E8         	movff	?_color_read_Clear,main@clear_read
  1408   0014A8  C00A  F1E9         	movff	?_color_read_Clear+1,main@clear_read+1
  1409   0014AC                     
  1410                           ;main.c: 126:         if (clear_read > clear_read_check){
  1411   0014AC  0101               	movlb	1	; () banked
  1412   0014AE  51E8               	movf	main@clear_read& (0+255),w,b
  1413   0014B0  5DDF               	subwf	main@clear_read_check& (0+255),w,b
  1414   0014B2  51E9               	movf	(main@clear_read+1)& (0+255),w,b
  1415   0014B4  59E0               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1416   0014B6  B0D8               	btfsc	status,0,c
  1417   0014B8  EF60  F00A         	goto	u2051
  1418   0014BC  EF62  F00A         	goto	u2050
  1419   0014C0                     u2051:
  1420   0014C0  EF50  F00A         	goto	l3906
  1421   0014C4                     u2050:
  1422   0014C4                     
  1423                           ; BSR set to: 1
  1424                           ;main.c: 127:             stop(&motorL, &motorR);
  1425   0014C4  0EEA               	movlw	low main@motorL
  1426   0014C6  6E18               	movwf	stop@mL^0,c
  1427   0014C8  0E01               	movlw	high main@motorL
  1428   0014CA  6E19               	movwf	(stop@mL+1)^0,c
  1429   0014CC  0EF3               	movlw	low main@motorR
  1430   0014CE  6E1A               	movwf	stop@mR^0,c
  1431   0014D0  0E01               	movlw	high main@motorR
  1432   0014D2  6E1B               	movwf	(stop@mR+1)^0,c
  1433   0014D4  EC39  F015         	call	_stop	;wreg free
  1434   0014D8                     
  1435                           ;main.c: 128:             _delay((unsigned long)((20)*(64000000/4000.0)));
  1436   0014D8  0E02               	movlw	2
  1437   0014DA  0100               	movlb	0	; () banked
  1438   0014DC  6FED               	movwf	(??_main+1)& (0+255),b
  1439   0014DE  0EA0               	movlw	160
  1440   0014E0  6FEC               	movwf	??_main& (0+255),b
  1441   0014E2  0E92               	movlw	146
  1442   0014E4                     u2077:
  1443   0014E4  2EE8               	decfsz	wreg,f,c
  1444   0014E6  D7FE               	bra	u2077
  1445   0014E8  2FEC               	decfsz	??_main& (0+255),f,b
  1446   0014EA  D7FC               	bra	u2077
  1447   0014EC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1448   0014EE  D7FA               	bra	u2077
  1449   0014F0  F000               	nop	
  1450   0014F2                     
  1451                           ;main.c: 129:             reverseFullSpeed(&motorL, &motorR);
  1452   0014F2  0EEA               	movlw	low main@motorL
  1453   0014F4  6E18               	movwf	reverseFullSpeed@mL^0,c
  1454   0014F6  0E01               	movlw	high main@motorL
  1455   0014F8  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1456   0014FA  0EF3               	movlw	low main@motorR
  1457   0014FC  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1458   0014FE  0E01               	movlw	high main@motorR
  1459   001500  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1460   001502  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  1461                           
  1462                           ;main.c: 130:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1463   001506  0E09               	movlw	9
  1464   001508  0100               	movlb	0	; () banked
  1465   00150A  6FED               	movwf	(??_main+1)& (0+255),b
  1466   00150C  0E1E               	movlw	30
  1467   00150E  6FEC               	movwf	??_main& (0+255),b
  1468   001510  0EE4               	movlw	228
  1469   001512                     u2087:
  1470   001512  2EE8               	decfsz	wreg,f,c
  1471   001514  D7FE               	bra	u2087
  1472   001516  2FEC               	decfsz	??_main& (0+255),f,b
  1473   001518  D7FC               	bra	u2087
  1474   00151A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1475   00151C  D7FA               	bra	u2087
  1476   00151E  F000               	nop	
  1477   001520                     
  1478                           ;main.c: 131:             stop(&motorL, &motorR);
  1479   001520  0EEA               	movlw	low main@motorL
  1480   001522  6E18               	movwf	stop@mL^0,c
  1481   001524  0E01               	movlw	high main@motorL
  1482   001526  6E19               	movwf	(stop@mL+1)^0,c
  1483   001528  0EF3               	movlw	low main@motorR
  1484   00152A  6E1A               	movwf	stop@mR^0,c
  1485   00152C  0E01               	movlw	high main@motorR
  1486   00152E  6E1B               	movwf	(stop@mR+1)^0,c
  1487   001530  EC39  F015         	call	_stop	;wreg free
  1488   001534                     
  1489                           ;main.c: 132:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1490   001534  0E2A               	movlw	42
  1491   001536  0100               	movlb	0	; () banked
  1492   001538  6FEC               	movwf	??_main& (0+255),b
  1493   00153A  0E8D               	movlw	141
  1494   00153C                     u2097:
  1495   00153C  2EE8               	decfsz	wreg,f,c
  1496   00153E  D7FE               	bra	u2097
  1497   001540  2FEC               	decfsz	??_main& (0+255),f,b
  1498   001542  D7FC               	bra	u2097
  1499   001544  D000               	nop2	
  1500   001546                     
  1501                           ;main.c: 133:             card_response (buf, &clear_read, &red_read, &green_read, &blue
      +                          _read, expected_values , &motorL, &motorR);
  1502   001546  0E00               	movlw	low main@buf
  1503   001548  0100               	movlb	0	; () banked
  1504   00154A  6F81               	movwf	card_response@buf& (0+255),b
  1505   00154C  0E01               	movlw	high main@buf
  1506   00154E  6F82               	movwf	(card_response@buf+1)& (0+255),b
  1507   001550  0EE8               	movlw	low main@clear_read
  1508   001552  6F83               	movwf	card_response@clear_read& (0+255),b
  1509   001554  0E01               	movlw	high main@clear_read
  1510   001556  6F84               	movwf	(card_response@clear_read+1)& (0+255),b
  1511   001558  0EE1               	movlw	low main@red_read
  1512   00155A  6F85               	movwf	card_response@red_read& (0+255),b
  1513   00155C  0E01               	movlw	high main@red_read
  1514   00155E  6F86               	movwf	(card_response@red_read+1)& (0+255),b
  1515   001560  0EE3               	movlw	low main@green_read
  1516   001562  6F87               	movwf	card_response@green_read& (0+255),b
  1517   001564  0E01               	movlw	high main@green_read
  1518   001566  6F88               	movwf	(card_response@green_read+1)& (0+255),b
  1519   001568  0EE5               	movlw	low main@blue_read
  1520   00156A  6F89               	movwf	card_response@blue_read& (0+255),b
  1521   00156C  0E01               	movlw	high main@blue_read
  1522   00156E  6F8A               	movwf	(card_response@blue_read+1)& (0+255),b
  1523   001570  0E96               	movlw	low main@expected_values
  1524   001572  6F8B               	movwf	card_response@expected_values& (0+255),b
  1525   001574  0E01               	movlw	high main@expected_values
  1526   001576  6F8C               	movwf	(card_response@expected_values+1)& (0+255),b
  1527   001578  0EEA               	movlw	low main@motorL
  1528   00157A  6F8D               	movwf	card_response@mL& (0+255),b
  1529   00157C  0E01               	movlw	high main@motorL
  1530   00157E  6F8E               	movwf	(card_response@mL+1)& (0+255),b
  1531   001580  0EF3               	movlw	low main@motorR
  1532   001582  6F8F               	movwf	card_response@mR& (0+255),b
  1533   001584  0E01               	movlw	high main@motorR
  1534   001586  6F90               	movwf	(card_response@mR+1)& (0+255),b
  1535   001588  EC9C  F011         	call	_card_response	;wreg free
  1536   00158C                     
  1537                           ;main.c: 134:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1538   00158C  0E2A               	movlw	42
  1539   00158E  0100               	movlb	0	; () banked
  1540   001590  6FEC               	movwf	??_main& (0+255),b
  1541   001592  0E8D               	movlw	141
  1542   001594                     u2107:
  1543   001594  2EE8               	decfsz	wreg,f,c
  1544   001596  D7FE               	bra	u2107
  1545   001598  2FEC               	decfsz	??_main& (0+255),f,b
  1546   00159A  D7FC               	bra	u2107
  1547   00159C  D000               	nop2	
  1548   00159E  EF46  F00A         	goto	l3904
  1549   0015A2  EF3B  F000         	goto	start
  1550   0015A6                     __end_of_main:
  1551                           	callstack 0
  1552                           
  1553 ;; *************** function _initUSART4 *****************
  1554 ;; Defined at:
  1555 ;;		line 6 in file "serial.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  1    wreg      void 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;Total ram usage:        0 bytes
  1574 ;; Hardware stack levels used: 1
  1575 ;; Hardware stack levels required when called: 4
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text1
  1584   00310C                     __ptext1:
  1585                           	callstack 0
  1586   00310C                     _initUSART4:
  1587                           	callstack 26
  1588   00310C                     
  1589                           ;serial.c: 10:     RC0PPS = 0x12;
  1590   00310C  0E12               	movlw	18
  1591   00310E  010E               	movlb	14	; () banked
  1592   003110  6F62               	movwf	98,b	;volatile
  1593                           
  1594                           ;serial.c: 11:     RX4PPS = 0x11;
  1595   003112  0E11               	movlw	17
  1596   003114  6F15               	movwf	21,b	;volatile
  1597   003116                     
  1598                           ; BSR set to: 14
  1599                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1600   003116  8283               	bsf	131,1,c	;volatile
  1601   003118                     
  1602                           ; BSR set to: 14
  1603                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1604   003118  97E9               	bcf	233,3,b	;volatile
  1605   00311A                     
  1606                           ; BSR set to: 14
  1607                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1608   00311A  95E8               	bcf	232,2,b	;volatile
  1609                           
  1610                           ;serial.c: 17:     SP4BRGL = 51;
  1611   00311C  0E33               	movlw	51
  1612   00311E  6FE5               	movwf	229,b	;volatile
  1613                           
  1614                           ;serial.c: 18:     SP4BRGH = 0;
  1615   003120  0E00               	movlw	0
  1616   003122  6FE6               	movwf	230,b	;volatile
  1617   003124                     
  1618                           ; BSR set to: 14
  1619                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1620   003124  89E7               	bsf	231,4,b	;volatile
  1621   003126                     
  1622                           ; BSR set to: 14
  1623                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1624   003126  8BE8               	bsf	232,5,b	;volatile
  1625   003128                     
  1626                           ; BSR set to: 14
  1627                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1628   003128  8FE7               	bsf	231,7,b	;volatile
  1629   00312A                     
  1630                           ; BSR set to: 14
  1631   00312A  0012               	return		;funcret
  1632   00312C                     __end_of_initUSART4:
  1633                           	callstack 0
  1634                           
  1635 ;; *************** function _initDCmotorsPWM *****************
  1636 ;; Defined at:
  1637 ;;		line 6 in file "dc_motor.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used: 1
  1657 ;; Hardware stack levels required when called: 4
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text2
  1666   0029EA                     __ptext2:
  1667                           	callstack 0
  1668   0029EA                     _initDCmotorsPWM:
  1669                           	callstack 26
  1670   0029EA                     
  1671                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1672   0029EA  9485               	bcf	133,2,c	;volatile
  1673                           
  1674                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1675   0029EC  9885               	bcf	133,4,c	;volatile
  1676                           
  1677                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1678   0029EE  9E83               	bcf	131,7,c	;volatile
  1679                           
  1680                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1681   0029F0  9C87               	bcf	135,6,c	;volatile
  1682   0029F2                     
  1683                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1684   0029F2  0E05               	movlw	5
  1685   0029F4  010E               	movlb	14	; () banked
  1686   0029F6  6F74               	movwf	116,b	;volatile
  1687                           
  1688                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1689   0029F8  0E06               	movlw	6
  1690   0029FA  6F76               	movwf	118,b	;volatile
  1691                           
  1692                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1693   0029FC  0E07               	movlw	7
  1694   0029FE  6F69               	movwf	105,b	;volatile
  1695                           
  1696                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1697   002A00  0E08               	movlw	8
  1698   002A02  6F88               	movwf	136,b	;volatile
  1699                           
  1700                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1701   002A04  50BD               	movf	189,w,c	;volatile
  1702   002A06  0B8F               	andlw	-113
  1703   002A08  0940               	iorlw	64
  1704   002A0A  6EBD               	movwf	189,c	;volatile
  1705                           
  1706                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1707   002A0C  0EE0               	movlw	-32
  1708   002A0E  16BE               	andwf	190,f,c	;volatile
  1709                           
  1710                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1711   002A10  50BF               	movf	191,w,c	;volatile
  1712   002A12  0BF0               	andlw	-16
  1713   002A14  0901               	iorlw	1
  1714   002A16  6EBF               	movwf	191,c	;volatile
  1715                           
  1716                           ;dc_motor.c: 26:     T2PR=99;
  1717   002A18  0E63               	movlw	99
  1718   002A1A  6EBC               	movwf	188,c	;volatile
  1719   002A1C                     
  1720                           ; BSR set to: 14
  1721                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1722   002A1C  8EBD               	bsf	189,7,c	;volatile
  1723                           
  1724                           ;dc_motor.c: 31:     CCPR1H=0;
  1725   002A1E  0E00               	movlw	0
  1726   002A20  6EAA               	movwf	170,c	;volatile
  1727                           
  1728                           ;dc_motor.c: 32:     CCPR2H=0;
  1729   002A22  0E00               	movlw	0
  1730   002A24  6EA6               	movwf	166,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 33:     CCPR3H=0;
  1733   002A26  0E00               	movlw	0
  1734   002A28  010F               	movlb	15	; () banked
  1735   002A2A  6F25               	movwf	37,b	;volatile
  1736                           
  1737                           ;dc_motor.c: 34:     CCPR4H=0;
  1738   002A2C  0E00               	movlw	0
  1739   002A2E  6F21               	movwf	33,b	;volatile
  1740                           
  1741                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1742   002A30  0EFC               	movlw	-4
  1743   002A32  16AD               	andwf	173,f,c	;volatile
  1744                           
  1745                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1746   002A34  0EF3               	movlw	-13
  1747   002A36  16AD               	andwf	173,f,c	;volatile
  1748                           
  1749                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1750   002A38  0ECF               	movlw	-49
  1751   002A3A  16AD               	andwf	173,f,c	;volatile
  1752                           
  1753                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1754   002A3C  0E3F               	movlw	-193
  1755   002A3E  16AD               	andwf	173,f,c	;volatile
  1756   002A40                     
  1757                           ; BSR set to: 15
  1758                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1759   002A40  88AB               	bsf	171,4,c	;volatile
  1760                           
  1761                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1762   002A42  50AB               	movf	171,w,c	;volatile
  1763   002A44  0BF0               	andlw	-16
  1764   002A46  090C               	iorlw	12
  1765   002A48  6EAB               	movwf	171,c	;volatile
  1766   002A4A                     
  1767                           ; BSR set to: 15
  1768                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1769   002A4A  8EAB               	bsf	171,7,c	;volatile
  1770   002A4C                     
  1771                           ; BSR set to: 15
  1772                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1773   002A4C  88A7               	bsf	167,4,c	;volatile
  1774                           
  1775                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1776   002A4E  50A7               	movf	167,w,c	;volatile
  1777   002A50  0BF0               	andlw	-16
  1778   002A52  090C               	iorlw	12
  1779   002A54  6EA7               	movwf	167,c	;volatile
  1780   002A56                     
  1781                           ; BSR set to: 15
  1782                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1783   002A56  8EA7               	bsf	167,7,c	;volatile
  1784   002A58                     
  1785                           ; BSR set to: 15
  1786                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1787   002A58  8926               	bsf	38,4,b	;volatile
  1788                           
  1789                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1790   002A5A  5126               	movf	38,w,b	;volatile
  1791   002A5C  0BF0               	andlw	-16
  1792   002A5E  090C               	iorlw	12
  1793   002A60  6F26               	movwf	38,b	;volatile
  1794   002A62                     
  1795                           ; BSR set to: 15
  1796                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1797   002A62  8F26               	bsf	38,7,b	;volatile
  1798   002A64                     
  1799                           ; BSR set to: 15
  1800                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1801   002A64  8922               	bsf	34,4,b	;volatile
  1802                           
  1803                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1804   002A66  5122               	movf	34,w,b	;volatile
  1805   002A68  0BF0               	andlw	-16
  1806   002A6A  090C               	iorlw	12
  1807   002A6C  6F22               	movwf	34,b	;volatile
  1808   002A6E                     
  1809                           ; BSR set to: 15
  1810                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1811   002A6E  8F22               	bsf	34,7,b	;volatile
  1812   002A70                     
  1813                           ; BSR set to: 15
  1814   002A70  0012               	return		;funcret
  1815   002A72                     __end_of_initDCmotorsPWM:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _fullSpeedAhead *****************
  1819 ;; Defined at:
  1820 ;;		line 131 in file "dc_motor.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1823 ;;		 -> main@motorL(9), 
  1824 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1825 ;;		 -> main@motorR(9), 
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  i               2   28[COMRAM] int 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;Total ram usage:        7 bytes
  1842 ;; Hardware stack levels used: 1
  1843 ;; Hardware stack levels required when called: 6
  1844 ;; This function calls:
  1845 ;;		_setMotorPWM
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text3
  1852   0028D2                     __ptext3:
  1853                           	callstack 0
  1854   0028D2                     _fullSpeedAhead:
  1855                           	callstack 24
  1856   0028D2                     
  1857                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  1858   0028D2  EE20 F001          	lfsr	2,1
  1859   0028D6  5018               	movf	fullSpeedAhead@mL^0,w,c
  1860   0028D8  26D9               	addwf	fsr2l,f,c
  1861   0028DA  5019               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1862   0028DC  22DA               	addwfc	fsr2h,f,c
  1863   0028DE  0E01               	movlw	1
  1864   0028E0  6EDF               	movwf	indf2,c
  1865                           
  1866                           ;dc_motor.c: 134:     mR->direction=1;
  1867   0028E2  EE20 F001          	lfsr	2,1
  1868   0028E6  501A               	movf	fullSpeedAhead@mR^0,w,c
  1869   0028E8  26D9               	addwf	fsr2l,f,c
  1870   0028EA  501B               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1871   0028EC  22DA               	addwfc	fsr2h,f,c
  1872   0028EE  0E01               	movlw	1
  1873   0028F0  6EDF               	movwf	indf2,c
  1874   0028F2                     
  1875                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  1876   0028F2  0E00               	movlw	0
  1877   0028F4  6E1E               	movwf	(fullSpeedAhead@i+1)^0,c
  1878   0028F6  0E00               	movlw	0
  1879   0028F8  6E1D               	movwf	fullSpeedAhead@i^0,c
  1880   0028FA                     l3194:
  1881                           
  1882                           ;dc_motor.c: 136:         mL->power=i;
  1883   0028FA  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1884   0028FE  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1885   002902  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1886                           
  1887                           ;dc_motor.c: 137:         mR->power=i;
  1888   002906  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1889   00290A  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1890   00290E  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1891   002912                     
  1892                           ;dc_motor.c: 138:         setMotorPWM(mL);
  1893   002912  C018  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1894   002916  C019  F013         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1895   00291A  EC85  F00F         	call	_setMotorPWM	;wreg free
  1896   00291E                     
  1897                           ;dc_motor.c: 139:         setMotorPWM(mR);
  1898   00291E  C01A  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1899   002922  C01B  F013         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1900   002926  EC85  F00F         	call	_setMotorPWM	;wreg free
  1901   00292A                     
  1902                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1903   00292A  0ED0               	movlw	208
  1904   00292C  6E1C               	movwf	??_fullSpeedAhead^0,c
  1905   00292E  0ECA               	movlw	202
  1906   002930                     u2117:
  1907   002930  2EE8               	decfsz	wreg,f,c
  1908   002932  D7FE               	bra	u2117
  1909   002934  2E1C               	decfsz	??_fullSpeedAhead^0,f,c
  1910   002936  D7FC               	bra	u2117
  1911   002938                     
  1912                           ;dc_motor.c: 141:     }
  1913   002938  0E0A               	movlw	10
  1914   00293A  261D               	addwf	fullSpeedAhead@i^0,f,c
  1915   00293C  0E00               	movlw	0
  1916   00293E  221E               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  1917   002940  BE1E               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  1918   002942  EFAC  F014         	goto	u1481
  1919   002946  501E               	movf	(fullSpeedAhead@i+1)^0,w,c
  1920   002948  E109               	bnz	u1480
  1921   00294A  0E3C               	movlw	60
  1922   00294C  5C1D               	subwf	fullSpeedAhead@i^0,w,c
  1923   00294E  A0D8               	btfss	status,0,c
  1924   002950  EFAC  F014         	goto	u1481
  1925   002954  EFAE  F014         	goto	u1480
  1926   002958                     u1481:
  1927   002958  EF7D  F014         	goto	l3194
  1928   00295C                     u1480:
  1929   00295C  0012               	return		;funcret
  1930   00295E                     __end_of_fullSpeedAhead:
  1931                           	callstack 0
  1932                           
  1933 ;; *************** function _color_click_init *****************
  1934 ;; Defined at:
  1935 ;;		line 5 in file "color.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;Total ram usage:        1 bytes
  1954 ;; Hardware stack levels used: 1
  1955 ;; Hardware stack levels required when called: 7
  1956 ;; This function calls:
  1957 ;;		_I2C_2_Master_Init
  1958 ;;		_color_writetoaddr
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text4
  1965   002FBC                     __ptext4:
  1966                           	callstack 0
  1967   002FBC                     _color_click_init:
  1968                           	callstack 23
  1969   002FBC                     
  1970                           ;color.c: 8:     I2C_2_Master_Init();
  1971   002FBC  EC25  F018         	call	_I2C_2_Master_Init	;wreg free
  1972   002FC0                     
  1973                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1974   002FC0  0E01               	movlw	1
  1975   002FC2  6E07               	movwf	color_writetoaddr@value^0,c
  1976   002FC4  0E00               	movlw	0
  1977   002FC6  EC96  F018         	call	_color_writetoaddr
  1978   002FCA                     
  1979                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1980   002FCA  0E3F               	movlw	63
  1981   002FCC  6E09               	movwf	??_color_click_init^0,c
  1982   002FCE  0E55               	movlw	85
  1983   002FD0                     u2127:
  1984   002FD0  2EE8               	decfsz	wreg,f,c
  1985   002FD2  D7FE               	bra	u2127
  1986   002FD4  2E09               	decfsz	??_color_click_init^0,f,c
  1987   002FD6  D7FC               	bra	u2127
  1988   002FD8  F000               	nop	
  1989   002FDA                     
  1990                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1991   002FDA  0E03               	movlw	3
  1992   002FDC  6E07               	movwf	color_writetoaddr@value^0,c
  1993   002FDE  0E00               	movlw	0
  1994   002FE0  EC96  F018         	call	_color_writetoaddr
  1995   002FE4                     
  1996                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1997   002FE4  0ED5               	movlw	213
  1998   002FE6  6E07               	movwf	color_writetoaddr@value^0,c
  1999   002FE8  0E01               	movlw	1
  2000   002FEA  EC96  F018         	call	_color_writetoaddr
  2001   002FEE  0012               	return		;funcret
  2002   002FF0                     __end_of_color_click_init:
  2003                           	callstack 0
  2004                           
  2005 ;; *************** function _I2C_2_Master_Init *****************
  2006 ;; Defined at:
  2007 ;;		line 4 in file "i2c.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used: 1
  2027 ;; Hardware stack levels required when called: 4
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_color_click_init
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text5
  2037   00304A                     __ptext5:
  2038                           	callstack 0
  2039   00304A                     _I2C_2_Master_Init:
  2040                           	callstack 25
  2041   00304A                     
  2042                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2043   00304A  010E               	movlb	14	; () banked
  2044   00304C  51D9               	movf	217,w,b	;volatile
  2045   00304E  0BF0               	andlw	-16
  2046   003050  0908               	iorlw	8
  2047   003052  6FD9               	movwf	217,b	;volatile
  2048   003054                     
  2049                           ; BSR set to: 14
  2050                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2051   003054  8BD9               	bsf	217,5,b	;volatile
  2052                           
  2053                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2054   003056  0E9F               	movlw	159
  2055   003058  6FD6               	movwf	214,b	;volatile
  2056   00305A                     
  2057                           ; BSR set to: 14
  2058                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2059   00305A  8A84               	bsf	132,5,c	;volatile
  2060   00305C                     
  2061                           ; BSR set to: 14
  2062                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2063   00305C  8C84               	bsf	132,6,c	;volatile
  2064   00305E                     
  2065                           ; BSR set to: 14
  2066                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2067   00305E  9BA7               	bcf	167,5,b	;volatile
  2068   003060                     
  2069                           ; BSR set to: 14
  2070                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2071   003060  9DA7               	bcf	167,6,b	;volatile
  2072                           
  2073                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2074   003062  0E1D               	movlw	29
  2075   003064  6F1D               	movwf	29,b	;volatile
  2076                           
  2077                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2078   003066  0E1E               	movlw	30
  2079   003068  6F1C               	movwf	28,b	;volatile
  2080                           
  2081                           ;i2c.c: 18:   RD5PPS=0x1C;
  2082   00306A  0E1C               	movlw	28
  2083   00306C  6F6F               	movwf	111,b	;volatile
  2084                           
  2085                           ;i2c.c: 19:   RD6PPS=0x1B;
  2086   00306E  0E1B               	movlw	27
  2087   003070  6F70               	movwf	112,b	;volatile
  2088   003072                     
  2089                           ; BSR set to: 14
  2090   003072  0012               	return		;funcret
  2091   003074                     __end_of_I2C_2_Master_Init:
  2092                           	callstack 0
  2093                           
  2094 ;; *************** function _clear_read_calibration *****************
  2095 ;; Defined at:
  2096 ;;		line 11 in file "colour_identify.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2099 ;;		 -> main@buf(150), 
  2100 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2101 ;;		 -> main@clear_read(2), 
  2102 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2103 ;;		 -> main@clear_read_check(2), 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  i               2   45[BANK0 ] int 
  2106 ;;  i               2   43[BANK0 ] int 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2116 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;Total ram usage:       14 bytes
  2121 ;; Hardware stack levels used: 1
  2122 ;; Hardware stack levels required when called: 12
  2123 ;; This function calls:
  2124 ;;		_color_read_Clear
  2125 ;;		_sendStringSerial4
  2126 ;;		_sprintf
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text6
  2133   002486                     __ptext6:
  2134                           	callstack 0
  2135   002486                     _clear_read_calibration:
  2136                           	callstack 18
  2137   002486                     
  2138                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2139   002486  0E00               	movlw	0
  2140   002488  0100               	movlb	0	; () banked
  2141   00248A  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2142   00248C  0E00               	movlw	0
  2143   00248E  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2144   002490                     l3794:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2148   002490  EC0C  F017         	call	_color_read_Clear	;wreg free
  2149   002494  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2150   002498  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2151   00249C  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2152   0024A0  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2153   0024A4                     
  2154                           ;colour_identify.c: 15:     }
  2155   0024A4  0100               	movlb	0	; () banked
  2156   0024A6  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2157   0024A8  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2158   0024AA                     
  2159                           ; BSR set to: 0
  2160   0024AA  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2161   0024AC  EF61  F012         	goto	u1991
  2162   0024B0  0EF5               	movlw	245
  2163   0024B2  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2164   0024B4  0E01               	movlw	1
  2165   0024B6  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2166   0024B8  A0D8               	btfss	status,0,c
  2167   0024BA  EF61  F012         	goto	u1991
  2168   0024BE  EF63  F012         	goto	u1990
  2169   0024C2                     u1991:
  2170   0024C2  EF48  F012         	goto	l3794
  2171   0024C6                     u1990:
  2172   0024C6                     
  2173                           ; BSR set to: 0
  2174                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2175   0024C6  0E00               	movlw	0
  2176   0024C8  6F8E               	movwf	(clear_read_calibration@i_1591+1)& (0+255),b
  2177   0024CA  0E00               	movlw	0
  2178   0024CC  6F8D               	movwf	clear_read_calibration@i_1591& (0+255),b
  2179   0024CE                     l3806:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2183   0024CE  EC0C  F017         	call	_color_read_Clear	;wreg free
  2184   0024D2  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2185   0024D6  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2186   0024DA  5009               	movf	?_color_read_Clear^0,w,c
  2187   0024DC  26DE               	addwf	postinc2,f,c
  2188   0024DE  500A               	movf	(?_color_read_Clear+1)^0,w,c
  2189   0024E0  22DD               	addwfc	postdec2,f,c
  2190   0024E2                     
  2191                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2192   0024E2  0E11               	movlw	17
  2193   0024E4  0100               	movlb	0	; () banked
  2194   0024E6  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2195   0024E8  0E3C               	movlw	60
  2196   0024EA  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2197   0024EC  0ECB               	movlw	203
  2198   0024EE                     u2137:
  2199   0024EE  2EE8               	decfsz	wreg,f,c
  2200   0024F0  D7FE               	bra	u2137
  2201   0024F2  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2202   0024F4  D7FC               	bra	u2137
  2203   0024F6  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2204   0024F8  D7FA               	bra	u2137
  2205   0024FA                     
  2206                           ;colour_identify.c: 20:     }
  2207   0024FA  0100               	movlb	0	; () banked
  2208   0024FC  4B8D               	infsnz	clear_read_calibration@i_1591& (0+255),f,b
  2209   0024FE  2B8E               	incf	(clear_read_calibration@i_1591+1)& (0+255),f,b
  2210   002500                     
  2211                           ; BSR set to: 0
  2212   002500  BF8E               	btfsc	(clear_read_calibration@i_1591+1)& (0+255),7,b
  2213   002502  EF8C  F012         	goto	u2001
  2214   002506  518E               	movf	(clear_read_calibration@i_1591+1)& (0+255),w,b
  2215   002508  E109               	bnz	u2000
  2216   00250A  0E03               	movlw	3
  2217   00250C  5D8D               	subwf	clear_read_calibration@i_1591& (0+255),w,b
  2218   00250E  A0D8               	btfss	status,0,c
  2219   002510  EF8C  F012         	goto	u2001
  2220   002514  EF8E  F012         	goto	u2000
  2221   002518                     u2001:
  2222   002518  EF67  F012         	goto	l3806
  2223   00251C                     u2000:
  2224   00251C                     
  2225                           ; BSR set to: 0
  2226                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2227   00251C  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2228   002520  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2229   002524  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2230   002528  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2231   00252C  90D8               	bcf	status,0,c
  2232   00252E  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2233   002530  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2234   002532  90D8               	bcf	status,0,c
  2235   002534  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2236   002536  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2237   002538  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2238   00253C  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2239   002540  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2240   002544  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2241   002548                     
  2242                           ; BSR set to: 0
  2243                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2244   002548  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2245   00254C  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2246   002550  0E57               	movlw	low STR_2
  2247   002552  6F68               	movwf	sprintf@fmt& (0+255),b
  2248   002554  0E0E               	movlw	high STR_2
  2249   002556  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2250   002558  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2251   00255C  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2252   002560  EC93  F016         	call	_sprintf	;wreg free
  2253   002564                     
  2254                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2255   002564  C081  F006         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2256   002568  C082  F007         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2257   00256C  ECF8  F017         	call	_sendStringSerial4	;wreg free
  2258   002570                     
  2259                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2260   002570  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2261   002574  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2262   002578  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2263   00257C  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2264   002580  0E20               	movlw	32
  2265   002582  0100               	movlb	0	; () banked
  2266   002584  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2267   002586  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2268   002588  0E03               	movlw	3
  2269   00258A  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2270   00258C  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2271   00258E  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2272   002592  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2273   002596  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2274   00259A  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2275   00259E                     
  2276                           ; BSR set to: 0
  2277   00259E  0012               	return		;funcret
  2278   0025A0                     __end_of_clear_read_calibration:
  2279                           	callstack 0
  2280                           
  2281 ;; *************** function _card_response *****************
  2282 ;; Defined at:
  2283 ;;		line 220 in file "colour_identify.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2286 ;;		 -> main@buf(150), 
  2287 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2288 ;;		 -> main@clear_read(2), 
  2289 ;;  red_read        2   37[BANK0 ] PTR unsigned int 
  2290 ;;		 -> main@red_read(2), 
  2291 ;;  green_read      2   39[BANK0 ] PTR unsigned int 
  2292 ;;		 -> main@green_read(2), 
  2293 ;;  blue_read       2   41[BANK0 ] PTR unsigned int 
  2294 ;;		 -> main@blue_read(2), 
  2295 ;;  expected_val    2   43[BANK0 ] PTR unsigned int [9]
  2296 ;;		 -> main@expected_values(72), 
  2297 ;;  mL              2   45[BANK0 ] PTR struct DC_motor
  2298 ;;		 -> main@motorL(9), 
  2299 ;;  mR              2   47[BANK0 ] PTR struct DC_motor
  2300 ;;		 -> main@motorR(9), 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  normalised_v   72   49[BANK0 ] unsigned int [9][4]
  2303 ;;  master_close   18  121[BANK0 ] unsigned int [9]
  2304 ;;  card            1  139[BANK0 ] enum E14551
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2314 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2315 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2318 ;;Total ram usage:      107 bytes
  2319 ;; Hardware stack levels used: 1
  2320 ;; Hardware stack levels required when called: 12
  2321 ;; This function calls:
  2322 ;;		_collect_avg_readings
  2323 ;;		_determine_card
  2324 ;;		_make_master_closeness
  2325 ;;		_motor_response
  2326 ;;		_normalise_readings
  2327 ;;		_sendStringSerial4
  2328 ;;		_sprintf
  2329 ;; This function is called by:
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text7
  2335   002338                     __ptext7:
  2336                           	callstack 0
  2337   002338                     _card_response:
  2338                           	callstack 18
  2339   002338                     
  2340                           ;colour_identify.c: 224:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          5:     unsigned int master_closeness[9];;colour_identify.c: 227:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2341   002338  C083  F010         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2342   00233C  C084  F011         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2343   002340  C085  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  2344   002344  C086  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2345   002348  C087  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  2346   00234C  C088  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2347   002350  C089  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2348   002354  C08A  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2349   002358  EC84  F00D         	call	_collect_avg_readings	;wreg free
  2350   00235C                     
  2351                           ;colour_identify.c: 228:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2352   00235C  C081  F066         	movff	card_response@buf,sprintf@s
  2353   002360  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2354   002364  0E33               	movlw	low STR_3
  2355   002366  0100               	movlb	0	; () banked
  2356   002368  6F68               	movwf	sprintf@fmt& (0+255),b
  2357   00236A  0E0E               	movlw	high STR_3
  2358   00236C  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2359   00236E  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2360   002372  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2361   002376  CFDE F06A          	movff	postinc2,?_sprintf+4
  2362   00237A  CFDD F06B          	movff	postdec2,?_sprintf+5
  2363   00237E  C085  FFD9         	movff	card_response@red_read,fsr2l
  2364   002382  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2365   002386  CFDE F06C          	movff	postinc2,?_sprintf+6
  2366   00238A  CFDD F06D          	movff	postdec2,?_sprintf+7
  2367   00238E  C087  FFD9         	movff	card_response@green_read,fsr2l
  2368   002392  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2369   002396  CFDE F06E          	movff	postinc2,?_sprintf+8
  2370   00239A  CFDD F06F          	movff	postdec2,?_sprintf+9
  2371   00239E  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2372   0023A2  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2373   0023A6  CFDE F070          	movff	postinc2,?_sprintf+10
  2374   0023AA  CFDD F071          	movff	postdec2,?_sprintf+11
  2375   0023AE  EC93  F016         	call	_sprintf	;wreg free
  2376   0023B2                     
  2377                           ;colour_identify.c: 229:     sendStringSerial4(buf);
  2378   0023B2  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2379   0023B6  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2380   0023BA  ECF8  F017         	call	_sendStringSerial4	;wreg free
  2381   0023BE                     
  2382                           ;colour_identify.c: 231:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2383   0023BE  C081  F01B         	movff	card_response@buf,normalise_readings@buf
  2384   0023C2  C082  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2385   0023C6  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2386   0023CA  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2387   0023CE  CFDE F01D          	movff	postinc2,normalise_readings@clear_read
  2388   0023D2  CFDD F01E          	movff	postdec2,normalise_readings@clear_read+1
  2389   0023D6  C085  FFD9         	movff	card_response@red_read,fsr2l
  2390   0023DA  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2391   0023DE  CFDE F01F          	movff	postinc2,normalise_readings@red_read
  2392   0023E2  CFDD F020          	movff	postdec2,normalise_readings@red_read+1
  2393   0023E6  C087  FFD9         	movff	card_response@green_read,fsr2l
  2394   0023EA  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2395   0023EE  CFDE F021          	movff	postinc2,normalise_readings@green_read
  2396   0023F2  CFDD F022          	movff	postdec2,normalise_readings@green_read+1
  2397   0023F6  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2398   0023FA  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2399   0023FE  CFDE F023          	movff	postinc2,normalise_readings@blue_read
  2400   002402  CFDD F024          	movff	postdec2,normalise_readings@blue_read+1
  2401   002406  C08B  F025         	movff	card_response@expected_values,normalise_readings@expected_values
  2402   00240A  C08C  F026         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2403   00240E  0E91               	movlw	low card_response@normalised_values
  2404   002410  6E27               	movwf	normalise_readings@normalised_values^0,c
  2405   002412  0E00               	movlw	high card_response@normalised_values
  2406   002414  6E28               	movwf	(normalise_readings@normalised_values+1)^0,c
  2407   002416  ECD3  F00A         	call	_normalise_readings	;wreg free
  2408   00241A                     
  2409                           ;colour_identify.c: 233:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2410   00241A  C081  F005         	movff	card_response@buf,make_master_closeness@buf
  2411   00241E  C082  F006         	movff	card_response@buf+1,make_master_closeness@buf+1
  2412   002422  0E91               	movlw	low card_response@normalised_values
  2413   002424  6E07               	movwf	make_master_closeness@normalised_values^0,c
  2414   002426  0E00               	movlw	high card_response@normalised_values
  2415   002428  6E08               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2416   00242A  0ED9               	movlw	low card_response@master_closeness
  2417   00242C  6E09               	movwf	make_master_closeness@master_closeness^0,c
  2418   00242E  0E00               	movlw	high card_response@master_closeness
  2419   002430  6E0A               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2420   002432  ECD0  F012         	call	_make_master_closeness	;wreg free
  2421   002436                     
  2422                           ;colour_identify.c: 235:     card = determine_card(master_closeness);
  2423   002436  0ED9               	movlw	low card_response@master_closeness
  2424   002438  6E05               	movwf	determine_card@master_closeness^0,c
  2425   00243A  0E00               	movlw	high card_response@master_closeness
  2426   00243C  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2427   00243E  EC7C  F015         	call	_determine_card	;wreg free
  2428   002442  0100               	movlb	0	; () banked
  2429   002444  6FEB               	movwf	card_response@card& (0+255),b
  2430   002446                     
  2431                           ; BSR set to: 0
  2432                           ;colour_identify.c: 236:     sprintf(buf, "CARD %d \n", card);
  2433   002446  C081  F066         	movff	card_response@buf,sprintf@s
  2434   00244A  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2435   00244E  0E6E               	movlw	low STR_4
  2436   002450  6F68               	movwf	sprintf@fmt& (0+255),b
  2437   002452  0E0E               	movlw	high STR_4
  2438   002454  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2439   002456  C0EB  F06A         	movff	card_response@card,?_sprintf+4
  2440   00245A  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2441   00245C  EC93  F016         	call	_sprintf	;wreg free
  2442   002460                     
  2443                           ;colour_identify.c: 237:     sendStringSerial4(buf);
  2444   002460  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2445   002464  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2446   002468  ECF8  F017         	call	_sendStringSerial4	;wreg free
  2447   00246C                     
  2448                           ;colour_identify.c: 239:     motor_response(card, mL, mR);
  2449   00246C  C08D  F020         	movff	card_response@mL,motor_response@mL
  2450   002470  C08E  F021         	movff	card_response@mL+1,motor_response@mL+1
  2451   002474  C08F  F022         	movff	card_response@mR,motor_response@mR
  2452   002478  C090  F023         	movff	card_response@mR+1,motor_response@mR+1
  2453   00247C  0100               	movlb	0	; () banked
  2454   00247E  51EB               	movf	card_response@card& (0+255),w,b
  2455   002480  EC3D  F007         	call	_motor_response
  2456   002484  0012               	return		;funcret
  2457   002486                     __end_of_card_response:
  2458                           	callstack 0
  2459                           
  2460 ;; *************** function _sprintf *****************
  2461 ;; Defined at:
  2462 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2465 ;;		 -> main@buf(150), 
  2466 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2467 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2468 ;;		 -> STR_2(23), STR_1(50), 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  f              11   22[BANK0 ] struct _IO_FILE
  2471 ;;  ap              2   20[BANK0 ] PTR void [1]
  2472 ;;		 -> ?_sprintf(2), 
  2473 ;;  ret             2    0        int 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  2    6[BANK0 ] int 
  2476 ;; Registers used:
  2477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2483 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2487 ;;Total ram usage:       27 bytes
  2488 ;; Hardware stack levels used: 1
  2489 ;; Hardware stack levels required when called: 11
  2490 ;; This function calls:
  2491 ;;		_vfprintf
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;;		_clear_read_calibration
  2495 ;;		_card_response
  2496 ;;		_card_response_easy
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text8
  2501   002D26                     __ptext8:
  2502                           	callstack 0
  2503   002D26                     _sprintf:
  2504                           	callstack 19
  2505   002D26  0E6A               	movlw	low (?_sprintf+4)
  2506   002D28  0100               	movlb	0	; () banked
  2507   002D2A  6F74               	movwf	sprintf@ap& (0+255),b
  2508   002D2C  0E00               	movlw	high (?_sprintf+4)
  2509   002D2E  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  2510   002D30  C066  F076         	movff	sprintf@s,sprintf@f
  2511   002D34  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  2512   002D38                     
  2513                           ; BSR set to: 0
  2514   002D38  0E00               	movlw	0
  2515   002D3A  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  2516   002D3C  0E00               	movlw	0
  2517   002D3E  6F79               	movwf	(sprintf@f+3)& (0+255),b
  2518   002D40                     
  2519                           ; BSR set to: 0
  2520   002D40  0E00               	movlw	0
  2521   002D42  6F80               	movwf	(sprintf@f+10)& (0+255),b
  2522   002D44  0E00               	movlw	0
  2523   002D46  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  2524   002D48                     
  2525                           ; BSR set to: 0
  2526   002D48  0E76               	movlw	low sprintf@f
  2527   002D4A  6F60               	movwf	vfprintf@fp& (0+255),b
  2528   002D4C  0E00               	movlw	high sprintf@f
  2529   002D4E  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2530   002D50  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2531   002D54  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2532   002D58  0E74               	movlw	low sprintf@ap
  2533   002D5A  6F64               	movwf	vfprintf@ap& (0+255),b
  2534   002D5C  0E00               	movlw	high sprintf@ap
  2535   002D5E  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2536   002D60  EC69  F016         	call	_vfprintf	;wreg free
  2537   002D64  0100               	movlb	0	; () banked
  2538   002D66  5179               	movf	(sprintf@f+3)& (0+255),w,b
  2539   002D68  2566               	addwf	sprintf@s& (0+255),w,b
  2540   002D6A  6ED9               	movwf	fsr2l,c
  2541   002D6C  517A               	movf	(sprintf@f+4)& (0+255),w,b
  2542   002D6E  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2543   002D70  6EDA               	movwf	fsr2h,c
  2544   002D72  0E00               	movlw	0
  2545   002D74  6EDF               	movwf	indf2,c
  2546   002D76                     
  2547                           ; BSR set to: 0
  2548   002D76  0012               	return		;funcret
  2549   002D78                     __end_of_sprintf:
  2550                           	callstack 0
  2551                           
  2552 ;; *************** function _vfprintf *****************
  2553 ;; Defined at:
  2554 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2557 ;;		 -> sprintf@f(11), 
  2558 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2559 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2560 ;;		 -> STR_2(23), STR_1(50), 
  2561 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2562 ;;		 -> sprintf@ap(2), 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2565 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2566 ;;		 -> STR_2(23), STR_1(50), 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  2    0[BANK0 ] int 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2576 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2579 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2580 ;;Total ram usage:        8 bytes
  2581 ;; Hardware stack levels used: 1
  2582 ;; Hardware stack levels required when called: 10
  2583 ;; This function calls:
  2584 ;;		_vfpfcnvrt
  2585 ;; This function is called by:
  2586 ;;		_sprintf
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text9
  2591   002CD2                     __ptext9:
  2592                           	callstack 0
  2593   002CD2                     _vfprintf:
  2594                           	callstack 19
  2595   002CD2                     
  2596                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2597   002CD2  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2598   002CD6  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2599                           
  2600                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2601   002CDA  EF7D  F016         	goto	l3758
  2602   002CDE                     l3756:
  2603                           
  2604                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2605   002CDE  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2606   002CE2  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2607   002CE6  0E55               	movlw	low vfprintf@cfmt
  2608   002CE8  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2609   002CEA  0E00               	movlw	high vfprintf@cfmt
  2610   002CEC  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2611   002CEE  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2612   002CF2  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2613   002CF6  ECED  F010         	call	_vfpfcnvrt	;wreg free
  2614   002CFA                     l3758:
  2615                           
  2616                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2617   002CFA  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2618   002CFE  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2619   002D02                     	if	0	;tblptru may be non-zero
  2620   002D02                     	endif
  2621   002D02                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2622   002D02  0E00               	movlw	low (__mediumconst shr (0+16))
  2623   002D04  6EF8               	movwf	tblptru,c
  2624   002D06                     	endif
  2625   002D06  0008               	tblrd		*
  2626   002D08  50F5               	movf	tablat,w,c
  2627   002D0A  0900               	iorlw	0
  2628   002D0C  A4D8               	btfss	status,2,c
  2629   002D0E  EF8B  F016         	goto	u1971
  2630   002D12  EF8D  F016         	goto	u1970
  2631   002D16                     u1971:
  2632   002D16  EF6F  F016         	goto	l3756
  2633   002D1A                     u1970:
  2634   002D1A                     
  2635                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2636   002D1A  0E00               	movlw	0
  2637   002D1C  0100               	movlb	0	; () banked
  2638   002D1E  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2639   002D20  0E00               	movlw	0
  2640   002D22  6F60               	movwf	?_vfprintf& (0+255),b
  2641   002D24                     
  2642                           ; BSR set to: 0
  2643   002D24  0012               	return		;funcret
  2644   002D26                     __end_of_vfprintf:
  2645                           	callstack 0
  2646                           
  2647 ;; *************** function _vfpfcnvrt *****************
  2648 ;; Defined at:
  2649 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2652 ;;		 -> sprintf@f(11), 
  2653 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2654 ;;		 -> vfprintf@cfmt(2), 
  2655 ;;  ap              2   70[COMRAM] PTR PTR void 
  2656 ;;		 -> sprintf@ap(2), 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  convarg         8   74[COMRAM] struct .
  2659 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2660 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2661 ;;		 -> STR_2(23), STR_1(50), 
  2662 ;;  i               2    0        int 
  2663 ;;  done            2    0        int 
  2664 ;;  c               1    0        unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2674 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2675 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;Total ram usage:       18 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 9
  2681 ;; This function calls:
  2682 ;;		_dtoa
  2683 ;;		_fputc
  2684 ;; This function is called by:
  2685 ;;		_vfprintf
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text10
  2690   0021DA                     __ptext10:
  2691                           	callstack 0
  2692   0021DA                     _vfpfcnvrt:
  2693                           	callstack 19
  2694   0021DA                     
  2695                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2696   0021DA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2697   0021DE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2698   0021E2  CFDE FFF6          	movff	postinc2,tblptrl
  2699   0021E6  CFDD FFF7          	movff	postdec2,tblptrh
  2700   0021EA                     	if	0	;tblptru may be non-zero
  2701   0021EA                     	endif
  2702   0021EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2703   0021EA  0E00               	movlw	low (__mediumconst shr (0+16))
  2704   0021EC  6EF8               	movwf	tblptru,c
  2705   0021EE                     	endif
  2706   0021EE  0008               	tblrd		*
  2707   0021F0  50F5               	movf	tablat,w,c
  2708   0021F2  0A25               	xorlw	37
  2709   0021F4  A4D8               	btfss	status,2,c
  2710   0021F6  EFFF  F010         	goto	u1941
  2711   0021FA  EF01  F011         	goto	u1940
  2712   0021FE                     u1941:
  2713   0021FE  EF85  F011         	goto	l3748
  2714   002202                     u1940:
  2715   002202                     
  2716                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2717   002202  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2718   002206  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2719   00220A  2ADE               	incf	postinc2,f,c
  2720   00220C  0E00               	movlw	0
  2721   00220E  22DD               	addwfc	postdec2,f,c
  2722   002210                     
  2723                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2724   002210  0E00               	movlw	0
  2725   002212  0100               	movlb	0	; () banked
  2726   002214  6FEF               	movwf	(_width+1)& (0+255),b
  2727   002216  0E00               	movlw	0
  2728   002218  6FEE               	movwf	_width& (0+255),b
  2729   00221A  C0EE  F0F6         	movff	_width,_flags
  2730   00221E                     
  2731                           ; BSR set to: 0
  2732                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2733   00221E  69F0               	setf	_prec& (0+255),b
  2734   002220  69F1               	setf	(_prec+1)& (0+255),b
  2735   002222                     
  2736                           ; BSR set to: 0
  2737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2738   002222  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2739   002226  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2740   00222A  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2741   00222E  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2742   002232                     
  2743                           ; BSR set to: 0
  2744                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2745   002232  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2746   002236  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2747   00223A                     	if	0	;tblptru may be non-zero
  2748   00223A                     	endif
  2749   00223A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2750   00223A  0E00               	movlw	low (__mediumconst shr (0+16))
  2751   00223C  6EF8               	movwf	tblptru,c
  2752   00223E                     	endif
  2753   00223E  0008               	tblrd		*
  2754   002240  50F5               	movf	tablat,w,c
  2755   002242  0A64               	xorlw	100
  2756   002244  B4D8               	btfsc	status,2,c
  2757   002246  EF27  F011         	goto	u1951
  2758   00224A  EF29  F011         	goto	u1950
  2759   00224E                     u1951:
  2760   00224E  EF39  F011         	goto	l3738
  2761   002252                     u1950:
  2762   002252                     
  2763                           ; BSR set to: 0
  2764   002252  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2765   002256  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2766   00225A                     	if	0	;tblptru may be non-zero
  2767   00225A                     	endif
  2768   00225A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2769   00225A  0E00               	movlw	low (__mediumconst shr (0+16))
  2770   00225C  6EF8               	movwf	tblptru,c
  2771   00225E                     	endif
  2772   00225E  0008               	tblrd		*
  2773   002260  50F5               	movf	tablat,w,c
  2774   002262  0A69               	xorlw	105
  2775   002264  A4D8               	btfss	status,2,c
  2776   002266  EF37  F011         	goto	u1961
  2777   00226A  EF39  F011         	goto	u1960
  2778   00226E                     u1961:
  2779   00226E  EF7C  F011         	goto	l3744
  2780   002272                     u1960:
  2781   002272                     l3738:
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2785   002272  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2786   002276  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2787   00227A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2788   00227E  0E02               	movlw	2
  2789   002280  26DE               	addwf	postinc2,f,c
  2790   002282  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2791   002286  0E00               	movlw	0
  2792   002288  22DD               	addwfc	postdec2,f,c
  2793   00228A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2794   00228E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2795   002292  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2796   002296  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2797   00229A  0E00               	movlw	0
  2798   00229C  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2799   00229E  0EFF               	movlw	-1
  2800   0022A0  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2801   0022A2  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2802   0022A4  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2803   0022A6  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2804   0022A8  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2805   0022AA  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2806                           
  2807                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2808   0022AC  0E01               	movlw	1
  2809   0022AE  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2810   0022B0  6E49               	movwf	??_vfpfcnvrt^0,c
  2811   0022B2  0E00               	movlw	0
  2812   0022B4  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2813   0022B6  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2814   0022B8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2815   0022BC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2816   0022C0  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2817   0022C4  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2818   0022C8                     
  2819                           ; BSR set to: 0
  2820                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2821   0022C8  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2822   0022CC  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2823   0022D0  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2824   0022D4  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2825   0022D8  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2826   0022DC  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2827   0022E0  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2828   0022E4  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2829   0022E8  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2830   0022EC  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2831   0022F0  EC45  F00C         	call	_dtoa	;wreg free
  2832   0022F4  EF9B  F011         	goto	l1269
  2833   0022F8                     l3744:
  2834                           
  2835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2836   0022F8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2837   0022FC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2838   002300  2ADE               	incf	postinc2,f,c
  2839   002302  0E00               	movlw	0
  2840   002304  22DD               	addwfc	postdec2,f,c
  2841   002306  EF9B  F011         	goto	l1269
  2842   00230A                     l3748:
  2843                           
  2844                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2845   00230A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2846   00230E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2847   002312  CFDE FFF6          	movff	postinc2,tblptrl
  2848   002316  CFDD FFF7          	movff	postdec2,tblptrh
  2849   00231A                     	if	0	;tblptru may be non-zero
  2850   00231A                     	endif
  2851   00231A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2852   00231A  0E00               	movlw	low (__mediumconst shr (0+16))
  2853   00231C  6EF8               	movwf	tblptru,c
  2854   00231E                     	endif
  2855   00231E  0008               	tblrd		*
  2856   002320  50F5               	movf	tablat,w,c
  2857   002322  6E05               	movwf	fputc@c^0,c
  2858   002324  6A06               	clrf	(fputc@c+1)^0,c
  2859   002326  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2860   00232A  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2861   00232E  EC56  F013         	call	_fputc	;wreg free
  2862   002332  EF7C  F011         	goto	l3744
  2863   002336                     l1269:
  2864   002336  0012               	return		;funcret
  2865   002338                     __end_of_vfpfcnvrt:
  2866                           	callstack 0
  2867                           
  2868 ;; *************** function _dtoa *****************
  2869 ;; Defined at:
  2870 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2873 ;;		 -> sprintf@f(11), 
  2874 ;;  d               8   33[COMRAM] long long 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  n               8   55[COMRAM] long long 
  2877 ;;  i               2   64[COMRAM] int 
  2878 ;;  w               2   53[COMRAM] int 
  2879 ;;  p               2   51[COMRAM] int 
  2880 ;;  s               1   63[COMRAM] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2890 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2891 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2892 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2893 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2894 ;;Total ram usage:       35 bytes
  2895 ;; Hardware stack levels used: 1
  2896 ;; Hardware stack levels required when called: 8
  2897 ;; This function calls:
  2898 ;;		___aodiv
  2899 ;;		___aomod
  2900 ;;		_abs
  2901 ;;		_pad
  2902 ;; This function is called by:
  2903 ;;		_vfpfcnvrt
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text11
  2908   00188A                     __ptext11:
  2909                           	callstack 0
  2910   00188A                     _dtoa:
  2911                           	callstack 19
  2912   00188A                     
  2913                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2914   00188A  C022  F038         	movff	dtoa@d,dtoa@n
  2915   00188E  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2916   001892  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2917   001896  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2918   00189A  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2919   00189E  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2920   0018A2  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2921   0018A6  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2922   0018AA                     
  2923                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2924   0018AA  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2925   0018AC  EF5A  F00C         	goto	u1841
  2926   0018B0  EF5D  F00C         	goto	u1840
  2927   0018B4                     u1841:
  2928   0018B4  0E01               	movlw	1
  2929   0018B6  EF5E  F00C         	goto	u1850
  2930   0018BA                     u1840:
  2931   0018BA  0E00               	movlw	0
  2932   0018BC                     u1850:
  2933   0018BC  6E40               	movwf	dtoa@s^0,c
  2934   0018BE                     
  2935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2936   0018BE  5040               	movf	dtoa@s^0,w,c
  2937   0018C0  B4D8               	btfsc	status,2,c
  2938   0018C2  EF65  F00C         	goto	u1861
  2939   0018C6  EF67  F00C         	goto	u1860
  2940   0018CA                     u1861:
  2941   0018CA  EF77  F00C         	goto	l3680
  2942   0018CE                     u1860:
  2943   0018CE                     
  2944                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2945   0018CE  1E3F               	comf	(dtoa@n+7)^0,f,c
  2946   0018D0  1E3E               	comf	(dtoa@n+6)^0,f,c
  2947   0018D2  1E3D               	comf	(dtoa@n+5)^0,f,c
  2948   0018D4  1E3C               	comf	(dtoa@n+4)^0,f,c
  2949   0018D6  1E3B               	comf	(dtoa@n+3)^0,f,c
  2950   0018D8  1E3A               	comf	(dtoa@n+2)^0,f,c
  2951   0018DA  1E39               	comf	(dtoa@n+1)^0,f,c
  2952   0018DC  6C38               	negf	dtoa@n^0,c
  2953   0018DE  0E00               	movlw	0
  2954   0018E0  2239               	addwfc	(dtoa@n+1)^0,f,c
  2955   0018E2  223A               	addwfc	(dtoa@n+2)^0,f,c
  2956   0018E4  223B               	addwfc	(dtoa@n+3)^0,f,c
  2957   0018E6  223C               	addwfc	(dtoa@n+4)^0,f,c
  2958   0018E8  223D               	addwfc	(dtoa@n+5)^0,f,c
  2959   0018EA  223E               	addwfc	(dtoa@n+6)^0,f,c
  2960   0018EC  223F               	addwfc	(dtoa@n+7)^0,f,c
  2961   0018EE                     l3680:
  2962                           
  2963                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2964   0018EE  0100               	movlb	0	; () banked
  2965   0018F0  BFF1               	btfsc	(_prec+1)& (0+255),7,b
  2966   0018F2  EF85  F00C         	goto	u1870
  2967   0018F6  51F1               	movf	(_prec+1)& (0+255),w,b
  2968   0018F8  E106               	bnz	u1871
  2969   0018FA  05F0               	decf	_prec& (0+255),w,b
  2970   0018FC  B0D8               	btfsc	status,0,c
  2971   0018FE  EF83  F00C         	goto	u1871
  2972   001902  EF85  F00C         	goto	u1870
  2973   001906                     u1871:
  2974   001906  EF8B  F00C         	goto	l1248
  2975   00190A                     u1870:
  2976   00190A                     
  2977                           ; BSR set to: 0
  2978   00190A  0E00               	movlw	0
  2979   00190C  6E35               	movwf	(dtoa@p+1)^0,c
  2980   00190E  0E01               	movlw	1
  2981   001910  6E34               	movwf	dtoa@p^0,c
  2982   001912  EF8F  F00C         	goto	l1250
  2983   001916                     l1248:
  2984                           
  2985                           ; BSR set to: 0
  2986   001916  C0F0  F034         	movff	_prec,dtoa@p
  2987   00191A  C0F1  F035         	movff	_prec+1,dtoa@p+1
  2988   00191E                     l1250:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2992   00191E  C0EE  F036         	movff	_width,dtoa@w
  2993   001922  C0EF  F037         	movff	_width+1,dtoa@w+1
  2994   001926                     
  2995                           ; BSR set to: 0
  2996                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2997   001926  5040               	movf	dtoa@s^0,w,c
  2998   001928  B4D8               	btfsc	status,2,c
  2999   00192A  EF99  F00C         	goto	u1881
  3000   00192E  EF9B  F00C         	goto	u1880
  3001   001932                     u1881:
  3002   001932  EFB2  F00C         	goto	l1251
  3003   001936                     u1880:
  3004   001936                     
  3005                           ; BSR set to: 0
  3006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3007   001936  0636               	decf	dtoa@w^0,f,c
  3008   001938  A0D8               	btfss	status,0,c
  3009   00193A  0637               	decf	(dtoa@w+1)^0,f,c
  3010   00193C                     
  3011                           ; BSR set to: 0
  3012                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3013   00193C  5040               	movf	dtoa@s^0,w,c
  3014   00193E  A4D8               	btfss	status,2,c
  3015   001940  EFA4  F00C         	goto	u1891
  3016   001944  EFA6  F00C         	goto	u1890
  3017   001948                     u1891:
  3018   001948  EFAC  F00C         	goto	l3692
  3019   00194C                     u1890:
  3020   00194C                     
  3021                           ; BSR set to: 0
  3022   00194C  0E00               	movlw	0
  3023   00194E  6E33               	movwf	(_dtoa$2611+1)^0,c
  3024   001950  0E2B               	movlw	43
  3025   001952  6E32               	movwf	_dtoa$2611^0,c
  3026   001954  EFB0  F00C         	goto	l3694
  3027   001958                     l3692:
  3028                           
  3029                           ; BSR set to: 0
  3030   001958  0E00               	movlw	0
  3031   00195A  6E33               	movwf	(_dtoa$2611+1)^0,c
  3032   00195C  0E2D               	movlw	45
  3033   00195E  6E32               	movwf	_dtoa$2611^0,c
  3034   001960                     l3694:
  3035                           
  3036                           ; BSR set to: 0
  3037   001960  C032  F040         	movff	_dtoa$2611,dtoa@s
  3038   001964                     l1251:
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3042   001964  0E00               	movlw	0
  3043   001966  6E42               	movwf	(dtoa@i+1)^0,c
  3044   001968  0E1F               	movlw	31
  3045   00196A  6E41               	movwf	dtoa@i^0,c
  3046   00196C                     
  3047                           ; BSR set to: 0
  3048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3049   00196C  0E00               	movlw	0
  3050   00196E  0102               	movlb	2	; () banked
  3051   001970  6F6F               	movwf	(_dbuf+31)& (0+255),b
  3052                           
  3053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3054   001972  EF37  F00D         	goto	l3708
  3055   001976                     l3698:
  3056                           
  3057                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3058   001976  0641               	decf	dtoa@i^0,f,c
  3059   001978  A0D8               	btfss	status,0,c
  3060   00197A  0642               	decf	(dtoa@i+1)^0,f,c
  3061   00197C                     
  3062                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3063   00197C  0E50               	movlw	low _dbuf
  3064   00197E  2441               	addwf	dtoa@i^0,w,c
  3065   001980  6ED9               	movwf	fsr2l,c
  3066   001982  0E02               	movlw	high _dbuf
  3067   001984  2042               	addwfc	(dtoa@i+1)^0,w,c
  3068   001986  6EDA               	movwf	fsr2h,c
  3069   001988  C038  F005         	movff	dtoa@n,___aomod@dividend
  3070   00198C  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  3071   001990  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  3072   001994  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  3073   001998  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  3074   00199C  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  3075   0019A0  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  3076   0019A4  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  3077   0019A8  0E0A               	movlw	10
  3078   0019AA  6E0D               	movwf	___aomod@divisor^0,c
  3079   0019AC  0E00               	movlw	0
  3080   0019AE  6E0E               	movwf	(___aomod@divisor+1)^0,c
  3081   0019B0  0E00               	movlw	0
  3082   0019B2  6E0F               	movwf	(___aomod@divisor+2)^0,c
  3083   0019B4  0E00               	movlw	0
  3084   0019B6  6E10               	movwf	(___aomod@divisor+3)^0,c
  3085   0019B8  0E00               	movlw	0
  3086   0019BA  6E11               	movwf	(___aomod@divisor+4)^0,c
  3087   0019BC  0E00               	movlw	0
  3088   0019BE  6E12               	movwf	(___aomod@divisor+5)^0,c
  3089   0019C0  0E00               	movlw	0
  3090   0019C2  6E13               	movwf	(___aomod@divisor+6)^0,c
  3091   0019C4  0E00               	movlw	0
  3092   0019C6  6E14               	movwf	(___aomod@divisor+7)^0,c
  3093   0019C8  EC3B  F010         	call	___aomod	;wreg free
  3094   0019CC  C005  F02A         	movff	?___aomod,??_dtoa
  3095   0019D0  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  3096   0019D4  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  3097   0019D8  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  3098   0019DC  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  3099   0019E0  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  3100   0019E4  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  3101   0019E8  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  3102   0019EC  C02A  F017         	movff	??_dtoa,abs@a
  3103   0019F0  C02B  F018         	movff	??_dtoa+1,abs@a+1
  3104   0019F4  EC9F  F017         	call	_abs	;wreg free
  3105   0019F8  5017               	movf	?_abs^0,w,c
  3106   0019FA  0F30               	addlw	48
  3107   0019FC  6EDF               	movwf	indf2,c
  3108   0019FE                     
  3109                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3110   0019FE  0634               	decf	dtoa@p^0,f,c
  3111   001A00  A0D8               	btfss	status,0,c
  3112   001A02  0635               	decf	(dtoa@p+1)^0,f,c
  3113   001A04                     
  3114                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3115   001A04  0636               	decf	dtoa@w^0,f,c
  3116   001A06  A0D8               	btfss	status,0,c
  3117   001A08  0637               	decf	(dtoa@w+1)^0,f,c
  3118   001A0A                     
  3119                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3120   001A0A  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3121   001A0E  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3122   001A12  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3123   001A16  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3124   001A1A  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3125   001A1E  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3126   001A22  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3127   001A26  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3128   001A2A  0E0A               	movlw	10
  3129   001A2C  6E0D               	movwf	___aodiv@divisor^0,c
  3130   001A2E  0E00               	movlw	0
  3131   001A30  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3132   001A32  0E00               	movlw	0
  3133   001A34  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3134   001A36  0E00               	movlw	0
  3135   001A38  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3136   001A3A  0E00               	movlw	0
  3137   001A3C  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3138   001A3E  0E00               	movlw	0
  3139   001A40  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3140   001A42  0E00               	movlw	0
  3141   001A44  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3142   001A46  0E00               	movlw	0
  3143   001A48  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3144   001A4A  ECC1  F00E         	call	___aodiv	;wreg free
  3145   001A4E  C005  F038         	movff	?___aodiv,dtoa@n
  3146   001A52  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3147   001A56  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3148   001A5A  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3149   001A5E  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3150   001A62  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3151   001A66  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3152   001A6A  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3153   001A6E                     l3708:
  3154                           
  3155                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3156   001A6E  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3157   001A70  EF42  F00D         	goto	u1901
  3158   001A74  5042               	movf	(dtoa@i+1)^0,w,c
  3159   001A76  E108               	bnz	u1900
  3160   001A78  0441               	decf	dtoa@i^0,w,c
  3161   001A7A  A0D8               	btfss	status,0,c
  3162   001A7C  EF42  F00D         	goto	u1901
  3163   001A80  EF44  F00D         	goto	u1900
  3164   001A84                     u1901:
  3165   001A84  EF60  F00D         	goto	l3714
  3166   001A88                     u1900:
  3167   001A88  5038               	movf	dtoa@n^0,w,c
  3168   001A8A  1039               	iorwf	(dtoa@n+1)^0,w,c
  3169   001A8C  103A               	iorwf	(dtoa@n+2)^0,w,c
  3170   001A8E  103B               	iorwf	(dtoa@n+3)^0,w,c
  3171   001A90  103C               	iorwf	(dtoa@n+4)^0,w,c
  3172   001A92  103D               	iorwf	(dtoa@n+5)^0,w,c
  3173   001A94  103E               	iorwf	(dtoa@n+6)^0,w,c
  3174   001A96  103F               	iorwf	(dtoa@n+7)^0,w,c
  3175   001A98  A4D8               	btfss	status,2,c
  3176   001A9A  EF51  F00D         	goto	u1911
  3177   001A9E  EF53  F00D         	goto	u1910
  3178   001AA2                     u1911:
  3179   001AA2  EFBB  F00C         	goto	l3698
  3180   001AA6                     u1910:
  3181   001AA6  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3182   001AA8  EF60  F00D         	goto	u1920
  3183   001AAC  5035               	movf	(dtoa@p+1)^0,w,c
  3184   001AAE  E106               	bnz	u1921
  3185   001AB0  0434               	decf	dtoa@p^0,w,c
  3186   001AB2  B0D8               	btfsc	status,0,c
  3187   001AB4  EF5E  F00D         	goto	u1921
  3188   001AB8  EF60  F00D         	goto	u1920
  3189   001ABC                     u1921:
  3190   001ABC  EFBB  F00C         	goto	l3698
  3191   001AC0                     u1920:
  3192   001AC0                     l3714:
  3193                           
  3194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3195   001AC0  5040               	movf	dtoa@s^0,w,c
  3196   001AC2  B4D8               	btfsc	status,2,c
  3197   001AC4  EF66  F00D         	goto	u1931
  3198   001AC8  EF68  F00D         	goto	u1930
  3199   001ACC                     u1931:
  3200   001ACC  EF73  F00D         	goto	l3720
  3201   001AD0                     u1930:
  3202   001AD0                     
  3203                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3204   001AD0  0641               	decf	dtoa@i^0,f,c
  3205   001AD2  A0D8               	btfss	status,0,c
  3206   001AD4  0642               	decf	(dtoa@i+1)^0,f,c
  3207   001AD6                     
  3208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3209   001AD6  0E50               	movlw	low _dbuf
  3210   001AD8  2441               	addwf	dtoa@i^0,w,c
  3211   001ADA  6ED9               	movwf	fsr2l,c
  3212   001ADC  0E02               	movlw	high _dbuf
  3213   001ADE  2042               	addwfc	(dtoa@i+1)^0,w,c
  3214   001AE0  6EDA               	movwf	fsr2h,c
  3215   001AE2  C040  FFDF         	movff	dtoa@s,indf2
  3216   001AE6                     l3720:
  3217                           
  3218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3219   001AE6  C020  F015         	movff	dtoa@fp,pad@fp
  3220   001AEA  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3221   001AEE  0E50               	movlw	low _dbuf
  3222   001AF0  2441               	addwf	dtoa@i^0,w,c
  3223   001AF2  6E17               	movwf	pad@buf^0,c
  3224   001AF4  0E02               	movlw	high _dbuf
  3225   001AF6  2042               	addwfc	(dtoa@i+1)^0,w,c
  3226   001AF8  6E18               	movwf	(pad@buf+1)^0,c
  3227   001AFA  C036  F019         	movff	dtoa@w,pad@p
  3228   001AFE  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3229   001B02  ECBE  F015         	call	_pad	;wreg free
  3230   001B06  0012               	return		;funcret
  3231   001B08                     __end_of_dtoa:
  3232                           	callstack 0
  3233                           
  3234 ;; *************** function _pad *****************
  3235 ;; Defined at:
  3236 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3239 ;;		 -> sprintf@f(11), 
  3240 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3241 ;;		 -> dbuf(32), 
  3242 ;;  p               2   24[COMRAM] int 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  w               2   29[COMRAM] int 
  3245 ;;  i               2   27[COMRAM] int 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3255 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3256 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;Total ram usage:       11 bytes
  3260 ;; Hardware stack levels used: 1
  3261 ;; Hardware stack levels required when called: 7
  3262 ;; This function calls:
  3263 ;;		_fputc
  3264 ;;		_fputs
  3265 ;; This function is called by:
  3266 ;;		_dtoa
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text12
  3271   002B7C                     __ptext12:
  3272                           	callstack 0
  3273   002B7C                     _pad:
  3274                           	callstack 19
  3275   002B7C                     
  3276                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3277   002B7C  BE1A               	btfsc	(pad@p+1)^0,7,c
  3278   002B7E  EFC3  F015         	goto	u1821
  3279   002B82  EFC5  F015         	goto	u1820
  3280   002B86                     u1821:
  3281   002B86  EFCB  F015         	goto	l3662
  3282   002B8A                     u1820:
  3283   002B8A  C019  F01E         	movff	pad@p,pad@w
  3284   002B8E  C01A  F01F         	movff	pad@p+1,pad@w+1
  3285   002B92  EFCF  F015         	goto	l1239
  3286   002B96                     l3662:
  3287   002B96  0E00               	movlw	0
  3288   002B98  6E1F               	movwf	(pad@w+1)^0,c
  3289   002B9A  0E00               	movlw	0
  3290   002B9C  6E1E               	movwf	pad@w^0,c
  3291   002B9E                     l1239:
  3292                           
  3293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3294   002B9E  0E00               	movlw	0
  3295   002BA0  6E1D               	movwf	(pad@i+1)^0,c
  3296   002BA2  0E00               	movlw	0
  3297   002BA4  6E1C               	movwf	pad@i^0,c
  3298                           
  3299                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3300   002BA6  EFE1  F015         	goto	l3668
  3301   002BAA                     l3664:
  3302                           
  3303                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3304   002BAA  0E00               	movlw	0
  3305   002BAC  6E06               	movwf	(fputc@c+1)^0,c
  3306   002BAE  0E20               	movlw	32
  3307   002BB0  6E05               	movwf	fputc@c^0,c
  3308   002BB2  C015  F007         	movff	pad@fp,fputc@fp
  3309   002BB6  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3310   002BBA  EC56  F013         	call	_fputc	;wreg free
  3311   002BBE                     
  3312                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3313   002BBE  4A1C               	infsnz	pad@i^0,f,c
  3314   002BC0  2A1D               	incf	(pad@i+1)^0,f,c
  3315   002BC2                     l3668:
  3316                           
  3317                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3318   002BC2  501E               	movf	pad@w^0,w,c
  3319   002BC4  5C1C               	subwf	pad@i^0,w,c
  3320   002BC6  501D               	movf	(pad@i+1)^0,w,c
  3321   002BC8  0A80               	xorlw	128
  3322   002BCA  6E1B               	movwf	??_pad^0,c
  3323   002BCC  501F               	movf	(pad@w+1)^0,w,c
  3324   002BCE  0A80               	xorlw	128
  3325   002BD0  581B               	subwfb	??_pad^0,w,c
  3326   002BD2  A0D8               	btfss	status,0,c
  3327   002BD4  EFEE  F015         	goto	u1831
  3328   002BD8  EFF0  F015         	goto	u1830
  3329   002BDC                     u1831:
  3330   002BDC  EFD5  F015         	goto	l3664
  3331   002BE0                     u1830:
  3332   002BE0                     
  3333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3334   002BE0  C017  F00E         	movff	pad@buf,fputs@s
  3335   002BE4  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3336   002BE8  C015  F010         	movff	pad@fp,fputs@fp
  3337   002BEC  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3338   002BF0  EC5C  F017         	call	_fputs	;wreg free
  3339   002BF4  0012               	return		;funcret
  3340   002BF6                     __end_of_pad:
  3341                           	callstack 0
  3342                           
  3343 ;; *************** function _fputs *****************
  3344 ;; Defined at:
  3345 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3348 ;;		 -> dbuf(32), 
  3349 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3350 ;;		 -> sprintf@f(11), 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  i               2   18[COMRAM] int 
  3353 ;;  c               1   17[COMRAM] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  2   13[COMRAM] int 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3364 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3366 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3367 ;;Total ram usage:        7 bytes
  3368 ;; Hardware stack levels used: 1
  3369 ;; Hardware stack levels required when called: 6
  3370 ;; This function calls:
  3371 ;;		_fputc
  3372 ;; This function is called by:
  3373 ;;		_pad
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text13
  3378   002EB8                     __ptext13:
  3379                           	callstack 0
  3380   002EB8                     _fputs:
  3381                           	callstack 19
  3382   002EB8  0E00               	movlw	0
  3383   002EBA  6E14               	movwf	(fputs@i+1)^0,c
  3384   002EBC  0E00               	movlw	0
  3385   002EBE  6E13               	movwf	fputs@i^0,c
  3386   002EC0  EF6D  F017         	goto	l3572
  3387   002EC4                     l3568:
  3388   002EC4  C012  F005         	movff	fputs@c,fputc@c
  3389   002EC8  6A06               	clrf	(fputc@c+1)^0,c
  3390   002ECA  C010  F007         	movff	fputs@fp,fputc@fp
  3391   002ECE  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3392   002ED2  EC56  F013         	call	_fputc	;wreg free
  3393   002ED6  4A13               	infsnz	fputs@i^0,f,c
  3394   002ED8  2A14               	incf	(fputs@i+1)^0,f,c
  3395   002EDA                     l3572:
  3396   002EDA  5013               	movf	fputs@i^0,w,c
  3397   002EDC  240E               	addwf	fputs@s^0,w,c
  3398   002EDE  6ED9               	movwf	fsr2l,c
  3399   002EE0  5014               	movf	(fputs@i+1)^0,w,c
  3400   002EE2  200F               	addwfc	(fputs@s+1)^0,w,c
  3401   002EE4  6EDA               	movwf	fsr2h,c
  3402   002EE6  50DF               	movf	indf2,w,c
  3403   002EE8  6E12               	movwf	fputs@c^0,c
  3404   002EEA  5012               	movf	fputs@c^0,w,c
  3405   002EEC  A4D8               	btfss	status,2,c
  3406   002EEE  EF7B  F017         	goto	u1671
  3407   002EF2  EF7D  F017         	goto	u1670
  3408   002EF6                     u1671:
  3409   002EF6  EF62  F017         	goto	l3568
  3410   002EFA                     u1670:
  3411   002EFA  0012               	return		;funcret
  3412   002EFC                     __end_of_fputs:
  3413                           	callstack 0
  3414                           
  3415 ;; *************** function _fputc *****************
  3416 ;; Defined at:
  3417 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  c               2    4[COMRAM] int 
  3420 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3421 ;;		 -> sprintf@f(11), 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  2    4[COMRAM] int 
  3426 ;; Registers used:
  3427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3435 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;Total ram usage:        9 bytes
  3438 ;; Hardware stack levels used: 1
  3439 ;; Hardware stack levels required when called: 5
  3440 ;; This function calls:
  3441 ;;		_putch
  3442 ;; This function is called by:
  3443 ;;		_pad
  3444 ;;		_vfpfcnvrt
  3445 ;;		_fputs
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text14
  3450   0026AC                     __ptext14:
  3451                           	callstack 0
  3452   0026AC                     _fputc:
  3453                           	callstack 22
  3454   0026AC  5007               	movf	fputc@fp^0,w,c
  3455   0026AE  1008               	iorwf	(fputc@fp+1)^0,w,c
  3456   0026B0  B4D8               	btfsc	status,2,c
  3457   0026B2  EF5D  F013         	goto	u1631
  3458   0026B6  EF5F  F013         	goto	u1630
  3459   0026BA                     u1631:
  3460   0026BA  EF68  F013         	goto	l3556
  3461   0026BE                     u1630:
  3462   0026BE  5007               	movf	fputc@fp^0,w,c
  3463   0026C0  1008               	iorwf	(fputc@fp+1)^0,w,c
  3464   0026C2  A4D8               	btfss	status,2,c
  3465   0026C4  EF66  F013         	goto	u1641
  3466   0026C8  EF68  F013         	goto	u1640
  3467   0026CC                     u1641:
  3468   0026CC  EF6D  F013         	goto	l3558
  3469   0026D0                     u1640:
  3470   0026D0                     l3556:
  3471   0026D0  5005               	movf	fputc@c^0,w,c
  3472   0026D2  ECF5  F018         	call	_putch
  3473   0026D6  EFBA  F013         	goto	l1287
  3474   0026DA                     l3558:
  3475   0026DA  EE20 F009          	lfsr	2,9
  3476   0026DE  5007               	movf	fputc@fp^0,w,c
  3477   0026E0  26D9               	addwf	fsr2l,f,c
  3478   0026E2  5008               	movf	(fputc@fp+1)^0,w,c
  3479   0026E4  22DA               	addwfc	fsr2h,f,c
  3480   0026E6  50DE               	movf	postinc2,w,c
  3481   0026E8  10DE               	iorwf	postinc2,w,c
  3482   0026EA  B4D8               	btfsc	status,2,c
  3483   0026EC  EF7A  F013         	goto	u1651
  3484   0026F0  EF7C  F013         	goto	u1650
  3485   0026F4                     u1651:
  3486   0026F4  EF97  F013         	goto	l3562
  3487   0026F8                     u1650:
  3488   0026F8  EE20 F009          	lfsr	2,9
  3489   0026FC  5007               	movf	fputc@fp^0,w,c
  3490   0026FE  26D9               	addwf	fsr2l,f,c
  3491   002700  5008               	movf	(fputc@fp+1)^0,w,c
  3492   002702  22DA               	addwfc	fsr2h,f,c
  3493   002704  EE10 F003          	lfsr	1,3
  3494   002708  5007               	movf	fputc@fp^0,w,c
  3495   00270A  26E1               	addwf	fsr1l,f,c
  3496   00270C  5008               	movf	(fputc@fp+1)^0,w,c
  3497   00270E  22E2               	addwfc	fsr1h,f,c
  3498   002710  50DE               	movf	postinc2,w,c
  3499   002712  5CE6               	subwf	postinc1,w,c
  3500   002714  50E6               	movf	postinc1,w,c
  3501   002716  0A80               	xorlw	128
  3502   002718  6E0D               	movwf	(??_fputc+4)^0,c
  3503   00271A  50DE               	movf	postinc2,w,c
  3504   00271C  0A80               	xorlw	128
  3505   00271E  580D               	subwfb	(??_fputc+4)^0,w,c
  3506   002720  B0D8               	btfsc	status,0,c
  3507   002722  EF95  F013         	goto	u1661
  3508   002726  EF97  F013         	goto	u1660
  3509   00272A                     u1661:
  3510   00272A  EFBA  F013         	goto	l1287
  3511   00272E                     u1660:
  3512   00272E                     l3562:
  3513   00272E  EE20 F003          	lfsr	2,3
  3514   002732  5007               	movf	fputc@fp^0,w,c
  3515   002734  26D9               	addwf	fsr2l,f,c
  3516   002736  5008               	movf	(fputc@fp+1)^0,w,c
  3517   002738  22DA               	addwfc	fsr2h,f,c
  3518   00273A  CFDE F009          	movff	postinc2,??_fputc
  3519   00273E  CFDD F00A          	movff	postdec2,??_fputc+1
  3520   002742  C007  FFD9         	movff	fputc@fp,fsr2l
  3521   002746  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3522   00274A  CFDE F00B          	movff	postinc2,??_fputc+2
  3523   00274E  CFDD F00C          	movff	postdec2,??_fputc+3
  3524   002752  5009               	movf	??_fputc^0,w,c
  3525   002754  240B               	addwf	(??_fputc+2)^0,w,c
  3526   002756  6ED9               	movwf	fsr2l,c
  3527   002758  500A               	movf	(??_fputc+1)^0,w,c
  3528   00275A  200C               	addwfc	(??_fputc+3)^0,w,c
  3529   00275C  6EDA               	movwf	fsr2h,c
  3530   00275E  C005  FFDF         	movff	fputc@c,indf2
  3531   002762  EE20 F003          	lfsr	2,3
  3532   002766  5007               	movf	fputc@fp^0,w,c
  3533   002768  26D9               	addwf	fsr2l,f,c
  3534   00276A  5008               	movf	(fputc@fp+1)^0,w,c
  3535   00276C  22DA               	addwfc	fsr2h,f,c
  3536   00276E  2ADE               	incf	postinc2,f,c
  3537   002770  0E00               	movlw	0
  3538   002772  22DD               	addwfc	postdec2,f,c
  3539   002774                     l1287:
  3540   002774  0012               	return		;funcret
  3541   002776                     __end_of_fputc:
  3542                           	callstack 0
  3543                           
  3544 ;; *************** function _putch *****************
  3545 ;; Defined at:
  3546 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  c               1    wreg     unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  c               1    0[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3564 ;;Total ram usage:        0 bytes
  3565 ;; Hardware stack levels used: 1
  3566 ;; Hardware stack levels required when called: 4
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_fputc
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text15
  3575   0031EA                     __ptext15:
  3576                           	callstack 0
  3577   0031EA                     _putch:
  3578                           	callstack 22
  3579   0031EA  0012               	return		;funcret
  3580   0031EC                     __end_of_putch:
  3581                           	callstack 0
  3582                           
  3583 ;; *************** function ___aomod *****************
  3584 ;; Defined at:
  3585 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  dividend        8    4[COMRAM] long long 
  3588 ;;  divisor         8   12[COMRAM] long long 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  sign            1   21[COMRAM] unsigned char 
  3591 ;;  counter         1   20[COMRAM] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  8    4[COMRAM] long long 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3601 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3604 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;Total ram usage:       18 bytes
  3606 ;; Hardware stack levels used: 1
  3607 ;; Hardware stack levels required when called: 4
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_dtoa
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text16
  3616   002076                     __ptext16:
  3617                           	callstack 0
  3618   002076                     ___aomod:
  3619                           	callstack 22
  3620   002076  0E00               	movlw	0
  3621   002078  6E16               	movwf	___aomod@sign^0,c
  3622   00207A  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3623   00207C  EF44  F010         	goto	u1760
  3624   002080  EF42  F010         	goto	u1761
  3625   002084                     u1761:
  3626   002084  EF56  F010         	goto	l3630
  3627   002088                     u1760:
  3628   002088  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3629   00208A  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3630   00208C  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3631   00208E  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3632   002090  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3633   002092  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3634   002094  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3635   002096  6C05               	negf	___aomod@dividend^0,c
  3636   002098  0E00               	movlw	0
  3637   00209A  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3638   00209C  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3639   00209E  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3640   0020A0  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3641   0020A2  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3642   0020A4  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3643   0020A6  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3644   0020A8  0E01               	movlw	1
  3645   0020AA  6E16               	movwf	___aomod@sign^0,c
  3646   0020AC                     l3630:
  3647   0020AC  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3648   0020AE  EF5D  F010         	goto	u1770
  3649   0020B2  EF5B  F010         	goto	u1771
  3650   0020B6                     u1771:
  3651   0020B6  EF6D  F010         	goto	l3634
  3652   0020BA                     u1770:
  3653   0020BA  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3654   0020BC  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3655   0020BE  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3656   0020C0  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3657   0020C2  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3658   0020C4  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3659   0020C6  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3660   0020C8  6C0D               	negf	___aomod@divisor^0,c
  3661   0020CA  0E00               	movlw	0
  3662   0020CC  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3663   0020CE  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3664   0020D0  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3665   0020D2  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3666   0020D4  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3667   0020D6  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3668   0020D8  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3669   0020DA                     l3634:
  3670   0020DA  500D               	movf	___aomod@divisor^0,w,c
  3671   0020DC  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3672   0020DE  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3673   0020E0  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3674   0020E2  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3675   0020E4  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3676   0020E6  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3677   0020E8  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3678   0020EA  B4D8               	btfsc	status,2,c
  3679   0020EC  EF7A  F010         	goto	u1781
  3680   0020F0  EF7C  F010         	goto	u1780
  3681   0020F4                     u1781:
  3682   0020F4  EFC4  F010         	goto	l3650
  3683   0020F8                     u1780:
  3684   0020F8  0E01               	movlw	1
  3685   0020FA  6E15               	movwf	___aomod@counter^0,c
  3686   0020FC  EF8A  F010         	goto	l3640
  3687   002100                     l3638:
  3688   002100  90D8               	bcf	status,0,c
  3689   002102  360D               	rlcf	___aomod@divisor^0,f,c
  3690   002104  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3691   002106  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3692   002108  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3693   00210A  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3694   00210C  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3695   00210E  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3696   002110  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3697   002112  2A15               	incf	___aomod@counter^0,f,c
  3698   002114                     l3640:
  3699   002114  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3700   002116  EF8F  F010         	goto	u1791
  3701   00211A  EF91  F010         	goto	u1790
  3702   00211E                     u1791:
  3703   00211E  EF80  F010         	goto	l3638
  3704   002122                     u1790:
  3705   002122                     l3642:
  3706   002122  500D               	movf	___aomod@divisor^0,w,c
  3707   002124  5C05               	subwf	___aomod@dividend^0,w,c
  3708   002126  500E               	movf	(___aomod@divisor+1)^0,w,c
  3709   002128  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3710   00212A  500F               	movf	(___aomod@divisor+2)^0,w,c
  3711   00212C  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3712   00212E  5010               	movf	(___aomod@divisor+3)^0,w,c
  3713   002130  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3714   002132  5011               	movf	(___aomod@divisor+4)^0,w,c
  3715   002134  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3716   002136  5012               	movf	(___aomod@divisor+5)^0,w,c
  3717   002138  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3718   00213A  5013               	movf	(___aomod@divisor+6)^0,w,c
  3719   00213C  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3720   00213E  5014               	movf	(___aomod@divisor+7)^0,w,c
  3721   002140  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3722   002142  A0D8               	btfss	status,0,c
  3723   002144  EFA6  F010         	goto	u1801
  3724   002148  EFA8  F010         	goto	u1800
  3725   00214C                     u1801:
  3726   00214C  EFB8  F010         	goto	l3646
  3727   002150                     u1800:
  3728   002150  500D               	movf	___aomod@divisor^0,w,c
  3729   002152  5E05               	subwf	___aomod@dividend^0,f,c
  3730   002154  500E               	movf	(___aomod@divisor+1)^0,w,c
  3731   002156  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3732   002158  500F               	movf	(___aomod@divisor+2)^0,w,c
  3733   00215A  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3734   00215C  5010               	movf	(___aomod@divisor+3)^0,w,c
  3735   00215E  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3736   002160  5011               	movf	(___aomod@divisor+4)^0,w,c
  3737   002162  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3738   002164  5012               	movf	(___aomod@divisor+5)^0,w,c
  3739   002166  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3740   002168  5013               	movf	(___aomod@divisor+6)^0,w,c
  3741   00216A  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3742   00216C  5014               	movf	(___aomod@divisor+7)^0,w,c
  3743   00216E  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3744   002170                     l3646:
  3745   002170  90D8               	bcf	status,0,c
  3746   002172  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3747   002174  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3748   002176  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3749   002178  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3750   00217A  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3751   00217C  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3752   00217E  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3753   002180  320D               	rrcf	___aomod@divisor^0,f,c
  3754   002182  2E15               	decfsz	___aomod@counter^0,f,c
  3755   002184  EF91  F010         	goto	l3642
  3756   002188                     l3650:
  3757   002188  5016               	movf	___aomod@sign^0,w,c
  3758   00218A  B4D8               	btfsc	status,2,c
  3759   00218C  EFCA  F010         	goto	u1811
  3760   002190  EFCC  F010         	goto	u1810
  3761   002194                     u1811:
  3762   002194  EFDC  F010         	goto	l3654
  3763   002198                     u1810:
  3764   002198  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3765   00219A  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3766   00219C  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3767   00219E  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3768   0021A0  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3769   0021A2  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3770   0021A4  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3771   0021A6  6C05               	negf	___aomod@dividend^0,c
  3772   0021A8  0E00               	movlw	0
  3773   0021AA  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3774   0021AC  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3775   0021AE  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3776   0021B0  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3777   0021B2  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3778   0021B4  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3779   0021B6  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3780   0021B8                     l3654:
  3781   0021B8  C005  F005         	movff	___aomod@dividend,?___aomod
  3782   0021BC  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3783   0021C0  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3784   0021C4  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3785   0021C8  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3786   0021CC  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3787   0021D0  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3788   0021D4  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3789   0021D8  0012               	return		;funcret
  3790   0021DA                     __end_of___aomod:
  3791                           	callstack 0
  3792                           
  3793 ;; *************** function ___aodiv *****************
  3794 ;; Defined at:
  3795 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  dividend        8    4[COMRAM] long long 
  3798 ;;  divisor         8   12[COMRAM] long long 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  quotient        8   22[COMRAM] long long 
  3801 ;;  sign            1   21[COMRAM] unsigned char 
  3802 ;;  counter         1   20[COMRAM] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  8    4[COMRAM] long long 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3812 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3815 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;Total ram usage:       26 bytes
  3817 ;; Hardware stack levels used: 1
  3818 ;; Hardware stack levels required when called: 4
  3819 ;; This function calls:
  3820 ;;		Nothing
  3821 ;; This function is called by:
  3822 ;;		_dtoa
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text17
  3827   001D82                     __ptext17:
  3828                           	callstack 0
  3829   001D82                     ___aodiv:
  3830                           	callstack 22
  3831   001D82  0E00               	movlw	0
  3832   001D84  6E16               	movwf	___aodiv@sign^0,c
  3833   001D86  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3834   001D88  EFCA  F00E         	goto	u1690
  3835   001D8C  EFC8  F00E         	goto	u1691
  3836   001D90                     u1691:
  3837   001D90  EFDC  F00E         	goto	l3586
  3838   001D94                     u1690:
  3839   001D94  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3840   001D96  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3841   001D98  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3842   001D9A  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3843   001D9C  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3844   001D9E  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3845   001DA0  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3846   001DA2  6C0D               	negf	___aodiv@divisor^0,c
  3847   001DA4  0E00               	movlw	0
  3848   001DA6  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3849   001DA8  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3850   001DAA  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3851   001DAC  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3852   001DAE  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3853   001DB0  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3854   001DB2  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3855   001DB4  0E01               	movlw	1
  3856   001DB6  6E16               	movwf	___aodiv@sign^0,c
  3857   001DB8                     l3586:
  3858   001DB8  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3859   001DBA  EFE3  F00E         	goto	u1700
  3860   001DBE  EFE1  F00E         	goto	u1701
  3861   001DC2                     u1701:
  3862   001DC2  EFF5  F00E         	goto	l3592
  3863   001DC6                     u1700:
  3864   001DC6  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3865   001DC8  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3866   001DCA  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3867   001DCC  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3868   001DCE  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3869   001DD0  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3870   001DD2  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3871   001DD4  6C05               	negf	___aodiv@dividend^0,c
  3872   001DD6  0E00               	movlw	0
  3873   001DD8  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3874   001DDA  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3875   001DDC  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3876   001DDE  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3877   001DE0  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3878   001DE2  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3879   001DE4  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3880   001DE6  0E01               	movlw	1
  3881   001DE8  1A16               	xorwf	___aodiv@sign^0,f,c
  3882   001DEA                     l3592:
  3883   001DEA  EE20  F017         	lfsr	2,___aodiv@quotient
  3884   001DEE  0E07               	movlw	7
  3885   001DF0                     u1711:
  3886   001DF0  6ADE               	clrf	postinc2,c
  3887   001DF2  06E8               	decf	wreg,f,c
  3888   001DF4  E2FD               	bc	u1711
  3889   001DF6  500D               	movf	___aodiv@divisor^0,w,c
  3890   001DF8  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3891   001DFA  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3892   001DFC  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3893   001DFE  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3894   001E00  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3895   001E02  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3896   001E04  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3897   001E06  B4D8               	btfsc	status,2,c
  3898   001E08  EF08  F00F         	goto	u1721
  3899   001E0C  EF0A  F00F         	goto	u1720
  3900   001E10                     u1721:
  3901   001E10  EF5C  F00F         	goto	l3614
  3902   001E14                     u1720:
  3903   001E14  0E01               	movlw	1
  3904   001E16  6E15               	movwf	___aodiv@counter^0,c
  3905   001E18  EF18  F00F         	goto	l3600
  3906   001E1C                     l3598:
  3907   001E1C  90D8               	bcf	status,0,c
  3908   001E1E  360D               	rlcf	___aodiv@divisor^0,f,c
  3909   001E20  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3910   001E22  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3911   001E24  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3912   001E26  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3913   001E28  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3914   001E2A  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3915   001E2C  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3916   001E2E  2A15               	incf	___aodiv@counter^0,f,c
  3917   001E30                     l3600:
  3918   001E30  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3919   001E32  EF1D  F00F         	goto	u1731
  3920   001E36  EF1F  F00F         	goto	u1730
  3921   001E3A                     u1731:
  3922   001E3A  EF0E  F00F         	goto	l3598
  3923   001E3E                     u1730:
  3924   001E3E                     l3602:
  3925   001E3E  90D8               	bcf	status,0,c
  3926   001E40  3617               	rlcf	___aodiv@quotient^0,f,c
  3927   001E42  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3928   001E44  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3929   001E46  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3930   001E48  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3931   001E4A  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3932   001E4C  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3933   001E4E  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3934   001E50  500D               	movf	___aodiv@divisor^0,w,c
  3935   001E52  5C05               	subwf	___aodiv@dividend^0,w,c
  3936   001E54  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3937   001E56  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3938   001E58  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3939   001E5A  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3940   001E5C  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3941   001E5E  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3942   001E60  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3943   001E62  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3944   001E64  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3945   001E66  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3946   001E68  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3947   001E6A  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3948   001E6C  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3949   001E6E  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3950   001E70  A0D8               	btfss	status,0,c
  3951   001E72  EF3D  F00F         	goto	u1741
  3952   001E76  EF3F  F00F         	goto	u1740
  3953   001E7A                     u1741:
  3954   001E7A  EF50  F00F         	goto	l3610
  3955   001E7E                     u1740:
  3956   001E7E  500D               	movf	___aodiv@divisor^0,w,c
  3957   001E80  5E05               	subwf	___aodiv@dividend^0,f,c
  3958   001E82  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3959   001E84  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3960   001E86  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3961   001E88  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3962   001E8A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3963   001E8C  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3964   001E8E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3965   001E90  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3966   001E92  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3967   001E94  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3968   001E96  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3969   001E98  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3970   001E9A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3971   001E9C  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3972   001E9E  8017               	bsf	___aodiv@quotient^0,0,c
  3973   001EA0                     l3610:
  3974   001EA0  90D8               	bcf	status,0,c
  3975   001EA2  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3976   001EA4  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3977   001EA6  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3978   001EA8  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3979   001EAA  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3980   001EAC  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3981   001EAE  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3982   001EB0  320D               	rrcf	___aodiv@divisor^0,f,c
  3983   001EB2  2E15               	decfsz	___aodiv@counter^0,f,c
  3984   001EB4  EF1F  F00F         	goto	l3602
  3985   001EB8                     l3614:
  3986   001EB8  5016               	movf	___aodiv@sign^0,w,c
  3987   001EBA  B4D8               	btfsc	status,2,c
  3988   001EBC  EF62  F00F         	goto	u1751
  3989   001EC0  EF64  F00F         	goto	u1750
  3990   001EC4                     u1751:
  3991   001EC4  EF74  F00F         	goto	l3618
  3992   001EC8                     u1750:
  3993   001EC8  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3994   001ECA  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3995   001ECC  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3996   001ECE  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3997   001ED0  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3998   001ED2  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3999   001ED4  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  4000   001ED6  6C17               	negf	___aodiv@quotient^0,c
  4001   001ED8  0E00               	movlw	0
  4002   001EDA  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  4003   001EDC  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  4004   001EDE  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  4005   001EE0  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  4006   001EE2  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  4007   001EE4  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  4008   001EE6  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  4009   001EE8                     l3618:
  4010   001EE8  C017  F005         	movff	___aodiv@quotient,?___aodiv
  4011   001EEC  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  4012   001EF0  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  4013   001EF4  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  4014   001EF8  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  4015   001EFC  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  4016   001F00  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  4017   001F04  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  4018   001F08  0012               	return		;funcret
  4019   001F0A                     __end_of___aodiv:
  4020                           	callstack 0
  4021                           
  4022 ;; *************** function _sendStringSerial4 *****************
  4023 ;; Defined at:
  4024 ;;		line 39 in file "serial.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  string          2    5[COMRAM] PTR unsigned char 
  4027 ;;		 -> main@buf(150), 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4039 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4043 ;;Total ram usage:        2 bytes
  4044 ;; Hardware stack levels used: 1
  4045 ;; Hardware stack levels required when called: 5
  4046 ;; This function calls:
  4047 ;;		_sendCharSerial4
  4048 ;; This function is called by:
  4049 ;;		_main
  4050 ;;		_clear_read_calibration
  4051 ;;		_card_response
  4052 ;;		_card_response_easy
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text18
  4057   002FF0                     __ptext18:
  4058                           	callstack 0
  4059   002FF0                     _sendStringSerial4:
  4060                           	callstack 25
  4061   002FF0                     
  4062                           ;serial.c: 40:  while(*string != 0) {
  4063   002FF0  EF03  F018         	goto	l2948
  4064   002FF4                     l2944:
  4065                           
  4066                           ;serial.c: 41:         sendCharSerial4(*string++);
  4067   002FF4  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4068   002FF8  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4069   002FFC  50DF               	movf	indf2,w,c
  4070   002FFE  ECA6  F018         	call	_sendCharSerial4
  4071   003002  4A06               	infsnz	sendStringSerial4@string^0,f,c
  4072   003004  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  4073   003006                     l2948:
  4074                           
  4075                           ;serial.c: 40:  while(*string != 0) {
  4076   003006  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4077   00300A  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4078   00300E  50DF               	movf	indf2,w,c
  4079   003010  A4D8               	btfss	status,2,c
  4080   003012  EF0D  F018         	goto	u1411
  4081   003016  EF0F  F018         	goto	u1410
  4082   00301A                     u1411:
  4083   00301A  EFFA  F017         	goto	l2944
  4084   00301E                     u1410:
  4085   00301E  0012               	return		;funcret
  4086   003020                     __end_of_sendStringSerial4:
  4087                           	callstack 0
  4088                           
  4089 ;; *************** function _sendCharSerial4 *****************
  4090 ;; Defined at:
  4091 ;;		line 32 in file "serial.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  charToSend      1    wreg     unsigned char 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  charToSend      1    4[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4109 ;;Total ram usage:        1 bytes
  4110 ;; Hardware stack levels used: 1
  4111 ;; Hardware stack levels required when called: 4
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_sendStringSerial4
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text19
  4120   00314C                     __ptext19:
  4121                           	callstack 0
  4122   00314C                     _sendCharSerial4:
  4123                           	callstack 25
  4124                           
  4125                           ;incstack = 0
  4126                           ;sendCharSerial4@charToSend stored from wreg
  4127   00314C  6E05               	movwf	sendCharSerial4@charToSend^0,c
  4128   00314E                     l430:
  4129   00314E  010E               	movlb	14	; () banked
  4130   003150  A537               	btfss	55,2,b	;volatile
  4131   003152  EFAD  F018         	goto	u1321
  4132   003156  EFAF  F018         	goto	u1320
  4133   00315A                     u1321:
  4134   00315A  EFA7  F018         	goto	l430
  4135   00315E                     u1320:
  4136   00315E                     
  4137                           ; BSR set to: 14
  4138                           ;serial.c: 34:     TX4REG = charToSend;
  4139   00315E  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4140   003162                     
  4141                           ; BSR set to: 14
  4142   003162  0012               	return		;funcret
  4143   003164                     __end_of_sendCharSerial4:
  4144                           	callstack 0
  4145                           
  4146 ;; *************** function _normalise_readings *****************
  4147 ;; Defined at:
  4148 ;;		line 70 in file "colour_identify.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  buf             2   26[COMRAM] PTR unsigned char 
  4151 ;;		 -> main@buf(150), 
  4152 ;;  clear_read      2   28[COMRAM] unsigned int 
  4153 ;;  red_read        2   30[COMRAM] unsigned int 
  4154 ;;  green_read      2   32[COMRAM] unsigned int 
  4155 ;;  blue_read       2   34[COMRAM] unsigned int 
  4156 ;;  expected_val    2   36[COMRAM] PTR unsigned int [9]
  4157 ;;		 -> main@expected_values(72), 
  4158 ;;  normalised_v    2   38[COMRAM] PTR unsigned int [9]
  4159 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  difference      2   48[COMRAM] unsigned int 
  4162 ;;  i               1   50[COMRAM] enum E14551
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      void 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4172 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4174 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4175 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4176 ;;Total ram usage:       25 bytes
  4177 ;; Hardware stack levels used: 1
  4178 ;; Hardware stack levels required when called: 5
  4179 ;; This function calls:
  4180 ;;		___lwdiv
  4181 ;;		___wmul
  4182 ;;		_abs
  4183 ;; This function is called by:
  4184 ;;		_card_response
  4185 ;;		_card_response_easy
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text20
  4190   0015A6                     __ptext20:
  4191                           	callstack 0
  4192   0015A6                     _normalise_readings:
  4193                           	callstack 24
  4194   0015A6                     
  4195                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  4196   0015A6  0E01               	movlw	1
  4197   0015A8  6E33               	movwf	normalise_readings@i^0,c
  4198   0015AA                     l3782:
  4199                           
  4200                           ;colour_identify.c: 81:         unsigned int difference = abs(clear_read - expected_valu
      +                          es[CLEAR][i]);
  4201   0015AA  5033               	movf	normalise_readings@i^0,w,c
  4202   0015AC  0D02               	mullw	2
  4203   0015AE  CFF3 F029          	movff	prodl,??_normalise_readings
  4204   0015B2  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4205   0015B6  5029               	movf	??_normalise_readings^0,w,c
  4206   0015B8  2425               	addwf	normalise_readings@expected_values^0,w,c
  4207   0015BA  6ED9               	movwf	fsr2l,c
  4208   0015BC  502A               	movf	(??_normalise_readings+1)^0,w,c
  4209   0015BE  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4210   0015C0  6EDA               	movwf	fsr2h,c
  4211   0015C2  CFDE F02B          	movff	postinc2,??_normalise_readings+2
  4212   0015C6  CFDD F02C          	movff	postdec2,??_normalise_readings+3
  4213   0015CA  502B               	movf	(??_normalise_readings+2)^0,w,c
  4214   0015CC  5C1D               	subwf	normalise_readings@clear_read^0,w,c
  4215   0015CE  6E17               	movwf	abs@a^0,c
  4216   0015D0  502C               	movf	(??_normalise_readings+3)^0,w,c
  4217   0015D2  581E               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  4218   0015D4  6E18               	movwf	(abs@a+1)^0,c
  4219   0015D6  EC9F  F017         	call	_abs	;wreg free
  4220   0015DA  C017  F031         	movff	?_abs,normalise_readings@difference
  4221   0015DE  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4222                           
  4223                           ;colour_identify.c: 82:         normalised_values[CLEAR][i] = (difference*100) / expecte
      +                          d_values[CLEAR][i];
  4224   0015E2  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4225   0015E6  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4226   0015EA  0E00               	movlw	0
  4227   0015EC  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4228   0015EE  0E64               	movlw	100
  4229   0015F0  6E07               	movwf	___wmul@multiplicand^0,c
  4230   0015F2  EC62  F018         	call	___wmul	;wreg free
  4231   0015F6  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4232   0015FA  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4233   0015FE  5033               	movf	normalise_readings@i^0,w,c
  4234   001600  0D02               	mullw	2
  4235   001602  CFF3 F029          	movff	prodl,??_normalise_readings
  4236   001606  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4237   00160A  5029               	movf	??_normalise_readings^0,w,c
  4238   00160C  2425               	addwf	normalise_readings@expected_values^0,w,c
  4239   00160E  6ED9               	movwf	fsr2l,c
  4240   001610  502A               	movf	(??_normalise_readings+1)^0,w,c
  4241   001612  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4242   001614  6EDA               	movwf	fsr2h,c
  4243   001616  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4244   00161A  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4245   00161E  ECFB  F015         	call	___lwdiv	;wreg free
  4246   001622  5033               	movf	normalise_readings@i^0,w,c
  4247   001624  0D02               	mullw	2
  4248   001626  CFF3 F02B          	movff	prodl,??_normalise_readings+2
  4249   00162A  CFF4 F02C          	movff	prodh,??_normalise_readings+3
  4250   00162E  502B               	movf	(??_normalise_readings+2)^0,w,c
  4251   001630  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4252   001632  6ED9               	movwf	fsr2l,c
  4253   001634  502C               	movf	(??_normalise_readings+3)^0,w,c
  4254   001636  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4255   001638  6EDA               	movwf	fsr2h,c
  4256   00163A  C00B  FFDE         	movff	?___lwdiv,postinc2
  4257   00163E  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4258                           
  4259                           ;colour_identify.c: 85:         difference = abs(red_read - expected_values[RED][i]);
  4260   001642  5033               	movf	normalise_readings@i^0,w,c
  4261   001644  0D02               	mullw	2
  4262   001646  CFF3 F029          	movff	prodl,??_normalise_readings
  4263   00164A  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4264   00164E  5029               	movf	??_normalise_readings^0,w,c
  4265   001650  2425               	addwf	normalise_readings@expected_values^0,w,c
  4266   001652  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4267   001654  502A               	movf	(??_normalise_readings+1)^0,w,c
  4268   001656  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4269   001658  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4270   00165A  0E12               	movlw	18
  4271   00165C  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4272   00165E  6ED9               	movwf	fsr2l,c
  4273   001660  0E00               	movlw	0
  4274   001662  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4275   001664  6EDA               	movwf	fsr2h,c
  4276   001666  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4277   00166A  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4278   00166E  502D               	movf	(??_normalise_readings+4)^0,w,c
  4279   001670  5C1F               	subwf	normalise_readings@red_read^0,w,c
  4280   001672  6E17               	movwf	abs@a^0,c
  4281   001674  502E               	movf	(??_normalise_readings+5)^0,w,c
  4282   001676  5820               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4283   001678  6E18               	movwf	(abs@a+1)^0,c
  4284   00167A  EC9F  F017         	call	_abs	;wreg free
  4285   00167E  C017  F031         	movff	?_abs,normalise_readings@difference
  4286   001682  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4287                           
  4288                           ;colour_identify.c: 86:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4289   001686  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4290   00168A  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4291   00168E  0E00               	movlw	0
  4292   001690  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4293   001692  0E64               	movlw	100
  4294   001694  6E07               	movwf	___wmul@multiplicand^0,c
  4295   001696  EC62  F018         	call	___wmul	;wreg free
  4296   00169A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4297   00169E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4298   0016A2  5033               	movf	normalise_readings@i^0,w,c
  4299   0016A4  0D02               	mullw	2
  4300   0016A6  CFF3 F029          	movff	prodl,??_normalise_readings
  4301   0016AA  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4302   0016AE  5029               	movf	??_normalise_readings^0,w,c
  4303   0016B0  2425               	addwf	normalise_readings@expected_values^0,w,c
  4304   0016B2  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4305   0016B4  502A               	movf	(??_normalise_readings+1)^0,w,c
  4306   0016B6  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4307   0016B8  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4308   0016BA  0E12               	movlw	18
  4309   0016BC  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4310   0016BE  6ED9               	movwf	fsr2l,c
  4311   0016C0  0E00               	movlw	0
  4312   0016C2  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4313   0016C4  6EDA               	movwf	fsr2h,c
  4314   0016C6  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4315   0016CA  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4316   0016CE  ECFB  F015         	call	___lwdiv	;wreg free
  4317   0016D2  5033               	movf	normalise_readings@i^0,w,c
  4318   0016D4  0D02               	mullw	2
  4319   0016D6  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4320   0016DA  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4321   0016DE  502D               	movf	(??_normalise_readings+4)^0,w,c
  4322   0016E0  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4323   0016E2  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4324   0016E4  502E               	movf	(??_normalise_readings+5)^0,w,c
  4325   0016E6  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4326   0016E8  6E30               	movwf	(??_normalise_readings+7)^0,c
  4327   0016EA  0E12               	movlw	18
  4328   0016EC  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4329   0016EE  6ED9               	movwf	fsr2l,c
  4330   0016F0  0E00               	movlw	0
  4331   0016F2  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4332   0016F4  6EDA               	movwf	fsr2h,c
  4333   0016F6  C00B  FFDE         	movff	?___lwdiv,postinc2
  4334   0016FA  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4335                           
  4336                           ;colour_identify.c: 89:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4337   0016FE  5033               	movf	normalise_readings@i^0,w,c
  4338   001700  0D02               	mullw	2
  4339   001702  CFF3 F029          	movff	prodl,??_normalise_readings
  4340   001706  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4341   00170A  5029               	movf	??_normalise_readings^0,w,c
  4342   00170C  2425               	addwf	normalise_readings@expected_values^0,w,c
  4343   00170E  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4344   001710  502A               	movf	(??_normalise_readings+1)^0,w,c
  4345   001712  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4346   001714  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4347   001716  0E24               	movlw	36
  4348   001718  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4349   00171A  6ED9               	movwf	fsr2l,c
  4350   00171C  0E00               	movlw	0
  4351   00171E  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4352   001720  6EDA               	movwf	fsr2h,c
  4353   001722  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4354   001726  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4355   00172A  502D               	movf	(??_normalise_readings+4)^0,w,c
  4356   00172C  5C21               	subwf	normalise_readings@green_read^0,w,c
  4357   00172E  6E17               	movwf	abs@a^0,c
  4358   001730  502E               	movf	(??_normalise_readings+5)^0,w,c
  4359   001732  5822               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4360   001734  6E18               	movwf	(abs@a+1)^0,c
  4361   001736  EC9F  F017         	call	_abs	;wreg free
  4362   00173A  C017  F031         	movff	?_abs,normalise_readings@difference
  4363   00173E  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4364                           
  4365                           ;colour_identify.c: 90:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4366   001742  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4367   001746  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4368   00174A  0E00               	movlw	0
  4369   00174C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4370   00174E  0E64               	movlw	100
  4371   001750  6E07               	movwf	___wmul@multiplicand^0,c
  4372   001752  EC62  F018         	call	___wmul	;wreg free
  4373   001756  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4374   00175A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4375   00175E  5033               	movf	normalise_readings@i^0,w,c
  4376   001760  0D02               	mullw	2
  4377   001762  CFF3 F029          	movff	prodl,??_normalise_readings
  4378   001766  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4379   00176A  5029               	movf	??_normalise_readings^0,w,c
  4380   00176C  2425               	addwf	normalise_readings@expected_values^0,w,c
  4381   00176E  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4382   001770  502A               	movf	(??_normalise_readings+1)^0,w,c
  4383   001772  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4384   001774  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4385   001776  0E24               	movlw	36
  4386   001778  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4387   00177A  6ED9               	movwf	fsr2l,c
  4388   00177C  0E00               	movlw	0
  4389   00177E  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4390   001780  6EDA               	movwf	fsr2h,c
  4391   001782  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4392   001786  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4393   00178A  ECFB  F015         	call	___lwdiv	;wreg free
  4394   00178E  5033               	movf	normalise_readings@i^0,w,c
  4395   001790  0D02               	mullw	2
  4396   001792  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4397   001796  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4398   00179A  502D               	movf	(??_normalise_readings+4)^0,w,c
  4399   00179C  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4400   00179E  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4401   0017A0  502E               	movf	(??_normalise_readings+5)^0,w,c
  4402   0017A2  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4403   0017A4  6E30               	movwf	(??_normalise_readings+7)^0,c
  4404   0017A6  0E24               	movlw	36
  4405   0017A8  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4406   0017AA  6ED9               	movwf	fsr2l,c
  4407   0017AC  0E00               	movlw	0
  4408   0017AE  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4409   0017B0  6EDA               	movwf	fsr2h,c
  4410   0017B2  C00B  FFDE         	movff	?___lwdiv,postinc2
  4411   0017B6  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4412                           
  4413                           ;colour_identify.c: 93:         difference = abs(blue_read - expected_values[BLUE][i]);
  4414   0017BA  5033               	movf	normalise_readings@i^0,w,c
  4415   0017BC  0D02               	mullw	2
  4416   0017BE  CFF3 F029          	movff	prodl,??_normalise_readings
  4417   0017C2  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4418   0017C6  5029               	movf	??_normalise_readings^0,w,c
  4419   0017C8  2425               	addwf	normalise_readings@expected_values^0,w,c
  4420   0017CA  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4421   0017CC  502A               	movf	(??_normalise_readings+1)^0,w,c
  4422   0017CE  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4423   0017D0  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4424   0017D2  0E36               	movlw	54
  4425   0017D4  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4426   0017D6  6ED9               	movwf	fsr2l,c
  4427   0017D8  0E00               	movlw	0
  4428   0017DA  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4429   0017DC  6EDA               	movwf	fsr2h,c
  4430   0017DE  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4431   0017E2  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4432   0017E6  502D               	movf	(??_normalise_readings+4)^0,w,c
  4433   0017E8  5C23               	subwf	normalise_readings@blue_read^0,w,c
  4434   0017EA  6E17               	movwf	abs@a^0,c
  4435   0017EC  502E               	movf	(??_normalise_readings+5)^0,w,c
  4436   0017EE  5824               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4437   0017F0  6E18               	movwf	(abs@a+1)^0,c
  4438   0017F2  EC9F  F017         	call	_abs	;wreg free
  4439   0017F6  C017  F031         	movff	?_abs,normalise_readings@difference
  4440   0017FA  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4441                           
  4442                           ;colour_identify.c: 94:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4443   0017FE  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4444   001802  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4445   001806  0E00               	movlw	0
  4446   001808  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4447   00180A  0E64               	movlw	100
  4448   00180C  6E07               	movwf	___wmul@multiplicand^0,c
  4449   00180E  EC62  F018         	call	___wmul	;wreg free
  4450   001812  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4451   001816  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4452   00181A  5033               	movf	normalise_readings@i^0,w,c
  4453   00181C  0D02               	mullw	2
  4454   00181E  CFF3 F029          	movff	prodl,??_normalise_readings
  4455   001822  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4456   001826  5029               	movf	??_normalise_readings^0,w,c
  4457   001828  2425               	addwf	normalise_readings@expected_values^0,w,c
  4458   00182A  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4459   00182C  502A               	movf	(??_normalise_readings+1)^0,w,c
  4460   00182E  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4461   001830  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4462   001832  0E36               	movlw	54
  4463   001834  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4464   001836  6ED9               	movwf	fsr2l,c
  4465   001838  0E00               	movlw	0
  4466   00183A  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4467   00183C  6EDA               	movwf	fsr2h,c
  4468   00183E  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4469   001842  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4470   001846  ECFB  F015         	call	___lwdiv	;wreg free
  4471   00184A  5033               	movf	normalise_readings@i^0,w,c
  4472   00184C  0D02               	mullw	2
  4473   00184E  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4474   001852  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4475   001856  502D               	movf	(??_normalise_readings+4)^0,w,c
  4476   001858  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4477   00185A  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4478   00185C  502E               	movf	(??_normalise_readings+5)^0,w,c
  4479   00185E  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4480   001860  6E30               	movwf	(??_normalise_readings+7)^0,c
  4481   001862  0E36               	movlw	54
  4482   001864  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4483   001866  6ED9               	movwf	fsr2l,c
  4484   001868  0E00               	movlw	0
  4485   00186A  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4486   00186C  6EDA               	movwf	fsr2h,c
  4487   00186E  C00B  FFDE         	movff	?___lwdiv,postinc2
  4488   001872  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4489   001876                     
  4490                           ;colour_identify.c: 95:     }
  4491   001876  2A33               	incf	normalise_readings@i^0,f,c
  4492   001878  0E09               	movlw	9
  4493   00187A  6433               	cpfsgt	normalise_readings@i^0,c
  4494   00187C  EF42  F00C         	goto	u1981
  4495   001880  EF44  F00C         	goto	u1980
  4496   001884                     u1981:
  4497   001884  EFD5  F00A         	goto	l3782
  4498   001888                     u1980:
  4499   001888  0012               	return		;funcret
  4500   00188A                     __end_of_normalise_readings:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _abs *****************
  4504 ;; Defined at:
  4505 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  a               2   22[COMRAM] int 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  2   22[COMRAM] int 
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4522 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;Total ram usage:        4 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; Hardware stack levels required when called: 4
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_normalise_readings
  4530 ;;		_dtoa
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text21
  4535   002F3E                     __ptext21:
  4536                           	callstack 0
  4537   002F3E                     _abs:
  4538                           	callstack 22
  4539   002F3E  BE18               	btfsc	(abs@a+1)^0,7,c
  4540   002F40  EFAC  F017         	goto	u1680
  4541   002F44  5018               	movf	(abs@a+1)^0,w,c
  4542   002F46  E106               	bnz	u1681
  4543   002F48  0417               	decf	abs@a^0,w,c
  4544   002F4A  B0D8               	btfsc	status,0,c
  4545   002F4C  EFAA  F017         	goto	u1681
  4546   002F50  EFAC  F017         	goto	u1680
  4547   002F54                     u1681:
  4548   002F54  EFBA  F017         	goto	l1207
  4549   002F58                     u1680:
  4550   002F58  C017  F019         	movff	abs@a,??_abs
  4551   002F5C  C018  F01A         	movff	abs@a+1,??_abs+1
  4552   002F60  1E19               	comf	??_abs^0,f,c
  4553   002F62  1E1A               	comf	(??_abs+1)^0,f,c
  4554   002F64  4A19               	infsnz	??_abs^0,f,c
  4555   002F66  2A1A               	incf	(??_abs+1)^0,f,c
  4556   002F68  C019  F017         	movff	??_abs,?_abs
  4557   002F6C  C01A  F018         	movff	??_abs+1,?_abs+1
  4558   002F70  EFBE  F017         	goto	l1210
  4559   002F74                     l1207:
  4560   002F74  C017  F017         	movff	abs@a,?_abs
  4561   002F78  C018  F018         	movff	abs@a+1,?_abs+1
  4562   002F7C                     l1210:
  4563   002F7C  0012               	return		;funcret
  4564   002F7E                     __end_of_abs:
  4565                           	callstack 0
  4566                           
  4567 ;; *************** function _motor_response *****************
  4568 ;; Defined at:
  4569 ;;		line 124 in file "colour_identify.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  card            1    wreg     enum E14551
  4572 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4573 ;;		 -> main@motorL(9), 
  4574 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4575 ;;		 -> main@motorR(9), 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  card            1   37[COMRAM] enum E14551
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4590 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4591 ;;Total ram usage:        7 bytes
  4592 ;; Hardware stack levels used: 1
  4593 ;; Hardware stack levels required when called: 7
  4594 ;; This function calls:
  4595 ;;		_reverseFullSpeed
  4596 ;;		_stop
  4597 ;;		_turnLeft45
  4598 ;;		_turnRight45
  4599 ;; This function is called by:
  4600 ;;		_card_response
  4601 ;;		_card_response_easy
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text22
  4606   000E7A                     __ptext22:
  4607                           	callstack 0
  4608   000E7A                     _motor_response:
  4609                           	callstack 22
  4610                           
  4611                           ;incstack = 0
  4612                           ;motor_response@card stored from wreg
  4613   000E7A  6E26               	movwf	motor_response@card^0,c
  4614   000E7C                     
  4615                           ;colour_identify.c: 126:     switch (card){
  4616   000E7C  EF07  F009         	goto	l3116
  4617   000E80                     l3000:
  4618                           
  4619                           ;colour_identify.c: 128:             reverseFullSpeed(mL,mR);
  4620   000E80  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4621   000E84  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4622   000E88  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4623   000E8C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4624   000E90  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4625   000E94                     
  4626                           ;colour_identify.c: 129:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4627   000E94  0E0D               	movlw	13
  4628   000E96  6E25               	movwf	(??_motor_response+1)^0,c
  4629   000E98  0E2D               	movlw	45
  4630   000E9A  6E24               	movwf	??_motor_response^0,c
  4631   000E9C  0ED8               	movlw	216
  4632   000E9E                     u2147:
  4633   000E9E  2EE8               	decfsz	wreg,f,c
  4634   000EA0  D7FE               	bra	u2147
  4635   000EA2  2E24               	decfsz	??_motor_response^0,f,c
  4636   000EA4  D7FC               	bra	u2147
  4637   000EA6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4638   000EA8  D7FA               	bra	u2147
  4639   000EAA                     l3004:
  4640                           
  4641                           ;colour_identify.c: 130:             turnRight45(mL,mR);
  4642   000EAA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4643   000EAE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4644   000EB2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4645   000EB6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4646   000EBA  ECBB  F013         	call	_turnRight45	;wreg free
  4647   000EBE                     
  4648                           ;colour_identify.c: 131:             stop(mL,mR);
  4649   000EBE  C020  F018         	movff	motor_response@mL,stop@mL
  4650   000EC2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4651   000EC6  C022  F01A         	movff	motor_response@mR,stop@mR
  4652   000ECA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4653   000ECE  EC39  F015         	call	_stop	;wreg free
  4654   000ED2                     
  4655                           ;colour_identify.c: 132:             turnRight45(mL,mR);
  4656   000ED2  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4657   000ED6  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4658   000EDA  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4659   000EDE  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4660   000EE2  ECBB  F013         	call	_turnRight45	;wreg free
  4661   000EE6                     l3010:
  4662                           
  4663                           ;colour_identify.c: 133:             stop(mL,mR);
  4664   000EE6  C020  F018         	movff	motor_response@mL,stop@mL
  4665   000EEA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4666   000EEE  C022  F01A         	movff	motor_response@mR,stop@mR
  4667   000EF2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4668   000EF6  EC39  F015         	call	_stop	;wreg free
  4669                           
  4670                           ;colour_identify.c: 134:             break;
  4671   000EFA  EF38  F009         	goto	l365
  4672   000EFE                     l3012:
  4673                           
  4674                           ;colour_identify.c: 136:             reverseFullSpeed(mL,mR);
  4675   000EFE  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4676   000F02  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4677   000F06  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4678   000F0A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4679   000F0E  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4680   000F12                     
  4681                           ;colour_identify.c: 137:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4682   000F12  0E0D               	movlw	13
  4683   000F14  6E25               	movwf	(??_motor_response+1)^0,c
  4684   000F16  0E2D               	movlw	45
  4685   000F18  6E24               	movwf	??_motor_response^0,c
  4686   000F1A  0ED8               	movlw	216
  4687   000F1C                     u2157:
  4688   000F1C  2EE8               	decfsz	wreg,f,c
  4689   000F1E  D7FE               	bra	u2157
  4690   000F20  2E24               	decfsz	??_motor_response^0,f,c
  4691   000F22  D7FC               	bra	u2157
  4692   000F24  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4693   000F26  D7FA               	bra	u2157
  4694   000F28                     l3016:
  4695                           
  4696                           ;colour_identify.c: 138:             turnLeft45(mL,mR);
  4697   000F28  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4698   000F2C  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4699   000F30  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4700   000F34  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4701   000F38  EC12  F014         	call	_turnLeft45	;wreg free
  4702   000F3C                     
  4703                           ;colour_identify.c: 139:             stop(mL,mR);
  4704   000F3C  C020  F018         	movff	motor_response@mL,stop@mL
  4705   000F40  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4706   000F44  C022  F01A         	movff	motor_response@mR,stop@mR
  4707   000F48  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4708   000F4C  EC39  F015         	call	_stop	;wreg free
  4709   000F50                     
  4710                           ;colour_identify.c: 140:             turnLeft45(mL,mR);
  4711   000F50  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4712   000F54  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4713   000F58  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4714   000F5C  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4715   000F60  EC12  F014         	call	_turnLeft45	;wreg free
  4716   000F64  EF73  F007         	goto	l3010
  4717   000F68                     l3024:
  4718                           
  4719                           ;colour_identify.c: 144:             reverseFullSpeed(mL,mR);
  4720   000F68  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4721   000F6C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4722   000F70  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4723   000F74  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4724   000F78  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4725   000F7C                     
  4726                           ;colour_identify.c: 145:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4727   000F7C  0E0D               	movlw	13
  4728   000F7E  6E25               	movwf	(??_motor_response+1)^0,c
  4729   000F80  0E2D               	movlw	45
  4730   000F82  6E24               	movwf	??_motor_response^0,c
  4731   000F84  0ED8               	movlw	216
  4732   000F86                     u2167:
  4733   000F86  2EE8               	decfsz	wreg,f,c
  4734   000F88  D7FE               	bra	u2167
  4735   000F8A  2E24               	decfsz	??_motor_response^0,f,c
  4736   000F8C  D7FC               	bra	u2167
  4737   000F8E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4738   000F90  D7FA               	bra	u2167
  4739   000F92                     
  4740                           ;colour_identify.c: 146:             turnRight45(mL,mR);
  4741   000F92  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4742   000F96  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4743   000F9A  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4744   000F9E  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4745   000FA2  ECBB  F013         	call	_turnRight45	;wreg free
  4746   000FA6                     
  4747                           ;colour_identify.c: 147:             stop(mL,mR);
  4748   000FA6  C020  F018         	movff	motor_response@mL,stop@mL
  4749   000FAA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4750   000FAE  C022  F01A         	movff	motor_response@mR,stop@mR
  4751   000FB2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4752   000FB6  EC39  F015         	call	_stop	;wreg free
  4753   000FBA                     l3032:
  4754                           
  4755                           ;colour_identify.c: 148:             turnRight45(mL,mR);
  4756   000FBA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4757   000FBE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4758   000FC2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4759   000FC6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4760   000FCA  ECBB  F013         	call	_turnRight45	;wreg free
  4761   000FCE                     
  4762                           ;colour_identify.c: 149:             stop(mL,mR);
  4763   000FCE  C020  F018         	movff	motor_response@mL,stop@mL
  4764   000FD2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4765   000FD6  C022  F01A         	movff	motor_response@mR,stop@mR
  4766   000FDA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4767   000FDE  EC39  F015         	call	_stop	;wreg free
  4768   000FE2  EF55  F007         	goto	l3004
  4769   000FE6                     l3044:
  4770                           
  4771                           ;colour_identify.c: 156:             reverseFullSpeed(mL,mR);
  4772   000FE6  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4773   000FEA  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4774   000FEE  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4775   000FF2  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4776   000FF6  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4777   000FFA                     
  4778                           ;colour_identify.c: 157:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4779   000FFA  0E0D               	movlw	13
  4780   000FFC  6E25               	movwf	(??_motor_response+1)^0,c
  4781   000FFE  0E2D               	movlw	45
  4782   001000  6E24               	movwf	??_motor_response^0,c
  4783   001002  0ED8               	movlw	216
  4784   001004                     u2177:
  4785   001004  2EE8               	decfsz	wreg,f,c
  4786   001006  D7FE               	bra	u2177
  4787   001008  2E24               	decfsz	??_motor_response^0,f,c
  4788   00100A  D7FC               	bra	u2177
  4789   00100C  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4790   00100E  D7FA               	bra	u2177
  4791   001010                     
  4792                           ;colour_identify.c: 158:             stop(mL,mR);
  4793   001010  C020  F018         	movff	motor_response@mL,stop@mL
  4794   001014  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4795   001018  C022  F01A         	movff	motor_response@mR,stop@mR
  4796   00101C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4797   001020  EC39  F015         	call	_stop	;wreg free
  4798                           
  4799                           ;colour_identify.c: 159:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4800   001024  0E11               	movlw	17
  4801   001026  6E25               	movwf	(??_motor_response+1)^0,c
  4802   001028  0E3C               	movlw	60
  4803   00102A  6E24               	movwf	??_motor_response^0,c
  4804   00102C  0ECB               	movlw	203
  4805   00102E                     u2187:
  4806   00102E  2EE8               	decfsz	wreg,f,c
  4807   001030  D7FE               	bra	u2187
  4808   001032  2E24               	decfsz	??_motor_response^0,f,c
  4809   001034  D7FC               	bra	u2187
  4810   001036  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4811   001038  D7FA               	bra	u2187
  4812   00103A  F000               	nop	
  4813   00103C                     
  4814                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  4815   00103C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4816   001040  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4817   001044  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4818   001048  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4819   00104C  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4820   001050                     
  4821                           ;colour_identify.c: 161:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4822   001050  0E29               	movlw	41
  4823   001052  6E25               	movwf	(??_motor_response+1)^0,c
  4824   001054  0E96               	movlw	150
  4825   001056  6E24               	movwf	??_motor_response^0,c
  4826   001058  0E7F               	movlw	127
  4827   00105A                     u2197:
  4828   00105A  2EE8               	decfsz	wreg,f,c
  4829   00105C  D7FE               	bra	u2197
  4830   00105E  2E24               	decfsz	??_motor_response^0,f,c
  4831   001060  D7FC               	bra	u2197
  4832   001062  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4833   001064  D7FA               	bra	u2197
  4834   001066  F000               	nop	
  4835                           
  4836                           ;colour_identify.c: 162:             stop(mL,mR);
  4837   001068  C020  F018         	movff	motor_response@mL,stop@mL
  4838   00106C  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4839   001070  C022  F01A         	movff	motor_response@mR,stop@mR
  4840   001074  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4841   001078  EC39  F015         	call	_stop	;wreg free
  4842                           
  4843                           ;colour_identify.c: 163:             turnRight45(mL,mR);
  4844   00107C  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4845   001080  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4846   001084  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4847   001088  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4848   00108C  ECBB  F013         	call	_turnRight45	;wreg free
  4849                           
  4850                           ;colour_identify.c: 164:             stop(mL,mR);
  4851   001090  C020  F018         	movff	motor_response@mL,stop@mL
  4852   001094  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4853   001098  C022  F01A         	movff	motor_response@mR,stop@mR
  4854   00109C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4855   0010A0  EC39  F015         	call	_stop	;wreg free
  4856                           
  4857                           ;colour_identify.c: 165:             turnRight45(mL,mR);
  4858   0010A4  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4859   0010A8  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4860   0010AC  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4861   0010B0  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4862   0010B4  ECBB  F013         	call	_turnRight45	;wreg free
  4863                           
  4864                           ;colour_identify.c: 166:             stop(mL,mR);
  4865   0010B8  C020  F018         	movff	motor_response@mL,stop@mL
  4866   0010BC  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4867   0010C0  C022  F01A         	movff	motor_response@mR,stop@mR
  4868   0010C4  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4869   0010C8  EC39  F015         	call	_stop	;wreg free
  4870                           
  4871                           ;colour_identify.c: 167:             break;
  4872   0010CC  EF38  F009         	goto	l365
  4873   0010D0                     l3054:
  4874                           
  4875                           ;colour_identify.c: 169:             reverseFullSpeed(mL,mR);
  4876   0010D0  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4877   0010D4  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4878   0010D8  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4879   0010DC  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4880   0010E0  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4881   0010E4                     
  4882                           ;colour_identify.c: 170:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4883   0010E4  0E0D               	movlw	13
  4884   0010E6  6E25               	movwf	(??_motor_response+1)^0,c
  4885   0010E8  0E2D               	movlw	45
  4886   0010EA  6E24               	movwf	??_motor_response^0,c
  4887   0010EC  0ED8               	movlw	216
  4888   0010EE                     u2207:
  4889   0010EE  2EE8               	decfsz	wreg,f,c
  4890   0010F0  D7FE               	bra	u2207
  4891   0010F2  2E24               	decfsz	??_motor_response^0,f,c
  4892   0010F4  D7FC               	bra	u2207
  4893   0010F6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4894   0010F8  D7FA               	bra	u2207
  4895   0010FA                     
  4896                           ;colour_identify.c: 171:             reverseFullSpeed(mL,mR);
  4897   0010FA  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4898   0010FE  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4899   001102  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4900   001106  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4901   00110A  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4902                           
  4903                           ;colour_identify.c: 172:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4904   00110E  0E29               	movlw	41
  4905   001110  6E25               	movwf	(??_motor_response+1)^0,c
  4906   001112  0E96               	movlw	150
  4907   001114  6E24               	movwf	??_motor_response^0,c
  4908   001116  0E7F               	movlw	127
  4909   001118                     u2217:
  4910   001118  2EE8               	decfsz	wreg,f,c
  4911   00111A  D7FE               	bra	u2217
  4912   00111C  2E24               	decfsz	??_motor_response^0,f,c
  4913   00111E  D7FC               	bra	u2217
  4914   001120  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4915   001122  D7FA               	bra	u2217
  4916   001124  F000               	nop	
  4917   001126                     l3060:
  4918                           
  4919                           ;colour_identify.c: 173:             stop(mL,mR);
  4920   001126  C020  F018         	movff	motor_response@mL,stop@mL
  4921   00112A  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4922   00112E  C022  F01A         	movff	motor_response@mR,stop@mR
  4923   001132  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4924   001136  EC39  F015         	call	_stop	;wreg free
  4925   00113A  EF94  F007         	goto	l3016
  4926   00113E                     l3070:
  4927                           
  4928                           ;colour_identify.c: 180:             reverseFullSpeed(mL,mR);
  4929   00113E  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4930   001142  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4931   001146  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4932   00114A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4933   00114E  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4934   001152                     
  4935                           ;colour_identify.c: 181:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4936   001152  0E0D               	movlw	13
  4937   001154  6E25               	movwf	(??_motor_response+1)^0,c
  4938   001156  0E2D               	movlw	45
  4939   001158  6E24               	movwf	??_motor_response^0,c
  4940   00115A  0ED8               	movlw	216
  4941   00115C                     u2227:
  4942   00115C  2EE8               	decfsz	wreg,f,c
  4943   00115E  D7FE               	bra	u2227
  4944   001160  2E24               	decfsz	??_motor_response^0,f,c
  4945   001162  D7FC               	bra	u2227
  4946   001164  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4947   001166  D7FA               	bra	u2227
  4948   001168  EFDD  F007         	goto	l3032
  4949   00116C                     l3086:
  4950                           
  4951                           ;colour_identify.c: 190:             reverseFullSpeed(mL,mR);
  4952   00116C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4953   001170  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4954   001174  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4955   001178  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4956   00117C  ECAF  F014         	call	_reverseFullSpeed	;wreg free
  4957   001180                     
  4958                           ;colour_identify.c: 191:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4959   001180  0E0D               	movlw	13
  4960   001182  6E25               	movwf	(??_motor_response+1)^0,c
  4961   001184  0E2D               	movlw	45
  4962   001186  6E24               	movwf	??_motor_response^0,c
  4963   001188  0ED8               	movlw	216
  4964   00118A                     u2237:
  4965   00118A  2EE8               	decfsz	wreg,f,c
  4966   00118C  D7FE               	bra	u2237
  4967   00118E  2E24               	decfsz	??_motor_response^0,f,c
  4968   001190  D7FC               	bra	u2237
  4969   001192  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4970   001194  D7FA               	bra	u2237
  4971   001196                     
  4972                           ;colour_identify.c: 192:             turnLeft45(mL,mR);
  4973   001196  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4974   00119A  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4975   00119E  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4976   0011A2  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4977   0011A6  EC12  F014         	call	_turnLeft45	;wreg free
  4978   0011AA  EF93  F008         	goto	l3060
  4979   0011AE                     l362:
  4980                           
  4981                           ;colour_identify.c: 201:             LATDbits.LATD7=1;
  4982   0011AE  8E7C               	bsf	124,7,c	;volatile
  4983   0011B0                     
  4984                           ;colour_identify.c: 202:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4985   0011B0  0E11               	movlw	17
  4986   0011B2  6E25               	movwf	(??_motor_response+1)^0,c
  4987   0011B4  0E3C               	movlw	60
  4988   0011B6  6E24               	movwf	??_motor_response^0,c
  4989   0011B8  0ECB               	movlw	203
  4990   0011BA                     u2247:
  4991   0011BA  2EE8               	decfsz	wreg,f,c
  4992   0011BC  D7FE               	bra	u2247
  4993   0011BE  2E24               	decfsz	??_motor_response^0,f,c
  4994   0011C0  D7FC               	bra	u2247
  4995   0011C2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4996   0011C4  D7FA               	bra	u2247
  4997   0011C6  F000               	nop	
  4998   0011C8                     
  4999                           ;colour_identify.c: 203:             LATDbits.LATD7=0;
  5000   0011C8  9E7C               	bcf	124,7,c	;volatile
  5001                           
  5002                           ;colour_identify.c: 204:             break;
  5003   0011CA  EF38  F009         	goto	l365
  5004   0011CE                     l363:
  5005                           
  5006                           ;colour_identify.c: 207:             LATHbits.LATH3=1;
  5007   0011CE  8680               	bsf	128,3,c	;volatile
  5008   0011D0                     
  5009                           ;colour_identify.c: 208:             _delay((unsigned long)((200)*(64000000/4000.0)));
  5010   0011D0  0E11               	movlw	17
  5011   0011D2  6E25               	movwf	(??_motor_response+1)^0,c
  5012   0011D4  0E3C               	movlw	60
  5013   0011D6  6E24               	movwf	??_motor_response^0,c
  5014   0011D8  0ECB               	movlw	203
  5015   0011DA                     u2257:
  5016   0011DA  2EE8               	decfsz	wreg,f,c
  5017   0011DC  D7FE               	bra	u2257
  5018   0011DE  2E24               	decfsz	??_motor_response^0,f,c
  5019   0011E0  D7FC               	bra	u2257
  5020   0011E2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5021   0011E4  D7FA               	bra	u2257
  5022   0011E6  F000               	nop	
  5023   0011E8                     
  5024                           ;colour_identify.c: 209:             LATHbits.LATH3=0;
  5025   0011E8  9680               	bcf	128,3,c	;volatile
  5026                           
  5027                           ;colour_identify.c: 210:             break;
  5028   0011EA  EF38  F009         	goto	l365
  5029   0011EE                     l364:
  5030                           
  5031                           ;colour_identify.c: 212:             LATHbits.LATH1 = 1;
  5032   0011EE  8280               	bsf	128,1,c	;volatile
  5033   0011F0                     
  5034                           ;colour_identify.c: 213:             _delay((unsigned long)((500)*(64000000/4000.0)));
  5035   0011F0  0E29               	movlw	41
  5036   0011F2  6E25               	movwf	(??_motor_response+1)^0,c
  5037   0011F4  0E96               	movlw	150
  5038   0011F6  6E24               	movwf	??_motor_response^0,c
  5039   0011F8  0E7F               	movlw	127
  5040   0011FA                     u2267:
  5041   0011FA  2EE8               	decfsz	wreg,f,c
  5042   0011FC  D7FE               	bra	u2267
  5043   0011FE  2E24               	decfsz	??_motor_response^0,f,c
  5044   001200  D7FC               	bra	u2267
  5045   001202  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5046   001204  D7FA               	bra	u2267
  5047   001206  F000               	nop	
  5048   001208                     
  5049                           ;colour_identify.c: 214:             LATHbits.LATH1 = 0;
  5050   001208  9280               	bcf	128,1,c	;volatile
  5051                           
  5052                           ;colour_identify.c: 215:             break;
  5053   00120A  EF38  F009         	goto	l365
  5054   00120E                     l3116:
  5055   00120E  5026               	movf	motor_response@card^0,w,c
  5056   001210  6E24               	movwf	??_motor_response^0,c
  5057   001212  6A25               	clrf	(??_motor_response+1)^0,c
  5058                           
  5059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5060                           ; Switch size 1, requested type "simple"
  5061                           ; Number of cases is 1, Range of values is 0 to 0
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; simple_byte            4     3 (average)
  5065                           ;	Chosen strategy is simple_byte
  5066   001214  5025               	movf	(??_motor_response+1)^0,w,c
  5067   001216  0A00               	xorlw	0	; case 0
  5068   001218  B4D8               	btfsc	status,2,c
  5069   00121A  EF11  F009         	goto	l3966
  5070   00121E  EFF7  F008         	goto	l364
  5071   001222                     l3966:
  5072                           
  5073                           ; Switch size 1, requested type "simple"
  5074                           ; Number of cases is 9, Range of values is 1 to 9
  5075                           ; switch strategies available:
  5076                           ; Name         Instructions Cycles
  5077                           ; simple_byte           28    15 (average)
  5078                           ;	Chosen strategy is simple_byte
  5079   001222  5024               	movf	??_motor_response^0,w,c
  5080   001224  0A01               	xorlw	1	; case 1
  5081   001226  B4D8               	btfsc	status,2,c
  5082   001228  EF40  F007         	goto	l3000
  5083   00122C  0A03               	xorlw	3	; case 2
  5084   00122E  B4D8               	btfsc	status,2,c
  5085   001230  EF7F  F007         	goto	l3012
  5086   001234  0A01               	xorlw	1	; case 3
  5087   001236  B4D8               	btfsc	status,2,c
  5088   001238  EFB4  F007         	goto	l3024
  5089   00123C  0A07               	xorlw	7	; case 4
  5090   00123E  B4D8               	btfsc	status,2,c
  5091   001240  EFF3  F007         	goto	l3044
  5092   001244  0A01               	xorlw	1	; case 5
  5093   001246  B4D8               	btfsc	status,2,c
  5094   001248  EF68  F008         	goto	l3054
  5095   00124C  0A03               	xorlw	3	; case 6
  5096   00124E  B4D8               	btfsc	status,2,c
  5097   001250  EF9F  F008         	goto	l3070
  5098   001254  0A01               	xorlw	1	; case 7
  5099   001256  B4D8               	btfsc	status,2,c
  5100   001258  EFB6  F008         	goto	l3086
  5101   00125C  0A0F               	xorlw	15	; case 8
  5102   00125E  B4D8               	btfsc	status,2,c
  5103   001260  EFD7  F008         	goto	l362
  5104   001264  0A01               	xorlw	1	; case 9
  5105   001266  B4D8               	btfsc	status,2,c
  5106   001268  EFE7  F008         	goto	l363
  5107   00126C  EFF7  F008         	goto	l364
  5108   001270                     l365:
  5109   001270  0012               	return		;funcret
  5110   001272                     __end_of_motor_response:
  5111                           	callstack 0
  5112                           
  5113 ;; *************** function _turnRight45 *****************
  5114 ;; Defined at:
  5115 ;;		line 116 in file "dc_motor.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5118 ;;		 -> main@motorL(9), 
  5119 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5120 ;;		 -> main@motorR(9), 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;  i               2   29[COMRAM] int 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5135 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5136 ;;Total ram usage:        8 bytes
  5137 ;; Hardware stack levels used: 1
  5138 ;; Hardware stack levels required when called: 6
  5139 ;; This function calls:
  5140 ;;		_setMotorPWM
  5141 ;; This function is called by:
  5142 ;;		_motor_response
  5143 ;;		_motor_response_easy
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text23
  5148   002776                     __ptext23:
  5149                           	callstack 0
  5150   002776                     _turnRight45:
  5151                           	callstack 22
  5152   002776                     
  5153                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5154   002776  EE20 F001          	lfsr	2,1
  5155   00277A  5018               	movf	turnRight45@mL^0,w,c
  5156   00277C  26D9               	addwf	fsr2l,f,c
  5157   00277E  5019               	movf	(turnRight45@mL+1)^0,w,c
  5158   002780  22DA               	addwfc	fsr2h,f,c
  5159   002782  0E01               	movlw	1
  5160   002784  6EDF               	movwf	indf2,c
  5161                           
  5162                           ;dc_motor.c: 119:     mR->direction=0;
  5163   002786  EE20 F001          	lfsr	2,1
  5164   00278A  501A               	movf	turnRight45@mR^0,w,c
  5165   00278C  26D9               	addwf	fsr2l,f,c
  5166   00278E  501B               	movf	(turnRight45@mR+1)^0,w,c
  5167   002790  22DA               	addwfc	fsr2h,f,c
  5168   002792  0E00               	movlw	0
  5169   002794  6EDF               	movwf	indf2,c
  5170   002796                     
  5171                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5172   002796  0E00               	movlw	0
  5173   002798  6E1F               	movwf	(turnRight45@i+1)^0,c
  5174   00279A  0E00               	movlw	0
  5175   00279C  6E1E               	movwf	turnRight45@i^0,c
  5176   00279E                     l2788:
  5177                           
  5178                           ;dc_motor.c: 122:         mR->power=i;
  5179   00279E  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  5180   0027A2  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  5181   0027A6  C01E  FFDF         	movff	turnRight45@i,indf2
  5182                           
  5183                           ;dc_motor.c: 123:         mL->power=i;
  5184   0027AA  C018  FFD9         	movff	turnRight45@mL,fsr2l
  5185   0027AE  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  5186   0027B2  C01E  FFDF         	movff	turnRight45@i,indf2
  5187   0027B6                     
  5188                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5189   0027B6  0E02               	movlw	2
  5190   0027B8  6E1D               	movwf	(??_turnRight45+1)^0,c
  5191   0027BA  0E38               	movlw	56
  5192   0027BC  6E1C               	movwf	??_turnRight45^0,c
  5193   0027BE  0EAD               	movlw	173
  5194   0027C0                     u2277:
  5195   0027C0  2EE8               	decfsz	wreg,f,c
  5196   0027C2  D7FE               	bra	u2277
  5197   0027C4  2E1C               	decfsz	??_turnRight45^0,f,c
  5198   0027C6  D7FC               	bra	u2277
  5199   0027C8  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5200   0027CA  D7FA               	bra	u2277
  5201   0027CC  F000               	nop	
  5202   0027CE                     
  5203                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5204   0027CE  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  5205   0027D2  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5206   0027D6  EC85  F00F         	call	_setMotorPWM	;wreg free
  5207   0027DA                     
  5208                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5209   0027DA  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  5210   0027DE  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5211   0027E2  EC85  F00F         	call	_setMotorPWM	;wreg free
  5212   0027E6  0E0A               	movlw	10
  5213   0027E8  261E               	addwf	turnRight45@i^0,f,c
  5214   0027EA  0E00               	movlw	0
  5215   0027EC  221F               	addwfc	(turnRight45@i+1)^0,f,c
  5216   0027EE  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  5217   0027F0  EF03  F014         	goto	u1301
  5218   0027F4  501F               	movf	(turnRight45@i+1)^0,w,c
  5219   0027F6  E109               	bnz	u1300
  5220   0027F8  0E50               	movlw	80
  5221   0027FA  5C1E               	subwf	turnRight45@i^0,w,c
  5222   0027FC  A0D8               	btfss	status,0,c
  5223   0027FE  EF03  F014         	goto	u1301
  5224   002802  EF05  F014         	goto	u1300
  5225   002806                     u1301:
  5226   002806  EFCF  F013         	goto	l2788
  5227   00280A                     u1300:
  5228   00280A                     
  5229                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5230   00280A  0E06               	movlw	6
  5231   00280C  6E1D               	movwf	(??_turnRight45+1)^0,c
  5232   00280E  0E47               	movlw	71
  5233   002810  6E1C               	movwf	??_turnRight45^0,c
  5234   002812  0EA0               	movlw	160
  5235   002814                     u2287:
  5236   002814  2EE8               	decfsz	wreg,f,c
  5237   002816  D7FE               	bra	u2287
  5238   002818  2E1C               	decfsz	??_turnRight45^0,f,c
  5239   00281A  D7FC               	bra	u2287
  5240   00281C  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5241   00281E  D7FA               	bra	u2287
  5242   002820  D000               	nop2	
  5243   002822  0012               	return		;funcret
  5244   002824                     __end_of_turnRight45:
  5245                           	callstack 0
  5246                           
  5247 ;; *************** function _turnLeft45 *****************
  5248 ;; Defined at:
  5249 ;;		line 101 in file "dc_motor.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5252 ;;		 -> main@motorL(9), 
  5253 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5254 ;;		 -> main@motorR(9), 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  i               2   29[COMRAM] int 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      void 
  5259 ;; Registers used:
  5260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5269 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5270 ;;Total ram usage:        8 bytes
  5271 ;; Hardware stack levels used: 1
  5272 ;; Hardware stack levels required when called: 6
  5273 ;; This function calls:
  5274 ;;		_setMotorPWM
  5275 ;; This function is called by:
  5276 ;;		_motor_response
  5277 ;;		_motor_response_easy
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text24
  5282   002824                     __ptext24:
  5283                           	callstack 0
  5284   002824                     _turnLeft45:
  5285                           	callstack 22
  5286   002824                     
  5287                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5288   002824  EE20 F001          	lfsr	2,1
  5289   002828  5018               	movf	turnLeft45@mL^0,w,c
  5290   00282A  26D9               	addwf	fsr2l,f,c
  5291   00282C  5019               	movf	(turnLeft45@mL+1)^0,w,c
  5292   00282E  22DA               	addwfc	fsr2h,f,c
  5293   002830  0E00               	movlw	0
  5294   002832  6EDF               	movwf	indf2,c
  5295                           
  5296                           ;dc_motor.c: 104:     mR->direction=1;
  5297   002834  EE20 F001          	lfsr	2,1
  5298   002838  501A               	movf	turnLeft45@mR^0,w,c
  5299   00283A  26D9               	addwf	fsr2l,f,c
  5300   00283C  501B               	movf	(turnLeft45@mR+1)^0,w,c
  5301   00283E  22DA               	addwfc	fsr2h,f,c
  5302   002840  0E01               	movlw	1
  5303   002842  6EDF               	movwf	indf2,c
  5304   002844                     
  5305                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5306   002844  0E00               	movlw	0
  5307   002846  6E1F               	movwf	(turnLeft45@i+1)^0,c
  5308   002848  0E00               	movlw	0
  5309   00284A  6E1E               	movwf	turnLeft45@i^0,c
  5310   00284C                     l2766:
  5311                           
  5312                           ;dc_motor.c: 107:         mR->power=i;
  5313   00284C  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  5314   002850  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5315   002854  C01E  FFDF         	movff	turnLeft45@i,indf2
  5316                           
  5317                           ;dc_motor.c: 108:         mL->power=i;
  5318   002858  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  5319   00285C  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5320   002860  C01E  FFDF         	movff	turnLeft45@i,indf2
  5321   002864                     
  5322                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5323   002864  0E02               	movlw	2
  5324   002866  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5325   002868  0E38               	movlw	56
  5326   00286A  6E1C               	movwf	??_turnLeft45^0,c
  5327   00286C  0EAD               	movlw	173
  5328   00286E                     u2297:
  5329   00286E  2EE8               	decfsz	wreg,f,c
  5330   002870  D7FE               	bra	u2297
  5331   002872  2E1C               	decfsz	??_turnLeft45^0,f,c
  5332   002874  D7FC               	bra	u2297
  5333   002876  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5334   002878  D7FA               	bra	u2297
  5335   00287A  F000               	nop	
  5336   00287C                     
  5337                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5338   00287C  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  5339   002880  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5340   002884  EC85  F00F         	call	_setMotorPWM	;wreg free
  5341   002888                     
  5342                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5343   002888  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  5344   00288C  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5345   002890  EC85  F00F         	call	_setMotorPWM	;wreg free
  5346   002894  0E0A               	movlw	10
  5347   002896  261E               	addwf	turnLeft45@i^0,f,c
  5348   002898  0E00               	movlw	0
  5349   00289A  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  5350   00289C  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  5351   00289E  EF5A  F014         	goto	u1291
  5352   0028A2  501F               	movf	(turnLeft45@i+1)^0,w,c
  5353   0028A4  E109               	bnz	u1290
  5354   0028A6  0E50               	movlw	80
  5355   0028A8  5C1E               	subwf	turnLeft45@i^0,w,c
  5356   0028AA  A0D8               	btfss	status,0,c
  5357   0028AC  EF5A  F014         	goto	u1291
  5358   0028B0  EF5C  F014         	goto	u1290
  5359   0028B4                     u1291:
  5360   0028B4  EF26  F014         	goto	l2766
  5361   0028B8                     u1290:
  5362   0028B8                     
  5363                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5364   0028B8  0E06               	movlw	6
  5365   0028BA  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5366   0028BC  0E47               	movlw	71
  5367   0028BE  6E1C               	movwf	??_turnLeft45^0,c
  5368   0028C0  0EA0               	movlw	160
  5369   0028C2                     u2307:
  5370   0028C2  2EE8               	decfsz	wreg,f,c
  5371   0028C4  D7FE               	bra	u2307
  5372   0028C6  2E1C               	decfsz	??_turnLeft45^0,f,c
  5373   0028C8  D7FC               	bra	u2307
  5374   0028CA  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5375   0028CC  D7FA               	bra	u2307
  5376   0028CE  D000               	nop2	
  5377   0028D0  0012               	return		;funcret
  5378   0028D2                     __end_of_turnLeft45:
  5379                           	callstack 0
  5380                           
  5381 ;; *************** function _stop *****************
  5382 ;; Defined at:
  5383 ;;		line 84 in file "dc_motor.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5386 ;;		 -> main@motorL(9), 
  5387 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5388 ;;		 -> main@motorR(9), 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5403 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5404 ;;Total ram usage:        5 bytes
  5405 ;; Hardware stack levels used: 1
  5406 ;; Hardware stack levels required when called: 6
  5407 ;; This function calls:
  5408 ;;		_setMotorPWM
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;;		_motor_response
  5412 ;;		_motor_response_easy
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text25
  5417   002A72                     __ptext25:
  5418                           	callstack 0
  5419   002A72                     _stop:
  5420                           	callstack 24
  5421   002A72                     
  5422                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5423   002A72  EF4E  F015         	goto	l2748
  5424   002A76                     l2742:
  5425                           
  5426                           ;dc_motor.c: 87:         mL->power -=10;
  5427   002A76  C018  FFD9         	movff	stop@mL,fsr2l
  5428   002A7A  C019  FFDA         	movff	stop@mL+1,fsr2h
  5429   002A7E  0E0A               	movlw	10
  5430   002A80  5EDF               	subwf	indf2,f,c
  5431   002A82                     
  5432                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5433   002A82  0E2A               	movlw	42
  5434   002A84  6E1C               	movwf	??_stop^0,c
  5435   002A86  0E8E               	movlw	142
  5436   002A88                     u2317:
  5437   002A88  2EE8               	decfsz	wreg,f,c
  5438   002A8A  D7FE               	bra	u2317
  5439   002A8C  2E1C               	decfsz	??_stop^0,f,c
  5440   002A8E  D7FC               	bra	u2317
  5441   002A90                     
  5442                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5443   002A90  C018  F012         	movff	stop@mL,setMotorPWM@m
  5444   002A94  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5445   002A98  EC85  F00F         	call	_setMotorPWM	;wreg free
  5446   002A9C                     l2748:
  5447                           
  5448                           ;dc_motor.c: 86:     while(mL->power !=0){
  5449   002A9C  C018  FFD9         	movff	stop@mL,fsr2l
  5450   002AA0  C019  FFDA         	movff	stop@mL+1,fsr2h
  5451   002AA4  50DF               	movf	indf2,w,c
  5452   002AA6  A4D8               	btfss	status,2,c
  5453   002AA8  EF58  F015         	goto	u1271
  5454   002AAC  EF5A  F015         	goto	u1270
  5455   002AB0                     u1271:
  5456   002AB0  EF3B  F015         	goto	l2742
  5457   002AB4                     u1270:
  5458   002AB4  EF6F  F015         	goto	l2756
  5459   002AB8                     l2750:
  5460                           
  5461                           ;dc_motor.c: 92:         mR->power -=10;
  5462   002AB8  C01A  FFD9         	movff	stop@mR,fsr2l
  5463   002ABC  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5464   002AC0  0E0A               	movlw	10
  5465   002AC2  5EDF               	subwf	indf2,f,c
  5466   002AC4                     
  5467                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5468   002AC4  0E2A               	movlw	42
  5469   002AC6  6E1C               	movwf	??_stop^0,c
  5470   002AC8  0E8E               	movlw	142
  5471   002ACA                     u2327:
  5472   002ACA  2EE8               	decfsz	wreg,f,c
  5473   002ACC  D7FE               	bra	u2327
  5474   002ACE  2E1C               	decfsz	??_stop^0,f,c
  5475   002AD0  D7FC               	bra	u2327
  5476   002AD2                     
  5477                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5478   002AD2  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5479   002AD6  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5480   002ADA  EC85  F00F         	call	_setMotorPWM	;wreg free
  5481   002ADE                     l2756:
  5482                           
  5483                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5484   002ADE  C01A  FFD9         	movff	stop@mR,fsr2l
  5485   002AE2  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5486   002AE6  50DF               	movf	indf2,w,c
  5487   002AE8  A4D8               	btfss	status,2,c
  5488   002AEA  EF79  F015         	goto	u1281
  5489   002AEE  EF7B  F015         	goto	u1280
  5490   002AF2                     u1281:
  5491   002AF2  EF5C  F015         	goto	l2750
  5492   002AF6                     u1280:
  5493   002AF6  0012               	return		;funcret
  5494   002AF8                     __end_of_stop:
  5495                           	callstack 0
  5496                           
  5497 ;; *************** function _reverseFullSpeed *****************
  5498 ;; Defined at:
  5499 ;;		line 145 in file "dc_motor.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5502 ;;		 -> main@motorL(9), 
  5503 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5504 ;;		 -> main@motorR(9), 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  i               2   28[COMRAM] int 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1    wreg      void 
  5509 ;; Registers used:
  5510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5516 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5519 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;Total ram usage:        7 bytes
  5521 ;; Hardware stack levels used: 1
  5522 ;; Hardware stack levels required when called: 6
  5523 ;; This function calls:
  5524 ;;		_setMotorPWM
  5525 ;; This function is called by:
  5526 ;;		_main
  5527 ;;		_motor_response
  5528 ;;		_motor_response_easy
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text26
  5533   00295E                     __ptext26:
  5534                           	callstack 0
  5535   00295E                     _reverseFullSpeed:
  5536                           	callstack 24
  5537   00295E                     
  5538                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5539   00295E  EE20 F001          	lfsr	2,1
  5540   002962  5018               	movf	reverseFullSpeed@mL^0,w,c
  5541   002964  26D9               	addwf	fsr2l,f,c
  5542   002966  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5543   002968  22DA               	addwfc	fsr2h,f,c
  5544   00296A  0E00               	movlw	0
  5545   00296C  6EDF               	movwf	indf2,c
  5546                           
  5547                           ;dc_motor.c: 148:     mR->direction=0;
  5548   00296E  EE20 F001          	lfsr	2,1
  5549   002972  501A               	movf	reverseFullSpeed@mR^0,w,c
  5550   002974  26D9               	addwf	fsr2l,f,c
  5551   002976  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5552   002978  22DA               	addwfc	fsr2h,f,c
  5553   00297A  0E00               	movlw	0
  5554   00297C  6EDF               	movwf	indf2,c
  5555   00297E                     
  5556                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5557   00297E  0E00               	movlw	0
  5558   002980  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  5559   002982  0E00               	movlw	0
  5560   002984  6E1D               	movwf	reverseFullSpeed@i^0,c
  5561   002986                     l2810:
  5562                           
  5563                           ;dc_motor.c: 150:         mL->power=i;
  5564   002986  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5565   00298A  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5566   00298E  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5567                           
  5568                           ;dc_motor.c: 151:         mR->power=i;
  5569   002992  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5570   002996  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5571   00299A  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5572   00299E                     
  5573                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5574   00299E  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5575   0029A2  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5576   0029A6  EC85  F00F         	call	_setMotorPWM	;wreg free
  5577   0029AA                     
  5578                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5579   0029AA  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5580   0029AE  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5581   0029B2  EC85  F00F         	call	_setMotorPWM	;wreg free
  5582   0029B6                     
  5583                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5584   0029B6  0ED0               	movlw	208
  5585   0029B8  6E1C               	movwf	??_reverseFullSpeed^0,c
  5586   0029BA  0ECA               	movlw	202
  5587   0029BC                     u2337:
  5588   0029BC  2EE8               	decfsz	wreg,f,c
  5589   0029BE  D7FE               	bra	u2337
  5590   0029C0  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  5591   0029C2  D7FC               	bra	u2337
  5592   0029C4                     
  5593                           ;dc_motor.c: 155:     }
  5594   0029C4  0E0A               	movlw	10
  5595   0029C6  261D               	addwf	reverseFullSpeed@i^0,f,c
  5596   0029C8  0E00               	movlw	0
  5597   0029CA  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5598   0029CC  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5599   0029CE  EFF2  F014         	goto	u1311
  5600   0029D2  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5601   0029D4  E109               	bnz	u1310
  5602   0029D6  0E3C               	movlw	60
  5603   0029D8  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5604   0029DA  A0D8               	btfss	status,0,c
  5605   0029DC  EFF2  F014         	goto	u1311
  5606   0029E0  EFF4  F014         	goto	u1310
  5607   0029E4                     u1311:
  5608   0029E4  EFC3  F014         	goto	l2810
  5609   0029E8                     u1310:
  5610   0029E8  0012               	return		;funcret
  5611   0029EA                     __end_of_reverseFullSpeed:
  5612                           	callstack 0
  5613                           
  5614 ;; *************** function _setMotorPWM *****************
  5615 ;; Defined at:
  5616 ;;		line 61 in file "dc_motor.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5619 ;;		 -> main@motorR(9), main@motorL(9), 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  negDuty         1   22[COMRAM] unsigned char 
  5622 ;;  posDuty         1   21[COMRAM] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;Total ram usage:        6 bytes
  5637 ;; Hardware stack levels used: 1
  5638 ;; Hardware stack levels required when called: 5
  5639 ;; This function calls:
  5640 ;;		___lwdiv
  5641 ;;		___wmul
  5642 ;; This function is called by:
  5643 ;;		_stop
  5644 ;;		_turnLeft45
  5645 ;;		_turnRight45
  5646 ;;		_fullSpeedAhead
  5647 ;;		_reverseFullSpeed
  5648 ;;		_main
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text27
  5653   001F0A                     __ptext27:
  5654                           	callstack 0
  5655   001F0A                     _setMotorPWM:
  5656                           	callstack 24
  5657   001F0A                     
  5658                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5659   001F0A  EE20 F002          	lfsr	2,2
  5660   001F0E  5012               	movf	setMotorPWM@m^0,w,c
  5661   001F10  26D9               	addwf	fsr2l,f,c
  5662   001F12  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5663   001F14  22DA               	addwfc	fsr2h,f,c
  5664   001F16  50DF               	movf	indf2,w,c
  5665   001F18  B4D8               	btfsc	status,2,c
  5666   001F1A  EF91  F00F         	goto	u1221
  5667   001F1E  EF93  F00F         	goto	u1220
  5668   001F22                     u1221:
  5669   001F22  EFC7  F00F         	goto	l2674
  5670   001F26                     u1220:
  5671   001F26                     
  5672                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5673   001F26  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5674   001F2A  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5675   001F2E  50DF               	movf	indf2,w,c
  5676   001F30  6E14               	movwf	??_setMotorPWM^0,c
  5677   001F32  5014               	movf	??_setMotorPWM^0,w,c
  5678   001F34  6E05               	movwf	___wmul@multiplier^0,c
  5679   001F36  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5680   001F38  EE20 F003          	lfsr	2,3
  5681   001F3C  5012               	movf	setMotorPWM@m^0,w,c
  5682   001F3E  26D9               	addwf	fsr2l,f,c
  5683   001F40  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5684   001F42  22DA               	addwfc	fsr2h,f,c
  5685   001F44  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5686   001F48  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5687   001F4C  EC62  F018         	call	___wmul	;wreg free
  5688   001F50  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5689   001F54  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5690   001F58  0E00               	movlw	0
  5691   001F5A  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5692   001F5C  0E64               	movlw	100
  5693   001F5E  6E0D               	movwf	___lwdiv@divisor^0,c
  5694   001F60  ECFB  F015         	call	___lwdiv	;wreg free
  5695   001F64  EE20 F003          	lfsr	2,3
  5696   001F68  5012               	movf	setMotorPWM@m^0,w,c
  5697   001F6A  26D9               	addwf	fsr2l,f,c
  5698   001F6C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5699   001F6E  22DA               	addwfc	fsr2h,f,c
  5700   001F70  50DF               	movf	indf2,w,c
  5701   001F72  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5702   001F74  500B               	movf	?___lwdiv^0,w,c
  5703   001F76  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5704   001F78  6E16               	movwf	setMotorPWM@posDuty^0,c
  5705   001F7A                     
  5706                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5707   001F7A  EE20 F003          	lfsr	2,3
  5708   001F7E  5012               	movf	setMotorPWM@m^0,w,c
  5709   001F80  26D9               	addwf	fsr2l,f,c
  5710   001F82  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5711   001F84  22DA               	addwfc	fsr2h,f,c
  5712   001F86  50DF               	movf	indf2,w,c
  5713   001F88  6E17               	movwf	setMotorPWM@negDuty^0,c
  5714                           
  5715                           ;dc_motor.c: 68:     }
  5716   001F8A  EFEA  F00F         	goto	l2678
  5717   001F8E                     l2674:
  5718                           
  5719                           ;dc_motor.c: 70:         posDuty=0;
  5720   001F8E  0E00               	movlw	0
  5721   001F90  6E16               	movwf	setMotorPWM@posDuty^0,c
  5722   001F92                     
  5723                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5724   001F92  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5725   001F96  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5726   001F9A  50DF               	movf	indf2,w,c
  5727   001F9C  6E14               	movwf	??_setMotorPWM^0,c
  5728   001F9E  5014               	movf	??_setMotorPWM^0,w,c
  5729   001FA0  6E05               	movwf	___wmul@multiplier^0,c
  5730   001FA2  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5731   001FA4  EE20 F003          	lfsr	2,3
  5732   001FA8  5012               	movf	setMotorPWM@m^0,w,c
  5733   001FAA  26D9               	addwf	fsr2l,f,c
  5734   001FAC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5735   001FAE  22DA               	addwfc	fsr2h,f,c
  5736   001FB0  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5737   001FB4  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5738   001FB8  EC62  F018         	call	___wmul	;wreg free
  5739   001FBC  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5740   001FC0  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5741   001FC4  0E00               	movlw	0
  5742   001FC6  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5743   001FC8  0E64               	movlw	100
  5744   001FCA  6E0D               	movwf	___lwdiv@divisor^0,c
  5745   001FCC  ECFB  F015         	call	___lwdiv	;wreg free
  5746   001FD0  500B               	movf	?___lwdiv^0,w,c
  5747   001FD2  6E17               	movwf	setMotorPWM@negDuty^0,c
  5748   001FD4                     l2678:
  5749                           
  5750                           ;dc_motor.c: 74:     if (m->direction) {
  5751   001FD4  EE20 F001          	lfsr	2,1
  5752   001FD8  5012               	movf	setMotorPWM@m^0,w,c
  5753   001FDA  26D9               	addwf	fsr2l,f,c
  5754   001FDC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5755   001FDE  22DA               	addwfc	fsr2h,f,c
  5756   001FE0  50DF               	movf	indf2,w,c
  5757   001FE2  B4D8               	btfsc	status,2,c
  5758   001FE4  EFF6  F00F         	goto	u1231
  5759   001FE8  EFF8  F00F         	goto	u1230
  5760   001FEC                     u1231:
  5761   001FEC  EF1A  F010         	goto	l2682
  5762   001FF0                     u1230:
  5763   001FF0                     
  5764                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5765   001FF0  EE20 F005          	lfsr	2,5
  5766   001FF4  5012               	movf	setMotorPWM@m^0,w,c
  5767   001FF6  26D9               	addwf	fsr2l,f,c
  5768   001FF8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5769   001FFA  22DA               	addwfc	fsr2h,f,c
  5770   001FFC  CFDE F014          	movff	postinc2,??_setMotorPWM
  5771   002000  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5772   002004  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5773   002008  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5774   00200C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5775                           
  5776                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5777   002010  EE20 F007          	lfsr	2,7
  5778   002014  5012               	movf	setMotorPWM@m^0,w,c
  5779   002016  26D9               	addwf	fsr2l,f,c
  5780   002018  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5781   00201A  22DA               	addwfc	fsr2h,f,c
  5782   00201C  CFDE F014          	movff	postinc2,??_setMotorPWM
  5783   002020  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5784   002024  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5785   002028  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5786   00202C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5787                           
  5788                           ;dc_motor.c: 77:     } else {
  5789   002030  EF3A  F010         	goto	l86
  5790   002034                     l2682:
  5791                           
  5792                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5793   002034  EE20 F005          	lfsr	2,5
  5794   002038  5012               	movf	setMotorPWM@m^0,w,c
  5795   00203A  26D9               	addwf	fsr2l,f,c
  5796   00203C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5797   00203E  22DA               	addwfc	fsr2h,f,c
  5798   002040  CFDE F014          	movff	postinc2,??_setMotorPWM
  5799   002044  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5800   002048  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5801   00204C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5802   002050  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5803                           
  5804                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5805   002054  EE20 F007          	lfsr	2,7
  5806   002058  5012               	movf	setMotorPWM@m^0,w,c
  5807   00205A  26D9               	addwf	fsr2l,f,c
  5808   00205C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5809   00205E  22DA               	addwfc	fsr2h,f,c
  5810   002060  CFDE F014          	movff	postinc2,??_setMotorPWM
  5811   002064  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5812   002068  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5813   00206C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5814   002070  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5815   002074                     l86:
  5816   002074  0012               	return		;funcret
  5817   002076                     __end_of_setMotorPWM:
  5818                           	callstack 0
  5819                           
  5820 ;; *************** function ___wmul *****************
  5821 ;; Defined at:
  5822 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  multiplier      2    4[COMRAM] unsigned int 
  5825 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  product         2    8[COMRAM] unsigned int 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  2    4[COMRAM] unsigned int 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, prodl, prodh
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5840 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5841 ;;Total ram usage:        6 bytes
  5842 ;; Hardware stack levels used: 1
  5843 ;; Hardware stack levels required when called: 4
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_setMotorPWM
  5848 ;;		_normalise_readings
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text28
  5853   0030C4                     __ptext28:
  5854                           	callstack 0
  5855   0030C4                     ___wmul:
  5856                           	callstack 24
  5857   0030C4  5005               	movf	___wmul@multiplier^0,w,c
  5858   0030C6  0207               	mulwf	___wmul@multiplicand^0,c
  5859   0030C8  CFF3 F009          	movff	prodl,___wmul@product
  5860   0030CC  CFF4 F00A          	movff	prodh,___wmul@product+1
  5861   0030D0  5005               	movf	___wmul@multiplier^0,w,c
  5862   0030D2  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5863   0030D4  50F3               	movf	243,w,c
  5864   0030D6  260A               	addwf	(___wmul@product+1)^0,f,c
  5865   0030D8  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5866   0030DA  0207               	mulwf	___wmul@multiplicand^0,c
  5867   0030DC  50F3               	movf	243,w,c
  5868   0030DE  260A               	addwf	(___wmul@product+1)^0,f,c
  5869   0030E0  C009  F005         	movff	___wmul@product,?___wmul
  5870   0030E4  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5871   0030E8  0012               	return		;funcret
  5872   0030EA                     __end_of___wmul:
  5873                           	callstack 0
  5874                           
  5875 ;; *************** function ___lwdiv *****************
  5876 ;; Defined at:
  5877 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  dividend        2   10[COMRAM] unsigned int 
  5880 ;;  divisor         2   12[COMRAM] unsigned int 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  quotient        2   14[COMRAM] unsigned int 
  5883 ;;  counter         1   16[COMRAM] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2   10[COMRAM] unsigned int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5893 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5894 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5896 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5897 ;;Total ram usage:        7 bytes
  5898 ;; Hardware stack levels used: 1
  5899 ;; Hardware stack levels required when called: 4
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_setMotorPWM
  5904 ;;		_normalise_readings
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text29
  5909   002BF6                     __ptext29:
  5910                           	callstack 0
  5911   002BF6                     ___lwdiv:
  5912                           	callstack 24
  5913   002BF6  0E00               	movlw	0
  5914   002BF8  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5915   002BFA  0E00               	movlw	0
  5916   002BFC  6E0F               	movwf	___lwdiv@quotient^0,c
  5917   002BFE  500D               	movf	___lwdiv@divisor^0,w,c
  5918   002C00  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5919   002C02  B4D8               	btfsc	status,2,c
  5920   002C04  EF06  F016         	goto	u1071
  5921   002C08  EF08  F016         	goto	u1070
  5922   002C0C                     u1071:
  5923   002C0C  EF30  F016         	goto	l1023
  5924   002C10                     u1070:
  5925   002C10  0E01               	movlw	1
  5926   002C12  6E11               	movwf	___lwdiv@counter^0,c
  5927   002C14  EF10  F016         	goto	l2572
  5928   002C18                     l2570:
  5929   002C18  90D8               	bcf	status,0,c
  5930   002C1A  360D               	rlcf	___lwdiv@divisor^0,f,c
  5931   002C1C  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5932   002C1E  2A11               	incf	___lwdiv@counter^0,f,c
  5933   002C20                     l2572:
  5934   002C20  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5935   002C22  EF15  F016         	goto	u1081
  5936   002C26  EF17  F016         	goto	u1080
  5937   002C2A                     u1081:
  5938   002C2A  EF0C  F016         	goto	l2570
  5939   002C2E                     u1080:
  5940   002C2E                     l2574:
  5941   002C2E  90D8               	bcf	status,0,c
  5942   002C30  360F               	rlcf	___lwdiv@quotient^0,f,c
  5943   002C32  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5944   002C34  500D               	movf	___lwdiv@divisor^0,w,c
  5945   002C36  5C0B               	subwf	___lwdiv@dividend^0,w,c
  5946   002C38  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5947   002C3A  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5948   002C3C  A0D8               	btfss	status,0,c
  5949   002C3E  EF23  F016         	goto	u1091
  5950   002C42  EF25  F016         	goto	u1090
  5951   002C46                     u1091:
  5952   002C46  EF2A  F016         	goto	l2582
  5953   002C4A                     u1090:
  5954   002C4A  500D               	movf	___lwdiv@divisor^0,w,c
  5955   002C4C  5E0B               	subwf	___lwdiv@dividend^0,f,c
  5956   002C4E  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5957   002C50  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5958   002C52  800F               	bsf	___lwdiv@quotient^0,0,c
  5959   002C54                     l2582:
  5960   002C54  90D8               	bcf	status,0,c
  5961   002C56  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5962   002C58  320D               	rrcf	___lwdiv@divisor^0,f,c
  5963   002C5A  2E11               	decfsz	___lwdiv@counter^0,f,c
  5964   002C5C  EF17  F016         	goto	l2574
  5965   002C60                     l1023:
  5966   002C60  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5967   002C64  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5968   002C68  0012               	return		;funcret
  5969   002C6A                     __end_of___lwdiv:
  5970                           	callstack 0
  5971                           
  5972 ;; *************** function _make_master_closeness *****************
  5973 ;; Defined at:
  5974 ;;		line 99 in file "colour_identify.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  buf             2    4[COMRAM] PTR unsigned char 
  5977 ;;		 -> main@buf(150), 
  5978 ;;  normalised_v    2    6[COMRAM] PTR unsigned int [9]
  5979 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  5980 ;;  master_close    2    8[COMRAM] PTR unsigned int 
  5981 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  i               1   40[COMRAM] enum E14551
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5993 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5997 ;;Total ram usage:       37 bytes
  5998 ;; Hardware stack levels used: 1
  5999 ;; Hardware stack levels required when called: 4
  6000 ;; This function calls:
  6001 ;;		Nothing
  6002 ;; This function is called by:
  6003 ;;		_card_response
  6004 ;;		_card_response_easy
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text30
  6009   0025A0                     __ptext30:
  6010                           	callstack 0
  6011   0025A0                     _make_master_closeness:
  6012                           	callstack 25
  6013   0025A0                     
  6014                           ;colour_identify.c: 100:     for(colour i = RED; i<=BLACK; i++){
  6015   0025A0  0E01               	movlw	1
  6016   0025A2  6E29               	movwf	make_master_closeness@i^0,c
  6017   0025A4                     l2968:
  6018                           
  6019                           ;colour_identify.c: 102:         master_closeness[i] = (normalised_values[CLEAR][i] + no
      +                          rmalised_values[RED][i] + normalised_values[GREEN][i] + normalised_values[BLUE][i])/4;
  6020   0025A4  5029               	movf	make_master_closeness@i^0,w,c
  6021   0025A6  0D02               	mullw	2
  6022   0025A8  CFF3 F00B          	movff	prodl,??_make_master_closeness
  6023   0025AC  CFF4 F00C          	movff	prodh,??_make_master_closeness+1
  6024   0025B0  500B               	movf	??_make_master_closeness^0,w,c
  6025   0025B2  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6026   0025B4  6E0D               	movwf	(??_make_master_closeness+2)^0,c
  6027   0025B6  500C               	movf	(??_make_master_closeness+1)^0,w,c
  6028   0025B8  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6029   0025BA  6E0E               	movwf	(??_make_master_closeness+3)^0,c
  6030   0025BC  0E36               	movlw	54
  6031   0025BE  240D               	addwf	(??_make_master_closeness+2)^0,w,c
  6032   0025C0  6ED9               	movwf	fsr2l,c
  6033   0025C2  0E00               	movlw	0
  6034   0025C4  200E               	addwfc	(??_make_master_closeness+3)^0,w,c
  6035   0025C6  6EDA               	movwf	fsr2h,c
  6036   0025C8  CFDE F00F          	movff	postinc2,??_make_master_closeness+4
  6037   0025CC  CFDD F010          	movff	postdec2,??_make_master_closeness+5
  6038   0025D0  5029               	movf	make_master_closeness@i^0,w,c
  6039   0025D2  0D02               	mullw	2
  6040   0025D4  CFF3 F011          	movff	prodl,??_make_master_closeness+6
  6041   0025D8  CFF4 F012          	movff	prodh,??_make_master_closeness+7
  6042   0025DC  5011               	movf	(??_make_master_closeness+6)^0,w,c
  6043   0025DE  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6044   0025E0  6E13               	movwf	(??_make_master_closeness+8)^0,c
  6045   0025E2  5012               	movf	(??_make_master_closeness+7)^0,w,c
  6046   0025E4  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6047   0025E6  6E14               	movwf	(??_make_master_closeness+9)^0,c
  6048   0025E8  0E24               	movlw	36
  6049   0025EA  2413               	addwf	(??_make_master_closeness+8)^0,w,c
  6050   0025EC  6ED9               	movwf	fsr2l,c
  6051   0025EE  0E00               	movlw	0
  6052   0025F0  2014               	addwfc	(??_make_master_closeness+9)^0,w,c
  6053   0025F2  6EDA               	movwf	fsr2h,c
  6054   0025F4  CFDE F015          	movff	postinc2,??_make_master_closeness+10
  6055   0025F8  CFDD F016          	movff	postdec2,??_make_master_closeness+11
  6056   0025FC  5029               	movf	make_master_closeness@i^0,w,c
  6057   0025FE  0D02               	mullw	2
  6058   002600  CFF3 F017          	movff	prodl,??_make_master_closeness+12
  6059   002604  CFF4 F018          	movff	prodh,??_make_master_closeness+13
  6060   002608  5017               	movf	(??_make_master_closeness+12)^0,w,c
  6061   00260A  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6062   00260C  6E19               	movwf	(??_make_master_closeness+14)^0,c
  6063   00260E  5018               	movf	(??_make_master_closeness+13)^0,w,c
  6064   002610  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6065   002612  6E1A               	movwf	(??_make_master_closeness+15)^0,c
  6066   002614  0E12               	movlw	18
  6067   002616  2419               	addwf	(??_make_master_closeness+14)^0,w,c
  6068   002618  6ED9               	movwf	fsr2l,c
  6069   00261A  0E00               	movlw	0
  6070   00261C  201A               	addwfc	(??_make_master_closeness+15)^0,w,c
  6071   00261E  6EDA               	movwf	fsr2h,c
  6072   002620  CFDE F01B          	movff	postinc2,??_make_master_closeness+16
  6073   002624  CFDD F01C          	movff	postdec2,??_make_master_closeness+17
  6074   002628  5029               	movf	make_master_closeness@i^0,w,c
  6075   00262A  0D02               	mullw	2
  6076   00262C  CFF3 F01D          	movff	prodl,??_make_master_closeness+18
  6077   002630  CFF4 F01E          	movff	prodh,??_make_master_closeness+19
  6078   002634  501D               	movf	(??_make_master_closeness+18)^0,w,c
  6079   002636  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6080   002638  6ED9               	movwf	fsr2l,c
  6081   00263A  501E               	movf	(??_make_master_closeness+19)^0,w,c
  6082   00263C  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6083   00263E  6EDA               	movwf	fsr2h,c
  6084   002640  CFDE F01F          	movff	postinc2,??_make_master_closeness+20
  6085   002644  CFDD F020          	movff	postdec2,??_make_master_closeness+21
  6086   002648  501B               	movf	(??_make_master_closeness+16)^0,w,c
  6087   00264A  241F               	addwf	(??_make_master_closeness+20)^0,w,c
  6088   00264C  6E21               	movwf	(??_make_master_closeness+22)^0,c
  6089   00264E  501C               	movf	(??_make_master_closeness+17)^0,w,c
  6090   002650  2020               	addwfc	(??_make_master_closeness+21)^0,w,c
  6091   002652  6E22               	movwf	(??_make_master_closeness+23)^0,c
  6092   002654  5015               	movf	(??_make_master_closeness+10)^0,w,c
  6093   002656  2421               	addwf	(??_make_master_closeness+22)^0,w,c
  6094   002658  6E23               	movwf	(??_make_master_closeness+24)^0,c
  6095   00265A  5016               	movf	(??_make_master_closeness+11)^0,w,c
  6096   00265C  2022               	addwfc	(??_make_master_closeness+23)^0,w,c
  6097   00265E  6E24               	movwf	(??_make_master_closeness+25)^0,c
  6098   002660  500F               	movf	(??_make_master_closeness+4)^0,w,c
  6099   002662  2423               	addwf	(??_make_master_closeness+24)^0,w,c
  6100   002664  6E25               	movwf	(??_make_master_closeness+26)^0,c
  6101   002666  5010               	movf	(??_make_master_closeness+5)^0,w,c
  6102   002668  2024               	addwfc	(??_make_master_closeness+25)^0,w,c
  6103   00266A  6E26               	movwf	(??_make_master_closeness+27)^0,c
  6104   00266C  90D8               	bcf	status,0,c
  6105   00266E  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6106   002670  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6107   002672  90D8               	bcf	status,0,c
  6108   002674  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6109   002676  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6110   002678  5029               	movf	make_master_closeness@i^0,w,c
  6111   00267A  0D02               	mullw	2
  6112   00267C  CFF3 F027          	movff	prodl,??_make_master_closeness+28
  6113   002680  CFF4 F028          	movff	prodh,??_make_master_closeness+29
  6114   002684  5027               	movf	(??_make_master_closeness+28)^0,w,c
  6115   002686  2409               	addwf	make_master_closeness@master_closeness^0,w,c
  6116   002688  6ED9               	movwf	fsr2l,c
  6117   00268A  5028               	movf	(??_make_master_closeness+29)^0,w,c
  6118   00268C  200A               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6119   00268E  6EDA               	movwf	fsr2h,c
  6120   002690  C025  FFDE         	movff	??_make_master_closeness+26,postinc2
  6121   002694  C026  FFDD         	movff	??_make_master_closeness+27,postdec2
  6122   002698                     
  6123                           ;colour_identify.c: 107:     }
  6124   002698  2A29               	incf	make_master_closeness@i^0,f,c
  6125   00269A  0E09               	movlw	9
  6126   00269C  6429               	cpfsgt	make_master_closeness@i^0,c
  6127   00269E  EF53  F013         	goto	u1431
  6128   0026A2  EF55  F013         	goto	u1430
  6129   0026A6                     u1431:
  6130   0026A6  EFD2  F012         	goto	l2968
  6131   0026AA                     u1430:
  6132   0026AA  0012               	return		;funcret
  6133   0026AC                     __end_of_make_master_closeness:
  6134                           	callstack 0
  6135                           
  6136 ;; *************** function _determine_card *****************
  6137 ;; Defined at:
  6138 ;;		line 110 in file "colour_identify.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  6141 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  i               1   13[COMRAM] enum E14551
  6144 ;;  current_smal    2   10[COMRAM] unsigned int 
  6145 ;;  predicted_co    1   12[COMRAM] enum E14551
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      enum E14551
  6148 ;; Registers used:
  6149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6156 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6157 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6158 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;Total ram usage:       10 bytes
  6160 ;; Hardware stack levels used: 1
  6161 ;; Hardware stack levels required when called: 4
  6162 ;; This function calls:
  6163 ;;		Nothing
  6164 ;; This function is called by:
  6165 ;;		_card_response
  6166 ;;		_card_response_easy
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text31
  6171   002AF8                     __ptext31:
  6172                           	callstack 0
  6173   002AF8                     _determine_card:
  6174                           	callstack 25
  6175   002AF8                     
  6176                           ;colour_identify.c: 112:     colour predicted_colour = RED;
  6177   002AF8  0E01               	movlw	1
  6178   002AFA  6E0D               	movwf	determine_card@predicted_colour^0,c
  6179   002AFC                     
  6180                           ;colour_identify.c: 113:     unsigned int current_smallest = master_closeness[RED];
  6181   002AFC  EE20 F002          	lfsr	2,2
  6182   002B00  5005               	movf	determine_card@master_closeness^0,w,c
  6183   002B02  26D9               	addwf	fsr2l,f,c
  6184   002B04  5006               	movf	(determine_card@master_closeness+1)^0,w,c
  6185   002B06  22DA               	addwfc	fsr2h,f,c
  6186   002B08  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6187   002B0C  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6188   002B10                     
  6189                           ;colour_identify.c: 114:     for(colour i = GREEN; i<=BLACK; i++){
  6190   002B10  0E02               	movlw	2
  6191   002B12  6E0E               	movwf	determine_card@i^0,c
  6192   002B14                     l2984:
  6193                           
  6194                           ;colour_identify.c: 115:         if(master_closeness[i] < current_smallest){
  6195   002B14  500E               	movf	determine_card@i^0,w,c
  6196   002B16  0D02               	mullw	2
  6197   002B18  CFF3 F007          	movff	prodl,??_determine_card
  6198   002B1C  CFF4 F008          	movff	prodh,??_determine_card+1
  6199   002B20  5007               	movf	??_determine_card^0,w,c
  6200   002B22  2405               	addwf	determine_card@master_closeness^0,w,c
  6201   002B24  6ED9               	movwf	fsr2l,c
  6202   002B26  5008               	movf	(??_determine_card+1)^0,w,c
  6203   002B28  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6204   002B2A  6EDA               	movwf	fsr2h,c
  6205   002B2C  500B               	movf	determine_card@current_smallest^0,w,c
  6206   002B2E  5CDE               	subwf	postinc2,w,c
  6207   002B30  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  6208   002B32  58DE               	subwfb	postinc2,w,c
  6209   002B34  B0D8               	btfsc	status,0,c
  6210   002B36  EF9F  F015         	goto	u1441
  6211   002B3A  EFA1  F015         	goto	u1440
  6212   002B3E                     u1441:
  6213   002B3E  EFB3  F015         	goto	l2990
  6214   002B42                     u1440:
  6215   002B42                     
  6216                           ;colour_identify.c: 116:             current_smallest = master_closeness[i];
  6217   002B42  500E               	movf	determine_card@i^0,w,c
  6218   002B44  0D02               	mullw	2
  6219   002B46  CFF3 F007          	movff	prodl,??_determine_card
  6220   002B4A  CFF4 F008          	movff	prodh,??_determine_card+1
  6221   002B4E  5007               	movf	??_determine_card^0,w,c
  6222   002B50  2405               	addwf	determine_card@master_closeness^0,w,c
  6223   002B52  6ED9               	movwf	fsr2l,c
  6224   002B54  5008               	movf	(??_determine_card+1)^0,w,c
  6225   002B56  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6226   002B58  6EDA               	movwf	fsr2h,c
  6227   002B5A  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6228   002B5E  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6229   002B62                     
  6230                           ;colour_identify.c: 117:             predicted_colour = i;
  6231   002B62  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  6232   002B66                     l2990:
  6233                           
  6234                           ;colour_identify.c: 119:     }
  6235   002B66  2A0E               	incf	determine_card@i^0,f,c
  6236   002B68  0E09               	movlw	9
  6237   002B6A  640E               	cpfsgt	determine_card@i^0,c
  6238   002B6C  EFBA  F015         	goto	u1451
  6239   002B70  EFBC  F015         	goto	u1450
  6240   002B74                     u1451:
  6241   002B74  EF8A  F015         	goto	l2984
  6242   002B78                     u1450:
  6243   002B78                     
  6244                           ;colour_identify.c: 120:     return predicted_colour;
  6245   002B78  500D               	movf	determine_card@predicted_colour^0,w,c
  6246   002B7A  0012               	return		;funcret
  6247   002B7C                     __end_of_determine_card:
  6248                           	callstack 0
  6249                           
  6250 ;; *************** function _collect_avg_readings *****************
  6251 ;; Defined at:
  6252 ;;		line 31 in file "colour_identify.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  clear_read      2   15[COMRAM] PTR unsigned int 
  6255 ;;		 -> main@clear_read(2), 
  6256 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  6257 ;;		 -> main@red_read(2), 
  6258 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  6259 ;;		 -> main@green_read(2), 
  6260 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  6261 ;;		 -> main@blue_read(2), 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  i               2   33[COMRAM] int 
  6264 ;;  i               2   31[COMRAM] int 
  6265 ;;  i               2   29[COMRAM] int 
  6266 ;;  i               2   27[COMRAM] int 
  6267 ;;  i               2   25[COMRAM] int 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6277 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6281 ;;Total ram usage:       20 bytes
  6282 ;; Hardware stack levels used: 1
  6283 ;; Hardware stack levels required when called: 7
  6284 ;; This function calls:
  6285 ;;		_color_read_Blue
  6286 ;;		_color_read_Clear
  6287 ;;		_color_read_Green
  6288 ;;		_color_read_Red
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;;		_card_response
  6292 ;;		_card_response_easy
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text32
  6297   001B08                     __ptext32:
  6298                           	callstack 0
  6299   001B08                     _collect_avg_readings:
  6300                           	callstack 23
  6301   001B08                     
  6302                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  6303   001B08  0E00               	movlw	0
  6304   001B0A  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  6305   001B0C  0E00               	movlw	0
  6306   001B0E  6E1A               	movwf	collect_avg_readings@i^0,c
  6307   001B10                     l2860:
  6308                           
  6309                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  6310   001B10  EC0C  F017         	call	_color_read_Clear	;wreg free
  6311   001B14  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6312   001B18  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6313   001B1C  C009  FFDE         	movff	?_color_read_Clear,postinc2
  6314   001B20  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  6315                           
  6316                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  6317   001B24  ECBC  F016         	call	_color_read_Red	;wreg free
  6318   001B28  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6319   001B2C  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6320   001B30  C009  FFDE         	movff	?_color_read_Red,postinc2
  6321   001B34  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  6322                           
  6323                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  6324   001B38  ECE4  F016         	call	_color_read_Green	;wreg free
  6325   001B3C  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6326   001B40  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6327   001B44  C009  FFDE         	movff	?_color_read_Green,postinc2
  6328   001B48  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  6329                           
  6330                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  6331   001B4C  EC34  F017         	call	_color_read_Blue	;wreg free
  6332   001B50  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6333   001B54  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6334   001B58  C009  FFDE         	movff	?_color_read_Blue,postinc2
  6335   001B5C  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  6336   001B60                     
  6337                           ;colour_identify.c: 40:     }
  6338   001B60  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  6339   001B62  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  6340   001B64  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6341   001B66  EFBE  F00D         	goto	u1361
  6342   001B6A  0EF5               	movlw	245
  6343   001B6C  5C1A               	subwf	collect_avg_readings@i^0,w,c
  6344   001B6E  0E01               	movlw	1
  6345   001B70  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6346   001B72  A0D8               	btfss	status,0,c
  6347   001B74  EFBE  F00D         	goto	u1361
  6348   001B78  EFC0  F00D         	goto	u1360
  6349   001B7C                     u1361:
  6350   001B7C  EF88  F00D         	goto	l2860
  6351   001B80                     u1360:
  6352   001B80                     
  6353                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  6354   001B80  0E00               	movlw	0
  6355   001B82  6E1D               	movwf	(collect_avg_readings@i_1602+1)^0,c
  6356   001B84  0E00               	movlw	0
  6357   001B86  6E1C               	movwf	collect_avg_readings@i_1602^0,c
  6358   001B88                     l2872:
  6359                           
  6360                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  6361   001B88  EC0C  F017         	call	_color_read_Clear	;wreg free
  6362   001B8C  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6363   001B90  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6364   001B94  5009               	movf	?_color_read_Clear^0,w,c
  6365   001B96  26DE               	addwf	postinc2,f,c
  6366   001B98  500A               	movf	(?_color_read_Clear+1)^0,w,c
  6367   001B9A  22DD               	addwfc	postdec2,f,c
  6368   001B9C                     
  6369                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6370   001B9C  0E11               	movlw	17
  6371   001B9E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6372   001BA0  0E3C               	movlw	60
  6373   001BA2  6E18               	movwf	??_collect_avg_readings^0,c
  6374   001BA4  0ECB               	movlw	203
  6375   001BA6                     u2347:
  6376   001BA6  2EE8               	decfsz	wreg,f,c
  6377   001BA8  D7FE               	bra	u2347
  6378   001BAA  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6379   001BAC  D7FC               	bra	u2347
  6380   001BAE  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6381   001BB0  D7FA               	bra	u2347
  6382   001BB2  F000               	nop	
  6383   001BB4                     
  6384                           ;colour_identify.c: 47:     }
  6385   001BB4  4A1C               	infsnz	collect_avg_readings@i_1602^0,f,c
  6386   001BB6  2A1D               	incf	(collect_avg_readings@i_1602+1)^0,f,c
  6387   001BB8  BE1D               	btfsc	(collect_avg_readings@i_1602+1)^0,7,c
  6388   001BBA  EFE8  F00D         	goto	u1371
  6389   001BBE  501D               	movf	(collect_avg_readings@i_1602+1)^0,w,c
  6390   001BC0  E109               	bnz	u1370
  6391   001BC2  0E03               	movlw	3
  6392   001BC4  5C1C               	subwf	collect_avg_readings@i_1602^0,w,c
  6393   001BC6  A0D8               	btfss	status,0,c
  6394   001BC8  EFE8  F00D         	goto	u1371
  6395   001BCC  EFEA  F00D         	goto	u1370
  6396   001BD0                     u1371:
  6397   001BD0  EFC4  F00D         	goto	l2872
  6398   001BD4                     u1370:
  6399   001BD4                     
  6400                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  6401   001BD4  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6402   001BD8  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6403   001BDC  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6404   001BE0  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6405   001BE4  90D8               	bcf	status,0,c
  6406   001BE6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6407   001BE8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6408   001BEA  90D8               	bcf	status,0,c
  6409   001BEC  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6410   001BEE  3218               	rrcf	??_collect_avg_readings^0,f,c
  6411   001BF0  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6412   001BF4  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6413   001BF8  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6414   001BFC  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6415   001C00                     
  6416                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  6417   001C00  0E00               	movlw	0
  6418   001C02  6E1F               	movwf	(collect_avg_readings@i_1603+1)^0,c
  6419   001C04  0E00               	movlw	0
  6420   001C06  6E1E               	movwf	collect_avg_readings@i_1603^0,c
  6421   001C08                     l2888:
  6422                           
  6423                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  6424   001C08  ECBC  F016         	call	_color_read_Red	;wreg free
  6425   001C0C  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6426   001C10  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6427   001C14  5009               	movf	?_color_read_Red^0,w,c
  6428   001C16  26DE               	addwf	postinc2,f,c
  6429   001C18  500A               	movf	(?_color_read_Red+1)^0,w,c
  6430   001C1A  22DD               	addwfc	postdec2,f,c
  6431   001C1C                     
  6432                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6433   001C1C  0E11               	movlw	17
  6434   001C1E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6435   001C20  0E3C               	movlw	60
  6436   001C22  6E18               	movwf	??_collect_avg_readings^0,c
  6437   001C24  0ECB               	movlw	203
  6438   001C26                     u2357:
  6439   001C26  2EE8               	decfsz	wreg,f,c
  6440   001C28  D7FE               	bra	u2357
  6441   001C2A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6442   001C2C  D7FC               	bra	u2357
  6443   001C2E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6444   001C30  D7FA               	bra	u2357
  6445   001C32  F000               	nop	
  6446   001C34                     
  6447                           ;colour_identify.c: 53:     }
  6448   001C34  4A1E               	infsnz	collect_avg_readings@i_1603^0,f,c
  6449   001C36  2A1F               	incf	(collect_avg_readings@i_1603+1)^0,f,c
  6450   001C38  BE1F               	btfsc	(collect_avg_readings@i_1603+1)^0,7,c
  6451   001C3A  EF28  F00E         	goto	u1381
  6452   001C3E  501F               	movf	(collect_avg_readings@i_1603+1)^0,w,c
  6453   001C40  E109               	bnz	u1380
  6454   001C42  0E03               	movlw	3
  6455   001C44  5C1E               	subwf	collect_avg_readings@i_1603^0,w,c
  6456   001C46  A0D8               	btfss	status,0,c
  6457   001C48  EF28  F00E         	goto	u1381
  6458   001C4C  EF2A  F00E         	goto	u1380
  6459   001C50                     u1381:
  6460   001C50  EF04  F00E         	goto	l2888
  6461   001C54                     u1380:
  6462   001C54                     
  6463                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  6464   001C54  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6465   001C58  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6466   001C5C  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6467   001C60  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6468   001C64  90D8               	bcf	status,0,c
  6469   001C66  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6470   001C68  3218               	rrcf	??_collect_avg_readings^0,f,c
  6471   001C6A  90D8               	bcf	status,0,c
  6472   001C6C  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6473   001C6E  3218               	rrcf	??_collect_avg_readings^0,f,c
  6474   001C70  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6475   001C74  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6476   001C78  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6477   001C7C  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6478   001C80                     
  6479                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  6480   001C80  0E00               	movlw	0
  6481   001C82  6E21               	movwf	(collect_avg_readings@i_1604+1)^0,c
  6482   001C84  0E00               	movlw	0
  6483   001C86  6E20               	movwf	collect_avg_readings@i_1604^0,c
  6484   001C88                     l2904:
  6485                           
  6486                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  6487   001C88  ECE4  F016         	call	_color_read_Green	;wreg free
  6488   001C8C  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6489   001C90  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6490   001C94  5009               	movf	?_color_read_Green^0,w,c
  6491   001C96  26DE               	addwf	postinc2,f,c
  6492   001C98  500A               	movf	(?_color_read_Green+1)^0,w,c
  6493   001C9A  22DD               	addwfc	postdec2,f,c
  6494   001C9C                     
  6495                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6496   001C9C  0E11               	movlw	17
  6497   001C9E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6498   001CA0  0E3C               	movlw	60
  6499   001CA2  6E18               	movwf	??_collect_avg_readings^0,c
  6500   001CA4  0ECB               	movlw	203
  6501   001CA6                     u2367:
  6502   001CA6  2EE8               	decfsz	wreg,f,c
  6503   001CA8  D7FE               	bra	u2367
  6504   001CAA  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6505   001CAC  D7FC               	bra	u2367
  6506   001CAE  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6507   001CB0  D7FA               	bra	u2367
  6508   001CB2  F000               	nop	
  6509   001CB4                     
  6510                           ;colour_identify.c: 59:     }
  6511   001CB4  4A20               	infsnz	collect_avg_readings@i_1604^0,f,c
  6512   001CB6  2A21               	incf	(collect_avg_readings@i_1604+1)^0,f,c
  6513   001CB8  BE21               	btfsc	(collect_avg_readings@i_1604+1)^0,7,c
  6514   001CBA  EF68  F00E         	goto	u1391
  6515   001CBE  5021               	movf	(collect_avg_readings@i_1604+1)^0,w,c
  6516   001CC0  E109               	bnz	u1390
  6517   001CC2  0E03               	movlw	3
  6518   001CC4  5C20               	subwf	collect_avg_readings@i_1604^0,w,c
  6519   001CC6  A0D8               	btfss	status,0,c
  6520   001CC8  EF68  F00E         	goto	u1391
  6521   001CCC  EF6A  F00E         	goto	u1390
  6522   001CD0                     u1391:
  6523   001CD0  EF44  F00E         	goto	l2904
  6524   001CD4                     u1390:
  6525   001CD4                     
  6526                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  6527   001CD4  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6528   001CD8  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6529   001CDC  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6530   001CE0  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6531   001CE4  90D8               	bcf	status,0,c
  6532   001CE6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6533   001CE8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6534   001CEA  90D8               	bcf	status,0,c
  6535   001CEC  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6536   001CEE  3218               	rrcf	??_collect_avg_readings^0,f,c
  6537   001CF0  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6538   001CF4  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6539   001CF8  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6540   001CFC  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6541   001D00                     
  6542                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  6543   001D00  0E00               	movlw	0
  6544   001D02  6E23               	movwf	(collect_avg_readings@i_1605+1)^0,c
  6545   001D04  0E00               	movlw	0
  6546   001D06  6E22               	movwf	collect_avg_readings@i_1605^0,c
  6547   001D08                     l2920:
  6548                           
  6549                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  6550   001D08  EC34  F017         	call	_color_read_Blue	;wreg free
  6551   001D0C  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6552   001D10  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6553   001D14  5009               	movf	?_color_read_Blue^0,w,c
  6554   001D16  26DE               	addwf	postinc2,f,c
  6555   001D18  500A               	movf	(?_color_read_Blue+1)^0,w,c
  6556   001D1A  22DD               	addwfc	postdec2,f,c
  6557   001D1C                     
  6558                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6559   001D1C  0E11               	movlw	17
  6560   001D1E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6561   001D20  0E3C               	movlw	60
  6562   001D22  6E18               	movwf	??_collect_avg_readings^0,c
  6563   001D24  0ECB               	movlw	203
  6564   001D26                     u2377:
  6565   001D26  2EE8               	decfsz	wreg,f,c
  6566   001D28  D7FE               	bra	u2377
  6567   001D2A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6568   001D2C  D7FC               	bra	u2377
  6569   001D2E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6570   001D30  D7FA               	bra	u2377
  6571   001D32  F000               	nop	
  6572   001D34                     
  6573                           ;colour_identify.c: 65:     }
  6574   001D34  4A22               	infsnz	collect_avg_readings@i_1605^0,f,c
  6575   001D36  2A23               	incf	(collect_avg_readings@i_1605+1)^0,f,c
  6576   001D38  BE23               	btfsc	(collect_avg_readings@i_1605+1)^0,7,c
  6577   001D3A  EFA8  F00E         	goto	u1401
  6578   001D3E  5023               	movf	(collect_avg_readings@i_1605+1)^0,w,c
  6579   001D40  E109               	bnz	u1400
  6580   001D42  0E03               	movlw	3
  6581   001D44  5C22               	subwf	collect_avg_readings@i_1605^0,w,c
  6582   001D46  A0D8               	btfss	status,0,c
  6583   001D48  EFA8  F00E         	goto	u1401
  6584   001D4C  EFAA  F00E         	goto	u1400
  6585   001D50                     u1401:
  6586   001D50  EF84  F00E         	goto	l2920
  6587   001D54                     u1400:
  6588   001D54                     
  6589                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  6590   001D54  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6591   001D58  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6592   001D5C  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6593   001D60  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6594   001D64  90D8               	bcf	status,0,c
  6595   001D66  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6596   001D68  3218               	rrcf	??_collect_avg_readings^0,f,c
  6597   001D6A  90D8               	bcf	status,0,c
  6598   001D6C  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6599   001D6E  3218               	rrcf	??_collect_avg_readings^0,f,c
  6600   001D70  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6601   001D74  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6602   001D78  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6603   001D7C  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6604   001D80  0012               	return		;funcret
  6605   001D82                     __end_of_collect_avg_readings:
  6606                           	callstack 0
  6607                           
  6608 ;; *************** function _color_read_Red *****************
  6609 ;; Defined at:
  6610 ;;		line 29 in file "color.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  tmp             2   13[COMRAM] unsigned int 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  2    8[COMRAM] unsigned int 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6626 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6627 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;Total ram usage:        7 bytes
  6629 ;; Hardware stack levels used: 1
  6630 ;; Hardware stack levels required when called: 6
  6631 ;; This function calls:
  6632 ;;		_I2C_2_Master_Read
  6633 ;;		_I2C_2_Master_RepStart
  6634 ;;		_I2C_2_Master_Start
  6635 ;;		_I2C_2_Master_Stop
  6636 ;;		_I2C_2_Master_Write
  6637 ;; This function is called by:
  6638 ;;		_collect_avg_readings
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text33
  6643   002D78                     __ptext33:
  6644                           	callstack 0
  6645   002D78                     _color_read_Red:
  6646                           	callstack 23
  6647   002D78                     
  6648                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6649   002D78  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  6650                           
  6651                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6652   002D7C  0E52               	movlw	82
  6653   002D7E  ECD0  F018         	call	_I2C_2_Master_Write
  6654                           
  6655                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6656   002D82  0EB6               	movlw	182
  6657   002D84  ECD0  F018         	call	_I2C_2_Master_Write
  6658                           
  6659                           ;color.c: 35:  I2C_2_Master_RepStart();
  6660   002D88  ECDC  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6661                           
  6662                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6663   002D8C  0E53               	movlw	83
  6664   002D8E  ECD0  F018         	call	_I2C_2_Master_Write
  6665                           
  6666                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6667   002D92  0E01               	movlw	1
  6668   002D94  EC7E  F017         	call	_I2C_2_Master_Read
  6669   002D98  6E0B               	movwf	??_color_read_Red^0,c
  6670   002D9A  500B               	movf	??_color_read_Red^0,w,c
  6671   002D9C  6E0E               	movwf	color_read_Red@tmp^0,c
  6672   002D9E  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6673                           
  6674                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6675   002DA0  0E00               	movlw	0
  6676   002DA2  EC7E  F017         	call	_I2C_2_Master_Read
  6677   002DA6  6E0B               	movwf	??_color_read_Red^0,c
  6678   002DA8  500B               	movf	??_color_read_Red^0,w,c
  6679   002DAA  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6680   002DAC  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6681   002DAE  500E               	movf	color_read_Red@tmp^0,w,c
  6682   002DB0  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6683   002DB2  6E0E               	movwf	color_read_Red@tmp^0,c
  6684   002DB4  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6685   002DB6  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6686   002DB8  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6687                           
  6688                           ;color.c: 39:  I2C_2_Master_Stop();
  6689   002DBA  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  6690   002DBE                     
  6691                           ;color.c: 40:  return tmp;
  6692   002DBE  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6693   002DC2  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6694   002DC6  0012               	return		;funcret
  6695   002DC8                     __end_of_color_read_Red:
  6696                           	callstack 0
  6697                           
  6698 ;; *************** function _color_read_Green *****************
  6699 ;; Defined at:
  6700 ;;		line 43 in file "color.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  tmp             2   13[COMRAM] unsigned int 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  2    8[COMRAM] unsigned int 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6716 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6717 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6718 ;;Total ram usage:        7 bytes
  6719 ;; Hardware stack levels used: 1
  6720 ;; Hardware stack levels required when called: 6
  6721 ;; This function calls:
  6722 ;;		_I2C_2_Master_Read
  6723 ;;		_I2C_2_Master_RepStart
  6724 ;;		_I2C_2_Master_Start
  6725 ;;		_I2C_2_Master_Stop
  6726 ;;		_I2C_2_Master_Write
  6727 ;; This function is called by:
  6728 ;;		_collect_avg_readings
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text34
  6733   002DC8                     __ptext34:
  6734                           	callstack 0
  6735   002DC8                     _color_read_Green:
  6736                           	callstack 23
  6737   002DC8                     
  6738                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6739   002DC8  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  6740                           
  6741                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6742   002DCC  0E52               	movlw	82
  6743   002DCE  ECD0  F018         	call	_I2C_2_Master_Write
  6744                           
  6745                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6746   002DD2  0EB8               	movlw	184
  6747   002DD4  ECD0  F018         	call	_I2C_2_Master_Write
  6748                           
  6749                           ;color.c: 49:  I2C_2_Master_RepStart();
  6750   002DD8  ECDC  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6751                           
  6752                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6753   002DDC  0E53               	movlw	83
  6754   002DDE  ECD0  F018         	call	_I2C_2_Master_Write
  6755                           
  6756                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6757   002DE2  0E01               	movlw	1
  6758   002DE4  EC7E  F017         	call	_I2C_2_Master_Read
  6759   002DE8  6E0B               	movwf	??_color_read_Green^0,c
  6760   002DEA  500B               	movf	??_color_read_Green^0,w,c
  6761   002DEC  6E0E               	movwf	color_read_Green@tmp^0,c
  6762   002DEE  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6763                           
  6764                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6765   002DF0  0E00               	movlw	0
  6766   002DF2  EC7E  F017         	call	_I2C_2_Master_Read
  6767   002DF6  6E0B               	movwf	??_color_read_Green^0,c
  6768   002DF8  500B               	movf	??_color_read_Green^0,w,c
  6769   002DFA  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6770   002DFC  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6771   002DFE  500E               	movf	color_read_Green@tmp^0,w,c
  6772   002E00  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6773   002E02  6E0E               	movwf	color_read_Green@tmp^0,c
  6774   002E04  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6775   002E06  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6776   002E08  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6777                           
  6778                           ;color.c: 53:  I2C_2_Master_Stop();
  6779   002E0A  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  6780   002E0E                     
  6781                           ;color.c: 54:  return tmp;
  6782   002E0E  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6783   002E12  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6784   002E16  0012               	return		;funcret
  6785   002E18                     __end_of_color_read_Green:
  6786                           	callstack 0
  6787                           
  6788 ;; *************** function _color_read_Clear *****************
  6789 ;; Defined at:
  6790 ;;		line 71 in file "color.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  tmp             2   13[COMRAM] unsigned int 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  2    8[COMRAM] unsigned int 
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6807 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;Total ram usage:        7 bytes
  6809 ;; Hardware stack levels used: 1
  6810 ;; Hardware stack levels required when called: 6
  6811 ;; This function calls:
  6812 ;;		_I2C_2_Master_Read
  6813 ;;		_I2C_2_Master_RepStart
  6814 ;;		_I2C_2_Master_Start
  6815 ;;		_I2C_2_Master_Stop
  6816 ;;		_I2C_2_Master_Write
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;;		_clear_read_calibration
  6820 ;;		_collect_avg_readings
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text35
  6825   002E18                     __ptext35:
  6826                           	callstack 0
  6827   002E18                     _color_read_Clear:
  6828                           	callstack 24
  6829   002E18                     
  6830                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6831   002E18  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  6832                           
  6833                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6834   002E1C  0E52               	movlw	82
  6835   002E1E  ECD0  F018         	call	_I2C_2_Master_Write
  6836                           
  6837                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6838   002E22  0EB4               	movlw	180
  6839   002E24  ECD0  F018         	call	_I2C_2_Master_Write
  6840                           
  6841                           ;color.c: 77:  I2C_2_Master_RepStart();
  6842   002E28  ECDC  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6843                           
  6844                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6845   002E2C  0E53               	movlw	83
  6846   002E2E  ECD0  F018         	call	_I2C_2_Master_Write
  6847                           
  6848                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6849   002E32  0E01               	movlw	1
  6850   002E34  EC7E  F017         	call	_I2C_2_Master_Read
  6851   002E38  6E0B               	movwf	??_color_read_Clear^0,c
  6852   002E3A  500B               	movf	??_color_read_Clear^0,w,c
  6853   002E3C  6E0E               	movwf	color_read_Clear@tmp^0,c
  6854   002E3E  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  6855                           
  6856                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6857   002E40  0E00               	movlw	0
  6858   002E42  EC7E  F017         	call	_I2C_2_Master_Read
  6859   002E46  6E0B               	movwf	??_color_read_Clear^0,c
  6860   002E48  500B               	movf	??_color_read_Clear^0,w,c
  6861   002E4A  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  6862   002E4C  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  6863   002E4E  500E               	movf	color_read_Clear@tmp^0,w,c
  6864   002E50  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  6865   002E52  6E0E               	movwf	color_read_Clear@tmp^0,c
  6866   002E54  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  6867   002E56  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  6868   002E58  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  6869                           
  6870                           ;color.c: 81:  I2C_2_Master_Stop();
  6871   002E5A  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  6872   002E5E                     
  6873                           ;color.c: 82:  return tmp;
  6874   002E5E  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  6875   002E62  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6876   002E66  0012               	return		;funcret
  6877   002E68                     __end_of_color_read_Clear:
  6878                           	callstack 0
  6879                           
  6880 ;; *************** function _color_read_Blue *****************
  6881 ;; Defined at:
  6882 ;;		line 57 in file "color.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;		None
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  tmp             2   13[COMRAM] unsigned int 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  2    8[COMRAM] unsigned int 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6899 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6900 ;;Total ram usage:        7 bytes
  6901 ;; Hardware stack levels used: 1
  6902 ;; Hardware stack levels required when called: 6
  6903 ;; This function calls:
  6904 ;;		_I2C_2_Master_Read
  6905 ;;		_I2C_2_Master_RepStart
  6906 ;;		_I2C_2_Master_Start
  6907 ;;		_I2C_2_Master_Stop
  6908 ;;		_I2C_2_Master_Write
  6909 ;; This function is called by:
  6910 ;;		_collect_avg_readings
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text36
  6915   002E68                     __ptext36:
  6916                           	callstack 0
  6917   002E68                     _color_read_Blue:
  6918                           	callstack 23
  6919   002E68                     
  6920                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6921   002E68  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  6922                           
  6923                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6924   002E6C  0E52               	movlw	82
  6925   002E6E  ECD0  F018         	call	_I2C_2_Master_Write
  6926                           
  6927                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6928   002E72  0EBA               	movlw	186
  6929   002E74  ECD0  F018         	call	_I2C_2_Master_Write
  6930                           
  6931                           ;color.c: 63:  I2C_2_Master_RepStart();
  6932   002E78  ECDC  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6933                           
  6934                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6935   002E7C  0E53               	movlw	83
  6936   002E7E  ECD0  F018         	call	_I2C_2_Master_Write
  6937                           
  6938                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6939   002E82  0E01               	movlw	1
  6940   002E84  EC7E  F017         	call	_I2C_2_Master_Read
  6941   002E88  6E0B               	movwf	??_color_read_Blue^0,c
  6942   002E8A  500B               	movf	??_color_read_Blue^0,w,c
  6943   002E8C  6E0E               	movwf	color_read_Blue@tmp^0,c
  6944   002E8E  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  6945                           
  6946                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6947   002E90  0E00               	movlw	0
  6948   002E92  EC7E  F017         	call	_I2C_2_Master_Read
  6949   002E96  6E0B               	movwf	??_color_read_Blue^0,c
  6950   002E98  500B               	movf	??_color_read_Blue^0,w,c
  6951   002E9A  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  6952   002E9C  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  6953   002E9E  500E               	movf	color_read_Blue@tmp^0,w,c
  6954   002EA0  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  6955   002EA2  6E0E               	movwf	color_read_Blue@tmp^0,c
  6956   002EA4  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  6957   002EA6  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  6958   002EA8  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  6959                           
  6960                           ;color.c: 67:  I2C_2_Master_Stop();
  6961   002EAA  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  6962   002EAE                     
  6963                           ;color.c: 68:  return tmp;
  6964   002EAE  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  6965   002EB2  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6966   002EB6  0012               	return		;funcret
  6967   002EB8                     __end_of_color_read_Blue:
  6968                           	callstack 0
  6969                           
  6970 ;; *************** function _I2C_2_Master_RepStart *****************
  6971 ;; Defined at:
  6972 ;;		line 33 in file "i2c.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6990 ;;Total ram usage:        0 bytes
  6991 ;; Hardware stack levels used: 1
  6992 ;; Hardware stack levels required when called: 5
  6993 ;; This function calls:
  6994 ;;		_I2C_2_Master_Idle
  6995 ;; This function is called by:
  6996 ;;		_color_read_Red
  6997 ;;		_color_read_Green
  6998 ;;		_color_read_Blue
  6999 ;;		_color_read_Clear
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text37
  7004   0031B8                     __ptext37:
  7005                           	callstack 0
  7006   0031B8                     _I2C_2_Master_RepStart:
  7007                           	callstack 24
  7008   0031B8                     
  7009                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7010   0031B8  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7011   0031BC                     
  7012                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7013   0031BC  010E               	movlb	14	; () banked
  7014   0031BE  83DA               	bsf	218,1,b	;volatile
  7015   0031C0                     
  7016                           ; BSR set to: 14
  7017   0031C0  0012               	return		;funcret
  7018   0031C2                     __end_of_I2C_2_Master_RepStart:
  7019                           	callstack 0
  7020                           
  7021 ;; *************** function _I2C_2_Master_Read *****************
  7022 ;; Defined at:
  7023 ;;		line 51 in file "i2c.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  ack             1    wreg     unsigned char 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  ack             1    6[COMRAM] unsigned char 
  7028 ;;  tmp             1    7[COMRAM] unsigned char 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      unsigned char 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7041 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7042 ;;Total ram usage:        3 bytes
  7043 ;; Hardware stack levels used: 1
  7044 ;; Hardware stack levels required when called: 5
  7045 ;; This function calls:
  7046 ;;		_I2C_2_Master_Idle
  7047 ;; This function is called by:
  7048 ;;		_color_read_Red
  7049 ;;		_color_read_Green
  7050 ;;		_color_read_Blue
  7051 ;;		_color_read_Clear
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text38
  7056   002EFC                     __ptext38:
  7057                           	callstack 0
  7058   002EFC                     _I2C_2_Master_Read:
  7059                           	callstack 24
  7060                           
  7061                           ; BSR set to: 14
  7062                           ;incstack = 0
  7063                           ;I2C_2_Master_Read@ack stored from wreg
  7064   002EFC  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  7065   002EFE                     
  7066                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7067   002EFE  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7068   002F02                     
  7069                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7070   002F02  010E               	movlb	14	; () banked
  7071   002F04  87DA               	bsf	218,3,b	;volatile
  7072                           
  7073                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7074   002F06  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7075   002F0A                     
  7076                           ;i2c.c: 57:   tmp = SSP2BUF;
  7077   002F0A  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7078                           
  7079                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7080   002F0E  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7081   002F12                     
  7082                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7083   002F12  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  7084   002F14  B4D8               	btfsc	status,2,c
  7085   002F16  EF8F  F017         	goto	u1201
  7086   002F1A  EF93  F017         	goto	u1200
  7087   002F1E                     u1201:
  7088   002F1E  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7089   002F20  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  7090   002F22  EF94  F017         	goto	u1218
  7091   002F26                     u1200:
  7092   002F26  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7093   002F28                     u1218:
  7094   002F28  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  7095   002F2A  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  7096   002F2C  010E               	movlb	14	; () banked
  7097   002F2E  51DA               	movf	218,w,b	;volatile
  7098   002F30  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7099   002F32  0BDF               	andlw	-33
  7100   002F34  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7101   002F36  6FDA               	movwf	218,b	;volatile
  7102   002F38                     
  7103                           ; BSR set to: 14
  7104                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7105   002F38  89DA               	bsf	218,4,b	;volatile
  7106   002F3A                     
  7107                           ; BSR set to: 14
  7108                           ;i2c.c: 61:   return tmp;
  7109   002F3A  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  7110   002F3C                     
  7111                           ; BSR set to: 14
  7112   002F3C  0012               	return		;funcret
  7113   002F3E                     __end_of_I2C_2_Master_Read:
  7114                           	callstack 0
  7115                           
  7116 ;; *************** function _LEDSon_init *****************
  7117 ;; Defined at:
  7118 ;;		line 18 in file "LEDsOn.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		None
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used: 1
  7138 ;; Hardware stack levels required when called: 4
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text39
  7147   0030EA                     __ptext39:
  7148                           	callstack 0
  7149   0030EA                     _LEDSon_init:
  7150                           	callstack 26
  7151   0030EA                     
  7152                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7153   0030EA  9288               	bcf	136,1,c	;volatile
  7154                           
  7155                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7156   0030EC  9088               	bcf	136,0,c	;volatile
  7157                           
  7158                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7159   0030EE  9884               	bcf	132,4,c	;volatile
  7160                           
  7161                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7162   0030F0  9684               	bcf	132,3,c	;volatile
  7163                           
  7164                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7165   0030F2  9086               	bcf	134,0,c	;volatile
  7166                           
  7167                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7168   0030F4  9287               	bcf	135,1,c	;volatile
  7169                           
  7170                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7171   0030F6  9E86               	bcf	134,7,c	;volatile
  7172                           
  7173                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7174   0030F8  9881               	bcf	129,4,c	;volatile
  7175                           
  7176                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7177   0030FA  8E7E               	bsf	126,7,c	;volatile
  7178                           
  7179                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7180   0030FC  827F               	bsf	127,1,c	;volatile
  7181                           
  7182                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7183   0030FE  8879               	bsf	121,4,c	;volatile
  7184                           
  7185                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7186   003100  987C               	bcf	124,4,c	;volatile
  7187                           
  7188                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7189   003102  9280               	bcf	128,1,c	;volatile
  7190                           
  7191                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7192   003104  907E               	bcf	126,0,c	;volatile
  7193                           
  7194                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7195   003106  9080               	bcf	128,0,c	;volatile
  7196                           
  7197                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7198   003108  967C               	bcf	124,3,c	;volatile
  7199   00310A  0012               	return		;funcret
  7200   00310C                     __end_of_LEDSon_init:
  7201                           	callstack 0
  7202                           
  7203 ;; *************** function _Interrupts_init *****************
  7204 ;; Defined at:
  7205 ;;		line 7 in file "interrupts.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;		None
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;		None
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, status,2, status,0, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;Total ram usage:        0 bytes
  7224 ;; Hardware stack levels used: 1
  7225 ;; Hardware stack levels required when called: 8
  7226 ;; This function calls:
  7227 ;;		_enable_color_interrupt
  7228 ;;		_set_interrupt_threshold
  7229 ;; This function is called by:
  7230 ;;		_main
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text40
  7235   002F7E                     __ptext40:
  7236                           	callstack 0
  7237   002F7E                     _Interrupts_init:
  7238                           	callstack 22
  7239   002F7E                     
  7240                           ;interrupts.c: 9:     enable_color_interrupt();
  7241   002F7E  ECC8  F018         	call	_enable_color_interrupt	;wreg free
  7242                           
  7243                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  7244   002F82  0E00               	movlw	0
  7245   002F84  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  7246   002F86  0E01               	movlw	1
  7247   002F88  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  7248   002F8A  0E07               	movlw	7
  7249   002F8C  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  7250   002F8E  0ED0               	movlw	208
  7251   002F90  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  7252   002F92  0E00               	movlw	0
  7253   002F94  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  7254   002F96  0E04               	movlw	4
  7255   002F98  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  7256   002F9A  EC35  F016         	call	_set_interrupt_threshold	;wreg free
  7257   002F9E                     
  7258                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  7259   002F9E  9282               	bcf	130,1,c	;volatile
  7260   002FA0                     
  7261                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  7262   002FA0  010E               	movlb	14	; () banked
  7263   002FA2  939A               	bcf	154,1,b	;volatile
  7264   002FA4                     
  7265                           ; BSR set to: 14
  7266                           ;interrupts.c: 14:     INT1PPS=0x09;
  7267   002FA4  0E09               	movlw	9
  7268   002FA6  010D               	movlb	13	; () banked
  7269   002FA8  6FF1               	movwf	241,b	;volatile
  7270   002FAA                     
  7271                           ; BSR set to: 13
  7272                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  7273   002FAA  010E               	movlb	14	; () banked
  7274   002FAC  8329               	bsf	41,1,b	;volatile
  7275   002FAE                     
  7276                           ; BSR set to: 14
  7277                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  7278   002FAE  831F               	bsf	31,1,b	;volatile
  7279   002FB0                     
  7280                           ; BSR set to: 14
  7281                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  7282   002FB0  92F2               	bcf	242,1,c	;volatile
  7283   002FB2                     
  7284                           ; BSR set to: 14
  7285                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  7286   002FB2  8CF2               	bsf	242,6,c	;volatile
  7287   002FB4                     
  7288                           ; BSR set to: 14
  7289                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  7290   002FB4  8AF2               	bsf	242,5,c	;volatile
  7291   002FB6                     
  7292                           ; BSR set to: 14
  7293                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7294   002FB6  8CF2               	bsf	242,6,c	;volatile
  7295   002FB8                     
  7296                           ; BSR set to: 14
  7297                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7298   002FB8  8EF2               	bsf	242,7,c	;volatile
  7299   002FBA                     
  7300                           ; BSR set to: 14
  7301   002FBA  0012               	return		;funcret
  7302   002FBC                     __end_of_Interrupts_init:
  7303                           	callstack 0
  7304                           
  7305 ;; *************** function _set_interrupt_threshold *****************
  7306 ;; Defined at:
  7307 ;;		line 43 in file "interrupts.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  AILT            2    8[COMRAM] unsigned int 
  7310 ;;  AIHT            2   10[COMRAM] unsigned int 
  7311 ;;  persistence     2   12[COMRAM] unsigned int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;		None
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  1    wreg      void 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0, cstack
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7323 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7326 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7327 ;;Total ram usage:        8 bytes
  7328 ;; Hardware stack levels used: 1
  7329 ;; Hardware stack levels required when called: 7
  7330 ;; This function calls:
  7331 ;;		_color_writetoaddr
  7332 ;; This function is called by:
  7333 ;;		_Interrupts_init
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text41
  7338   002C6A                     __ptext41:
  7339                           	callstack 0
  7340   002C6A                     _set_interrupt_threshold:
  7341                           	callstack 22
  7342   002C6A                     
  7343                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  7344   002C6A  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  7345   002C6E  0E0C               	movlw	12
  7346   002C70  EC96  F018         	call	_color_writetoaddr
  7347                           
  7348                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  7349   002C74  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  7350   002C76  6E07               	movwf	color_writetoaddr@value^0,c
  7351   002C78  0E05               	movlw	5
  7352   002C7A  EC96  F018         	call	_color_writetoaddr
  7353   002C7E                     
  7354                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  7355   002C7E  0E00               	movlw	0
  7356   002C80  6E0F               	movwf	_set_interrupt_threshold$2092^0,c
  7357   002C82  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  7358   002C84  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  7359   002C86  B4D8               	btfsc	status,2,c
  7360   002C88  EF48  F016         	goto	u1461
  7361   002C8C  EF4A  F016         	goto	u1460
  7362   002C90                     u1461:
  7363   002C90  EF4C  F016         	goto	l3132
  7364   002C94                     u1460:
  7365   002C94  0E01               	movlw	1
  7366   002C96  6E0F               	movwf	_set_interrupt_threshold$2092^0,c
  7367   002C98                     l3132:
  7368   002C98  C00F  F007         	movff	_set_interrupt_threshold$2092,color_writetoaddr@value
  7369   002C9C  0E04               	movlw	4
  7370   002C9E  EC96  F018         	call	_color_writetoaddr
  7371   002CA2                     
  7372                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  7373   002CA2  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7374   002CA4  6E07               	movwf	color_writetoaddr@value^0,c
  7375   002CA6  0E07               	movlw	7
  7376   002CA8  EC96  F018         	call	_color_writetoaddr
  7377                           
  7378                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  7379   002CAC  0E00               	movlw	0
  7380   002CAE  6E10               	movwf	_set_interrupt_threshold$2093^0,c
  7381   002CB0  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  7382   002CB2  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7383   002CB4  B4D8               	btfsc	status,2,c
  7384   002CB6  EF5F  F016         	goto	u1471
  7385   002CBA  EF61  F016         	goto	u1470
  7386   002CBE                     u1471:
  7387   002CBE  EF63  F016         	goto	l3140
  7388   002CC2                     u1470:
  7389   002CC2  0E01               	movlw	1
  7390   002CC4  6E10               	movwf	_set_interrupt_threshold$2093^0,c
  7391   002CC6                     l3140:
  7392   002CC6  C010  F007         	movff	_set_interrupt_threshold$2093,color_writetoaddr@value
  7393   002CCA  0E06               	movlw	6
  7394   002CCC  EC96  F018         	call	_color_writetoaddr
  7395   002CD0  0012               	return		;funcret
  7396   002CD2                     __end_of_set_interrupt_threshold:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _enable_color_interrupt *****************
  7400 ;; Defined at:
  7401 ;;		line 38 in file "interrupts.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used: 1
  7421 ;; Hardware stack levels required when called: 7
  7422 ;; This function calls:
  7423 ;;		_clear_interrupt_flag
  7424 ;;		_color_writetoaddr
  7425 ;; This function is called by:
  7426 ;;		_Interrupts_init
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text42
  7431   003190                     __ptext42:
  7432                           	callstack 0
  7433   003190                     _enable_color_interrupt:
  7434                           	callstack 22
  7435   003190                     
  7436                           ;interrupts.c: 39:     clear_interrupt_flag();
  7437   003190  ECB2  F018         	call	_clear_interrupt_flag	;wreg free
  7438                           
  7439                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  7440   003194  0E13               	movlw	19
  7441   003196  6E07               	movwf	color_writetoaddr@value^0,c
  7442   003198  0E00               	movlw	0
  7443   00319A  EC96  F018         	call	_color_writetoaddr
  7444   00319E  0012               	return		;funcret
  7445   0031A0                     __end_of_enable_color_interrupt:
  7446                           	callstack 0
  7447                           
  7448 ;; *************** function _color_writetoaddr *****************
  7449 ;; Defined at:
  7450 ;;		line 21 in file "color.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  address         1    wreg     unsigned char 
  7453 ;;  value           1    6[COMRAM] unsigned char 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  address         1    7[COMRAM] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, status,2, status,0, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7465 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 6
  7472 ;; This function calls:
  7473 ;;		_I2C_2_Master_Start
  7474 ;;		_I2C_2_Master_Stop
  7475 ;;		_I2C_2_Master_Write
  7476 ;; This function is called by:
  7477 ;;		_color_click_init
  7478 ;;		_enable_color_interrupt
  7479 ;;		_set_interrupt_threshold
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text43
  7484   00312C                     __ptext43:
  7485                           	callstack 0
  7486   00312C                     _color_writetoaddr:
  7487                           	callstack 23
  7488                           
  7489                           ;incstack = 0
  7490                           ;color_writetoaddr@address stored from wreg
  7491   00312C  6E08               	movwf	color_writetoaddr@address^0,c
  7492   00312E                     
  7493                           ;color.c: 22:     I2C_2_Master_Start();
  7494   00312E  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  7495                           
  7496                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  7497   003132  0E52               	movlw	82
  7498   003134  ECD0  F018         	call	_I2C_2_Master_Write
  7499                           
  7500                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  7501   003138  5008               	movf	color_writetoaddr@address^0,w,c
  7502   00313A  0980               	iorlw	128
  7503   00313C  ECD0  F018         	call	_I2C_2_Master_Write
  7504                           
  7505                           ;color.c: 25:     I2C_2_Master_Write(value);
  7506   003140  5007               	movf	color_writetoaddr@value^0,w,c
  7507   003142  ECD0  F018         	call	_I2C_2_Master_Write
  7508                           
  7509                           ;color.c: 26:     I2C_2_Master_Stop();
  7510   003146  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  7511   00314A  0012               	return		;funcret
  7512   00314C                     __end_of_color_writetoaddr:
  7513                           	callstack 0
  7514                           
  7515 ;; *************** function _clear_interrupt_flag *****************
  7516 ;; Defined at:
  7517 ;;		line 52 in file "interrupts.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  1    wreg      void 
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used: 1
  7537 ;; Hardware stack levels required when called: 6
  7538 ;; This function calls:
  7539 ;;		_I2C_2_Master_Start
  7540 ;;		_I2C_2_Master_Stop
  7541 ;;		_I2C_2_Master_Write
  7542 ;; This function is called by:
  7543 ;;		_enable_color_interrupt
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text44
  7548   003164                     __ptext44:
  7549                           	callstack 0
  7550   003164                     _clear_interrupt_flag:
  7551                           	callstack 22
  7552   003164                     
  7553                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7554   003164  ECE6  F018         	call	_I2C_2_Master_Start	;wreg free
  7555                           
  7556                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7557   003168  0E52               	movlw	82
  7558   00316A  ECD0  F018         	call	_I2C_2_Master_Write
  7559                           
  7560                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7561   00316E  0EE6               	movlw	230
  7562   003170  ECD0  F018         	call	_I2C_2_Master_Write
  7563                           
  7564                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7565   003174  ECE1  F018         	call	_I2C_2_Master_Stop	;wreg free
  7566   003178  0012               	return		;funcret
  7567   00317A                     __end_of_clear_interrupt_flag:
  7568                           	callstack 0
  7569                           
  7570 ;; *************** function _I2C_2_Master_Write *****************
  7571 ;; Defined at:
  7572 ;;		line 45 in file "i2c.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  data_byte       1    wreg     unsigned char 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  data_byte       1    5[COMRAM] unsigned char 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;Total ram usage:        1 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 5
  7593 ;; This function calls:
  7594 ;;		_I2C_2_Master_Idle
  7595 ;; This function is called by:
  7596 ;;		_color_writetoaddr
  7597 ;;		_color_read_Red
  7598 ;;		_color_read_Green
  7599 ;;		_color_read_Blue
  7600 ;;		_color_read_Clear
  7601 ;;		_clear_interrupt_flag
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text45
  7606   0031A0                     __ptext45:
  7607                           	callstack 0
  7608   0031A0                     _I2C_2_Master_Write:
  7609                           	callstack 24
  7610                           
  7611                           ;incstack = 0
  7612                           ;I2C_2_Master_Write@data_byte stored from wreg
  7613   0031A0  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  7614   0031A2                     
  7615                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7616   0031A2  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7617   0031A6                     
  7618                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7619   0031A6  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7620   0031AA  0012               	return		;funcret
  7621   0031AC                     __end_of_I2C_2_Master_Write:
  7622                           	callstack 0
  7623                           
  7624 ;; *************** function _I2C_2_Master_Stop *****************
  7625 ;; Defined at:
  7626 ;;		line 39 in file "i2c.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7644 ;;Total ram usage:        0 bytes
  7645 ;; Hardware stack levels used: 1
  7646 ;; Hardware stack levels required when called: 5
  7647 ;; This function calls:
  7648 ;;		_I2C_2_Master_Idle
  7649 ;; This function is called by:
  7650 ;;		_color_writetoaddr
  7651 ;;		_color_read_Red
  7652 ;;		_color_read_Green
  7653 ;;		_color_read_Blue
  7654 ;;		_color_read_Clear
  7655 ;;		_clear_interrupt_flag
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text46
  7660   0031C2                     __ptext46:
  7661                           	callstack 0
  7662   0031C2                     _I2C_2_Master_Stop:
  7663                           	callstack 24
  7664   0031C2                     
  7665                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7666   0031C2  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7667   0031C6                     
  7668                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7669   0031C6  010E               	movlb	14	; () banked
  7670   0031C8  85DA               	bsf	218,2,b	;volatile
  7671   0031CA                     
  7672                           ; BSR set to: 14
  7673   0031CA  0012               	return		;funcret
  7674   0031CC                     __end_of_I2C_2_Master_Stop:
  7675                           	callstack 0
  7676                           
  7677 ;; *************** function _I2C_2_Master_Start *****************
  7678 ;; Defined at:
  7679 ;;		line 27 in file "i2c.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg, status,2, status,0, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7697 ;;Total ram usage:        0 bytes
  7698 ;; Hardware stack levels used: 1
  7699 ;; Hardware stack levels required when called: 5
  7700 ;; This function calls:
  7701 ;;		_I2C_2_Master_Idle
  7702 ;; This function is called by:
  7703 ;;		_color_writetoaddr
  7704 ;;		_color_read_Red
  7705 ;;		_color_read_Green
  7706 ;;		_color_read_Blue
  7707 ;;		_color_read_Clear
  7708 ;;		_clear_interrupt_flag
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text47
  7713   0031CC                     __ptext47:
  7714                           	callstack 0
  7715   0031CC                     _I2C_2_Master_Start:
  7716                           	callstack 24
  7717   0031CC                     
  7718                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7719   0031CC  EC3A  F018         	call	_I2C_2_Master_Idle	;wreg free
  7720   0031D0                     
  7721                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7722   0031D0  010E               	movlb	14	; () banked
  7723   0031D2  81DA               	bsf	218,0,b	;volatile
  7724   0031D4                     
  7725                           ; BSR set to: 14
  7726   0031D4  0012               	return		;funcret
  7727   0031D6                     __end_of_I2C_2_Master_Start:
  7728                           	callstack 0
  7729                           
  7730 ;; *************** function _I2C_2_Master_Idle *****************
  7731 ;; Defined at:
  7732 ;;		line 22 in file "i2c.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2, status,0
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;Total ram usage:        1 bytes
  7751 ;; Hardware stack levels used: 1
  7752 ;; Hardware stack levels required when called: 4
  7753 ;; This function calls:
  7754 ;;		Nothing
  7755 ;; This function is called by:
  7756 ;;		_I2C_2_Master_Start
  7757 ;;		_I2C_2_Master_RepStart
  7758 ;;		_I2C_2_Master_Stop
  7759 ;;		_I2C_2_Master_Write
  7760 ;;		_I2C_2_Master_Read
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text48
  7765   003074                     __ptext48:
  7766                           	callstack 0
  7767   003074                     _I2C_2_Master_Idle:
  7768                           	callstack 24
  7769   003074                     l145:
  7770   003074  010E               	movlb	14	; () banked
  7771   003076  B5D8               	btfsc	216,2,b	;volatile
  7772   003078  EF40  F018         	goto	u1051
  7773   00307C  EF42  F018         	goto	u1050
  7774   003080                     u1051:
  7775   003080  EF3A  F018         	goto	l145
  7776   003084                     u1050:
  7777   003084                     
  7778                           ; BSR set to: 14
  7779   003084  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7780   003088  0E1F               	movlw	31
  7781   00308A  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7782   00308C  A4D8               	btfss	status,2,c
  7783   00308E  EF4B  F018         	goto	u1061
  7784   003092  EF4D  F018         	goto	u1060
  7785   003096                     u1061:
  7786   003096  EF3A  F018         	goto	l145
  7787   00309A                     u1060:
  7788   00309A                     
  7789                           ; BSR set to: 14
  7790   00309A  0012               	return		;funcret
  7791   00309C                     __end_of_I2C_2_Master_Idle:
  7792                           	callstack 0
  7793                           
  7794 ;; *************** function _HighISR *****************
  7795 ;; Defined at:
  7796 ;;		line 23 in file "interrupts.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;		None
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;		None
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  1    wreg      void 
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7812 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7814 ;;Total ram usage:        2 bytes
  7815 ;; Hardware stack levels used: 1
  7816 ;; Hardware stack levels required when called: 3
  7817 ;; This function calls:
  7818 ;;		i2_clear_interrupt_flag
  7819 ;; This function is called by:
  7820 ;;		Interrupt level 2
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	intcode
  7825   000008                     __pintcode:
  7826                           	callstack 0
  7827   000008                     _HighISR:
  7828                           	callstack 18
  7829                           
  7830                           ; BSR set to: 14
  7831                           ;incstack = 0
  7832   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7833   00000A                     
  7834                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7835   00000A  010E               	movlb	14	; () banked
  7836   00000C  A333               	btfss	51,1,b	;volatile
  7837   00000E  EF0B  F000         	goto	i2u161_41
  7838   000012  EF0D  F000         	goto	i2u161_40
  7839   000016                     i2u161_41:
  7840   000016  EF39  F000         	goto	i2l516
  7841   00001A                     i2u161_40:
  7842   00001A                     
  7843                           ; BSR set to: 14
  7844   00001A  0100               	movlb	0	; () banked
  7845   00001C  51F4               	movf	_response_in_progress& (0+255),w,b
  7846   00001E  11F5               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7847   000020  A4D8               	btfss	status,2,c
  7848   000022  EF15  F000         	goto	i2u162_41
  7849   000026  EF17  F000         	goto	i2u162_40
  7850   00002A                     i2u162_41:
  7851   00002A  EF39  F000         	goto	i2l516
  7852   00002E                     i2u162_40:
  7853   00002E                     
  7854                           ; BSR set to: 0
  7855                           ;interrupts.c: 27:         card_detected = 1;
  7856   00002E  0E00               	movlw	0
  7857   000030  6FF3               	movwf	(_card_detected+1)& (0+255),b
  7858   000032  0E01               	movlw	1
  7859   000034  6FF2               	movwf	_card_detected& (0+255),b
  7860   000036                     
  7861                           ; BSR set to: 0
  7862                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7863   000036  8E7C               	bsf	124,7,c	;volatile
  7864   000038                     
  7865                           ; BSR set to: 0
  7866                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7867   000038  0E05               	movlw	5
  7868   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7869   00003C  0E0F               	movlw	15
  7870   00003E  6E03               	movwf	??_HighISR^0,c
  7871   000040  0EF1               	movlw	241
  7872   000042                     i2u238_47:
  7873   000042  2EE8               	decfsz	wreg,f,c
  7874   000044  D7FE               	bra	i2u238_47
  7875   000046  2E03               	decfsz	??_HighISR^0,f,c
  7876   000048  D7FC               	bra	i2u238_47
  7877   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7878   00004C  D7FA               	bra	i2u238_47
  7879   00004E  F000               	nop	
  7880   000050                     
  7881                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7882   000050  9E7C               	bcf	124,7,c	;volatile
  7883   000052                     
  7884                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7885   000052  0E05               	movlw	5
  7886   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7887   000056  0E0F               	movlw	15
  7888   000058  6E03               	movwf	??_HighISR^0,c
  7889   00005A  0EF1               	movlw	241
  7890   00005C                     i2u239_47:
  7891   00005C  2EE8               	decfsz	wreg,f,c
  7892   00005E  D7FE               	bra	i2u239_47
  7893   000060  2E03               	decfsz	??_HighISR^0,f,c
  7894   000062  D7FC               	bra	i2u239_47
  7895   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7896   000066  D7FA               	bra	i2u239_47
  7897   000068  F000               	nop	
  7898   00006A                     
  7899                           ;interrupts.c: 32:         clear_interrupt_flag();
  7900   00006A  ECBD  F018         	call	i2_clear_interrupt_flag	;wreg free
  7901   00006E                     
  7902                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7903   00006E  010E               	movlb	14	; () banked
  7904   000070  9333               	bcf	51,1,b	;volatile
  7905   000072                     i2l516:
  7906   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7907   000074  0011               	retfie		f
  7908   000076                     __end_of_HighISR:
  7909                           	callstack 0
  7910                           
  7911 ;; *************** function i2_clear_interrupt_flag *****************
  7912 ;; Defined at:
  7913 ;;		line 52 in file "interrupts.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;Total ram usage:        0 bytes
  7932 ;; Hardware stack levels used: 1
  7933 ;; Hardware stack levels required when called: 2
  7934 ;; This function calls:
  7935 ;;		i2_I2C_2_Master_Start
  7936 ;;		i2_I2C_2_Master_Stop
  7937 ;;		i2_I2C_2_Master_Write
  7938 ;; This function is called by:
  7939 ;;		_HighISR
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text50
  7944   00317A                     __ptext50:
  7945                           	callstack 0
  7946   00317A                     i2_clear_interrupt_flag:
  7947                           	callstack 18
  7948   00317A                     
  7949                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7950   00317A  ECF0  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7951                           
  7952                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7953   00317E  0E52               	movlw	82
  7954   003180  ECD6  F018         	call	i2_I2C_2_Master_Write
  7955                           
  7956                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7957   003184  0EE6               	movlw	230
  7958   003186  ECD6  F018         	call	i2_I2C_2_Master_Write
  7959                           
  7960                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7961   00318A  ECEB  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7962   00318E  0012               	return		;funcret
  7963   003190                     __end_ofi2_clear_interrupt_flag:
  7964                           	callstack 0
  7965                           
  7966 ;; *************** function i2_I2C_2_Master_Write *****************
  7967 ;; Defined at:
  7968 ;;		line 45 in file "i2c.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  data_byte       1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  data_byte       1    1[COMRAM] unsigned char 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0, cstack
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;Total ram usage:        1 bytes
  7987 ;; Hardware stack levels used: 1
  7988 ;; Hardware stack levels required when called: 1
  7989 ;; This function calls:
  7990 ;;		i2_I2C_2_Master_Idle
  7991 ;; This function is called by:
  7992 ;;		i2_clear_interrupt_flag
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           	psect	text51
  7997   0031AC                     __ptext51:
  7998                           	callstack 0
  7999   0031AC                     i2_I2C_2_Master_Write:
  8000                           	callstack 18
  8001                           
  8002                           ;incstack = 0
  8003                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  8004   0031AC  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  8005   0031AE                     
  8006                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8007   0031AE  EC4E  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8008   0031B2                     
  8009                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8010   0031B2  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  8011   0031B6  0012               	return		;funcret
  8012   0031B8                     __end_ofi2_I2C_2_Master_Write:
  8013                           	callstack 0
  8014                           
  8015 ;; *************** function i2_I2C_2_Master_Stop *****************
  8016 ;; Defined at:
  8017 ;;		line 39 in file "i2c.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;		None
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;		None
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  1    wreg      void 
  8024 ;; Registers used:
  8025 ;;		wreg, status,2, status,0, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8035 ;;Total ram usage:        0 bytes
  8036 ;; Hardware stack levels used: 1
  8037 ;; Hardware stack levels required when called: 1
  8038 ;; This function calls:
  8039 ;;		i2_I2C_2_Master_Idle
  8040 ;; This function is called by:
  8041 ;;		i2_clear_interrupt_flag
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text52
  8046   0031D6                     __ptext52:
  8047                           	callstack 0
  8048   0031D6                     i2_I2C_2_Master_Stop:
  8049                           	callstack 18
  8050   0031D6                     
  8051                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8052   0031D6  EC4E  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8053   0031DA                     
  8054                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8055   0031DA  010E               	movlb	14	; () banked
  8056   0031DC  85DA               	bsf	218,2,b	;volatile
  8057   0031DE                     
  8058                           ; BSR set to: 14
  8059   0031DE  0012               	return		;funcret
  8060   0031E0                     __end_ofi2_I2C_2_Master_Stop:
  8061                           	callstack 0
  8062                           
  8063 ;; *************** function i2_I2C_2_Master_Start *****************
  8064 ;; Defined at:
  8065 ;;		line 27 in file "i2c.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;		None
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, status,0, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8083 ;;Total ram usage:        0 bytes
  8084 ;; Hardware stack levels used: 1
  8085 ;; Hardware stack levels required when called: 1
  8086 ;; This function calls:
  8087 ;;		i2_I2C_2_Master_Idle
  8088 ;; This function is called by:
  8089 ;;		i2_clear_interrupt_flag
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text53
  8094   0031E0                     __ptext53:
  8095                           	callstack 0
  8096   0031E0                     i2_I2C_2_Master_Start:
  8097                           	callstack 18
  8098   0031E0                     
  8099                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8100   0031E0  EC4E  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8101   0031E4                     
  8102                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8103   0031E4  010E               	movlb	14	; () banked
  8104   0031E6  81DA               	bsf	218,0,b	;volatile
  8105   0031E8                     
  8106                           ; BSR set to: 14
  8107   0031E8  0012               	return		;funcret
  8108   0031EA                     __end_ofi2_I2C_2_Master_Start:
  8109                           	callstack 0
  8110                           
  8111 ;; *************** function i2_I2C_2_Master_Idle *****************
  8112 ;; Defined at:
  8113 ;;		line 22 in file "i2c.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;		None
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8131 ;;Total ram usage:        1 bytes
  8132 ;; Hardware stack levels used: 1
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		i2_I2C_2_Master_Start
  8137 ;;		i2_I2C_2_Master_Stop
  8138 ;;		i2_I2C_2_Master_Write
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text54
  8143   00309C                     __ptext54:
  8144                           	callstack 0
  8145   00309C                     i2_I2C_2_Master_Idle:
  8146                           	callstack 18
  8147   00309C                     i2l145:
  8148   00309C  010E               	movlb	14	; () banked
  8149   00309E  B5D8               	btfsc	216,2,b	;volatile
  8150   0030A0  EF54  F018         	goto	i2u134_41
  8151   0030A4  EF56  F018         	goto	i2u134_40
  8152   0030A8                     i2u134_41:
  8153   0030A8  EF4E  F018         	goto	i2l145
  8154   0030AC                     i2u134_40:
  8155   0030AC                     
  8156                           ; BSR set to: 14
  8157   0030AC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8158   0030B0  0E1F               	movlw	31
  8159   0030B2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8160   0030B4  A4D8               	btfss	status,2,c
  8161   0030B6  EF5F  F018         	goto	i2u135_41
  8162   0030BA  EF61  F018         	goto	i2u135_40
  8163   0030BE                     i2u135_41:
  8164   0030BE  EF4E  F018         	goto	i2l145
  8165   0030C2                     i2u135_40:
  8166   0030C2                     
  8167                           ; BSR set to: 14
  8168   0030C2  0012               	return		;funcret
  8169   0030C4                     __end_ofi2_I2C_2_Master_Idle:
  8170                           	callstack 0
  8171                           
  8172                           	psect	rparam
  8173   000000                     
  8174                           	psect	temp
  8175   00005B                     btemp:
  8176                           	callstack 0
  8177   00005B                     	ds	1
  8178   000000                     int$flags	set	btemp
  8179   000000                     wtemp8	set	btemp+1
  8180   000000                     ttemp5	set	btemp+1
  8181   000000                     ttemp6	set	btemp+4
  8182   000000                     ttemp7	set	btemp+8
  8183                           
  8184                           	psect	idloc
  8185                           
  8186                           ;Config register IDLOC0 @ 0x200000
  8187                           ;	unspecified, using default values
  8188   200000                     	org	2097152
  8189   200000  0FFF               	dw	4095
  8190                           
  8191                           ;Config register IDLOC1 @ 0x200002
  8192                           ;	unspecified, using default values
  8193   200002                     	org	2097154
  8194   200002  0FFF               	dw	4095
  8195                           
  8196                           ;Config register IDLOC2 @ 0x200004
  8197                           ;	unspecified, using default values
  8198   200004                     	org	2097156
  8199   200004  0FFF               	dw	4095
  8200                           
  8201                           ;Config register IDLOC3 @ 0x200006
  8202                           ;	unspecified, using default values
  8203   200006                     	org	2097158
  8204   200006  0FFF               	dw	4095
  8205                           
  8206                           ;Config register IDLOC4 @ 0x200008
  8207                           ;	unspecified, using default values
  8208   200008                     	org	2097160
  8209   200008  0FFF               	dw	4095
  8210                           
  8211                           ;Config register IDLOC5 @ 0x20000A
  8212                           ;	unspecified, using default values
  8213   20000A                     	org	2097162
  8214   20000A  0FFF               	dw	4095
  8215                           
  8216                           ;Config register IDLOC6 @ 0x20000C
  8217                           ;	unspecified, using default values
  8218   20000C                     	org	2097164
  8219   20000C  0FFF               	dw	4095
  8220                           
  8221                           ;Config register IDLOC7 @ 0x20000E
  8222                           ;	unspecified, using default values
  8223   20000E                     	org	2097166
  8224   20000E  0FFF               	dw	4095
  8225                           
  8226                           	psect	config
  8227                           
  8228                           ;Config register CONFIG1L @ 0x300000
  8229                           ;	External Oscillator mode Selection bits
  8230                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8231                           ;	Power-up default value for COSC bits
  8232                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8233   300000                     	org	3145728
  8234   300000  AA                 	db	170
  8235                           
  8236                           ;Config register CONFIG1H @ 0x300001
  8237                           ;	unspecified, using default values
  8238                           ;	Clock Out Enable bit
  8239                           ;	CLKOUTEN = 0x1, unprogrammed default
  8240                           ;	Clock Switch Enable bit
  8241                           ;	CSWEN = 0x1, unprogrammed default
  8242                           ;	Fail-Safe Clock Monitor Enable bit
  8243                           ;	FCMEN = 0x1, unprogrammed default
  8244   300001                     	org	3145729
  8245   300001  FF                 	db	255
  8246                           
  8247                           ;Config register CONFIG2L @ 0x300002
  8248                           ;	unspecified, using default values
  8249                           ;	Master Clear Enable bit
  8250                           ;	MCLRE = 0x1, unprogrammed default
  8251                           ;	Power-up Timer Enable bit
  8252                           ;	PWRTE = 0x1, unprogrammed default
  8253                           ;	Low-power BOR enable bit
  8254                           ;	LPBOREN = 0x1, unprogrammed default
  8255                           ;	Brown-out Reset Enable bits
  8256                           ;	BOREN = 0x3, unprogrammed default
  8257   300002                     	org	3145730
  8258   300002  FF                 	db	255
  8259                           
  8260                           ;Config register CONFIG2H @ 0x300003
  8261                           ;	unspecified, using default values
  8262                           ;	Brown Out Reset Voltage selection bits
  8263                           ;	BORV = 0x3, unprogrammed default
  8264                           ;	ZCD Disable bit
  8265                           ;	ZCD = 0x1, unprogrammed default
  8266                           ;	PPSLOCK bit One-Way Set Enable bit
  8267                           ;	PPS1WAY = 0x1, unprogrammed default
  8268                           ;	Stack Full/Underflow Reset Enable bit
  8269                           ;	STVREN = 0x1, unprogrammed default
  8270                           ;	Debugger Enable bit
  8271                           ;	DEBUG = 0x1, unprogrammed default
  8272                           ;	Extended Instruction Set Enable bit
  8273                           ;	XINST = 0x1, unprogrammed default
  8274   300003                     	org	3145731
  8275   300003  FF                 	db	255
  8276                           
  8277                           ;Config register CONFIG3L @ 0x300004
  8278                           ;	WDT Period Select bits
  8279                           ;	WDTCPS = 0x1F, unprogrammed default
  8280                           ;	WDT operating mode
  8281                           ;	WDTE = OFF, WDT Disabled
  8282   300004                     	org	3145732
  8283   300004  9F                 	db	159
  8284                           
  8285                           ;Config register CONFIG3H @ 0x300005
  8286                           ;	unspecified, using default values
  8287                           ;	WDT Window Select bits
  8288                           ;	WDTCWS = 0x7, unprogrammed default
  8289                           ;	WDT input clock selector
  8290                           ;	WDTCCS = 0x7, unprogrammed default
  8291   300005                     	org	3145733
  8292   300005  FF                 	db	255
  8293                           
  8294                           ;Config register CONFIG4L @ 0x300006
  8295                           ;	unspecified, using default values
  8296                           ;	Write Protection Block 0
  8297                           ;	WRT0 = 0x1, unprogrammed default
  8298                           ;	Write Protection Block 1
  8299                           ;	WRT1 = 0x1, unprogrammed default
  8300                           ;	Write Protection Block 2
  8301                           ;	WRT2 = 0x1, unprogrammed default
  8302                           ;	Write Protection Block 3
  8303                           ;	WRT3 = 0x1, unprogrammed default
  8304                           ;	Write Protection Block 3
  8305                           ;	WRT4 = 0x1, unprogrammed default
  8306                           ;	Write Protection Block 3
  8307                           ;	WRT5 = 0x1, unprogrammed default
  8308                           ;	Write Protection Block 3
  8309                           ;	WRT6 = 0x1, unprogrammed default
  8310                           ;	Write Protection Block 3
  8311                           ;	WRT7 = 0x1, unprogrammed default
  8312   300006                     	org	3145734
  8313   300006  FF                 	db	255
  8314                           
  8315                           ;Config register CONFIG4H @ 0x300007
  8316                           ;	unspecified, using default values
  8317                           ;	Configuration Register Write Protection bit
  8318                           ;	WRTC = 0x1, unprogrammed default
  8319                           ;	Boot Block Write Protection bit
  8320                           ;	WRTB = 0x1, unprogrammed default
  8321                           ;	Data EEPROM Write Protection bit
  8322                           ;	WRTD = 0x1, unprogrammed default
  8323                           ;	Scanner Enable bit
  8324                           ;	SCANE = 0x1, unprogrammed default
  8325                           ;	Low Voltage Programming Enable bit
  8326                           ;	LVP = 0x1, unprogrammed default
  8327   300007                     	org	3145735
  8328   300007  FF                 	db	255
  8329                           
  8330                           ;Config register CONFIG5L @ 0x300008
  8331                           ;	unspecified, using default values
  8332                           ;	UserNVM Program Memory Code Protection bit
  8333                           ;	CP = 0x1, unprogrammed default
  8334                           ;	DataNVM Memory Code Protection bit
  8335                           ;	CPD = 0x1, unprogrammed default
  8336   300008                     	org	3145736
  8337   300008  FF                 	db	255
  8338                           
  8339                           ;Config register CONFIG5H @ 0x300009
  8340                           ;	unspecified, using default values
  8341   300009                     	org	3145737
  8342   300009  FF                 	db	255
  8343                           
  8344                           ;Config register CONFIG6L @ 0x30000A
  8345                           ;	unspecified, using default values
  8346                           ;	Table Read Protection Block 0
  8347                           ;	EBTR0 = 0x1, unprogrammed default
  8348                           ;	Table Read Protection Block 1
  8349                           ;	EBTR1 = 0x1, unprogrammed default
  8350                           ;	Table Read Protection Block 2
  8351                           ;	EBTR2 = 0x1, unprogrammed default
  8352                           ;	Table Read Protection Block 3
  8353                           ;	EBTR3 = 0x1, unprogrammed default
  8354                           ;	Table Read Protection Block 4
  8355                           ;	EBTR4 = 0x1, unprogrammed default
  8356                           ;	Table Read Protection Block 5
  8357                           ;	EBTR5 = 0x1, unprogrammed default
  8358                           ;	Table Read Protection Block 6
  8359                           ;	EBTR6 = 0x1, unprogrammed default
  8360                           ;	Table Read Protection Block 7
  8361                           ;	EBTR7 = 0x1, unprogrammed default
  8362   30000A                     	org	3145738
  8363   30000A  FF                 	db	255
  8364                           
  8365                           ;Config register CONFIG6H @ 0x30000B
  8366                           ;	unspecified, using default values
  8367                           ;	Boot Block Table Read Protection bit
  8368                           ;	EBTRB = 0x1, unprogrammed default
  8369   30000B                     	org	3145739
  8370   30000B  FF                 	db	255
  8371                           tosu	equ	0xFFF
  8372                           tosh	equ	0xFFE
  8373                           tosl	equ	0xFFD
  8374                           stkptr	equ	0xFFC
  8375                           pclatu	equ	0xFFB
  8376                           pclath	equ	0xFFA
  8377                           pcl	equ	0xFF9
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           indf0	equ	0xFEF
  8385                           postinc0	equ	0xFEE
  8386                           postdec0	equ	0xFED
  8387                           preinc0	equ	0xFEC
  8388                           plusw0	equ	0xFEB
  8389                           fsr0h	equ	0xFEA
  8390                           fsr0l	equ	0xFE9
  8391                           wreg	equ	0xFE8
  8392                           indf1	equ	0xFE7
  8393                           postinc1	equ	0xFE6
  8394                           postdec1	equ	0xFE5
  8395                           preinc1	equ	0xFE4
  8396                           plusw1	equ	0xFE3
  8397                           fsr1h	equ	0xFE2
  8398                           fsr1l	equ	0xFE1
  8399                           bsr	equ	0xFE0
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           postdec2	equ	0xFDD
  8403                           preinc2	equ	0xFDC
  8404                           plusw2	equ	0xFDB
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    142     151
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2583$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2534$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2534$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               414   414      0   89757
                                            140 BANK0      2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    3507
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    9897
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   44147
                                             33 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    8576
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     523
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    4588
                                             26 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   25800
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    5787
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4571
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    7825
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5179
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2981
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     963
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     750
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     722
                                              4 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     378
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1946
                                             15 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Clear
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      64        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 10:31:50 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2D78  
                       _color_read_Blue 2E68                                      l22 314A  
                                    l31 2EB6                                      l25 2DC6  
                                    l34 2E66                                      l19 2FEE  
                                    l28 2E16                                      l86 2074  
                                    l95 2AF6                                      l79 2A70  
                   ___wmul@multiplicand 0007                        _color_read_Clear 2E18  
                      _color_read_Green 2DC8                       ??_Interrupts_init 0011  
                                   l100 28D0                                     l110 295C  
                                   l105 2822                                     l115 29E8  
                                   l142 3072                                     l151 31D4  
                                   l160 31AA                                     l240 1336  
                                   l145 3074                                     l321 259E  
                                   l241 1452                                     l154 31C0  
                                   l242 1450                                     l163 2F3C  
                                   l148 309A                                     l244 147E  
                                   l157 31CA                                     l421 312A  
                                   l237 144A                                     l510 2FBA  
                                   l334 1D80                                     l350 2B7A  
                                   l430 314E                                     l238 1328  
                                   l239 1326                                     l344 26AA  
                                   l433 3162                                     l274 310A  
                                   l362 11AE                                     l363 11CE  
                                   l339 1888                                     l532 30E8  
                                   l364 11EE                                     l365 1270  
                                   l526 2CD0                                     l519 319E  
                                   l439 301E                                     l368 2484  
                                   l529 3178                                     l646 1F08  
                                   l659 21D8     normalise_readings@normalised_values 0027  
                      ??_motor_response 0024                                     _abs 2F3E  
                                   _pad 2B7C                   __end_of_card_response 2486  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1030 2C68  
                                  l1023 2C60                                    l1210 2F7C  
                                  ?_abs 0017                                    l1207 2F74  
                                  l3000 0E80                                    l1217 2D76  
                                  l3010 0EE6                                    l3002 0E94  
                                  l1250 191E                                    l1243 2BF4  
                                  l1251 1964                                    l3020 0F50  
                                  l3012 0EFE                                    l3004 0EAA  
                                  l3110 11F0                                    l3102 11B0  
                                  l3030 0FA6                                    l3014 0F12  
                                  l3006 0EBE                                    l1262 1B06  
                                  l1239 2B9E                                    l3112 1208  
                                  l3104 11C8                                    l3032 0FBA  
                                  l3024 0F68                                    l3016 0F28  
                                  l3008 0ED2                                    l1248 1916  
                                  l3200 292A                                    l3122 3190  
                                  l3130 2C94                                    l3106 11D0  
                                  l3050 103C                                    l3034 0FCE  
                                  l3026 0F7C                                    l3018 0F3C  
                                  l3202 2938                                    l3210 3116  
                                  l1275 2D24                                    l3140 2CC6  
                                  l3132 2C98                                    l3124 2C6A  
                                  l3108 11E8                                    l3060 1126  
                                  l3052 1050                                    l3044 0FE6  
                                  l3028 0F92                                    l3116 120E  
                                  l3204 2940                                    l3220 3128  
                                  l3212 3118                                    l1269 2336  
                                  l3134 2CA2                                    l3126 2C7E  
                                  l3230 2FAA                                    l3222 2F7E  
                                  l3206 30EA                                    l3070 113E  
                                  l3054 10D0                                    l3046 0FFA  
                                  l3214 311A                                    l1287 2774  
                                  l1295 2EFA                                    l3136 2CB0  
                                  l3128 2C82                                    l3240 2FB6  
                                  l3232 2FAE                                    l3224 2F9E  
                                  l3072 1152                                    l3056 10E4  
                                  l3048 1010                                    l3160 2FDA  
                                  l3216 3124                                    l3208 310C  
                                  l3138 2CC2                                    l3242 2FB8  
                                  l3234 2FB0                                    l3226 2FA0  
                                  l3090 1196                                    l3058 10FA  
                                  l1298 31EA                                    l3162 2FE4  
                                  l3154 2FBC                                    l3170 2A40  
                                  l3218 3126                                    l3236 2FB2  
                                  l3228 2FA4                                    l3156 2FC0  
                                  l3180 2A62                                    l3172 2A4A  
                                  l3164 29EA                                    l3238 2FB4  
                                  l3086 116C                                    l3158 2FCA  
                                  l3182 2A64                                    l3174 2A4C  
                                  l3166 29F2                                    l2640 31D0  
                                  l2560 30E0                                    l2800 280A  
                                  l3088 1180                                    l3600 1E30  
                                  l3184 2A6E                                    l3176 2A56  
                                  l3168 2A1C                                    l2554 3074  
                                  l2642 31A2                                    l2714 312E  
                                  l2650 31B8                                    l2730 2EAE  
                                  l2722 2DC8                                    l2570 2C18  
                                  l2810 2986                                    l2802 295E  
                                  l3610 1EA0                                    l3602 1E3E  
                                  l3194 28FA                                    l3186 28D2  
                                  l3178 2A58                                    l2556 3084  
                                  l2644 31A6                                    l2660 2F12  
                                  l2652 31BC                                    l2724 2E0E  
                                  l2716 2D78                                    l2580 2C52  
                                  l2572 2C20                                    l2564 2BF6  
                                  l2820 29CC                                    l2812 299E  
                                  l2804 297E                                    l2740 2A72  
                                  l3612 1EB2                                    l3604 1E50  
                                  l3700 197C                                    l3196 2912  
                                  l3188 28F2                                    l2638 31CC  
                                  l2646 31C2                                    l2662 2F38  
                                  l2654 2EFE                                    l2734 2E18  
                                  l2718 2DBE                                    l2910 1CB8  
                                  l2582 2C54                                    l2574 2C2E  
                                  l2566 2BFE                                    l2558 30C4  
                                  l2670 1F26                                    l2814 29AA  
                                  l2750 2AB8                                    l2742 2A76  
                                  l2822 314E                                    l3606 1E7E  
                                  l3614 1EB8                                    l3630 20AC  
                                  l3622 2076                                    l3710 1A88  
                                  l3702 19FE                                    l3198 291E  
                                  l2648 31C6                                    l2664 2F3A  
                                  l2656 2F02                                    l2728 2E68  
                                  l2736 2E5E                                    l2920 1D08  
                                  l2912 1CD4                                    l2904 1C88  
                                  l2584 2C5A                                    l2576 2C34  
                                  l2568 2C10                                    l2680 1FF0  
                                  l2672 1F7A                                    l2816 29B6  
                                  l2752 2AC4                                    l2744 2A82  
                                  l2760 2844                                    l2824 315E  
                                  l3616 1EC8                                    l3608 1E9E  
                                  l3640 2114                                    l3632 20BA  
                                  l3624 207A                                    l3560 26F8  
                                  l3552 26AC                                    l3720 1AE6  
                                  l3712 1AA6                                    l3704 1A04  
                                  l3800 24C6                                    l2826 3164  
                                  l2658 2F0A                                    l2922 1D1C  
                                  l2914 1D00                                    l2906 1C9C  
                                  l2578 2C4A                                    l2682 2034  
                                  l2674 1F8E                                    l2818 29C4  
                                  l2754 2AD2                                    l2746 2A90  
                                  l2770 287C                                    l3618 1EE8  
                                  l3642 2122                                    l3650 2188  
                                  l3634 20DA                                    l3626 2088  
                                  l3562 272E                                    l3554 26BE  
                                  l3570 2ED6                                    l3714 1AC0  
                                  l3706 1A0A                                    l3730 221E  
                                  l3810 24FA                                    l2850 305E  
                                  l2842 304A                                    l2924 1D34  
                                  l2908 1CB4                                    l2860 1B10  
                                  l2676 1F92                                    l2668 1F0A  
                                  l2756 2ADE                                    l2748 2A9C  
                                  l2772 2888                                    l2780 2776  
                                  l3580 1D86                                    l3652 2198  
                                  l3644 2150                                    l3636 20F8  
                                  l3628 20A8                                    l3556 26D0  
                                  l3572 2EDA                                    l3660 2B8A  
                                  l3716 1AD0                                    l3708 1A6E  
                                  l3740 22C8                                    l3732 2222  
                                  l3724 21DA                                    l3820 2570  
                                  l3812 2500                                    l2852 3060  
                                  l2844 3054                                    l3900 143A  
                                  l2926 1D38                                    l2862 1B60  
                                  l2854 1B08                                    l2678 1FD4  
                                  l2774 2894                                    l2766 284C  
                                  l2758 2824                                    l2790 27B6  
                                  l2782 2796                                    l3574 2F3E  
                                  l2942 2FF0                                    l3590 1DE6  
                                  l3582 1D94                                    l3654 21B8  
                                  l3646 2170                                    l3638 2100  
                                  l3558 26DA                                    l3566 2EB8  
                                  l3670 2BE0                                    l3662 2B96  
                                  l3718 1AD6                                    l3734 2232  
                                  l3726 2202                                    l3830 23BE  
                                  l3822 2338                                    l3814 251C  
                                  l3806 24CE                                    l2846 305A  
                                  l3910 14C4                                    l3902 1460  
                                  ?_pad 0015                                    l2928 1D54  
                                  l2880 1BD4                                    l2872 1B88  
                                  l2864 1B64                                    l2776 289C  
                                  l2768 2864                                    l2792 27CE  
                                  l3576 2F58                                    l2944 2FF4  
                                  l3592 1DEA                                    l3584 1DB4  
                                  l3648 2182                                    l3568 2EC4  
                                  l3664 2BAA                                    l3680 18EE  
                                  l3672 188A                                    l3744 22F8  
                                  l3736 2252                                    l3728 2210  
                                  l3760 2D1A                                    l3840 246C  
                                  l3832 241A                                    l3824 2338  
                                  l3816 2548                                    l3808 24E2  
                                  l2848 305C                                    l3920 1546  
                                  l3912 14D8                                    l3904 148C  
                                  l2890 1C1C                                    l2882 1C00  
                                  l2874 1B9C                                    l2866 1B80  
                                  l2970 2698                                    l2962 25A0  
                                  l2778 28B8                                    l2794 27DA  
                                  l2946 3002                                    l3594 1DF6  
                                  l3586 1DB8                                    l3578 1D82  
                                  l3666 2BBE                                    l3658 2B7C  
                                  l3690 194C                                    l3682 190A  
                                  l3674 18AA                                    l3738 2272  
                                  l3754 2CD2                                    l3770 2D48  
                                  l3834 2436                                    l3826 235C  
                                  l3818 2564                                    l3922 158C  
                                  l3914 14F2                                    l3906 14A0  
                                  l3850 1282                                    l3842 1272  
                                  l2892 1C34                                    l2876 1BB4  
                                  l2972 269A                                    l2796 27E6  
                                  l2788 279E                                    l2948 3006  
                                  l3596 1E14                                    l3588 1DC6  
                                  l3668 2BC2                                    l3692 1958  
                                  l3684 1926                                    l3676 18BE  
                                  l3748 230A                                    l3756 2CDE  
                                  l3772 2D64                                    l3764 2D26  
                                  l3836 2446                                    l3828 23B2  
                                  l3916 1520                                    l3908 14AC  
                                  l3860 12A2                                    l3852 1286  
                                  l3844 1276                                    l2894 1C38  
                                  l2878 1BB8                                    l2990 2B66  
                                  l2974 2AF8                                    l2798 27EE  
                                  l3782 15AA                                    l3598 1E1C  
                                  l3694 1960                                    l3686 1936  
                                  l3678 18CE                                    l3758 2CFA  
                                  l3766 2D38                                    l3838 2460  
                                  l3918 1534                                    l3870 12D4  
                                  l3862 12AA                                    l3854 128A  
                                  l3846 127A                                    l2896 1C54  
                                  l2888 1C08                                    l2992 2B68  
                                  l2984 2B14                                    l2976 2AFC  
                                  l2968 25A4                                    l3784 1876  
                                  l3776 15A6                                    l3696 196C  
                                  l3688 193C                                    l3768 2D40  
                                  l3872 12DA                                    l3864 12B2  
                                  l3856 128C                                    l3848 127E  
                                  l2898 1C80                                    l2994 2B78  
                                  l2986 2B42                                    l2978 2B10  
                                  l3786 1878                                    l3698 1976  
                                  l3794 2490                                    l3890 13AE  
                                  l3882 1338                                    l3874 12E6  
                                  l3866 12C4                                    l3858 1290  
                                  l2988 2B62                                    l3796 24A4  
                                  l3788 2486                                    l3892 13CE  
                                  l3884 1350                                    l3876 131C  
                                  l3868 12CC                                    l3966 1222  
                                  l2998 0E7C                                    l3798 24AA  
                                  l3894 13EE                                    l3886 1374  
                                  l3896 142A                                    l3888 138E  
                                  l3898 1436                                    STR_1 0E01  
                                  STR_2 0E57                                    STR_3 0E33  
                                  STR_4 0E6E                                    u1200 2F26  
                                  u2000 251C                                    u1201 2F1E  
                                  u2001 2518                                    u1050 3084  
                                  u2010 1336                                    u1051 3080  
                                  u2011 1332                                    u1060 309A  
                                  u1220 1F26                                    u1300 280A  
                                  u2020 144A                            ?_LEDSon_init 0001  
                                  u1061 3096                                    u1221 1F22  
                                  u1301 2806                                    u2021 1446  
                                  u1070 2C10                                    u1230 1FF0  
                                  u1310 29E8                                    u2030 1460  
                                  u1071 2C0C                                    u1231 1FEC  
                                  u1311 29E4                                    u2031 145C  
                                  u1400 1D54                                    u1080 2C2E  
                                  u1320 315E                                    u2040 148C  
                                  u1401 1D50                                    u1081 2C2A  
                                  u1321 315A                                    u2041 1488  
                                  u1218 2F28                                    u1090 2C4A  
                                  u1410 301E                                    u2050 14C4  
                                  u1091 2C46                                    u1411 301A  
                                  u2107 1594                                    u2051 14C0  
                                  u2117 2930                                    u1430 26AA  
                                  u1270 2AB4                                    u1431 26A6  
                                  u1271 2AB0                                    u2207 10EE  
                                  u2127 2FD0                                    u1360 1B80  
                                  u1440 2B42                                    u1280 2AF6  
                          _BAUD4CONbits 000EE9                                    u1361 1B7C  
                                  u1441 2B3E                                    u1281 2AF2  
                                  u2217 1118                                    u2137 24EE  
                                  u1370 1BD4                                    u1450 2B78  
                                  u1290 28B8                                    u1371 1BD0  
                                  u1451 2B74                                    u2307 28C2  
                                  u1291 28B4                                    u2227 115C  
                                  u2147 0E9E                                    u2067 1344  
                                  u1460 2C94                                    u1380 1C54  
                                  u1700 1DC6                                    u1461 2C90  
                                  u1381 1C50                                    u2317 2A88  
                                  u2237 118A                                    u2157 0F1C  
                                  u1701 1DC2                                    u2077 14E4  
                                  u1470 2CC2                                    u1390 1CD4  
                                  u1630 26BE                                    u1471 2CBE  
                                  u1391 1CD0                                    u2327 2ACA  
                                  u2247 11BA                                    u2167 0F86  
                                  u1711 1DF0                                    u1631 26BA  
                                  u2087 1512                                    u1720 1E14  
                                  u1800 2150                                    u1640 26D0  
                                  u1480 295C                                    u2337 29BC  
                                  u2257 11DA                                    u2177 1004  
                                  u1721 1E10                                    u1801 214C  
                                  u1641 26CC                                    u1481 2958  
                                  u2097 153C                                    u1730 1E3E  
                                  u1810 2198                                    u1650 26F8  
                                  _T2PR 000FBC                                    u2347 1BA6  
                                  u2267 11FA                                    u2187 102E  
                                  u1731 1E3A                                    u1811 2194  
                                  u1651 26F4                                    u1740 1E7E  
                                  u1660 272E                                    u1820 2B8A  
                                  u1900 1A88                                    u2357 1C26  
                                  u2277 27C0                                    u2197 105A  
                                  u1741 1E7A                                    u1661 272A  
                                  u1821 2B86                                    u1901 1A84  
                                  u1750 1EC8                                    u1670 2EFA  
                                  u1830 2BE0                                    u1910 1AA6  
                                  u2367 1CA6                                    u2287 2814  
                                  u1751 1EC4                                    u1671 2EF6  
                                  u1831 2BDC                                    u1911 1AA2  
                                  u1680 2F58                                    u1760 2088  
                                  u1920 1AC0                                    u1840 18BA  
                                  u2377 1D26                                    u2297 286E  
                                  u1681 2F54                                    u1761 2084  
                                  u1921 1ABC                                    u1841 18B4  
                                  u1690 1D94                                    u1770 20BA  
                                  u1930 1AD0                                    u1850 18BC  
                                  u1691 1D90                                    u1771 20B6  
                                  u1931 1ACC                                    u1780 20F8  
                                  u1860 18CE                                    u1940 2202  
                                  u1781 20F4                                    u1861 18CA  
                                  u1941 21FE                                    u1790 2122  
                                  u1870 190A                                    u1950 2252  
                                  u1791 211E                                    u1871 1906  
                                  u1951 224E                                    u1880 1936  
                                  u1960 2272                                    u1881 1932  
                                  u1961 226E                                    u1890 194C  
                                  u1970 2D1A                                    u1891 1948  
                                  u1971 2D16                                    u1980 1888  
                                  u1981 1884                                    u1990 24C6  
                                  u1991 24C2              normalise_readings@red_read 001F  
                                  abs@a 0017                                    _dbuf 0250  
                                  _main 1272                                    _dtoa 188A  
                                  _prec 00F0                                    pad@i 001C  
                                  pad@p 0019                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001E  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2A72                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0076  
      clear_read_calibration@clear_read 0083                         card_response@mL 008D  
                       card_response@mR 008F                  __end_of_color_read_Red 2DC8  
                       __end_of_HighISR 0076                    _response_in_progress 00F4  
           normalise_readings@blue_read 0023                            ___param_bank 000000  
                                 ??_abs 0019                                   ??_pad 001B  
                           _turnRight45 2776                         __end_of___aodiv 1F0A  
                                 ?_main 0001                                   ?_dtoa 0020  
                       __end_of___aomod 21DA                                   ?_stop 0018  
                       __end_of___lwdiv 2C6A                                   i2l151 31E8  
                                 i2l160 31B6                                   i2l145 309C  
                                 i2l148 30C2                                   i2l157 31DE  
                                 i2l516 0072                                   i2l529 318E  
                          vfpfcnvrt@fmt 0045                 ?_enable_color_interrupt 0001  
                          main@red_read 01E1                 __end_of_sendCharSerial4 3164  
            __end_of_I2C_2_Master_Start 31D6              __end_of_I2C_2_Master_Write 31AC  
                                 _flags 00F6                                   _fputc 26AC  
                                 _fputs 2EB8                                   pad@fp 0015  
        determine_card@master_closeness 0005                 ??_make_master_closeness 000B  
                                 _width 00EE                                   _putch 31EA  
                                 main@i 01E7                                   dtoa@d 0022  
                                 dtoa@i 0041                                   dtoa@n 0038  
                                 dtoa@p 0034                                   dtoa@s 0040  
                                 dtoa@w 0036                     normalise_readings@i 0033  
                                 tablat 000FF5                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2D78          card_response@normalised_values 0091  
                      card_response@buf 0081                 __end_of_color_read_Blue 2EB8  
                 _I2C_2_Master_RepStart 31B8                         ?_color_read_Red 0009  
                       __initialization 3020                            __end_of_main 15A6  
                          __end_of_dtoa 1B08                            __end_of_stop 2AF8  
        __end_of_enable_color_interrupt 31A0                                  ??_main 00EC  
                                ??_dtoa 002A                                  ??_stop 001C  
                         __activetblptr 000003                           main@blue_read 01E5  
                  main@clear_read_check 01DF               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0012                                  ?_fputc 0005  
                                ?_fputs 000E                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 0012  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i2l3142 31E0                                  i2l3150 31AE  
                                i2l3144 31E4                                  i2l3152 31B2  
                                i2l3146 31D6                                  i2l3306 317A  
                                i2l3148 31DA                                  i2l3520 0036  
                                i2l3530 006E                                  i2l3522 0038  
                                i2l3514 000A                                  i2l3524 0050  
                                i2l3516 001A                                  i2l3526 0052  
                                i2l3518 002E                                  i2l2840 30AC  
                                i2l3528 006A                                  i2l2838 309C  
                                _RG6PPS 000E88                               ??_HighISR 0003  
              __end_of_color_click_init 2FF0                  make_master_closeness@i 0029  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0055  
                             ??___aodiv 0015                               ??___aomod 0015  
                                ___wmul 30C4                      _normalise_readings 15A6  
                             ??___lwdiv 000F                                  clear_0 3026  
                                clear_1 3032                                  isa$std 000001  
                                pad@buf 0017                                  dtoa@fp 0020  
          __end_of_clear_interrupt_flag 317A                     ?_normalise_readings 001B  
                                fputc@c 0005                                  fputs@c 0012  
                                fputs@i 0013                                  fputs@s 000E  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                                  putch@c 0001  
                      __end_of_vfprintf 2D26                                  stop@mL 0018  
                                stop@mR 001A                       ??_initDCmotorsPWM 0005  
                             ??_sprintf 0057                 ?i2_clear_interrupt_flag 0001  
                     card_response@card 00EB                              __accesstop 0060  
               __end_of__initialization 3040                __end_of_color_read_Clear 2E68  
                       fullSpeedAhead@i 001D                __end_of_color_read_Green 2E18  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0029  
                         ___rparam_used 000001                        ?_color_read_Blue 0009  
                       _Interrupts_init 2F7E            __end_of_collect_avg_readings 1D82  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 2486  
                      _reverseFullSpeed 295E              collect_avg_readings@i_1602 001C  
            collect_avg_readings@i_1603 001E              collect_avg_readings@i_1604 0020  
            collect_avg_readings@i_1605 0022                 _set_interrupt_threshold 2C6A  
                         __end_of_fputc 2776                           __end_of_fputs 2EFC  
                         __end_of_putch 31EC                          main@clear_read 01E8  
        __end_ofi2_clear_interrupt_flag 3190                                 ??_fputc 0009  
                               ??_fputs 0012                                 ??_putch 0005  
                            __pbssBANK0 00EE                              __pbssBANK2 0200  
                     _color_writetoaddr 312C                            _T2CLKCONbits 000FBF  
                      motor_response@mL 0020                        motor_response@mR 0022  
                    ?_color_writetoaddr 0007                                 ?___wmul 0005  
                    motor_response@card 0026                            ?_turnRight45 0018  
                   ??_color_writetoaddr 0008                                 _INT1PPS 000DF1  
                        main@green_read 01E3                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5             set_interrupt_threshold@AIHT 000B  
           set_interrupt_threshold@AILT 0009                 __end_of_Interrupts_init 2FBC  
        collect_avg_readings@clear_read 0010                  color_writetoaddr@value 0007  
                      ??_color_read_Red 000B           __end_of_make_master_closeness 26AC  
                               _HighISR 0008          determine_card@predicted_colour 000D  
             __end_of_color_writetoaddr 314C                    _clear_interrupt_flag 3164  
                    _I2C_2_Master_Start 31CC                              _initUSART4 310C  
                   i2_I2C_2_Master_Idle 309C                      _I2C_2_Master_Write 31A0  
                               __Hparam 0000                     i2_I2C_2_Master_Stop 31D6  
                               __Lparam 0000                       color_read_Red@tmp 000E  
             ??_set_interrupt_threshold 000F  make_master_closeness@normalised_values 0007  
               sendStringSerial4@string 0006                       reverseFullSpeed@i 001D  
                               ___aodiv 1D82                                 ___aomod 2076  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 2BF6  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0018  
                          turnLeft45@mR 001A                                 __pcinit 3020  
                               __ramtop 0E00                                 __ptext0 1272  
                               __ptext1 310C                                 __ptext2 29EA  
                               __ptext3 28D2                                 __ptext4 2FBC  
                               __ptext5 304A                                 __ptext6 2486  
                               __ptext7 2338                                 __ptext8 2D26  
                               __ptext9 2CD2                    ?i2_I2C_2_Master_Idle 0001  
                             _T2CONbits 000FBD                    ?i2_I2C_2_Master_Stop 0001  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 005A  
                  _collect_avg_readings 1B08                                 main@buf 0100  
                               _sprintf 2D26                    ??_I2C_2_Master_Start 0006  
                  ??_I2C_2_Master_Write 0006                    end_of_initialization 3040  
        collect_avg_readings@green_read 0014                   normalise_readings@buf 001B  
                               fputc@fp 0007                                 fputs@fp 0010  
                     ?_color_click_init 0001                            turnRight45@i 001E  
                 ?_clear_interrupt_flag 0001                      ??_color_click_init 0009  
                         _card_detected 00F2                       __end_of_vfpfcnvrt 2338  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004B                              ??_vfprintf 0055  
                       _initDCmotorsPWM 29EA                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0017                   ??i2_I2C_2_Master_Idle 0001  
                 ??i2_I2C_2_Master_Stop 0002       normalise_readings@expected_values 0025  
       __end_of_set_interrupt_threshold 2CD2                           _card_response 2338  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0016  
                             _TRISBbits 000F82                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 0010  
              __end_of_reverseFullSpeed 29EA                        fullSpeedAhead@mL 0018  
                      fullSpeedAhead@mR 001A                     main@expected_values 0196  
              color_writetoaddr@address 0008                 ??_I2C_2_Master_RepStart 0006  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0009                            _EUSART4RXbuf 023C  
                          _EUSART4TXbuf 0200                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0009                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0005  
                            main@motorL 01EA                              main@motorR 01F3  
                    ??_color_read_Clear 000B                      ??_color_read_Green 000B  
                            _turnLeft45 2824                          _fullSpeedAhead 28D2  
                           vfpfcnvrt@ap 0047                             vfpfcnvrt@cp 0053  
                           vfpfcnvrt@fp 0043                          __end_of___wmul 30EA  
                       determine_card@i 000E                          ?_card_response 0081  
                   color_read_Clear@tmp 000E                     start_initialization 3020  
                           __end_of_abs 2F7E                             __end_of_pad 2BF6  
                         _TxBufWriteCnt 0058                           ??_LEDSon_init 0005  
                ??_clear_interrupt_flag 0007          __end_of_clear_read_calibration 25A0  
                   color_read_Green@tmp 000E                 __end_of_initDCmotorsPWM 2A72  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 295E  
              ??_enable_color_interrupt 0009                                ??___wmul 0009  
         i2I2C_2_Master_Write@data_byte 0002                          _determine_card 2AF8  
          __end_ofi2_I2C_2_Master_Start 31EA            __end_ofi2_I2C_2_Master_Write 31B8  
                           __pbssCOMRAM 0057                  ??_collect_avg_readings 0018  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                      ___aodiv@dividend 0005                 clear_read_calibration@i 008B  
                        _motor_response 0E7A                                ?_HighISR 0001  
                   __end_of_LEDSon_init 310C                        ___lwdiv@dividend 000B  
                             _dtoa$2611 0032                             ?_turnLeft45 0018  
                       ?_fullSpeedAhead 0018                               __pintcode 0008  
                              ?___aodiv 0005                                ?___aomod 0005  
                      ___aodiv@quotient 0017                  __end_of_determine_card 2B7C  
                              ?___lwdiv 000B                    I2C_2_Master_Read@ack 0007  
                       ??_card_response 0057                    I2C_2_Master_Read@tmp 0008  
                           __smallconst 0E00                       _I2C_2_Master_Idle 3074  
                     _I2C_2_Master_Init 304A                       _I2C_2_Master_Read 2EFC  
                     _I2C_2_Master_Stop 31C2                            _RxBufReadCnt 0059  
          normalise_readings@clear_read 001D            normalise_readings@difference 0031  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0014  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                __end_of_motor_response 1272                             turnLeft45@i 001E  
                              ?_sprintf 0066            clear_read_calibration@i_1591 008D  
                     _sendStringSerial4 2FF0                     ??_I2C_2_Master_Idle 0005  
                   ??_I2C_2_Master_Init 0005                     ??_I2C_2_Master_Read 0006  
    set_interrupt_threshold@persistence 000D                          ___wmul@product 0009  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0006  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                                _PIE0bits 000E29  
                    ?_sendStringSerial4 0006                                _PIE4bits 000E2D  
                 _make_master_closeness 25A0                                i2u134_40 30AC  
                              i2u134_41 30A8                                i2u135_40 30C2  
                              i2u135_41 30BE                                i2u161_40 001A  
                              i2u161_41 0016                                i2u162_40 002E  
                              i2u162_41 002A                                i2u238_47 0042  
                              _PIR0bits 000E33                                i2u239_47 005C  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0005                make_master_closeness@buf 0005  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0008  
                              _SSP2STAT 000ED8                         ?_determine_card 0005  
                             _vfpfcnvrt 21DA               __end_of_I2C_2_Master_Idle 309C  
             __end_of_I2C_2_Master_Init 3074               __end_of_I2C_2_Master_Read 2F3E  
                     ___wmul@multiplier 0005               __end_of_I2C_2_Master_Stop 31CC  
              ??i2_clear_interrupt_flag 0003                            setMotorPWM@m 0012  
           I2C_2_Master_Write@data_byte 0006            normalise_readings@green_read 0021  
                     ??_color_read_Blue 000B                            _TxBufReadCnt 0057  
                       ?_motor_response 0020                       ?_reverseFullSpeed 0018  
             __end_of_sendStringSerial4 3020                             _LEDSon_init 30EA  
                    ??_reverseFullSpeed 001C           __end_of_I2C_2_Master_RepStart 31C2  
                    color_read_Blue@tmp 000E                ?_set_interrupt_threshold 0009  
                   __end_of_setMotorPWM 2076                            ??_initUSART4 0005  
                  i2_I2C_2_Master_Start 31E0                    i2_I2C_2_Master_Write 31AC  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0009             __end_ofi2_I2C_2_Master_Idle 30C4  
                    reverseFullSpeed@mL 0018                      reverseFullSpeed@mR 001A  
           __end_ofi2_I2C_2_Master_Stop 31E0                              ?_vfpfcnvrt 0043  
                       ___aodiv@divisor 000D                         ___aodiv@counter 0015  
                            _ANSELBbits 000E9A                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                       ___lwdiv@divisor 000D                      __end_of_initUSART4 312C  
                       ___lwdiv@counter 0011                                __ptext10 21DA  
                              __ptext11 188A                                __ptext20 15A6  
                              __ptext12 2B7C                                __ptext21 2F3E  
                              __ptext13 2EB8                  _enable_color_interrupt 3190  
                              __ptext30 25A0                                __ptext22 0E7A  
                              __ptext14 26AC                                __ptext31 2AF8  
                              __ptext23 2776                                __ptext15 31EA  
                              __ptext40 2F7E                                __ptext32 1B08  
                              __ptext24 2824                                __ptext16 2076  
                              __ptext41 2C6A                                __ptext33 2D78  
                              __ptext25 2A72                                __ptext17 1D82  
                              __ptext50 317A                                __ptext42 3190  
                              __ptext34 2DC8                                __ptext26 295E  
                              __ptext18 2FF0                                __ptext51 31AC  
                              __ptext43 312C                                __ptext35 2E18  
                              __ptext27 1F0A                                __ptext19 314C  
                              __ptext52 31D6                                __ptext44 3164  
                              __ptext36 2E68                                __ptext28 30C4  
                              __ptext53 31E0                                __ptext45 31A0  
                              __ptext37 31B8                                __ptext29 2BF6  
                              __ptext54 309C                                __ptext46 31C2  
                              __ptext38 2EFC                                __ptext47 31CC  
                              __ptext39 30EA                                __ptext48 3074  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0005                   ?i2_I2C_2_Master_Start 0001  
                 ?i2_I2C_2_Master_Write 0001                                isa$xinst 000000  
               card_response@clear_read 0083                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 2CD2  
                         ??_turnRight45 001C                        ___aomod@dividend 0005  
                 collect_avg_readings@i 001A                              _INTCONbits 000FF2  
          _set_interrupt_threshold$2092 000F            _set_interrupt_threshold$2093 0010  
                           _setMotorPWM 1F0A           collect_avg_readings@blue_read 0016  
                         turnRight45@mL 0018                           turnRight45@mR 001A  
                              intlevel2 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 188A            card_response@expected_values 008B  
                      ??_fullSpeedAhead 001C                 card_response@green_read 0087  
                          ??_turnLeft45 001C          determine_card@current_smallest 000B  
                       ___aomod@divisor 000D                             ??_vfpfcnvrt 0049  
                       ___aomod@counter 0015                  card_response@blue_read 0089  
                      _color_click_init 2FBC           card_response@master_closeness 00D9  
                              sprintf@f 0076                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 2824                      __end_of_turnLeft45 28D2  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0016  
                       _sendCharSerial4 314C                  ??i2_I2C_2_Master_Start 0002  
                ??i2_I2C_2_Master_Write 0002                  i2_clear_interrupt_flag 317A  
                 card_response@red_read 0085                            ___aomod@sign 0016  
                      ??_determine_card 0007                            main@PWMcycle 01DE  
