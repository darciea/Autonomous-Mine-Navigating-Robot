

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 04 22:57:03 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38   000000                     
    39                           ; Version 2.35
    40                           ; Generated 05/05/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F67K40 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000000                     
    75                           	psect	idataBANK0
    76   01F69C                     __pidataBANK0:
    77                           	callstack 0
    78                           
    79                           ;initializer for main@F14641
    80   01F69C  32C8               	dw	13000
    81   01F69E  0A28               	dw	2600
    82   01F6A0  0708               	dw	1800
    83   01F6A2  20D0               	dw	8400
    84   01F6A4  1964               	dw	6500
    85   01F6A6  1388               	dw	5000
    86   01F6A8  1130               	dw	4400
    87   01F6AA  0708               	dw	1800
    88   01F6AC  0AF0               	dw	2800
    89   000000                     _TX4REG	set	3812
    90   000000                     _RC4STAbits	set	3815
    91   000000                     _SP4BRGH	set	3814
    92   000000                     _LATGbits	set	3967
    93   000000                     _TRISFbits	set	3974
    94   000000                     _TRISDbits	set	3972
    95   000000                     _TRISGbits	set	3975
    96   000000                     _SSP2CON2bits	set	3802
    97   000000                     _RX4PPS	set	3605
    98   000000                     _SSP2CLKPPS	set	3612
    99   000000                     _SSP2DATPPS	set	3613
   100   000000                     _RC7PPS	set	3689
   101   000000                     _RE2PPS	set	3700
   102   000000                     _TRISCbits	set	3971
   103   000000                     _TRISEbits	set	3973
   104   000000                     _TRISHbits	set	3976
   105   000000                     _PORTFbits	set	3982
   106   000000                     _T2PR	set	4028
   107   000000                     _T2CONbits	set	4029
   108   000000                     _CCPR2H	set	4006
   109   000000                     _CCPR1H	set	4010
   110   000000                     _RE4PPS	set	3702
   111   000000                     _RG6PPS	set	3720
   112   000000                     _RD5PPS	set	3695
   113   000000                     _ANSELDbits	set	3751
   114   000000                     _SSP2ADD	set	3798
   115   000000                     _SSP2CON1bits	set	3801
   116   000000                     _CCPR4H	set	3873
   117   000000                     _CCPR3H	set	3877
   118   000000                     _T2CLKCONbits	set	4031
   119   000000                     _T2HLTbits	set	4030
   120   000000                     _CCP1CONbits	set	4011
   121   000000                     _CCPTMRS0bits	set	4013
   122   000000                     _CCP2CONbits	set	4007
   123   000000                     _LATAbits	set	3961
   124   000000                     _LATDbits	set	3964
   125   000000                     _LATHbits	set	3968
   126   000000                     _CCP3CONbits	set	3878
   127   000000                     _CCP4CONbits	set	3874
   128   000000                     _RC4REG	set	3811
   129   000000                     _SP4BRGL	set	3813
   130   000000                     _TX4STAbits	set	3816
   131   000000                     _BAUD4CONbits	set	3817
   132   000000                     _SSP2CON2	set	3802
   133   000000                     _SSP2STAT	set	3800
   134   000000                     _SSP2BUF	set	3797
   135   000000                     _PIE4bits	set	3629
   136   000000                     _PIR4bits	set	3639
   137   000000                     _RC0PPS	set	3682
   138   000000                     _RD6PPS	set	3696
   139   000000                     _TRISAbits	set	3969
   140   000000                     _LATFbits	set	3966
   141                           
   142                           ; #config settings
   143                           
   144                           	psect	cinit
   145   01F7BC                     __pcinit:
   146                           	callstack 0
   147   01F7BC                     start_initialization:
   148                           	callstack 0
   149   01F7BC                     __initialization:
   150                           	callstack 0
   151                           
   152                           ; Initialize objects allocated to BANK0 (18 bytes)
   153                           ; load TBLPTR registers with __pidataBANK0
   154   01F7BC  0E9C               	movlw	low __pidataBANK0
   155   01F7BE  6EF6               	movwf	tblptrl,c
   156   01F7C0  0EF6               	movlw	high __pidataBANK0
   157   01F7C2  6EF7               	movwf	tblptrh,c
   158   01F7C4  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   159   01F7C6  6EF8               	movwf	tblptru,c
   160   01F7C8  EE00  F0D9         	lfsr	0,__pdataBANK0
   161   01F7CC  EE10 F012          	lfsr	1,18
   162   01F7D0                     copy_data0:
   163   01F7D0  0009               	tblrd		*+
   164   01F7D2  CFF5 FFEE          	movff	tablat,postinc0
   165   01F7D6  50E5               	movf	postdec1,w,c
   166   01F7D8  50E1               	movf	fsr1l,w,c
   167   01F7DA  E1FA               	bnz	copy_data0
   168                           
   169                           ; Clear objects allocated to BANK0 (60 bytes)
   170   01F7DC  EE00  F09D         	lfsr	0,__pbssBANK0
   171   01F7E0  0E3C               	movlw	60
   172   01F7E2                     clear_0:
   173   01F7E2  6AEE               	clrf	postinc0,c
   174   01F7E4  06E8               	decf	wreg,f,c
   175   01F7E6  E1FD               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to COMRAM (24 bytes)
   178   01F7E8  EE00  F029         	lfsr	0,__pbssCOMRAM
   179   01F7EC  0E18               	movlw	24
   180   01F7EE                     clear_1:
   181   01F7EE  6AEE               	clrf	postinc0,c
   182   01F7F0  06E8               	decf	wreg,f,c
   183   01F7F2  E1FD               	bnz	clear_1
   184   01F7F4                     end_of_initialization:
   185                           	callstack 0
   186   01F7F4                     __end_of__initialization:
   187                           	callstack 0
   188   01F7F4  0100               	movlb	0
   189   01F7F6  EF34  F0FD         	goto	_main	;jump to C main() function
   190                           
   191                           	psect	bssCOMRAM
   192   000029                     __pbssCOMRAM:
   193                           	callstack 0
   194   000029                     _EUSART4RXbuf:
   195                           	callstack 0
   196   000029                     	ds	20
   197   00003D                     _TxBufReadCnt:
   198                           	callstack 0
   199   00003D                     	ds	1
   200   00003E                     _TxBufWriteCnt:
   201                           	callstack 0
   202   00003E                     	ds	1
   203   00003F                     _RxBufReadCnt:
   204                           	callstack 0
   205   00003F                     	ds	1
   206   000040                     _RxBufWriteCnt:
   207                           	callstack 0
   208   000040                     	ds	1
   209                           
   210                           	psect	bssBANK0
   211   00009D                     __pbssBANK0:
   212                           	callstack 0
   213   00009D                     _EUSART4TXbuf:
   214                           	callstack 0
   215   00009D                     	ds	60
   216                           
   217                           	psect	dataBANK0
   218   0000D9                     __pdataBANK0:
   219                           	callstack 0
   220   0000D9                     main@F14641:
   221                           	callstack 0
   222   0000D9                     	ds	18
   223                           
   224                           	psect	cstackBANK0
   225   000060                     __pcstackBANK0:
   226                           	callstack 0
   227   000060                     main@normalised_values:
   228                           	callstack 0
   229                           
   230                           ; 18 bytes @ 0x0
   231   000060                     	ds	18
   232   000072                     main@expected_values:
   233                           	callstack 0
   234                           
   235                           ; 18 bytes @ 0x12
   236   000072                     	ds	18
   237   000084                     main@PWMcycle:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x24
   241   000084                     	ds	1
   242   000085                     main@red_read:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x25
   246   000085                     	ds	2
   247   000087                     main@green_read:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0x27
   251   000087                     	ds	2
   252   000089                     main@blue_read:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x29
   256   000089                     	ds	2
   257   00008B                     main@motorL:
   258                           	callstack 0
   259                           
   260                           ; 9 bytes @ 0x2B
   261   00008B                     	ds	9
   262   000094                     main@motorR:
   263                           	callstack 0
   264                           
   265                           ; 9 bytes @ 0x34
   266   000094                     	ds	9
   267                           
   268                           	psect	cstackCOMRAM
   269   000001                     __pcstackCOMRAM:
   270                           	callstack 0
   271   000001                     ??_I2C_2_Master_Idle:
   272   000001                     ?_abs:
   273                           	callstack 0
   274   000001                     ?___wmul:
   275                           	callstack 0
   276   000001                     ___wmul@multiplier:
   277                           	callstack 0
   278   000001                     abs@a:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x0
   282   000001                     	ds	1
   283   000002                     ??_I2C_2_Master_Read:
   284   000002                     I2C_2_Master_Write@data_byte:
   285                           	callstack 0
   286                           
   287                           ; 1 bytes @ 0x1
   288   000002                     	ds	1
   289   000003                     ??_abs:
   290   000003                     color_writetoaddr@value:
   291                           	callstack 0
   292   000003                     I2C_2_Master_Read@ack:
   293                           	callstack 0
   294   000003                     ___wmul@multiplicand:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x2
   298   000003                     	ds	1
   299   000004                     color_writetoaddr@address:
   300                           	callstack 0
   301   000004                     I2C_2_Master_Read@tmp:
   302                           	callstack 0
   303                           
   304                           ; 1 bytes @ 0x3
   305   000004                     	ds	1
   306   000005                     ??_color_click_init:
   307   000005                     ?_color_read_Red:
   308                           	callstack 0
   309   000005                     ?_color_read_Green:
   310                           	callstack 0
   311   000005                     ?_color_read_Blue:
   312                           	callstack 0
   313   000005                     ___wmul@product:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0x4
   317   000005                     	ds	2
   318   000007                     ??_color_read_Red:
   319   000007                     ??_color_read_Green:
   320   000007                     ??_color_read_Blue:
   321   000007                     ?___lwdiv:
   322                           	callstack 0
   323   000007                     ___lwdiv@dividend:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x6
   327   000007                     	ds	2
   328   000009                     ___lwdiv@divisor:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x8
   332   000009                     	ds	1
   333   00000A                     color_read_Red@tmp:
   334                           	callstack 0
   335   00000A                     color_read_Green@tmp:
   336                           	callstack 0
   337   00000A                     color_read_Blue@tmp:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x9
   341   00000A                     	ds	1
   342   00000B                     ___lwdiv@quotient:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0xA
   346   00000B                     	ds	2
   347   00000D                     ___lwdiv@counter:
   348                           	callstack 0
   349                           
   350                           ; 1 bytes @ 0xC
   351   00000D                     	ds	1
   352   00000E                     setMotorPWM@m:
   353                           	callstack 0
   354   00000E                     collect_avg_readings@red_read:
   355                           	callstack 0
   356   00000E                     normalise_readings@red_read:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0xD
   360   00000E                     	ds	2
   361   000010                     ??_setMotorPWM:
   362   000010                     collect_avg_readings@green_read:
   363                           	callstack 0
   364   000010                     normalise_readings@green_read:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0xF
   368   000010                     	ds	2
   369   000012                     setMotorPWM@posDuty:
   370                           	callstack 0
   371   000012                     collect_avg_readings@blue_read:
   372                           	callstack 0
   373   000012                     normalise_readings@blue_read:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x11
   377   000012                     	ds	1
   378   000013                     setMotorPWM@negDuty:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0x12
   382   000013                     	ds	1
   383   000014                     ??_collect_avg_readings:
   384   000014                     normalise_readings@expected_values:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x13
   388   000014                     	ds	2
   389   000016                     collect_avg_readings@i:
   390                           	callstack 0
   391   000016                     normalise_readings@normalised_values:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x15
   395   000016                     	ds	1
   396   000017                     collect_avg_readings@i_1526:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x16
   400   000017                     	ds	1
   401   000018                     ??_normalise_readings:
   402   000018                     collect_avg_readings@i_1528:
   403                           	callstack 0
   404                           
   405                           ; 1 bytes @ 0x17
   406   000018                     	ds	16
   407   000028                     normalise_readings@i:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x27
   411   000028                     	ds	1
   412   000029                     
   413                           ; 1 bytes @ 0x28
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 20 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  buf            20    0        unsigned char [20]
   424 ;;  expected_val   18   18[BANK0 ] unsigned int [3][3]
   425 ;;  normalised_v   18    0[BANK0 ] unsigned int [3][3]
   426 ;;  motorR          9   52[BANK0 ] struct DC_motor
   427 ;;  motorL          9   43[BANK0 ] struct DC_motor
   428 ;;  master_close    6    0        unsigned int [3]
   429 ;;  blue_read       2   41[BANK0 ] unsigned int 
   430 ;;  green_read      2   39[BANK0 ] unsigned int 
   431 ;;  red_read        2   37[BANK0 ] unsigned int 
   432 ;;  PWMcycle        1   36[BANK0 ] unsigned char 
   433 ;;  card            1    0        enum E14575
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   444 ;;      Locals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   446 ;;      Totals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   447 ;;Total ram usage:       61 bytes
   448 ;; Hardware stack levels required when called: 4
   449 ;; This function calls:
   450 ;;		_I2C_2_Master_Init
   451 ;;		_LEDSon_init
   452 ;;		_collect_avg_readings
   453 ;;		_color_click_init
   454 ;;		_initDCmotorsPWM
   455 ;;		_initUSART4
   456 ;;		_normalise_readings
   457 ;;		_setMotorPWM
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text0
   464   01FA68                     __ptext0:
   465                           	callstack 0
   466   01FA68                     _main:
   467                           	callstack 27
   468   01FA68                     
   469                           ;main.c: 25:     LEDSon_init();
   470   01FA68  EC77  F0FB         	call	_LEDSon_init	;wreg free
   471   01FA6C                     
   472                           ;main.c: 26:     I2C_2_Master_Init();
   473   01FA6C  ECAF  F0FB         	call	_I2C_2_Master_Init	;wreg free
   474   01FA70                     
   475                           ;main.c: 27:     color_click_init();
   476   01FA70  ECC4  F0FB         	call	_color_click_init	;wreg free
   477   01FA74                     
   478                           ;main.c: 28:     initDCmotorsPWM();
   479   01FA74  ECF0  F0FC         	call	_initDCmotorsPWM	;wreg free
   480   01FA78                     
   481                           ;main.c: 29:     initUSART4();
   482   01FA78  EC67  F0FB         	call	_initUSART4	;wreg free
   483   01FA7C                     
   484                           ;main.c: 37:     unsigned char PWMcycle = T2PR;
   485   01FA7C  CFBC F084          	movff	4028,main@PWMcycle	;volatile
   486   01FA80                     
   487                           ;main.c: 39:     struct DC_motor motorL, motorR;;main.c: 41:     motorL.power=0;
   488   01FA80  0E00               	movlw	0
   489   01FA82  0100               	movlb	0	; () banked
   490   01FA84  6F8B               	movwf	main@motorL& (0+255),b
   491   01FA86                     
   492                           ; BSR set to: 0
   493                           ;main.c: 42:     motorL.direction=1;
   494   01FA86  0E01               	movlw	1
   495   01FA88  6F8C               	movwf	(main@motorL+1)& (0+255),b
   496   01FA8A                     
   497                           ; BSR set to: 0
   498                           ;main.c: 43:     motorL.brakemode=1;
   499   01FA8A  0E01               	movlw	1
   500   01FA8C  6F8D               	movwf	(main@motorL+2)& (0+255),b
   501   01FA8E                     
   502                           ; BSR set to: 0
   503                           ;main.c: 44:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   504   01FA8E  0EAA               	movlw	170
   505   01FA90  6F90               	movwf	(main@motorL+5)& (0+255),b
   506   01FA92  0E0F               	movlw	15
   507   01FA94  6F91               	movwf	(main@motorL+6)& (0+255),b
   508   01FA96                     
   509                           ; BSR set to: 0
   510                           ;main.c: 45:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   511   01FA96  0EA6               	movlw	166
   512   01FA98  6F92               	movwf	(main@motorL+7)& (0+255),b
   513   01FA9A  0E0F               	movlw	15
   514   01FA9C  6F93               	movwf	(main@motorL+8)& (0+255),b
   515   01FA9E                     
   516                           ; BSR set to: 0
   517                           ;main.c: 46:     motorL.PWMperiod=PWMcycle;
   518   01FA9E  C084  F08E         	movff	main@PWMcycle,main@motorL+3
   519   01FAA2  6B8F               	clrf	(main@motorL+4)& (0+255),b
   520   01FAA4                     
   521                           ; BSR set to: 0
   522                           ;main.c: 48:     motorR.power=0;
   523   01FAA4  0E00               	movlw	0
   524   01FAA6  6F94               	movwf	main@motorR& (0+255),b
   525   01FAA8                     
   526                           ; BSR set to: 0
   527                           ;main.c: 49:     motorR.direction=1;
   528   01FAA8  0E01               	movlw	1
   529   01FAAA  6F95               	movwf	(main@motorR+1)& (0+255),b
   530   01FAAC                     
   531                           ; BSR set to: 0
   532                           ;main.c: 50:     motorR.brakemode=1;
   533   01FAAC  0E01               	movlw	1
   534   01FAAE  6F96               	movwf	(main@motorR+2)& (0+255),b
   535   01FAB0                     
   536                           ; BSR set to: 0
   537                           ;main.c: 51:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   538   01FAB0  0E25               	movlw	37
   539   01FAB2  6F99               	movwf	(main@motorR+5)& (0+255),b
   540   01FAB4  0E0F               	movlw	15
   541   01FAB6  6F9A               	movwf	(main@motorR+6)& (0+255),b
   542   01FAB8                     
   543                           ; BSR set to: 0
   544                           ;main.c: 52:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   545   01FAB8  0E21               	movlw	33
   546   01FABA  6F9B               	movwf	(main@motorR+7)& (0+255),b
   547   01FABC  0E0F               	movlw	15
   548   01FABE  6F9C               	movwf	(main@motorR+8)& (0+255),b
   549   01FAC0                     
   550                           ; BSR set to: 0
   551                           ;main.c: 53:     motorR.PWMperiod=PWMcycle;
   552   01FAC0  C084  F097         	movff	main@PWMcycle,main@motorR+3
   553   01FAC4  6B98               	clrf	(main@motorR+4)& (0+255),b
   554   01FAC6                     
   555                           ; BSR set to: 0
   556                           ;main.c: 55:     setMotorPWM(&motorL);
   557   01FAC6  0E8B               	movlw	low main@motorL
   558   01FAC8  6E0E               	movwf	setMotorPWM@m^0,c
   559   01FACA  0E00               	movlw	high main@motorL
   560   01FACC  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   561   01FACE  EC60  F0FE         	call	_setMotorPWM	;wreg free
   562   01FAD2                     
   563                           ;main.c: 56:     setMotorPWM(&motorR);
   564   01FAD2  0E94               	movlw	low main@motorR
   565   01FAD4  6E0E               	movwf	setMotorPWM@m^0,c
   566   01FAD6  0E00               	movlw	high main@motorR
   567   01FAD8  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   568   01FADA  EC60  F0FE         	call	_setMotorPWM	;wreg free
   569   01FADE                     
   570                           ;main.c: 62:     unsigned int expected_values[3][3] = {{13000, 2600, 1800},{8400, 6500, 
      +                          5000},{4400, 1800, 2800}};
   571   01FADE  EE20  F0D9         	lfsr	2,main@F14641
   572   01FAE2  EE10  F072         	lfsr	1,main@expected_values
   573   01FAE6  0E11               	movlw	17
   574   01FAE8                     u581:
   575   01FAE8  CFDB FFE3          	movff	plusw2,plusw1
   576   01FAEC  06E8               	decf	wreg,f,c
   577   01FAEE  E2FC               	bc	u581
   578   01FAF0                     
   579                           ;main.c: 63:     unsigned int normalised_values[3][3];;main.c: 64:     unsigned int mast
      +                          er_closeness[3];;main.c: 66:     unsigned int red_read = 0;
   580   01FAF0  0E00               	movlw	0
   581   01FAF2  0100               	movlb	0	; () banked
   582   01FAF4  6F86               	movwf	(main@red_read+1)& (0+255),b
   583   01FAF6  0E00               	movlw	0
   584   01FAF8  6F85               	movwf	main@red_read& (0+255),b
   585   01FAFA                     
   586                           ; BSR set to: 0
   587                           ;main.c: 67:     unsigned int green_read = 0;
   588   01FAFA  0E00               	movlw	0
   589   01FAFC  6F88               	movwf	(main@green_read+1)& (0+255),b
   590   01FAFE  0E00               	movlw	0
   591   01FB00  6F87               	movwf	main@green_read& (0+255),b
   592   01FB02                     
   593                           ; BSR set to: 0
   594                           ;main.c: 68:     unsigned int blue_read = 0;
   595   01FB02  0E00               	movlw	0
   596   01FB04  6F8A               	movwf	(main@blue_read+1)& (0+255),b
   597   01FB06  0E00               	movlw	0
   598   01FB08  6F89               	movwf	main@blue_read& (0+255),b
   599                           
   600                           ;main.c: 99:     while(PORTFbits.RF2){
   601   01FB0A  EF88  F0FD         	goto	l227
   602   01FB0E                     l228:
   603                           
   604                           ;main.c: 100:         LATHbits.LATH1 = 1;
   605   01FB0E  8280               	bsf	128,1,c	;volatile
   606   01FB10                     l227:
   607                           
   608                           ;main.c: 99:     while(PORTFbits.RF2){
   609   01FB10  B48E               	btfsc	142,2,c	;volatile
   610   01FB12  EF8D  F0FD         	goto	u591
   611   01FB16  EF8F  F0FD         	goto	u590
   612   01FB1A                     u591:
   613   01FB1A  EF87  F0FD         	goto	l228
   614   01FB1E                     u590:
   615   01FB1E                     
   616                           ;main.c: 122:     LATDbits.LATD7=0;
   617   01FB1E  9E7C               	bcf	124,7,c	;volatile
   618                           
   619                           ;main.c: 123:     TRISDbits.TRISD7=0;
   620   01FB20  9E84               	bcf	132,7,c	;volatile
   621   01FB22                     l2066:
   622                           
   623                           ;main.c: 138:         collect_avg_readings(&red_read, &green_read, &blue_read);
   624   01FB22  0E85               	movlw	low main@red_read
   625   01FB24  6E0E               	movwf	collect_avg_readings@red_read^0,c
   626   01FB26  0E00               	movlw	high main@red_read
   627   01FB28  6E0F               	movwf	(collect_avg_readings@red_read+1)^0,c
   628   01FB2A  0E87               	movlw	low main@green_read
   629   01FB2C  6E10               	movwf	collect_avg_readings@green_read^0,c
   630   01FB2E  0E00               	movlw	high main@green_read
   631   01FB30  6E11               	movwf	(collect_avg_readings@green_read+1)^0,c
   632   01FB32  0E89               	movlw	low main@blue_read
   633   01FB34  6E12               	movwf	collect_avg_readings@blue_read^0,c
   634   01FB36  0E00               	movlw	high main@blue_read
   635   01FB38  6E13               	movwf	(collect_avg_readings@blue_read+1)^0,c
   636   01FB3A  ECBA  F0FD         	call	_collect_avg_readings	;wreg free
   637   01FB3E                     
   638                           ;main.c: 139:         normalise_readings(&red_read,&green_read, &blue_read, &expected_va
      +                          lues, &normalised_values);
   639   01FB3E  0E85               	movlw	low main@red_read
   640   01FB40  6E0E               	movwf	normalise_readings@red_read^0,c
   641   01FB42  0E00               	movlw	high main@red_read
   642   01FB44  6E0F               	movwf	(normalise_readings@red_read+1)^0,c
   643   01FB46  0E87               	movlw	low main@green_read
   644   01FB48  6E10               	movwf	normalise_readings@green_read^0,c
   645   01FB4A  0E00               	movlw	high main@green_read
   646   01FB4C  6E11               	movwf	(normalise_readings@green_read+1)^0,c
   647   01FB4E  0E89               	movlw	low main@blue_read
   648   01FB50  6E12               	movwf	normalise_readings@blue_read^0,c
   649   01FB52  0E00               	movlw	high main@blue_read
   650   01FB54  6E13               	movwf	(normalise_readings@blue_read+1)^0,c
   651   01FB56  0E72               	movlw	low main@expected_values
   652   01FB58  6E14               	movwf	normalise_readings@expected_values^0,c
   653   01FB5A  0E00               	movlw	high main@expected_values
   654   01FB5C  6E15               	movwf	(normalise_readings@expected_values+1)^0,c
   655   01FB5E  0E60               	movlw	low main@normalised_values
   656   01FB60  6E16               	movwf	normalise_readings@normalised_values^0,c
   657   01FB62  0E00               	movlw	high main@normalised_values
   658   01FB64  6E17               	movwf	(normalise_readings@normalised_values+1)^0,c
   659   01FB66  EC16  F0FF         	call	_normalise_readings	;wreg free
   660   01FB6A                     
   661                           ;main.c: 145:         LATFbits.LATF0 = 1;
   662   01FB6A  807E               	bsf	126,0,c	;volatile
   663   01FB6C  EF91  F0FD         	goto	l2066
   664   01FB70  EF00  F000         	goto	start
   665   01FB74                     __end_of_main:
   666                           	callstack 0
   667                           
   668 ;; *************** function _setMotorPWM *****************
   669 ;; Defined at:
   670 ;;		line 61 in file "dc_motor.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  m               2   13[COMRAM] PTR struct DC_motor
   673 ;;		 -> main@motorR(9), main@motorL(9), 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  negDuty         1   18[COMRAM] unsigned char 
   676 ;;  posDuty         1   17[COMRAM] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   690 ;;Total ram usage:        6 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 1
   693 ;; This function calls:
   694 ;;		___lwdiv
   695 ;;		___wmul
   696 ;; This function is called by:
   697 ;;		_main
   698 ;;		_stop
   699 ;;		_turnLeft45
   700 ;;		_turnRight45
   701 ;;		_fullSpeedAhead
   702 ;;		_reverseFullSpeed
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text1
   707   01FCC0                     __ptext1:
   708                           	callstack 0
   709   01FCC0                     _setMotorPWM:
   710                           	callstack 29
   711   01FCC0                     
   712                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
   713   01FCC0  EE20 F002          	lfsr	2,2
   714   01FCC4  500E               	movf	setMotorPWM@m^0,w,c
   715   01FCC6  26D9               	addwf	fsr2l,f,c
   716   01FCC8  500F               	movf	(setMotorPWM@m+1)^0,w,c
   717   01FCCA  22DA               	addwfc	fsr2h,f,c
   718   01FCCC  50DF               	movf	indf2,w,c
   719   01FCCE  B4D8               	btfsc	status,2,c
   720   01FCD0  EF6C  F0FE         	goto	u451
   721   01FCD4  EF6E  F0FE         	goto	u450
   722   01FCD8                     u451:
   723   01FCD8  EFA2  F0FE         	goto	l1828
   724   01FCDC                     u450:
   725   01FCDC                     
   726                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
   727   01FCDC  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   728   01FCE0  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   729   01FCE4  50DF               	movf	indf2,w,c
   730   01FCE6  6E10               	movwf	??_setMotorPWM^0,c
   731   01FCE8  5010               	movf	??_setMotorPWM^0,w,c
   732   01FCEA  6E01               	movwf	___wmul@multiplier^0,c
   733   01FCEC  6A02               	clrf	(___wmul@multiplier+1)^0,c
   734   01FCEE  EE20 F003          	lfsr	2,3
   735   01FCF2  500E               	movf	setMotorPWM@m^0,w,c
   736   01FCF4  26D9               	addwf	fsr2l,f,c
   737   01FCF6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   738   01FCF8  22DA               	addwfc	fsr2h,f,c
   739   01FCFA  CFDE F003          	movff	postinc2,___wmul@multiplicand
   740   01FCFE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   741   01FD02  EC88  F0FB         	call	___wmul	;wreg free
   742   01FD06  C001  F007         	movff	?___wmul,___lwdiv@dividend
   743   01FD0A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   744   01FD0E  0E00               	movlw	0
   745   01FD10  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   746   01FD12  0E64               	movlw	100
   747   01FD14  6E09               	movwf	___lwdiv@divisor^0,c
   748   01FD16  ECB6  F0FC         	call	___lwdiv	;wreg free
   749   01FD1A  EE20 F003          	lfsr	2,3
   750   01FD1E  500E               	movf	setMotorPWM@m^0,w,c
   751   01FD20  26D9               	addwf	fsr2l,f,c
   752   01FD22  500F               	movf	(setMotorPWM@m+1)^0,w,c
   753   01FD24  22DA               	addwfc	fsr2h,f,c
   754   01FD26  50DF               	movf	indf2,w,c
   755   01FD28  6E11               	movwf	(??_setMotorPWM+1)^0,c
   756   01FD2A  5007               	movf	?___lwdiv^0,w,c
   757   01FD2C  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
   758   01FD2E  6E12               	movwf	setMotorPWM@posDuty^0,c
   759   01FD30                     
   760                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
   761   01FD30  EE20 F003          	lfsr	2,3
   762   01FD34  500E               	movf	setMotorPWM@m^0,w,c
   763   01FD36  26D9               	addwf	fsr2l,f,c
   764   01FD38  500F               	movf	(setMotorPWM@m+1)^0,w,c
   765   01FD3A  22DA               	addwfc	fsr2h,f,c
   766   01FD3C  50DF               	movf	indf2,w,c
   767   01FD3E  6E13               	movwf	setMotorPWM@negDuty^0,c
   768                           
   769                           ;dc_motor.c: 68:     }
   770   01FD40  EFC5  F0FE         	goto	l1832
   771   01FD44                     l1828:
   772                           
   773                           ;dc_motor.c: 70:         posDuty=0;
   774   01FD44  0E00               	movlw	0
   775   01FD46  6E12               	movwf	setMotorPWM@posDuty^0,c
   776   01FD48                     
   777                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
   778   01FD48  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   779   01FD4C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   780   01FD50  50DF               	movf	indf2,w,c
   781   01FD52  6E10               	movwf	??_setMotorPWM^0,c
   782   01FD54  5010               	movf	??_setMotorPWM^0,w,c
   783   01FD56  6E01               	movwf	___wmul@multiplier^0,c
   784   01FD58  6A02               	clrf	(___wmul@multiplier+1)^0,c
   785   01FD5A  EE20 F003          	lfsr	2,3
   786   01FD5E  500E               	movf	setMotorPWM@m^0,w,c
   787   01FD60  26D9               	addwf	fsr2l,f,c
   788   01FD62  500F               	movf	(setMotorPWM@m+1)^0,w,c
   789   01FD64  22DA               	addwfc	fsr2h,f,c
   790   01FD66  CFDE F003          	movff	postinc2,___wmul@multiplicand
   791   01FD6A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   792   01FD6E  EC88  F0FB         	call	___wmul	;wreg free
   793   01FD72  C001  F007         	movff	?___wmul,___lwdiv@dividend
   794   01FD76  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   795   01FD7A  0E00               	movlw	0
   796   01FD7C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   797   01FD7E  0E64               	movlw	100
   798   01FD80  6E09               	movwf	___lwdiv@divisor^0,c
   799   01FD82  ECB6  F0FC         	call	___lwdiv	;wreg free
   800   01FD86  5007               	movf	?___lwdiv^0,w,c
   801   01FD88  6E13               	movwf	setMotorPWM@negDuty^0,c
   802   01FD8A                     l1832:
   803                           
   804                           ;dc_motor.c: 74:     if (m->direction) {
   805   01FD8A  EE20 F001          	lfsr	2,1
   806   01FD8E  500E               	movf	setMotorPWM@m^0,w,c
   807   01FD90  26D9               	addwf	fsr2l,f,c
   808   01FD92  500F               	movf	(setMotorPWM@m+1)^0,w,c
   809   01FD94  22DA               	addwfc	fsr2h,f,c
   810   01FD96  50DF               	movf	indf2,w,c
   811   01FD98  B4D8               	btfsc	status,2,c
   812   01FD9A  EFD1  F0FE         	goto	u461
   813   01FD9E  EFD3  F0FE         	goto	u460
   814   01FDA2                     u461:
   815   01FDA2  EFF5  F0FE         	goto	l1836
   816   01FDA6                     u460:
   817   01FDA6                     
   818                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
   819   01FDA6  EE20 F005          	lfsr	2,5
   820   01FDAA  500E               	movf	setMotorPWM@m^0,w,c
   821   01FDAC  26D9               	addwf	fsr2l,f,c
   822   01FDAE  500F               	movf	(setMotorPWM@m+1)^0,w,c
   823   01FDB0  22DA               	addwfc	fsr2h,f,c
   824   01FDB2  CFDE F010          	movff	postinc2,??_setMotorPWM
   825   01FDB6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   826   01FDBA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   827   01FDBE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   828   01FDC2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   829                           
   830                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
   831   01FDC6  EE20 F007          	lfsr	2,7
   832   01FDCA  500E               	movf	setMotorPWM@m^0,w,c
   833   01FDCC  26D9               	addwf	fsr2l,f,c
   834   01FDCE  500F               	movf	(setMotorPWM@m+1)^0,w,c
   835   01FDD0  22DA               	addwfc	fsr2h,f,c
   836   01FDD2  CFDE F010          	movff	postinc2,??_setMotorPWM
   837   01FDD6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   838   01FDDA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   839   01FDDE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   840   01FDE2  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   841                           
   842                           ;dc_motor.c: 77:     } else {
   843   01FDE6  EF15  F0FF         	goto	l95
   844   01FDEA                     l1836:
   845                           
   846                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
   847   01FDEA  EE20 F005          	lfsr	2,5
   848   01FDEE  500E               	movf	setMotorPWM@m^0,w,c
   849   01FDF0  26D9               	addwf	fsr2l,f,c
   850   01FDF2  500F               	movf	(setMotorPWM@m+1)^0,w,c
   851   01FDF4  22DA               	addwfc	fsr2h,f,c
   852   01FDF6  CFDE F010          	movff	postinc2,??_setMotorPWM
   853   01FDFA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   854   01FDFE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   855   01FE02  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   856   01FE06  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   857                           
   858                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
   859   01FE0A  EE20 F007          	lfsr	2,7
   860   01FE0E  500E               	movf	setMotorPWM@m^0,w,c
   861   01FE10  26D9               	addwf	fsr2l,f,c
   862   01FE12  500F               	movf	(setMotorPWM@m+1)^0,w,c
   863   01FE14  22DA               	addwfc	fsr2h,f,c
   864   01FE16  CFDE F010          	movff	postinc2,??_setMotorPWM
   865   01FE1A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   866   01FE1E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   867   01FE22  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   868   01FE26  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   869   01FE2A                     l95:
   870   01FE2A  0012               	return		;funcret
   871   01FE2C                     __end_of_setMotorPWM:
   872                           	callstack 0
   873                           
   874 ;; *************** function ___wmul *****************
   875 ;; Defined at:
   876 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  multiplier      2    0[COMRAM] unsigned int 
   879 ;;  multiplicand    2    2[COMRAM] unsigned int 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  product         2    4[COMRAM] unsigned int 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  2    0[COMRAM] unsigned int 
   884 ;; Registers used:
   885 ;;		wreg, status,2, status,0, prodl, prodh
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;Total ram usage:        6 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; This function calls:
   898 ;;		Nothing
   899 ;; This function is called by:
   900 ;;		_setMotorPWM
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text2
   905   01F710                     __ptext2:
   906                           	callstack 0
   907   01F710                     ___wmul:
   908                           	callstack 29
   909   01F710  5001               	movf	___wmul@multiplier^0,w,c
   910   01F712  0203               	mulwf	___wmul@multiplicand^0,c
   911   01F714  CFF3 F005          	movff	prodl,___wmul@product
   912   01F718  CFF4 F006          	movff	prodh,___wmul@product+1
   913   01F71C  5001               	movf	___wmul@multiplier^0,w,c
   914   01F71E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   915   01F720  50F3               	movf	243,w,c
   916   01F722  2606               	addwf	(___wmul@product+1)^0,f,c
   917   01F724  5002               	movf	(___wmul@multiplier+1)^0,w,c
   918   01F726  0203               	mulwf	___wmul@multiplicand^0,c
   919   01F728  50F3               	movf	243,w,c
   920   01F72A  2606               	addwf	(___wmul@product+1)^0,f,c
   921   01F72C  C005  F001         	movff	___wmul@product,?___wmul
   922   01F730  C006  F002         	movff	___wmul@product+1,?___wmul+1
   923   01F734  0012               	return		;funcret
   924   01F736                     __end_of___wmul:
   925                           	callstack 0
   926                           
   927 ;; *************** function _normalise_readings *****************
   928 ;; Defined at:
   929 ;;		line 67 in file "colour_identify.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  red_read        2   13[COMRAM] PTR unsigned int 
   932 ;;		 -> main@red_read(2), 
   933 ;;  green_read      2   15[COMRAM] PTR unsigned int 
   934 ;;		 -> main@green_read(2), 
   935 ;;  blue_read       2   17[COMRAM] PTR unsigned int 
   936 ;;		 -> main@blue_read(2), 
   937 ;;  expected_val    2   19[COMRAM] PTR unsigned int [3]
   938 ;;		 -> main@expected_values(18), 
   939 ;;  normalised_v    2   21[COMRAM] PTR unsigned int [3]
   940 ;;		 -> main@normalised_values(18), 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  i               1   39[COMRAM] enum E14551
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   952 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   954 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   955 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   956 ;;Total ram usage:       27 bytes
   957 ;; Hardware stack levels used: 1
   958 ;; Hardware stack levels required when called: 1
   959 ;; This function calls:
   960 ;;		___lwdiv
   961 ;;		_abs
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text3
   968   01FE2C                     __ptext3:
   969                           	callstack 0
   970   01FE2C                     _normalise_readings:
   971                           	callstack 29
   972   01FE2C                     
   973                           ;colour_identify.c: 74:     for(colour i = RED; i<= BLACK; i++){
   974   01FE2C  0E00               	movlw	0
   975   01FE2E  6E28               	movwf	normalise_readings@i^0,c
   976   01FE30                     l1972:
   977                           
   978                           ;colour_identify.c: 77:         normalised_values[0][0] = (abs(*red_read - expected_valu
      +                          es[0][0])) / (expected_values[0][0]);
   979   01FE30  C014  FFD9         	movff	normalise_readings@expected_values,fsr2l
   980   01FE34  C015  FFDA         	movff	normalise_readings@expected_values+1,fsr2h
   981   01FE38  CFDE F018          	movff	postinc2,??_normalise_readings
   982   01FE3C  CFDD F019          	movff	postdec2,??_normalise_readings+1
   983   01FE40  C00E  FFD9         	movff	normalise_readings@red_read,fsr2l
   984   01FE44  C00F  FFDA         	movff	normalise_readings@red_read+1,fsr2h
   985   01FE48  CFDE F01A          	movff	postinc2,??_normalise_readings+2
   986   01FE4C  CFDD F01B          	movff	postdec2,??_normalise_readings+3
   987   01FE50  5018               	movf	??_normalise_readings^0,w,c
   988   01FE52  5C1A               	subwf	(??_normalise_readings+2)^0,w,c
   989   01FE54  6E01               	movwf	abs@a^0,c
   990   01FE56  5019               	movf	(??_normalise_readings+1)^0,w,c
   991   01FE58  581B               	subwfb	(??_normalise_readings+3)^0,w,c
   992   01FE5A  6E02               	movwf	(abs@a+1)^0,c
   993   01FE5C  ECFD  F0FB         	call	_abs	;wreg free
   994   01FE60  C001  F007         	movff	?_abs,___lwdiv@dividend
   995   01FE64  C002  F008         	movff	?_abs+1,___lwdiv@dividend+1
   996   01FE68  C014  FFD9         	movff	normalise_readings@expected_values,fsr2l
   997   01FE6C  C015  FFDA         	movff	normalise_readings@expected_values+1,fsr2h
   998   01FE70  CFDE F009          	movff	postinc2,___lwdiv@divisor
   999   01FE74  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1000   01FE78  ECB6  F0FC         	call	___lwdiv	;wreg free
  1001   01FE7C  C016  FFD9         	movff	normalise_readings@normalised_values,fsr2l
  1002   01FE80  C017  FFDA         	movff	normalise_readings@normalised_values+1,fsr2h
  1003   01FE84  C007  FFDE         	movff	?___lwdiv,postinc2
  1004   01FE88  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1005   01FE8C                     
  1006                           ;colour_identify.c: 82:         normalised_values[i][GREEN] = (abs(*green_read - expecte
      +                          d_values[i][1])) / (expected_values[i][1]);
  1007   01FE8C  5028               	movf	normalise_readings@i^0,w,c
  1008   01FE8E  0D06               	mullw	6
  1009   01FE90  CFF3 F018          	movff	prodl,??_normalise_readings
  1010   01FE94  CFF4 F019          	movff	prodh,??_normalise_readings+1
  1011   01FE98  5018               	movf	??_normalise_readings^0,w,c
  1012   01FE9A  2414               	addwf	normalise_readings@expected_values^0,w,c
  1013   01FE9C  6E1A               	movwf	(??_normalise_readings+2)^0,c
  1014   01FE9E  5019               	movf	(??_normalise_readings+1)^0,w,c
  1015   01FEA0  2015               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  1016   01FEA2  6E1B               	movwf	(??_normalise_readings+3)^0,c
  1017   01FEA4  0E02               	movlw	2
  1018   01FEA6  241A               	addwf	(??_normalise_readings+2)^0,w,c
  1019   01FEA8  6ED9               	movwf	fsr2l,c
  1020   01FEAA  0E00               	movlw	0
  1021   01FEAC  201B               	addwfc	(??_normalise_readings+3)^0,w,c
  1022   01FEAE  6EDA               	movwf	fsr2h,c
  1023   01FEB0  CFDE F01C          	movff	postinc2,??_normalise_readings+4
  1024   01FEB4  CFDD F01D          	movff	postdec2,??_normalise_readings+5
  1025   01FEB8  C010  FFD9         	movff	normalise_readings@green_read,fsr2l
  1026   01FEBC  C011  FFDA         	movff	normalise_readings@green_read+1,fsr2h
  1027   01FEC0  CFDE F01E          	movff	postinc2,??_normalise_readings+6
  1028   01FEC4  CFDD F01F          	movff	postdec2,??_normalise_readings+7
  1029   01FEC8  501C               	movf	(??_normalise_readings+4)^0,w,c
  1030   01FECA  5C1E               	subwf	(??_normalise_readings+6)^0,w,c
  1031   01FECC  6E01               	movwf	abs@a^0,c
  1032   01FECE  501D               	movf	(??_normalise_readings+5)^0,w,c
  1033   01FED0  581F               	subwfb	(??_normalise_readings+7)^0,w,c
  1034   01FED2  6E02               	movwf	(abs@a+1)^0,c
  1035   01FED4  ECFD  F0FB         	call	_abs	;wreg free
  1036   01FED8  C001  F007         	movff	?_abs,___lwdiv@dividend
  1037   01FEDC  C002  F008         	movff	?_abs+1,___lwdiv@dividend+1
  1038   01FEE0  5028               	movf	normalise_readings@i^0,w,c
  1039   01FEE2  0D06               	mullw	6
  1040   01FEE4  CFF3 F020          	movff	prodl,??_normalise_readings+8
  1041   01FEE8  CFF4 F021          	movff	prodh,??_normalise_readings+9
  1042   01FEEC  5020               	movf	(??_normalise_readings+8)^0,w,c
  1043   01FEEE  2414               	addwf	normalise_readings@expected_values^0,w,c
  1044   01FEF0  6E22               	movwf	(??_normalise_readings+10)^0,c
  1045   01FEF2  5021               	movf	(??_normalise_readings+9)^0,w,c
  1046   01FEF4  2015               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  1047   01FEF6  6E23               	movwf	(??_normalise_readings+11)^0,c
  1048   01FEF8  0E02               	movlw	2
  1049   01FEFA  2422               	addwf	(??_normalise_readings+10)^0,w,c
  1050   01FEFC  6ED9               	movwf	fsr2l,c
  1051   01FEFE  0E00               	movlw	0
  1052   01FF00  2023               	addwfc	(??_normalise_readings+11)^0,w,c
  1053   01FF02  6EDA               	movwf	fsr2h,c
  1054   01FF04  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1055   01FF08  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1056   01FF0C  ECB6  F0FC         	call	___lwdiv	;wreg free
  1057   01FF10  5028               	movf	normalise_readings@i^0,w,c
  1058   01FF12  0D06               	mullw	6
  1059   01FF14  CFF3 F024          	movff	prodl,??_normalise_readings+12
  1060   01FF18  CFF4 F025          	movff	prodh,??_normalise_readings+13
  1061   01FF1C  5024               	movf	(??_normalise_readings+12)^0,w,c
  1062   01FF1E  2416               	addwf	normalise_readings@normalised_values^0,w,c
  1063   01FF20  6E26               	movwf	(??_normalise_readings+14)^0,c
  1064   01FF22  5025               	movf	(??_normalise_readings+13)^0,w,c
  1065   01FF24  2017               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  1066   01FF26  6E27               	movwf	(??_normalise_readings+15)^0,c
  1067   01FF28  0E02               	movlw	2
  1068   01FF2A  2426               	addwf	(??_normalise_readings+14)^0,w,c
  1069   01FF2C  6ED9               	movwf	fsr2l,c
  1070   01FF2E  0E00               	movlw	0
  1071   01FF30  2027               	addwfc	(??_normalise_readings+15)^0,w,c
  1072   01FF32  6EDA               	movwf	fsr2h,c
  1073   01FF34  C007  FFDE         	movff	?___lwdiv,postinc2
  1074   01FF38  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1075   01FF3C                     
  1076                           ;colour_identify.c: 85:         normalised_values[i][BLUE] = (abs(*blue_read - expected_
      +                          values[i][2])) / (expected_values[i][2]);
  1077   01FF3C  5028               	movf	normalise_readings@i^0,w,c
  1078   01FF3E  0D06               	mullw	6
  1079   01FF40  CFF3 F018          	movff	prodl,??_normalise_readings
  1080   01FF44  CFF4 F019          	movff	prodh,??_normalise_readings+1
  1081   01FF48  5018               	movf	??_normalise_readings^0,w,c
  1082   01FF4A  2414               	addwf	normalise_readings@expected_values^0,w,c
  1083   01FF4C  6E1A               	movwf	(??_normalise_readings+2)^0,c
  1084   01FF4E  5019               	movf	(??_normalise_readings+1)^0,w,c
  1085   01FF50  2015               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  1086   01FF52  6E1B               	movwf	(??_normalise_readings+3)^0,c
  1087   01FF54  0E04               	movlw	4
  1088   01FF56  241A               	addwf	(??_normalise_readings+2)^0,w,c
  1089   01FF58  6ED9               	movwf	fsr2l,c
  1090   01FF5A  0E00               	movlw	0
  1091   01FF5C  201B               	addwfc	(??_normalise_readings+3)^0,w,c
  1092   01FF5E  6EDA               	movwf	fsr2h,c
  1093   01FF60  CFDE F01C          	movff	postinc2,??_normalise_readings+4
  1094   01FF64  CFDD F01D          	movff	postdec2,??_normalise_readings+5
  1095   01FF68  C012  FFD9         	movff	normalise_readings@blue_read,fsr2l
  1096   01FF6C  C013  FFDA         	movff	normalise_readings@blue_read+1,fsr2h
  1097   01FF70  CFDE F01E          	movff	postinc2,??_normalise_readings+6
  1098   01FF74  CFDD F01F          	movff	postdec2,??_normalise_readings+7
  1099   01FF78  501C               	movf	(??_normalise_readings+4)^0,w,c
  1100   01FF7A  5C1E               	subwf	(??_normalise_readings+6)^0,w,c
  1101   01FF7C  6E01               	movwf	abs@a^0,c
  1102   01FF7E  501D               	movf	(??_normalise_readings+5)^0,w,c
  1103   01FF80  581F               	subwfb	(??_normalise_readings+7)^0,w,c
  1104   01FF82  6E02               	movwf	(abs@a+1)^0,c
  1105   01FF84  ECFD  F0FB         	call	_abs	;wreg free
  1106   01FF88  C001  F007         	movff	?_abs,___lwdiv@dividend
  1107   01FF8C  C002  F008         	movff	?_abs+1,___lwdiv@dividend+1
  1108   01FF90  5028               	movf	normalise_readings@i^0,w,c
  1109   01FF92  0D06               	mullw	6
  1110   01FF94  CFF3 F020          	movff	prodl,??_normalise_readings+8
  1111   01FF98  CFF4 F021          	movff	prodh,??_normalise_readings+9
  1112   01FF9C  5020               	movf	(??_normalise_readings+8)^0,w,c
  1113   01FF9E  2414               	addwf	normalise_readings@expected_values^0,w,c
  1114   01FFA0  6E22               	movwf	(??_normalise_readings+10)^0,c
  1115   01FFA2  5021               	movf	(??_normalise_readings+9)^0,w,c
  1116   01FFA4  2015               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  1117   01FFA6  6E23               	movwf	(??_normalise_readings+11)^0,c
  1118   01FFA8  0E04               	movlw	4
  1119   01FFAA  2422               	addwf	(??_normalise_readings+10)^0,w,c
  1120   01FFAC  6ED9               	movwf	fsr2l,c
  1121   01FFAE  0E00               	movlw	0
  1122   01FFB0  2023               	addwfc	(??_normalise_readings+11)^0,w,c
  1123   01FFB2  6EDA               	movwf	fsr2h,c
  1124   01FFB4  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1125   01FFB8  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1126   01FFBC  ECB6  F0FC         	call	___lwdiv	;wreg free
  1127   01FFC0  5028               	movf	normalise_readings@i^0,w,c
  1128   01FFC2  0D06               	mullw	6
  1129   01FFC4  CFF3 F024          	movff	prodl,??_normalise_readings+12
  1130   01FFC8  CFF4 F025          	movff	prodh,??_normalise_readings+13
  1131   01FFCC  5024               	movf	(??_normalise_readings+12)^0,w,c
  1132   01FFCE  2416               	addwf	normalise_readings@normalised_values^0,w,c
  1133   01FFD0  6E26               	movwf	(??_normalise_readings+14)^0,c
  1134   01FFD2  5025               	movf	(??_normalise_readings+13)^0,w,c
  1135   01FFD4  2017               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  1136   01FFD6  6E27               	movwf	(??_normalise_readings+15)^0,c
  1137   01FFD8  0E04               	movlw	4
  1138   01FFDA  2426               	addwf	(??_normalise_readings+14)^0,w,c
  1139   01FFDC  6ED9               	movwf	fsr2l,c
  1140   01FFDE  0E00               	movlw	0
  1141   01FFE0  2027               	addwfc	(??_normalise_readings+15)^0,w,c
  1142   01FFE2  6EDA               	movwf	fsr2h,c
  1143   01FFE4  C007  FFDE         	movff	?___lwdiv,postinc2
  1144   01FFE8  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1145   01FFEC                     
  1146                           ;colour_identify.c: 87:     }
  1147   01FFEC  2A28               	incf	normalise_readings@i^0,f,c
  1148   01FFEE  0E08               	movlw	8
  1149   01FFF0  6428               	cpfsgt	normalise_readings@i^0,c
  1150   01FFF2  EFFD  F0FF         	goto	u551
  1151   01FFF6  EFFF  F0FF         	goto	u550
  1152   01FFFA                     u551:
  1153   01FFFA  EF18  F0FF         	goto	l1972
  1154   01FFFE                     u550:
  1155   01FFFE  0012               	return		;funcret
  1156   020000                     __end_of_normalise_readings:
  1157                           	callstack 0
  1158                           
  1159 ;; *************** function _abs *****************
  1160 ;; Defined at:
  1161 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  a               2    0[COMRAM] int 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  2    0[COMRAM] int 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1178 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;Total ram usage:        4 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_normalise_readings
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text4
  1189   01F7FA                     __ptext4:
  1190                           	callstack 0
  1191   01F7FA                     _abs:
  1192                           	callstack 29
  1193   01F7FA  BE02               	btfsc	(abs@a+1)^0,7,c
  1194   01F7FC  EF0A  F0FC         	goto	u410
  1195   01F800  5002               	movf	(abs@a+1)^0,w,c
  1196   01F802  E106               	bnz	u411
  1197   01F804  0401               	decf	abs@a^0,w,c
  1198   01F806  B0D8               	btfsc	status,0,c
  1199   01F808  EF08  F0FC         	goto	u411
  1200   01F80C  EF0A  F0FC         	goto	u410
  1201   01F810                     u411:
  1202   01F810  EF18  F0FC         	goto	l1093
  1203   01F814                     u410:
  1204   01F814  C001  F003         	movff	abs@a,??_abs
  1205   01F818  C002  F004         	movff	abs@a+1,??_abs+1
  1206   01F81C  1E03               	comf	??_abs^0,f,c
  1207   01F81E  1E04               	comf	(??_abs+1)^0,f,c
  1208   01F820  4A03               	infsnz	??_abs^0,f,c
  1209   01F822  2A04               	incf	(??_abs+1)^0,f,c
  1210   01F824  C003  F001         	movff	??_abs,?_abs
  1211   01F828  C004  F002         	movff	??_abs+1,?_abs+1
  1212   01F82C  EF1C  F0FC         	goto	l1096
  1213   01F830                     l1093:
  1214   01F830  C001  F001         	movff	abs@a,?_abs
  1215   01F834  C002  F002         	movff	abs@a+1,?_abs+1
  1216   01F838                     l1096:
  1217   01F838  0012               	return		;funcret
  1218   01F83A                     __end_of_abs:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function _initUSART4 *****************
  1222 ;; Defined at:
  1223 ;;		line 6 in file "serial.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_main
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text5
  1251   01F6CE                     __ptext5:
  1252                           	callstack 0
  1253   01F6CE                     _initUSART4:
  1254                           	callstack 30
  1255   01F6CE                     
  1256                           ;serial.c: 10:     RC0PPS = 0x12;
  1257   01F6CE  0E12               	movlw	18
  1258   01F6D0  010E               	movlb	14	; () banked
  1259   01F6D2  6F62               	movwf	98,b	;volatile
  1260                           
  1261                           ;serial.c: 11:     RX4PPS = 0x11;
  1262   01F6D4  0E11               	movlw	17
  1263   01F6D6  6F15               	movwf	21,b	;volatile
  1264   01F6D8                     
  1265                           ; BSR set to: 14
  1266                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1267   01F6D8  8283               	bsf	131,1,c	;volatile
  1268   01F6DA                     
  1269                           ; BSR set to: 14
  1270                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1271   01F6DA  97E9               	bcf	233,3,b	;volatile
  1272   01F6DC                     
  1273                           ; BSR set to: 14
  1274                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1275   01F6DC  95E8               	bcf	232,2,b	;volatile
  1276                           
  1277                           ;serial.c: 17:     SP4BRGL = 51;
  1278   01F6DE  0E33               	movlw	51
  1279   01F6E0  6FE5               	movwf	229,b	;volatile
  1280                           
  1281                           ;serial.c: 18:     SP4BRGH = 0;
  1282   01F6E2  0E00               	movlw	0
  1283   01F6E4  6FE6               	movwf	230,b	;volatile
  1284   01F6E6                     
  1285                           ; BSR set to: 14
  1286                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1287   01F6E6  89E7               	bsf	231,4,b	;volatile
  1288   01F6E8                     
  1289                           ; BSR set to: 14
  1290                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1291   01F6E8  8BE8               	bsf	232,5,b	;volatile
  1292   01F6EA                     
  1293                           ; BSR set to: 14
  1294                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1295   01F6EA  8FE7               	bsf	231,7,b	;volatile
  1296   01F6EC                     
  1297                           ; BSR set to: 14
  1298   01F6EC  0012               	return		;funcret
  1299   01F6EE                     __end_of_initUSART4:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _initDCmotorsPWM *****************
  1303 ;; Defined at:
  1304 ;;		line 6 in file "dc_motor.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text6
  1332   01F9E0                     __ptext6:
  1333                           	callstack 0
  1334   01F9E0                     _initDCmotorsPWM:
  1335                           	callstack 30
  1336   01F9E0                     
  1337                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1338   01F9E0  9485               	bcf	133,2,c	;volatile
  1339                           
  1340                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1341   01F9E2  9885               	bcf	133,4,c	;volatile
  1342                           
  1343                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1344   01F9E4  9E83               	bcf	131,7,c	;volatile
  1345                           
  1346                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1347   01F9E6  9C87               	bcf	135,6,c	;volatile
  1348   01F9E8                     
  1349                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1350   01F9E8  0E05               	movlw	5
  1351   01F9EA  010E               	movlb	14	; () banked
  1352   01F9EC  6F74               	movwf	116,b	;volatile
  1353                           
  1354                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1355   01F9EE  0E06               	movlw	6
  1356   01F9F0  6F76               	movwf	118,b	;volatile
  1357                           
  1358                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1359   01F9F2  0E07               	movlw	7
  1360   01F9F4  6F69               	movwf	105,b	;volatile
  1361                           
  1362                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1363   01F9F6  0E08               	movlw	8
  1364   01F9F8  6F88               	movwf	136,b	;volatile
  1365                           
  1366                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1367   01F9FA  50BD               	movf	189,w,c	;volatile
  1368   01F9FC  0B8F               	andlw	-113
  1369   01F9FE  0940               	iorlw	64
  1370   01FA00  6EBD               	movwf	189,c	;volatile
  1371                           
  1372                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1373   01FA02  0EE0               	movlw	-32
  1374   01FA04  16BE               	andwf	190,f,c	;volatile
  1375                           
  1376                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1377   01FA06  50BF               	movf	191,w,c	;volatile
  1378   01FA08  0BF0               	andlw	-16
  1379   01FA0A  0901               	iorlw	1
  1380   01FA0C  6EBF               	movwf	191,c	;volatile
  1381                           
  1382                           ;dc_motor.c: 26:     T2PR=99;
  1383   01FA0E  0E63               	movlw	99
  1384   01FA10  6EBC               	movwf	188,c	;volatile
  1385   01FA12                     
  1386                           ; BSR set to: 14
  1387                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1388   01FA12  8EBD               	bsf	189,7,c	;volatile
  1389                           
  1390                           ;dc_motor.c: 31:     CCPR1H=0;
  1391   01FA14  0E00               	movlw	0
  1392   01FA16  6EAA               	movwf	170,c	;volatile
  1393                           
  1394                           ;dc_motor.c: 32:     CCPR2H=0;
  1395   01FA18  0E00               	movlw	0
  1396   01FA1A  6EA6               	movwf	166,c	;volatile
  1397                           
  1398                           ;dc_motor.c: 33:     CCPR3H=0;
  1399   01FA1C  0E00               	movlw	0
  1400   01FA1E  010F               	movlb	15	; () banked
  1401   01FA20  6F25               	movwf	37,b	;volatile
  1402                           
  1403                           ;dc_motor.c: 34:     CCPR4H=0;
  1404   01FA22  0E00               	movlw	0
  1405   01FA24  6F21               	movwf	33,b	;volatile
  1406                           
  1407                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1408   01FA26  0EFC               	movlw	-4
  1409   01FA28  16AD               	andwf	173,f,c	;volatile
  1410                           
  1411                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1412   01FA2A  0EF3               	movlw	-13
  1413   01FA2C  16AD               	andwf	173,f,c	;volatile
  1414                           
  1415                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1416   01FA2E  0ECF               	movlw	-49
  1417   01FA30  16AD               	andwf	173,f,c	;volatile
  1418                           
  1419                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1420   01FA32  0E3F               	movlw	-193
  1421   01FA34  16AD               	andwf	173,f,c	;volatile
  1422   01FA36                     
  1423                           ; BSR set to: 15
  1424                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1425   01FA36  88AB               	bsf	171,4,c	;volatile
  1426                           
  1427                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1428   01FA38  50AB               	movf	171,w,c	;volatile
  1429   01FA3A  0BF0               	andlw	-16
  1430   01FA3C  090C               	iorlw	12
  1431   01FA3E  6EAB               	movwf	171,c	;volatile
  1432   01FA40                     
  1433                           ; BSR set to: 15
  1434                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1435   01FA40  8EAB               	bsf	171,7,c	;volatile
  1436   01FA42                     
  1437                           ; BSR set to: 15
  1438                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1439   01FA42  88A7               	bsf	167,4,c	;volatile
  1440                           
  1441                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1442   01FA44  50A7               	movf	167,w,c	;volatile
  1443   01FA46  0BF0               	andlw	-16
  1444   01FA48  090C               	iorlw	12
  1445   01FA4A  6EA7               	movwf	167,c	;volatile
  1446   01FA4C                     
  1447                           ; BSR set to: 15
  1448                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1449   01FA4C  8EA7               	bsf	167,7,c	;volatile
  1450   01FA4E                     
  1451                           ; BSR set to: 15
  1452                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1453   01FA4E  8926               	bsf	38,4,b	;volatile
  1454                           
  1455                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1456   01FA50  5126               	movf	38,w,b	;volatile
  1457   01FA52  0BF0               	andlw	-16
  1458   01FA54  090C               	iorlw	12
  1459   01FA56  6F26               	movwf	38,b	;volatile
  1460   01FA58                     
  1461                           ; BSR set to: 15
  1462                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1463   01FA58  8F26               	bsf	38,7,b	;volatile
  1464   01FA5A                     
  1465                           ; BSR set to: 15
  1466                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1467   01FA5A  8922               	bsf	34,4,b	;volatile
  1468                           
  1469                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1470   01FA5C  5122               	movf	34,w,b	;volatile
  1471   01FA5E  0BF0               	andlw	-16
  1472   01FA60  090C               	iorlw	12
  1473   01FA62  6F22               	movwf	34,b	;volatile
  1474   01FA64                     
  1475                           ; BSR set to: 15
  1476                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1477   01FA64  8F22               	bsf	34,7,b	;volatile
  1478   01FA66                     
  1479                           ; BSR set to: 15
  1480   01FA66  0012               	return		;funcret
  1481   01FA68                     __end_of_initDCmotorsPWM:
  1482                           	callstack 0
  1483                           
  1484 ;; *************** function _color_click_init *****************
  1485 ;; Defined at:
  1486 ;;		line 5 in file "color.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1504 ;;Total ram usage:        1 bytes
  1505 ;; Hardware stack levels used: 1
  1506 ;; Hardware stack levels required when called: 3
  1507 ;; This function calls:
  1508 ;;		_I2C_2_Master_Init
  1509 ;;		_color_writetoaddr
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text7
  1516   01F788                     __ptext7:
  1517                           	callstack 0
  1518   01F788                     _color_click_init:
  1519                           	callstack 27
  1520   01F788                     
  1521                           ;color.c: 8:     I2C_2_Master_Init();
  1522   01F788  ECAF  F0FB         	call	_I2C_2_Master_Init	;wreg free
  1523   01F78C                     
  1524                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1525   01F78C  0E01               	movlw	1
  1526   01F78E  6E03               	movwf	color_writetoaddr@value^0,c
  1527   01F790  0E00               	movlw	0
  1528   01F792  EC57  F0FB         	call	_color_writetoaddr
  1529   01F796                     
  1530                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1531   01F796  0E3F               	movlw	63
  1532   01F798  6E05               	movwf	??_color_click_init^0,c
  1533   01F79A  0E55               	movlw	85
  1534   01F79C                     u637:
  1535   01F79C  2EE8               	decfsz	wreg,f,c
  1536   01F79E  D7FE               	bra	u637
  1537   01F7A0  2E05               	decfsz	??_color_click_init^0,f,c
  1538   01F7A2  D7FC               	bra	u637
  1539   01F7A4  F000               	nop	
  1540   01F7A6                     
  1541                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1542   01F7A6  0E03               	movlw	3
  1543   01F7A8  6E03               	movwf	color_writetoaddr@value^0,c
  1544   01F7AA  0E00               	movlw	0
  1545   01F7AC  EC57  F0FB         	call	_color_writetoaddr
  1546   01F7B0                     
  1547                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1548   01F7B0  0ED5               	movlw	213
  1549   01F7B2  6E03               	movwf	color_writetoaddr@value^0,c
  1550   01F7B4  0E01               	movlw	1
  1551   01F7B6  EC57  F0FB         	call	_color_writetoaddr
  1552   01F7BA  0012               	return		;funcret
  1553   01F7BC                     __end_of_color_click_init:
  1554                           	callstack 0
  1555                           
  1556 ;; *************** function _color_writetoaddr *****************
  1557 ;; Defined at:
  1558 ;;		line 21 in file "color.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  address         1    wreg     unsigned char 
  1561 ;;  value           1    2[COMRAM] unsigned char 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  address         1    3[COMRAM] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1573 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1577 ;;Total ram usage:        2 bytes
  1578 ;; Hardware stack levels used: 1
  1579 ;; Hardware stack levels required when called: 2
  1580 ;; This function calls:
  1581 ;;		_I2C_2_Master_Start
  1582 ;;		_I2C_2_Master_Stop
  1583 ;;		_I2C_2_Master_Write
  1584 ;; This function is called by:
  1585 ;;		_color_click_init
  1586 ;;		_enable_color_interrupt
  1587 ;;		_set_interrupt_threshold
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text8
  1592   01F6AE                     __ptext8:
  1593                           	callstack 0
  1594   01F6AE                     _color_writetoaddr:
  1595                           	callstack 27
  1596                           
  1597                           ;incstack = 0
  1598                           ;color_writetoaddr@address stored from wreg
  1599   01F6AE  6E04               	movwf	color_writetoaddr@address^0,c
  1600   01F6B0                     
  1601                           ;color.c: 22:     I2C_2_Master_Start();
  1602   01F6B0  EC3E  F0FB         	call	_I2C_2_Master_Start	;wreg free
  1603                           
  1604                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1605   01F6B4  0E52               	movlw	82
  1606   01F6B6  EC48  F0FB         	call	_I2C_2_Master_Write
  1607                           
  1608                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1609   01F6BA  5004               	movf	color_writetoaddr@address^0,w,c
  1610   01F6BC  0980               	iorlw	128
  1611   01F6BE  EC48  F0FB         	call	_I2C_2_Master_Write
  1612                           
  1613                           ;color.c: 25:     I2C_2_Master_Write(value);
  1614   01F6C2  5003               	movf	color_writetoaddr@value^0,w,c
  1615   01F6C4  EC48  F0FB         	call	_I2C_2_Master_Write
  1616                           
  1617                           ;color.c: 26:     I2C_2_Master_Stop();
  1618   01F6C8  EC43  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  1619   01F6CC  0012               	return		;funcret
  1620   01F6CE                     __end_of_color_writetoaddr:
  1621                           	callstack 0
  1622                           
  1623 ;; *************** function _I2C_2_Master_Init *****************
  1624 ;; Defined at:
  1625 ;;		line 4 in file "i2c.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_color_click_init
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text9
  1654   01F75E                     __ptext9:
  1655                           	callstack 0
  1656   01F75E                     _I2C_2_Master_Init:
  1657                           	callstack 29
  1658   01F75E                     
  1659                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1660   01F75E  010E               	movlb	14	; () banked
  1661   01F760  51D9               	movf	217,w,b	;volatile
  1662   01F762  0BF0               	andlw	-16
  1663   01F764  0908               	iorlw	8
  1664   01F766  6FD9               	movwf	217,b	;volatile
  1665   01F768                     
  1666                           ; BSR set to: 14
  1667                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1668   01F768  8BD9               	bsf	217,5,b	;volatile
  1669                           
  1670                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1671   01F76A  0E9F               	movlw	159
  1672   01F76C  6FD6               	movwf	214,b	;volatile
  1673   01F76E                     
  1674                           ; BSR set to: 14
  1675                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1676   01F76E  8A84               	bsf	132,5,c	;volatile
  1677   01F770                     
  1678                           ; BSR set to: 14
  1679                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1680   01F770  8C84               	bsf	132,6,c	;volatile
  1681   01F772                     
  1682                           ; BSR set to: 14
  1683                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1684   01F772  9BA7               	bcf	167,5,b	;volatile
  1685   01F774                     
  1686                           ; BSR set to: 14
  1687                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1688   01F774  9DA7               	bcf	167,6,b	;volatile
  1689                           
  1690                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1691   01F776  0E1D               	movlw	29
  1692   01F778  6F1D               	movwf	29,b	;volatile
  1693                           
  1694                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1695   01F77A  0E1E               	movlw	30
  1696   01F77C  6F1C               	movwf	28,b	;volatile
  1697                           
  1698                           ;i2c.c: 18:   RD5PPS=0x1C;
  1699   01F77E  0E1C               	movlw	28
  1700   01F780  6F6F               	movwf	111,b	;volatile
  1701                           
  1702                           ;i2c.c: 19:   RD6PPS=0x1B;
  1703   01F782  0E1B               	movlw	27
  1704   01F784  6F70               	movwf	112,b	;volatile
  1705   01F786                     
  1706                           ; BSR set to: 14
  1707   01F786  0012               	return		;funcret
  1708   01F788                     __end_of_I2C_2_Master_Init:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function _collect_avg_readings *****************
  1712 ;; Defined at:
  1713 ;;		line 25 in file "colour_identify.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  red_read        2   13[COMRAM] PTR unsigned int 
  1716 ;;		 -> main@red_read(2), 
  1717 ;;  green_read      2   15[COMRAM] PTR unsigned int 
  1718 ;;		 -> main@green_read(2), 
  1719 ;;  blue_read       2   17[COMRAM] PTR unsigned int 
  1720 ;;		 -> main@blue_read(2), 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  i               1   23[COMRAM] enum E14551
  1723 ;;  i               1   22[COMRAM] enum E14551
  1724 ;;  i               1   21[COMRAM] enum E14551
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1734 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;Total ram usage:       11 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; Hardware stack levels required when called: 3
  1741 ;; This function calls:
  1742 ;;		___lwdiv
  1743 ;;		_color_read_Blue
  1744 ;;		_color_read_Green
  1745 ;;		_color_read_Red
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text10
  1752   01FB74                     __ptext10:
  1753                           	callstack 0
  1754   01FB74                     _collect_avg_readings:
  1755                           	callstack 27
  1756   01FB74                     
  1757                           ;colour_identify.c: 25: void collect_avg_readings(unsigned int *red_read, unsigned int *
      +                          green_read, unsigned int *blue_read);colour_identify.c: 26: {;colour_identify.c: 29:    
      +                           for(colour i = RED; i <= BLUE; i++){
  1758   01FB74  0E00               	movlw	0
  1759   01FB76  6E16               	movwf	collect_avg_readings@i^0,c
  1760   01FB78                     l1924:
  1761                           
  1762                           ;colour_identify.c: 30:         *red_read += color_read_Red();
  1763   01FB78  EC8E  F0FC         	call	_color_read_Red	;wreg free
  1764   01FB7C  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  1765   01FB80  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  1766   01FB84  5005               	movf	?_color_read_Red^0,w,c
  1767   01FB86  26DE               	addwf	postinc2,f,c
  1768   01FB88  5006               	movf	(?_color_read_Red+1)^0,w,c
  1769   01FB8A  22DD               	addwfc	postdec2,f,c
  1770   01FB8C                     
  1771                           ;colour_identify.c: 31:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1772   01FB8C  0E11               	movlw	17
  1773   01FB8E  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  1774   01FB90  0E3C               	movlw	60
  1775   01FB92  6E14               	movwf	??_collect_avg_readings^0,c
  1776   01FB94  0ECB               	movlw	203
  1777   01FB96                     u647:
  1778   01FB96  2EE8               	decfsz	wreg,f,c
  1779   01FB98  D7FE               	bra	u647
  1780   01FB9A  2E14               	decfsz	??_collect_avg_readings^0,f,c
  1781   01FB9C  D7FC               	bra	u647
  1782   01FB9E  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  1783   01FBA0  D7FA               	bra	u647
  1784   01FBA2  F000               	nop	
  1785   01FBA4                     
  1786                           ;colour_identify.c: 36:     }
  1787   01FBA4  2A16               	incf	collect_avg_readings@i^0,f,c
  1788   01FBA6  0E02               	movlw	2
  1789   01FBA8  6416               	cpfsgt	collect_avg_readings@i^0,c
  1790   01FBAA  EFD9  F0FD         	goto	u521
  1791   01FBAE  EFDB  F0FD         	goto	u520
  1792   01FBB2                     u521:
  1793   01FBB2  EFBC  F0FD         	goto	l1924
  1794   01FBB6                     u520:
  1795   01FBB6                     
  1796                           ;colour_identify.c: 37:     *red_read = *red_read/3;
  1797   01FBB6  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  1798   01FBBA  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  1799   01FBBE  CFDE F007          	movff	postinc2,___lwdiv@dividend
  1800   01FBC2  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  1801   01FBC6  0E00               	movlw	0
  1802   01FBC8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1803   01FBCA  0E03               	movlw	3
  1804   01FBCC  6E09               	movwf	___lwdiv@divisor^0,c
  1805   01FBCE  ECB6  F0FC         	call	___lwdiv	;wreg free
  1806   01FBD2  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  1807   01FBD6  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  1808   01FBDA  C007  FFDE         	movff	?___lwdiv,postinc2
  1809   01FBDE  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1810   01FBE2                     
  1811                           ;colour_identify.c: 41:     for(colour i = RED; i <= BLUE; i++){
  1812   01FBE2  0E00               	movlw	0
  1813   01FBE4  6E17               	movwf	collect_avg_readings@i_1526^0,c
  1814   01FBE6                     l1940:
  1815                           
  1816                           ;colour_identify.c: 42:         *green_read += color_read_Green();
  1817   01FBE6  EC66  F0FC         	call	_color_read_Green	;wreg free
  1818   01FBEA  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  1819   01FBEE  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  1820   01FBF2  5005               	movf	?_color_read_Green^0,w,c
  1821   01FBF4  26DE               	addwf	postinc2,f,c
  1822   01FBF6  5006               	movf	(?_color_read_Green+1)^0,w,c
  1823   01FBF8  22DD               	addwfc	postdec2,f,c
  1824   01FBFA                     
  1825                           ;colour_identify.c: 43:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1826   01FBFA  0E11               	movlw	17
  1827   01FBFC  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  1828   01FBFE  0E3C               	movlw	60
  1829   01FC00  6E14               	movwf	??_collect_avg_readings^0,c
  1830   01FC02  0ECB               	movlw	203
  1831   01FC04                     u657:
  1832   01FC04  2EE8               	decfsz	wreg,f,c
  1833   01FC06  D7FE               	bra	u657
  1834   01FC08  2E14               	decfsz	??_collect_avg_readings^0,f,c
  1835   01FC0A  D7FC               	bra	u657
  1836   01FC0C  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  1837   01FC0E  D7FA               	bra	u657
  1838   01FC10  F000               	nop	
  1839   01FC12                     
  1840                           ;colour_identify.c: 48:     }
  1841   01FC12  2A17               	incf	collect_avg_readings@i_1526^0,f,c
  1842   01FC14  0E02               	movlw	2
  1843   01FC16  6417               	cpfsgt	collect_avg_readings@i_1526^0,c
  1844   01FC18  EF10  F0FE         	goto	u531
  1845   01FC1C  EF12  F0FE         	goto	u530
  1846   01FC20                     u531:
  1847   01FC20  EFF3  F0FD         	goto	l1940
  1848   01FC24                     u530:
  1849   01FC24                     
  1850                           ;colour_identify.c: 49:     *green_read = *green_read/3;
  1851   01FC24  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  1852   01FC28  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  1853   01FC2C  CFDE F007          	movff	postinc2,___lwdiv@dividend
  1854   01FC30  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  1855   01FC34  0E00               	movlw	0
  1856   01FC36  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1857   01FC38  0E03               	movlw	3
  1858   01FC3A  6E09               	movwf	___lwdiv@divisor^0,c
  1859   01FC3C  ECB6  F0FC         	call	___lwdiv	;wreg free
  1860   01FC40  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  1861   01FC44  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  1862   01FC48  C007  FFDE         	movff	?___lwdiv,postinc2
  1863   01FC4C  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1864   01FC50                     
  1865                           ;colour_identify.c: 53:     for(colour i = RED; i <= BLUE; i++){
  1866   01FC50  0E00               	movlw	0
  1867   01FC52  6E18               	movwf	collect_avg_readings@i_1528^0,c
  1868   01FC54                     l1956:
  1869                           
  1870                           ;colour_identify.c: 54:         *blue_read += color_read_Blue();
  1871   01FC54  EC3E  F0FC         	call	_color_read_Blue	;wreg free
  1872   01FC58  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  1873   01FC5C  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  1874   01FC60  5005               	movf	?_color_read_Blue^0,w,c
  1875   01FC62  26DE               	addwf	postinc2,f,c
  1876   01FC64  5006               	movf	(?_color_read_Blue+1)^0,w,c
  1877   01FC66  22DD               	addwfc	postdec2,f,c
  1878   01FC68                     
  1879                           ;colour_identify.c: 55:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1880   01FC68  0E11               	movlw	17
  1881   01FC6A  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  1882   01FC6C  0E3C               	movlw	60
  1883   01FC6E  6E14               	movwf	??_collect_avg_readings^0,c
  1884   01FC70  0ECB               	movlw	203
  1885   01FC72                     u667:
  1886   01FC72  2EE8               	decfsz	wreg,f,c
  1887   01FC74  D7FE               	bra	u667
  1888   01FC76  2E14               	decfsz	??_collect_avg_readings^0,f,c
  1889   01FC78  D7FC               	bra	u667
  1890   01FC7A  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  1891   01FC7C  D7FA               	bra	u667
  1892   01FC7E  F000               	nop	
  1893   01FC80                     
  1894                           ;colour_identify.c: 60:     }
  1895   01FC80  2A18               	incf	collect_avg_readings@i_1528^0,f,c
  1896   01FC82  0E02               	movlw	2
  1897   01FC84  6418               	cpfsgt	collect_avg_readings@i_1528^0,c
  1898   01FC86  EF47  F0FE         	goto	u541
  1899   01FC8A  EF49  F0FE         	goto	u540
  1900   01FC8E                     u541:
  1901   01FC8E  EF2A  F0FE         	goto	l1956
  1902   01FC92                     u540:
  1903   01FC92                     
  1904                           ;colour_identify.c: 61:     *blue_read = *blue_read/3;
  1905   01FC92  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  1906   01FC96  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  1907   01FC9A  CFDE F007          	movff	postinc2,___lwdiv@dividend
  1908   01FC9E  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  1909   01FCA2  0E00               	movlw	0
  1910   01FCA4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1911   01FCA6  0E03               	movlw	3
  1912   01FCA8  6E09               	movwf	___lwdiv@divisor^0,c
  1913   01FCAA  ECB6  F0FC         	call	___lwdiv	;wreg free
  1914   01FCAE  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  1915   01FCB2  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  1916   01FCB6  C007  FFDE         	movff	?___lwdiv,postinc2
  1917   01FCBA  C008  FFDD         	movff	?___lwdiv+1,postdec2
  1918   01FCBE  0012               	return		;funcret
  1919   01FCC0                     __end_of_collect_avg_readings:
  1920                           	callstack 0
  1921                           
  1922 ;; *************** function _color_read_Red *****************
  1923 ;; Defined at:
  1924 ;;		line 29 in file "color.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  tmp             2    9[COMRAM] unsigned int 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  2    4[COMRAM] unsigned int 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1942 ;;Total ram usage:        7 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 2
  1945 ;; This function calls:
  1946 ;;		_I2C_2_Master_Read
  1947 ;;		_I2C_2_Master_RepStart
  1948 ;;		_I2C_2_Master_Start
  1949 ;;		_I2C_2_Master_Stop
  1950 ;;		_I2C_2_Master_Write
  1951 ;; This function is called by:
  1952 ;;		_collect_avg_readings
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text11
  1957   01F91C                     __ptext11:
  1958                           	callstack 0
  1959   01F91C                     _color_read_Red:
  1960                           	callstack 27
  1961   01F91C                     
  1962                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  1963   01F91C  EC3E  F0FB         	call	_I2C_2_Master_Start	;wreg free
  1964                           
  1965                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  1966   01F920  0E52               	movlw	82
  1967   01F922  EC48  F0FB         	call	_I2C_2_Master_Write
  1968                           
  1969                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  1970   01F926  0EB6               	movlw	182
  1971   01F928  EC48  F0FB         	call	_I2C_2_Master_Write
  1972                           
  1973                           ;color.c: 35:  I2C_2_Master_RepStart();
  1974   01F92C  EC39  F0FB         	call	_I2C_2_Master_RepStart	;wreg free
  1975                           
  1976                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  1977   01F930  0E53               	movlw	83
  1978   01F932  EC48  F0FB         	call	_I2C_2_Master_Write
  1979                           
  1980                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  1981   01F936  0E01               	movlw	1
  1982   01F938  EC1D  F0FC         	call	_I2C_2_Master_Read
  1983   01F93C  6E07               	movwf	??_color_read_Red^0,c
  1984   01F93E  5007               	movf	??_color_read_Red^0,w,c
  1985   01F940  6E0A               	movwf	color_read_Red@tmp^0,c
  1986   01F942  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  1987                           
  1988                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  1989   01F944  0E00               	movlw	0
  1990   01F946  EC1D  F0FC         	call	_I2C_2_Master_Read
  1991   01F94A  6E07               	movwf	??_color_read_Red^0,c
  1992   01F94C  5007               	movf	??_color_read_Red^0,w,c
  1993   01F94E  6E09               	movwf	(??_color_read_Red+2)^0,c
  1994   01F950  6A08               	clrf	(??_color_read_Red+1)^0,c
  1995   01F952  500A               	movf	color_read_Red@tmp^0,w,c
  1996   01F954  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  1997   01F956  6E0A               	movwf	color_read_Red@tmp^0,c
  1998   01F958  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  1999   01F95A  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  2000   01F95C  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  2001                           
  2002                           ;color.c: 39:  I2C_2_Master_Stop();
  2003   01F95E  EC43  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  2004   01F962                     
  2005                           ;color.c: 40:  return tmp;
  2006   01F962  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  2007   01F966  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2008   01F96A  0012               	return		;funcret
  2009   01F96C                     __end_of_color_read_Red:
  2010                           	callstack 0
  2011                           
  2012 ;; *************** function _color_read_Green *****************
  2013 ;; Defined at:
  2014 ;;		line 43 in file "color.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  tmp             2    9[COMRAM] unsigned int 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  2    4[COMRAM] unsigned int 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2031 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2032 ;;Total ram usage:        7 bytes
  2033 ;; Hardware stack levels used: 1
  2034 ;; Hardware stack levels required when called: 2
  2035 ;; This function calls:
  2036 ;;		_I2C_2_Master_Read
  2037 ;;		_I2C_2_Master_RepStart
  2038 ;;		_I2C_2_Master_Start
  2039 ;;		_I2C_2_Master_Stop
  2040 ;;		_I2C_2_Master_Write
  2041 ;; This function is called by:
  2042 ;;		_collect_avg_readings
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text12
  2047   01F8CC                     __ptext12:
  2048                           	callstack 0
  2049   01F8CC                     _color_read_Green:
  2050                           	callstack 27
  2051   01F8CC                     
  2052                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  2053   01F8CC  EC3E  F0FB         	call	_I2C_2_Master_Start	;wreg free
  2054                           
  2055                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  2056   01F8D0  0E52               	movlw	82
  2057   01F8D2  EC48  F0FB         	call	_I2C_2_Master_Write
  2058                           
  2059                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  2060   01F8D6  0EB8               	movlw	184
  2061   01F8D8  EC48  F0FB         	call	_I2C_2_Master_Write
  2062                           
  2063                           ;color.c: 49:  I2C_2_Master_RepStart();
  2064   01F8DC  EC39  F0FB         	call	_I2C_2_Master_RepStart	;wreg free
  2065                           
  2066                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  2067   01F8E0  0E53               	movlw	83
  2068   01F8E2  EC48  F0FB         	call	_I2C_2_Master_Write
  2069                           
  2070                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  2071   01F8E6  0E01               	movlw	1
  2072   01F8E8  EC1D  F0FC         	call	_I2C_2_Master_Read
  2073   01F8EC  6E07               	movwf	??_color_read_Green^0,c
  2074   01F8EE  5007               	movf	??_color_read_Green^0,w,c
  2075   01F8F0  6E0A               	movwf	color_read_Green@tmp^0,c
  2076   01F8F2  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  2077                           
  2078                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2079   01F8F4  0E00               	movlw	0
  2080   01F8F6  EC1D  F0FC         	call	_I2C_2_Master_Read
  2081   01F8FA  6E07               	movwf	??_color_read_Green^0,c
  2082   01F8FC  5007               	movf	??_color_read_Green^0,w,c
  2083   01F8FE  6E09               	movwf	(??_color_read_Green+2)^0,c
  2084   01F900  6A08               	clrf	(??_color_read_Green+1)^0,c
  2085   01F902  500A               	movf	color_read_Green@tmp^0,w,c
  2086   01F904  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  2087   01F906  6E0A               	movwf	color_read_Green@tmp^0,c
  2088   01F908  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  2089   01F90A  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  2090   01F90C  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  2091                           
  2092                           ;color.c: 53:  I2C_2_Master_Stop();
  2093   01F90E  EC43  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  2094   01F912                     
  2095                           ;color.c: 54:  return tmp;
  2096   01F912  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  2097   01F916  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2098   01F91A  0012               	return		;funcret
  2099   01F91C                     __end_of_color_read_Green:
  2100                           	callstack 0
  2101                           
  2102 ;; *************** function _color_read_Blue *****************
  2103 ;; Defined at:
  2104 ;;		line 57 in file "color.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  tmp             2    9[COMRAM] unsigned int 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  2    4[COMRAM] unsigned int 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2118 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2121 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2122 ;;Total ram usage:        7 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; Hardware stack levels required when called: 2
  2125 ;; This function calls:
  2126 ;;		_I2C_2_Master_Read
  2127 ;;		_I2C_2_Master_RepStart
  2128 ;;		_I2C_2_Master_Start
  2129 ;;		_I2C_2_Master_Stop
  2130 ;;		_I2C_2_Master_Write
  2131 ;; This function is called by:
  2132 ;;		_collect_avg_readings
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text13
  2137   01F87C                     __ptext13:
  2138                           	callstack 0
  2139   01F87C                     _color_read_Blue:
  2140                           	callstack 27
  2141   01F87C                     
  2142                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  2143   01F87C  EC3E  F0FB         	call	_I2C_2_Master_Start	;wreg free
  2144                           
  2145                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  2146   01F880  0E52               	movlw	82
  2147   01F882  EC48  F0FB         	call	_I2C_2_Master_Write
  2148                           
  2149                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  2150   01F886  0EBA               	movlw	186
  2151   01F888  EC48  F0FB         	call	_I2C_2_Master_Write
  2152                           
  2153                           ;color.c: 63:  I2C_2_Master_RepStart();
  2154   01F88C  EC39  F0FB         	call	_I2C_2_Master_RepStart	;wreg free
  2155                           
  2156                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  2157   01F890  0E53               	movlw	83
  2158   01F892  EC48  F0FB         	call	_I2C_2_Master_Write
  2159                           
  2160                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  2161   01F896  0E01               	movlw	1
  2162   01F898  EC1D  F0FC         	call	_I2C_2_Master_Read
  2163   01F89C  6E07               	movwf	??_color_read_Blue^0,c
  2164   01F89E  5007               	movf	??_color_read_Blue^0,w,c
  2165   01F8A0  6E0A               	movwf	color_read_Blue@tmp^0,c
  2166   01F8A2  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  2167                           
  2168                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2169   01F8A4  0E00               	movlw	0
  2170   01F8A6  EC1D  F0FC         	call	_I2C_2_Master_Read
  2171   01F8AA  6E07               	movwf	??_color_read_Blue^0,c
  2172   01F8AC  5007               	movf	??_color_read_Blue^0,w,c
  2173   01F8AE  6E09               	movwf	(??_color_read_Blue+2)^0,c
  2174   01F8B0  6A08               	clrf	(??_color_read_Blue+1)^0,c
  2175   01F8B2  500A               	movf	color_read_Blue@tmp^0,w,c
  2176   01F8B4  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  2177   01F8B6  6E0A               	movwf	color_read_Blue@tmp^0,c
  2178   01F8B8  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  2179   01F8BA  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  2180   01F8BC  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  2181                           
  2182                           ;color.c: 67:  I2C_2_Master_Stop();
  2183   01F8BE  EC43  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  2184   01F8C2                     
  2185                           ;color.c: 68:  return tmp;
  2186   01F8C2  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  2187   01F8C6  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2188   01F8CA  0012               	return		;funcret
  2189   01F8CC                     __end_of_color_read_Blue:
  2190                           	callstack 0
  2191                           
  2192 ;; *************** function _I2C_2_Master_Write *****************
  2193 ;; Defined at:
  2194 ;;		line 45 in file "i2c.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  data_byte       1    wreg     unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  data_byte       1    1[COMRAM] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;Total ram usage:        1 bytes
  2213 ;; Hardware stack levels used: 1
  2214 ;; Hardware stack levels required when called: 1
  2215 ;; This function calls:
  2216 ;;		_I2C_2_Master_Idle
  2217 ;; This function is called by:
  2218 ;;		_color_writetoaddr
  2219 ;;		_color_read_Red
  2220 ;;		_color_read_Green
  2221 ;;		_color_read_Blue
  2222 ;;		_color_read_Clear
  2223 ;;		_read_interrupt_status
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text14
  2228   01F690                     __ptext14:
  2229                           	callstack 0
  2230   01F690                     _I2C_2_Master_Write:
  2231                           	callstack 27
  2232                           
  2233                           ;incstack = 0
  2234                           ;I2C_2_Master_Write@data_byte stored from wreg
  2235   01F690  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  2236   01F692                     
  2237                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2238   01F692  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2239   01F696                     
  2240                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2241   01F696  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2242   01F69A  0012               	return		;funcret
  2243   01F69C                     __end_of_I2C_2_Master_Write:
  2244                           	callstack 0
  2245                           
  2246 ;; *************** function _I2C_2_Master_Stop *****************
  2247 ;; Defined at:
  2248 ;;		line 39 in file "i2c.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels used: 1
  2268 ;; Hardware stack levels required when called: 1
  2269 ;; This function calls:
  2270 ;;		_I2C_2_Master_Idle
  2271 ;; This function is called by:
  2272 ;;		_color_writetoaddr
  2273 ;;		_color_read_Red
  2274 ;;		_color_read_Green
  2275 ;;		_color_read_Blue
  2276 ;;		_color_read_Clear
  2277 ;;		_read_interrupt_status
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text15
  2282   01F686                     __ptext15:
  2283                           	callstack 0
  2284   01F686                     _I2C_2_Master_Stop:
  2285                           	callstack 27
  2286   01F686                     
  2287                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2288   01F686  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2289   01F68A                     
  2290                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2291   01F68A  010E               	movlb	14	; () banked
  2292   01F68C  85DA               	bsf	218,2,b	;volatile
  2293   01F68E                     
  2294                           ; BSR set to: 14
  2295   01F68E  0012               	return		;funcret
  2296   01F690                     __end_of_I2C_2_Master_Stop:
  2297                           	callstack 0
  2298                           
  2299 ;; *************** function _I2C_2_Master_Start *****************
  2300 ;; Defined at:
  2301 ;;		line 27 in file "i2c.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used: 1
  2321 ;; Hardware stack levels required when called: 1
  2322 ;; This function calls:
  2323 ;;		_I2C_2_Master_Idle
  2324 ;; This function is called by:
  2325 ;;		_color_writetoaddr
  2326 ;;		_color_read_Red
  2327 ;;		_color_read_Green
  2328 ;;		_color_read_Blue
  2329 ;;		_color_read_Clear
  2330 ;;		_read_interrupt_status
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text16
  2335   01F67C                     __ptext16:
  2336                           	callstack 0
  2337   01F67C                     _I2C_2_Master_Start:
  2338                           	callstack 27
  2339   01F67C                     
  2340                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2341   01F67C  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2342   01F680                     
  2343                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2344   01F680  010E               	movlb	14	; () banked
  2345   01F682  81DA               	bsf	218,0,b	;volatile
  2346   01F684                     
  2347                           ; BSR set to: 14
  2348   01F684  0012               	return		;funcret
  2349   01F686                     __end_of_I2C_2_Master_Start:
  2350                           	callstack 0
  2351                           
  2352 ;; *************** function _I2C_2_Master_RepStart *****************
  2353 ;; Defined at:
  2354 ;;		line 33 in file "i2c.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used: 1
  2374 ;; Hardware stack levels required when called: 1
  2375 ;; This function calls:
  2376 ;;		_I2C_2_Master_Idle
  2377 ;; This function is called by:
  2378 ;;		_color_read_Red
  2379 ;;		_color_read_Green
  2380 ;;		_color_read_Blue
  2381 ;;		_color_read_Clear
  2382 ;;		_read_interrupt_status
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text17
  2387   01F672                     __ptext17:
  2388                           	callstack 0
  2389   01F672                     _I2C_2_Master_RepStart:
  2390                           	callstack 27
  2391   01F672                     
  2392                           ;i2c.c: 35:   I2C_2_Master_Idle();
  2393   01F672  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2394   01F676                     
  2395                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  2396   01F676  010E               	movlb	14	; () banked
  2397   01F678  83DA               	bsf	218,1,b	;volatile
  2398   01F67A                     
  2399                           ; BSR set to: 14
  2400   01F67A  0012               	return		;funcret
  2401   01F67C                     __end_of_I2C_2_Master_RepStart:
  2402                           	callstack 0
  2403                           
  2404 ;; *************** function _I2C_2_Master_Read *****************
  2405 ;; Defined at:
  2406 ;;		line 51 in file "i2c.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  ack             1    wreg     unsigned char 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  ack             1    2[COMRAM] unsigned char 
  2411 ;;  tmp             1    3[COMRAM] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      unsigned char 
  2414 ;; Registers used:
  2415 ;;		wreg, status,2, status,0, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;Total ram usage:        3 bytes
  2426 ;; Hardware stack levels used: 1
  2427 ;; Hardware stack levels required when called: 1
  2428 ;; This function calls:
  2429 ;;		_I2C_2_Master_Idle
  2430 ;; This function is called by:
  2431 ;;		_color_read_Red
  2432 ;;		_color_read_Green
  2433 ;;		_color_read_Blue
  2434 ;;		_color_read_Clear
  2435 ;;		_read_interrupt_status
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text18
  2440   01F83A                     __ptext18:
  2441                           	callstack 0
  2442   01F83A                     _I2C_2_Master_Read:
  2443                           	callstack 27
  2444                           
  2445                           ; BSR set to: 14
  2446                           ;incstack = 0
  2447                           ;I2C_2_Master_Read@ack stored from wreg
  2448   01F83A  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  2449   01F83C                     
  2450                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  2451   01F83C  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2452   01F840                     
  2453                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  2454   01F840  010E               	movlb	14	; () banked
  2455   01F842  87DA               	bsf	218,3,b	;volatile
  2456                           
  2457                           ;i2c.c: 56:   I2C_2_Master_Idle();
  2458   01F844  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2459   01F848                     
  2460                           ;i2c.c: 57:   tmp = SSP2BUF;
  2461   01F848  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  2462                           
  2463                           ;i2c.c: 58:   I2C_2_Master_Idle();
  2464   01F84C  EC9B  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2465   01F850                     
  2466                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  2467   01F850  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  2468   01F852  B4D8               	btfsc	status,2,c
  2469   01F854  EF2E  F0FC         	goto	u391
  2470   01F858  EF32  F0FC         	goto	u390
  2471   01F85C                     u391:
  2472   01F85C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  2473   01F85E  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  2474   01F860  EF33  F0FC         	goto	u408
  2475   01F864                     u390:
  2476   01F864  6A02               	clrf	??_I2C_2_Master_Read^0,c
  2477   01F866                     u408:
  2478   01F866  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  2479   01F868  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  2480   01F86A  010E               	movlb	14	; () banked
  2481   01F86C  51DA               	movf	218,w,b	;volatile
  2482   01F86E  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  2483   01F870  0BDF               	andlw	-33
  2484   01F872  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  2485   01F874  6FDA               	movwf	218,b	;volatile
  2486   01F876                     
  2487                           ; BSR set to: 14
  2488                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  2489   01F876  89DA               	bsf	218,4,b	;volatile
  2490   01F878                     
  2491                           ; BSR set to: 14
  2492                           ;i2c.c: 61:   return tmp;
  2493   01F878  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  2494   01F87A                     
  2495                           ; BSR set to: 14
  2496   01F87A  0012               	return		;funcret
  2497   01F87C                     __end_of_I2C_2_Master_Read:
  2498                           	callstack 0
  2499                           
  2500 ;; *************** function _I2C_2_Master_Idle *****************
  2501 ;; Defined at:
  2502 ;;		line 22 in file "i2c.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;Total ram usage:        1 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_I2C_2_Master_Start
  2526 ;;		_I2C_2_Master_RepStart
  2527 ;;		_I2C_2_Master_Stop
  2528 ;;		_I2C_2_Master_Write
  2529 ;;		_I2C_2_Master_Read
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text19
  2534   01F736                     __ptext19:
  2535                           	callstack 0
  2536   01F736                     _I2C_2_Master_Idle:
  2537                           	callstack 27
  2538   01F736                     l154:
  2539   01F736  010E               	movlb	14	; () banked
  2540   01F738  B5D8               	btfsc	216,2,b	;volatile
  2541   01F73A  EFA1  F0FB         	goto	u371
  2542   01F73E  EFA3  F0FB         	goto	u370
  2543   01F742                     u371:
  2544   01F742  EF9B  F0FB         	goto	l154
  2545   01F746                     u370:
  2546   01F746                     
  2547                           ; BSR set to: 14
  2548   01F746  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2549   01F74A  0E1F               	movlw	31
  2550   01F74C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2551   01F74E  A4D8               	btfss	status,2,c
  2552   01F750  EFAC  F0FB         	goto	u381
  2553   01F754  EFAE  F0FB         	goto	u380
  2554   01F758                     u381:
  2555   01F758  EF9B  F0FB         	goto	l154
  2556   01F75C                     u380:
  2557   01F75C                     
  2558                           ; BSR set to: 14
  2559   01F75C  0012               	return		;funcret
  2560   01F75E                     __end_of_I2C_2_Master_Idle:
  2561                           	callstack 0
  2562                           
  2563 ;; *************** function ___lwdiv *****************
  2564 ;; Defined at:
  2565 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  dividend        2    6[COMRAM] unsigned int 
  2568 ;;  divisor         2    8[COMRAM] unsigned int 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  quotient        2   10[COMRAM] unsigned int 
  2571 ;;  counter         1   12[COMRAM] unsigned char 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  2    6[COMRAM] unsigned int 
  2574 ;; Registers used:
  2575 ;;		wreg, status,2, status,0
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;Total ram usage:        7 bytes
  2586 ;; Hardware stack levels used: 1
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_setMotorPWM
  2591 ;;		_collect_avg_readings
  2592 ;;		_normalise_readings
  2593 ;;		_make_master_closeness
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text20
  2598   01F96C                     __ptext20:
  2599                           	callstack 0
  2600   01F96C                     ___lwdiv:
  2601                           	callstack 29
  2602   01F96C  0E00               	movlw	0
  2603   01F96E  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2604   01F970  0E00               	movlw	0
  2605   01F972  6E0B               	movwf	___lwdiv@quotient^0,c
  2606   01F974  5009               	movf	___lwdiv@divisor^0,w,c
  2607   01F976  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2608   01F978  B4D8               	btfsc	status,2,c
  2609   01F97A  EFC1  F0FC         	goto	u421
  2610   01F97E  EFC3  F0FC         	goto	u420
  2611   01F982                     u421:
  2612   01F982  EFEB  F0FC         	goto	l909
  2613   01F986                     u420:
  2614   01F986  0E01               	movlw	1
  2615   01F988  6E0D               	movwf	___lwdiv@counter^0,c
  2616   01F98A  EFCB  F0FC         	goto	l1776
  2617   01F98E                     l1774:
  2618   01F98E  90D8               	bcf	status,0,c
  2619   01F990  3609               	rlcf	___lwdiv@divisor^0,f,c
  2620   01F992  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2621   01F994  2A0D               	incf	___lwdiv@counter^0,f,c
  2622   01F996                     l1776:
  2623   01F996  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2624   01F998  EFD0  F0FC         	goto	u431
  2625   01F99C  EFD2  F0FC         	goto	u430
  2626   01F9A0                     u431:
  2627   01F9A0  EFC7  F0FC         	goto	l1774
  2628   01F9A4                     u430:
  2629   01F9A4                     l1778:
  2630   01F9A4  90D8               	bcf	status,0,c
  2631   01F9A6  360B               	rlcf	___lwdiv@quotient^0,f,c
  2632   01F9A8  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2633   01F9AA  5009               	movf	___lwdiv@divisor^0,w,c
  2634   01F9AC  5C07               	subwf	___lwdiv@dividend^0,w,c
  2635   01F9AE  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2636   01F9B0  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2637   01F9B2  A0D8               	btfss	status,0,c
  2638   01F9B4  EFDE  F0FC         	goto	u441
  2639   01F9B8  EFE0  F0FC         	goto	u440
  2640   01F9BC                     u441:
  2641   01F9BC  EFE5  F0FC         	goto	l1786
  2642   01F9C0                     u440:
  2643   01F9C0  5009               	movf	___lwdiv@divisor^0,w,c
  2644   01F9C2  5E07               	subwf	___lwdiv@dividend^0,f,c
  2645   01F9C4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2646   01F9C6  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2647   01F9C8  800B               	bsf	___lwdiv@quotient^0,0,c
  2648   01F9CA                     l1786:
  2649   01F9CA  90D8               	bcf	status,0,c
  2650   01F9CC  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2651   01F9CE  3209               	rrcf	___lwdiv@divisor^0,f,c
  2652   01F9D0  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2653   01F9D2  EFD2  F0FC         	goto	l1778
  2654   01F9D6                     l909:
  2655   01F9D6  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2656   01F9DA  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2657   01F9DE  0012               	return		;funcret
  2658   01F9E0                     __end_of___lwdiv:
  2659                           	callstack 0
  2660                           
  2661 ;; *************** function _LEDSon_init *****************
  2662 ;; Defined at:
  2663 ;;		line 18 in file "LEDsOn.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		None
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;Total ram usage:        0 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text21
  2691   01F6EE                     __ptext21:
  2692                           	callstack 0
  2693   01F6EE                     _LEDSon_init:
  2694                           	callstack 30
  2695   01F6EE                     
  2696                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  2697   01F6EE  9288               	bcf	136,1,c	;volatile
  2698                           
  2699                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  2700   01F6F0  9088               	bcf	136,0,c	;volatile
  2701                           
  2702                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  2703   01F6F2  9884               	bcf	132,4,c	;volatile
  2704                           
  2705                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  2706   01F6F4  9684               	bcf	132,3,c	;volatile
  2707                           
  2708                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  2709   01F6F6  9086               	bcf	134,0,c	;volatile
  2710                           
  2711                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  2712   01F6F8  9287               	bcf	135,1,c	;volatile
  2713                           
  2714                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  2715   01F6FA  9E86               	bcf	134,7,c	;volatile
  2716                           
  2717                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  2718   01F6FC  9881               	bcf	129,4,c	;volatile
  2719                           
  2720                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  2721   01F6FE  8E7E               	bsf	126,7,c	;volatile
  2722                           
  2723                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  2724   01F700  827F               	bsf	127,1,c	;volatile
  2725                           
  2726                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  2727   01F702  8879               	bsf	121,4,c	;volatile
  2728                           
  2729                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  2730   01F704  987C               	bcf	124,4,c	;volatile
  2731                           
  2732                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  2733   01F706  9280               	bcf	128,1,c	;volatile
  2734                           
  2735                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  2736   01F708  907E               	bcf	126,0,c	;volatile
  2737                           
  2738                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  2739   01F70A  9080               	bcf	128,0,c	;volatile
  2740                           
  2741                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  2742   01F70C  967C               	bcf	124,3,c	;volatile
  2743   01F70E  0012               	return		;funcret
  2744   01F710                     __end_of_LEDSon_init:
  2745                           	callstack 0
  2746   000000                     
  2747                           	psect	rparam
  2748   000000                     
  2749                           	psect	idloc
  2750                           
  2751                           ;Config register IDLOC0 @ 0x200000
  2752                           ;	unspecified, using default values
  2753   200000                     	org	2097152
  2754   200000  0FFF               	dw	4095
  2755                           
  2756                           ;Config register IDLOC1 @ 0x200002
  2757                           ;	unspecified, using default values
  2758   200002                     	org	2097154
  2759   200002  0FFF               	dw	4095
  2760                           
  2761                           ;Config register IDLOC2 @ 0x200004
  2762                           ;	unspecified, using default values
  2763   200004                     	org	2097156
  2764   200004  0FFF               	dw	4095
  2765                           
  2766                           ;Config register IDLOC3 @ 0x200006
  2767                           ;	unspecified, using default values
  2768   200006                     	org	2097158
  2769   200006  0FFF               	dw	4095
  2770                           
  2771                           ;Config register IDLOC4 @ 0x200008
  2772                           ;	unspecified, using default values
  2773   200008                     	org	2097160
  2774   200008  0FFF               	dw	4095
  2775                           
  2776                           ;Config register IDLOC5 @ 0x20000A
  2777                           ;	unspecified, using default values
  2778   20000A                     	org	2097162
  2779   20000A  0FFF               	dw	4095
  2780                           
  2781                           ;Config register IDLOC6 @ 0x20000C
  2782                           ;	unspecified, using default values
  2783   20000C                     	org	2097164
  2784   20000C  0FFF               	dw	4095
  2785                           
  2786                           ;Config register IDLOC7 @ 0x20000E
  2787                           ;	unspecified, using default values
  2788   20000E                     	org	2097166
  2789   20000E  0FFF               	dw	4095
  2790                           
  2791                           	psect	config
  2792                           
  2793                           ;Config register CONFIG1L @ 0x300000
  2794                           ;	External Oscillator mode Selection bits
  2795                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2796                           ;	Power-up default value for COSC bits
  2797                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2798   300000                     	org	3145728
  2799   300000  AA                 	db	170
  2800                           
  2801                           ;Config register CONFIG1H @ 0x300001
  2802                           ;	unspecified, using default values
  2803                           ;	Clock Out Enable bit
  2804                           ;	CLKOUTEN = 0x1, unprogrammed default
  2805                           ;	Clock Switch Enable bit
  2806                           ;	CSWEN = 0x1, unprogrammed default
  2807                           ;	Fail-Safe Clock Monitor Enable bit
  2808                           ;	FCMEN = 0x1, unprogrammed default
  2809   300001                     	org	3145729
  2810   300001  FF                 	db	255
  2811                           
  2812                           ;Config register CONFIG2L @ 0x300002
  2813                           ;	unspecified, using default values
  2814                           ;	Master Clear Enable bit
  2815                           ;	MCLRE = 0x1, unprogrammed default
  2816                           ;	Power-up Timer Enable bit
  2817                           ;	PWRTE = 0x1, unprogrammed default
  2818                           ;	Low-power BOR enable bit
  2819                           ;	LPBOREN = 0x1, unprogrammed default
  2820                           ;	Brown-out Reset Enable bits
  2821                           ;	BOREN = 0x3, unprogrammed default
  2822   300002                     	org	3145730
  2823   300002  FF                 	db	255
  2824                           
  2825                           ;Config register CONFIG2H @ 0x300003
  2826                           ;	unspecified, using default values
  2827                           ;	Brown Out Reset Voltage selection bits
  2828                           ;	BORV = 0x3, unprogrammed default
  2829                           ;	ZCD Disable bit
  2830                           ;	ZCD = 0x1, unprogrammed default
  2831                           ;	PPSLOCK bit One-Way Set Enable bit
  2832                           ;	PPS1WAY = 0x1, unprogrammed default
  2833                           ;	Stack Full/Underflow Reset Enable bit
  2834                           ;	STVREN = 0x1, unprogrammed default
  2835                           ;	Debugger Enable bit
  2836                           ;	DEBUG = 0x1, unprogrammed default
  2837                           ;	Extended Instruction Set Enable bit
  2838                           ;	XINST = 0x1, unprogrammed default
  2839   300003                     	org	3145731
  2840   300003  FF                 	db	255
  2841                           
  2842                           ;Config register CONFIG3L @ 0x300004
  2843                           ;	WDT Period Select bits
  2844                           ;	WDTCPS = 0x1F, unprogrammed default
  2845                           ;	WDT operating mode
  2846                           ;	WDTE = OFF, WDT Disabled
  2847   300004                     	org	3145732
  2848   300004  9F                 	db	159
  2849                           
  2850                           ;Config register CONFIG3H @ 0x300005
  2851                           ;	unspecified, using default values
  2852                           ;	WDT Window Select bits
  2853                           ;	WDTCWS = 0x7, unprogrammed default
  2854                           ;	WDT input clock selector
  2855                           ;	WDTCCS = 0x7, unprogrammed default
  2856   300005                     	org	3145733
  2857   300005  FF                 	db	255
  2858                           
  2859                           ;Config register CONFIG4L @ 0x300006
  2860                           ;	unspecified, using default values
  2861                           ;	Write Protection Block 0
  2862                           ;	WRT0 = 0x1, unprogrammed default
  2863                           ;	Write Protection Block 1
  2864                           ;	WRT1 = 0x1, unprogrammed default
  2865                           ;	Write Protection Block 2
  2866                           ;	WRT2 = 0x1, unprogrammed default
  2867                           ;	Write Protection Block 3
  2868                           ;	WRT3 = 0x1, unprogrammed default
  2869                           ;	Write Protection Block 3
  2870                           ;	WRT4 = 0x1, unprogrammed default
  2871                           ;	Write Protection Block 3
  2872                           ;	WRT5 = 0x1, unprogrammed default
  2873                           ;	Write Protection Block 3
  2874                           ;	WRT6 = 0x1, unprogrammed default
  2875                           ;	Write Protection Block 3
  2876                           ;	WRT7 = 0x1, unprogrammed default
  2877   300006                     	org	3145734
  2878   300006  FF                 	db	255
  2879                           
  2880                           ;Config register CONFIG4H @ 0x300007
  2881                           ;	unspecified, using default values
  2882                           ;	Configuration Register Write Protection bit
  2883                           ;	WRTC = 0x1, unprogrammed default
  2884                           ;	Boot Block Write Protection bit
  2885                           ;	WRTB = 0x1, unprogrammed default
  2886                           ;	Data EEPROM Write Protection bit
  2887                           ;	WRTD = 0x1, unprogrammed default
  2888                           ;	Scanner Enable bit
  2889                           ;	SCANE = 0x1, unprogrammed default
  2890                           ;	Low Voltage Programming Enable bit
  2891                           ;	LVP = 0x1, unprogrammed default
  2892   300007                     	org	3145735
  2893   300007  FF                 	db	255
  2894                           
  2895                           ;Config register CONFIG5L @ 0x300008
  2896                           ;	unspecified, using default values
  2897                           ;	UserNVM Program Memory Code Protection bit
  2898                           ;	CP = 0x1, unprogrammed default
  2899                           ;	DataNVM Memory Code Protection bit
  2900                           ;	CPD = 0x1, unprogrammed default
  2901   300008                     	org	3145736
  2902   300008  FF                 	db	255
  2903                           
  2904                           ;Config register CONFIG5H @ 0x300009
  2905                           ;	unspecified, using default values
  2906   300009                     	org	3145737
  2907   300009  FF                 	db	255
  2908                           
  2909                           ;Config register CONFIG6L @ 0x30000A
  2910                           ;	unspecified, using default values
  2911                           ;	Table Read Protection Block 0
  2912                           ;	EBTR0 = 0x1, unprogrammed default
  2913                           ;	Table Read Protection Block 1
  2914                           ;	EBTR1 = 0x1, unprogrammed default
  2915                           ;	Table Read Protection Block 2
  2916                           ;	EBTR2 = 0x1, unprogrammed default
  2917                           ;	Table Read Protection Block 3
  2918                           ;	EBTR3 = 0x1, unprogrammed default
  2919                           ;	Table Read Protection Block 4
  2920                           ;	EBTR4 = 0x1, unprogrammed default
  2921                           ;	Table Read Protection Block 5
  2922                           ;	EBTR5 = 0x1, unprogrammed default
  2923                           ;	Table Read Protection Block 6
  2924                           ;	EBTR6 = 0x1, unprogrammed default
  2925                           ;	Table Read Protection Block 7
  2926                           ;	EBTR7 = 0x1, unprogrammed default
  2927   30000A                     	org	3145738
  2928   30000A  FF                 	db	255
  2929                           
  2930                           ;Config register CONFIG6H @ 0x30000B
  2931                           ;	unspecified, using default values
  2932                           ;	Boot Block Table Read Protection bit
  2933                           ;	EBTRB = 0x1, unprogrammed default
  2934   30000B                     	org	3145739
  2935   30000B  FF                 	db	255
  2936                           tosu	equ	0xFFF
  2937                           tosh	equ	0xFFE
  2938                           tosl	equ	0xFFD
  2939                           stkptr	equ	0xFFC
  2940                           pclatu	equ	0xFFB
  2941                           pclath	equ	0xFFA
  2942                           pcl	equ	0xFF9
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           prodh	equ	0xFF4
  2948                           prodl	equ	0xFF3
  2949                           indf0	equ	0xFEF
  2950                           postinc0	equ	0xFEE
  2951                           postdec0	equ	0xFED
  2952                           preinc0	equ	0xFEC
  2953                           plusw0	equ	0xFEB
  2954                           fsr0h	equ	0xFEA
  2955                           fsr0l	equ	0xFE9
  2956                           wreg	equ	0xFE8
  2957                           indf1	equ	0xFE7
  2958                           postinc1	equ	0xFE6
  2959                           postdec1	equ	0xFE5
  2960                           preinc1	equ	0xFE4
  2961                           plusw1	equ	0xFE3
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           bsr	equ	0xFE0
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           preinc2	equ	0xFDC
  2969                           plusw2	equ	0xFDB
  2970                           fsr2h	equ	0xFDA
  2971                           fsr2l	equ	0xFD9
  2972                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      64
    BANK0           160     61     139
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    normalise_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    normalise_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    normalise_readings@expected_values	PTR unsigned int [3] size(2) Largest target is 18
		 -> main@expected_values(BANK0[18]), 

    normalise_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    normalise_readings@normalised_values	PTR unsigned int [3] size(2) Largest target is 18
		 -> main@normalised_values(BANK0[18]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK0[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    S532DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S532DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_normalise_readings
    _setMotorPWM->___lwdiv
    _normalise_readings->___lwdiv
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                88    88      0    8586
                                              0 BANK0     61    61      0
                  _I2C_2_Master_Init
                        _LEDSon_init
               _collect_avg_readings
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                 _normalise_readings
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    2883
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _normalise_readings                                  27    17     10    2376
                                             13 COMRAM    27    17     10
                            ___lwdiv
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     294
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                11     5      6    2163
                                             13 COMRAM    11     5      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1260
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _collect_avg_readings
     ___lwdiv
       ___wmul (ARG)
       _abs (ARG)
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _normalise_readings
     ___lwdiv
     _abs
   _setMotorPWM
     ___lwdiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3D      8B       5       86.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      40       1       67.4%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRllhhhl     2D      0       0      46        0.0%
BITBIGSFRllllhl     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      57        0.0%
BITBIGSFRllhhhl     1E      0       0      47        0.0%
BITBIGSFRhhlllh     17      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      48        0.0%
BITBIGSFRllllhl      F      0       0      55        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRllllhl      9      0       0      54        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      56        0.0%
BITBIGSFRllllhh      6      0       0      52        0.0%
BITBIGSFRlllhl       5      0       0      51        0.0%
BITBIGSFRhhllll      5      0       0      37        0.0%
BITBIGSFRlllhh       3      0       0      50        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      58        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 04 22:57:03 2022

                     _color_read_Red F91C                      _color_read_Blue F87C  
                                 l22 F6CC                                   l31 F8CA  
                                 l25 F96A                                   l19 F7BA  
                                 l28 F91A                                   l95 FE2A  
                                 l88 FA66                  ___wmul@multiplicand 0003  
                   _color_read_Green F8CC                                  l300 FFFE  
                                l151 F786                                  l160 F684  
                                l154 F736                                  l163 F67A  
                                l227 FB10                                  l172 F87A  
                                l228 FB0E                                  l157 F75C  
                                l229 FB1E                                  l166 F68E  
                                l256 F70E                                  l169 F69A  
                                l418 F734                                  l365 F6EC  
                                l295 FCBE                                  l916 F9DE  
                                l909 F9D6                                  u410 F814  
                                u411 F810                                  u420 F986  
                                u421 F982                                  u430 F9A4  
                                u431 F9A0                                  u440 F9C0  
                                u408 F866                                  u520 FBB6  
                                u441 F9BC                                  u521 FBB2  
                                u370 F746                                  u530 FC24  
                                u450 FCDC                                  u371 F742  
                                u531 FC20                                  u451 FCD8  
                                u380 F75C                                  u540 FC92  
                                u460 FDA6                                  u381 F758  
                                u541 FC8E                                  u461 FDA2  
                                u390 F864                                  u550 FFFE  
                                u391 F85C                                  u551 FFFA  
                                u637 F79C                                  u581 FAE8  
                                u590 FB1E                                  u647 FB96  
                                u591 FB1A                                  u657 FC04  
                                u667 FC72  normalise_readings@normalised_values 0016  
                                _abs F7FA                                  wreg 000FE8  
                               ?_abs 0001                                 l2020 FA70  
                               l2030 FA86                                 l2022 FA74  
                               l2040 FAA4                                 l2032 FA8A  
                               l2024 FA78                                 l2016 FA68  
                               l2050 FAC0                                 l2042 FAA8  
                               l2034 FA8E                                 l2026 FA7C  
                               l2018 FA6C                                 l2060 FAF0  
                               l2052 FAC6                                 l2044 FAAC  
                               l2036 FA96                                 l2028 FA80  
                               l1093 F830                                 l2070 FB6A  
                               l2062 FAFA                                 l2054 FAD2  
                               l2046 FAB0                                 l2038 FA9E  
                               l1096 F838                                 l2064 FB02  
                               l2056 FADE                                 l2048 FAB8  
                               l2066 FB22                                 l2058 FADE  
                               l1700 F692                                 l2068 FB3E  
                               l1710 F676                                 l1702 F696  
                               l1720 F876                                 l1712 F83C  
                               l1704 F686                                 l1800 F9E0  
                               l1722 F878                                 l1714 F840  
                               l1706 F68A                                 l1730 F76E  
                               l1810 FA42                                 l1802 F9E8  
                               l1716 F848                                 l1708 F672  
                               l1740 F91C                                 l1732 F770  
                               l1820 FA64                                 l1812 FA4C  
                               l1804 FA12                                 l1902 F6EE  
                               l1718 F850                                 l1742 F962  
                               l1734 F772                                 l1726 F75E  
                               l1814 FA4E                                 l1806 FA36  
                               l1910 F6DC                                 l1830 FD48  
                               l1822 FCC0                                 l1752 F87C  
                               l1736 F774                                 l1728 F768  
                               l1816 FA58                                 l1808 FA40  
                               l1912 F6E6                                 l1904 F6CE  
                               l1760 F814                                 l1832 FD8A  
                               l1824 FCDC                                 l1770 F974  
                               l1754 F8C2                                 l1746 F8CC  
                               l1930 FBA6                                 l1738 F6B0  
                               l1818 FA5A                                 l1914 F6E8  
                               l1906 F6D8                                 l1762 F710  
                               l1834 FDA6                                 l1826 FD30  
                               l1780 F9AA                                 l1772 F986  
                               l1692 F736                                 l1748 F912  
                               l1940 FBE6                                 l1932 FBB6  
                               l1924 FB78                                 l1916 F6EA  
                               l1908 F6DA                                 l1764 F72C  
                               l1836 FDEA                                 l1828 FD44  
                               l1782 F9C0                                 l1774 F98E  
                               l1694 F746                                 l1950 FC50  
                               l1942 FBFA                                 l1934 FBE2  
                               l1926 FB8C                                 l1918 FB74  
                               l1790 F788                                 l1758 F7FA  
                               l1784 F9C8                                 l1776 F996  
                               l1768 F96C                                 l1696 F67C  
                               l1960 FC80                                 l1944 FC12  
                               l1928 FBA4                                 l1792 F78C  
                               l1786 F9CA                                 l1778 F9A4  
                               l1698 F680                                 l1962 FC82  
                               l1946 FC14                                 l1794 F796  
                               l1788 F9D0                                 l1964 FC92  
                               l1956 FC54                                 l1948 FC24  
                               l1796 F7A6                                 l1980 FFEE  
                               l1972 FE30                                 l1958 FC68  
                               l1798 F7B0                                 l1974 FE8C  
                               l1966 FE2C                                 l1976 FF3C  
                               l1978 FFEC                         ?_LEDSon_init 0001  
                       _BAUD4CONbits 000EE9                                 _T2PR 000FBC  
         normalise_readings@red_read 000E                                 abs@a 0001  
                               _main FA68                                 fsr2h 000FDA  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 prodh 000FF4  
                               prodl 000FF3                                 start 0000  
             __end_of_color_read_Red F96C          normalise_readings@blue_read 0012  
                       ___param_bank 000000                                ??_abs 0003  
                              ?_main 0001                      __end_of___lwdiv F9E0  
                       main@red_read 0085           __end_of_I2C_2_Master_Start F686  
         __end_of_I2C_2_Master_Write F69C                  normalise_readings@i 0028  
                              tablat 000FF5                                plusw1 000FE3  
                              plusw2 000FDB                                status 000FD8  
            __end_of_color_read_Blue F8CC                _I2C_2_Master_RepStart F672  
                    ?_color_read_Red 0005                      __initialization F7BC  
                       __end_of_main FB74                               ??_main 0029  
                      __activetblptr 000003                        main@blue_read 0089  
                       ?_setMotorPWM 000E                               _CCPR1H 000FAA  
                             _CCPR2H 000FA6                               _CCPR3H 000F25  
                             _CCPR4H 000F21         collect_avg_readings@red_read 000E  
                             _RC0PPS 000E62                               _RC4REG 000EE3  
                             _RE2PPS 000E74                               _RD5PPS 000E6F  
                             _RC7PPS 000E69                               _RD6PPS 000E70  
                             _RE4PPS 000E76                               _RG6PPS 000E88  
           __end_of_color_click_init F7BC                               _RX4PPS 000E15  
                             _TX4REG 000EE4                         _CCPTMRS0bits 000FAD  
                             ___wmul F710                   _normalise_readings FE2C  
                          ??___lwdiv 000B                               clear_0 F7E2  
                             clear_1 F7EE                               isa$std 000001  
                ?_normalise_readings 000E                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                  ??_initDCmotorsPWM 0001                           __accesstop 0060  
            __end_of__initialization F7F4             __end_of_color_read_Green F91C  
             ?_I2C_2_Master_RepStart 0001                 ??_normalise_readings 0018  
                      ___rparam_used 000001                     ?_color_read_Blue 0005  
       __end_of_collect_avg_readings FCC0                       __pcstackCOMRAM 0001  
                       __pidataBANK0 F69C           collect_avg_readings@i_1526 0017  
         collect_avg_readings@i_1528 0018                main@normalised_values 0060  
                         __pbssBANK0 009D                    _color_writetoaddr F6AE  
                       _T2CLKCONbits 000FBF                   ?_color_writetoaddr 0003  
                            ?___wmul 0001                  ??_color_writetoaddr 0004  
                     main@green_read 0087                              _SP4BRGH 000EE6  
                            _SP4BRGL 000EE5                              _SSP2ADD 000ED6  
                            _SSP2BUF 000ED5               color_writetoaddr@value 0003  
                   ??_color_read_Red 0007            __end_of_color_writetoaddr F6CE  
                 _I2C_2_Master_Start F67C                           _initUSART4 F6CE  
                 _I2C_2_Master_Write F690                              __Hparam 0000  
                            __Lparam 0000                    color_read_Red@tmp 000A  
                ?_I2C_2_Master_Start 0001                              ___lwdiv F96C  
                ?_I2C_2_Master_Write 0001                              __pcinit F7BC  
                            __ramtop 0E00                              __ptext0 FA68  
                            __ptext1 FCC0                              __ptext2 F710  
                            __ptext3 FE2C                              __ptext4 F7FA  
                            __ptext5 F6CE                              __ptext6 F9E0  
                            __ptext7 F788                              __ptext8 F6AE  
                            __ptext9 F75E                            _T2CONbits 000FBD  
                          _T2HLTbits 000FBE                        _RxBufWriteCnt 0040  
               _collect_avg_readings FB74                 ??_I2C_2_Master_Start 0002  
               ??_I2C_2_Master_Write 0002                 end_of_initialization F7F4  
     collect_avg_readings@green_read 0010                    ?_color_click_init 0001  
                 ??_color_click_init 0005                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           main@F14641 00D9  
                    _initDCmotorsPWM F9E0                            _PORTFbits 000F8E  
                 setMotorPWM@negDuty 0013    normalise_readings@expected_values 0014  
                          _TRISAbits 000F81                   setMotorPWM@posDuty 0012  
                          _TRISCbits 000F83                            _TRISDbits 000F84  
                          _TRISEbits 000F85                            _TRISFbits 000F86  
                          _TRISGbits 000F87                            _TRISHbits 000F88  
              ?_collect_avg_readings 000E                  main@expected_values 0072  
           color_writetoaddr@address 0004              ??_I2C_2_Master_RepStart 0002  
                        _CCP1CONbits 000FAB                         _EUSART4RXbuf 0029  
                       _EUSART4TXbuf 009D                          _CCP2CONbits 000FA7  
                  ?_color_read_Green 0005                          _CCP3CONbits 000F26  
                        ?_initUSART4 0001                          _CCP4CONbits 000F22  
                         main@motorL 008B                           main@motorR 0094  
                 ??_color_read_Green 0007                       __end_of___wmul F736  
                start_initialization F7BC                          __end_of_abs F83A  
                      _TxBufWriteCnt 003E                        ??_LEDSon_init 0001  
                color_read_Green@tmp 000A              __end_of_initDCmotorsPWM FA68  
                           ??___wmul 0005                          __pdataBANK0 00D9  
                        __pbssCOMRAM 0029               ??_collect_avg_readings 0014  
                      __pcstackBANK0 0060                  __end_of_LEDSon_init F710  
                   ___lwdiv@dividend 0007                             ?___lwdiv 0007  
               I2C_2_Master_Read@ack 0003                 I2C_2_Master_Read@tmp 0004  
                  _I2C_2_Master_Idle F736                    _I2C_2_Master_Init F75E  
                  _I2C_2_Master_Read F83A                    _I2C_2_Master_Stop F686  
                       _RxBufReadCnt 003F                   ?_I2C_2_Master_Idle 0001  
                 ?_I2C_2_Master_Init 0001                   ?_I2C_2_Master_Read 0001  
                      ??_setMotorPWM 0010                   ?_I2C_2_Master_Stop 0001  
                   ___lwdiv@quotient 000B                  ??_I2C_2_Master_Idle 0001  
                ??_I2C_2_Master_Init 0001                  ??_I2C_2_Master_Read 0002  
                     ___wmul@product 0005                             _LATAbits 000F79  
                ??_I2C_2_Master_Stop 0002                             _LATDbits 000F7C  
                           _LATFbits 000F7E                             _LATGbits 000F7F  
                           _LATHbits 000F80                             _PIE4bits 000E2D  
                           _PIR4bits 000E37                     ?_initDCmotorsPWM 0001  
                           _SSP2CON2 000EDA                             _SSP2STAT 000ED8  
          __end_of_I2C_2_Master_Idle F75E            __end_of_I2C_2_Master_Init F788  
          __end_of_I2C_2_Master_Read F87C                    ___wmul@multiplier 0001  
          __end_of_I2C_2_Master_Stop F690                         setMotorPWM@m 000E  
        I2C_2_Master_Write@data_byte 0002         normalise_readings@green_read 0010  
                  ??_color_read_Blue 0007                         _TxBufReadCnt 003D  
                          copy_data0 F7D0                          _LEDSon_init F6EE  
      __end_of_I2C_2_Master_RepStart F67C                   color_read_Blue@tmp 000A  
                __end_of_setMotorPWM FE2C                         ??_initUSART4 0001  
                           __Hrparam 0000                             __Lrparam 0000  
                         _ANSELDbits 000EA7                      ___lwdiv@divisor 0009  
                 __end_of_initUSART4 F6EE                      ___lwdiv@counter 000D  
                           __ptext10 FB74                             __ptext11 F91C  
                           __ptext20 F96C                             __ptext12 F8CC  
                           __ptext21 F6EE                             __ptext13 F87C  
                           __ptext14 F690                             __ptext15 F686  
                           __ptext16 F67C                             __ptext17 F672  
                           __ptext18 F83A                             __ptext19 F736  
                       _SSP2CON1bits 000ED9                         _SSP2CON2bits 000EDA  
                           isa$xinst 000000                           _RC4STAbits 000EE7  
              collect_avg_readings@i 0016                          _setMotorPWM FCC0  
      collect_avg_readings@blue_read 0012           __end_of_normalise_readings 0000  
                   _color_click_init F788                           _SSP2DATPPS 000E1D  
                         _SSP2CLKPPS 000E1C                           _TX4STAbits 000EE8  
                       main@PWMcycle 0084  
