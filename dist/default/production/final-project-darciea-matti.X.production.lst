

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 23:39:18 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    68   000000                     
    69                           ; Version 2.35
    70                           ; Generated 05/05/2021 GMT
    71                           ; 
    72                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F67K40 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     _TX4REG	set	3812
   105   000000                     _RC4STAbits	set	3815
   106   000000                     _SP4BRGH	set	3814
   107   000000                     _LATGbits	set	3967
   108   000000                     _TRISFbits	set	3974
   109   000000                     _TRISDbits	set	3972
   110   000000                     _TRISGbits	set	3975
   111   000000                     _SSP2CON2bits	set	3802
   112   000000                     _RX4PPS	set	3605
   113   000000                     _SSP2CLKPPS	set	3612
   114   000000                     _SSP2DATPPS	set	3613
   115   000000                     _RC7PPS	set	3689
   116   000000                     _RE2PPS	set	3700
   117   000000                     _TRISCbits	set	3971
   118   000000                     _TRISEbits	set	3973
   119   000000                     _TRISHbits	set	3976
   120   000000                     _PORTFbits	set	3982
   121   000000                     _T2PR	set	4028
   122   000000                     _T2CONbits	set	4029
   123   000000                     _CCPR2H	set	4006
   124   000000                     _CCPR1H	set	4010
   125   000000                     _RE4PPS	set	3702
   126   000000                     _RG6PPS	set	3720
   127   000000                     _RD5PPS	set	3695
   128   000000                     _ANSELDbits	set	3751
   129   000000                     _SSP2ADD	set	3798
   130   000000                     _SSP2CON1bits	set	3801
   131   000000                     _CCPR4H	set	3873
   132   000000                     _CCPR3H	set	3877
   133   000000                     _TMR0L	set	4051
   134   000000                     _TMR0H	set	4052
   135   000000                     _T0CON0bits	set	4053
   136   000000                     _T0CON1bits	set	4054
   137   000000                     _T2CLKCONbits	set	4031
   138   000000                     _T2HLTbits	set	4030
   139   000000                     _CCP1CONbits	set	4011
   140   000000                     _CCPTMRS0bits	set	4013
   141   000000                     _CCP2CONbits	set	4007
   142   000000                     _LATAbits	set	3961
   143   000000                     _LATDbits	set	3964
   144   000000                     _CCP3CONbits	set	3878
   145   000000                     _CCP4CONbits	set	3874
   146   000000                     _RC4REG	set	3811
   147   000000                     _SP4BRGL	set	3813
   148   000000                     _TX4STAbits	set	3816
   149   000000                     _BAUD4CONbits	set	3817
   150   000000                     _SSP2CON2	set	3802
   151   000000                     _SSP2STAT	set	3800
   152   000000                     _ANSELFbits	set	3764
   153   000000                     _SSP2BUF	set	3797
   154   000000                     _IPR0bits	set	3615
   155   000000                     _PIE4bits	set	3629
   156   000000                     _PIR4bits	set	3639
   157   000000                     _RC0PPS	set	3682
   158   000000                     _TMR0IE	set	29005
   159   000000                     _RD6PPS	set	3696
   160   000000                     _LATFbits	set	3966
   161   000000                     _LATHbits	set	3968
   162   000000                     _TRISAbits	set	3969
   163   000000                     _TMR0IF	set	29085
   164   000000                     _INTCONbits	set	4082
   165                           
   166                           	psect	smallconst
   167   000E00                     __psmallconst:
   168                           	callstack 0
   169   000E00  00                 	db	0
   170   000E01                     STR_1:
   171                           
   172                           ; BSR set to: 14
   173   000E01  0A                 	db	10
   174   000E02  20                 	db	32
   175   000E03  45                 	db	69	;'E'
   176   000E04  58                 	db	88	;'X'
   177   000E05  50                 	db	80	;'P'
   178   000E06  45                 	db	69	;'E'
   179   000E07  43                 	db	67	;'C'
   180   000E08  54                 	db	84	;'T'
   181   000E09  45                 	db	69	;'E'
   182   000E0A  44                 	db	68	;'D'
   183   000E0B  3A                 	db	58	;':'
   184   000E0C  20                 	db	32
   185   000E0D  43                 	db	67	;'C'
   186   000E0E  6C                 	db	108	;'l'
   187   000E0F  65                 	db	101	;'e'
   188   000E10  61                 	db	97	;'a'
   189   000E11  72                 	db	114	;'r'
   190   000E12  20                 	db	32
   191   000E13  25                 	db	37
   192   000E14  64                 	db	100	;'d'
   193   000E15  2C                 	db	44
   194   000E16  52                 	db	82	;'R'
   195   000E17  20                 	db	32
   196   000E18  25                 	db	37
   197   000E19  64                 	db	100	;'d'
   198   000E1A  2C                 	db	44
   199   000E1B  20                 	db	32
   200   000E1C  47                 	db	71	;'G'
   201   000E1D  20                 	db	32
   202   000E1E  25                 	db	37
   203   000E1F  64                 	db	100	;'d'
   204   000E20  2C                 	db	44
   205   000E21  20                 	db	32
   206   000E22  42                 	db	66	;'B'
   207   000E23  20                 	db	32
   208   000E24  25                 	db	37
   209   000E25  64                 	db	100	;'d'
   210   000E26  20                 	db	32
   211   000E27  20                 	db	32
   212   000E28  43                 	db	67	;'C'
   213   000E29  41                 	db	65	;'A'
   214   000E2A  52                 	db	82	;'R'
   215   000E2B  44                 	db	68	;'D'
   216   000E2C  3A                 	db	58	;':'
   217   000E2D  20                 	db	32
   218   000E2E  25                 	db	37
   219   000E2F  64                 	db	100	;'d'
   220   000E30  20                 	db	32
   221   000E31  0A                 	db	10
   222   000E32  00                 	db	0
   223   000E33                     STR_10:
   224                           
   225                           ; BSR set to: 14
   226   000E33  0A                 	db	10
   227   000E34  20                 	db	32
   228   000E35  41                 	db	65	;'A'
   229   000E36  56                 	db	86	;'V'
   230   000E37  47                 	db	71	;'G'
   231   000E38  3A                 	db	58	;':'
   232   000E39  20                 	db	32
   233   000E3A  43                 	db	67	;'C'
   234   000E3B  6C                 	db	108	;'l'
   235   000E3C  65                 	db	101	;'e'
   236   000E3D  61                 	db	97	;'a'
   237   000E3E  72                 	db	114	;'r'
   238   000E3F  20                 	db	32
   239   000E40  25                 	db	37
   240   000E41  64                 	db	100	;'d'
   241   000E42  2C                 	db	44
   242   000E43  20                 	db	32
   243   000E44  52                 	db	82	;'R'
   244   000E45  20                 	db	32
   245   000E46  25                 	db	37
   246   000E47  64                 	db	100	;'d'
   247   000E48  2C                 	db	44
   248   000E49  20                 	db	32
   249   000E4A  47                 	db	71	;'G'
   250   000E4B  20                 	db	32
   251   000E4C  25                 	db	37
   252   000E4D  64                 	db	100	;'d'
   253   000E4E  2C                 	db	44
   254   000E4F  20                 	db	32
   255   000E50  42                 	db	66	;'B'
   256   000E51  20                 	db	32
   257   000E52  25                 	db	37
   258   000E53  64                 	db	100	;'d'
   259   000E54  20                 	db	32
   260   000E55  0A                 	db	10
   261   000E56  00                 	db	0
   262   000E57                     STR_5:
   263                           
   264                           ; BSR set to: 14
   265   000E57  54                 	db	84	;'T'
   266   000E58  69                 	db	105	;'i'
   267   000E59  6D                 	db	109	;'m'
   268   000E5A  65                 	db	101	;'e'
   269   000E5B  72                 	db	114	;'r'
   270   000E5C  63                 	db	99	;'c'
   271   000E5D  6F                 	db	111	;'o'
   272   000E5E  75                 	db	117	;'u'
   273   000E5F  6E                 	db	110	;'n'
   274   000E60  74                 	db	116	;'t'
   275   000E61  20                 	db	32
   276   000E62  61                 	db	97	;'a'
   277   000E63  72                 	db	114	;'r'
   278   000E64  72                 	db	114	;'r'
   279   000E65  61                 	db	97	;'a'
   280   000E66  79                 	db	121	;'y'
   281   000E67  20                 	db	32
   282   000E68  72                 	db	114	;'r'
   283   000E69  65                 	db	101	;'e'
   284   000E6A  61                 	db	97	;'a'
   285   000E6B  64                 	db	100	;'d'
   286   000E6C  69                 	db	105	;'i'
   287   000E6D  6E                 	db	110	;'n'
   288   000E6E  67                 	db	103	;'g'
   289   000E6F  20                 	db	32
   290   000E70  25                 	db	37
   291   000E71  64                 	db	100	;'d'
   292   000E72  20                 	db	32
   293   000E73  0A                 	db	10
   294   000E74  00                 	db	0
   295   000E75                     STR_9:
   296                           
   297                           ; BSR set to: 14
   298   000E75  43                 	db	67	;'C'
   299   000E76  61                 	db	97	;'a'
   300   000E77  72                 	db	114	;'r'
   301   000E78  64                 	db	100	;'d'
   302   000E79  20                 	db	32
   303   000E7A  67                 	db	103	;'g'
   304   000E7B  6F                 	db	111	;'o'
   305   000E7C  6E                 	db	110	;'n'
   306   000E7D  6E                 	db	110	;'n'
   307   000E7E  61                 	db	97	;'a'
   308   000E7F  20                 	db	32
   309   000E80  72                 	db	114	;'r'
   310   000E81  65                 	db	101	;'e'
   311   000E82  73                 	db	115	;'s'
   312   000E83  70                 	db	112	;'p'
   313   000E84  6F                 	db	111	;'o'
   314   000E85  6E                 	db	110	;'n'
   315   000E86  64                 	db	100	;'d'
   316   000E87  20                 	db	32
   317   000E88  74                 	db	116	;'t'
   318   000E89  6F                 	db	111	;'o'
   319   000E8A  20                 	db	32
   320   000E8B  25                 	db	37
   321   000E8C  64                 	db	100	;'d'
   322   000E8D  20                 	db	32
   323   000E8E  0A                 	db	10
   324   000E8F  00                 	db	0
   325   000E90                     STR_8:
   326                           
   327                           ; BSR set to: 14
   328   000E90  54                 	db	84	;'T'
   329   000E91  69                 	db	105	;'i'
   330   000E92  6D                 	db	109	;'m'
   331   000E93  65                 	db	101	;'e'
   332   000E94  20                 	db	32
   333   000E95  67                 	db	103	;'g'
   334   000E96  6F                 	db	111	;'o'
   335   000E97  6E                 	db	110	;'n'
   336   000E98  6E                 	db	110	;'n'
   337   000E99  61                 	db	97	;'a'
   338   000E9A  20                 	db	32
   339   000E9B  6D                 	db	109	;'m'
   340   000E9C  6F                 	db	111	;'o'
   341   000E9D  76                 	db	118	;'v'
   342   000E9E  65                 	db	101	;'e'
   343   000E9F  20                 	db	32
   344   000EA0  66                 	db	102	;'f'
   345   000EA1  6F                 	db	111	;'o'
   346   000EA2  72                 	db	114	;'r'
   347   000EA3  20                 	db	32
   348   000EA4  25                 	db	37
   349   000EA5  64                 	db	100	;'d'
   350   000EA6  20                 	db	32
   351   000EA7  0A                 	db	10
   352   000EA8  00                 	db	0
   353   000EA9                     STR_2:
   354                           
   355                           ; BSR set to: 14
   356   000EA9  0A                 	db	10
   357   000EAA  20                 	db	32
   358   000EAB  45                 	db	69	;'E'
   359   000EAC  78                 	db	120	;'x'
   360   000EAD  70                 	db	112	;'p'
   361   000EAE  65                 	db	101	;'e'
   362   000EAF  63                 	db	99	;'c'
   363   000EB0  74                 	db	116	;'t'
   364   000EB1  65                 	db	101	;'e'
   365   000EB2  64                 	db	100	;'d'
   366   000EB3  20                 	db	32
   367   000EB4  63                 	db	99	;'c'
   368   000EB5  6C                 	db	108	;'l'
   369   000EB6  65                 	db	101	;'e'
   370   000EB7  61                 	db	97	;'a'
   371   000EB8  72                 	db	114	;'r'
   372   000EB9  3A                 	db	58	;':'
   373   000EBA  20                 	db	32
   374   000EBB  25                 	db	37
   375   000EBC  64                 	db	100	;'d'
   376   000EBD  20                 	db	32
   377   000EBE  0A                 	db	10
   378   000EBF  00                 	db	0
   379   000EC0                     STR_4:
   380                           
   381                           ; BSR set to: 14
   382   000EC0  54                 	db	84	;'T'
   383   000EC1  69                 	db	105	;'i'
   384   000EC2  6D                 	db	109	;'m'
   385   000EC3  65                 	db	101	;'e'
   386   000EC4  72                 	db	114	;'r'
   387   000EC5  63                 	db	99	;'c'
   388   000EC6  6F                 	db	111	;'o'
   389   000EC7  75                 	db	117	;'u'
   390   000EC8  6E                 	db	110	;'n'
   391   000EC9  74                 	db	116	;'t'
   392   000ECA  20                 	db	32
   393   000ECB  76                 	db	118	;'v'
   394   000ECC  61                 	db	97	;'a'
   395   000ECD  6C                 	db	108	;'l'
   396   000ECE  75                 	db	117	;'u'
   397   000ECF  65                 	db	101	;'e'
   398   000ED0  20                 	db	32
   399   000ED1  25                 	db	37
   400   000ED2  64                 	db	100	;'d'
   401   000ED3  20                 	db	32
   402   000ED4  0A                 	db	10
   403   000ED5  00                 	db	0
   404   000ED6                     STR_3:
   405                           
   406                           ; BSR set to: 14
   407   000ED6  43                 	db	67	;'C'
   408   000ED7  61                 	db	97	;'a'
   409   000ED8  72                 	db	114	;'r'
   410   000ED9  64                 	db	100	;'d'
   411   000EDA  63                 	db	99	;'c'
   412   000EDB  6F                 	db	111	;'o'
   413   000EDC  75                 	db	117	;'u'
   414   000EDD  6E                 	db	110	;'n'
   415   000EDE  74                 	db	116	;'t'
   416   000EDF  20                 	db	32
   417   000EE0  25                 	db	37
   418   000EE1  64                 	db	100	;'d'
   419   000EE2  20                 	db	32
   420   000EE3  0A                 	db	10
   421   000EE4  00                 	db	0
   422   000EE5                     STR_11:
   423                           
   424                           ; BSR set to: 14
   425   000EE5  43                 	db	67	;'C'
   426   000EE6  41                 	db	65	;'A'
   427   000EE7  52                 	db	82	;'R'
   428   000EE8  44                 	db	68	;'D'
   429   000EE9  20                 	db	32
   430   000EEA  25                 	db	37
   431   000EEB  64                 	db	100	;'d'
   432   000EEC  20                 	db	32
   433   000EED  0A                 	db	10
   434   000EEE  00                 	db	0
   435   000EEF                     STR_6:
   436                           
   437                           ; BSR set to: 14
   438   000EEF  43                 	db	67	;'C'
   439   000EF0  61                 	db	97	;'a'
   440   000EF1  72                 	db	114	;'r'
   441   000EF2  64                 	db	100	;'d'
   442   000EF3  20                 	db	32
   443   000EF4  25                 	db	37
   444   000EF5  64                 	db	100	;'d'
   445   000EF6  20                 	db	32
   446   000EF7  0A                 	db	10
   447   000EF8  00                 	db	0
   448   000EF9  00                 	db	0	; dummy byte at the end
   449   000000                     
   450                           ; #config settings
   451                           
   452                           	psect	cinit
   453   0038D0                     __pcinit:
   454                           	callstack 0
   455   0038D0                     start_initialization:
   456                           	callstack 0
   457   0038D0                     __initialization:
   458                           	callstack 0
   459                           
   460                           ; Clear objects allocated to BANK3 (92 bytes)
   461   0038D0  EE03  F000         	lfsr	0,__pbssBANK3
   462   0038D4  0E5C               	movlw	92
   463   0038D6                     clear_0:
   464   0038D6  6AEE               	clrf	postinc0,c
   465   0038D8  06E8               	decf	wreg,f,c
   466   0038DA  E1FD               	bnz	clear_0
   467                           
   468                           ; Clear objects allocated to BANK0 (32 bytes)
   469   0038DC  EE00  F0CF         	lfsr	0,__pbssBANK0
   470   0038E0  0E20               	movlw	32
   471   0038E2                     clear_1:
   472   0038E2  6AEE               	clrf	postinc0,c
   473   0038E4  06E8               	decf	wreg,f,c
   474   0038E6  E1FD               	bnz	clear_1
   475                           
   476                           ; Clear objects allocated to COMRAM (3 bytes)
   477   0038E8  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   478   0038EA  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   479   0038EC  6A58               	clrf	__pbssCOMRAM& (0+255),c
   480   0038EE                     end_of_initialization:
   481                           	callstack 0
   482   0038EE                     __end_of__initialization:
   483                           	callstack 0
   484   0038EE  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   485   0038F0  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   486   0038F2  0100               	movlb	0
   487   0038F4  EF71  F00A         	goto	_main	;jump to C main() function
   488                           
   489                           	psect	bssCOMRAM
   490   000058                     __pbssCOMRAM:
   491                           	callstack 0
   492   000058                     _TxBufReadCnt:
   493                           	callstack 0
   494   000058                     	ds	1
   495   000059                     _TxBufWriteCnt:
   496                           	callstack 0
   497   000059                     	ds	1
   498   00005A                     _RxBufWriteCnt:
   499                           	callstack 0
   500   00005A                     	ds	1
   501                           
   502                           	psect	bssBANK0
   503   0000CF                     __pbssBANK0:
   504                           	callstack 0
   505   0000CF                     _EUSART4RXbuf:
   506                           	callstack 0
   507   0000CF                     	ds	20
   508   0000E3                     _width:
   509                           	callstack 0
   510   0000E3                     	ds	2
   511   0000E5                     _prec:
   512                           	callstack 0
   513   0000E5                     	ds	2
   514   0000E7                     _card_detected:
   515                           	callstack 0
   516   0000E7                     	ds	2
   517   0000E9                     _response_in_progress:
   518                           	callstack 0
   519   0000E9                     	ds	2
   520   0000EB                     _TimerFlag:
   521                           	callstack 0
   522   0000EB                     	ds	2
   523   0000ED                     _flags:
   524                           	callstack 0
   525   0000ED                     	ds	1
   526   0000EE                     _RxBufReadCnt:
   527                           	callstack 0
   528   0000EE                     	ds	1
   529                           
   530                           	psect	bssBANK3
   531   000300                     __pbssBANK3:
   532                           	callstack 0
   533   000300                     _EUSART4TXbuf:
   534                           	callstack 0
   535   000300                     	ds	60
   536   00033C                     _dbuf:
   537                           	callstack 0
   538   00033C                     	ds	32
   539                           
   540                           	psect	cstackBANK2
   541   000200                     __pcstackBANK2:
   542                           	callstack 0
   543   000200                     main@buf:
   544                           	callstack 0
   545                           
   546                           ; 150 bytes @ 0x0
   547   000200                     	ds	150
   548   000296                     main@ReturnHomeArray:
   549                           	callstack 0
   550                           
   551                           ; 60 bytes @ 0x96
   552   000296                     	ds	60
   553   0002D2                     main@motorL:
   554                           	callstack 0
   555                           
   556                           ; 9 bytes @ 0xD2
   557   0002D2                     	ds	9
   558   0002DB                     main@motorR:
   559                           	callstack 0
   560                           
   561                           ; 9 bytes @ 0xDB
   562   0002DB                     	ds	9
   563                           
   564                           	psect	cstackBANK1
   565   000100                     __pcstackBANK1:
   566                           	callstack 0
   567   000100                     card_response@buf:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x0
   571   000100                     	ds	2
   572   000102                     card_response@clear_read:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x2
   576   000102                     	ds	2
   577   000104                     card_response@red_read:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x4
   581   000104                     	ds	2
   582   000106                     card_response@green_read:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x6
   586   000106                     	ds	2
   587   000108                     card_response@blue_read:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x8
   591   000108                     	ds	2
   592   00010A                     card_response@expected_values:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0xA
   596   00010A                     	ds	2
   597   00010C                     card_response@card:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0xC
   601   00010C                     	ds	1
   602   00010D                     card_response@mL:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0xD
   606   00010D                     	ds	2
   607   00010F                     card_response@mR:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0xF
   611   00010F                     	ds	2
   612   000111                     card_response@ReturnHomeArray:
   613                           	callstack 0
   614                           
   615                           ; 60 bytes @ 0x11
   616   000111                     	ds	60
   617   00014D                     card_response@normalised_values:
   618                           	callstack 0
   619                           
   620                           ; 72 bytes @ 0x4D
   621   00014D                     	ds	72
   622   000195                     card_response@master_closeness:
   623                           	callstack 0
   624                           
   625                           ; 18 bytes @ 0x95
   626   000195                     	ds	18
   627   0001A7                     main@expected_values:
   628                           	callstack 0
   629                           
   630                           ; 72 bytes @ 0xA7
   631   0001A7                     	ds	72
   632   0001EF                     main@TimerCount:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0xEF
   636   0001EF                     	ds	2
   637   0001F1                     main@CardCount:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0xF1
   641   0001F1                     	ds	2
   642   0001F3                     main@red_read:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0xF3
   646   0001F3                     	ds	2
   647   0001F5                     main@green_read:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0xF5
   651   0001F5                     	ds	2
   652   0001F7                     main@blue_read:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0xF7
   656   0001F7                     	ds	2
   657   0001F9                     main@clear_read:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0xF9
   661   0001F9                     	ds	2
   662                           
   663                           	psect	cstackBANK0
   664   000060                     __pcstackBANK0:
   665                           	callstack 0
   666   000060                     ?_vfprintf:
   667                           	callstack 0
   668   000060                     vfprintf@fp:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x0
   672   000060                     	ds	2
   673   000062                     vfprintf@fmt:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x2
   677   000062                     	ds	2
   678   000064                     vfprintf@ap:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0x4
   682   000064                     	ds	2
   683   000066                     ?_sprintf:
   684                           	callstack 0
   685   000066                     sprintf@s:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x6
   689   000066                     	ds	2
   690   000068                     sprintf@fmt:
   691                           	callstack 0
   692                           
   693                           ; 2 bytes @ 0x8
   694   000068                     	ds	12
   695   000074                     sprintf@ap:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x14
   699   000074                     	ds	2
   700   000076                     sprintf@f:
   701                           	callstack 0
   702                           
   703                           ; 11 bytes @ 0x16
   704   000076                     	ds	11
   705   000081                     clear_read_calibration@buf:
   706                           	callstack 0
   707   000081                     motor_response@buf:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x21
   711   000081                     	ds	2
   712   000083                     motor_response@card:
   713                           	callstack 0
   714   000083                     clear_read_calibration@clear_read:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x23
   718   000083                     	ds	1
   719   000084                     motor_response@mL:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x24
   723   000084                     	ds	1
   724   000085                     clear_read_calibration@clear_read_check:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x25
   728   000085                     	ds	1
   729   000086                     motor_response@mR:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x26
   733   000086                     	ds	1
   734   000087                     ??_clear_read_calibration:
   735                           
   736                           ; 1 bytes @ 0x27
   737   000087                     	ds	1
   738   000088                     motor_response@ReturnHomeArray:
   739                           	callstack 0
   740                           
   741                           ; 60 bytes @ 0x28
   742   000088                     	ds	3
   743   00008B                     clear_read_calibration@i:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x2B
   747   00008B                     	ds	2
   748   00008D                     clear_read_calibration@i_1645:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x2D
   752   00008D                     	ds	55
   753   0000C4                     motor_response@j:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x64
   757   0000C4                     	ds	2
   758   0000C6                     motor_response@i:
   759                           	callstack 0
   760                           
   761                           ; 2 bytes @ 0x66
   762   0000C6                     	ds	2
   763   0000C8                     ??_main:
   764                           
   765                           ; 1 bytes @ 0x68
   766   0000C8                     	ds	2
   767   0000CA                     main@PWMcycle:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x6A
   771   0000CA                     	ds	1
   772   0000CB                     main@card:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x6B
   776   0000CB                     	ds	1
   777   0000CC                     main@clear_read_check:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x6C
   781   0000CC                     	ds	2
   782   0000CE                     main@i:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x6E
   786   0000CE                     	ds	1
   787                           
   788                           	psect	cstackCOMRAM
   789   000001                     __pcstackCOMRAM:
   790                           	callstack 0
   791   000001                     ??_LowISR:
   792   000001                     
   793                           ; 1 bytes @ 0x0
   794   000001                     	ds	3
   795   000004                     ??_I2C_2_Master_Idle:
   796   000004                     ?___wmul:
   797                           	callstack 0
   798   000004                     ?___lwmod:
   799                           	callstack 0
   800   000004                     ?___aodiv:
   801                           	callstack 0
   802   000004                     ?___aomod:
   803                           	callstack 0
   804   000004                     sendCharSerial4@charToSend:
   805                           	callstack 0
   806   000004                     make_master_closeness@buf:
   807                           	callstack 0
   808   000004                     determine_card@master_closeness:
   809                           	callstack 0
   810   000004                     ___wmul@multiplier:
   811                           	callstack 0
   812   000004                     ___lwmod@dividend:
   813                           	callstack 0
   814   000004                     fputc@c:
   815                           	callstack 0
   816   000004                     ___aodiv@dividend:
   817                           	callstack 0
   818   000004                     ___aomod@dividend:
   819                           	callstack 0
   820                           
   821                           ; 8 bytes @ 0x3
   822   000004                     	ds	1
   823   000005                     ??_I2C_2_Master_Read:
   824   000005                     I2C_2_Master_Write@data_byte:
   825                           	callstack 0
   826   000005                     sendStringSerial4@string:
   827                           	callstack 0
   828                           
   829                           ; 2 bytes @ 0x4
   830   000005                     	ds	1
   831   000006                     ??_determine_card:
   832   000006                     color_writetoaddr@value:
   833                           	callstack 0
   834   000006                     I2C_2_Master_Read@ack:
   835                           	callstack 0
   836   000006                     make_master_closeness@normalised_values:
   837                           	callstack 0
   838   000006                     ___wmul@multiplicand:
   839                           	callstack 0
   840   000006                     ___lwmod@divisor:
   841                           	callstack 0
   842   000006                     fputc@fp:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x5
   846   000006                     	ds	1
   847   000007                     color_writetoaddr@address:
   848                           	callstack 0
   849   000007                     I2C_2_Master_Read@tmp:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x6
   853   000007                     	ds	1
   854   000008                     ??_fputc:
   855   000008                     ??_color_click_init:
   856   000008                     ?_color_read_Red:
   857                           	callstack 0
   858   000008                     ?_color_read_Green:
   859                           	callstack 0
   860   000008                     ?_color_read_Blue:
   861                           	callstack 0
   862   000008                     ?_color_read_Clear:
   863                           	callstack 0
   864   000008                     ___lwmod@counter:
   865                           	callstack 0
   866   000008                     make_master_closeness@master_closeness:
   867                           	callstack 0
   868   000008                     ___wmul@product:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x7
   872   000008                     	ds	2
   873   00000A                     ??_color_read_Red:
   874   00000A                     ??_color_read_Green:
   875   00000A                     ??_color_read_Blue:
   876   00000A                     ??_color_read_Clear:
   877   00000A                     ??_make_master_closeness:
   878   00000A                     ?___lwdiv:
   879                           	callstack 0
   880   00000A                     determine_card@current_smallest:
   881                           	callstack 0
   882   00000A                     ___lwdiv@dividend:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x9
   886   00000A                     	ds	2
   887   00000C                     determine_card@predicted_colour:
   888                           	callstack 0
   889   00000C                     ___lwdiv@divisor:
   890                           	callstack 0
   891   00000C                     ___aodiv@divisor:
   892                           	callstack 0
   893   00000C                     ___aomod@divisor:
   894                           	callstack 0
   895                           
   896                           ; 8 bytes @ 0xB
   897   00000C                     	ds	1
   898   00000D                     determine_card@i:
   899                           	callstack 0
   900   00000D                     color_read_Red@tmp:
   901                           	callstack 0
   902   00000D                     color_read_Green@tmp:
   903                           	callstack 0
   904   00000D                     color_read_Blue@tmp:
   905                           	callstack 0
   906   00000D                     color_read_Clear@tmp:
   907                           	callstack 0
   908   00000D                     fputs@s:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0xC
   912   00000D                     	ds	1
   913   00000E                     ___lwdiv@quotient:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0xD
   917   00000E                     	ds	1
   918   00000F                     collect_avg_readings@clear_read:
   919                           	callstack 0
   920   00000F                     fputs@fp:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0xE
   924   00000F                     	ds	1
   925   000010                     ___lwdiv@counter:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0xF
   929   000010                     	ds	1
   930   000011                     fputs@c:
   931                           	callstack 0
   932   000011                     setMotorPWM@m:
   933                           	callstack 0
   934   000011                     collect_avg_readings@red_read:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x10
   938   000011                     	ds	1
   939   000012                     fputs@i:
   940                           	callstack 0
   941                           
   942                           ; 2 bytes @ 0x11
   943   000012                     	ds	1
   944   000013                     ??_setMotorPWM:
   945   000013                     collect_avg_readings@green_read:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x12
   949   000013                     	ds	1
   950   000014                     ___aodiv@counter:
   951                           	callstack 0
   952   000014                     ___aomod@counter:
   953                           	callstack 0
   954   000014                     pad@fp:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x13
   958   000014                     	ds	1
   959   000015                     setMotorPWM@posDuty:
   960                           	callstack 0
   961   000015                     ___aodiv@sign:
   962                           	callstack 0
   963   000015                     ___aomod@sign:
   964                           	callstack 0
   965   000015                     collect_avg_readings@blue_read:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0x14
   969   000015                     	ds	1
   970   000016                     ?_abs:
   971                           	callstack 0
   972   000016                     setMotorPWM@negDuty:
   973                           	callstack 0
   974   000016                     abs@a:
   975                           	callstack 0
   976   000016                     pad@buf:
   977                           	callstack 0
   978   000016                     ___aodiv@quotient:
   979                           	callstack 0
   980                           
   981                           ; 8 bytes @ 0x15
   982   000016                     	ds	1
   983   000017                     ??_collect_avg_readings:
   984   000017                     stop@mL:
   985                           	callstack 0
   986   000017                     turnLeft45@mL:
   987                           	callstack 0
   988   000017                     turnRight45@mL:
   989                           	callstack 0
   990   000017                     fullSpeedAhead@mL:
   991                           	callstack 0
   992   000017                     reverseFullSpeed@mL:
   993                           	callstack 0
   994                           
   995                           ; 2 bytes @ 0x16
   996   000017                     	ds	1
   997   000018                     ??_abs:
   998   000018                     pad@p:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x17
  1002   000018                     	ds	1
  1003   000019                     stop@mR:
  1004                           	callstack 0
  1005   000019                     turnLeft45@mR:
  1006                           	callstack 0
  1007   000019                     turnRight45@mR:
  1008                           	callstack 0
  1009   000019                     fullSpeedAhead@mR:
  1010                           	callstack 0
  1011   000019                     reverseFullSpeed@mR:
  1012                           	callstack 0
  1013   000019                     collect_avg_readings@i:
  1014                           	callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x18
  1017   000019                     	ds	1
  1018   00001A                     ??_pad:
  1019   00001A                     normalise_readings@buf:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x19
  1023   00001A                     	ds	1
  1024   00001B                     ??_stop:
  1025   00001B                     ??_turnLeft45:
  1026   00001B                     ??_turnRight45:
  1027   00001B                     ??_fullSpeedAhead:
  1028   00001B                     ??_reverseFullSpeed:
  1029   00001B                     collect_avg_readings@i_1656:
  1030                           	callstack 0
  1031   00001B                     pad@i:
  1032                           	callstack 0
  1033                           
  1034                           ; 2 bytes @ 0x1A
  1035   00001B                     	ds	1
  1036   00001C                     fullSpeedAhead@i:
  1037                           	callstack 0
  1038   00001C                     reverseFullSpeed@i:
  1039                           	callstack 0
  1040   00001C                     normalise_readings@clear_read:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x1B
  1044   00001C                     	ds	1
  1045   00001D                     turnLeft45@i:
  1046                           	callstack 0
  1047   00001D                     turnRight45@i:
  1048                           	callstack 0
  1049   00001D                     collect_avg_readings@i_1657:
  1050                           	callstack 0
  1051   00001D                     pad@w:
  1052                           	callstack 0
  1053                           
  1054                           ; 2 bytes @ 0x1C
  1055   00001D                     	ds	1
  1056   00001E                     normalise_readings@red_read:
  1057                           	callstack 0
  1058                           
  1059                           ; 2 bytes @ 0x1D
  1060   00001E                     	ds	1
  1061   00001F                     collect_avg_readings@i_1658:
  1062                           	callstack 0
  1063   00001F                     home_response@mL:
  1064                           	callstack 0
  1065   00001F                     dtoa@fp:
  1066                           	callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x1E
  1069   00001F                     	ds	1
  1070   000020                     normalise_readings@green_read:
  1071                           	callstack 0
  1072                           
  1073                           ; 2 bytes @ 0x1F
  1074   000020                     	ds	1
  1075   000021                     collect_avg_readings@i_1659:
  1076                           	callstack 0
  1077   000021                     home_response@mR:
  1078                           	callstack 0
  1079   000021                     dtoa@d:
  1080                           	callstack 0
  1081                           
  1082                           ; 8 bytes @ 0x20
  1083   000021                     	ds	1
  1084   000022                     normalise_readings@blue_read:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x21
  1088   000022                     	ds	1
  1089   000023                     ??_home_response:
  1090                           
  1091                           ; 1 bytes @ 0x22
  1092   000023                     	ds	1
  1093   000024                     normalise_readings@expected_values:
  1094                           	callstack 0
  1095                           
  1096                           ; 2 bytes @ 0x23
  1097   000024                     	ds	1
  1098   000025                     home_response@card:
  1099                           	callstack 0
  1100                           
  1101                           ; 1 bytes @ 0x24
  1102   000025                     	ds	1
  1103   000026                     normalise_readings@normalised_values:
  1104                           	callstack 0
  1105                           
  1106                           ; 2 bytes @ 0x25
  1107   000026                     	ds	2
  1108   000028                     ??_normalise_readings:
  1109   000028                     make_master_closeness@i:
  1110                           	callstack 0
  1111                           
  1112                           ; 1 bytes @ 0x27
  1113   000028                     	ds	1
  1114   000029                     ??_dtoa:
  1115                           
  1116                           ; 1 bytes @ 0x28
  1117   000029                     	ds	7
  1118   000030                     normalise_readings@difference:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0x2F
  1122   000030                     	ds	1
  1123   000031                     _dtoa$2599:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x30
  1127   000031                     	ds	1
  1128   000032                     normalise_readings@i:
  1129                           	callstack 0
  1130                           
  1131                           ; 1 bytes @ 0x31
  1132   000032                     	ds	1
  1133   000033                     dtoa@p:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x32
  1137   000033                     	ds	2
  1138   000035                     dtoa@w:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x34
  1142   000035                     	ds	2
  1143   000037                     dtoa@n:
  1144                           	callstack 0
  1145                           
  1146                           ; 8 bytes @ 0x36
  1147   000037                     	ds	8
  1148   00003F                     dtoa@i:
  1149                           	callstack 0
  1150                           
  1151                           ; 2 bytes @ 0x3E
  1152   00003F                     	ds	2
  1153   000041                     dtoa@s:
  1154                           	callstack 0
  1155                           
  1156                           ; 1 bytes @ 0x40
  1157   000041                     	ds	1
  1158   000042                     vfpfcnvrt@fp:
  1159                           	callstack 0
  1160                           
  1161                           ; 2 bytes @ 0x41
  1162   000042                     	ds	2
  1163   000044                     vfpfcnvrt@fmt:
  1164                           	callstack 0
  1165                           
  1166                           ; 2 bytes @ 0x43
  1167   000044                     	ds	2
  1168   000046                     vfpfcnvrt@ap:
  1169                           	callstack 0
  1170                           
  1171                           ; 2 bytes @ 0x45
  1172   000046                     	ds	2
  1173   000048                     ??_vfpfcnvrt:
  1174                           
  1175                           ; 1 bytes @ 0x47
  1176   000048                     	ds	2
  1177   00004A                     vfpfcnvrt@convarg:
  1178                           	callstack 0
  1179                           
  1180                           ; 8 bytes @ 0x49
  1181   00004A                     	ds	8
  1182   000052                     vfpfcnvrt@cp:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x51
  1186   000052                     	ds	2
  1187   000054                     vfprintf@cfmt:
  1188                           	callstack 0
  1189                           
  1190                           ; 2 bytes @ 0x53
  1191   000054                     	ds	2
  1192   000056                     ??_motor_response:
  1193                           
  1194                           ; 1 bytes @ 0x55
  1195   000056                     	ds	2
  1196   000058                     
  1197                           ; 1 bytes @ 0x57
  1198 ;;
  1199 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1200 ;;
  1201 ;; *************** function _main *****************
  1202 ;; Defined at:
  1203 ;;		line 21 in file "main.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  i               1  110[BANK0 ] enum E14569
  1208 ;;  buf           150    0[BANK2 ] unsigned char [150]
  1209 ;;  expected_val   72  167[BANK1 ] unsigned int [9][4]
  1210 ;;  ReturnHomeAr   60  150[BANK2 ] struct HomeStored
  1211 ;;  expected_val   40    0        unsigned int [5][4]
  1212 ;;  motorR          9  219[BANK2 ] struct DC_motor
  1213 ;;  motorL          9  210[BANK2 ] struct DC_motor
  1214 ;;  clear_read      2  249[BANK1 ] unsigned int 
  1215 ;;  blue_read       2  247[BANK1 ] unsigned int 
  1216 ;;  green_read      2  245[BANK1 ] unsigned int 
  1217 ;;  red_read        2  243[BANK1 ] unsigned int 
  1218 ;;  CardCount       2  241[BANK1 ] unsigned int 
  1219 ;;  TimerCount      2  239[BANK1 ] unsigned int 
  1220 ;;  clear_read_c    2  108[BANK0 ] unsigned int 
  1221 ;;  card            1  107[BANK0 ] enum E14569
  1222 ;;  PWMcycle        1  106[BANK0 ] unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1233 ;;      Locals:         0       5      84     228       0       0       0       0       0       0       0       0       
      +0       0       0
  1234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1235 ;;      Totals:         0       7      84     228       0       0       0       0       0       0       0       0       
      +0       0       0
  1236 ;;Total ram usage:      319 bytes
  1237 ;; Hardware stack levels required when called: 11
  1238 ;; This function calls:
  1239 ;;		_I2C_2_Master_Init
  1240 ;;		_Interrupts_init
  1241 ;;		_LEDSon_init
  1242 ;;		___lwmod
  1243 ;;		_card_response
  1244 ;;		_clear_read_calibration
  1245 ;;		_collect_avg_readings
  1246 ;;		_color_click_init
  1247 ;;		_color_read_Clear
  1248 ;;		_fullSpeedAhead
  1249 ;;		_initDCmotorsPWM
  1250 ;;		_initUSART4
  1251 ;;		_reverseFullSpeed
  1252 ;;		_sendStringSerial4
  1253 ;;		_setMotorPWM
  1254 ;;		_sprintf
  1255 ;;		_stop
  1256 ;; This function is called by:
  1257 ;;		Startup code after reset
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text0
  1262   0014E2                     __ptext0:
  1263                           	callstack 0
  1264   0014E2                     _main:
  1265                           	callstack 20
  1266   0014E2                     
  1267                           ;main.c: 26:     LEDSon_init();
  1268   0014E2  EC3E  F01C         	call	_LEDSon_init	;wreg free
  1269   0014E6                     
  1270                           ;main.c: 27:     I2C_2_Master_Init();
  1271   0014E6  EC29  F01C         	call	_I2C_2_Master_Init	;wreg free
  1272   0014EA                     
  1273                           ;main.c: 28:     color_click_init();
  1274   0014EA  ECF7  F01B         	call	_color_click_init	;wreg free
  1275   0014EE                     
  1276                           ;main.c: 29:     initDCmotorsPWM();
  1277   0014EE  EC31  F019         	call	_initDCmotorsPWM	;wreg free
  1278   0014F2                     
  1279                           ;main.c: 30:     initUSART4();
  1280   0014F2  ECA3  F01C         	call	_initUSART4	;wreg free
  1281   0014F6                     
  1282                           ;main.c: 31:     Interrupts_init();
  1283   0014F6  EC53  F01C         	call	_Interrupts_init	;wreg free
  1284   0014FA                     
  1285                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1286   0014FA  8486               	bsf	134,2,c	;volatile
  1287   0014FC                     
  1288                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1289   0014FC  010E               	movlb	14	; () banked
  1290   0014FE  95B4               	bcf	180,2,b	;volatile
  1291   001500                     
  1292                           ; BSR set to: 14
  1293                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1294   001500  CFBC F0CA          	movff	4028,main@PWMcycle	;volatile
  1295   001504                     
  1296                           ; BSR set to: 14
  1297                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1298   001504  0E00               	movlw	0
  1299   001506  0102               	movlb	2	; () banked
  1300   001508  6FD2               	movwf	main@motorL& (0+255),b
  1301   00150A                     
  1302                           ; BSR set to: 2
  1303                           ;main.c: 45:     motorL.direction=1;
  1304   00150A  0E01               	movlw	1
  1305   00150C  6FD3               	movwf	(main@motorL+1)& (0+255),b
  1306   00150E                     
  1307                           ; BSR set to: 2
  1308                           ;main.c: 46:     motorL.brakemode=1;
  1309   00150E  0E01               	movlw	1
  1310   001510  6FD4               	movwf	(main@motorL+2)& (0+255),b
  1311   001512                     
  1312                           ; BSR set to: 2
  1313                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1314   001512  0EAA               	movlw	170
  1315   001514  6FD7               	movwf	(main@motorL+5)& (0+255),b
  1316   001516  0E0F               	movlw	15
  1317   001518  6FD8               	movwf	(main@motorL+6)& (0+255),b
  1318   00151A                     
  1319                           ; BSR set to: 2
  1320                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1321   00151A  0EA6               	movlw	166
  1322   00151C  6FD9               	movwf	(main@motorL+7)& (0+255),b
  1323   00151E  0E0F               	movlw	15
  1324   001520  6FDA               	movwf	(main@motorL+8)& (0+255),b
  1325   001522                     
  1326                           ; BSR set to: 2
  1327                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1328   001522  C0CA  F2D5         	movff	main@PWMcycle,main@motorL+3
  1329   001526  6BD6               	clrf	(main@motorL+4)& (0+255),b
  1330   001528                     
  1331                           ; BSR set to: 2
  1332                           ;main.c: 51:     motorR.power=0;
  1333   001528  0E00               	movlw	0
  1334   00152A  6FDB               	movwf	main@motorR& (0+255),b
  1335   00152C                     
  1336                           ; BSR set to: 2
  1337                           ;main.c: 52:     motorR.direction=1;
  1338   00152C  0E01               	movlw	1
  1339   00152E  6FDC               	movwf	(main@motorR+1)& (0+255),b
  1340   001530                     
  1341                           ; BSR set to: 2
  1342                           ;main.c: 53:     motorR.brakemode=1;
  1343   001530  0E01               	movlw	1
  1344   001532  6FDD               	movwf	(main@motorR+2)& (0+255),b
  1345                           
  1346                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1347   001534  0E25               	movlw	37
  1348   001536  6FE0               	movwf	(main@motorR+5)& (0+255),b
  1349   001538  0E0F               	movlw	15
  1350   00153A  6FE1               	movwf	(main@motorR+6)& (0+255),b
  1351                           
  1352                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1353   00153C  0E21               	movlw	33
  1354   00153E  6FE2               	movwf	(main@motorR+7)& (0+255),b
  1355   001540  0E0F               	movlw	15
  1356   001542  6FE3               	movwf	(main@motorR+8)& (0+255),b
  1357   001544                     
  1358                           ; BSR set to: 2
  1359                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1360   001544  C0CA  F2DE         	movff	main@PWMcycle,main@motorR+3
  1361   001548  6BDF               	clrf	(main@motorR+4)& (0+255),b
  1362   00154A                     
  1363                           ; BSR set to: 2
  1364                           ;main.c: 58:     setMotorPWM(&motorL);
  1365   00154A  0ED2               	movlw	low main@motorL
  1366   00154C  6E11               	movwf	setMotorPWM@m^0,c
  1367   00154E  0E02               	movlw	high main@motorL
  1368   001550  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1369   001552  EC6A  F014         	call	_setMotorPWM	;wreg free
  1370   001556                     
  1371                           ;main.c: 59:     setMotorPWM(&motorR);
  1372   001556  0EDB               	movlw	low main@motorR
  1373   001558  6E11               	movwf	setMotorPWM@m^0,c
  1374   00155A  0E02               	movlw	high main@motorR
  1375   00155C  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1376   00155E  EC6A  F014         	call	_setMotorPWM	;wreg free
  1377   001562                     
  1378                           ;main.c: 65:     colour card;;main.c: 66:     char buf[150];;main.c: 69:     unsigned in
      +                          t red_read = 0;
  1379   001562  0E00               	movlw	0
  1380   001564  0101               	movlb	1	; () banked
  1381   001566  6FF4               	movwf	(main@red_read+1)& (0+255),b
  1382   001568  0E00               	movlw	0
  1383   00156A  6FF3               	movwf	main@red_read& (0+255),b
  1384   00156C                     
  1385                           ; BSR set to: 1
  1386                           ;main.c: 70:     unsigned int green_read = 0;
  1387   00156C  0E00               	movlw	0
  1388   00156E  6FF6               	movwf	(main@green_read+1)& (0+255),b
  1389   001570  0E00               	movlw	0
  1390   001572  6FF5               	movwf	main@green_read& (0+255),b
  1391   001574                     
  1392                           ; BSR set to: 1
  1393                           ;main.c: 71:     unsigned int blue_read = 0;
  1394   001574  0E00               	movlw	0
  1395   001576  6FF8               	movwf	(main@blue_read+1)& (0+255),b
  1396   001578  0E00               	movlw	0
  1397   00157A  6FF7               	movwf	main@blue_read& (0+255),b
  1398   00157C                     
  1399                           ; BSR set to: 1
  1400                           ;main.c: 72:     unsigned int clear_read = 0;
  1401   00157C  0E00               	movlw	0
  1402   00157E  6FFA               	movwf	(main@clear_read+1)& (0+255),b
  1403   001580  0E00               	movlw	0
  1404   001582  6FF9               	movwf	main@clear_read& (0+255),b
  1405   001584                     
  1406                           ; BSR set to: 1
  1407                           ;main.c: 74:     unsigned int TimerCount = 0;
  1408   001584  0E00               	movlw	0
  1409   001586  6FF0               	movwf	(main@TimerCount+1)& (0+255),b
  1410   001588  0E00               	movlw	0
  1411   00158A  6FEF               	movwf	main@TimerCount& (0+255),b
  1412   00158C                     
  1413                           ; BSR set to: 1
  1414                           ;main.c: 75:     unsigned int CardCount = 0;
  1415   00158C  0E00               	movlw	0
  1416   00158E  6FF2               	movwf	(main@CardCount+1)& (0+255),b
  1417   001590  0E00               	movlw	0
  1418   001592  6FF1               	movwf	main@CardCount& (0+255),b
  1419   001594                     
  1420                           ; BSR set to: 1
  1421                           ;main.c: 76:     unsigned int clear_read_check = 0;
  1422   001594  0E00               	movlw	0
  1423   001596  0100               	movlb	0	; () banked
  1424   001598  6FCD               	movwf	(main@clear_read_check+1)& (0+255),b
  1425   00159A  0E00               	movlw	0
  1426   00159C  6FCC               	movwf	main@clear_read_check& (0+255),b
  1427   00159E                     
  1428                           ; BSR set to: 0
  1429                           ;main.c: 78:     unsigned int expected_values[4][9];;main.c: 79:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 81:     HomeStored ReturnHomeArray;;main.c: 91:     LATDbi
      +                          ts.LATD4 = 0;
  1430   00159E  987C               	bcf	124,4,c	;volatile
  1431   0015A0                     
  1432                           ; BSR set to: 0
  1433                           ;main.c: 92:     for(colour i = RED; i<= BLACK; i++){
  1434   0015A0  0E00               	movlw	0
  1435   0015A2  6FCE               	movwf	main@i& (0+255),b
  1436   0015A4  EFD5  F00A         	goto	l242
  1437   0015A8                     l243:
  1438                           
  1439                           ;main.c: 94:             LATDbits.LATD4 = 1;
  1440   0015A8  887C               	bsf	124,4,c	;volatile
  1441   0015AA                     l242:
  1442                           
  1443                           ;main.c: 93:         while(PORTFbits.RF2){
  1444   0015AA  B48E               	btfsc	142,2,c	;volatile
  1445   0015AC  EFDA  F00A         	goto	u1841
  1446   0015B0  EFDC  F00A         	goto	u1840
  1447   0015B4                     u1841:
  1448   0015B4  EFD4  F00A         	goto	l243
  1449   0015B8                     u1840:
  1450   0015B8                     
  1451                           ;main.c: 96:         LATDbits.LATD4 = 0;
  1452   0015B8  987C               	bcf	124,4,c	;volatile
  1453   0015BA                     
  1454                           ;main.c: 97:         stop(&motorL, &motorR);
  1455   0015BA  0ED2               	movlw	low main@motorL
  1456   0015BC  6E17               	movwf	stop@mL^0,c
  1457   0015BE  0E02               	movlw	high main@motorL
  1458   0015C0  6E18               	movwf	(stop@mL+1)^0,c
  1459   0015C2  0EDB               	movlw	low main@motorR
  1460   0015C4  6E19               	movwf	stop@mR^0,c
  1461   0015C6  0E02               	movlw	high main@motorR
  1462   0015C8  6E1A               	movwf	(stop@mR+1)^0,c
  1463   0015CA  EC75  F019         	call	_stop	;wreg free
  1464   0015CE                     
  1465                           ;main.c: 98:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1466   0015CE  0E02               	movlw	2
  1467   0015D0  0100               	movlb	0	; () banked
  1468   0015D2  6FC9               	movwf	(??_main+1)& (0+255),b
  1469   0015D4  0EA0               	movlw	160
  1470   0015D6  6FC8               	movwf	??_main& (0+255),b
  1471   0015D8  0E92               	movlw	146
  1472   0015DA                     u1947:
  1473   0015DA  2EE8               	decfsz	wreg,f,c
  1474   0015DC  D7FE               	bra	u1947
  1475   0015DE  2FC8               	decfsz	??_main& (0+255),f,b
  1476   0015E0  D7FC               	bra	u1947
  1477   0015E2  2FC9               	decfsz	(??_main+1)& (0+255),f,b
  1478   0015E4  D7FA               	bra	u1947
  1479   0015E6  F000               	nop	
  1480   0015E8                     
  1481                           ;main.c: 99:         reverseFullSpeed(&motorL, &motorR);
  1482   0015E8  0ED2               	movlw	low main@motorL
  1483   0015EA  6E17               	movwf	reverseFullSpeed@mL^0,c
  1484   0015EC  0E02               	movlw	high main@motorL
  1485   0015EE  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1486   0015F0  0EDB               	movlw	low main@motorR
  1487   0015F2  6E19               	movwf	reverseFullSpeed@mR^0,c
  1488   0015F4  0E02               	movlw	high main@motorR
  1489   0015F6  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1490   0015F8  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  1491                           
  1492                           ;main.c: 100:         _delay((unsigned long)((150)*(64000000/4000.0)));
  1493   0015FC  0E0D               	movlw	13
  1494   0015FE  0100               	movlb	0	; () banked
  1495   001600  6FC9               	movwf	(??_main+1)& (0+255),b
  1496   001602  0E2D               	movlw	45
  1497   001604  6FC8               	movwf	??_main& (0+255),b
  1498   001606  0ED7               	movlw	215
  1499   001608                     u1957:
  1500   001608  2EE8               	decfsz	wreg,f,c
  1501   00160A  D7FE               	bra	u1957
  1502   00160C  2FC8               	decfsz	??_main& (0+255),f,b
  1503   00160E  D7FC               	bra	u1957
  1504   001610  2FC9               	decfsz	(??_main+1)& (0+255),f,b
  1505   001612  D7FA               	bra	u1957
  1506   001614  D000               	nop2	
  1507   001616                     
  1508                           ;main.c: 101:         stop(&motorL, &motorR);
  1509   001616  0ED2               	movlw	low main@motorL
  1510   001618  6E17               	movwf	stop@mL^0,c
  1511   00161A  0E02               	movlw	high main@motorL
  1512   00161C  6E18               	movwf	(stop@mL+1)^0,c
  1513   00161E  0EDB               	movlw	low main@motorR
  1514   001620  6E19               	movwf	stop@mR^0,c
  1515   001622  0E02               	movlw	high main@motorR
  1516   001624  6E1A               	movwf	(stop@mR+1)^0,c
  1517   001626  EC75  F019         	call	_stop	;wreg free
  1518   00162A                     
  1519                           ;main.c: 102:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_re
      +                          ad);
  1520   00162A  0EF9               	movlw	low main@clear_read
  1521   00162C  6E0F               	movwf	collect_avg_readings@clear_read^0,c
  1522   00162E  0E01               	movlw	high main@clear_read
  1523   001630  6E10               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1524   001632  0EF3               	movlw	low main@red_read
  1525   001634  6E11               	movwf	collect_avg_readings@red_read^0,c
  1526   001636  0E01               	movlw	high main@red_read
  1527   001638  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1528   00163A  0EF5               	movlw	low main@green_read
  1529   00163C  6E13               	movwf	collect_avg_readings@green_read^0,c
  1530   00163E  0E01               	movlw	high main@green_read
  1531   001640  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1532   001642  0EF7               	movlw	low main@blue_read
  1533   001644  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1534   001646  0E01               	movlw	high main@blue_read
  1535   001648  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1536   00164A  ECB2  F011         	call	_collect_avg_readings	;wreg free
  1537   00164E                     
  1538                           ;main.c: 103:         expected_values[RED][i] = red_read;
  1539   00164E  0100               	movlb	0	; () banked
  1540   001650  51CE               	movf	main@i& (0+255),w,b
  1541   001652  0D02               	mullw	2
  1542   001654  0EA7               	movlw	low main@expected_values
  1543   001656  24F3               	addwf	243,w,c
  1544   001658  6ED9               	movwf	fsr2l,c
  1545   00165A  0E01               	movlw	high main@expected_values
  1546   00165C  20F4               	addwfc	prodh,w,c
  1547   00165E  6EDA               	movwf	fsr2h,c
  1548   001660  C1F3  FFDE         	movff	main@red_read,postinc2
  1549   001664  C1F4  FFDD         	movff	main@red_read+1,postdec2
  1550   001668                     
  1551                           ; BSR set to: 0
  1552                           ;main.c: 104:         expected_values[GREEN][i] = green_read;
  1553   001668  51CE               	movf	main@i& (0+255),w,b
  1554   00166A  0D02               	mullw	2
  1555   00166C  0E12               	movlw	18
  1556   00166E  26F3               	addwf	243,f,c
  1557   001670  0E00               	movlw	0
  1558   001672  22F4               	addwfc	244,f,c
  1559   001674  0EA7               	movlw	low main@expected_values
  1560   001676  24F3               	addwf	243,w,c
  1561   001678  6ED9               	movwf	fsr2l,c
  1562   00167A  0E01               	movlw	high main@expected_values
  1563   00167C  20F4               	addwfc	prodh,w,c
  1564   00167E  6EDA               	movwf	fsr2h,c
  1565   001680  C1F5  FFDE         	movff	main@green_read,postinc2
  1566   001684  C1F6  FFDD         	movff	main@green_read+1,postdec2
  1567   001688                     
  1568                           ; BSR set to: 0
  1569                           ;main.c: 105:         expected_values[BLUE][i] = blue_read;
  1570   001688  51CE               	movf	main@i& (0+255),w,b
  1571   00168A  0D02               	mullw	2
  1572   00168C  0E24               	movlw	36
  1573   00168E  26F3               	addwf	243,f,c
  1574   001690  0E00               	movlw	0
  1575   001692  22F4               	addwfc	244,f,c
  1576   001694  0EA7               	movlw	low main@expected_values
  1577   001696  24F3               	addwf	243,w,c
  1578   001698  6ED9               	movwf	fsr2l,c
  1579   00169A  0E01               	movlw	high main@expected_values
  1580   00169C  20F4               	addwfc	prodh,w,c
  1581   00169E  6EDA               	movwf	fsr2h,c
  1582   0016A0  C1F7  FFDE         	movff	main@blue_read,postinc2
  1583   0016A4  C1F8  FFDD         	movff	main@blue_read+1,postdec2
  1584   0016A8                     
  1585                           ; BSR set to: 0
  1586                           ;main.c: 106:         expected_values[3][i] = clear_read;
  1587   0016A8  51CE               	movf	main@i& (0+255),w,b
  1588   0016AA  0D02               	mullw	2
  1589   0016AC  0E36               	movlw	54
  1590   0016AE  26F3               	addwf	243,f,c
  1591   0016B0  0E00               	movlw	0
  1592   0016B2  22F4               	addwfc	244,f,c
  1593   0016B4  0EA7               	movlw	low main@expected_values
  1594   0016B6  24F3               	addwf	243,w,c
  1595   0016B8  6ED9               	movwf	fsr2l,c
  1596   0016BA  0E01               	movlw	high main@expected_values
  1597   0016BC  20F4               	addwfc	prodh,w,c
  1598   0016BE  6EDA               	movwf	fsr2h,c
  1599   0016C0  C1F9  FFDE         	movff	main@clear_read,postinc2
  1600   0016C4  C1FA  FFDD         	movff	main@clear_read+1,postdec2
  1601   0016C8                     
  1602                           ; BSR set to: 0
  1603                           ;main.c: 107:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i );
  1604   0016C8  0E00               	movlw	low main@buf
  1605   0016CA  6F66               	movwf	sprintf@s& (0+255),b
  1606   0016CC  0E02               	movlw	high main@buf
  1607   0016CE  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1608   0016D0  0E01               	movlw	low STR_1
  1609   0016D2  6F68               	movwf	sprintf@fmt& (0+255),b
  1610   0016D4  0E0E               	movlw	high STR_1
  1611   0016D6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1612   0016D8  C1F9  F06A         	movff	main@clear_read,?_sprintf+4
  1613   0016DC  C1FA  F06B         	movff	main@clear_read+1,?_sprintf+5
  1614   0016E0  C1F3  F06C         	movff	main@red_read,?_sprintf+6
  1615   0016E4  C1F4  F06D         	movff	main@red_read+1,?_sprintf+7
  1616   0016E8  C1F5  F06E         	movff	main@green_read,?_sprintf+8
  1617   0016EC  C1F6  F06F         	movff	main@green_read+1,?_sprintf+9
  1618   0016F0  C1F7  F070         	movff	main@blue_read,?_sprintf+10
  1619   0016F4  C1F8  F071         	movff	main@blue_read+1,?_sprintf+11
  1620   0016F8  C0CE  F072         	movff	main@i,?_sprintf+12
  1621   0016FC  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1622   0016FE  ECCB  F01A         	call	_sprintf	;wreg free
  1623   001702                     
  1624                           ;main.c: 108:         sendStringSerial4(buf);
  1625   001702  0E00               	movlw	low main@buf
  1626   001704  6E05               	movwf	sendStringSerial4@string^0,c
  1627   001706  0E02               	movlw	high main@buf
  1628   001708  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1629   00170A  EC11  F01C         	call	_sendStringSerial4	;wreg free
  1630   00170E                     
  1631                           ;main.c: 109:     }
  1632   00170E  0100               	movlb	0	; () banked
  1633   001710  2BCE               	incf	main@i& (0+255),f,b
  1634   001712                     
  1635                           ; BSR set to: 0
  1636   001712  0E08               	movlw	8
  1637   001714  65CE               	cpfsgt	main@i& (0+255),b
  1638   001716  EF8F  F00B         	goto	u1851
  1639   00171A  EF91  F00B         	goto	u1850
  1640   00171E                     u1851:
  1641   00171E  EFD5  F00A         	goto	l242
  1642   001722                     u1850:
  1643   001722                     
  1644                           ; BSR set to: 0
  1645                           ;main.c: 110:     LATDbits.LATD4 = 1;
  1646   001722  887C               	bsf	124,4,c	;volatile
  1647                           
  1648                           ;main.c: 111:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1649   001724  EF95  F00B         	goto	l245
  1650   001728                     l246:
  1651   001728  987C               	bcf	124,4,c	;volatile
  1652   00172A                     l245:
  1653   00172A  B48E               	btfsc	142,2,c	;volatile
  1654   00172C  EF9A  F00B         	goto	u1861
  1655   001730  EF9C  F00B         	goto	u1860
  1656   001734                     u1861:
  1657   001734  EF94  F00B         	goto	l246
  1658   001738                     u1860:
  1659   001738                     
  1660                           ;main.c: 112:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1661   001738  0E00               	movlw	low main@buf
  1662   00173A  0100               	movlb	0	; () banked
  1663   00173C  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1664   00173E  0E02               	movlw	high main@buf
  1665   001740  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1666   001742  0EF9               	movlw	low main@clear_read
  1667   001744  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1668   001746  0E01               	movlw	high main@clear_read
  1669   001748  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1670   00174A  0ECC               	movlw	low main@clear_read_check
  1671   00174C  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1672   00174E  0E00               	movlw	high main@clear_read_check
  1673   001750  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1674   001752  EC81  F016         	call	_clear_read_calibration	;wreg free
  1675                           
  1676                           ;main.c: 114:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1677   001756  0E00               	movlw	low main@buf
  1678   001758  0100               	movlb	0	; () banked
  1679   00175A  6F66               	movwf	sprintf@s& (0+255),b
  1680   00175C  0E02               	movlw	high main@buf
  1681   00175E  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1682   001760  0EA9               	movlw	low STR_2
  1683   001762  6F68               	movwf	sprintf@fmt& (0+255),b
  1684   001764  0E0E               	movlw	high STR_2
  1685   001766  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1686   001768  C1F9  F06A         	movff	main@clear_read,?_sprintf+4
  1687   00176C  C1FA  F06B         	movff	main@clear_read+1,?_sprintf+5
  1688   001770  ECCB  F01A         	call	_sprintf	;wreg free
  1689   001774                     
  1690                           ;main.c: 115:     sendStringSerial4(buf);
  1691   001774  0E00               	movlw	low main@buf
  1692   001776  6E05               	movwf	sendStringSerial4@string^0,c
  1693   001778  0E02               	movlw	high main@buf
  1694   00177A  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1695   00177C  EC11  F01C         	call	_sendStringSerial4	;wreg free
  1696   001780                     l248:
  1697   001780  B48E               	btfsc	142,2,c	;volatile
  1698   001782  EFC5  F00B         	goto	u1871
  1699   001786  EFC7  F00B         	goto	u1870
  1700   00178A                     u1871:
  1701   00178A  EFC0  F00B         	goto	l248
  1702   00178E                     u1870:
  1703   00178E                     l4128:
  1704                           
  1705                           ;main.c: 122:     fullSpeedAhead(&motorL, &motorR);
  1706   00178E  0ED2               	movlw	low main@motorL
  1707   001790  6E17               	movwf	fullSpeedAhead@mL^0,c
  1708   001792  0E02               	movlw	high main@motorL
  1709   001794  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1710   001796  0EDB               	movlw	low main@motorR
  1711   001798  6E19               	movwf	fullSpeedAhead@mR^0,c
  1712   00179A  0E02               	movlw	high main@motorR
  1713   00179C  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1714   00179E  ECEB  F018         	call	_fullSpeedAhead	;wreg free
  1715   0017A2                     l4130:
  1716                           
  1717                           ;main.c: 125:         if (TimerFlag == 1){
  1718   0017A2  0100               	movlb	0	; () banked
  1719   0017A4  05EB               	decf	_TimerFlag& (0+255),w,b
  1720   0017A6  11EC               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1721   0017A8  A4D8               	btfss	status,2,c
  1722   0017AA  EFD9  F00B         	goto	u1881
  1723   0017AE  EFDB  F00B         	goto	u1880
  1724   0017B2                     u1881:
  1725   0017B2  EF0A  F00C         	goto	l4140
  1726   0017B6                     u1880:
  1727   0017B6                     
  1728                           ; BSR set to: 0
  1729                           ;main.c: 126:             TimerCount += 1;
  1730   0017B6  0101               	movlb	1	; () banked
  1731   0017B8  4BEF               	infsnz	main@TimerCount& (0+255),f,b
  1732   0017BA  2BF0               	incf	(main@TimerCount+1)& (0+255),f,b
  1733   0017BC                     
  1734                           ; BSR set to: 1
  1735                           ;main.c: 127:             if (TimerCount % 10 == 0){LATHbits.LATH3=!LATHbits.LATH3;}
  1736   0017BC  C1EF  F004         	movff	main@TimerCount,___lwmod@dividend
  1737   0017C0  C1F0  F005         	movff	main@TimerCount+1,___lwmod@dividend+1
  1738   0017C4  0E00               	movlw	0
  1739   0017C6  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1740   0017C8  0E0A               	movlw	10
  1741   0017CA  6E06               	movwf	___lwmod@divisor^0,c
  1742   0017CC  EC6F  F01A         	call	___lwmod	;wreg free
  1743   0017D0  5004               	movf	?___lwmod^0,w,c
  1744   0017D2  1005               	iorwf	(?___lwmod+1)^0,w,c
  1745   0017D4  A4D8               	btfss	status,2,c
  1746   0017D6  EFEF  F00B         	goto	u1891
  1747   0017DA  EFF1  F00B         	goto	u1890
  1748   0017DE                     u1891:
  1749   0017DE  EF05  F00C         	goto	l4138
  1750   0017E2                     u1890:
  1751   0017E2  A680               	btfss	128,3,c	;volatile
  1752   0017E4  EFF6  F00B         	goto	u1901
  1753   0017E8  EFFB  F00B         	goto	u1900
  1754   0017EC                     u1901:
  1755   0017EC  0100               	movlb	0	; () banked
  1756   0017EE  6BC8               	clrf	??_main& (0+255),b
  1757   0017F0  2BC8               	incf	??_main& (0+255),f,b
  1758   0017F2  EFFD  F00B         	goto	u1918
  1759   0017F6                     u1900:
  1760   0017F6  0100               	movlb	0	; () banked
  1761   0017F8  6BC8               	clrf	??_main& (0+255),b
  1762   0017FA                     u1918:
  1763   0017FA  47C8               	rlncf	??_main& (0+255),f,b
  1764   0017FC  47C8               	rlncf	??_main& (0+255),f,b
  1765   0017FE  47C8               	rlncf	??_main& (0+255),f,b
  1766   001800  5080               	movf	128,w,c	;volatile
  1767   001802  19C8               	xorwf	??_main& (0+255),w,b
  1768   001804  0BF7               	andlw	-9
  1769   001806  19C8               	xorwf	??_main& (0+255),w,b
  1770   001808  6E80               	movwf	128,c	;volatile
  1771   00180A                     l4138:
  1772                           
  1773                           ;main.c: 128:             TimerFlag = 0;
  1774   00180A  0E00               	movlw	0
  1775   00180C  0100               	movlb	0	; () banked
  1776   00180E  6FEC               	movwf	(_TimerFlag+1)& (0+255),b
  1777   001810  0E00               	movlw	0
  1778   001812  6FEB               	movwf	_TimerFlag& (0+255),b
  1779   001814                     l4140:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 130:         clear_read = color_read_Clear();
  1783   001814  EC44  F01B         	call	_color_read_Clear	;wreg free
  1784   001818  C008  F1F9         	movff	?_color_read_Clear,main@clear_read
  1785   00181C  C009  F1FA         	movff	?_color_read_Clear+1,main@clear_read+1
  1786   001820                     
  1787                           ;main.c: 131:         if (clear_read > clear_read_check){
  1788   001820  0101               	movlb	1	; () banked
  1789   001822  51F9               	movf	main@clear_read& (0+255),w,b
  1790   001824  0100               	movlb	0	; () banked
  1791   001826  5DCC               	subwf	main@clear_read_check& (0+255),w,b
  1792   001828  0101               	movlb	1	; () banked
  1793   00182A  51FA               	movf	(main@clear_read+1)& (0+255),w,b
  1794   00182C  0100               	movlb	0	; () banked
  1795   00182E  59CD               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1796   001830  B0D8               	btfsc	status,0,c
  1797   001832  EF1D  F00C         	goto	u1921
  1798   001836  EF1F  F00C         	goto	u1920
  1799   00183A                     u1921:
  1800   00183A  EFD1  F00B         	goto	l4130
  1801   00183E                     u1920:
  1802   00183E                     
  1803                           ; BSR set to: 0
  1804                           ;main.c: 133:             sprintf(buf, "Cardcount %d \n", CardCount);
  1805   00183E  0E00               	movlw	low main@buf
  1806   001840  6F66               	movwf	sprintf@s& (0+255),b
  1807   001842  0E02               	movlw	high main@buf
  1808   001844  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1809   001846  0ED6               	movlw	low STR_3
  1810   001848  6F68               	movwf	sprintf@fmt& (0+255),b
  1811   00184A  0E0E               	movlw	high STR_3
  1812   00184C  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1813   00184E  C1F1  F06A         	movff	main@CardCount,?_sprintf+4
  1814   001852  C1F2  F06B         	movff	main@CardCount+1,?_sprintf+5
  1815   001856  ECCB  F01A         	call	_sprintf	;wreg free
  1816   00185A                     
  1817                           ;main.c: 134:             sendStringSerial4(buf);
  1818   00185A  0E00               	movlw	low main@buf
  1819   00185C  6E05               	movwf	sendStringSerial4@string^0,c
  1820   00185E  0E02               	movlw	high main@buf
  1821   001860  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1822   001862  EC11  F01C         	call	_sendStringSerial4	;wreg free
  1823   001866                     
  1824                           ;main.c: 136:             ReturnHomeArray.TimerCount[CardCount] = TimerCount;
  1825   001866  90D8               	bcf	status,0,c
  1826   001868  0101               	movlb	1	; () banked
  1827   00186A  35F1               	rlcf	main@CardCount& (0+255),w,b
  1828   00186C  6ED9               	movwf	fsr2l,c
  1829   00186E  35F2               	rlcf	(main@CardCount+1)& (0+255),w,b
  1830   001870  6EDA               	movwf	fsr2h,c
  1831   001872  0E96               	movlw	low main@ReturnHomeArray
  1832   001874  26D9               	addwf	fsr2l,f,c
  1833   001876  0E02               	movlw	high main@ReturnHomeArray
  1834   001878  22DA               	addwfc	fsr2h,f,c
  1835   00187A  C1EF  FFDE         	movff	main@TimerCount,postinc2
  1836   00187E  C1F0  FFDD         	movff	main@TimerCount+1,postdec2
  1837   001882                     
  1838                           ; BSR set to: 1
  1839                           ;main.c: 137:             sprintf(buf, "Timercount value %d \n", TimerCount);
  1840   001882  0E00               	movlw	low main@buf
  1841   001884  0100               	movlb	0	; () banked
  1842   001886  6F66               	movwf	sprintf@s& (0+255),b
  1843   001888  0E02               	movlw	high main@buf
  1844   00188A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1845   00188C  0EC0               	movlw	low STR_4
  1846   00188E  6F68               	movwf	sprintf@fmt& (0+255),b
  1847   001890  0E0E               	movlw	high STR_4
  1848   001892  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1849   001894  C1EF  F06A         	movff	main@TimerCount,?_sprintf+4
  1850   001898  C1F0  F06B         	movff	main@TimerCount+1,?_sprintf+5
  1851   00189C  ECCB  F01A         	call	_sprintf	;wreg free
  1852   0018A0                     
  1853                           ;main.c: 138:             sendStringSerial4(buf);
  1854   0018A0  0E00               	movlw	low main@buf
  1855   0018A2  6E05               	movwf	sendStringSerial4@string^0,c
  1856   0018A4  0E02               	movlw	high main@buf
  1857   0018A6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1858   0018A8  EC11  F01C         	call	_sendStringSerial4	;wreg free
  1859   0018AC                     
  1860                           ;main.c: 139:             sprintf(buf, "Timercount array reading %d \n", ReturnHomeArray
      +                          .TimerCount[CardCount]);
  1861   0018AC  0E00               	movlw	low main@buf
  1862   0018AE  0100               	movlb	0	; () banked
  1863   0018B0  6F66               	movwf	sprintf@s& (0+255),b
  1864   0018B2  0E02               	movlw	high main@buf
  1865   0018B4  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1866   0018B6  0E57               	movlw	low STR_5
  1867   0018B8  6F68               	movwf	sprintf@fmt& (0+255),b
  1868   0018BA  0E0E               	movlw	high STR_5
  1869   0018BC  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1870   0018BE  90D8               	bcf	status,0,c
  1871   0018C0  0101               	movlb	1	; () banked
  1872   0018C2  35F1               	rlcf	main@CardCount& (0+255),w,b
  1873   0018C4  6ED9               	movwf	fsr2l,c
  1874   0018C6  35F2               	rlcf	(main@CardCount+1)& (0+255),w,b
  1875   0018C8  6EDA               	movwf	fsr2h,c
  1876   0018CA  0E96               	movlw	low main@ReturnHomeArray
  1877   0018CC  26D9               	addwf	fsr2l,f,c
  1878   0018CE  0E02               	movlw	high main@ReturnHomeArray
  1879   0018D0  22DA               	addwfc	fsr2h,f,c
  1880   0018D2  CFDE F06A          	movff	postinc2,?_sprintf+4
  1881   0018D6  CFDD F06B          	movff	postdec2,?_sprintf+5
  1882   0018DA  ECCB  F01A         	call	_sprintf	;wreg free
  1883   0018DE                     
  1884                           ;main.c: 140:             sendStringSerial4(buf);
  1885   0018DE  0E00               	movlw	low main@buf
  1886   0018E0  6E05               	movwf	sendStringSerial4@string^0,c
  1887   0018E2  0E02               	movlw	high main@buf
  1888   0018E4  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1889   0018E6  EC11  F01C         	call	_sendStringSerial4	;wreg free
  1890   0018EA                     
  1891                           ;main.c: 142:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1892   0018EA  0E2A               	movlw	42
  1893   0018EC  0100               	movlb	0	; () banked
  1894   0018EE  6FC8               	movwf	??_main& (0+255),b
  1895   0018F0  0E8D               	movlw	141
  1896   0018F2                     u1967:
  1897   0018F2  2EE8               	decfsz	wreg,f,c
  1898   0018F4  D7FE               	bra	u1967
  1899   0018F6  2FC8               	decfsz	??_main& (0+255),f,b
  1900   0018F8  D7FC               	bra	u1967
  1901   0018FA  D000               	nop2	
  1902   0018FC                     
  1903                           ;main.c: 143:             stop(&motorL, &motorR);
  1904   0018FC  0ED2               	movlw	low main@motorL
  1905   0018FE  6E17               	movwf	stop@mL^0,c
  1906   001900  0E02               	movlw	high main@motorL
  1907   001902  6E18               	movwf	(stop@mL+1)^0,c
  1908   001904  0EDB               	movlw	low main@motorR
  1909   001906  6E19               	movwf	stop@mR^0,c
  1910   001908  0E02               	movlw	high main@motorR
  1911   00190A  6E1A               	movwf	(stop@mR+1)^0,c
  1912   00190C  EC75  F019         	call	_stop	;wreg free
  1913   001910                     
  1914                           ;main.c: 144:             _delay((unsigned long)((20)*(64000000/4000.0)));
  1915   001910  0E02               	movlw	2
  1916   001912  0100               	movlb	0	; () banked
  1917   001914  6FC9               	movwf	(??_main+1)& (0+255),b
  1918   001916  0EA0               	movlw	160
  1919   001918  6FC8               	movwf	??_main& (0+255),b
  1920   00191A  0E92               	movlw	146
  1921   00191C                     u1977:
  1922   00191C  2EE8               	decfsz	wreg,f,c
  1923   00191E  D7FE               	bra	u1977
  1924   001920  2FC8               	decfsz	??_main& (0+255),f,b
  1925   001922  D7FC               	bra	u1977
  1926   001924  2FC9               	decfsz	(??_main+1)& (0+255),f,b
  1927   001926  D7FA               	bra	u1977
  1928   001928  F000               	nop	
  1929   00192A                     
  1930                           ;main.c: 145:             reverseFullSpeed(&motorL, &motorR);
  1931   00192A  0ED2               	movlw	low main@motorL
  1932   00192C  6E17               	movwf	reverseFullSpeed@mL^0,c
  1933   00192E  0E02               	movlw	high main@motorL
  1934   001930  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1935   001932  0EDB               	movlw	low main@motorR
  1936   001934  6E19               	movwf	reverseFullSpeed@mR^0,c
  1937   001936  0E02               	movlw	high main@motorR
  1938   001938  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1939   00193A  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  1940   00193E                     
  1941                           ;main.c: 146:             _delay((unsigned long)((150)*(64000000/4000.0)));
  1942   00193E  0E0D               	movlw	13
  1943   001940  0100               	movlb	0	; () banked
  1944   001942  6FC9               	movwf	(??_main+1)& (0+255),b
  1945   001944  0E2D               	movlw	45
  1946   001946  6FC8               	movwf	??_main& (0+255),b
  1947   001948  0ED7               	movlw	215
  1948   00194A                     u1987:
  1949   00194A  2EE8               	decfsz	wreg,f,c
  1950   00194C  D7FE               	bra	u1987
  1951   00194E  2FC8               	decfsz	??_main& (0+255),f,b
  1952   001950  D7FC               	bra	u1987
  1953   001952  2FC9               	decfsz	(??_main+1)& (0+255),f,b
  1954   001954  D7FA               	bra	u1987
  1955   001956  D000               	nop2	
  1956   001958                     
  1957                           ;main.c: 147:             stop(&motorL, &motorR);
  1958   001958  0ED2               	movlw	low main@motorL
  1959   00195A  6E17               	movwf	stop@mL^0,c
  1960   00195C  0E02               	movlw	high main@motorL
  1961   00195E  6E18               	movwf	(stop@mL+1)^0,c
  1962   001960  0EDB               	movlw	low main@motorR
  1963   001962  6E19               	movwf	stop@mR^0,c
  1964   001964  0E02               	movlw	high main@motorR
  1965   001966  6E1A               	movwf	(stop@mR+1)^0,c
  1966   001968  EC75  F019         	call	_stop	;wreg free
  1967   00196C                     
  1968                           ;main.c: 148:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1969   00196C  0E2A               	movlw	42
  1970   00196E  0100               	movlb	0	; () banked
  1971   001970  6FC8               	movwf	??_main& (0+255),b
  1972   001972  0E8D               	movlw	141
  1973   001974                     u1997:
  1974   001974  2EE8               	decfsz	wreg,f,c
  1975   001976  D7FE               	bra	u1997
  1976   001978  2FC8               	decfsz	??_main& (0+255),f,b
  1977   00197A  D7FC               	bra	u1997
  1978   00197C  D000               	nop2	
  1979   00197E                     
  1980                           ;main.c: 151:             card = card_response(buf, &clear_read, &red_read, &green_read,
      +                           &blue_read, expected_values, card, &motorL, &motorR, ReturnHomeArray);
  1981   00197E  0E00               	movlw	low main@buf
  1982   001980  0101               	movlb	1	; () banked
  1983   001982  6F00               	movwf	card_response@buf& (0+255),b
  1984   001984  0E02               	movlw	high main@buf
  1985   001986  6F01               	movwf	(card_response@buf+1)& (0+255),b
  1986   001988  0EF9               	movlw	low main@clear_read
  1987   00198A  6F02               	movwf	card_response@clear_read& (0+255),b
  1988   00198C  0E01               	movlw	high main@clear_read
  1989   00198E  6F03               	movwf	(card_response@clear_read+1)& (0+255),b
  1990   001990  0EF3               	movlw	low main@red_read
  1991   001992  6F04               	movwf	card_response@red_read& (0+255),b
  1992   001994  0E01               	movlw	high main@red_read
  1993   001996  6F05               	movwf	(card_response@red_read+1)& (0+255),b
  1994   001998  0EF5               	movlw	low main@green_read
  1995   00199A  6F06               	movwf	card_response@green_read& (0+255),b
  1996   00199C  0E01               	movlw	high main@green_read
  1997   00199E  6F07               	movwf	(card_response@green_read+1)& (0+255),b
  1998   0019A0  0EF7               	movlw	low main@blue_read
  1999   0019A2  6F08               	movwf	card_response@blue_read& (0+255),b
  2000   0019A4  0E01               	movlw	high main@blue_read
  2001   0019A6  6F09               	movwf	(card_response@blue_read+1)& (0+255),b
  2002   0019A8  0EA7               	movlw	low main@expected_values
  2003   0019AA  6F0A               	movwf	card_response@expected_values& (0+255),b
  2004   0019AC  0E01               	movlw	high main@expected_values
  2005   0019AE  6F0B               	movwf	(card_response@expected_values+1)& (0+255),b
  2006   0019B0  C0CB  F10C         	movff	main@card,card_response@card
  2007   0019B4  0ED2               	movlw	low main@motorL
  2008   0019B6  6F0D               	movwf	card_response@mL& (0+255),b
  2009   0019B8  0E02               	movlw	high main@motorL
  2010   0019BA  6F0E               	movwf	(card_response@mL+1)& (0+255),b
  2011   0019BC  0EDB               	movlw	low main@motorR
  2012   0019BE  6F0F               	movwf	card_response@mR& (0+255),b
  2013   0019C0  0E02               	movlw	high main@motorR
  2014   0019C2  6F10               	movwf	(card_response@mR+1)& (0+255),b
  2015   0019C4  EE22  F096         	lfsr	2,main@ReturnHomeArray
  2016   0019C8  EE01  F011         	lfsr	0,card_response@ReturnHomeArray
  2017   0019CC  0E3B               	movlw	59
  2018   0019CE                     u1931:
  2019   0019CE  CFDB FFEB          	movff	plusw2,plusw0
  2020   0019D2  06E8               	decf	wreg,f,c
  2021   0019D4  E2FC               	bc	u1931
  2022   0019D6  ECB3  F013         	call	_card_response	;wreg free
  2023   0019DA  0100               	movlb	0	; () banked
  2024   0019DC  6FCB               	movwf	main@card& (0+255),b
  2025   0019DE                     
  2026                           ; BSR set to: 0
  2027                           ;main.c: 152:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2028   0019DE  0E2A               	movlw	42
  2029   0019E0  0100               	movlb	0	; () banked
  2030   0019E2  6FC8               	movwf	??_main& (0+255),b
  2031   0019E4  0E8D               	movlw	141
  2032   0019E6                     u2007:
  2033   0019E6  2EE8               	decfsz	wreg,f,c
  2034   0019E8  D7FE               	bra	u2007
  2035   0019EA  2FC8               	decfsz	??_main& (0+255),f,b
  2036   0019EC  D7FC               	bra	u2007
  2037   0019EE  D000               	nop2	
  2038   0019F0                     
  2039                           ;main.c: 153:             ReturnHomeArray.card[CardCount] = card;
  2040   0019F0  0E96               	movlw	low main@ReturnHomeArray
  2041   0019F2  0101               	movlb	1	; () banked
  2042   0019F4  25F1               	addwf	main@CardCount& (0+255),w,b
  2043   0019F6  6ED9               	movwf	fsr2l,c
  2044   0019F8  0E02               	movlw	high main@ReturnHomeArray
  2045   0019FA  21F2               	addwfc	(main@CardCount+1)& (0+255),w,b
  2046   0019FC  6EDA               	movwf	fsr2h,c
  2047   0019FE  C0CB  FFDF         	movff	main@card,indf2
  2048   001A02                     
  2049                           ; BSR set to: 1
  2050                           ;main.c: 154:             sprintf(buf, "Card %d \n", ReturnHomeArray.card[CardCount]);
  2051   001A02  0E00               	movlw	low main@buf
  2052   001A04  0100               	movlb	0	; () banked
  2053   001A06  6F66               	movwf	sprintf@s& (0+255),b
  2054   001A08  0E02               	movlw	high main@buf
  2055   001A0A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2056   001A0C  0EEF               	movlw	low STR_6
  2057   001A0E  6F68               	movwf	sprintf@fmt& (0+255),b
  2058   001A10  0E0E               	movlw	high STR_6
  2059   001A12  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2060   001A14  0E96               	movlw	low main@ReturnHomeArray
  2061   001A16  0101               	movlb	1	; () banked
  2062   001A18  25F1               	addwf	main@CardCount& (0+255),w,b
  2063   001A1A  6ED9               	movwf	fsr2l,c
  2064   001A1C  0E02               	movlw	high main@ReturnHomeArray
  2065   001A1E  21F2               	addwfc	(main@CardCount+1)& (0+255),w,b
  2066   001A20  6EDA               	movwf	fsr2h,c
  2067   001A22  50DF               	movf	indf2,w,c
  2068   001A24  0100               	movlb	0	; () banked
  2069   001A26  6FC8               	movwf	??_main& (0+255),b
  2070   001A28  51C8               	movf	??_main& (0+255),w,b
  2071   001A2A  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  2072   001A2C  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2073   001A2E  ECCB  F01A         	call	_sprintf	;wreg free
  2074   001A32                     
  2075                           ;main.c: 155:             sendStringSerial4(buf);
  2076   001A32  0E00               	movlw	low main@buf
  2077   001A34  6E05               	movwf	sendStringSerial4@string^0,c
  2078   001A36  0E02               	movlw	high main@buf
  2079   001A38  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2080   001A3A  EC11  F01C         	call	_sendStringSerial4	;wreg free
  2081   001A3E                     
  2082                           ;main.c: 157:             CardCount += 1;
  2083   001A3E  0101               	movlb	1	; () banked
  2084   001A40  4BF1               	infsnz	main@CardCount& (0+255),f,b
  2085   001A42  2BF2               	incf	(main@CardCount+1)& (0+255),f,b
  2086   001A44                     
  2087                           ; BSR set to: 1
  2088                           ;main.c: 159:             TimerCount = 0;
  2089   001A44  0E00               	movlw	0
  2090   001A46  6FF0               	movwf	(main@TimerCount+1)& (0+255),b
  2091   001A48  0E00               	movlw	0
  2092   001A4A  6FEF               	movwf	main@TimerCount& (0+255),b
  2093   001A4C  EFC7  F00B         	goto	l4128
  2094   001A50  EF2E  F000         	goto	start
  2095   001A54                     __end_of_main:
  2096                           	callstack 0
  2097                           
  2098 ;; *************** function _initUSART4 *****************
  2099 ;; Defined at:
  2100 ;;		line 6 in file "serial.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;		None
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, status,2
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;Total ram usage:        0 bytes
  2119 ;; Hardware stack levels used: 1
  2120 ;; Hardware stack levels required when called: 1
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text1
  2129   003946                     __ptext1:
  2130                           	callstack 0
  2131   003946                     _initUSART4:
  2132                           	callstack 29
  2133   003946                     
  2134                           ;serial.c: 10:     RC0PPS = 0x12;
  2135   003946  0E12               	movlw	18
  2136   003948  010E               	movlb	14	; () banked
  2137   00394A  6F62               	movwf	98,b	;volatile
  2138                           
  2139                           ;serial.c: 11:     RX4PPS = 0x11;
  2140   00394C  0E11               	movlw	17
  2141   00394E  6F15               	movwf	21,b	;volatile
  2142   003950                     
  2143                           ; BSR set to: 14
  2144                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  2145   003950  8283               	bsf	131,1,c	;volatile
  2146   003952                     
  2147                           ; BSR set to: 14
  2148                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  2149   003952  97E9               	bcf	233,3,b	;volatile
  2150   003954                     
  2151                           ; BSR set to: 14
  2152                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  2153   003954  95E8               	bcf	232,2,b	;volatile
  2154                           
  2155                           ;serial.c: 17:     SP4BRGL = 51;
  2156   003956  0E33               	movlw	51
  2157   003958  6FE5               	movwf	229,b	;volatile
  2158                           
  2159                           ;serial.c: 18:     SP4BRGH = 0;
  2160   00395A  0E00               	movlw	0
  2161   00395C  6FE6               	movwf	230,b	;volatile
  2162   00395E                     
  2163                           ; BSR set to: 14
  2164                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  2165   00395E  89E7               	bsf	231,4,b	;volatile
  2166   003960                     
  2167                           ; BSR set to: 14
  2168                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  2169   003960  8BE8               	bsf	232,5,b	;volatile
  2170   003962                     
  2171                           ; BSR set to: 14
  2172                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  2173   003962  8FE7               	bsf	231,7,b	;volatile
  2174   003964                     
  2175                           ; BSR set to: 14
  2176   003964  0012               	return		;funcret
  2177   003966                     __end_of_initUSART4:
  2178                           	callstack 0
  2179                           
  2180 ;; *************** function _initDCmotorsPWM *****************
  2181 ;; Defined at:
  2182 ;;		line 6 in file "dc_motor.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used: 1
  2202 ;; Hardware stack levels required when called: 1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_main
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text2
  2211   003262                     __ptext2:
  2212                           	callstack 0
  2213   003262                     _initDCmotorsPWM:
  2214                           	callstack 29
  2215   003262                     
  2216                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  2217   003262  9485               	bcf	133,2,c	;volatile
  2218                           
  2219                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2220   003264  9885               	bcf	133,4,c	;volatile
  2221                           
  2222                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  2223   003266  9E83               	bcf	131,7,c	;volatile
  2224                           
  2225                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  2226   003268  9C87               	bcf	135,6,c	;volatile
  2227   00326A                     
  2228                           ;dc_motor.c: 14:     RE2PPS=0x05;
  2229   00326A  0E05               	movlw	5
  2230   00326C  010E               	movlb	14	; () banked
  2231   00326E  6F74               	movwf	116,b	;volatile
  2232                           
  2233                           ;dc_motor.c: 15:     RE4PPS=0x06;
  2234   003270  0E06               	movlw	6
  2235   003272  6F76               	movwf	118,b	;volatile
  2236                           
  2237                           ;dc_motor.c: 16:     RC7PPS=0x07;
  2238   003274  0E07               	movlw	7
  2239   003276  6F69               	movwf	105,b	;volatile
  2240                           
  2241                           ;dc_motor.c: 17:     RG6PPS=0x08;
  2242   003278  0E08               	movlw	8
  2243   00327A  6F88               	movwf	136,b	;volatile
  2244                           
  2245                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  2246   00327C  50BD               	movf	189,w,c	;volatile
  2247   00327E  0B8F               	andlw	-113
  2248   003280  0940               	iorlw	64
  2249   003282  6EBD               	movwf	189,c	;volatile
  2250                           
  2251                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  2252   003284  0EE0               	movlw	-32
  2253   003286  16BE               	andwf	190,f,c	;volatile
  2254                           
  2255                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  2256   003288  50BF               	movf	191,w,c	;volatile
  2257   00328A  0BF0               	andlw	-16
  2258   00328C  0901               	iorlw	1
  2259   00328E  6EBF               	movwf	191,c	;volatile
  2260                           
  2261                           ;dc_motor.c: 26:     T2PR=99;
  2262   003290  0E63               	movlw	99
  2263   003292  6EBC               	movwf	188,c	;volatile
  2264   003294                     
  2265                           ; BSR set to: 14
  2266                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  2267   003294  8EBD               	bsf	189,7,c	;volatile
  2268                           
  2269                           ;dc_motor.c: 31:     CCPR1H=0;
  2270   003296  0E00               	movlw	0
  2271   003298  6EAA               	movwf	170,c	;volatile
  2272                           
  2273                           ;dc_motor.c: 32:     CCPR2H=0;
  2274   00329A  0E00               	movlw	0
  2275   00329C  6EA6               	movwf	166,c	;volatile
  2276                           
  2277                           ;dc_motor.c: 33:     CCPR3H=0;
  2278   00329E  0E00               	movlw	0
  2279   0032A0  010F               	movlb	15	; () banked
  2280   0032A2  6F25               	movwf	37,b	;volatile
  2281                           
  2282                           ;dc_motor.c: 34:     CCPR4H=0;
  2283   0032A4  0E00               	movlw	0
  2284   0032A6  6F21               	movwf	33,b	;volatile
  2285                           
  2286                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  2287   0032A8  0EFC               	movlw	-4
  2288   0032AA  16AD               	andwf	173,f,c	;volatile
  2289                           
  2290                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  2291   0032AC  0EF3               	movlw	-13
  2292   0032AE  16AD               	andwf	173,f,c	;volatile
  2293                           
  2294                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  2295   0032B0  0ECF               	movlw	-49
  2296   0032B2  16AD               	andwf	173,f,c	;volatile
  2297                           
  2298                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  2299   0032B4  0E3F               	movlw	-193
  2300   0032B6  16AD               	andwf	173,f,c	;volatile
  2301   0032B8                     
  2302                           ; BSR set to: 15
  2303                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  2304   0032B8  88AB               	bsf	171,4,c	;volatile
  2305                           
  2306                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  2307   0032BA  50AB               	movf	171,w,c	;volatile
  2308   0032BC  0BF0               	andlw	-16
  2309   0032BE  090C               	iorlw	12
  2310   0032C0  6EAB               	movwf	171,c	;volatile
  2311   0032C2                     
  2312                           ; BSR set to: 15
  2313                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  2314   0032C2  8EAB               	bsf	171,7,c	;volatile
  2315   0032C4                     
  2316                           ; BSR set to: 15
  2317                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  2318   0032C4  88A7               	bsf	167,4,c	;volatile
  2319                           
  2320                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  2321   0032C6  50A7               	movf	167,w,c	;volatile
  2322   0032C8  0BF0               	andlw	-16
  2323   0032CA  090C               	iorlw	12
  2324   0032CC  6EA7               	movwf	167,c	;volatile
  2325   0032CE                     
  2326                           ; BSR set to: 15
  2327                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2328   0032CE  8EA7               	bsf	167,7,c	;volatile
  2329   0032D0                     
  2330                           ; BSR set to: 15
  2331                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2332   0032D0  8926               	bsf	38,4,b	;volatile
  2333                           
  2334                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2335   0032D2  5126               	movf	38,w,b	;volatile
  2336   0032D4  0BF0               	andlw	-16
  2337   0032D6  090C               	iorlw	12
  2338   0032D8  6F26               	movwf	38,b	;volatile
  2339   0032DA                     
  2340                           ; BSR set to: 15
  2341                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2342   0032DA  8F26               	bsf	38,7,b	;volatile
  2343   0032DC                     
  2344                           ; BSR set to: 15
  2345                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2346   0032DC  8922               	bsf	34,4,b	;volatile
  2347                           
  2348                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2349   0032DE  5122               	movf	34,w,b	;volatile
  2350   0032E0  0BF0               	andlw	-16
  2351   0032E2  090C               	iorlw	12
  2352   0032E4  6F22               	movwf	34,b	;volatile
  2353   0032E6                     
  2354                           ; BSR set to: 15
  2355                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2356   0032E6  8F22               	bsf	34,7,b	;volatile
  2357   0032E8                     
  2358                           ; BSR set to: 15
  2359   0032E8  0012               	return		;funcret
  2360   0032EA                     __end_of_initDCmotorsPWM:
  2361                           	callstack 0
  2362                           
  2363 ;; *************** function _color_click_init *****************
  2364 ;; Defined at:
  2365 ;;		line 5 in file "color.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; Hardware stack levels required when called: 4
  2386 ;; This function calls:
  2387 ;;		_I2C_2_Master_Init
  2388 ;;		_color_writetoaddr
  2389 ;; This function is called by:
  2390 ;;		_main
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text3
  2395   0037EE                     __ptext3:
  2396                           	callstack 0
  2397   0037EE                     _color_click_init:
  2398                           	callstack 26
  2399   0037EE                     
  2400                           ;color.c: 8:     I2C_2_Master_Init();
  2401   0037EE  EC29  F01C         	call	_I2C_2_Master_Init	;wreg free
  2402   0037F2                     
  2403                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2404   0037F2  0E01               	movlw	1
  2405   0037F4  6E06               	movwf	color_writetoaddr@value^0,c
  2406   0037F6  0E00               	movlw	0
  2407   0037F8  ECB3  F01C         	call	_color_writetoaddr
  2408   0037FC                     
  2409                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2410   0037FC  0E3F               	movlw	63
  2411   0037FE  6E08               	movwf	??_color_click_init^0,c
  2412   003800  0E55               	movlw	85
  2413   003802                     u2017:
  2414   003802  2EE8               	decfsz	wreg,f,c
  2415   003804  D7FE               	bra	u2017
  2416   003806  2E08               	decfsz	??_color_click_init^0,f,c
  2417   003808  D7FC               	bra	u2017
  2418   00380A  F000               	nop	
  2419   00380C                     
  2420                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2421   00380C  0E03               	movlw	3
  2422   00380E  6E06               	movwf	color_writetoaddr@value^0,c
  2423   003810  0E00               	movlw	0
  2424   003812  ECB3  F01C         	call	_color_writetoaddr
  2425   003816                     
  2426                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2427   003816  0ED5               	movlw	213
  2428   003818  6E06               	movwf	color_writetoaddr@value^0,c
  2429   00381A  0E01               	movlw	1
  2430   00381C  ECB3  F01C         	call	_color_writetoaddr
  2431   003820  0012               	return		;funcret
  2432   003822                     __end_of_color_click_init:
  2433                           	callstack 0
  2434                           
  2435 ;; *************** function _color_writetoaddr *****************
  2436 ;; Defined at:
  2437 ;;		line 21 in file "color.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  address         1    wreg     unsigned char 
  2440 ;;  value           1    5[COMRAM] unsigned char 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  address         1    6[COMRAM] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2452 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used: 1
  2458 ;; Hardware stack levels required when called: 3
  2459 ;; This function calls:
  2460 ;;		_I2C_2_Master_Start
  2461 ;;		_I2C_2_Master_Stop
  2462 ;;		_I2C_2_Master_Write
  2463 ;; This function is called by:
  2464 ;;		_color_click_init
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text4
  2469   003966                     __ptext4:
  2470                           	callstack 0
  2471   003966                     _color_writetoaddr:
  2472                           	callstack 26
  2473                           
  2474                           ;incstack = 0
  2475                           ;color_writetoaddr@address stored from wreg
  2476   003966  6E07               	movwf	color_writetoaddr@address^0,c
  2477   003968                     
  2478                           ;color.c: 22:     I2C_2_Master_Start();
  2479   003968  ECDA  F01C         	call	_I2C_2_Master_Start	;wreg free
  2480                           
  2481                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2482   00396C  0E52               	movlw	82
  2483   00396E  ECCF  F01C         	call	_I2C_2_Master_Write
  2484                           
  2485                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2486   003972  5007               	movf	color_writetoaddr@address^0,w,c
  2487   003974  0980               	iorlw	128
  2488   003976  ECCF  F01C         	call	_I2C_2_Master_Write
  2489                           
  2490                           ;color.c: 25:     I2C_2_Master_Write(value);
  2491   00397A  5006               	movf	color_writetoaddr@value^0,w,c
  2492   00397C  ECCF  F01C         	call	_I2C_2_Master_Write
  2493                           
  2494                           ;color.c: 26:     I2C_2_Master_Stop();
  2495   003980  ECD5  F01C         	call	_I2C_2_Master_Stop	;wreg free
  2496   003984  0012               	return		;funcret
  2497   003986                     __end_of_color_writetoaddr:
  2498                           	callstack 0
  2499                           
  2500 ;; *************** function _I2C_2_Master_Init *****************
  2501 ;; Defined at:
  2502 ;;		line 4 in file "i2c.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; Hardware stack levels required when called: 1
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_color_click_init
  2527 ;;		_main
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text5
  2532   003852                     __ptext5:
  2533                           	callstack 0
  2534   003852                     _I2C_2_Master_Init:
  2535                           	callstack 28
  2536   003852                     
  2537                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2538   003852  010E               	movlb	14	; () banked
  2539   003854  51D9               	movf	217,w,b	;volatile
  2540   003856  0BF0               	andlw	-16
  2541   003858  0908               	iorlw	8
  2542   00385A  6FD9               	movwf	217,b	;volatile
  2543   00385C                     
  2544                           ; BSR set to: 14
  2545                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2546   00385C  8BD9               	bsf	217,5,b	;volatile
  2547                           
  2548                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2549   00385E  0E9F               	movlw	159
  2550   003860  6FD6               	movwf	214,b	;volatile
  2551   003862                     
  2552                           ; BSR set to: 14
  2553                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2554   003862  8A84               	bsf	132,5,c	;volatile
  2555   003864                     
  2556                           ; BSR set to: 14
  2557                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2558   003864  8C84               	bsf	132,6,c	;volatile
  2559   003866                     
  2560                           ; BSR set to: 14
  2561                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2562   003866  9BA7               	bcf	167,5,b	;volatile
  2563   003868                     
  2564                           ; BSR set to: 14
  2565                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2566   003868  9DA7               	bcf	167,6,b	;volatile
  2567                           
  2568                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2569   00386A  0E1D               	movlw	29
  2570   00386C  6F1D               	movwf	29,b	;volatile
  2571                           
  2572                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2573   00386E  0E1E               	movlw	30
  2574   003870  6F1C               	movwf	28,b	;volatile
  2575                           
  2576                           ;i2c.c: 18:   RD5PPS=0x1C;
  2577   003872  0E1C               	movlw	28
  2578   003874  6F6F               	movwf	111,b	;volatile
  2579                           
  2580                           ;i2c.c: 19:   RD6PPS=0x1B;
  2581   003876  0E1B               	movlw	27
  2582   003878  6F70               	movwf	112,b	;volatile
  2583   00387A                     
  2584                           ; BSR set to: 14
  2585   00387A  0012               	return		;funcret
  2586   00387C                     __end_of_I2C_2_Master_Init:
  2587                           	callstack 0
  2588                           
  2589 ;; *************** function _clear_read_calibration *****************
  2590 ;; Defined at:
  2591 ;;		line 11 in file "colour_identify.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2594 ;;		 -> main@buf(150), 
  2595 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2596 ;;		 -> main@clear_read(2), 
  2597 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2598 ;;		 -> main@clear_read_check(2), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  i               2   45[BANK0 ] int 
  2601 ;;  i               2   43[BANK0 ] int 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2611 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;Total ram usage:       14 bytes
  2616 ;; Hardware stack levels used: 1
  2617 ;; Hardware stack levels required when called: 9
  2618 ;; This function calls:
  2619 ;;		_color_read_Clear
  2620 ;;		_sendStringSerial4
  2621 ;;		_sprintf
  2622 ;; This function is called by:
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text6
  2628   002D02                     __ptext6:
  2629                           	callstack 0
  2630   002D02                     _clear_read_calibration:
  2631                           	callstack 21
  2632   002D02                     
  2633                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2634   002D02  0E00               	movlw	0
  2635   002D04  0100               	movlb	0	; () banked
  2636   002D06  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2637   002D08  0E00               	movlw	0
  2638   002D0A  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2639   002D0C                     l3984:
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2643   002D0C  EC44  F01B         	call	_color_read_Clear	;wreg free
  2644   002D10  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2645   002D14  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2646   002D18  C008  FFDE         	movff	?_color_read_Clear,postinc2
  2647   002D1C  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  2648   002D20                     
  2649                           ;colour_identify.c: 15:     }
  2650   002D20  0100               	movlb	0	; () banked
  2651   002D22  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2652   002D24  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2653   002D26                     
  2654                           ; BSR set to: 0
  2655   002D26  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2656   002D28  EF9F  F016         	goto	u1811
  2657   002D2C  0EF5               	movlw	245
  2658   002D2E  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2659   002D30  0E01               	movlw	1
  2660   002D32  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2661   002D34  A0D8               	btfss	status,0,c
  2662   002D36  EF9F  F016         	goto	u1811
  2663   002D3A  EFA1  F016         	goto	u1810
  2664   002D3E                     u1811:
  2665   002D3E  EF86  F016         	goto	l3984
  2666   002D42                     u1810:
  2667   002D42                     
  2668                           ; BSR set to: 0
  2669                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2670   002D42  0E00               	movlw	0
  2671   002D44  6F8E               	movwf	(clear_read_calibration@i_1645+1)& (0+255),b
  2672   002D46  0E00               	movlw	0
  2673   002D48  6F8D               	movwf	clear_read_calibration@i_1645& (0+255),b
  2674   002D4A                     l3996:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2678   002D4A  EC44  F01B         	call	_color_read_Clear	;wreg free
  2679   002D4E  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2680   002D52  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2681   002D56  5008               	movf	?_color_read_Clear^0,w,c
  2682   002D58  26DE               	addwf	postinc2,f,c
  2683   002D5A  5009               	movf	(?_color_read_Clear+1)^0,w,c
  2684   002D5C  22DD               	addwfc	postdec2,f,c
  2685   002D5E                     
  2686                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2687   002D5E  0E11               	movlw	17
  2688   002D60  0100               	movlb	0	; () banked
  2689   002D62  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2690   002D64  0E3C               	movlw	60
  2691   002D66  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2692   002D68  0ECB               	movlw	203
  2693   002D6A                     u2027:
  2694   002D6A  2EE8               	decfsz	wreg,f,c
  2695   002D6C  D7FE               	bra	u2027
  2696   002D6E  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2697   002D70  D7FC               	bra	u2027
  2698   002D72  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2699   002D74  D7FA               	bra	u2027
  2700   002D76                     
  2701                           ;colour_identify.c: 20:     }
  2702   002D76  0100               	movlb	0	; () banked
  2703   002D78  4B8D               	infsnz	clear_read_calibration@i_1645& (0+255),f,b
  2704   002D7A  2B8E               	incf	(clear_read_calibration@i_1645+1)& (0+255),f,b
  2705   002D7C                     
  2706                           ; BSR set to: 0
  2707   002D7C  BF8E               	btfsc	(clear_read_calibration@i_1645+1)& (0+255),7,b
  2708   002D7E  EFCA  F016         	goto	u1821
  2709   002D82  518E               	movf	(clear_read_calibration@i_1645+1)& (0+255),w,b
  2710   002D84  E109               	bnz	u1820
  2711   002D86  0E03               	movlw	3
  2712   002D88  5D8D               	subwf	clear_read_calibration@i_1645& (0+255),w,b
  2713   002D8A  A0D8               	btfss	status,0,c
  2714   002D8C  EFCA  F016         	goto	u1821
  2715   002D90  EFCC  F016         	goto	u1820
  2716   002D94                     u1821:
  2717   002D94  EFA5  F016         	goto	l3996
  2718   002D98                     u1820:
  2719   002D98                     
  2720                           ; BSR set to: 0
  2721                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2722   002D98  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2723   002D9C  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2724   002DA0  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2725   002DA4  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2726   002DA8  90D8               	bcf	status,0,c
  2727   002DAA  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2728   002DAC  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2729   002DAE  90D8               	bcf	status,0,c
  2730   002DB0  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2731   002DB2  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2732   002DB4  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2733   002DB8  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2734   002DBC  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2735   002DC0  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2736   002DC4                     
  2737                           ; BSR set to: 0
  2738                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2739   002DC4  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2740   002DC8  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2741   002DCC  0EA9               	movlw	low STR_2
  2742   002DCE  6F68               	movwf	sprintf@fmt& (0+255),b
  2743   002DD0  0E0E               	movlw	high STR_2
  2744   002DD2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2745   002DD4  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2746   002DD8  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2747   002DDC  ECCB  F01A         	call	_sprintf	;wreg free
  2748   002DE0                     
  2749                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2750   002DE0  C081  F005         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2751   002DE4  C082  F006         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2752   002DE8  EC11  F01C         	call	_sendStringSerial4	;wreg free
  2753   002DEC                     
  2754                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2755   002DEC  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2756   002DF0  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2757   002DF4  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2758   002DF8  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2759   002DFC  0E20               	movlw	32
  2760   002DFE  0100               	movlb	0	; () banked
  2761   002E00  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2762   002E02  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2763   002E04  0E03               	movlw	3
  2764   002E06  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2765   002E08  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2766   002E0A  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2767   002E0E  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2768   002E12  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2769   002E16  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2770   002E1A                     
  2771                           ; BSR set to: 0
  2772   002E1A  0012               	return		;funcret
  2773   002E1C                     __end_of_clear_read_calibration:
  2774                           	callstack 0
  2775                           
  2776 ;; *************** function _card_response *****************
  2777 ;; Defined at:
  2778 ;;		line 308 in file "colour_identify.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  buf             2    0[BANK1 ] PTR unsigned char 
  2781 ;;		 -> main@buf(150), 
  2782 ;;  clear_read      2    2[BANK1 ] PTR unsigned int 
  2783 ;;		 -> main@clear_read(2), 
  2784 ;;  red_read        2    4[BANK1 ] PTR unsigned int 
  2785 ;;		 -> main@red_read(2), 
  2786 ;;  green_read      2    6[BANK1 ] PTR unsigned int 
  2787 ;;		 -> main@green_read(2), 
  2788 ;;  blue_read       2    8[BANK1 ] PTR unsigned int 
  2789 ;;		 -> main@blue_read(2), 
  2790 ;;  expected_val    2   10[BANK1 ] PTR unsigned int [9]
  2791 ;;		 -> main@expected_values(72), 
  2792 ;;  card            1   12[BANK1 ] enum E14551
  2793 ;;  mL              2   13[BANK1 ] PTR struct DC_motor
  2794 ;;		 -> main@motorL(9), 
  2795 ;;  mR              2   15[BANK1 ] PTR struct DC_motor
  2796 ;;		 -> main@motorR(9), 
  2797 ;;  ReturnHomeAr   60   17[BANK1 ] struct HomeStored
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  normalised_v   72   77[BANK1 ] unsigned int [9][4]
  2800 ;;  master_close   18  149[BANK1 ] unsigned int [9]
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      enum E14569
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2810 ;;      Params:         0       0      77       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Locals:         0       0      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;      Totals:         0       0     167       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2814 ;;Total ram usage:      167 bytes
  2815 ;; Hardware stack levels used: 1
  2816 ;; Hardware stack levels required when called: 10
  2817 ;; This function calls:
  2818 ;;		_collect_avg_readings
  2819 ;;		_determine_card
  2820 ;;		_make_master_closeness
  2821 ;;		_motor_response
  2822 ;;		_normalise_readings
  2823 ;;		_sendStringSerial4
  2824 ;;		_sprintf
  2825 ;; This function is called by:
  2826 ;;		_main
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text7
  2831   002766                     __ptext7:
  2832                           	callstack 0
  2833   002766                     _card_response:
  2834                           	callstack 20
  2835   002766                     
  2836                           ;colour_identify.c: 312:     unsigned int normalised_values[4][9];;colour_identify.c: 31
      +                          3:     unsigned int master_closeness[9];;colour_identify.c: 315:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2837   002766  C102  F00F         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2838   00276A  C103  F010         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2839   00276E  C104  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  2840   002772  C105  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2841   002776  C106  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  2842   00277A  C107  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2843   00277E  C108  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2844   002782  C109  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2845   002786  ECB2  F011         	call	_collect_avg_readings	;wreg free
  2846   00278A                     
  2847                           ;colour_identify.c: 316:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2848   00278A  C100  F066         	movff	card_response@buf,sprintf@s
  2849   00278E  C101  F067         	movff	card_response@buf+1,sprintf@s+1
  2850   002792  0E33               	movlw	low STR_10
  2851   002794  0100               	movlb	0	; () banked
  2852   002796  6F68               	movwf	sprintf@fmt& (0+255),b
  2853   002798  0E0E               	movlw	high STR_10
  2854   00279A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2855   00279C  C102  FFD9         	movff	card_response@clear_read,fsr2l
  2856   0027A0  C103  FFDA         	movff	card_response@clear_read+1,fsr2h
  2857   0027A4  CFDE F06A          	movff	postinc2,?_sprintf+4
  2858   0027A8  CFDD F06B          	movff	postdec2,?_sprintf+5
  2859   0027AC  C104  FFD9         	movff	card_response@red_read,fsr2l
  2860   0027B0  C105  FFDA         	movff	card_response@red_read+1,fsr2h
  2861   0027B4  CFDE F06C          	movff	postinc2,?_sprintf+6
  2862   0027B8  CFDD F06D          	movff	postdec2,?_sprintf+7
  2863   0027BC  C106  FFD9         	movff	card_response@green_read,fsr2l
  2864   0027C0  C107  FFDA         	movff	card_response@green_read+1,fsr2h
  2865   0027C4  CFDE F06E          	movff	postinc2,?_sprintf+8
  2866   0027C8  CFDD F06F          	movff	postdec2,?_sprintf+9
  2867   0027CC  C108  FFD9         	movff	card_response@blue_read,fsr2l
  2868   0027D0  C109  FFDA         	movff	card_response@blue_read+1,fsr2h
  2869   0027D4  CFDE F070          	movff	postinc2,?_sprintf+10
  2870   0027D8  CFDD F071          	movff	postdec2,?_sprintf+11
  2871   0027DC  ECCB  F01A         	call	_sprintf	;wreg free
  2872   0027E0                     
  2873                           ;colour_identify.c: 317:     sendStringSerial4(buf);
  2874   0027E0  C100  F005         	movff	card_response@buf,sendStringSerial4@string
  2875   0027E4  C101  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2876   0027E8  EC11  F01C         	call	_sendStringSerial4	;wreg free
  2877   0027EC                     
  2878                           ;colour_identify.c: 319:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2879   0027EC  C100  F01A         	movff	card_response@buf,normalise_readings@buf
  2880   0027F0  C101  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  2881   0027F4  C102  FFD9         	movff	card_response@clear_read,fsr2l
  2882   0027F8  C103  FFDA         	movff	card_response@clear_read+1,fsr2h
  2883   0027FC  CFDE F01C          	movff	postinc2,normalise_readings@clear_read
  2884   002800  CFDD F01D          	movff	postdec2,normalise_readings@clear_read+1
  2885   002804  C104  FFD9         	movff	card_response@red_read,fsr2l
  2886   002808  C105  FFDA         	movff	card_response@red_read+1,fsr2h
  2887   00280C  CFDE F01E          	movff	postinc2,normalise_readings@red_read
  2888   002810  CFDD F01F          	movff	postdec2,normalise_readings@red_read+1
  2889   002814  C106  FFD9         	movff	card_response@green_read,fsr2l
  2890   002818  C107  FFDA         	movff	card_response@green_read+1,fsr2h
  2891   00281C  CFDE F020          	movff	postinc2,normalise_readings@green_read
  2892   002820  CFDD F021          	movff	postdec2,normalise_readings@green_read+1
  2893   002824  C108  FFD9         	movff	card_response@blue_read,fsr2l
  2894   002828  C109  FFDA         	movff	card_response@blue_read+1,fsr2h
  2895   00282C  CFDE F022          	movff	postinc2,normalise_readings@blue_read
  2896   002830  CFDD F023          	movff	postdec2,normalise_readings@blue_read+1
  2897   002834  C10A  F024         	movff	card_response@expected_values,normalise_readings@expected_values
  2898   002838  C10B  F025         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2899   00283C  0E4D               	movlw	low card_response@normalised_values
  2900   00283E  6E26               	movwf	normalise_readings@normalised_values^0,c
  2901   002840  0E01               	movlw	high card_response@normalised_values
  2902   002842  6E27               	movwf	(normalise_readings@normalised_values+1)^0,c
  2903   002844  EC01  F00F         	call	_normalise_readings	;wreg free
  2904   002848                     
  2905                           ;colour_identify.c: 321:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2906   002848  C100  F004         	movff	card_response@buf,make_master_closeness@buf
  2907   00284C  C101  F005         	movff	card_response@buf+1,make_master_closeness@buf+1
  2908   002850  0E4D               	movlw	low card_response@normalised_values
  2909   002852  6E06               	movwf	make_master_closeness@normalised_values^0,c
  2910   002854  0E01               	movlw	high card_response@normalised_values
  2911   002856  6E07               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2912   002858  0E95               	movlw	low card_response@master_closeness
  2913   00285A  6E08               	movwf	make_master_closeness@master_closeness^0,c
  2914   00285C  0E01               	movlw	high card_response@master_closeness
  2915   00285E  6E09               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2916   002860  EC0E  F017         	call	_make_master_closeness	;wreg free
  2917   002864                     
  2918                           ;colour_identify.c: 323:     card = determine_card(master_closeness);
  2919   002864  0E95               	movlw	low card_response@master_closeness
  2920   002866  6E04               	movwf	determine_card@master_closeness^0,c
  2921   002868  0E01               	movlw	high card_response@master_closeness
  2922   00286A  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  2923   00286C  ECB8  F019         	call	_determine_card	;wreg free
  2924   002870  0101               	movlb	1	; () banked
  2925   002872  6F0C               	movwf	card_response@card& (0+255),b
  2926   002874                     
  2927                           ; BSR set to: 1
  2928                           ;colour_identify.c: 324:     sprintf(buf, "CARD %d \n", card);
  2929   002874  C100  F066         	movff	card_response@buf,sprintf@s
  2930   002878  C101  F067         	movff	card_response@buf+1,sprintf@s+1
  2931   00287C  0EE5               	movlw	low STR_11
  2932   00287E  0100               	movlb	0	; () banked
  2933   002880  6F68               	movwf	sprintf@fmt& (0+255),b
  2934   002882  0E0E               	movlw	high STR_11
  2935   002884  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2936   002886  C10C  F06A         	movff	card_response@card,?_sprintf+4
  2937   00288A  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2938   00288C  ECCB  F01A         	call	_sprintf	;wreg free
  2939   002890                     
  2940                           ;colour_identify.c: 325:     sendStringSerial4(buf);
  2941   002890  C100  F005         	movff	card_response@buf,sendStringSerial4@string
  2942   002894  C101  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2943   002898  EC11  F01C         	call	_sendStringSerial4	;wreg free
  2944   00289C                     
  2945                           ;colour_identify.c: 327:     motor_response(buf, card, mL, mR, ReturnHomeArray);
  2946   00289C  C100  F081         	movff	card_response@buf,motor_response@buf
  2947   0028A0  C101  F082         	movff	card_response@buf+1,motor_response@buf+1
  2948   0028A4  C10C  F083         	movff	card_response@card,motor_response@card
  2949   0028A8  C10D  F084         	movff	card_response@mL,motor_response@mL
  2950   0028AC  C10E  F085         	movff	card_response@mL+1,motor_response@mL+1
  2951   0028B0  C10F  F086         	movff	card_response@mR,motor_response@mR
  2952   0028B4  C110  F087         	movff	card_response@mR+1,motor_response@mR+1
  2953   0028B8  EE21  F011         	lfsr	2,card_response@ReturnHomeArray
  2954   0028BC  EE00  F088         	lfsr	0,motor_response@ReturnHomeArray
  2955   0028C0  0E3B               	movlw	59
  2956   0028C2                     u1831:
  2957   0028C2  CFDB FFEB          	movff	plusw2,plusw0
  2958   0028C6  06E8               	decf	wreg,f,c
  2959   0028C8  E2FC               	bc	u1831
  2960   0028CA  EC7D  F007         	call	_motor_response	;wreg free
  2961   0028CE                     
  2962                           ;colour_identify.c: 329:     return card;
  2963   0028CE  0101               	movlb	1	; () banked
  2964   0028D0  510C               	movf	card_response@card& (0+255),w,b
  2965   0028D2                     
  2966                           ; BSR set to: 1
  2967   0028D2  0012               	return		;funcret
  2968   0028D4                     __end_of_card_response:
  2969                           	callstack 0
  2970                           
  2971 ;; *************** function _normalise_readings *****************
  2972 ;; Defined at:
  2973 ;;		line 70 in file "colour_identify.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  buf             2   25[COMRAM] PTR unsigned char 
  2976 ;;		 -> main@buf(150), 
  2977 ;;  clear_read      2   27[COMRAM] unsigned int 
  2978 ;;  red_read        2   29[COMRAM] unsigned int 
  2979 ;;  green_read      2   31[COMRAM] unsigned int 
  2980 ;;  blue_read       2   33[COMRAM] unsigned int 
  2981 ;;  expected_val    2   35[COMRAM] PTR unsigned int [9]
  2982 ;;		 -> main@expected_values(72), 
  2983 ;;  normalised_v    2   37[COMRAM] PTR unsigned int [9]
  2984 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  difference      2   47[COMRAM] unsigned int 
  2987 ;;  i               1   49[COMRAM] enum E14551
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2997 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2998 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2999 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3000 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3001 ;;Total ram usage:       25 bytes
  3002 ;; Hardware stack levels used: 1
  3003 ;; Hardware stack levels required when called: 2
  3004 ;; This function calls:
  3005 ;;		___lwdiv
  3006 ;;		___wmul
  3007 ;;		_abs
  3008 ;; This function is called by:
  3009 ;;		_card_response
  3010 ;;		_card_response_easy
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text8
  3015   001E02                     __ptext8:
  3016                           	callstack 0
  3017   001E02                     _normalise_readings:
  3018                           	callstack 27
  3019   001E02                     
  3020                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  3021   001E02  0E00               	movlw	0
  3022   001E04  6E32               	movwf	normalise_readings@i^0,c
  3023   001E06                     l3122:
  3024                           
  3025                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3026   001E06  5032               	movf	normalise_readings@i^0,w,c
  3027   001E08  0D02               	mullw	2
  3028   001E0A  CFF3 F028          	movff	prodl,??_normalise_readings
  3029   001E0E  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3030   001E12  5028               	movf	??_normalise_readings^0,w,c
  3031   001E14  2424               	addwf	normalise_readings@expected_values^0,w,c
  3032   001E16  6ED9               	movwf	fsr2l,c
  3033   001E18  5029               	movf	(??_normalise_readings+1)^0,w,c
  3034   001E1A  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3035   001E1C  6EDA               	movwf	fsr2h,c
  3036   001E1E  CFDE F02A          	movff	postinc2,??_normalise_readings+2
  3037   001E22  CFDD F02B          	movff	postdec2,??_normalise_readings+3
  3038   001E26  502A               	movf	(??_normalise_readings+2)^0,w,c
  3039   001E28  5C1E               	subwf	normalise_readings@red_read^0,w,c
  3040   001E2A  6E16               	movwf	abs@a^0,c
  3041   001E2C  502B               	movf	(??_normalise_readings+3)^0,w,c
  3042   001E2E  581F               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3043   001E30  6E17               	movwf	(abs@a+1)^0,c
  3044   001E32  ECD7  F01B         	call	_abs	;wreg free
  3045   001E36  C016  F030         	movff	?_abs,normalise_readings@difference
  3046   001E3A  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3047                           
  3048                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3049   001E3E  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3050   001E42  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3051   001E46  0E00               	movlw	0
  3052   001E48  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3053   001E4A  0E64               	movlw	100
  3054   001E4C  6E06               	movwf	___wmul@multiplicand^0,c
  3055   001E4E  EC90  F01C         	call	___wmul	;wreg free
  3056   001E52  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3057   001E56  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3058   001E5A  5032               	movf	normalise_readings@i^0,w,c
  3059   001E5C  0D02               	mullw	2
  3060   001E5E  CFF3 F028          	movff	prodl,??_normalise_readings
  3061   001E62  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3062   001E66  5028               	movf	??_normalise_readings^0,w,c
  3063   001E68  2424               	addwf	normalise_readings@expected_values^0,w,c
  3064   001E6A  6ED9               	movwf	fsr2l,c
  3065   001E6C  5029               	movf	(??_normalise_readings+1)^0,w,c
  3066   001E6E  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3067   001E70  6EDA               	movwf	fsr2h,c
  3068   001E72  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3069   001E76  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3070   001E7A  EC35  F01A         	call	___lwdiv	;wreg free
  3071   001E7E  5032               	movf	normalise_readings@i^0,w,c
  3072   001E80  0D02               	mullw	2
  3073   001E82  CFF3 F02A          	movff	prodl,??_normalise_readings+2
  3074   001E86  CFF4 F02B          	movff	prodh,??_normalise_readings+3
  3075   001E8A  502A               	movf	(??_normalise_readings+2)^0,w,c
  3076   001E8C  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3077   001E8E  6ED9               	movwf	fsr2l,c
  3078   001E90  502B               	movf	(??_normalise_readings+3)^0,w,c
  3079   001E92  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3080   001E94  6EDA               	movwf	fsr2h,c
  3081   001E96  C00A  FFDE         	movff	?___lwdiv,postinc2
  3082   001E9A  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3083                           
  3084                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3085   001E9E  5032               	movf	normalise_readings@i^0,w,c
  3086   001EA0  0D02               	mullw	2
  3087   001EA2  CFF3 F028          	movff	prodl,??_normalise_readings
  3088   001EA6  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3089   001EAA  5028               	movf	??_normalise_readings^0,w,c
  3090   001EAC  2424               	addwf	normalise_readings@expected_values^0,w,c
  3091   001EAE  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3092   001EB0  5029               	movf	(??_normalise_readings+1)^0,w,c
  3093   001EB2  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3094   001EB4  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3095   001EB6  0E12               	movlw	18
  3096   001EB8  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3097   001EBA  6ED9               	movwf	fsr2l,c
  3098   001EBC  0E00               	movlw	0
  3099   001EBE  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3100   001EC0  6EDA               	movwf	fsr2h,c
  3101   001EC2  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3102   001EC6  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3103   001ECA  502C               	movf	(??_normalise_readings+4)^0,w,c
  3104   001ECC  5C20               	subwf	normalise_readings@green_read^0,w,c
  3105   001ECE  6E16               	movwf	abs@a^0,c
  3106   001ED0  502D               	movf	(??_normalise_readings+5)^0,w,c
  3107   001ED2  5821               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3108   001ED4  6E17               	movwf	(abs@a+1)^0,c
  3109   001ED6  ECD7  F01B         	call	_abs	;wreg free
  3110   001EDA  C016  F030         	movff	?_abs,normalise_readings@difference
  3111   001EDE  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3112                           
  3113                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3114   001EE2  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3115   001EE6  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3116   001EEA  0E00               	movlw	0
  3117   001EEC  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3118   001EEE  0E64               	movlw	100
  3119   001EF0  6E06               	movwf	___wmul@multiplicand^0,c
  3120   001EF2  EC90  F01C         	call	___wmul	;wreg free
  3121   001EF6  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3122   001EFA  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3123   001EFE  5032               	movf	normalise_readings@i^0,w,c
  3124   001F00  0D02               	mullw	2
  3125   001F02  CFF3 F028          	movff	prodl,??_normalise_readings
  3126   001F06  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3127   001F0A  5028               	movf	??_normalise_readings^0,w,c
  3128   001F0C  2424               	addwf	normalise_readings@expected_values^0,w,c
  3129   001F0E  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3130   001F10  5029               	movf	(??_normalise_readings+1)^0,w,c
  3131   001F12  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3132   001F14  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3133   001F16  0E12               	movlw	18
  3134   001F18  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3135   001F1A  6ED9               	movwf	fsr2l,c
  3136   001F1C  0E00               	movlw	0
  3137   001F1E  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3138   001F20  6EDA               	movwf	fsr2h,c
  3139   001F22  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3140   001F26  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3141   001F2A  EC35  F01A         	call	___lwdiv	;wreg free
  3142   001F2E  5032               	movf	normalise_readings@i^0,w,c
  3143   001F30  0D02               	mullw	2
  3144   001F32  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3145   001F36  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3146   001F3A  502C               	movf	(??_normalise_readings+4)^0,w,c
  3147   001F3C  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3148   001F3E  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3149   001F40  502D               	movf	(??_normalise_readings+5)^0,w,c
  3150   001F42  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3151   001F44  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3152   001F46  0E12               	movlw	18
  3153   001F48  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3154   001F4A  6ED9               	movwf	fsr2l,c
  3155   001F4C  0E00               	movlw	0
  3156   001F4E  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3157   001F50  6EDA               	movwf	fsr2h,c
  3158   001F52  C00A  FFDE         	movff	?___lwdiv,postinc2
  3159   001F56  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3160                           
  3161                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  3162   001F5A  5032               	movf	normalise_readings@i^0,w,c
  3163   001F5C  0D02               	mullw	2
  3164   001F5E  CFF3 F028          	movff	prodl,??_normalise_readings
  3165   001F62  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3166   001F66  5028               	movf	??_normalise_readings^0,w,c
  3167   001F68  2424               	addwf	normalise_readings@expected_values^0,w,c
  3168   001F6A  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3169   001F6C  5029               	movf	(??_normalise_readings+1)^0,w,c
  3170   001F6E  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3171   001F70  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3172   001F72  0E24               	movlw	36
  3173   001F74  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3174   001F76  6ED9               	movwf	fsr2l,c
  3175   001F78  0E00               	movlw	0
  3176   001F7A  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3177   001F7C  6EDA               	movwf	fsr2h,c
  3178   001F7E  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3179   001F82  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3180   001F86  502C               	movf	(??_normalise_readings+4)^0,w,c
  3181   001F88  5C22               	subwf	normalise_readings@blue_read^0,w,c
  3182   001F8A  6E16               	movwf	abs@a^0,c
  3183   001F8C  502D               	movf	(??_normalise_readings+5)^0,w,c
  3184   001F8E  5823               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3185   001F90  6E17               	movwf	(abs@a+1)^0,c
  3186   001F92  ECD7  F01B         	call	_abs	;wreg free
  3187   001F96  C016  F030         	movff	?_abs,normalise_readings@difference
  3188   001F9A  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3189                           
  3190                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3191   001F9E  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3192   001FA2  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3193   001FA6  0E00               	movlw	0
  3194   001FA8  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3195   001FAA  0E64               	movlw	100
  3196   001FAC  6E06               	movwf	___wmul@multiplicand^0,c
  3197   001FAE  EC90  F01C         	call	___wmul	;wreg free
  3198   001FB2  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3199   001FB6  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3200   001FBA  5032               	movf	normalise_readings@i^0,w,c
  3201   001FBC  0D02               	mullw	2
  3202   001FBE  CFF3 F028          	movff	prodl,??_normalise_readings
  3203   001FC2  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3204   001FC6  5028               	movf	??_normalise_readings^0,w,c
  3205   001FC8  2424               	addwf	normalise_readings@expected_values^0,w,c
  3206   001FCA  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3207   001FCC  5029               	movf	(??_normalise_readings+1)^0,w,c
  3208   001FCE  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3209   001FD0  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3210   001FD2  0E24               	movlw	36
  3211   001FD4  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3212   001FD6  6ED9               	movwf	fsr2l,c
  3213   001FD8  0E00               	movlw	0
  3214   001FDA  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3215   001FDC  6EDA               	movwf	fsr2h,c
  3216   001FDE  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3217   001FE2  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3218   001FE6  EC35  F01A         	call	___lwdiv	;wreg free
  3219   001FEA  5032               	movf	normalise_readings@i^0,w,c
  3220   001FEC  0D02               	mullw	2
  3221   001FEE  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3222   001FF2  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3223   001FF6  502C               	movf	(??_normalise_readings+4)^0,w,c
  3224   001FF8  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3225   001FFA  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3226   001FFC  502D               	movf	(??_normalise_readings+5)^0,w,c
  3227   001FFE  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3228   002000  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3229   002002  0E24               	movlw	36
  3230   002004  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3231   002006  6ED9               	movwf	fsr2l,c
  3232   002008  0E00               	movlw	0
  3233   00200A  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3234   00200C  6EDA               	movwf	fsr2h,c
  3235   00200E  C00A  FFDE         	movff	?___lwdiv,postinc2
  3236   002012  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3237                           
  3238                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  3239   002016  5032               	movf	normalise_readings@i^0,w,c
  3240   002018  0D02               	mullw	2
  3241   00201A  CFF3 F028          	movff	prodl,??_normalise_readings
  3242   00201E  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3243   002022  5028               	movf	??_normalise_readings^0,w,c
  3244   002024  2424               	addwf	normalise_readings@expected_values^0,w,c
  3245   002026  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3246   002028  5029               	movf	(??_normalise_readings+1)^0,w,c
  3247   00202A  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3248   00202C  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3249   00202E  0E36               	movlw	54
  3250   002030  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3251   002032  6ED9               	movwf	fsr2l,c
  3252   002034  0E00               	movlw	0
  3253   002036  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3254   002038  6EDA               	movwf	fsr2h,c
  3255   00203A  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3256   00203E  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3257   002042  502C               	movf	(??_normalise_readings+4)^0,w,c
  3258   002044  5C1C               	subwf	normalise_readings@clear_read^0,w,c
  3259   002046  6E16               	movwf	abs@a^0,c
  3260   002048  502D               	movf	(??_normalise_readings+5)^0,w,c
  3261   00204A  581D               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3262   00204C  6E17               	movwf	(abs@a+1)^0,c
  3263   00204E  ECD7  F01B         	call	_abs	;wreg free
  3264   002052  C016  F030         	movff	?_abs,normalise_readings@difference
  3265   002056  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3266                           
  3267                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  3268   00205A  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3269   00205E  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3270   002062  0E00               	movlw	0
  3271   002064  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3272   002066  0E64               	movlw	100
  3273   002068  6E06               	movwf	___wmul@multiplicand^0,c
  3274   00206A  EC90  F01C         	call	___wmul	;wreg free
  3275   00206E  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3276   002072  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3277   002076  5032               	movf	normalise_readings@i^0,w,c
  3278   002078  0D02               	mullw	2
  3279   00207A  CFF3 F028          	movff	prodl,??_normalise_readings
  3280   00207E  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3281   002082  5028               	movf	??_normalise_readings^0,w,c
  3282   002084  2424               	addwf	normalise_readings@expected_values^0,w,c
  3283   002086  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3284   002088  5029               	movf	(??_normalise_readings+1)^0,w,c
  3285   00208A  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3286   00208C  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3287   00208E  0E36               	movlw	54
  3288   002090  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3289   002092  6ED9               	movwf	fsr2l,c
  3290   002094  0E00               	movlw	0
  3291   002096  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3292   002098  6EDA               	movwf	fsr2h,c
  3293   00209A  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3294   00209E  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3295   0020A2  EC35  F01A         	call	___lwdiv	;wreg free
  3296   0020A6  5032               	movf	normalise_readings@i^0,w,c
  3297   0020A8  0D02               	mullw	2
  3298   0020AA  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3299   0020AE  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3300   0020B2  502C               	movf	(??_normalise_readings+4)^0,w,c
  3301   0020B4  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3302   0020B6  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3303   0020B8  502D               	movf	(??_normalise_readings+5)^0,w,c
  3304   0020BA  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3305   0020BC  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3306   0020BE  0E36               	movlw	54
  3307   0020C0  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3308   0020C2  6ED9               	movwf	fsr2l,c
  3309   0020C4  0E00               	movlw	0
  3310   0020C6  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3311   0020C8  6EDA               	movwf	fsr2h,c
  3312   0020CA  C00A  FFDE         	movff	?___lwdiv,postinc2
  3313   0020CE  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3314   0020D2                     
  3315                           ;colour_identify.c: 97:     }
  3316   0020D2  2A32               	incf	normalise_readings@i^0,f,c
  3317   0020D4  0E08               	movlw	8
  3318   0020D6  6432               	cpfsgt	normalise_readings@i^0,c
  3319   0020D8  EF70  F010         	goto	u1481
  3320   0020DC  EF72  F010         	goto	u1480
  3321   0020E0                     u1481:
  3322   0020E0  EF03  F00F         	goto	l3122
  3323   0020E4                     u1480:
  3324   0020E4  0012               	return		;funcret
  3325   0020E6                     __end_of_normalise_readings:
  3326                           	callstack 0
  3327                           
  3328 ;; *************** function _motor_response *****************
  3329 ;; Defined at:
  3330 ;;		line 125 in file "colour_identify.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  3333 ;;		 -> main@buf(150), 
  3334 ;;  card            1   35[BANK0 ] enum E14551
  3335 ;;  mL              2   36[BANK0 ] PTR struct DC_motor
  3336 ;;		 -> main@motorL(9), 
  3337 ;;  mR              2   38[BANK0 ] PTR struct DC_motor
  3338 ;;		 -> main@motorR(9), 
  3339 ;;  ReturnHomeAr   60   40[BANK0 ] struct HomeStored
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  j               2  100[BANK0 ] int 
  3342 ;;  i               2  102[BANK0 ] int 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3352 ;;      Params:         0      67       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3355 ;;      Totals:         2      71       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3356 ;;Total ram usage:       73 bytes
  3357 ;; Hardware stack levels used: 1
  3358 ;; Hardware stack levels required when called: 9
  3359 ;; This function calls:
  3360 ;;		_fullSpeedAhead
  3361 ;;		_home_response
  3362 ;;		_reverseFullSpeed
  3363 ;;		_sendStringSerial4
  3364 ;;		_sprintf
  3365 ;;		_stop
  3366 ;;		_turnLeft45
  3367 ;;		_turnRight45
  3368 ;; This function is called by:
  3369 ;;		_card_response
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text9
  3374   000EFA                     __ptext9:
  3375                           	callstack 0
  3376   000EFA                     _motor_response:
  3377                           	callstack 20
  3378   000EFA                     
  3379                           ;colour_identify.c: 130:     switch (card){
  3380   000EFA  EF3E  F00A         	goto	l3970
  3381   000EFE                     l3822:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  3385   000EFE  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3386   000F02  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3387   000F06  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3388   000F0A  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3389   000F0E  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3390   000F12                     
  3391                           ;colour_identify.c: 133:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3392   000F12  0E0D               	movlw	13
  3393   000F14  6E57               	movwf	(??_motor_response+1)^0,c
  3394   000F16  0E2D               	movlw	45
  3395   000F18  6E56               	movwf	??_motor_response^0,c
  3396   000F1A  0ED8               	movlw	216
  3397   000F1C                     u2037:
  3398   000F1C  2EE8               	decfsz	wreg,f,c
  3399   000F1E  D7FE               	bra	u2037
  3400   000F20  2E56               	decfsz	??_motor_response^0,f,c
  3401   000F22  D7FC               	bra	u2037
  3402   000F24  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3403   000F26  D7FA               	bra	u2037
  3404   000F28                     l3826:
  3405                           
  3406                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  3407   000F28  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3408   000F2C  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3409   000F30  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3410   000F34  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3411   000F38  ECF9  F017         	call	_turnRight45	;wreg free
  3412   000F3C                     
  3413                           ;colour_identify.c: 135:             stop(mL,mR);
  3414   000F3C  C084  F017         	movff	motor_response@mL,stop@mL
  3415   000F40  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3416   000F44  C086  F019         	movff	motor_response@mR,stop@mR
  3417   000F48  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3418   000F4C  EC75  F019         	call	_stop	;wreg free
  3419   000F50                     
  3420                           ;colour_identify.c: 136:             turnRight45(mL,mR);
  3421   000F50  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3422   000F54  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3423   000F58  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3424   000F5C  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3425   000F60  ECF9  F017         	call	_turnRight45	;wreg free
  3426   000F64                     l3832:
  3427                           
  3428                           ;colour_identify.c: 137:             stop(mL,mR);
  3429   000F64  C084  F017         	movff	motor_response@mL,stop@mL
  3430   000F68  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3431   000F6C  C086  F019         	movff	motor_response@mR,stop@mR
  3432   000F70  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3433   000F74  EC75  F019         	call	_stop	;wreg free
  3434                           
  3435                           ;colour_identify.c: 138:             break;
  3436   000F78  EF70  F00A         	goto	l381
  3437   000F7C                     l3834:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  3441   000F7C  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3442   000F80  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3443   000F84  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3444   000F88  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3445   000F8C  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3446   000F90                     
  3447                           ;colour_identify.c: 141:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3448   000F90  0E0D               	movlw	13
  3449   000F92  6E57               	movwf	(??_motor_response+1)^0,c
  3450   000F94  0E2D               	movlw	45
  3451   000F96  6E56               	movwf	??_motor_response^0,c
  3452   000F98  0ED8               	movlw	216
  3453   000F9A                     u2047:
  3454   000F9A  2EE8               	decfsz	wreg,f,c
  3455   000F9C  D7FE               	bra	u2047
  3456   000F9E  2E56               	decfsz	??_motor_response^0,f,c
  3457   000FA0  D7FC               	bra	u2047
  3458   000FA2  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3459   000FA4  D7FA               	bra	u2047
  3460   000FA6                     l3838:
  3461                           
  3462                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  3463   000FA6  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3464   000FAA  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3465   000FAE  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3466   000FB2  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3467   000FB6  EC4F  F018         	call	_turnLeft45	;wreg free
  3468   000FBA                     
  3469                           ;colour_identify.c: 143:             stop(mL,mR);
  3470   000FBA  C084  F017         	movff	motor_response@mL,stop@mL
  3471   000FBE  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3472   000FC2  C086  F019         	movff	motor_response@mR,stop@mR
  3473   000FC6  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3474   000FCA  EC75  F019         	call	_stop	;wreg free
  3475   000FCE                     
  3476                           ;colour_identify.c: 144:             turnLeft45(mL,mR);
  3477   000FCE  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3478   000FD2  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3479   000FD6  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3480   000FDA  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3481   000FDE  EC4F  F018         	call	_turnLeft45	;wreg free
  3482   000FE2  EFB2  F007         	goto	l3832
  3483   000FE6                     l3846:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  3487   000FE6  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3488   000FEA  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3489   000FEE  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3490   000FF2  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3491   000FF6  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3492   000FFA                     
  3493                           ;colour_identify.c: 149:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3494   000FFA  0E0D               	movlw	13
  3495   000FFC  6E57               	movwf	(??_motor_response+1)^0,c
  3496   000FFE  0E2D               	movlw	45
  3497   001000  6E56               	movwf	??_motor_response^0,c
  3498   001002  0ED8               	movlw	216
  3499   001004                     u2057:
  3500   001004  2EE8               	decfsz	wreg,f,c
  3501   001006  D7FE               	bra	u2057
  3502   001008  2E56               	decfsz	??_motor_response^0,f,c
  3503   00100A  D7FC               	bra	u2057
  3504   00100C  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3505   00100E  D7FA               	bra	u2057
  3506   001010                     
  3507                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  3508   001010  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3509   001014  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3510   001018  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3511   00101C  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3512   001020  ECF9  F017         	call	_turnRight45	;wreg free
  3513   001024                     
  3514                           ;colour_identify.c: 151:             stop(mL,mR);
  3515   001024  C084  F017         	movff	motor_response@mL,stop@mL
  3516   001028  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3517   00102C  C086  F019         	movff	motor_response@mR,stop@mR
  3518   001030  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3519   001034  EC75  F019         	call	_stop	;wreg free
  3520   001038                     l3854:
  3521                           
  3522                           ;colour_identify.c: 152:             turnRight45(mL,mR);
  3523   001038  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3524   00103C  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3525   001040  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3526   001044  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3527   001048  ECF9  F017         	call	_turnRight45	;wreg free
  3528   00104C                     
  3529                           ;colour_identify.c: 153:             stop(mL,mR);
  3530   00104C  C084  F017         	movff	motor_response@mL,stop@mL
  3531   001050  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3532   001054  C086  F019         	movff	motor_response@mR,stop@mR
  3533   001058  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3534   00105C  EC75  F019         	call	_stop	;wreg free
  3535   001060  EF94  F007         	goto	l3826
  3536   001064                     l3866:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  3540   001064  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3541   001068  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3542   00106C  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3543   001070  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3544   001074  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3545   001078                     
  3546                           ;colour_identify.c: 161:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3547   001078  0E0D               	movlw	13
  3548   00107A  6E57               	movwf	(??_motor_response+1)^0,c
  3549   00107C  0E2D               	movlw	45
  3550   00107E  6E56               	movwf	??_motor_response^0,c
  3551   001080  0ED8               	movlw	216
  3552   001082                     u2067:
  3553   001082  2EE8               	decfsz	wreg,f,c
  3554   001084  D7FE               	bra	u2067
  3555   001086  2E56               	decfsz	??_motor_response^0,f,c
  3556   001088  D7FC               	bra	u2067
  3557   00108A  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3558   00108C  D7FA               	bra	u2067
  3559   00108E                     
  3560                           ;colour_identify.c: 162:             stop(mL,mR);
  3561   00108E  C084  F017         	movff	motor_response@mL,stop@mL
  3562   001092  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3563   001096  C086  F019         	movff	motor_response@mR,stop@mR
  3564   00109A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3565   00109E  EC75  F019         	call	_stop	;wreg free
  3566                           
  3567                           ;colour_identify.c: 163:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3568   0010A2  0E11               	movlw	17
  3569   0010A4  6E57               	movwf	(??_motor_response+1)^0,c
  3570   0010A6  0E3C               	movlw	60
  3571   0010A8  6E56               	movwf	??_motor_response^0,c
  3572   0010AA  0ECB               	movlw	203
  3573   0010AC                     u2077:
  3574   0010AC  2EE8               	decfsz	wreg,f,c
  3575   0010AE  D7FE               	bra	u2077
  3576   0010B0  2E56               	decfsz	??_motor_response^0,f,c
  3577   0010B2  D7FC               	bra	u2077
  3578   0010B4  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3579   0010B6  D7FA               	bra	u2077
  3580   0010B8  F000               	nop	
  3581   0010BA                     
  3582                           ;colour_identify.c: 164:             reverseFullSpeed(mL,mR);
  3583   0010BA  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3584   0010BE  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3585   0010C2  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3586   0010C6  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3587   0010CA  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3588   0010CE                     
  3589                           ;colour_identify.c: 165:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3590   0010CE  0E29               	movlw	41
  3591   0010D0  6E57               	movwf	(??_motor_response+1)^0,c
  3592   0010D2  0E96               	movlw	150
  3593   0010D4  6E56               	movwf	??_motor_response^0,c
  3594   0010D6  0E7F               	movlw	127
  3595   0010D8                     u2087:
  3596   0010D8  2EE8               	decfsz	wreg,f,c
  3597   0010DA  D7FE               	bra	u2087
  3598   0010DC  2E56               	decfsz	??_motor_response^0,f,c
  3599   0010DE  D7FC               	bra	u2087
  3600   0010E0  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3601   0010E2  D7FA               	bra	u2087
  3602   0010E4  F000               	nop	
  3603                           
  3604                           ;colour_identify.c: 166:             stop(mL,mR);
  3605   0010E6  C084  F017         	movff	motor_response@mL,stop@mL
  3606   0010EA  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3607   0010EE  C086  F019         	movff	motor_response@mR,stop@mR
  3608   0010F2  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3609   0010F6  EC75  F019         	call	_stop	;wreg free
  3610                           
  3611                           ;colour_identify.c: 167:             turnRight45(mL,mR);
  3612   0010FA  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3613   0010FE  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3614   001102  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3615   001106  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3616   00110A  ECF9  F017         	call	_turnRight45	;wreg free
  3617                           
  3618                           ;colour_identify.c: 168:             stop(mL,mR);
  3619   00110E  C084  F017         	movff	motor_response@mL,stop@mL
  3620   001112  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3621   001116  C086  F019         	movff	motor_response@mR,stop@mR
  3622   00111A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3623   00111E  EC75  F019         	call	_stop	;wreg free
  3624                           
  3625                           ;colour_identify.c: 169:             turnRight45(mL,mR);
  3626   001122  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3627   001126  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3628   00112A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3629   00112E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3630   001132  ECF9  F017         	call	_turnRight45	;wreg free
  3631                           
  3632                           ;colour_identify.c: 170:             stop(mL,mR);
  3633   001136  C084  F017         	movff	motor_response@mL,stop@mL
  3634   00113A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3635   00113E  C086  F019         	movff	motor_response@mR,stop@mR
  3636   001142  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3637   001146  EC75  F019         	call	_stop	;wreg free
  3638                           
  3639                           ;colour_identify.c: 171:             break;
  3640   00114A  EF70  F00A         	goto	l381
  3641   00114E                     l3876:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  3645   00114E  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3646   001152  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3647   001156  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3648   00115A  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3649   00115E  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3650   001162                     
  3651                           ;colour_identify.c: 174:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3652   001162  0E0D               	movlw	13
  3653   001164  6E57               	movwf	(??_motor_response+1)^0,c
  3654   001166  0E2D               	movlw	45
  3655   001168  6E56               	movwf	??_motor_response^0,c
  3656   00116A  0ED8               	movlw	216
  3657   00116C                     u2097:
  3658   00116C  2EE8               	decfsz	wreg,f,c
  3659   00116E  D7FE               	bra	u2097
  3660   001170  2E56               	decfsz	??_motor_response^0,f,c
  3661   001172  D7FC               	bra	u2097
  3662   001174  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3663   001176  D7FA               	bra	u2097
  3664   001178                     
  3665                           ;colour_identify.c: 175:             reverseFullSpeed(mL,mR);
  3666   001178  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3667   00117C  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3668   001180  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3669   001184  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3670   001188  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3671                           
  3672                           ;colour_identify.c: 176:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3673   00118C  0E29               	movlw	41
  3674   00118E  6E57               	movwf	(??_motor_response+1)^0,c
  3675   001190  0E96               	movlw	150
  3676   001192  6E56               	movwf	??_motor_response^0,c
  3677   001194  0E7F               	movlw	127
  3678   001196                     u2107:
  3679   001196  2EE8               	decfsz	wreg,f,c
  3680   001198  D7FE               	bra	u2107
  3681   00119A  2E56               	decfsz	??_motor_response^0,f,c
  3682   00119C  D7FC               	bra	u2107
  3683   00119E  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3684   0011A0  D7FA               	bra	u2107
  3685   0011A2  F000               	nop	
  3686   0011A4                     l3882:
  3687                           
  3688                           ;colour_identify.c: 177:             stop(mL,mR);
  3689   0011A4  C084  F017         	movff	motor_response@mL,stop@mL
  3690   0011A8  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3691   0011AC  C086  F019         	movff	motor_response@mR,stop@mR
  3692   0011B0  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3693   0011B4  EC75  F019         	call	_stop	;wreg free
  3694   0011B8  EFD3  F007         	goto	l3838
  3695   0011BC                     l3892:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;colour_identify.c: 184:             reverseFullSpeed(mL,mR);
  3699   0011BC  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3700   0011C0  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3701   0011C4  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3702   0011C8  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3703   0011CC  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3704   0011D0                     
  3705                           ;colour_identify.c: 185:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3706   0011D0  0E0D               	movlw	13
  3707   0011D2  6E57               	movwf	(??_motor_response+1)^0,c
  3708   0011D4  0E2D               	movlw	45
  3709   0011D6  6E56               	movwf	??_motor_response^0,c
  3710   0011D8  0ED8               	movlw	216
  3711   0011DA                     u2117:
  3712   0011DA  2EE8               	decfsz	wreg,f,c
  3713   0011DC  D7FE               	bra	u2117
  3714   0011DE  2E56               	decfsz	??_motor_response^0,f,c
  3715   0011E0  D7FC               	bra	u2117
  3716   0011E2  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3717   0011E4  D7FA               	bra	u2117
  3718   0011E6  EF1C  F008         	goto	l3854
  3719   0011EA                     l3908:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;colour_identify.c: 194:             reverseFullSpeed(mL,mR);
  3723   0011EA  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3724   0011EE  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3725   0011F2  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3726   0011F6  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3727   0011FA  ECA5  F018         	call	_reverseFullSpeed	;wreg free
  3728   0011FE                     
  3729                           ;colour_identify.c: 195:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3730   0011FE  0E0D               	movlw	13
  3731   001200  6E57               	movwf	(??_motor_response+1)^0,c
  3732   001202  0E2D               	movlw	45
  3733   001204  6E56               	movwf	??_motor_response^0,c
  3734   001206  0ED8               	movlw	216
  3735   001208                     u2127:
  3736   001208  2EE8               	decfsz	wreg,f,c
  3737   00120A  D7FE               	bra	u2127
  3738   00120C  2E56               	decfsz	??_motor_response^0,f,c
  3739   00120E  D7FC               	bra	u2127
  3740   001210  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3741   001212  D7FA               	bra	u2127
  3742   001214                     
  3743                           ;colour_identify.c: 196:             turnLeft45(mL,mR);
  3744   001214  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3745   001218  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3746   00121C  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3747   001220  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3748   001224  EC4F  F018         	call	_turnLeft45	;wreg free
  3749   001228  EFD2  F008         	goto	l3882
  3750   00122C                     l3924:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;colour_identify.c: 205:             stop(mL,mR);
  3754   00122C  C084  F017         	movff	motor_response@mL,stop@mL
  3755   001230  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3756   001234  C086  F019         	movff	motor_response@mR,stop@mR
  3757   001238  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3758   00123C  EC75  F019         	call	_stop	;wreg free
  3759                           
  3760                           ;colour_identify.c: 206:             turnLeft45(mL,mR);
  3761   001240  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3762   001244  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3763   001248  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3764   00124C  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3765   001250  EC4F  F018         	call	_turnLeft45	;wreg free
  3766                           
  3767                           ;colour_identify.c: 207:             stop(mL,mR);
  3768   001254  C084  F017         	movff	motor_response@mL,stop@mL
  3769   001258  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3770   00125C  C086  F019         	movff	motor_response@mR,stop@mR
  3771   001260  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3772   001264  EC75  F019         	call	_stop	;wreg free
  3773                           
  3774                           ;colour_identify.c: 208:             turnLeft45(mL,mR);
  3775   001268  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3776   00126C  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3777   001270  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3778   001274  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3779   001278  EC4F  F018         	call	_turnLeft45	;wreg free
  3780                           
  3781                           ;colour_identify.c: 209:             stop(mL,mR);
  3782   00127C  C084  F017         	movff	motor_response@mL,stop@mL
  3783   001280  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3784   001284  C086  F019         	movff	motor_response@mR,stop@mR
  3785   001288  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3786   00128C  EC75  F019         	call	_stop	;wreg free
  3787                           
  3788                           ;colour_identify.c: 210:             turnLeft45(mL,mR);
  3789   001290  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3790   001294  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3791   001298  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3792   00129C  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3793   0012A0  EC4F  F018         	call	_turnLeft45	;wreg free
  3794                           
  3795                           ;colour_identify.c: 211:             stop(mL,mR);
  3796   0012A4  C084  F017         	movff	motor_response@mL,stop@mL
  3797   0012A8  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3798   0012AC  C086  F019         	movff	motor_response@mR,stop@mR
  3799   0012B0  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3800   0012B4  EC75  F019         	call	_stop	;wreg free
  3801                           
  3802                           ;colour_identify.c: 212:             turnLeft45(mL,mR);
  3803   0012B8  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3804   0012BC  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3805   0012C0  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3806   0012C4  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3807   0012C8  EC4F  F018         	call	_turnLeft45	;wreg free
  3808                           
  3809                           ;colour_identify.c: 213:             stop(mL,mR);
  3810   0012CC  C084  F017         	movff	motor_response@mL,stop@mL
  3811   0012D0  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3812   0012D4  C086  F019         	movff	motor_response@mR,stop@mR
  3813   0012D8  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3814   0012DC  EC75  F019         	call	_stop	;wreg free
  3815   0012E0                     
  3816                           ;colour_identify.c: 214:             for(int i = 29; i >= 0; i--){
  3817   0012E0  0E00               	movlw	0
  3818   0012E2  0100               	movlb	0	; () banked
  3819   0012E4  6FC7               	movwf	(motor_response@i+1)& (0+255),b
  3820   0012E6  0E1D               	movlw	29
  3821   0012E8  6FC6               	movwf	motor_response@i& (0+255),b
  3822   0012EA                     l3932:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;colour_identify.c: 215:                 if (ReturnHomeArray.TimerCount[i] != 0){
  3826   0012EA  90D8               	bcf	status,0,c
  3827   0012EC  35C6               	rlcf	motor_response@i& (0+255),w,b
  3828   0012EE  6ED9               	movwf	fsr2l,c
  3829   0012F0  35C7               	rlcf	(motor_response@i+1)& (0+255),w,b
  3830   0012F2  6EDA               	movwf	fsr2h,c
  3831   0012F4  0E88               	movlw	low motor_response@ReturnHomeArray
  3832   0012F6  26D9               	addwf	fsr2l,f,c
  3833   0012F8  0E00               	movlw	high motor_response@ReturnHomeArray
  3834   0012FA  22DA               	addwfc	fsr2h,f,c
  3835   0012FC  50DE               	movf	postinc2,w,c
  3836   0012FE  10DE               	iorwf	postinc2,w,c
  3837   001300  B4D8               	btfsc	status,2,c
  3838   001302  EF85  F009         	goto	u1781
  3839   001306  EF87  F009         	goto	u1780
  3840   00130A                     u1781:
  3841   00130A  EF11  F00A         	goto	l3956
  3842   00130E                     u1780:
  3843   00130E                     
  3844                           ; BSR set to: 0
  3845                           ;colour_identify.c: 216:                     fullSpeedAhead(mL,mR);
  3846   00130E  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  3847   001312  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  3848   001316  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  3849   00131A  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  3850   00131E  ECEB  F018         	call	_fullSpeedAhead	;wreg free
  3851   001322                     
  3852                           ;colour_identify.c: 217:                     sprintf(buf, "Time gonna move for %d \n", R
      +                          eturnHomeArray.TimerCount[i]);
  3853   001322  C081  F066         	movff	motor_response@buf,sprintf@s
  3854   001326  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3855   00132A  0E90               	movlw	low STR_8
  3856   00132C  0100               	movlb	0	; () banked
  3857   00132E  6F68               	movwf	sprintf@fmt& (0+255),b
  3858   001330  0E0E               	movlw	high STR_8
  3859   001332  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3860   001334  90D8               	bcf	status,0,c
  3861   001336  35C6               	rlcf	motor_response@i& (0+255),w,b
  3862   001338  6ED9               	movwf	fsr2l,c
  3863   00133A  35C7               	rlcf	(motor_response@i+1)& (0+255),w,b
  3864   00133C  6EDA               	movwf	fsr2h,c
  3865   00133E  0E88               	movlw	low motor_response@ReturnHomeArray
  3866   001340  26D9               	addwf	fsr2l,f,c
  3867   001342  0E00               	movlw	high motor_response@ReturnHomeArray
  3868   001344  22DA               	addwfc	fsr2h,f,c
  3869   001346  CFDE F06A          	movff	postinc2,?_sprintf+4
  3870   00134A  CFDD F06B          	movff	postdec2,?_sprintf+5
  3871   00134E  ECCB  F01A         	call	_sprintf	;wreg free
  3872   001352                     
  3873                           ;colour_identify.c: 218:                     sendStringSerial4(buf);
  3874   001352  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  3875   001356  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  3876   00135A  EC11  F01C         	call	_sendStringSerial4	;wreg free
  3877   00135E                     
  3878                           ;colour_identify.c: 219:                     for (int j=0; j<= ReturnHomeArray.TimerCoun
      +                          t[i]; i++){
  3879   00135E  0E00               	movlw	0
  3880   001360  0100               	movlb	0	; () banked
  3881   001362  6FC5               	movwf	(motor_response@j+1)& (0+255),b
  3882   001364  0E00               	movlw	0
  3883   001366  6FC4               	movwf	motor_response@j& (0+255),b
  3884   001368  EFC5  F009         	goto	l3946
  3885   00136C                     l3942:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;colour_identify.c: 220:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  3889   00136C  0E09               	movlw	9
  3890   00136E  6E57               	movwf	(??_motor_response+1)^0,c
  3891   001370  0E1E               	movlw	30
  3892   001372  6E56               	movwf	??_motor_response^0,c
  3893   001374  0EE4               	movlw	228
  3894   001376                     u2137:
  3895   001376  2EE8               	decfsz	wreg,f,c
  3896   001378  D7FE               	bra	u2137
  3897   00137A  2E56               	decfsz	??_motor_response^0,f,c
  3898   00137C  D7FC               	bra	u2137
  3899   00137E  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3900   001380  D7FA               	bra	u2137
  3901   001382  D000               	nop2	
  3902   001384                     
  3903                           ;colour_identify.c: 221:                     }
  3904   001384  0100               	movlb	0	; () banked
  3905   001386  4BC6               	infsnz	motor_response@i& (0+255),f,b
  3906   001388  2BC7               	incf	(motor_response@i+1)& (0+255),f,b
  3907   00138A                     l3946:
  3908                           
  3909                           ; BSR set to: 0
  3910   00138A  90D8               	bcf	status,0,c
  3911   00138C  35C6               	rlcf	motor_response@i& (0+255),w,b
  3912   00138E  6ED9               	movwf	fsr2l,c
  3913   001390  35C7               	rlcf	(motor_response@i+1)& (0+255),w,b
  3914   001392  6EDA               	movwf	fsr2h,c
  3915   001394  0E88               	movlw	low motor_response@ReturnHomeArray
  3916   001396  26D9               	addwf	fsr2l,f,c
  3917   001398  0E00               	movlw	high motor_response@ReturnHomeArray
  3918   00139A  22DA               	addwfc	fsr2h,f,c
  3919   00139C  51C4               	movf	motor_response@j& (0+255),w,b
  3920   00139E  5CDE               	subwf	postinc2,w,c
  3921   0013A0  51C5               	movf	(motor_response@j+1)& (0+255),w,b
  3922   0013A2  58DE               	subwfb	postinc2,w,c
  3923   0013A4  B0D8               	btfsc	status,0,c
  3924   0013A6  EFD7  F009         	goto	u1791
  3925   0013AA  EFD9  F009         	goto	u1790
  3926   0013AE                     u1791:
  3927   0013AE  EFB6  F009         	goto	l3942
  3928   0013B2                     u1790:
  3929   0013B2                     
  3930                           ; BSR set to: 0
  3931                           ;colour_identify.c: 222:                     stop(mL,mR);
  3932   0013B2  C084  F017         	movff	motor_response@mL,stop@mL
  3933   0013B6  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3934   0013BA  C086  F019         	movff	motor_response@mR,stop@mR
  3935   0013BE  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3936   0013C2  EC75  F019         	call	_stop	;wreg free
  3937   0013C6                     
  3938                           ;colour_identify.c: 223:                     sprintf(buf, "Card gonna respond to %d \n",
      +                           ReturnHomeArray.card[i]);
  3939   0013C6  C081  F066         	movff	motor_response@buf,sprintf@s
  3940   0013CA  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3941   0013CE  0E75               	movlw	low STR_9
  3942   0013D0  0100               	movlb	0	; () banked
  3943   0013D2  6F68               	movwf	sprintf@fmt& (0+255),b
  3944   0013D4  0E0E               	movlw	high STR_9
  3945   0013D6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3946   0013D8  0E88               	movlw	low motor_response@ReturnHomeArray
  3947   0013DA  25C6               	addwf	motor_response@i& (0+255),w,b
  3948   0013DC  6ED9               	movwf	fsr2l,c
  3949   0013DE  0E00               	movlw	high motor_response@ReturnHomeArray
  3950   0013E0  21C7               	addwfc	(motor_response@i+1)& (0+255),w,b
  3951   0013E2  6EDA               	movwf	fsr2h,c
  3952   0013E4  50DF               	movf	indf2,w,c
  3953   0013E6  6E56               	movwf	??_motor_response^0,c
  3954   0013E8  5056               	movf	??_motor_response^0,w,c
  3955   0013EA  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  3956   0013EC  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  3957   0013EE  ECCB  F01A         	call	_sprintf	;wreg free
  3958   0013F2                     
  3959                           ;colour_identify.c: 224:                     sendStringSerial4(buf);
  3960   0013F2  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  3961   0013F6  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  3962   0013FA  EC11  F01C         	call	_sendStringSerial4	;wreg free
  3963   0013FE                     
  3964                           ;colour_identify.c: 225:                     home_response(ReturnHomeArray.card[i], mL, 
      +                          mR);
  3965   0013FE  C084  F01F         	movff	motor_response@mL,home_response@mL
  3966   001402  C085  F020         	movff	motor_response@mL+1,home_response@mL+1
  3967   001406  C086  F021         	movff	motor_response@mR,home_response@mR
  3968   00140A  C087  F022         	movff	motor_response@mR+1,home_response@mR+1
  3969   00140E  0E88               	movlw	low motor_response@ReturnHomeArray
  3970   001410  0100               	movlb	0	; () banked
  3971   001412  25C6               	addwf	motor_response@i& (0+255),w,b
  3972   001414  6ED9               	movwf	fsr2l,c
  3973   001416  0E00               	movlw	high motor_response@ReturnHomeArray
  3974   001418  21C7               	addwfc	(motor_response@i+1)& (0+255),w,b
  3975   00141A  6EDA               	movwf	fsr2h,c
  3976   00141C  50DF               	movf	indf2,w,c
  3977   00141E  EC2A  F00D         	call	_home_response
  3978   001422                     l3956:
  3979                           
  3980                           ;colour_identify.c: 227:             }
  3981   001422  0100               	movlb	0	; () banked
  3982   001424  07C6               	decf	motor_response@i& (0+255),f,b
  3983   001426  A0D8               	btfss	status,0,c
  3984   001428  07C7               	decf	(motor_response@i+1)& (0+255),f,b
  3985   00142A                     
  3986                           ; BSR set to: 0
  3987   00142A  BFC7               	btfsc	(motor_response@i+1)& (0+255),7,b
  3988   00142C  EF1C  F00A         	goto	u1800
  3989   001430  EF1A  F00A         	goto	u1801
  3990   001434                     u1801:
  3991   001434  EF75  F009         	goto	l3932
  3992   001438                     u1800:
  3993   001438  EF70  F00A         	goto	l381
  3994   00143C                     l379:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;colour_identify.c: 231:             LATHbits.LATH3=1;
  3998   00143C  8680               	bsf	128,3,c	;volatile
  3999   00143E                     
  4000                           ; BSR set to: 0
  4001                           ;colour_identify.c: 232:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4002   00143E  0E11               	movlw	17
  4003   001440  6E57               	movwf	(??_motor_response+1)^0,c
  4004   001442  0E3C               	movlw	60
  4005   001444  6E56               	movwf	??_motor_response^0,c
  4006   001446  0ECB               	movlw	203
  4007   001448                     u2147:
  4008   001448  2EE8               	decfsz	wreg,f,c
  4009   00144A  D7FE               	bra	u2147
  4010   00144C  2E56               	decfsz	??_motor_response^0,f,c
  4011   00144E  D7FC               	bra	u2147
  4012   001450  2E57               	decfsz	(??_motor_response+1)^0,f,c
  4013   001452  D7FA               	bra	u2147
  4014   001454  F000               	nop	
  4015   001456                     
  4016                           ;colour_identify.c: 233:             LATHbits.LATH3=0;
  4017   001456  9680               	bcf	128,3,c	;volatile
  4018                           
  4019                           ;colour_identify.c: 234:             break;
  4020   001458  EF70  F00A         	goto	l381
  4021   00145C                     l380:
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;colour_identify.c: 236:             LATHbits.LATH1 = 1;
  4025   00145C  8280               	bsf	128,1,c	;volatile
  4026   00145E                     
  4027                           ; BSR set to: 0
  4028                           ;colour_identify.c: 237:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4029   00145E  0E29               	movlw	41
  4030   001460  6E57               	movwf	(??_motor_response+1)^0,c
  4031   001462  0E96               	movlw	150
  4032   001464  6E56               	movwf	??_motor_response^0,c
  4033   001466  0E7F               	movlw	127
  4034   001468                     u2157:
  4035   001468  2EE8               	decfsz	wreg,f,c
  4036   00146A  D7FE               	bra	u2157
  4037   00146C  2E56               	decfsz	??_motor_response^0,f,c
  4038   00146E  D7FC               	bra	u2157
  4039   001470  2E57               	decfsz	(??_motor_response+1)^0,f,c
  4040   001472  D7FA               	bra	u2157
  4041   001474  F000               	nop	
  4042   001476                     
  4043                           ;colour_identify.c: 238:             LATHbits.LATH1 = 0;
  4044   001476  9280               	bcf	128,1,c	;volatile
  4045                           
  4046                           ;colour_identify.c: 239:             break;
  4047   001478  EF70  F00A         	goto	l381
  4048   00147C                     l3970:
  4049   00147C  0100               	movlb	0	; () banked
  4050   00147E  5183               	movf	motor_response@card& (0+255),w,b
  4051   001480  6E56               	movwf	??_motor_response^0,c
  4052   001482  6A57               	clrf	(??_motor_response+1)^0,c
  4053                           
  4054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4055                           ; Switch size 1, requested type "simple"
  4056                           ; Number of cases is 1, Range of values is 0 to 0
  4057                           ; switch strategies available:
  4058                           ; Name         Instructions Cycles
  4059                           ; simple_byte            4     3 (average)
  4060                           ;	Chosen strategy is simple_byte
  4061   001484  5057               	movf	(??_motor_response+1)^0,w,c
  4062   001486  0A00               	xorlw	0	; case 0
  4063   001488  B4D8               	btfsc	status,2,c
  4064   00148A  EF49  F00A         	goto	l4258
  4065   00148E  EF2E  F00A         	goto	l380
  4066   001492                     l4258:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ; Switch size 1, requested type "simple"
  4070                           ; Number of cases is 9, Range of values is 0 to 8
  4071                           ; switch strategies available:
  4072                           ; Name         Instructions Cycles
  4073                           ; simple_byte           28    15 (average)
  4074                           ;	Chosen strategy is simple_byte
  4075   001492  5056               	movf	??_motor_response^0,w,c
  4076   001494  0A00               	xorlw	0	; case 0
  4077   001496  B4D8               	btfsc	status,2,c
  4078   001498  EF7F  F007         	goto	l3822
  4079   00149C  0A01               	xorlw	1	; case 1
  4080   00149E  B4D8               	btfsc	status,2,c
  4081   0014A0  EFBE  F007         	goto	l3834
  4082   0014A4  0A03               	xorlw	3	; case 2
  4083   0014A6  B4D8               	btfsc	status,2,c
  4084   0014A8  EFF3  F007         	goto	l3846
  4085   0014AC  0A01               	xorlw	1	; case 3
  4086   0014AE  B4D8               	btfsc	status,2,c
  4087   0014B0  EF32  F008         	goto	l3866
  4088   0014B4  0A07               	xorlw	7	; case 4
  4089   0014B6  B4D8               	btfsc	status,2,c
  4090   0014B8  EFA7  F008         	goto	l3876
  4091   0014BC  0A01               	xorlw	1	; case 5
  4092   0014BE  B4D8               	btfsc	status,2,c
  4093   0014C0  EFDE  F008         	goto	l3892
  4094   0014C4  0A03               	xorlw	3	; case 6
  4095   0014C6  B4D8               	btfsc	status,2,c
  4096   0014C8  EFF5  F008         	goto	l3908
  4097   0014CC  0A01               	xorlw	1	; case 7
  4098   0014CE  B4D8               	btfsc	status,2,c
  4099   0014D0  EF16  F009         	goto	l3924
  4100   0014D4  0A0F               	xorlw	15	; case 8
  4101   0014D6  B4D8               	btfsc	status,2,c
  4102   0014D8  EF1E  F00A         	goto	l379
  4103   0014DC  EF2E  F00A         	goto	l380
  4104   0014E0                     l381:
  4105   0014E0  0012               	return		;funcret
  4106   0014E2                     __end_of_motor_response:
  4107                           	callstack 0
  4108                           
  4109 ;; *************** function _sprintf *****************
  4110 ;; Defined at:
  4111 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  s               2    6[BANK0 ] PTR unsigned char 
  4114 ;;		 -> main@buf(150), 
  4115 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  4116 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4117 ;;		 -> STR_9(27), STR_8(25), STR_7(23), STR_6(10), 
  4118 ;;		 -> STR_5(30), STR_4(22), STR_3(15), STR_2(23), 
  4119 ;;		 -> STR_1(50), 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  f              11   22[BANK0 ] struct _IO_FILE
  4122 ;;  ap              2   20[BANK0 ] PTR void [1]
  4123 ;;		 -> ?_sprintf(2), 
  4124 ;;  ret             2    0        int 
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  2    6[BANK0 ] int 
  4127 ;; Registers used:
  4128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4134 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;Total ram usage:       27 bytes
  4139 ;; Hardware stack levels used: 1
  4140 ;; Hardware stack levels required when called: 8
  4141 ;; This function calls:
  4142 ;;		_vfprintf
  4143 ;; This function is called by:
  4144 ;;		_main
  4145 ;;		_clear_read_calibration
  4146 ;;		_motor_response
  4147 ;;		_card_response
  4148 ;;		_card_response_easy
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           	psect	text10
  4153   003596                     __ptext10:
  4154                           	callstack 0
  4155   003596                     _sprintf:
  4156                           	callstack 22
  4157   003596  0E6A               	movlw	low (?_sprintf+4)
  4158   003598  0100               	movlb	0	; () banked
  4159   00359A  6F74               	movwf	sprintf@ap& (0+255),b
  4160   00359C  0E00               	movlw	high (?_sprintf+4)
  4161   00359E  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4162   0035A0  C066  F076         	movff	sprintf@s,sprintf@f
  4163   0035A4  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  4164   0035A8                     
  4165                           ; BSR set to: 0
  4166   0035A8  0E00               	movlw	0
  4167   0035AA  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  4168   0035AC  0E00               	movlw	0
  4169   0035AE  6F79               	movwf	(sprintf@f+3)& (0+255),b
  4170   0035B0                     
  4171                           ; BSR set to: 0
  4172   0035B0  0E00               	movlw	0
  4173   0035B2  6F80               	movwf	(sprintf@f+10)& (0+255),b
  4174   0035B4  0E00               	movlw	0
  4175   0035B6  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  4176   0035B8                     
  4177                           ; BSR set to: 0
  4178   0035B8  0E76               	movlw	low sprintf@f
  4179   0035BA  6F60               	movwf	vfprintf@fp& (0+255),b
  4180   0035BC  0E00               	movlw	high sprintf@f
  4181   0035BE  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4182   0035C0  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4183   0035C4  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4184   0035C8  0E74               	movlw	low sprintf@ap
  4185   0035CA  6F64               	movwf	vfprintf@ap& (0+255),b
  4186   0035CC  0E00               	movlw	high sprintf@ap
  4187   0035CE  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4188   0035D0  ECA1  F01A         	call	_vfprintf	;wreg free
  4189   0035D4  0100               	movlb	0	; () banked
  4190   0035D6  5179               	movf	(sprintf@f+3)& (0+255),w,b
  4191   0035D8  2566               	addwf	sprintf@s& (0+255),w,b
  4192   0035DA  6ED9               	movwf	fsr2l,c
  4193   0035DC  517A               	movf	(sprintf@f+4)& (0+255),w,b
  4194   0035DE  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4195   0035E0  6EDA               	movwf	fsr2h,c
  4196   0035E2  0E00               	movlw	0
  4197   0035E4  6EDF               	movwf	indf2,c
  4198   0035E6                     
  4199                           ; BSR set to: 0
  4200   0035E6  0012               	return		;funcret
  4201   0035E8                     __end_of_sprintf:
  4202                           	callstack 0
  4203                           
  4204 ;; *************** function _vfprintf *****************
  4205 ;; Defined at:
  4206 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4209 ;;		 -> sprintf@f(11), 
  4210 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4211 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4212 ;;		 -> STR_9(27), STR_8(25), STR_7(23), STR_6(10), 
  4213 ;;		 -> STR_5(30), STR_4(22), STR_3(15), STR_2(23), 
  4214 ;;		 -> STR_1(50), 
  4215 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4216 ;;		 -> sprintf@ap(2), 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  4219 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4220 ;;		 -> STR_9(27), STR_8(25), STR_7(23), STR_6(10), 
  4221 ;;		 -> STR_5(30), STR_4(22), STR_3(15), STR_2(23), 
  4222 ;;		 -> STR_1(50), 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2    0[BANK0 ] int 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4232 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4233 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;Total ram usage:        8 bytes
  4237 ;; Hardware stack levels used: 1
  4238 ;; Hardware stack levels required when called: 7
  4239 ;; This function calls:
  4240 ;;		_vfpfcnvrt
  4241 ;; This function is called by:
  4242 ;;		_sprintf
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text11
  4247   003542                     __ptext11:
  4248                           	callstack 0
  4249   003542                     _vfprintf:
  4250                           	callstack 22
  4251   003542                     
  4252                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4253   003542  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  4254   003546  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4255                           
  4256                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4257   00354A  EFB5  F01A         	goto	l3802
  4258   00354E                     l3800:
  4259                           
  4260                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4261   00354E  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  4262   003552  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4263   003556  0E54               	movlw	low vfprintf@cfmt
  4264   003558  6E44               	movwf	vfpfcnvrt@fmt^0,c
  4265   00355A  0E00               	movlw	high vfprintf@cfmt
  4266   00355C  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4267   00355E  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  4268   003562  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4269   003566  ECD2  F015         	call	_vfpfcnvrt	;wreg free
  4270   00356A                     l3802:
  4271                           
  4272                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4273   00356A  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  4274   00356E  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4275   003572                     	if	0	;tblptru may be non-zero
  4276   003572                     	endif
  4277   003572                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4278   003572  0E00               	movlw	low (__mediumconst shr (0+16))
  4279   003574  6EF8               	movwf	tblptru,c
  4280   003576                     	endif
  4281   003576  0008               	tblrd		*
  4282   003578  50F5               	movf	tablat,w,c
  4283   00357A  0900               	iorlw	0
  4284   00357C  A4D8               	btfss	status,2,c
  4285   00357E  EFC3  F01A         	goto	u1771
  4286   003582  EFC5  F01A         	goto	u1770
  4287   003586                     u1771:
  4288   003586  EFA7  F01A         	goto	l3800
  4289   00358A                     u1770:
  4290   00358A                     
  4291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4292   00358A  0E00               	movlw	0
  4293   00358C  0100               	movlb	0	; () banked
  4294   00358E  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4295   003590  0E00               	movlw	0
  4296   003592  6F60               	movwf	?_vfprintf& (0+255),b
  4297   003594                     
  4298                           ; BSR set to: 0
  4299   003594  0012               	return		;funcret
  4300   003596                     __end_of_vfprintf:
  4301                           	callstack 0
  4302                           
  4303 ;; *************** function _vfpfcnvrt *****************
  4304 ;; Defined at:
  4305 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  4308 ;;		 -> sprintf@f(11), 
  4309 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  4310 ;;		 -> vfprintf@cfmt(2), 
  4311 ;;  ap              2   69[COMRAM] PTR PTR void 
  4312 ;;		 -> sprintf@ap(2), 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  convarg         8   73[COMRAM] struct .
  4315 ;;  cp              2   81[COMRAM] PTR unsigned char 
  4316 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4317 ;;		 -> STR_9(27), STR_8(25), STR_7(23), STR_6(10), 
  4318 ;;		 -> STR_5(30), STR_4(22), STR_3(15), STR_2(23), 
  4319 ;;		 -> STR_1(50), 
  4320 ;;  i               2    0        int 
  4321 ;;  done            2    0        int 
  4322 ;;  c               1    0        unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4332 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4335 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;Total ram usage:       18 bytes
  4337 ;; Hardware stack levels used: 1
  4338 ;; Hardware stack levels required when called: 6
  4339 ;; This function calls:
  4340 ;;		_dtoa
  4341 ;;		_fputc
  4342 ;; This function is called by:
  4343 ;;		_vfprintf
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text12
  4348   002BA4                     __ptext12:
  4349                           	callstack 0
  4350   002BA4                     _vfpfcnvrt:
  4351                           	callstack 22
  4352   002BA4                     
  4353                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4354   002BA4  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4355   002BA8  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4356   002BAC  CFDE FFF6          	movff	postinc2,tblptrl
  4357   002BB0  CFDD FFF7          	movff	postdec2,tblptrh
  4358   002BB4                     	if	0	;tblptru may be non-zero
  4359   002BB4                     	endif
  4360   002BB4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4361   002BB4  0E00               	movlw	low (__mediumconst shr (0+16))
  4362   002BB6  6EF8               	movwf	tblptru,c
  4363   002BB8                     	endif
  4364   002BB8  0008               	tblrd		*
  4365   002BBA  50F5               	movf	tablat,w,c
  4366   002BBC  0A25               	xorlw	37
  4367   002BBE  A4D8               	btfss	status,2,c
  4368   002BC0  EFE4  F015         	goto	u1291
  4369   002BC4  EFE6  F015         	goto	u1290
  4370   002BC8                     u1291:
  4371   002BC8  EF6A  F016         	goto	l2802
  4372   002BCC                     u1290:
  4373   002BCC                     
  4374                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4375   002BCC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4376   002BD0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4377   002BD4  2ADE               	incf	postinc2,f,c
  4378   002BD6  0E00               	movlw	0
  4379   002BD8  22DD               	addwfc	postdec2,f,c
  4380   002BDA                     
  4381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4382   002BDA  0E00               	movlw	0
  4383   002BDC  0100               	movlb	0	; () banked
  4384   002BDE  6FE4               	movwf	(_width+1)& (0+255),b
  4385   002BE0  0E00               	movlw	0
  4386   002BE2  6FE3               	movwf	_width& (0+255),b
  4387   002BE4  C0E3  F0ED         	movff	_width,_flags
  4388   002BE8                     
  4389                           ; BSR set to: 0
  4390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4391   002BE8  69E5               	setf	_prec& (0+255),b
  4392   002BEA  69E6               	setf	(_prec+1)& (0+255),b
  4393   002BEC                     
  4394                           ; BSR set to: 0
  4395                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4396   002BEC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4397   002BF0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4398   002BF4  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  4399   002BF8  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  4400   002BFC                     
  4401                           ; BSR set to: 0
  4402                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4403   002BFC  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4404   002C00  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4405   002C04                     	if	0	;tblptru may be non-zero
  4406   002C04                     	endif
  4407   002C04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4408   002C04  0E00               	movlw	low (__mediumconst shr (0+16))
  4409   002C06  6EF8               	movwf	tblptru,c
  4410   002C08                     	endif
  4411   002C08  0008               	tblrd		*
  4412   002C0A  50F5               	movf	tablat,w,c
  4413   002C0C  0A64               	xorlw	100
  4414   002C0E  B4D8               	btfsc	status,2,c
  4415   002C10  EF0C  F016         	goto	u1301
  4416   002C14  EF0E  F016         	goto	u1300
  4417   002C18                     u1301:
  4418   002C18  EF1E  F016         	goto	l2792
  4419   002C1C                     u1300:
  4420   002C1C                     
  4421                           ; BSR set to: 0
  4422   002C1C  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4423   002C20  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4424   002C24                     	if	0	;tblptru may be non-zero
  4425   002C24                     	endif
  4426   002C24                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4427   002C24  0E00               	movlw	low (__mediumconst shr (0+16))
  4428   002C26  6EF8               	movwf	tblptru,c
  4429   002C28                     	endif
  4430   002C28  0008               	tblrd		*
  4431   002C2A  50F5               	movf	tablat,w,c
  4432   002C2C  0A69               	xorlw	105
  4433   002C2E  A4D8               	btfss	status,2,c
  4434   002C30  EF1C  F016         	goto	u1311
  4435   002C34  EF1E  F016         	goto	u1310
  4436   002C38                     u1311:
  4437   002C38  EF61  F016         	goto	l2798
  4438   002C3C                     u1310:
  4439   002C3C                     l2792:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4443   002C3C  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4444   002C40  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4445   002C44  CFDF F048          	movff	indf2,??_vfpfcnvrt
  4446   002C48  0E02               	movlw	2
  4447   002C4A  26DE               	addwf	postinc2,f,c
  4448   002C4C  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  4449   002C50  0E00               	movlw	0
  4450   002C52  22DD               	addwfc	postdec2,f,c
  4451   002C54  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4452   002C58  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4453   002C5C  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  4454   002C60  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  4455   002C64  0E00               	movlw	0
  4456   002C66  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4457   002C68  0EFF               	movlw	-1
  4458   002C6A  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4459   002C6C  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4460   002C6E  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4461   002C70  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4462   002C72  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4463   002C74  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4464                           
  4465                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4466   002C76  0E01               	movlw	1
  4467   002C78  2452               	addwf	vfpfcnvrt@cp^0,w,c
  4468   002C7A  6E48               	movwf	??_vfpfcnvrt^0,c
  4469   002C7C  0E00               	movlw	0
  4470   002C7E  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4471   002C80  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  4472   002C82  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4473   002C86  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4474   002C8A  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  4475   002C8E  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4476   002C92                     
  4477                           ; BSR set to: 0
  4478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4479   002C92  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  4480   002C96  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4481   002C9A  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  4482   002C9E  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4483   002CA2  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4484   002CA6  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4485   002CAA  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4486   002CAE  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4487   002CB2  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4488   002CB6  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4489   002CBA  EC73  F010         	call	_dtoa	;wreg free
  4490   002CBE  EF80  F016         	goto	l1271
  4491   002CC2                     l2798:
  4492                           
  4493                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4494   002CC2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4495   002CC6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4496   002CCA  2ADE               	incf	postinc2,f,c
  4497   002CCC  0E00               	movlw	0
  4498   002CCE  22DD               	addwfc	postdec2,f,c
  4499   002CD0  EF80  F016         	goto	l1271
  4500   002CD4                     l2802:
  4501                           
  4502                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4503   002CD4  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4504   002CD8  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4505   002CDC  CFDE FFF6          	movff	postinc2,tblptrl
  4506   002CE0  CFDD FFF7          	movff	postdec2,tblptrh
  4507   002CE4                     	if	0	;tblptru may be non-zero
  4508   002CE4                     	endif
  4509   002CE4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4510   002CE4  0E00               	movlw	low (__mediumconst shr (0+16))
  4511   002CE6  6EF8               	movwf	tblptru,c
  4512   002CE8                     	endif
  4513   002CE8  0008               	tblrd		*
  4514   002CEA  50F5               	movf	tablat,w,c
  4515   002CEC  6E04               	movwf	fputc@c^0,c
  4516   002CEE  6A05               	clrf	(fputc@c+1)^0,c
  4517   002CF0  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  4518   002CF4  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4519   002CF8  EC94  F017         	call	_fputc	;wreg free
  4520   002CFC  EF61  F016         	goto	l2798
  4521   002D00                     l1271:
  4522   002D00  0012               	return		;funcret
  4523   002D02                     __end_of_vfpfcnvrt:
  4524                           	callstack 0
  4525                           
  4526 ;; *************** function _dtoa *****************
  4527 ;; Defined at:
  4528 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  4531 ;;		 -> sprintf@f(11), 
  4532 ;;  d               8   32[COMRAM] long long 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  n               8   54[COMRAM] long long 
  4535 ;;  i               2   62[COMRAM] int 
  4536 ;;  w               2   52[COMRAM] int 
  4537 ;;  p               2   50[COMRAM] int 
  4538 ;;  s               1   64[COMRAM] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4548 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4550 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4551 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4552 ;;Total ram usage:       35 bytes
  4553 ;; Hardware stack levels used: 1
  4554 ;; Hardware stack levels required when called: 5
  4555 ;; This function calls:
  4556 ;;		___aodiv
  4557 ;;		___aomod
  4558 ;;		_abs
  4559 ;;		_pad
  4560 ;; This function is called by:
  4561 ;;		_vfpfcnvrt
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text13
  4566   0020E6                     __ptext13:
  4567                           	callstack 0
  4568   0020E6                     _dtoa:
  4569                           	callstack 22
  4570   0020E6                     
  4571                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4572   0020E6  C021  F037         	movff	dtoa@d,dtoa@n
  4573   0020EA  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  4574   0020EE  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  4575   0020F2  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  4576   0020F6  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  4577   0020FA  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  4578   0020FE  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  4579   002102  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  4580   002106                     
  4581                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4582   002106  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  4583   002108  EF88  F010         	goto	u1151
  4584   00210C  EF8B  F010         	goto	u1150
  4585   002110                     u1151:
  4586   002110  0E01               	movlw	1
  4587   002112  EF8C  F010         	goto	u1160
  4588   002116                     u1150:
  4589   002116  0E00               	movlw	0
  4590   002118                     u1160:
  4591   002118  6E41               	movwf	dtoa@s^0,c
  4592   00211A                     
  4593                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4594   00211A  5041               	movf	dtoa@s^0,w,c
  4595   00211C  B4D8               	btfsc	status,2,c
  4596   00211E  EF93  F010         	goto	u1171
  4597   002122  EF95  F010         	goto	u1170
  4598   002126                     u1171:
  4599   002126  EFA5  F010         	goto	l2714
  4600   00212A                     u1170:
  4601   00212A                     
  4602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4603   00212A  1E3E               	comf	(dtoa@n+7)^0,f,c
  4604   00212C  1E3D               	comf	(dtoa@n+6)^0,f,c
  4605   00212E  1E3C               	comf	(dtoa@n+5)^0,f,c
  4606   002130  1E3B               	comf	(dtoa@n+4)^0,f,c
  4607   002132  1E3A               	comf	(dtoa@n+3)^0,f,c
  4608   002134  1E39               	comf	(dtoa@n+2)^0,f,c
  4609   002136  1E38               	comf	(dtoa@n+1)^0,f,c
  4610   002138  6C37               	negf	dtoa@n^0,c
  4611   00213A  0E00               	movlw	0
  4612   00213C  2238               	addwfc	(dtoa@n+1)^0,f,c
  4613   00213E  2239               	addwfc	(dtoa@n+2)^0,f,c
  4614   002140  223A               	addwfc	(dtoa@n+3)^0,f,c
  4615   002142  223B               	addwfc	(dtoa@n+4)^0,f,c
  4616   002144  223C               	addwfc	(dtoa@n+5)^0,f,c
  4617   002146  223D               	addwfc	(dtoa@n+6)^0,f,c
  4618   002148  223E               	addwfc	(dtoa@n+7)^0,f,c
  4619   00214A                     l2714:
  4620                           
  4621                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4622   00214A  0100               	movlb	0	; () banked
  4623   00214C  BFE6               	btfsc	(_prec+1)& (0+255),7,b
  4624   00214E  EFB3  F010         	goto	u1180
  4625   002152  51E6               	movf	(_prec+1)& (0+255),w,b
  4626   002154  E106               	bnz	u1181
  4627   002156  05E5               	decf	_prec& (0+255),w,b
  4628   002158  B0D8               	btfsc	status,0,c
  4629   00215A  EFB1  F010         	goto	u1181
  4630   00215E  EFB3  F010         	goto	u1180
  4631   002162                     u1181:
  4632   002162  EFB9  F010         	goto	l1250
  4633   002166                     u1180:
  4634   002166                     
  4635                           ; BSR set to: 0
  4636   002166  0E00               	movlw	0
  4637   002168  6E34               	movwf	(dtoa@p+1)^0,c
  4638   00216A  0E01               	movlw	1
  4639   00216C  6E33               	movwf	dtoa@p^0,c
  4640   00216E  EFBD  F010         	goto	l1252
  4641   002172                     l1250:
  4642                           
  4643                           ; BSR set to: 0
  4644   002172  C0E5  F033         	movff	_prec,dtoa@p
  4645   002176  C0E6  F034         	movff	_prec+1,dtoa@p+1
  4646   00217A                     l1252:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4650   00217A  C0E3  F035         	movff	_width,dtoa@w
  4651   00217E  C0E4  F036         	movff	_width+1,dtoa@w+1
  4652   002182                     
  4653                           ; BSR set to: 0
  4654                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4655   002182  5041               	movf	dtoa@s^0,w,c
  4656   002184  B4D8               	btfsc	status,2,c
  4657   002186  EFC7  F010         	goto	u1191
  4658   00218A  EFC9  F010         	goto	u1190
  4659   00218E                     u1191:
  4660   00218E  EFE0  F010         	goto	l1253
  4661   002192                     u1190:
  4662   002192                     
  4663                           ; BSR set to: 0
  4664                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4665   002192  0635               	decf	dtoa@w^0,f,c
  4666   002194  A0D8               	btfss	status,0,c
  4667   002196  0636               	decf	(dtoa@w+1)^0,f,c
  4668   002198                     
  4669                           ; BSR set to: 0
  4670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4671   002198  5041               	movf	dtoa@s^0,w,c
  4672   00219A  A4D8               	btfss	status,2,c
  4673   00219C  EFD2  F010         	goto	u1201
  4674   0021A0  EFD4  F010         	goto	u1200
  4675   0021A4                     u1201:
  4676   0021A4  EFDA  F010         	goto	l2726
  4677   0021A8                     u1200:
  4678   0021A8                     
  4679                           ; BSR set to: 0
  4680   0021A8  0E00               	movlw	0
  4681   0021AA  6E32               	movwf	(_dtoa$2599+1)^0,c
  4682   0021AC  0E2B               	movlw	43
  4683   0021AE  6E31               	movwf	_dtoa$2599^0,c
  4684   0021B0  EFDE  F010         	goto	l2728
  4685   0021B4                     l2726:
  4686                           
  4687                           ; BSR set to: 0
  4688   0021B4  0E00               	movlw	0
  4689   0021B6  6E32               	movwf	(_dtoa$2599+1)^0,c
  4690   0021B8  0E2D               	movlw	45
  4691   0021BA  6E31               	movwf	_dtoa$2599^0,c
  4692   0021BC                     l2728:
  4693                           
  4694                           ; BSR set to: 0
  4695   0021BC  C031  F041         	movff	_dtoa$2599,dtoa@s
  4696   0021C0                     l1253:
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  4700   0021C0  0E00               	movlw	0
  4701   0021C2  6E40               	movwf	(dtoa@i+1)^0,c
  4702   0021C4  0E1F               	movlw	31
  4703   0021C6  6E3F               	movwf	dtoa@i^0,c
  4704   0021C8                     
  4705                           ; BSR set to: 0
  4706                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  4707   0021C8  0E00               	movlw	0
  4708   0021CA  0103               	movlb	3	; () banked
  4709   0021CC  6F5B               	movwf	(_dbuf+31)& (0+255),b
  4710                           
  4711                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4712   0021CE  EF65  F011         	goto	l2742
  4713   0021D2                     l2732:
  4714                           
  4715                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  4716   0021D2  063F               	decf	dtoa@i^0,f,c
  4717   0021D4  A0D8               	btfss	status,0,c
  4718   0021D6  0640               	decf	(dtoa@i+1)^0,f,c
  4719   0021D8                     
  4720                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4721   0021D8  0E3C               	movlw	low _dbuf
  4722   0021DA  243F               	addwf	dtoa@i^0,w,c
  4723   0021DC  6ED9               	movwf	fsr2l,c
  4724   0021DE  0E03               	movlw	high _dbuf
  4725   0021E0  2040               	addwfc	(dtoa@i+1)^0,w,c
  4726   0021E2  6EDA               	movwf	fsr2h,c
  4727   0021E4  C037  F004         	movff	dtoa@n,___aomod@dividend
  4728   0021E8  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  4729   0021EC  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  4730   0021F0  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  4731   0021F4  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  4732   0021F8  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  4733   0021FC  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  4734   002200  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  4735   002204  0E0A               	movlw	10
  4736   002206  6E0C               	movwf	___aomod@divisor^0,c
  4737   002208  0E00               	movlw	0
  4738   00220A  6E0D               	movwf	(___aomod@divisor+1)^0,c
  4739   00220C  0E00               	movlw	0
  4740   00220E  6E0E               	movwf	(___aomod@divisor+2)^0,c
  4741   002210  0E00               	movlw	0
  4742   002212  6E0F               	movwf	(___aomod@divisor+3)^0,c
  4743   002214  0E00               	movlw	0
  4744   002216  6E10               	movwf	(___aomod@divisor+4)^0,c
  4745   002218  0E00               	movlw	0
  4746   00221A  6E11               	movwf	(___aomod@divisor+5)^0,c
  4747   00221C  0E00               	movlw	0
  4748   00221E  6E12               	movwf	(___aomod@divisor+6)^0,c
  4749   002220  0E00               	movlw	0
  4750   002222  6E13               	movwf	(___aomod@divisor+7)^0,c
  4751   002224  EC20  F015         	call	___aomod	;wreg free
  4752   002228  C004  F029         	movff	?___aomod,??_dtoa
  4753   00222C  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  4754   002230  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  4755   002234  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  4756   002238  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  4757   00223C  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  4758   002240  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  4759   002244  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  4760   002248  C029  F016         	movff	??_dtoa,abs@a
  4761   00224C  C02A  F017         	movff	??_dtoa+1,abs@a+1
  4762   002250  ECD7  F01B         	call	_abs	;wreg free
  4763   002254  5016               	movf	?_abs^0,w,c
  4764   002256  0F30               	addlw	48
  4765   002258  6EDF               	movwf	indf2,c
  4766   00225A                     
  4767                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  4768   00225A  0633               	decf	dtoa@p^0,f,c
  4769   00225C  A0D8               	btfss	status,0,c
  4770   00225E  0634               	decf	(dtoa@p+1)^0,f,c
  4771   002260                     
  4772                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  4773   002260  0635               	decf	dtoa@w^0,f,c
  4774   002262  A0D8               	btfss	status,0,c
  4775   002264  0636               	decf	(dtoa@w+1)^0,f,c
  4776   002266                     
  4777                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  4778   002266  C037  F004         	movff	dtoa@n,___aodiv@dividend
  4779   00226A  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  4780   00226E  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  4781   002272  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  4782   002276  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  4783   00227A  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  4784   00227E  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  4785   002282  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  4786   002286  0E0A               	movlw	10
  4787   002288  6E0C               	movwf	___aodiv@divisor^0,c
  4788   00228A  0E00               	movlw	0
  4789   00228C  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  4790   00228E  0E00               	movlw	0
  4791   002290  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  4792   002292  0E00               	movlw	0
  4793   002294  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  4794   002296  0E00               	movlw	0
  4795   002298  6E10               	movwf	(___aodiv@divisor+4)^0,c
  4796   00229A  0E00               	movlw	0
  4797   00229C  6E11               	movwf	(___aodiv@divisor+5)^0,c
  4798   00229E  0E00               	movlw	0
  4799   0022A0  6E12               	movwf	(___aodiv@divisor+6)^0,c
  4800   0022A2  0E00               	movlw	0
  4801   0022A4  6E13               	movwf	(___aodiv@divisor+7)^0,c
  4802   0022A6  ECEF  F012         	call	___aodiv	;wreg free
  4803   0022AA  C004  F037         	movff	?___aodiv,dtoa@n
  4804   0022AE  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  4805   0022B2  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  4806   0022B6  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  4807   0022BA  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  4808   0022BE  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  4809   0022C2  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  4810   0022C6  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  4811   0022CA                     l2742:
  4812                           
  4813                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4814   0022CA  BE40               	btfsc	(dtoa@i+1)^0,7,c
  4815   0022CC  EF70  F011         	goto	u1211
  4816   0022D0  5040               	movf	(dtoa@i+1)^0,w,c
  4817   0022D2  E108               	bnz	u1210
  4818   0022D4  043F               	decf	dtoa@i^0,w,c
  4819   0022D6  A0D8               	btfss	status,0,c
  4820   0022D8  EF70  F011         	goto	u1211
  4821   0022DC  EF72  F011         	goto	u1210
  4822   0022E0                     u1211:
  4823   0022E0  EF8E  F011         	goto	l2748
  4824   0022E4                     u1210:
  4825   0022E4  5037               	movf	dtoa@n^0,w,c
  4826   0022E6  1038               	iorwf	(dtoa@n+1)^0,w,c
  4827   0022E8  1039               	iorwf	(dtoa@n+2)^0,w,c
  4828   0022EA  103A               	iorwf	(dtoa@n+3)^0,w,c
  4829   0022EC  103B               	iorwf	(dtoa@n+4)^0,w,c
  4830   0022EE  103C               	iorwf	(dtoa@n+5)^0,w,c
  4831   0022F0  103D               	iorwf	(dtoa@n+6)^0,w,c
  4832   0022F2  103E               	iorwf	(dtoa@n+7)^0,w,c
  4833   0022F4  A4D8               	btfss	status,2,c
  4834   0022F6  EF7F  F011         	goto	u1221
  4835   0022FA  EF81  F011         	goto	u1220
  4836   0022FE                     u1221:
  4837   0022FE  EFE9  F010         	goto	l2732
  4838   002302                     u1220:
  4839   002302  BE34               	btfsc	(dtoa@p+1)^0,7,c
  4840   002304  EF8E  F011         	goto	u1230
  4841   002308  5034               	movf	(dtoa@p+1)^0,w,c
  4842   00230A  E106               	bnz	u1231
  4843   00230C  0433               	decf	dtoa@p^0,w,c
  4844   00230E  B0D8               	btfsc	status,0,c
  4845   002310  EF8C  F011         	goto	u1231
  4846   002314  EF8E  F011         	goto	u1230
  4847   002318                     u1231:
  4848   002318  EFE9  F010         	goto	l2732
  4849   00231C                     u1230:
  4850   00231C                     l2748:
  4851                           
  4852                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  4853   00231C  5041               	movf	dtoa@s^0,w,c
  4854   00231E  B4D8               	btfsc	status,2,c
  4855   002320  EF94  F011         	goto	u1241
  4856   002324  EF96  F011         	goto	u1240
  4857   002328                     u1241:
  4858   002328  EFA1  F011         	goto	l2754
  4859   00232C                     u1240:
  4860   00232C                     
  4861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  4862   00232C  063F               	decf	dtoa@i^0,f,c
  4863   00232E  A0D8               	btfss	status,0,c
  4864   002330  0640               	decf	(dtoa@i+1)^0,f,c
  4865   002332                     
  4866                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  4867   002332  0E3C               	movlw	low _dbuf
  4868   002334  243F               	addwf	dtoa@i^0,w,c
  4869   002336  6ED9               	movwf	fsr2l,c
  4870   002338  0E03               	movlw	high _dbuf
  4871   00233A  2040               	addwfc	(dtoa@i+1)^0,w,c
  4872   00233C  6EDA               	movwf	fsr2h,c
  4873   00233E  C041  FFDF         	movff	dtoa@s,indf2
  4874   002342                     l2754:
  4875                           
  4876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4877   002342  C01F  F014         	movff	dtoa@fp,pad@fp
  4878   002346  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  4879   00234A  0E3C               	movlw	low _dbuf
  4880   00234C  243F               	addwf	dtoa@i^0,w,c
  4881   00234E  6E16               	movwf	pad@buf^0,c
  4882   002350  0E03               	movlw	high _dbuf
  4883   002352  2040               	addwfc	(dtoa@i+1)^0,w,c
  4884   002354  6E17               	movwf	(pad@buf+1)^0,c
  4885   002356  C035  F018         	movff	dtoa@w,pad@p
  4886   00235A  C036  F019         	movff	dtoa@w+1,pad@p+1
  4887   00235E  ECF8  F019         	call	_pad	;wreg free
  4888   002362  0012               	return		;funcret
  4889   002364                     __end_of_dtoa:
  4890                           	callstack 0
  4891                           
  4892 ;; *************** function _pad *****************
  4893 ;; Defined at:
  4894 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  4897 ;;		 -> sprintf@f(11), 
  4898 ;;  buf             2   21[COMRAM] PTR unsigned char 
  4899 ;;		 -> dbuf(32), 
  4900 ;;  p               2   23[COMRAM] int 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  w               2   28[COMRAM] int 
  4903 ;;  i               2   26[COMRAM] int 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4913 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4914 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4916 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4917 ;;Total ram usage:       11 bytes
  4918 ;; Hardware stack levels used: 1
  4919 ;; Hardware stack levels required when called: 4
  4920 ;; This function calls:
  4921 ;;		_fputc
  4922 ;;		_fputs
  4923 ;; This function is called by:
  4924 ;;		_dtoa
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text14
  4929   0033F0                     __ptext14:
  4930                           	callstack 0
  4931   0033F0                     _pad:
  4932                           	callstack 22
  4933   0033F0                     
  4934                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  4935   0033F0  BE19               	btfsc	(pad@p+1)^0,7,c
  4936   0033F2  EFFD  F019         	goto	u1101
  4937   0033F6  EFFF  F019         	goto	u1100
  4938   0033FA                     u1101:
  4939   0033FA  EF05  F01A         	goto	l2668
  4940   0033FE                     u1100:
  4941   0033FE  C018  F01D         	movff	pad@p,pad@w
  4942   003402  C019  F01E         	movff	pad@p+1,pad@w+1
  4943   003406  EF09  F01A         	goto	l1241
  4944   00340A                     l2668:
  4945   00340A  0E00               	movlw	0
  4946   00340C  6E1E               	movwf	(pad@w+1)^0,c
  4947   00340E  0E00               	movlw	0
  4948   003410  6E1D               	movwf	pad@w^0,c
  4949   003412                     l1241:
  4950                           
  4951                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  4952   003412  0E00               	movlw	0
  4953   003414  6E1C               	movwf	(pad@i+1)^0,c
  4954   003416  0E00               	movlw	0
  4955   003418  6E1B               	movwf	pad@i^0,c
  4956                           
  4957                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4958   00341A  EF1B  F01A         	goto	l2674
  4959   00341E                     l2670:
  4960                           
  4961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  4962   00341E  0E00               	movlw	0
  4963   003420  6E05               	movwf	(fputc@c+1)^0,c
  4964   003422  0E20               	movlw	32
  4965   003424  6E04               	movwf	fputc@c^0,c
  4966   003426  C014  F006         	movff	pad@fp,fputc@fp
  4967   00342A  C015  F007         	movff	pad@fp+1,fputc@fp+1
  4968   00342E  EC94  F017         	call	_fputc	;wreg free
  4969   003432                     
  4970                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  4971   003432  4A1B               	infsnz	pad@i^0,f,c
  4972   003434  2A1C               	incf	(pad@i+1)^0,f,c
  4973   003436                     l2674:
  4974                           
  4975                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4976   003436  501D               	movf	pad@w^0,w,c
  4977   003438  5C1B               	subwf	pad@i^0,w,c
  4978   00343A  501C               	movf	(pad@i+1)^0,w,c
  4979   00343C  0A80               	xorlw	128
  4980   00343E  6E1A               	movwf	??_pad^0,c
  4981   003440  501E               	movf	(pad@w+1)^0,w,c
  4982   003442  0A80               	xorlw	128
  4983   003444  581A               	subwfb	??_pad^0,w,c
  4984   003446  A0D8               	btfss	status,0,c
  4985   003448  EF28  F01A         	goto	u1111
  4986   00344C  EF2A  F01A         	goto	u1110
  4987   003450                     u1111:
  4988   003450  EF0F  F01A         	goto	l2670
  4989   003454                     u1110:
  4990   003454                     
  4991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  4992   003454  C016  F00D         	movff	pad@buf,fputs@s
  4993   003458  C017  F00E         	movff	pad@buf+1,fputs@s+1
  4994   00345C  C014  F00F         	movff	pad@fp,fputs@fp
  4995   003460  C015  F010         	movff	pad@fp+1,fputs@fp+1
  4996   003464  EC94  F01B         	call	_fputs	;wreg free
  4997   003468  0012               	return		;funcret
  4998   00346A                     __end_of_pad:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function _fputs *****************
  5002 ;; Defined at:
  5003 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  s               2   12[COMRAM] PTR const unsigned char 
  5006 ;;		 -> dbuf(32), 
  5007 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  5008 ;;		 -> sprintf@f(11), 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  i               2   17[COMRAM] int 
  5011 ;;  c               1   16[COMRAM] unsigned char 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  2   12[COMRAM] int 
  5014 ;; Registers used:
  5015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5024 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;Total ram usage:        7 bytes
  5026 ;; Hardware stack levels used: 1
  5027 ;; Hardware stack levels required when called: 3
  5028 ;; This function calls:
  5029 ;;		_fputc
  5030 ;; This function is called by:
  5031 ;;		_pad
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text15
  5036   003728                     __ptext15:
  5037                           	callstack 0
  5038   003728                     _fputs:
  5039                           	callstack 22
  5040   003728  0E00               	movlw	0
  5041   00372A  6E13               	movwf	(fputs@i+1)^0,c
  5042   00372C  0E00               	movlw	0
  5043   00372E  6E12               	movwf	fputs@i^0,c
  5044   003730  EFA5  F01B         	goto	l2578
  5045   003734                     l2574:
  5046   003734  C011  F004         	movff	fputs@c,fputc@c
  5047   003738  6A05               	clrf	(fputc@c+1)^0,c
  5048   00373A  C00F  F006         	movff	fputs@fp,fputc@fp
  5049   00373E  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  5050   003742  EC94  F017         	call	_fputc	;wreg free
  5051   003746  4A12               	infsnz	fputs@i^0,f,c
  5052   003748  2A13               	incf	(fputs@i+1)^0,f,c
  5053   00374A                     l2578:
  5054   00374A  5012               	movf	fputs@i^0,w,c
  5055   00374C  240D               	addwf	fputs@s^0,w,c
  5056   00374E  6ED9               	movwf	fsr2l,c
  5057   003750  5013               	movf	(fputs@i+1)^0,w,c
  5058   003752  200E               	addwfc	(fputs@s+1)^0,w,c
  5059   003754  6EDA               	movwf	fsr2h,c
  5060   003756  50DF               	movf	indf2,w,c
  5061   003758  6E11               	movwf	fputs@c^0,c
  5062   00375A  5011               	movf	fputs@c^0,w,c
  5063   00375C  A4D8               	btfss	status,2,c
  5064   00375E  EFB3  F01B         	goto	u951
  5065   003762  EFB5  F01B         	goto	u950
  5066   003766                     u951:
  5067   003766  EF9A  F01B         	goto	l2574
  5068   00376A                     u950:
  5069   00376A  0012               	return		;funcret
  5070   00376C                     __end_of_fputs:
  5071                           	callstack 0
  5072                           
  5073 ;; *************** function _fputc *****************
  5074 ;; Defined at:
  5075 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  c               2    3[COMRAM] int 
  5078 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  5079 ;;		 -> sprintf@f(11), 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  2    3[COMRAM] int 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5093 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5094 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5095 ;;Total ram usage:        9 bytes
  5096 ;; Hardware stack levels used: 1
  5097 ;; Hardware stack levels required when called: 2
  5098 ;; This function calls:
  5099 ;;		_putch
  5100 ;; This function is called by:
  5101 ;;		_pad
  5102 ;;		_vfpfcnvrt
  5103 ;;		_fputs
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text16
  5108   002F28                     __ptext16:
  5109                           	callstack 0
  5110   002F28                     _fputc:
  5111                           	callstack 25
  5112   002F28  5006               	movf	fputc@fp^0,w,c
  5113   002F2A  1007               	iorwf	(fputc@fp+1)^0,w,c
  5114   002F2C  B4D8               	btfsc	status,2,c
  5115   002F2E  EF9B  F017         	goto	u911
  5116   002F32  EF9D  F017         	goto	u910
  5117   002F36                     u911:
  5118   002F36  EFA6  F017         	goto	l2562
  5119   002F3A                     u910:
  5120   002F3A  5006               	movf	fputc@fp^0,w,c
  5121   002F3C  1007               	iorwf	(fputc@fp+1)^0,w,c
  5122   002F3E  A4D8               	btfss	status,2,c
  5123   002F40  EFA4  F017         	goto	u921
  5124   002F44  EFA6  F017         	goto	u920
  5125   002F48                     u921:
  5126   002F48  EFAB  F017         	goto	l2564
  5127   002F4C                     u920:
  5128   002F4C                     l2562:
  5129   002F4C  5004               	movf	fputc@c^0,w,c
  5130   002F4E  ECE4  F01C         	call	_putch
  5131   002F52  EFF8  F017         	goto	l1289
  5132   002F56                     l2564:
  5133   002F56  EE20 F009          	lfsr	2,9
  5134   002F5A  5006               	movf	fputc@fp^0,w,c
  5135   002F5C  26D9               	addwf	fsr2l,f,c
  5136   002F5E  5007               	movf	(fputc@fp+1)^0,w,c
  5137   002F60  22DA               	addwfc	fsr2h,f,c
  5138   002F62  50DE               	movf	postinc2,w,c
  5139   002F64  10DE               	iorwf	postinc2,w,c
  5140   002F66  B4D8               	btfsc	status,2,c
  5141   002F68  EFB8  F017         	goto	u931
  5142   002F6C  EFBA  F017         	goto	u930
  5143   002F70                     u931:
  5144   002F70  EFD5  F017         	goto	l2568
  5145   002F74                     u930:
  5146   002F74  EE20 F009          	lfsr	2,9
  5147   002F78  5006               	movf	fputc@fp^0,w,c
  5148   002F7A  26D9               	addwf	fsr2l,f,c
  5149   002F7C  5007               	movf	(fputc@fp+1)^0,w,c
  5150   002F7E  22DA               	addwfc	fsr2h,f,c
  5151   002F80  EE10 F003          	lfsr	1,3
  5152   002F84  5006               	movf	fputc@fp^0,w,c
  5153   002F86  26E1               	addwf	fsr1l,f,c
  5154   002F88  5007               	movf	(fputc@fp+1)^0,w,c
  5155   002F8A  22E2               	addwfc	fsr1h,f,c
  5156   002F8C  50DE               	movf	postinc2,w,c
  5157   002F8E  5CE6               	subwf	postinc1,w,c
  5158   002F90  50E6               	movf	postinc1,w,c
  5159   002F92  0A80               	xorlw	128
  5160   002F94  6E0C               	movwf	(??_fputc+4)^0,c
  5161   002F96  50DE               	movf	postinc2,w,c
  5162   002F98  0A80               	xorlw	128
  5163   002F9A  580C               	subwfb	(??_fputc+4)^0,w,c
  5164   002F9C  B0D8               	btfsc	status,0,c
  5165   002F9E  EFD3  F017         	goto	u941
  5166   002FA2  EFD5  F017         	goto	u940
  5167   002FA6                     u941:
  5168   002FA6  EFF8  F017         	goto	l1289
  5169   002FAA                     u940:
  5170   002FAA                     l2568:
  5171   002FAA  EE20 F003          	lfsr	2,3
  5172   002FAE  5006               	movf	fputc@fp^0,w,c
  5173   002FB0  26D9               	addwf	fsr2l,f,c
  5174   002FB2  5007               	movf	(fputc@fp+1)^0,w,c
  5175   002FB4  22DA               	addwfc	fsr2h,f,c
  5176   002FB6  CFDE F008          	movff	postinc2,??_fputc
  5177   002FBA  CFDD F009          	movff	postdec2,??_fputc+1
  5178   002FBE  C006  FFD9         	movff	fputc@fp,fsr2l
  5179   002FC2  C007  FFDA         	movff	fputc@fp+1,fsr2h
  5180   002FC6  CFDE F00A          	movff	postinc2,??_fputc+2
  5181   002FCA  CFDD F00B          	movff	postdec2,??_fputc+3
  5182   002FCE  5008               	movf	??_fputc^0,w,c
  5183   002FD0  240A               	addwf	(??_fputc+2)^0,w,c
  5184   002FD2  6ED9               	movwf	fsr2l,c
  5185   002FD4  5009               	movf	(??_fputc+1)^0,w,c
  5186   002FD6  200B               	addwfc	(??_fputc+3)^0,w,c
  5187   002FD8  6EDA               	movwf	fsr2h,c
  5188   002FDA  C004  FFDF         	movff	fputc@c,indf2
  5189   002FDE  EE20 F003          	lfsr	2,3
  5190   002FE2  5006               	movf	fputc@fp^0,w,c
  5191   002FE4  26D9               	addwf	fsr2l,f,c
  5192   002FE6  5007               	movf	(fputc@fp+1)^0,w,c
  5193   002FE8  22DA               	addwfc	fsr2h,f,c
  5194   002FEA  2ADE               	incf	postinc2,f,c
  5195   002FEC  0E00               	movlw	0
  5196   002FEE  22DD               	addwfc	postdec2,f,c
  5197   002FF0                     l1289:
  5198   002FF0  0012               	return		;funcret
  5199   002FF2                     __end_of_fputc:
  5200                           	callstack 0
  5201                           
  5202 ;; *************** function _putch *****************
  5203 ;; Defined at:
  5204 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  c               1    wreg     unsigned char 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  c               1    0[COMRAM] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used: 1
  5224 ;; Hardware stack levels required when called: 1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_fputc
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text17
  5233   0039C8                     __ptext17:
  5234                           	callstack 0
  5235   0039C8                     _putch:
  5236                           	callstack 25
  5237   0039C8  0012               	return		;funcret
  5238   0039CA                     __end_of_putch:
  5239                           	callstack 0
  5240                           
  5241 ;; *************** function _abs *****************
  5242 ;; Defined at:
  5243 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  a               2   21[COMRAM] int 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  2   21[COMRAM] int 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used: 1
  5263 ;; Hardware stack levels required when called: 1
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_normalise_readings
  5268 ;;		_dtoa
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text18
  5273   0037AE                     __ptext18:
  5274                           	callstack 0
  5275   0037AE                     _abs:
  5276                           	callstack 25
  5277   0037AE  BE17               	btfsc	(abs@a+1)^0,7,c
  5278   0037B0  EFE4  F01B         	goto	u960
  5279   0037B4  5017               	movf	(abs@a+1)^0,w,c
  5280   0037B6  E106               	bnz	u961
  5281   0037B8  0416               	decf	abs@a^0,w,c
  5282   0037BA  B0D8               	btfsc	status,0,c
  5283   0037BC  EFE2  F01B         	goto	u961
  5284   0037C0  EFE4  F01B         	goto	u960
  5285   0037C4                     u961:
  5286   0037C4  EFF2  F01B         	goto	l1209
  5287   0037C8                     u960:
  5288   0037C8  C016  F018         	movff	abs@a,??_abs
  5289   0037CC  C017  F019         	movff	abs@a+1,??_abs+1
  5290   0037D0  1E18               	comf	??_abs^0,f,c
  5291   0037D2  1E19               	comf	(??_abs+1)^0,f,c
  5292   0037D4  4A18               	infsnz	??_abs^0,f,c
  5293   0037D6  2A19               	incf	(??_abs+1)^0,f,c
  5294   0037D8  C018  F016         	movff	??_abs,?_abs
  5295   0037DC  C019  F017         	movff	??_abs+1,?_abs+1
  5296   0037E0  EFF6  F01B         	goto	l1212
  5297   0037E4                     l1209:
  5298   0037E4  C016  F016         	movff	abs@a,?_abs
  5299   0037E8  C017  F017         	movff	abs@a+1,?_abs+1
  5300   0037EC                     l1212:
  5301   0037EC  0012               	return		;funcret
  5302   0037EE                     __end_of_abs:
  5303                           	callstack 0
  5304                           
  5305 ;; *************** function ___aomod *****************
  5306 ;; Defined at:
  5307 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  dividend        8    3[COMRAM] long long 
  5310 ;;  divisor         8   11[COMRAM] long long 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  sign            1   20[COMRAM] unsigned char 
  5313 ;;  counter         1   19[COMRAM] unsigned char 
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  8    3[COMRAM] long long 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5323 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5326 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;Total ram usage:       18 bytes
  5328 ;; Hardware stack levels used: 1
  5329 ;; Hardware stack levels required when called: 1
  5330 ;; This function calls:
  5331 ;;		Nothing
  5332 ;; This function is called by:
  5333 ;;		_dtoa
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text19
  5338   002A40                     __ptext19:
  5339                           	callstack 0
  5340   002A40                     ___aomod:
  5341                           	callstack 25
  5342   002A40  0E00               	movlw	0
  5343   002A42  6E15               	movwf	___aomod@sign^0,c
  5344   002A44  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  5345   002A46  EF29  F015         	goto	u1040
  5346   002A4A  EF27  F015         	goto	u1041
  5347   002A4E                     u1041:
  5348   002A4E  EF3B  F015         	goto	l2636
  5349   002A52                     u1040:
  5350   002A52  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5351   002A54  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5352   002A56  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5353   002A58  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5354   002A5A  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5355   002A5C  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5356   002A5E  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5357   002A60  6C04               	negf	___aomod@dividend^0,c
  5358   002A62  0E00               	movlw	0
  5359   002A64  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5360   002A66  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5361   002A68  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5362   002A6A  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5363   002A6C  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5364   002A6E  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5365   002A70  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5366   002A72  0E01               	movlw	1
  5367   002A74  6E15               	movwf	___aomod@sign^0,c
  5368   002A76                     l2636:
  5369   002A76  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  5370   002A78  EF42  F015         	goto	u1050
  5371   002A7C  EF40  F015         	goto	u1051
  5372   002A80                     u1051:
  5373   002A80  EF52  F015         	goto	l2640
  5374   002A84                     u1050:
  5375   002A84  1E13               	comf	(___aomod@divisor+7)^0,f,c
  5376   002A86  1E12               	comf	(___aomod@divisor+6)^0,f,c
  5377   002A88  1E11               	comf	(___aomod@divisor+5)^0,f,c
  5378   002A8A  1E10               	comf	(___aomod@divisor+4)^0,f,c
  5379   002A8C  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  5380   002A8E  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  5381   002A90  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  5382   002A92  6C0C               	negf	___aomod@divisor^0,c
  5383   002A94  0E00               	movlw	0
  5384   002A96  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  5385   002A98  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  5386   002A9A  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  5387   002A9C  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  5388   002A9E  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  5389   002AA0  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  5390   002AA2  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  5391   002AA4                     l2640:
  5392   002AA4  500C               	movf	___aomod@divisor^0,w,c
  5393   002AA6  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  5394   002AA8  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  5395   002AAA  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  5396   002AAC  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  5397   002AAE  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  5398   002AB0  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  5399   002AB2  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  5400   002AB4  B4D8               	btfsc	status,2,c
  5401   002AB6  EF5F  F015         	goto	u1061
  5402   002ABA  EF61  F015         	goto	u1060
  5403   002ABE                     u1061:
  5404   002ABE  EFA9  F015         	goto	l2656
  5405   002AC2                     u1060:
  5406   002AC2  0E01               	movlw	1
  5407   002AC4  6E14               	movwf	___aomod@counter^0,c
  5408   002AC6  EF6F  F015         	goto	l2646
  5409   002ACA                     l2644:
  5410   002ACA  90D8               	bcf	status,0,c
  5411   002ACC  360C               	rlcf	___aomod@divisor^0,f,c
  5412   002ACE  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  5413   002AD0  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  5414   002AD2  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  5415   002AD4  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  5416   002AD6  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  5417   002AD8  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  5418   002ADA  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  5419   002ADC  2A14               	incf	___aomod@counter^0,f,c
  5420   002ADE                     l2646:
  5421   002ADE  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  5422   002AE0  EF74  F015         	goto	u1071
  5423   002AE4  EF76  F015         	goto	u1070
  5424   002AE8                     u1071:
  5425   002AE8  EF65  F015         	goto	l2644
  5426   002AEC                     u1070:
  5427   002AEC                     l2648:
  5428   002AEC  500C               	movf	___aomod@divisor^0,w,c
  5429   002AEE  5C04               	subwf	___aomod@dividend^0,w,c
  5430   002AF0  500D               	movf	(___aomod@divisor+1)^0,w,c
  5431   002AF2  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  5432   002AF4  500E               	movf	(___aomod@divisor+2)^0,w,c
  5433   002AF6  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  5434   002AF8  500F               	movf	(___aomod@divisor+3)^0,w,c
  5435   002AFA  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  5436   002AFC  5010               	movf	(___aomod@divisor+4)^0,w,c
  5437   002AFE  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  5438   002B00  5011               	movf	(___aomod@divisor+5)^0,w,c
  5439   002B02  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  5440   002B04  5012               	movf	(___aomod@divisor+6)^0,w,c
  5441   002B06  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  5442   002B08  5013               	movf	(___aomod@divisor+7)^0,w,c
  5443   002B0A  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  5444   002B0C  A0D8               	btfss	status,0,c
  5445   002B0E  EF8B  F015         	goto	u1081
  5446   002B12  EF8D  F015         	goto	u1080
  5447   002B16                     u1081:
  5448   002B16  EF9D  F015         	goto	l2652
  5449   002B1A                     u1080:
  5450   002B1A  500C               	movf	___aomod@divisor^0,w,c
  5451   002B1C  5E04               	subwf	___aomod@dividend^0,f,c
  5452   002B1E  500D               	movf	(___aomod@divisor+1)^0,w,c
  5453   002B20  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  5454   002B22  500E               	movf	(___aomod@divisor+2)^0,w,c
  5455   002B24  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  5456   002B26  500F               	movf	(___aomod@divisor+3)^0,w,c
  5457   002B28  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  5458   002B2A  5010               	movf	(___aomod@divisor+4)^0,w,c
  5459   002B2C  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  5460   002B2E  5011               	movf	(___aomod@divisor+5)^0,w,c
  5461   002B30  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  5462   002B32  5012               	movf	(___aomod@divisor+6)^0,w,c
  5463   002B34  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  5464   002B36  5013               	movf	(___aomod@divisor+7)^0,w,c
  5465   002B38  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  5466   002B3A                     l2652:
  5467   002B3A  90D8               	bcf	status,0,c
  5468   002B3C  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  5469   002B3E  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  5470   002B40  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  5471   002B42  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  5472   002B44  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  5473   002B46  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  5474   002B48  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  5475   002B4A  320C               	rrcf	___aomod@divisor^0,f,c
  5476   002B4C  2E14               	decfsz	___aomod@counter^0,f,c
  5477   002B4E  EF76  F015         	goto	l2648
  5478   002B52                     l2656:
  5479   002B52  5015               	movf	___aomod@sign^0,w,c
  5480   002B54  B4D8               	btfsc	status,2,c
  5481   002B56  EFAF  F015         	goto	u1091
  5482   002B5A  EFB1  F015         	goto	u1090
  5483   002B5E                     u1091:
  5484   002B5E  EFC1  F015         	goto	l2660
  5485   002B62                     u1090:
  5486   002B62  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5487   002B64  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5488   002B66  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5489   002B68  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5490   002B6A  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5491   002B6C  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5492   002B6E  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5493   002B70  6C04               	negf	___aomod@dividend^0,c
  5494   002B72  0E00               	movlw	0
  5495   002B74  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5496   002B76  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5497   002B78  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5498   002B7A  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5499   002B7C  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5500   002B7E  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5501   002B80  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5502   002B82                     l2660:
  5503   002B82  C004  F004         	movff	___aomod@dividend,?___aomod
  5504   002B86  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  5505   002B8A  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  5506   002B8E  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  5507   002B92  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  5508   002B96  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  5509   002B9A  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  5510   002B9E  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  5511   002BA2  0012               	return		;funcret
  5512   002BA4                     __end_of___aomod:
  5513                           	callstack 0
  5514                           
  5515 ;; *************** function ___aodiv *****************
  5516 ;; Defined at:
  5517 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  dividend        8    3[COMRAM] long long 
  5520 ;;  divisor         8   11[COMRAM] long long 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  quotient        8   21[COMRAM] long long 
  5523 ;;  sign            1   20[COMRAM] unsigned char 
  5524 ;;  counter         1   19[COMRAM] unsigned char 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  8    3[COMRAM] long long 
  5527 ;; Registers used:
  5528 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5534 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5535 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5537 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5538 ;;Total ram usage:       26 bytes
  5539 ;; Hardware stack levels used: 1
  5540 ;; Hardware stack levels required when called: 1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		_dtoa
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text20
  5549   0025DE                     __ptext20:
  5550                           	callstack 0
  5551   0025DE                     ___aodiv:
  5552                           	callstack 25
  5553   0025DE  0E00               	movlw	0
  5554   0025E0  6E15               	movwf	___aodiv@sign^0,c
  5555   0025E2  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  5556   0025E4  EFF8  F012         	goto	u970
  5557   0025E8  EFF6  F012         	goto	u971
  5558   0025EC                     u971:
  5559   0025EC  EF0A  F013         	goto	l2592
  5560   0025F0                     u970:
  5561   0025F0  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  5562   0025F2  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  5563   0025F4  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  5564   0025F6  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  5565   0025F8  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  5566   0025FA  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  5567   0025FC  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  5568   0025FE  6C0C               	negf	___aodiv@divisor^0,c
  5569   002600  0E00               	movlw	0
  5570   002602  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  5571   002604  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  5572   002606  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  5573   002608  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  5574   00260A  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  5575   00260C  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  5576   00260E  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  5577   002610  0E01               	movlw	1
  5578   002612  6E15               	movwf	___aodiv@sign^0,c
  5579   002614                     l2592:
  5580   002614  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  5581   002616  EF11  F013         	goto	u980
  5582   00261A  EF0F  F013         	goto	u981
  5583   00261E                     u981:
  5584   00261E  EF23  F013         	goto	l2598
  5585   002622                     u980:
  5586   002622  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  5587   002624  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  5588   002626  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  5589   002628  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  5590   00262A  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  5591   00262C  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  5592   00262E  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  5593   002630  6C04               	negf	___aodiv@dividend^0,c
  5594   002632  0E00               	movlw	0
  5595   002634  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  5596   002636  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  5597   002638  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  5598   00263A  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  5599   00263C  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  5600   00263E  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  5601   002640  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  5602   002642  0E01               	movlw	1
  5603   002644  1A15               	xorwf	___aodiv@sign^0,f,c
  5604   002646                     l2598:
  5605   002646  EE20  F016         	lfsr	2,___aodiv@quotient
  5606   00264A  0E07               	movlw	7
  5607   00264C                     u991:
  5608   00264C  6ADE               	clrf	postinc2,c
  5609   00264E  06E8               	decf	wreg,f,c
  5610   002650  E2FD               	bc	u991
  5611   002652  500C               	movf	___aodiv@divisor^0,w,c
  5612   002654  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  5613   002656  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  5614   002658  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  5615   00265A  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  5616   00265C  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  5617   00265E  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  5618   002660  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  5619   002662  B4D8               	btfsc	status,2,c
  5620   002664  EF36  F013         	goto	u1001
  5621   002668  EF38  F013         	goto	u1000
  5622   00266C                     u1001:
  5623   00266C  EF8A  F013         	goto	l2620
  5624   002670                     u1000:
  5625   002670  0E01               	movlw	1
  5626   002672  6E14               	movwf	___aodiv@counter^0,c
  5627   002674  EF46  F013         	goto	l2606
  5628   002678                     l2604:
  5629   002678  90D8               	bcf	status,0,c
  5630   00267A  360C               	rlcf	___aodiv@divisor^0,f,c
  5631   00267C  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  5632   00267E  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  5633   002680  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  5634   002682  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  5635   002684  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  5636   002686  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  5637   002688  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  5638   00268A  2A14               	incf	___aodiv@counter^0,f,c
  5639   00268C                     l2606:
  5640   00268C  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  5641   00268E  EF4B  F013         	goto	u1011
  5642   002692  EF4D  F013         	goto	u1010
  5643   002696                     u1011:
  5644   002696  EF3C  F013         	goto	l2604
  5645   00269A                     u1010:
  5646   00269A                     l2608:
  5647   00269A  90D8               	bcf	status,0,c
  5648   00269C  3616               	rlcf	___aodiv@quotient^0,f,c
  5649   00269E  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  5650   0026A0  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  5651   0026A2  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  5652   0026A4  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  5653   0026A6  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  5654   0026A8  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  5655   0026AA  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  5656   0026AC  500C               	movf	___aodiv@divisor^0,w,c
  5657   0026AE  5C04               	subwf	___aodiv@dividend^0,w,c
  5658   0026B0  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5659   0026B2  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  5660   0026B4  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5661   0026B6  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  5662   0026B8  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5663   0026BA  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  5664   0026BC  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5665   0026BE  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  5666   0026C0  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5667   0026C2  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  5668   0026C4  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5669   0026C6  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  5670   0026C8  5013               	movf	(___aodiv@divisor+7)^0,w,c
  5671   0026CA  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  5672   0026CC  A0D8               	btfss	status,0,c
  5673   0026CE  EF6B  F013         	goto	u1021
  5674   0026D2  EF6D  F013         	goto	u1020
  5675   0026D6                     u1021:
  5676   0026D6  EF7E  F013         	goto	l2616
  5677   0026DA                     u1020:
  5678   0026DA  500C               	movf	___aodiv@divisor^0,w,c
  5679   0026DC  5E04               	subwf	___aodiv@dividend^0,f,c
  5680   0026DE  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5681   0026E0  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  5682   0026E2  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5683   0026E4  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  5684   0026E6  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5685   0026E8  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  5686   0026EA  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5687   0026EC  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  5688   0026EE  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5689   0026F0  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  5690   0026F2  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5691   0026F4  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  5692   0026F6  5013               	movf	(___aodiv@divisor+7)^0,w,c
  5693   0026F8  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  5694   0026FA  8016               	bsf	___aodiv@quotient^0,0,c
  5695   0026FC                     l2616:
  5696   0026FC  90D8               	bcf	status,0,c
  5697   0026FE  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  5698   002700  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  5699   002702  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  5700   002704  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  5701   002706  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  5702   002708  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  5703   00270A  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  5704   00270C  320C               	rrcf	___aodiv@divisor^0,f,c
  5705   00270E  2E14               	decfsz	___aodiv@counter^0,f,c
  5706   002710  EF4D  F013         	goto	l2608
  5707   002714                     l2620:
  5708   002714  5015               	movf	___aodiv@sign^0,w,c
  5709   002716  B4D8               	btfsc	status,2,c
  5710   002718  EF90  F013         	goto	u1031
  5711   00271C  EF92  F013         	goto	u1030
  5712   002720                     u1031:
  5713   002720  EFA2  F013         	goto	l2624
  5714   002724                     u1030:
  5715   002724  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  5716   002726  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  5717   002728  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  5718   00272A  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  5719   00272C  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  5720   00272E  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  5721   002730  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  5722   002732  6C16               	negf	___aodiv@quotient^0,c
  5723   002734  0E00               	movlw	0
  5724   002736  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  5725   002738  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  5726   00273A  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  5727   00273C  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  5728   00273E  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  5729   002740  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  5730   002742  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  5731   002744                     l2624:
  5732   002744  C016  F004         	movff	___aodiv@quotient,?___aodiv
  5733   002748  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  5734   00274C  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  5735   002750  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  5736   002754  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  5737   002758  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  5738   00275C  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  5739   002760  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  5740   002764  0012               	return		;funcret
  5741   002766                     __end_of___aodiv:
  5742                           	callstack 0
  5743                           
  5744 ;; *************** function _sendStringSerial4 *****************
  5745 ;; Defined at:
  5746 ;;		line 39 in file "serial.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  string          2    4[COMRAM] PTR unsigned char 
  5749 ;;		 -> main@buf(150), 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5765 ;;Total ram usage:        2 bytes
  5766 ;; Hardware stack levels used: 1
  5767 ;; Hardware stack levels required when called: 2
  5768 ;; This function calls:
  5769 ;;		_sendCharSerial4
  5770 ;; This function is called by:
  5771 ;;		_main
  5772 ;;		_clear_read_calibration
  5773 ;;		_motor_response
  5774 ;;		_card_response
  5775 ;;		_card_response_easy
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text21
  5780   003822                     __ptext21:
  5781                           	callstack 0
  5782   003822                     _sendStringSerial4:
  5783                           	callstack 28
  5784   003822                     
  5785                           ;serial.c: 40:  while(*string != 0) {
  5786   003822  EF1C  F01C         	goto	l2996
  5787   003826                     l2992:
  5788                           
  5789                           ;serial.c: 41:         sendCharSerial4(*string++);
  5790   003826  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  5791   00382A  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5792   00382E  50DF               	movf	indf2,w,c
  5793   003830  ECC3  F01C         	call	_sendCharSerial4
  5794   003834  4A05               	infsnz	sendStringSerial4@string^0,f,c
  5795   003836  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  5796   003838                     l2996:
  5797                           
  5798                           ;serial.c: 40:  while(*string != 0) {
  5799   003838  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  5800   00383C  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5801   003840  50DF               	movf	indf2,w,c
  5802   003842  A4D8               	btfss	status,2,c
  5803   003844  EF26  F01C         	goto	u1421
  5804   003848  EF28  F01C         	goto	u1420
  5805   00384C                     u1421:
  5806   00384C  EF13  F01C         	goto	l2992
  5807   003850                     u1420:
  5808   003850  0012               	return		;funcret
  5809   003852                     __end_of_sendStringSerial4:
  5810                           	callstack 0
  5811                           
  5812 ;; *************** function _sendCharSerial4 *****************
  5813 ;; Defined at:
  5814 ;;		line 32 in file "serial.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  charToSend      1    wreg     unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  charToSend      1    3[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5832 ;;Total ram usage:        1 bytes
  5833 ;; Hardware stack levels used: 1
  5834 ;; Hardware stack levels required when called: 1
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_sendStringSerial4
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text22
  5843   003986                     __ptext22:
  5844                           	callstack 0
  5845   003986                     _sendCharSerial4:
  5846                           	callstack 28
  5847                           
  5848                           ;incstack = 0
  5849                           ;sendCharSerial4@charToSend stored from wreg
  5850   003986  6E04               	movwf	sendCharSerial4@charToSend^0,c
  5851   003988                     l459:
  5852   003988  010E               	movlb	14	; () banked
  5853   00398A  A537               	btfss	55,2,b	;volatile
  5854   00398C  EFCA  F01C         	goto	u1391
  5855   003990  EFCC  F01C         	goto	u1390
  5856   003994                     u1391:
  5857   003994  EFC4  F01C         	goto	l459
  5858   003998                     u1390:
  5859   003998                     
  5860                           ; BSR set to: 14
  5861                           ;serial.c: 34:     TX4REG = charToSend;
  5862   003998  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5863   00399C                     
  5864                           ; BSR set to: 14
  5865   00399C  0012               	return		;funcret
  5866   00399E                     __end_of_sendCharSerial4:
  5867                           	callstack 0
  5868                           
  5869 ;; *************** function _reverseFullSpeed *****************
  5870 ;; Defined at:
  5871 ;;		line 145 in file "dc_motor.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  5874 ;;		 -> main@motorL(9), 
  5875 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  5876 ;;		 -> main@motorR(9), 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  i               2   27[COMRAM] int 
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5889 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;Total ram usage:        7 bytes
  5893 ;; Hardware stack levels used: 1
  5894 ;; Hardware stack levels required when called: 3
  5895 ;; This function calls:
  5896 ;;		_setMotorPWM
  5897 ;; This function is called by:
  5898 ;;		_main
  5899 ;;		_motor_response
  5900 ;;		_motor_response_easy
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text23
  5905   00314A                     __ptext23:
  5906                           	callstack 0
  5907   00314A                     _reverseFullSpeed:
  5908                           	callstack 27
  5909   00314A                     
  5910                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5911   00314A  EE20 F001          	lfsr	2,1
  5912   00314E  5017               	movf	reverseFullSpeed@mL^0,w,c
  5913   003150  26D9               	addwf	fsr2l,f,c
  5914   003152  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5915   003154  22DA               	addwfc	fsr2h,f,c
  5916   003156  0E00               	movlw	0
  5917   003158  6EDF               	movwf	indf2,c
  5918                           
  5919                           ;dc_motor.c: 148:     mR->direction=0;
  5920   00315A  EE20 F001          	lfsr	2,1
  5921   00315E  5019               	movf	reverseFullSpeed@mR^0,w,c
  5922   003160  26D9               	addwf	fsr2l,f,c
  5923   003162  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5924   003164  22DA               	addwfc	fsr2h,f,c
  5925   003166  0E00               	movlw	0
  5926   003168  6EDF               	movwf	indf2,c
  5927   00316A                     
  5928                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5929   00316A  0E00               	movlw	0
  5930   00316C  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  5931   00316E  0E00               	movlw	0
  5932   003170  6E1C               	movwf	reverseFullSpeed@i^0,c
  5933   003172                     l2966:
  5934                           
  5935                           ;dc_motor.c: 150:         mL->power=i;
  5936   003172  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5937   003176  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5938   00317A  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5939                           
  5940                           ;dc_motor.c: 151:         mR->power=i;
  5941   00317E  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5942   003182  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5943   003186  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  5944   00318A                     
  5945                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5946   00318A  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5947   00318E  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5948   003192  EC6A  F014         	call	_setMotorPWM	;wreg free
  5949   003196                     
  5950                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5951   003196  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5952   00319A  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5953   00319E  EC6A  F014         	call	_setMotorPWM	;wreg free
  5954   0031A2                     
  5955                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5956   0031A2  0ED0               	movlw	208
  5957   0031A4  6E1B               	movwf	??_reverseFullSpeed^0,c
  5958   0031A6  0ECA               	movlw	202
  5959   0031A8                     u2167:
  5960   0031A8  2EE8               	decfsz	wreg,f,c
  5961   0031AA  D7FE               	bra	u2167
  5962   0031AC  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  5963   0031AE  D7FC               	bra	u2167
  5964   0031B0                     
  5965                           ;dc_motor.c: 155:     }
  5966   0031B0  0E0A               	movlw	10
  5967   0031B2  261C               	addwf	reverseFullSpeed@i^0,f,c
  5968   0031B4  0E00               	movlw	0
  5969   0031B6  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5970   0031B8  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5971   0031BA  EFE8  F018         	goto	u1411
  5972   0031BE  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  5973   0031C0  E109               	bnz	u1410
  5974   0031C2  0E3C               	movlw	60
  5975   0031C4  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  5976   0031C6  A0D8               	btfss	status,0,c
  5977   0031C8  EFE8  F018         	goto	u1411
  5978   0031CC  EFEA  F018         	goto	u1410
  5979   0031D0                     u1411:
  5980   0031D0  EFB9  F018         	goto	l2966
  5981   0031D4                     u1410:
  5982   0031D4  0012               	return		;funcret
  5983   0031D6                     __end_of_reverseFullSpeed:
  5984                           	callstack 0
  5985                           
  5986 ;; *************** function _home_response *****************
  5987 ;; Defined at:
  5988 ;;		line 244 in file "colour_identify.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  card            1    wreg     enum E14551
  5991 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  5992 ;;		 -> main@motorL(9), 
  5993 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  5994 ;;		 -> main@motorR(9), 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  card            1   36[COMRAM] enum E14551
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6010 ;;Total ram usage:        7 bytes
  6011 ;; Hardware stack levels used: 1
  6012 ;; Hardware stack levels required when called: 4
  6013 ;; This function calls:
  6014 ;;		_fullSpeedAhead
  6015 ;;		_stop
  6016 ;;		_turnLeft45
  6017 ;;		_turnRight45
  6018 ;; This function is called by:
  6019 ;;		_motor_response
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text24
  6024   001A54                     __ptext24:
  6025                           	callstack 0
  6026   001A54                     _home_response:
  6027                           	callstack 24
  6028                           
  6029                           ;incstack = 0
  6030                           ;home_response@card stored from wreg
  6031   001A54  6E25               	movwf	home_response@card^0,c
  6032   001A56                     
  6033                           ;colour_identify.c: 245:     switch(card){
  6034   001A56  EFD7  F00E         	goto	l3020
  6035   001A5A                     l3000:
  6036                           
  6037                           ;colour_identify.c: 247:             turnLeft45(mL,mR);
  6038   001A5A  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6039   001A5E  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6040   001A62  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6041   001A66  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6042   001A6A  EC4F  F018         	call	_turnLeft45	;wreg free
  6043                           
  6044                           ;colour_identify.c: 248:             stop(mL,mR);
  6045   001A6E  C01F  F017         	movff	home_response@mL,stop@mL
  6046   001A72  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6047   001A76  C021  F019         	movff	home_response@mR,stop@mR
  6048   001A7A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6049   001A7E  EC75  F019         	call	_stop	;wreg free
  6050                           
  6051                           ;colour_identify.c: 249:             turnLeft45(mL,mR);
  6052   001A82  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6053   001A86  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6054   001A8A  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6055   001A8E  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6056   001A92  EC4F  F018         	call	_turnLeft45	;wreg free
  6057                           
  6058                           ;colour_identify.c: 250:             stop(mL,mR);
  6059   001A96  C01F  F017         	movff	home_response@mL,stop@mL
  6060   001A9A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6061   001A9E  C021  F019         	movff	home_response@mR,stop@mR
  6062   001AA2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6063   001AA6  EC75  F019         	call	_stop	;wreg free
  6064                           
  6065                           ;colour_identify.c: 251:             break;
  6066   001AAA  EF00  F00F         	goto	l394
  6067   001AAE                     l3002:
  6068                           
  6069                           ;colour_identify.c: 253:             turnRight45(mL,mR);
  6070   001AAE  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6071   001AB2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6072   001AB6  C021  F019         	movff	home_response@mR,turnRight45@mR
  6073   001ABA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6074   001ABE  ECF9  F017         	call	_turnRight45	;wreg free
  6075                           
  6076                           ;colour_identify.c: 254:             stop(mL,mR);
  6077   001AC2  C01F  F017         	movff	home_response@mL,stop@mL
  6078   001AC6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6079   001ACA  C021  F019         	movff	home_response@mR,stop@mR
  6080   001ACE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6081   001AD2  EC75  F019         	call	_stop	;wreg free
  6082                           
  6083                           ;colour_identify.c: 255:             turnRight45(mL,mR);
  6084   001AD6  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6085   001ADA  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6086   001ADE  C021  F019         	movff	home_response@mR,turnRight45@mR
  6087   001AE2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6088   001AE6  ECF9  F017         	call	_turnRight45	;wreg free
  6089                           
  6090                           ;colour_identify.c: 256:             stop(mL,mR);
  6091   001AEA  C01F  F017         	movff	home_response@mL,stop@mL
  6092   001AEE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6093   001AF2  C021  F019         	movff	home_response@mR,stop@mR
  6094   001AF6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6095   001AFA  EC75  F019         	call	_stop	;wreg free
  6096                           
  6097                           ;colour_identify.c: 257:             break;
  6098   001AFE  EF00  F00F         	goto	l394
  6099   001B02                     l3004:
  6100                           
  6101                           ;colour_identify.c: 259:             turnRight45(mL,mR);
  6102   001B02  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6103   001B06  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6104   001B0A  C021  F019         	movff	home_response@mR,turnRight45@mR
  6105   001B0E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6106   001B12  ECF9  F017         	call	_turnRight45	;wreg free
  6107                           
  6108                           ;colour_identify.c: 260:             stop(mL,mR);
  6109   001B16  C01F  F017         	movff	home_response@mL,stop@mL
  6110   001B1A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6111   001B1E  C021  F019         	movff	home_response@mR,stop@mR
  6112   001B22  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6113   001B26  EC75  F019         	call	_stop	;wreg free
  6114                           
  6115                           ;colour_identify.c: 261:             turnRight45(mL,mR);
  6116   001B2A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6117   001B2E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6118   001B32  C021  F019         	movff	home_response@mR,turnRight45@mR
  6119   001B36  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6120   001B3A  ECF9  F017         	call	_turnRight45	;wreg free
  6121                           
  6122                           ;colour_identify.c: 262:             stop(mL,mR);
  6123   001B3E  C01F  F017         	movff	home_response@mL,stop@mL
  6124   001B42  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6125   001B46  C021  F019         	movff	home_response@mR,stop@mR
  6126   001B4A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6127   001B4E  EC75  F019         	call	_stop	;wreg free
  6128                           
  6129                           ;colour_identify.c: 263:             turnRight45(mL,mR);
  6130   001B52  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6131   001B56  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6132   001B5A  C021  F019         	movff	home_response@mR,turnRight45@mR
  6133   001B5E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6134   001B62  ECF9  F017         	call	_turnRight45	;wreg free
  6135                           
  6136                           ;colour_identify.c: 264:             stop(mL,mR);
  6137   001B66  C01F  F017         	movff	home_response@mL,stop@mL
  6138   001B6A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6139   001B6E  C021  F019         	movff	home_response@mR,stop@mR
  6140   001B72  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6141   001B76  EC75  F019         	call	_stop	;wreg free
  6142                           
  6143                           ;colour_identify.c: 265:             turnRight45(mL,mR);
  6144   001B7A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6145   001B7E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6146   001B82  C021  F019         	movff	home_response@mR,turnRight45@mR
  6147   001B86  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6148   001B8A  ECF9  F017         	call	_turnRight45	;wreg free
  6149                           
  6150                           ;colour_identify.c: 266:             stop(mL,mR);
  6151   001B8E  C01F  F017         	movff	home_response@mL,stop@mL
  6152   001B92  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6153   001B96  C021  F019         	movff	home_response@mR,stop@mR
  6154   001B9A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6155   001B9E  EC75  F019         	call	_stop	;wreg free
  6156                           
  6157                           ;colour_identify.c: 267:             break;
  6158   001BA2  EF00  F00F         	goto	l394
  6159   001BA6                     l3006:
  6160                           
  6161                           ;colour_identify.c: 269:             stop(mL,mR);
  6162   001BA6  C01F  F017         	movff	home_response@mL,stop@mL
  6163   001BAA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6164   001BAE  C021  F019         	movff	home_response@mR,stop@mR
  6165   001BB2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6166   001BB6  EC75  F019         	call	_stop	;wreg free
  6167                           
  6168                           ;colour_identify.c: 270:             turnLeft45(mL,mR);
  6169   001BBA  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6170   001BBE  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6171   001BC2  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6172   001BC6  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6173   001BCA  EC4F  F018         	call	_turnLeft45	;wreg free
  6174                           
  6175                           ;colour_identify.c: 271:             stop(mL,mR);
  6176   001BCE  C01F  F017         	movff	home_response@mL,stop@mL
  6177   001BD2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6178   001BD6  C021  F019         	movff	home_response@mR,stop@mR
  6179   001BDA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6180   001BDE  EC75  F019         	call	_stop	;wreg free
  6181                           
  6182                           ;colour_identify.c: 272:             turnLeft45(mL,mR);
  6183   001BE2  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6184   001BE6  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6185   001BEA  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6186   001BEE  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6187   001BF2  EC4F  F018         	call	_turnLeft45	;wreg free
  6188                           
  6189                           ;colour_identify.c: 273:             stop(mL,mR);
  6190   001BF6  C01F  F017         	movff	home_response@mL,stop@mL
  6191   001BFA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6192   001BFE  C021  F019         	movff	home_response@mR,stop@mR
  6193   001C02  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6194   001C06  EC75  F019         	call	_stop	;wreg free
  6195                           
  6196                           ;colour_identify.c: 274:             fullSpeedAhead(mL,mR);
  6197   001C0A  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6198   001C0E  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6199   001C12  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6200   001C16  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6201   001C1A  ECEB  F018         	call	_fullSpeedAhead	;wreg free
  6202   001C1E                     l3008:
  6203                           
  6204                           ;colour_identify.c: 275:             _delay((unsigned long)((500)*(64000000/4000.0)));
  6205   001C1E  0E29               	movlw	41
  6206   001C20  6E24               	movwf	(??_home_response+1)^0,c
  6207   001C22  0E96               	movlw	150
  6208   001C24  6E23               	movwf	??_home_response^0,c
  6209   001C26  0E7F               	movlw	127
  6210   001C28                     u2177:
  6211   001C28  2EE8               	decfsz	wreg,f,c
  6212   001C2A  D7FE               	bra	u2177
  6213   001C2C  2E23               	decfsz	??_home_response^0,f,c
  6214   001C2E  D7FC               	bra	u2177
  6215   001C30  2E24               	decfsz	(??_home_response+1)^0,f,c
  6216   001C32  D7FA               	bra	u2177
  6217   001C34  F000               	nop	
  6218                           
  6219                           ;colour_identify.c: 276:             break;
  6220   001C36  EF00  F00F         	goto	l394
  6221   001C3A                     l3010:
  6222                           
  6223                           ;colour_identify.c: 278:             stop(mL,mR);
  6224   001C3A  C01F  F017         	movff	home_response@mL,stop@mL
  6225   001C3E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6226   001C42  C021  F019         	movff	home_response@mR,stop@mR
  6227   001C46  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6228   001C4A  EC75  F019         	call	_stop	;wreg free
  6229                           
  6230                           ;colour_identify.c: 279:             turnRight45(mL,mR);
  6231   001C4E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6232   001C52  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6233   001C56  C021  F019         	movff	home_response@mR,turnRight45@mR
  6234   001C5A  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6235   001C5E  ECF9  F017         	call	_turnRight45	;wreg free
  6236                           
  6237                           ;colour_identify.c: 280:             stop(mL,mR);
  6238   001C62  C01F  F017         	movff	home_response@mL,stop@mL
  6239   001C66  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6240   001C6A  C021  F019         	movff	home_response@mR,stop@mR
  6241   001C6E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6242   001C72  EC75  F019         	call	_stop	;wreg free
  6243                           
  6244                           ;colour_identify.c: 281:             turnRight45(mL,mR);
  6245   001C76  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6246   001C7A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6247   001C7E  C021  F019         	movff	home_response@mR,turnRight45@mR
  6248   001C82  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6249   001C86  ECF9  F017         	call	_turnRight45	;wreg free
  6250                           
  6251                           ;colour_identify.c: 282:             stop(mL,mR);
  6252   001C8A  C01F  F017         	movff	home_response@mL,stop@mL
  6253   001C8E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6254   001C92  C021  F019         	movff	home_response@mR,stop@mR
  6255   001C96  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6256   001C9A  EC75  F019         	call	_stop	;wreg free
  6257                           
  6258                           ;colour_identify.c: 283:             fullSpeedAhead(mL,mR);
  6259   001C9E  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6260   001CA2  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6261   001CA6  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6262   001CAA  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6263   001CAE  ECEB  F018         	call	_fullSpeedAhead	;wreg free
  6264   001CB2  EF0F  F00E         	goto	l3008
  6265   001CB6                     l3014:
  6266                           
  6267                           ;colour_identify.c: 287:             turnLeft45(mL,mR);
  6268   001CB6  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6269   001CBA  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6270   001CBE  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6271   001CC2  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6272   001CC6  EC4F  F018         	call	_turnLeft45	;wreg free
  6273                           
  6274                           ;colour_identify.c: 288:             stop(mL,mR);
  6275   001CCA  C01F  F017         	movff	home_response@mL,stop@mL
  6276   001CCE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6277   001CD2  C021  F019         	movff	home_response@mR,stop@mR
  6278   001CD6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6279   001CDA  EC75  F019         	call	_stop	;wreg free
  6280                           
  6281                           ;colour_identify.c: 289:             turnLeft45(mL,mR);
  6282   001CDE  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6283   001CE2  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6284   001CE6  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6285   001CEA  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6286   001CEE  EC4F  F018         	call	_turnLeft45	;wreg free
  6287                           
  6288                           ;colour_identify.c: 290:             stop(mL,mR);
  6289   001CF2  C01F  F017         	movff	home_response@mL,stop@mL
  6290   001CF6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6291   001CFA  C021  F019         	movff	home_response@mR,stop@mR
  6292   001CFE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6293   001D02  EC75  F019         	call	_stop	;wreg free
  6294                           
  6295                           ;colour_identify.c: 291:             turnLeft45(mL,mR);
  6296   001D06  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6297   001D0A  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6298   001D0E  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6299   001D12  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6300   001D16  EC4F  F018         	call	_turnLeft45	;wreg free
  6301                           
  6302                           ;colour_identify.c: 292:             stop(mL,mR);
  6303   001D1A  C01F  F017         	movff	home_response@mL,stop@mL
  6304   001D1E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6305   001D22  C021  F019         	movff	home_response@mR,stop@mR
  6306   001D26  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6307   001D2A  EC75  F019         	call	_stop	;wreg free
  6308                           
  6309                           ;colour_identify.c: 293:             break;
  6310   001D2E  EF00  F00F         	goto	l394
  6311   001D32                     l3016:
  6312                           
  6313                           ;colour_identify.c: 295:             turnRight45(mL,mR);
  6314   001D32  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6315   001D36  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6316   001D3A  C021  F019         	movff	home_response@mR,turnRight45@mR
  6317   001D3E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6318   001D42  ECF9  F017         	call	_turnRight45	;wreg free
  6319                           
  6320                           ;colour_identify.c: 296:             stop(mL,mR);
  6321   001D46  C01F  F017         	movff	home_response@mL,stop@mL
  6322   001D4A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6323   001D4E  C021  F019         	movff	home_response@mR,stop@mR
  6324   001D52  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6325   001D56  EC75  F019         	call	_stop	;wreg free
  6326                           
  6327                           ;colour_identify.c: 297:             turnRight45(mL,mR);
  6328   001D5A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6329   001D5E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6330   001D62  C021  F019         	movff	home_response@mR,turnRight45@mR
  6331   001D66  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6332   001D6A  ECF9  F017         	call	_turnRight45	;wreg free
  6333                           
  6334                           ;colour_identify.c: 298:             stop(mL,mR);
  6335   001D6E  C01F  F017         	movff	home_response@mL,stop@mL
  6336   001D72  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6337   001D76  C021  F019         	movff	home_response@mR,stop@mR
  6338   001D7A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6339   001D7E  EC75  F019         	call	_stop	;wreg free
  6340                           
  6341                           ;colour_identify.c: 299:             turnRight45(mL,mR);
  6342   001D82  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6343   001D86  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6344   001D8A  C021  F019         	movff	home_response@mR,turnRight45@mR
  6345   001D8E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6346   001D92  ECF9  F017         	call	_turnRight45	;wreg free
  6347                           
  6348                           ;colour_identify.c: 300:             stop(mL,mR);
  6349   001D96  C01F  F017         	movff	home_response@mL,stop@mL
  6350   001D9A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6351   001D9E  C021  F019         	movff	home_response@mR,stop@mR
  6352   001DA2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6353   001DA6  EC75  F019         	call	_stop	;wreg free
  6354                           
  6355                           ;colour_identify.c: 301:             break;
  6356   001DAA  EF00  F00F         	goto	l394
  6357   001DAE                     l3020:
  6358   001DAE  5025               	movf	home_response@card^0,w,c
  6359   001DB0  6E23               	movwf	??_home_response^0,c
  6360   001DB2  6A24               	clrf	(??_home_response+1)^0,c
  6361                           
  6362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6363                           ; Switch size 1, requested type "simple"
  6364                           ; Number of cases is 1, Range of values is 0 to 0
  6365                           ; switch strategies available:
  6366                           ; Name         Instructions Cycles
  6367                           ; simple_byte            4     3 (average)
  6368                           ;	Chosen strategy is simple_byte
  6369   001DB4  5024               	movf	(??_home_response+1)^0,w,c
  6370   001DB6  0A00               	xorlw	0	; case 0
  6371   001DB8  B4D8               	btfsc	status,2,c
  6372   001DBA  EFE1  F00E         	goto	l4260
  6373   001DBE  EF00  F00F         	goto	l394
  6374   001DC2                     l4260:
  6375                           
  6376                           ; Switch size 1, requested type "simple"
  6377                           ; Number of cases is 7, Range of values is 0 to 6
  6378                           ; switch strategies available:
  6379                           ; Name         Instructions Cycles
  6380                           ; simple_byte           22    12 (average)
  6381                           ;	Chosen strategy is simple_byte
  6382   001DC2  5023               	movf	??_home_response^0,w,c
  6383   001DC4  0A00               	xorlw	0	; case 0
  6384   001DC6  B4D8               	btfsc	status,2,c
  6385   001DC8  EF2D  F00D         	goto	l3000
  6386   001DCC  0A01               	xorlw	1	; case 1
  6387   001DCE  B4D8               	btfsc	status,2,c
  6388   001DD0  EF57  F00D         	goto	l3002
  6389   001DD4  0A03               	xorlw	3	; case 2
  6390   001DD6  B4D8               	btfsc	status,2,c
  6391   001DD8  EF81  F00D         	goto	l3004
  6392   001DDC  0A01               	xorlw	1	; case 3
  6393   001DDE  B4D8               	btfsc	status,2,c
  6394   001DE0  EFD3  F00D         	goto	l3006
  6395   001DE4  0A07               	xorlw	7	; case 4
  6396   001DE6  B4D8               	btfsc	status,2,c
  6397   001DE8  EF1D  F00E         	goto	l3010
  6398   001DEC  0A01               	xorlw	1	; case 5
  6399   001DEE  B4D8               	btfsc	status,2,c
  6400   001DF0  EF5B  F00E         	goto	l3014
  6401   001DF4  0A03               	xorlw	3	; case 6
  6402   001DF6  B4D8               	btfsc	status,2,c
  6403   001DF8  EF99  F00E         	goto	l3016
  6404   001DFC  EF00  F00F         	goto	l394
  6405   001E00                     l394:
  6406   001E00  0012               	return		;funcret
  6407   001E02                     __end_of_home_response:
  6408                           	callstack 0
  6409                           
  6410 ;; *************** function _turnRight45 *****************
  6411 ;; Defined at:
  6412 ;;		line 116 in file "dc_motor.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6415 ;;		 -> main@motorL(9), 
  6416 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6417 ;;		 -> main@motorR(9), 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;  i               2   28[COMRAM] int 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;Total ram usage:        8 bytes
  6434 ;; Hardware stack levels used: 1
  6435 ;; Hardware stack levels required when called: 3
  6436 ;; This function calls:
  6437 ;;		_setMotorPWM
  6438 ;; This function is called by:
  6439 ;;		_motor_response
  6440 ;;		_home_response
  6441 ;;		_motor_response_easy
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text25
  6446   002FF2                     __ptext25:
  6447                           	callstack 0
  6448   002FF2                     _turnRight45:
  6449                           	callstack 25
  6450   002FF2                     
  6451                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  6452   002FF2  EE20 F001          	lfsr	2,1
  6453   002FF6  5017               	movf	turnRight45@mL^0,w,c
  6454   002FF8  26D9               	addwf	fsr2l,f,c
  6455   002FFA  5018               	movf	(turnRight45@mL+1)^0,w,c
  6456   002FFC  22DA               	addwfc	fsr2h,f,c
  6457   002FFE  0E01               	movlw	1
  6458   003000  6EDF               	movwf	indf2,c
  6459                           
  6460                           ;dc_motor.c: 119:     mR->direction=0;
  6461   003002  EE20 F001          	lfsr	2,1
  6462   003006  5019               	movf	turnRight45@mR^0,w,c
  6463   003008  26D9               	addwf	fsr2l,f,c
  6464   00300A  501A               	movf	(turnRight45@mR+1)^0,w,c
  6465   00300C  22DA               	addwfc	fsr2h,f,c
  6466   00300E  0E00               	movlw	0
  6467   003010  6EDF               	movwf	indf2,c
  6468   003012                     
  6469                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  6470   003012  0E00               	movlw	0
  6471   003014  6E1E               	movwf	(turnRight45@i+1)^0,c
  6472   003016  0E00               	movlw	0
  6473   003018  6E1D               	movwf	turnRight45@i^0,c
  6474   00301A                     l2886:
  6475                           
  6476                           ;dc_motor.c: 122:         mR->power=i;
  6477   00301A  C019  FFD9         	movff	turnRight45@mR,fsr2l
  6478   00301E  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  6479   003022  C01D  FFDF         	movff	turnRight45@i,indf2
  6480                           
  6481                           ;dc_motor.c: 123:         mL->power=i;
  6482   003026  C017  FFD9         	movff	turnRight45@mL,fsr2l
  6483   00302A  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  6484   00302E  C01D  FFDF         	movff	turnRight45@i,indf2
  6485   003032                     
  6486                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6487   003032  0E02               	movlw	2
  6488   003034  6E1C               	movwf	(??_turnRight45+1)^0,c
  6489   003036  0E38               	movlw	56
  6490   003038  6E1B               	movwf	??_turnRight45^0,c
  6491   00303A  0EAD               	movlw	173
  6492   00303C                     u2187:
  6493   00303C  2EE8               	decfsz	wreg,f,c
  6494   00303E  D7FE               	bra	u2187
  6495   003040  2E1B               	decfsz	??_turnRight45^0,f,c
  6496   003042  D7FC               	bra	u2187
  6497   003044  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6498   003046  D7FA               	bra	u2187
  6499   003048  F000               	nop	
  6500   00304A                     
  6501                           ;dc_motor.c: 125:         setMotorPWM(mL);
  6502   00304A  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  6503   00304E  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  6504   003052  EC6A  F014         	call	_setMotorPWM	;wreg free
  6505   003056                     
  6506                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  6507   003056  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  6508   00305A  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  6509   00305E  EC6A  F014         	call	_setMotorPWM	;wreg free
  6510   003062  0E0A               	movlw	10
  6511   003064  261D               	addwf	turnRight45@i^0,f,c
  6512   003066  0E00               	movlw	0
  6513   003068  221E               	addwfc	(turnRight45@i+1)^0,f,c
  6514   00306A  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  6515   00306C  EF41  F018         	goto	u1371
  6516   003070  501E               	movf	(turnRight45@i+1)^0,w,c
  6517   003072  E109               	bnz	u1370
  6518   003074  0E50               	movlw	80
  6519   003076  5C1D               	subwf	turnRight45@i^0,w,c
  6520   003078  A0D8               	btfss	status,0,c
  6521   00307A  EF41  F018         	goto	u1371
  6522   00307E  EF43  F018         	goto	u1370
  6523   003082                     u1371:
  6524   003082  EF0D  F018         	goto	l2886
  6525   003086                     u1370:
  6526   003086                     
  6527                           ;dc_motor.c: 127:     _delay((unsigned long)((90)*(64000000/4000.0)));
  6528   003086  0E08               	movlw	8
  6529   003088  6E1C               	movwf	(??_turnRight45+1)^0,c
  6530   00308A  0E4F               	movlw	79
  6531   00308C  6E1B               	movwf	??_turnRight45^0,c
  6532   00308E  0E1A               	movlw	26
  6533   003090                     u2197:
  6534   003090  2EE8               	decfsz	wreg,f,c
  6535   003092  D7FE               	bra	u2197
  6536   003094  2E1B               	decfsz	??_turnRight45^0,f,c
  6537   003096  D7FC               	bra	u2197
  6538   003098  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6539   00309A  D7FA               	bra	u2197
  6540   00309C  0012               	return		;funcret
  6541   00309E                     __end_of_turnRight45:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function _turnLeft45 *****************
  6545 ;; Defined at:
  6546 ;;		line 101 in file "dc_motor.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6549 ;;		 -> main@motorL(9), 
  6550 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6551 ;;		 -> main@motorR(9), 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  i               2   28[COMRAM] int 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6566 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6567 ;;Total ram usage:        8 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 3
  6570 ;; This function calls:
  6571 ;;		_setMotorPWM
  6572 ;; This function is called by:
  6573 ;;		_motor_response
  6574 ;;		_home_response
  6575 ;;		_motor_response_easy
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text26
  6580   00309E                     __ptext26:
  6581                           	callstack 0
  6582   00309E                     _turnLeft45:
  6583                           	callstack 25
  6584   00309E                     
  6585                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  6586   00309E  EE20 F001          	lfsr	2,1
  6587   0030A2  5017               	movf	turnLeft45@mL^0,w,c
  6588   0030A4  26D9               	addwf	fsr2l,f,c
  6589   0030A6  5018               	movf	(turnLeft45@mL+1)^0,w,c
  6590   0030A8  22DA               	addwfc	fsr2h,f,c
  6591   0030AA  0E00               	movlw	0
  6592   0030AC  6EDF               	movwf	indf2,c
  6593                           
  6594                           ;dc_motor.c: 104:     mR->direction=1;
  6595   0030AE  EE20 F001          	lfsr	2,1
  6596   0030B2  5019               	movf	turnLeft45@mR^0,w,c
  6597   0030B4  26D9               	addwf	fsr2l,f,c
  6598   0030B6  501A               	movf	(turnLeft45@mR+1)^0,w,c
  6599   0030B8  22DA               	addwfc	fsr2h,f,c
  6600   0030BA  0E01               	movlw	1
  6601   0030BC  6EDF               	movwf	indf2,c
  6602   0030BE                     
  6603                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  6604   0030BE  0E00               	movlw	0
  6605   0030C0  6E1E               	movwf	(turnLeft45@i+1)^0,c
  6606   0030C2  0E00               	movlw	0
  6607   0030C4  6E1D               	movwf	turnLeft45@i^0,c
  6608   0030C6                     l2864:
  6609                           
  6610                           ;dc_motor.c: 107:         mR->power=i;
  6611   0030C6  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  6612   0030CA  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  6613   0030CE  C01D  FFDF         	movff	turnLeft45@i,indf2
  6614                           
  6615                           ;dc_motor.c: 108:         mL->power=i;
  6616   0030D2  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  6617   0030D6  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  6618   0030DA  C01D  FFDF         	movff	turnLeft45@i,indf2
  6619   0030DE                     
  6620                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6621   0030DE  0E02               	movlw	2
  6622   0030E0  6E1C               	movwf	(??_turnLeft45+1)^0,c
  6623   0030E2  0E38               	movlw	56
  6624   0030E4  6E1B               	movwf	??_turnLeft45^0,c
  6625   0030E6  0EAD               	movlw	173
  6626   0030E8                     u2207:
  6627   0030E8  2EE8               	decfsz	wreg,f,c
  6628   0030EA  D7FE               	bra	u2207
  6629   0030EC  2E1B               	decfsz	??_turnLeft45^0,f,c
  6630   0030EE  D7FC               	bra	u2207
  6631   0030F0  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  6632   0030F2  D7FA               	bra	u2207
  6633   0030F4  F000               	nop	
  6634   0030F6                     
  6635                           ;dc_motor.c: 110:         setMotorPWM(mL);
  6636   0030F6  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  6637   0030FA  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  6638   0030FE  EC6A  F014         	call	_setMotorPWM	;wreg free
  6639   003102                     
  6640                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  6641   003102  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  6642   003106  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  6643   00310A  EC6A  F014         	call	_setMotorPWM	;wreg free
  6644   00310E  0E0A               	movlw	10
  6645   003110  261D               	addwf	turnLeft45@i^0,f,c
  6646   003112  0E00               	movlw	0
  6647   003114  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  6648   003116  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  6649   003118  EF97  F018         	goto	u1361
  6650   00311C  501E               	movf	(turnLeft45@i+1)^0,w,c
  6651   00311E  E109               	bnz	u1360
  6652   003120  0E50               	movlw	80
  6653   003122  5C1D               	subwf	turnLeft45@i^0,w,c
  6654   003124  A0D8               	btfss	status,0,c
  6655   003126  EF97  F018         	goto	u1361
  6656   00312A  EF99  F018         	goto	u1360
  6657   00312E                     u1361:
  6658   00312E  EF63  F018         	goto	l2864
  6659   003132                     u1360:
  6660   003132                     
  6661                           ;dc_motor.c: 112:     _delay((unsigned long)((90)*(64000000/4000.0)));
  6662   003132  0E08               	movlw	8
  6663   003134  6E1C               	movwf	(??_turnLeft45+1)^0,c
  6664   003136  0E4F               	movlw	79
  6665   003138  6E1B               	movwf	??_turnLeft45^0,c
  6666   00313A  0E1A               	movlw	26
  6667   00313C                     u2217:
  6668   00313C  2EE8               	decfsz	wreg,f,c
  6669   00313E  D7FE               	bra	u2217
  6670   003140  2E1B               	decfsz	??_turnLeft45^0,f,c
  6671   003142  D7FC               	bra	u2217
  6672   003144  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  6673   003146  D7FA               	bra	u2217
  6674   003148  0012               	return		;funcret
  6675   00314A                     __end_of_turnLeft45:
  6676                           	callstack 0
  6677                           
  6678 ;; *************** function _stop *****************
  6679 ;; Defined at:
  6680 ;;		line 84 in file "dc_motor.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6683 ;;		 -> main@motorL(9), 
  6684 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6685 ;;		 -> main@motorR(9), 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6700 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6701 ;;Total ram usage:        5 bytes
  6702 ;; Hardware stack levels used: 1
  6703 ;; Hardware stack levels required when called: 3
  6704 ;; This function calls:
  6705 ;;		_setMotorPWM
  6706 ;; This function is called by:
  6707 ;;		_main
  6708 ;;		_motor_response
  6709 ;;		_home_response
  6710 ;;		_motor_response_easy
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text27
  6715   0032EA                     __ptext27:
  6716                           	callstack 0
  6717   0032EA                     _stop:
  6718                           	callstack 27
  6719   0032EA                     
  6720                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  6721   0032EA  EF8A  F019         	goto	l2846
  6722   0032EE                     l2840:
  6723                           
  6724                           ;dc_motor.c: 87:         mL->power -=10;
  6725   0032EE  C017  FFD9         	movff	stop@mL,fsr2l
  6726   0032F2  C018  FFDA         	movff	stop@mL+1,fsr2h
  6727   0032F6  0E0A               	movlw	10
  6728   0032F8  5EDF               	subwf	indf2,f,c
  6729   0032FA                     
  6730                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6731   0032FA  0E2A               	movlw	42
  6732   0032FC  6E1B               	movwf	??_stop^0,c
  6733   0032FE  0E8E               	movlw	142
  6734   003300                     u2227:
  6735   003300  2EE8               	decfsz	wreg,f,c
  6736   003302  D7FE               	bra	u2227
  6737   003304  2E1B               	decfsz	??_stop^0,f,c
  6738   003306  D7FC               	bra	u2227
  6739   003308                     
  6740                           ;dc_motor.c: 89:         setMotorPWM(mL);
  6741   003308  C017  F011         	movff	stop@mL,setMotorPWM@m
  6742   00330C  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  6743   003310  EC6A  F014         	call	_setMotorPWM	;wreg free
  6744   003314                     l2846:
  6745                           
  6746                           ;dc_motor.c: 86:     while(mL->power !=0){
  6747   003314  C017  FFD9         	movff	stop@mL,fsr2l
  6748   003318  C018  FFDA         	movff	stop@mL+1,fsr2h
  6749   00331C  50DF               	movf	indf2,w,c
  6750   00331E  A4D8               	btfss	status,2,c
  6751   003320  EF94  F019         	goto	u1341
  6752   003324  EF96  F019         	goto	u1340
  6753   003328                     u1341:
  6754   003328  EF77  F019         	goto	l2840
  6755   00332C                     u1340:
  6756   00332C  EFAB  F019         	goto	l2854
  6757   003330                     l2848:
  6758                           
  6759                           ;dc_motor.c: 92:         mR->power -=10;
  6760   003330  C019  FFD9         	movff	stop@mR,fsr2l
  6761   003334  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6762   003338  0E0A               	movlw	10
  6763   00333A  5EDF               	subwf	indf2,f,c
  6764   00333C                     
  6765                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6766   00333C  0E2A               	movlw	42
  6767   00333E  6E1B               	movwf	??_stop^0,c
  6768   003340  0E8E               	movlw	142
  6769   003342                     u2237:
  6770   003342  2EE8               	decfsz	wreg,f,c
  6771   003344  D7FE               	bra	u2237
  6772   003346  2E1B               	decfsz	??_stop^0,f,c
  6773   003348  D7FC               	bra	u2237
  6774   00334A                     
  6775                           ;dc_motor.c: 94:         setMotorPWM(mR);
  6776   00334A  C019  F011         	movff	stop@mR,setMotorPWM@m
  6777   00334E  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  6778   003352  EC6A  F014         	call	_setMotorPWM	;wreg free
  6779   003356                     l2854:
  6780                           
  6781                           ;dc_motor.c: 91:     while(mR -> power !=0){
  6782   003356  C019  FFD9         	movff	stop@mR,fsr2l
  6783   00335A  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6784   00335E  50DF               	movf	indf2,w,c
  6785   003360  A4D8               	btfss	status,2,c
  6786   003362  EFB5  F019         	goto	u1351
  6787   003366  EFB7  F019         	goto	u1350
  6788   00336A                     u1351:
  6789   00336A  EF98  F019         	goto	l2848
  6790   00336E                     u1350:
  6791   00336E  0012               	return		;funcret
  6792   003370                     __end_of_stop:
  6793                           	callstack 0
  6794                           
  6795 ;; *************** function _fullSpeedAhead *****************
  6796 ;; Defined at:
  6797 ;;		line 131 in file "dc_motor.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6800 ;;		 -> main@motorL(9), 
  6801 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6802 ;;		 -> main@motorR(9), 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;  i               2   27[COMRAM] int 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6814 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;Total ram usage:        7 bytes
  6819 ;; Hardware stack levels used: 1
  6820 ;; Hardware stack levels required when called: 3
  6821 ;; This function calls:
  6822 ;;		_setMotorPWM
  6823 ;; This function is called by:
  6824 ;;		_main
  6825 ;;		_motor_response
  6826 ;;		_home_response
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text28
  6831   0031D6                     __ptext28:
  6832                           	callstack 0
  6833   0031D6                     _fullSpeedAhead:
  6834                           	callstack 27
  6835   0031D6                     
  6836                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  6837   0031D6  EE20 F001          	lfsr	2,1
  6838   0031DA  5017               	movf	fullSpeedAhead@mL^0,w,c
  6839   0031DC  26D9               	addwf	fsr2l,f,c
  6840   0031DE  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  6841   0031E0  22DA               	addwfc	fsr2h,f,c
  6842   0031E2  0E01               	movlw	1
  6843   0031E4  6EDF               	movwf	indf2,c
  6844                           
  6845                           ;dc_motor.c: 134:     mR->direction=1;
  6846   0031E6  EE20 F001          	lfsr	2,1
  6847   0031EA  5019               	movf	fullSpeedAhead@mR^0,w,c
  6848   0031EC  26D9               	addwf	fsr2l,f,c
  6849   0031EE  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  6850   0031F0  22DA               	addwfc	fsr2h,f,c
  6851   0031F2  0E01               	movlw	1
  6852   0031F4  6EDF               	movwf	indf2,c
  6853   0031F6                     
  6854                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  6855   0031F6  0E00               	movlw	0
  6856   0031F8  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  6857   0031FA  0E00               	movlw	0
  6858   0031FC  6E1C               	movwf	fullSpeedAhead@i^0,c
  6859   0031FE                     l2908:
  6860                           
  6861                           ;dc_motor.c: 136:         mL->power=i;
  6862   0031FE  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  6863   003202  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  6864   003206  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6865                           
  6866                           ;dc_motor.c: 137:         mR->power=i;
  6867   00320A  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  6868   00320E  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  6869   003212  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  6870   003216                     
  6871                           ;dc_motor.c: 138:         setMotorPWM(mL);
  6872   003216  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  6873   00321A  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  6874   00321E  EC6A  F014         	call	_setMotorPWM	;wreg free
  6875   003222                     
  6876                           ;dc_motor.c: 139:         setMotorPWM(mR);
  6877   003222  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  6878   003226  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  6879   00322A  EC6A  F014         	call	_setMotorPWM	;wreg free
  6880   00322E                     
  6881                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6882   00322E  0ED0               	movlw	208
  6883   003230  6E1B               	movwf	??_fullSpeedAhead^0,c
  6884   003232  0ECA               	movlw	202
  6885   003234                     u2247:
  6886   003234  2EE8               	decfsz	wreg,f,c
  6887   003236  D7FE               	bra	u2247
  6888   003238  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  6889   00323A  D7FC               	bra	u2247
  6890   00323C                     
  6891                           ;dc_motor.c: 141:     }
  6892   00323C  0E0A               	movlw	10
  6893   00323E  261C               	addwf	fullSpeedAhead@i^0,f,c
  6894   003240  0E00               	movlw	0
  6895   003242  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  6896   003244  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  6897   003246  EF2E  F019         	goto	u1381
  6898   00324A  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  6899   00324C  E109               	bnz	u1380
  6900   00324E  0E3C               	movlw	60
  6901   003250  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  6902   003252  A0D8               	btfss	status,0,c
  6903   003254  EF2E  F019         	goto	u1381
  6904   003258  EF30  F019         	goto	u1380
  6905   00325C                     u1381:
  6906   00325C  EFFF  F018         	goto	l2908
  6907   003260                     u1380:
  6908   003260  0012               	return		;funcret
  6909   003262                     __end_of_fullSpeedAhead:
  6910                           	callstack 0
  6911                           
  6912 ;; *************** function _setMotorPWM *****************
  6913 ;; Defined at:
  6914 ;;		line 61 in file "dc_motor.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  m               2   16[COMRAM] PTR struct DC_motor
  6917 ;;		 -> main@motorR(9), main@motorL(9), 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  negDuty         1   21[COMRAM] unsigned char 
  6920 ;;  posDuty         1   20[COMRAM] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6933 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6934 ;;Total ram usage:        6 bytes
  6935 ;; Hardware stack levels used: 1
  6936 ;; Hardware stack levels required when called: 2
  6937 ;; This function calls:
  6938 ;;		___lwdiv
  6939 ;;		___wmul
  6940 ;; This function is called by:
  6941 ;;		_stop
  6942 ;;		_turnLeft45
  6943 ;;		_turnRight45
  6944 ;;		_fullSpeedAhead
  6945 ;;		_reverseFullSpeed
  6946 ;;		_main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text29
  6951   0028D4                     __ptext29:
  6952                           	callstack 0
  6953   0028D4                     _setMotorPWM:
  6954                           	callstack 27
  6955   0028D4                     
  6956                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  6957   0028D4  EE20 F002          	lfsr	2,2
  6958   0028D8  5011               	movf	setMotorPWM@m^0,w,c
  6959   0028DA  26D9               	addwf	fsr2l,f,c
  6960   0028DC  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6961   0028DE  22DA               	addwfc	fsr2h,f,c
  6962   0028E0  50DF               	movf	indf2,w,c
  6963   0028E2  B4D8               	btfsc	status,2,c
  6964   0028E4  EF76  F014         	goto	u1251
  6965   0028E8  EF78  F014         	goto	u1250
  6966   0028EC                     u1251:
  6967   0028EC  EFAC  F014         	goto	l2764
  6968   0028F0                     u1250:
  6969   0028F0                     
  6970                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6971   0028F0  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  6972   0028F4  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6973   0028F8  50DF               	movf	indf2,w,c
  6974   0028FA  6E13               	movwf	??_setMotorPWM^0,c
  6975   0028FC  5013               	movf	??_setMotorPWM^0,w,c
  6976   0028FE  6E04               	movwf	___wmul@multiplier^0,c
  6977   002900  6A05               	clrf	(___wmul@multiplier+1)^0,c
  6978   002902  EE20 F003          	lfsr	2,3
  6979   002906  5011               	movf	setMotorPWM@m^0,w,c
  6980   002908  26D9               	addwf	fsr2l,f,c
  6981   00290A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6982   00290C  22DA               	addwfc	fsr2h,f,c
  6983   00290E  CFDE F006          	movff	postinc2,___wmul@multiplicand
  6984   002912  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  6985   002916  EC90  F01C         	call	___wmul	;wreg free
  6986   00291A  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  6987   00291E  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  6988   002922  0E00               	movlw	0
  6989   002924  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  6990   002926  0E64               	movlw	100
  6991   002928  6E0C               	movwf	___lwdiv@divisor^0,c
  6992   00292A  EC35  F01A         	call	___lwdiv	;wreg free
  6993   00292E  EE20 F003          	lfsr	2,3
  6994   002932  5011               	movf	setMotorPWM@m^0,w,c
  6995   002934  26D9               	addwf	fsr2l,f,c
  6996   002936  5012               	movf	(setMotorPWM@m+1)^0,w,c
  6997   002938  22DA               	addwfc	fsr2h,f,c
  6998   00293A  50DF               	movf	indf2,w,c
  6999   00293C  6E14               	movwf	(??_setMotorPWM+1)^0,c
  7000   00293E  500A               	movf	?___lwdiv^0,w,c
  7001   002940  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  7002   002942  6E15               	movwf	setMotorPWM@posDuty^0,c
  7003   002944                     
  7004                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  7005   002944  EE20 F003          	lfsr	2,3
  7006   002948  5011               	movf	setMotorPWM@m^0,w,c
  7007   00294A  26D9               	addwf	fsr2l,f,c
  7008   00294C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7009   00294E  22DA               	addwfc	fsr2h,f,c
  7010   002950  50DF               	movf	indf2,w,c
  7011   002952  6E16               	movwf	setMotorPWM@negDuty^0,c
  7012                           
  7013                           ;dc_motor.c: 68:     }
  7014   002954  EFCF  F014         	goto	l2768
  7015   002958                     l2764:
  7016                           
  7017                           ;dc_motor.c: 70:         posDuty=0;
  7018   002958  0E00               	movlw	0
  7019   00295A  6E15               	movwf	setMotorPWM@posDuty^0,c
  7020   00295C                     
  7021                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7022   00295C  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7023   002960  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7024   002964  50DF               	movf	indf2,w,c
  7025   002966  6E13               	movwf	??_setMotorPWM^0,c
  7026   002968  5013               	movf	??_setMotorPWM^0,w,c
  7027   00296A  6E04               	movwf	___wmul@multiplier^0,c
  7028   00296C  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7029   00296E  EE20 F003          	lfsr	2,3
  7030   002972  5011               	movf	setMotorPWM@m^0,w,c
  7031   002974  26D9               	addwf	fsr2l,f,c
  7032   002976  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7033   002978  22DA               	addwfc	fsr2h,f,c
  7034   00297A  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7035   00297E  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7036   002982  EC90  F01C         	call	___wmul	;wreg free
  7037   002986  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7038   00298A  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7039   00298E  0E00               	movlw	0
  7040   002990  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7041   002992  0E64               	movlw	100
  7042   002994  6E0C               	movwf	___lwdiv@divisor^0,c
  7043   002996  EC35  F01A         	call	___lwdiv	;wreg free
  7044   00299A  500A               	movf	?___lwdiv^0,w,c
  7045   00299C  6E16               	movwf	setMotorPWM@negDuty^0,c
  7046   00299E                     l2768:
  7047                           
  7048                           ;dc_motor.c: 74:     if (m->direction) {
  7049   00299E  EE20 F001          	lfsr	2,1
  7050   0029A2  5011               	movf	setMotorPWM@m^0,w,c
  7051   0029A4  26D9               	addwf	fsr2l,f,c
  7052   0029A6  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7053   0029A8  22DA               	addwfc	fsr2h,f,c
  7054   0029AA  50DF               	movf	indf2,w,c
  7055   0029AC  B4D8               	btfsc	status,2,c
  7056   0029AE  EFDB  F014         	goto	u1261
  7057   0029B2  EFDD  F014         	goto	u1260
  7058   0029B6                     u1261:
  7059   0029B6  EFFF  F014         	goto	l2772
  7060   0029BA                     u1260:
  7061   0029BA                     
  7062                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  7063   0029BA  EE20 F005          	lfsr	2,5
  7064   0029BE  5011               	movf	setMotorPWM@m^0,w,c
  7065   0029C0  26D9               	addwf	fsr2l,f,c
  7066   0029C2  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7067   0029C4  22DA               	addwfc	fsr2h,f,c
  7068   0029C6  CFDE F013          	movff	postinc2,??_setMotorPWM
  7069   0029CA  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7070   0029CE  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7071   0029D2  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7072   0029D6  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7073                           
  7074                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  7075   0029DA  EE20 F007          	lfsr	2,7
  7076   0029DE  5011               	movf	setMotorPWM@m^0,w,c
  7077   0029E0  26D9               	addwf	fsr2l,f,c
  7078   0029E2  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7079   0029E4  22DA               	addwfc	fsr2h,f,c
  7080   0029E6  CFDE F013          	movff	postinc2,??_setMotorPWM
  7081   0029EA  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7082   0029EE  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7083   0029F2  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7084   0029F6  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7085                           
  7086                           ;dc_motor.c: 77:     } else {
  7087   0029FA  EF1F  F015         	goto	l86
  7088   0029FE                     l2772:
  7089                           
  7090                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  7091   0029FE  EE20 F005          	lfsr	2,5
  7092   002A02  5011               	movf	setMotorPWM@m^0,w,c
  7093   002A04  26D9               	addwf	fsr2l,f,c
  7094   002A06  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7095   002A08  22DA               	addwfc	fsr2h,f,c
  7096   002A0A  CFDE F013          	movff	postinc2,??_setMotorPWM
  7097   002A0E  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7098   002A12  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7099   002A16  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7100   002A1A  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7101                           
  7102                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  7103   002A1E  EE20 F007          	lfsr	2,7
  7104   002A22  5011               	movf	setMotorPWM@m^0,w,c
  7105   002A24  26D9               	addwf	fsr2l,f,c
  7106   002A26  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7107   002A28  22DA               	addwfc	fsr2h,f,c
  7108   002A2A  CFDE F013          	movff	postinc2,??_setMotorPWM
  7109   002A2E  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7110   002A32  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7111   002A36  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7112   002A3A  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7113   002A3E                     l86:
  7114   002A3E  0012               	return		;funcret
  7115   002A40                     __end_of_setMotorPWM:
  7116                           	callstack 0
  7117                           
  7118 ;; *************** function ___wmul *****************
  7119 ;; Defined at:
  7120 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  multiplier      2    3[COMRAM] unsigned int 
  7123 ;;  multiplicand    2    5[COMRAM] unsigned int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  product         2    7[COMRAM] unsigned int 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  2    3[COMRAM] unsigned int 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, prodl, prodh
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;Total ram usage:        6 bytes
  7140 ;; Hardware stack levels used: 1
  7141 ;; Hardware stack levels required when called: 1
  7142 ;; This function calls:
  7143 ;;		Nothing
  7144 ;; This function is called by:
  7145 ;;		_setMotorPWM
  7146 ;;		_normalise_readings
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text30
  7151   003920                     __ptext30:
  7152                           	callstack 0
  7153   003920                     ___wmul:
  7154                           	callstack 27
  7155   003920  5004               	movf	___wmul@multiplier^0,w,c
  7156   003922  0206               	mulwf	___wmul@multiplicand^0,c
  7157   003924  CFF3 F008          	movff	prodl,___wmul@product
  7158   003928  CFF4 F009          	movff	prodh,___wmul@product+1
  7159   00392C  5004               	movf	___wmul@multiplier^0,w,c
  7160   00392E  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  7161   003930  50F3               	movf	243,w,c
  7162   003932  2609               	addwf	(___wmul@product+1)^0,f,c
  7163   003934  5005               	movf	(___wmul@multiplier+1)^0,w,c
  7164   003936  0206               	mulwf	___wmul@multiplicand^0,c
  7165   003938  50F3               	movf	243,w,c
  7166   00393A  2609               	addwf	(___wmul@product+1)^0,f,c
  7167   00393C  C008  F004         	movff	___wmul@product,?___wmul
  7168   003940  C009  F005         	movff	___wmul@product+1,?___wmul+1
  7169   003944  0012               	return		;funcret
  7170   003946                     __end_of___wmul:
  7171                           	callstack 0
  7172                           
  7173 ;; *************** function ___lwdiv *****************
  7174 ;; Defined at:
  7175 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  dividend        2    9[COMRAM] unsigned int 
  7178 ;;  divisor         2   11[COMRAM] unsigned int 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  quotient        2   13[COMRAM] unsigned int 
  7181 ;;  counter         1   15[COMRAM] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  2    9[COMRAM] unsigned int 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2, status,0
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7191 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7192 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7194 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;Total ram usage:        7 bytes
  7196 ;; Hardware stack levels used: 1
  7197 ;; Hardware stack levels required when called: 1
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_setMotorPWM
  7202 ;;		_normalise_readings
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           	psect	text31
  7207   00346A                     __ptext31:
  7208                           	callstack 0
  7209   00346A                     ___lwdiv:
  7210                           	callstack 27
  7211   00346A  0E00               	movlw	0
  7212   00346C  6E0F               	movwf	(___lwdiv@quotient+1)^0,c
  7213   00346E  0E00               	movlw	0
  7214   003470  6E0E               	movwf	___lwdiv@quotient^0,c
  7215   003472  500C               	movf	___lwdiv@divisor^0,w,c
  7216   003474  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7217   003476  B4D8               	btfsc	status,2,c
  7218   003478  EF40  F01A         	goto	u1121
  7219   00347C  EF42  F01A         	goto	u1120
  7220   003480                     u1121:
  7221   003480  EF6A  F01A         	goto	l1025
  7222   003484                     u1120:
  7223   003484  0E01               	movlw	1
  7224   003486  6E10               	movwf	___lwdiv@counter^0,c
  7225   003488  EF4A  F01A         	goto	l2692
  7226   00348C                     l2690:
  7227   00348C  90D8               	bcf	status,0,c
  7228   00348E  360C               	rlcf	___lwdiv@divisor^0,f,c
  7229   003490  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7230   003492  2A10               	incf	___lwdiv@counter^0,f,c
  7231   003494                     l2692:
  7232   003494  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7233   003496  EF4F  F01A         	goto	u1131
  7234   00349A  EF51  F01A         	goto	u1130
  7235   00349E                     u1131:
  7236   00349E  EF46  F01A         	goto	l2690
  7237   0034A2                     u1130:
  7238   0034A2                     l2694:
  7239   0034A2  90D8               	bcf	status,0,c
  7240   0034A4  360E               	rlcf	___lwdiv@quotient^0,f,c
  7241   0034A6  360F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7242   0034A8  500C               	movf	___lwdiv@divisor^0,w,c
  7243   0034AA  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7244   0034AC  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7245   0034AE  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7246   0034B0  A0D8               	btfss	status,0,c
  7247   0034B2  EF5D  F01A         	goto	u1141
  7248   0034B6  EF5F  F01A         	goto	u1140
  7249   0034BA                     u1141:
  7250   0034BA  EF64  F01A         	goto	l2702
  7251   0034BE                     u1140:
  7252   0034BE  500C               	movf	___lwdiv@divisor^0,w,c
  7253   0034C0  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7254   0034C2  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7255   0034C4  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7256   0034C6  800E               	bsf	___lwdiv@quotient^0,0,c
  7257   0034C8                     l2702:
  7258   0034C8  90D8               	bcf	status,0,c
  7259   0034CA  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7260   0034CC  320C               	rrcf	___lwdiv@divisor^0,f,c
  7261   0034CE  2E10               	decfsz	___lwdiv@counter^0,f,c
  7262   0034D0  EF51  F01A         	goto	l2694
  7263   0034D4                     l1025:
  7264   0034D4  C00E  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7265   0034D8  C00F  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7266   0034DC  0012               	return		;funcret
  7267   0034DE                     __end_of___lwdiv:
  7268                           	callstack 0
  7269                           
  7270 ;; *************** function _make_master_closeness *****************
  7271 ;; Defined at:
  7272 ;;		line 101 in file "colour_identify.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  buf             2    3[COMRAM] PTR unsigned char 
  7275 ;;		 -> main@buf(150), 
  7276 ;;  normalised_v    2    5[COMRAM] PTR unsigned int [9]
  7277 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  7278 ;;  master_close    2    7[COMRAM] PTR unsigned int 
  7279 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  i               1   39[COMRAM] enum E14551
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  1    wreg      void 
  7284 ;; Registers used:
  7285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7291 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7295 ;;Total ram usage:       37 bytes
  7296 ;; Hardware stack levels used: 1
  7297 ;; Hardware stack levels required when called: 1
  7298 ;; This function calls:
  7299 ;;		Nothing
  7300 ;; This function is called by:
  7301 ;;		_card_response
  7302 ;;		_card_response_easy
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text32
  7307   002E1C                     __ptext32:
  7308                           	callstack 0
  7309   002E1C                     _make_master_closeness:
  7310                           	callstack 28
  7311   002E1C                     
  7312                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  7313   002E1C  0E00               	movlw	0
  7314   002E1E  6E28               	movwf	make_master_closeness@i^0,c
  7315   002E20                     l3134:
  7316                           
  7317                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  7318   002E20  5028               	movf	make_master_closeness@i^0,w,c
  7319   002E22  0D02               	mullw	2
  7320   002E24  CFF3 F00A          	movff	prodl,??_make_master_closeness
  7321   002E28  CFF4 F00B          	movff	prodh,??_make_master_closeness+1
  7322   002E2C  500A               	movf	??_make_master_closeness^0,w,c
  7323   002E2E  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7324   002E30  6E0C               	movwf	(??_make_master_closeness+2)^0,c
  7325   002E32  500B               	movf	(??_make_master_closeness+1)^0,w,c
  7326   002E34  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7327   002E36  6E0D               	movwf	(??_make_master_closeness+3)^0,c
  7328   002E38  0E36               	movlw	54
  7329   002E3A  240C               	addwf	(??_make_master_closeness+2)^0,w,c
  7330   002E3C  6ED9               	movwf	fsr2l,c
  7331   002E3E  0E00               	movlw	0
  7332   002E40  200D               	addwfc	(??_make_master_closeness+3)^0,w,c
  7333   002E42  6EDA               	movwf	fsr2h,c
  7334   002E44  CFDE F00E          	movff	postinc2,??_make_master_closeness+4
  7335   002E48  CFDD F00F          	movff	postdec2,??_make_master_closeness+5
  7336   002E4C  5028               	movf	make_master_closeness@i^0,w,c
  7337   002E4E  0D02               	mullw	2
  7338   002E50  CFF3 F010          	movff	prodl,??_make_master_closeness+6
  7339   002E54  CFF4 F011          	movff	prodh,??_make_master_closeness+7
  7340   002E58  5010               	movf	(??_make_master_closeness+6)^0,w,c
  7341   002E5A  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7342   002E5C  6E12               	movwf	(??_make_master_closeness+8)^0,c
  7343   002E5E  5011               	movf	(??_make_master_closeness+7)^0,w,c
  7344   002E60  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7345   002E62  6E13               	movwf	(??_make_master_closeness+9)^0,c
  7346   002E64  0E24               	movlw	36
  7347   002E66  2412               	addwf	(??_make_master_closeness+8)^0,w,c
  7348   002E68  6ED9               	movwf	fsr2l,c
  7349   002E6A  0E00               	movlw	0
  7350   002E6C  2013               	addwfc	(??_make_master_closeness+9)^0,w,c
  7351   002E6E  6EDA               	movwf	fsr2h,c
  7352   002E70  CFDE F014          	movff	postinc2,??_make_master_closeness+10
  7353   002E74  CFDD F015          	movff	postdec2,??_make_master_closeness+11
  7354   002E78  5028               	movf	make_master_closeness@i^0,w,c
  7355   002E7A  0D02               	mullw	2
  7356   002E7C  CFF3 F016          	movff	prodl,??_make_master_closeness+12
  7357   002E80  CFF4 F017          	movff	prodh,??_make_master_closeness+13
  7358   002E84  5016               	movf	(??_make_master_closeness+12)^0,w,c
  7359   002E86  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7360   002E88  6E18               	movwf	(??_make_master_closeness+14)^0,c
  7361   002E8A  5017               	movf	(??_make_master_closeness+13)^0,w,c
  7362   002E8C  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7363   002E8E  6E19               	movwf	(??_make_master_closeness+15)^0,c
  7364   002E90  0E12               	movlw	18
  7365   002E92  2418               	addwf	(??_make_master_closeness+14)^0,w,c
  7366   002E94  6ED9               	movwf	fsr2l,c
  7367   002E96  0E00               	movlw	0
  7368   002E98  2019               	addwfc	(??_make_master_closeness+15)^0,w,c
  7369   002E9A  6EDA               	movwf	fsr2h,c
  7370   002E9C  CFDE F01A          	movff	postinc2,??_make_master_closeness+16
  7371   002EA0  CFDD F01B          	movff	postdec2,??_make_master_closeness+17
  7372   002EA4  5028               	movf	make_master_closeness@i^0,w,c
  7373   002EA6  0D02               	mullw	2
  7374   002EA8  CFF3 F01C          	movff	prodl,??_make_master_closeness+18
  7375   002EAC  CFF4 F01D          	movff	prodh,??_make_master_closeness+19
  7376   002EB0  501C               	movf	(??_make_master_closeness+18)^0,w,c
  7377   002EB2  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7378   002EB4  6ED9               	movwf	fsr2l,c
  7379   002EB6  501D               	movf	(??_make_master_closeness+19)^0,w,c
  7380   002EB8  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7381   002EBA  6EDA               	movwf	fsr2h,c
  7382   002EBC  CFDE F01E          	movff	postinc2,??_make_master_closeness+20
  7383   002EC0  CFDD F01F          	movff	postdec2,??_make_master_closeness+21
  7384   002EC4  501A               	movf	(??_make_master_closeness+16)^0,w,c
  7385   002EC6  241E               	addwf	(??_make_master_closeness+20)^0,w,c
  7386   002EC8  6E20               	movwf	(??_make_master_closeness+22)^0,c
  7387   002ECA  501B               	movf	(??_make_master_closeness+17)^0,w,c
  7388   002ECC  201F               	addwfc	(??_make_master_closeness+21)^0,w,c
  7389   002ECE  6E21               	movwf	(??_make_master_closeness+23)^0,c
  7390   002ED0  5014               	movf	(??_make_master_closeness+10)^0,w,c
  7391   002ED2  2420               	addwf	(??_make_master_closeness+22)^0,w,c
  7392   002ED4  6E22               	movwf	(??_make_master_closeness+24)^0,c
  7393   002ED6  5015               	movf	(??_make_master_closeness+11)^0,w,c
  7394   002ED8  2021               	addwfc	(??_make_master_closeness+23)^0,w,c
  7395   002EDA  6E23               	movwf	(??_make_master_closeness+25)^0,c
  7396   002EDC  500E               	movf	(??_make_master_closeness+4)^0,w,c
  7397   002EDE  2422               	addwf	(??_make_master_closeness+24)^0,w,c
  7398   002EE0  6E24               	movwf	(??_make_master_closeness+26)^0,c
  7399   002EE2  500F               	movf	(??_make_master_closeness+5)^0,w,c
  7400   002EE4  2023               	addwfc	(??_make_master_closeness+25)^0,w,c
  7401   002EE6  6E25               	movwf	(??_make_master_closeness+27)^0,c
  7402   002EE8  90D8               	bcf	status,0,c
  7403   002EEA  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7404   002EEC  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7405   002EEE  90D8               	bcf	status,0,c
  7406   002EF0  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7407   002EF2  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7408   002EF4  5028               	movf	make_master_closeness@i^0,w,c
  7409   002EF6  0D02               	mullw	2
  7410   002EF8  CFF3 F026          	movff	prodl,??_make_master_closeness+28
  7411   002EFC  CFF4 F027          	movff	prodh,??_make_master_closeness+29
  7412   002F00  5026               	movf	(??_make_master_closeness+28)^0,w,c
  7413   002F02  2408               	addwf	make_master_closeness@master_closeness^0,w,c
  7414   002F04  6ED9               	movwf	fsr2l,c
  7415   002F06  5027               	movf	(??_make_master_closeness+29)^0,w,c
  7416   002F08  2009               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  7417   002F0A  6EDA               	movwf	fsr2h,c
  7418   002F0C  C024  FFDE         	movff	??_make_master_closeness+26,postinc2
  7419   002F10  C025  FFDD         	movff	??_make_master_closeness+27,postdec2
  7420   002F14                     
  7421                           ;colour_identify.c: 109:     }
  7422   002F14  2A28               	incf	make_master_closeness@i^0,f,c
  7423   002F16  0E08               	movlw	8
  7424   002F18  6428               	cpfsgt	make_master_closeness@i^0,c
  7425   002F1A  EF91  F017         	goto	u1491
  7426   002F1E  EF93  F017         	goto	u1490
  7427   002F22                     u1491:
  7428   002F22  EF10  F017         	goto	l3134
  7429   002F26                     u1490:
  7430   002F26  0012               	return		;funcret
  7431   002F28                     __end_of_make_master_closeness:
  7432                           	callstack 0
  7433                           
  7434 ;; *************** function _determine_card *****************
  7435 ;; Defined at:
  7436 ;;		line 112 in file "colour_identify.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  7439 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  i               1   12[COMRAM] enum E14551
  7442 ;;  current_smal    2    9[COMRAM] unsigned int 
  7443 ;;  predicted_co    1   11[COMRAM] enum E14551
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      enum E14551
  7446 ;; Registers used:
  7447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7454 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7455 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7456 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;Total ram usage:       10 bytes
  7458 ;; Hardware stack levels used: 1
  7459 ;; Hardware stack levels required when called: 1
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_card_response
  7464 ;;		_card_response_easy
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text33
  7469   003370                     __ptext33:
  7470                           	callstack 0
  7471   003370                     _determine_card:
  7472                           	callstack 28
  7473   003370                     
  7474                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  7475   003370  0E00               	movlw	0
  7476   003372  6E0C               	movwf	determine_card@predicted_colour^0,c
  7477   003374                     
  7478                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  7479   003374  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  7480   003378  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  7481   00337C  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7482   003380  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7483   003384                     
  7484                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  7485   003384  0E01               	movlw	1
  7486   003386  6E0D               	movwf	determine_card@i^0,c
  7487   003388                     l3150:
  7488                           
  7489                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  7490   003388  500D               	movf	determine_card@i^0,w,c
  7491   00338A  0D02               	mullw	2
  7492   00338C  CFF3 F006          	movff	prodl,??_determine_card
  7493   003390  CFF4 F007          	movff	prodh,??_determine_card+1
  7494   003394  5006               	movf	??_determine_card^0,w,c
  7495   003396  2404               	addwf	determine_card@master_closeness^0,w,c
  7496   003398  6ED9               	movwf	fsr2l,c
  7497   00339A  5007               	movf	(??_determine_card+1)^0,w,c
  7498   00339C  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7499   00339E  6EDA               	movwf	fsr2h,c
  7500   0033A0  500A               	movf	determine_card@current_smallest^0,w,c
  7501   0033A2  5CDE               	subwf	postinc2,w,c
  7502   0033A4  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  7503   0033A6  58DE               	subwfb	postinc2,w,c
  7504   0033A8  B0D8               	btfsc	status,0,c
  7505   0033AA  EFD9  F019         	goto	u1501
  7506   0033AE  EFDB  F019         	goto	u1500
  7507   0033B2                     u1501:
  7508   0033B2  EFED  F019         	goto	l3156
  7509   0033B6                     u1500:
  7510   0033B6                     
  7511                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  7512   0033B6  500D               	movf	determine_card@i^0,w,c
  7513   0033B8  0D02               	mullw	2
  7514   0033BA  CFF3 F006          	movff	prodl,??_determine_card
  7515   0033BE  CFF4 F007          	movff	prodh,??_determine_card+1
  7516   0033C2  5006               	movf	??_determine_card^0,w,c
  7517   0033C4  2404               	addwf	determine_card@master_closeness^0,w,c
  7518   0033C6  6ED9               	movwf	fsr2l,c
  7519   0033C8  5007               	movf	(??_determine_card+1)^0,w,c
  7520   0033CA  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7521   0033CC  6EDA               	movwf	fsr2h,c
  7522   0033CE  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7523   0033D2  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7524   0033D6                     
  7525                           ;colour_identify.c: 119:             predicted_colour = i;
  7526   0033D6  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  7527   0033DA                     l3156:
  7528                           
  7529                           ;colour_identify.c: 121:     }
  7530   0033DA  2A0D               	incf	determine_card@i^0,f,c
  7531   0033DC  0E08               	movlw	8
  7532   0033DE  640D               	cpfsgt	determine_card@i^0,c
  7533   0033E0  EFF4  F019         	goto	u1511
  7534   0033E4  EFF6  F019         	goto	u1510
  7535   0033E8                     u1511:
  7536   0033E8  EFC4  F019         	goto	l3150
  7537   0033EC                     u1510:
  7538   0033EC                     
  7539                           ;colour_identify.c: 122:     return predicted_colour;
  7540   0033EC  500C               	movf	determine_card@predicted_colour^0,w,c
  7541   0033EE  0012               	return		;funcret
  7542   0033F0                     __end_of_determine_card:
  7543                           	callstack 0
  7544                           
  7545 ;; *************** function _collect_avg_readings *****************
  7546 ;; Defined at:
  7547 ;;		line 31 in file "colour_identify.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  clear_read      2   14[COMRAM] PTR unsigned int 
  7550 ;;		 -> main@clear_read(2), 
  7551 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  7552 ;;		 -> main@red_read(2), 
  7553 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  7554 ;;		 -> main@green_read(2), 
  7555 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  7556 ;;		 -> main@blue_read(2), 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  i               2   32[COMRAM] int 
  7559 ;;  i               2   30[COMRAM] int 
  7560 ;;  i               2   28[COMRAM] int 
  7561 ;;  i               2   26[COMRAM] int 
  7562 ;;  i               2   24[COMRAM] int 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7572 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7573 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;Total ram usage:       20 bytes
  7577 ;; Hardware stack levels used: 1
  7578 ;; Hardware stack levels required when called: 4
  7579 ;; This function calls:
  7580 ;;		_color_read_Blue
  7581 ;;		_color_read_Clear
  7582 ;;		_color_read_Green
  7583 ;;		_color_read_Red
  7584 ;; This function is called by:
  7585 ;;		_main
  7586 ;;		_card_response
  7587 ;;		_card_response_easy
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text34
  7592   002364                     __ptext34:
  7593                           	callstack 0
  7594   002364                     _collect_avg_readings:
  7595                           	callstack 26
  7596   002364                     
  7597                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  7598   002364  0E00               	movlw	0
  7599   002366  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  7600   002368  0E00               	movlw	0
  7601   00236A  6E19               	movwf	collect_avg_readings@i^0,c
  7602   00236C                     l3046:
  7603                           
  7604                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  7605   00236C  EC44  F01B         	call	_color_read_Clear	;wreg free
  7606   002370  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7607   002374  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7608   002378  C008  FFDE         	movff	?_color_read_Clear,postinc2
  7609   00237C  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  7610                           
  7611                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  7612   002380  ECF4  F01A         	call	_color_read_Red	;wreg free
  7613   002384  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7614   002388  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7615   00238C  C008  FFDE         	movff	?_color_read_Red,postinc2
  7616   002390  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  7617                           
  7618                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  7619   002394  EC1C  F01B         	call	_color_read_Green	;wreg free
  7620   002398  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7621   00239C  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7622   0023A0  C008  FFDE         	movff	?_color_read_Green,postinc2
  7623   0023A4  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  7624                           
  7625                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  7626   0023A8  EC6C  F01B         	call	_color_read_Blue	;wreg free
  7627   0023AC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  7628   0023B0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  7629   0023B4  C008  FFDE         	movff	?_color_read_Blue,postinc2
  7630   0023B8  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  7631   0023BC                     
  7632                           ;colour_identify.c: 40:     }
  7633   0023BC  4A19               	infsnz	collect_avg_readings@i^0,f,c
  7634   0023BE  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  7635   0023C0  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  7636   0023C2  EFEC  F011         	goto	u1431
  7637   0023C6  0EF5               	movlw	245
  7638   0023C8  5C19               	subwf	collect_avg_readings@i^0,w,c
  7639   0023CA  0E01               	movlw	1
  7640   0023CC  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  7641   0023CE  A0D8               	btfss	status,0,c
  7642   0023D0  EFEC  F011         	goto	u1431
  7643   0023D4  EFEE  F011         	goto	u1430
  7644   0023D8                     u1431:
  7645   0023D8  EFB6  F011         	goto	l3046
  7646   0023DC                     u1430:
  7647   0023DC                     
  7648                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  7649   0023DC  0E00               	movlw	0
  7650   0023DE  6E1C               	movwf	(collect_avg_readings@i_1656+1)^0,c
  7651   0023E0  0E00               	movlw	0
  7652   0023E2  6E1B               	movwf	collect_avg_readings@i_1656^0,c
  7653   0023E4                     l3058:
  7654                           
  7655                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  7656   0023E4  EC44  F01B         	call	_color_read_Clear	;wreg free
  7657   0023E8  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7658   0023EC  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7659   0023F0  5008               	movf	?_color_read_Clear^0,w,c
  7660   0023F2  26DE               	addwf	postinc2,f,c
  7661   0023F4  5009               	movf	(?_color_read_Clear+1)^0,w,c
  7662   0023F6  22DD               	addwfc	postdec2,f,c
  7663   0023F8                     
  7664                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7665   0023F8  0E11               	movlw	17
  7666   0023FA  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7667   0023FC  0E3C               	movlw	60
  7668   0023FE  6E17               	movwf	??_collect_avg_readings^0,c
  7669   002400  0ECB               	movlw	203
  7670   002402                     u2257:
  7671   002402  2EE8               	decfsz	wreg,f,c
  7672   002404  D7FE               	bra	u2257
  7673   002406  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7674   002408  D7FC               	bra	u2257
  7675   00240A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7676   00240C  D7FA               	bra	u2257
  7677   00240E  F000               	nop	
  7678   002410                     
  7679                           ;colour_identify.c: 47:     }
  7680   002410  4A1B               	infsnz	collect_avg_readings@i_1656^0,f,c
  7681   002412  2A1C               	incf	(collect_avg_readings@i_1656+1)^0,f,c
  7682   002414  BE1C               	btfsc	(collect_avg_readings@i_1656+1)^0,7,c
  7683   002416  EF16  F012         	goto	u1441
  7684   00241A  501C               	movf	(collect_avg_readings@i_1656+1)^0,w,c
  7685   00241C  E109               	bnz	u1440
  7686   00241E  0E03               	movlw	3
  7687   002420  5C1B               	subwf	collect_avg_readings@i_1656^0,w,c
  7688   002422  A0D8               	btfss	status,0,c
  7689   002424  EF16  F012         	goto	u1441
  7690   002428  EF18  F012         	goto	u1440
  7691   00242C                     u1441:
  7692   00242C  EFF2  F011         	goto	l3058
  7693   002430                     u1440:
  7694   002430                     
  7695                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  7696   002430  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7697   002434  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7698   002438  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7699   00243C  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7700   002440  90D8               	bcf	status,0,c
  7701   002442  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7702   002444  3217               	rrcf	??_collect_avg_readings^0,f,c
  7703   002446  90D8               	bcf	status,0,c
  7704   002448  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7705   00244A  3217               	rrcf	??_collect_avg_readings^0,f,c
  7706   00244C  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7707   002450  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7708   002454  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7709   002458  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7710   00245C                     
  7711                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  7712   00245C  0E00               	movlw	0
  7713   00245E  6E1E               	movwf	(collect_avg_readings@i_1657+1)^0,c
  7714   002460  0E00               	movlw	0
  7715   002462  6E1D               	movwf	collect_avg_readings@i_1657^0,c
  7716   002464                     l3074:
  7717                           
  7718                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  7719   002464  ECF4  F01A         	call	_color_read_Red	;wreg free
  7720   002468  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7721   00246C  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7722   002470  5008               	movf	?_color_read_Red^0,w,c
  7723   002472  26DE               	addwf	postinc2,f,c
  7724   002474  5009               	movf	(?_color_read_Red+1)^0,w,c
  7725   002476  22DD               	addwfc	postdec2,f,c
  7726   002478                     
  7727                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7728   002478  0E11               	movlw	17
  7729   00247A  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7730   00247C  0E3C               	movlw	60
  7731   00247E  6E17               	movwf	??_collect_avg_readings^0,c
  7732   002480  0ECB               	movlw	203
  7733   002482                     u2267:
  7734   002482  2EE8               	decfsz	wreg,f,c
  7735   002484  D7FE               	bra	u2267
  7736   002486  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7737   002488  D7FC               	bra	u2267
  7738   00248A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7739   00248C  D7FA               	bra	u2267
  7740   00248E  F000               	nop	
  7741   002490                     
  7742                           ;colour_identify.c: 53:     }
  7743   002490  4A1D               	infsnz	collect_avg_readings@i_1657^0,f,c
  7744   002492  2A1E               	incf	(collect_avg_readings@i_1657+1)^0,f,c
  7745   002494  BE1E               	btfsc	(collect_avg_readings@i_1657+1)^0,7,c
  7746   002496  EF56  F012         	goto	u1451
  7747   00249A  501E               	movf	(collect_avg_readings@i_1657+1)^0,w,c
  7748   00249C  E109               	bnz	u1450
  7749   00249E  0E03               	movlw	3
  7750   0024A0  5C1D               	subwf	collect_avg_readings@i_1657^0,w,c
  7751   0024A2  A0D8               	btfss	status,0,c
  7752   0024A4  EF56  F012         	goto	u1451
  7753   0024A8  EF58  F012         	goto	u1450
  7754   0024AC                     u1451:
  7755   0024AC  EF32  F012         	goto	l3074
  7756   0024B0                     u1450:
  7757   0024B0                     
  7758                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  7759   0024B0  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7760   0024B4  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7761   0024B8  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7762   0024BC  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7763   0024C0  90D8               	bcf	status,0,c
  7764   0024C2  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7765   0024C4  3217               	rrcf	??_collect_avg_readings^0,f,c
  7766   0024C6  90D8               	bcf	status,0,c
  7767   0024C8  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7768   0024CA  3217               	rrcf	??_collect_avg_readings^0,f,c
  7769   0024CC  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7770   0024D0  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7771   0024D4  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7772   0024D8  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7773   0024DC                     
  7774                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  7775   0024DC  0E00               	movlw	0
  7776   0024DE  6E20               	movwf	(collect_avg_readings@i_1658+1)^0,c
  7777   0024E0  0E00               	movlw	0
  7778   0024E2  6E1F               	movwf	collect_avg_readings@i_1658^0,c
  7779   0024E4                     l3090:
  7780                           
  7781                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  7782   0024E4  EC1C  F01B         	call	_color_read_Green	;wreg free
  7783   0024E8  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7784   0024EC  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7785   0024F0  5008               	movf	?_color_read_Green^0,w,c
  7786   0024F2  26DE               	addwf	postinc2,f,c
  7787   0024F4  5009               	movf	(?_color_read_Green+1)^0,w,c
  7788   0024F6  22DD               	addwfc	postdec2,f,c
  7789   0024F8                     
  7790                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7791   0024F8  0E11               	movlw	17
  7792   0024FA  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7793   0024FC  0E3C               	movlw	60
  7794   0024FE  6E17               	movwf	??_collect_avg_readings^0,c
  7795   002500  0ECB               	movlw	203
  7796   002502                     u2277:
  7797   002502  2EE8               	decfsz	wreg,f,c
  7798   002504  D7FE               	bra	u2277
  7799   002506  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7800   002508  D7FC               	bra	u2277
  7801   00250A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7802   00250C  D7FA               	bra	u2277
  7803   00250E  F000               	nop	
  7804   002510                     
  7805                           ;colour_identify.c: 59:     }
  7806   002510  4A1F               	infsnz	collect_avg_readings@i_1658^0,f,c
  7807   002512  2A20               	incf	(collect_avg_readings@i_1658+1)^0,f,c
  7808   002514  BE20               	btfsc	(collect_avg_readings@i_1658+1)^0,7,c
  7809   002516  EF96  F012         	goto	u1461
  7810   00251A  5020               	movf	(collect_avg_readings@i_1658+1)^0,w,c
  7811   00251C  E109               	bnz	u1460
  7812   00251E  0E03               	movlw	3
  7813   002520  5C1F               	subwf	collect_avg_readings@i_1658^0,w,c
  7814   002522  A0D8               	btfss	status,0,c
  7815   002524  EF96  F012         	goto	u1461
  7816   002528  EF98  F012         	goto	u1460
  7817   00252C                     u1461:
  7818   00252C  EF72  F012         	goto	l3090
  7819   002530                     u1460:
  7820   002530                     
  7821                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  7822   002530  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7823   002534  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7824   002538  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7825   00253C  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7826   002540  90D8               	bcf	status,0,c
  7827   002542  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7828   002544  3217               	rrcf	??_collect_avg_readings^0,f,c
  7829   002546  90D8               	bcf	status,0,c
  7830   002548  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7831   00254A  3217               	rrcf	??_collect_avg_readings^0,f,c
  7832   00254C  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7833   002550  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7834   002554  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7835   002558  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7836   00255C                     
  7837                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  7838   00255C  0E00               	movlw	0
  7839   00255E  6E22               	movwf	(collect_avg_readings@i_1659+1)^0,c
  7840   002560  0E00               	movlw	0
  7841   002562  6E21               	movwf	collect_avg_readings@i_1659^0,c
  7842   002564                     l3106:
  7843                           
  7844                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  7845   002564  EC6C  F01B         	call	_color_read_Blue	;wreg free
  7846   002568  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  7847   00256C  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  7848   002570  5008               	movf	?_color_read_Blue^0,w,c
  7849   002572  26DE               	addwf	postinc2,f,c
  7850   002574  5009               	movf	(?_color_read_Blue+1)^0,w,c
  7851   002576  22DD               	addwfc	postdec2,f,c
  7852   002578                     
  7853                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7854   002578  0E11               	movlw	17
  7855   00257A  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7856   00257C  0E3C               	movlw	60
  7857   00257E  6E17               	movwf	??_collect_avg_readings^0,c
  7858   002580  0ECB               	movlw	203
  7859   002582                     u2287:
  7860   002582  2EE8               	decfsz	wreg,f,c
  7861   002584  D7FE               	bra	u2287
  7862   002586  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7863   002588  D7FC               	bra	u2287
  7864   00258A  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7865   00258C  D7FA               	bra	u2287
  7866   00258E  F000               	nop	
  7867   002590                     
  7868                           ;colour_identify.c: 65:     }
  7869   002590  4A21               	infsnz	collect_avg_readings@i_1659^0,f,c
  7870   002592  2A22               	incf	(collect_avg_readings@i_1659+1)^0,f,c
  7871   002594  BE22               	btfsc	(collect_avg_readings@i_1659+1)^0,7,c
  7872   002596  EFD6  F012         	goto	u1471
  7873   00259A  5022               	movf	(collect_avg_readings@i_1659+1)^0,w,c
  7874   00259C  E109               	bnz	u1470
  7875   00259E  0E03               	movlw	3
  7876   0025A0  5C21               	subwf	collect_avg_readings@i_1659^0,w,c
  7877   0025A2  A0D8               	btfss	status,0,c
  7878   0025A4  EFD6  F012         	goto	u1471
  7879   0025A8  EFD8  F012         	goto	u1470
  7880   0025AC                     u1471:
  7881   0025AC  EFB2  F012         	goto	l3106
  7882   0025B0                     u1470:
  7883   0025B0                     
  7884                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  7885   0025B0  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  7886   0025B4  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  7887   0025B8  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7888   0025BC  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7889   0025C0  90D8               	bcf	status,0,c
  7890   0025C2  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7891   0025C4  3217               	rrcf	??_collect_avg_readings^0,f,c
  7892   0025C6  90D8               	bcf	status,0,c
  7893   0025C8  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7894   0025CA  3217               	rrcf	??_collect_avg_readings^0,f,c
  7895   0025CC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  7896   0025D0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  7897   0025D4  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7898   0025D8  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7899   0025DC  0012               	return		;funcret
  7900   0025DE                     __end_of_collect_avg_readings:
  7901                           	callstack 0
  7902                           
  7903 ;; *************** function _color_read_Red *****************
  7904 ;; Defined at:
  7905 ;;		line 29 in file "color.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;		None
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  tmp             2   12[COMRAM] unsigned int 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  2    7[COMRAM] unsigned int 
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7922 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7923 ;;Total ram usage:        7 bytes
  7924 ;; Hardware stack levels used: 1
  7925 ;; Hardware stack levels required when called: 3
  7926 ;; This function calls:
  7927 ;;		_I2C_2_Master_Read
  7928 ;;		_I2C_2_Master_RepStart
  7929 ;;		_I2C_2_Master_Start
  7930 ;;		_I2C_2_Master_Stop
  7931 ;;		_I2C_2_Master_Write
  7932 ;; This function is called by:
  7933 ;;		_collect_avg_readings
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text35
  7938   0035E8                     __ptext35:
  7939                           	callstack 0
  7940   0035E8                     _color_read_Red:
  7941                           	callstack 26
  7942   0035E8                     
  7943                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  7944   0035E8  ECDA  F01C         	call	_I2C_2_Master_Start	;wreg free
  7945                           
  7946                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  7947   0035EC  0E52               	movlw	82
  7948   0035EE  ECCF  F01C         	call	_I2C_2_Master_Write
  7949                           
  7950                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  7951   0035F2  0EB6               	movlw	182
  7952   0035F4  ECCF  F01C         	call	_I2C_2_Master_Write
  7953                           
  7954                           ;color.c: 35:  I2C_2_Master_RepStart();
  7955   0035F8  ECDF  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  7956                           
  7957                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  7958   0035FC  0E53               	movlw	83
  7959   0035FE  ECCF  F01C         	call	_I2C_2_Master_Write
  7960                           
  7961                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  7962   003602  0E01               	movlw	1
  7963   003604  ECB6  F01B         	call	_I2C_2_Master_Read
  7964   003608  6E0A               	movwf	??_color_read_Red^0,c
  7965   00360A  500A               	movf	??_color_read_Red^0,w,c
  7966   00360C  6E0D               	movwf	color_read_Red@tmp^0,c
  7967   00360E  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  7968                           
  7969                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7970   003610  0E00               	movlw	0
  7971   003612  ECB6  F01B         	call	_I2C_2_Master_Read
  7972   003616  6E0A               	movwf	??_color_read_Red^0,c
  7973   003618  500A               	movf	??_color_read_Red^0,w,c
  7974   00361A  6E0C               	movwf	(??_color_read_Red+2)^0,c
  7975   00361C  6A0B               	clrf	(??_color_read_Red+1)^0,c
  7976   00361E  500D               	movf	color_read_Red@tmp^0,w,c
  7977   003620  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  7978   003622  6E0D               	movwf	color_read_Red@tmp^0,c
  7979   003624  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  7980   003626  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  7981   003628  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  7982                           
  7983                           ;color.c: 39:  I2C_2_Master_Stop();
  7984   00362A  ECD5  F01C         	call	_I2C_2_Master_Stop	;wreg free
  7985   00362E                     
  7986                           ;color.c: 40:  return tmp;
  7987   00362E  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  7988   003632  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  7989   003636  0012               	return		;funcret
  7990   003638                     __end_of_color_read_Red:
  7991                           	callstack 0
  7992                           
  7993 ;; *************** function _color_read_Green *****************
  7994 ;; Defined at:
  7995 ;;		line 43 in file "color.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;		None
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  tmp             2   12[COMRAM] unsigned int 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  2    7[COMRAM] unsigned int 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8011 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8012 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8013 ;;Total ram usage:        7 bytes
  8014 ;; Hardware stack levels used: 1
  8015 ;; Hardware stack levels required when called: 3
  8016 ;; This function calls:
  8017 ;;		_I2C_2_Master_Read
  8018 ;;		_I2C_2_Master_RepStart
  8019 ;;		_I2C_2_Master_Start
  8020 ;;		_I2C_2_Master_Stop
  8021 ;;		_I2C_2_Master_Write
  8022 ;; This function is called by:
  8023 ;;		_collect_avg_readings
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text36
  8028   003638                     __ptext36:
  8029                           	callstack 0
  8030   003638                     _color_read_Green:
  8031                           	callstack 26
  8032   003638                     
  8033                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  8034   003638  ECDA  F01C         	call	_I2C_2_Master_Start	;wreg free
  8035                           
  8036                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  8037   00363C  0E52               	movlw	82
  8038   00363E  ECCF  F01C         	call	_I2C_2_Master_Write
  8039                           
  8040                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  8041   003642  0EB8               	movlw	184
  8042   003644  ECCF  F01C         	call	_I2C_2_Master_Write
  8043                           
  8044                           ;color.c: 49:  I2C_2_Master_RepStart();
  8045   003648  ECDF  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8046                           
  8047                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  8048   00364C  0E53               	movlw	83
  8049   00364E  ECCF  F01C         	call	_I2C_2_Master_Write
  8050                           
  8051                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  8052   003652  0E01               	movlw	1
  8053   003654  ECB6  F01B         	call	_I2C_2_Master_Read
  8054   003658  6E0A               	movwf	??_color_read_Green^0,c
  8055   00365A  500A               	movf	??_color_read_Green^0,w,c
  8056   00365C  6E0D               	movwf	color_read_Green@tmp^0,c
  8057   00365E  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  8058                           
  8059                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8060   003660  0E00               	movlw	0
  8061   003662  ECB6  F01B         	call	_I2C_2_Master_Read
  8062   003666  6E0A               	movwf	??_color_read_Green^0,c
  8063   003668  500A               	movf	??_color_read_Green^0,w,c
  8064   00366A  6E0C               	movwf	(??_color_read_Green+2)^0,c
  8065   00366C  6A0B               	clrf	(??_color_read_Green+1)^0,c
  8066   00366E  500D               	movf	color_read_Green@tmp^0,w,c
  8067   003670  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  8068   003672  6E0D               	movwf	color_read_Green@tmp^0,c
  8069   003674  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  8070   003676  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  8071   003678  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  8072                           
  8073                           ;color.c: 53:  I2C_2_Master_Stop();
  8074   00367A  ECD5  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8075   00367E                     
  8076                           ;color.c: 54:  return tmp;
  8077   00367E  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  8078   003682  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8079   003686  0012               	return		;funcret
  8080   003688                     __end_of_color_read_Green:
  8081                           	callstack 0
  8082                           
  8083 ;; *************** function _color_read_Clear *****************
  8084 ;; Defined at:
  8085 ;;		line 71 in file "color.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;		None
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  tmp             2   12[COMRAM] unsigned int 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  2    7[COMRAM] unsigned int 
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8101 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8102 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8103 ;;Total ram usage:        7 bytes
  8104 ;; Hardware stack levels used: 1
  8105 ;; Hardware stack levels required when called: 3
  8106 ;; This function calls:
  8107 ;;		_I2C_2_Master_Read
  8108 ;;		_I2C_2_Master_RepStart
  8109 ;;		_I2C_2_Master_Start
  8110 ;;		_I2C_2_Master_Stop
  8111 ;;		_I2C_2_Master_Write
  8112 ;; This function is called by:
  8113 ;;		_main
  8114 ;;		_clear_read_calibration
  8115 ;;		_collect_avg_readings
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           	psect	text37
  8120   003688                     __ptext37:
  8121                           	callstack 0
  8122   003688                     _color_read_Clear:
  8123                           	callstack 27
  8124   003688                     
  8125                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  8126   003688  ECDA  F01C         	call	_I2C_2_Master_Start	;wreg free
  8127                           
  8128                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  8129   00368C  0E52               	movlw	82
  8130   00368E  ECCF  F01C         	call	_I2C_2_Master_Write
  8131                           
  8132                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  8133   003692  0EB4               	movlw	180
  8134   003694  ECCF  F01C         	call	_I2C_2_Master_Write
  8135                           
  8136                           ;color.c: 77:  I2C_2_Master_RepStart();
  8137   003698  ECDF  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8138                           
  8139                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  8140   00369C  0E53               	movlw	83
  8141   00369E  ECCF  F01C         	call	_I2C_2_Master_Write
  8142                           
  8143                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  8144   0036A2  0E01               	movlw	1
  8145   0036A4  ECB6  F01B         	call	_I2C_2_Master_Read
  8146   0036A8  6E0A               	movwf	??_color_read_Clear^0,c
  8147   0036AA  500A               	movf	??_color_read_Clear^0,w,c
  8148   0036AC  6E0D               	movwf	color_read_Clear@tmp^0,c
  8149   0036AE  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  8150                           
  8151                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8152   0036B0  0E00               	movlw	0
  8153   0036B2  ECB6  F01B         	call	_I2C_2_Master_Read
  8154   0036B6  6E0A               	movwf	??_color_read_Clear^0,c
  8155   0036B8  500A               	movf	??_color_read_Clear^0,w,c
  8156   0036BA  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  8157   0036BC  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  8158   0036BE  500D               	movf	color_read_Clear@tmp^0,w,c
  8159   0036C0  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  8160   0036C2  6E0D               	movwf	color_read_Clear@tmp^0,c
  8161   0036C4  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  8162   0036C6  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  8163   0036C8  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  8164                           
  8165                           ;color.c: 81:  I2C_2_Master_Stop();
  8166   0036CA  ECD5  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8167   0036CE                     
  8168                           ;color.c: 82:  return tmp;
  8169   0036CE  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  8170   0036D2  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8171   0036D6  0012               	return		;funcret
  8172   0036D8                     __end_of_color_read_Clear:
  8173                           	callstack 0
  8174                           
  8175 ;; *************** function _color_read_Blue *****************
  8176 ;; Defined at:
  8177 ;;		line 57 in file "color.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  tmp             2   12[COMRAM] unsigned int 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  2    7[COMRAM] unsigned int 
  8184 ;; Registers used:
  8185 ;;		wreg, status,2, status,0, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8192 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8193 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8194 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8195 ;;Total ram usage:        7 bytes
  8196 ;; Hardware stack levels used: 1
  8197 ;; Hardware stack levels required when called: 3
  8198 ;; This function calls:
  8199 ;;		_I2C_2_Master_Read
  8200 ;;		_I2C_2_Master_RepStart
  8201 ;;		_I2C_2_Master_Start
  8202 ;;		_I2C_2_Master_Stop
  8203 ;;		_I2C_2_Master_Write
  8204 ;; This function is called by:
  8205 ;;		_collect_avg_readings
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text38
  8210   0036D8                     __ptext38:
  8211                           	callstack 0
  8212   0036D8                     _color_read_Blue:
  8213                           	callstack 26
  8214   0036D8                     
  8215                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  8216   0036D8  ECDA  F01C         	call	_I2C_2_Master_Start	;wreg free
  8217                           
  8218                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  8219   0036DC  0E52               	movlw	82
  8220   0036DE  ECCF  F01C         	call	_I2C_2_Master_Write
  8221                           
  8222                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  8223   0036E2  0EBA               	movlw	186
  8224   0036E4  ECCF  F01C         	call	_I2C_2_Master_Write
  8225                           
  8226                           ;color.c: 63:  I2C_2_Master_RepStart();
  8227   0036E8  ECDF  F01C         	call	_I2C_2_Master_RepStart	;wreg free
  8228                           
  8229                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  8230   0036EC  0E53               	movlw	83
  8231   0036EE  ECCF  F01C         	call	_I2C_2_Master_Write
  8232                           
  8233                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  8234   0036F2  0E01               	movlw	1
  8235   0036F4  ECB6  F01B         	call	_I2C_2_Master_Read
  8236   0036F8  6E0A               	movwf	??_color_read_Blue^0,c
  8237   0036FA  500A               	movf	??_color_read_Blue^0,w,c
  8238   0036FC  6E0D               	movwf	color_read_Blue@tmp^0,c
  8239   0036FE  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  8240                           
  8241                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8242   003700  0E00               	movlw	0
  8243   003702  ECB6  F01B         	call	_I2C_2_Master_Read
  8244   003706  6E0A               	movwf	??_color_read_Blue^0,c
  8245   003708  500A               	movf	??_color_read_Blue^0,w,c
  8246   00370A  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  8247   00370C  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  8248   00370E  500D               	movf	color_read_Blue@tmp^0,w,c
  8249   003710  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  8250   003712  6E0D               	movwf	color_read_Blue@tmp^0,c
  8251   003714  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  8252   003716  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  8253   003718  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  8254                           
  8255                           ;color.c: 67:  I2C_2_Master_Stop();
  8256   00371A  ECD5  F01C         	call	_I2C_2_Master_Stop	;wreg free
  8257   00371E                     
  8258                           ;color.c: 68:  return tmp;
  8259   00371E  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  8260   003722  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8261   003726  0012               	return		;funcret
  8262   003728                     __end_of_color_read_Blue:
  8263                           	callstack 0
  8264                           
  8265 ;; *************** function _I2C_2_Master_Write *****************
  8266 ;; Defined at:
  8267 ;;		line 45 in file "i2c.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  data_byte       1    wreg     unsigned char 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  data_byte       1    4[COMRAM] unsigned char 
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  1    wreg      void 
  8274 ;; Registers used:
  8275 ;;		wreg, status,2, status,0, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8285 ;;Total ram usage:        1 bytes
  8286 ;; Hardware stack levels used: 1
  8287 ;; Hardware stack levels required when called: 2
  8288 ;; This function calls:
  8289 ;;		_I2C_2_Master_Idle
  8290 ;; This function is called by:
  8291 ;;		_color_writetoaddr
  8292 ;;		_color_read_Red
  8293 ;;		_color_read_Green
  8294 ;;		_color_read_Blue
  8295 ;;		_color_read_Clear
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text39
  8300   00399E                     __ptext39:
  8301                           	callstack 0
  8302   00399E                     _I2C_2_Master_Write:
  8303                           	callstack 27
  8304                           
  8305                           ;incstack = 0
  8306                           ;I2C_2_Master_Write@data_byte stored from wreg
  8307   00399E  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  8308   0039A0                     
  8309                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8310   0039A0  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8311   0039A4                     
  8312                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8313   0039A4  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8314   0039A8  0012               	return		;funcret
  8315   0039AA                     __end_of_I2C_2_Master_Write:
  8316                           	callstack 0
  8317                           
  8318 ;; *************** function _I2C_2_Master_Stop *****************
  8319 ;; Defined at:
  8320 ;;		line 39 in file "i2c.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;		None
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;		None
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      void 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;Total ram usage:        0 bytes
  8339 ;; Hardware stack levels used: 1
  8340 ;; Hardware stack levels required when called: 2
  8341 ;; This function calls:
  8342 ;;		_I2C_2_Master_Idle
  8343 ;; This function is called by:
  8344 ;;		_color_writetoaddr
  8345 ;;		_color_read_Red
  8346 ;;		_color_read_Green
  8347 ;;		_color_read_Blue
  8348 ;;		_color_read_Clear
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text40
  8353   0039AA                     __ptext40:
  8354                           	callstack 0
  8355   0039AA                     _I2C_2_Master_Stop:
  8356                           	callstack 27
  8357   0039AA                     
  8358                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8359   0039AA  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8360   0039AE                     
  8361                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8362   0039AE  010E               	movlb	14	; () banked
  8363   0039B0  85DA               	bsf	218,2,b	;volatile
  8364   0039B2                     
  8365                           ; BSR set to: 14
  8366   0039B2  0012               	return		;funcret
  8367   0039B4                     __end_of_I2C_2_Master_Stop:
  8368                           	callstack 0
  8369                           
  8370 ;; *************** function _I2C_2_Master_Start *****************
  8371 ;; Defined at:
  8372 ;;		line 27 in file "i2c.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;		None
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8390 ;;Total ram usage:        0 bytes
  8391 ;; Hardware stack levels used: 1
  8392 ;; Hardware stack levels required when called: 2
  8393 ;; This function calls:
  8394 ;;		_I2C_2_Master_Idle
  8395 ;; This function is called by:
  8396 ;;		_color_writetoaddr
  8397 ;;		_color_read_Red
  8398 ;;		_color_read_Green
  8399 ;;		_color_read_Blue
  8400 ;;		_color_read_Clear
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           	psect	text41
  8405   0039B4                     __ptext41:
  8406                           	callstack 0
  8407   0039B4                     _I2C_2_Master_Start:
  8408                           	callstack 27
  8409   0039B4                     
  8410                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8411   0039B4  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8412   0039B8                     
  8413                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8414   0039B8  010E               	movlb	14	; () banked
  8415   0039BA  81DA               	bsf	218,0,b	;volatile
  8416   0039BC                     
  8417                           ; BSR set to: 14
  8418   0039BC  0012               	return		;funcret
  8419   0039BE                     __end_of_I2C_2_Master_Start:
  8420                           	callstack 0
  8421                           
  8422 ;; *************** function _I2C_2_Master_RepStart *****************
  8423 ;; Defined at:
  8424 ;;		line 33 in file "i2c.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;		None
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      void 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8442 ;;Total ram usage:        0 bytes
  8443 ;; Hardware stack levels used: 1
  8444 ;; Hardware stack levels required when called: 2
  8445 ;; This function calls:
  8446 ;;		_I2C_2_Master_Idle
  8447 ;; This function is called by:
  8448 ;;		_color_read_Red
  8449 ;;		_color_read_Green
  8450 ;;		_color_read_Blue
  8451 ;;		_color_read_Clear
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text42
  8456   0039BE                     __ptext42:
  8457                           	callstack 0
  8458   0039BE                     _I2C_2_Master_RepStart:
  8459                           	callstack 27
  8460   0039BE                     
  8461                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8462   0039BE  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8463   0039C2                     
  8464                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8465   0039C2  010E               	movlb	14	; () banked
  8466   0039C4  83DA               	bsf	218,1,b	;volatile
  8467   0039C6                     
  8468                           ; BSR set to: 14
  8469   0039C6  0012               	return		;funcret
  8470   0039C8                     __end_of_I2C_2_Master_RepStart:
  8471                           	callstack 0
  8472                           
  8473 ;; *************** function _I2C_2_Master_Read *****************
  8474 ;; Defined at:
  8475 ;;		line 51 in file "i2c.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;  ack             1    wreg     unsigned char 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  ack             1    5[COMRAM] unsigned char 
  8480 ;;  tmp             1    6[COMRAM] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      unsigned char 
  8483 ;; Registers used:
  8484 ;;		wreg, status,2, status,0, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8492 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8493 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8494 ;;Total ram usage:        3 bytes
  8495 ;; Hardware stack levels used: 1
  8496 ;; Hardware stack levels required when called: 2
  8497 ;; This function calls:
  8498 ;;		_I2C_2_Master_Idle
  8499 ;; This function is called by:
  8500 ;;		_color_read_Red
  8501 ;;		_color_read_Green
  8502 ;;		_color_read_Blue
  8503 ;;		_color_read_Clear
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text43
  8508   00376C                     __ptext43:
  8509                           	callstack 0
  8510   00376C                     _I2C_2_Master_Read:
  8511                           	callstack 27
  8512                           
  8513                           ; BSR set to: 14
  8514                           ;incstack = 0
  8515                           ;I2C_2_Master_Read@ack stored from wreg
  8516   00376C  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  8517   00376E                     
  8518                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8519   00376E  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8520   003772                     
  8521                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8522   003772  010E               	movlb	14	; () banked
  8523   003774  87DA               	bsf	218,3,b	;volatile
  8524                           
  8525                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8526   003776  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8527   00377A                     
  8528                           ;i2c.c: 57:   tmp = SSP2BUF;
  8529   00377A  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8530                           
  8531                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8532   00377E  EC7C  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8533   003782                     
  8534                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8535   003782  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  8536   003784  B4D8               	btfsc	status,2,c
  8537   003786  EFC7  F01B         	goto	u1321
  8538   00378A  EFCB  F01B         	goto	u1320
  8539   00378E                     u1321:
  8540   00378E  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8541   003790  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  8542   003792  EFCC  F01B         	goto	u1338
  8543   003796                     u1320:
  8544   003796  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8545   003798                     u1338:
  8546   003798  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  8547   00379A  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  8548   00379C  010E               	movlb	14	; () banked
  8549   00379E  51DA               	movf	218,w,b	;volatile
  8550   0037A0  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8551   0037A2  0BDF               	andlw	-33
  8552   0037A4  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8553   0037A6  6FDA               	movwf	218,b	;volatile
  8554   0037A8                     
  8555                           ; BSR set to: 14
  8556                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8557   0037A8  89DA               	bsf	218,4,b	;volatile
  8558   0037AA                     
  8559                           ; BSR set to: 14
  8560                           ;i2c.c: 61:   return tmp;
  8561   0037AA  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  8562   0037AC                     
  8563                           ; BSR set to: 14
  8564   0037AC  0012               	return		;funcret
  8565   0037AE                     __end_of_I2C_2_Master_Read:
  8566                           	callstack 0
  8567                           
  8568 ;; *************** function _I2C_2_Master_Idle *****************
  8569 ;; Defined at:
  8570 ;;		line 22 in file "i2c.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;		None
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  1    wreg      void 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8586 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8588 ;;Total ram usage:        1 bytes
  8589 ;; Hardware stack levels used: 1
  8590 ;; Hardware stack levels required when called: 1
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_I2C_2_Master_Start
  8595 ;;		_I2C_2_Master_RepStart
  8596 ;;		_I2C_2_Master_Stop
  8597 ;;		_I2C_2_Master_Write
  8598 ;;		_I2C_2_Master_Read
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text44
  8603   0038F8                     __ptext44:
  8604                           	callstack 0
  8605   0038F8                     _I2C_2_Master_Idle:
  8606                           	callstack 27
  8607   0038F8                     l145:
  8608   0038F8  010E               	movlb	14	; () banked
  8609   0038FA  B5D8               	btfsc	216,2,b	;volatile
  8610   0038FC  EF82  F01C         	goto	u1271
  8611   003900  EF84  F01C         	goto	u1270
  8612   003904                     u1271:
  8613   003904  EF7C  F01C         	goto	l145
  8614   003908                     u1270:
  8615   003908                     
  8616                           ; BSR set to: 14
  8617   003908  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8618   00390C  0E1F               	movlw	31
  8619   00390E  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  8620   003910  A4D8               	btfss	status,2,c
  8621   003912  EF8D  F01C         	goto	u1281
  8622   003916  EF8F  F01C         	goto	u1280
  8623   00391A                     u1281:
  8624   00391A  EF7C  F01C         	goto	l145
  8625   00391E                     u1280:
  8626   00391E                     
  8627                           ; BSR set to: 14
  8628   00391E  0012               	return		;funcret
  8629   003920                     __end_of_I2C_2_Master_Idle:
  8630                           	callstack 0
  8631                           
  8632 ;; *************** function ___lwmod *****************
  8633 ;; Defined at:
  8634 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  dividend        2    3[COMRAM] unsigned int 
  8637 ;;  divisor         2    5[COMRAM] unsigned int 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  counter         1    7[COMRAM] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  2    3[COMRAM] unsigned int 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8652 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8653 ;;Total ram usage:        5 bytes
  8654 ;; Hardware stack levels used: 1
  8655 ;; Hardware stack levels required when called: 1
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_main
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text45
  8664   0034DE                     __ptext45:
  8665                           	callstack 0
  8666   0034DE                     ___lwmod:
  8667                           	callstack 29
  8668   0034DE  5006               	movf	___lwmod@divisor^0,w,c
  8669   0034E0  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  8670   0034E2  B4D8               	btfsc	status,2,c
  8671   0034E4  EF76  F01A         	goto	u1591
  8672   0034E8  EF78  F01A         	goto	u1590
  8673   0034EC                     u1591:
  8674   0034EC  EF9C  F01A         	goto	l1035
  8675   0034F0                     u1590:
  8676   0034F0  0E01               	movlw	1
  8677   0034F2  6E08               	movwf	___lwmod@counter^0,c
  8678   0034F4  EF80  F01A         	goto	l3524
  8679   0034F8                     l3522:
  8680   0034F8  90D8               	bcf	status,0,c
  8681   0034FA  3606               	rlcf	___lwmod@divisor^0,f,c
  8682   0034FC  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  8683   0034FE  2A08               	incf	___lwmod@counter^0,f,c
  8684   003500                     l3524:
  8685   003500  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  8686   003502  EF85  F01A         	goto	u1601
  8687   003506  EF87  F01A         	goto	u1600
  8688   00350A                     u1601:
  8689   00350A  EF7C  F01A         	goto	l3522
  8690   00350E                     u1600:
  8691   00350E                     l3526:
  8692   00350E  5006               	movf	___lwmod@divisor^0,w,c
  8693   003510  5C04               	subwf	___lwmod@dividend^0,w,c
  8694   003512  5007               	movf	(___lwmod@divisor+1)^0,w,c
  8695   003514  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  8696   003516  A0D8               	btfss	status,0,c
  8697   003518  EF90  F01A         	goto	u1611
  8698   00351C  EF92  F01A         	goto	u1610
  8699   003520                     u1611:
  8700   003520  EF96  F01A         	goto	l3530
  8701   003524                     u1610:
  8702   003524  5006               	movf	___lwmod@divisor^0,w,c
  8703   003526  5E04               	subwf	___lwmod@dividend^0,f,c
  8704   003528  5007               	movf	(___lwmod@divisor+1)^0,w,c
  8705   00352A  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  8706   00352C                     l3530:
  8707   00352C  90D8               	bcf	status,0,c
  8708   00352E  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  8709   003530  3206               	rrcf	___lwmod@divisor^0,f,c
  8710   003532  2E08               	decfsz	___lwmod@counter^0,f,c
  8711   003534  EF87  F01A         	goto	l3526
  8712   003538                     l1035:
  8713   003538  C004  F004         	movff	___lwmod@dividend,?___lwmod
  8714   00353C  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  8715   003540  0012               	return		;funcret
  8716   003542                     __end_of___lwmod:
  8717                           	callstack 0
  8718                           
  8719 ;; *************** function _LEDSon_init *****************
  8720 ;; Defined at:
  8721 ;;		line 18 in file "LEDsOn.c"
  8722 ;; Parameters:    Size  Location     Type
  8723 ;;		None
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;		None
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  1    wreg      void 
  8728 ;; Registers used:
  8729 ;;		None
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8739 ;;Total ram usage:        0 bytes
  8740 ;; Hardware stack levels used: 1
  8741 ;; Hardware stack levels required when called: 1
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_main
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text46
  8750   00387C                     __ptext46:
  8751                           	callstack 0
  8752   00387C                     _LEDSon_init:
  8753                           	callstack 29
  8754   00387C                     
  8755                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  8756   00387C  9288               	bcf	136,1,c	;volatile
  8757                           
  8758                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  8759   00387E  9088               	bcf	136,0,c	;volatile
  8760                           
  8761                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  8762   003880  9884               	bcf	132,4,c	;volatile
  8763                           
  8764                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  8765   003882  9684               	bcf	132,3,c	;volatile
  8766                           
  8767                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  8768   003884  9086               	bcf	134,0,c	;volatile
  8769                           
  8770                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  8771   003886  9287               	bcf	135,1,c	;volatile
  8772                           
  8773                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  8774   003888  9E86               	bcf	134,7,c	;volatile
  8775                           
  8776                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  8777   00388A  9881               	bcf	129,4,c	;volatile
  8778                           
  8779                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  8780   00388C  8E7E               	bsf	126,7,c	;volatile
  8781                           
  8782                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  8783   00388E  827F               	bsf	127,1,c	;volatile
  8784                           
  8785                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  8786   003890  8879               	bsf	121,4,c	;volatile
  8787                           
  8788                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  8789   003892  987C               	bcf	124,4,c	;volatile
  8790                           
  8791                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  8792   003894  9280               	bcf	128,1,c	;volatile
  8793                           
  8794                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  8795   003896  907E               	bcf	126,0,c	;volatile
  8796                           
  8797                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  8798   003898  9080               	bcf	128,0,c	;volatile
  8799                           
  8800                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  8801   00389A  967C               	bcf	124,3,c	;volatile
  8802                           
  8803                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  8804   00389C  9688               	bcf	136,3,c	;volatile
  8805                           
  8806                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  8807   00389E  9680               	bcf	128,3,c	;volatile
  8808                           
  8809                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  8810   0038A0  9E84               	bcf	132,7,c	;volatile
  8811                           
  8812                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  8813   0038A2  9E7C               	bcf	124,7,c	;volatile
  8814   0038A4  0012               	return		;funcret
  8815   0038A6                     __end_of_LEDSon_init:
  8816                           	callstack 0
  8817                           
  8818 ;; *************** function _Interrupts_init *****************
  8819 ;; Defined at:
  8820 ;;		line 7 in file "interrupts.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      void 
  8827 ;; Registers used:
  8828 ;;		wreg, status,2
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8838 ;;Total ram usage:        0 bytes
  8839 ;; Hardware stack levels used: 1
  8840 ;; Hardware stack levels required when called: 1
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_main
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text47
  8849   0038A6                     __ptext47:
  8850                           	callstack 0
  8851   0038A6                     _Interrupts_init:
  8852                           	callstack 29
  8853   0038A6                     
  8854                           ;interrupts.c: 10:     TMR0IE=1;
  8855   0038A6  010E               	movlb	14	; () banked
  8856   0038A8  8B29               	bsf	41,5,b	;volatile
  8857   0038AA                     
  8858                           ; BSR set to: 14
  8859                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  8860   0038AA  50D6               	movf	214,w,c	;volatile
  8861   0038AC  0B1F               	andlw	-225
  8862   0038AE  0940               	iorlw	64
  8863   0038B0  6ED6               	movwf	214,c	;volatile
  8864   0038B2                     
  8865                           ; BSR set to: 14
  8866                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  8867   0038B2  88D6               	bsf	214,4,c	;volatile
  8868                           
  8869                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  8870   0038B4  50D6               	movf	214,w,c	;volatile
  8871   0038B6  0BF0               	andlw	-16
  8872   0038B8  0905               	iorlw	5
  8873   0038BA  6ED6               	movwf	214,c	;volatile
  8874   0038BC                     
  8875                           ; BSR set to: 14
  8876                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  8877   0038BC  88D5               	bsf	213,4,c	;volatile
  8878   0038BE                     
  8879                           ; BSR set to: 14
  8880                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  8881   0038BE  9B1F               	bcf	31,5,b	;volatile
  8882                           
  8883                           ;interrupts.c: 16:     TMR0H=0b00111100;
  8884   0038C0  0E3C               	movlw	60
  8885   0038C2  6ED4               	movwf	212,c	;volatile
  8886                           
  8887                           ;interrupts.c: 17:     TMR0L=0b10101111;
  8888   0038C4  0EAF               	movlw	175
  8889   0038C6  6ED3               	movwf	211,c	;volatile
  8890   0038C8                     
  8891                           ; BSR set to: 14
  8892                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  8893   0038C8  8ED5               	bsf	213,7,c	;volatile
  8894   0038CA                     
  8895                           ; BSR set to: 14
  8896                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  8897   0038CA  8CF2               	bsf	242,6,c	;volatile
  8898   0038CC                     
  8899                           ; BSR set to: 14
  8900                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  8901   0038CC  8EF2               	bsf	242,7,c	;volatile
  8902   0038CE                     
  8903                           ; BSR set to: 14
  8904   0038CE  0012               	return		;funcret
  8905   0038D0                     __end_of_Interrupts_init:
  8906                           	callstack 0
  8907                           
  8908 ;; *************** function _LowISR *****************
  8909 ;; Defined at:
  8910 ;;		line 24 in file "interrupts.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;		None
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;		None
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, status,2
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8926 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8927 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8928 ;;Total ram usage:        3 bytes
  8929 ;; Hardware stack levels used: 1
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		Interrupt level 1
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	intcodelo
  8938   000018                     __pintcodelo:
  8939                           	callstack 0
  8940   000018                     _LowISR:
  8941                           	callstack 20
  8942                           
  8943                           ; BSR set to: 14
  8944                           ;incstack = 0
  8945   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  8946   00001A  CFD8 F001          	movff	status,??_LowISR
  8947   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  8948   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  8949   000026                     
  8950                           ;interrupts.c: 27:     if(TMR0IF){
  8951   000026  010E               	movlb	14	; () banked
  8952   000028  AB33               	btfss	51,5,b	;volatile
  8953   00002A  EF19  F000         	goto	i1u176_21
  8954   00002E  EF1B  F000         	goto	i1u176_20
  8955   000032                     i1u176_21:
  8956   000032  EF26  F000         	goto	i1l531
  8957   000036                     i1u176_20:
  8958   000036                     
  8959                           ; BSR set to: 14
  8960                           ;interrupts.c: 28:     TMR0H=0b00111100;
  8961   000036  0E3C               	movlw	60
  8962   000038  6ED4               	movwf	212,c	;volatile
  8963                           
  8964                           ;interrupts.c: 29:     TMR0L=0b10101111;
  8965   00003A  0EAF               	movlw	175
  8966   00003C  6ED3               	movwf	211,c	;volatile
  8967                           
  8968                           ;interrupts.c: 34:         TimerFlag=1;
  8969   00003E  0E00               	movlw	0
  8970   000040  0100               	movlb	0	; () banked
  8971   000042  6FEC               	movwf	(_TimerFlag+1)& (0+255),b
  8972   000044  0E01               	movlw	1
  8973   000046  6FEB               	movwf	_TimerFlag& (0+255),b
  8974   000048                     
  8975                           ; BSR set to: 0
  8976                           ;interrupts.c: 36:        TMR0IF=0;
  8977   000048  010E               	movlb	14	; () banked
  8978   00004A  9B33               	bcf	51,5,b	;volatile
  8979   00004C                     i1l531:
  8980                           
  8981                           ; BSR set to: 14
  8982   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  8983   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  8984   000054  C001  FFD8         	movff	??_LowISR,status
  8985   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  8986   00005A  0010               	retfie	
  8987   00005C                     __end_of_LowISR:
  8988                           	callstack 0
  8989                           
  8990                           	psect	rparam
  8991   000000                     
  8992                           	psect	temp
  8993   00005B                     btemp:
  8994                           	callstack 0
  8995   00005B                     	ds	1
  8996   000000                     int$flags	set	btemp
  8997   000000                     wtemp8	set	btemp+1
  8998   000000                     ttemp5	set	btemp+1
  8999   000000                     ttemp6	set	btemp+4
  9000   000000                     ttemp7	set	btemp+8
  9001                           
  9002                           	psect	idloc
  9003                           
  9004                           ;Config register IDLOC0 @ 0x200000
  9005                           ;	unspecified, using default values
  9006   200000                     	org	2097152
  9007   200000  0FFF               	dw	4095
  9008                           
  9009                           ;Config register IDLOC1 @ 0x200002
  9010                           ;	unspecified, using default values
  9011   200002                     	org	2097154
  9012   200002  0FFF               	dw	4095
  9013                           
  9014                           ;Config register IDLOC2 @ 0x200004
  9015                           ;	unspecified, using default values
  9016   200004                     	org	2097156
  9017   200004  0FFF               	dw	4095
  9018                           
  9019                           ;Config register IDLOC3 @ 0x200006
  9020                           ;	unspecified, using default values
  9021   200006                     	org	2097158
  9022   200006  0FFF               	dw	4095
  9023                           
  9024                           ;Config register IDLOC4 @ 0x200008
  9025                           ;	unspecified, using default values
  9026   200008                     	org	2097160
  9027   200008  0FFF               	dw	4095
  9028                           
  9029                           ;Config register IDLOC5 @ 0x20000A
  9030                           ;	unspecified, using default values
  9031   20000A                     	org	2097162
  9032   20000A  0FFF               	dw	4095
  9033                           
  9034                           ;Config register IDLOC6 @ 0x20000C
  9035                           ;	unspecified, using default values
  9036   20000C                     	org	2097164
  9037   20000C  0FFF               	dw	4095
  9038                           
  9039                           ;Config register IDLOC7 @ 0x20000E
  9040                           ;	unspecified, using default values
  9041   20000E                     	org	2097166
  9042   20000E  0FFF               	dw	4095
  9043                           
  9044                           	psect	config
  9045                           
  9046                           ;Config register CONFIG1L @ 0x300000
  9047                           ;	External Oscillator mode Selection bits
  9048                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9049                           ;	Power-up default value for COSC bits
  9050                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9051   300000                     	org	3145728
  9052   300000  AA                 	db	170
  9053                           
  9054                           ;Config register CONFIG1H @ 0x300001
  9055                           ;	unspecified, using default values
  9056                           ;	Clock Out Enable bit
  9057                           ;	CLKOUTEN = 0x1, unprogrammed default
  9058                           ;	Clock Switch Enable bit
  9059                           ;	CSWEN = 0x1, unprogrammed default
  9060                           ;	Fail-Safe Clock Monitor Enable bit
  9061                           ;	FCMEN = 0x1, unprogrammed default
  9062   300001                     	org	3145729
  9063   300001  FF                 	db	255
  9064                           
  9065                           ;Config register CONFIG2L @ 0x300002
  9066                           ;	unspecified, using default values
  9067                           ;	Master Clear Enable bit
  9068                           ;	MCLRE = 0x1, unprogrammed default
  9069                           ;	Power-up Timer Enable bit
  9070                           ;	PWRTE = 0x1, unprogrammed default
  9071                           ;	Low-power BOR enable bit
  9072                           ;	LPBOREN = 0x1, unprogrammed default
  9073                           ;	Brown-out Reset Enable bits
  9074                           ;	BOREN = 0x3, unprogrammed default
  9075   300002                     	org	3145730
  9076   300002  FF                 	db	255
  9077                           
  9078                           ;Config register CONFIG2H @ 0x300003
  9079                           ;	unspecified, using default values
  9080                           ;	Brown Out Reset Voltage selection bits
  9081                           ;	BORV = 0x3, unprogrammed default
  9082                           ;	ZCD Disable bit
  9083                           ;	ZCD = 0x1, unprogrammed default
  9084                           ;	PPSLOCK bit One-Way Set Enable bit
  9085                           ;	PPS1WAY = 0x1, unprogrammed default
  9086                           ;	Stack Full/Underflow Reset Enable bit
  9087                           ;	STVREN = 0x1, unprogrammed default
  9088                           ;	Debugger Enable bit
  9089                           ;	DEBUG = 0x1, unprogrammed default
  9090                           ;	Extended Instruction Set Enable bit
  9091                           ;	XINST = 0x1, unprogrammed default
  9092   300003                     	org	3145731
  9093   300003  FF                 	db	255
  9094                           
  9095                           ;Config register CONFIG3L @ 0x300004
  9096                           ;	WDT Period Select bits
  9097                           ;	WDTCPS = 0x1F, unprogrammed default
  9098                           ;	WDT operating mode
  9099                           ;	WDTE = OFF, WDT Disabled
  9100   300004                     	org	3145732
  9101   300004  9F                 	db	159
  9102                           
  9103                           ;Config register CONFIG3H @ 0x300005
  9104                           ;	unspecified, using default values
  9105                           ;	WDT Window Select bits
  9106                           ;	WDTCWS = 0x7, unprogrammed default
  9107                           ;	WDT input clock selector
  9108                           ;	WDTCCS = 0x7, unprogrammed default
  9109   300005                     	org	3145733
  9110   300005  FF                 	db	255
  9111                           
  9112                           ;Config register CONFIG4L @ 0x300006
  9113                           ;	unspecified, using default values
  9114                           ;	Write Protection Block 0
  9115                           ;	WRT0 = 0x1, unprogrammed default
  9116                           ;	Write Protection Block 1
  9117                           ;	WRT1 = 0x1, unprogrammed default
  9118                           ;	Write Protection Block 2
  9119                           ;	WRT2 = 0x1, unprogrammed default
  9120                           ;	Write Protection Block 3
  9121                           ;	WRT3 = 0x1, unprogrammed default
  9122                           ;	Write Protection Block 3
  9123                           ;	WRT4 = 0x1, unprogrammed default
  9124                           ;	Write Protection Block 3
  9125                           ;	WRT5 = 0x1, unprogrammed default
  9126                           ;	Write Protection Block 3
  9127                           ;	WRT6 = 0x1, unprogrammed default
  9128                           ;	Write Protection Block 3
  9129                           ;	WRT7 = 0x1, unprogrammed default
  9130   300006                     	org	3145734
  9131   300006  FF                 	db	255
  9132                           
  9133                           ;Config register CONFIG4H @ 0x300007
  9134                           ;	unspecified, using default values
  9135                           ;	Configuration Register Write Protection bit
  9136                           ;	WRTC = 0x1, unprogrammed default
  9137                           ;	Boot Block Write Protection bit
  9138                           ;	WRTB = 0x1, unprogrammed default
  9139                           ;	Data EEPROM Write Protection bit
  9140                           ;	WRTD = 0x1, unprogrammed default
  9141                           ;	Scanner Enable bit
  9142                           ;	SCANE = 0x1, unprogrammed default
  9143                           ;	Low Voltage Programming Enable bit
  9144                           ;	LVP = 0x1, unprogrammed default
  9145   300007                     	org	3145735
  9146   300007  FF                 	db	255
  9147                           
  9148                           ;Config register CONFIG5L @ 0x300008
  9149                           ;	unspecified, using default values
  9150                           ;	UserNVM Program Memory Code Protection bit
  9151                           ;	CP = 0x1, unprogrammed default
  9152                           ;	DataNVM Memory Code Protection bit
  9153                           ;	CPD = 0x1, unprogrammed default
  9154   300008                     	org	3145736
  9155   300008  FF                 	db	255
  9156                           
  9157                           ;Config register CONFIG5H @ 0x300009
  9158                           ;	unspecified, using default values
  9159   300009                     	org	3145737
  9160   300009  FF                 	db	255
  9161                           
  9162                           ;Config register CONFIG6L @ 0x30000A
  9163                           ;	unspecified, using default values
  9164                           ;	Table Read Protection Block 0
  9165                           ;	EBTR0 = 0x1, unprogrammed default
  9166                           ;	Table Read Protection Block 1
  9167                           ;	EBTR1 = 0x1, unprogrammed default
  9168                           ;	Table Read Protection Block 2
  9169                           ;	EBTR2 = 0x1, unprogrammed default
  9170                           ;	Table Read Protection Block 3
  9171                           ;	EBTR3 = 0x1, unprogrammed default
  9172                           ;	Table Read Protection Block 4
  9173                           ;	EBTR4 = 0x1, unprogrammed default
  9174                           ;	Table Read Protection Block 5
  9175                           ;	EBTR5 = 0x1, unprogrammed default
  9176                           ;	Table Read Protection Block 6
  9177                           ;	EBTR6 = 0x1, unprogrammed default
  9178                           ;	Table Read Protection Block 7
  9179                           ;	EBTR7 = 0x1, unprogrammed default
  9180   30000A                     	org	3145738
  9181   30000A  FF                 	db	255
  9182                           
  9183                           ;Config register CONFIG6H @ 0x30000B
  9184                           ;	unspecified, using default values
  9185                           ;	Boot Block Table Read Protection bit
  9186                           ;	EBTRB = 0x1, unprogrammed default
  9187   30000B                     	org	3145739
  9188   30000B  FF                 	db	255
  9189                           tosu	equ	0xFFF
  9190                           tosh	equ	0xFFE
  9191                           tosl	equ	0xFFD
  9192                           stkptr	equ	0xFFC
  9193                           pclatu	equ	0xFFB
  9194                           pclath	equ	0xFFA
  9195                           pcl	equ	0xFF9
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           indf0	equ	0xFEF
  9203                           postinc0	equ	0xFEE
  9204                           postdec0	equ	0xFED
  9205                           preinc0	equ	0xFEC
  9206                           plusw0	equ	0xFEB
  9207                           fsr0h	equ	0xFEA
  9208                           fsr0l	equ	0xFE9
  9209                           wreg	equ	0xFE8
  9210                           indf1	equ	0xFE7
  9211                           postinc1	equ	0xFE6
  9212                           postdec1	equ	0xFE5
  9213                           preinc1	equ	0xFE4
  9214                           plusw1	equ	0xFE3
  9215                           fsr1h	equ	0xFE2
  9216                           fsr1l	equ	0xFE1
  9217                           bsr	equ	0xFE0
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           preinc2	equ	0xFDC
  9222                           plusw2	equ	0xFDB
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8

Data Sizes:
    Strings     248
    Constant    0
    Data        0
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160    111     143
    BANK1           256    251     251
    BANK2           256    228     228
    BANK3           256      0      92
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[23]), STR_6(CODE[10]), 
		 -> STR_5(CODE[30]), STR_4(CODE[22]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[23]), STR_6(CODE[10]), 
		 -> STR_5(CODE[30]), STR_4(CODE[22]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[23]), STR_6(CODE[10]), 
		 -> STR_5(CODE[30]), STR_4(CODE[22]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2571$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK3[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[23]), STR_6(CODE[10]), 
		 -> STR_5(CODE[30]), STR_4(CODE[22]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2522$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2522$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    motor_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK0[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK2[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _card_response->_motor_response
    _normalise_readings->_abs
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _clear_read_calibration->_sprintf
    _card_response->_motor_response
    _motor_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               359   359      0  149013
                                            104 BANK0      7     7      0
                                            167 BANK1     84    84      0
                                              0 BANK2    228   228      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                            ___lwmod
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6   10133
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      167    90     77   99092
                                              0 BANK1    167    90     77
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    3977
                                             25 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      73     6     67   80847
                                             85 COMRAM     2     2      0
                                             33 BANK0     71     4     67
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                  _sendStringSerial4
                            _sprintf
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    8280
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5634
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5173
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3953
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     446
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2    1055
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5331
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        7     3      4   31680
                                             30 COMRAM     7     3      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    7459
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    6243
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   12081
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    3963
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2981
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     963
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     750
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     722
                                              3 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     378
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1946
                                             14 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     311
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   ___lwmod
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      5C      11       35.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100     E4      E4       9       89.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FB      FB       7       98.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6F      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     324      64        0.0%
DATA                 0      0     324       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 23:39:18 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 35E8  
                       _color_read_Blue 36D8                                      l22 3984  
                                    l31 3726                                      l25 3636  
                                    l34 36D6                                      l19 3820  
                                    l28 3686                                      l86 2A3E  
                                    l95 336E                                      l79 32E8  
                                    bsr 000FE0                     ___wmul@multiplicand 0006  
                      _color_read_Clear 3688                        _color_read_Green 3638  
                     ??_Interrupts_init 0004                                     l100 3148  
                                   l110 3260                                     l105 309C  
                                   l115 31D4                                     l142 387A  
                                   l151 39BC                                     l160 39A8  
                                   l145 38F8                                     l241 1722  
                                   l154 39C6                                     l242 15AA  
                                   l163 37AC                                     l331 2E1A  
                                   l243 15A8                                     l148 391E  
                                   l244 15B8                                     l157 39B2  
                                   l245 172A                                     l246 1728  
                                   l280 38A4                                     l344 25DC  
                                   l360 33EE                                     l248 1780  
                                   l354 2F26                                     l450 3964  
                                   l380 145C                                     l525 38CE  
                                   l381 14E0                                     l349 20E4  
                                   l534 3944                                     l462 399C  
                                   l394 1E00                                     l459 3988  
                                   l379 143C                                     l468 3850  
                                   l661 2BA2                                     l397 28D2  
                                   l648 2764                                     u910 2F3A  
                                   u911 2F36                                     u920 2F4C  
                                   u921 2F48                                     u930 2F74  
                                   u931 2F70                                     u940 2FAA  
                                   u941 2FA6                                     u950 376A  
                                   u951 3766                                     u960 37C8  
                                   u961 37C4                                     u970 25F0  
                                   u971 25EC                                     u980 2622  
                                   u981 261E                                     u991 264C  
   normalise_readings@normalised_values 0026                        ??_motor_response 0056  
                                   _abs 37AE                                     _pad 33F0  
                 __end_of_card_response 28D4                                     prod 000FF3  
                                   wreg 000FE8                ??_clear_read_calibration 0087  
                                  l1032 34DC                                    l1025 34D4  
                                  l1042 3540                                    l1035 3538  
                                  ?_abs 0016                                    l1212 37EC  
                                  l1300 39C8                                    l3000 1A5A  
                                  l1209 37E4                                    l1241 3412  
                                  l3010 1C3A                                    l3002 1AAE  
                                  l1250 2172                                    l1219 35E6  
                                  l3100 255C                                    l3004 1B02  
                                  l3020 1DAE                                    l1252 217A  
                                  l1245 3468                                    l1253 21C0  
                                  l3110 2590                                    l3014 1CB6  
                                  l3006 1BA6                                    l3030 3862  
                                  l1271 2D00                                    l3112 2594  
                                  l3040 2364                                    l3016 1D32  
                                  l3008 1C1E                                    l1264 2362  
                                  l4000 2D76                                    l3032 3864  
                                  l3114 25B0                                    l3106 2564  
                                  l3050 23C0                                    l3122 1E06  
                                  l4010 2DEC                                    l4002 2D7C  
                                  l3034 3866                                    l3026 3852  
                                  l3108 2578                                    l3060 23F8  
                                  l3052 23DC                                    l3140 3370  
                                  l3124 20D2                                    l3116 1E02  
                                  l4020 27EC                                    l4012 2766  
                                  l4004 2D98                                    l3036 3868  
                                  l3028 385C                                    l4100 15CE  
                                  l1277 3594                                    l3062 2410  
                                  l3046 236C                                    l3150 3388  
                                  l3142 3374                                    l3134 2E20  
                                  l3126 20D4                                    l4030 289C  
                                  l4022 2848                                    l4014 2766  
                                  l4006 2DC4                                    l3038 3968  
                                  l4110 1668                                    l4102 15E8  
                                  l3080 2494                                    l3064 2414  
                                  l3048 23BC                                    l3160 33EC  
                                  l3152 33B6                                    l3144 3384  
                                  l3136 2F14                                    l3128 2E1C  
                                  l2600 2652                                    l4032 28CE  
                                  l4024 2864                                    l4016 278A  
                                  l4008 2DE0                                    l4120 170E  
                                  l4112 1688                                    l4104 1616  
                                  l4040 14EA                                    l1289 2FF0  
                                  l1297 376A                                    l3090 24E4  
                                  l3082 24B0                                    l3074 2464  
                                  l3066 2430                                    l3058 23E4  
                                  l3154 33D6                                    l3138 2F16  
                                  l2610 26AC                                    l2602 2670  
                                  l4026 2874                                    l4018 27E0  
                                  l3330 3816                                    l3322 37EE  
                                  l4130 17A2                                    l4122 1712  
                                  l4114 16A8                                    l4106 162A  
                                  l4050 14FC                                    l4042 14EE  
                                  l3092 24F8                                    l3084 24DC  
                                  l3076 2478                                    l3068 245C  
                                  l3156 33DA                                    l2700 34C6  
                                  l2612 26DA                                    l2604 2678  
                                  l2620 2714                                    l4028 2890  
                                  l3324 37F2                                    l3340 32C2  
                                  l3332 3262                                    l4132 17B6  
                                  l4140 1814                                    l4124 1738  
                                  l4116 16C8                                    l4108 164E  
                                  l4060 1512                                    l4052 1500  
                                  l4044 14F2                                    l4036 14E2  
                                  l3094 2510                                    l3078 2490  
                                  l3158 33DC                                    l2702 34C8  
                                  l2622 2724                                    l2614 26FA  
                                  l2606 268C                                    l2630 2A44  
                                  l2710 211A                                    l3326 37FC  
                                  l3350 32DC                                    l3342 32C4  
                                  l3334 326A                                    l4150 1882  
                                  l4142 1820                                    l4134 17BC  
                                  l4126 1774                                    l4118 1702  
                                  l4070 1530                                    l4062 151A  
                                  l4054 1504                                    l4046 14F6  
                                  l4038 14E6                                    l3520 34F0  
                                  l3096 2514                                    l2704 34CE  
                                  l2624 2744                                    l2616 26FC  
                                  l2608 269A                                    l2640 2AA4  
                                  l2632 2A52                                    l2560 2F3A  
                                  l2720 2192                                    l2712 212A  
                                  l3328 380C                                    l3352 32E6  
                                  l3344 32CE                                    l3336 3294  
                                  l3360 3952                                    l4160 18FC  
                                  l4152 18A0                                    l4144 183E  
                                  l4136 17E2                                    l4128 178E  
                                  l4080 156C                                    l4072 1544  
                                  l4064 1522                                    l4056 150A  
                                  l4048 14FA                                    l3370 38A6  
                                  l3354 387C                                    l3530 352C  
                                  l3522 34F8                                    l2810 39B8  
                                  l3098 2530                                    l2618 270E  
                                  l2650 2B1A                                    l2642 2AC2  
                                  l2634 2A72                                    l2562 2F4C  
                                  l2730 21C8                                    l2722 2198  
                                  l2714 214A                                    l2706 20E6  
                                  l2802 2CD4                                    l3346 32D0  
                                  l3338 32B8                                    l3362 3954  
                                  l4170 196C                                    l4162 1910  
                                  l4154 18AC                                    l4146 185A  
                                  l4138 180A                                    l4090 1594  
                                  l4082 1574                                    l4074 154A  
                                  l4066 1528                                    l4058 150E  
                                  l3380 38C8                                    l3372 38AA  
                                  l3532 3532                                    l3524 3500  
                                  l2820 39BE                                    l2812 39A0  
                                  l2900 31D6                                    l4260 1DC2  
                                  l2660 2B82                                    l2652 2B3A  
                                  l2644 2ACA                                    l2636 2A76  
                                  l2628 2A40                                    l2580 37AE  
                                  l2564 2F56                                    l2572 3728  
                                  l2740 2266                                    l2732 21D2  
                                  l2724 21A8                                    l2716 2166  
                                  l2708 2106                                    l3348 32DA  
                                  l3364 395E                                    l3356 3946  
                                  l4180 1A32                                    l4172 197E  
                                  l4164 192A                                    l4156 18DE  
                                  l4148 1866                                    l4092 159E  
                                  l4084 157C                                    l4076 1556  
                                  l4068 152C                                    l3382 38CA  
                                  l3374 38B2                                    l3526 350E  
                                  l3518 34DE                                    l2830 3782  
                                  l2822 39C2                                    l2814 39A4  
                                  l2910 3216                                    l2902 31F6  
                                  l2590 2610                                    l2654 2B4C  
                                  l2646 2ADE                                    l2638 2A84  
                                  l2582 37C8                                    l2566 2F74  
                                  l2558 2F28                                    l2574 3734  
                                  l2670 341E                                    l2750 232C  
                                  l2734 21D8                                    l2742 22CA  
                                  l2726 21B4                                    l2718 2182  
                                  l3366 3960                                    l3358 3950  
                                  l4182 1A3E                                    l4174 19DE  
                                  l4166 193E                                    l4158 18EA  
                                  l4094 15A0                                    l4086 1584  
                                  l4078 1562                                    l3384 38CC  
                                  l3376 38BC                                    l3528 3524  
                                  l2832 37A8                                    l2824 376E  
                                  l2808 39B4                                    l2816 39AA  
                                  l2680 393C                                    l2760 28F0  
                                  l2912 3222                                    l2840 32EE  
                                  l2920 3988                                    l2592 2614  
                                  l2584 25DE                                    l2648 2AEC  
                                  l2656 2B52                                    l2568 2FAA  
                                  l2576 3746                                    l2672 3432  
                                  l2664 33F0                                    l2752 2332  
                                  l2744 22E4                                    l2736 225A  
                                  l2728 21BC                                    l3800 354E  
                                  l3368 3962                                    l4184 1A44  
                                  l4176 19F0                                    l4168 1958  
                                  l4088 158C                                    l3378 38BE  
                                  l2834 37AA                                    l2826 3772  
                                  l2818 39AE                                    l2690 348C  
                                  l2770 29BA                                    l2762 2944  
                                  l2914 322E                                    l2850 333C  
                                  l2842 32FA                                    l2922 3998  
                                  l2594 2622                                    l2586 25E2  
                                  l2658 2B62                                    l2578 374A  
                                  l2674 3436                                    l2666 33FE  
                                  l2754 2342                                    l2746 2302  
                                  l2738 2260                                    l3802 356A  
                                  l3810 35A8                                    l4258 1492  
                                  l4178 1A02                                    l4098 15BA  
                                  l2828 377A                                    l2940 3638  
                                  l2692 3494                                    l2684 346A  
                                  l2772 29FE                                    l2764 2958  
                                  l2916 323C                                    l2908 31FE  
                                  l2852 334A                                    l2844 3308  
                                  l2596 2642                                    l2588 25F0  
                                  l2676 3454                                    l2668 340A  
                                  l2748 231C                                    l2780 2BCC  
                                  l3804 358A                                    l3812 35B0  
                                  l3820 0EFA                                    l2774 38F8  
                                  l2942 367E                                    l2934 35E8  
                                  l2694 34A2                                    l2686 3472  
                                  l2678 3920                                    l2766 295C  
                                  l2758 28D4                                    l2918 3244  
                                  l2854 3356                                    l2846 3314  
                                  l2838 32EA                                    l2870 3102  
                                  l2598 2646                                    l2790 2C1C  
                                  l2782 2BDA                                    l3814 35B8  
                                  l3910 11FE                                    l3830 0F50  
                                  l3822 0EFE                                    ?_pad 0014  
                                  l2776 3908                                    l2952 3688  
                                  l2936 362E                                    l2696 34A8  
                                  l2688 3484                                    l2768 299E  
                                  l2848 3330                                    l2872 310E  
                                  l2864 30C6                                    l2856 309E  
                                  l2880 3012                                    l2960 316A  
                                  l2792 2C3C                                    l2784 2BE8  
                                  l3816 35D4                                    l3808 3596  
                                  l3912 1214                                    l3840 0FBA  
                                  l3832 0F64                                    l3824 0F12  
                                  l2946 36D8                                    l2954 36CE  
                                  l2698 34BE                                    l2874 3116  
                                  l2866 30DE                                    l2858 30BE  
                                  l2890 304A                                    l2970 3196  
                                  l2794 2C92                                    l2786 2BEC  
                                  l2778 2BA4                                    l3850 1010  
                                  l3842 0FCE                                    l3834 0F7C  
                                  l3826 0F28                                    l2948 371E  
                                  l2876 3132                                    l2868 30F6  
                                  l2892 3056                                    l2972 31A2  
                                  l2788 2BFC                                    l3940 135E  
                                  l3932 12EA                                    l3924 122C  
                                  l3908 11EA                                    l3852 1024  
                                  l3836 0F90                                    l3828 0F3C  
                                  l2894 3062                                    l2886 301A  
                                  l2878 2FF2                                    l2974 31B0  
                                  l2966 3172                                    l2958 314A  
                                  l2990 3822                                    l2798 2CC2  
                                  l3950 13C6                                    l3942 136C  
                                  l3934 130E                                    l3926 12E0  
                                  l3870 108E                                    l3854 1038  
                                  l3846 0FE6                                    l3838 0FA6  
                                  l2896 306A                                    l2888 3032  
                                  l2976 31B8                                    l2968 318A  
                                  l2992 3826                                    l3960 143E  
                                  l3952 13F2                                    l3944 1384  
                                  l3936 1322                                    l3880 1178  
                                  l3872 10BA                                    l3856 104C  
                                  l3848 0FFA                                    l2898 3086  
                                  l2994 3834                                    l3962 1456  
                                  l3954 13FE                                    l3946 138A  
                                  l3938 1352                                    l3882 11A4  
                                  l3874 10CE                                    l3866 1064  
                                  l3970 147C                                    l2996 3838  
                                  l3964 145E                                    l3948 13B2  
                                  l3956 1422                                    l3892 11BC  
                                  l3876 114E                                    l3868 1078  
                                  l2998 1A56                                    l3798 3542  
                                  l3966 1476                                    l3958 142A  
                                  l3894 11D0                                    l3878 1162  
                                  l3990 2D42                                    l3984 2D0C  
                                  l3986 2D20                                    l3978 2D02  
                                  l3996 2D4A                                    l3988 2D26  
                                  l3998 2D5E                                    STR_1 0E01  
                                  STR_2 0EA9                                    STR_3 0ED6  
                                  STR_4 0EC0                                    STR_5 0E57  
                                  STR_6 0EEF                                    STR_7 0EA9  
                                  STR_8 0E90                                    STR_9 0E75  
                                  u1000 2670                                    u1001 266C  
                                  u1010 269A                                    u1011 2696  
                                  u1020 26DA                                    u1100 33FE  
                                  u1021 26D6                                    u1101 33FA  
                                  u1030 2724                                    u1110 3454  
                                  u1031 2720                                    u1111 3450  
                                  u1120 3484                                    u1040 2A52  
                                  u1200 21A8                                    u1121 3480  
                                  u1041 2A4E                                    u1201 21A4  
                                  u1130 34A2                                    u1050 2A84  
                                  u1210 22E4                                    u1131 349E  
                                  u1051 2A80                                    u1211 22E0  
                                  u1140 34BE                                    u1060 2AC2  
                                  u1220 2302                                    u1300 2C1C  
                          ?_LEDSon_init 0001                                    u1141 34BA  
                                  u1061 2ABE                                    u1221 22FE  
                                  u1301 2C18                                    u1070 2AEC  
                                  u1230 231C                                    u1150 2116  
                                  u1310 2C3C                                    u1071 2AE8  
                                  u1231 2318                                    u1151 2110  
                                  u1311 2C38                                    u2007 19E6  
                                  u1320 3796                                    u1080 2B1A  
                                  u1240 232C                                    u1160 2118  
                                  u1321 378E                                    u1081 2B16  
                                  u1241 2328                                    u2017 3802  
                                  u1250 28F0                                    u1410 31D4  
                                  u1090 2B62                                    u1170 212A  
                                  u1251 28EC                                    u1411 31D0  
                                  u1091 2B5E                                    u1171 2126  
                                  u2107 1196                                    u2027 2D6A  
                                  u1500 33B6                                    u1260 29BA  
                                  u1340 332C                                    u1420 3850  
                                  u1180 2166                                    u1501 33B2  
                                  u1261 29B6                                    u1341 3328  
                                  u1421 384C                                    u1181 2162  
                                  u2117 11DA                                    u2037 0F1C  
                                  u1270 3908                                    u1430 23DC  
                                  u1510 33EC                                    u1350 336E  
                                  u1190 2192                                    u1271 3904  
                                  u1431 23D8                                    u1511 33E8  
                                  u1351 336A                                    u2207 30E8  
                                  u1191 218E                                    u2127 1208  
                                  u2047 0F9A                                    u1600 350E  
                                  u1280 391E                                    u1440 2430  
                                  u1360 3132                            _BAUD4CONbits 000EE9  
                                  u1601 350A                                    u1281 391A  
                                  u1441 242C                                    u2217 313C  
                                  u1361 312E                                    u2137 1376  
                                  u2057 1004                                    u1610 3524  
                                  u1338 3798                                    u1450 24B0  
                                  u1370 3086                                    u1290 2BCC  
                                  u1611 3520                                    u1451 24AC  
                                  u2227 3300                                    u1371 3082  
                                  u1291 2BC8                                    u2147 1448  
                                  u2067 1082                                    u1460 2530  
                                  u1380 3260                                    u1461 252C  
                                  u1381 325C                                    u2237 3342  
                                  u2157 1468                                    u2077 10AC  
                                  u1470 25B0                                    u1390 3998  
                                  u1471 25AC                                    u2247 3234  
                                  u2167 31A8                                    u1391 3994  
                                  u2087 10D8                                    u1800 1438  
                                  u1480 20E4                                    u2257 2402  
                                  u2177 1C28                                    u1801 1434  
                                  u2097 116C                                    u1481 20E0  
                                  u1490 2F26                                    u1810 2D42  
                                  _T2PR 000FBC                                    u2267 2482  
                                  u1491 2F22                                    u2187 303C  
                                  u1811 2D3E                                    u1820 2D98  
                                  u1900 17F6                                    u2277 2502  
                                  u2197 3090                                    u1821 2D94  
                                  u1901 17EC                                    u1590 34F0  
                                  u1591 34EC                                    u2287 2582  
                                  u1831 28C2                                    u1920 183E  
                                  u1840 15B8                                    u1921 183A  
                                  u1841 15B4                                    u1770 358A  
                                  u1850 1722                                    u1771 3586  
                                  u1931 19CE                                    u1851 171E  
                                  u1780 130E                                    u1860 1738  
                                  u1781 130A                                    u1861 1734  
                                  u1790 13B2                                    u1918 17FA  
                                  u1870 178E                                    u1791 13AE  
                                  u1871 178A                                    u1880 17B6  
                                  u1881 17B2                                    u1890 17E2  
                                  u1891 17DE                                    u1947 15DA  
                                  u1957 1608                                    u1967 18F2  
                                  u1977 191C                                    u1987 194A  
                                  u1997 1974              normalise_readings@red_read 001E  
                                  abs@a 0016                                    _dbuf 033C  
                                  _main 14E2                                    _dtoa 20E6  
                                  _prec 00E5                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 32EA                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
      clear_read_calibration@clear_read 0083                         card_response@mL 010D  
                       card_response@mR 010F                  __end_of_color_read_Red 3638  
                  _response_in_progress 00E9             normalise_readings@blue_read 0022  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 2FF2  
                       __end_of___aodiv 2766                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 2BA4  
                                 STR_10 0E33                                   STR_11 0EE5  
                                 ?_stop 0017                         __end_of___lwdiv 34DE  
                       __end_of___lwmod 3542                                   i1l531 004C  
                          vfpfcnvrt@fmt 0044                                   _TMR0H 000FD4  
                                 _TMR0L 000FD3                            main@red_read 01F3  
               __end_of_sendCharSerial4 399E              __end_of_I2C_2_Master_Start 39BE  
            __end_of_I2C_2_Master_Write 39AA                                   _flags 00ED  
                                 _fputc 2F28                                   _fputs 3728  
                                 pad@fp 0014          determine_card@master_closeness 0004  
               ??_make_master_closeness 000A                                   _width 00E3  
                                 _putch 39C8                                   main@i 00CE  
                                 dtoa@d 0021                                   dtoa@i 003F  
                                 dtoa@n 0037                                   dtoa@p 0033  
                                 dtoa@s 0041                                   dtoa@w 0035  
                   normalise_readings@i 0032            card_response@ReturnHomeArray 0111  
                                 tablat 000FF5                                   plusw0 000FEB  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 35E8          card_response@normalised_values 014D  
                      card_response@buf 0100                 __end_of_color_read_Blue 3728  
                 _I2C_2_Master_RepStart 39BE                         ?_color_read_Red 0008  
                       __initialization 38D0                            __end_of_main 1A54  
                          __end_of_dtoa 2364                            __end_of_stop 3370  
                                ??_main 00C8                                  ??_dtoa 0029  
                                ??_stop 001B                           __activetblptr 000003  
                         main@blue_read 01F7                    main@clear_read_check 00CC  
             clear_read_calibration@buf 0081                            ?_setMotorPWM 0011  
                                ?_fputc 0004                                  ?_fputs 000D  
                                _CCPR1H 000FAA                                  _CCPR2H 000FA6  
                                _CCPR3H 000F25                                  _CCPR4H 000F21  
                        main@TimerCount 01EF            collect_avg_readings@red_read 0011  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i1l3742 0026                                  i1l3744 0036  
                                i1l3746 0048                                  _RG6PPS 000E88  
              __end_of_color_click_init 3822                                  _TMR0IE 00714D  
                                _TMR0IF 00719D                  make_master_closeness@i 0028  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                                _LowISR 0018                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0054                               ??___aodiv 0014  
                             ??___aomod 0014                                  ___wmul 3920  
                    _normalise_readings 1E02                               ??___lwdiv 000E  
                             ??___lwmod 0008                                  clear_0 38D6  
                                clear_1 38E2                                  isa$std 000001  
                                pad@buf 0016                                  dtoa@fp 001F  
                   ?_normalise_readings 001A                                  fputc@c 0004  
                                fputs@c 0011                                  fputs@i 0012  
                                fputs@s 000D                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                         _home_response 1A54                                  putch@c 0001  
                      __end_of_vfprintf 3596                                  stop@mL 0017  
                                stop@mR 0019                       ??_initDCmotorsPWM 0004  
                             ??_sprintf 0056                       card_response@card 010C  
                            __accesstop 0060                 __end_of__initialization 38EE  
              __end_of_color_read_Clear 36D8                         fullSpeedAhead@i 001C  
              __end_of_color_read_Green 3688                  ?_I2C_2_Master_RepStart 0001  
                  ??_normalise_readings 0028                           ___rparam_used 000001  
                      ?_color_read_Blue 0008                         _Interrupts_init 38A6  
          __end_of_collect_avg_readings 25DE                          __pcstackCOMRAM 0001  
                _clear_read_calibration 2D02                        _reverseFullSpeed 314A  
            collect_avg_readings@i_1656 001B              collect_avg_readings@i_1657 001D  
            collect_avg_readings@i_1658 001F              collect_avg_readings@i_1659 0021  
                         __end_of_fputc 2FF2                           __end_of_fputs 376C  
                         __end_of_putch 39CA                          ?_home_response 001F  
                        main@clear_read 01F9                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK0 00CF                              __pbssBANK3 0300  
                               ?_LowISR 0001                       _color_writetoaddr 3966  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0084  
                      motor_response@mR 0086                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 0083  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 01F5                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                 __end_of_Interrupts_init 38D0  
        collect_avg_readings@clear_read 000F                  color_writetoaddr@value 0006  
                      ??_color_read_Red 000A           __end_of_make_master_closeness 2F28  
        determine_card@predicted_colour 000C               __end_of_color_writetoaddr 3986  
                    _I2C_2_Master_Start 39B4                              _initUSART4 3946  
                    _I2C_2_Master_Write 399E                                 __Hparam 0000  
                               __Lparam 0000                       color_read_Red@tmp 000D  
make_master_closeness@normalised_values 0006                 sendStringSerial4@string 0005  
                     reverseFullSpeed@i 001C                                 ___aodiv 25DE  
                               ___aomod 2A40                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 346A                     ?_I2C_2_Master_Write 0001  
                               ___lwmod 34DE                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 38D0  
                               __ramtop 0E00                                 __ptext0 14E2  
                               __ptext1 3946                                 __ptext2 3262  
                               __ptext3 37EE                                 __ptext4 3966  
                               __ptext5 3852                                 __ptext6 2D02  
                               __ptext7 2766                                 __ptext8 1E02  
                               __ptext9 0EFA                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 2364  
                               main@buf 0200                                 _sprintf 3596  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 38EE          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                         _card_detected 00E7                       __end_of_vfpfcnvrt 2D02  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004A                              ??_vfprintf 0054  
                       _initDCmotorsPWM 3262                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0016       normalise_readings@expected_values 0024  
                         _card_response 2766                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0015                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 000F  
              __end_of_reverseFullSpeed 31D6                        fullSpeedAhead@mL 0017  
                      fullSpeedAhead@mR 0019                     main@expected_values 01A7  
              color_writetoaddr@address 0007                 ??_I2C_2_Master_RepStart 0005  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0008                            _EUSART4RXbuf 00CF  
                          _EUSART4TXbuf 0300                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0008                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0004  
                            main@motorL 02D2                              main@motorR 02DB  
                    ??_color_read_Clear 000A                      ??_color_read_Green 000A  
                            _turnLeft45 309E                          __end_of_LowISR 005C  
                        _fullSpeedAhead 31D6                             vfpfcnvrt@ap 0046  
                           vfpfcnvrt@cp 0052                             vfpfcnvrt@fp 0042  
                        __end_of___wmul 3946                         determine_card@i 000D  
                        ?_card_response 0100                     color_read_Clear@tmp 000D  
                   start_initialization 38D0                             __end_of_abs 37EE  
                           __end_of_pad 346A                           _TxBufWriteCnt 0059  
                         ??_LEDSon_init 0004          __end_of_clear_read_calibration 2E1C  
                   color_read_Green@tmp 000D                                ??_LowISR 0001  
               __end_of_initDCmotorsPWM 32EA                             vfprintf@fmt 0062  
                __end_of_fullSpeedAhead 3262                               _TimerFlag 00EB  
                              ??___wmul 0008                          _determine_card 3370  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                        ___aodiv@dividend 0004  
               clear_read_calibration@i 008B                          _motor_response 0EFA  
                   __end_of_LEDSon_init 38A6                        ___lwdiv@dividend 000A  
                             _dtoa$2599 0031                             ?_turnLeft45 0017  
                       motor_response@i 00C6                         motor_response@j 00C4  
                       ?_fullSpeedAhead 0017                                ?___aodiv 0004  
                              ?___aomod 0004                       motor_response@buf 0081  
                      ___aodiv@quotient 0016                  __end_of_determine_card 33F0  
                              ?___lwdiv 000A                                ?___lwmod 0004  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0058                    I2C_2_Master_Read@tmp 0007  
                           __smallconst 0E00                       _I2C_2_Master_Idle 38F8  
                     _I2C_2_Master_Init 3852                       _I2C_2_Master_Read 376C  
                     _I2C_2_Master_Stop 39AA                            _RxBufReadCnt 00EE  
          normalise_readings@clear_read 001C            normalise_readings@difference 0030  
                   main@ReturnHomeArray 0296                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0013                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000E                  __end_of_motor_response 14E2  
                           turnLeft45@i 001D                                ?_sprintf 0066  
          clear_read_calibration@i_1645 008D                       _sendStringSerial4 3822  
                   ??_I2C_2_Master_Idle 0004                     ??_I2C_2_Master_Init 0004  
                   ??_I2C_2_Master_Read 0005                          ___wmul@product 0008  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0005  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                      ?_sendStringSerial4 0005  
                              _PIE4bits 000E2D                   _make_master_closeness 2E1C  
                              i1u176_20 0036                                i1u176_21 0032  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0004                make_master_closeness@buf 0004  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0007  
                              _SSP2STAT 000ED8                         ?_determine_card 0004  
                             _vfpfcnvrt 2BA4               __end_of_I2C_2_Master_Idle 3920  
             __end_of_I2C_2_Master_Init 387C               __end_of_I2C_2_Master_Read 37AE  
                     ___wmul@multiplier 0004               __end_of_I2C_2_Master_Stop 39B4  
                          setMotorPWM@m 0011             I2C_2_Master_Write@data_byte 0005  
          normalise_readings@green_read 0020                   __end_of_home_response 1E02  
                     ??_color_read_Blue 000A                            _TxBufReadCnt 0058  
                       ?_motor_response 0081                       ?_reverseFullSpeed 0017  
             __end_of_sendStringSerial4 3852                             _LEDSon_init 387C  
                    ??_reverseFullSpeed 001B           __end_of_I2C_2_Master_RepStart 39C8  
                    color_read_Blue@tmp 000D                     __end_of_setMotorPWM 2A40  
                          ??_initUSART4 0004                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0008  
                    reverseFullSpeed@mL 0017                      reverseFullSpeed@mR 0019  
                     home_response@card 0025                              ?_vfpfcnvrt 0042  
                       ___aodiv@divisor 000C                         ___aodiv@counter 0014  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0068                              _T0CON0bits 000FD5  
                            _T0CON1bits 000FD6                         ___lwdiv@divisor 000C  
                    __end_of_initUSART4 3966                         ___lwdiv@counter 0010  
                              __ptext10 3596                                __ptext11 3542  
                              __ptext20 25DE                                __ptext12 2BA4  
                              __ptext21 3822                                __ptext13 20E6  
                              __ptext30 3920                                __ptext22 3986  
                              __ptext14 33F0                                __ptext31 346A  
                              __ptext23 314A                                __ptext15 3728  
                              __ptext40 39AA                                __ptext32 2E1C  
                              __ptext24 1A54                                __ptext16 2F28  
                              __ptext41 39B4                                __ptext33 3370  
                              __ptext25 2FF2                                __ptext17 39C8  
                              __ptext42 39BE                                __ptext34 2364  
                              __ptext26 309E                                __ptext18 37AE  
                              __ptext43 376C                                __ptext35 35E8  
                              __ptext27 32EA                                __ptext19 2A40  
                              __ptext44 38F8                                __ptext36 3638  
                              __ptext28 31D6                                __ptext45 34DE  
                              __ptext37 3688                                __ptext29 28D4  
                              __ptext46 387C                                __ptext38 36D8  
                              __ptext47 38A6                                __ptext39 399E  
         motor_response@ReturnHomeArray 0088                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0004  
                              isa$xinst 000000                 card_response@clear_read 0102  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 3542                           ??_turnRight45 001B  
                              main@card 00CB                        ___aomod@dividend 0004  
                 collect_avg_readings@i 0019                              _INTCONbits 000FF2  
                           _setMotorPWM 28D4           collect_avg_readings@blue_read 0015  
                         turnRight45@mL 0017                           turnRight45@mR 0019  
                              intlevel1 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 20E6            card_response@expected_values 010A  
                      ___lwmod@dividend 0004                        ??_fullSpeedAhead 001B  
               card_response@green_read 0106                            ??_turnLeft45 001B  
        determine_card@current_smallest 000A                         ___aomod@divisor 000C  
                           ??_vfpfcnvrt 0048                         ___aomod@counter 0014  
                card_response@blue_read 0108                        _color_click_init 37EE  
                       home_response@mL 001F                         home_response@mR 0021  
         card_response@master_closeness 0195                                sprintf@f 0076  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                         ___lwmod@divisor 0006  
                   __end_of_turnRight45 309E                         ___lwmod@counter 0008  
                    __end_of_turnLeft45 314A                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0015                         _sendCharSerial4 3986  
                 card_response@red_read 0104                            ___aomod@sign 0015  
                      ??_determine_card 0006                           main@CardCount 01F1  
                          main@PWMcycle 00CA  
