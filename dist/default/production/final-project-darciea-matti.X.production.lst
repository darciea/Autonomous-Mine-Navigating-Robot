

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 17:49:27 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70   000000                     
    71                           ; Version 2.35
    72                           ; Generated 05/05/2021 GMT
    73                           ; 
    74                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution. Publication is not required when
    88                           ;        this file is used in an embedded application.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F67K40 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106   000000                     
   107                           	psect	idataBANK2
   108   012CE6                     __pidataBANK2:
   109                           	callstack 0
   110                           
   111                           ;initializer for main@F14702
   112   012CE6  08                 	db	8
   113   012CE7  00                 	db	0
   114   012CE8  00                 	db	0
   115   012CE9  00                 	db	0
   116   012CEA  00                 	db	0
   117   012CEB  00                 	db	0
   118   012CEC  00                 	db	0
   119   012CED  00                 	db	0
   120   012CEE  00                 	db	0
   121   012CEF  00                 	db	0
   122   012CF0  00                 	db	0
   123   012CF1  00                 	db	0
   124   012CF2  00                 	db	0
   125   012CF3  00                 	db	0
   126   012CF4  00                 	db	0
   127   012CF5  00                 	db	0
   128   012CF6  00                 	db	0
   129   012CF7  00                 	db	0
   130   012CF8  00                 	db	0
   131   012CF9  00                 	db	0
   132   012CFA  00                 	db	0
   133   012CFB  00                 	db	0
   134   012CFC  00                 	db	0
   135   012CFD  00                 	db	0
   136   012CFE  00                 	db	0
   137   012CFF  00                 	db	0
   138   012D00  00                 	db	0
   139   012D01  00                 	db	0
   140   012D02  00                 	db	0
   141   012D03  00                 	db	0
   142   000000                     _TX4REG	set	3812
   143   000000                     _RC4STAbits	set	3815
   144   000000                     _SP4BRGH	set	3814
   145   000000                     _LATGbits	set	3967
   146   000000                     _TRISFbits	set	3974
   147   000000                     _TRISDbits	set	3972
   148   000000                     _TRISGbits	set	3975
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _RC7PPS	set	3689
   154   000000                     _RE2PPS	set	3700
   155   000000                     _TRISCbits	set	3971
   156   000000                     _TRISEbits	set	3973
   157   000000                     _TRISHbits	set	3976
   158   000000                     _PORTFbits	set	3982
   159   000000                     _T2PR	set	4028
   160   000000                     _T2CONbits	set	4029
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RE4PPS	set	3702
   164   000000                     _RG6PPS	set	3720
   165   000000                     _RD5PPS	set	3695
   166   000000                     _ANSELDbits	set	3751
   167   000000                     _SSP2ADD	set	3798
   168   000000                     _SSP2CON1bits	set	3801
   169   000000                     _CCPR4H	set	3873
   170   000000                     _CCPR3H	set	3877
   171   000000                     _TMR0L	set	4051
   172   000000                     _TMR0H	set	4052
   173   000000                     _T0CON0bits	set	4053
   174   000000                     _T0CON1bits	set	4054
   175   000000                     _T2CLKCONbits	set	4031
   176   000000                     _T2HLTbits	set	4030
   177   000000                     _CCP1CONbits	set	4011
   178   000000                     _CCPTMRS0bits	set	4013
   179   000000                     _CCP2CONbits	set	4007
   180   000000                     _LATAbits	set	3961
   181   000000                     _LATDbits	set	3964
   182   000000                     _CCP3CONbits	set	3878
   183   000000                     _CCP4CONbits	set	3874
   184   000000                     _RC4REG	set	3811
   185   000000                     _SP4BRGL	set	3813
   186   000000                     _TX4STAbits	set	3816
   187   000000                     _BAUD4CONbits	set	3817
   188   000000                     _SSP2CON2	set	3802
   189   000000                     _SSP2STAT	set	3800
   190   000000                     _ANSELFbits	set	3764
   191   000000                     _SSP2BUF	set	3797
   192   000000                     _IPR0bits	set	3615
   193   000000                     _PIE4bits	set	3629
   194   000000                     _PIR4bits	set	3639
   195   000000                     _RC0PPS	set	3682
   196   000000                     _TMR0IE	set	29005
   197   000000                     _RD6PPS	set	3696
   198   000000                     _LATFbits	set	3966
   199   000000                     _LATHbits	set	3968
   200   000000                     _TRISAbits	set	3969
   201   000000                     _TMR0IF	set	29085
   202   000000                     _INTCONbits	set	4082
   203                           
   204                           	psect	mediumconst
   205   00FEF2                     __pmediumconst:
   206                           	callstack 0
   207   00FEF2  00                 	db	0
   208   00FEF3                     STR_1:
   209                           
   210                           ; BSR set to: 14
   211   00FEF3  0A                 	db	10
   212   00FEF4  20                 	db	32
   213   00FEF5  45                 	db	69	;'E'
   214   00FEF6  58                 	db	88	;'X'
   215   00FEF7  50                 	db	80	;'P'
   216   00FEF8  45                 	db	69	;'E'
   217   00FEF9  43                 	db	67	;'C'
   218   00FEFA  54                 	db	84	;'T'
   219   00FEFB  45                 	db	69	;'E'
   220   00FEFC  44                 	db	68	;'D'
   221   00FEFD  3A                 	db	58	;':'
   222   00FEFE  20                 	db	32
   223   00FEFF  43                 	db	67	;'C'
   224   00FF00  6C                 	db	108	;'l'
   225   00FF01  65                 	db	101	;'e'
   226   00FF02  61                 	db	97	;'a'
   227   00FF03  72                 	db	114	;'r'
   228   00FF04  20                 	db	32
   229   00FF05  25                 	db	37
   230   00FF06  64                 	db	100	;'d'
   231   00FF07  2C                 	db	44
   232   00FF08  52                 	db	82	;'R'
   233   00FF09  20                 	db	32
   234   00FF0A  25                 	db	37
   235   00FF0B  64                 	db	100	;'d'
   236   00FF0C  2C                 	db	44
   237   00FF0D  20                 	db	32
   238   00FF0E  47                 	db	71	;'G'
   239   00FF0F  20                 	db	32
   240   00FF10  25                 	db	37
   241   00FF11  64                 	db	100	;'d'
   242   00FF12  2C                 	db	44
   243   00FF13  20                 	db	32
   244   00FF14  42                 	db	66	;'B'
   245   00FF15  20                 	db	32
   246   00FF16  25                 	db	37
   247   00FF17  64                 	db	100	;'d'
   248   00FF18  20                 	db	32
   249   00FF19  20                 	db	32
   250   00FF1A  43                 	db	67	;'C'
   251   00FF1B  41                 	db	65	;'A'
   252   00FF1C  52                 	db	82	;'R'
   253   00FF1D  44                 	db	68	;'D'
   254   00FF1E  3A                 	db	58	;':'
   255   00FF1F  20                 	db	32
   256   00FF20  25                 	db	37
   257   00FF21  64                 	db	100	;'d'
   258   00FF22  20                 	db	32
   259   00FF23  0A                 	db	10
   260   00FF24  00                 	db	0
   261   00FF25                     STR_11:
   262                           
   263                           ; BSR set to: 14
   264   00FF25  0A                 	db	10
   265   00FF26  20                 	db	32
   266   00FF27  41                 	db	65	;'A'
   267   00FF28  56                 	db	86	;'V'
   268   00FF29  47                 	db	71	;'G'
   269   00FF2A  3A                 	db	58	;':'
   270   00FF2B  20                 	db	32
   271   00FF2C  43                 	db	67	;'C'
   272   00FF2D  6C                 	db	108	;'l'
   273   00FF2E  65                 	db	101	;'e'
   274   00FF2F  61                 	db	97	;'a'
   275   00FF30  72                 	db	114	;'r'
   276   00FF31  20                 	db	32
   277   00FF32  25                 	db	37
   278   00FF33  64                 	db	100	;'d'
   279   00FF34  2C                 	db	44
   280   00FF35  20                 	db	32
   281   00FF36  52                 	db	82	;'R'
   282   00FF37  20                 	db	32
   283   00FF38  25                 	db	37
   284   00FF39  64                 	db	100	;'d'
   285   00FF3A  2C                 	db	44
   286   00FF3B  20                 	db	32
   287   00FF3C  47                 	db	71	;'G'
   288   00FF3D  20                 	db	32
   289   00FF3E  25                 	db	37
   290   00FF3F  64                 	db	100	;'d'
   291   00FF40  2C                 	db	44
   292   00FF41  20                 	db	32
   293   00FF42  42                 	db	66	;'B'
   294   00FF43  20                 	db	32
   295   00FF44  25                 	db	37
   296   00FF45  64                 	db	100	;'d'
   297   00FF46  20                 	db	32
   298   00FF47  0A                 	db	10
   299   00FF48  00                 	db	0
   300   00FF49                     STR_4:
   301                           
   302                           ; BSR set to: 14
   303   00FF49  54                 	db	84	;'T'
   304   00FF4A  69                 	db	105	;'i'
   305   00FF4B  6D                 	db	109	;'m'
   306   00FF4C  65                 	db	101	;'e'
   307   00FF4D  72                 	db	114	;'r'
   308   00FF4E  63                 	db	99	;'c'
   309   00FF4F  6F                 	db	111	;'o'
   310   00FF50  75                 	db	117	;'u'
   311   00FF51  6E                 	db	110	;'n'
   312   00FF52  74                 	db	116	;'t'
   313   00FF53  20                 	db	32
   314   00FF54  61                 	db	97	;'a'
   315   00FF55  72                 	db	114	;'r'
   316   00FF56  72                 	db	114	;'r'
   317   00FF57  61                 	db	97	;'a'
   318   00FF58  79                 	db	121	;'y'
   319   00FF59  20                 	db	32
   320   00FF5A  72                 	db	114	;'r'
   321   00FF5B  65                 	db	101	;'e'
   322   00FF5C  61                 	db	97	;'a'
   323   00FF5D  64                 	db	100	;'d'
   324   00FF5E  69                 	db	105	;'i'
   325   00FF5F  6E                 	db	110	;'n'
   326   00FF60  67                 	db	103	;'g'
   327   00FF61  20                 	db	32
   328   00FF62  25                 	db	37
   329   00FF63  64                 	db	100	;'d'
   330   00FF64  20                 	db	32
   331   00FF65  0A                 	db	10
   332   00FF66  00                 	db	0
   333   00FF67                     STR_9:
   334                           
   335                           ; BSR set to: 14
   336   00FF67  43                 	db	67	;'C'
   337   00FF68  61                 	db	97	;'a'
   338   00FF69  72                 	db	114	;'r'
   339   00FF6A  64                 	db	100	;'d'
   340   00FF6B  20                 	db	32
   341   00FF6C  67                 	db	103	;'g'
   342   00FF6D  6F                 	db	111	;'o'
   343   00FF6E  6E                 	db	110	;'n'
   344   00FF6F  6E                 	db	110	;'n'
   345   00FF70  61                 	db	97	;'a'
   346   00FF71  20                 	db	32
   347   00FF72  72                 	db	114	;'r'
   348   00FF73  65                 	db	101	;'e'
   349   00FF74  73                 	db	115	;'s'
   350   00FF75  70                 	db	112	;'p'
   351   00FF76  6F                 	db	111	;'o'
   352   00FF77  6E                 	db	110	;'n'
   353   00FF78  64                 	db	100	;'d'
   354   00FF79  20                 	db	32
   355   00FF7A  74                 	db	116	;'t'
   356   00FF7B  6F                 	db	111	;'o'
   357   00FF7C  20                 	db	32
   358   00FF7D  25                 	db	37
   359   00FF7E  64                 	db	100	;'d'
   360   00FF7F  20                 	db	32
   361   00FF80  0A                 	db	10
   362   00FF81  00                 	db	0
   363   00FF82                     STR_6:
   364                           
   365                           ; BSR set to: 14
   366   00FF82  54                 	db	84	;'T'
   367   00FF83  69                 	db	105	;'i'
   368   00FF84  6D                 	db	109	;'m'
   369   00FF85  65                 	db	101	;'e'
   370   00FF86  72                 	db	114	;'r'
   371   00FF87  63                 	db	99	;'c'
   372   00FF88  6F                 	db	111	;'o'
   373   00FF89  75                 	db	117	;'u'
   374   00FF8A  6E                 	db	110	;'n'
   375   00FF8B  74                 	db	116	;'t'
   376   00FF8C  20                 	db	32
   377   00FF8D  25                 	db	37
   378   00FF8E  64                 	db	100	;'d'
   379   00FF8F  2C                 	db	44
   380   00FF90  20                 	db	32
   381   00FF91  74                 	db	116	;'t'
   382   00FF92  69                 	db	105	;'i'
   383   00FF93  6D                 	db	109	;'m'
   384   00FF94  65                 	db	101	;'e'
   385   00FF95  20                 	db	32
   386   00FF96  25                 	db	37
   387   00FF97  64                 	db	100	;'d'
   388   00FF98  20                 	db	32
   389   00FF99  20                 	db	32
   390   00FF9A  0A                 	db	10
   391   00FF9B  00                 	db	0
   392   00FF9C                     STR_7:
   393                           
   394                           ; BSR set to: 14
   395   00FF9C  43                 	db	67	;'C'
   396   00FF9D  61                 	db	97	;'a'
   397   00FF9E  72                 	db	114	;'r'
   398   00FF9F  64                 	db	100	;'d'
   399   00FFA0  63                 	db	99	;'c'
   400   00FFA1  6F                 	db	111	;'o'
   401   00FFA2  75                 	db	117	;'u'
   402   00FFA3  6E                 	db	110	;'n'
   403   00FFA4  74                 	db	116	;'t'
   404   00FFA5  20                 	db	32
   405   00FFA6  25                 	db	37
   406   00FFA7  64                 	db	100	;'d'
   407   00FFA8  2C                 	db	44
   408   00FFA9  20                 	db	32
   409   00FFAA  63                 	db	99	;'c'
   410   00FFAB  61                 	db	97	;'a'
   411   00FFAC  72                 	db	114	;'r'
   412   00FFAD  64                 	db	100	;'d'
   413   00FFAE  20                 	db	32
   414   00FFAF  25                 	db	37
   415   00FFB0  64                 	db	100	;'d'
   416   00FFB1  20                 	db	32
   417   00FFB2  20                 	db	32
   418   00FFB3  0A                 	db	10
   419   00FFB4  00                 	db	0
   420   00FFB5                     STR_8:
   421                           
   422                           ; BSR set to: 14
   423   00FFB5  54                 	db	84	;'T'
   424   00FFB6  69                 	db	105	;'i'
   425   00FFB7  6D                 	db	109	;'m'
   426   00FFB8  65                 	db	101	;'e'
   427   00FFB9  20                 	db	32
   428   00FFBA  67                 	db	103	;'g'
   429   00FFBB  6F                 	db	111	;'o'
   430   00FFBC  6E                 	db	110	;'n'
   431   00FFBD  6E                 	db	110	;'n'
   432   00FFBE  61                 	db	97	;'a'
   433   00FFBF  20                 	db	32
   434   00FFC0  6D                 	db	109	;'m'
   435   00FFC1  6F                 	db	111	;'o'
   436   00FFC2  76                 	db	118	;'v'
   437   00FFC3  65                 	db	101	;'e'
   438   00FFC4  20                 	db	32
   439   00FFC5  66                 	db	102	;'f'
   440   00FFC6  6F                 	db	111	;'o'
   441   00FFC7  72                 	db	114	;'r'
   442   00FFC8  20                 	db	32
   443   00FFC9  25                 	db	37
   444   00FFCA  64                 	db	100	;'d'
   445   00FFCB  20                 	db	32
   446   00FFCC  0A                 	db	10
   447   00FFCD  00                 	db	0
   448   00FFCE                     STR_2:
   449                           
   450                           ; BSR set to: 14
   451   00FFCE  0A                 	db	10
   452   00FFCF  20                 	db	32
   453   00FFD0  45                 	db	69	;'E'
   454   00FFD1  78                 	db	120	;'x'
   455   00FFD2  70                 	db	112	;'p'
   456   00FFD3  65                 	db	101	;'e'
   457   00FFD4  63                 	db	99	;'c'
   458   00FFD5  74                 	db	116	;'t'
   459   00FFD6  65                 	db	101	;'e'
   460   00FFD7  64                 	db	100	;'d'
   461   00FFD8  20                 	db	32
   462   00FFD9  63                 	db	99	;'c'
   463   00FFDA  6C                 	db	108	;'l'
   464   00FFDB  65                 	db	101	;'e'
   465   00FFDC  61                 	db	97	;'a'
   466   00FFDD  72                 	db	114	;'r'
   467   00FFDE  3A                 	db	58	;':'
   468   00FFDF  20                 	db	32
   469   00FFE0  25                 	db	37
   470   00FFE1  64                 	db	100	;'d'
   471   00FFE2  20                 	db	32
   472   00FFE3  0A                 	db	10
   473   00FFE4  00                 	db	0
   474   00FFE5                     STR_3:
   475                           
   476                           ; BSR set to: 14
   477   00FFE5  43                 	db	67	;'C'
   478   00FFE6  61                 	db	97	;'a'
   479   00FFE7  72                 	db	114	;'r'
   480   00FFE8  64                 	db	100	;'d'
   481   00FFE9  63                 	db	99	;'c'
   482   00FFEA  6F                 	db	111	;'o'
   483   00FFEB  75                 	db	117	;'u'
   484   00FFEC  6E                 	db	110	;'n'
   485   00FFED  74                 	db	116	;'t'
   486   00FFEE  20                 	db	32
   487   00FFEF  25                 	db	37
   488   00FFF0  64                 	db	100	;'d'
   489   00FFF1  20                 	db	32
   490   00FFF2  0A                 	db	10
   491   00FFF3  00                 	db	0
   492   00FFF4                     STR_12:
   493                           
   494                           ; BSR set to: 14
   495   00FFF4  43                 	db	67	;'C'
   496   00FFF5  41                 	db	65	;'A'
   497   00FFF6  52                 	db	82	;'R'
   498   00FFF7  44                 	db	68	;'D'
   499   00FFF8  20                 	db	32
   500   00FFF9  25                 	db	37
   501   00FFFA  64                 	db	100	;'d'
   502   00FFFB  20                 	db	32
   503   00FFFC  0A                 	db	10
   504   00FFFD  00                 	db	0
   505   00FFFE  00                 	db	0	; dummy byte at the end
   506   000000                     
   507                           ; #config settings
   508                           
   509                           	psect	cinit
   510   012A68                     __pcinit:
   511                           	callstack 0
   512   012A68                     start_initialization:
   513                           	callstack 0
   514   012A68                     __initialization:
   515                           	callstack 0
   516                           
   517                           ; Initialize objects allocated to BANK2 (30 bytes)
   518                           ; load TBLPTR registers with __pidataBANK2
   519   012A68  0EE6               	movlw	low __pidataBANK2
   520   012A6A  6EF6               	movwf	tblptrl,c
   521   012A6C  0E2C               	movlw	high __pidataBANK2
   522   012A6E  6EF7               	movwf	tblptrh,c
   523   012A70  0E01               	movlw	low (__pidataBANK2 shr (0+16))
   524   012A72  6EF8               	movwf	tblptru,c
   525   012A74  EE02  F0AB         	lfsr	0,__pdataBANK2
   526   012A78  EE10 F01E          	lfsr	1,30
   527   012A7C                     copy_data0:
   528   012A7C  0009               	tblrd		*+
   529   012A7E  CFF5 FFEE          	movff	tablat,postinc0
   530   012A82  50E5               	movf	postdec1,w,c
   531   012A84  50E1               	movf	fsr1l,w,c
   532   012A86  E1FA               	bnz	copy_data0
   533                           
   534                           ; Clear objects allocated to BANK3 (120 bytes)
   535   012A88  EE03  F000         	lfsr	0,__pbssBANK3
   536   012A8C  0E78               	movlw	120
   537   012A8E                     clear_0:
   538   012A8E  6AEE               	clrf	postinc0,c
   539   012A90  06E8               	decf	wreg,f,c
   540   012A92  E1FD               	bnz	clear_0
   541                           
   542                           ; Clear objects allocated to BANK0 (64 bytes)
   543   012A94  EE00  F0BF         	lfsr	0,__pbssBANK0
   544   012A98  0E40               	movlw	64
   545   012A9A                     clear_1:
   546   012A9A  6AEE               	clrf	postinc0,c
   547   012A9C  06E8               	decf	wreg,f,c
   548   012A9E  E1FD               	bnz	clear_1
   549                           
   550                           ; Clear objects allocated to COMRAM (3 bytes)
   551   012AA0  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   552   012AA2  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   553   012AA4  6A58               	clrf	__pbssCOMRAM& (0+255),c
   554   012AA6                     end_of_initialization:
   555                           	callstack 0
   556   012AA6                     __end_of__initialization:
   557                           	callstack 0
   558   012AA6  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   559   012AA8  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   560   012AAA  0100               	movlb	0
   561   012AAC  EFEC  F083         	goto	_main	;jump to C main() function
   562                           
   563                           	psect	bssCOMRAM
   564   000058                     __pbssCOMRAM:
   565                           	callstack 0
   566   000058                     _TxBufReadCnt:
   567                           	callstack 0
   568   000058                     	ds	1
   569   000059                     _TxBufWriteCnt:
   570                           	callstack 0
   571   000059                     	ds	1
   572   00005A                     _RxBufWriteCnt:
   573                           	callstack 0
   574   00005A                     	ds	1
   575                           
   576                           	psect	bssBANK0
   577   0000BF                     __pbssBANK0:
   578                           	callstack 0
   579   0000BF                     _EUSART4RXbuf:
   580                           	callstack 0
   581   0000BF                     	ds	20
   582   0000D3                     _width:
   583                           	callstack 0
   584   0000D3                     	ds	2
   585   0000D5                     _prec:
   586                           	callstack 0
   587   0000D5                     	ds	2
   588   0000D7                     _card_detected:
   589                           	callstack 0
   590   0000D7                     	ds	2
   591   0000D9                     _response_in_progress:
   592                           	callstack 0
   593   0000D9                     	ds	2
   594   0000DB                     _TimerFlag:
   595                           	callstack 0
   596   0000DB                     	ds	2
   597   0000DD                     _flags:
   598                           	callstack 0
   599   0000DD                     	ds	1
   600   0000DE                     _RxBufReadCnt:
   601                           	callstack 0
   602   0000DE                     	ds	1
   603   0000DF                     _dbuf:
   604                           	callstack 0
   605   0000DF                     	ds	32
   606                           
   607                           	psect	dataBANK2
   608   0002AB                     __pdataBANK2:
   609                           	callstack 0
   610   0002AB                     main@F14702:
   611                           	callstack 0
   612   0002AB                     	ds	30
   613                           
   614                           	psect	bssBANK3
   615   000300                     __pbssBANK3:
   616                           	callstack 0
   617   000300                     	ds	60
   618   00033C                     _EUSART4TXbuf:
   619                           	callstack 0
   620   00033C                     	ds	60
   621                           
   622                           	psect	cstackBANK2
   623   000200                     __pcstackBANK2:
   624                           	callstack 0
   625   000200                     main@ReturnHomeCards:
   626                           	callstack 0
   627                           
   628                           ; 30 bytes @ 0x0
   629   000200                     	ds	30
   630   00021E                     main@ReturnHomeTimes:
   631                           	callstack 0
   632                           
   633                           ; 60 bytes @ 0x1E
   634   00021E                     	ds	60
   635   00025A                     main@expected_values:
   636                           	callstack 0
   637                           
   638                           ; 72 bytes @ 0x5A
   639   00025A                     	ds	72
   640   0002A2                     main@motorR:
   641                           	callstack 0
   642                           
   643                           ; 9 bytes @ 0xA2
   644   0002A2                     	ds	9
   645                           
   646                           	psect	cstackBANK1
   647   000100                     __pcstackBANK1:
   648                           	callstack 0
   649   000100                     card_response@normalised_values:
   650                           	callstack 0
   651                           
   652                           ; 72 bytes @ 0x0
   653   000100                     	ds	72
   654   000148                     card_response@master_closeness:
   655                           	callstack 0
   656                           
   657                           ; 18 bytes @ 0x48
   658   000148                     	ds	18
   659   00015A                     main@buf:
   660                           	callstack 0
   661                           
   662                           ; 150 bytes @ 0x5A
   663   00015A                     	ds	150
   664   0001F0                     main@CardCount:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0xF0
   668   0001F0                     	ds	2
   669   0001F2                     main@blue_read:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0xF2
   673   0001F2                     	ds	2
   674   0001F4                     main@i:
   675                           	callstack 0
   676                           
   677                           ; 1 bytes @ 0xF4
   678   0001F4                     	ds	1
   679   0001F5                     main@clear_read:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0xF5
   683   0001F5                     	ds	2
   684   0001F7                     main@motorL:
   685                           	callstack 0
   686                           
   687                           ; 9 bytes @ 0xF7
   688   0001F7                     	ds	9
   689                           
   690                           	psect	cstackBANK0
   691   000060                     __pcstackBANK0:
   692                           	callstack 0
   693   000060                     ?_vfprintf:
   694                           	callstack 0
   695   000060                     vfprintf@fp:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x0
   699   000060                     	ds	2
   700   000062                     vfprintf@fmt:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x2
   704   000062                     	ds	2
   705   000064                     vfprintf@ap:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x4
   709   000064                     	ds	2
   710   000066                     ?_sprintf:
   711                           	callstack 0
   712   000066                     sprintf@s:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x6
   716   000066                     	ds	2
   717   000068                     sprintf@fmt:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x8
   721   000068                     	ds	12
   722   000074                     sprintf@ap:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x14
   726   000074                     	ds	2
   727   000076                     sprintf@f:
   728                           	callstack 0
   729                           
   730                           ; 11 bytes @ 0x16
   731   000076                     	ds	11
   732   000081                     clear_read_calibration@buf:
   733                           	callstack 0
   734   000081                     motor_response@buf:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x21
   738   000081                     	ds	2
   739   000083                     motor_response@card:
   740                           	callstack 0
   741   000083                     clear_read_calibration@clear_read:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x23
   745   000083                     	ds	1
   746   000084                     motor_response@mL:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x24
   750   000084                     	ds	1
   751   000085                     clear_read_calibration@clear_read_check:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x25
   755   000085                     	ds	1
   756   000086                     motor_response@mR:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x26
   760   000086                     	ds	1
   761   000087                     ??_clear_read_calibration:
   762                           
   763                           ; 1 bytes @ 0x27
   764   000087                     	ds	1
   765   000088                     motor_response@ReturnHomeTimes:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x28
   769   000088                     	ds	2
   770   00008A                     motor_response@ReturnHomeCards:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x2A
   774   00008A                     	ds	1
   775   00008B                     clear_read_calibration@i:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x2B
   779   00008B                     	ds	1
   780   00008C                     motor_response@stop_all:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x2C
   784   00008C                     	ds	1
   785   00008D                     clear_read_calibration@i_1641:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x2D
   789   00008D                     	ds	1
   790   00008E                     ??_motor_response:
   791                           
   792                           ; 1 bytes @ 0x2E
   793   00008E                     	ds	6
   794   000094                     motor_response@j:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x34
   798   000094                     	ds	2
   799   000096                     motor_response@j_1697:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x36
   803   000096                     	ds	2
   804   000098                     motor_response@k:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x38
   808   000098                     	ds	2
   809   00009A                     motor_response@i:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x3A
   813   00009A                     	ds	2
   814   00009C                     card_response@buf:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x3C
   818   00009C                     	ds	2
   819   00009E                     card_response@clear_read:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x3E
   823   00009E                     	ds	2
   824   0000A0                     card_response@red_read:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x40
   828   0000A0                     	ds	2
   829   0000A2                     card_response@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x42
   833   0000A2                     	ds	2
   834   0000A4                     card_response@blue_read:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x44
   838   0000A4                     	ds	2
   839   0000A6                     card_response@expected_values:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x46
   843   0000A6                     	ds	2
   844   0000A8                     card_response@card:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0x48
   848   0000A8                     	ds	1
   849   0000A9                     card_response@mL:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x49
   853   0000A9                     	ds	2
   854   0000AB                     card_response@mR:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x4B
   858   0000AB                     	ds	2
   859   0000AD                     card_response@ReturnHomeTimes:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x4D
   863   0000AD                     	ds	2
   864   0000AF                     card_response@ReturnHomeCards:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x4F
   868   0000AF                     	ds	2
   869   0000B1                     card_response@stop_all:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x51
   873   0000B1                     	ds	2
   874   0000B3                     main@PWMcycle:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x53
   878   0000B3                     	ds	1
   879   0000B4                     main@card:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x54
   883   0000B4                     	ds	1
   884   0000B5                     main@TimerCount:
   885                           	callstack 0
   886                           
   887                           ; 2 bytes @ 0x55
   888   0000B5                     	ds	2
   889   0000B7                     main@clear_read_check:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x57
   893   0000B7                     	ds	2
   894   0000B9                     main@stop_all:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x59
   898   0000B9                     	ds	2
   899   0000BB                     main@red_read:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x5B
   903   0000BB                     	ds	2
   904   0000BD                     main@green_read:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x5D
   908   0000BD                     	ds	2
   909                           
   910                           	psect	cstackCOMRAM
   911   000001                     __pcstackCOMRAM:
   912                           	callstack 0
   913   000001                     ??_LowISR:
   914   000001                     
   915                           ; 1 bytes @ 0x0
   916   000001                     	ds	3
   917   000004                     ??_I2C_2_Master_Idle:
   918   000004                     ?___wmul:
   919                           	callstack 0
   920   000004                     ?___lwmod:
   921                           	callstack 0
   922   000004                     ?___aodiv:
   923                           	callstack 0
   924   000004                     ?___aomod:
   925                           	callstack 0
   926   000004                     sendCharSerial4@charToSend:
   927                           	callstack 0
   928   000004                     make_master_closeness@buf:
   929                           	callstack 0
   930   000004                     determine_card@master_closeness:
   931                           	callstack 0
   932   000004                     ___wmul@multiplier:
   933                           	callstack 0
   934   000004                     ___lwmod@dividend:
   935                           	callstack 0
   936   000004                     fputc@c:
   937                           	callstack 0
   938   000004                     ___aodiv@dividend:
   939                           	callstack 0
   940   000004                     ___aomod@dividend:
   941                           	callstack 0
   942                           
   943                           ; 8 bytes @ 0x3
   944   000004                     	ds	1
   945   000005                     ??_I2C_2_Master_Read:
   946   000005                     I2C_2_Master_Write@data_byte:
   947                           	callstack 0
   948   000005                     sendStringSerial4@string:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x4
   952   000005                     	ds	1
   953   000006                     ??_determine_card:
   954   000006                     color_writetoaddr@value:
   955                           	callstack 0
   956   000006                     I2C_2_Master_Read@ack:
   957                           	callstack 0
   958   000006                     make_master_closeness@normalised_values:
   959                           	callstack 0
   960   000006                     ___wmul@multiplicand:
   961                           	callstack 0
   962   000006                     ___lwmod@divisor:
   963                           	callstack 0
   964   000006                     fputc@fp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x5
   968   000006                     	ds	1
   969   000007                     color_writetoaddr@address:
   970                           	callstack 0
   971   000007                     I2C_2_Master_Read@tmp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x6
   975   000007                     	ds	1
   976   000008                     ??_fputc:
   977   000008                     ??_color_click_init:
   978   000008                     ?_color_read_Red:
   979                           	callstack 0
   980   000008                     ?_color_read_Green:
   981                           	callstack 0
   982   000008                     ?_color_read_Blue:
   983                           	callstack 0
   984   000008                     ?_color_read_Clear:
   985                           	callstack 0
   986   000008                     ___lwmod@counter:
   987                           	callstack 0
   988   000008                     make_master_closeness@master_closeness:
   989                           	callstack 0
   990   000008                     ___wmul@product:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x7
   994   000008                     	ds	2
   995   00000A                     ??_color_read_Red:
   996   00000A                     ??_color_read_Green:
   997   00000A                     ??_color_read_Blue:
   998   00000A                     ??_color_read_Clear:
   999   00000A                     ??_make_master_closeness:
  1000   00000A                     ?___lwdiv:
  1001                           	callstack 0
  1002   00000A                     determine_card@current_smallest:
  1003                           	callstack 0
  1004   00000A                     ___lwdiv@dividend:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x9
  1008   00000A                     	ds	2
  1009   00000C                     determine_card@predicted_colour:
  1010                           	callstack 0
  1011   00000C                     ___lwdiv@divisor:
  1012                           	callstack 0
  1013   00000C                     ___aodiv@divisor:
  1014                           	callstack 0
  1015   00000C                     ___aomod@divisor:
  1016                           	callstack 0
  1017                           
  1018                           ; 8 bytes @ 0xB
  1019   00000C                     	ds	1
  1020   00000D                     determine_card@i:
  1021                           	callstack 0
  1022   00000D                     color_read_Red@tmp:
  1023                           	callstack 0
  1024   00000D                     color_read_Green@tmp:
  1025                           	callstack 0
  1026   00000D                     color_read_Blue@tmp:
  1027                           	callstack 0
  1028   00000D                     color_read_Clear@tmp:
  1029                           	callstack 0
  1030   00000D                     fputs@s:
  1031                           	callstack 0
  1032                           
  1033                           ; 2 bytes @ 0xC
  1034   00000D                     	ds	1
  1035   00000E                     ___lwdiv@counter:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0xD
  1039   00000E                     	ds	1
  1040   00000F                     collect_avg_readings@clear_read:
  1041                           	callstack 0
  1042   00000F                     ___lwdiv@quotient:
  1043                           	callstack 0
  1044   00000F                     fputs@fp:
  1045                           	callstack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048   00000F                     	ds	2
  1049   000011                     fputs@c:
  1050                           	callstack 0
  1051   000011                     setMotorPWM@m:
  1052                           	callstack 0
  1053   000011                     collect_avg_readings@red_read:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x10
  1057   000011                     	ds	1
  1058   000012                     fputs@i:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x11
  1062   000012                     	ds	1
  1063   000013                     ??_setMotorPWM:
  1064   000013                     collect_avg_readings@green_read:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x12
  1068   000013                     	ds	1
  1069   000014                     ___aodiv@counter:
  1070                           	callstack 0
  1071   000014                     ___aomod@counter:
  1072                           	callstack 0
  1073   000014                     pad@fp:
  1074                           	callstack 0
  1075                           
  1076                           ; 2 bytes @ 0x13
  1077   000014                     	ds	1
  1078   000015                     setMotorPWM@posDuty:
  1079                           	callstack 0
  1080   000015                     ___aodiv@sign:
  1081                           	callstack 0
  1082   000015                     ___aomod@sign:
  1083                           	callstack 0
  1084   000015                     collect_avg_readings@blue_read:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x14
  1088   000015                     	ds	1
  1089   000016                     ?_abs:
  1090                           	callstack 0
  1091   000016                     setMotorPWM@negDuty:
  1092                           	callstack 0
  1093   000016                     abs@a:
  1094                           	callstack 0
  1095   000016                     pad@buf:
  1096                           	callstack 0
  1097   000016                     ___aodiv@quotient:
  1098                           	callstack 0
  1099                           
  1100                           ; 8 bytes @ 0x15
  1101   000016                     	ds	1
  1102   000017                     ??_collect_avg_readings:
  1103   000017                     stop@mL:
  1104                           	callstack 0
  1105   000017                     turnLeft45@mL:
  1106                           	callstack 0
  1107   000017                     turnRight45@mL:
  1108                           	callstack 0
  1109   000017                     fullSpeedAhead@mL:
  1110                           	callstack 0
  1111   000017                     reverseFullSpeed@mL:
  1112                           	callstack 0
  1113                           
  1114                           ; 2 bytes @ 0x16
  1115   000017                     	ds	1
  1116   000018                     ??_abs:
  1117   000018                     pad@p:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x17
  1121   000018                     	ds	1
  1122   000019                     stop@mR:
  1123                           	callstack 0
  1124   000019                     turnLeft45@mR:
  1125                           	callstack 0
  1126   000019                     turnRight45@mR:
  1127                           	callstack 0
  1128   000019                     fullSpeedAhead@mR:
  1129                           	callstack 0
  1130   000019                     reverseFullSpeed@mR:
  1131                           	callstack 0
  1132   000019                     collect_avg_readings@i:
  1133                           	callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x18
  1136   000019                     	ds	1
  1137   00001A                     ??_pad:
  1138   00001A                     normalise_readings@buf:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x19
  1142   00001A                     	ds	1
  1143   00001B                     ??_stop:
  1144   00001B                     ??_turnLeft45:
  1145   00001B                     ??_turnRight45:
  1146   00001B                     ??_fullSpeedAhead:
  1147   00001B                     ??_reverseFullSpeed:
  1148   00001B                     collect_avg_readings@i_1652:
  1149                           	callstack 0
  1150   00001B                     pad@i:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x1A
  1154   00001B                     	ds	1
  1155   00001C                     fullSpeedAhead@i:
  1156                           	callstack 0
  1157   00001C                     reverseFullSpeed@i:
  1158                           	callstack 0
  1159   00001C                     normalise_readings@clear_read:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x1B
  1163   00001C                     	ds	1
  1164   00001D                     turnLeft45@i:
  1165                           	callstack 0
  1166   00001D                     turnRight45@i:
  1167                           	callstack 0
  1168   00001D                     collect_avg_readings@i_1653:
  1169                           	callstack 0
  1170   00001D                     pad@w:
  1171                           	callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x1C
  1174   00001D                     	ds	1
  1175   00001E                     normalise_readings@red_read:
  1176                           	callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x1D
  1179   00001E                     	ds	1
  1180   00001F                     collect_avg_readings@i_1654:
  1181                           	callstack 0
  1182   00001F                     home_response@mL:
  1183                           	callstack 0
  1184   00001F                     dtoa@fp:
  1185                           	callstack 0
  1186                           
  1187                           ; 2 bytes @ 0x1E
  1188   00001F                     	ds	1
  1189   000020                     normalise_readings@green_read:
  1190                           	callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x1F
  1193   000020                     	ds	1
  1194   000021                     collect_avg_readings@i_1655:
  1195                           	callstack 0
  1196   000021                     home_response@mR:
  1197                           	callstack 0
  1198   000021                     dtoa@d:
  1199                           	callstack 0
  1200                           
  1201                           ; 8 bytes @ 0x20
  1202   000021                     	ds	1
  1203   000022                     normalise_readings@blue_read:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0x21
  1207   000022                     	ds	1
  1208   000023                     ??_home_response:
  1209                           
  1210                           ; 1 bytes @ 0x22
  1211   000023                     	ds	1
  1212   000024                     normalise_readings@expected_values:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x23
  1216   000024                     	ds	1
  1217   000025                     home_response@i:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x24
  1221   000025                     	ds	1
  1222   000026                     home_response@card:
  1223                           	callstack 0
  1224   000026                     normalise_readings@normalised_values:
  1225                           	callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x25
  1228   000026                     	ds	2
  1229   000028                     ??_normalise_readings:
  1230   000028                     make_master_closeness@i:
  1231                           	callstack 0
  1232                           
  1233                           ; 1 bytes @ 0x27
  1234   000028                     	ds	1
  1235   000029                     ??_dtoa:
  1236                           
  1237                           ; 1 bytes @ 0x28
  1238   000029                     	ds	7
  1239   000030                     normalise_readings@difference:
  1240                           	callstack 0
  1241                           
  1242                           ; 2 bytes @ 0x2F
  1243   000030                     	ds	1
  1244   000031                     _dtoa$2601:
  1245                           	callstack 0
  1246                           
  1247                           ; 2 bytes @ 0x30
  1248   000031                     	ds	1
  1249   000032                     normalise_readings@i:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x31
  1253   000032                     	ds	1
  1254   000033                     dtoa@p:
  1255                           	callstack 0
  1256                           
  1257                           ; 2 bytes @ 0x32
  1258   000033                     	ds	2
  1259   000035                     dtoa@w:
  1260                           	callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x34
  1263   000035                     	ds	2
  1264   000037                     dtoa@n:
  1265                           	callstack 0
  1266                           
  1267                           ; 8 bytes @ 0x36
  1268   000037                     	ds	8
  1269   00003F                     dtoa@s:
  1270                           	callstack 0
  1271                           
  1272                           ; 1 bytes @ 0x3E
  1273   00003F                     	ds	1
  1274   000040                     dtoa@i:
  1275                           	callstack 0
  1276                           
  1277                           ; 2 bytes @ 0x3F
  1278   000040                     	ds	2
  1279   000042                     vfpfcnvrt@fp:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x41
  1283   000042                     	ds	2
  1284   000044                     vfpfcnvrt@fmt:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x43
  1288   000044                     	ds	2
  1289   000046                     vfpfcnvrt@ap:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x45
  1293   000046                     	ds	2
  1294   000048                     ??_vfpfcnvrt:
  1295                           
  1296                           ; 1 bytes @ 0x47
  1297   000048                     	ds	2
  1298   00004A                     vfpfcnvrt@convarg:
  1299                           	callstack 0
  1300                           
  1301                           ; 8 bytes @ 0x49
  1302   00004A                     	ds	8
  1303   000052                     vfpfcnvrt@cp:
  1304                           	callstack 0
  1305                           
  1306                           ; 2 bytes @ 0x51
  1307   000052                     	ds	2
  1308   000054                     vfprintf@cfmt:
  1309                           	callstack 0
  1310                           
  1311                           ; 2 bytes @ 0x53
  1312   000054                     	ds	2
  1313   000056                     ??_main:
  1314                           
  1315                           ; 1 bytes @ 0x55
  1316   000056                     	ds	2
  1317                           
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 21 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  i               1  244[BANK1 ] enum E14569
  1328 ;;  buf           150   90[BANK1 ] unsigned char [150]
  1329 ;;  expected_val   72   90[BANK2 ] unsigned int [9][4]
  1330 ;;  ReturnHomeTi   60   30[BANK2 ] unsigned int [30]
  1331 ;;  expected_val   40    0        unsigned int [5][4]
  1332 ;;  ReturnHomeCa   30    0[BANK2 ] enum E14569[30]
  1333 ;;  motorL          9  247[BANK1 ] struct DC_motor
  1334 ;;  motorR          9  162[BANK2 ] struct DC_motor
  1335 ;;  clear_read      2  245[BANK1 ] unsigned int 
  1336 ;;  blue_read       2  242[BANK1 ] unsigned int 
  1337 ;;  green_read      2   93[BANK0 ] unsigned int 
  1338 ;;  red_read        2   91[BANK0 ] unsigned int 
  1339 ;;  CardCount       2  240[BANK1 ] unsigned int 
  1340 ;;  stop_all        2   89[BANK0 ] unsigned int 
  1341 ;;  clear_read_c    2   87[BANK0 ] unsigned int 
  1342 ;;  TimerCount      2   85[BANK0 ] unsigned int 
  1343 ;;  card            1   84[BANK0 ] enum E14569
  1344 ;;  PWMcycle        1   83[BANK0 ] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Locals:         0      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Totals:         2      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;Total ram usage:      351 bytes
  1359 ;; Hardware stack levels required when called: 11
  1360 ;; This function calls:
  1361 ;;		_I2C_2_Master_Init
  1362 ;;		_Interrupts_init
  1363 ;;		_LEDSon_init
  1364 ;;		___lwmod
  1365 ;;		_card_response
  1366 ;;		_clear_read_calibration
  1367 ;;		_collect_avg_readings
  1368 ;;		_color_click_init
  1369 ;;		_color_read_Clear
  1370 ;;		_fullSpeedAhead
  1371 ;;		_initDCmotorsPWM
  1372 ;;		_initUSART4
  1373 ;;		_reverseFullSpeed
  1374 ;;		_sendStringSerial4
  1375 ;;		_setMotorPWM
  1376 ;;		_sprintf
  1377 ;;		_stop
  1378 ;; This function is called by:
  1379 ;;		Startup code after reset
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text0
  1384   0107D8                     __ptext0:
  1385                           	callstack 0
  1386   0107D8                     _main:
  1387                           	callstack 20
  1388   0107D8                     
  1389                           ;main.c: 26:     LEDSon_init();
  1390   0107D8  EC02  F096         	call	_LEDSon_init	;wreg free
  1391   0107DC                     
  1392                           ;main.c: 27:     I2C_2_Master_Init();
  1393   0107DC  ECED  F095         	call	_I2C_2_Master_Init	;wreg free
  1394   0107E0                     
  1395                           ;main.c: 28:     color_click_init();
  1396   0107E0  ECBB  F095         	call	_color_click_init	;wreg free
  1397   0107E4                     
  1398                           ;main.c: 29:     initDCmotorsPWM();
  1399   0107E4  ECE6  F092         	call	_initDCmotorsPWM	;wreg free
  1400   0107E8                     
  1401                           ;main.c: 30:     initUSART4();
  1402   0107E8  EC53  F096         	call	_initUSART4	;wreg free
  1403   0107EC                     
  1404                           ;main.c: 31:     Interrupts_init();
  1405   0107EC  EC17  F096         	call	_Interrupts_init	;wreg free
  1406   0107F0                     
  1407                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1408   0107F0  8486               	bsf	134,2,c	;volatile
  1409   0107F2                     
  1410                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1411   0107F2  010E               	movlb	14	; () banked
  1412   0107F4  95B4               	bcf	180,2,b	;volatile
  1413   0107F6                     
  1414                           ; BSR set to: 14
  1415                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1416   0107F6  CFBC F0B3          	movff	4028,main@PWMcycle	;volatile
  1417   0107FA                     
  1418                           ; BSR set to: 14
  1419                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1420   0107FA  0E00               	movlw	0
  1421   0107FC  0101               	movlb	1	; () banked
  1422   0107FE  6FF7               	movwf	main@motorL& (0+255),b
  1423   010800                     
  1424                           ; BSR set to: 1
  1425                           ;main.c: 45:     motorL.direction=1;
  1426   010800  0E01               	movlw	1
  1427   010802  6FF8               	movwf	(main@motorL+1)& (0+255),b
  1428   010804                     
  1429                           ; BSR set to: 1
  1430                           ;main.c: 46:     motorL.brakemode=1;
  1431   010804  0E01               	movlw	1
  1432   010806  6FF9               	movwf	(main@motorL+2)& (0+255),b
  1433   010808                     
  1434                           ; BSR set to: 1
  1435                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1436   010808  0EAA               	movlw	170
  1437   01080A  6FFC               	movwf	(main@motorL+5)& (0+255),b
  1438   01080C  0E0F               	movlw	15
  1439   01080E  6FFD               	movwf	(main@motorL+6)& (0+255),b
  1440   010810                     
  1441                           ; BSR set to: 1
  1442                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1443   010810  0EA6               	movlw	166
  1444   010812  6FFE               	movwf	(main@motorL+7)& (0+255),b
  1445   010814  0E0F               	movlw	15
  1446   010816  6FFF               	movwf	(main@motorL+8)& (0+255),b
  1447   010818                     
  1448                           ; BSR set to: 1
  1449                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1450   010818  C0B3  F1FA         	movff	main@PWMcycle,main@motorL+3
  1451   01081C  6BFB               	clrf	(main@motorL+4)& (0+255),b
  1452   01081E                     
  1453                           ; BSR set to: 1
  1454                           ;main.c: 51:     motorR.power=0;
  1455   01081E  0E00               	movlw	0
  1456   010820  0102               	movlb	2	; () banked
  1457   010822  6FA2               	movwf	main@motorR& (0+255),b
  1458   010824                     
  1459                           ; BSR set to: 2
  1460                           ;main.c: 52:     motorR.direction=1;
  1461   010824  0E01               	movlw	1
  1462   010826  6FA3               	movwf	(main@motorR+1)& (0+255),b
  1463   010828                     
  1464                           ; BSR set to: 2
  1465                           ;main.c: 53:     motorR.brakemode=1;
  1466   010828  0E01               	movlw	1
  1467   01082A  6FA4               	movwf	(main@motorR+2)& (0+255),b
  1468                           
  1469                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1470   01082C  0E25               	movlw	37
  1471   01082E  6FA7               	movwf	(main@motorR+5)& (0+255),b
  1472   010830  0E0F               	movlw	15
  1473   010832  6FA8               	movwf	(main@motorR+6)& (0+255),b
  1474                           
  1475                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1476   010834  0E21               	movlw	33
  1477   010836  6FA9               	movwf	(main@motorR+7)& (0+255),b
  1478   010838  0E0F               	movlw	15
  1479   01083A  6FAA               	movwf	(main@motorR+8)& (0+255),b
  1480   01083C                     
  1481                           ; BSR set to: 2
  1482                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1483   01083C  C0B3  F2A5         	movff	main@PWMcycle,main@motorR+3
  1484   010840  6BA6               	clrf	(main@motorR+4)& (0+255),b
  1485   010842                     
  1486                           ; BSR set to: 2
  1487                           ;main.c: 58:     setMotorPWM(&motorL);
  1488   010842  0EF7               	movlw	low main@motorL
  1489   010844  6E11               	movwf	setMotorPWM@m^0,c
  1490   010846  0E01               	movlw	high main@motorL
  1491   010848  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1492   01084A  EC1D  F08E         	call	_setMotorPWM	;wreg free
  1493   01084E                     
  1494                           ;main.c: 59:     setMotorPWM(&motorR);
  1495   01084E  0EA2               	movlw	low main@motorR
  1496   010850  6E11               	movwf	setMotorPWM@m^0,c
  1497   010852  0E02               	movlw	high main@motorR
  1498   010854  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1499   010856  EC1D  F08E         	call	_setMotorPWM	;wreg free
  1500   01085A                     
  1501                           ;main.c: 65:     colour card;;main.c: 66:     char buf[150];;main.c: 69:     unsigned in
      +                          t red_read = 0;
  1502   01085A  0E00               	movlw	0
  1503   01085C  0100               	movlb	0	; () banked
  1504   01085E  6FBC               	movwf	(main@red_read+1)& (0+255),b
  1505   010860  0E00               	movlw	0
  1506   010862  6FBB               	movwf	main@red_read& (0+255),b
  1507   010864                     
  1508                           ; BSR set to: 0
  1509                           ;main.c: 70:     unsigned int green_read = 0;
  1510   010864  0E00               	movlw	0
  1511   010866  6FBE               	movwf	(main@green_read+1)& (0+255),b
  1512   010868  0E00               	movlw	0
  1513   01086A  6FBD               	movwf	main@green_read& (0+255),b
  1514   01086C                     
  1515                           ; BSR set to: 0
  1516                           ;main.c: 71:     unsigned int blue_read = 0;
  1517   01086C  0E00               	movlw	0
  1518   01086E  0101               	movlb	1	; () banked
  1519   010870  6FF3               	movwf	(main@blue_read+1)& (0+255),b
  1520   010872  0E00               	movlw	0
  1521   010874  6FF2               	movwf	main@blue_read& (0+255),b
  1522   010876                     
  1523                           ; BSR set to: 1
  1524                           ;main.c: 72:     unsigned int clear_read = 0;
  1525   010876  0E00               	movlw	0
  1526   010878  6FF6               	movwf	(main@clear_read+1)& (0+255),b
  1527   01087A  0E00               	movlw	0
  1528   01087C  6FF5               	movwf	main@clear_read& (0+255),b
  1529   01087E                     
  1530                           ; BSR set to: 1
  1531                           ;main.c: 74:     unsigned int TimerCount = 0;
  1532   01087E  0E00               	movlw	0
  1533   010880  0100               	movlb	0	; () banked
  1534   010882  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  1535   010884  0E00               	movlw	0
  1536   010886  6FB5               	movwf	main@TimerCount& (0+255),b
  1537   010888                     
  1538                           ; BSR set to: 0
  1539                           ;main.c: 75:     unsigned int CardCount = 0;
  1540   010888  0E00               	movlw	0
  1541   01088A  0101               	movlb	1	; () banked
  1542   01088C  6FF1               	movwf	(main@CardCount+1)& (0+255),b
  1543   01088E  0E00               	movlw	0
  1544   010890  6FF0               	movwf	main@CardCount& (0+255),b
  1545   010892                     
  1546                           ; BSR set to: 1
  1547                           ;main.c: 76:     unsigned int clear_read_check = 0;
  1548   010892  0E00               	movlw	0
  1549   010894  0100               	movlb	0	; () banked
  1550   010896  6FB8               	movwf	(main@clear_read_check+1)& (0+255),b
  1551   010898  0E00               	movlw	0
  1552   01089A  6FB7               	movwf	main@clear_read_check& (0+255),b
  1553   01089C                     
  1554                           ; BSR set to: 0
  1555                           ;main.c: 78:     unsigned int expected_values[4][9];;main.c: 79:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 81:     unsigned int ReturnHomeTimes[30] = {0};
  1556   01089C  EE22  F01E         	lfsr	2,main@ReturnHomeTimes
  1557   0108A0  0E3B               	movlw	59
  1558   0108A2                     u2561:
  1559   0108A2  6ADE               	clrf	postinc2,c
  1560   0108A4  06E8               	decf	wreg,f,c
  1561   0108A6  E2FD               	bc	u2561
  1562   0108A8                     
  1563                           ; BSR set to: 0
  1564                           ;main.c: 82:     colour ReturnHomeCards[30] = {BLACK};
  1565   0108A8  EE22  F0AB         	lfsr	2,main@F14702
  1566   0108AC  EE12  F000         	lfsr	1,main@ReturnHomeCards
  1567   0108B0  0E1D               	movlw	29
  1568   0108B2                     u2571:
  1569   0108B2  CFDB FFE3          	movff	plusw2,plusw1
  1570   0108B6  06E8               	decf	wreg,f,c
  1571   0108B8  E2FC               	bc	u2571
  1572   0108BA                     
  1573                           ; BSR set to: 0
  1574                           ;main.c: 84:     unsigned int stop_all = 0;
  1575   0108BA  0E00               	movlw	0
  1576   0108BC  6FBA               	movwf	(main@stop_all+1)& (0+255),b
  1577   0108BE  0E00               	movlw	0
  1578   0108C0  6FB9               	movwf	main@stop_all& (0+255),b
  1579   0108C2                     
  1580                           ; BSR set to: 0
  1581                           ;main.c: 95:     LATDbits.LATD4 = 0;
  1582   0108C2  987C               	bcf	124,4,c	;volatile
  1583   0108C4                     
  1584                           ; BSR set to: 0
  1585                           ;main.c: 96:     for(colour i = RED; i<= BLACK; i++){
  1586   0108C4  0E00               	movlw	0
  1587   0108C6  0101               	movlb	1	; () banked
  1588   0108C8  6FF4               	movwf	main@i& (0+255),b
  1589   0108CA  EF68  F084         	goto	l243
  1590   0108CE                     l244:
  1591                           
  1592                           ;main.c: 98:             LATDbits.LATD4 = 1;
  1593   0108CE  887C               	bsf	124,4,c	;volatile
  1594   0108D0                     l243:
  1595                           
  1596                           ;main.c: 97:         while(PORTFbits.RF2){
  1597   0108D0  B48E               	btfsc	142,2,c	;volatile
  1598   0108D2  EF6D  F084         	goto	u2581
  1599   0108D6  EF6F  F084         	goto	u2580
  1600   0108DA                     u2581:
  1601   0108DA  EF67  F084         	goto	l244
  1602   0108DE                     u2580:
  1603   0108DE                     
  1604                           ;main.c: 100:         LATDbits.LATD4 = 0;
  1605   0108DE  987C               	bcf	124,4,c	;volatile
  1606   0108E0                     
  1607                           ;main.c: 101:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1608   0108E0  0E09               	movlw	9
  1609   0108E2  6E57               	movwf	(??_main+1)^0,c
  1610   0108E4  0E1E               	movlw	30
  1611   0108E6  6E56               	movwf	??_main^0,c
  1612   0108E8  0EE4               	movlw	228
  1613   0108EA                     u2697:
  1614   0108EA  2EE8               	decfsz	wreg,f,c
  1615   0108EC  D7FE               	bra	u2697
  1616   0108EE  2E56               	decfsz	??_main^0,f,c
  1617   0108F0  D7FC               	bra	u2697
  1618   0108F2  2E57               	decfsz	(??_main+1)^0,f,c
  1619   0108F4  D7FA               	bra	u2697
  1620   0108F6  D000               	nop2	
  1621   0108F8                     
  1622                           ;main.c: 102:         stop(&motorL, &motorR);
  1623   0108F8  0EF7               	movlw	low main@motorL
  1624   0108FA  6E17               	movwf	stop@mL^0,c
  1625   0108FC  0E01               	movlw	high main@motorL
  1626   0108FE  6E18               	movwf	(stop@mL+1)^0,c
  1627   010900  0EA2               	movlw	low main@motorR
  1628   010902  6E19               	movwf	stop@mR^0,c
  1629   010904  0E02               	movlw	high main@motorR
  1630   010906  6E1A               	movwf	(stop@mR+1)^0,c
  1631   010908  EC13  F094         	call	_stop	;wreg free
  1632   01090C                     
  1633                           ;main.c: 103:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1634   01090C  0E02               	movlw	2
  1635   01090E  6E57               	movwf	(??_main+1)^0,c
  1636   010910  0EA0               	movlw	160
  1637   010912  6E56               	movwf	??_main^0,c
  1638   010914  0E92               	movlw	146
  1639   010916                     u2707:
  1640   010916  2EE8               	decfsz	wreg,f,c
  1641   010918  D7FE               	bra	u2707
  1642   01091A  2E56               	decfsz	??_main^0,f,c
  1643   01091C  D7FC               	bra	u2707
  1644   01091E  2E57               	decfsz	(??_main+1)^0,f,c
  1645   010920  D7FA               	bra	u2707
  1646   010922  D000               	nop2	
  1647                           
  1648                           ;main.c: 104:         reverseFullSpeed(&motorL, &motorR);
  1649   010924  0EF7               	movlw	low main@motorL
  1650   010926  6E17               	movwf	reverseFullSpeed@mL^0,c
  1651   010928  0E01               	movlw	high main@motorL
  1652   01092A  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1653   01092C  0EA2               	movlw	low main@motorR
  1654   01092E  6E19               	movwf	reverseFullSpeed@mR^0,c
  1655   010930  0E02               	movlw	high main@motorR
  1656   010932  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1657   010934  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  1658   010938                     
  1659                           ;main.c: 105:         _delay((unsigned long)((175)*(64000000/4000.0)));
  1660   010938  0E0F               	movlw	15
  1661   01093A  6E57               	movwf	(??_main+1)^0,c
  1662   01093C  0E35               	movlw	53
  1663   01093E  6E56               	movwf	??_main^0,c
  1664   010940  0E51               	movlw	81
  1665   010942                     u2717:
  1666   010942  2EE8               	decfsz	wreg,f,c
  1667   010944  D7FE               	bra	u2717
  1668   010946  2E56               	decfsz	??_main^0,f,c
  1669   010948  D7FC               	bra	u2717
  1670   01094A  2E57               	decfsz	(??_main+1)^0,f,c
  1671   01094C  D7FA               	bra	u2717
  1672   01094E  F000               	nop	
  1673   010950                     
  1674                           ;main.c: 106:         stop(&motorL, &motorR);
  1675   010950  0EF7               	movlw	low main@motorL
  1676   010952  6E17               	movwf	stop@mL^0,c
  1677   010954  0E01               	movlw	high main@motorL
  1678   010956  6E18               	movwf	(stop@mL+1)^0,c
  1679   010958  0EA2               	movlw	low main@motorR
  1680   01095A  6E19               	movwf	stop@mR^0,c
  1681   01095C  0E02               	movlw	high main@motorR
  1682   01095E  6E1A               	movwf	(stop@mR+1)^0,c
  1683   010960  EC13  F094         	call	_stop	;wreg free
  1684   010964                     
  1685                           ;main.c: 107:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_re
      +                          ad);
  1686   010964  0EF5               	movlw	low main@clear_read
  1687   010966  6E0F               	movwf	collect_avg_readings@clear_read^0,c
  1688   010968  0E01               	movlw	high main@clear_read
  1689   01096A  6E10               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1690   01096C  0EBB               	movlw	low main@red_read
  1691   01096E  6E11               	movwf	collect_avg_readings@red_read^0,c
  1692   010970  0E00               	movlw	high main@red_read
  1693   010972  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1694   010974  0EBD               	movlw	low main@green_read
  1695   010976  6E13               	movwf	collect_avg_readings@green_read^0,c
  1696   010978  0E00               	movlw	high main@green_read
  1697   01097A  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1698   01097C  0EF2               	movlw	low main@blue_read
  1699   01097E  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1700   010980  0E01               	movlw	high main@blue_read
  1701   010982  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1702   010984  EC63  F08B         	call	_collect_avg_readings	;wreg free
  1703   010988                     
  1704                           ;main.c: 108:         expected_values[RED][i] = red_read;
  1705   010988  0101               	movlb	1	; () banked
  1706   01098A  51F4               	movf	main@i& (0+255),w,b
  1707   01098C  0D02               	mullw	2
  1708   01098E  0E5A               	movlw	low main@expected_values
  1709   010990  24F3               	addwf	243,w,c
  1710   010992  6ED9               	movwf	fsr2l,c
  1711   010994  0E02               	movlw	high main@expected_values
  1712   010996  20F4               	addwfc	prodh,w,c
  1713   010998  6EDA               	movwf	fsr2h,c
  1714   01099A  C0BB  FFDE         	movff	main@red_read,postinc2
  1715   01099E  C0BC  FFDD         	movff	main@red_read+1,postdec2
  1716   0109A2                     
  1717                           ; BSR set to: 1
  1718                           ;main.c: 109:         expected_values[GREEN][i] = green_read;
  1719   0109A2  51F4               	movf	main@i& (0+255),w,b
  1720   0109A4  0D02               	mullw	2
  1721   0109A6  0E12               	movlw	18
  1722   0109A8  26F3               	addwf	243,f,c
  1723   0109AA  0E00               	movlw	0
  1724   0109AC  22F4               	addwfc	244,f,c
  1725   0109AE  0E5A               	movlw	low main@expected_values
  1726   0109B0  24F3               	addwf	243,w,c
  1727   0109B2  6ED9               	movwf	fsr2l,c
  1728   0109B4  0E02               	movlw	high main@expected_values
  1729   0109B6  20F4               	addwfc	prodh,w,c
  1730   0109B8  6EDA               	movwf	fsr2h,c
  1731   0109BA  C0BD  FFDE         	movff	main@green_read,postinc2
  1732   0109BE  C0BE  FFDD         	movff	main@green_read+1,postdec2
  1733   0109C2                     
  1734                           ; BSR set to: 1
  1735                           ;main.c: 110:         expected_values[BLUE][i] = blue_read;
  1736   0109C2  51F4               	movf	main@i& (0+255),w,b
  1737   0109C4  0D02               	mullw	2
  1738   0109C6  0E24               	movlw	36
  1739   0109C8  26F3               	addwf	243,f,c
  1740   0109CA  0E00               	movlw	0
  1741   0109CC  22F4               	addwfc	244,f,c
  1742   0109CE  0E5A               	movlw	low main@expected_values
  1743   0109D0  24F3               	addwf	243,w,c
  1744   0109D2  6ED9               	movwf	fsr2l,c
  1745   0109D4  0E02               	movlw	high main@expected_values
  1746   0109D6  20F4               	addwfc	prodh,w,c
  1747   0109D8  6EDA               	movwf	fsr2h,c
  1748   0109DA  C1F2  FFDE         	movff	main@blue_read,postinc2
  1749   0109DE  C1F3  FFDD         	movff	main@blue_read+1,postdec2
  1750   0109E2                     
  1751                           ; BSR set to: 1
  1752                           ;main.c: 111:         expected_values[3][i] = clear_read;
  1753   0109E2  51F4               	movf	main@i& (0+255),w,b
  1754   0109E4  0D02               	mullw	2
  1755   0109E6  0E36               	movlw	54
  1756   0109E8  26F3               	addwf	243,f,c
  1757   0109EA  0E00               	movlw	0
  1758   0109EC  22F4               	addwfc	244,f,c
  1759   0109EE  0E5A               	movlw	low main@expected_values
  1760   0109F0  24F3               	addwf	243,w,c
  1761   0109F2  6ED9               	movwf	fsr2l,c
  1762   0109F4  0E02               	movlw	high main@expected_values
  1763   0109F6  20F4               	addwfc	prodh,w,c
  1764   0109F8  6EDA               	movwf	fsr2h,c
  1765   0109FA  C1F5  FFDE         	movff	main@clear_read,postinc2
  1766   0109FE  C1F6  FFDD         	movff	main@clear_read+1,postdec2
  1767   010A02                     
  1768                           ; BSR set to: 1
  1769                           ;main.c: 112:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i );
  1770   010A02  0E5A               	movlw	low main@buf
  1771   010A04  0100               	movlb	0	; () banked
  1772   010A06  6F66               	movwf	sprintf@s& (0+255),b
  1773   010A08  0E01               	movlw	high main@buf
  1774   010A0A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1775   010A0C  0EF3               	movlw	low STR_1
  1776   010A0E  6F68               	movwf	sprintf@fmt& (0+255),b
  1777   010A10  0EFE               	movlw	high STR_1
  1778   010A12  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1779   010A14  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1780   010A18  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1781   010A1C  C0BB  F06C         	movff	main@red_read,?_sprintf+6
  1782   010A20  C0BC  F06D         	movff	main@red_read+1,?_sprintf+7
  1783   010A24  C0BD  F06E         	movff	main@green_read,?_sprintf+8
  1784   010A28  C0BE  F06F         	movff	main@green_read+1,?_sprintf+9
  1785   010A2C  C1F2  F070         	movff	main@blue_read,?_sprintf+10
  1786   010A30  C1F3  F071         	movff	main@blue_read+1,?_sprintf+11
  1787   010A34  C1F4  F072         	movff	main@i,?_sprintf+12
  1788   010A38  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1789   010A3A  EC6B  F094         	call	_sprintf	;wreg free
  1790   010A3E                     
  1791                           ;main.c: 113:         sendStringSerial4(buf);
  1792   010A3E  0E5A               	movlw	low main@buf
  1793   010A40  6E05               	movwf	sendStringSerial4@string^0,c
  1794   010A42  0E01               	movlw	high main@buf
  1795   010A44  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1796   010A46  ECD5  F095         	call	_sendStringSerial4	;wreg free
  1797   010A4A                     
  1798                           ;main.c: 114:     }
  1799   010A4A  0101               	movlb	1	; () banked
  1800   010A4C  2BF4               	incf	main@i& (0+255),f,b
  1801   010A4E                     
  1802                           ; BSR set to: 1
  1803   010A4E  0E08               	movlw	8
  1804   010A50  65F4               	cpfsgt	main@i& (0+255),b
  1805   010A52  EF2D  F085         	goto	u2591
  1806   010A56  EF2F  F085         	goto	u2590
  1807   010A5A                     u2591:
  1808   010A5A  EF68  F084         	goto	l243
  1809   010A5E                     u2590:
  1810   010A5E                     
  1811                           ; BSR set to: 1
  1812                           ;main.c: 115:     LATDbits.LATD4 = 1;
  1813   010A5E  887C               	bsf	124,4,c	;volatile
  1814                           
  1815                           ;main.c: 116:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1816   010A60  EF33  F085         	goto	l246
  1817   010A64                     l247:
  1818   010A64  987C               	bcf	124,4,c	;volatile
  1819   010A66                     l246:
  1820   010A66  B48E               	btfsc	142,2,c	;volatile
  1821   010A68  EF38  F085         	goto	u2601
  1822   010A6C  EF3A  F085         	goto	u2600
  1823   010A70                     u2601:
  1824   010A70  EF32  F085         	goto	l247
  1825   010A74                     u2600:
  1826   010A74                     
  1827                           ;main.c: 117:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1828   010A74  0E5A               	movlw	low main@buf
  1829   010A76  0100               	movlb	0	; () banked
  1830   010A78  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1831   010A7A  0E01               	movlw	high main@buf
  1832   010A7C  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1833   010A7E  0EF5               	movlw	low main@clear_read
  1834   010A80  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1835   010A82  0E01               	movlw	high main@clear_read
  1836   010A84  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1837   010A86  0EB7               	movlw	low main@clear_read_check
  1838   010A88  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1839   010A8A  0E00               	movlw	high main@clear_read_check
  1840   010A8C  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1841   010A8E  EC34  F090         	call	_clear_read_calibration	;wreg free
  1842                           
  1843                           ;main.c: 119:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1844   010A92  0E5A               	movlw	low main@buf
  1845   010A94  0100               	movlb	0	; () banked
  1846   010A96  6F66               	movwf	sprintf@s& (0+255),b
  1847   010A98  0E01               	movlw	high main@buf
  1848   010A9A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1849   010A9C  0ECE               	movlw	low STR_2
  1850   010A9E  6F68               	movwf	sprintf@fmt& (0+255),b
  1851   010AA0  0EFF               	movlw	high STR_2
  1852   010AA2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1853   010AA4  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1854   010AA8  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1855   010AAC  EC6B  F094         	call	_sprintf	;wreg free
  1856   010AB0                     
  1857                           ;main.c: 120:     sendStringSerial4(buf);
  1858   010AB0  0E5A               	movlw	low main@buf
  1859   010AB2  6E05               	movwf	sendStringSerial4@string^0,c
  1860   010AB4  0E01               	movlw	high main@buf
  1861   010AB6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1862   010AB8  ECD5  F095         	call	_sendStringSerial4	;wreg free
  1863   010ABC                     l249:
  1864   010ABC  B48E               	btfsc	142,2,c	;volatile
  1865   010ABE  EF63  F085         	goto	u2611
  1866   010AC2  EF65  F085         	goto	u2610
  1867   010AC6                     u2611:
  1868   010AC6  EF5E  F085         	goto	l249
  1869   010ACA                     u2610:
  1870   010ACA                     l4974:
  1871                           
  1872                           ;main.c: 127:     fullSpeedAhead(&motorL, &motorR);
  1873   010ACA  0EF7               	movlw	low main@motorL
  1874   010ACC  6E17               	movwf	fullSpeedAhead@mL^0,c
  1875   010ACE  0E01               	movlw	high main@motorL
  1876   010AD0  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1877   010AD2  0EA2               	movlw	low main@motorR
  1878   010AD4  6E19               	movwf	fullSpeedAhead@mR^0,c
  1879   010AD6  0E02               	movlw	high main@motorR
  1880   010AD8  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1881   010ADA  ECA0  F092         	call	_fullSpeedAhead	;wreg free
  1882   010ADE                     l4976:
  1883                           
  1884                           ;main.c: 130:         if (TimerFlag == 1){
  1885   010ADE  0100               	movlb	0	; () banked
  1886   010AE0  05DB               	decf	_TimerFlag& (0+255),w,b
  1887   010AE2  11DC               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1888   010AE4  A4D8               	btfss	status,2,c
  1889   010AE6  EF77  F085         	goto	u2621
  1890   010AEA  EF79  F085         	goto	u2620
  1891   010AEE                     u2621:
  1892   010AEE  EFA5  F085         	goto	l4986
  1893   010AF2                     u2620:
  1894   010AF2                     
  1895                           ; BSR set to: 0
  1896                           ;main.c: 131:             TimerCount += 1;
  1897   010AF2  4BB5               	infsnz	main@TimerCount& (0+255),f,b
  1898   010AF4  2BB6               	incf	(main@TimerCount+1)& (0+255),f,b
  1899   010AF6                     
  1900                           ; BSR set to: 0
  1901                           ;main.c: 132:             if (TimerCount % 10 == 0){LATHbits.LATH3=!LATHbits.LATH3;}
  1902   010AF6  C0B5  F004         	movff	main@TimerCount,___lwmod@dividend
  1903   010AFA  C0B6  F005         	movff	main@TimerCount+1,___lwmod@dividend+1
  1904   010AFE  0E00               	movlw	0
  1905   010B00  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1906   010B02  0E0A               	movlw	10
  1907   010B04  6E06               	movwf	___lwmod@divisor^0,c
  1908   010B06  ECE1  F093         	call	___lwmod	;wreg free
  1909   010B0A  5004               	movf	?___lwmod^0,w,c
  1910   010B0C  1005               	iorwf	(?___lwmod+1)^0,w,c
  1911   010B0E  A4D8               	btfss	status,2,c
  1912   010B10  EF8C  F085         	goto	u2631
  1913   010B14  EF8E  F085         	goto	u2630
  1914   010B18                     u2631:
  1915   010B18  EFA0  F085         	goto	l4984
  1916   010B1C                     u2630:
  1917   010B1C  A680               	btfss	128,3,c	;volatile
  1918   010B1E  EF93  F085         	goto	u2641
  1919   010B22  EF97  F085         	goto	u2640
  1920   010B26                     u2641:
  1921   010B26  6A56               	clrf	??_main^0,c
  1922   010B28  2A56               	incf	??_main^0,f,c
  1923   010B2A  EF98  F085         	goto	u2658
  1924   010B2E                     u2640:
  1925   010B2E  6A56               	clrf	??_main^0,c
  1926   010B30                     u2658:
  1927   010B30  4656               	rlncf	??_main^0,f,c
  1928   010B32  4656               	rlncf	??_main^0,f,c
  1929   010B34  4656               	rlncf	??_main^0,f,c
  1930   010B36  5080               	movf	128,w,c	;volatile
  1931   010B38  1856               	xorwf	??_main^0,w,c
  1932   010B3A  0BF7               	andlw	-9
  1933   010B3C  1856               	xorwf	??_main^0,w,c
  1934   010B3E  6E80               	movwf	128,c	;volatile
  1935   010B40                     l4984:
  1936                           
  1937                           ;main.c: 133:             TimerFlag = 0;
  1938   010B40  0E00               	movlw	0
  1939   010B42  0100               	movlb	0	; () banked
  1940   010B44  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  1941   010B46  0E00               	movlw	0
  1942   010B48  6FDB               	movwf	_TimerFlag& (0+255),b
  1943   010B4A                     l4986:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 135:         clear_read = color_read_Clear();
  1947   010B4A  ECE4  F094         	call	_color_read_Clear	;wreg free
  1948   010B4E  C008  F1F5         	movff	?_color_read_Clear,main@clear_read
  1949   010B52  C009  F1F6         	movff	?_color_read_Clear+1,main@clear_read+1
  1950   010B56                     
  1951                           ;main.c: 136:         if (clear_read > clear_read_check && stop_all == 0){
  1952   010B56  0101               	movlb	1	; () banked
  1953   010B58  51F5               	movf	main@clear_read& (0+255),w,b
  1954   010B5A  0100               	movlb	0	; () banked
  1955   010B5C  5DB7               	subwf	main@clear_read_check& (0+255),w,b
  1956   010B5E  0101               	movlb	1	; () banked
  1957   010B60  51F6               	movf	(main@clear_read+1)& (0+255),w,b
  1958   010B62  0100               	movlb	0	; () banked
  1959   010B64  59B8               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1960   010B66  B0D8               	btfsc	status,0,c
  1961   010B68  EFB8  F085         	goto	u2661
  1962   010B6C  EFBA  F085         	goto	u2660
  1963   010B70                     u2661:
  1964   010B70  EF6F  F085         	goto	l4976
  1965   010B74                     u2660:
  1966   010B74                     
  1967                           ; BSR set to: 0
  1968   010B74  51B9               	movf	main@stop_all& (0+255),w,b
  1969   010B76  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  1970   010B78  A4D8               	btfss	status,2,c
  1971   010B7A  EFC1  F085         	goto	u2671
  1972   010B7E  EFC3  F085         	goto	u2670
  1973   010B82                     u2671:
  1974   010B82  EF6F  F085         	goto	l4976
  1975   010B86                     u2670:
  1976   010B86                     
  1977                           ; BSR set to: 0
  1978                           ;main.c: 138:             sprintf(buf, "Cardcount %d \n", CardCount);
  1979   010B86  0E5A               	movlw	low main@buf
  1980   010B88  6F66               	movwf	sprintf@s& (0+255),b
  1981   010B8A  0E01               	movlw	high main@buf
  1982   010B8C  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1983   010B8E  0EE5               	movlw	low STR_3
  1984   010B90  6F68               	movwf	sprintf@fmt& (0+255),b
  1985   010B92  0EFF               	movlw	high STR_3
  1986   010B94  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1987   010B96  C1F0  F06A         	movff	main@CardCount,?_sprintf+4
  1988   010B9A  C1F1  F06B         	movff	main@CardCount+1,?_sprintf+5
  1989   010B9E  EC6B  F094         	call	_sprintf	;wreg free
  1990   010BA2                     
  1991                           ;main.c: 139:             sendStringSerial4(buf);
  1992   010BA2  0E5A               	movlw	low main@buf
  1993   010BA4  6E05               	movwf	sendStringSerial4@string^0,c
  1994   010BA6  0E01               	movlw	high main@buf
  1995   010BA8  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1996   010BAA  ECD5  F095         	call	_sendStringSerial4	;wreg free
  1997   010BAE                     
  1998                           ;main.c: 141:             ReturnHomeTimes[CardCount] = TimerCount - 3;
  1999   010BAE  0EFD               	movlw	253
  2000   010BB0  0100               	movlb	0	; () banked
  2001   010BB2  25B5               	addwf	main@TimerCount& (0+255),w,b
  2002   010BB4  6E56               	movwf	??_main^0,c
  2003   010BB6  0EFF               	movlw	255
  2004   010BB8  21B6               	addwfc	(main@TimerCount+1)& (0+255),w,b
  2005   010BBA  6E57               	movwf	(??_main+1)^0,c
  2006   010BBC  90D8               	bcf	status,0,c
  2007   010BBE  0101               	movlb	1	; () banked
  2008   010BC0  35F0               	rlcf	main@CardCount& (0+255),w,b
  2009   010BC2  6ED9               	movwf	fsr2l,c
  2010   010BC4  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2011   010BC6  6EDA               	movwf	fsr2h,c
  2012   010BC8  0E1E               	movlw	low main@ReturnHomeTimes
  2013   010BCA  26D9               	addwf	fsr2l,f,c
  2014   010BCC  0E02               	movlw	high main@ReturnHomeTimes
  2015   010BCE  22DA               	addwfc	fsr2h,f,c
  2016   010BD0  C056  FFDE         	movff	??_main,postinc2
  2017   010BD4  C057  FFDD         	movff	??_main+1,postdec2
  2018   010BD8                     
  2019                           ; BSR set to: 1
  2020                           ;main.c: 143:             sprintf(buf, "Timercount array reading %d \n", ReturnHomeTimes
      +                          [CardCount]);
  2021   010BD8  0E5A               	movlw	low main@buf
  2022   010BDA  0100               	movlb	0	; () banked
  2023   010BDC  6F66               	movwf	sprintf@s& (0+255),b
  2024   010BDE  0E01               	movlw	high main@buf
  2025   010BE0  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2026   010BE2  0E49               	movlw	low STR_4
  2027   010BE4  6F68               	movwf	sprintf@fmt& (0+255),b
  2028   010BE6  0EFF               	movlw	high STR_4
  2029   010BE8  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2030   010BEA  90D8               	bcf	status,0,c
  2031   010BEC  0101               	movlb	1	; () banked
  2032   010BEE  35F0               	rlcf	main@CardCount& (0+255),w,b
  2033   010BF0  6ED9               	movwf	fsr2l,c
  2034   010BF2  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2035   010BF4  6EDA               	movwf	fsr2h,c
  2036   010BF6  0E1E               	movlw	low main@ReturnHomeTimes
  2037   010BF8  26D9               	addwf	fsr2l,f,c
  2038   010BFA  0E02               	movlw	high main@ReturnHomeTimes
  2039   010BFC  22DA               	addwfc	fsr2h,f,c
  2040   010BFE  CFDE F06A          	movff	postinc2,?_sprintf+4
  2041   010C02  CFDD F06B          	movff	postdec2,?_sprintf+5
  2042   010C06  EC6B  F094         	call	_sprintf	;wreg free
  2043   010C0A                     
  2044                           ;main.c: 144:             sendStringSerial4(buf);
  2045   010C0A  0E5A               	movlw	low main@buf
  2046   010C0C  6E05               	movwf	sendStringSerial4@string^0,c
  2047   010C0E  0E01               	movlw	high main@buf
  2048   010C10  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2049   010C12  ECD5  F095         	call	_sendStringSerial4	;wreg free
  2050   010C16                     
  2051                           ;main.c: 146:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2052   010C16  0E2A               	movlw	42
  2053   010C18  6E56               	movwf	??_main^0,c
  2054   010C1A  0E8E               	movlw	142
  2055   010C1C                     u2727:
  2056   010C1C  2EE8               	decfsz	wreg,f,c
  2057   010C1E  D7FE               	bra	u2727
  2058   010C20  2E56               	decfsz	??_main^0,f,c
  2059   010C22  D7FC               	bra	u2727
  2060   010C24                     
  2061                           ;main.c: 147:             stop(&motorL, &motorR);
  2062   010C24  0EF7               	movlw	low main@motorL
  2063   010C26  6E17               	movwf	stop@mL^0,c
  2064   010C28  0E01               	movlw	high main@motorL
  2065   010C2A  6E18               	movwf	(stop@mL+1)^0,c
  2066   010C2C  0EA2               	movlw	low main@motorR
  2067   010C2E  6E19               	movwf	stop@mR^0,c
  2068   010C30  0E02               	movlw	high main@motorR
  2069   010C32  6E1A               	movwf	(stop@mR+1)^0,c
  2070   010C34  EC13  F094         	call	_stop	;wreg free
  2071   010C38                     
  2072                           ;main.c: 148:             _delay((unsigned long)((20)*(64000000/4000.0)));
  2073   010C38  0E02               	movlw	2
  2074   010C3A  6E57               	movwf	(??_main+1)^0,c
  2075   010C3C  0EA0               	movlw	160
  2076   010C3E  6E56               	movwf	??_main^0,c
  2077   010C40  0E92               	movlw	146
  2078   010C42                     u2737:
  2079   010C42  2EE8               	decfsz	wreg,f,c
  2080   010C44  D7FE               	bra	u2737
  2081   010C46  2E56               	decfsz	??_main^0,f,c
  2082   010C48  D7FC               	bra	u2737
  2083   010C4A  2E57               	decfsz	(??_main+1)^0,f,c
  2084   010C4C  D7FA               	bra	u2737
  2085   010C4E  D000               	nop2	
  2086   010C50                     
  2087                           ;main.c: 149:             reverseFullSpeed(&motorL, &motorR);
  2088   010C50  0EF7               	movlw	low main@motorL
  2089   010C52  6E17               	movwf	reverseFullSpeed@mL^0,c
  2090   010C54  0E01               	movlw	high main@motorL
  2091   010C56  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  2092   010C58  0EA2               	movlw	low main@motorR
  2093   010C5A  6E19               	movwf	reverseFullSpeed@mR^0,c
  2094   010C5C  0E02               	movlw	high main@motorR
  2095   010C5E  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  2096   010C60  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  2097   010C64                     
  2098                           ;main.c: 150:             _delay((unsigned long)((175)*(64000000/4000.0)));
  2099   010C64  0E0F               	movlw	15
  2100   010C66  6E57               	movwf	(??_main+1)^0,c
  2101   010C68  0E35               	movlw	53
  2102   010C6A  6E56               	movwf	??_main^0,c
  2103   010C6C  0E51               	movlw	81
  2104   010C6E                     u2747:
  2105   010C6E  2EE8               	decfsz	wreg,f,c
  2106   010C70  D7FE               	bra	u2747
  2107   010C72  2E56               	decfsz	??_main^0,f,c
  2108   010C74  D7FC               	bra	u2747
  2109   010C76  2E57               	decfsz	(??_main+1)^0,f,c
  2110   010C78  D7FA               	bra	u2747
  2111   010C7A  F000               	nop	
  2112   010C7C                     
  2113                           ;main.c: 151:             stop(&motorL, &motorR);
  2114   010C7C  0EF7               	movlw	low main@motorL
  2115   010C7E  6E17               	movwf	stop@mL^0,c
  2116   010C80  0E01               	movlw	high main@motorL
  2117   010C82  6E18               	movwf	(stop@mL+1)^0,c
  2118   010C84  0EA2               	movlw	low main@motorR
  2119   010C86  6E19               	movwf	stop@mR^0,c
  2120   010C88  0E02               	movlw	high main@motorR
  2121   010C8A  6E1A               	movwf	(stop@mR+1)^0,c
  2122   010C8C  EC13  F094         	call	_stop	;wreg free
  2123   010C90                     
  2124                           ;main.c: 152:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2125   010C90  0E2A               	movlw	42
  2126   010C92  6E56               	movwf	??_main^0,c
  2127   010C94  0E8E               	movlw	142
  2128   010C96                     u2757:
  2129   010C96  2EE8               	decfsz	wreg,f,c
  2130   010C98  D7FE               	bra	u2757
  2131   010C9A  2E56               	decfsz	??_main^0,f,c
  2132   010C9C  D7FC               	bra	u2757
  2133   010C9E                     
  2134                           ;main.c: 155:             card = card_response(buf, &clear_read, &red_read, &green_read,
      +                           &blue_read, expected_values, card, &motorL, &motorR, ReturnHomeTimes, ReturnHomeCards, 
      +                          &stop_all);
  2135   010C9E  0E5A               	movlw	low main@buf
  2136   010CA0  0100               	movlb	0	; () banked
  2137   010CA2  6F9C               	movwf	card_response@buf& (0+255),b
  2138   010CA4  0E01               	movlw	high main@buf
  2139   010CA6  6F9D               	movwf	(card_response@buf+1)& (0+255),b
  2140   010CA8  0EF5               	movlw	low main@clear_read
  2141   010CAA  6F9E               	movwf	card_response@clear_read& (0+255),b
  2142   010CAC  0E01               	movlw	high main@clear_read
  2143   010CAE  6F9F               	movwf	(card_response@clear_read+1)& (0+255),b
  2144   010CB0  0EBB               	movlw	low main@red_read
  2145   010CB2  6FA0               	movwf	card_response@red_read& (0+255),b
  2146   010CB4  0E00               	movlw	high main@red_read
  2147   010CB6  6FA1               	movwf	(card_response@red_read+1)& (0+255),b
  2148   010CB8  0EBD               	movlw	low main@green_read
  2149   010CBA  6FA2               	movwf	card_response@green_read& (0+255),b
  2150   010CBC  0E00               	movlw	high main@green_read
  2151   010CBE  6FA3               	movwf	(card_response@green_read+1)& (0+255),b
  2152   010CC0  0EF2               	movlw	low main@blue_read
  2153   010CC2  6FA4               	movwf	card_response@blue_read& (0+255),b
  2154   010CC4  0E01               	movlw	high main@blue_read
  2155   010CC6  6FA5               	movwf	(card_response@blue_read+1)& (0+255),b
  2156   010CC8  0E5A               	movlw	low main@expected_values
  2157   010CCA  6FA6               	movwf	card_response@expected_values& (0+255),b
  2158   010CCC  0E02               	movlw	high main@expected_values
  2159   010CCE  6FA7               	movwf	(card_response@expected_values+1)& (0+255),b
  2160   010CD0  C0B4  F0A8         	movff	main@card,card_response@card
  2161   010CD4  0EF7               	movlw	low main@motorL
  2162   010CD6  6FA9               	movwf	card_response@mL& (0+255),b
  2163   010CD8  0E01               	movlw	high main@motorL
  2164   010CDA  6FAA               	movwf	(card_response@mL+1)& (0+255),b
  2165   010CDC  0EA2               	movlw	low main@motorR
  2166   010CDE  6FAB               	movwf	card_response@mR& (0+255),b
  2167   010CE0  0E02               	movlw	high main@motorR
  2168   010CE2  6FAC               	movwf	(card_response@mR+1)& (0+255),b
  2169   010CE4  0E1E               	movlw	low main@ReturnHomeTimes
  2170   010CE6  6FAD               	movwf	card_response@ReturnHomeTimes& (0+255),b
  2171   010CE8  0E02               	movlw	high main@ReturnHomeTimes
  2172   010CEA  6FAE               	movwf	(card_response@ReturnHomeTimes+1)& (0+255),b
  2173   010CEC  0E00               	movlw	low main@ReturnHomeCards
  2174   010CEE  6FAF               	movwf	card_response@ReturnHomeCards& (0+255),b
  2175   010CF0  0E02               	movlw	high main@ReturnHomeCards
  2176   010CF2  6FB0               	movwf	(card_response@ReturnHomeCards+1)& (0+255),b
  2177   010CF4  0EB9               	movlw	low main@stop_all
  2178   010CF6  6FB1               	movwf	card_response@stop_all& (0+255),b
  2179   010CF8  0E00               	movlw	high main@stop_all
  2180   010CFA  6FB2               	movwf	(card_response@stop_all+1)& (0+255),b
  2181   010CFC  EC64  F08D         	call	_card_response	;wreg free
  2182   010D00  0100               	movlb	0	; () banked
  2183   010D02  6FB4               	movwf	main@card& (0+255),b
  2184   010D04                     
  2185                           ; BSR set to: 0
  2186                           ;main.c: 156:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2187   010D04  0E2A               	movlw	42
  2188   010D06  6E56               	movwf	??_main^0,c
  2189   010D08  0E8E               	movlw	142
  2190   010D0A                     u2767:
  2191   010D0A  2EE8               	decfsz	wreg,f,c
  2192   010D0C  D7FE               	bra	u2767
  2193   010D0E  2E56               	decfsz	??_main^0,f,c
  2194   010D10  D7FC               	bra	u2767
  2195   010D12                     
  2196                           ;main.c: 157:             ReturnHomeCards[CardCount] = card;
  2197   010D12  0E00               	movlw	low main@ReturnHomeCards
  2198   010D14  0101               	movlb	1	; () banked
  2199   010D16  25F0               	addwf	main@CardCount& (0+255),w,b
  2200   010D18  6ED9               	movwf	fsr2l,c
  2201   010D1A  0E02               	movlw	high main@ReturnHomeCards
  2202   010D1C  21F1               	addwfc	(main@CardCount+1)& (0+255),w,b
  2203   010D1E  6EDA               	movwf	fsr2h,c
  2204   010D20  C0B4  FFDF         	movff	main@card,indf2
  2205   010D24                     
  2206                           ; BSR set to: 1
  2207                           ;main.c: 161:             CardCount += 1;
  2208   010D24  4BF0               	infsnz	main@CardCount& (0+255),f,b
  2209   010D26  2BF1               	incf	(main@CardCount+1)& (0+255),f,b
  2210   010D28                     
  2211                           ; BSR set to: 1
  2212                           ;main.c: 163:             TimerCount = 0;
  2213   010D28  0E00               	movlw	0
  2214   010D2A  0100               	movlb	0	; () banked
  2215   010D2C  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  2216   010D2E  0E00               	movlw	0
  2217   010D30  6FB5               	movwf	main@TimerCount& (0+255),b
  2218   010D32                     
  2219                           ; BSR set to: 0
  2220                           ;main.c: 164:             if (stop_all == 0){fullSpeedAhead(&motorL, &motorR);}
  2221   010D32  51B9               	movf	main@stop_all& (0+255),w,b
  2222   010D34  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  2223   010D36  A4D8               	btfss	status,2,c
  2224   010D38  EFA0  F086         	goto	u2681
  2225   010D3C  EFA2  F086         	goto	u2680
  2226   010D40                     u2681:
  2227   010D40  EF6F  F085         	goto	l4976
  2228   010D44                     u2680:
  2229   010D44  EF65  F085         	goto	l4974
  2230   010D48  EF2E  F000         	goto	start
  2231   010D4C                     __end_of_main:
  2232                           	callstack 0
  2233                           
  2234 ;; *************** function _initUSART4 *****************
  2235 ;; Defined at:
  2236 ;;		line 6 in file "serial.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used: 1
  2256 ;; Hardware stack levels required when called: 1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text1
  2265   012CA6                     __ptext1:
  2266                           	callstack 0
  2267   012CA6                     _initUSART4:
  2268                           	callstack 29
  2269   012CA6                     
  2270                           ;serial.c: 10:     RC0PPS = 0x12;
  2271   012CA6  0E12               	movlw	18
  2272   012CA8  010E               	movlb	14	; () banked
  2273   012CAA  6F62               	movwf	98,b	;volatile
  2274                           
  2275                           ;serial.c: 11:     RX4PPS = 0x11;
  2276   012CAC  0E11               	movlw	17
  2277   012CAE  6F15               	movwf	21,b	;volatile
  2278   012CB0                     
  2279                           ; BSR set to: 14
  2280                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  2281   012CB0  8283               	bsf	131,1,c	;volatile
  2282   012CB2                     
  2283                           ; BSR set to: 14
  2284                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  2285   012CB2  97E9               	bcf	233,3,b	;volatile
  2286   012CB4                     
  2287                           ; BSR set to: 14
  2288                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  2289   012CB4  95E8               	bcf	232,2,b	;volatile
  2290                           
  2291                           ;serial.c: 17:     SP4BRGL = 51;
  2292   012CB6  0E33               	movlw	51
  2293   012CB8  6FE5               	movwf	229,b	;volatile
  2294                           
  2295                           ;serial.c: 18:     SP4BRGH = 0;
  2296   012CBA  0E00               	movlw	0
  2297   012CBC  6FE6               	movwf	230,b	;volatile
  2298   012CBE                     
  2299                           ; BSR set to: 14
  2300                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  2301   012CBE  89E7               	bsf	231,4,b	;volatile
  2302   012CC0                     
  2303                           ; BSR set to: 14
  2304                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  2305   012CC0  8BE8               	bsf	232,5,b	;volatile
  2306   012CC2                     
  2307                           ; BSR set to: 14
  2308                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  2309   012CC2  8FE7               	bsf	231,7,b	;volatile
  2310   012CC4                     
  2311                           ; BSR set to: 14
  2312   012CC4  0012               	return		;funcret
  2313   012CC6                     __end_of_initUSART4:
  2314                           	callstack 0
  2315                           
  2316 ;; *************** function _initDCmotorsPWM *****************
  2317 ;; Defined at:
  2318 ;;		line 6 in file "dc_motor.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used: 1
  2338 ;; Hardware stack levels required when called: 1
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text2
  2347   0125CC                     __ptext2:
  2348                           	callstack 0
  2349   0125CC                     _initDCmotorsPWM:
  2350                           	callstack 29
  2351   0125CC                     
  2352                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  2353   0125CC  9485               	bcf	133,2,c	;volatile
  2354                           
  2355                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2356   0125CE  9885               	bcf	133,4,c	;volatile
  2357                           
  2358                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  2359   0125D0  9E83               	bcf	131,7,c	;volatile
  2360                           
  2361                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  2362   0125D2  9C87               	bcf	135,6,c	;volatile
  2363   0125D4                     
  2364                           ;dc_motor.c: 14:     RE2PPS=0x05;
  2365   0125D4  0E05               	movlw	5
  2366   0125D6  010E               	movlb	14	; () banked
  2367   0125D8  6F74               	movwf	116,b	;volatile
  2368                           
  2369                           ;dc_motor.c: 15:     RE4PPS=0x06;
  2370   0125DA  0E06               	movlw	6
  2371   0125DC  6F76               	movwf	118,b	;volatile
  2372                           
  2373                           ;dc_motor.c: 16:     RC7PPS=0x07;
  2374   0125DE  0E07               	movlw	7
  2375   0125E0  6F69               	movwf	105,b	;volatile
  2376                           
  2377                           ;dc_motor.c: 17:     RG6PPS=0x08;
  2378   0125E2  0E08               	movlw	8
  2379   0125E4  6F88               	movwf	136,b	;volatile
  2380                           
  2381                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  2382   0125E6  50BD               	movf	189,w,c	;volatile
  2383   0125E8  0B8F               	andlw	-113
  2384   0125EA  0940               	iorlw	64
  2385   0125EC  6EBD               	movwf	189,c	;volatile
  2386                           
  2387                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  2388   0125EE  0EE0               	movlw	-32
  2389   0125F0  16BE               	andwf	190,f,c	;volatile
  2390                           
  2391                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  2392   0125F2  50BF               	movf	191,w,c	;volatile
  2393   0125F4  0BF0               	andlw	-16
  2394   0125F6  0901               	iorlw	1
  2395   0125F8  6EBF               	movwf	191,c	;volatile
  2396                           
  2397                           ;dc_motor.c: 26:     T2PR=99;
  2398   0125FA  0E63               	movlw	99
  2399   0125FC  6EBC               	movwf	188,c	;volatile
  2400   0125FE                     
  2401                           ; BSR set to: 14
  2402                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  2403   0125FE  8EBD               	bsf	189,7,c	;volatile
  2404                           
  2405                           ;dc_motor.c: 31:     CCPR1H=0;
  2406   012600  0E00               	movlw	0
  2407   012602  6EAA               	movwf	170,c	;volatile
  2408                           
  2409                           ;dc_motor.c: 32:     CCPR2H=0;
  2410   012604  0E00               	movlw	0
  2411   012606  6EA6               	movwf	166,c	;volatile
  2412                           
  2413                           ;dc_motor.c: 33:     CCPR3H=0;
  2414   012608  0E00               	movlw	0
  2415   01260A  010F               	movlb	15	; () banked
  2416   01260C  6F25               	movwf	37,b	;volatile
  2417                           
  2418                           ;dc_motor.c: 34:     CCPR4H=0;
  2419   01260E  0E00               	movlw	0
  2420   012610  6F21               	movwf	33,b	;volatile
  2421                           
  2422                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  2423   012612  0EFC               	movlw	-4
  2424   012614  16AD               	andwf	173,f,c	;volatile
  2425                           
  2426                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  2427   012616  0EF3               	movlw	-13
  2428   012618  16AD               	andwf	173,f,c	;volatile
  2429                           
  2430                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  2431   01261A  0ECF               	movlw	-49
  2432   01261C  16AD               	andwf	173,f,c	;volatile
  2433                           
  2434                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  2435   01261E  0E3F               	movlw	-193
  2436   012620  16AD               	andwf	173,f,c	;volatile
  2437   012622                     
  2438                           ; BSR set to: 15
  2439                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  2440   012622  88AB               	bsf	171,4,c	;volatile
  2441                           
  2442                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  2443   012624  50AB               	movf	171,w,c	;volatile
  2444   012626  0BF0               	andlw	-16
  2445   012628  090C               	iorlw	12
  2446   01262A  6EAB               	movwf	171,c	;volatile
  2447   01262C                     
  2448                           ; BSR set to: 15
  2449                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  2450   01262C  8EAB               	bsf	171,7,c	;volatile
  2451   01262E                     
  2452                           ; BSR set to: 15
  2453                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  2454   01262E  88A7               	bsf	167,4,c	;volatile
  2455                           
  2456                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  2457   012630  50A7               	movf	167,w,c	;volatile
  2458   012632  0BF0               	andlw	-16
  2459   012634  090C               	iorlw	12
  2460   012636  6EA7               	movwf	167,c	;volatile
  2461   012638                     
  2462                           ; BSR set to: 15
  2463                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2464   012638  8EA7               	bsf	167,7,c	;volatile
  2465   01263A                     
  2466                           ; BSR set to: 15
  2467                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2468   01263A  8926               	bsf	38,4,b	;volatile
  2469                           
  2470                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2471   01263C  5126               	movf	38,w,b	;volatile
  2472   01263E  0BF0               	andlw	-16
  2473   012640  090C               	iorlw	12
  2474   012642  6F26               	movwf	38,b	;volatile
  2475   012644                     
  2476                           ; BSR set to: 15
  2477                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2478   012644  8F26               	bsf	38,7,b	;volatile
  2479   012646                     
  2480                           ; BSR set to: 15
  2481                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2482   012646  8922               	bsf	34,4,b	;volatile
  2483                           
  2484                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2485   012648  5122               	movf	34,w,b	;volatile
  2486   01264A  0BF0               	andlw	-16
  2487   01264C  090C               	iorlw	12
  2488   01264E  6F22               	movwf	34,b	;volatile
  2489   012650                     
  2490                           ; BSR set to: 15
  2491                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2492   012650  8F22               	bsf	34,7,b	;volatile
  2493   012652                     
  2494                           ; BSR set to: 15
  2495   012652  0012               	return		;funcret
  2496   012654                     __end_of_initDCmotorsPWM:
  2497                           	callstack 0
  2498                           
  2499 ;; *************** function _color_click_init *****************
  2500 ;; Defined at:
  2501 ;;		line 5 in file "color.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;Total ram usage:        1 bytes
  2520 ;; Hardware stack levels used: 1
  2521 ;; Hardware stack levels required when called: 4
  2522 ;; This function calls:
  2523 ;;		_I2C_2_Master_Init
  2524 ;;		_color_writetoaddr
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text3
  2531   012B76                     __ptext3:
  2532                           	callstack 0
  2533   012B76                     _color_click_init:
  2534                           	callstack 26
  2535   012B76                     
  2536                           ;color.c: 8:     I2C_2_Master_Init();
  2537   012B76  ECED  F095         	call	_I2C_2_Master_Init	;wreg free
  2538   012B7A                     
  2539                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2540   012B7A  0E01               	movlw	1
  2541   012B7C  6E06               	movwf	color_writetoaddr@value^0,c
  2542   012B7E  0E00               	movlw	0
  2543   012B80  EC63  F096         	call	_color_writetoaddr
  2544   012B84                     
  2545                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2546   012B84  0E3F               	movlw	63
  2547   012B86  6E08               	movwf	??_color_click_init^0,c
  2548   012B88  0E55               	movlw	85
  2549   012B8A                     u2777:
  2550   012B8A  2EE8               	decfsz	wreg,f,c
  2551   012B8C  D7FE               	bra	u2777
  2552   012B8E  2E08               	decfsz	??_color_click_init^0,f,c
  2553   012B90  D7FC               	bra	u2777
  2554   012B92  F000               	nop	
  2555   012B94                     
  2556                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2557   012B94  0E03               	movlw	3
  2558   012B96  6E06               	movwf	color_writetoaddr@value^0,c
  2559   012B98  0E00               	movlw	0
  2560   012B9A  EC63  F096         	call	_color_writetoaddr
  2561   012B9E                     
  2562                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2563   012B9E  0ED5               	movlw	213
  2564   012BA0  6E06               	movwf	color_writetoaddr@value^0,c
  2565   012BA2  0E01               	movlw	1
  2566   012BA4  EC63  F096         	call	_color_writetoaddr
  2567   012BA8  0012               	return		;funcret
  2568   012BAA                     __end_of_color_click_init:
  2569                           	callstack 0
  2570                           
  2571 ;; *************** function _color_writetoaddr *****************
  2572 ;; Defined at:
  2573 ;;		line 21 in file "color.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  address         1    wreg     unsigned char 
  2576 ;;  value           1    5[COMRAM] unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  address         1    6[COMRAM] unsigned char 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2588 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;Total ram usage:        2 bytes
  2593 ;; Hardware stack levels used: 1
  2594 ;; Hardware stack levels required when called: 3
  2595 ;; This function calls:
  2596 ;;		_I2C_2_Master_Start
  2597 ;;		_I2C_2_Master_Stop
  2598 ;;		_I2C_2_Master_Write
  2599 ;; This function is called by:
  2600 ;;		_color_click_init
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text4
  2605   012CC6                     __ptext4:
  2606                           	callstack 0
  2607   012CC6                     _color_writetoaddr:
  2608                           	callstack 26
  2609                           
  2610                           ;incstack = 0
  2611                           ;color_writetoaddr@address stored from wreg
  2612   012CC6  6E07               	movwf	color_writetoaddr@address^0,c
  2613   012CC8                     
  2614                           ;color.c: 22:     I2C_2_Master_Start();
  2615   012CC8  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  2616                           
  2617                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2618   012CCC  0E52               	movlw	82
  2619   012CCE  EC8E  F096         	call	_I2C_2_Master_Write
  2620                           
  2621                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2622   012CD2  5007               	movf	color_writetoaddr@address^0,w,c
  2623   012CD4  0980               	iorlw	128
  2624   012CD6  EC8E  F096         	call	_I2C_2_Master_Write
  2625                           
  2626                           ;color.c: 25:     I2C_2_Master_Write(value);
  2627   012CDA  5006               	movf	color_writetoaddr@value^0,w,c
  2628   012CDC  EC8E  F096         	call	_I2C_2_Master_Write
  2629                           
  2630                           ;color.c: 26:     I2C_2_Master_Stop();
  2631   012CE0  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  2632   012CE4  0012               	return		;funcret
  2633   012CE6                     __end_of_color_writetoaddr:
  2634                           	callstack 0
  2635                           
  2636 ;; *************** function _I2C_2_Master_Init *****************
  2637 ;; Defined at:
  2638 ;;		line 4 in file "i2c.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;Total ram usage:        0 bytes
  2657 ;; Hardware stack levels used: 1
  2658 ;; Hardware stack levels required when called: 1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_color_click_init
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text5
  2668   012BDA                     __ptext5:
  2669                           	callstack 0
  2670   012BDA                     _I2C_2_Master_Init:
  2671                           	callstack 28
  2672   012BDA                     
  2673                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2674   012BDA  010E               	movlb	14	; () banked
  2675   012BDC  51D9               	movf	217,w,b	;volatile
  2676   012BDE  0BF0               	andlw	-16
  2677   012BE0  0908               	iorlw	8
  2678   012BE2  6FD9               	movwf	217,b	;volatile
  2679   012BE4                     
  2680                           ; BSR set to: 14
  2681                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2682   012BE4  8BD9               	bsf	217,5,b	;volatile
  2683                           
  2684                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2685   012BE6  0E9F               	movlw	159
  2686   012BE8  6FD6               	movwf	214,b	;volatile
  2687   012BEA                     
  2688                           ; BSR set to: 14
  2689                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2690   012BEA  8A84               	bsf	132,5,c	;volatile
  2691   012BEC                     
  2692                           ; BSR set to: 14
  2693                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2694   012BEC  8C84               	bsf	132,6,c	;volatile
  2695   012BEE                     
  2696                           ; BSR set to: 14
  2697                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2698   012BEE  9BA7               	bcf	167,5,b	;volatile
  2699   012BF0                     
  2700                           ; BSR set to: 14
  2701                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2702   012BF0  9DA7               	bcf	167,6,b	;volatile
  2703                           
  2704                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2705   012BF2  0E1D               	movlw	29
  2706   012BF4  6F1D               	movwf	29,b	;volatile
  2707                           
  2708                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2709   012BF6  0E1E               	movlw	30
  2710   012BF8  6F1C               	movwf	28,b	;volatile
  2711                           
  2712                           ;i2c.c: 18:   RD5PPS=0x1C;
  2713   012BFA  0E1C               	movlw	28
  2714   012BFC  6F6F               	movwf	111,b	;volatile
  2715                           
  2716                           ;i2c.c: 19:   RD6PPS=0x1B;
  2717   012BFE  0E1B               	movlw	27
  2718   012C00  6F70               	movwf	112,b	;volatile
  2719   012C02                     
  2720                           ; BSR set to: 14
  2721   012C02  0012               	return		;funcret
  2722   012C04                     __end_of_I2C_2_Master_Init:
  2723                           	callstack 0
  2724                           
  2725 ;; *************** function _clear_read_calibration *****************
  2726 ;; Defined at:
  2727 ;;		line 11 in file "colour_identify.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2730 ;;		 -> main@buf(150), 
  2731 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2732 ;;		 -> main@clear_read(2), 
  2733 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2734 ;;		 -> main@clear_read_check(2), 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  i               2   45[BANK0 ] int 
  2737 ;;  i               2   43[BANK0 ] int 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2747 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2750 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2751 ;;Total ram usage:       14 bytes
  2752 ;; Hardware stack levels used: 1
  2753 ;; Hardware stack levels required when called: 9
  2754 ;; This function calls:
  2755 ;;		_color_read_Clear
  2756 ;;		_sendStringSerial4
  2757 ;;		_sprintf
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text6
  2764   012068                     __ptext6:
  2765                           	callstack 0
  2766   012068                     _clear_read_calibration:
  2767                           	callstack 21
  2768   012068                     
  2769                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2770   012068  0E00               	movlw	0
  2771   01206A  0100               	movlb	0	; () banked
  2772   01206C  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2773   01206E  0E00               	movlw	0
  2774   012070  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2775   012072                     l4738:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2779   012072  ECE4  F094         	call	_color_read_Clear	;wreg free
  2780   012076  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2781   01207A  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2782   01207E  C008  FFDE         	movff	?_color_read_Clear,postinc2
  2783   012082  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  2784   012086                     
  2785                           ;colour_identify.c: 15:     }
  2786   012086  0100               	movlb	0	; () banked
  2787   012088  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2788   01208A  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2789   01208C                     
  2790                           ; BSR set to: 0
  2791   01208C  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2792   01208E  EF52  F090         	goto	u2511
  2793   012092  0EF5               	movlw	245
  2794   012094  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2795   012096  0E01               	movlw	1
  2796   012098  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2797   01209A  A0D8               	btfss	status,0,c
  2798   01209C  EF52  F090         	goto	u2511
  2799   0120A0  EF54  F090         	goto	u2510
  2800   0120A4                     u2511:
  2801   0120A4  EF39  F090         	goto	l4738
  2802   0120A8                     u2510:
  2803   0120A8                     
  2804                           ; BSR set to: 0
  2805                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2806   0120A8  0E00               	movlw	0
  2807   0120AA  6F8E               	movwf	(clear_read_calibration@i_1641+1)& (0+255),b
  2808   0120AC  0E00               	movlw	0
  2809   0120AE  6F8D               	movwf	clear_read_calibration@i_1641& (0+255),b
  2810   0120B0                     l4750:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2814   0120B0  ECE4  F094         	call	_color_read_Clear	;wreg free
  2815   0120B4  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2816   0120B8  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2817   0120BC  5008               	movf	?_color_read_Clear^0,w,c
  2818   0120BE  26DE               	addwf	postinc2,f,c
  2819   0120C0  5009               	movf	(?_color_read_Clear+1)^0,w,c
  2820   0120C2  22DD               	addwfc	postdec2,f,c
  2821   0120C4                     
  2822                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2823   0120C4  0E11               	movlw	17
  2824   0120C6  0100               	movlb	0	; () banked
  2825   0120C8  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2826   0120CA  0E3C               	movlw	60
  2827   0120CC  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2828   0120CE  0ECB               	movlw	203
  2829   0120D0                     u2787:
  2830   0120D0  2EE8               	decfsz	wreg,f,c
  2831   0120D2  D7FE               	bra	u2787
  2832   0120D4  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2833   0120D6  D7FC               	bra	u2787
  2834   0120D8  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2835   0120DA  D7FA               	bra	u2787
  2836   0120DC                     
  2837                           ;colour_identify.c: 20:     }
  2838   0120DC  0100               	movlb	0	; () banked
  2839   0120DE  4B8D               	infsnz	clear_read_calibration@i_1641& (0+255),f,b
  2840   0120E0  2B8E               	incf	(clear_read_calibration@i_1641+1)& (0+255),f,b
  2841   0120E2                     
  2842                           ; BSR set to: 0
  2843   0120E2  BF8E               	btfsc	(clear_read_calibration@i_1641+1)& (0+255),7,b
  2844   0120E4  EF7D  F090         	goto	u2521
  2845   0120E8  518E               	movf	(clear_read_calibration@i_1641+1)& (0+255),w,b
  2846   0120EA  E109               	bnz	u2520
  2847   0120EC  0E03               	movlw	3
  2848   0120EE  5D8D               	subwf	clear_read_calibration@i_1641& (0+255),w,b
  2849   0120F0  A0D8               	btfss	status,0,c
  2850   0120F2  EF7D  F090         	goto	u2521
  2851   0120F6  EF7F  F090         	goto	u2520
  2852   0120FA                     u2521:
  2853   0120FA  EF58  F090         	goto	l4750
  2854   0120FE                     u2520:
  2855   0120FE                     
  2856                           ; BSR set to: 0
  2857                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2858   0120FE  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2859   012102  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2860   012106  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2861   01210A  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2862   01210E  90D8               	bcf	status,0,c
  2863   012110  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2864   012112  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2865   012114  90D8               	bcf	status,0,c
  2866   012116  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2867   012118  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2868   01211A  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2869   01211E  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2870   012122  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2871   012126  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2872   01212A                     
  2873                           ; BSR set to: 0
  2874                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2875   01212A  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2876   01212E  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2877   012132  0ECE               	movlw	low STR_2
  2878   012134  6F68               	movwf	sprintf@fmt& (0+255),b
  2879   012136  0EFF               	movlw	high STR_2
  2880   012138  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2881   01213A  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2882   01213E  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2883   012142  EC6B  F094         	call	_sprintf	;wreg free
  2884   012146                     
  2885                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2886   012146  C081  F005         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2887   01214A  C082  F006         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2888   01214E  ECD5  F095         	call	_sendStringSerial4	;wreg free
  2889   012152                     
  2890                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2891   012152  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2892   012156  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2893   01215A  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2894   01215E  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2895   012162  0E20               	movlw	32
  2896   012164  0100               	movlb	0	; () banked
  2897   012166  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2898   012168  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2899   01216A  0E03               	movlw	3
  2900   01216C  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2901   01216E  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2902   012170  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2903   012174  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2904   012178  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2905   01217C  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2906   012180                     
  2907                           ; BSR set to: 0
  2908   012180  0012               	return		;funcret
  2909   012182                     __end_of_clear_read_calibration:
  2910                           	callstack 0
  2911                           
  2912 ;; *************** function _card_response *****************
  2913 ;; Defined at:
  2914 ;;		line 325 in file "colour_identify.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  buf             2   60[BANK0 ] PTR unsigned char 
  2917 ;;		 -> main@buf(150), 
  2918 ;;  clear_read      2   62[BANK0 ] PTR unsigned int 
  2919 ;;		 -> main@clear_read(2), 
  2920 ;;  red_read        2   64[BANK0 ] PTR unsigned int 
  2921 ;;		 -> main@red_read(2), 
  2922 ;;  green_read      2   66[BANK0 ] PTR unsigned int 
  2923 ;;		 -> main@green_read(2), 
  2924 ;;  blue_read       2   68[BANK0 ] PTR unsigned int 
  2925 ;;		 -> main@blue_read(2), 
  2926 ;;  expected_val    2   70[BANK0 ] PTR unsigned int [9]
  2927 ;;		 -> main@expected_values(72), 
  2928 ;;  card            1   72[BANK0 ] enum E14551
  2929 ;;  mL              2   73[BANK0 ] PTR struct DC_motor
  2930 ;;		 -> main@motorL(9), 
  2931 ;;  mR              2   75[BANK0 ] PTR struct DC_motor
  2932 ;;		 -> main@motorR(9), 
  2933 ;;  ReturnHomeTi    2   77[BANK0 ] PTR unsigned int 
  2934 ;;		 -> main@ReturnHomeTimes(60), 
  2935 ;;  ReturnHomeCa    2   79[BANK0 ] PTR enum E14551
  2936 ;;		 -> main@ReturnHomeCards(30), 
  2937 ;;  stop_all        2   81[BANK0 ] PTR unsigned int 
  2938 ;;		 -> main@stop_all(2), 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  normalised_v   72    0[BANK1 ] unsigned int [9][4]
  2941 ;;  master_close   18   72[BANK1 ] unsigned int [9]
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      enum E14569
  2944 ;; Registers used:
  2945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2951 ;;      Params:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2952 ;;      Locals:         0       0      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;      Totals:         0      23      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;Total ram usage:      113 bytes
  2956 ;; Hardware stack levels used: 1
  2957 ;; Hardware stack levels required when called: 10
  2958 ;; This function calls:
  2959 ;;		_collect_avg_readings
  2960 ;;		_determine_card
  2961 ;;		_make_master_closeness
  2962 ;;		_motor_response
  2963 ;;		_normalise_readings
  2964 ;;		_sendStringSerial4
  2965 ;;		_sprintf
  2966 ;; This function is called by:
  2967 ;;		_main
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text7
  2972   011AC8                     __ptext7:
  2973                           	callstack 0
  2974   011AC8                     _card_response:
  2975                           	callstack 20
  2976   011AC8                     
  2977                           ;colour_identify.c: 329:     unsigned int normalised_values[4][9];;colour_identify.c: 33
      +                          0:     unsigned int master_closeness[9];;colour_identify.c: 332:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2978   011AC8  C09E  F00F         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2979   011ACC  C09F  F010         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2980   011AD0  C0A0  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  2981   011AD4  C0A1  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2982   011AD8  C0A2  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  2983   011ADC  C0A3  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2984   011AE0  C0A4  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2985   011AE4  C0A5  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2986   011AE8  EC63  F08B         	call	_collect_avg_readings	;wreg free
  2987   011AEC                     
  2988                           ;colour_identify.c: 333:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2989   011AEC  C09C  F066         	movff	card_response@buf,sprintf@s
  2990   011AF0  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  2991   011AF4  0E25               	movlw	low STR_11
  2992   011AF6  0100               	movlb	0	; () banked
  2993   011AF8  6F68               	movwf	sprintf@fmt& (0+255),b
  2994   011AFA  0EFF               	movlw	high STR_11
  2995   011AFC  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2996   011AFE  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  2997   011B02  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  2998   011B06  CFDE F06A          	movff	postinc2,?_sprintf+4
  2999   011B0A  CFDD F06B          	movff	postdec2,?_sprintf+5
  3000   011B0E  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3001   011B12  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3002   011B16  CFDE F06C          	movff	postinc2,?_sprintf+6
  3003   011B1A  CFDD F06D          	movff	postdec2,?_sprintf+7
  3004   011B1E  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3005   011B22  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3006   011B26  CFDE F06E          	movff	postinc2,?_sprintf+8
  3007   011B2A  CFDD F06F          	movff	postdec2,?_sprintf+9
  3008   011B2E  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3009   011B32  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3010   011B36  CFDE F070          	movff	postinc2,?_sprintf+10
  3011   011B3A  CFDD F071          	movff	postdec2,?_sprintf+11
  3012   011B3E  EC6B  F094         	call	_sprintf	;wreg free
  3013   011B42                     
  3014                           ;colour_identify.c: 334:     sendStringSerial4(buf);
  3015   011B42  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3016   011B46  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3017   011B4A  ECD5  F095         	call	_sendStringSerial4	;wreg free
  3018   011B4E                     
  3019                           ;colour_identify.c: 336:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  3020   011B4E  C09C  F01A         	movff	card_response@buf,normalise_readings@buf
  3021   011B52  C09D  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  3022   011B56  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  3023   011B5A  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  3024   011B5E  CFDE F01C          	movff	postinc2,normalise_readings@clear_read
  3025   011B62  CFDD F01D          	movff	postdec2,normalise_readings@clear_read+1
  3026   011B66  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3027   011B6A  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3028   011B6E  CFDE F01E          	movff	postinc2,normalise_readings@red_read
  3029   011B72  CFDD F01F          	movff	postdec2,normalise_readings@red_read+1
  3030   011B76  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3031   011B7A  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3032   011B7E  CFDE F020          	movff	postinc2,normalise_readings@green_read
  3033   011B82  CFDD F021          	movff	postdec2,normalise_readings@green_read+1
  3034   011B86  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3035   011B8A  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3036   011B8E  CFDE F022          	movff	postinc2,normalise_readings@blue_read
  3037   011B92  CFDD F023          	movff	postdec2,normalise_readings@blue_read+1
  3038   011B96  C0A6  F024         	movff	card_response@expected_values,normalise_readings@expected_values
  3039   011B9A  C0A7  F025         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  3040   011B9E  0E00               	movlw	low card_response@normalised_values
  3041   011BA0  6E26               	movwf	normalise_readings@normalised_values^0,c
  3042   011BA2  0E01               	movlw	high card_response@normalised_values
  3043   011BA4  6E27               	movwf	(normalise_readings@normalised_values+1)^0,c
  3044   011BA6  ECB3  F088         	call	_normalise_readings	;wreg free
  3045   011BAA                     
  3046                           ;colour_identify.c: 338:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  3047   011BAA  C09C  F004         	movff	card_response@buf,make_master_closeness@buf
  3048   011BAE  C09D  F005         	movff	card_response@buf+1,make_master_closeness@buf+1
  3049   011BB2  0E00               	movlw	low card_response@normalised_values
  3050   011BB4  6E06               	movwf	make_master_closeness@normalised_values^0,c
  3051   011BB6  0E01               	movlw	high card_response@normalised_values
  3052   011BB8  6E07               	movwf	(make_master_closeness@normalised_values+1)^0,c
  3053   011BBA  0E48               	movlw	low card_response@master_closeness
  3054   011BBC  6E08               	movwf	make_master_closeness@master_closeness^0,c
  3055   011BBE  0E01               	movlw	high card_response@master_closeness
  3056   011BC0  6E09               	movwf	(make_master_closeness@master_closeness+1)^0,c
  3057   011BC2  ECC1  F090         	call	_make_master_closeness	;wreg free
  3058   011BC6                     
  3059                           ;colour_identify.c: 340:     card = determine_card(master_closeness);
  3060   011BC6  0E48               	movlw	low card_response@master_closeness
  3061   011BC8  6E04               	movwf	determine_card@master_closeness^0,c
  3062   011BCA  0E01               	movlw	high card_response@master_closeness
  3063   011BCC  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  3064   011BCE  EC2A  F093         	call	_determine_card	;wreg free
  3065   011BD2  0100               	movlb	0	; () banked
  3066   011BD4  6FA8               	movwf	card_response@card& (0+255),b
  3067   011BD6                     
  3068                           ; BSR set to: 0
  3069                           ;colour_identify.c: 341:     sprintf(buf, "CARD %d \n", card);
  3070   011BD6  C09C  F066         	movff	card_response@buf,sprintf@s
  3071   011BDA  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  3072   011BDE  0EF4               	movlw	low STR_12
  3073   011BE0  6F68               	movwf	sprintf@fmt& (0+255),b
  3074   011BE2  0EFF               	movlw	high STR_12
  3075   011BE4  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3076   011BE6  C0A8  F06A         	movff	card_response@card,?_sprintf+4
  3077   011BEA  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  3078   011BEC  EC6B  F094         	call	_sprintf	;wreg free
  3079   011BF0                     
  3080                           ;colour_identify.c: 342:     sendStringSerial4(buf);
  3081   011BF0  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3082   011BF4  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3083   011BF8  ECD5  F095         	call	_sendStringSerial4	;wreg free
  3084   011BFC                     
  3085                           ;colour_identify.c: 344:     motor_response(buf, card, mL, mR, ReturnHomeTimes, ReturnHo
      +                          meCards, stop_all);
  3086   011BFC  C09C  F081         	movff	card_response@buf,motor_response@buf
  3087   011C00  C09D  F082         	movff	card_response@buf+1,motor_response@buf+1
  3088   011C04  C0A8  F083         	movff	card_response@card,motor_response@card
  3089   011C08  C0A9  F084         	movff	card_response@mL,motor_response@mL
  3090   011C0C  C0AA  F085         	movff	card_response@mL+1,motor_response@mL+1
  3091   011C10  C0AB  F086         	movff	card_response@mR,motor_response@mR
  3092   011C14  C0AC  F087         	movff	card_response@mR+1,motor_response@mR+1
  3093   011C18  C0AD  F088         	movff	card_response@ReturnHomeTimes,motor_response@ReturnHomeTimes
  3094   011C1C  C0AE  F089         	movff	card_response@ReturnHomeTimes+1,motor_response@ReturnHomeTimes+1
  3095   011C20  C0AF  F08A         	movff	card_response@ReturnHomeCards,motor_response@ReturnHomeCards
  3096   011C24  C0B0  F08B         	movff	card_response@ReturnHomeCards+1,motor_response@ReturnHomeCards+1
  3097   011C28  C0B1  F08C         	movff	card_response@stop_all,motor_response@stop_all
  3098   011C2C  C0B2  F08D         	movff	card_response@stop_all+1,motor_response@stop_all+1
  3099   011C30  EC00  F080         	call	_motor_response	;wreg free
  3100   011C34                     
  3101                           ;colour_identify.c: 346:     return card;
  3102   011C34  0100               	movlb	0	; () banked
  3103   011C36  51A8               	movf	card_response@card& (0+255),w,b
  3104   011C38                     
  3105                           ; BSR set to: 0
  3106   011C38  0012               	return		;funcret
  3107   011C3A                     __end_of_card_response:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _normalise_readings *****************
  3111 ;; Defined at:
  3112 ;;		line 70 in file "colour_identify.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  buf             2   25[COMRAM] PTR unsigned char 
  3115 ;;		 -> main@buf(150), 
  3116 ;;  clear_read      2   27[COMRAM] unsigned int 
  3117 ;;  red_read        2   29[COMRAM] unsigned int 
  3118 ;;  green_read      2   31[COMRAM] unsigned int 
  3119 ;;  blue_read       2   33[COMRAM] unsigned int 
  3120 ;;  expected_val    2   35[COMRAM] PTR unsigned int [9]
  3121 ;;		 -> main@expected_values(72), 
  3122 ;;  normalised_v    2   37[COMRAM] PTR unsigned int [9]
  3123 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  difference      2   47[COMRAM] unsigned int 
  3126 ;;  i               1   49[COMRAM] enum E14551
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3136 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3137 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3138 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3139 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;Total ram usage:       25 bytes
  3141 ;; Hardware stack levels used: 1
  3142 ;; Hardware stack levels required when called: 2
  3143 ;; This function calls:
  3144 ;;		___lwdiv
  3145 ;;		___wmul
  3146 ;;		_abs
  3147 ;; This function is called by:
  3148 ;;		_card_response
  3149 ;;		_card_response_easy
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text8
  3154   011166                     __ptext8:
  3155                           	callstack 0
  3156   011166                     _normalise_readings:
  3157                           	callstack 27
  3158   011166                     
  3159                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  3160   011166  0E00               	movlw	0
  3161   011168  6E32               	movwf	normalise_readings@i^0,c
  3162   01116A                     l4446:
  3163                           
  3164                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3165   01116A  5032               	movf	normalise_readings@i^0,w,c
  3166   01116C  0D02               	mullw	2
  3167   01116E  CFF3 F028          	movff	prodl,??_normalise_readings
  3168   011172  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3169   011176  5028               	movf	??_normalise_readings^0,w,c
  3170   011178  2424               	addwf	normalise_readings@expected_values^0,w,c
  3171   01117A  6ED9               	movwf	fsr2l,c
  3172   01117C  5029               	movf	(??_normalise_readings+1)^0,w,c
  3173   01117E  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3174   011180  6EDA               	movwf	fsr2h,c
  3175   011182  CFDE F02A          	movff	postinc2,??_normalise_readings+2
  3176   011186  CFDD F02B          	movff	postdec2,??_normalise_readings+3
  3177   01118A  502A               	movf	(??_normalise_readings+2)^0,w,c
  3178   01118C  5C1E               	subwf	normalise_readings@red_read^0,w,c
  3179   01118E  6E16               	movwf	abs@a^0,c
  3180   011190  502B               	movf	(??_normalise_readings+3)^0,w,c
  3181   011192  581F               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3182   011194  6E17               	movwf	(abs@a+1)^0,c
  3183   011196  EC9B  F095         	call	_abs	;wreg free
  3184   01119A  C016  F030         	movff	?_abs,normalise_readings@difference
  3185   01119E  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3186                           
  3187                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3188   0111A2  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3189   0111A6  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3190   0111AA  0E00               	movlw	0
  3191   0111AC  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3192   0111AE  0E64               	movlw	100
  3193   0111B0  6E06               	movwf	___wmul@multiplicand^0,c
  3194   0111B2  EC40  F096         	call	___wmul	;wreg free
  3195   0111B6  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3196   0111BA  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3197   0111BE  5032               	movf	normalise_readings@i^0,w,c
  3198   0111C0  0D02               	mullw	2
  3199   0111C2  CFF3 F028          	movff	prodl,??_normalise_readings
  3200   0111C6  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3201   0111CA  5028               	movf	??_normalise_readings^0,w,c
  3202   0111CC  2424               	addwf	normalise_readings@expected_values^0,w,c
  3203   0111CE  6ED9               	movwf	fsr2l,c
  3204   0111D0  5029               	movf	(??_normalise_readings+1)^0,w,c
  3205   0111D2  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3206   0111D4  6EDA               	movwf	fsr2h,c
  3207   0111D6  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3208   0111DA  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3209   0111DE  ECA7  F093         	call	___lwdiv	;wreg free
  3210   0111E2  5032               	movf	normalise_readings@i^0,w,c
  3211   0111E4  0D02               	mullw	2
  3212   0111E6  CFF3 F02A          	movff	prodl,??_normalise_readings+2
  3213   0111EA  CFF4 F02B          	movff	prodh,??_normalise_readings+3
  3214   0111EE  502A               	movf	(??_normalise_readings+2)^0,w,c
  3215   0111F0  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3216   0111F2  6ED9               	movwf	fsr2l,c
  3217   0111F4  502B               	movf	(??_normalise_readings+3)^0,w,c
  3218   0111F6  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3219   0111F8  6EDA               	movwf	fsr2h,c
  3220   0111FA  C00A  FFDE         	movff	?___lwdiv,postinc2
  3221   0111FE  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3222                           
  3223                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3224   011202  5032               	movf	normalise_readings@i^0,w,c
  3225   011204  0D02               	mullw	2
  3226   011206  CFF3 F028          	movff	prodl,??_normalise_readings
  3227   01120A  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3228   01120E  5028               	movf	??_normalise_readings^0,w,c
  3229   011210  2424               	addwf	normalise_readings@expected_values^0,w,c
  3230   011212  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3231   011214  5029               	movf	(??_normalise_readings+1)^0,w,c
  3232   011216  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3233   011218  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3234   01121A  0E12               	movlw	18
  3235   01121C  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3236   01121E  6ED9               	movwf	fsr2l,c
  3237   011220  0E00               	movlw	0
  3238   011222  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3239   011224  6EDA               	movwf	fsr2h,c
  3240   011226  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3241   01122A  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3242   01122E  502C               	movf	(??_normalise_readings+4)^0,w,c
  3243   011230  5C20               	subwf	normalise_readings@green_read^0,w,c
  3244   011232  6E16               	movwf	abs@a^0,c
  3245   011234  502D               	movf	(??_normalise_readings+5)^0,w,c
  3246   011236  5821               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3247   011238  6E17               	movwf	(abs@a+1)^0,c
  3248   01123A  EC9B  F095         	call	_abs	;wreg free
  3249   01123E  C016  F030         	movff	?_abs,normalise_readings@difference
  3250   011242  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3251                           
  3252                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3253   011246  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3254   01124A  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3255   01124E  0E00               	movlw	0
  3256   011250  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3257   011252  0E64               	movlw	100
  3258   011254  6E06               	movwf	___wmul@multiplicand^0,c
  3259   011256  EC40  F096         	call	___wmul	;wreg free
  3260   01125A  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3261   01125E  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3262   011262  5032               	movf	normalise_readings@i^0,w,c
  3263   011264  0D02               	mullw	2
  3264   011266  CFF3 F028          	movff	prodl,??_normalise_readings
  3265   01126A  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3266   01126E  5028               	movf	??_normalise_readings^0,w,c
  3267   011270  2424               	addwf	normalise_readings@expected_values^0,w,c
  3268   011272  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3269   011274  5029               	movf	(??_normalise_readings+1)^0,w,c
  3270   011276  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3271   011278  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3272   01127A  0E12               	movlw	18
  3273   01127C  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3274   01127E  6ED9               	movwf	fsr2l,c
  3275   011280  0E00               	movlw	0
  3276   011282  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3277   011284  6EDA               	movwf	fsr2h,c
  3278   011286  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3279   01128A  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3280   01128E  ECA7  F093         	call	___lwdiv	;wreg free
  3281   011292  5032               	movf	normalise_readings@i^0,w,c
  3282   011294  0D02               	mullw	2
  3283   011296  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3284   01129A  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3285   01129E  502C               	movf	(??_normalise_readings+4)^0,w,c
  3286   0112A0  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3287   0112A2  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3288   0112A4  502D               	movf	(??_normalise_readings+5)^0,w,c
  3289   0112A6  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3290   0112A8  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3291   0112AA  0E12               	movlw	18
  3292   0112AC  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3293   0112AE  6ED9               	movwf	fsr2l,c
  3294   0112B0  0E00               	movlw	0
  3295   0112B2  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3296   0112B4  6EDA               	movwf	fsr2h,c
  3297   0112B6  C00A  FFDE         	movff	?___lwdiv,postinc2
  3298   0112BA  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3299                           
  3300                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  3301   0112BE  5032               	movf	normalise_readings@i^0,w,c
  3302   0112C0  0D02               	mullw	2
  3303   0112C2  CFF3 F028          	movff	prodl,??_normalise_readings
  3304   0112C6  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3305   0112CA  5028               	movf	??_normalise_readings^0,w,c
  3306   0112CC  2424               	addwf	normalise_readings@expected_values^0,w,c
  3307   0112CE  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3308   0112D0  5029               	movf	(??_normalise_readings+1)^0,w,c
  3309   0112D2  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3310   0112D4  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3311   0112D6  0E24               	movlw	36
  3312   0112D8  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3313   0112DA  6ED9               	movwf	fsr2l,c
  3314   0112DC  0E00               	movlw	0
  3315   0112DE  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3316   0112E0  6EDA               	movwf	fsr2h,c
  3317   0112E2  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3318   0112E6  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3319   0112EA  502C               	movf	(??_normalise_readings+4)^0,w,c
  3320   0112EC  5C22               	subwf	normalise_readings@blue_read^0,w,c
  3321   0112EE  6E16               	movwf	abs@a^0,c
  3322   0112F0  502D               	movf	(??_normalise_readings+5)^0,w,c
  3323   0112F2  5823               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3324   0112F4  6E17               	movwf	(abs@a+1)^0,c
  3325   0112F6  EC9B  F095         	call	_abs	;wreg free
  3326   0112FA  C016  F030         	movff	?_abs,normalise_readings@difference
  3327   0112FE  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3328                           
  3329                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3330   011302  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3331   011306  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3332   01130A  0E00               	movlw	0
  3333   01130C  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3334   01130E  0E64               	movlw	100
  3335   011310  6E06               	movwf	___wmul@multiplicand^0,c
  3336   011312  EC40  F096         	call	___wmul	;wreg free
  3337   011316  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3338   01131A  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3339   01131E  5032               	movf	normalise_readings@i^0,w,c
  3340   011320  0D02               	mullw	2
  3341   011322  CFF3 F028          	movff	prodl,??_normalise_readings
  3342   011326  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3343   01132A  5028               	movf	??_normalise_readings^0,w,c
  3344   01132C  2424               	addwf	normalise_readings@expected_values^0,w,c
  3345   01132E  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3346   011330  5029               	movf	(??_normalise_readings+1)^0,w,c
  3347   011332  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3348   011334  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3349   011336  0E24               	movlw	36
  3350   011338  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3351   01133A  6ED9               	movwf	fsr2l,c
  3352   01133C  0E00               	movlw	0
  3353   01133E  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3354   011340  6EDA               	movwf	fsr2h,c
  3355   011342  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3356   011346  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3357   01134A  ECA7  F093         	call	___lwdiv	;wreg free
  3358   01134E  5032               	movf	normalise_readings@i^0,w,c
  3359   011350  0D02               	mullw	2
  3360   011352  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3361   011356  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3362   01135A  502C               	movf	(??_normalise_readings+4)^0,w,c
  3363   01135C  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3364   01135E  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3365   011360  502D               	movf	(??_normalise_readings+5)^0,w,c
  3366   011362  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3367   011364  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3368   011366  0E24               	movlw	36
  3369   011368  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3370   01136A  6ED9               	movwf	fsr2l,c
  3371   01136C  0E00               	movlw	0
  3372   01136E  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3373   011370  6EDA               	movwf	fsr2h,c
  3374   011372  C00A  FFDE         	movff	?___lwdiv,postinc2
  3375   011376  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3376                           
  3377                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  3378   01137A  5032               	movf	normalise_readings@i^0,w,c
  3379   01137C  0D02               	mullw	2
  3380   01137E  CFF3 F028          	movff	prodl,??_normalise_readings
  3381   011382  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3382   011386  5028               	movf	??_normalise_readings^0,w,c
  3383   011388  2424               	addwf	normalise_readings@expected_values^0,w,c
  3384   01138A  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3385   01138C  5029               	movf	(??_normalise_readings+1)^0,w,c
  3386   01138E  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3387   011390  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3388   011392  0E36               	movlw	54
  3389   011394  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3390   011396  6ED9               	movwf	fsr2l,c
  3391   011398  0E00               	movlw	0
  3392   01139A  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3393   01139C  6EDA               	movwf	fsr2h,c
  3394   01139E  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3395   0113A2  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3396   0113A6  502C               	movf	(??_normalise_readings+4)^0,w,c
  3397   0113A8  5C1C               	subwf	normalise_readings@clear_read^0,w,c
  3398   0113AA  6E16               	movwf	abs@a^0,c
  3399   0113AC  502D               	movf	(??_normalise_readings+5)^0,w,c
  3400   0113AE  581D               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3401   0113B0  6E17               	movwf	(abs@a+1)^0,c
  3402   0113B2  EC9B  F095         	call	_abs	;wreg free
  3403   0113B6  C016  F030         	movff	?_abs,normalise_readings@difference
  3404   0113BA  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3405                           
  3406                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  3407   0113BE  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3408   0113C2  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3409   0113C6  0E00               	movlw	0
  3410   0113C8  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3411   0113CA  0E64               	movlw	100
  3412   0113CC  6E06               	movwf	___wmul@multiplicand^0,c
  3413   0113CE  EC40  F096         	call	___wmul	;wreg free
  3414   0113D2  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3415   0113D6  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3416   0113DA  5032               	movf	normalise_readings@i^0,w,c
  3417   0113DC  0D02               	mullw	2
  3418   0113DE  CFF3 F028          	movff	prodl,??_normalise_readings
  3419   0113E2  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3420   0113E6  5028               	movf	??_normalise_readings^0,w,c
  3421   0113E8  2424               	addwf	normalise_readings@expected_values^0,w,c
  3422   0113EA  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3423   0113EC  5029               	movf	(??_normalise_readings+1)^0,w,c
  3424   0113EE  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3425   0113F0  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3426   0113F2  0E36               	movlw	54
  3427   0113F4  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3428   0113F6  6ED9               	movwf	fsr2l,c
  3429   0113F8  0E00               	movlw	0
  3430   0113FA  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3431   0113FC  6EDA               	movwf	fsr2h,c
  3432   0113FE  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3433   011402  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3434   011406  ECA7  F093         	call	___lwdiv	;wreg free
  3435   01140A  5032               	movf	normalise_readings@i^0,w,c
  3436   01140C  0D02               	mullw	2
  3437   01140E  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3438   011412  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3439   011416  502C               	movf	(??_normalise_readings+4)^0,w,c
  3440   011418  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3441   01141A  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3442   01141C  502D               	movf	(??_normalise_readings+5)^0,w,c
  3443   01141E  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3444   011420  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3445   011422  0E36               	movlw	54
  3446   011424  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3447   011426  6ED9               	movwf	fsr2l,c
  3448   011428  0E00               	movlw	0
  3449   01142A  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3450   01142C  6EDA               	movwf	fsr2h,c
  3451   01142E  C00A  FFDE         	movff	?___lwdiv,postinc2
  3452   011432  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3453   011436                     
  3454                           ;colour_identify.c: 97:     }
  3455   011436  2A32               	incf	normalise_readings@i^0,f,c
  3456   011438  0E08               	movlw	8
  3457   01143A  6432               	cpfsgt	normalise_readings@i^0,c
  3458   01143C  EF22  F08A         	goto	u2421
  3459   011440  EF24  F08A         	goto	u2420
  3460   011444                     u2421:
  3461   011444  EFB5  F088         	goto	l4446
  3462   011448                     u2420:
  3463   011448  0012               	return		;funcret
  3464   01144A                     __end_of_normalise_readings:
  3465                           	callstack 0
  3466                           
  3467 ;; *************** function _motor_response *****************
  3468 ;; Defined at:
  3469 ;;		line 125 in file "colour_identify.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  3472 ;;		 -> main@buf(150), 
  3473 ;;  card            1   35[BANK0 ] enum E14551
  3474 ;;  mL              2   36[BANK0 ] PTR struct DC_motor
  3475 ;;		 -> main@motorL(9), 
  3476 ;;  mR              2   38[BANK0 ] PTR struct DC_motor
  3477 ;;		 -> main@motorR(9), 
  3478 ;;  ReturnHomeTi    2   40[BANK0 ] PTR unsigned int 
  3479 ;;		 -> main@ReturnHomeTimes(60), 
  3480 ;;  ReturnHomeCa    2   42[BANK0 ] PTR enum E14551
  3481 ;;		 -> main@ReturnHomeCards(30), 
  3482 ;;  stop_all        2   44[BANK0 ] PTR unsigned int 
  3483 ;;		 -> main@stop_all(2), 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  j               2   52[BANK0 ] int 
  3486 ;;  j               2   54[BANK0 ] int 
  3487 ;;  i               2   58[BANK0 ] int 
  3488 ;;  k               2   56[BANK0 ] int 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3498 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;Total ram usage:       27 bytes
  3503 ;; Hardware stack levels used: 1
  3504 ;; Hardware stack levels required when called: 9
  3505 ;; This function calls:
  3506 ;;		_fullSpeedAhead
  3507 ;;		_home_response
  3508 ;;		_reverseFullSpeed
  3509 ;;		_sendStringSerial4
  3510 ;;		_sprintf
  3511 ;;		_stop
  3512 ;;		_turnLeft45
  3513 ;;		_turnRight45
  3514 ;; This function is called by:
  3515 ;;		_card_response
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text9
  3520   010000                     __ptext9:
  3521                           	callstack 0
  3522   010000                     _motor_response:
  3523                           	callstack 20
  3524   010000                     
  3525                           ;colour_identify.c: 130:     switch (card){
  3526   010000  EFB9  F083         	goto	l4660
  3527   010004                     l4490:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  3531   010004  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3532   010008  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3533   01000C  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3534   010010  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3535   010014  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3536   010018                     
  3537                           ;colour_identify.c: 133:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3538   010018  0E0D               	movlw	13
  3539   01001A  0100               	movlb	0	; () banked
  3540   01001C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3541   01001E  0E2D               	movlw	45
  3542   010020  6F8E               	movwf	??_motor_response& (0+255),b
  3543   010022  0ED7               	movlw	215
  3544   010024                     u2797:
  3545   010024  2EE8               	decfsz	wreg,f,c
  3546   010026  D7FE               	bra	u2797
  3547   010028  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3548   01002A  D7FC               	bra	u2797
  3549   01002C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3550   01002E  D7FA               	bra	u2797
  3551   010030  D000               	nop2	
  3552   010032                     l4494:
  3553                           
  3554                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  3555   010032  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3556   010036  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3557   01003A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3558   01003E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3559   010042  ECAC  F091         	call	_turnRight45	;wreg free
  3560   010046                     
  3561                           ;colour_identify.c: 135:             stop(mL,mR);
  3562   010046  C084  F017         	movff	motor_response@mL,stop@mL
  3563   01004A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3564   01004E  C086  F019         	movff	motor_response@mR,stop@mR
  3565   010052  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3566   010056  EC13  F094         	call	_stop	;wreg free
  3567   01005A                     
  3568                           ;colour_identify.c: 136:             turnRight45(mL,mR);
  3569   01005A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3570   01005E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3571   010062  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3572   010066  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3573   01006A  ECAC  F091         	call	_turnRight45	;wreg free
  3574   01006E                     l4500:
  3575                           
  3576                           ;colour_identify.c: 137:             stop(mL,mR);
  3577   01006E  C084  F017         	movff	motor_response@mL,stop@mL
  3578   010072  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3579   010076  C086  F019         	movff	motor_response@mR,stop@mR
  3580   01007A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3581   01007E  EC13  F094         	call	_stop	;wreg free
  3582                           
  3583                           ;colour_identify.c: 138:             break;
  3584   010082  EFEB  F083         	goto	l388
  3585   010086                     l4502:
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  3589   010086  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3590   01008A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3591   01008E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3592   010092  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3593   010096  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3594   01009A                     
  3595                           ;colour_identify.c: 141:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3596   01009A  0E0D               	movlw	13
  3597   01009C  0100               	movlb	0	; () banked
  3598   01009E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3599   0100A0  0E2D               	movlw	45
  3600   0100A2  6F8E               	movwf	??_motor_response& (0+255),b
  3601   0100A4  0ED7               	movlw	215
  3602   0100A6                     u2807:
  3603   0100A6  2EE8               	decfsz	wreg,f,c
  3604   0100A8  D7FE               	bra	u2807
  3605   0100AA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3606   0100AC  D7FC               	bra	u2807
  3607   0100AE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3608   0100B0  D7FA               	bra	u2807
  3609   0100B2  D000               	nop2	
  3610   0100B4                     l4506:
  3611                           
  3612                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  3613   0100B4  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3614   0100B8  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3615   0100BC  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3616   0100C0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3617   0100C4  EC03  F092         	call	_turnLeft45	;wreg free
  3618   0100C8                     
  3619                           ;colour_identify.c: 143:             stop(mL,mR);
  3620   0100C8  C084  F017         	movff	motor_response@mL,stop@mL
  3621   0100CC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3622   0100D0  C086  F019         	movff	motor_response@mR,stop@mR
  3623   0100D4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3624   0100D8  EC13  F094         	call	_stop	;wreg free
  3625   0100DC                     
  3626                           ;colour_identify.c: 144:             turnLeft45(mL,mR);
  3627   0100DC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3628   0100E0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3629   0100E4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3630   0100E8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3631   0100EC  EC03  F092         	call	_turnLeft45	;wreg free
  3632   0100F0  EF37  F080         	goto	l4500
  3633   0100F4                     l4514:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  3637   0100F4  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3638   0100F8  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3639   0100FC  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3640   010100  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3641   010104  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3642   010108                     
  3643                           ;colour_identify.c: 149:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3644   010108  0E0D               	movlw	13
  3645   01010A  0100               	movlb	0	; () banked
  3646   01010C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3647   01010E  0E2D               	movlw	45
  3648   010110  6F8E               	movwf	??_motor_response& (0+255),b
  3649   010112  0ED7               	movlw	215
  3650   010114                     u2817:
  3651   010114  2EE8               	decfsz	wreg,f,c
  3652   010116  D7FE               	bra	u2817
  3653   010118  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3654   01011A  D7FC               	bra	u2817
  3655   01011C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3656   01011E  D7FA               	bra	u2817
  3657   010120  D000               	nop2	
  3658   010122                     
  3659                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  3660   010122  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3661   010126  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3662   01012A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3663   01012E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3664   010132  ECAC  F091         	call	_turnRight45	;wreg free
  3665   010136                     
  3666                           ;colour_identify.c: 151:             stop(mL,mR);
  3667   010136  C084  F017         	movff	motor_response@mL,stop@mL
  3668   01013A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3669   01013E  C086  F019         	movff	motor_response@mR,stop@mR
  3670   010142  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3671   010146  EC13  F094         	call	_stop	;wreg free
  3672   01014A                     l4522:
  3673                           
  3674                           ;colour_identify.c: 152:             turnRight45(mL,mR);
  3675   01014A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3676   01014E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3677   010152  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3678   010156  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3679   01015A  ECAC  F091         	call	_turnRight45	;wreg free
  3680   01015E                     
  3681                           ;colour_identify.c: 153:             stop(mL,mR);
  3682   01015E  C084  F017         	movff	motor_response@mL,stop@mL
  3683   010162  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3684   010166  C086  F019         	movff	motor_response@mR,stop@mR
  3685   01016A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3686   01016E  EC13  F094         	call	_stop	;wreg free
  3687   010172  EF19  F080         	goto	l4494
  3688   010176                     l4534:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  3692   010176  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3693   01017A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3694   01017E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3695   010182  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3696   010186  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3697   01018A                     
  3698                           ;colour_identify.c: 161:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3699   01018A  0E0D               	movlw	13
  3700   01018C  0100               	movlb	0	; () banked
  3701   01018E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3702   010190  0E2D               	movlw	45
  3703   010192  6F8E               	movwf	??_motor_response& (0+255),b
  3704   010194  0ED7               	movlw	215
  3705   010196                     u2827:
  3706   010196  2EE8               	decfsz	wreg,f,c
  3707   010198  D7FE               	bra	u2827
  3708   01019A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3709   01019C  D7FC               	bra	u2827
  3710   01019E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3711   0101A0  D7FA               	bra	u2827
  3712   0101A2  D000               	nop2	
  3713   0101A4                     
  3714                           ;colour_identify.c: 162:             _delay((unsigned long)((600)*(64000000/4000.0)));
  3715   0101A4  0E31               	movlw	49
  3716   0101A6  0100               	movlb	0	; () banked
  3717   0101A8  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3718   0101AA  0EB4               	movlw	180
  3719   0101AC  6F8E               	movwf	??_motor_response& (0+255),b
  3720   0101AE  0E65               	movlw	101
  3721   0101B0                     u2837:
  3722   0101B0  2EE8               	decfsz	wreg,f,c
  3723   0101B2  D7FE               	bra	u2837
  3724   0101B4  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3725   0101B6  D7FC               	bra	u2837
  3726   0101B8  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3727   0101BA  D7FA               	bra	u2837
  3728   0101BC  D000               	nop2	
  3729                           
  3730                           ;colour_identify.c: 163:             stop(mL,mR);
  3731   0101BE  C084  F017         	movff	motor_response@mL,stop@mL
  3732   0101C2  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3733   0101C6  C086  F019         	movff	motor_response@mR,stop@mR
  3734   0101CA  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3735   0101CE  EC13  F094         	call	_stop	;wreg free
  3736                           
  3737                           ;colour_identify.c: 164:             turnRight45(mL,mR);
  3738   0101D2  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3739   0101D6  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3740   0101DA  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3741   0101DE  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3742   0101E2  ECAC  F091         	call	_turnRight45	;wreg free
  3743                           
  3744                           ;colour_identify.c: 165:             stop(mL,mR);
  3745   0101E6  C084  F017         	movff	motor_response@mL,stop@mL
  3746   0101EA  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3747   0101EE  C086  F019         	movff	motor_response@mR,stop@mR
  3748   0101F2  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3749   0101F6  EC13  F094         	call	_stop	;wreg free
  3750                           
  3751                           ;colour_identify.c: 166:             turnRight45(mL,mR);
  3752   0101FA  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3753   0101FE  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3754   010202  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3755   010206  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3756   01020A  ECAC  F091         	call	_turnRight45	;wreg free
  3757                           
  3758                           ;colour_identify.c: 167:             stop(mL,mR);
  3759   01020E  C084  F017         	movff	motor_response@mL,stop@mL
  3760   010212  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3761   010216  C086  F019         	movff	motor_response@mR,stop@mR
  3762   01021A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3763   01021E  EC13  F094         	call	_stop	;wreg free
  3764                           
  3765                           ;colour_identify.c: 168:             break;
  3766   010222  EFEB  F083         	goto	l388
  3767   010226                     l4540:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;colour_identify.c: 170:             reverseFullSpeed(mL,mR);
  3771   010226  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3772   01022A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3773   01022E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3774   010232  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3775   010236  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3776   01023A                     
  3777                           ;colour_identify.c: 171:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3778   01023A  0E0D               	movlw	13
  3779   01023C  0100               	movlb	0	; () banked
  3780   01023E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3781   010240  0E2D               	movlw	45
  3782   010242  6F8E               	movwf	??_motor_response& (0+255),b
  3783   010244  0ED7               	movlw	215
  3784   010246                     u2847:
  3785   010246  2EE8               	decfsz	wreg,f,c
  3786   010248  D7FE               	bra	u2847
  3787   01024A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3788   01024C  D7FC               	bra	u2847
  3789   01024E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3790   010250  D7FA               	bra	u2847
  3791   010252  D000               	nop2	
  3792   010254                     
  3793                           ;colour_identify.c: 172:             _delay((unsigned long)((600)*(64000000/4000.0)));
  3794   010254  0E31               	movlw	49
  3795   010256  0100               	movlb	0	; () banked
  3796   010258  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3797   01025A  0EB4               	movlw	180
  3798   01025C  6F8E               	movwf	??_motor_response& (0+255),b
  3799   01025E  0E65               	movlw	101
  3800   010260                     u2857:
  3801   010260  2EE8               	decfsz	wreg,f,c
  3802   010262  D7FE               	bra	u2857
  3803   010264  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3804   010266  D7FC               	bra	u2857
  3805   010268  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3806   01026A  D7FA               	bra	u2857
  3807   01026C  D000               	nop2	
  3808                           
  3809                           ;colour_identify.c: 173:             stop(mL,mR);
  3810   01026E  C084  F017         	movff	motor_response@mL,stop@mL
  3811   010272  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3812   010276  C086  F019         	movff	motor_response@mR,stop@mR
  3813   01027A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3814   01027E  EC13  F094         	call	_stop	;wreg free
  3815                           
  3816                           ;colour_identify.c: 174:             turnLeft45(mL,mR);
  3817   010282  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3818   010286  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3819   01028A  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3820   01028E  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3821   010292  EC03  F092         	call	_turnLeft45	;wreg free
  3822                           
  3823                           ;colour_identify.c: 175:             stop(mL,mR);
  3824   010296  C084  F017         	movff	motor_response@mL,stop@mL
  3825   01029A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3826   01029E  C086  F019         	movff	motor_response@mR,stop@mR
  3827   0102A2  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3828   0102A6  EC13  F094         	call	_stop	;wreg free
  3829                           
  3830                           ;colour_identify.c: 176:             turnLeft45(mL,mR);
  3831   0102AA  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3832   0102AE  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3833   0102B2  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3834   0102B6  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3835   0102BA  EC03  F092         	call	_turnLeft45	;wreg free
  3836                           
  3837                           ;colour_identify.c: 177:             stop(mL,mR);
  3838   0102BE  C084  F017         	movff	motor_response@mL,stop@mL
  3839   0102C2  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3840   0102C6  C086  F019         	movff	motor_response@mR,stop@mR
  3841   0102CA  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3842   0102CE  EC13  F094         	call	_stop	;wreg free
  3843                           
  3844                           ;colour_identify.c: 178:             break;
  3845   0102D2  EFEB  F083         	goto	l388
  3846   0102D6                     l4546:
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;colour_identify.c: 180:             reverseFullSpeed(mL,mR);
  3850   0102D6  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3851   0102DA  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3852   0102DE  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3853   0102E2  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3854   0102E6  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3855   0102EA                     
  3856                           ;colour_identify.c: 181:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3857   0102EA  0E0D               	movlw	13
  3858   0102EC  0100               	movlb	0	; () banked
  3859   0102EE  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3860   0102F0  0E2D               	movlw	45
  3861   0102F2  6F8E               	movwf	??_motor_response& (0+255),b
  3862   0102F4  0ED7               	movlw	215
  3863   0102F6                     u2867:
  3864   0102F6  2EE8               	decfsz	wreg,f,c
  3865   0102F8  D7FE               	bra	u2867
  3866   0102FA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3867   0102FC  D7FC               	bra	u2867
  3868   0102FE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3869   010300  D7FA               	bra	u2867
  3870   010302  D000               	nop2	
  3871   010304  EFA5  F080         	goto	l4522
  3872   010308                     l4562:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;colour_identify.c: 190:             reverseFullSpeed(mL,mR);
  3876   010308  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3877   01030C  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3878   010310  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3879   010314  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3880   010318  EC5A  F092         	call	_reverseFullSpeed	;wreg free
  3881   01031C                     
  3882                           ;colour_identify.c: 191:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3883   01031C  0E0D               	movlw	13
  3884   01031E  0100               	movlb	0	; () banked
  3885   010320  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3886   010322  0E2D               	movlw	45
  3887   010324  6F8E               	movwf	??_motor_response& (0+255),b
  3888   010326  0ED7               	movlw	215
  3889   010328                     u2877:
  3890   010328  2EE8               	decfsz	wreg,f,c
  3891   01032A  D7FE               	bra	u2877
  3892   01032C  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3893   01032E  D7FC               	bra	u2877
  3894   010330  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3895   010332  D7FA               	bra	u2877
  3896   010334  D000               	nop2	
  3897   010336                     
  3898                           ;colour_identify.c: 192:             turnLeft45(mL,mR);
  3899   010336  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3900   01033A  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3901   01033E  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3902   010342  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3903   010346  EC03  F092         	call	_turnLeft45	;wreg free
  3904   01034A                     
  3905                           ;colour_identify.c: 193:             stop(mL,mR);
  3906   01034A  C084  F017         	movff	motor_response@mL,stop@mL
  3907   01034E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3908   010352  C086  F019         	movff	motor_response@mR,stop@mR
  3909   010356  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3910   01035A  EC13  F094         	call	_stop	;wreg free
  3911   01035E  EF5A  F080         	goto	l4506
  3912   010362                     l4578:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;colour_identify.c: 201:             stop(mL,mR);
  3916   010362  C084  F017         	movff	motor_response@mL,stop@mL
  3917   010366  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3918   01036A  C086  F019         	movff	motor_response@mR,stop@mR
  3919   01036E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3920   010372  EC13  F094         	call	_stop	;wreg free
  3921                           
  3922                           ;colour_identify.c: 202:             turnLeft45(mL,mR);
  3923   010376  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3924   01037A  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3925   01037E  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3926   010382  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3927   010386  EC03  F092         	call	_turnLeft45	;wreg free
  3928                           
  3929                           ;colour_identify.c: 203:             stop(mL,mR);
  3930   01038A  C084  F017         	movff	motor_response@mL,stop@mL
  3931   01038E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3932   010392  C086  F019         	movff	motor_response@mR,stop@mR
  3933   010396  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3934   01039A  EC13  F094         	call	_stop	;wreg free
  3935                           
  3936                           ;colour_identify.c: 204:             turnLeft45(mL,mR);
  3937   01039E  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3938   0103A2  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3939   0103A6  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3940   0103AA  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3941   0103AE  EC03  F092         	call	_turnLeft45	;wreg free
  3942                           
  3943                           ;colour_identify.c: 205:             stop(mL,mR);
  3944   0103B2  C084  F017         	movff	motor_response@mL,stop@mL
  3945   0103B6  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3946   0103BA  C086  F019         	movff	motor_response@mR,stop@mR
  3947   0103BE  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3948   0103C2  EC13  F094         	call	_stop	;wreg free
  3949                           
  3950                           ;colour_identify.c: 206:             turnLeft45(mL,mR);
  3951   0103C6  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3952   0103CA  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3953   0103CE  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3954   0103D2  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3955   0103D6  EC03  F092         	call	_turnLeft45	;wreg free
  3956                           
  3957                           ;colour_identify.c: 207:             stop(mL,mR);
  3958   0103DA  C084  F017         	movff	motor_response@mL,stop@mL
  3959   0103DE  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3960   0103E2  C086  F019         	movff	motor_response@mR,stop@mR
  3961   0103E6  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3962   0103EA  EC13  F094         	call	_stop	;wreg free
  3963                           
  3964                           ;colour_identify.c: 208:             turnLeft45(mL,mR);
  3965   0103EE  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3966   0103F2  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3967   0103F6  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3968   0103FA  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3969   0103FE  EC03  F092         	call	_turnLeft45	;wreg free
  3970                           
  3971                           ;colour_identify.c: 209:             stop(mL,mR);
  3972   010402  C084  F017         	movff	motor_response@mL,stop@mL
  3973   010406  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3974   01040A  C086  F019         	movff	motor_response@mR,stop@mR
  3975   01040E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3976   010412  EC13  F094         	call	_stop	;wreg free
  3977   010416                     
  3978                           ;colour_identify.c: 210:             for(int k = 0; k<= 5; k++){
  3979   010416  0E00               	movlw	0
  3980   010418  0100               	movlb	0	; () banked
  3981   01041A  6F99               	movwf	(motor_response@k+1)& (0+255),b
  3982   01041C  0E00               	movlw	0
  3983   01041E  6F98               	movwf	motor_response@k& (0+255),b
  3984   010420                     l4586:
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;colour_identify.c: 211:                 sprintf(buf, "Timercount %d, time %d  \n", k, R
      +                          eturnHomeTimes[k]);
  3988   010420  C081  F066         	movff	motor_response@buf,sprintf@s
  3989   010424  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3990   010428  0E82               	movlw	low STR_6
  3991   01042A  6F68               	movwf	sprintf@fmt& (0+255),b
  3992   01042C  0EFF               	movlw	high STR_6
  3993   01042E  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3994   010430  C098  F06A         	movff	motor_response@k,?_sprintf+4
  3995   010434  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  3996   010438  90D8               	bcf	status,0,c
  3997   01043A  3598               	rlcf	motor_response@k& (0+255),w,b
  3998   01043C  6ED9               	movwf	fsr2l,c
  3999   01043E  3599               	rlcf	(motor_response@k+1)& (0+255),w,b
  4000   010440  6EDA               	movwf	fsr2h,c
  4001   010442  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  4002   010444  26D9               	addwf	fsr2l,f,c
  4003   010446  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4004   010448  22DA               	addwfc	fsr2h,f,c
  4005   01044A  CFDE F06C          	movff	postinc2,?_sprintf+6
  4006   01044E  CFDD F06D          	movff	postdec2,?_sprintf+7
  4007   010452  EC6B  F094         	call	_sprintf	;wreg free
  4008   010456                     
  4009                           ;colour_identify.c: 212:                 sendStringSerial4(buf);
  4010   010456  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4011   01045A  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4012   01045E  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4013   010462                     
  4014                           ;colour_identify.c: 213:                 sprintf(buf, "Cardcount %d, card %d  \n", k, Re
      +                          turnHomeCards[k]);
  4015   010462  C081  F066         	movff	motor_response@buf,sprintf@s
  4016   010466  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4017   01046A  0E9C               	movlw	low STR_7
  4018   01046C  0100               	movlb	0	; () banked
  4019   01046E  6F68               	movwf	sprintf@fmt& (0+255),b
  4020   010470  0EFF               	movlw	high STR_7
  4021   010472  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4022   010474  C098  F06A         	movff	motor_response@k,?_sprintf+4
  4023   010478  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  4024   01047C  5198               	movf	motor_response@k& (0+255),w,b
  4025   01047E  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4026   010480  6ED9               	movwf	fsr2l,c
  4027   010482  5199               	movf	(motor_response@k+1)& (0+255),w,b
  4028   010484  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4029   010486  6EDA               	movwf	fsr2h,c
  4030   010488  50DF               	movf	indf2,w,c
  4031   01048A  6F8E               	movwf	??_motor_response& (0+255),b
  4032   01048C  518E               	movf	??_motor_response& (0+255),w,b
  4033   01048E  6F6C               	movwf	(?_sprintf+6)& (0+255),b
  4034   010490  6B6D               	clrf	(?_sprintf+7)& (0+255),b
  4035   010492  EC6B  F094         	call	_sprintf	;wreg free
  4036                           
  4037                           ;colour_identify.c: 214:                 sendStringSerial4(buf);
  4038   010496  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4039   01049A  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4040   01049E  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4041   0104A2                     
  4042                           ;colour_identify.c: 215:                 _delay((unsigned long)((1000)*(64000000/4000.0)
      +                          ));}
  4043   0104A2  0E52               	movlw	82
  4044   0104A4  0100               	movlb	0	; () banked
  4045   0104A6  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4046   0104A8  0E2B               	movlw	43
  4047   0104AA  6F8E               	movwf	??_motor_response& (0+255),b
  4048   0104AC  0E00               	movlw	0
  4049   0104AE                     u2887:
  4050   0104AE  2EE8               	decfsz	wreg,f,c
  4051   0104B0  D7FE               	bra	u2887
  4052   0104B2  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4053   0104B4  D7FC               	bra	u2887
  4054   0104B6  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4055   0104B8  D7FA               	bra	u2887
  4056   0104BA  F000               	nop	
  4057   0104BC  0100               	movlb	0	; () banked
  4058   0104BE  4B98               	infsnz	motor_response@k& (0+255),f,b
  4059   0104C0  2B99               	incf	(motor_response@k+1)& (0+255),f,b
  4060   0104C2                     
  4061                           ; BSR set to: 0
  4062   0104C2  BF99               	btfsc	(motor_response@k+1)& (0+255),7,b
  4063   0104C4  EF6D  F082         	goto	u2461
  4064   0104C8  5199               	movf	(motor_response@k+1)& (0+255),w,b
  4065   0104CA  E109               	bnz	u2460
  4066   0104CC  0E06               	movlw	6
  4067   0104CE  5D98               	subwf	motor_response@k& (0+255),w,b
  4068   0104D0  A0D8               	btfss	status,0,c
  4069   0104D2  EF6D  F082         	goto	u2461
  4070   0104D6  EF6F  F082         	goto	u2460
  4071   0104DA                     u2461:
  4072   0104DA  EF10  F082         	goto	l4586
  4073   0104DE                     u2460:
  4074   0104DE                     
  4075                           ; BSR set to: 0
  4076                           ;colour_identify.c: 216:             for(int i = 28; i >= 0; i--){
  4077   0104DE  0E00               	movlw	0
  4078   0104E0  6F9B               	movwf	(motor_response@i+1)& (0+255),b
  4079   0104E2  0E1C               	movlw	28
  4080   0104E4  6F9A               	movwf	motor_response@i& (0+255),b
  4081   0104E6                     l4600:
  4082                           
  4083                           ; BSR set to: 0
  4084   0104E6  BF9B               	btfsc	(motor_response@i+1)& (0+255),7,b
  4085   0104E8  EF7A  F082         	goto	u2470
  4086   0104EC  EF78  F082         	goto	u2471
  4087   0104F0                     u2471:
  4088   0104F0  EF7C  F082         	goto	l4604
  4089   0104F4                     u2470:
  4090   0104F4  EF3D  F083         	goto	l4632
  4091   0104F8                     l4604:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;colour_identify.c: 217:                 if (ReturnHomeTimes[i+1] != 0){
  4095   0104F8  C09A  F08E         	movff	motor_response@i,??_motor_response
  4096   0104FC  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4097   010500  90D8               	bcf	status,0,c
  4098   010502  378E               	rlcf	??_motor_response& (0+255),f,b
  4099   010504  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4100   010506  518E               	movf	??_motor_response& (0+255),w,b
  4101   010508  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4102   01050A  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4103   01050C  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4104   01050E  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4105   010510  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4106   010512  0E02               	movlw	2
  4107   010514  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4108   010516  6ED9               	movwf	fsr2l,c
  4109   010518  0E00               	movlw	0
  4110   01051A  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4111   01051C  6EDA               	movwf	fsr2h,c
  4112   01051E  50DE               	movf	postinc2,w,c
  4113   010520  10DE               	iorwf	postinc2,w,c
  4114   010522  B4D8               	btfsc	status,2,c
  4115   010524  EF96  F082         	goto	u2481
  4116   010528  EF98  F082         	goto	u2480
  4117   01052C                     u2481:
  4118   01052C  EF37  F083         	goto	l4628
  4119   010530                     u2480:
  4120   010530                     
  4121                           ; BSR set to: 0
  4122                           ;colour_identify.c: 218:                     fullSpeedAhead(mL,mR);
  4123   010530  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4124   010534  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4125   010538  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4126   01053C  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4127   010540  ECA0  F092         	call	_fullSpeedAhead	;wreg free
  4128   010544                     
  4129                           ;colour_identify.c: 219:                     sprintf(buf, "Time gonna move for %d \n", R
      +                          eturnHomeTimes[i+1]);
  4130   010544  C081  F066         	movff	motor_response@buf,sprintf@s
  4131   010548  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4132   01054C  0EB5               	movlw	low STR_8
  4133   01054E  0100               	movlb	0	; () banked
  4134   010550  6F68               	movwf	sprintf@fmt& (0+255),b
  4135   010552  0EFF               	movlw	high STR_8
  4136   010554  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4137   010556  C09A  F08E         	movff	motor_response@i,??_motor_response
  4138   01055A  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4139   01055E  90D8               	bcf	status,0,c
  4140   010560  378E               	rlcf	??_motor_response& (0+255),f,b
  4141   010562  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4142   010564  518E               	movf	??_motor_response& (0+255),w,b
  4143   010566  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4144   010568  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4145   01056A  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4146   01056C  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4147   01056E  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4148   010570  0E02               	movlw	2
  4149   010572  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4150   010574  6ED9               	movwf	fsr2l,c
  4151   010576  0E00               	movlw	0
  4152   010578  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4153   01057A  6EDA               	movwf	fsr2h,c
  4154   01057C  CFDE F06A          	movff	postinc2,?_sprintf+4
  4155   010580  CFDD F06B          	movff	postdec2,?_sprintf+5
  4156   010584  EC6B  F094         	call	_sprintf	;wreg free
  4157   010588                     
  4158                           ;colour_identify.c: 220:                     sendStringSerial4(buf);
  4159   010588  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4160   01058C  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4161   010590  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4162   010594                     
  4163                           ;colour_identify.c: 221:                     for (int j=0; j<= ReturnHomeTimes[i+1]; j++
      +                          ){
  4164   010594  0E00               	movlw	0
  4165   010596  0100               	movlb	0	; () banked
  4166   010598  6F95               	movwf	(motor_response@j+1)& (0+255),b
  4167   01059A  0E00               	movlw	0
  4168   01059C  6F94               	movwf	motor_response@j& (0+255),b
  4169   01059E  EFE1  F082         	goto	l4618
  4170   0105A2                     l4614:
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;colour_identify.c: 222:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  4174   0105A2  0E09               	movlw	9
  4175   0105A4  0100               	movlb	0	; () banked
  4176   0105A6  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4177   0105A8  0E1E               	movlw	30
  4178   0105AA  6F8E               	movwf	??_motor_response& (0+255),b
  4179   0105AC  0EE4               	movlw	228
  4180   0105AE                     u2897:
  4181   0105AE  2EE8               	decfsz	wreg,f,c
  4182   0105B0  D7FE               	bra	u2897
  4183   0105B2  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4184   0105B4  D7FC               	bra	u2897
  4185   0105B6  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4186   0105B8  D7FA               	bra	u2897
  4187   0105BA  F000               	nop	
  4188   0105BC                     
  4189                           ;colour_identify.c: 223:                     }
  4190   0105BC  0100               	movlb	0	; () banked
  4191   0105BE  4B94               	infsnz	motor_response@j& (0+255),f,b
  4192   0105C0  2B95               	incf	(motor_response@j+1)& (0+255),f,b
  4193   0105C2                     l4618:
  4194                           
  4195                           ; BSR set to: 0
  4196   0105C2  C09A  F08E         	movff	motor_response@i,??_motor_response
  4197   0105C6  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4198   0105CA  90D8               	bcf	status,0,c
  4199   0105CC  378E               	rlcf	??_motor_response& (0+255),f,b
  4200   0105CE  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4201   0105D0  518E               	movf	??_motor_response& (0+255),w,b
  4202   0105D2  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4203   0105D4  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4204   0105D6  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4205   0105D8  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4206   0105DA  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4207   0105DC  0E02               	movlw	2
  4208   0105DE  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4209   0105E0  6ED9               	movwf	fsr2l,c
  4210   0105E2  0E00               	movlw	0
  4211   0105E4  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4212   0105E6  6EDA               	movwf	fsr2h,c
  4213   0105E8  5194               	movf	motor_response@j& (0+255),w,b
  4214   0105EA  5CDE               	subwf	postinc2,w,c
  4215   0105EC  5195               	movf	(motor_response@j+1)& (0+255),w,b
  4216   0105EE  58DE               	subwfb	postinc2,w,c
  4217   0105F0  B0D8               	btfsc	status,0,c
  4218   0105F2  EFFD  F082         	goto	u2491
  4219   0105F6  EFFF  F082         	goto	u2490
  4220   0105FA                     u2491:
  4221   0105FA  EFD1  F082         	goto	l4614
  4222   0105FE                     u2490:
  4223   0105FE                     
  4224                           ; BSR set to: 0
  4225                           ;colour_identify.c: 224:                     stop(mL,mR);
  4226   0105FE  C084  F017         	movff	motor_response@mL,stop@mL
  4227   010602  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4228   010606  C086  F019         	movff	motor_response@mR,stop@mR
  4229   01060A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4230   01060E  EC13  F094         	call	_stop	;wreg free
  4231   010612                     
  4232                           ;colour_identify.c: 225:                     sprintf(buf, "Card gonna respond to %d \n",
      +                           ReturnHomeCards[i]);
  4233   010612  C081  F066         	movff	motor_response@buf,sprintf@s
  4234   010616  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4235   01061A  0E67               	movlw	low STR_9
  4236   01061C  0100               	movlb	0	; () banked
  4237   01061E  6F68               	movwf	sprintf@fmt& (0+255),b
  4238   010620  0EFF               	movlw	high STR_9
  4239   010622  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4240   010624  519A               	movf	motor_response@i& (0+255),w,b
  4241   010626  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4242   010628  6ED9               	movwf	fsr2l,c
  4243   01062A  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4244   01062C  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4245   01062E  6EDA               	movwf	fsr2h,c
  4246   010630  50DF               	movf	indf2,w,c
  4247   010632  6F8E               	movwf	??_motor_response& (0+255),b
  4248   010634  518E               	movf	??_motor_response& (0+255),w,b
  4249   010636  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  4250   010638  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  4251   01063A  EC6B  F094         	call	_sprintf	;wreg free
  4252   01063E                     
  4253                           ;colour_identify.c: 226:                     sendStringSerial4(buf);
  4254   01063E  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4255   010642  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4256   010646  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4257   01064A                     
  4258                           ;colour_identify.c: 227:                     home_response(ReturnHomeCards[i], mL, mR);
  4259   01064A  C084  F01F         	movff	motor_response@mL,home_response@mL
  4260   01064E  C085  F020         	movff	motor_response@mL+1,home_response@mL+1
  4261   010652  C086  F021         	movff	motor_response@mR,home_response@mR
  4262   010656  C087  F022         	movff	motor_response@mR+1,home_response@mR+1
  4263   01065A  0100               	movlb	0	; () banked
  4264   01065C  519A               	movf	motor_response@i& (0+255),w,b
  4265   01065E  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4266   010660  6ED9               	movwf	fsr2l,c
  4267   010662  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4268   010664  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4269   010666  6EDA               	movwf	fsr2h,c
  4270   010668  50DF               	movf	indf2,w,c
  4271   01066A  ECA6  F086         	call	_home_response
  4272   01066E                     l4628:
  4273                           
  4274                           ;colour_identify.c: 229:             }
  4275   01066E  0100               	movlb	0	; () banked
  4276   010670  079A               	decf	motor_response@i& (0+255),f,b
  4277   010672  A0D8               	btfss	status,0,c
  4278   010674  079B               	decf	(motor_response@i+1)& (0+255),f,b
  4279   010676  EF73  F082         	goto	l4600
  4280   01067A                     l4632:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;colour_identify.c: 230:             sprintf(buf, "Time gonna move for %d \n", ReturnHom
      +                          eTimes[0]);
  4284   01067A  C081  F066         	movff	motor_response@buf,sprintf@s
  4285   01067E  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4286   010682  0EB5               	movlw	low STR_8
  4287   010684  6F68               	movwf	sprintf@fmt& (0+255),b
  4288   010686  0EFF               	movlw	high STR_8
  4289   010688  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4290   01068A  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4291   01068E  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4292   010692  CFDE F06A          	movff	postinc2,?_sprintf+4
  4293   010696  CFDD F06B          	movff	postdec2,?_sprintf+5
  4294   01069A  EC6B  F094         	call	_sprintf	;wreg free
  4295   01069E                     
  4296                           ;colour_identify.c: 231:             sendStringSerial4(buf);
  4297   01069E  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4298   0106A2  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4299   0106A6  ECD5  F095         	call	_sendStringSerial4	;wreg free
  4300   0106AA                     
  4301                           ;colour_identify.c: 232:             fullSpeedAhead(mL,mR);
  4302   0106AA  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4303   0106AE  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4304   0106B2  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4305   0106B6  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4306   0106BA  ECA0  F092         	call	_fullSpeedAhead	;wreg free
  4307   0106BE                     
  4308                           ;colour_identify.c: 233:             for (int j=0; j<= ReturnHomeTimes[0]; j++){
  4309   0106BE  0E00               	movlw	0
  4310   0106C0  0100               	movlb	0	; () banked
  4311   0106C2  6F97               	movwf	(motor_response@j_1697+1)& (0+255),b
  4312   0106C4  0E00               	movlw	0
  4313   0106C6  6F96               	movwf	motor_response@j_1697& (0+255),b
  4314   0106C8  EF76  F083         	goto	l4644
  4315   0106CC                     l4640:
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;colour_identify.c: 234:                 _delay((unsigned long)((100)*(64000000/4000.0))
      +                          );}
  4319   0106CC  0E09               	movlw	9
  4320   0106CE  0100               	movlb	0	; () banked
  4321   0106D0  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4322   0106D2  0E1E               	movlw	30
  4323   0106D4  6F8E               	movwf	??_motor_response& (0+255),b
  4324   0106D6  0EE4               	movlw	228
  4325   0106D8                     u2907:
  4326   0106D8  2EE8               	decfsz	wreg,f,c
  4327   0106DA  D7FE               	bra	u2907
  4328   0106DC  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4329   0106DE  D7FC               	bra	u2907
  4330   0106E0  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4331   0106E2  D7FA               	bra	u2907
  4332   0106E4  F000               	nop	
  4333   0106E6  0100               	movlb	0	; () banked
  4334   0106E8  4B96               	infsnz	motor_response@j_1697& (0+255),f,b
  4335   0106EA  2B97               	incf	(motor_response@j_1697+1)& (0+255),f,b
  4336   0106EC                     l4644:
  4337                           
  4338                           ; BSR set to: 0
  4339   0106EC  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4340   0106F0  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4341   0106F4  5196               	movf	motor_response@j_1697& (0+255),w,b
  4342   0106F6  5CDE               	subwf	postinc2,w,c
  4343   0106F8  5197               	movf	(motor_response@j_1697+1)& (0+255),w,b
  4344   0106FA  58DE               	subwfb	postinc2,w,c
  4345   0106FC  B0D8               	btfsc	status,0,c
  4346   0106FE  EF83  F083         	goto	u2501
  4347   010702  EF85  F083         	goto	u2500
  4348   010706                     u2501:
  4349   010706  EF66  F083         	goto	l4640
  4350   01070A                     u2500:
  4351   01070A                     
  4352                           ; BSR set to: 0
  4353                           ;colour_identify.c: 235:             stop(mL,mR);
  4354   01070A  C084  F017         	movff	motor_response@mL,stop@mL
  4355   01070E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4356   010712  C086  F019         	movff	motor_response@mR,stop@mR
  4357   010716  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4358   01071A  EC13  F094         	call	_stop	;wreg free
  4359   01071E                     
  4360                           ;colour_identify.c: 236:             *stop_all = 1;
  4361   01071E  C08C  FFD9         	movff	motor_response@stop_all,fsr2l
  4362   010722  C08D  FFDA         	movff	motor_response@stop_all+1,fsr2h
  4363   010726  0E01               	movlw	1
  4364   010728  6EDE               	movwf	postinc2,c
  4365   01072A  0E00               	movlw	0
  4366   01072C  6EDD               	movwf	postdec2,c
  4367                           
  4368                           ;colour_identify.c: 237:             break;
  4369   01072E  EFEB  F083         	goto	l388
  4370   010732                     l386:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;colour_identify.c: 240:             LATHbits.LATH3=1;
  4374   010732  8680               	bsf	128,3,c	;volatile
  4375   010734                     
  4376                           ; BSR set to: 0
  4377                           ;colour_identify.c: 241:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4378   010734  0E11               	movlw	17
  4379   010736  0100               	movlb	0	; () banked
  4380   010738  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4381   01073A  0E3C               	movlw	60
  4382   01073C  6F8E               	movwf	??_motor_response& (0+255),b
  4383   01073E  0ECB               	movlw	203
  4384   010740                     u2917:
  4385   010740  2EE8               	decfsz	wreg,f,c
  4386   010742  D7FE               	bra	u2917
  4387   010744  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4388   010746  D7FC               	bra	u2917
  4389   010748  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4390   01074A  D7FA               	bra	u2917
  4391   01074C                     
  4392                           ;colour_identify.c: 242:             LATHbits.LATH3=0;
  4393   01074C  9680               	bcf	128,3,c	;volatile
  4394                           
  4395                           ;colour_identify.c: 243:             break;
  4396   01074E  EFEB  F083         	goto	l388
  4397   010752                     l387:
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;colour_identify.c: 245:             LATHbits.LATH1 = 1;
  4401   010752  8280               	bsf	128,1,c	;volatile
  4402   010754                     
  4403                           ; BSR set to: 0
  4404                           ;colour_identify.c: 246:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4405   010754  0E29               	movlw	41
  4406   010756  0100               	movlb	0	; () banked
  4407   010758  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4408   01075A  0E96               	movlw	150
  4409   01075C  6F8E               	movwf	??_motor_response& (0+255),b
  4410   01075E  0E7F               	movlw	127
  4411   010760                     u2927:
  4412   010760  2EE8               	decfsz	wreg,f,c
  4413   010762  D7FE               	bra	u2927
  4414   010764  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4415   010766  D7FC               	bra	u2927
  4416   010768  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4417   01076A  D7FA               	bra	u2927
  4418   01076C                     
  4419                           ;colour_identify.c: 247:             LATHbits.LATH1 = 0;
  4420   01076C  9280               	bcf	128,1,c	;volatile
  4421                           
  4422                           ;colour_identify.c: 248:             break;
  4423   01076E  EFEB  F083         	goto	l388
  4424   010772                     l4660:
  4425   010772  0100               	movlb	0	; () banked
  4426   010774  5183               	movf	motor_response@card& (0+255),w,b
  4427   010776  6F8E               	movwf	??_motor_response& (0+255),b
  4428   010778  6B8F               	clrf	(??_motor_response+1)& (0+255),b
  4429                           
  4430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4431                           ; Switch size 1, requested type "simple"
  4432                           ; Number of cases is 1, Range of values is 0 to 0
  4433                           ; switch strategies available:
  4434                           ; Name         Instructions Cycles
  4435                           ; simple_byte            4     3 (average)
  4436                           ;	Chosen strategy is simple_byte
  4437   01077A  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4438   01077C  0A00               	xorlw	0	; case 0
  4439   01077E  B4D8               	btfsc	status,2,c
  4440   010780  EFC4  F083         	goto	l5100
  4441   010784  EFA9  F083         	goto	l387
  4442   010788                     l5100:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ; Switch size 1, requested type "simple"
  4446                           ; Number of cases is 9, Range of values is 0 to 8
  4447                           ; switch strategies available:
  4448                           ; Name         Instructions Cycles
  4449                           ; simple_byte           28    15 (average)
  4450                           ;	Chosen strategy is simple_byte
  4451   010788  518E               	movf	??_motor_response& (0+255),w,b
  4452   01078A  0A00               	xorlw	0	; case 0
  4453   01078C  B4D8               	btfsc	status,2,c
  4454   01078E  EF02  F080         	goto	l4490
  4455   010792  0A01               	xorlw	1	; case 1
  4456   010794  B4D8               	btfsc	status,2,c
  4457   010796  EF43  F080         	goto	l4502
  4458   01079A  0A03               	xorlw	3	; case 2
  4459   01079C  B4D8               	btfsc	status,2,c
  4460   01079E  EF7A  F080         	goto	l4514
  4461   0107A2  0A01               	xorlw	1	; case 3
  4462   0107A4  B4D8               	btfsc	status,2,c
  4463   0107A6  EFBB  F080         	goto	l4534
  4464   0107AA  0A07               	xorlw	7	; case 4
  4465   0107AC  B4D8               	btfsc	status,2,c
  4466   0107AE  EF13  F081         	goto	l4540
  4467   0107B2  0A01               	xorlw	1	; case 5
  4468   0107B4  B4D8               	btfsc	status,2,c
  4469   0107B6  EF6B  F081         	goto	l4546
  4470   0107BA  0A03               	xorlw	3	; case 6
  4471   0107BC  B4D8               	btfsc	status,2,c
  4472   0107BE  EF84  F081         	goto	l4562
  4473   0107C2  0A01               	xorlw	1	; case 7
  4474   0107C4  B4D8               	btfsc	status,2,c
  4475   0107C6  EFB1  F081         	goto	l4578
  4476   0107CA  0A0F               	xorlw	15	; case 8
  4477   0107CC  B4D8               	btfsc	status,2,c
  4478   0107CE  EF99  F083         	goto	l386
  4479   0107D2  EFA9  F083         	goto	l387
  4480   0107D6                     l388:
  4481   0107D6  0012               	return		;funcret
  4482   0107D8                     __end_of_motor_response:
  4483                           	callstack 0
  4484                           
  4485 ;; *************** function _sprintf *****************
  4486 ;; Defined at:
  4487 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  s               2    6[BANK0 ] PTR unsigned char 
  4490 ;;		 -> main@buf(150), 
  4491 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  4492 ;;		 -> STR_14(10), STR_13(36), STR_12(10), STR_11(36), 
  4493 ;;		 -> STR_10(25), STR_9(27), STR_8(25), STR_7(25), 
  4494 ;;		 -> STR_6(26), STR_5(23), STR_4(30), STR_3(15), 
  4495 ;;		 -> STR_2(23), STR_1(50), 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  f              11   22[BANK0 ] struct _IO_FILE
  4498 ;;  ap              2   20[BANK0 ] PTR void [1]
  4499 ;;		 -> ?_sprintf(2), 
  4500 ;;  ret             2    0        int 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  2    6[BANK0 ] int 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4510 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4511 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;Total ram usage:       27 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 8
  4517 ;; This function calls:
  4518 ;;		_vfprintf
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;;		_clear_read_calibration
  4522 ;;		_motor_response
  4523 ;;		_card_response
  4524 ;;		_card_response_easy
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text10
  4529   0128D6                     __ptext10:
  4530                           	callstack 0
  4531   0128D6                     _sprintf:
  4532                           	callstack 22
  4533   0128D6  0E6A               	movlw	low (?_sprintf+4)
  4534   0128D8  0100               	movlb	0	; () banked
  4535   0128DA  6F74               	movwf	sprintf@ap& (0+255),b
  4536   0128DC  0E00               	movlw	high (?_sprintf+4)
  4537   0128DE  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4538   0128E0  C066  F076         	movff	sprintf@s,sprintf@f
  4539   0128E4  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  4540   0128E8                     
  4541                           ; BSR set to: 0
  4542   0128E8  0E00               	movlw	0
  4543   0128EA  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  4544   0128EC  0E00               	movlw	0
  4545   0128EE  6F79               	movwf	(sprintf@f+3)& (0+255),b
  4546   0128F0                     
  4547                           ; BSR set to: 0
  4548   0128F0  0E00               	movlw	0
  4549   0128F2  6F80               	movwf	(sprintf@f+10)& (0+255),b
  4550   0128F4  0E00               	movlw	0
  4551   0128F6  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  4552   0128F8                     
  4553                           ; BSR set to: 0
  4554   0128F8  0E76               	movlw	low sprintf@f
  4555   0128FA  6F60               	movwf	vfprintf@fp& (0+255),b
  4556   0128FC  0E00               	movlw	high sprintf@f
  4557   0128FE  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4558   012900  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4559   012904  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4560   012908  0E74               	movlw	low sprintf@ap
  4561   01290A  6F64               	movwf	vfprintf@ap& (0+255),b
  4562   01290C  0E00               	movlw	high sprintf@ap
  4563   01290E  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4564   012910  EC41  F094         	call	_vfprintf	;wreg free
  4565   012914  0100               	movlb	0	; () banked
  4566   012916  5179               	movf	(sprintf@f+3)& (0+255),w,b
  4567   012918  2566               	addwf	sprintf@s& (0+255),w,b
  4568   01291A  6ED9               	movwf	fsr2l,c
  4569   01291C  517A               	movf	(sprintf@f+4)& (0+255),w,b
  4570   01291E  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4571   012920  6EDA               	movwf	fsr2h,c
  4572   012922  0E00               	movlw	0
  4573   012924  6EDF               	movwf	indf2,c
  4574   012926                     
  4575                           ; BSR set to: 0
  4576   012926  0012               	return		;funcret
  4577   012928                     __end_of_sprintf:
  4578                           	callstack 0
  4579                           
  4580 ;; *************** function _vfprintf *****************
  4581 ;; Defined at:
  4582 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4585 ;;		 -> sprintf@f(11), 
  4586 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4587 ;;		 -> STR_14(10), STR_13(36), STR_12(10), STR_11(36), 
  4588 ;;		 -> STR_10(25), STR_9(27), STR_8(25), STR_7(25), 
  4589 ;;		 -> STR_6(26), STR_5(23), STR_4(30), STR_3(15), 
  4590 ;;		 -> STR_2(23), STR_1(50), 
  4591 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4592 ;;		 -> sprintf@ap(2), 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  4595 ;;		 -> STR_14(10), STR_13(36), STR_12(10), STR_11(36), 
  4596 ;;		 -> STR_10(25), STR_9(27), STR_8(25), STR_7(25), 
  4597 ;;		 -> STR_6(26), STR_5(23), STR_4(30), STR_3(15), 
  4598 ;;		 -> STR_2(23), STR_1(50), 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  2    0[BANK0 ] int 
  4601 ;; Registers used:
  4602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4608 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4612 ;;Total ram usage:        8 bytes
  4613 ;; Hardware stack levels used: 1
  4614 ;; Hardware stack levels required when called: 7
  4615 ;; This function calls:
  4616 ;;		_vfpfcnvrt
  4617 ;; This function is called by:
  4618 ;;		_sprintf
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text11
  4623   012882                     __ptext11:
  4624                           	callstack 0
  4625   012882                     _vfprintf:
  4626                           	callstack 22
  4627   012882                     
  4628                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4629   012882  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  4630   012886  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4631                           
  4632                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4633   01288A  EF55  F094         	goto	l4240
  4634   01288E                     l4238:
  4635                           
  4636                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4637   01288E  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  4638   012892  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4639   012896  0E54               	movlw	low vfprintf@cfmt
  4640   012898  6E44               	movwf	vfpfcnvrt@fmt^0,c
  4641   01289A  0E00               	movlw	high vfprintf@cfmt
  4642   01289C  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4643   01289E  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  4644   0128A2  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4645   0128A6  EC85  F08F         	call	_vfpfcnvrt	;wreg free
  4646   0128AA                     l4240:
  4647                           
  4648                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4649   0128AA  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  4650   0128AE  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4651   0128B2                     	if	0	;tblptru may be non-zero
  4652   0128B2                     	endif
  4653   0128B2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4654   0128B2  0E00               	movlw	low (__mediumconst shr (0+16))
  4655   0128B4  6EF8               	movwf	tblptru,c
  4656   0128B6                     	endif
  4657   0128B6  0008               	tblrd		*
  4658   0128B8  50F5               	movf	tablat,w,c
  4659   0128BA  0900               	iorlw	0
  4660   0128BC  A4D8               	btfss	status,2,c
  4661   0128BE  EF63  F094         	goto	u2331
  4662   0128C2  EF65  F094         	goto	u2330
  4663   0128C6                     u2331:
  4664   0128C6  EF47  F094         	goto	l4238
  4665   0128CA                     u2330:
  4666   0128CA                     
  4667                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4668   0128CA  0E00               	movlw	0
  4669   0128CC  0100               	movlb	0	; () banked
  4670   0128CE  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4671   0128D0  0E00               	movlw	0
  4672   0128D2  6F60               	movwf	?_vfprintf& (0+255),b
  4673   0128D4                     
  4674                           ; BSR set to: 0
  4675   0128D4  0012               	return		;funcret
  4676   0128D6                     __end_of_vfprintf:
  4677                           	callstack 0
  4678                           
  4679 ;; *************** function _vfpfcnvrt *****************
  4680 ;; Defined at:
  4681 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  4684 ;;		 -> sprintf@f(11), 
  4685 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  4686 ;;		 -> vfprintf@cfmt(2), 
  4687 ;;  ap              2   69[COMRAM] PTR PTR void 
  4688 ;;		 -> sprintf@ap(2), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  convarg         8   73[COMRAM] struct .
  4691 ;;  cp              2   81[COMRAM] PTR unsigned char 
  4692 ;;		 -> STR_14(10), STR_13(36), STR_12(10), STR_11(36), 
  4693 ;;		 -> STR_10(25), STR_9(27), STR_8(25), STR_7(25), 
  4694 ;;		 -> STR_6(26), STR_5(23), STR_4(30), STR_3(15), 
  4695 ;;		 -> STR_2(23), STR_1(50), 
  4696 ;;  i               2    0        int 
  4697 ;;  done            2    0        int 
  4698 ;;  c               1    0        unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      void 
  4701 ;; Registers used:
  4702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4708 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4709 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4711 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4712 ;;Total ram usage:       18 bytes
  4713 ;; Hardware stack levels used: 1
  4714 ;; Hardware stack levels required when called: 6
  4715 ;; This function calls:
  4716 ;;		_dtoa
  4717 ;;		_fputc
  4718 ;; This function is called by:
  4719 ;;		_vfprintf
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text12
  4724   011F0A                     __ptext12:
  4725                           	callstack 0
  4726   011F0A                     _vfpfcnvrt:
  4727                           	callstack 22
  4728   011F0A                     
  4729                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4730   011F0A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4731   011F0E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4732   011F12  CFDE FFF6          	movff	postinc2,tblptrl
  4733   011F16  CFDD FFF7          	movff	postdec2,tblptrh
  4734   011F1A                     	if	0	;tblptru may be non-zero
  4735   011F1A                     	endif
  4736   011F1A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4737   011F1A  0E00               	movlw	low (__mediumconst shr (0+16))
  4738   011F1C  6EF8               	movwf	tblptru,c
  4739   011F1E                     	endif
  4740   011F1E  0008               	tblrd		*
  4741   011F20  50F5               	movf	tablat,w,c
  4742   011F22  0A25               	xorlw	37
  4743   011F24  A4D8               	btfss	status,2,c
  4744   011F26  EF97  F08F         	goto	u2231
  4745   011F2A  EF99  F08F         	goto	u2230
  4746   011F2E                     u2231:
  4747   011F2E  EF1D  F090         	goto	l4120
  4748   011F32                     u2230:
  4749   011F32                     
  4750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4751   011F32  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4752   011F36  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4753   011F3A  2ADE               	incf	postinc2,f,c
  4754   011F3C  0E00               	movlw	0
  4755   011F3E  22DD               	addwfc	postdec2,f,c
  4756   011F40                     
  4757                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4758   011F40  0E00               	movlw	0
  4759   011F42  0100               	movlb	0	; () banked
  4760   011F44  6FD4               	movwf	(_width+1)& (0+255),b
  4761   011F46  0E00               	movlw	0
  4762   011F48  6FD3               	movwf	_width& (0+255),b
  4763   011F4A  C0D3  F0DD         	movff	_width,_flags
  4764   011F4E                     
  4765                           ; BSR set to: 0
  4766                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4767   011F4E  69D5               	setf	_prec& (0+255),b
  4768   011F50  69D6               	setf	(_prec+1)& (0+255),b
  4769   011F52                     
  4770                           ; BSR set to: 0
  4771                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4772   011F52  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4773   011F56  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4774   011F5A  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  4775   011F5E  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  4776   011F62                     
  4777                           ; BSR set to: 0
  4778                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4779   011F62  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4780   011F66  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4781   011F6A                     	if	0	;tblptru may be non-zero
  4782   011F6A                     	endif
  4783   011F6A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4784   011F6A  0E00               	movlw	low (__mediumconst shr (0+16))
  4785   011F6C  6EF8               	movwf	tblptru,c
  4786   011F6E                     	endif
  4787   011F6E  0008               	tblrd		*
  4788   011F70  50F5               	movf	tablat,w,c
  4789   011F72  0A64               	xorlw	100
  4790   011F74  B4D8               	btfsc	status,2,c
  4791   011F76  EFBF  F08F         	goto	u2241
  4792   011F7A  EFC1  F08F         	goto	u2240
  4793   011F7E                     u2241:
  4794   011F7E  EFD1  F08F         	goto	l4110
  4795   011F82                     u2240:
  4796   011F82                     
  4797                           ; BSR set to: 0
  4798   011F82  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4799   011F86  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4800   011F8A                     	if	0	;tblptru may be non-zero
  4801   011F8A                     	endif
  4802   011F8A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4803   011F8A  0E00               	movlw	low (__mediumconst shr (0+16))
  4804   011F8C  6EF8               	movwf	tblptru,c
  4805   011F8E                     	endif
  4806   011F8E  0008               	tblrd		*
  4807   011F90  50F5               	movf	tablat,w,c
  4808   011F92  0A69               	xorlw	105
  4809   011F94  A4D8               	btfss	status,2,c
  4810   011F96  EFCF  F08F         	goto	u2251
  4811   011F9A  EFD1  F08F         	goto	u2250
  4812   011F9E                     u2251:
  4813   011F9E  EF14  F090         	goto	l4116
  4814   011FA2                     u2250:
  4815   011FA2                     l4110:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4819   011FA2  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4820   011FA6  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4821   011FAA  CFDF F048          	movff	indf2,??_vfpfcnvrt
  4822   011FAE  0E02               	movlw	2
  4823   011FB0  26DE               	addwf	postinc2,f,c
  4824   011FB2  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  4825   011FB6  0E00               	movlw	0
  4826   011FB8  22DD               	addwfc	postdec2,f,c
  4827   011FBA  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4828   011FBE  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4829   011FC2  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  4830   011FC6  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  4831   011FCA  0E00               	movlw	0
  4832   011FCC  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4833   011FCE  0EFF               	movlw	-1
  4834   011FD0  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4835   011FD2  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4836   011FD4  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4837   011FD6  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4838   011FD8  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4839   011FDA  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4840                           
  4841                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4842   011FDC  0E01               	movlw	1
  4843   011FDE  2452               	addwf	vfpfcnvrt@cp^0,w,c
  4844   011FE0  6E48               	movwf	??_vfpfcnvrt^0,c
  4845   011FE2  0E00               	movlw	0
  4846   011FE4  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4847   011FE6  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  4848   011FE8  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4849   011FEC  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4850   011FF0  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  4851   011FF4  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4852   011FF8                     
  4853                           ; BSR set to: 0
  4854                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4855   011FF8  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  4856   011FFC  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4857   012000  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  4858   012004  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4859   012008  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4860   01200C  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4861   012010  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4862   012014  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4863   012018  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4864   01201C  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4865   012020  EC25  F08A         	call	_dtoa	;wreg free
  4866   012024  EF33  F090         	goto	l1281
  4867   012028                     l4116:
  4868                           
  4869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4870   012028  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4871   01202C  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4872   012030  2ADE               	incf	postinc2,f,c
  4873   012032  0E00               	movlw	0
  4874   012034  22DD               	addwfc	postdec2,f,c
  4875   012036  EF33  F090         	goto	l1281
  4876   01203A                     l4120:
  4877                           
  4878                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4879   01203A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4880   01203E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4881   012042  CFDE FFF6          	movff	postinc2,tblptrl
  4882   012046  CFDD FFF7          	movff	postdec2,tblptrh
  4883   01204A                     	if	0	;tblptru may be non-zero
  4884   01204A                     	endif
  4885   01204A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4886   01204A  0E00               	movlw	low (__mediumconst shr (0+16))
  4887   01204C  6EF8               	movwf	tblptru,c
  4888   01204E                     	endif
  4889   01204E  0008               	tblrd		*
  4890   012050  50F5               	movf	tablat,w,c
  4891   012052  6E04               	movwf	fputc@c^0,c
  4892   012054  6A05               	clrf	(fputc@c+1)^0,c
  4893   012056  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  4894   01205A  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4895   01205E  EC47  F091         	call	_fputc	;wreg free
  4896   012062  EF14  F090         	goto	l4116
  4897   012066                     l1281:
  4898   012066  0012               	return		;funcret
  4899   012068                     __end_of_vfpfcnvrt:
  4900                           	callstack 0
  4901                           
  4902 ;; *************** function _dtoa *****************
  4903 ;; Defined at:
  4904 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  4907 ;;		 -> sprintf@f(11), 
  4908 ;;  d               8   32[COMRAM] long long 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  n               8   54[COMRAM] long long 
  4911 ;;  i               2   63[COMRAM] int 
  4912 ;;  w               2   52[COMRAM] int 
  4913 ;;  p               2   50[COMRAM] int 
  4914 ;;  s               1   62[COMRAM] unsigned char 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4924 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4928 ;;Total ram usage:       35 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; Hardware stack levels required when called: 5
  4931 ;; This function calls:
  4932 ;;		___aodiv
  4933 ;;		___aomod
  4934 ;;		_abs
  4935 ;;		_pad
  4936 ;; This function is called by:
  4937 ;;		_vfpfcnvrt
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text13
  4942   01144A                     __ptext13:
  4943                           	callstack 0
  4944   01144A                     _dtoa:
  4945                           	callstack 22
  4946   01144A                     
  4947                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4948   01144A  C021  F037         	movff	dtoa@d,dtoa@n
  4949   01144E  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  4950   011452  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  4951   011456  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  4952   01145A  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  4953   01145E  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  4954   011462  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  4955   011466  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  4956   01146A                     
  4957                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4958   01146A  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  4959   01146C  EF3A  F08A         	goto	u2091
  4960   011470  EF3D  F08A         	goto	u2090
  4961   011474                     u2091:
  4962   011474  0E01               	movlw	1
  4963   011476  EF3E  F08A         	goto	u2100
  4964   01147A                     u2090:
  4965   01147A  0E00               	movlw	0
  4966   01147C                     u2100:
  4967   01147C  6E3F               	movwf	dtoa@s^0,c
  4968   01147E                     
  4969                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4970   01147E  503F               	movf	dtoa@s^0,w,c
  4971   011480  B4D8               	btfsc	status,2,c
  4972   011482  EF45  F08A         	goto	u2111
  4973   011486  EF47  F08A         	goto	u2110
  4974   01148A                     u2111:
  4975   01148A  EF57  F08A         	goto	l4032
  4976   01148E                     u2110:
  4977   01148E                     
  4978                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4979   01148E  1E3E               	comf	(dtoa@n+7)^0,f,c
  4980   011490  1E3D               	comf	(dtoa@n+6)^0,f,c
  4981   011492  1E3C               	comf	(dtoa@n+5)^0,f,c
  4982   011494  1E3B               	comf	(dtoa@n+4)^0,f,c
  4983   011496  1E3A               	comf	(dtoa@n+3)^0,f,c
  4984   011498  1E39               	comf	(dtoa@n+2)^0,f,c
  4985   01149A  1E38               	comf	(dtoa@n+1)^0,f,c
  4986   01149C  6C37               	negf	dtoa@n^0,c
  4987   01149E  0E00               	movlw	0
  4988   0114A0  2238               	addwfc	(dtoa@n+1)^0,f,c
  4989   0114A2  2239               	addwfc	(dtoa@n+2)^0,f,c
  4990   0114A4  223A               	addwfc	(dtoa@n+3)^0,f,c
  4991   0114A6  223B               	addwfc	(dtoa@n+4)^0,f,c
  4992   0114A8  223C               	addwfc	(dtoa@n+5)^0,f,c
  4993   0114AA  223D               	addwfc	(dtoa@n+6)^0,f,c
  4994   0114AC  223E               	addwfc	(dtoa@n+7)^0,f,c
  4995   0114AE                     l4032:
  4996                           
  4997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4998   0114AE  0100               	movlb	0	; () banked
  4999   0114B0  BFD6               	btfsc	(_prec+1)& (0+255),7,b
  5000   0114B2  EF65  F08A         	goto	u2120
  5001   0114B6  51D6               	movf	(_prec+1)& (0+255),w,b
  5002   0114B8  E106               	bnz	u2121
  5003   0114BA  05D5               	decf	_prec& (0+255),w,b
  5004   0114BC  B0D8               	btfsc	status,0,c
  5005   0114BE  EF63  F08A         	goto	u2121
  5006   0114C2  EF65  F08A         	goto	u2120
  5007   0114C6                     u2121:
  5008   0114C6  EF6B  F08A         	goto	l1260
  5009   0114CA                     u2120:
  5010   0114CA                     
  5011                           ; BSR set to: 0
  5012   0114CA  0E00               	movlw	0
  5013   0114CC  6E34               	movwf	(dtoa@p+1)^0,c
  5014   0114CE  0E01               	movlw	1
  5015   0114D0  6E33               	movwf	dtoa@p^0,c
  5016   0114D2  EF6F  F08A         	goto	l1262
  5017   0114D6                     l1260:
  5018                           
  5019                           ; BSR set to: 0
  5020   0114D6  C0D5  F033         	movff	_prec,dtoa@p
  5021   0114DA  C0D6  F034         	movff	_prec+1,dtoa@p+1
  5022   0114DE                     l1262:
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  5026   0114DE  C0D3  F035         	movff	_width,dtoa@w
  5027   0114E2  C0D4  F036         	movff	_width+1,dtoa@w+1
  5028   0114E6                     
  5029                           ; BSR set to: 0
  5030                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  5031   0114E6  503F               	movf	dtoa@s^0,w,c
  5032   0114E8  B4D8               	btfsc	status,2,c
  5033   0114EA  EF79  F08A         	goto	u2131
  5034   0114EE  EF7B  F08A         	goto	u2130
  5035   0114F2                     u2131:
  5036   0114F2  EF92  F08A         	goto	l1263
  5037   0114F6                     u2130:
  5038   0114F6                     
  5039                           ; BSR set to: 0
  5040                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  5041   0114F6  0635               	decf	dtoa@w^0,f,c
  5042   0114F8  A0D8               	btfss	status,0,c
  5043   0114FA  0636               	decf	(dtoa@w+1)^0,f,c
  5044   0114FC                     
  5045                           ; BSR set to: 0
  5046                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  5047   0114FC  503F               	movf	dtoa@s^0,w,c
  5048   0114FE  A4D8               	btfss	status,2,c
  5049   011500  EF84  F08A         	goto	u2141
  5050   011504  EF86  F08A         	goto	u2140
  5051   011508                     u2141:
  5052   011508  EF8C  F08A         	goto	l4044
  5053   01150C                     u2140:
  5054   01150C                     
  5055                           ; BSR set to: 0
  5056   01150C  0E00               	movlw	0
  5057   01150E  6E32               	movwf	(_dtoa$2601+1)^0,c
  5058   011510  0E2B               	movlw	43
  5059   011512  6E31               	movwf	_dtoa$2601^0,c
  5060   011514  EF90  F08A         	goto	l4046
  5061   011518                     l4044:
  5062                           
  5063                           ; BSR set to: 0
  5064   011518  0E00               	movlw	0
  5065   01151A  6E32               	movwf	(_dtoa$2601+1)^0,c
  5066   01151C  0E2D               	movlw	45
  5067   01151E  6E31               	movwf	_dtoa$2601^0,c
  5068   011520                     l4046:
  5069                           
  5070                           ; BSR set to: 0
  5071   011520  C031  F03F         	movff	_dtoa$2601,dtoa@s
  5072   011524                     l1263:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  5076   011524  0E00               	movlw	0
  5077   011526  6E41               	movwf	(dtoa@i+1)^0,c
  5078   011528  0E1F               	movlw	31
  5079   01152A  6E40               	movwf	dtoa@i^0,c
  5080   01152C                     
  5081                           ; BSR set to: 0
  5082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  5083   01152C  0E00               	movlw	0
  5084   01152E  6FFE               	movwf	(_dbuf+31)& (0+255),b
  5085                           
  5086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5087   011530  EF16  F08B         	goto	l4060
  5088   011534                     l4050:
  5089                           
  5090                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  5091   011534  0640               	decf	dtoa@i^0,f,c
  5092   011536  A0D8               	btfss	status,0,c
  5093   011538  0641               	decf	(dtoa@i+1)^0,f,c
  5094   01153A                     
  5095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  5096   01153A  0EDF               	movlw	low _dbuf
  5097   01153C  2440               	addwf	dtoa@i^0,w,c
  5098   01153E  6ED9               	movwf	fsr2l,c
  5099   011540  0E00               	movlw	high _dbuf
  5100   011542  2041               	addwfc	(dtoa@i+1)^0,w,c
  5101   011544  6EDA               	movwf	fsr2h,c
  5102   011546  C037  F004         	movff	dtoa@n,___aomod@dividend
  5103   01154A  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  5104   01154E  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  5105   011552  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  5106   011556  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  5107   01155A  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  5108   01155E  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  5109   011562  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  5110   011566  0E0A               	movlw	10
  5111   011568  6E0C               	movwf	___aomod@divisor^0,c
  5112   01156A  0E00               	movlw	0
  5113   01156C  6E0D               	movwf	(___aomod@divisor+1)^0,c
  5114   01156E  0E00               	movlw	0
  5115   011570  6E0E               	movwf	(___aomod@divisor+2)^0,c
  5116   011572  0E00               	movlw	0
  5117   011574  6E0F               	movwf	(___aomod@divisor+3)^0,c
  5118   011576  0E00               	movlw	0
  5119   011578  6E10               	movwf	(___aomod@divisor+4)^0,c
  5120   01157A  0E00               	movlw	0
  5121   01157C  6E11               	movwf	(___aomod@divisor+5)^0,c
  5122   01157E  0E00               	movlw	0
  5123   011580  6E12               	movwf	(___aomod@divisor+6)^0,c
  5124   011582  0E00               	movlw	0
  5125   011584  6E13               	movwf	(___aomod@divisor+7)^0,c
  5126   011586  ECD3  F08E         	call	___aomod	;wreg free
  5127   01158A  C004  F029         	movff	?___aomod,??_dtoa
  5128   01158E  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  5129   011592  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  5130   011596  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  5131   01159A  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  5132   01159E  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  5133   0115A2  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  5134   0115A6  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  5135   0115AA  C029  F016         	movff	??_dtoa,abs@a
  5136   0115AE  C02A  F017         	movff	??_dtoa+1,abs@a+1
  5137   0115B2  EC9B  F095         	call	_abs	;wreg free
  5138   0115B6  5016               	movf	?_abs^0,w,c
  5139   0115B8  0F30               	addlw	48
  5140   0115BA  6EDF               	movwf	indf2,c
  5141   0115BC                     
  5142                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  5143   0115BC  0633               	decf	dtoa@p^0,f,c
  5144   0115BE  A0D8               	btfss	status,0,c
  5145   0115C0  0634               	decf	(dtoa@p+1)^0,f,c
  5146   0115C2                     
  5147                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  5148   0115C2  0635               	decf	dtoa@w^0,f,c
  5149   0115C4  A0D8               	btfss	status,0,c
  5150   0115C6  0636               	decf	(dtoa@w+1)^0,f,c
  5151   0115C8                     
  5152                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  5153   0115C8  C037  F004         	movff	dtoa@n,___aodiv@dividend
  5154   0115CC  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  5155   0115D0  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  5156   0115D4  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  5157   0115D8  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  5158   0115DC  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  5159   0115E0  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  5160   0115E4  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  5161   0115E8  0E0A               	movlw	10
  5162   0115EA  6E0C               	movwf	___aodiv@divisor^0,c
  5163   0115EC  0E00               	movlw	0
  5164   0115EE  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  5165   0115F0  0E00               	movlw	0
  5166   0115F2  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  5167   0115F4  0E00               	movlw	0
  5168   0115F6  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  5169   0115F8  0E00               	movlw	0
  5170   0115FA  6E10               	movwf	(___aodiv@divisor+4)^0,c
  5171   0115FC  0E00               	movlw	0
  5172   0115FE  6E11               	movwf	(___aodiv@divisor+5)^0,c
  5173   011600  0E00               	movlw	0
  5174   011602  6E12               	movwf	(___aodiv@divisor+6)^0,c
  5175   011604  0E00               	movlw	0
  5176   011606  6E13               	movwf	(___aodiv@divisor+7)^0,c
  5177   011608  ECA0  F08C         	call	___aodiv	;wreg free
  5178   01160C  C004  F037         	movff	?___aodiv,dtoa@n
  5179   011610  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  5180   011614  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  5181   011618  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  5182   01161C  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  5183   011620  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  5184   011624  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  5185   011628  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  5186   01162C                     l4060:
  5187                           
  5188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5189   01162C  BE41               	btfsc	(dtoa@i+1)^0,7,c
  5190   01162E  EF21  F08B         	goto	u2151
  5191   011632  5041               	movf	(dtoa@i+1)^0,w,c
  5192   011634  E108               	bnz	u2150
  5193   011636  0440               	decf	dtoa@i^0,w,c
  5194   011638  A0D8               	btfss	status,0,c
  5195   01163A  EF21  F08B         	goto	u2151
  5196   01163E  EF23  F08B         	goto	u2150
  5197   011642                     u2151:
  5198   011642  EF3F  F08B         	goto	l4066
  5199   011646                     u2150:
  5200   011646  5037               	movf	dtoa@n^0,w,c
  5201   011648  1038               	iorwf	(dtoa@n+1)^0,w,c
  5202   01164A  1039               	iorwf	(dtoa@n+2)^0,w,c
  5203   01164C  103A               	iorwf	(dtoa@n+3)^0,w,c
  5204   01164E  103B               	iorwf	(dtoa@n+4)^0,w,c
  5205   011650  103C               	iorwf	(dtoa@n+5)^0,w,c
  5206   011652  103D               	iorwf	(dtoa@n+6)^0,w,c
  5207   011654  103E               	iorwf	(dtoa@n+7)^0,w,c
  5208   011656  A4D8               	btfss	status,2,c
  5209   011658  EF30  F08B         	goto	u2161
  5210   01165C  EF32  F08B         	goto	u2160
  5211   011660                     u2161:
  5212   011660  EF9A  F08A         	goto	l4050
  5213   011664                     u2160:
  5214   011664  BE34               	btfsc	(dtoa@p+1)^0,7,c
  5215   011666  EF3F  F08B         	goto	u2170
  5216   01166A  5034               	movf	(dtoa@p+1)^0,w,c
  5217   01166C  E106               	bnz	u2171
  5218   01166E  0433               	decf	dtoa@p^0,w,c
  5219   011670  B0D8               	btfsc	status,0,c
  5220   011672  EF3D  F08B         	goto	u2171
  5221   011676  EF3F  F08B         	goto	u2170
  5222   01167A                     u2171:
  5223   01167A  EF9A  F08A         	goto	l4050
  5224   01167E                     u2170:
  5225   01167E                     l4066:
  5226                           
  5227                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5228   01167E  503F               	movf	dtoa@s^0,w,c
  5229   011680  B4D8               	btfsc	status,2,c
  5230   011682  EF45  F08B         	goto	u2181
  5231   011686  EF47  F08B         	goto	u2180
  5232   01168A                     u2181:
  5233   01168A  EF52  F08B         	goto	l4072
  5234   01168E                     u2180:
  5235   01168E                     
  5236                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5237   01168E  0640               	decf	dtoa@i^0,f,c
  5238   011690  A0D8               	btfss	status,0,c
  5239   011692  0641               	decf	(dtoa@i+1)^0,f,c
  5240   011694                     
  5241                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5242   011694  0EDF               	movlw	low _dbuf
  5243   011696  2440               	addwf	dtoa@i^0,w,c
  5244   011698  6ED9               	movwf	fsr2l,c
  5245   01169A  0E00               	movlw	high _dbuf
  5246   01169C  2041               	addwfc	(dtoa@i+1)^0,w,c
  5247   01169E  6EDA               	movwf	fsr2h,c
  5248   0116A0  C03F  FFDF         	movff	dtoa@s,indf2
  5249   0116A4                     l4072:
  5250                           
  5251                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5252   0116A4  C01F  F014         	movff	dtoa@fp,pad@fp
  5253   0116A8  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  5254   0116AC  0EDF               	movlw	low _dbuf
  5255   0116AE  2440               	addwf	dtoa@i^0,w,c
  5256   0116B0  6E16               	movwf	pad@buf^0,c
  5257   0116B2  0E00               	movlw	high _dbuf
  5258   0116B4  2041               	addwfc	(dtoa@i+1)^0,w,c
  5259   0116B6  6E17               	movwf	(pad@buf+1)^0,c
  5260   0116B8  C035  F018         	movff	dtoa@w,pad@p
  5261   0116BC  C036  F019         	movff	dtoa@w+1,pad@p+1
  5262   0116C0  EC6A  F093         	call	_pad	;wreg free
  5263   0116C4  0012               	return		;funcret
  5264   0116C6                     __end_of_dtoa:
  5265                           	callstack 0
  5266                           
  5267 ;; *************** function _pad *****************
  5268 ;; Defined at:
  5269 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  5272 ;;		 -> sprintf@f(11), 
  5273 ;;  buf             2   21[COMRAM] PTR unsigned char 
  5274 ;;		 -> dbuf(32), 
  5275 ;;  p               2   23[COMRAM] int 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  w               2   28[COMRAM] int 
  5278 ;;  i               2   26[COMRAM] int 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5288 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;Total ram usage:       11 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 4
  5295 ;; This function calls:
  5296 ;;		_fputc
  5297 ;;		_fputs
  5298 ;; This function is called by:
  5299 ;;		_dtoa
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text14
  5304   0126D4                     __ptext14:
  5305                           	callstack 0
  5306   0126D4                     _pad:
  5307                           	callstack 22
  5308   0126D4                     
  5309                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5310   0126D4  BE19               	btfsc	(pad@p+1)^0,7,c
  5311   0126D6  EF6F  F093         	goto	u2041
  5312   0126DA  EF71  F093         	goto	u2040
  5313   0126DE                     u2041:
  5314   0126DE  EF77  F093         	goto	l3986
  5315   0126E2                     u2040:
  5316   0126E2  C018  F01D         	movff	pad@p,pad@w
  5317   0126E6  C019  F01E         	movff	pad@p+1,pad@w+1
  5318   0126EA  EF7B  F093         	goto	l1251
  5319   0126EE                     l3986:
  5320   0126EE  0E00               	movlw	0
  5321   0126F0  6E1E               	movwf	(pad@w+1)^0,c
  5322   0126F2  0E00               	movlw	0
  5323   0126F4  6E1D               	movwf	pad@w^0,c
  5324   0126F6                     l1251:
  5325                           
  5326                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5327   0126F6  0E00               	movlw	0
  5328   0126F8  6E1C               	movwf	(pad@i+1)^0,c
  5329   0126FA  0E00               	movlw	0
  5330   0126FC  6E1B               	movwf	pad@i^0,c
  5331                           
  5332                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5333   0126FE  EF8D  F093         	goto	l3992
  5334   012702                     l3988:
  5335                           
  5336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5337   012702  0E00               	movlw	0
  5338   012704  6E05               	movwf	(fputc@c+1)^0,c
  5339   012706  0E20               	movlw	32
  5340   012708  6E04               	movwf	fputc@c^0,c
  5341   01270A  C014  F006         	movff	pad@fp,fputc@fp
  5342   01270E  C015  F007         	movff	pad@fp+1,fputc@fp+1
  5343   012712  EC47  F091         	call	_fputc	;wreg free
  5344   012716                     
  5345                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5346   012716  4A1B               	infsnz	pad@i^0,f,c
  5347   012718  2A1C               	incf	(pad@i+1)^0,f,c
  5348   01271A                     l3992:
  5349                           
  5350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5351   01271A  501D               	movf	pad@w^0,w,c
  5352   01271C  5C1B               	subwf	pad@i^0,w,c
  5353   01271E  501C               	movf	(pad@i+1)^0,w,c
  5354   012720  0A80               	xorlw	128
  5355   012722  6E1A               	movwf	??_pad^0,c
  5356   012724  501E               	movf	(pad@w+1)^0,w,c
  5357   012726  0A80               	xorlw	128
  5358   012728  581A               	subwfb	??_pad^0,w,c
  5359   01272A  A0D8               	btfss	status,0,c
  5360   01272C  EF9A  F093         	goto	u2051
  5361   012730  EF9C  F093         	goto	u2050
  5362   012734                     u2051:
  5363   012734  EF81  F093         	goto	l3988
  5364   012738                     u2050:
  5365   012738                     
  5366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5367   012738  C016  F00D         	movff	pad@buf,fputs@s
  5368   01273C  C017  F00E         	movff	pad@buf+1,fputs@s+1
  5369   012740  C014  F00F         	movff	pad@fp,fputs@fp
  5370   012744  C015  F010         	movff	pad@fp+1,fputs@fp+1
  5371   012748  EC58  F095         	call	_fputs	;wreg free
  5372   01274C  0012               	return		;funcret
  5373   01274E                     __end_of_pad:
  5374                           	callstack 0
  5375                           
  5376 ;; *************** function _fputs *****************
  5377 ;; Defined at:
  5378 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  s               2   12[COMRAM] PTR const unsigned char 
  5381 ;;		 -> dbuf(32), 
  5382 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  5383 ;;		 -> sprintf@f(11), 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  i               2   17[COMRAM] int 
  5386 ;;  c               1   16[COMRAM] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  2   12[COMRAM] int 
  5389 ;; Registers used:
  5390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5397 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5399 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5400 ;;Total ram usage:        7 bytes
  5401 ;; Hardware stack levels used: 1
  5402 ;; Hardware stack levels required when called: 3
  5403 ;; This function calls:
  5404 ;;		_fputc
  5405 ;; This function is called by:
  5406 ;;		_pad
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text15
  5411   012AB0                     __ptext15:
  5412                           	callstack 0
  5413   012AB0                     _fputs:
  5414                           	callstack 22
  5415   012AB0  0E00               	movlw	0
  5416   012AB2  6E13               	movwf	(fputs@i+1)^0,c
  5417   012AB4  0E00               	movlw	0
  5418   012AB6  6E12               	movwf	fputs@i^0,c
  5419   012AB8  EF69  F095         	goto	l3896
  5420   012ABC                     l3892:
  5421   012ABC  C011  F004         	movff	fputs@c,fputc@c
  5422   012AC0  6A05               	clrf	(fputc@c+1)^0,c
  5423   012AC2  C00F  F006         	movff	fputs@fp,fputc@fp
  5424   012AC6  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  5425   012ACA  EC47  F091         	call	_fputc	;wreg free
  5426   012ACE  4A12               	infsnz	fputs@i^0,f,c
  5427   012AD0  2A13               	incf	(fputs@i+1)^0,f,c
  5428   012AD2                     l3896:
  5429   012AD2  5012               	movf	fputs@i^0,w,c
  5430   012AD4  240D               	addwf	fputs@s^0,w,c
  5431   012AD6  6ED9               	movwf	fsr2l,c
  5432   012AD8  5013               	movf	(fputs@i+1)^0,w,c
  5433   012ADA  200E               	addwfc	(fputs@s+1)^0,w,c
  5434   012ADC  6EDA               	movwf	fsr2h,c
  5435   012ADE  50DF               	movf	indf2,w,c
  5436   012AE0  6E11               	movwf	fputs@c^0,c
  5437   012AE2  5011               	movf	fputs@c^0,w,c
  5438   012AE4  A4D8               	btfss	status,2,c
  5439   012AE6  EF77  F095         	goto	u1891
  5440   012AEA  EF79  F095         	goto	u1890
  5441   012AEE                     u1891:
  5442   012AEE  EF5E  F095         	goto	l3892
  5443   012AF2                     u1890:
  5444   012AF2  0012               	return		;funcret
  5445   012AF4                     __end_of_fputs:
  5446                           	callstack 0
  5447                           
  5448 ;; *************** function _fputc *****************
  5449 ;; Defined at:
  5450 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  c               2    3[COMRAM] int 
  5453 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  5454 ;;		 -> sprintf@f(11), 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  2    3[COMRAM] int 
  5459 ;; Registers used:
  5460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5468 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5469 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5470 ;;Total ram usage:        9 bytes
  5471 ;; Hardware stack levels used: 1
  5472 ;; Hardware stack levels required when called: 2
  5473 ;; This function calls:
  5474 ;;		_putch
  5475 ;; This function is called by:
  5476 ;;		_pad
  5477 ;;		_vfpfcnvrt
  5478 ;;		_fputs
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text16
  5483   01228E                     __ptext16:
  5484                           	callstack 0
  5485   01228E                     _fputc:
  5486                           	callstack 25
  5487   01228E  5006               	movf	fputc@fp^0,w,c
  5488   012290  1007               	iorwf	(fputc@fp+1)^0,w,c
  5489   012292  B4D8               	btfsc	status,2,c
  5490   012294  EF4E  F091         	goto	u1851
  5491   012298  EF50  F091         	goto	u1850
  5492   01229C                     u1851:
  5493   01229C  EF59  F091         	goto	l3880
  5494   0122A0                     u1850:
  5495   0122A0  5006               	movf	fputc@fp^0,w,c
  5496   0122A2  1007               	iorwf	(fputc@fp+1)^0,w,c
  5497   0122A4  A4D8               	btfss	status,2,c
  5498   0122A6  EF57  F091         	goto	u1861
  5499   0122AA  EF59  F091         	goto	u1860
  5500   0122AE                     u1861:
  5501   0122AE  EF5E  F091         	goto	l3882
  5502   0122B2                     u1860:
  5503   0122B2                     l3880:
  5504   0122B2  5004               	movf	fputc@c^0,w,c
  5505   0122B4  ECA3  F096         	call	_putch
  5506   0122B8  EFAB  F091         	goto	l1299
  5507   0122BC                     l3882:
  5508   0122BC  EE20 F009          	lfsr	2,9
  5509   0122C0  5006               	movf	fputc@fp^0,w,c
  5510   0122C2  26D9               	addwf	fsr2l,f,c
  5511   0122C4  5007               	movf	(fputc@fp+1)^0,w,c
  5512   0122C6  22DA               	addwfc	fsr2h,f,c
  5513   0122C8  50DE               	movf	postinc2,w,c
  5514   0122CA  10DE               	iorwf	postinc2,w,c
  5515   0122CC  B4D8               	btfsc	status,2,c
  5516   0122CE  EF6B  F091         	goto	u1871
  5517   0122D2  EF6D  F091         	goto	u1870
  5518   0122D6                     u1871:
  5519   0122D6  EF88  F091         	goto	l3886
  5520   0122DA                     u1870:
  5521   0122DA  EE20 F009          	lfsr	2,9
  5522   0122DE  5006               	movf	fputc@fp^0,w,c
  5523   0122E0  26D9               	addwf	fsr2l,f,c
  5524   0122E2  5007               	movf	(fputc@fp+1)^0,w,c
  5525   0122E4  22DA               	addwfc	fsr2h,f,c
  5526   0122E6  EE10 F003          	lfsr	1,3
  5527   0122EA  5006               	movf	fputc@fp^0,w,c
  5528   0122EC  26E1               	addwf	fsr1l,f,c
  5529   0122EE  5007               	movf	(fputc@fp+1)^0,w,c
  5530   0122F0  22E2               	addwfc	fsr1h,f,c
  5531   0122F2  50DE               	movf	postinc2,w,c
  5532   0122F4  5CE6               	subwf	postinc1,w,c
  5533   0122F6  50E6               	movf	postinc1,w,c
  5534   0122F8  0A80               	xorlw	128
  5535   0122FA  6E0C               	movwf	(??_fputc+4)^0,c
  5536   0122FC  50DE               	movf	postinc2,w,c
  5537   0122FE  0A80               	xorlw	128
  5538   012300  580C               	subwfb	(??_fputc+4)^0,w,c
  5539   012302  B0D8               	btfsc	status,0,c
  5540   012304  EF86  F091         	goto	u1881
  5541   012308  EF88  F091         	goto	u1880
  5542   01230C                     u1881:
  5543   01230C  EFAB  F091         	goto	l1299
  5544   012310                     u1880:
  5545   012310                     l3886:
  5546   012310  EE20 F003          	lfsr	2,3
  5547   012314  5006               	movf	fputc@fp^0,w,c
  5548   012316  26D9               	addwf	fsr2l,f,c
  5549   012318  5007               	movf	(fputc@fp+1)^0,w,c
  5550   01231A  22DA               	addwfc	fsr2h,f,c
  5551   01231C  CFDE F008          	movff	postinc2,??_fputc
  5552   012320  CFDD F009          	movff	postdec2,??_fputc+1
  5553   012324  C006  FFD9         	movff	fputc@fp,fsr2l
  5554   012328  C007  FFDA         	movff	fputc@fp+1,fsr2h
  5555   01232C  CFDE F00A          	movff	postinc2,??_fputc+2
  5556   012330  CFDD F00B          	movff	postdec2,??_fputc+3
  5557   012334  5008               	movf	??_fputc^0,w,c
  5558   012336  240A               	addwf	(??_fputc+2)^0,w,c
  5559   012338  6ED9               	movwf	fsr2l,c
  5560   01233A  5009               	movf	(??_fputc+1)^0,w,c
  5561   01233C  200B               	addwfc	(??_fputc+3)^0,w,c
  5562   01233E  6EDA               	movwf	fsr2h,c
  5563   012340  C004  FFDF         	movff	fputc@c,indf2
  5564   012344  EE20 F003          	lfsr	2,3
  5565   012348  5006               	movf	fputc@fp^0,w,c
  5566   01234A  26D9               	addwf	fsr2l,f,c
  5567   01234C  5007               	movf	(fputc@fp+1)^0,w,c
  5568   01234E  22DA               	addwfc	fsr2h,f,c
  5569   012350  2ADE               	incf	postinc2,f,c
  5570   012352  0E00               	movlw	0
  5571   012354  22DD               	addwfc	postdec2,f,c
  5572   012356                     l1299:
  5573   012356  0012               	return		;funcret
  5574   012358                     __end_of_fputc:
  5575                           	callstack 0
  5576                           
  5577 ;; *************** function _putch *****************
  5578 ;; Defined at:
  5579 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  c               1    wreg     unsigned char 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  c               1    0[COMRAM] unsigned char 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5597 ;;Total ram usage:        0 bytes
  5598 ;; Hardware stack levels used: 1
  5599 ;; Hardware stack levels required when called: 1
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_fputc
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text17
  5608   012D46                     __ptext17:
  5609                           	callstack 0
  5610   012D46                     _putch:
  5611                           	callstack 25
  5612   012D46  0012               	return		;funcret
  5613   012D48                     __end_of_putch:
  5614                           	callstack 0
  5615                           
  5616 ;; *************** function _abs *****************
  5617 ;; Defined at:
  5618 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  a               2   21[COMRAM] int 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  2   21[COMRAM] int 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;Total ram usage:        4 bytes
  5637 ;; Hardware stack levels used: 1
  5638 ;; Hardware stack levels required when called: 1
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_normalise_readings
  5643 ;;		_dtoa
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text18
  5648   012B36                     __ptext18:
  5649                           	callstack 0
  5650   012B36                     _abs:
  5651                           	callstack 25
  5652   012B36  BE17               	btfsc	(abs@a+1)^0,7,c
  5653   012B38  EFA8  F095         	goto	u1900
  5654   012B3C  5017               	movf	(abs@a+1)^0,w,c
  5655   012B3E  E106               	bnz	u1901
  5656   012B40  0416               	decf	abs@a^0,w,c
  5657   012B42  B0D8               	btfsc	status,0,c
  5658   012B44  EFA6  F095         	goto	u1901
  5659   012B48  EFA8  F095         	goto	u1900
  5660   012B4C                     u1901:
  5661   012B4C  EFB6  F095         	goto	l1219
  5662   012B50                     u1900:
  5663   012B50  C016  F018         	movff	abs@a,??_abs
  5664   012B54  C017  F019         	movff	abs@a+1,??_abs+1
  5665   012B58  1E18               	comf	??_abs^0,f,c
  5666   012B5A  1E19               	comf	(??_abs+1)^0,f,c
  5667   012B5C  4A18               	infsnz	??_abs^0,f,c
  5668   012B5E  2A19               	incf	(??_abs+1)^0,f,c
  5669   012B60  C018  F016         	movff	??_abs,?_abs
  5670   012B64  C019  F017         	movff	??_abs+1,?_abs+1
  5671   012B68  EFBA  F095         	goto	l1222
  5672   012B6C                     l1219:
  5673   012B6C  C016  F016         	movff	abs@a,?_abs
  5674   012B70  C017  F017         	movff	abs@a+1,?_abs+1
  5675   012B74                     l1222:
  5676   012B74  0012               	return		;funcret
  5677   012B76                     __end_of_abs:
  5678                           	callstack 0
  5679                           
  5680 ;; *************** function ___aomod *****************
  5681 ;; Defined at:
  5682 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  dividend        8    3[COMRAM] long long 
  5685 ;;  divisor         8   11[COMRAM] long long 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  sign            1   20[COMRAM] unsigned char 
  5688 ;;  counter         1   19[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  8    3[COMRAM] long long 
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5698 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5701 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;Total ram usage:       18 bytes
  5703 ;; Hardware stack levels used: 1
  5704 ;; Hardware stack levels required when called: 1
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_dtoa
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text19
  5713   011DA6                     __ptext19:
  5714                           	callstack 0
  5715   011DA6                     ___aomod:
  5716                           	callstack 25
  5717   011DA6  0E00               	movlw	0
  5718   011DA8  6E15               	movwf	___aomod@sign^0,c
  5719   011DAA  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  5720   011DAC  EFDC  F08E         	goto	u1980
  5721   011DB0  EFDA  F08E         	goto	u1981
  5722   011DB4                     u1981:
  5723   011DB4  EFEE  F08E         	goto	l3954
  5724   011DB8                     u1980:
  5725   011DB8  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5726   011DBA  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5727   011DBC  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5728   011DBE  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5729   011DC0  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5730   011DC2  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5731   011DC4  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5732   011DC6  6C04               	negf	___aomod@dividend^0,c
  5733   011DC8  0E00               	movlw	0
  5734   011DCA  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5735   011DCC  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5736   011DCE  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5737   011DD0  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5738   011DD2  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5739   011DD4  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5740   011DD6  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5741   011DD8  0E01               	movlw	1
  5742   011DDA  6E15               	movwf	___aomod@sign^0,c
  5743   011DDC                     l3954:
  5744   011DDC  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  5745   011DDE  EFF5  F08E         	goto	u1990
  5746   011DE2  EFF3  F08E         	goto	u1991
  5747   011DE6                     u1991:
  5748   011DE6  EF05  F08F         	goto	l3958
  5749   011DEA                     u1990:
  5750   011DEA  1E13               	comf	(___aomod@divisor+7)^0,f,c
  5751   011DEC  1E12               	comf	(___aomod@divisor+6)^0,f,c
  5752   011DEE  1E11               	comf	(___aomod@divisor+5)^0,f,c
  5753   011DF0  1E10               	comf	(___aomod@divisor+4)^0,f,c
  5754   011DF2  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  5755   011DF4  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  5756   011DF6  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  5757   011DF8  6C0C               	negf	___aomod@divisor^0,c
  5758   011DFA  0E00               	movlw	0
  5759   011DFC  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  5760   011DFE  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  5761   011E00  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  5762   011E02  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  5763   011E04  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  5764   011E06  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  5765   011E08  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  5766   011E0A                     l3958:
  5767   011E0A  500C               	movf	___aomod@divisor^0,w,c
  5768   011E0C  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  5769   011E0E  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  5770   011E10  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  5771   011E12  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  5772   011E14  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  5773   011E16  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  5774   011E18  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  5775   011E1A  B4D8               	btfsc	status,2,c
  5776   011E1C  EF12  F08F         	goto	u2001
  5777   011E20  EF14  F08F         	goto	u2000
  5778   011E24                     u2001:
  5779   011E24  EF5C  F08F         	goto	l3974
  5780   011E28                     u2000:
  5781   011E28  0E01               	movlw	1
  5782   011E2A  6E14               	movwf	___aomod@counter^0,c
  5783   011E2C  EF22  F08F         	goto	l3964
  5784   011E30                     l3962:
  5785   011E30  90D8               	bcf	status,0,c
  5786   011E32  360C               	rlcf	___aomod@divisor^0,f,c
  5787   011E34  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  5788   011E36  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  5789   011E38  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  5790   011E3A  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  5791   011E3C  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  5792   011E3E  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  5793   011E40  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  5794   011E42  2A14               	incf	___aomod@counter^0,f,c
  5795   011E44                     l3964:
  5796   011E44  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  5797   011E46  EF27  F08F         	goto	u2011
  5798   011E4A  EF29  F08F         	goto	u2010
  5799   011E4E                     u2011:
  5800   011E4E  EF18  F08F         	goto	l3962
  5801   011E52                     u2010:
  5802   011E52                     l3966:
  5803   011E52  500C               	movf	___aomod@divisor^0,w,c
  5804   011E54  5C04               	subwf	___aomod@dividend^0,w,c
  5805   011E56  500D               	movf	(___aomod@divisor+1)^0,w,c
  5806   011E58  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  5807   011E5A  500E               	movf	(___aomod@divisor+2)^0,w,c
  5808   011E5C  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  5809   011E5E  500F               	movf	(___aomod@divisor+3)^0,w,c
  5810   011E60  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  5811   011E62  5010               	movf	(___aomod@divisor+4)^0,w,c
  5812   011E64  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  5813   011E66  5011               	movf	(___aomod@divisor+5)^0,w,c
  5814   011E68  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  5815   011E6A  5012               	movf	(___aomod@divisor+6)^0,w,c
  5816   011E6C  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  5817   011E6E  5013               	movf	(___aomod@divisor+7)^0,w,c
  5818   011E70  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  5819   011E72  A0D8               	btfss	status,0,c
  5820   011E74  EF3E  F08F         	goto	u2021
  5821   011E78  EF40  F08F         	goto	u2020
  5822   011E7C                     u2021:
  5823   011E7C  EF50  F08F         	goto	l3970
  5824   011E80                     u2020:
  5825   011E80  500C               	movf	___aomod@divisor^0,w,c
  5826   011E82  5E04               	subwf	___aomod@dividend^0,f,c
  5827   011E84  500D               	movf	(___aomod@divisor+1)^0,w,c
  5828   011E86  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  5829   011E88  500E               	movf	(___aomod@divisor+2)^0,w,c
  5830   011E8A  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  5831   011E8C  500F               	movf	(___aomod@divisor+3)^0,w,c
  5832   011E8E  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  5833   011E90  5010               	movf	(___aomod@divisor+4)^0,w,c
  5834   011E92  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  5835   011E94  5011               	movf	(___aomod@divisor+5)^0,w,c
  5836   011E96  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  5837   011E98  5012               	movf	(___aomod@divisor+6)^0,w,c
  5838   011E9A  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  5839   011E9C  5013               	movf	(___aomod@divisor+7)^0,w,c
  5840   011E9E  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  5841   011EA0                     l3970:
  5842   011EA0  90D8               	bcf	status,0,c
  5843   011EA2  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  5844   011EA4  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  5845   011EA6  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  5846   011EA8  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  5847   011EAA  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  5848   011EAC  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  5849   011EAE  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  5850   011EB0  320C               	rrcf	___aomod@divisor^0,f,c
  5851   011EB2  2E14               	decfsz	___aomod@counter^0,f,c
  5852   011EB4  EF29  F08F         	goto	l3966
  5853   011EB8                     l3974:
  5854   011EB8  5015               	movf	___aomod@sign^0,w,c
  5855   011EBA  B4D8               	btfsc	status,2,c
  5856   011EBC  EF62  F08F         	goto	u2031
  5857   011EC0  EF64  F08F         	goto	u2030
  5858   011EC4                     u2031:
  5859   011EC4  EF74  F08F         	goto	l3978
  5860   011EC8                     u2030:
  5861   011EC8  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5862   011ECA  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5863   011ECC  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5864   011ECE  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5865   011ED0  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5866   011ED2  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5867   011ED4  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5868   011ED6  6C04               	negf	___aomod@dividend^0,c
  5869   011ED8  0E00               	movlw	0
  5870   011EDA  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5871   011EDC  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5872   011EDE  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5873   011EE0  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5874   011EE2  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5875   011EE4  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5876   011EE6  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5877   011EE8                     l3978:
  5878   011EE8  C004  F004         	movff	___aomod@dividend,?___aomod
  5879   011EEC  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  5880   011EF0  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  5881   011EF4  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  5882   011EF8  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  5883   011EFC  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  5884   011F00  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  5885   011F04  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  5886   011F08  0012               	return		;funcret
  5887   011F0A                     __end_of___aomod:
  5888                           	callstack 0
  5889                           
  5890 ;; *************** function ___aodiv *****************
  5891 ;; Defined at:
  5892 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  dividend        8    3[COMRAM] long long 
  5895 ;;  divisor         8   11[COMRAM] long long 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  quotient        8   21[COMRAM] long long 
  5898 ;;  sign            1   20[COMRAM] unsigned char 
  5899 ;;  counter         1   19[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  8    3[COMRAM] long long 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5909 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5910 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5912 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5913 ;;Total ram usage:       26 bytes
  5914 ;; Hardware stack levels used: 1
  5915 ;; Hardware stack levels required when called: 1
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_dtoa
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text20
  5924   011940                     __ptext20:
  5925                           	callstack 0
  5926   011940                     ___aodiv:
  5927                           	callstack 25
  5928   011940  0E00               	movlw	0
  5929   011942  6E15               	movwf	___aodiv@sign^0,c
  5930   011944  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  5931   011946  EFA9  F08C         	goto	u1910
  5932   01194A  EFA7  F08C         	goto	u1911
  5933   01194E                     u1911:
  5934   01194E  EFBB  F08C         	goto	l3910
  5935   011952                     u1910:
  5936   011952  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  5937   011954  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  5938   011956  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  5939   011958  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  5940   01195A  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  5941   01195C  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  5942   01195E  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  5943   011960  6C0C               	negf	___aodiv@divisor^0,c
  5944   011962  0E00               	movlw	0
  5945   011964  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  5946   011966  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  5947   011968  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  5948   01196A  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  5949   01196C  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  5950   01196E  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  5951   011970  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  5952   011972  0E01               	movlw	1
  5953   011974  6E15               	movwf	___aodiv@sign^0,c
  5954   011976                     l3910:
  5955   011976  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  5956   011978  EFC2  F08C         	goto	u1920
  5957   01197C  EFC0  F08C         	goto	u1921
  5958   011980                     u1921:
  5959   011980  EFD4  F08C         	goto	l3916
  5960   011984                     u1920:
  5961   011984  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  5962   011986  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  5963   011988  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  5964   01198A  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  5965   01198C  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  5966   01198E  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  5967   011990  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  5968   011992  6C04               	negf	___aodiv@dividend^0,c
  5969   011994  0E00               	movlw	0
  5970   011996  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  5971   011998  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  5972   01199A  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  5973   01199C  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  5974   01199E  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  5975   0119A0  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  5976   0119A2  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  5977   0119A4  0E01               	movlw	1
  5978   0119A6  1A15               	xorwf	___aodiv@sign^0,f,c
  5979   0119A8                     l3916:
  5980   0119A8  EE20  F016         	lfsr	2,___aodiv@quotient
  5981   0119AC  0E07               	movlw	7
  5982   0119AE                     u1931:
  5983   0119AE  6ADE               	clrf	postinc2,c
  5984   0119B0  06E8               	decf	wreg,f,c
  5985   0119B2  E2FD               	bc	u1931
  5986   0119B4  500C               	movf	___aodiv@divisor^0,w,c
  5987   0119B6  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  5988   0119B8  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  5989   0119BA  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  5990   0119BC  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  5991   0119BE  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  5992   0119C0  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  5993   0119C2  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  5994   0119C4  B4D8               	btfsc	status,2,c
  5995   0119C6  EFE7  F08C         	goto	u1941
  5996   0119CA  EFE9  F08C         	goto	u1940
  5997   0119CE                     u1941:
  5998   0119CE  EF3B  F08D         	goto	l3938
  5999   0119D2                     u1940:
  6000   0119D2  0E01               	movlw	1
  6001   0119D4  6E14               	movwf	___aodiv@counter^0,c
  6002   0119D6  EFF7  F08C         	goto	l3924
  6003   0119DA                     l3922:
  6004   0119DA  90D8               	bcf	status,0,c
  6005   0119DC  360C               	rlcf	___aodiv@divisor^0,f,c
  6006   0119DE  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  6007   0119E0  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  6008   0119E2  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  6009   0119E4  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  6010   0119E6  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  6011   0119E8  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  6012   0119EA  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  6013   0119EC  2A14               	incf	___aodiv@counter^0,f,c
  6014   0119EE                     l3924:
  6015   0119EE  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  6016   0119F0  EFFC  F08C         	goto	u1951
  6017   0119F4  EFFE  F08C         	goto	u1950
  6018   0119F8                     u1951:
  6019   0119F8  EFED  F08C         	goto	l3922
  6020   0119FC                     u1950:
  6021   0119FC                     l3926:
  6022   0119FC  90D8               	bcf	status,0,c
  6023   0119FE  3616               	rlcf	___aodiv@quotient^0,f,c
  6024   011A00  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  6025   011A02  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  6026   011A04  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  6027   011A06  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  6028   011A08  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  6029   011A0A  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  6030   011A0C  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  6031   011A0E  500C               	movf	___aodiv@divisor^0,w,c
  6032   011A10  5C04               	subwf	___aodiv@dividend^0,w,c
  6033   011A12  500D               	movf	(___aodiv@divisor+1)^0,w,c
  6034   011A14  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  6035   011A16  500E               	movf	(___aodiv@divisor+2)^0,w,c
  6036   011A18  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  6037   011A1A  500F               	movf	(___aodiv@divisor+3)^0,w,c
  6038   011A1C  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  6039   011A1E  5010               	movf	(___aodiv@divisor+4)^0,w,c
  6040   011A20  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  6041   011A22  5011               	movf	(___aodiv@divisor+5)^0,w,c
  6042   011A24  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  6043   011A26  5012               	movf	(___aodiv@divisor+6)^0,w,c
  6044   011A28  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  6045   011A2A  5013               	movf	(___aodiv@divisor+7)^0,w,c
  6046   011A2C  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  6047   011A2E  A0D8               	btfss	status,0,c
  6048   011A30  EF1C  F08D         	goto	u1961
  6049   011A34  EF1E  F08D         	goto	u1960
  6050   011A38                     u1961:
  6051   011A38  EF2F  F08D         	goto	l3934
  6052   011A3C                     u1960:
  6053   011A3C  500C               	movf	___aodiv@divisor^0,w,c
  6054   011A3E  5E04               	subwf	___aodiv@dividend^0,f,c
  6055   011A40  500D               	movf	(___aodiv@divisor+1)^0,w,c
  6056   011A42  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  6057   011A44  500E               	movf	(___aodiv@divisor+2)^0,w,c
  6058   011A46  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  6059   011A48  500F               	movf	(___aodiv@divisor+3)^0,w,c
  6060   011A4A  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  6061   011A4C  5010               	movf	(___aodiv@divisor+4)^0,w,c
  6062   011A4E  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  6063   011A50  5011               	movf	(___aodiv@divisor+5)^0,w,c
  6064   011A52  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  6065   011A54  5012               	movf	(___aodiv@divisor+6)^0,w,c
  6066   011A56  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  6067   011A58  5013               	movf	(___aodiv@divisor+7)^0,w,c
  6068   011A5A  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  6069   011A5C  8016               	bsf	___aodiv@quotient^0,0,c
  6070   011A5E                     l3934:
  6071   011A5E  90D8               	bcf	status,0,c
  6072   011A60  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  6073   011A62  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  6074   011A64  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  6075   011A66  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  6076   011A68  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  6077   011A6A  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  6078   011A6C  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  6079   011A6E  320C               	rrcf	___aodiv@divisor^0,f,c
  6080   011A70  2E14               	decfsz	___aodiv@counter^0,f,c
  6081   011A72  EFFE  F08C         	goto	l3926
  6082   011A76                     l3938:
  6083   011A76  5015               	movf	___aodiv@sign^0,w,c
  6084   011A78  B4D8               	btfsc	status,2,c
  6085   011A7A  EF41  F08D         	goto	u1971
  6086   011A7E  EF43  F08D         	goto	u1970
  6087   011A82                     u1971:
  6088   011A82  EF53  F08D         	goto	l3942
  6089   011A86                     u1970:
  6090   011A86  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  6091   011A88  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  6092   011A8A  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  6093   011A8C  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  6094   011A8E  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  6095   011A90  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  6096   011A92  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  6097   011A94  6C16               	negf	___aodiv@quotient^0,c
  6098   011A96  0E00               	movlw	0
  6099   011A98  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  6100   011A9A  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  6101   011A9C  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  6102   011A9E  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  6103   011AA0  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  6104   011AA2  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  6105   011AA4  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  6106   011AA6                     l3942:
  6107   011AA6  C016  F004         	movff	___aodiv@quotient,?___aodiv
  6108   011AAA  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  6109   011AAE  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  6110   011AB2  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  6111   011AB6  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  6112   011ABA  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  6113   011ABE  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  6114   011AC2  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  6115   011AC6  0012               	return		;funcret
  6116   011AC8                     __end_of___aodiv:
  6117                           	callstack 0
  6118                           
  6119 ;; *************** function _sendStringSerial4 *****************
  6120 ;; Defined at:
  6121 ;;		line 39 in file "serial.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  string          2    4[COMRAM] PTR unsigned char 
  6124 ;;		 -> main@buf(150), 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6140 ;;Total ram usage:        2 bytes
  6141 ;; Hardware stack levels used: 1
  6142 ;; Hardware stack levels required when called: 2
  6143 ;; This function calls:
  6144 ;;		_sendCharSerial4
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;;		_clear_read_calibration
  6148 ;;		_motor_response
  6149 ;;		_card_response
  6150 ;;		_card_response_easy
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text21
  6155   012BAA                     __ptext21:
  6156                           	callstack 0
  6157   012BAA                     _sendStringSerial4:
  6158                           	callstack 28
  6159   012BAA                     
  6160                           ;serial.c: 40:  while(*string != 0) {
  6161   012BAA  EFE0  F095         	goto	l4308
  6162   012BAE                     l4304:
  6163                           
  6164                           ;serial.c: 41:         sendCharSerial4(*string++);
  6165   012BAE  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6166   012BB2  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6167   012BB6  50DF               	movf	indf2,w,c
  6168   012BB8  EC82  F096         	call	_sendCharSerial4
  6169   012BBC  4A05               	infsnz	sendStringSerial4@string^0,f,c
  6170   012BBE  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  6171   012BC0                     l4308:
  6172                           
  6173                           ;serial.c: 40:  while(*string != 0) {
  6174   012BC0  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6175   012BC4  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6176   012BC8  50DF               	movf	indf2,w,c
  6177   012BCA  A4D8               	btfss	status,2,c
  6178   012BCC  EFEA  F095         	goto	u2351
  6179   012BD0  EFEC  F095         	goto	u2350
  6180   012BD4                     u2351:
  6181   012BD4  EFD7  F095         	goto	l4304
  6182   012BD8                     u2350:
  6183   012BD8  0012               	return		;funcret
  6184   012BDA                     __end_of_sendStringSerial4:
  6185                           	callstack 0
  6186                           
  6187 ;; *************** function _sendCharSerial4 *****************
  6188 ;; Defined at:
  6189 ;;		line 32 in file "serial.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  charToSend      1    wreg     unsigned char 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  charToSend      1    3[COMRAM] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6207 ;;Total ram usage:        1 bytes
  6208 ;; Hardware stack levels used: 1
  6209 ;; Hardware stack levels required when called: 1
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_sendStringSerial4
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text22
  6218   012D04                     __ptext22:
  6219                           	callstack 0
  6220   012D04                     _sendCharSerial4:
  6221                           	callstack 28
  6222                           
  6223                           ;incstack = 0
  6224                           ;sendCharSerial4@charToSend stored from wreg
  6225   012D04  6E04               	movwf	sendCharSerial4@charToSend^0,c
  6226   012D06                     l469:
  6227   012D06  010E               	movlb	14	; () banked
  6228   012D08  A537               	btfss	55,2,b	;volatile
  6229   012D0A  EF89  F096         	goto	u2321
  6230   012D0E  EF8B  F096         	goto	u2320
  6231   012D12                     u2321:
  6232   012D12  EF83  F096         	goto	l469
  6233   012D16                     u2320:
  6234   012D16                     
  6235                           ; BSR set to: 14
  6236                           ;serial.c: 34:     TX4REG = charToSend;
  6237   012D16  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  6238   012D1A                     
  6239                           ; BSR set to: 14
  6240   012D1A  0012               	return		;funcret
  6241   012D1C                     __end_of_sendCharSerial4:
  6242                           	callstack 0
  6243                           
  6244 ;; *************** function _reverseFullSpeed *****************
  6245 ;; Defined at:
  6246 ;;		line 147 in file "dc_motor.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6249 ;;		 -> main@motorL(9), 
  6250 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6251 ;;		 -> main@motorR(9), 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  i               2   27[COMRAM] int 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6266 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6267 ;;Total ram usage:        7 bytes
  6268 ;; Hardware stack levels used: 1
  6269 ;; Hardware stack levels required when called: 3
  6270 ;; This function calls:
  6271 ;;		_setMotorPWM
  6272 ;; This function is called by:
  6273 ;;		_main
  6274 ;;		_motor_response
  6275 ;;		_motor_response_easy
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text23
  6280   0124B4                     __ptext23:
  6281                           	callstack 0
  6282   0124B4                     _reverseFullSpeed:
  6283                           	callstack 27
  6284   0124B4                     
  6285                           ;dc_motor.c: 147: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 148: {;d
      +                          c_motor.c: 149:     mL->direction=0;
  6286   0124B4  EE20 F001          	lfsr	2,1
  6287   0124B8  5017               	movf	reverseFullSpeed@mL^0,w,c
  6288   0124BA  26D9               	addwf	fsr2l,f,c
  6289   0124BC  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  6290   0124BE  22DA               	addwfc	fsr2h,f,c
  6291   0124C0  0E00               	movlw	0
  6292   0124C2  6EDF               	movwf	indf2,c
  6293                           
  6294                           ;dc_motor.c: 150:     mR->direction=0;
  6295   0124C4  EE20 F001          	lfsr	2,1
  6296   0124C8  5019               	movf	reverseFullSpeed@mR^0,w,c
  6297   0124CA  26D9               	addwf	fsr2l,f,c
  6298   0124CC  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  6299   0124CE  22DA               	addwfc	fsr2h,f,c
  6300   0124D0  0E00               	movlw	0
  6301   0124D2  6EDF               	movwf	indf2,c
  6302   0124D4                     
  6303                           ;dc_motor.c: 151:     for(int i=0;i<40;i+=10){
  6304   0124D4  0E00               	movlw	0
  6305   0124D6  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  6306   0124D8  0E00               	movlw	0
  6307   0124DA  6E1C               	movwf	reverseFullSpeed@i^0,c
  6308   0124DC                     l4278:
  6309                           
  6310                           ;dc_motor.c: 152:         mL->power=i;
  6311   0124DC  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  6312   0124E0  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  6313   0124E4  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6314                           
  6315                           ;dc_motor.c: 153:         mR->power=i;
  6316   0124E8  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  6317   0124EC  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  6318   0124F0  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6319   0124F4                     
  6320                           ;dc_motor.c: 154:         setMotorPWM(mL);
  6321   0124F4  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  6322   0124F8  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  6323   0124FC  EC1D  F08E         	call	_setMotorPWM	;wreg free
  6324   012500                     
  6325                           ;dc_motor.c: 155:         setMotorPWM(mR);
  6326   012500  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  6327   012504  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  6328   012508  EC1D  F08E         	call	_setMotorPWM	;wreg free
  6329   01250C                     
  6330                           ;dc_motor.c: 156:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6331   01250C  0ED0               	movlw	208
  6332   01250E  6E1B               	movwf	??_reverseFullSpeed^0,c
  6333   012510  0ECA               	movlw	202
  6334   012512                     u2937:
  6335   012512  2EE8               	decfsz	wreg,f,c
  6336   012514  D7FE               	bra	u2937
  6337   012516  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  6338   012518  D7FC               	bra	u2937
  6339   01251A                     
  6340                           ;dc_motor.c: 157:     }
  6341   01251A  0E0A               	movlw	10
  6342   01251C  261C               	addwf	reverseFullSpeed@i^0,f,c
  6343   01251E  0E00               	movlw	0
  6344   012520  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  6345   012522  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  6346   012524  EF9D  F092         	goto	u2341
  6347   012528  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  6348   01252A  E109               	bnz	u2340
  6349   01252C  0E28               	movlw	40
  6350   01252E  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  6351   012530  A0D8               	btfss	status,0,c
  6352   012532  EF9D  F092         	goto	u2341
  6353   012536  EF9F  F092         	goto	u2340
  6354   01253A                     u2341:
  6355   01253A  EF6E  F092         	goto	l4278
  6356   01253E                     u2340:
  6357   01253E  0012               	return		;funcret
  6358   012540                     __end_of_reverseFullSpeed:
  6359                           	callstack 0
  6360                           
  6361 ;; *************** function _home_response *****************
  6362 ;; Defined at:
  6363 ;;		line 253 in file "colour_identify.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  card            1    wreg     enum E14551
  6366 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  6367 ;;		 -> main@motorL(9), 
  6368 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  6369 ;;		 -> main@motorR(9), 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  card            1   37[COMRAM] enum E14551
  6372 ;;  i               1   36[COMRAM] enum E14551
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6385 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6386 ;;Total ram usage:        8 bytes
  6387 ;; Hardware stack levels used: 1
  6388 ;; Hardware stack levels required when called: 4
  6389 ;; This function calls:
  6390 ;;		_fullSpeedAhead
  6391 ;;		_stop
  6392 ;;		_turnLeft45
  6393 ;;		_turnRight45
  6394 ;; This function is called by:
  6395 ;;		_motor_response
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text24
  6400   010D4C                     __ptext24:
  6401                           	callstack 0
  6402   010D4C                     _home_response:
  6403                           	callstack 24
  6404                           
  6405                           ;incstack = 0
  6406                           ;home_response@card stored from wreg
  6407   010D4C  6E26               	movwf	home_response@card^0,c
  6408   010D4E                     
  6409                           ;colour_identify.c: 254:     for(colour i = RED; i<= card; i++){
  6410   010D4E  0E00               	movlw	0
  6411   010D50  6E25               	movwf	home_response@i^0,c
  6412   010D52                     l391:
  6413                           
  6414                           ;colour_identify.c: 255:         LATDbits.LATD7 = 1;
  6415   010D52  8E7C               	bsf	124,7,c	;volatile
  6416   010D54                     
  6417                           ;colour_identify.c: 256:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6418   010D54  0E09               	movlw	9
  6419   010D56  6E24               	movwf	(??_home_response+1)^0,c
  6420   010D58  0E1E               	movlw	30
  6421   010D5A  6E23               	movwf	??_home_response^0,c
  6422   010D5C  0EE4               	movlw	228
  6423   010D5E                     u2947:
  6424   010D5E  2EE8               	decfsz	wreg,f,c
  6425   010D60  D7FE               	bra	u2947
  6426   010D62  2E23               	decfsz	??_home_response^0,f,c
  6427   010D64  D7FC               	bra	u2947
  6428   010D66  2E24               	decfsz	(??_home_response+1)^0,f,c
  6429   010D68  D7FA               	bra	u2947
  6430   010D6A  D000               	nop2	
  6431   010D6C                     
  6432                           ;colour_identify.c: 257:         LATDbits.LATD7 = 0;
  6433   010D6C  9E7C               	bcf	124,7,c	;volatile
  6434                           
  6435                           ;colour_identify.c: 258:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6436   010D6E  0E09               	movlw	9
  6437   010D70  6E24               	movwf	(??_home_response+1)^0,c
  6438   010D72  0E1E               	movlw	30
  6439   010D74  6E23               	movwf	??_home_response^0,c
  6440   010D76  0EE4               	movlw	228
  6441   010D78                     u2957:
  6442   010D78  2EE8               	decfsz	wreg,f,c
  6443   010D7A  D7FE               	bra	u2957
  6444   010D7C  2E23               	decfsz	??_home_response^0,f,c
  6445   010D7E  D7FC               	bra	u2957
  6446   010D80  2E24               	decfsz	(??_home_response+1)^0,f,c
  6447   010D82  D7FA               	bra	u2957
  6448   010D84  D000               	nop2	
  6449   010D86                     
  6450                           ;colour_identify.c: 259:     }
  6451   010D86  2A25               	incf	home_response@i^0,f,c
  6452   010D88  5025               	movf	home_response@i^0,w,c
  6453   010D8A  5C26               	subwf	home_response@card^0,w,c
  6454   010D8C  B0D8               	btfsc	status,0,c
  6455   010D8E  EFCB  F086         	goto	u2361
  6456   010D92  EFCD  F086         	goto	u2360
  6457   010D96                     u2361:
  6458   010D96  EFA9  F086         	goto	l391
  6459   010D9A                     u2360:
  6460   010D9A  EF85  F088         	goto	l4344
  6461   010D9E                     l4322:
  6462                           
  6463                           ;colour_identify.c: 262:             turnLeft45(mL,mR);
  6464   010D9E  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6465   010DA2  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6466   010DA6  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6467   010DAA  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6468   010DAE  EC03  F092         	call	_turnLeft45	;wreg free
  6469                           
  6470                           ;colour_identify.c: 263:             stop(mL,mR);
  6471   010DB2  C01F  F017         	movff	home_response@mL,stop@mL
  6472   010DB6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6473   010DBA  C021  F019         	movff	home_response@mR,stop@mR
  6474   010DBE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6475   010DC2  EC13  F094         	call	_stop	;wreg free
  6476                           
  6477                           ;colour_identify.c: 264:             turnLeft45(mL,mR);
  6478   010DC6  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6479   010DCA  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6480   010DCE  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6481   010DD2  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6482   010DD6  EC03  F092         	call	_turnLeft45	;wreg free
  6483                           
  6484                           ;colour_identify.c: 265:             stop(mL,mR);
  6485   010DDA  C01F  F017         	movff	home_response@mL,stop@mL
  6486   010DDE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6487   010DE2  C021  F019         	movff	home_response@mR,stop@mR
  6488   010DE6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6489   010DEA  EC13  F094         	call	_stop	;wreg free
  6490                           
  6491                           ;colour_identify.c: 266:             break;
  6492   010DEE  EFB2  F088         	goto	l404
  6493   010DF2                     l4324:
  6494                           
  6495                           ;colour_identify.c: 268:             turnRight45(mL,mR);
  6496   010DF2  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6497   010DF6  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6498   010DFA  C021  F019         	movff	home_response@mR,turnRight45@mR
  6499   010DFE  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6500   010E02  ECAC  F091         	call	_turnRight45	;wreg free
  6501                           
  6502                           ;colour_identify.c: 269:             stop(mL,mR);
  6503   010E06  C01F  F017         	movff	home_response@mL,stop@mL
  6504   010E0A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6505   010E0E  C021  F019         	movff	home_response@mR,stop@mR
  6506   010E12  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6507   010E16  EC13  F094         	call	_stop	;wreg free
  6508                           
  6509                           ;colour_identify.c: 270:             turnRight45(mL,mR);
  6510   010E1A  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6511   010E1E  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6512   010E22  C021  F019         	movff	home_response@mR,turnRight45@mR
  6513   010E26  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6514   010E2A  ECAC  F091         	call	_turnRight45	;wreg free
  6515                           
  6516                           ;colour_identify.c: 271:             stop(mL,mR);
  6517   010E2E  C01F  F017         	movff	home_response@mL,stop@mL
  6518   010E32  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6519   010E36  C021  F019         	movff	home_response@mR,stop@mR
  6520   010E3A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6521   010E3E  EC13  F094         	call	_stop	;wreg free
  6522                           
  6523                           ;colour_identify.c: 272:             break;
  6524   010E42  EFB2  F088         	goto	l404
  6525   010E46                     l4326:
  6526                           
  6527                           ;colour_identify.c: 274:             turnRight45(mL,mR);
  6528   010E46  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6529   010E4A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6530   010E4E  C021  F019         	movff	home_response@mR,turnRight45@mR
  6531   010E52  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6532   010E56  ECAC  F091         	call	_turnRight45	;wreg free
  6533                           
  6534                           ;colour_identify.c: 275:             stop(mL,mR);
  6535   010E5A  C01F  F017         	movff	home_response@mL,stop@mL
  6536   010E5E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6537   010E62  C021  F019         	movff	home_response@mR,stop@mR
  6538   010E66  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6539   010E6A  EC13  F094         	call	_stop	;wreg free
  6540                           
  6541                           ;colour_identify.c: 276:             turnRight45(mL,mR);
  6542   010E6E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6543   010E72  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6544   010E76  C021  F019         	movff	home_response@mR,turnRight45@mR
  6545   010E7A  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6546   010E7E  ECAC  F091         	call	_turnRight45	;wreg free
  6547                           
  6548                           ;colour_identify.c: 277:             stop(mL,mR);
  6549   010E82  C01F  F017         	movff	home_response@mL,stop@mL
  6550   010E86  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6551   010E8A  C021  F019         	movff	home_response@mR,stop@mR
  6552   010E8E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6553   010E92  EC13  F094         	call	_stop	;wreg free
  6554                           
  6555                           ;colour_identify.c: 278:             turnRight45(mL,mR);
  6556   010E96  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6557   010E9A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6558   010E9E  C021  F019         	movff	home_response@mR,turnRight45@mR
  6559   010EA2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6560   010EA6  ECAC  F091         	call	_turnRight45	;wreg free
  6561                           
  6562                           ;colour_identify.c: 279:             stop(mL,mR);
  6563   010EAA  C01F  F017         	movff	home_response@mL,stop@mL
  6564   010EAE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6565   010EB2  C021  F019         	movff	home_response@mR,stop@mR
  6566   010EB6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6567   010EBA  EC13  F094         	call	_stop	;wreg free
  6568                           
  6569                           ;colour_identify.c: 280:             turnRight45(mL,mR);
  6570   010EBE  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6571   010EC2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6572   010EC6  C021  F019         	movff	home_response@mR,turnRight45@mR
  6573   010ECA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6574   010ECE  ECAC  F091         	call	_turnRight45	;wreg free
  6575                           
  6576                           ;colour_identify.c: 281:             stop(mL,mR);
  6577   010ED2  C01F  F017         	movff	home_response@mL,stop@mL
  6578   010ED6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6579   010EDA  C021  F019         	movff	home_response@mR,stop@mR
  6580   010EDE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6581   010EE2  EC13  F094         	call	_stop	;wreg free
  6582                           
  6583                           ;colour_identify.c: 282:             break;
  6584   010EE6  EFB2  F088         	goto	l404
  6585   010EEA                     l4328:
  6586                           
  6587                           ;colour_identify.c: 284:             stop(mL,mR);
  6588   010EEA  C01F  F017         	movff	home_response@mL,stop@mL
  6589   010EEE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6590   010EF2  C021  F019         	movff	home_response@mR,stop@mR
  6591   010EF6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6592   010EFA  EC13  F094         	call	_stop	;wreg free
  6593                           
  6594                           ;colour_identify.c: 285:             turnLeft45(mL,mR);
  6595   010EFE  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6596   010F02  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6597   010F06  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6598   010F0A  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6599   010F0E  EC03  F092         	call	_turnLeft45	;wreg free
  6600                           
  6601                           ;colour_identify.c: 286:             stop(mL,mR);
  6602   010F12  C01F  F017         	movff	home_response@mL,stop@mL
  6603   010F16  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6604   010F1A  C021  F019         	movff	home_response@mR,stop@mR
  6605   010F1E  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6606   010F22  EC13  F094         	call	_stop	;wreg free
  6607                           
  6608                           ;colour_identify.c: 287:             turnLeft45(mL,mR);
  6609   010F26  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6610   010F2A  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6611   010F2E  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6612   010F32  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6613   010F36  EC03  F092         	call	_turnLeft45	;wreg free
  6614                           
  6615                           ;colour_identify.c: 288:             stop(mL,mR);
  6616   010F3A  C01F  F017         	movff	home_response@mL,stop@mL
  6617   010F3E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6618   010F42  C021  F019         	movff	home_response@mR,stop@mR
  6619   010F46  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6620   010F4A  EC13  F094         	call	_stop	;wreg free
  6621                           
  6622                           ;colour_identify.c: 289:             fullSpeedAhead(mL,mR);
  6623   010F4E  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6624   010F52  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6625   010F56  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6626   010F5A  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6627   010F5E  ECA0  F092         	call	_fullSpeedAhead	;wreg free
  6628   010F62                     l4330:
  6629                           
  6630                           ;colour_identify.c: 290:             _delay((unsigned long)((500)*(64000000/4000.0)));
  6631   010F62  0E29               	movlw	41
  6632   010F64  6E24               	movwf	(??_home_response+1)^0,c
  6633   010F66  0E96               	movlw	150
  6634   010F68  6E23               	movwf	??_home_response^0,c
  6635   010F6A  0E7F               	movlw	127
  6636   010F6C                     u2967:
  6637   010F6C  2EE8               	decfsz	wreg,f,c
  6638   010F6E  D7FE               	bra	u2967
  6639   010F70  2E23               	decfsz	??_home_response^0,f,c
  6640   010F72  D7FC               	bra	u2967
  6641   010F74  2E24               	decfsz	(??_home_response+1)^0,f,c
  6642   010F76  D7FA               	bra	u2967
  6643   010F78  F000               	nop	
  6644                           
  6645                           ;colour_identify.c: 291:             break;
  6646   010F7A  EFB2  F088         	goto	l404
  6647   010F7E                     l4332:
  6648                           
  6649                           ;colour_identify.c: 293:             stop(mL,mR);
  6650   010F7E  C01F  F017         	movff	home_response@mL,stop@mL
  6651   010F82  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6652   010F86  C021  F019         	movff	home_response@mR,stop@mR
  6653   010F8A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6654   010F8E  EC13  F094         	call	_stop	;wreg free
  6655                           
  6656                           ;colour_identify.c: 294:             turnRight45(mL,mR);
  6657   010F92  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6658   010F96  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6659   010F9A  C021  F019         	movff	home_response@mR,turnRight45@mR
  6660   010F9E  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6661   010FA2  ECAC  F091         	call	_turnRight45	;wreg free
  6662                           
  6663                           ;colour_identify.c: 295:             stop(mL,mR);
  6664   010FA6  C01F  F017         	movff	home_response@mL,stop@mL
  6665   010FAA  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6666   010FAE  C021  F019         	movff	home_response@mR,stop@mR
  6667   010FB2  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6668   010FB6  EC13  F094         	call	_stop	;wreg free
  6669                           
  6670                           ;colour_identify.c: 296:             turnRight45(mL,mR);
  6671   010FBA  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6672   010FBE  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6673   010FC2  C021  F019         	movff	home_response@mR,turnRight45@mR
  6674   010FC6  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6675   010FCA  ECAC  F091         	call	_turnRight45	;wreg free
  6676                           
  6677                           ;colour_identify.c: 297:             stop(mL,mR);
  6678   010FCE  C01F  F017         	movff	home_response@mL,stop@mL
  6679   010FD2  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6680   010FD6  C021  F019         	movff	home_response@mR,stop@mR
  6681   010FDA  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6682   010FDE  EC13  F094         	call	_stop	;wreg free
  6683                           
  6684                           ;colour_identify.c: 298:             fullSpeedAhead(mL,mR);
  6685   010FE2  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6686   010FE6  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6687   010FEA  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6688   010FEE  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6689   010FF2  ECA0  F092         	call	_fullSpeedAhead	;wreg free
  6690   010FF6  EFB1  F087         	goto	l4330
  6691   010FFA                     l4336:
  6692                           
  6693                           ;colour_identify.c: 302:             turnLeft45(mL,mR);
  6694   010FFA  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6695   010FFE  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6696   011002  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6697   011006  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6698   01100A  EC03  F092         	call	_turnLeft45	;wreg free
  6699                           
  6700                           ;colour_identify.c: 303:             stop(mL,mR);
  6701   01100E  C01F  F017         	movff	home_response@mL,stop@mL
  6702   011012  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6703   011016  C021  F019         	movff	home_response@mR,stop@mR
  6704   01101A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6705   01101E  EC13  F094         	call	_stop	;wreg free
  6706                           
  6707                           ;colour_identify.c: 304:             turnLeft45(mL,mR);
  6708   011022  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6709   011026  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6710   01102A  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6711   01102E  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6712   011032  EC03  F092         	call	_turnLeft45	;wreg free
  6713                           
  6714                           ;colour_identify.c: 305:             stop(mL,mR);
  6715   011036  C01F  F017         	movff	home_response@mL,stop@mL
  6716   01103A  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6717   01103E  C021  F019         	movff	home_response@mR,stop@mR
  6718   011042  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6719   011046  EC13  F094         	call	_stop	;wreg free
  6720                           
  6721                           ;colour_identify.c: 306:             turnLeft45(mL,mR);
  6722   01104A  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6723   01104E  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6724   011052  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6725   011056  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6726   01105A  EC03  F092         	call	_turnLeft45	;wreg free
  6727                           
  6728                           ;colour_identify.c: 307:             stop(mL,mR);
  6729   01105E  C01F  F017         	movff	home_response@mL,stop@mL
  6730   011062  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6731   011066  C021  F019         	movff	home_response@mR,stop@mR
  6732   01106A  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6733   01106E  EC13  F094         	call	_stop	;wreg free
  6734                           
  6735                           ;colour_identify.c: 308:             break;
  6736   011072  EFB2  F088         	goto	l404
  6737   011076                     l4338:
  6738                           
  6739                           ;colour_identify.c: 310:             turnRight45(mL,mR);
  6740   011076  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6741   01107A  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6742   01107E  C021  F019         	movff	home_response@mR,turnRight45@mR
  6743   011082  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6744   011086  ECAC  F091         	call	_turnRight45	;wreg free
  6745                           
  6746                           ;colour_identify.c: 311:             stop(mL,mR);
  6747   01108A  C01F  F017         	movff	home_response@mL,stop@mL
  6748   01108E  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6749   011092  C021  F019         	movff	home_response@mR,stop@mR
  6750   011096  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6751   01109A  EC13  F094         	call	_stop	;wreg free
  6752                           
  6753                           ;colour_identify.c: 312:             turnRight45(mL,mR);
  6754   01109E  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6755   0110A2  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6756   0110A6  C021  F019         	movff	home_response@mR,turnRight45@mR
  6757   0110AA  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6758   0110AE  ECAC  F091         	call	_turnRight45	;wreg free
  6759                           
  6760                           ;colour_identify.c: 313:             stop(mL,mR);
  6761   0110B2  C01F  F017         	movff	home_response@mL,stop@mL
  6762   0110B6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6763   0110BA  C021  F019         	movff	home_response@mR,stop@mR
  6764   0110BE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6765   0110C2  EC13  F094         	call	_stop	;wreg free
  6766                           
  6767                           ;colour_identify.c: 314:             turnRight45(mL,mR);
  6768   0110C6  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6769   0110CA  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6770   0110CE  C021  F019         	movff	home_response@mR,turnRight45@mR
  6771   0110D2  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6772   0110D6  ECAC  F091         	call	_turnRight45	;wreg free
  6773                           
  6774                           ;colour_identify.c: 315:             stop(mL,mR);
  6775   0110DA  C01F  F017         	movff	home_response@mL,stop@mL
  6776   0110DE  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6777   0110E2  C021  F019         	movff	home_response@mR,stop@mR
  6778   0110E6  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6779   0110EA  EC13  F094         	call	_stop	;wreg free
  6780                           
  6781                           ;colour_identify.c: 316:             break;
  6782   0110EE  EFB2  F088         	goto	l404
  6783   0110F2                     l4340:
  6784                           
  6785                           ;colour_identify.c: 318:             stop(mL,mR);
  6786   0110F2  C01F  F017         	movff	home_response@mL,stop@mL
  6787   0110F6  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6788   0110FA  C021  F019         	movff	home_response@mR,stop@mR
  6789   0110FE  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6790   011102  EC13  F094         	call	_stop	;wreg free
  6791   011106  EFB2  F088         	goto	l404
  6792   01110A                     l4344:
  6793   01110A  5026               	movf	home_response@card^0,w,c
  6794   01110C  6E23               	movwf	??_home_response^0,c
  6795   01110E  6A24               	clrf	(??_home_response+1)^0,c
  6796                           
  6797                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6798                           ; Switch size 1, requested type "simple"
  6799                           ; Number of cases is 1, Range of values is 0 to 0
  6800                           ; switch strategies available:
  6801                           ; Name         Instructions Cycles
  6802                           ; simple_byte            4     3 (average)
  6803                           ;	Chosen strategy is simple_byte
  6804   011110  5024               	movf	(??_home_response+1)^0,w,c
  6805   011112  0A00               	xorlw	0	; case 0
  6806   011114  B4D8               	btfsc	status,2,c
  6807   011116  EF8F  F088         	goto	l5102
  6808   01111A  EFB2  F088         	goto	l404
  6809   01111E                     l5102:
  6810                           
  6811                           ; Switch size 1, requested type "simple"
  6812                           ; Number of cases is 8, Range of values is 0 to 7
  6813                           ; switch strategies available:
  6814                           ; Name         Instructions Cycles
  6815                           ; simple_byte           25    13 (average)
  6816                           ;	Chosen strategy is simple_byte
  6817   01111E  5023               	movf	??_home_response^0,w,c
  6818   011120  0A00               	xorlw	0	; case 0
  6819   011122  B4D8               	btfsc	status,2,c
  6820   011124  EFCF  F086         	goto	l4322
  6821   011128  0A01               	xorlw	1	; case 1
  6822   01112A  B4D8               	btfsc	status,2,c
  6823   01112C  EFF9  F086         	goto	l4324
  6824   011130  0A03               	xorlw	3	; case 2
  6825   011132  B4D8               	btfsc	status,2,c
  6826   011134  EF23  F087         	goto	l4326
  6827   011138  0A01               	xorlw	1	; case 3
  6828   01113A  B4D8               	btfsc	status,2,c
  6829   01113C  EF75  F087         	goto	l4328
  6830   011140  0A07               	xorlw	7	; case 4
  6831   011142  B4D8               	btfsc	status,2,c
  6832   011144  EFBF  F087         	goto	l4332
  6833   011148  0A01               	xorlw	1	; case 5
  6834   01114A  B4D8               	btfsc	status,2,c
  6835   01114C  EFFD  F087         	goto	l4336
  6836   011150  0A03               	xorlw	3	; case 6
  6837   011152  B4D8               	btfsc	status,2,c
  6838   011154  EF3B  F088         	goto	l4338
  6839   011158  0A01               	xorlw	1	; case 7
  6840   01115A  B4D8               	btfsc	status,2,c
  6841   01115C  EF79  F088         	goto	l4340
  6842   011160  EFB2  F088         	goto	l404
  6843   011164                     l404:
  6844   011164  0012               	return		;funcret
  6845   011166                     __end_of_home_response:
  6846                           	callstack 0
  6847                           
  6848 ;; *************** function _turnRight45 *****************
  6849 ;; Defined at:
  6850 ;;		line 118 in file "dc_motor.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6853 ;;		 -> main@motorL(9), 
  6854 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6855 ;;		 -> main@motorR(9), 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  i               2   28[COMRAM] int 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6867 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6871 ;;Total ram usage:        8 bytes
  6872 ;; Hardware stack levels used: 1
  6873 ;; Hardware stack levels required when called: 3
  6874 ;; This function calls:
  6875 ;;		_setMotorPWM
  6876 ;; This function is called by:
  6877 ;;		_motor_response
  6878 ;;		_home_response
  6879 ;;		_motor_response_easy
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text25
  6884   012358                     __ptext25:
  6885                           	callstack 0
  6886   012358                     _turnRight45:
  6887                           	callstack 25
  6888   012358                     
  6889                           ;dc_motor.c: 118: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_mot
      +                          or.c: 120:     mL->direction=1;
  6890   012358  EE20 F001          	lfsr	2,1
  6891   01235C  5017               	movf	turnRight45@mL^0,w,c
  6892   01235E  26D9               	addwf	fsr2l,f,c
  6893   012360  5018               	movf	(turnRight45@mL+1)^0,w,c
  6894   012362  22DA               	addwfc	fsr2h,f,c
  6895   012364  0E01               	movlw	1
  6896   012366  6EDF               	movwf	indf2,c
  6897                           
  6898                           ;dc_motor.c: 121:     mR->direction=0;
  6899   012368  EE20 F001          	lfsr	2,1
  6900   01236C  5019               	movf	turnRight45@mR^0,w,c
  6901   01236E  26D9               	addwf	fsr2l,f,c
  6902   012370  501A               	movf	(turnRight45@mR+1)^0,w,c
  6903   012372  22DA               	addwfc	fsr2h,f,c
  6904   012374  0E00               	movlw	0
  6905   012376  6EDF               	movwf	indf2,c
  6906   012378                     
  6907                           ;dc_motor.c: 122:     for(int i=0;i<80;i+=10){
  6908   012378  0E00               	movlw	0
  6909   01237A  6E1E               	movwf	(turnRight45@i+1)^0,c
  6910   01237C  0E00               	movlw	0
  6911   01237E  6E1D               	movwf	turnRight45@i^0,c
  6912   012380                     l4198:
  6913                           
  6914                           ;dc_motor.c: 124:         mR->power=i;
  6915   012380  C019  FFD9         	movff	turnRight45@mR,fsr2l
  6916   012384  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  6917   012388  C01D  FFDF         	movff	turnRight45@i,indf2
  6918                           
  6919                           ;dc_motor.c: 125:         mL->power=i;
  6920   01238C  C017  FFD9         	movff	turnRight45@mL,fsr2l
  6921   012390  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  6922   012394  C01D  FFDF         	movff	turnRight45@i,indf2
  6923   012398                     
  6924                           ;dc_motor.c: 126:         _delay((unsigned long)((20)*(64000000/4000.0)));
  6925   012398  0E02               	movlw	2
  6926   01239A  6E1C               	movwf	(??_turnRight45+1)^0,c
  6927   01239C  0EA0               	movlw	160
  6928   01239E  6E1B               	movwf	??_turnRight45^0,c
  6929   0123A0  0E92               	movlw	146
  6930   0123A2                     u2977:
  6931   0123A2  2EE8               	decfsz	wreg,f,c
  6932   0123A4  D7FE               	bra	u2977
  6933   0123A6  2E1B               	decfsz	??_turnRight45^0,f,c
  6934   0123A8  D7FC               	bra	u2977
  6935   0123AA  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6936   0123AC  D7FA               	bra	u2977
  6937   0123AE  D000               	nop2	
  6938   0123B0                     
  6939                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6940   0123B0  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  6941   0123B4  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  6942   0123B8  EC1D  F08E         	call	_setMotorPWM	;wreg free
  6943   0123BC                     
  6944                           ;dc_motor.c: 128:         setMotorPWM(mR);}
  6945   0123BC  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  6946   0123C0  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  6947   0123C4  EC1D  F08E         	call	_setMotorPWM	;wreg free
  6948   0123C8  0E0A               	movlw	10
  6949   0123CA  261D               	addwf	turnRight45@i^0,f,c
  6950   0123CC  0E00               	movlw	0
  6951   0123CE  221E               	addwfc	(turnRight45@i+1)^0,f,c
  6952   0123D0  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  6953   0123D2  EFF4  F091         	goto	u2301
  6954   0123D6  501E               	movf	(turnRight45@i+1)^0,w,c
  6955   0123D8  E109               	bnz	u2300
  6956   0123DA  0E50               	movlw	80
  6957   0123DC  5C1D               	subwf	turnRight45@i^0,w,c
  6958   0123DE  A0D8               	btfss	status,0,c
  6959   0123E0  EFF4  F091         	goto	u2301
  6960   0123E4  EFF6  F091         	goto	u2300
  6961   0123E8                     u2301:
  6962   0123E8  EFC0  F091         	goto	l4198
  6963   0123EC                     u2300:
  6964   0123EC                     
  6965                           ;dc_motor.c: 129:     _delay((unsigned long)((50)*(64000000/4000.0)));
  6966   0123EC  0E05               	movlw	5
  6967   0123EE  6E1C               	movwf	(??_turnRight45+1)^0,c
  6968   0123F0  0E0F               	movlw	15
  6969   0123F2  6E1B               	movwf	??_turnRight45^0,c
  6970   0123F4  0EF1               	movlw	241
  6971   0123F6                     u2987:
  6972   0123F6  2EE8               	decfsz	wreg,f,c
  6973   0123F8  D7FE               	bra	u2987
  6974   0123FA  2E1B               	decfsz	??_turnRight45^0,f,c
  6975   0123FC  D7FC               	bra	u2987
  6976   0123FE  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6977   012400  D7FA               	bra	u2987
  6978   012402  F000               	nop	
  6979   012404  0012               	return		;funcret
  6980   012406                     __end_of_turnRight45:
  6981                           	callstack 0
  6982                           
  6983 ;; *************** function _turnLeft45 *****************
  6984 ;; Defined at:
  6985 ;;		line 103 in file "dc_motor.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6988 ;;		 -> main@motorL(9), 
  6989 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6990 ;;		 -> main@motorR(9), 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  i               2   28[COMRAM] int 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7005 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7006 ;;Total ram usage:        8 bytes
  7007 ;; Hardware stack levels used: 1
  7008 ;; Hardware stack levels required when called: 3
  7009 ;; This function calls:
  7010 ;;		_setMotorPWM
  7011 ;; This function is called by:
  7012 ;;		_motor_response
  7013 ;;		_home_response
  7014 ;;		_motor_response_easy
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text26
  7019   012406                     __ptext26:
  7020                           	callstack 0
  7021   012406                     _turnLeft45:
  7022                           	callstack 25
  7023   012406                     
  7024                           ;dc_motor.c: 103: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 104: {;dc_moto
      +                          r.c: 105:     mL->direction=0;
  7025   012406  EE20 F001          	lfsr	2,1
  7026   01240A  5017               	movf	turnLeft45@mL^0,w,c
  7027   01240C  26D9               	addwf	fsr2l,f,c
  7028   01240E  5018               	movf	(turnLeft45@mL+1)^0,w,c
  7029   012410  22DA               	addwfc	fsr2h,f,c
  7030   012412  0E00               	movlw	0
  7031   012414  6EDF               	movwf	indf2,c
  7032                           
  7033                           ;dc_motor.c: 106:     mR->direction=1;
  7034   012416  EE20 F001          	lfsr	2,1
  7035   01241A  5019               	movf	turnLeft45@mR^0,w,c
  7036   01241C  26D9               	addwf	fsr2l,f,c
  7037   01241E  501A               	movf	(turnLeft45@mR+1)^0,w,c
  7038   012420  22DA               	addwfc	fsr2h,f,c
  7039   012422  0E01               	movlw	1
  7040   012424  6EDF               	movwf	indf2,c
  7041   012426                     
  7042                           ;dc_motor.c: 107:     for(int i=0;i<80;i+=10){
  7043   012426  0E00               	movlw	0
  7044   012428  6E1E               	movwf	(turnLeft45@i+1)^0,c
  7045   01242A  0E00               	movlw	0
  7046   01242C  6E1D               	movwf	turnLeft45@i^0,c
  7047   01242E                     l4176:
  7048                           
  7049                           ;dc_motor.c: 109:         mR->power=i;
  7050   01242E  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  7051   012432  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  7052   012436  C01D  FFDF         	movff	turnLeft45@i,indf2
  7053                           
  7054                           ;dc_motor.c: 110:         mL->power=i;
  7055   01243A  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  7056   01243E  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  7057   012442  C01D  FFDF         	movff	turnLeft45@i,indf2
  7058   012446                     
  7059                           ;dc_motor.c: 111:         _delay((unsigned long)((20)*(64000000/4000.0)));
  7060   012446  0E02               	movlw	2
  7061   012448  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7062   01244A  0EA0               	movlw	160
  7063   01244C  6E1B               	movwf	??_turnLeft45^0,c
  7064   01244E  0E92               	movlw	146
  7065   012450                     u2997:
  7066   012450  2EE8               	decfsz	wreg,f,c
  7067   012452  D7FE               	bra	u2997
  7068   012454  2E1B               	decfsz	??_turnLeft45^0,f,c
  7069   012456  D7FC               	bra	u2997
  7070   012458  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7071   01245A  D7FA               	bra	u2997
  7072   01245C  D000               	nop2	
  7073   01245E                     
  7074                           ;dc_motor.c: 112:         setMotorPWM(mL);
  7075   01245E  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  7076   012462  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  7077   012466  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7078   01246A                     
  7079                           ;dc_motor.c: 113:         setMotorPWM(mR);}
  7080   01246A  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  7081   01246E  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  7082   012472  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7083   012476  0E0A               	movlw	10
  7084   012478  261D               	addwf	turnLeft45@i^0,f,c
  7085   01247A  0E00               	movlw	0
  7086   01247C  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  7087   01247E  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  7088   012480  EF4B  F092         	goto	u2291
  7089   012484  501E               	movf	(turnLeft45@i+1)^0,w,c
  7090   012486  E109               	bnz	u2290
  7091   012488  0E50               	movlw	80
  7092   01248A  5C1D               	subwf	turnLeft45@i^0,w,c
  7093   01248C  A0D8               	btfss	status,0,c
  7094   01248E  EF4B  F092         	goto	u2291
  7095   012492  EF4D  F092         	goto	u2290
  7096   012496                     u2291:
  7097   012496  EF17  F092         	goto	l4176
  7098   01249A                     u2290:
  7099   01249A                     
  7100                           ;dc_motor.c: 114:     _delay((unsigned long)((50)*(64000000/4000.0)));
  7101   01249A  0E05               	movlw	5
  7102   01249C  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7103   01249E  0E0F               	movlw	15
  7104   0124A0  6E1B               	movwf	??_turnLeft45^0,c
  7105   0124A2  0EF1               	movlw	241
  7106   0124A4                     u3007:
  7107   0124A4  2EE8               	decfsz	wreg,f,c
  7108   0124A6  D7FE               	bra	u3007
  7109   0124A8  2E1B               	decfsz	??_turnLeft45^0,f,c
  7110   0124AA  D7FC               	bra	u3007
  7111   0124AC  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7112   0124AE  D7FA               	bra	u3007
  7113   0124B0  F000               	nop	
  7114   0124B2  0012               	return		;funcret
  7115   0124B4                     __end_of_turnLeft45:
  7116                           	callstack 0
  7117                           
  7118 ;; *************** function _stop *****************
  7119 ;; Defined at:
  7120 ;;		line 84 in file "dc_motor.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7123 ;;		 -> main@motorL(9), 
  7124 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7125 ;;		 -> main@motorR(9), 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      void 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7141 ;;Total ram usage:        5 bytes
  7142 ;; Hardware stack levels used: 1
  7143 ;; Hardware stack levels required when called: 3
  7144 ;; This function calls:
  7145 ;;		_setMotorPWM
  7146 ;; This function is called by:
  7147 ;;		_main
  7148 ;;		_motor_response
  7149 ;;		_home_response
  7150 ;;		_motor_response_easy
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text27
  7155   012826                     __ptext27:
  7156                           	callstack 0
  7157   012826                     _stop:
  7158                           	callstack 27
  7159   012826                     
  7160                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  7161   012826  EF34  F094         	goto	l4166
  7162   01282A                     l4158:
  7163                           
  7164                           ;dc_motor.c: 87:         mL->power -=10;
  7165   01282A  C017  FFD9         	movff	stop@mL,fsr2l
  7166   01282E  C018  FFDA         	movff	stop@mL+1,fsr2h
  7167   012832  0E0A               	movlw	10
  7168   012834  5EDF               	subwf	indf2,f,c
  7169                           
  7170                           ;dc_motor.c: 88:         mR->power -=10;
  7171   012836  C019  FFD9         	movff	stop@mR,fsr2l
  7172   01283A  C01A  FFDA         	movff	stop@mR+1,fsr2h
  7173   01283E  0E0A               	movlw	10
  7174   012840  5EDF               	subwf	indf2,f,c
  7175   012842                     
  7176                           ;dc_motor.c: 89:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7177   012842  0E2A               	movlw	42
  7178   012844  6E1B               	movwf	??_stop^0,c
  7179   012846  0E8E               	movlw	142
  7180   012848                     u3017:
  7181   012848  2EE8               	decfsz	wreg,f,c
  7182   01284A  D7FE               	bra	u3017
  7183   01284C  2E1B               	decfsz	??_stop^0,f,c
  7184   01284E  D7FC               	bra	u3017
  7185   012850                     
  7186                           ;dc_motor.c: 90:         setMotorPWM(mL);
  7187   012850  C017  F011         	movff	stop@mL,setMotorPWM@m
  7188   012854  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  7189   012858  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7190   01285C                     
  7191                           ;dc_motor.c: 91:         setMotorPWM(mR);
  7192   01285C  C019  F011         	movff	stop@mR,setMotorPWM@m
  7193   012860  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  7194   012864  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7195   012868                     l4166:
  7196                           
  7197                           ;dc_motor.c: 86:     while(mL->power !=0){
  7198   012868  C017  FFD9         	movff	stop@mL,fsr2l
  7199   01286C  C018  FFDA         	movff	stop@mL+1,fsr2h
  7200   012870  50DF               	movf	indf2,w,c
  7201   012872  A4D8               	btfss	status,2,c
  7202   012874  EF3E  F094         	goto	u2281
  7203   012878  EF40  F094         	goto	u2280
  7204   01287C                     u2281:
  7205   01287C  EF15  F094         	goto	l4158
  7206   012880                     u2280:
  7207   012880  0012               	return		;funcret
  7208   012882                     __end_of_stop:
  7209                           	callstack 0
  7210                           
  7211 ;; *************** function _fullSpeedAhead *****************
  7212 ;; Defined at:
  7213 ;;		line 133 in file "dc_motor.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7216 ;;		 -> main@motorL(9), 
  7217 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7218 ;;		 -> main@motorR(9), 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  i               2   27[COMRAM] int 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7233 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7234 ;;Total ram usage:        7 bytes
  7235 ;; Hardware stack levels used: 1
  7236 ;; Hardware stack levels required when called: 3
  7237 ;; This function calls:
  7238 ;;		_setMotorPWM
  7239 ;; This function is called by:
  7240 ;;		_main
  7241 ;;		_motor_response
  7242 ;;		_home_response
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text28
  7247   012540                     __ptext28:
  7248                           	callstack 0
  7249   012540                     _fullSpeedAhead:
  7250                           	callstack 27
  7251   012540                     
  7252                           ;dc_motor.c: 133: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 134: {;dc_
      +                          motor.c: 135:     mL->direction=1;
  7253   012540  EE20 F001          	lfsr	2,1
  7254   012544  5017               	movf	fullSpeedAhead@mL^0,w,c
  7255   012546  26D9               	addwf	fsr2l,f,c
  7256   012548  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7257   01254A  22DA               	addwfc	fsr2h,f,c
  7258   01254C  0E01               	movlw	1
  7259   01254E  6EDF               	movwf	indf2,c
  7260                           
  7261                           ;dc_motor.c: 136:     mR->direction=1;
  7262   012550  EE20 F001          	lfsr	2,1
  7263   012554  5019               	movf	fullSpeedAhead@mR^0,w,c
  7264   012556  26D9               	addwf	fsr2l,f,c
  7265   012558  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7266   01255A  22DA               	addwfc	fsr2h,f,c
  7267   01255C  0E01               	movlw	1
  7268   01255E  6EDF               	movwf	indf2,c
  7269   012560                     
  7270                           ;dc_motor.c: 137:     for(int i=0;i<40;i+=10){
  7271   012560  0E00               	movlw	0
  7272   012562  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  7273   012564  0E00               	movlw	0
  7274   012566  6E1C               	movwf	fullSpeedAhead@i^0,c
  7275   012568                     l4220:
  7276                           
  7277                           ;dc_motor.c: 138:         mL->power=i;
  7278   012568  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7279   01256C  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7280   012570  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7281                           
  7282                           ;dc_motor.c: 139:         mR->power=i;
  7283   012574  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7284   012578  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7285   01257C  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7286   012580                     
  7287                           ;dc_motor.c: 140:         setMotorPWM(mL);
  7288   012580  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7289   012584  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7290   012588  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7291   01258C                     
  7292                           ;dc_motor.c: 141:         setMotorPWM(mR);
  7293   01258C  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7294   012590  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7295   012594  EC1D  F08E         	call	_setMotorPWM	;wreg free
  7296   012598                     
  7297                           ;dc_motor.c: 142:         _delay((unsigned long)((10)*(64000000/4000.0)));
  7298   012598  0ED0               	movlw	208
  7299   01259A  6E1B               	movwf	??_fullSpeedAhead^0,c
  7300   01259C  0ECA               	movlw	202
  7301   01259E                     u3027:
  7302   01259E  2EE8               	decfsz	wreg,f,c
  7303   0125A0  D7FE               	bra	u3027
  7304   0125A2  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7305   0125A4  D7FC               	bra	u3027
  7306   0125A6                     
  7307                           ;dc_motor.c: 143:     }
  7308   0125A6  0E0A               	movlw	10
  7309   0125A8  261C               	addwf	fullSpeedAhead@i^0,f,c
  7310   0125AA  0E00               	movlw	0
  7311   0125AC  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  7312   0125AE  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  7313   0125B0  EFE3  F092         	goto	u2311
  7314   0125B4  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  7315   0125B6  E109               	bnz	u2310
  7316   0125B8  0E28               	movlw	40
  7317   0125BA  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  7318   0125BC  A0D8               	btfss	status,0,c
  7319   0125BE  EFE3  F092         	goto	u2311
  7320   0125C2  EFE5  F092         	goto	u2310
  7321   0125C6                     u2311:
  7322   0125C6  EFB4  F092         	goto	l4220
  7323   0125CA                     u2310:
  7324   0125CA  0012               	return		;funcret
  7325   0125CC                     __end_of_fullSpeedAhead:
  7326                           	callstack 0
  7327                           
  7328 ;; *************** function _setMotorPWM *****************
  7329 ;; Defined at:
  7330 ;;		line 61 in file "dc_motor.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  m               2   16[COMRAM] PTR struct DC_motor
  7333 ;;		 -> main@motorR(9), main@motorL(9), 
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  negDuty         1   21[COMRAM] unsigned char 
  7336 ;;  posDuty         1   20[COMRAM] unsigned char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7347 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7348 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;Total ram usage:        6 bytes
  7351 ;; Hardware stack levels used: 1
  7352 ;; Hardware stack levels required when called: 2
  7353 ;; This function calls:
  7354 ;;		___lwdiv
  7355 ;;		___wmul
  7356 ;; This function is called by:
  7357 ;;		_stop
  7358 ;;		_turnLeft45
  7359 ;;		_turnRight45
  7360 ;;		_fullSpeedAhead
  7361 ;;		_reverseFullSpeed
  7362 ;;		_main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text29
  7367   011C3A                     __ptext29:
  7368                           	callstack 0
  7369   011C3A                     _setMotorPWM:
  7370                           	callstack 27
  7371   011C3A                     
  7372                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  7373   011C3A  EE20 F002          	lfsr	2,2
  7374   011C3E  5011               	movf	setMotorPWM@m^0,w,c
  7375   011C40  26D9               	addwf	fsr2l,f,c
  7376   011C42  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7377   011C44  22DA               	addwfc	fsr2h,f,c
  7378   011C46  50DF               	movf	indf2,w,c
  7379   011C48  B4D8               	btfsc	status,2,c
  7380   011C4A  EF29  F08E         	goto	u2191
  7381   011C4E  EF2B  F08E         	goto	u2190
  7382   011C52                     u2191:
  7383   011C52  EF5F  F08E         	goto	l4082
  7384   011C56                     u2190:
  7385   011C56                     
  7386                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  7387   011C56  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7388   011C5A  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7389   011C5E  50DF               	movf	indf2,w,c
  7390   011C60  6E13               	movwf	??_setMotorPWM^0,c
  7391   011C62  5013               	movf	??_setMotorPWM^0,w,c
  7392   011C64  6E04               	movwf	___wmul@multiplier^0,c
  7393   011C66  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7394   011C68  EE20 F003          	lfsr	2,3
  7395   011C6C  5011               	movf	setMotorPWM@m^0,w,c
  7396   011C6E  26D9               	addwf	fsr2l,f,c
  7397   011C70  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7398   011C72  22DA               	addwfc	fsr2h,f,c
  7399   011C74  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7400   011C78  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7401   011C7C  EC40  F096         	call	___wmul	;wreg free
  7402   011C80  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7403   011C84  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7404   011C88  0E00               	movlw	0
  7405   011C8A  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7406   011C8C  0E64               	movlw	100
  7407   011C8E  6E0C               	movwf	___lwdiv@divisor^0,c
  7408   011C90  ECA7  F093         	call	___lwdiv	;wreg free
  7409   011C94  EE20 F003          	lfsr	2,3
  7410   011C98  5011               	movf	setMotorPWM@m^0,w,c
  7411   011C9A  26D9               	addwf	fsr2l,f,c
  7412   011C9C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7413   011C9E  22DA               	addwfc	fsr2h,f,c
  7414   011CA0  50DF               	movf	indf2,w,c
  7415   011CA2  6E14               	movwf	(??_setMotorPWM+1)^0,c
  7416   011CA4  500A               	movf	?___lwdiv^0,w,c
  7417   011CA6  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  7418   011CA8  6E15               	movwf	setMotorPWM@posDuty^0,c
  7419   011CAA                     
  7420                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  7421   011CAA  EE20 F003          	lfsr	2,3
  7422   011CAE  5011               	movf	setMotorPWM@m^0,w,c
  7423   011CB0  26D9               	addwf	fsr2l,f,c
  7424   011CB2  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7425   011CB4  22DA               	addwfc	fsr2h,f,c
  7426   011CB6  50DF               	movf	indf2,w,c
  7427   011CB8  6E16               	movwf	setMotorPWM@negDuty^0,c
  7428                           
  7429                           ;dc_motor.c: 68:     }
  7430   011CBA  EF82  F08E         	goto	l4086
  7431   011CBE                     l4082:
  7432                           
  7433                           ;dc_motor.c: 70:         posDuty=0;
  7434   011CBE  0E00               	movlw	0
  7435   011CC0  6E15               	movwf	setMotorPWM@posDuty^0,c
  7436   011CC2                     
  7437                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7438   011CC2  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7439   011CC6  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7440   011CCA  50DF               	movf	indf2,w,c
  7441   011CCC  6E13               	movwf	??_setMotorPWM^0,c
  7442   011CCE  5013               	movf	??_setMotorPWM^0,w,c
  7443   011CD0  6E04               	movwf	___wmul@multiplier^0,c
  7444   011CD2  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7445   011CD4  EE20 F003          	lfsr	2,3
  7446   011CD8  5011               	movf	setMotorPWM@m^0,w,c
  7447   011CDA  26D9               	addwf	fsr2l,f,c
  7448   011CDC  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7449   011CDE  22DA               	addwfc	fsr2h,f,c
  7450   011CE0  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7451   011CE4  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7452   011CE8  EC40  F096         	call	___wmul	;wreg free
  7453   011CEC  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7454   011CF0  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7455   011CF4  0E00               	movlw	0
  7456   011CF6  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7457   011CF8  0E64               	movlw	100
  7458   011CFA  6E0C               	movwf	___lwdiv@divisor^0,c
  7459   011CFC  ECA7  F093         	call	___lwdiv	;wreg free
  7460   011D00  500A               	movf	?___lwdiv^0,w,c
  7461   011D02  6E16               	movwf	setMotorPWM@negDuty^0,c
  7462   011D04                     l4086:
  7463                           
  7464                           ;dc_motor.c: 74:     if (m->direction) {
  7465   011D04  EE20 F001          	lfsr	2,1
  7466   011D08  5011               	movf	setMotorPWM@m^0,w,c
  7467   011D0A  26D9               	addwf	fsr2l,f,c
  7468   011D0C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7469   011D0E  22DA               	addwfc	fsr2h,f,c
  7470   011D10  50DF               	movf	indf2,w,c
  7471   011D12  B4D8               	btfsc	status,2,c
  7472   011D14  EF8E  F08E         	goto	u2201
  7473   011D18  EF90  F08E         	goto	u2200
  7474   011D1C                     u2201:
  7475   011D1C  EFB2  F08E         	goto	l4090
  7476   011D20                     u2200:
  7477   011D20                     
  7478                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  7479   011D20  EE20 F005          	lfsr	2,5
  7480   011D24  5011               	movf	setMotorPWM@m^0,w,c
  7481   011D26  26D9               	addwf	fsr2l,f,c
  7482   011D28  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7483   011D2A  22DA               	addwfc	fsr2h,f,c
  7484   011D2C  CFDE F013          	movff	postinc2,??_setMotorPWM
  7485   011D30  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7486   011D34  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7487   011D38  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7488   011D3C  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7489                           
  7490                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  7491   011D40  EE20 F007          	lfsr	2,7
  7492   011D44  5011               	movf	setMotorPWM@m^0,w,c
  7493   011D46  26D9               	addwf	fsr2l,f,c
  7494   011D48  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7495   011D4A  22DA               	addwfc	fsr2h,f,c
  7496   011D4C  CFDE F013          	movff	postinc2,??_setMotorPWM
  7497   011D50  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7498   011D54  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7499   011D58  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7500   011D5C  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7501                           
  7502                           ;dc_motor.c: 77:     } else {
  7503   011D60  EFD2  F08E         	goto	l86
  7504   011D64                     l4090:
  7505                           
  7506                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  7507   011D64  EE20 F005          	lfsr	2,5
  7508   011D68  5011               	movf	setMotorPWM@m^0,w,c
  7509   011D6A  26D9               	addwf	fsr2l,f,c
  7510   011D6C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7511   011D6E  22DA               	addwfc	fsr2h,f,c
  7512   011D70  CFDE F013          	movff	postinc2,??_setMotorPWM
  7513   011D74  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7514   011D78  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7515   011D7C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7516   011D80  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7517                           
  7518                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  7519   011D84  EE20 F007          	lfsr	2,7
  7520   011D88  5011               	movf	setMotorPWM@m^0,w,c
  7521   011D8A  26D9               	addwf	fsr2l,f,c
  7522   011D8C  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7523   011D8E  22DA               	addwfc	fsr2h,f,c
  7524   011D90  CFDE F013          	movff	postinc2,??_setMotorPWM
  7525   011D94  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7526   011D98  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7527   011D9C  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7528   011DA0  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7529   011DA4                     l86:
  7530   011DA4  0012               	return		;funcret
  7531   011DA6                     __end_of_setMotorPWM:
  7532                           	callstack 0
  7533                           
  7534 ;; *************** function ___wmul *****************
  7535 ;; Defined at:
  7536 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;  multiplier      2    3[COMRAM] unsigned int 
  7539 ;;  multiplicand    2    5[COMRAM] unsigned int 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  product         2    7[COMRAM] unsigned int 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  2    3[COMRAM] unsigned int 
  7544 ;; Registers used:
  7545 ;;		wreg, status,2, status,0, prodl, prodh
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7554 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7555 ;;Total ram usage:        6 bytes
  7556 ;; Hardware stack levels used: 1
  7557 ;; Hardware stack levels required when called: 1
  7558 ;; This function calls:
  7559 ;;		Nothing
  7560 ;; This function is called by:
  7561 ;;		_setMotorPWM
  7562 ;;		_normalise_readings
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text30
  7567   012C80                     __ptext30:
  7568                           	callstack 0
  7569   012C80                     ___wmul:
  7570                           	callstack 27
  7571   012C80  5004               	movf	___wmul@multiplier^0,w,c
  7572   012C82  0206               	mulwf	___wmul@multiplicand^0,c
  7573   012C84  CFF3 F008          	movff	prodl,___wmul@product
  7574   012C88  CFF4 F009          	movff	prodh,___wmul@product+1
  7575   012C8C  5004               	movf	___wmul@multiplier^0,w,c
  7576   012C8E  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  7577   012C90  50F3               	movf	243,w,c
  7578   012C92  2609               	addwf	(___wmul@product+1)^0,f,c
  7579   012C94  5005               	movf	(___wmul@multiplier+1)^0,w,c
  7580   012C96  0206               	mulwf	___wmul@multiplicand^0,c
  7581   012C98  50F3               	movf	243,w,c
  7582   012C9A  2609               	addwf	(___wmul@product+1)^0,f,c
  7583   012C9C  C008  F004         	movff	___wmul@product,?___wmul
  7584   012CA0  C009  F005         	movff	___wmul@product+1,?___wmul+1
  7585   012CA4  0012               	return		;funcret
  7586   012CA6                     __end_of___wmul:
  7587                           	callstack 0
  7588                           
  7589 ;; *************** function ___lwdiv *****************
  7590 ;; Defined at:
  7591 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;  dividend        2    9[COMRAM] unsigned int 
  7594 ;;  divisor         2   11[COMRAM] unsigned int 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  quotient        2   14[COMRAM] unsigned int 
  7597 ;;  counter         1   13[COMRAM] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  2    9[COMRAM] unsigned int 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7611 ;;Total ram usage:        7 bytes
  7612 ;; Hardware stack levels used: 1
  7613 ;; Hardware stack levels required when called: 1
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_setMotorPWM
  7618 ;;		_normalise_readings
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text31
  7623   01274E                     __ptext31:
  7624                           	callstack 0
  7625   01274E                     ___lwdiv:
  7626                           	callstack 27
  7627   01274E  0E00               	movlw	0
  7628   012750  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7629   012752  0E00               	movlw	0
  7630   012754  6E0F               	movwf	___lwdiv@quotient^0,c
  7631   012756  500C               	movf	___lwdiv@divisor^0,w,c
  7632   012758  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7633   01275A  B4D8               	btfsc	status,2,c
  7634   01275C  EFB2  F093         	goto	u2061
  7635   012760  EFB4  F093         	goto	u2060
  7636   012764                     u2061:
  7637   012764  EFDC  F093         	goto	l1035
  7638   012768                     u2060:
  7639   012768  0E01               	movlw	1
  7640   01276A  6E0E               	movwf	___lwdiv@counter^0,c
  7641   01276C  EFBC  F093         	goto	l4010
  7642   012770                     l4008:
  7643   012770  90D8               	bcf	status,0,c
  7644   012772  360C               	rlcf	___lwdiv@divisor^0,f,c
  7645   012774  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7646   012776  2A0E               	incf	___lwdiv@counter^0,f,c
  7647   012778                     l4010:
  7648   012778  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7649   01277A  EFC1  F093         	goto	u2071
  7650   01277E  EFC3  F093         	goto	u2070
  7651   012782                     u2071:
  7652   012782  EFB8  F093         	goto	l4008
  7653   012786                     u2070:
  7654   012786                     l4012:
  7655   012786  90D8               	bcf	status,0,c
  7656   012788  360F               	rlcf	___lwdiv@quotient^0,f,c
  7657   01278A  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7658   01278C  500C               	movf	___lwdiv@divisor^0,w,c
  7659   01278E  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7660   012790  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7661   012792  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7662   012794  A0D8               	btfss	status,0,c
  7663   012796  EFCF  F093         	goto	u2081
  7664   01279A  EFD1  F093         	goto	u2080
  7665   01279E                     u2081:
  7666   01279E  EFD6  F093         	goto	l4020
  7667   0127A2                     u2080:
  7668   0127A2  500C               	movf	___lwdiv@divisor^0,w,c
  7669   0127A4  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7670   0127A6  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7671   0127A8  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7672   0127AA  800F               	bsf	___lwdiv@quotient^0,0,c
  7673   0127AC                     l4020:
  7674   0127AC  90D8               	bcf	status,0,c
  7675   0127AE  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7676   0127B0  320C               	rrcf	___lwdiv@divisor^0,f,c
  7677   0127B2  2E0E               	decfsz	___lwdiv@counter^0,f,c
  7678   0127B4  EFC3  F093         	goto	l4012
  7679   0127B8                     l1035:
  7680   0127B8  C00F  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7681   0127BC  C010  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7682   0127C0  0012               	return		;funcret
  7683   0127C2                     __end_of___lwdiv:
  7684                           	callstack 0
  7685                           
  7686 ;; *************** function _make_master_closeness *****************
  7687 ;; Defined at:
  7688 ;;		line 101 in file "colour_identify.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  buf             2    3[COMRAM] PTR unsigned char 
  7691 ;;		 -> main@buf(150), 
  7692 ;;  normalised_v    2    5[COMRAM] PTR unsigned int [9]
  7693 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  7694 ;;  master_close    2    7[COMRAM] PTR unsigned int 
  7695 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  i               1   39[COMRAM] enum E14551
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7707 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7709 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7710 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7711 ;;Total ram usage:       37 bytes
  7712 ;; Hardware stack levels used: 1
  7713 ;; Hardware stack levels required when called: 1
  7714 ;; This function calls:
  7715 ;;		Nothing
  7716 ;; This function is called by:
  7717 ;;		_card_response
  7718 ;;		_card_response_easy
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text32
  7723   012182                     __ptext32:
  7724                           	callstack 0
  7725   012182                     _make_master_closeness:
  7726                           	callstack 28
  7727   012182                     
  7728                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  7729   012182  0E00               	movlw	0
  7730   012184  6E28               	movwf	make_master_closeness@i^0,c
  7731   012186                     l4458:
  7732                           
  7733                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  7734   012186  5028               	movf	make_master_closeness@i^0,w,c
  7735   012188  0D02               	mullw	2
  7736   01218A  CFF3 F00A          	movff	prodl,??_make_master_closeness
  7737   01218E  CFF4 F00B          	movff	prodh,??_make_master_closeness+1
  7738   012192  500A               	movf	??_make_master_closeness^0,w,c
  7739   012194  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7740   012196  6E0C               	movwf	(??_make_master_closeness+2)^0,c
  7741   012198  500B               	movf	(??_make_master_closeness+1)^0,w,c
  7742   01219A  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7743   01219C  6E0D               	movwf	(??_make_master_closeness+3)^0,c
  7744   01219E  0E36               	movlw	54
  7745   0121A0  240C               	addwf	(??_make_master_closeness+2)^0,w,c
  7746   0121A2  6ED9               	movwf	fsr2l,c
  7747   0121A4  0E00               	movlw	0
  7748   0121A6  200D               	addwfc	(??_make_master_closeness+3)^0,w,c
  7749   0121A8  6EDA               	movwf	fsr2h,c
  7750   0121AA  CFDE F00E          	movff	postinc2,??_make_master_closeness+4
  7751   0121AE  CFDD F00F          	movff	postdec2,??_make_master_closeness+5
  7752   0121B2  5028               	movf	make_master_closeness@i^0,w,c
  7753   0121B4  0D02               	mullw	2
  7754   0121B6  CFF3 F010          	movff	prodl,??_make_master_closeness+6
  7755   0121BA  CFF4 F011          	movff	prodh,??_make_master_closeness+7
  7756   0121BE  5010               	movf	(??_make_master_closeness+6)^0,w,c
  7757   0121C0  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7758   0121C2  6E12               	movwf	(??_make_master_closeness+8)^0,c
  7759   0121C4  5011               	movf	(??_make_master_closeness+7)^0,w,c
  7760   0121C6  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7761   0121C8  6E13               	movwf	(??_make_master_closeness+9)^0,c
  7762   0121CA  0E24               	movlw	36
  7763   0121CC  2412               	addwf	(??_make_master_closeness+8)^0,w,c
  7764   0121CE  6ED9               	movwf	fsr2l,c
  7765   0121D0  0E00               	movlw	0
  7766   0121D2  2013               	addwfc	(??_make_master_closeness+9)^0,w,c
  7767   0121D4  6EDA               	movwf	fsr2h,c
  7768   0121D6  CFDE F014          	movff	postinc2,??_make_master_closeness+10
  7769   0121DA  CFDD F015          	movff	postdec2,??_make_master_closeness+11
  7770   0121DE  5028               	movf	make_master_closeness@i^0,w,c
  7771   0121E0  0D02               	mullw	2
  7772   0121E2  CFF3 F016          	movff	prodl,??_make_master_closeness+12
  7773   0121E6  CFF4 F017          	movff	prodh,??_make_master_closeness+13
  7774   0121EA  5016               	movf	(??_make_master_closeness+12)^0,w,c
  7775   0121EC  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7776   0121EE  6E18               	movwf	(??_make_master_closeness+14)^0,c
  7777   0121F0  5017               	movf	(??_make_master_closeness+13)^0,w,c
  7778   0121F2  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7779   0121F4  6E19               	movwf	(??_make_master_closeness+15)^0,c
  7780   0121F6  0E12               	movlw	18
  7781   0121F8  2418               	addwf	(??_make_master_closeness+14)^0,w,c
  7782   0121FA  6ED9               	movwf	fsr2l,c
  7783   0121FC  0E00               	movlw	0
  7784   0121FE  2019               	addwfc	(??_make_master_closeness+15)^0,w,c
  7785   012200  6EDA               	movwf	fsr2h,c
  7786   012202  CFDE F01A          	movff	postinc2,??_make_master_closeness+16
  7787   012206  CFDD F01B          	movff	postdec2,??_make_master_closeness+17
  7788   01220A  5028               	movf	make_master_closeness@i^0,w,c
  7789   01220C  0D02               	mullw	2
  7790   01220E  CFF3 F01C          	movff	prodl,??_make_master_closeness+18
  7791   012212  CFF4 F01D          	movff	prodh,??_make_master_closeness+19
  7792   012216  501C               	movf	(??_make_master_closeness+18)^0,w,c
  7793   012218  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7794   01221A  6ED9               	movwf	fsr2l,c
  7795   01221C  501D               	movf	(??_make_master_closeness+19)^0,w,c
  7796   01221E  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7797   012220  6EDA               	movwf	fsr2h,c
  7798   012222  CFDE F01E          	movff	postinc2,??_make_master_closeness+20
  7799   012226  CFDD F01F          	movff	postdec2,??_make_master_closeness+21
  7800   01222A  501A               	movf	(??_make_master_closeness+16)^0,w,c
  7801   01222C  241E               	addwf	(??_make_master_closeness+20)^0,w,c
  7802   01222E  6E20               	movwf	(??_make_master_closeness+22)^0,c
  7803   012230  501B               	movf	(??_make_master_closeness+17)^0,w,c
  7804   012232  201F               	addwfc	(??_make_master_closeness+21)^0,w,c
  7805   012234  6E21               	movwf	(??_make_master_closeness+23)^0,c
  7806   012236  5014               	movf	(??_make_master_closeness+10)^0,w,c
  7807   012238  2420               	addwf	(??_make_master_closeness+22)^0,w,c
  7808   01223A  6E22               	movwf	(??_make_master_closeness+24)^0,c
  7809   01223C  5015               	movf	(??_make_master_closeness+11)^0,w,c
  7810   01223E  2021               	addwfc	(??_make_master_closeness+23)^0,w,c
  7811   012240  6E23               	movwf	(??_make_master_closeness+25)^0,c
  7812   012242  500E               	movf	(??_make_master_closeness+4)^0,w,c
  7813   012244  2422               	addwf	(??_make_master_closeness+24)^0,w,c
  7814   012246  6E24               	movwf	(??_make_master_closeness+26)^0,c
  7815   012248  500F               	movf	(??_make_master_closeness+5)^0,w,c
  7816   01224A  2023               	addwfc	(??_make_master_closeness+25)^0,w,c
  7817   01224C  6E25               	movwf	(??_make_master_closeness+27)^0,c
  7818   01224E  90D8               	bcf	status,0,c
  7819   012250  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7820   012252  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7821   012254  90D8               	bcf	status,0,c
  7822   012256  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7823   012258  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7824   01225A  5028               	movf	make_master_closeness@i^0,w,c
  7825   01225C  0D02               	mullw	2
  7826   01225E  CFF3 F026          	movff	prodl,??_make_master_closeness+28
  7827   012262  CFF4 F027          	movff	prodh,??_make_master_closeness+29
  7828   012266  5026               	movf	(??_make_master_closeness+28)^0,w,c
  7829   012268  2408               	addwf	make_master_closeness@master_closeness^0,w,c
  7830   01226A  6ED9               	movwf	fsr2l,c
  7831   01226C  5027               	movf	(??_make_master_closeness+29)^0,w,c
  7832   01226E  2009               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  7833   012270  6EDA               	movwf	fsr2h,c
  7834   012272  C024  FFDE         	movff	??_make_master_closeness+26,postinc2
  7835   012276  C025  FFDD         	movff	??_make_master_closeness+27,postdec2
  7836   01227A                     
  7837                           ;colour_identify.c: 109:     }
  7838   01227A  2A28               	incf	make_master_closeness@i^0,f,c
  7839   01227C  0E08               	movlw	8
  7840   01227E  6428               	cpfsgt	make_master_closeness@i^0,c
  7841   012280  EF44  F091         	goto	u2431
  7842   012284  EF46  F091         	goto	u2430
  7843   012288                     u2431:
  7844   012288  EFC3  F090         	goto	l4458
  7845   01228C                     u2430:
  7846   01228C  0012               	return		;funcret
  7847   01228E                     __end_of_make_master_closeness:
  7848                           	callstack 0
  7849                           
  7850 ;; *************** function _determine_card *****************
  7851 ;; Defined at:
  7852 ;;		line 112 in file "colour_identify.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  7855 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  i               1   12[COMRAM] enum E14551
  7858 ;;  current_smal    2    9[COMRAM] unsigned int 
  7859 ;;  predicted_co    1   11[COMRAM] enum E14551
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      enum E14551
  7862 ;; Registers used:
  7863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7871 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7872 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7873 ;;Total ram usage:       10 bytes
  7874 ;; Hardware stack levels used: 1
  7875 ;; Hardware stack levels required when called: 1
  7876 ;; This function calls:
  7877 ;;		Nothing
  7878 ;; This function is called by:
  7879 ;;		_card_response
  7880 ;;		_card_response_easy
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text33
  7885   012654                     __ptext33:
  7886                           	callstack 0
  7887   012654                     _determine_card:
  7888                           	callstack 28
  7889   012654                     
  7890                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  7891   012654  0E00               	movlw	0
  7892   012656  6E0C               	movwf	determine_card@predicted_colour^0,c
  7893   012658                     
  7894                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  7895   012658  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  7896   01265C  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  7897   012660  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7898   012664  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7899   012668                     
  7900                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  7901   012668  0E01               	movlw	1
  7902   01266A  6E0D               	movwf	determine_card@i^0,c
  7903   01266C                     l4474:
  7904                           
  7905                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  7906   01266C  500D               	movf	determine_card@i^0,w,c
  7907   01266E  0D02               	mullw	2
  7908   012670  CFF3 F006          	movff	prodl,??_determine_card
  7909   012674  CFF4 F007          	movff	prodh,??_determine_card+1
  7910   012678  5006               	movf	??_determine_card^0,w,c
  7911   01267A  2404               	addwf	determine_card@master_closeness^0,w,c
  7912   01267C  6ED9               	movwf	fsr2l,c
  7913   01267E  5007               	movf	(??_determine_card+1)^0,w,c
  7914   012680  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7915   012682  6EDA               	movwf	fsr2h,c
  7916   012684  500A               	movf	determine_card@current_smallest^0,w,c
  7917   012686  5CDE               	subwf	postinc2,w,c
  7918   012688  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  7919   01268A  58DE               	subwfb	postinc2,w,c
  7920   01268C  B0D8               	btfsc	status,0,c
  7921   01268E  EF4B  F093         	goto	u2441
  7922   012692  EF4D  F093         	goto	u2440
  7923   012696                     u2441:
  7924   012696  EF5F  F093         	goto	l4480
  7925   01269A                     u2440:
  7926   01269A                     
  7927                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  7928   01269A  500D               	movf	determine_card@i^0,w,c
  7929   01269C  0D02               	mullw	2
  7930   01269E  CFF3 F006          	movff	prodl,??_determine_card
  7931   0126A2  CFF4 F007          	movff	prodh,??_determine_card+1
  7932   0126A6  5006               	movf	??_determine_card^0,w,c
  7933   0126A8  2404               	addwf	determine_card@master_closeness^0,w,c
  7934   0126AA  6ED9               	movwf	fsr2l,c
  7935   0126AC  5007               	movf	(??_determine_card+1)^0,w,c
  7936   0126AE  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7937   0126B0  6EDA               	movwf	fsr2h,c
  7938   0126B2  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7939   0126B6  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7940   0126BA                     
  7941                           ;colour_identify.c: 119:             predicted_colour = i;
  7942   0126BA  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  7943   0126BE                     l4480:
  7944                           
  7945                           ;colour_identify.c: 121:     }
  7946   0126BE  2A0D               	incf	determine_card@i^0,f,c
  7947   0126C0  0E08               	movlw	8
  7948   0126C2  640D               	cpfsgt	determine_card@i^0,c
  7949   0126C4  EF66  F093         	goto	u2451
  7950   0126C8  EF68  F093         	goto	u2450
  7951   0126CC                     u2451:
  7952   0126CC  EF36  F093         	goto	l4474
  7953   0126D0                     u2450:
  7954   0126D0                     
  7955                           ;colour_identify.c: 122:     return predicted_colour;
  7956   0126D0  500C               	movf	determine_card@predicted_colour^0,w,c
  7957   0126D2  0012               	return		;funcret
  7958   0126D4                     __end_of_determine_card:
  7959                           	callstack 0
  7960                           
  7961 ;; *************** function _collect_avg_readings *****************
  7962 ;; Defined at:
  7963 ;;		line 31 in file "colour_identify.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  clear_read      2   14[COMRAM] PTR unsigned int 
  7966 ;;		 -> main@clear_read(2), 
  7967 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  7968 ;;		 -> main@red_read(2), 
  7969 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  7970 ;;		 -> main@green_read(2), 
  7971 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  7972 ;;		 -> main@blue_read(2), 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  i               2   32[COMRAM] int 
  7975 ;;  i               2   30[COMRAM] int 
  7976 ;;  i               2   28[COMRAM] int 
  7977 ;;  i               2   26[COMRAM] int 
  7978 ;;  i               2   24[COMRAM] int 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  1    wreg      void 
  7981 ;; Registers used:
  7982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7988 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7991 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7992 ;;Total ram usage:       20 bytes
  7993 ;; Hardware stack levels used: 1
  7994 ;; Hardware stack levels required when called: 4
  7995 ;; This function calls:
  7996 ;;		_color_read_Blue
  7997 ;;		_color_read_Clear
  7998 ;;		_color_read_Green
  7999 ;;		_color_read_Red
  8000 ;; This function is called by:
  8001 ;;		_main
  8002 ;;		_card_response
  8003 ;;		_card_response_easy
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text34
  8008   0116C6                     __ptext34:
  8009                           	callstack 0
  8010   0116C6                     _collect_avg_readings:
  8011                           	callstack 26
  8012   0116C6                     
  8013                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  8014   0116C6  0E00               	movlw	0
  8015   0116C8  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  8016   0116CA  0E00               	movlw	0
  8017   0116CC  6E19               	movwf	collect_avg_readings@i^0,c
  8018   0116CE                     l4370:
  8019                           
  8020                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  8021   0116CE  ECE4  F094         	call	_color_read_Clear	;wreg free
  8022   0116D2  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8023   0116D6  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8024   0116DA  C008  FFDE         	movff	?_color_read_Clear,postinc2
  8025   0116DE  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  8026                           
  8027                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  8028   0116E2  EC94  F094         	call	_color_read_Red	;wreg free
  8029   0116E6  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8030   0116EA  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8031   0116EE  C008  FFDE         	movff	?_color_read_Red,postinc2
  8032   0116F2  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  8033                           
  8034                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  8035   0116F6  ECBC  F094         	call	_color_read_Green	;wreg free
  8036   0116FA  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8037   0116FE  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8038   011702  C008  FFDE         	movff	?_color_read_Green,postinc2
  8039   011706  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  8040                           
  8041                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  8042   01170A  EC0C  F095         	call	_color_read_Blue	;wreg free
  8043   01170E  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8044   011712  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8045   011716  C008  FFDE         	movff	?_color_read_Blue,postinc2
  8046   01171A  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  8047   01171E                     
  8048                           ;colour_identify.c: 40:     }
  8049   01171E  4A19               	infsnz	collect_avg_readings@i^0,f,c
  8050   011720  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  8051   011722  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  8052   011724  EF9D  F08B         	goto	u2371
  8053   011728  0EF5               	movlw	245
  8054   01172A  5C19               	subwf	collect_avg_readings@i^0,w,c
  8055   01172C  0E01               	movlw	1
  8056   01172E  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  8057   011730  A0D8               	btfss	status,0,c
  8058   011732  EF9D  F08B         	goto	u2371
  8059   011736  EF9F  F08B         	goto	u2370
  8060   01173A                     u2371:
  8061   01173A  EF67  F08B         	goto	l4370
  8062   01173E                     u2370:
  8063   01173E                     
  8064                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  8065   01173E  0E00               	movlw	0
  8066   011740  6E1C               	movwf	(collect_avg_readings@i_1652+1)^0,c
  8067   011742  0E00               	movlw	0
  8068   011744  6E1B               	movwf	collect_avg_readings@i_1652^0,c
  8069   011746                     l4382:
  8070                           
  8071                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  8072   011746  ECE4  F094         	call	_color_read_Clear	;wreg free
  8073   01174A  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8074   01174E  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8075   011752  5008               	movf	?_color_read_Clear^0,w,c
  8076   011754  26DE               	addwf	postinc2,f,c
  8077   011756  5009               	movf	(?_color_read_Clear+1)^0,w,c
  8078   011758  22DD               	addwfc	postdec2,f,c
  8079   01175A                     
  8080                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8081   01175A  0E11               	movlw	17
  8082   01175C  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8083   01175E  0E3C               	movlw	60
  8084   011760  6E17               	movwf	??_collect_avg_readings^0,c
  8085   011762  0ECB               	movlw	203
  8086   011764                     u3037:
  8087   011764  2EE8               	decfsz	wreg,f,c
  8088   011766  D7FE               	bra	u3037
  8089   011768  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8090   01176A  D7FC               	bra	u3037
  8091   01176C  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8092   01176E  D7FA               	bra	u3037
  8093   011770  F000               	nop	
  8094   011772                     
  8095                           ;colour_identify.c: 47:     }
  8096   011772  4A1B               	infsnz	collect_avg_readings@i_1652^0,f,c
  8097   011774  2A1C               	incf	(collect_avg_readings@i_1652+1)^0,f,c
  8098   011776  BE1C               	btfsc	(collect_avg_readings@i_1652+1)^0,7,c
  8099   011778  EFC7  F08B         	goto	u2381
  8100   01177C  501C               	movf	(collect_avg_readings@i_1652+1)^0,w,c
  8101   01177E  E109               	bnz	u2380
  8102   011780  0E03               	movlw	3
  8103   011782  5C1B               	subwf	collect_avg_readings@i_1652^0,w,c
  8104   011784  A0D8               	btfss	status,0,c
  8105   011786  EFC7  F08B         	goto	u2381
  8106   01178A  EFC9  F08B         	goto	u2380
  8107   01178E                     u2381:
  8108   01178E  EFA3  F08B         	goto	l4382
  8109   011792                     u2380:
  8110   011792                     
  8111                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  8112   011792  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8113   011796  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8114   01179A  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8115   01179E  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8116   0117A2  90D8               	bcf	status,0,c
  8117   0117A4  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8118   0117A6  3217               	rrcf	??_collect_avg_readings^0,f,c
  8119   0117A8  90D8               	bcf	status,0,c
  8120   0117AA  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8121   0117AC  3217               	rrcf	??_collect_avg_readings^0,f,c
  8122   0117AE  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8123   0117B2  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8124   0117B6  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8125   0117BA  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8126   0117BE                     
  8127                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  8128   0117BE  0E00               	movlw	0
  8129   0117C0  6E1E               	movwf	(collect_avg_readings@i_1653+1)^0,c
  8130   0117C2  0E00               	movlw	0
  8131   0117C4  6E1D               	movwf	collect_avg_readings@i_1653^0,c
  8132   0117C6                     l4398:
  8133                           
  8134                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  8135   0117C6  EC94  F094         	call	_color_read_Red	;wreg free
  8136   0117CA  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8137   0117CE  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8138   0117D2  5008               	movf	?_color_read_Red^0,w,c
  8139   0117D4  26DE               	addwf	postinc2,f,c
  8140   0117D6  5009               	movf	(?_color_read_Red+1)^0,w,c
  8141   0117D8  22DD               	addwfc	postdec2,f,c
  8142   0117DA                     
  8143                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8144   0117DA  0E11               	movlw	17
  8145   0117DC  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8146   0117DE  0E3C               	movlw	60
  8147   0117E0  6E17               	movwf	??_collect_avg_readings^0,c
  8148   0117E2  0ECB               	movlw	203
  8149   0117E4                     u3047:
  8150   0117E4  2EE8               	decfsz	wreg,f,c
  8151   0117E6  D7FE               	bra	u3047
  8152   0117E8  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8153   0117EA  D7FC               	bra	u3047
  8154   0117EC  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8155   0117EE  D7FA               	bra	u3047
  8156   0117F0  F000               	nop	
  8157   0117F2                     
  8158                           ;colour_identify.c: 53:     }
  8159   0117F2  4A1D               	infsnz	collect_avg_readings@i_1653^0,f,c
  8160   0117F4  2A1E               	incf	(collect_avg_readings@i_1653+1)^0,f,c
  8161   0117F6  BE1E               	btfsc	(collect_avg_readings@i_1653+1)^0,7,c
  8162   0117F8  EF07  F08C         	goto	u2391
  8163   0117FC  501E               	movf	(collect_avg_readings@i_1653+1)^0,w,c
  8164   0117FE  E109               	bnz	u2390
  8165   011800  0E03               	movlw	3
  8166   011802  5C1D               	subwf	collect_avg_readings@i_1653^0,w,c
  8167   011804  A0D8               	btfss	status,0,c
  8168   011806  EF07  F08C         	goto	u2391
  8169   01180A  EF09  F08C         	goto	u2390
  8170   01180E                     u2391:
  8171   01180E  EFE3  F08B         	goto	l4398
  8172   011812                     u2390:
  8173   011812                     
  8174                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  8175   011812  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8176   011816  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8177   01181A  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8178   01181E  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8179   011822  90D8               	bcf	status,0,c
  8180   011824  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8181   011826  3217               	rrcf	??_collect_avg_readings^0,f,c
  8182   011828  90D8               	bcf	status,0,c
  8183   01182A  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8184   01182C  3217               	rrcf	??_collect_avg_readings^0,f,c
  8185   01182E  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8186   011832  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8187   011836  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8188   01183A  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8189   01183E                     
  8190                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  8191   01183E  0E00               	movlw	0
  8192   011840  6E20               	movwf	(collect_avg_readings@i_1654+1)^0,c
  8193   011842  0E00               	movlw	0
  8194   011844  6E1F               	movwf	collect_avg_readings@i_1654^0,c
  8195   011846                     l4414:
  8196                           
  8197                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  8198   011846  ECBC  F094         	call	_color_read_Green	;wreg free
  8199   01184A  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8200   01184E  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8201   011852  5008               	movf	?_color_read_Green^0,w,c
  8202   011854  26DE               	addwf	postinc2,f,c
  8203   011856  5009               	movf	(?_color_read_Green+1)^0,w,c
  8204   011858  22DD               	addwfc	postdec2,f,c
  8205   01185A                     
  8206                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8207   01185A  0E11               	movlw	17
  8208   01185C  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8209   01185E  0E3C               	movlw	60
  8210   011860  6E17               	movwf	??_collect_avg_readings^0,c
  8211   011862  0ECB               	movlw	203
  8212   011864                     u3057:
  8213   011864  2EE8               	decfsz	wreg,f,c
  8214   011866  D7FE               	bra	u3057
  8215   011868  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8216   01186A  D7FC               	bra	u3057
  8217   01186C  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8218   01186E  D7FA               	bra	u3057
  8219   011870  F000               	nop	
  8220   011872                     
  8221                           ;colour_identify.c: 59:     }
  8222   011872  4A1F               	infsnz	collect_avg_readings@i_1654^0,f,c
  8223   011874  2A20               	incf	(collect_avg_readings@i_1654+1)^0,f,c
  8224   011876  BE20               	btfsc	(collect_avg_readings@i_1654+1)^0,7,c
  8225   011878  EF47  F08C         	goto	u2401
  8226   01187C  5020               	movf	(collect_avg_readings@i_1654+1)^0,w,c
  8227   01187E  E109               	bnz	u2400
  8228   011880  0E03               	movlw	3
  8229   011882  5C1F               	subwf	collect_avg_readings@i_1654^0,w,c
  8230   011884  A0D8               	btfss	status,0,c
  8231   011886  EF47  F08C         	goto	u2401
  8232   01188A  EF49  F08C         	goto	u2400
  8233   01188E                     u2401:
  8234   01188E  EF23  F08C         	goto	l4414
  8235   011892                     u2400:
  8236   011892                     
  8237                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  8238   011892  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8239   011896  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8240   01189A  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8241   01189E  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8242   0118A2  90D8               	bcf	status,0,c
  8243   0118A4  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8244   0118A6  3217               	rrcf	??_collect_avg_readings^0,f,c
  8245   0118A8  90D8               	bcf	status,0,c
  8246   0118AA  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8247   0118AC  3217               	rrcf	??_collect_avg_readings^0,f,c
  8248   0118AE  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8249   0118B2  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8250   0118B6  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8251   0118BA  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8252   0118BE                     
  8253                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  8254   0118BE  0E00               	movlw	0
  8255   0118C0  6E22               	movwf	(collect_avg_readings@i_1655+1)^0,c
  8256   0118C2  0E00               	movlw	0
  8257   0118C4  6E21               	movwf	collect_avg_readings@i_1655^0,c
  8258   0118C6                     l4430:
  8259                           
  8260                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  8261   0118C6  EC0C  F095         	call	_color_read_Blue	;wreg free
  8262   0118CA  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8263   0118CE  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8264   0118D2  5008               	movf	?_color_read_Blue^0,w,c
  8265   0118D4  26DE               	addwf	postinc2,f,c
  8266   0118D6  5009               	movf	(?_color_read_Blue+1)^0,w,c
  8267   0118D8  22DD               	addwfc	postdec2,f,c
  8268   0118DA                     
  8269                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8270   0118DA  0E11               	movlw	17
  8271   0118DC  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8272   0118DE  0E3C               	movlw	60
  8273   0118E0  6E17               	movwf	??_collect_avg_readings^0,c
  8274   0118E2  0ECB               	movlw	203
  8275   0118E4                     u3067:
  8276   0118E4  2EE8               	decfsz	wreg,f,c
  8277   0118E6  D7FE               	bra	u3067
  8278   0118E8  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8279   0118EA  D7FC               	bra	u3067
  8280   0118EC  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8281   0118EE  D7FA               	bra	u3067
  8282   0118F0  F000               	nop	
  8283   0118F2                     
  8284                           ;colour_identify.c: 65:     }
  8285   0118F2  4A21               	infsnz	collect_avg_readings@i_1655^0,f,c
  8286   0118F4  2A22               	incf	(collect_avg_readings@i_1655+1)^0,f,c
  8287   0118F6  BE22               	btfsc	(collect_avg_readings@i_1655+1)^0,7,c
  8288   0118F8  EF87  F08C         	goto	u2411
  8289   0118FC  5022               	movf	(collect_avg_readings@i_1655+1)^0,w,c
  8290   0118FE  E109               	bnz	u2410
  8291   011900  0E03               	movlw	3
  8292   011902  5C21               	subwf	collect_avg_readings@i_1655^0,w,c
  8293   011904  A0D8               	btfss	status,0,c
  8294   011906  EF87  F08C         	goto	u2411
  8295   01190A  EF89  F08C         	goto	u2410
  8296   01190E                     u2411:
  8297   01190E  EF63  F08C         	goto	l4430
  8298   011912                     u2410:
  8299   011912                     
  8300                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  8301   011912  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8302   011916  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8303   01191A  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8304   01191E  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8305   011922  90D8               	bcf	status,0,c
  8306   011924  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8307   011926  3217               	rrcf	??_collect_avg_readings^0,f,c
  8308   011928  90D8               	bcf	status,0,c
  8309   01192A  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8310   01192C  3217               	rrcf	??_collect_avg_readings^0,f,c
  8311   01192E  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8312   011932  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8313   011936  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8314   01193A  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8315   01193E  0012               	return		;funcret
  8316   011940                     __end_of_collect_avg_readings:
  8317                           	callstack 0
  8318                           
  8319 ;; *************** function _color_read_Red *****************
  8320 ;; Defined at:
  8321 ;;		line 29 in file "color.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  tmp             2   12[COMRAM] unsigned int 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  2    7[COMRAM] unsigned int 
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8339 ;;Total ram usage:        7 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; Hardware stack levels required when called: 3
  8342 ;; This function calls:
  8343 ;;		_I2C_2_Master_Read
  8344 ;;		_I2C_2_Master_RepStart
  8345 ;;		_I2C_2_Master_Start
  8346 ;;		_I2C_2_Master_Stop
  8347 ;;		_I2C_2_Master_Write
  8348 ;; This function is called by:
  8349 ;;		_collect_avg_readings
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text35
  8354   012928                     __ptext35:
  8355                           	callstack 0
  8356   012928                     _color_read_Red:
  8357                           	callstack 26
  8358   012928                     
  8359                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  8360   012928  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8361                           
  8362                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  8363   01292C  0E52               	movlw	82
  8364   01292E  EC8E  F096         	call	_I2C_2_Master_Write
  8365                           
  8366                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  8367   012932  0EB6               	movlw	182
  8368   012934  EC8E  F096         	call	_I2C_2_Master_Write
  8369                           
  8370                           ;color.c: 35:  I2C_2_Master_RepStart();
  8371   012938  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8372                           
  8373                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  8374   01293C  0E53               	movlw	83
  8375   01293E  EC8E  F096         	call	_I2C_2_Master_Write
  8376                           
  8377                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  8378   012942  0E01               	movlw	1
  8379   012944  EC7A  F095         	call	_I2C_2_Master_Read
  8380   012948  6E0A               	movwf	??_color_read_Red^0,c
  8381   01294A  500A               	movf	??_color_read_Red^0,w,c
  8382   01294C  6E0D               	movwf	color_read_Red@tmp^0,c
  8383   01294E  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  8384                           
  8385                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8386   012950  0E00               	movlw	0
  8387   012952  EC7A  F095         	call	_I2C_2_Master_Read
  8388   012956  6E0A               	movwf	??_color_read_Red^0,c
  8389   012958  500A               	movf	??_color_read_Red^0,w,c
  8390   01295A  6E0C               	movwf	(??_color_read_Red+2)^0,c
  8391   01295C  6A0B               	clrf	(??_color_read_Red+1)^0,c
  8392   01295E  500D               	movf	color_read_Red@tmp^0,w,c
  8393   012960  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  8394   012962  6E0D               	movwf	color_read_Red@tmp^0,c
  8395   012964  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  8396   012966  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  8397   012968  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  8398                           
  8399                           ;color.c: 39:  I2C_2_Master_Stop();
  8400   01296A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8401   01296E                     
  8402                           ;color.c: 40:  return tmp;
  8403   01296E  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  8404   012972  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8405   012976  0012               	return		;funcret
  8406   012978                     __end_of_color_read_Red:
  8407                           	callstack 0
  8408                           
  8409 ;; *************** function _color_read_Green *****************
  8410 ;; Defined at:
  8411 ;;		line 43 in file "color.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  tmp             2   12[COMRAM] unsigned int 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  2    7[COMRAM] unsigned int 
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8427 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8428 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8429 ;;Total ram usage:        7 bytes
  8430 ;; Hardware stack levels used: 1
  8431 ;; Hardware stack levels required when called: 3
  8432 ;; This function calls:
  8433 ;;		_I2C_2_Master_Read
  8434 ;;		_I2C_2_Master_RepStart
  8435 ;;		_I2C_2_Master_Start
  8436 ;;		_I2C_2_Master_Stop
  8437 ;;		_I2C_2_Master_Write
  8438 ;; This function is called by:
  8439 ;;		_collect_avg_readings
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text36
  8444   012978                     __ptext36:
  8445                           	callstack 0
  8446   012978                     _color_read_Green:
  8447                           	callstack 26
  8448   012978                     
  8449                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  8450   012978  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8451                           
  8452                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  8453   01297C  0E52               	movlw	82
  8454   01297E  EC8E  F096         	call	_I2C_2_Master_Write
  8455                           
  8456                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  8457   012982  0EB8               	movlw	184
  8458   012984  EC8E  F096         	call	_I2C_2_Master_Write
  8459                           
  8460                           ;color.c: 49:  I2C_2_Master_RepStart();
  8461   012988  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8462                           
  8463                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  8464   01298C  0E53               	movlw	83
  8465   01298E  EC8E  F096         	call	_I2C_2_Master_Write
  8466                           
  8467                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  8468   012992  0E01               	movlw	1
  8469   012994  EC7A  F095         	call	_I2C_2_Master_Read
  8470   012998  6E0A               	movwf	??_color_read_Green^0,c
  8471   01299A  500A               	movf	??_color_read_Green^0,w,c
  8472   01299C  6E0D               	movwf	color_read_Green@tmp^0,c
  8473   01299E  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  8474                           
  8475                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8476   0129A0  0E00               	movlw	0
  8477   0129A2  EC7A  F095         	call	_I2C_2_Master_Read
  8478   0129A6  6E0A               	movwf	??_color_read_Green^0,c
  8479   0129A8  500A               	movf	??_color_read_Green^0,w,c
  8480   0129AA  6E0C               	movwf	(??_color_read_Green+2)^0,c
  8481   0129AC  6A0B               	clrf	(??_color_read_Green+1)^0,c
  8482   0129AE  500D               	movf	color_read_Green@tmp^0,w,c
  8483   0129B0  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  8484   0129B2  6E0D               	movwf	color_read_Green@tmp^0,c
  8485   0129B4  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  8486   0129B6  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  8487   0129B8  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  8488                           
  8489                           ;color.c: 53:  I2C_2_Master_Stop();
  8490   0129BA  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8491   0129BE                     
  8492                           ;color.c: 54:  return tmp;
  8493   0129BE  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  8494   0129C2  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8495   0129C6  0012               	return		;funcret
  8496   0129C8                     __end_of_color_read_Green:
  8497                           	callstack 0
  8498                           
  8499 ;; *************** function _color_read_Clear *****************
  8500 ;; Defined at:
  8501 ;;		line 71 in file "color.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;		None
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  tmp             2   12[COMRAM] unsigned int 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  2    7[COMRAM] unsigned int 
  8508 ;; Registers used:
  8509 ;;		wreg, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8517 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8518 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8519 ;;Total ram usage:        7 bytes
  8520 ;; Hardware stack levels used: 1
  8521 ;; Hardware stack levels required when called: 3
  8522 ;; This function calls:
  8523 ;;		_I2C_2_Master_Read
  8524 ;;		_I2C_2_Master_RepStart
  8525 ;;		_I2C_2_Master_Start
  8526 ;;		_I2C_2_Master_Stop
  8527 ;;		_I2C_2_Master_Write
  8528 ;; This function is called by:
  8529 ;;		_main
  8530 ;;		_clear_read_calibration
  8531 ;;		_collect_avg_readings
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text37
  8536   0129C8                     __ptext37:
  8537                           	callstack 0
  8538   0129C8                     _color_read_Clear:
  8539                           	callstack 27
  8540   0129C8                     
  8541                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  8542   0129C8  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8543                           
  8544                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  8545   0129CC  0E52               	movlw	82
  8546   0129CE  EC8E  F096         	call	_I2C_2_Master_Write
  8547                           
  8548                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  8549   0129D2  0EB4               	movlw	180
  8550   0129D4  EC8E  F096         	call	_I2C_2_Master_Write
  8551                           
  8552                           ;color.c: 77:  I2C_2_Master_RepStart();
  8553   0129D8  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8554                           
  8555                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  8556   0129DC  0E53               	movlw	83
  8557   0129DE  EC8E  F096         	call	_I2C_2_Master_Write
  8558                           
  8559                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  8560   0129E2  0E01               	movlw	1
  8561   0129E4  EC7A  F095         	call	_I2C_2_Master_Read
  8562   0129E8  6E0A               	movwf	??_color_read_Clear^0,c
  8563   0129EA  500A               	movf	??_color_read_Clear^0,w,c
  8564   0129EC  6E0D               	movwf	color_read_Clear@tmp^0,c
  8565   0129EE  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  8566                           
  8567                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8568   0129F0  0E00               	movlw	0
  8569   0129F2  EC7A  F095         	call	_I2C_2_Master_Read
  8570   0129F6  6E0A               	movwf	??_color_read_Clear^0,c
  8571   0129F8  500A               	movf	??_color_read_Clear^0,w,c
  8572   0129FA  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  8573   0129FC  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  8574   0129FE  500D               	movf	color_read_Clear@tmp^0,w,c
  8575   012A00  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  8576   012A02  6E0D               	movwf	color_read_Clear@tmp^0,c
  8577   012A04  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  8578   012A06  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  8579   012A08  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  8580                           
  8581                           ;color.c: 81:  I2C_2_Master_Stop();
  8582   012A0A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8583   012A0E                     
  8584                           ;color.c: 82:  return tmp;
  8585   012A0E  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  8586   012A12  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8587   012A16  0012               	return		;funcret
  8588   012A18                     __end_of_color_read_Clear:
  8589                           	callstack 0
  8590                           
  8591 ;; *************** function _color_read_Blue *****************
  8592 ;; Defined at:
  8593 ;;		line 57 in file "color.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  tmp             2   12[COMRAM] unsigned int 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  2    7[COMRAM] unsigned int 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8611 ;;Total ram usage:        7 bytes
  8612 ;; Hardware stack levels used: 1
  8613 ;; Hardware stack levels required when called: 3
  8614 ;; This function calls:
  8615 ;;		_I2C_2_Master_Read
  8616 ;;		_I2C_2_Master_RepStart
  8617 ;;		_I2C_2_Master_Start
  8618 ;;		_I2C_2_Master_Stop
  8619 ;;		_I2C_2_Master_Write
  8620 ;; This function is called by:
  8621 ;;		_collect_avg_readings
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           	psect	text38
  8626   012A18                     __ptext38:
  8627                           	callstack 0
  8628   012A18                     _color_read_Blue:
  8629                           	callstack 26
  8630   012A18                     
  8631                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  8632   012A18  EC99  F096         	call	_I2C_2_Master_Start	;wreg free
  8633                           
  8634                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  8635   012A1C  0E52               	movlw	82
  8636   012A1E  EC8E  F096         	call	_I2C_2_Master_Write
  8637                           
  8638                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  8639   012A22  0EBA               	movlw	186
  8640   012A24  EC8E  F096         	call	_I2C_2_Master_Write
  8641                           
  8642                           ;color.c: 63:  I2C_2_Master_RepStart();
  8643   012A28  EC9E  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8644                           
  8645                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  8646   012A2C  0E53               	movlw	83
  8647   012A2E  EC8E  F096         	call	_I2C_2_Master_Write
  8648                           
  8649                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  8650   012A32  0E01               	movlw	1
  8651   012A34  EC7A  F095         	call	_I2C_2_Master_Read
  8652   012A38  6E0A               	movwf	??_color_read_Blue^0,c
  8653   012A3A  500A               	movf	??_color_read_Blue^0,w,c
  8654   012A3C  6E0D               	movwf	color_read_Blue@tmp^0,c
  8655   012A3E  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  8656                           
  8657                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8658   012A40  0E00               	movlw	0
  8659   012A42  EC7A  F095         	call	_I2C_2_Master_Read
  8660   012A46  6E0A               	movwf	??_color_read_Blue^0,c
  8661   012A48  500A               	movf	??_color_read_Blue^0,w,c
  8662   012A4A  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  8663   012A4C  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  8664   012A4E  500D               	movf	color_read_Blue@tmp^0,w,c
  8665   012A50  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  8666   012A52  6E0D               	movwf	color_read_Blue@tmp^0,c
  8667   012A54  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  8668   012A56  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  8669   012A58  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  8670                           
  8671                           ;color.c: 67:  I2C_2_Master_Stop();
  8672   012A5A  EC94  F096         	call	_I2C_2_Master_Stop	;wreg free
  8673   012A5E                     
  8674                           ;color.c: 68:  return tmp;
  8675   012A5E  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  8676   012A62  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8677   012A66  0012               	return		;funcret
  8678   012A68                     __end_of_color_read_Blue:
  8679                           	callstack 0
  8680                           
  8681 ;; *************** function _I2C_2_Master_Write *****************
  8682 ;; Defined at:
  8683 ;;		line 45 in file "i2c.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  data_byte       1    wreg     unsigned char 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  data_byte       1    4[COMRAM] unsigned char 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		wreg, status,2, status,0, cstack
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8701 ;;Total ram usage:        1 bytes
  8702 ;; Hardware stack levels used: 1
  8703 ;; Hardware stack levels required when called: 2
  8704 ;; This function calls:
  8705 ;;		_I2C_2_Master_Idle
  8706 ;; This function is called by:
  8707 ;;		_color_writetoaddr
  8708 ;;		_color_read_Red
  8709 ;;		_color_read_Green
  8710 ;;		_color_read_Blue
  8711 ;;		_color_read_Clear
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text39
  8716   012D1C                     __ptext39:
  8717                           	callstack 0
  8718   012D1C                     _I2C_2_Master_Write:
  8719                           	callstack 27
  8720                           
  8721                           ;incstack = 0
  8722                           ;I2C_2_Master_Write@data_byte stored from wreg
  8723   012D1C  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  8724   012D1E                     
  8725                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8726   012D1E  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8727   012D22                     
  8728                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8729   012D22  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8730   012D26  0012               	return		;funcret
  8731   012D28                     __end_of_I2C_2_Master_Write:
  8732                           	callstack 0
  8733                           
  8734 ;; *************** function _I2C_2_Master_Stop *****************
  8735 ;; Defined at:
  8736 ;;		line 39 in file "i2c.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  1    wreg      void 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2, status,0, cstack
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8754 ;;Total ram usage:        0 bytes
  8755 ;; Hardware stack levels used: 1
  8756 ;; Hardware stack levels required when called: 2
  8757 ;; This function calls:
  8758 ;;		_I2C_2_Master_Idle
  8759 ;; This function is called by:
  8760 ;;		_color_writetoaddr
  8761 ;;		_color_read_Red
  8762 ;;		_color_read_Green
  8763 ;;		_color_read_Blue
  8764 ;;		_color_read_Clear
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text40
  8769   012D28                     __ptext40:
  8770                           	callstack 0
  8771   012D28                     _I2C_2_Master_Stop:
  8772                           	callstack 27
  8773   012D28                     
  8774                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8775   012D28  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8776   012D2C                     
  8777                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8778   012D2C  010E               	movlb	14	; () banked
  8779   012D2E  85DA               	bsf	218,2,b	;volatile
  8780   012D30                     
  8781                           ; BSR set to: 14
  8782   012D30  0012               	return		;funcret
  8783   012D32                     __end_of_I2C_2_Master_Stop:
  8784                           	callstack 0
  8785                           
  8786 ;; *************** function _I2C_2_Master_Start *****************
  8787 ;; Defined at:
  8788 ;;		line 27 in file "i2c.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;		None
  8793 ;; Return value:  Size  Location     Type
  8794 ;;                  1    wreg      void 
  8795 ;; Registers used:
  8796 ;;		wreg, status,2, status,0, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8806 ;;Total ram usage:        0 bytes
  8807 ;; Hardware stack levels used: 1
  8808 ;; Hardware stack levels required when called: 2
  8809 ;; This function calls:
  8810 ;;		_I2C_2_Master_Idle
  8811 ;; This function is called by:
  8812 ;;		_color_writetoaddr
  8813 ;;		_color_read_Red
  8814 ;;		_color_read_Green
  8815 ;;		_color_read_Blue
  8816 ;;		_color_read_Clear
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text41
  8821   012D32                     __ptext41:
  8822                           	callstack 0
  8823   012D32                     _I2C_2_Master_Start:
  8824                           	callstack 27
  8825   012D32                     
  8826                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8827   012D32  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8828   012D36                     
  8829                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8830   012D36  010E               	movlb	14	; () banked
  8831   012D38  81DA               	bsf	218,0,b	;volatile
  8832   012D3A                     
  8833                           ; BSR set to: 14
  8834   012D3A  0012               	return		;funcret
  8835   012D3C                     __end_of_I2C_2_Master_Start:
  8836                           	callstack 0
  8837                           
  8838 ;; *************** function _I2C_2_Master_RepStart *****************
  8839 ;; Defined at:
  8840 ;;		line 33 in file "i2c.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;		None
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      void 
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8858 ;;Total ram usage:        0 bytes
  8859 ;; Hardware stack levels used: 1
  8860 ;; Hardware stack levels required when called: 2
  8861 ;; This function calls:
  8862 ;;		_I2C_2_Master_Idle
  8863 ;; This function is called by:
  8864 ;;		_color_read_Red
  8865 ;;		_color_read_Green
  8866 ;;		_color_read_Blue
  8867 ;;		_color_read_Clear
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text42
  8872   012D3C                     __ptext42:
  8873                           	callstack 0
  8874   012D3C                     _I2C_2_Master_RepStart:
  8875                           	callstack 27
  8876   012D3C                     
  8877                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8878   012D3C  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8879   012D40                     
  8880                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8881   012D40  010E               	movlb	14	; () banked
  8882   012D42  83DA               	bsf	218,1,b	;volatile
  8883   012D44                     
  8884                           ; BSR set to: 14
  8885   012D44  0012               	return		;funcret
  8886   012D46                     __end_of_I2C_2_Master_RepStart:
  8887                           	callstack 0
  8888                           
  8889 ;; *************** function _I2C_2_Master_Read *****************
  8890 ;; Defined at:
  8891 ;;		line 51 in file "i2c.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  ack             1    wreg     unsigned char 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  ack             1    5[COMRAM] unsigned char 
  8896 ;;  tmp             1    6[COMRAM] unsigned char 
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      unsigned char 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8909 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8910 ;;Total ram usage:        3 bytes
  8911 ;; Hardware stack levels used: 1
  8912 ;; Hardware stack levels required when called: 2
  8913 ;; This function calls:
  8914 ;;		_I2C_2_Master_Idle
  8915 ;; This function is called by:
  8916 ;;		_color_read_Red
  8917 ;;		_color_read_Green
  8918 ;;		_color_read_Blue
  8919 ;;		_color_read_Clear
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text43
  8924   012AF4                     __ptext43:
  8925                           	callstack 0
  8926   012AF4                     _I2C_2_Master_Read:
  8927                           	callstack 27
  8928                           
  8929                           ; BSR set to: 14
  8930                           ;incstack = 0
  8931                           ;I2C_2_Master_Read@ack stored from wreg
  8932   012AF4  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  8933   012AF6                     
  8934                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8935   012AF6  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8936   012AFA                     
  8937                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8938   012AFA  010E               	movlb	14	; () banked
  8939   012AFC  87DA               	bsf	218,3,b	;volatile
  8940                           
  8941                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8942   012AFE  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8943   012B02                     
  8944                           ;i2c.c: 57:   tmp = SSP2BUF;
  8945   012B02  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8946                           
  8947                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8948   012B06  EC2C  F096         	call	_I2C_2_Master_Idle	;wreg free
  8949   012B0A                     
  8950                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8951   012B0A  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  8952   012B0C  B4D8               	btfsc	status,2,c
  8953   012B0E  EF8B  F095         	goto	u2261
  8954   012B12  EF8F  F095         	goto	u2260
  8955   012B16                     u2261:
  8956   012B16  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8957   012B18  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  8958   012B1A  EF90  F095         	goto	u2278
  8959   012B1E                     u2260:
  8960   012B1E  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8961   012B20                     u2278:
  8962   012B20  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  8963   012B22  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  8964   012B24  010E               	movlb	14	; () banked
  8965   012B26  51DA               	movf	218,w,b	;volatile
  8966   012B28  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8967   012B2A  0BDF               	andlw	-33
  8968   012B2C  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8969   012B2E  6FDA               	movwf	218,b	;volatile
  8970   012B30                     
  8971                           ; BSR set to: 14
  8972                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8973   012B30  89DA               	bsf	218,4,b	;volatile
  8974   012B32                     
  8975                           ; BSR set to: 14
  8976                           ;i2c.c: 61:   return tmp;
  8977   012B32  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  8978   012B34                     
  8979                           ; BSR set to: 14
  8980   012B34  0012               	return		;funcret
  8981   012B36                     __end_of_I2C_2_Master_Read:
  8982                           	callstack 0
  8983                           
  8984 ;; *************** function _I2C_2_Master_Idle *****************
  8985 ;; Defined at:
  8986 ;;		line 22 in file "i2c.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9004 ;;Total ram usage:        1 bytes
  9005 ;; Hardware stack levels used: 1
  9006 ;; Hardware stack levels required when called: 1
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_I2C_2_Master_Start
  9011 ;;		_I2C_2_Master_RepStart
  9012 ;;		_I2C_2_Master_Stop
  9013 ;;		_I2C_2_Master_Write
  9014 ;;		_I2C_2_Master_Read
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           	psect	text44
  9019   012C58                     __ptext44:
  9020                           	callstack 0
  9021   012C58                     _I2C_2_Master_Idle:
  9022                           	callstack 27
  9023   012C58                     l142:
  9024   012C58  010E               	movlb	14	; () banked
  9025   012C5A  B5D8               	btfsc	216,2,b	;volatile
  9026   012C5C  EF32  F096         	goto	u2211
  9027   012C60  EF34  F096         	goto	u2210
  9028   012C64                     u2211:
  9029   012C64  EF2C  F096         	goto	l142
  9030   012C68                     u2210:
  9031   012C68                     
  9032                           ; BSR set to: 14
  9033   012C68  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9034   012C6C  0E1F               	movlw	31
  9035   012C6E  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  9036   012C70  A4D8               	btfss	status,2,c
  9037   012C72  EF3D  F096         	goto	u2221
  9038   012C76  EF3F  F096         	goto	u2220
  9039   012C7A                     u2221:
  9040   012C7A  EF2C  F096         	goto	l142
  9041   012C7E                     u2220:
  9042   012C7E                     
  9043                           ; BSR set to: 14
  9044   012C7E  0012               	return		;funcret
  9045   012C80                     __end_of_I2C_2_Master_Idle:
  9046                           	callstack 0
  9047                           
  9048 ;; *************** function ___lwmod *****************
  9049 ;; Defined at:
  9050 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  dividend        2    3[COMRAM] unsigned int 
  9053 ;;  divisor         2    5[COMRAM] unsigned int 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  counter         1    7[COMRAM] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  2    3[COMRAM] unsigned int 
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9068 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9069 ;;Total ram usage:        5 bytes
  9070 ;; Hardware stack levels used: 1
  9071 ;; Hardware stack levels required when called: 1
  9072 ;; This function calls:
  9073 ;;		Nothing
  9074 ;; This function is called by:
  9075 ;;		_main
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text45
  9080   0127C2                     __ptext45:
  9081                           	callstack 0
  9082   0127C2                     ___lwmod:
  9083                           	callstack 29
  9084   0127C2  5006               	movf	___lwmod@divisor^0,w,c
  9085   0127C4  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  9086   0127C6  B4D8               	btfsc	status,2,c
  9087   0127C8  EFE8  F093         	goto	u2531
  9088   0127CC  EFEA  F093         	goto	u2530
  9089   0127D0                     u2531:
  9090   0127D0  EF0E  F094         	goto	l1045
  9091   0127D4                     u2530:
  9092   0127D4  0E01               	movlw	1
  9093   0127D6  6E08               	movwf	___lwmod@counter^0,c
  9094   0127D8  EFF2  F093         	goto	l4862
  9095   0127DC                     l4860:
  9096   0127DC  90D8               	bcf	status,0,c
  9097   0127DE  3606               	rlcf	___lwmod@divisor^0,f,c
  9098   0127E0  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  9099   0127E2  2A08               	incf	___lwmod@counter^0,f,c
  9100   0127E4                     l4862:
  9101   0127E4  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  9102   0127E6  EFF7  F093         	goto	u2541
  9103   0127EA  EFF9  F093         	goto	u2540
  9104   0127EE                     u2541:
  9105   0127EE  EFEE  F093         	goto	l4860
  9106   0127F2                     u2540:
  9107   0127F2                     l4864:
  9108   0127F2  5006               	movf	___lwmod@divisor^0,w,c
  9109   0127F4  5C04               	subwf	___lwmod@dividend^0,w,c
  9110   0127F6  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9111   0127F8  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  9112   0127FA  A0D8               	btfss	status,0,c
  9113   0127FC  EF02  F094         	goto	u2551
  9114   012800  EF04  F094         	goto	u2550
  9115   012804                     u2551:
  9116   012804  EF08  F094         	goto	l4868
  9117   012808                     u2550:
  9118   012808  5006               	movf	___lwmod@divisor^0,w,c
  9119   01280A  5E04               	subwf	___lwmod@dividend^0,f,c
  9120   01280C  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9121   01280E  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  9122   012810                     l4868:
  9123   012810  90D8               	bcf	status,0,c
  9124   012812  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  9125   012814  3206               	rrcf	___lwmod@divisor^0,f,c
  9126   012816  2E08               	decfsz	___lwmod@counter^0,f,c
  9127   012818  EFF9  F093         	goto	l4864
  9128   01281C                     l1045:
  9129   01281C  C004  F004         	movff	___lwmod@dividend,?___lwmod
  9130   012820  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  9131   012824  0012               	return		;funcret
  9132   012826                     __end_of___lwmod:
  9133                           	callstack 0
  9134                           
  9135 ;; *************** function _LEDSon_init *****************
  9136 ;; Defined at:
  9137 ;;		line 18 in file "LEDsOn.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;		None
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      void 
  9144 ;; Registers used:
  9145 ;;		None
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9155 ;;Total ram usage:        0 bytes
  9156 ;; Hardware stack levels used: 1
  9157 ;; Hardware stack levels required when called: 1
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text46
  9166   012C04                     __ptext46:
  9167                           	callstack 0
  9168   012C04                     _LEDSon_init:
  9169                           	callstack 29
  9170   012C04                     
  9171                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  9172   012C04  9288               	bcf	136,1,c	;volatile
  9173                           
  9174                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  9175   012C06  9088               	bcf	136,0,c	;volatile
  9176                           
  9177                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  9178   012C08  9884               	bcf	132,4,c	;volatile
  9179                           
  9180                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  9181   012C0A  9684               	bcf	132,3,c	;volatile
  9182                           
  9183                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  9184   012C0C  9086               	bcf	134,0,c	;volatile
  9185                           
  9186                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  9187   012C0E  9287               	bcf	135,1,c	;volatile
  9188                           
  9189                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  9190   012C10  9E86               	bcf	134,7,c	;volatile
  9191                           
  9192                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  9193   012C12  9881               	bcf	129,4,c	;volatile
  9194                           
  9195                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  9196   012C14  8E7E               	bsf	126,7,c	;volatile
  9197                           
  9198                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  9199   012C16  827F               	bsf	127,1,c	;volatile
  9200                           
  9201                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  9202   012C18  8879               	bsf	121,4,c	;volatile
  9203                           
  9204                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  9205   012C1A  987C               	bcf	124,4,c	;volatile
  9206                           
  9207                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  9208   012C1C  9280               	bcf	128,1,c	;volatile
  9209                           
  9210                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  9211   012C1E  907E               	bcf	126,0,c	;volatile
  9212                           
  9213                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  9214   012C20  9080               	bcf	128,0,c	;volatile
  9215                           
  9216                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  9217   012C22  967C               	bcf	124,3,c	;volatile
  9218                           
  9219                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  9220   012C24  9688               	bcf	136,3,c	;volatile
  9221                           
  9222                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  9223   012C26  9680               	bcf	128,3,c	;volatile
  9224                           
  9225                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  9226   012C28  9E84               	bcf	132,7,c	;volatile
  9227                           
  9228                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  9229   012C2A  9E7C               	bcf	124,7,c	;volatile
  9230   012C2C  0012               	return		;funcret
  9231   012C2E                     __end_of_LEDSon_init:
  9232                           	callstack 0
  9233                           
  9234 ;; *************** function _Interrupts_init *****************
  9235 ;; Defined at:
  9236 ;;		line 7 in file "interrupts.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;		None
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, status,2
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9254 ;;Total ram usage:        0 bytes
  9255 ;; Hardware stack levels used: 1
  9256 ;; Hardware stack levels required when called: 1
  9257 ;; This function calls:
  9258 ;;		Nothing
  9259 ;; This function is called by:
  9260 ;;		_main
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           	psect	text47
  9265   012C2E                     __ptext47:
  9266                           	callstack 0
  9267   012C2E                     _Interrupts_init:
  9268                           	callstack 29
  9269   012C2E                     
  9270                           ;interrupts.c: 10:     TMR0IE=1;
  9271   012C2E  010E               	movlb	14	; () banked
  9272   012C30  8B29               	bsf	41,5,b	;volatile
  9273   012C32                     
  9274                           ; BSR set to: 14
  9275                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  9276   012C32  50D6               	movf	214,w,c	;volatile
  9277   012C34  0B1F               	andlw	-225
  9278   012C36  0940               	iorlw	64
  9279   012C38  6ED6               	movwf	214,c	;volatile
  9280   012C3A                     
  9281                           ; BSR set to: 14
  9282                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  9283   012C3A  88D6               	bsf	214,4,c	;volatile
  9284                           
  9285                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  9286   012C3C  50D6               	movf	214,w,c	;volatile
  9287   012C3E  0BF0               	andlw	-16
  9288   012C40  0905               	iorlw	5
  9289   012C42  6ED6               	movwf	214,c	;volatile
  9290   012C44                     
  9291                           ; BSR set to: 14
  9292                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  9293   012C44  88D5               	bsf	213,4,c	;volatile
  9294   012C46                     
  9295                           ; BSR set to: 14
  9296                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  9297   012C46  9B1F               	bcf	31,5,b	;volatile
  9298                           
  9299                           ;interrupts.c: 16:     TMR0H=0b00111100;
  9300   012C48  0E3C               	movlw	60
  9301   012C4A  6ED4               	movwf	212,c	;volatile
  9302                           
  9303                           ;interrupts.c: 17:     TMR0L=0b10101111;
  9304   012C4C  0EAF               	movlw	175
  9305   012C4E  6ED3               	movwf	211,c	;volatile
  9306   012C50                     
  9307                           ; BSR set to: 14
  9308                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  9309   012C50  8ED5               	bsf	213,7,c	;volatile
  9310   012C52                     
  9311                           ; BSR set to: 14
  9312                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  9313   012C52  8CF2               	bsf	242,6,c	;volatile
  9314   012C54                     
  9315                           ; BSR set to: 14
  9316                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  9317   012C54  8EF2               	bsf	242,7,c	;volatile
  9318   012C56                     
  9319                           ; BSR set to: 14
  9320   012C56  0012               	return		;funcret
  9321   012C58                     __end_of_Interrupts_init:
  9322                           	callstack 0
  9323                           
  9324 ;; *************** function _LowISR *****************
  9325 ;; Defined at:
  9326 ;;		line 24 in file "interrupts.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9343 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9344 ;;Total ram usage:        3 bytes
  9345 ;; Hardware stack levels used: 1
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		Interrupt level 1
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	intcodelo
  9354   000018                     __pintcodelo:
  9355                           	callstack 0
  9356   000018                     _LowISR:
  9357                           	callstack 20
  9358                           
  9359                           ; BSR set to: 14
  9360                           ;incstack = 0
  9361   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  9362   00001A  CFD8 F001          	movff	status,??_LowISR
  9363   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  9364   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  9365   000026                     
  9366                           ;interrupts.c: 27:     if(TMR0IF){
  9367   000026  010E               	movlb	14	; () banked
  9368   000028  AB33               	btfss	51,5,b	;volatile
  9369   00002A  EF19  F000         	goto	i1u184_21
  9370   00002E  EF1B  F000         	goto	i1u184_20
  9371   000032                     i1u184_21:
  9372   000032  EF26  F000         	goto	i1l541
  9373   000036                     i1u184_20:
  9374   000036                     
  9375                           ; BSR set to: 14
  9376                           ;interrupts.c: 28:     TMR0H=0b00111100;
  9377   000036  0E3C               	movlw	60
  9378   000038  6ED4               	movwf	212,c	;volatile
  9379                           
  9380                           ;interrupts.c: 29:     TMR0L=0b10101111;
  9381   00003A  0EAF               	movlw	175
  9382   00003C  6ED3               	movwf	211,c	;volatile
  9383                           
  9384                           ;interrupts.c: 34:         TimerFlag=1;
  9385   00003E  0E00               	movlw	0
  9386   000040  0100               	movlb	0	; () banked
  9387   000042  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  9388   000044  0E01               	movlw	1
  9389   000046  6FDB               	movwf	_TimerFlag& (0+255),b
  9390   000048                     
  9391                           ; BSR set to: 0
  9392                           ;interrupts.c: 36:        TMR0IF=0;
  9393   000048  010E               	movlb	14	; () banked
  9394   00004A  9B33               	bcf	51,5,b	;volatile
  9395   00004C                     i1l541:
  9396                           
  9397                           ; BSR set to: 14
  9398   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  9399   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  9400   000054  C001  FFD8         	movff	??_LowISR,status
  9401   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  9402   00005A  0010               	retfie	
  9403   00005C                     __end_of_LowISR:
  9404                           	callstack 0
  9405                           
  9406                           	psect	rparam
  9407   000000                     
  9408                           	psect	temp
  9409   00005B                     btemp:
  9410                           	callstack 0
  9411   00005B                     	ds	1
  9412   000000                     int$flags	set	btemp
  9413   000000                     wtemp8	set	btemp+1
  9414   000000                     ttemp5	set	btemp+1
  9415   000000                     ttemp6	set	btemp+4
  9416   000000                     ttemp7	set	btemp+8
  9417                           
  9418                           	psect	idloc
  9419                           
  9420                           ;Config register IDLOC0 @ 0x200000
  9421                           ;	unspecified, using default values
  9422   200000                     	org	2097152
  9423   200000  0FFF               	dw	4095
  9424                           
  9425                           ;Config register IDLOC1 @ 0x200002
  9426                           ;	unspecified, using default values
  9427   200002                     	org	2097154
  9428   200002  0FFF               	dw	4095
  9429                           
  9430                           ;Config register IDLOC2 @ 0x200004
  9431                           ;	unspecified, using default values
  9432   200004                     	org	2097156
  9433   200004  0FFF               	dw	4095
  9434                           
  9435                           ;Config register IDLOC3 @ 0x200006
  9436                           ;	unspecified, using default values
  9437   200006                     	org	2097158
  9438   200006  0FFF               	dw	4095
  9439                           
  9440                           ;Config register IDLOC4 @ 0x200008
  9441                           ;	unspecified, using default values
  9442   200008                     	org	2097160
  9443   200008  0FFF               	dw	4095
  9444                           
  9445                           ;Config register IDLOC5 @ 0x20000A
  9446                           ;	unspecified, using default values
  9447   20000A                     	org	2097162
  9448   20000A  0FFF               	dw	4095
  9449                           
  9450                           ;Config register IDLOC6 @ 0x20000C
  9451                           ;	unspecified, using default values
  9452   20000C                     	org	2097164
  9453   20000C  0FFF               	dw	4095
  9454                           
  9455                           ;Config register IDLOC7 @ 0x20000E
  9456                           ;	unspecified, using default values
  9457   20000E                     	org	2097166
  9458   20000E  0FFF               	dw	4095
  9459                           
  9460                           	psect	config
  9461                           
  9462                           ;Config register CONFIG1L @ 0x300000
  9463                           ;	External Oscillator mode Selection bits
  9464                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9465                           ;	Power-up default value for COSC bits
  9466                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9467   300000                     	org	3145728
  9468   300000  AA                 	db	170
  9469                           
  9470                           ;Config register CONFIG1H @ 0x300001
  9471                           ;	unspecified, using default values
  9472                           ;	Clock Out Enable bit
  9473                           ;	CLKOUTEN = 0x1, unprogrammed default
  9474                           ;	Clock Switch Enable bit
  9475                           ;	CSWEN = 0x1, unprogrammed default
  9476                           ;	Fail-Safe Clock Monitor Enable bit
  9477                           ;	FCMEN = 0x1, unprogrammed default
  9478   300001                     	org	3145729
  9479   300001  FF                 	db	255
  9480                           
  9481                           ;Config register CONFIG2L @ 0x300002
  9482                           ;	unspecified, using default values
  9483                           ;	Master Clear Enable bit
  9484                           ;	MCLRE = 0x1, unprogrammed default
  9485                           ;	Power-up Timer Enable bit
  9486                           ;	PWRTE = 0x1, unprogrammed default
  9487                           ;	Low-power BOR enable bit
  9488                           ;	LPBOREN = 0x1, unprogrammed default
  9489                           ;	Brown-out Reset Enable bits
  9490                           ;	BOREN = 0x3, unprogrammed default
  9491   300002                     	org	3145730
  9492   300002  FF                 	db	255
  9493                           
  9494                           ;Config register CONFIG2H @ 0x300003
  9495                           ;	unspecified, using default values
  9496                           ;	Brown Out Reset Voltage selection bits
  9497                           ;	BORV = 0x3, unprogrammed default
  9498                           ;	ZCD Disable bit
  9499                           ;	ZCD = 0x1, unprogrammed default
  9500                           ;	PPSLOCK bit One-Way Set Enable bit
  9501                           ;	PPS1WAY = 0x1, unprogrammed default
  9502                           ;	Stack Full/Underflow Reset Enable bit
  9503                           ;	STVREN = 0x1, unprogrammed default
  9504                           ;	Debugger Enable bit
  9505                           ;	DEBUG = 0x1, unprogrammed default
  9506                           ;	Extended Instruction Set Enable bit
  9507                           ;	XINST = 0x1, unprogrammed default
  9508   300003                     	org	3145731
  9509   300003  FF                 	db	255
  9510                           
  9511                           ;Config register CONFIG3L @ 0x300004
  9512                           ;	WDT Period Select bits
  9513                           ;	WDTCPS = 0x1F, unprogrammed default
  9514                           ;	WDT operating mode
  9515                           ;	WDTE = OFF, WDT Disabled
  9516   300004                     	org	3145732
  9517   300004  9F                 	db	159
  9518                           
  9519                           ;Config register CONFIG3H @ 0x300005
  9520                           ;	unspecified, using default values
  9521                           ;	WDT Window Select bits
  9522                           ;	WDTCWS = 0x7, unprogrammed default
  9523                           ;	WDT input clock selector
  9524                           ;	WDTCCS = 0x7, unprogrammed default
  9525   300005                     	org	3145733
  9526   300005  FF                 	db	255
  9527                           
  9528                           ;Config register CONFIG4L @ 0x300006
  9529                           ;	unspecified, using default values
  9530                           ;	Write Protection Block 0
  9531                           ;	WRT0 = 0x1, unprogrammed default
  9532                           ;	Write Protection Block 1
  9533                           ;	WRT1 = 0x1, unprogrammed default
  9534                           ;	Write Protection Block 2
  9535                           ;	WRT2 = 0x1, unprogrammed default
  9536                           ;	Write Protection Block 3
  9537                           ;	WRT3 = 0x1, unprogrammed default
  9538                           ;	Write Protection Block 3
  9539                           ;	WRT4 = 0x1, unprogrammed default
  9540                           ;	Write Protection Block 3
  9541                           ;	WRT5 = 0x1, unprogrammed default
  9542                           ;	Write Protection Block 3
  9543                           ;	WRT6 = 0x1, unprogrammed default
  9544                           ;	Write Protection Block 3
  9545                           ;	WRT7 = 0x1, unprogrammed default
  9546   300006                     	org	3145734
  9547   300006  FF                 	db	255
  9548                           
  9549                           ;Config register CONFIG4H @ 0x300007
  9550                           ;	unspecified, using default values
  9551                           ;	Configuration Register Write Protection bit
  9552                           ;	WRTC = 0x1, unprogrammed default
  9553                           ;	Boot Block Write Protection bit
  9554                           ;	WRTB = 0x1, unprogrammed default
  9555                           ;	Data EEPROM Write Protection bit
  9556                           ;	WRTD = 0x1, unprogrammed default
  9557                           ;	Scanner Enable bit
  9558                           ;	SCANE = 0x1, unprogrammed default
  9559                           ;	Low Voltage Programming Enable bit
  9560                           ;	LVP = 0x1, unprogrammed default
  9561   300007                     	org	3145735
  9562   300007  FF                 	db	255
  9563                           
  9564                           ;Config register CONFIG5L @ 0x300008
  9565                           ;	unspecified, using default values
  9566                           ;	UserNVM Program Memory Code Protection bit
  9567                           ;	CP = 0x1, unprogrammed default
  9568                           ;	DataNVM Memory Code Protection bit
  9569                           ;	CPD = 0x1, unprogrammed default
  9570   300008                     	org	3145736
  9571   300008  FF                 	db	255
  9572                           
  9573                           ;Config register CONFIG5H @ 0x300009
  9574                           ;	unspecified, using default values
  9575   300009                     	org	3145737
  9576   300009  FF                 	db	255
  9577                           
  9578                           ;Config register CONFIG6L @ 0x30000A
  9579                           ;	unspecified, using default values
  9580                           ;	Table Read Protection Block 0
  9581                           ;	EBTR0 = 0x1, unprogrammed default
  9582                           ;	Table Read Protection Block 1
  9583                           ;	EBTR1 = 0x1, unprogrammed default
  9584                           ;	Table Read Protection Block 2
  9585                           ;	EBTR2 = 0x1, unprogrammed default
  9586                           ;	Table Read Protection Block 3
  9587                           ;	EBTR3 = 0x1, unprogrammed default
  9588                           ;	Table Read Protection Block 4
  9589                           ;	EBTR4 = 0x1, unprogrammed default
  9590                           ;	Table Read Protection Block 5
  9591                           ;	EBTR5 = 0x1, unprogrammed default
  9592                           ;	Table Read Protection Block 6
  9593                           ;	EBTR6 = 0x1, unprogrammed default
  9594                           ;	Table Read Protection Block 7
  9595                           ;	EBTR7 = 0x1, unprogrammed default
  9596   30000A                     	org	3145738
  9597   30000A  FF                 	db	255
  9598                           
  9599                           ;Config register CONFIG6H @ 0x30000B
  9600                           ;	unspecified, using default values
  9601                           ;	Boot Block Table Read Protection bit
  9602                           ;	EBTRB = 0x1, unprogrammed default
  9603   30000B                     	org	3145739
  9604   30000B  FF                 	db	255
  9605                           tosu	equ	0xFFF
  9606                           tosh	equ	0xFFE
  9607                           tosl	equ	0xFFD
  9608                           stkptr	equ	0xFFC
  9609                           pclatu	equ	0xFFB
  9610                           pclath	equ	0xFFA
  9611                           pcl	equ	0xFF9
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           prodh	equ	0xFF4
  9617                           prodl	equ	0xFF3
  9618                           indf0	equ	0xFEF
  9619                           postinc0	equ	0xFEE
  9620                           postdec0	equ	0xFED
  9621                           preinc0	equ	0xFEC
  9622                           plusw0	equ	0xFEB
  9623                           fsr0h	equ	0xFEA
  9624                           fsr0l	equ	0xFE9
  9625                           wreg	equ	0xFE8
  9626                           indf1	equ	0xFE7
  9627                           postinc1	equ	0xFE6
  9628                           postdec1	equ	0xFE5
  9629                           preinc1	equ	0xFE4
  9630                           plusw1	equ	0xFE3
  9631                           fsr1h	equ	0xFE2
  9632                           fsr1l	equ	0xFE1
  9633                           bsr	equ	0xFE0
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           preinc2	equ	0xFDC
  9638                           plusw2	equ	0xFDB
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8

Data Sizes:
    Strings     267
    Constant    0
    Data        30
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160     95     159
    BANK1           256    256     256
    BANK2           256    171     201
    BANK3           256      0     120
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_14(CODE[10]), STR_13(CODE[36]), STR_12(CODE[10]), STR_11(CODE[36]), 
		 -> STR_10(CODE[25]), STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), 
		 -> STR_6(CODE[26]), STR_5(CODE[23]), STR_4(CODE[30]), STR_3(CODE[15]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_14(CODE[10]), STR_13(CODE[36]), STR_12(CODE[10]), STR_11(CODE[36]), 
		 -> STR_10(CODE[25]), STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), 
		 -> STR_6(CODE[26]), STR_5(CODE[23]), STR_4(CODE[30]), STR_3(CODE[15]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_14(CODE[10]), STR_13(CODE[36]), STR_12(CODE[10]), STR_11(CODE[36]), 
		 -> STR_10(CODE[25]), STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), 
		 -> STR_6(CODE[26]), STR_5(CODE[23]), STR_4(CODE[30]), STR_3(CODE[15]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2573$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_14(CODE[10]), STR_13(CODE[36]), STR_12(CODE[10]), STR_11(CODE[36]), 
		 -> STR_10(CODE[25]), STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), 
		 -> STR_6(CODE[26]), STR_5(CODE[23]), STR_4(CODE[30]), STR_3(CODE[15]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2524$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2524$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    card_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    card_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    motor_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    motor_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    motor_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK0[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _normalise_readings->_abs
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_motor_response
    _motor_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               391   391      0  181872
                                             85 COMRAM     2     2      0
                                             83 BANK0     12    12      0
                                             90 BANK1    166   166      0
                                              0 BANK2    171   171      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                            ___lwmod
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6   12221
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      113    90     23  121601
                                             60 BANK0     23     0     23
                                              0 BANK1     90    90      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    5028
                                             25 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      27    14     13   99074
                                             33 BANK0     27    14     13
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                  _sendStringSerial4
                            _sprintf
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14   10016
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2    1356
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    6217
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        8     4      4   39470
                                             30 COMRAM     8     4      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    9097
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    7657
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   14696
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    5137
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3741
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1192
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     961
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     918
                                              3 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     508
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    2572
                                             14 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      31
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      65
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     412
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   ___lwmod
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      78      11       46.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100     AB      C9       9       78.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     33A      64        0.0%
DATA                 0      0     33A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 17:49:27 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2928  
                       _color_read_Blue 2A18                                      l22 2CE4  
                                    l31 2A66                                      l25 2976  
                                    l34 2A16                                      l19 2BA8  
                                    l28 29C6                                      l92 2880  
                                    l86 1DA4                                      l79 2652  
                                    l97 24B2                                      bsr 000FE0  
                   ___wmul@multiplicand 0006                   card_response@stop_all 00B1  
                      _color_read_Clear 29C8                        _color_read_Green 2978  
                     ??_Interrupts_init 0004                                     l102 2404  
                                   l112 253E                                     l107 25CA  
                                   l142 2C58                                     l151 2D44  
                                   l160 2B34                                     l145 2C7E  
                                   l154 2D30                                     l242 0A5E  
                                   l139 2C02                                     l243 08D0  
                                   l148 2D3A                                     l404 1164  
                                   l244 08CE                                     l157 2D26  
                                   l333 2180                                     l245 08DE  
                                   l246 0A66                                     l351 1448  
                                   l407 1C38                                     l247 0A64  
                                   l249 0ABC                                     l282 2C2C  
                                   l346 193E                                     l362 26D2  
                                   l356 228C                                     l460 2CC4  
                                   l535 2C56                                     l391 0D52  
                                   l544 2CA4                                     l472 2D1A  
                                   l386 0732                                     l387 0752  
                                   l388 07D6                                     l469 2D06  
                                   l478 2BD8                                     l671 1F08  
                                   l658 1AC6     normalise_readings@normalised_values 0026  
                      ??_motor_response 008E                                     _abs 2B36  
                                   _pad 26D4                   __end_of_card_response 1C3A  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1042 27C0  
                                  l1035 27B8                                    ?_abs 0016  
                                  l1052 2824                                    l1045 281C  
                                  l1222 2B74                                    l1310 2D46  
                                  l1219 2B6C                                    l1307 2AF2  
                                  l1251 26F6                                    l1260 14D6  
                                  l1229 2926                                    l1262 14DE  
                                  l1255 274C                                    l1263 1524  
                                  l1281 2066                                    l4010 2778  
                                  l4002 274E                                    l1274 16C4  
                                  l4020 27AC                                    l4012 2786  
                                  l4004 2756                                    l4100 1F40  
                                  l4022 27B2                                    l4014 278C  
                                  l4006 2768                                    l4030 148E  
                                  l4110 1FA2                                    l4102 1F4E  
                                  l1287 28D4                                    l4016 27A2  
                                  l4008 2770                                    l4200 2398  
                                  l4040 14FC                                    l4032 14AE  
                                  l4024 144A                                    l4112 1FF8  
                                  l4104 1F52                                    l4120 203A  
                                  l5000 0C0A                                    l4130 2D1E  
                                  l4018 27AA                                    l4210 23EC  
                                  l4202 23B0                                    l4050 1534  
                                  l4042 150C                                    l4034 14CA  
                                  l4026 146A                                    l4106 1F62  
                                  l5010 0C64                                    l5002 0C16  
                                  l1299 2356                                    l4140 2D40  
                                  l4132 2D22                                    l4220 2568  
                                  l4212 2540                                    l4204 23BC  
                                  l4052 153A                                    l4060 162C  
                                  l4044 1518                                    l4036 14E6  
                                  l4028 147E                                    l4116 2028  
                                  l4108 1F82                                    l5100 0788  
                                  l5020 0D12                                    l5012 0C7C  
                                  l5004 0C24                                    l4150 2B30  
                                  l4142 2AF6                                    l4126 2D32  
                                  l4134 2D28                                    l4230 25AE  
                                  l4222 2580                                    l4214 2560  
                                  l4206 23C8                                    l5102 111E  
                                  l4310 0D4E                                    l4302 2BAA  
                                  l4070 1694                                    l4062 1646  
                                  l4054 15BC                                    l4046 1520  
                                  l4038 14F6                                    l5022 0D24  
                                  l5014 0C90                                    l5006 0C38  
                                  l4152 2B32                                    l4144 2AFA  
                                  l4128 2D36                                    l4136 2D2C  
                                  l4400 17DA                                    l4080 1CAA  
                                  l4224 258C                                    l4160 2842  
                                  l4208 23D0                                    l4320 0D86  
                                  l4232 2D06                                    l4304 2BAE  
                                  l4072 16A4                                    l4064 1664  
                                  l4056 15C2                                    l4048 152C  
                                  l4240 28AA                                    l5024 0D28  
                                  l5016 0C9E                                    l5008 0C50  
                                  l4146 2B02                                    l4138 2D3C  
                                  l4402 17F2                                    l4090 1D64  
                                  l4082 1CBE                                    l4226 2598  
                                  l4162 2850                                    l4170 2426  
                                  l4330 0F62                                    l4322 0D9E  
                                  l4234 2D16                                    l4306 2BBC  
                                  l4066 167E                                    l4058 15C8  
                                  l4242 28CA                                    l5026 0D32  
                                  l5018 0D04                                    l4092 2C58  
                                  l4148 2B0A                                    l4260 2A5E  
                                  l4252 2978                                    l4420 1876  
                                  l4404 17F6                                    l4084 1CC2  
                                  l4076 1C3A                                    l4228 25A6  
                                  l4164 285C                                    l4156 2826  
                                  l4180 245E                                    l4340 10F2  
                                  l4332 0F7E                                    l4324 0DF2  
                                  l4316 0D54                                    l4308 2BC0  
                                  l4068 168E                                    l4236 2882  
                                  l4500 006E                                    l4094 2C68  
                                  l4254 29BE                                    l4246 2928  
                                  l4430 18C6                                    l4422 1892  
                                  l4414 1846                                    l4406 1812  
                                  l4086 1D04                                    l4078 1C56  
                                  l4158 282A                                    l4166 2868  
                                  l4182 246A                                    l4190 2358  
                                  l4326 0E46                                    l4318 0D6C  
                                  l4270 24B4                                    l4238 288E  
                                  l4510 00DC                                    l4502 0086  
                                  l4350 2BDA                                    l4264 29C8  
                                  l4248 296E                                    l4432 18DA  
                                  l4424 18BE                                    l4416 185A  
                                  l4408 183E                                    l4088 1D20  
                                  l4184 2476                                    l4176 242E  
                                  l4168 2406                                    l4192 2378  
                                  l4336 0FFA                                    l4328 0EEA  
                                  l4344 110A                                    l4280 24F4  
                                  l4272 24D4                                    l4096 1F0A  
                                  l4600 04E6                                    l4520 0136  
                                  l4504 009A                                    l4440 1166  
                                  l4360 2BF0                                    l4352 2BE4  
                                  l4258 2A18                                    l4266 2A0E  
                                  l4434 18F2                                    l4418 1872  
                                  l4370 16CE                                    l4186 247E  
                                  l4178 2446                                    l4338 1076  
                                  l4282 2500                                    l4098 1F32  
                                  l4290 28D6                                    l4610 0588  
                                  l4522 014A                                    l4514 00F4  
                                  l4506 00B4                                    l4450 1438  
                                  l4354 2BEA                                    l4362 2CC8  
                                  l4700 2C04                                    l4436 18F6  
                                  l4372 171E                                    l4364 16C6  
                                  l4460 227A                                    l4452 2182  
                                  l4188 249A                                    l4284 250C  
                                  l3900 2B50                                    l4292 28E8  
                                  l4620 05FE                                    l4612 0594  
                                  l4604 04F8                                    l4540 0226  
                                  l4524 015E                                    l4516 0108  
                                  l4508 00C8                                    l4356 2BEC  
                                  l4438 1912                                    l4390 1792  
                                  l4382 1746                                    l4374 1722  
                                  l4462 227C                                    l4198 2380  
                                  l4286 251A                                    l4278 24DC  
                                  l3910 1976                                    l3902 1940  
                                  l4294 28F0                                    l4622 0612  
                                  l4614 05A2                                    l4606 0530  
                                  l4542 023A                                    l4534 0176  
                                  l4518 0122                                    l4446 116A  
                                  l4358 2BEE                                    l4710 2CBE  
                                  l4702 2CA6                                    ?_pad 0014  
                                  l4720 2C3A                                    l4392 17BE  
                                  l4384 175A                                    l4376 173E  
                                  l4480 26BE                                    l4464 2654  
                                  l4288 2522                                    l3920 19D2  
                                  l3912 1984                                    l3904 1944  
                                  l4296 28F8                                    l4640 06CC  
                                  l4624 063E                                    l4616 05BC  
                                  l4608 0544                                    l4632 067A  
                                  l4544 0254                                    l4536 018A  
                                  l4448 1436                                    l4712 2CC0  
                                  l4704 2CB0                                    l4730 2C54  
                                  l4722 2C44                                    l4386 1772  
                                  l4482 26C0                                    l4474 266C  
                                  l4466 2658                                    l4458 2186  
                                  l3930 1A3C                                    l3922 19DA  
                                  l3914 19A4                                    l3906 1952  
                                  l4298 2914                                    l4650 0734  
                                  l4642 06E6                                    l4634 069E  
                                  l4626 064A                                    l4618 05C2  
                                  l4562 0308                                    l4546 02D6  
                                  l4538 01A4                                    l4490 0004  
                                  l4714 2CC2                                    l4706 2CB2  
                                  l4724 2C46                                    l4716 2C2E  
                                  l4388 1776                                    l4484 26D0  
                                  l4476 269A                                    l4468 2668  
                                  l3940 1A86                                    l3932 1A5C  
                                  l3924 19EE                                    l3916 19A8  
                                  l3908 1972                                    l4652 074C  
                                  l4644 06EC                                    l4636 06AA  
                                  l4628 066E                                    l4580 0416  
                                  l4564 031C                                    l4548 02EA  
                                  l4492 0018                                    l4660 0772  
                                  l4740 2086                                    l4732 2068  
                                  l4708 2CB4                                    l4900 0818  
                                  l4726 2C50                                    l4718 2C32  
                                  l4398 17C6                                    l4478 26BA  
                                  l3942 1AA6                                    l3934 1A5E  
                                  l3926 19FC                                    l3918 19B4  
                                  l3950 1DB8                                    l4654 0754  
                                  l4646 070A                                    l4638 06BE  
                                  l4590 0462                                    l4566 0336  
                                  l4494 0032                                    l4750 20B0  
                                  l4742 208C                                    l4670 2B7A  
                                  l4910 0842                                    l4902 081E  
                                  l4728 2C52                                    l3936 1A70  
                                  l3928 1A0E                                    l3960 1E28  
                                  l3952 1DD8                                    l3880 22B2  
                                  l4656 076C                                    l4648 071E  
                                  l4592 04A2                                    l4568 034A  
                                  l4496 0046                                    l4488 0000  
                                  l4760 212A                                    l4752 20C4  
                                  l4744 20A8                                    l4672 2B84  
                                  l4680 25D4                                    l4920 0876  
                                  l4912 084E                                    l4904 0824  
                                  l3938 1A76                                    l3970 1EA0  
                                  l3962 1E30                                    l3954 1DDC  
                                  l3946 1DA6                                    l3882 22BC  
                                  l3890 2AB0                                    l4594 04BC  
                                  l4586 0420                                    l4578 0362  
                                  l4498 005A                                    l4770 1AEC  
                                  l4762 2146                                    l4754 20DC  
                                  l4738 2072                                    l4674 2B94  
                                  l4690 2638                                    l4682 25FE  
                                  l4930 08A8                                    l4922 087E  
                                  l4914 085A                                    l4906 0828  
                                  l4860 27DC                                    l3972 1EB2  
                                  l3964 1E44                                    l3956 1DEA  
                                  l3948 1DAA                                    l3884 22DA  
                                  l3876 228E                                    l3892 2ABC  
                                  l4596 04C2                                    l4588 0456  
                                  l4780 1BD6                                    l4772 1B42  
                                  l4764 2152                                    l4756 20E2  
                                  l4676 2B9E                                    l4668 2B76  
                                  l4692 263A                                    l4684 2622  
                                  l4932 08BA                                    l4924 0888  
                                  l4916 0864                                    l4908 083C  
                                  l4870 2816                                    l4862 27E4  
                                  l3966 1E52                                    l3974 1EB8  
                                  l3958 1E0A                                    l3886 2310  
                                  l3878 22A0                                    l3894 2ACE  
                                  l3990 2716                                    l3982 26D4  
                                  l4598 04DE                                    l4782 1BF0  
                                  l4774 1B4E                                    l4766 1AC8  
                                  l4758 20FE                                    l4694 2644  
                                  l4686 262C                                    l4678 25CC  
                                  l4950 0950                                    l4942 08E0  
                                  l4934 08C2                                    l4926 0892  
                                  l4918 086C                                    l4864 27F2  
                                  l4856 27C2                                    l3976 1EC8  
                                  l3968 1E80                                    l3896 2AD2  
                                  l3992 271A                                    l3984 26E2  
                                  l4784 1BFC                                    l4776 1BAA  
                                  l4768 1AC8                                    l4696 2646  
                                  l4688 262E                                    l4960 09E2  
                                  l4952 0964                                    l4944 08F8  
                                  l4936 08C4                                    l4928 089C  
                                  l4880 07E8                                    l4872 07D8  
                                  l4866 2808                                    l4858 27D4  
                                  l3978 1EE8                                    l3898 2B36  
                                  l3994 2738                                    l3986 26EE  
                                  l4786 1C34                                    l4778 1BC6  
                                  l4698 2650                                    l4970 0A74  
                                  l4962 0A02                                    l4954 0988  
                                  l4946 090C                                    l4890 07FA  
                                  l4882 07EC                                    l4874 07DC  
                                  l4868 2810                                    l3996 2C80  
                                  l3988 2702                                    l4980 0AF6  
                                  l4972 0AB0                                    l4964 0A3E  
                                  l4956 09A2                                    l4948 0938  
                                  l4892 0800                                    l4884 07F0  
                                  l4876 07E0                                    l3998 2C9C  
                                  l4990 0B74                                    l4982 0B1C  
                                  l4974 0ACA                                    l4966 0A4A  
                                  l4958 09C2                                    l4894 0804  
                                  l4886 07F2                                    l4878 07E4  
                                  l4992 0B86                                    l4984 0B40  
                                  l4976 0ADE                                    l4968 0A4E  
                                  l4896 0808                                    l4888 07F6  
                                  l4994 0BA2                                    l4978 0AF2  
                                  l4986 0B4A                                    l4898 0810  
                                  l4996 0BAE                                    l4988 0B56  
                                  l4998 0BD8                                    STR_1 FEF3  
                                  STR_2 FFCE                                    STR_3 FFE5  
                                  STR_4 FF49                                    STR_5 FFCE  
                                  STR_6 FF82                                    STR_7 FF9C  
                                  STR_8 FFB5                                    STR_9 FF67  
                                  u2000 1E28                                    u2001 1E24  
                                  u2010 1E52                                    u2011 1E4E  
                                  u2020 1E80                                    u2100 147C  
                          ?_LEDSon_init 0001                                    u2021 1E7C  
                                  u2030 1EC8                                    u2110 148E  
                                  u2031 1EC4                                    u2111 148A  
                                  u2200 1D20                                    u2040 26E2  
                                  u2120 14CA                                    u2201 1D1C  
                                  u2041 26DE                                    u2121 14C6  
                                  u2210 2C68                                    u2050 2738  
                                  u2130 14F6                                    u2211 2C64  
                                  u2051 2734                                    u2131 14F2  
                                  u2220 2C7E                                    u2060 2768  
                                  u2300 23EC                                    u2140 150C  
                                  u2221 2C7A                                    u2061 2764  
                                  u2301 23E8                                    u2141 1508  
                                  u2070 2786                                    u2310 25CA  
                                  u2150 1646                                    u2230 1F32  
                                  u2071 2782                                    u2311 25C6  
                                  u3007 24A4                                    u2151 1642  
                                  u2231 1F2E                                    u2400 1892  
                                  u2080 27A2                                    u2320 2D16  
                                  u2160 1664                                    u2240 1F82  
                          _BAUD4CONbits 000EE9                                    u2401 188E  
                                  u2081 279E                                    u3017 2848  
                                  u2321 2D12                                    u2161 1660  
                                  u2241 1F7E                                    u2410 1912  
                                  u2170 167E                                    u2090 147A  
                                  u2250 1FA2                                    u2330 28CA  
                                  u2411 190E                                    u3027 259E  
                                  u2171 167A                                    u2091 1474  
                                  u2251 1F9E                                    u2331 28C6  
                                  u2260 2B1E                                    u2340 253E  
                                  u2180 168E                                    u2500 070A  
                                  u2420 1448                                    u2261 2B16  
                                  u3037 1764                                    u2341 253A  
                                  u2181 168A                                    u2501 0706  
                                  u2421 1444                                    u2430 228C  
                                  u2190 1C56                                    u2350 2BD8  
                                  u2510 20A8                                    u3047 17E4  
                                  u2431 2288                                    u2191 1C52  
                                  u2351 2BD4                                    u2511 20A4  
                                  u2440 269A                                    u2280 2880  
                                  u2360 0D9A                                    u2520 20FE  
                                  u2600 0A74                                    u3057 1864  
                                  u2441 2696                                    u2281 287C  
                                  u2361 0D96                                    u2521 20FA  
                                  u2601 0A70                                    u2530 27D4  
                                  u2370 173E                                    u2450 26D0  
                                  u2290 249A                                    u2610 0ACA  
                                  _T2PR 000FBC                                    u2531 27D0  
                                  u3067 18E4                                    u2371 173A  
                                  u2451 26CC                                    u2291 2496  
                                  u2611 0AC6                                    u2540 27F2  
                                  u2380 1792                                    u1900 2B50  
                                  u2460 04DE                                    u2620 0AF2  
                                  u2541 27EE                                    u2381 178E  
                                  u1901 2B4C                                    u2461 04DA  
                                  u2621 0AEE                                    u2550 2808  
                                  u2278 2B20                                    u2390 1812  
                                  u1910 1952                                    u2470 04F4  
                                  u2630 0B1C                                    u2551 2804  
                                  u2391 180E                                    u1911 194E  
                                  u2471 04F0                                    u2631 0B18  
                                  u1920 1984                                    u2480 0530  
                                  u2640 0B2E                                    u1921 1980  
                                  u2481 052C                                    u2641 0B26  
                                  u2561 08A2                                    u1850 22A0  
                                  u2490 05FE                                    u1931 19AE  
                                  u1851 229C                                    u2491 05FA  
                                  u2707 0916                                    u2571 08B2  
                                  u1940 19D2                                    u1860 22B2  
                                  u2660 0B74                                    u2580 08DE  
                                  u1941 19CE                                    u1861 22AE  
                                  u2661 0B70                                    u2717 0942  
                                  u2581 08DA                                    u1950 19FC  
                                  u1870 22DA                                    u2670 0B86  
                                  u2590 0A5E                                    u1951 19F8  
                                  u1871 22D6                                    u2807 00A6  
                                  u2727 0C1C                                    u2671 0B82  
                                  u2591 0A5A                                    u1960 1A3C  
                                  u1880 2310                                    u2680 0D44  
                                  u1961 1A38                                    u1881 230C  
                                  u2817 0114                                    u2681 0D40  
                                  u2737 0C42                                    u1970 1A86  
                                  u1890 2AF2                                    u2658 0B30  
                                  u1971 1A82                                    u1891 2AEE  
                                  u2907 06D8                                    u2827 0196  
                                  u2747 0C6E                                    u1980 1DB8  
                                  u1981 1DB4                                    u2917 0740  
                                  u2837 01B0                                    u2757 0C96  
                                  u1990 1DEA                                    u1991 1DE6  
                                  u2927 0760                                    u2847 0246  
                                  u2767 0D0A                                    u2937 2512  
                                  u2857 0260                                    u2777 2B8A  
                                  u2697 08EA                                    u2947 0D5E  
                                  u2867 02F6                                    u2787 20D0  
                                  u2957 0D78                                    u2877 0328  
                                  u2797 0024                                    u2967 0F6C  
                                  u2887 04AE                                    u2977 23A2  
                                  u2897 05AE                                    u2987 23F6  
                                  u2997 2450              normalise_readings@red_read 001E  
                                  abs@a 0016                                    _dbuf 00DF  
                                  _main 07D8                                    _dtoa 144A  
                                  _prec 00D5                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2826                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
      clear_read_calibration@clear_read 0083                         card_response@mL 00A9  
                       card_response@mR 00AB                  __end_of_color_read_Red 2978  
                  _response_in_progress 00D9             normalise_readings@blue_read 0022  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 2358  
                       __end_of___aodiv 1AC8                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 1F0A  
                                 STR_10 FFB5                                   STR_11 FF25  
                                 STR_12 FFF4                                   ?_stop 0017  
                       __end_of___lwdiv 27C2                         __end_of___lwmod 2826  
                                 i1l541 004C                            vfpfcnvrt@fmt 0044  
                                 _TMR0H 000FD4                                   _TMR0L 000FD3  
                          main@red_read 00BB                 __end_of_sendCharSerial4 2D1C  
            __end_of_I2C_2_Master_Start 2D3C              __end_of_I2C_2_Master_Write 2D28  
                                 _flags 00DD                                   _fputc 228E  
                                 _fputs 2AB0                                   pad@fp 0014  
        determine_card@master_closeness 0004                 ??_make_master_closeness 000A  
                                 _width 00D3                                   _putch 2D46  
          card_response@ReturnHomeCards 00AF                                   main@i 01F4  
                                 dtoa@d 0021                                   dtoa@i 0040  
                                 dtoa@n 0037                                   dtoa@p 0033  
                                 dtoa@s 003F                                   dtoa@w 0035  
                   normalise_readings@i 0032                                   tablat 000FF5  
          card_response@ReturnHomeTimes 00AD                                   plusw1 000FE3  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2928          card_response@normalised_values 0100  
                          main@stop_all 00B9                        card_response@buf 009C  
               __end_of_color_read_Blue 2A68                   _I2C_2_Master_RepStart 2D3C  
                       ?_color_read_Red 0008                         __initialization 2A68  
                          __end_of_main 0D4C                            __end_of_dtoa 16C6  
                          __end_of_stop 2882                                  ??_main 0056  
                                ??_dtoa 0029                                  ??_stop 001B  
                         __activetblptr 000003                           main@blue_read 01F2  
                  main@clear_read_check 00B7               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0011                                  ?_fputc 0004  
                                ?_fputs 000D                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 00B5  
          collect_avg_readings@red_read 0011                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i1l3820 0026  
                                i1l3822 0036                                  i1l3824 0048  
                                _RG6PPS 000E88                __end_of_color_click_init 2BAA  
                                _TMR0IE 00714D                                  _TMR0IF 00719D  
                make_master_closeness@i 0028                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                                  _LowISR 0018  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0054  
                             ??___aodiv 0014                               ??___aomod 0014  
                                ___wmul 2C80                      _normalise_readings 1166  
                             ??___lwdiv 000E                               ??___lwmod 0008  
                                clear_0 2A8E                                  clear_1 2A9A  
                                isa$std 000001                                  pad@buf 0016  
                                dtoa@fp 001F                     ?_normalise_readings 001A  
                                fputc@c 0004                                  fputs@c 0011  
                                fputs@i 0012                                  fputs@s 000D  
                          __mediumconst FEF2                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 0D4C  
                                putch@c 0001                        __end_of_vfprintf 28D6  
                                stop@mL 0017                                  stop@mR 0019  
                     ??_initDCmotorsPWM 0004                               ??_sprintf 0056  
                     card_response@card 00A8                              __accesstop 0060  
               __end_of__initialization 2AA6                __end_of_color_read_Clear 2A18  
                       fullSpeedAhead@i 001C                __end_of_color_read_Green 29C8  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0028  
                         ___rparam_used 000001                        ?_color_read_Blue 0008  
                       _Interrupts_init 2C2E            __end_of_collect_avg_readings 1940  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 2068  
                      _reverseFullSpeed 24B4                            __pidataBANK2 2CE6  
            collect_avg_readings@i_1652 001B              collect_avg_readings@i_1653 001D  
            collect_avg_readings@i_1654 001F              collect_avg_readings@i_1655 0021  
                         __end_of_fputc 2358                           __end_of_fputs 2AF4  
                         __end_of_putch 2D48                          ?_home_response 001F  
                        main@clear_read 01F5                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK0 00BF                              __pbssBANK3 0300  
                               ?_LowISR 0001                       _color_writetoaddr 2CC6  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0084  
                      motor_response@mR 0086                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 0083  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 00BD                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                    motor_response@j_1697 0096  
               __end_of_Interrupts_init 2C58          collect_avg_readings@clear_read 000F  
                color_writetoaddr@value 0006                        ??_color_read_Red 000A  
         __end_of_make_master_closeness 228E          determine_card@predicted_colour 000C  
             __end_of_color_writetoaddr 2CE6                      _I2C_2_Master_Start 2D32  
                            _initUSART4 2CA6                      _I2C_2_Master_Write 2D1C  
                               __Hparam 0000                                 __Lparam 0000  
                     color_read_Red@tmp 000D  make_master_closeness@normalised_values 0006  
               sendStringSerial4@string 0005                       reverseFullSpeed@i 001C  
                               ___aodiv 1940                                 ___aomod 1DA6  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 274E  
                   ?_I2C_2_Master_Write 0001                                 ___lwmod 27C2  
                             ?_vfprintf 0060                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 2A68  
                               __ramtop 0E00                                 __ptext0 07D8  
                               __ptext1 2CA6                                 __ptext2 25CC  
                               __ptext3 2B76                                 __ptext4 2CC6  
                               __ptext5 2BDA                                 __ptext6 2068  
                               __ptext7 1AC8                                 __ptext8 1166  
                               __ptext9 0000                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 16C6  
                               main@buf 015A                                 _sprintf 28D6  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 2AA6          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                         _card_detected 00D7                       __end_of_vfpfcnvrt 2068  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004A  
                            main@F14700 0300                              main@F14702 02AB  
                        home_response@i 0025                              ??_vfprintf 0054  
                       _initDCmotorsPWM 25CC                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0016       normalise_readings@expected_values 0024  
                         _card_response 1AC8                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0015                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 000F  
              __end_of_reverseFullSpeed 2540                        fullSpeedAhead@mL 0017  
                      fullSpeedAhead@mR 0019                     main@expected_values 025A  
              color_writetoaddr@address 0007                 ??_I2C_2_Master_RepStart 0005  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0008                            _EUSART4RXbuf 00BF  
                          _EUSART4TXbuf 033C                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0008                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0004  
                            main@motorL 01F7                              main@motorR 02A2  
                    ??_color_read_Clear 000A                      ??_color_read_Green 000A  
                            _turnLeft45 2406                          __end_of_LowISR 005C  
                        _fullSpeedAhead 2540                             vfpfcnvrt@ap 0046  
                           vfpfcnvrt@cp 0052                             vfpfcnvrt@fp 0042  
                        __end_of___wmul 2CA6                         determine_card@i 000D  
                        ?_card_response 009C                     color_read_Clear@tmp 000D  
                   start_initialization 2A68                             __end_of_abs 2B76  
                           __end_of_pad 274E                           _TxBufWriteCnt 0059  
                         ??_LEDSon_init 0004          __end_of_clear_read_calibration 2182  
                   color_read_Green@tmp 000D                  motor_response@stop_all 008C  
                              ??_LowISR 0001                 __end_of_initDCmotorsPWM 2654  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 25CC  
                             _TimerFlag 00DB                                ??___wmul 0008  
                           __pdataBANK2 02AB                          _determine_card 2654  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                        ___aodiv@dividend 0004  
               clear_read_calibration@i 008B                          _motor_response 0000  
                   __end_of_LEDSon_init 2C2E                        ___lwdiv@dividend 000A  
                             _dtoa$2601 0031                             ?_turnLeft45 0017  
                       motor_response@i 009A                         motor_response@j 0094  
                       motor_response@k 0098                         ?_fullSpeedAhead 0017  
                         __pmediumconst FEF2                                ?___aodiv 0004  
                              ?___aomod 0004                       motor_response@buf 0081  
                      ___aodiv@quotient 0016                  __end_of_determine_card 26D4  
                              ?___lwdiv 000A                                ?___lwmod 0004  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0056                    I2C_2_Master_Read@tmp 0007  
                     _I2C_2_Master_Idle 2C58                       _I2C_2_Master_Init 2BDA  
                     _I2C_2_Master_Read 2AF4                       _I2C_2_Master_Stop 2D28  
                          _RxBufReadCnt 00DE            normalise_readings@clear_read 001C  
                   main@ReturnHomeCards 0200            normalise_readings@difference 0030  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0013  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                   main@ReturnHomeTimes 021E                  __end_of_motor_response 07D8  
                           turnLeft45@i 001D                                ?_sprintf 0066  
          clear_read_calibration@i_1641 008D                       _sendStringSerial4 2BAA  
                   ??_I2C_2_Master_Idle 0004                     ??_I2C_2_Master_Init 0004  
                   ??_I2C_2_Master_Read 0005                          ___wmul@product 0008  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0005  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                      ?_sendStringSerial4 0005  
                              _PIE4bits 000E2D                   _make_master_closeness 2182  
                              i1u184_20 0036                                i1u184_21 0032  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0004                make_master_closeness@buf 0004  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0007  
                              _SSP2STAT 000ED8                         ?_determine_card 0004  
                             _vfpfcnvrt 1F0A               __end_of_I2C_2_Master_Idle 2C80  
             __end_of_I2C_2_Master_Init 2C04               __end_of_I2C_2_Master_Read 2B36  
                     ___wmul@multiplier 0004               __end_of_I2C_2_Master_Stop 2D32  
                          setMotorPWM@m 0011             I2C_2_Master_Write@data_byte 0005  
          normalise_readings@green_read 0020                   __end_of_home_response 1166  
                     ??_color_read_Blue 000A                            _TxBufReadCnt 0058  
                       ?_motor_response 0081                       ?_reverseFullSpeed 0017  
                             copy_data0 2A7C               __end_of_sendStringSerial4 2BDA  
                           _LEDSon_init 2C04                      ??_reverseFullSpeed 001B  
         __end_of_I2C_2_Master_RepStart 2D46                      color_read_Blue@tmp 000D  
                   __end_of_setMotorPWM 1DA6                            ??_initUSART4 0004  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0008                      reverseFullSpeed@mL 0017  
                    reverseFullSpeed@mR 0019                       home_response@card 0026  
                            ?_vfpfcnvrt 0042                         ___aodiv@divisor 000C  
                       ___aodiv@counter 0014                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                            _T0CON0bits 000FD5                              _T0CON1bits 000FD6  
                       ___lwdiv@divisor 000C                      __end_of_initUSART4 2CC6  
                       ___lwdiv@counter 000E                                __ptext10 28D6  
                              __ptext11 2882                                __ptext20 1940  
                              __ptext12 1F0A                                __ptext21 2BAA  
                              __ptext13 144A                                __ptext30 2C80  
                              __ptext22 2D04                                __ptext14 26D4  
                              __ptext31 274E                                __ptext23 24B4  
                              __ptext15 2AB0                                __ptext40 2D28  
                              __ptext32 2182                                __ptext24 0D4C  
                              __ptext16 228E                                __ptext41 2D32  
                              __ptext33 2654                                __ptext25 2358  
                              __ptext17 2D46                                __ptext42 2D3C  
                              __ptext34 16C6                                __ptext26 2406  
                              __ptext18 2B36                                __ptext43 2AF4  
                              __ptext35 2928                                __ptext27 2826  
                              __ptext19 1DA6                                __ptext44 2C58  
                              __ptext36 2978                                __ptext28 2540  
                              __ptext45 27C2                                __ptext37 29C8  
                              __ptext29 1C3A                                __ptext46 2C04  
                              __ptext38 2A18                                __ptext47 2C2E  
                              __ptext39 2D1C           motor_response@ReturnHomeCards 008A  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
         motor_response@ReturnHomeTimes 0088                  ?_make_master_closeness 0004  
                              isa$xinst 000000                 card_response@clear_read 009E  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2882                           ??_turnRight45 001B  
                              main@card 00B4                        ___aomod@dividend 0004  
                 collect_avg_readings@i 0019                              _INTCONbits 000FF2  
                           _setMotorPWM 1C3A           collect_avg_readings@blue_read 0015  
                         turnRight45@mL 0017                           turnRight45@mR 0019  
                              intlevel1 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 144A            card_response@expected_values 00A6  
                      ___lwmod@dividend 0004                        ??_fullSpeedAhead 001B  
               card_response@green_read 00A2                            ??_turnLeft45 001B  
        determine_card@current_smallest 000A                         ___aomod@divisor 000C  
                           ??_vfpfcnvrt 0048                         ___aomod@counter 0014  
                card_response@blue_read 00A4                        _color_click_init 2B76  
                       home_response@mL 001F                         home_response@mR 0021  
         card_response@master_closeness 0148                                sprintf@f 0076  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                         ___lwmod@divisor 0006  
                   __end_of_turnRight45 2406                         ___lwmod@counter 0008  
                    __end_of_turnLeft45 24B4                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0015                         _sendCharSerial4 2D04  
                 card_response@red_read 00A0                            ___aomod@sign 0015  
                      ??_determine_card 0006                           main@CardCount 01F0  
                          main@PWMcycle 00B3  
