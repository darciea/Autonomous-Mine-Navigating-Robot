

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 11:59:00 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.35
    61                           ; Generated 05/05/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F67K40 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     _TX4REG	set	3812
    96   000000                     _RC4STAbits	set	3815
    97   000000                     _SP4BRGH	set	3814
    98   000000                     _LATHbits	set	3968
    99   000000                     _LATGbits	set	3967
   100   000000                     _TRISAbits	set	3969
   101   000000                     _TRISFbits	set	3974
   102   000000                     _TRISDbits	set	3972
   103   000000                     _TRISGbits	set	3975
   104   000000                     _SSP2CON2bits	set	3802
   105   000000                     _RX4PPS	set	3605
   106   000000                     _SSP2CLKPPS	set	3612
   107   000000                     _SSP2DATPPS	set	3613
   108   000000                     _RC7PPS	set	3689
   109   000000                     _RE2PPS	set	3700
   110   000000                     _TRISCbits	set	3971
   111   000000                     _TRISEbits	set	3973
   112   000000                     _TRISHbits	set	3976
   113   000000                     _PORTFbits	set	3982
   114   000000                     _T2PR	set	4028
   115   000000                     _T2CONbits	set	4029
   116   000000                     _CCPR2H	set	4006
   117   000000                     _CCPR1H	set	4010
   118   000000                     _RE4PPS	set	3702
   119   000000                     _RG6PPS	set	3720
   120   000000                     _RD5PPS	set	3695
   121   000000                     _ANSELDbits	set	3751
   122   000000                     _SSP2ADD	set	3798
   123   000000                     _SSP2CON1bits	set	3801
   124   000000                     _CCPR4H	set	3873
   125   000000                     _CCPR3H	set	3877
   126   000000                     _T2CLKCONbits	set	4031
   127   000000                     _T2HLTbits	set	4030
   128   000000                     _CCP1CONbits	set	4011
   129   000000                     _CCPTMRS0bits	set	4013
   130   000000                     _CCP2CONbits	set	4007
   131   000000                     _LATAbits	set	3961
   132   000000                     _LATDbits	set	3964
   133   000000                     _CCP3CONbits	set	3878
   134   000000                     _CCP4CONbits	set	3874
   135   000000                     _RC4REG	set	3811
   136   000000                     _SP4BRGL	set	3813
   137   000000                     _TX4STAbits	set	3816
   138   000000                     _BAUD4CONbits	set	3817
   139   000000                     _SSP2CON2	set	3802
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _ANSELFbits	set	3764
   142   000000                     _SSP2BUF	set	3797
   143   000000                     _PIE4bits	set	3629
   144   000000                     _PIR4bits	set	3639
   145   000000                     _RC0PPS	set	3682
   146   000000                     _RD6PPS	set	3696
   147   000000                     _LATFbits	set	3966
   148                           
   149                           	psect	smallconst
   150   000E00                     __psmallconst:
   151                           	callstack 0
   152   000E00  00                 	db	0
   153   000E01                     STR_2:
   154   000E01  4D                 	db	77	;'M'
   155   000E02  43                 	db	67	;'C'
   156   000E03  20                 	db	32
   157   000E04  41                 	db	65	;'A'
   158   000E05  76                 	db	118	;'v'
   159   000E06  67                 	db	103	;'g'
   160   000E07  3A                 	db	58	;':'
   161   000E08  20                 	db	32
   162   000E09  6E                 	db	110	;'n'
   163   000E0A  6F                 	db	111	;'o'
   164   000E0B  72                 	db	114	;'r'
   165   000E0C  6D                 	db	109	;'m'
   166   000E0D  52                 	db	82	;'R'
   167   000E0E  45                 	db	69	;'E'
   168   000E0F  44                 	db	68	;'D'
   169   000E10  20                 	db	32
   170   000E11  25                 	db	37
   171   000E12  64                 	db	100	;'d'
   172   000E13  2C                 	db	44
   173   000E14  20                 	db	32
   174   000E15  6E                 	db	110	;'n'
   175   000E16  6F                 	db	111	;'o'
   176   000E17  72                 	db	114	;'r'
   177   000E18  6D                 	db	109	;'m'
   178   000E19  47                 	db	71	;'G'
   179   000E1A  52                 	db	82	;'R'
   180   000E1B  45                 	db	69	;'E'
   181   000E1C  45                 	db	69	;'E'
   182   000E1D  4E                 	db	78	;'N'
   183   000E1E  20                 	db	32
   184   000E1F  25                 	db	37
   185   000E20  64                 	db	100	;'d'
   186   000E21  2C                 	db	44
   187   000E22  20                 	db	32
   188   000E23  6E                 	db	110	;'n'
   189   000E24  6F                 	db	111	;'o'
   190   000E25  72                 	db	114	;'r'
   191   000E26  6D                 	db	109	;'m'
   192   000E27  42                 	db	66	;'B'
   193   000E28  4C                 	db	76	;'L'
   194   000E29  55                 	db	85	;'U'
   195   000E2A  45                 	db	69	;'E'
   196   000E2B  20                 	db	32
   197   000E2C  25                 	db	37
   198   000E2D  64                 	db	100	;'d'
   199   000E2E  2C                 	db	44
   200   000E2F  20                 	db	32
   201   000E30  6D                 	db	109	;'m'
   202   000E31  61                 	db	97	;'a'
   203   000E32  73                 	db	115	;'s'
   204   000E33  74                 	db	116	;'t'
   205   000E34  65                 	db	101	;'e'
   206   000E35  72                 	db	114	;'r'
   207   000E36  20                 	db	32
   208   000E37  25                 	db	37
   209   000E38  64                 	db	100	;'d'
   210   000E39  20                 	db	32
   211   000E3A  0A                 	db	10
   212   000E3B  00                 	db	0
   213   000E3C                     STR_1:
   214   000E3C  0A                 	db	10
   215   000E3D  20                 	db	32
   216   000E3E  45                 	db	69	;'E'
   217   000E3F  58                 	db	88	;'X'
   218   000E40  50                 	db	80	;'P'
   219   000E41  45                 	db	69	;'E'
   220   000E42  43                 	db	67	;'C'
   221   000E43  54                 	db	84	;'T'
   222   000E44  45                 	db	69	;'E'
   223   000E45  44                 	db	68	;'D'
   224   000E46  3A                 	db	58	;':'
   225   000E47  20                 	db	32
   226   000E48  52                 	db	82	;'R'
   227   000E49  20                 	db	32
   228   000E4A  25                 	db	37
   229   000E4B  64                 	db	100	;'d'
   230   000E4C  2C                 	db	44
   231   000E4D  20                 	db	32
   232   000E4E  47                 	db	71	;'G'
   233   000E4F  20                 	db	32
   234   000E50  25                 	db	37
   235   000E51  64                 	db	100	;'d'
   236   000E52  2C                 	db	44
   237   000E53  20                 	db	32
   238   000E54  42                 	db	66	;'B'
   239   000E55  20                 	db	32
   240   000E56  25                 	db	37
   241   000E57  64                 	db	100	;'d'
   242   000E58  20                 	db	32
   243   000E59  20                 	db	32
   244   000E5A  43                 	db	67	;'C'
   245   000E5B  41                 	db	65	;'A'
   246   000E5C  52                 	db	82	;'R'
   247   000E5D  44                 	db	68	;'D'
   248   000E5E  3A                 	db	58	;':'
   249   000E5F  20                 	db	32
   250   000E60  25                 	db	37
   251   000E61  64                 	db	100	;'d'
   252   000E62  20                 	db	32
   253   000E63  0A                 	db	10
   254   000E64  00                 	db	0
   255   000E65                     STR_3:
   256   000E65  0A                 	db	10
   257   000E66  20                 	db	32
   258   000E67  41                 	db	65	;'A'
   259   000E68  56                 	db	86	;'V'
   260   000E69  47                 	db	71	;'G'
   261   000E6A  3A                 	db	58	;':'
   262   000E6B  20                 	db	32
   263   000E6C  52                 	db	82	;'R'
   264   000E6D  20                 	db	32
   265   000E6E  25                 	db	37
   266   000E6F  64                 	db	100	;'d'
   267   000E70  2C                 	db	44
   268   000E71  20                 	db	32
   269   000E72  47                 	db	71	;'G'
   270   000E73  20                 	db	32
   271   000E74  25                 	db	37
   272   000E75  64                 	db	100	;'d'
   273   000E76  2C                 	db	44
   274   000E77  20                 	db	32
   275   000E78  42                 	db	66	;'B'
   276   000E79  20                 	db	32
   277   000E7A  25                 	db	37
   278   000E7B  64                 	db	100	;'d'
   279   000E7C  20                 	db	32
   280   000E7D  0A                 	db	10
   281   000E7E  00                 	db	0
   282   000E7F                     STR_4:
   283   000E7F  43                 	db	67	;'C'
   284   000E80  41                 	db	65	;'A'
   285   000E81  52                 	db	82	;'R'
   286   000E82  44                 	db	68	;'D'
   287   000E83  20                 	db	32
   288   000E84  25                 	db	37
   289   000E85  64                 	db	100	;'d'
   290   000E86  20                 	db	32
   291   000E87  0A                 	db	10
   292   000E88  00                 	db	0
   293   000E89  00                 	db	0	; dummy byte at the end
   294   000000                     
   295                           ; #config settings
   296                           
   297                           	psect	cinit
   298   002A44                     __pcinit:
   299                           	callstack 0
   300   002A44                     start_initialization:
   301                           	callstack 0
   302   002A44                     __initialization:
   303                           	callstack 0
   304                           
   305                           ; Clear objects allocated to BANK2 (92 bytes)
   306   002A44  EE02  F000         	lfsr	0,__pbssBANK2
   307   002A48  0E5C               	movlw	92
   308   002A4A                     clear_0:
   309   002A4A  6AEE               	clrf	postinc0,c
   310   002A4C  06E8               	decf	wreg,f,c
   311   002A4E  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to BANK1 (20 bytes)
   314   002A50  EE01  F0E6         	lfsr	0,__pbssBANK1
   315   002A54  0E14               	movlw	20
   316   002A56                     clear_1:
   317   002A56  6AEE               	clrf	postinc0,c
   318   002A58  06E8               	decf	wreg,f,c
   319   002A5A  E1FD               	bnz	clear_1
   320                           
   321                           ; Clear objects allocated to BANK0 (9 bytes)
   322   002A5C  EE00  F0E6         	lfsr	0,__pbssBANK0
   323   002A60  0E09               	movlw	9
   324   002A62                     clear_2:
   325   002A62  6AEE               	clrf	postinc0,c
   326   002A64  06E8               	decf	wreg,f,c
   327   002A66  E1FD               	bnz	clear_2
   328   002A68                     end_of_initialization:
   329                           	callstack 0
   330   002A68                     __end_of__initialization:
   331                           	callstack 0
   332   002A68  0100               	movlb	0
   333   002A6A  EF0F  F00A         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssBANK0
   336   0000E6                     __pbssBANK0:
   337                           	callstack 0
   338   0000E6                     _width:
   339                           	callstack 0
   340   0000E6                     	ds	2
   341   0000E8                     _prec:
   342                           	callstack 0
   343   0000E8                     	ds	2
   344   0000EA                     _flags:
   345                           	callstack 0
   346   0000EA                     	ds	1
   347   0000EB                     _TxBufReadCnt:
   348                           	callstack 0
   349   0000EB                     	ds	1
   350   0000EC                     _TxBufWriteCnt:
   351                           	callstack 0
   352   0000EC                     	ds	1
   353   0000ED                     _RxBufReadCnt:
   354                           	callstack 0
   355   0000ED                     	ds	1
   356   0000EE                     _RxBufWriteCnt:
   357                           	callstack 0
   358   0000EE                     	ds	1
   359                           
   360                           	psect	bssBANK1
   361   0001E6                     __pbssBANK1:
   362                           	callstack 0
   363   0001E6                     _EUSART4RXbuf:
   364                           	callstack 0
   365   0001E6                     	ds	20
   366                           
   367                           	psect	bssBANK2
   368   000200                     __pbssBANK2:
   369                           	callstack 0
   370   000200                     _EUSART4TXbuf:
   371                           	callstack 0
   372   000200                     	ds	60
   373   00023C                     _dbuf:
   374                           	callstack 0
   375   00023C                     	ds	32
   376                           
   377                           	psect	cstackBANK1
   378   000100                     __pcstackBANK1:
   379                           	callstack 0
   380   000100                     main@buf:
   381                           	callstack 0
   382                           
   383                           ; 150 bytes @ 0x0
   384   000100                     	ds	150
   385   000196                     main@expected_values:
   386                           	callstack 0
   387                           
   388                           ; 54 bytes @ 0x96
   389   000196                     	ds	54
   390   0001CC                     main@PWMcycle:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0xCC
   394   0001CC                     	ds	1
   395   0001CD                     main@red_read:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0xCD
   399   0001CD                     	ds	2
   400   0001CF                     main@green_read:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0xCF
   404   0001CF                     	ds	2
   405   0001D1                     main@blue_read:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0xD1
   409   0001D1                     	ds	2
   410   0001D3                     main@i:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0xD3
   414   0001D3                     	ds	1
   415   0001D4                     main@motorL:
   416                           	callstack 0
   417                           
   418                           ; 9 bytes @ 0xD4
   419   0001D4                     	ds	9
   420   0001DD                     main@motorR:
   421                           	callstack 0
   422                           
   423                           ; 9 bytes @ 0xDD
   424   0001DD                     	ds	9
   425                           
   426                           	psect	cstackBANK0
   427   000060                     __pcstackBANK0:
   428                           	callstack 0
   429   000060                     ?_sprintf:
   430                           	callstack 0
   431   000060                     sprintf@s:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x0
   435   000060                     	ds	2
   436   000062                     sprintf@fmt:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x2
   440   000062                     	ds	10
   441   00006C                     sprintf@ap:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0xC
   445   00006C                     	ds	2
   446   00006E                     sprintf@f:
   447                           	callstack 0
   448                           
   449                           ; 11 bytes @ 0xE
   450   00006E                     	ds	11
   451   000079                     ??_make_master_closeness:
   452                           
   453                           ; 1 bytes @ 0x19
   454   000079                     	ds	20
   455   00008D                     card_response@buf:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x2D
   459   00008D                     	ds	2
   460   00008F                     card_response@red_read:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x2F
   464   00008F                     	ds	2
   465   000091                     card_response@green_read:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x31
   469   000091                     	ds	2
   470   000093                     card_response@blue_read:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x33
   474   000093                     	ds	2
   475   000095                     card_response@expected_values:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x35
   479   000095                     	ds	2
   480   000097                     card_response@mL:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x37
   484   000097                     	ds	2
   485   000099                     card_response@mR:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x39
   489   000099                     	ds	2
   490   00009B                     card_response@normalised_values:
   491                           	callstack 0
   492                           
   493                           ; 54 bytes @ 0x3B
   494   00009B                     	ds	54
   495   0000D1                     card_response@master_closeness:
   496                           	callstack 0
   497                           
   498                           ; 18 bytes @ 0x71
   499   0000D1                     	ds	18
   500   0000E3                     card_response@card:
   501                           	callstack 0
   502                           
   503                           ; 1 bytes @ 0x83
   504   0000E3                     	ds	1
   505   0000E4                     ??_main:
   506                           
   507                           ; 1 bytes @ 0x84
   508   0000E4                     	ds	2
   509                           
   510                           	psect	cstackCOMRAM
   511   000001                     __pcstackCOMRAM:
   512                           	callstack 0
   513   000001                     ??_I2C_2_Master_Idle:
   514   000001                     ?___wmul:
   515                           	callstack 0
   516   000001                     ?___aodiv:
   517                           	callstack 0
   518   000001                     ?___aomod:
   519                           	callstack 0
   520   000001                     sendCharSerial4@charToSend:
   521                           	callstack 0
   522   000001                     determine_card@master_closeness:
   523                           	callstack 0
   524   000001                     ___wmul@multiplier:
   525                           	callstack 0
   526   000001                     fputc@c:
   527                           	callstack 0
   528   000001                     ___aodiv@dividend:
   529                           	callstack 0
   530   000001                     ___aomod@dividend:
   531                           	callstack 0
   532                           
   533                           ; 8 bytes @ 0x0
   534   000001                     	ds	1
   535   000002                     ??_I2C_2_Master_Read:
   536   000002                     I2C_2_Master_Write@data_byte:
   537                           	callstack 0
   538   000002                     sendStringSerial4@string:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x1
   542   000002                     	ds	1
   543   000003                     ??_determine_card:
   544   000003                     color_writetoaddr@value:
   545                           	callstack 0
   546   000003                     I2C_2_Master_Read@ack:
   547                           	callstack 0
   548   000003                     ___wmul@multiplicand:
   549                           	callstack 0
   550   000003                     fputc@fp:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x2
   554   000003                     	ds	1
   555   000004                     color_writetoaddr@address:
   556                           	callstack 0
   557   000004                     I2C_2_Master_Read@tmp:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x3
   561   000004                     	ds	1
   562   000005                     ??_fputc:
   563   000005                     ??_color_click_init:
   564   000005                     ?_color_read_Red:
   565                           	callstack 0
   566   000005                     ?_color_read_Green:
   567                           	callstack 0
   568   000005                     ?_color_read_Blue:
   569                           	callstack 0
   570   000005                     ___wmul@product:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x4
   574   000005                     	ds	2
   575   000007                     ??_color_read_Red:
   576   000007                     ??_color_read_Green:
   577   000007                     ??_color_read_Blue:
   578   000007                     ?___lwdiv:
   579                           	callstack 0
   580   000007                     determine_card@current_smallest:
   581                           	callstack 0
   582   000007                     ___lwdiv@dividend:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x6
   586   000007                     	ds	2
   587   000009                     determine_card@predicted_colour:
   588                           	callstack 0
   589   000009                     ___lwdiv@divisor:
   590                           	callstack 0
   591   000009                     ___aodiv@divisor:
   592                           	callstack 0
   593   000009                     ___aomod@divisor:
   594                           	callstack 0
   595                           
   596                           ; 8 bytes @ 0x8
   597   000009                     	ds	1
   598   00000A                     determine_card@i:
   599                           	callstack 0
   600   00000A                     color_read_Red@tmp:
   601                           	callstack 0
   602   00000A                     color_read_Green@tmp:
   603                           	callstack 0
   604   00000A                     color_read_Blue@tmp:
   605                           	callstack 0
   606   00000A                     fputs@s:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x9
   610   00000A                     	ds	1
   611   00000B                     ___lwdiv@quotient:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0xA
   615   00000B                     	ds	1
   616   00000C                     fputs@fp:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0xB
   620   00000C                     	ds	1
   621   00000D                     ___lwdiv@counter:
   622                           	callstack 0
   623                           
   624                           ; 1 bytes @ 0xC
   625   00000D                     	ds	1
   626   00000E                     fputs@c:
   627                           	callstack 0
   628   00000E                     setMotorPWM@m:
   629                           	callstack 0
   630   00000E                     collect_avg_readings@red_read:
   631                           	callstack 0
   632                           
   633                           ; 2 bytes @ 0xD
   634   00000E                     	ds	1
   635   00000F                     fputs@i:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0xE
   639   00000F                     	ds	1
   640   000010                     ??_setMotorPWM:
   641   000010                     collect_avg_readings@green_read:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0xF
   645   000010                     	ds	1
   646   000011                     ___aodiv@counter:
   647                           	callstack 0
   648   000011                     ___aomod@counter:
   649                           	callstack 0
   650   000011                     pad@fp:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x10
   654   000011                     	ds	1
   655   000012                     setMotorPWM@posDuty:
   656                           	callstack 0
   657   000012                     ___aodiv@sign:
   658                           	callstack 0
   659   000012                     ___aomod@sign:
   660                           	callstack 0
   661   000012                     collect_avg_readings@blue_read:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x11
   665   000012                     	ds	1
   666   000013                     ?_abs:
   667                           	callstack 0
   668   000013                     setMotorPWM@negDuty:
   669                           	callstack 0
   670   000013                     abs@a:
   671                           	callstack 0
   672   000013                     pad@buf:
   673                           	callstack 0
   674   000013                     ___aodiv@quotient:
   675                           	callstack 0
   676                           
   677                           ; 8 bytes @ 0x12
   678   000013                     	ds	1
   679   000014                     ??_collect_avg_readings:
   680   000014                     stop@mL:
   681                           	callstack 0
   682   000014                     turnLeft45@mL:
   683                           	callstack 0
   684   000014                     turnRight45@mL:
   685                           	callstack 0
   686   000014                     reverseFullSpeed@mL:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x13
   690   000014                     	ds	1
   691   000015                     ??_abs:
   692   000015                     pad@p:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x14
   696   000015                     	ds	1
   697   000016                     stop@mR:
   698                           	callstack 0
   699   000016                     turnLeft45@mR:
   700                           	callstack 0
   701   000016                     turnRight45@mR:
   702                           	callstack 0
   703   000016                     reverseFullSpeed@mR:
   704                           	callstack 0
   705   000016                     collect_avg_readings@i:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x15
   709   000016                     	ds	1
   710   000017                     ??_pad:
   711   000017                     normalise_readings@buf:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x16
   715   000017                     	ds	1
   716   000018                     ??_stop:
   717   000018                     ??_turnLeft45:
   718   000018                     ??_turnRight45:
   719   000018                     ??_reverseFullSpeed:
   720   000018                     collect_avg_readings@i_1538:
   721                           	callstack 0
   722   000018                     pad@i:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x17
   726   000018                     	ds	1
   727   000019                     reverseFullSpeed@i:
   728                           	callstack 0
   729   000019                     normalise_readings@red_read:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x18
   733   000019                     	ds	1
   734   00001A                     turnLeft45@i:
   735                           	callstack 0
   736   00001A                     turnRight45@i:
   737                           	callstack 0
   738   00001A                     collect_avg_readings@i_1539:
   739                           	callstack 0
   740   00001A                     pad@w:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x19
   744   00001A                     	ds	1
   745   00001B                     normalise_readings@green_read:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x1A
   749   00001B                     	ds	1
   750   00001C                     collect_avg_readings@i_1540:
   751                           	callstack 0
   752   00001C                     motor_response@mL:
   753                           	callstack 0
   754   00001C                     dtoa@fp:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x1B
   758   00001C                     	ds	1
   759   00001D                     normalise_readings@blue_read:
   760                           	callstack 0
   761                           
   762                           ; 2 bytes @ 0x1C
   763   00001D                     	ds	1
   764   00001E                     motor_response@mR:
   765                           	callstack 0
   766   00001E                     dtoa@d:
   767                           	callstack 0
   768                           
   769                           ; 8 bytes @ 0x1D
   770   00001E                     	ds	1
   771   00001F                     normalise_readings@expected_values:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x1E
   775   00001F                     	ds	1
   776   000020                     ??_motor_response:
   777                           
   778                           ; 1 bytes @ 0x1F
   779   000020                     	ds	1
   780   000021                     normalise_readings@normalised_values:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x20
   784   000021                     	ds	1
   785   000022                     motor_response@card:
   786                           	callstack 0
   787                           
   788                           ; 1 bytes @ 0x21
   789   000022                     	ds	1
   790   000023                     ??_normalise_readings:
   791                           
   792                           ; 1 bytes @ 0x22
   793   000023                     	ds	3
   794   000026                     ??_dtoa:
   795                           
   796                           ; 1 bytes @ 0x25
   797   000026                     	ds	3
   798   000029                     normalise_readings@difference:
   799                           	callstack 0
   800                           
   801                           ; 2 bytes @ 0x28
   802   000029                     	ds	2
   803   00002B                     normalise_readings@i:
   804                           	callstack 0
   805                           
   806                           ; 1 bytes @ 0x2A
   807   00002B                     	ds	3
   808   00002E                     _dtoa$2284:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x2D
   812   00002E                     	ds	2
   813   000030                     dtoa@p:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x2F
   817   000030                     	ds	2
   818   000032                     dtoa@w:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x31
   822   000032                     	ds	2
   823   000034                     dtoa@n:
   824                           	callstack 0
   825                           
   826                           ; 8 bytes @ 0x33
   827   000034                     	ds	8
   828   00003C                     dtoa@i:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x3B
   832   00003C                     	ds	2
   833   00003E                     dtoa@s:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x3D
   837   00003E                     	ds	1
   838   00003F                     vfpfcnvrt@fp:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x3E
   842   00003F                     	ds	2
   843   000041                     vfpfcnvrt@fmt:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0x40
   847   000041                     	ds	2
   848   000043                     vfpfcnvrt@ap:
   849                           	callstack 0
   850                           
   851                           ; 2 bytes @ 0x42
   852   000043                     	ds	2
   853   000045                     ??_vfpfcnvrt:
   854                           
   855                           ; 1 bytes @ 0x44
   856   000045                     	ds	2
   857   000047                     vfpfcnvrt@convarg:
   858                           	callstack 0
   859                           
   860                           ; 8 bytes @ 0x46
   861   000047                     	ds	8
   862   00004F                     vfpfcnvrt@cp:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0x4E
   866   00004F                     	ds	2
   867   000051                     ?_vfprintf:
   868                           	callstack 0
   869   000051                     vfprintf@fp:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x50
   873   000051                     	ds	2
   874   000053                     vfprintf@fmt:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x52
   878   000053                     	ds	2
   879   000055                     vfprintf@ap:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x54
   883   000055                     	ds	2
   884   000057                     vfprintf@cfmt:
   885                           	callstack 0
   886                           
   887                           ; 2 bytes @ 0x56
   888   000057                     	ds	2
   889   000059                     make_master_closeness@buf:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x58
   893   000059                     	ds	2
   894   00005B                     make_master_closeness@normalised_values:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x5A
   898   00005B                     	ds	2
   899   00005D                     make_master_closeness@master_closeness:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x5C
   903   00005D                     	ds	2
   904   00005F                     make_master_closeness@i:
   905                           	callstack 0
   906                           
   907                           ; 1 bytes @ 0x5E
   908   00005F                     	ds	1
   909   000060                     
   910                           ; 1 bytes @ 0x5F
   911 ;;
   912 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   913 ;;
   914 ;; *************** function _main *****************
   915 ;; Defined at:
   916 ;;		line 20 in file "main.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  i               1  211[BANK1 ] enum E14575
   921 ;;  buf           150    0[BANK1 ] unsigned char [150]
   922 ;;  expected_val   54  150[BANK1 ] unsigned int [9][3]
   923 ;;  motorR          9  221[BANK1 ] struct DC_motor
   924 ;;  motorL          9  212[BANK1 ] struct DC_motor
   925 ;;  blue_read       2  209[BANK1 ] unsigned int 
   926 ;;  green_read      2  207[BANK1 ] unsigned int 
   927 ;;  red_read        2  205[BANK1 ] unsigned int 
   928 ;;  PWMcycle        1  204[BANK1 ] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   939 ;;      Locals:         0       0     230       0       0       0       0       0       0       0       0       0       
      +0       0       0
   940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   941 ;;      Totals:         0       2     230       0       0       0       0       0       0       0       0       0       
      +0       0       0
   942 ;;Total ram usage:      232 bytes
   943 ;; Hardware stack levels required when called: 10
   944 ;; This function calls:
   945 ;;		_I2C_2_Master_Init
   946 ;;		_LEDSon_init
   947 ;;		_card_response
   948 ;;		_collect_avg_readings
   949 ;;		_color_click_init
   950 ;;		_initDCmotorsPWM
   951 ;;		_initUSART4
   952 ;;		_sendStringSerial4
   953 ;;		_setMotorPWM
   954 ;;		_sprintf
   955 ;; This function is called by:
   956 ;;		Startup code after reset
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text0
   961   00141E                     __ptext0:
   962                           	callstack 0
   963   00141E                     _main:
   964                           	callstack 21
   965   00141E                     
   966                           ;main.c: 25:     LEDSon_init();
   967   00141E  EC73  F015         	call	_LEDSon_init	;wreg free
   968   001422                     
   969                           ;main.c: 26:     I2C_2_Master_Init();
   970   001422  EC37  F015         	call	_I2C_2_Master_Init	;wreg free
   971   001426                     
   972                           ;main.c: 27:     color_click_init();
   973   001426  ECF0  F014         	call	_color_click_init	;wreg free
   974   00142A                     
   975                           ;main.c: 28:     initDCmotorsPWM();
   976   00142A  EC85  F012         	call	_initDCmotorsPWM	;wreg free
   977   00142E                     
   978                           ;main.c: 29:     initUSART4();
   979   00142E  EC84  F015         	call	_initUSART4	;wreg free
   980   001432                     
   981                           ;main.c: 31:     TRISFbits.TRISF2=1;
   982   001432  8486               	bsf	134,2,c	;volatile
   983   001434                     
   984                           ;main.c: 32:     ANSELFbits.ANSELF2=0;
   985   001434  010E               	movlb	14	; () banked
   986   001436  95B4               	bcf	180,2,b	;volatile
   987   001438                     
   988                           ; BSR set to: 14
   989                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
   990   001438  CFBC F1CC          	movff	4028,main@PWMcycle	;volatile
   991   00143C                     
   992                           ; BSR set to: 14
   993                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
   994   00143C  0E00               	movlw	0
   995   00143E  0101               	movlb	1	; () banked
   996   001440  6FD4               	movwf	main@motorL& (0+255),b
   997   001442                     
   998                           ; BSR set to: 1
   999                           ;main.c: 45:     motorL.direction=1;
  1000   001442  0E01               	movlw	1
  1001   001444  6FD5               	movwf	(main@motorL+1)& (0+255),b
  1002   001446                     
  1003                           ; BSR set to: 1
  1004                           ;main.c: 46:     motorL.brakemode=1;
  1005   001446  0E01               	movlw	1
  1006   001448  6FD6               	movwf	(main@motorL+2)& (0+255),b
  1007   00144A                     
  1008                           ; BSR set to: 1
  1009                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1010   00144A  0EAA               	movlw	170
  1011   00144C  6FD9               	movwf	(main@motorL+5)& (0+255),b
  1012   00144E  0E0F               	movlw	15
  1013   001450  6FDA               	movwf	(main@motorL+6)& (0+255),b
  1014   001452                     
  1015                           ; BSR set to: 1
  1016                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1017   001452  0EA6               	movlw	166
  1018   001454  6FDB               	movwf	(main@motorL+7)& (0+255),b
  1019   001456  0E0F               	movlw	15
  1020   001458  6FDC               	movwf	(main@motorL+8)& (0+255),b
  1021   00145A                     
  1022                           ; BSR set to: 1
  1023                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1024   00145A  C1CC  F1D7         	movff	main@PWMcycle,main@motorL+3
  1025   00145E  6BD8               	clrf	(main@motorL+4)& (0+255),b
  1026   001460                     
  1027                           ; BSR set to: 1
  1028                           ;main.c: 51:     motorR.power=0;
  1029   001460  0E00               	movlw	0
  1030   001462  6FDD               	movwf	main@motorR& (0+255),b
  1031   001464                     
  1032                           ; BSR set to: 1
  1033                           ;main.c: 52:     motorR.direction=1;
  1034   001464  0E01               	movlw	1
  1035   001466  6FDE               	movwf	(main@motorR+1)& (0+255),b
  1036   001468                     
  1037                           ; BSR set to: 1
  1038                           ;main.c: 53:     motorR.brakemode=1;
  1039   001468  0E01               	movlw	1
  1040   00146A  6FDF               	movwf	(main@motorR+2)& (0+255),b
  1041   00146C                     
  1042                           ; BSR set to: 1
  1043                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1044   00146C  0E25               	movlw	37
  1045   00146E  6FE2               	movwf	(main@motorR+5)& (0+255),b
  1046   001470  0E0F               	movlw	15
  1047   001472  6FE3               	movwf	(main@motorR+6)& (0+255),b
  1048   001474                     
  1049                           ; BSR set to: 1
  1050                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1051   001474  0E21               	movlw	33
  1052   001476  6FE4               	movwf	(main@motorR+7)& (0+255),b
  1053   001478  0E0F               	movlw	15
  1054   00147A  6FE5               	movwf	(main@motorR+8)& (0+255),b
  1055   00147C                     
  1056                           ; BSR set to: 1
  1057                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1058   00147C  C1CC  F1E0         	movff	main@PWMcycle,main@motorR+3
  1059   001480  6BE1               	clrf	(main@motorR+4)& (0+255),b
  1060   001482                     
  1061                           ; BSR set to: 1
  1062                           ;main.c: 58:     setMotorPWM(&motorL);
  1063   001482  0ED4               	movlw	low main@motorL
  1064   001484  6E0E               	movwf	setMotorPWM@m^0,c
  1065   001486  0E01               	movlw	high main@motorL
  1066   001488  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1067   00148A  EC83  F00E         	call	_setMotorPWM	;wreg free
  1068   00148E                     
  1069                           ;main.c: 59:     setMotorPWM(&motorR);
  1070   00148E  0EDD               	movlw	low main@motorR
  1071   001490  6E0E               	movwf	setMotorPWM@m^0,c
  1072   001492  0E01               	movlw	high main@motorR
  1073   001494  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1074   001496  EC83  F00E         	call	_setMotorPWM	;wreg free
  1075   00149A                     
  1076                           ;main.c: 64:     char buf[150];;main.c: 66:     unsigned int red_read = 0;
  1077   00149A  0E00               	movlw	0
  1078   00149C  0101               	movlb	1	; () banked
  1079   00149E  6FCE               	movwf	(main@red_read+1)& (0+255),b
  1080   0014A0  0E00               	movlw	0
  1081   0014A2  6FCD               	movwf	main@red_read& (0+255),b
  1082   0014A4                     
  1083                           ; BSR set to: 1
  1084                           ;main.c: 67:     unsigned int green_read = 0;
  1085   0014A4  0E00               	movlw	0
  1086   0014A6  6FD0               	movwf	(main@green_read+1)& (0+255),b
  1087   0014A8  0E00               	movlw	0
  1088   0014AA  6FCF               	movwf	main@green_read& (0+255),b
  1089   0014AC                     
  1090                           ; BSR set to: 1
  1091                           ;main.c: 68:     unsigned int blue_read = 0;
  1092   0014AC  0E00               	movlw	0
  1093   0014AE  6FD2               	movwf	(main@blue_read+1)& (0+255),b
  1094   0014B0  0E00               	movlw	0
  1095   0014B2  6FD1               	movwf	main@blue_read& (0+255),b
  1096   0014B4                     
  1097                           ; BSR set to: 1
  1098                           ;main.c: 69:     unsigned int expected_values[3][9];;main.c: 80:     LATDbits.LATD4 = 0;
  1099   0014B4  987C               	bcf	124,4,c	;volatile
  1100   0014B6                     
  1101                           ; BSR set to: 1
  1102                           ;main.c: 81:     for(colour i = RED; i<= BLACK; i++){
  1103   0014B6  0E00               	movlw	0
  1104   0014B8  6FD3               	movwf	main@i& (0+255),b
  1105   0014BA  EF60  F00A         	goto	l233
  1106   0014BE                     l234:
  1107                           
  1108                           ;main.c: 83:             LATDbits.LATD4 = 1;
  1109   0014BE  887C               	bsf	124,4,c	;volatile
  1110   0014C0                     l233:
  1111                           
  1112                           ;main.c: 82:         while(PORTFbits.RF2){
  1113   0014C0  B48E               	btfsc	142,2,c	;volatile
  1114   0014C2  EF65  F00A         	goto	u1361
  1115   0014C6  EF67  F00A         	goto	u1360
  1116   0014CA                     u1361:
  1117   0014CA  EF5F  F00A         	goto	l234
  1118   0014CE                     u1360:
  1119   0014CE                     
  1120                           ;main.c: 85:         LATDbits.LATD4 = 0;
  1121   0014CE  987C               	bcf	124,4,c	;volatile
  1122   0014D0                     
  1123                           ;main.c: 86:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1124   0014D0  0E29               	movlw	41
  1125   0014D2  0100               	movlb	0	; () banked
  1126   0014D4  6FE5               	movwf	(??_main+1)& (0+255),b
  1127   0014D6  0E96               	movlw	150
  1128   0014D8  6FE4               	movwf	??_main& (0+255),b
  1129   0014DA  0E7F               	movlw	127
  1130   0014DC                     u1447:
  1131   0014DC  2EE8               	decfsz	wreg,f,c
  1132   0014DE  D7FE               	bra	u1447
  1133   0014E0  2FE4               	decfsz	??_main& (0+255),f,b
  1134   0014E2  D7FC               	bra	u1447
  1135   0014E4  2FE5               	decfsz	(??_main+1)& (0+255),f,b
  1136   0014E6  D7FA               	bra	u1447
  1137   0014E8                     
  1138                           ;main.c: 87:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1139   0014E8  0ECD               	movlw	low main@red_read
  1140   0014EA  6E0E               	movwf	collect_avg_readings@red_read^0,c
  1141   0014EC  0E01               	movlw	high main@red_read
  1142   0014EE  6E0F               	movwf	(collect_avg_readings@red_read+1)^0,c
  1143   0014F0  0ECF               	movlw	low main@green_read
  1144   0014F2  6E10               	movwf	collect_avg_readings@green_read^0,c
  1145   0014F4  0E01               	movlw	high main@green_read
  1146   0014F6  6E11               	movwf	(collect_avg_readings@green_read+1)^0,c
  1147   0014F8  0ED1               	movlw	low main@blue_read
  1148   0014FA  6E12               	movwf	collect_avg_readings@blue_read^0,c
  1149   0014FC  0E01               	movlw	high main@blue_read
  1150   0014FE  6E13               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1151   001500  EC08  F00B         	call	_collect_avg_readings	;wreg free
  1152   001504                     
  1153                           ;main.c: 88:         expected_values[RED][i] = red_read;
  1154   001504  0101               	movlb	1	; () banked
  1155   001506  51D3               	movf	main@i& (0+255),w,b
  1156   001508  0D02               	mullw	2
  1157   00150A  0E96               	movlw	low main@expected_values
  1158   00150C  24F3               	addwf	243,w,c
  1159   00150E  6ED9               	movwf	fsr2l,c
  1160   001510  0E01               	movlw	high main@expected_values
  1161   001512  20F4               	addwfc	prodh,w,c
  1162   001514  6EDA               	movwf	fsr2h,c
  1163   001516  C1CD  FFDE         	movff	main@red_read,postinc2
  1164   00151A  C1CE  FFDD         	movff	main@red_read+1,postdec2
  1165   00151E                     
  1166                           ; BSR set to: 1
  1167                           ;main.c: 89:         expected_values[GREEN][i] = green_read;
  1168   00151E  51D3               	movf	main@i& (0+255),w,b
  1169   001520  0D02               	mullw	2
  1170   001522  0E12               	movlw	18
  1171   001524  26F3               	addwf	243,f,c
  1172   001526  0E00               	movlw	0
  1173   001528  22F4               	addwfc	244,f,c
  1174   00152A  0E96               	movlw	low main@expected_values
  1175   00152C  24F3               	addwf	243,w,c
  1176   00152E  6ED9               	movwf	fsr2l,c
  1177   001530  0E01               	movlw	high main@expected_values
  1178   001532  20F4               	addwfc	prodh,w,c
  1179   001534  6EDA               	movwf	fsr2h,c
  1180   001536  C1CF  FFDE         	movff	main@green_read,postinc2
  1181   00153A  C1D0  FFDD         	movff	main@green_read+1,postdec2
  1182   00153E                     
  1183                           ; BSR set to: 1
  1184                           ;main.c: 90:         expected_values[BLUE][i] = blue_read;
  1185   00153E  51D3               	movf	main@i& (0+255),w,b
  1186   001540  0D02               	mullw	2
  1187   001542  0E24               	movlw	36
  1188   001544  26F3               	addwf	243,f,c
  1189   001546  0E00               	movlw	0
  1190   001548  22F4               	addwfc	244,f,c
  1191   00154A  0E96               	movlw	low main@expected_values
  1192   00154C  24F3               	addwf	243,w,c
  1193   00154E  6ED9               	movwf	fsr2l,c
  1194   001550  0E01               	movlw	high main@expected_values
  1195   001552  20F4               	addwfc	prodh,w,c
  1196   001554  6EDA               	movwf	fsr2h,c
  1197   001556  C1D1  FFDE         	movff	main@blue_read,postinc2
  1198   00155A  C1D2  FFDD         	movff	main@blue_read+1,postdec2
  1199   00155E                     
  1200                           ; BSR set to: 1
  1201                           ;main.c: 91:         sprintf(buf, "\n EXPECTED: R %d, G %d, B %d  CARD: %d \n", red_read
      +                          , green_read, blue_read, i);
  1202   00155E  0E00               	movlw	low main@buf
  1203   001560  0100               	movlb	0	; () banked
  1204   001562  6F60               	movwf	sprintf@s& (0+255),b
  1205   001564  0E01               	movlw	high main@buf
  1206   001566  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1207   001568  0E3C               	movlw	low STR_1
  1208   00156A  6F62               	movwf	sprintf@fmt& (0+255),b
  1209   00156C  0E0E               	movlw	high STR_1
  1210   00156E  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1211   001570  C1CD  F064         	movff	main@red_read,?_sprintf+4
  1212   001574  C1CE  F065         	movff	main@red_read+1,?_sprintf+5
  1213   001578  C1CF  F066         	movff	main@green_read,?_sprintf+6
  1214   00157C  C1D0  F067         	movff	main@green_read+1,?_sprintf+7
  1215   001580  C1D1  F068         	movff	main@blue_read,?_sprintf+8
  1216   001584  C1D2  F069         	movff	main@blue_read+1,?_sprintf+9
  1217   001588  C1D3  F06A         	movff	main@i,?_sprintf+10
  1218   00158C  6B6B               	clrf	(?_sprintf+11)& (0+255),b
  1219   00158E  ECC3  F013         	call	_sprintf	;wreg free
  1220   001592                     
  1221                           ;main.c: 92:         sendStringSerial4(buf);
  1222   001592  0E00               	movlw	low main@buf
  1223   001594  6E02               	movwf	sendStringSerial4@string^0,c
  1224   001596  0E01               	movlw	high main@buf
  1225   001598  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1226   00159A  EC0A  F015         	call	_sendStringSerial4	;wreg free
  1227   00159E                     
  1228                           ;main.c: 93:     }
  1229   00159E  0101               	movlb	1	; () banked
  1230   0015A0  2BD3               	incf	main@i& (0+255),f,b
  1231   0015A2                     
  1232                           ; BSR set to: 1
  1233   0015A2  0E08               	movlw	8
  1234   0015A4  65D3               	cpfsgt	main@i& (0+255),b
  1235   0015A6  EFD7  F00A         	goto	u1371
  1236   0015AA  EFD9  F00A         	goto	u1370
  1237   0015AE                     u1371:
  1238   0015AE  EF60  F00A         	goto	l233
  1239   0015B2                     u1370:
  1240   0015B2  EFDD  F00A         	goto	l237
  1241   0015B6                     l238:
  1242                           
  1243                           ;main.c: 117:             LATDbits.LATD4 = 1;
  1244   0015B6  887C               	bsf	124,4,c	;volatile
  1245                           
  1246                           ;main.c: 118:             LATFbits.LATF0 = 1;
  1247   0015B8  807E               	bsf	126,0,c	;volatile
  1248   0015BA                     l237:
  1249                           
  1250                           ;main.c: 116:         while(PORTFbits.RF2){
  1251   0015BA  B48E               	btfsc	142,2,c	;volatile
  1252   0015BC  EFE2  F00A         	goto	u1381
  1253   0015C0  EFE4  F00A         	goto	u1380
  1254   0015C4                     u1381:
  1255   0015C4  EFDB  F00A         	goto	l238
  1256   0015C8                     u1380:
  1257   0015C8                     
  1258                           ;main.c: 120:         LATFbits.LATF0 = 0;
  1259   0015C8  907E               	bcf	126,0,c	;volatile
  1260   0015CA                     
  1261                           ;main.c: 122:         card_response(buf, &red_read, &green_read, &blue_read, expected_va
      +                          lues, &motorL, &motorR);
  1262   0015CA  0E00               	movlw	low main@buf
  1263   0015CC  0100               	movlb	0	; () banked
  1264   0015CE  6F8D               	movwf	card_response@buf& (0+255),b
  1265   0015D0  0E01               	movlw	high main@buf
  1266   0015D2  6F8E               	movwf	(card_response@buf+1)& (0+255),b
  1267   0015D4  0ECD               	movlw	low main@red_read
  1268   0015D6  6F8F               	movwf	card_response@red_read& (0+255),b
  1269   0015D8  0E01               	movlw	high main@red_read
  1270   0015DA  6F90               	movwf	(card_response@red_read+1)& (0+255),b
  1271   0015DC  0ECF               	movlw	low main@green_read
  1272   0015DE  6F91               	movwf	card_response@green_read& (0+255),b
  1273   0015E0  0E01               	movlw	high main@green_read
  1274   0015E2  6F92               	movwf	(card_response@green_read+1)& (0+255),b
  1275   0015E4  0ED1               	movlw	low main@blue_read
  1276   0015E6  6F93               	movwf	card_response@blue_read& (0+255),b
  1277   0015E8  0E01               	movlw	high main@blue_read
  1278   0015EA  6F94               	movwf	(card_response@blue_read+1)& (0+255),b
  1279   0015EC  0E96               	movlw	low main@expected_values
  1280   0015EE  6F95               	movwf	card_response@expected_values& (0+255),b
  1281   0015F0  0E01               	movlw	high main@expected_values
  1282   0015F2  6F96               	movwf	(card_response@expected_values+1)& (0+255),b
  1283   0015F4  0ED4               	movlw	low main@motorL
  1284   0015F6  6F97               	movwf	card_response@mL& (0+255),b
  1285   0015F8  0E01               	movlw	high main@motorL
  1286   0015FA  6F98               	movwf	(card_response@mL+1)& (0+255),b
  1287   0015FC  0EDD               	movlw	low main@motorR
  1288   0015FE  6F99               	movwf	card_response@mR& (0+255),b
  1289   001600  0E01               	movlw	high main@motorR
  1290   001602  6F9A               	movwf	(card_response@mR+1)& (0+255),b
  1291   001604  EC9A  F010         	call	_card_response	;wreg free
  1292   001608  EFDD  F00A         	goto	l237
  1293   00160C  EF00  F000         	goto	start
  1294   001610                     __end_of_main:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _initUSART4 *****************
  1298 ;; Defined at:
  1299 ;;		line 6 in file "serial.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text1
  1327   002B08                     __ptext1:
  1328                           	callstack 0
  1329   002B08                     _initUSART4:
  1330                           	callstack 30
  1331   002B08                     
  1332                           ;serial.c: 10:     RC0PPS = 0x12;
  1333   002B08  0E12               	movlw	18
  1334   002B0A  010E               	movlb	14	; () banked
  1335   002B0C  6F62               	movwf	98,b	;volatile
  1336                           
  1337                           ;serial.c: 11:     RX4PPS = 0x11;
  1338   002B0E  0E11               	movlw	17
  1339   002B10  6F15               	movwf	21,b	;volatile
  1340   002B12                     
  1341                           ; BSR set to: 14
  1342                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1343   002B12  8283               	bsf	131,1,c	;volatile
  1344   002B14                     
  1345                           ; BSR set to: 14
  1346                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1347   002B14  97E9               	bcf	233,3,b	;volatile
  1348   002B16                     
  1349                           ; BSR set to: 14
  1350                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1351   002B16  95E8               	bcf	232,2,b	;volatile
  1352                           
  1353                           ;serial.c: 17:     SP4BRGL = 51;
  1354   002B18  0E33               	movlw	51
  1355   002B1A  6FE5               	movwf	229,b	;volatile
  1356                           
  1357                           ;serial.c: 18:     SP4BRGH = 0;
  1358   002B1C  0E00               	movlw	0
  1359   002B1E  6FE6               	movwf	230,b	;volatile
  1360   002B20                     
  1361                           ; BSR set to: 14
  1362                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1363   002B20  89E7               	bsf	231,4,b	;volatile
  1364   002B22                     
  1365                           ; BSR set to: 14
  1366                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1367   002B22  8BE8               	bsf	232,5,b	;volatile
  1368   002B24                     
  1369                           ; BSR set to: 14
  1370                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1371   002B24  8FE7               	bsf	231,7,b	;volatile
  1372   002B26                     
  1373                           ; BSR set to: 14
  1374   002B26  0012               	return		;funcret
  1375   002B28                     __end_of_initUSART4:
  1376                           	callstack 0
  1377                           
  1378 ;; *************** function _initDCmotorsPWM *****************
  1379 ;; Defined at:
  1380 ;;		line 6 in file "dc_motor.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;Total ram usage:        0 bytes
  1399 ;; Hardware stack levels used: 1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text2
  1408   00250A                     __ptext2:
  1409                           	callstack 0
  1410   00250A                     _initDCmotorsPWM:
  1411                           	callstack 30
  1412   00250A                     
  1413                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1414   00250A  9485               	bcf	133,2,c	;volatile
  1415                           
  1416                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1417   00250C  9885               	bcf	133,4,c	;volatile
  1418                           
  1419                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1420   00250E  9E83               	bcf	131,7,c	;volatile
  1421                           
  1422                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1423   002510  9C87               	bcf	135,6,c	;volatile
  1424   002512                     
  1425                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1426   002512  0E05               	movlw	5
  1427   002514  010E               	movlb	14	; () banked
  1428   002516  6F74               	movwf	116,b	;volatile
  1429                           
  1430                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1431   002518  0E06               	movlw	6
  1432   00251A  6F76               	movwf	118,b	;volatile
  1433                           
  1434                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1435   00251C  0E07               	movlw	7
  1436   00251E  6F69               	movwf	105,b	;volatile
  1437                           
  1438                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1439   002520  0E08               	movlw	8
  1440   002522  6F88               	movwf	136,b	;volatile
  1441                           
  1442                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1443   002524  50BD               	movf	189,w,c	;volatile
  1444   002526  0B8F               	andlw	-113
  1445   002528  0940               	iorlw	64
  1446   00252A  6EBD               	movwf	189,c	;volatile
  1447                           
  1448                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1449   00252C  0EE0               	movlw	-32
  1450   00252E  16BE               	andwf	190,f,c	;volatile
  1451                           
  1452                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1453   002530  50BF               	movf	191,w,c	;volatile
  1454   002532  0BF0               	andlw	-16
  1455   002534  0901               	iorlw	1
  1456   002536  6EBF               	movwf	191,c	;volatile
  1457                           
  1458                           ;dc_motor.c: 26:     T2PR=99;
  1459   002538  0E63               	movlw	99
  1460   00253A  6EBC               	movwf	188,c	;volatile
  1461   00253C                     
  1462                           ; BSR set to: 14
  1463                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1464   00253C  8EBD               	bsf	189,7,c	;volatile
  1465                           
  1466                           ;dc_motor.c: 31:     CCPR1H=0;
  1467   00253E  0E00               	movlw	0
  1468   002540  6EAA               	movwf	170,c	;volatile
  1469                           
  1470                           ;dc_motor.c: 32:     CCPR2H=0;
  1471   002542  0E00               	movlw	0
  1472   002544  6EA6               	movwf	166,c	;volatile
  1473                           
  1474                           ;dc_motor.c: 33:     CCPR3H=0;
  1475   002546  0E00               	movlw	0
  1476   002548  010F               	movlb	15	; () banked
  1477   00254A  6F25               	movwf	37,b	;volatile
  1478                           
  1479                           ;dc_motor.c: 34:     CCPR4H=0;
  1480   00254C  0E00               	movlw	0
  1481   00254E  6F21               	movwf	33,b	;volatile
  1482                           
  1483                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1484   002550  0EFC               	movlw	-4
  1485   002552  16AD               	andwf	173,f,c	;volatile
  1486                           
  1487                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1488   002554  0EF3               	movlw	-13
  1489   002556  16AD               	andwf	173,f,c	;volatile
  1490                           
  1491                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1492   002558  0ECF               	movlw	-49
  1493   00255A  16AD               	andwf	173,f,c	;volatile
  1494                           
  1495                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1496   00255C  0E3F               	movlw	-193
  1497   00255E  16AD               	andwf	173,f,c	;volatile
  1498   002560                     
  1499                           ; BSR set to: 15
  1500                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1501   002560  88AB               	bsf	171,4,c	;volatile
  1502                           
  1503                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1504   002562  50AB               	movf	171,w,c	;volatile
  1505   002564  0BF0               	andlw	-16
  1506   002566  090C               	iorlw	12
  1507   002568  6EAB               	movwf	171,c	;volatile
  1508   00256A                     
  1509                           ; BSR set to: 15
  1510                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1511   00256A  8EAB               	bsf	171,7,c	;volatile
  1512   00256C                     
  1513                           ; BSR set to: 15
  1514                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1515   00256C  88A7               	bsf	167,4,c	;volatile
  1516                           
  1517                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1518   00256E  50A7               	movf	167,w,c	;volatile
  1519   002570  0BF0               	andlw	-16
  1520   002572  090C               	iorlw	12
  1521   002574  6EA7               	movwf	167,c	;volatile
  1522   002576                     
  1523                           ; BSR set to: 15
  1524                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1525   002576  8EA7               	bsf	167,7,c	;volatile
  1526   002578                     
  1527                           ; BSR set to: 15
  1528                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1529   002578  8926               	bsf	38,4,b	;volatile
  1530                           
  1531                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1532   00257A  5126               	movf	38,w,b	;volatile
  1533   00257C  0BF0               	andlw	-16
  1534   00257E  090C               	iorlw	12
  1535   002580  6F26               	movwf	38,b	;volatile
  1536   002582                     
  1537                           ; BSR set to: 15
  1538                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1539   002582  8F26               	bsf	38,7,b	;volatile
  1540   002584                     
  1541                           ; BSR set to: 15
  1542                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1543   002584  8922               	bsf	34,4,b	;volatile
  1544                           
  1545                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1546   002586  5122               	movf	34,w,b	;volatile
  1547   002588  0BF0               	andlw	-16
  1548   00258A  090C               	iorlw	12
  1549   00258C  6F22               	movwf	34,b	;volatile
  1550   00258E                     
  1551                           ; BSR set to: 15
  1552                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1553   00258E  8F22               	bsf	34,7,b	;volatile
  1554   002590                     
  1555                           ; BSR set to: 15
  1556   002590  0012               	return		;funcret
  1557   002592                     __end_of_initDCmotorsPWM:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _color_click_init *****************
  1561 ;; Defined at:
  1562 ;;		line 5 in file "color.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1580 ;;Total ram usage:        1 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; Hardware stack levels required when called: 3
  1583 ;; This function calls:
  1584 ;;		_I2C_2_Master_Init
  1585 ;;		_color_writetoaddr
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text3
  1592   0029E0                     __ptext3:
  1593                           	callstack 0
  1594   0029E0                     _color_click_init:
  1595                           	callstack 27
  1596   0029E0                     
  1597                           ;color.c: 8:     I2C_2_Master_Init();
  1598   0029E0  EC37  F015         	call	_I2C_2_Master_Init	;wreg free
  1599   0029E4                     
  1600                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1601   0029E4  0E01               	movlw	1
  1602   0029E6  6E03               	movwf	color_writetoaddr@value^0,c
  1603   0029E8  0E00               	movlw	0
  1604   0029EA  EC94  F015         	call	_color_writetoaddr
  1605   0029EE                     
  1606                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1607   0029EE  0E3F               	movlw	63
  1608   0029F0  6E05               	movwf	??_color_click_init^0,c
  1609   0029F2  0E55               	movlw	85
  1610   0029F4                     u1457:
  1611   0029F4  2EE8               	decfsz	wreg,f,c
  1612   0029F6  D7FE               	bra	u1457
  1613   0029F8  2E05               	decfsz	??_color_click_init^0,f,c
  1614   0029FA  D7FC               	bra	u1457
  1615   0029FC  F000               	nop	
  1616   0029FE                     
  1617                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1618   0029FE  0E03               	movlw	3
  1619   002A00  6E03               	movwf	color_writetoaddr@value^0,c
  1620   002A02  0E00               	movlw	0
  1621   002A04  EC94  F015         	call	_color_writetoaddr
  1622   002A08                     
  1623                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1624   002A08  0ED5               	movlw	213
  1625   002A0A  6E03               	movwf	color_writetoaddr@value^0,c
  1626   002A0C  0E01               	movlw	1
  1627   002A0E  EC94  F015         	call	_color_writetoaddr
  1628   002A12  0012               	return		;funcret
  1629   002A14                     __end_of_color_click_init:
  1630                           	callstack 0
  1631                           
  1632 ;; *************** function _color_writetoaddr *****************
  1633 ;; Defined at:
  1634 ;;		line 21 in file "color.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;  address         1    wreg     unsigned char 
  1637 ;;  value           1    2[COMRAM] unsigned char 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  address         1    3[COMRAM] unsigned char 
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1649 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1653 ;;Total ram usage:        2 bytes
  1654 ;; Hardware stack levels used: 1
  1655 ;; Hardware stack levels required when called: 2
  1656 ;; This function calls:
  1657 ;;		_I2C_2_Master_Start
  1658 ;;		_I2C_2_Master_Stop
  1659 ;;		_I2C_2_Master_Write
  1660 ;; This function is called by:
  1661 ;;		_color_click_init
  1662 ;;		_enable_color_interrupt
  1663 ;;		_set_interrupt_threshold
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text4
  1668   002B28                     __ptext4:
  1669                           	callstack 0
  1670   002B28                     _color_writetoaddr:
  1671                           	callstack 27
  1672                           
  1673                           ;incstack = 0
  1674                           ;color_writetoaddr@address stored from wreg
  1675   002B28  6E04               	movwf	color_writetoaddr@address^0,c
  1676   002B2A                     
  1677                           ;color.c: 22:     I2C_2_Master_Start();
  1678   002B2A  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  1679                           
  1680                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1681   002B2E  0E52               	movlw	82
  1682   002B30  ECB0  F015         	call	_I2C_2_Master_Write
  1683                           
  1684                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1685   002B34  5004               	movf	color_writetoaddr@address^0,w,c
  1686   002B36  0980               	iorlw	128
  1687   002B38  ECB0  F015         	call	_I2C_2_Master_Write
  1688                           
  1689                           ;color.c: 25:     I2C_2_Master_Write(value);
  1690   002B3C  5003               	movf	color_writetoaddr@value^0,w,c
  1691   002B3E  ECB0  F015         	call	_I2C_2_Master_Write
  1692                           
  1693                           ;color.c: 26:     I2C_2_Master_Stop();
  1694   002B42  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  1695   002B46  0012               	return		;funcret
  1696   002B48                     __end_of_color_writetoaddr:
  1697                           	callstack 0
  1698                           
  1699 ;; *************** function _I2C_2_Master_Init *****************
  1700 ;; Defined at:
  1701 ;;		line 4 in file "i2c.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;		None
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;		None
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1719 ;;Total ram usage:        0 bytes
  1720 ;; Hardware stack levels used: 1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_color_click_init
  1725 ;;		_main
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text5
  1730   002A6E                     __ptext5:
  1731                           	callstack 0
  1732   002A6E                     _I2C_2_Master_Init:
  1733                           	callstack 29
  1734   002A6E                     
  1735                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1736   002A6E  010E               	movlb	14	; () banked
  1737   002A70  51D9               	movf	217,w,b	;volatile
  1738   002A72  0BF0               	andlw	-16
  1739   002A74  0908               	iorlw	8
  1740   002A76  6FD9               	movwf	217,b	;volatile
  1741   002A78                     
  1742                           ; BSR set to: 14
  1743                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1744   002A78  8BD9               	bsf	217,5,b	;volatile
  1745                           
  1746                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1747   002A7A  0E9F               	movlw	159
  1748   002A7C  6FD6               	movwf	214,b	;volatile
  1749   002A7E                     
  1750                           ; BSR set to: 14
  1751                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1752   002A7E  8A84               	bsf	132,5,c	;volatile
  1753   002A80                     
  1754                           ; BSR set to: 14
  1755                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1756   002A80  8C84               	bsf	132,6,c	;volatile
  1757   002A82                     
  1758                           ; BSR set to: 14
  1759                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1760   002A82  9BA7               	bcf	167,5,b	;volatile
  1761   002A84                     
  1762                           ; BSR set to: 14
  1763                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1764   002A84  9DA7               	bcf	167,6,b	;volatile
  1765                           
  1766                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1767   002A86  0E1D               	movlw	29
  1768   002A88  6F1D               	movwf	29,b	;volatile
  1769                           
  1770                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1771   002A8A  0E1E               	movlw	30
  1772   002A8C  6F1C               	movwf	28,b	;volatile
  1773                           
  1774                           ;i2c.c: 18:   RD5PPS=0x1C;
  1775   002A8E  0E1C               	movlw	28
  1776   002A90  6F6F               	movwf	111,b	;volatile
  1777                           
  1778                           ;i2c.c: 19:   RD6PPS=0x1B;
  1779   002A92  0E1B               	movlw	27
  1780   002A94  6F70               	movwf	112,b	;volatile
  1781   002A96                     
  1782                           ; BSR set to: 14
  1783   002A96  0012               	return		;funcret
  1784   002A98                     __end_of_I2C_2_Master_Init:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _card_response *****************
  1788 ;; Defined at:
  1789 ;;		line 205 in file "colour_identify.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  buf             2   45[BANK0 ] PTR unsigned char 
  1792 ;;		 -> main@buf(150), 
  1793 ;;  red_read        2   47[BANK0 ] PTR unsigned int 
  1794 ;;		 -> main@red_read(2), 
  1795 ;;  green_read      2   49[BANK0 ] PTR unsigned int 
  1796 ;;		 -> main@green_read(2), 
  1797 ;;  blue_read       2   51[BANK0 ] PTR unsigned int 
  1798 ;;		 -> main@blue_read(2), 
  1799 ;;  expected_val    2   53[BANK0 ] PTR unsigned int [9]
  1800 ;;		 -> main@expected_values(54), 
  1801 ;;  mL              2   55[BANK0 ] PTR struct DC_motor
  1802 ;;		 -> main@motorL(9), 
  1803 ;;  mR              2   57[BANK0 ] PTR struct DC_motor
  1804 ;;		 -> main@motorR(9), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  normalised_v   54   59[BANK0 ] unsigned int [9][3]
  1807 ;;  master_close   18  113[BANK0 ] unsigned int [9]
  1808 ;;  card            1  131[BANK0 ] enum E14551
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1818 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Locals:         0      73       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1821 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1822 ;;Total ram usage:       87 bytes
  1823 ;; Hardware stack levels used: 1
  1824 ;; Hardware stack levels required when called: 9
  1825 ;; This function calls:
  1826 ;;		_collect_avg_readings
  1827 ;;		_determine_card
  1828 ;;		_make_master_closeness
  1829 ;;		_motor_response
  1830 ;;		_normalise_readings
  1831 ;;		_sendStringSerial4
  1832 ;;		_sprintf
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text6
  1839   002134                     __ptext6:
  1840                           	callstack 0
  1841   002134                     _card_response:
  1842                           	callstack 21
  1843   002134                     
  1844                           ;colour_identify.c: 207:     unsigned int normalised_values[3][9];;colour_identify.c: 20
      +                          8:     unsigned int master_closeness[9];;colour_identify.c: 210:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  1845   002134  C08F  F00E         	movff	card_response@red_read,collect_avg_readings@red_read
  1846   002138  C090  F00F         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  1847   00213C  C091  F010         	movff	card_response@green_read,collect_avg_readings@green_read
  1848   002140  C092  F011         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  1849   002144  C093  F012         	movff	card_response@blue_read,collect_avg_readings@blue_read
  1850   002148  C094  F013         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  1851   00214C  EC08  F00B         	call	_collect_avg_readings	;wreg free
  1852   002150                     
  1853                           ;colour_identify.c: 211:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  1854   002150  C08D  F060         	movff	card_response@buf,sprintf@s
  1855   002154  C08E  F061         	movff	card_response@buf+1,sprintf@s+1
  1856   002158  0E65               	movlw	low STR_3
  1857   00215A  0100               	movlb	0	; () banked
  1858   00215C  6F62               	movwf	sprintf@fmt& (0+255),b
  1859   00215E  0E0E               	movlw	high STR_3
  1860   002160  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1861   002162  C08F  FFD9         	movff	card_response@red_read,fsr2l
  1862   002166  C090  FFDA         	movff	card_response@red_read+1,fsr2h
  1863   00216A  CFDE F064          	movff	postinc2,?_sprintf+4
  1864   00216E  CFDD F065          	movff	postdec2,?_sprintf+5
  1865   002172  C091  FFD9         	movff	card_response@green_read,fsr2l
  1866   002176  C092  FFDA         	movff	card_response@green_read+1,fsr2h
  1867   00217A  CFDE F066          	movff	postinc2,?_sprintf+6
  1868   00217E  CFDD F067          	movff	postdec2,?_sprintf+7
  1869   002182  C093  FFD9         	movff	card_response@blue_read,fsr2l
  1870   002186  C094  FFDA         	movff	card_response@blue_read+1,fsr2h
  1871   00218A  CFDE F068          	movff	postinc2,?_sprintf+8
  1872   00218E  CFDD F069          	movff	postdec2,?_sprintf+9
  1873   002192  ECC3  F013         	call	_sprintf	;wreg free
  1874   002196                     
  1875                           ;colour_identify.c: 212:     sendStringSerial4(buf);
  1876   002196  C08D  F002         	movff	card_response@buf,sendStringSerial4@string
  1877   00219A  C08E  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  1878   00219E  EC0A  F015         	call	_sendStringSerial4	;wreg free
  1879   0021A2                     
  1880                           ;colour_identify.c: 213:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  1881   0021A2  C08D  F017         	movff	card_response@buf,normalise_readings@buf
  1882   0021A6  C08E  F018         	movff	card_response@buf+1,normalise_readings@buf+1
  1883   0021AA  C08F  FFD9         	movff	card_response@red_read,fsr2l
  1884   0021AE  C090  FFDA         	movff	card_response@red_read+1,fsr2h
  1885   0021B2  CFDE F019          	movff	postinc2,normalise_readings@red_read
  1886   0021B6  CFDD F01A          	movff	postdec2,normalise_readings@red_read+1
  1887   0021BA  C091  FFD9         	movff	card_response@green_read,fsr2l
  1888   0021BE  C092  FFDA         	movff	card_response@green_read+1,fsr2h
  1889   0021C2  CFDE F01B          	movff	postinc2,normalise_readings@green_read
  1890   0021C6  CFDD F01C          	movff	postdec2,normalise_readings@green_read+1
  1891   0021CA  C093  FFD9         	movff	card_response@blue_read,fsr2l
  1892   0021CE  C094  FFDA         	movff	card_response@blue_read+1,fsr2h
  1893   0021D2  CFDE F01D          	movff	postinc2,normalise_readings@blue_read
  1894   0021D6  CFDD F01E          	movff	postdec2,normalise_readings@blue_read+1
  1895   0021DA  C095  F01F         	movff	card_response@expected_values,normalise_readings@expected_values
  1896   0021DE  C096  F020         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  1897   0021E2  0E9B               	movlw	low card_response@normalised_values
  1898   0021E4  6E21               	movwf	normalise_readings@normalised_values^0,c
  1899   0021E6  0E00               	movlw	high card_response@normalised_values
  1900   0021E8  6E22               	movwf	(normalise_readings@normalised_values+1)^0,c
  1901   0021EA  ECFB  F00B         	call	_normalise_readings	;wreg free
  1902   0021EE                     
  1903                           ;colour_identify.c: 214:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  1904   0021EE  C08D  F059         	movff	card_response@buf,make_master_closeness@buf
  1905   0021F2  C08E  F05A         	movff	card_response@buf+1,make_master_closeness@buf+1
  1906   0021F6  0E9B               	movlw	low card_response@normalised_values
  1907   0021F8  6E5B               	movwf	make_master_closeness@normalised_values^0,c
  1908   0021FA  0E00               	movlw	high card_response@normalised_values
  1909   0021FC  6E5C               	movwf	(make_master_closeness@normalised_values+1)^0,c
  1910   0021FE  0ED1               	movlw	low card_response@master_closeness
  1911   002200  6E5D               	movwf	make_master_closeness@master_closeness^0,c
  1912   002202  0E00               	movlw	high card_response@master_closeness
  1913   002204  6E5E               	movwf	(make_master_closeness@master_closeness+1)^0,c
  1914   002206  ECEB  F00C         	call	_make_master_closeness	;wreg free
  1915   00220A                     
  1916                           ;colour_identify.c: 215:     card = determine_card(master_closeness);
  1917   00220A  0ED1               	movlw	low card_response@master_closeness
  1918   00220C  6E01               	movwf	determine_card@master_closeness^0,c
  1919   00220E  0E00               	movlw	high card_response@master_closeness
  1920   002210  6E02               	movwf	(determine_card@master_closeness+1)^0,c
  1921   002212  EC0C  F013         	call	_determine_card	;wreg free
  1922   002216  0100               	movlb	0	; () banked
  1923   002218  6FE3               	movwf	card_response@card& (0+255),b
  1924   00221A                     
  1925                           ; BSR set to: 0
  1926                           ;colour_identify.c: 216:     sprintf(buf, "CARD %d \n", card);
  1927   00221A  C08D  F060         	movff	card_response@buf,sprintf@s
  1928   00221E  C08E  F061         	movff	card_response@buf+1,sprintf@s+1
  1929   002222  0E7F               	movlw	low STR_4
  1930   002224  6F62               	movwf	sprintf@fmt& (0+255),b
  1931   002226  0E0E               	movlw	high STR_4
  1932   002228  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1933   00222A  C0E3  F064         	movff	card_response@card,?_sprintf+4
  1934   00222E  6B65               	clrf	(?_sprintf+5)& (0+255),b
  1935   002230  ECC3  F013         	call	_sprintf	;wreg free
  1936   002234                     
  1937                           ;colour_identify.c: 217:     sendStringSerial4(buf);
  1938   002234  C08D  F002         	movff	card_response@buf,sendStringSerial4@string
  1939   002238  C08E  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  1940   00223C  EC0A  F015         	call	_sendStringSerial4	;wreg free
  1941   002240                     
  1942                           ;colour_identify.c: 218:     motor_response(card, mL, mR);
  1943   002240  C097  F01C         	movff	card_response@mL,motor_response@mL
  1944   002244  C098  F01D         	movff	card_response@mL+1,motor_response@mL+1
  1945   002248  C099  F01E         	movff	card_response@mR,motor_response@mR
  1946   00224C  C09A  F01F         	movff	card_response@mR+1,motor_response@mR+1
  1947   002250  0100               	movlb	0	; () banked
  1948   002252  51E3               	movf	card_response@card& (0+255),w,b
  1949   002254  EC45  F007         	call	_motor_response
  1950   002258  0012               	return		;funcret
  1951   00225A                     __end_of_card_response:
  1952                           	callstack 0
  1953                           
  1954 ;; *************** function _normalise_readings *****************
  1955 ;; Defined at:
  1956 ;;		line 64 in file "colour_identify.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1959 ;;		 -> main@buf(150), 
  1960 ;;  red_read        2   24[COMRAM] unsigned int 
  1961 ;;  green_read      2   26[COMRAM] unsigned int 
  1962 ;;  blue_read       2   28[COMRAM] unsigned int 
  1963 ;;  expected_val    2   30[COMRAM] PTR unsigned int [9]
  1964 ;;		 -> main@expected_values(54), 
  1965 ;;  normalised_v    2   32[COMRAM] PTR unsigned int [9]
  1966 ;;		 -> card_response@normalised_values(54), 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  difference      2   40[COMRAM] unsigned int 
  1969 ;;  i               1   42[COMRAM] enum E14551
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1979 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;Total ram usage:       21 bytes
  1984 ;; Hardware stack levels used: 1
  1985 ;; Hardware stack levels required when called: 1
  1986 ;; This function calls:
  1987 ;;		___lwdiv
  1988 ;;		___wmul
  1989 ;;		_abs
  1990 ;; This function is called by:
  1991 ;;		_card_response
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text7
  1996   0017F6                     __ptext7:
  1997                           	callstack 0
  1998   0017F6                     _normalise_readings:
  1999                           	callstack 28
  2000   0017F6                     
  2001                           ;colour_identify.c: 71:     for(colour i = RED; i<= BLACK; i++){
  2002   0017F6  0E00               	movlw	0
  2003   0017F8  6E2B               	movwf	normalise_readings@i^0,c
  2004   0017FA                     l2612:
  2005                           
  2006                           ;colour_identify.c: 74:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  2007   0017FA  502B               	movf	normalise_readings@i^0,w,c
  2008   0017FC  0D02               	mullw	2
  2009   0017FE  CFF3 F023          	movff	prodl,??_normalise_readings
  2010   001802  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2011   001806  5023               	movf	??_normalise_readings^0,w,c
  2012   001808  241F               	addwf	normalise_readings@expected_values^0,w,c
  2013   00180A  6ED9               	movwf	fsr2l,c
  2014   00180C  5024               	movf	(??_normalise_readings+1)^0,w,c
  2015   00180E  2020               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  2016   001810  6EDA               	movwf	fsr2h,c
  2017   001812  CFDE F025          	movff	postinc2,??_normalise_readings+2
  2018   001816  CFDD F026          	movff	postdec2,??_normalise_readings+3
  2019   00181A  5025               	movf	(??_normalise_readings+2)^0,w,c
  2020   00181C  5C19               	subwf	normalise_readings@red_read^0,w,c
  2021   00181E  6E13               	movwf	abs@a^0,c
  2022   001820  5026               	movf	(??_normalise_readings+3)^0,w,c
  2023   001822  581A               	subwfb	(normalise_readings@red_read+1)^0,w,c
  2024   001824  6E14               	movwf	(abs@a+1)^0,c
  2025   001826  ECD0  F014         	call	_abs	;wreg free
  2026   00182A  C013  F029         	movff	?_abs,normalise_readings@difference
  2027   00182E  C014  F02A         	movff	?_abs+1,normalise_readings@difference+1
  2028                           
  2029                           ;colour_identify.c: 76:         normalised_values[RED][i] = (difference*100) / red_read;
  2030   001832  C029  F001         	movff	normalise_readings@difference,___wmul@multiplier
  2031   001836  C02A  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  2032   00183A  0E00               	movlw	0
  2033   00183C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2034   00183E  0E64               	movlw	100
  2035   001840  6E03               	movwf	___wmul@multiplicand^0,c
  2036   001842  EC60  F015         	call	___wmul	;wreg free
  2037   001846  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2038   00184A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2039   00184E  C019  F009         	movff	normalise_readings@red_read,___lwdiv@divisor
  2040   001852  C01A  F00A         	movff	normalise_readings@red_read+1,___lwdiv@divisor+1
  2041   001856  EC89  F013         	call	___lwdiv	;wreg free
  2042   00185A  502B               	movf	normalise_readings@i^0,w,c
  2043   00185C  0D02               	mullw	2
  2044   00185E  CFF3 F023          	movff	prodl,??_normalise_readings
  2045   001862  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2046   001866  5023               	movf	??_normalise_readings^0,w,c
  2047   001868  2421               	addwf	normalise_readings@normalised_values^0,w,c
  2048   00186A  6ED9               	movwf	fsr2l,c
  2049   00186C  5024               	movf	(??_normalise_readings+1)^0,w,c
  2050   00186E  2022               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  2051   001870  6EDA               	movwf	fsr2h,c
  2052   001872  C007  FFDE         	movff	?___lwdiv,postinc2
  2053   001876  C008  FFDD         	movff	?___lwdiv+1,postdec2
  2054                           
  2055                           ;colour_identify.c: 81:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  2056   00187A  502B               	movf	normalise_readings@i^0,w,c
  2057   00187C  0D02               	mullw	2
  2058   00187E  CFF3 F023          	movff	prodl,??_normalise_readings
  2059   001882  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2060   001886  5023               	movf	??_normalise_readings^0,w,c
  2061   001888  241F               	addwf	normalise_readings@expected_values^0,w,c
  2062   00188A  6E25               	movwf	(??_normalise_readings+2)^0,c
  2063   00188C  5024               	movf	(??_normalise_readings+1)^0,w,c
  2064   00188E  2020               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  2065   001890  6E26               	movwf	(??_normalise_readings+3)^0,c
  2066   001892  0E12               	movlw	18
  2067   001894  2425               	addwf	(??_normalise_readings+2)^0,w,c
  2068   001896  6ED9               	movwf	fsr2l,c
  2069   001898  0E00               	movlw	0
  2070   00189A  2026               	addwfc	(??_normalise_readings+3)^0,w,c
  2071   00189C  6EDA               	movwf	fsr2h,c
  2072   00189E  CFDE F027          	movff	postinc2,??_normalise_readings+4
  2073   0018A2  CFDD F028          	movff	postdec2,??_normalise_readings+5
  2074   0018A6  5027               	movf	(??_normalise_readings+4)^0,w,c
  2075   0018A8  5C1B               	subwf	normalise_readings@green_read^0,w,c
  2076   0018AA  6E13               	movwf	abs@a^0,c
  2077   0018AC  5028               	movf	(??_normalise_readings+5)^0,w,c
  2078   0018AE  581C               	subwfb	(normalise_readings@green_read+1)^0,w,c
  2079   0018B0  6E14               	movwf	(abs@a+1)^0,c
  2080   0018B2  ECD0  F014         	call	_abs	;wreg free
  2081   0018B6  C013  F029         	movff	?_abs,normalise_readings@difference
  2082   0018BA  C014  F02A         	movff	?_abs+1,normalise_readings@difference+1
  2083                           
  2084                           ;colour_identify.c: 83:         normalised_values[GREEN][i] = (difference*100) / green_r
      +                          ead;
  2085   0018BE  C029  F001         	movff	normalise_readings@difference,___wmul@multiplier
  2086   0018C2  C02A  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  2087   0018C6  0E00               	movlw	0
  2088   0018C8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2089   0018CA  0E64               	movlw	100
  2090   0018CC  6E03               	movwf	___wmul@multiplicand^0,c
  2091   0018CE  EC60  F015         	call	___wmul	;wreg free
  2092   0018D2  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2093   0018D6  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2094   0018DA  C01B  F009         	movff	normalise_readings@green_read,___lwdiv@divisor
  2095   0018DE  C01C  F00A         	movff	normalise_readings@green_read+1,___lwdiv@divisor+1
  2096   0018E2  EC89  F013         	call	___lwdiv	;wreg free
  2097   0018E6  502B               	movf	normalise_readings@i^0,w,c
  2098   0018E8  0D02               	mullw	2
  2099   0018EA  CFF3 F023          	movff	prodl,??_normalise_readings
  2100   0018EE  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2101   0018F2  5023               	movf	??_normalise_readings^0,w,c
  2102   0018F4  2421               	addwf	normalise_readings@normalised_values^0,w,c
  2103   0018F6  6E25               	movwf	(??_normalise_readings+2)^0,c
  2104   0018F8  5024               	movf	(??_normalise_readings+1)^0,w,c
  2105   0018FA  2022               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  2106   0018FC  6E26               	movwf	(??_normalise_readings+3)^0,c
  2107   0018FE  0E12               	movlw	18
  2108   001900  2425               	addwf	(??_normalise_readings+2)^0,w,c
  2109   001902  6ED9               	movwf	fsr2l,c
  2110   001904  0E00               	movlw	0
  2111   001906  2026               	addwfc	(??_normalise_readings+3)^0,w,c
  2112   001908  6EDA               	movwf	fsr2h,c
  2113   00190A  C007  FFDE         	movff	?___lwdiv,postinc2
  2114   00190E  C008  FFDD         	movff	?___lwdiv+1,postdec2
  2115                           
  2116                           ;colour_identify.c: 88:         difference = abs(blue_read - expected_values[BLUE][i]);
  2117   001912  502B               	movf	normalise_readings@i^0,w,c
  2118   001914  0D02               	mullw	2
  2119   001916  CFF3 F023          	movff	prodl,??_normalise_readings
  2120   00191A  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2121   00191E  5023               	movf	??_normalise_readings^0,w,c
  2122   001920  241F               	addwf	normalise_readings@expected_values^0,w,c
  2123   001922  6E25               	movwf	(??_normalise_readings+2)^0,c
  2124   001924  5024               	movf	(??_normalise_readings+1)^0,w,c
  2125   001926  2020               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  2126   001928  6E26               	movwf	(??_normalise_readings+3)^0,c
  2127   00192A  0E24               	movlw	36
  2128   00192C  2425               	addwf	(??_normalise_readings+2)^0,w,c
  2129   00192E  6ED9               	movwf	fsr2l,c
  2130   001930  0E00               	movlw	0
  2131   001932  2026               	addwfc	(??_normalise_readings+3)^0,w,c
  2132   001934  6EDA               	movwf	fsr2h,c
  2133   001936  CFDE F027          	movff	postinc2,??_normalise_readings+4
  2134   00193A  CFDD F028          	movff	postdec2,??_normalise_readings+5
  2135   00193E  5027               	movf	(??_normalise_readings+4)^0,w,c
  2136   001940  5C1D               	subwf	normalise_readings@blue_read^0,w,c
  2137   001942  6E13               	movwf	abs@a^0,c
  2138   001944  5028               	movf	(??_normalise_readings+5)^0,w,c
  2139   001946  581E               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  2140   001948  6E14               	movwf	(abs@a+1)^0,c
  2141   00194A  ECD0  F014         	call	_abs	;wreg free
  2142   00194E  C013  F029         	movff	?_abs,normalise_readings@difference
  2143   001952  C014  F02A         	movff	?_abs+1,normalise_readings@difference+1
  2144                           
  2145                           ;colour_identify.c: 90:         normalised_values[BLUE][i] = (difference*100) / blue_rea
      +                          d;
  2146   001956  C029  F001         	movff	normalise_readings@difference,___wmul@multiplier
  2147   00195A  C02A  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  2148   00195E  0E00               	movlw	0
  2149   001960  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2150   001962  0E64               	movlw	100
  2151   001964  6E03               	movwf	___wmul@multiplicand^0,c
  2152   001966  EC60  F015         	call	___wmul	;wreg free
  2153   00196A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2154   00196E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2155   001972  C01D  F009         	movff	normalise_readings@blue_read,___lwdiv@divisor
  2156   001976  C01E  F00A         	movff	normalise_readings@blue_read+1,___lwdiv@divisor+1
  2157   00197A  EC89  F013         	call	___lwdiv	;wreg free
  2158   00197E  502B               	movf	normalise_readings@i^0,w,c
  2159   001980  0D02               	mullw	2
  2160   001982  CFF3 F023          	movff	prodl,??_normalise_readings
  2161   001986  CFF4 F024          	movff	prodh,??_normalise_readings+1
  2162   00198A  5023               	movf	??_normalise_readings^0,w,c
  2163   00198C  2421               	addwf	normalise_readings@normalised_values^0,w,c
  2164   00198E  6E25               	movwf	(??_normalise_readings+2)^0,c
  2165   001990  5024               	movf	(??_normalise_readings+1)^0,w,c
  2166   001992  2022               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  2167   001994  6E26               	movwf	(??_normalise_readings+3)^0,c
  2168   001996  0E24               	movlw	36
  2169   001998  2425               	addwf	(??_normalise_readings+2)^0,w,c
  2170   00199A  6ED9               	movwf	fsr2l,c
  2171   00199C  0E00               	movlw	0
  2172   00199E  2026               	addwfc	(??_normalise_readings+3)^0,w,c
  2173   0019A0  6EDA               	movwf	fsr2h,c
  2174   0019A2  C007  FFDE         	movff	?___lwdiv,postinc2
  2175   0019A6  C008  FFDD         	movff	?___lwdiv+1,postdec2
  2176   0019AA                     
  2177                           ;colour_identify.c: 93:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2178   0019AA  0E11               	movlw	17
  2179   0019AC  6E24               	movwf	(??_normalise_readings+1)^0,c
  2180   0019AE  0E3C               	movlw	60
  2181   0019B0  6E23               	movwf	??_normalise_readings^0,c
  2182   0019B2  0ECB               	movlw	203
  2183   0019B4                     u1467:
  2184   0019B4  2EE8               	decfsz	wreg,f,c
  2185   0019B6  D7FE               	bra	u1467
  2186   0019B8  2E23               	decfsz	??_normalise_readings^0,f,c
  2187   0019BA  D7FC               	bra	u1467
  2188   0019BC  2E24               	decfsz	(??_normalise_readings+1)^0,f,c
  2189   0019BE  D7FA               	bra	u1467
  2190   0019C0  F000               	nop	
  2191   0019C2                     
  2192                           ;colour_identify.c: 94:     }
  2193   0019C2  2A2B               	incf	normalise_readings@i^0,f,c
  2194   0019C4  0E08               	movlw	8
  2195   0019C6  642B               	cpfsgt	normalise_readings@i^0,c
  2196   0019C8  EFE8  F00C         	goto	u1281
  2197   0019CC  EFEA  F00C         	goto	u1280
  2198   0019D0                     u1281:
  2199   0019D0  EFFD  F00B         	goto	l2612
  2200   0019D4                     u1280:
  2201   0019D4  0012               	return		;funcret
  2202   0019D6                     __end_of_normalise_readings:
  2203                           	callstack 0
  2204                           
  2205 ;; *************** function _motor_response *****************
  2206 ;; Defined at:
  2207 ;;		line 121 in file "colour_identify.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  card            1    wreg     enum E14551
  2210 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  2211 ;;		 -> main@motorL(9), 
  2212 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  2213 ;;		 -> main@motorR(9), 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  card            1   33[COMRAM] enum E14551
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;Total ram usage:        7 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 3
  2232 ;; This function calls:
  2233 ;;		_reverseFullSpeed
  2234 ;;		_stop
  2235 ;;		_turnLeft45
  2236 ;;		_turnRight45
  2237 ;; This function is called by:
  2238 ;;		_card_response
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text8
  2243   000E8A                     __ptext8:
  2244                           	callstack 0
  2245   000E8A                     _motor_response:
  2246                           	callstack 26
  2247                           
  2248                           ;incstack = 0
  2249                           ;motor_response@card stored from wreg
  2250   000E8A  6E22               	movwf	motor_response@card^0,c
  2251   000E8C                     
  2252                           ;colour_identify.c: 122:     switch (card){
  2253   000E8C  EF9E  F008         	goto	l2774
  2254   000E90                     l2664:
  2255                           
  2256                           ;colour_identify.c: 124:             reverseFullSpeed(mL,mR);
  2257   000E90  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2258   000E94  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2259   000E98  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2260   000E9C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2261   000EA0  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2262   000EA4                     
  2263                           ;colour_identify.c: 125:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2264   000EA4  0E05               	movlw	5
  2265   000EA6  6E21               	movwf	(??_motor_response+1)^0,c
  2266   000EA8  0E0F               	movlw	15
  2267   000EAA  6E20               	movwf	??_motor_response^0,c
  2268   000EAC  0EF1               	movlw	241
  2269   000EAE                     u1477:
  2270   000EAE  2EE8               	decfsz	wreg,f,c
  2271   000EB0  D7FE               	bra	u1477
  2272   000EB2  2E20               	decfsz	??_motor_response^0,f,c
  2273   000EB4  D7FC               	bra	u1477
  2274   000EB6  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2275   000EB8  D7FA               	bra	u1477
  2276   000EBA  F000               	nop	
  2277   000EBC                     l2668:
  2278                           
  2279                           ;colour_identify.c: 126:             turnRight45(mL,mR);
  2280   000EBC  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  2281   000EC0  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  2282   000EC4  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  2283   000EC8  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  2284   000ECC  ECE9  F011         	call	_turnRight45	;wreg free
  2285   000ED0                     
  2286                           ;colour_identify.c: 127:             stop(mL,mR);
  2287   000ED0  C01C  F014         	movff	motor_response@mL,stop@mL
  2288   000ED4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2289   000ED8  C01E  F016         	movff	motor_response@mR,stop@mR
  2290   000EDC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2291   000EE0  ECC9  F012         	call	_stop	;wreg free
  2292   000EE4                     
  2293                           ;colour_identify.c: 128:             turnRight45(mL,mR);
  2294   000EE4  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  2295   000EE8  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  2296   000EEC  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  2297   000EF0  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  2298   000EF4  ECE9  F011         	call	_turnRight45	;wreg free
  2299   000EF8                     l2674:
  2300                           
  2301                           ;colour_identify.c: 129:             stop(mL,mR);
  2302   000EF8  C01C  F014         	movff	motor_response@mL,stop@mL
  2303   000EFC  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2304   000F00  C01E  F016         	movff	motor_response@mR,stop@mR
  2305   000F04  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2306   000F08  ECC9  F012         	call	_stop	;wreg free
  2307                           
  2308                           ;colour_identify.c: 130:             break;
  2309   000F0C  EFCF  F008         	goto	l341
  2310   000F10                     l2676:
  2311                           
  2312                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  2313   000F10  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2314   000F14  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2315   000F18  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2316   000F1C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2317   000F20  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2318   000F24                     
  2319                           ;colour_identify.c: 133:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2320   000F24  0E05               	movlw	5
  2321   000F26  6E21               	movwf	(??_motor_response+1)^0,c
  2322   000F28  0E0F               	movlw	15
  2323   000F2A  6E20               	movwf	??_motor_response^0,c
  2324   000F2C  0EF1               	movlw	241
  2325   000F2E                     u1487:
  2326   000F2E  2EE8               	decfsz	wreg,f,c
  2327   000F30  D7FE               	bra	u1487
  2328   000F32  2E20               	decfsz	??_motor_response^0,f,c
  2329   000F34  D7FC               	bra	u1487
  2330   000F36  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2331   000F38  D7FA               	bra	u1487
  2332   000F3A  F000               	nop	
  2333   000F3C                     l2680:
  2334                           
  2335                           ;colour_identify.c: 134:             turnLeft45(mL,mR);
  2336   000F3C  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  2337   000F40  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  2338   000F44  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  2339   000F48  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  2340   000F4C  EC92  F011         	call	_turnLeft45	;wreg free
  2341   000F50                     
  2342                           ;colour_identify.c: 135:             stop(mL,mR);
  2343   000F50  C01C  F014         	movff	motor_response@mL,stop@mL
  2344   000F54  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2345   000F58  C01E  F016         	movff	motor_response@mR,stop@mR
  2346   000F5C  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2347   000F60  ECC9  F012         	call	_stop	;wreg free
  2348   000F64                     
  2349                           ;colour_identify.c: 136:             turnLeft45(mL,mR);
  2350   000F64  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  2351   000F68  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  2352   000F6C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  2353   000F70  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  2354   000F74  EC92  F011         	call	_turnLeft45	;wreg free
  2355   000F78  EF7C  F007         	goto	l2674
  2356   000F7C                     l2688:
  2357                           
  2358                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  2359   000F7C  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2360   000F80  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2361   000F84  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2362   000F88  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2363   000F8C  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2364   000F90                     
  2365                           ;colour_identify.c: 141:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2366   000F90  0E05               	movlw	5
  2367   000F92  6E21               	movwf	(??_motor_response+1)^0,c
  2368   000F94  0E0F               	movlw	15
  2369   000F96  6E20               	movwf	??_motor_response^0,c
  2370   000F98  0EF1               	movlw	241
  2371   000F9A                     u1497:
  2372   000F9A  2EE8               	decfsz	wreg,f,c
  2373   000F9C  D7FE               	bra	u1497
  2374   000F9E  2E20               	decfsz	??_motor_response^0,f,c
  2375   000FA0  D7FC               	bra	u1497
  2376   000FA2  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2377   000FA4  D7FA               	bra	u1497
  2378   000FA6  F000               	nop	
  2379   000FA8                     
  2380                           ;colour_identify.c: 142:             turnRight45(mL,mR);
  2381   000FA8  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  2382   000FAC  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  2383   000FB0  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  2384   000FB4  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  2385   000FB8  ECE9  F011         	call	_turnRight45	;wreg free
  2386   000FBC                     
  2387                           ;colour_identify.c: 143:             stop(mL,mR);
  2388   000FBC  C01C  F014         	movff	motor_response@mL,stop@mL
  2389   000FC0  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2390   000FC4  C01E  F016         	movff	motor_response@mR,stop@mR
  2391   000FC8  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2392   000FCC  ECC9  F012         	call	_stop	;wreg free
  2393   000FD0                     l2696:
  2394                           
  2395                           ;colour_identify.c: 144:             turnRight45(mL,mR);
  2396   000FD0  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  2397   000FD4  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  2398   000FD8  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  2399   000FDC  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  2400   000FE0  ECE9  F011         	call	_turnRight45	;wreg free
  2401   000FE4                     l2698:
  2402                           
  2403                           ;colour_identify.c: 145:             stop(mL,mR);
  2404   000FE4  C01C  F014         	movff	motor_response@mL,stop@mL
  2405   000FE8  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2406   000FEC  C01E  F016         	movff	motor_response@mR,stop@mR
  2407   000FF0  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2408   000FF4  ECC9  F012         	call	_stop	;wreg free
  2409   000FF8  EF5E  F007         	goto	l2668
  2410   000FFC                     l2708:
  2411                           
  2412                           ;colour_identify.c: 152:             reverseFullSpeed(mL,mR);
  2413   000FFC  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2414   001000  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2415   001004  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2416   001008  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2417   00100C  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2418   001010                     
  2419                           ;colour_identify.c: 153:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2420   001010  0E05               	movlw	5
  2421   001012  6E21               	movwf	(??_motor_response+1)^0,c
  2422   001014  0E0F               	movlw	15
  2423   001016  6E20               	movwf	??_motor_response^0,c
  2424   001018  0EF1               	movlw	241
  2425   00101A                     u1507:
  2426   00101A  2EE8               	decfsz	wreg,f,c
  2427   00101C  D7FE               	bra	u1507
  2428   00101E  2E20               	decfsz	??_motor_response^0,f,c
  2429   001020  D7FC               	bra	u1507
  2430   001022  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2431   001024  D7FA               	bra	u1507
  2432   001026  F000               	nop	
  2433   001028                     
  2434                           ;colour_identify.c: 154:             reverseFullSpeed(mL,mR);
  2435   001028  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2436   00102C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2437   001030  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2438   001034  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2439   001038  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2440                           
  2441                           ;colour_identify.c: 155:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2442   00103C  0E29               	movlw	41
  2443   00103E  6E21               	movwf	(??_motor_response+1)^0,c
  2444   001040  0E96               	movlw	150
  2445   001042  6E20               	movwf	??_motor_response^0,c
  2446   001044  0E7F               	movlw	127
  2447   001046                     u1517:
  2448   001046  2EE8               	decfsz	wreg,f,c
  2449   001048  D7FE               	bra	u1517
  2450   00104A  2E20               	decfsz	??_motor_response^0,f,c
  2451   00104C  D7FC               	bra	u1517
  2452   00104E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2453   001050  D7FA               	bra	u1517
  2454   001052  F000               	nop	
  2455   001054  EFF2  F007         	goto	l2698
  2456   001058                     l2724:
  2457                           
  2458                           ;colour_identify.c: 163:             reverseFullSpeed(mL,mR);
  2459   001058  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2460   00105C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2461   001060  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2462   001064  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2463   001068  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2464   00106C                     
  2465                           ;colour_identify.c: 164:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2466   00106C  0E05               	movlw	5
  2467   00106E  6E21               	movwf	(??_motor_response+1)^0,c
  2468   001070  0E0F               	movlw	15
  2469   001072  6E20               	movwf	??_motor_response^0,c
  2470   001074  0EF1               	movlw	241
  2471   001076                     u1527:
  2472   001076  2EE8               	decfsz	wreg,f,c
  2473   001078  D7FE               	bra	u1527
  2474   00107A  2E20               	decfsz	??_motor_response^0,f,c
  2475   00107C  D7FC               	bra	u1527
  2476   00107E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2477   001080  D7FA               	bra	u1527
  2478   001082  F000               	nop	
  2479   001084                     
  2480                           ;colour_identify.c: 165:             reverseFullSpeed(mL,mR);
  2481   001084  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2482   001088  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2483   00108C  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2484   001090  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2485   001094  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2486                           
  2487                           ;colour_identify.c: 166:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2488   001098  0E29               	movlw	41
  2489   00109A  6E21               	movwf	(??_motor_response+1)^0,c
  2490   00109C  0E96               	movlw	150
  2491   00109E  6E20               	movwf	??_motor_response^0,c
  2492   0010A0  0E7F               	movlw	127
  2493   0010A2                     u1537:
  2494   0010A2  2EE8               	decfsz	wreg,f,c
  2495   0010A4  D7FE               	bra	u1537
  2496   0010A6  2E20               	decfsz	??_motor_response^0,f,c
  2497   0010A8  D7FC               	bra	u1537
  2498   0010AA  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2499   0010AC  D7FA               	bra	u1537
  2500   0010AE  F000               	nop	
  2501   0010B0                     l2730:
  2502                           
  2503                           ;colour_identify.c: 167:             stop(mL,mR);
  2504   0010B0  C01C  F014         	movff	motor_response@mL,stop@mL
  2505   0010B4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  2506   0010B8  C01E  F016         	movff	motor_response@mR,stop@mR
  2507   0010BC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  2508   0010C0  ECC9  F012         	call	_stop	;wreg free
  2509   0010C4  EF9E  F007         	goto	l2680
  2510   0010C8                     l2740:
  2511                           
  2512                           ;colour_identify.c: 174:             reverseFullSpeed(mL,mR);
  2513   0010C8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2514   0010CC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2515   0010D0  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2516   0010D4  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2517   0010D8  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2518   0010DC                     
  2519                           ;colour_identify.c: 175:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2520   0010DC  0E05               	movlw	5
  2521   0010DE  6E21               	movwf	(??_motor_response+1)^0,c
  2522   0010E0  0E0F               	movlw	15
  2523   0010E2  6E20               	movwf	??_motor_response^0,c
  2524   0010E4  0EF1               	movlw	241
  2525   0010E6                     u1547:
  2526   0010E6  2EE8               	decfsz	wreg,f,c
  2527   0010E8  D7FE               	bra	u1547
  2528   0010EA  2E20               	decfsz	??_motor_response^0,f,c
  2529   0010EC  D7FC               	bra	u1547
  2530   0010EE  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2531   0010F0  D7FA               	bra	u1547
  2532   0010F2  F000               	nop	
  2533   0010F4  EFE8  F007         	goto	l2696
  2534   0010F8                     l2756:
  2535                           
  2536                           ;colour_identify.c: 184:             reverseFullSpeed(mL,mR);
  2537   0010F8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  2538   0010FC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  2539   001100  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  2540   001104  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  2541   001108  EC3F  F012         	call	_reverseFullSpeed	;wreg free
  2542   00110C                     
  2543                           ;colour_identify.c: 185:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2544   00110C  0E05               	movlw	5
  2545   00110E  6E21               	movwf	(??_motor_response+1)^0,c
  2546   001110  0E0F               	movlw	15
  2547   001112  6E20               	movwf	??_motor_response^0,c
  2548   001114  0EF1               	movlw	241
  2549   001116                     u1557:
  2550   001116  2EE8               	decfsz	wreg,f,c
  2551   001118  D7FE               	bra	u1557
  2552   00111A  2E20               	decfsz	??_motor_response^0,f,c
  2553   00111C  D7FC               	bra	u1557
  2554   00111E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  2555   001120  D7FA               	bra	u1557
  2556   001122  F000               	nop	
  2557   001124                     
  2558                           ;colour_identify.c: 186:             turnLeft45(mL,mR);
  2559   001124  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  2560   001128  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  2561   00112C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  2562   001130  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  2563   001134  EC92  F011         	call	_turnLeft45	;wreg free
  2564   001138  EF58  F008         	goto	l2730
  2565   00113C                     l2774:
  2566   00113C  5022               	movf	motor_response@card^0,w,c
  2567   00113E  6E20               	movwf	??_motor_response^0,c
  2568   001140  6A21               	clrf	(??_motor_response+1)^0,c
  2569                           
  2570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2571                           ; Switch size 1, requested type "simple"
  2572                           ; Number of cases is 1, Range of values is 0 to 0
  2573                           ; switch strategies available:
  2574                           ; Name         Instructions Cycles
  2575                           ; simple_byte            4     3 (average)
  2576                           ;	Chosen strategy is simple_byte
  2577   001142  5021               	movf	(??_motor_response+1)^0,w,c
  2578   001144  0A00               	xorlw	0	; case 0
  2579   001146  B4D8               	btfsc	status,2,c
  2580   001148  EFA8  F008         	goto	l3024
  2581   00114C  EFCF  F008         	goto	l341
  2582   001150                     l3024:
  2583                           
  2584                           ; Switch size 1, requested type "simple"
  2585                           ; Number of cases is 9, Range of values is 0 to 8
  2586                           ; switch strategies available:
  2587                           ; Name         Instructions Cycles
  2588                           ; simple_byte           28    15 (average)
  2589                           ;	Chosen strategy is simple_byte
  2590   001150  5020               	movf	??_motor_response^0,w,c
  2591   001152  0A00               	xorlw	0	; case 0
  2592   001154  B4D8               	btfsc	status,2,c
  2593   001156  EF48  F007         	goto	l2664
  2594   00115A  0A01               	xorlw	1	; case 1
  2595   00115C  B4D8               	btfsc	status,2,c
  2596   00115E  EF88  F007         	goto	l2676
  2597   001162  0A03               	xorlw	3	; case 2
  2598   001164  B4D8               	btfsc	status,2,c
  2599   001166  EFBE  F007         	goto	l2688
  2600   00116A  0A01               	xorlw	1	; case 3
  2601   00116C  B4D8               	btfsc	status,2,c
  2602   00116E  EFFE  F007         	goto	l2708
  2603   001172  0A07               	xorlw	7	; case 4
  2604   001174  B4D8               	btfsc	status,2,c
  2605   001176  EF2C  F008         	goto	l2724
  2606   00117A  0A01               	xorlw	1	; case 5
  2607   00117C  B4D8               	btfsc	status,2,c
  2608   00117E  EF64  F008         	goto	l2740
  2609   001182  0A03               	xorlw	3	; case 6
  2610   001184  B4D8               	btfsc	status,2,c
  2611   001186  EF7C  F008         	goto	l2756
  2612   00118A  0A01               	xorlw	1	; case 7
  2613   00118C  B4D8               	btfsc	status,2,c
  2614   00118E  EFCF  F008         	goto	l341
  2615   001192  0A0F               	xorlw	15	; case 8
  2616   001194  B4D8               	btfsc	status,2,c
  2617   001196  EFCF  F008         	goto	l341
  2618   00119A  EFCF  F008         	goto	l341
  2619   00119E                     l341:
  2620   00119E  0012               	return		;funcret
  2621   0011A0                     __end_of_motor_response:
  2622                           	callstack 0
  2623                           
  2624 ;; *************** function _turnRight45 *****************
  2625 ;; Defined at:
  2626 ;;		line 116 in file "dc_motor.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2629 ;;		 -> main@motorL(9), 
  2630 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2631 ;;		 -> main@motorR(9), 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  i               2   25[COMRAM] int 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2646 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2647 ;;Total ram usage:        8 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 2
  2650 ;; This function calls:
  2651 ;;		_setMotorPWM
  2652 ;; This function is called by:
  2653 ;;		_motor_response
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text9
  2658   0023D2                     __ptext9:
  2659                           	callstack 0
  2660   0023D2                     _turnRight45:
  2661                           	callstack 26
  2662   0023D2                     
  2663                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  2664   0023D2  EE20 F001          	lfsr	2,1
  2665   0023D6  5014               	movf	turnRight45@mL^0,w,c
  2666   0023D8  26D9               	addwf	fsr2l,f,c
  2667   0023DA  5015               	movf	(turnRight45@mL+1)^0,w,c
  2668   0023DC  22DA               	addwfc	fsr2h,f,c
  2669   0023DE  0E01               	movlw	1
  2670   0023E0  6EDF               	movwf	indf2,c
  2671                           
  2672                           ;dc_motor.c: 119:     mR->direction=0;
  2673   0023E2  EE20 F001          	lfsr	2,1
  2674   0023E6  5016               	movf	turnRight45@mR^0,w,c
  2675   0023E8  26D9               	addwf	fsr2l,f,c
  2676   0023EA  5017               	movf	(turnRight45@mR+1)^0,w,c
  2677   0023EC  22DA               	addwfc	fsr2h,f,c
  2678   0023EE  0E00               	movlw	0
  2679   0023F0  6EDF               	movwf	indf2,c
  2680   0023F2                     
  2681                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  2682   0023F2  0E00               	movlw	0
  2683   0023F4  6E1B               	movwf	(turnRight45@i+1)^0,c
  2684   0023F6  0E00               	movlw	0
  2685   0023F8  6E1A               	movwf	turnRight45@i^0,c
  2686   0023FA                     l2478:
  2687                           
  2688                           ;dc_motor.c: 122:         mR->power=i;
  2689   0023FA  C016  FFD9         	movff	turnRight45@mR,fsr2l
  2690   0023FE  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
  2691   002402  C01A  FFDF         	movff	turnRight45@i,indf2
  2692                           
  2693                           ;dc_motor.c: 123:         mL->power=i;
  2694   002406  C014  FFD9         	movff	turnRight45@mL,fsr2l
  2695   00240A  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
  2696   00240E  C01A  FFDF         	movff	turnRight45@i,indf2
  2697   002412                     
  2698                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  2699   002412  0E02               	movlw	2
  2700   002414  6E19               	movwf	(??_turnRight45+1)^0,c
  2701   002416  0E38               	movlw	56
  2702   002418  6E18               	movwf	??_turnRight45^0,c
  2703   00241A  0EAD               	movlw	173
  2704   00241C                     u1567:
  2705   00241C  2EE8               	decfsz	wreg,f,c
  2706   00241E  D7FE               	bra	u1567
  2707   002420  2E18               	decfsz	??_turnRight45^0,f,c
  2708   002422  D7FC               	bra	u1567
  2709   002424  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  2710   002426  D7FA               	bra	u1567
  2711   002428  F000               	nop	
  2712   00242A                     
  2713                           ;dc_motor.c: 125:         setMotorPWM(mL);
  2714   00242A  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
  2715   00242E  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
  2716   002432  EC83  F00E         	call	_setMotorPWM	;wreg free
  2717   002436                     
  2718                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  2719   002436  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
  2720   00243A  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
  2721   00243E  EC83  F00E         	call	_setMotorPWM	;wreg free
  2722   002442  0E0A               	movlw	10
  2723   002444  261A               	addwf	turnRight45@i^0,f,c
  2724   002446  0E00               	movlw	0
  2725   002448  221B               	addwfc	(turnRight45@i+1)^0,f,c
  2726   00244A  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
  2727   00244C  EF31  F012         	goto	u1211
  2728   002450  501B               	movf	(turnRight45@i+1)^0,w,c
  2729   002452  E109               	bnz	u1210
  2730   002454  0E50               	movlw	80
  2731   002456  5C1A               	subwf	turnRight45@i^0,w,c
  2732   002458  A0D8               	btfss	status,0,c
  2733   00245A  EF31  F012         	goto	u1211
  2734   00245E  EF33  F012         	goto	u1210
  2735   002462                     u1211:
  2736   002462  EFFD  F011         	goto	l2478
  2737   002466                     u1210:
  2738   002466                     
  2739                           ;dc_motor.c: 127:     _delay((unsigned long)((45)*(64000000/4000.0)));
  2740   002466  0E04               	movlw	4
  2741   002468  6E19               	movwf	(??_turnRight45+1)^0,c
  2742   00246A  0EA8               	movlw	168
  2743   00246C  6E18               	movwf	??_turnRight45^0,c
  2744   00246E  0E0C               	movlw	12
  2745   002470                     u1577:
  2746   002470  2EE8               	decfsz	wreg,f,c
  2747   002472  D7FE               	bra	u1577
  2748   002474  2E18               	decfsz	??_turnRight45^0,f,c
  2749   002476  D7FC               	bra	u1577
  2750   002478  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  2751   00247A  D7FA               	bra	u1577
  2752   00247C  0012               	return		;funcret
  2753   00247E                     __end_of_turnRight45:
  2754                           	callstack 0
  2755                           
  2756 ;; *************** function _turnLeft45 *****************
  2757 ;; Defined at:
  2758 ;;		line 101 in file "dc_motor.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2761 ;;		 -> main@motorL(9), 
  2762 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2763 ;;		 -> main@motorR(9), 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  i               2   25[COMRAM] int 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;Total ram usage:        8 bytes
  2780 ;; Hardware stack levels used: 1
  2781 ;; Hardware stack levels required when called: 2
  2782 ;; This function calls:
  2783 ;;		_setMotorPWM
  2784 ;; This function is called by:
  2785 ;;		_motor_response
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text10
  2790   002324                     __ptext10:
  2791                           	callstack 0
  2792   002324                     _turnLeft45:
  2793                           	callstack 26
  2794   002324                     
  2795                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  2796   002324  EE20 F001          	lfsr	2,1
  2797   002328  5014               	movf	turnLeft45@mL^0,w,c
  2798   00232A  26D9               	addwf	fsr2l,f,c
  2799   00232C  5015               	movf	(turnLeft45@mL+1)^0,w,c
  2800   00232E  22DA               	addwfc	fsr2h,f,c
  2801   002330  0E00               	movlw	0
  2802   002332  6EDF               	movwf	indf2,c
  2803                           
  2804                           ;dc_motor.c: 104:     mR->direction=1;
  2805   002334  EE20 F001          	lfsr	2,1
  2806   002338  5016               	movf	turnLeft45@mR^0,w,c
  2807   00233A  26D9               	addwf	fsr2l,f,c
  2808   00233C  5017               	movf	(turnLeft45@mR+1)^0,w,c
  2809   00233E  22DA               	addwfc	fsr2h,f,c
  2810   002340  0E01               	movlw	1
  2811   002342  6EDF               	movwf	indf2,c
  2812   002344                     
  2813                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  2814   002344  0E00               	movlw	0
  2815   002346  6E1B               	movwf	(turnLeft45@i+1)^0,c
  2816   002348  0E00               	movlw	0
  2817   00234A  6E1A               	movwf	turnLeft45@i^0,c
  2818   00234C                     l2456:
  2819                           
  2820                           ;dc_motor.c: 107:         mR->power=i;
  2821   00234C  C016  FFD9         	movff	turnLeft45@mR,fsr2l
  2822   002350  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
  2823   002354  C01A  FFDF         	movff	turnLeft45@i,indf2
  2824                           
  2825                           ;dc_motor.c: 108:         mL->power=i;
  2826   002358  C014  FFD9         	movff	turnLeft45@mL,fsr2l
  2827   00235C  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
  2828   002360  C01A  FFDF         	movff	turnLeft45@i,indf2
  2829   002364                     
  2830                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  2831   002364  0E02               	movlw	2
  2832   002366  6E19               	movwf	(??_turnLeft45+1)^0,c
  2833   002368  0E38               	movlw	56
  2834   00236A  6E18               	movwf	??_turnLeft45^0,c
  2835   00236C  0EAD               	movlw	173
  2836   00236E                     u1587:
  2837   00236E  2EE8               	decfsz	wreg,f,c
  2838   002370  D7FE               	bra	u1587
  2839   002372  2E18               	decfsz	??_turnLeft45^0,f,c
  2840   002374  D7FC               	bra	u1587
  2841   002376  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  2842   002378  D7FA               	bra	u1587
  2843   00237A  F000               	nop	
  2844   00237C                     
  2845                           ;dc_motor.c: 110:         setMotorPWM(mL);
  2846   00237C  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
  2847   002380  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  2848   002384  EC83  F00E         	call	_setMotorPWM	;wreg free
  2849   002388                     
  2850                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  2851   002388  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
  2852   00238C  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  2853   002390  EC83  F00E         	call	_setMotorPWM	;wreg free
  2854   002394  0E0A               	movlw	10
  2855   002396  261A               	addwf	turnLeft45@i^0,f,c
  2856   002398  0E00               	movlw	0
  2857   00239A  221B               	addwfc	(turnLeft45@i+1)^0,f,c
  2858   00239C  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
  2859   00239E  EFDA  F011         	goto	u1201
  2860   0023A2  501B               	movf	(turnLeft45@i+1)^0,w,c
  2861   0023A4  E109               	bnz	u1200
  2862   0023A6  0E50               	movlw	80
  2863   0023A8  5C1A               	subwf	turnLeft45@i^0,w,c
  2864   0023AA  A0D8               	btfss	status,0,c
  2865   0023AC  EFDA  F011         	goto	u1201
  2866   0023B0  EFDC  F011         	goto	u1200
  2867   0023B4                     u1201:
  2868   0023B4  EFA6  F011         	goto	l2456
  2869   0023B8                     u1200:
  2870   0023B8                     
  2871                           ;dc_motor.c: 112:     _delay((unsigned long)((40)*(64000000/4000.0)));
  2872   0023B8  0E04               	movlw	4
  2873   0023BA  6E19               	movwf	(??_turnLeft45+1)^0,c
  2874   0023BC  0E40               	movlw	64
  2875   0023BE  6E18               	movwf	??_turnLeft45^0,c
  2876   0023C0  0E26               	movlw	38
  2877   0023C2                     u1597:
  2878   0023C2  2EE8               	decfsz	wreg,f,c
  2879   0023C4  D7FE               	bra	u1597
  2880   0023C6  2E18               	decfsz	??_turnLeft45^0,f,c
  2881   0023C8  D7FC               	bra	u1597
  2882   0023CA  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  2883   0023CC  D7FA               	bra	u1597
  2884   0023CE  D000               	nop2	
  2885   0023D0  0012               	return		;funcret
  2886   0023D2                     __end_of_turnLeft45:
  2887                           	callstack 0
  2888                           
  2889 ;; *************** function _stop *****************
  2890 ;; Defined at:
  2891 ;;		line 84 in file "dc_motor.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2894 ;;		 -> main@motorL(9), 
  2895 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2896 ;;		 -> main@motorR(9), 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2911 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;Total ram usage:        5 bytes
  2913 ;; Hardware stack levels used: 1
  2914 ;; Hardware stack levels required when called: 2
  2915 ;; This function calls:
  2916 ;;		_setMotorPWM
  2917 ;; This function is called by:
  2918 ;;		_motor_response
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text11
  2923   002592                     __ptext11:
  2924                           	callstack 0
  2925   002592                     _stop:
  2926                           	callstack 26
  2927   002592                     
  2928                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  2929   002592  EFDE  F012         	goto	l2438
  2930   002596                     l2432:
  2931                           
  2932                           ;dc_motor.c: 87:         mL->power -=10;
  2933   002596  C014  FFD9         	movff	stop@mL,fsr2l
  2934   00259A  C015  FFDA         	movff	stop@mL+1,fsr2h
  2935   00259E  0E0A               	movlw	10
  2936   0025A0  5EDF               	subwf	indf2,f,c
  2937   0025A2                     
  2938                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2939   0025A2  0E2A               	movlw	42
  2940   0025A4  6E18               	movwf	??_stop^0,c
  2941   0025A6  0E8E               	movlw	142
  2942   0025A8                     u1607:
  2943   0025A8  2EE8               	decfsz	wreg,f,c
  2944   0025AA  D7FE               	bra	u1607
  2945   0025AC  2E18               	decfsz	??_stop^0,f,c
  2946   0025AE  D7FC               	bra	u1607
  2947   0025B0                     
  2948                           ;dc_motor.c: 89:         setMotorPWM(mL);
  2949   0025B0  C014  F00E         	movff	stop@mL,setMotorPWM@m
  2950   0025B4  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  2951   0025B8  EC83  F00E         	call	_setMotorPWM	;wreg free
  2952   0025BC                     l2438:
  2953                           
  2954                           ;dc_motor.c: 86:     while(mL->power !=0){
  2955   0025BC  C014  FFD9         	movff	stop@mL,fsr2l
  2956   0025C0  C015  FFDA         	movff	stop@mL+1,fsr2h
  2957   0025C4  50DF               	movf	indf2,w,c
  2958   0025C6  A4D8               	btfss	status,2,c
  2959   0025C8  EFE8  F012         	goto	u1181
  2960   0025CC  EFEA  F012         	goto	u1180
  2961   0025D0                     u1181:
  2962   0025D0  EFCB  F012         	goto	l2432
  2963   0025D4                     u1180:
  2964   0025D4  EFFF  F012         	goto	l2446
  2965   0025D8                     l2440:
  2966                           
  2967                           ;dc_motor.c: 92:         mR->power -=10;
  2968   0025D8  C016  FFD9         	movff	stop@mR,fsr2l
  2969   0025DC  C017  FFDA         	movff	stop@mR+1,fsr2h
  2970   0025E0  0E0A               	movlw	10
  2971   0025E2  5EDF               	subwf	indf2,f,c
  2972   0025E4                     
  2973                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2974   0025E4  0E2A               	movlw	42
  2975   0025E6  6E18               	movwf	??_stop^0,c
  2976   0025E8  0E8E               	movlw	142
  2977   0025EA                     u1617:
  2978   0025EA  2EE8               	decfsz	wreg,f,c
  2979   0025EC  D7FE               	bra	u1617
  2980   0025EE  2E18               	decfsz	??_stop^0,f,c
  2981   0025F0  D7FC               	bra	u1617
  2982   0025F2                     
  2983                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2984   0025F2  C016  F00E         	movff	stop@mR,setMotorPWM@m
  2985   0025F6  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  2986   0025FA  EC83  F00E         	call	_setMotorPWM	;wreg free
  2987   0025FE                     l2446:
  2988                           
  2989                           ;dc_motor.c: 91:     while(mR -> power !=0){
  2990   0025FE  C016  FFD9         	movff	stop@mR,fsr2l
  2991   002602  C017  FFDA         	movff	stop@mR+1,fsr2h
  2992   002606  50DF               	movf	indf2,w,c
  2993   002608  A4D8               	btfss	status,2,c
  2994   00260A  EF09  F013         	goto	u1191
  2995   00260E  EF0B  F013         	goto	u1190
  2996   002612                     u1191:
  2997   002612  EFEC  F012         	goto	l2440
  2998   002616                     u1190:
  2999   002616  0012               	return		;funcret
  3000   002618                     __end_of_stop:
  3001                           	callstack 0
  3002                           
  3003 ;; *************** function _reverseFullSpeed *****************
  3004 ;; Defined at:
  3005 ;;		line 145 in file "dc_motor.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3008 ;;		 -> main@motorL(9), 
  3009 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3010 ;;		 -> main@motorR(9), 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  i               2   24[COMRAM] int 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3025 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3026 ;;Total ram usage:        7 bytes
  3027 ;; Hardware stack levels used: 1
  3028 ;; Hardware stack levels required when called: 2
  3029 ;; This function calls:
  3030 ;;		_setMotorPWM
  3031 ;; This function is called by:
  3032 ;;		_motor_response
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text12
  3037   00247E                     __ptext12:
  3038                           	callstack 0
  3039   00247E                     _reverseFullSpeed:
  3040                           	callstack 26
  3041   00247E                     
  3042                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  3043   00247E  EE20 F001          	lfsr	2,1
  3044   002482  5014               	movf	reverseFullSpeed@mL^0,w,c
  3045   002484  26D9               	addwf	fsr2l,f,c
  3046   002486  5015               	movf	(reverseFullSpeed@mL+1)^0,w,c
  3047   002488  22DA               	addwfc	fsr2h,f,c
  3048   00248A  0E00               	movlw	0
  3049   00248C  6EDF               	movwf	indf2,c
  3050                           
  3051                           ;dc_motor.c: 148:     mR->direction=0;
  3052   00248E  EE20 F001          	lfsr	2,1
  3053   002492  5016               	movf	reverseFullSpeed@mR^0,w,c
  3054   002494  26D9               	addwf	fsr2l,f,c
  3055   002496  5017               	movf	(reverseFullSpeed@mR+1)^0,w,c
  3056   002498  22DA               	addwfc	fsr2h,f,c
  3057   00249A  0E00               	movlw	0
  3058   00249C  6EDF               	movwf	indf2,c
  3059   00249E                     
  3060                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  3061   00249E  0E00               	movlw	0
  3062   0024A0  6E1A               	movwf	(reverseFullSpeed@i+1)^0,c
  3063   0024A2  0E00               	movlw	0
  3064   0024A4  6E19               	movwf	reverseFullSpeed@i^0,c
  3065   0024A6                     l2500:
  3066                           
  3067                           ;dc_motor.c: 150:         mL->power=i;
  3068   0024A6  C014  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  3069   0024AA  C015  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  3070   0024AE  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  3071                           
  3072                           ;dc_motor.c: 151:         mR->power=i;
  3073   0024B2  C016  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  3074   0024B6  C017  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  3075   0024BA  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  3076   0024BE                     
  3077                           ;dc_motor.c: 152:         setMotorPWM(mL);
  3078   0024BE  C014  F00E         	movff	reverseFullSpeed@mL,setMotorPWM@m
  3079   0024C2  C015  F00F         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  3080   0024C6  EC83  F00E         	call	_setMotorPWM	;wreg free
  3081   0024CA                     
  3082                           ;dc_motor.c: 153:         setMotorPWM(mR);
  3083   0024CA  C016  F00E         	movff	reverseFullSpeed@mR,setMotorPWM@m
  3084   0024CE  C017  F00F         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  3085   0024D2  EC83  F00E         	call	_setMotorPWM	;wreg free
  3086   0024D6                     
  3087                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3088   0024D6  0ED0               	movlw	208
  3089   0024D8  6E18               	movwf	??_reverseFullSpeed^0,c
  3090   0024DA  0ECA               	movlw	202
  3091   0024DC                     u1627:
  3092   0024DC  2EE8               	decfsz	wreg,f,c
  3093   0024DE  D7FE               	bra	u1627
  3094   0024E0  2E18               	decfsz	??_reverseFullSpeed^0,f,c
  3095   0024E2  D7FC               	bra	u1627
  3096   0024E4                     
  3097                           ;dc_motor.c: 155:     }
  3098   0024E4  0E0A               	movlw	10
  3099   0024E6  2619               	addwf	reverseFullSpeed@i^0,f,c
  3100   0024E8  0E00               	movlw	0
  3101   0024EA  221A               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  3102   0024EC  BE1A               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  3103   0024EE  EF82  F012         	goto	u1221
  3104   0024F2  501A               	movf	(reverseFullSpeed@i+1)^0,w,c
  3105   0024F4  E109               	bnz	u1220
  3106   0024F6  0E3C               	movlw	60
  3107   0024F8  5C19               	subwf	reverseFullSpeed@i^0,w,c
  3108   0024FA  A0D8               	btfss	status,0,c
  3109   0024FC  EF82  F012         	goto	u1221
  3110   002500  EF84  F012         	goto	u1220
  3111   002504                     u1221:
  3112   002504  EF53  F012         	goto	l2500
  3113   002508                     u1220:
  3114   002508  0012               	return		;funcret
  3115   00250A                     __end_of_reverseFullSpeed:
  3116                           	callstack 0
  3117                           
  3118 ;; *************** function _setMotorPWM *****************
  3119 ;; Defined at:
  3120 ;;		line 61 in file "dc_motor.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  m               2   13[COMRAM] PTR struct DC_motor
  3123 ;;		 -> main@motorR(9), main@motorL(9), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  negDuty         1   18[COMRAM] unsigned char 
  3126 ;;  posDuty         1   17[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3139 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;Total ram usage:        6 bytes
  3141 ;; Hardware stack levels used: 1
  3142 ;; Hardware stack levels required when called: 1
  3143 ;; This function calls:
  3144 ;;		___lwdiv
  3145 ;;		___wmul
  3146 ;; This function is called by:
  3147 ;;		_stop
  3148 ;;		_turnLeft45
  3149 ;;		_turnRight45
  3150 ;;		_reverseFullSpeed
  3151 ;;		_main
  3152 ;;		_fullSpeedAhead
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text13
  3157   001D06                     __ptext13:
  3158                           	callstack 0
  3159   001D06                     _setMotorPWM:
  3160                           	callstack 29
  3161   001D06                     
  3162                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  3163   001D06  EE20 F002          	lfsr	2,2
  3164   001D0A  500E               	movf	setMotorPWM@m^0,w,c
  3165   001D0C  26D9               	addwf	fsr2l,f,c
  3166   001D0E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3167   001D10  22DA               	addwfc	fsr2h,f,c
  3168   001D12  50DF               	movf	indf2,w,c
  3169   001D14  B4D8               	btfsc	status,2,c
  3170   001D16  EF8F  F00E         	goto	u1141
  3171   001D1A  EF91  F00E         	goto	u1140
  3172   001D1E                     u1141:
  3173   001D1E  EFC5  F00E         	goto	l2388
  3174   001D22                     u1140:
  3175   001D22                     
  3176                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  3177   001D22  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3178   001D26  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3179   001D2A  50DF               	movf	indf2,w,c
  3180   001D2C  6E10               	movwf	??_setMotorPWM^0,c
  3181   001D2E  5010               	movf	??_setMotorPWM^0,w,c
  3182   001D30  6E01               	movwf	___wmul@multiplier^0,c
  3183   001D32  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3184   001D34  EE20 F003          	lfsr	2,3
  3185   001D38  500E               	movf	setMotorPWM@m^0,w,c
  3186   001D3A  26D9               	addwf	fsr2l,f,c
  3187   001D3C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3188   001D3E  22DA               	addwfc	fsr2h,f,c
  3189   001D40  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3190   001D44  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3191   001D48  EC60  F015         	call	___wmul	;wreg free
  3192   001D4C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3193   001D50  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3194   001D54  0E00               	movlw	0
  3195   001D56  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3196   001D58  0E64               	movlw	100
  3197   001D5A  6E09               	movwf	___lwdiv@divisor^0,c
  3198   001D5C  EC89  F013         	call	___lwdiv	;wreg free
  3199   001D60  EE20 F003          	lfsr	2,3
  3200   001D64  500E               	movf	setMotorPWM@m^0,w,c
  3201   001D66  26D9               	addwf	fsr2l,f,c
  3202   001D68  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3203   001D6A  22DA               	addwfc	fsr2h,f,c
  3204   001D6C  50DF               	movf	indf2,w,c
  3205   001D6E  6E11               	movwf	(??_setMotorPWM+1)^0,c
  3206   001D70  5007               	movf	?___lwdiv^0,w,c
  3207   001D72  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  3208   001D74  6E12               	movwf	setMotorPWM@posDuty^0,c
  3209   001D76                     
  3210                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  3211   001D76  EE20 F003          	lfsr	2,3
  3212   001D7A  500E               	movf	setMotorPWM@m^0,w,c
  3213   001D7C  26D9               	addwf	fsr2l,f,c
  3214   001D7E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3215   001D80  22DA               	addwfc	fsr2h,f,c
  3216   001D82  50DF               	movf	indf2,w,c
  3217   001D84  6E13               	movwf	setMotorPWM@negDuty^0,c
  3218                           
  3219                           ;dc_motor.c: 68:     }
  3220   001D86  EFE8  F00E         	goto	l2392
  3221   001D8A                     l2388:
  3222                           
  3223                           ;dc_motor.c: 70:         posDuty=0;
  3224   001D8A  0E00               	movlw	0
  3225   001D8C  6E12               	movwf	setMotorPWM@posDuty^0,c
  3226   001D8E                     
  3227                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3228   001D8E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3229   001D92  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3230   001D96  50DF               	movf	indf2,w,c
  3231   001D98  6E10               	movwf	??_setMotorPWM^0,c
  3232   001D9A  5010               	movf	??_setMotorPWM^0,w,c
  3233   001D9C  6E01               	movwf	___wmul@multiplier^0,c
  3234   001D9E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3235   001DA0  EE20 F003          	lfsr	2,3
  3236   001DA4  500E               	movf	setMotorPWM@m^0,w,c
  3237   001DA6  26D9               	addwf	fsr2l,f,c
  3238   001DA8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3239   001DAA  22DA               	addwfc	fsr2h,f,c
  3240   001DAC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3241   001DB0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3242   001DB4  EC60  F015         	call	___wmul	;wreg free
  3243   001DB8  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3244   001DBC  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3245   001DC0  0E00               	movlw	0
  3246   001DC2  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3247   001DC4  0E64               	movlw	100
  3248   001DC6  6E09               	movwf	___lwdiv@divisor^0,c
  3249   001DC8  EC89  F013         	call	___lwdiv	;wreg free
  3250   001DCC  5007               	movf	?___lwdiv^0,w,c
  3251   001DCE  6E13               	movwf	setMotorPWM@negDuty^0,c
  3252   001DD0                     l2392:
  3253                           
  3254                           ;dc_motor.c: 74:     if (m->direction) {
  3255   001DD0  EE20 F001          	lfsr	2,1
  3256   001DD4  500E               	movf	setMotorPWM@m^0,w,c
  3257   001DD6  26D9               	addwf	fsr2l,f,c
  3258   001DD8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3259   001DDA  22DA               	addwfc	fsr2h,f,c
  3260   001DDC  50DF               	movf	indf2,w,c
  3261   001DDE  B4D8               	btfsc	status,2,c
  3262   001DE0  EFF4  F00E         	goto	u1151
  3263   001DE4  EFF6  F00E         	goto	u1150
  3264   001DE8                     u1151:
  3265   001DE8  EF18  F00F         	goto	l2396
  3266   001DEC                     u1150:
  3267   001DEC                     
  3268                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  3269   001DEC  EE20 F005          	lfsr	2,5
  3270   001DF0  500E               	movf	setMotorPWM@m^0,w,c
  3271   001DF2  26D9               	addwf	fsr2l,f,c
  3272   001DF4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3273   001DF6  22DA               	addwfc	fsr2h,f,c
  3274   001DF8  CFDE F010          	movff	postinc2,??_setMotorPWM
  3275   001DFC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3276   001E00  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3277   001E04  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3278   001E08  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3279                           
  3280                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  3281   001E0C  EE20 F007          	lfsr	2,7
  3282   001E10  500E               	movf	setMotorPWM@m^0,w,c
  3283   001E12  26D9               	addwf	fsr2l,f,c
  3284   001E14  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3285   001E16  22DA               	addwfc	fsr2h,f,c
  3286   001E18  CFDE F010          	movff	postinc2,??_setMotorPWM
  3287   001E1C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3288   001E20  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3289   001E24  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3290   001E28  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3291                           
  3292                           ;dc_motor.c: 77:     } else {
  3293   001E2C  EF38  F00F         	goto	l95
  3294   001E30                     l2396:
  3295                           
  3296                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  3297   001E30  EE20 F005          	lfsr	2,5
  3298   001E34  500E               	movf	setMotorPWM@m^0,w,c
  3299   001E36  26D9               	addwf	fsr2l,f,c
  3300   001E38  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3301   001E3A  22DA               	addwfc	fsr2h,f,c
  3302   001E3C  CFDE F010          	movff	postinc2,??_setMotorPWM
  3303   001E40  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3304   001E44  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3305   001E48  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3306   001E4C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3307                           
  3308                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  3309   001E50  EE20 F007          	lfsr	2,7
  3310   001E54  500E               	movf	setMotorPWM@m^0,w,c
  3311   001E56  26D9               	addwf	fsr2l,f,c
  3312   001E58  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3313   001E5A  22DA               	addwfc	fsr2h,f,c
  3314   001E5C  CFDE F010          	movff	postinc2,??_setMotorPWM
  3315   001E60  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3316   001E64  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3317   001E68  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3318   001E6C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3319   001E70                     l95:
  3320   001E70  0012               	return		;funcret
  3321   001E72                     __end_of_setMotorPWM:
  3322                           	callstack 0
  3323                           
  3324 ;; *************** function ___wmul *****************
  3325 ;; Defined at:
  3326 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  multiplier      2    0[COMRAM] unsigned int 
  3329 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  product         2    4[COMRAM] unsigned int 
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  2    0[COMRAM] unsigned int 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0, prodl, prodh
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3341 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3344 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3345 ;;Total ram usage:        6 bytes
  3346 ;; Hardware stack levels used: 1
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_setMotorPWM
  3351 ;;		_normalise_readings
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text14
  3356   002AC0                     __ptext14:
  3357                           	callstack 0
  3358   002AC0                     ___wmul:
  3359                           	callstack 29
  3360   002AC0  5001               	movf	___wmul@multiplier^0,w,c
  3361   002AC2  0203               	mulwf	___wmul@multiplicand^0,c
  3362   002AC4  CFF3 F005          	movff	prodl,___wmul@product
  3363   002AC8  CFF4 F006          	movff	prodh,___wmul@product+1
  3364   002ACC  5001               	movf	___wmul@multiplier^0,w,c
  3365   002ACE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3366   002AD0  50F3               	movf	243,w,c
  3367   002AD2  2606               	addwf	(___wmul@product+1)^0,f,c
  3368   002AD4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3369   002AD6  0203               	mulwf	___wmul@multiplicand^0,c
  3370   002AD8  50F3               	movf	243,w,c
  3371   002ADA  2606               	addwf	(___wmul@product+1)^0,f,c
  3372   002ADC  C005  F001         	movff	___wmul@product,?___wmul
  3373   002AE0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3374   002AE4  0012               	return		;funcret
  3375   002AE6                     __end_of___wmul:
  3376                           	callstack 0
  3377                           
  3378 ;; *************** function _make_master_closeness *****************
  3379 ;; Defined at:
  3380 ;;		line 98 in file "colour_identify.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  buf             2   88[COMRAM] PTR unsigned char 
  3383 ;;		 -> main@buf(150), 
  3384 ;;  normalised_v    2   90[COMRAM] PTR unsigned int [9]
  3385 ;;		 -> card_response@normalised_values(54), 
  3386 ;;  master_close    2   92[COMRAM] PTR unsigned int 
  3387 ;;		 -> card_response@master_closeness(18), 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  i               1   94[COMRAM] enum E14551
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3399 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;      Totals:         7      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3403 ;;Total ram usage:       27 bytes
  3404 ;; Hardware stack levels used: 1
  3405 ;; Hardware stack levels required when called: 8
  3406 ;; This function calls:
  3407 ;;		___lwdiv
  3408 ;;		_sendStringSerial4
  3409 ;;		_sprintf
  3410 ;; This function is called by:
  3411 ;;		_card_response
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text15
  3416   0019D6                     __ptext15:
  3417                           	callstack 0
  3418   0019D6                     _make_master_closeness:
  3419                           	callstack 21
  3420   0019D6                     
  3421                           ;colour_identify.c: 99:     for(colour i = RED; i<=BLACK; i++){
  3422   0019D6  0E00               	movlw	0
  3423   0019D8  6E5F               	movwf	make_master_closeness@i^0,c
  3424   0019DA                     l2626:
  3425                           
  3426                           ;colour_identify.c: 100:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  3427   0019DA  505F               	movf	make_master_closeness@i^0,w,c
  3428   0019DC  0D02               	mullw	2
  3429   0019DE  CFF3 F079          	movff	prodl,??_make_master_closeness
  3430   0019E2  CFF4 F07A          	movff	prodh,??_make_master_closeness+1
  3431   0019E6  0100               	movlb	0	; () banked
  3432   0019E8  5179               	movf	??_make_master_closeness& (0+255),w,b
  3433   0019EA  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3434   0019EC  6F7B               	movwf	(??_make_master_closeness+2)& (0+255),b
  3435   0019EE  517A               	movf	(??_make_master_closeness+1)& (0+255),w,b
  3436   0019F0  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3437   0019F2  6F7C               	movwf	(??_make_master_closeness+3)& (0+255),b
  3438   0019F4  0E24               	movlw	36
  3439   0019F6  257B               	addwf	(??_make_master_closeness+2)& (0+255),w,b
  3440   0019F8  6ED9               	movwf	fsr2l,c
  3441   0019FA  0E00               	movlw	0
  3442   0019FC  217C               	addwfc	(??_make_master_closeness+3)& (0+255),w,b
  3443   0019FE  6EDA               	movwf	fsr2h,c
  3444   001A00  CFDE F07D          	movff	postinc2,??_make_master_closeness+4
  3445   001A04  CFDD F07E          	movff	postdec2,??_make_master_closeness+5
  3446   001A08  505F               	movf	make_master_closeness@i^0,w,c
  3447   001A0A  0D02               	mullw	2
  3448   001A0C  CFF3 F07F          	movff	prodl,??_make_master_closeness+6
  3449   001A10  CFF4 F080          	movff	prodh,??_make_master_closeness+7
  3450   001A14  517F               	movf	(??_make_master_closeness+6)& (0+255),w,b
  3451   001A16  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3452   001A18  6F81               	movwf	(??_make_master_closeness+8)& (0+255),b
  3453   001A1A  5180               	movf	(??_make_master_closeness+7)& (0+255),w,b
  3454   001A1C  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3455   001A1E  6F82               	movwf	(??_make_master_closeness+9)& (0+255),b
  3456   001A20  0E12               	movlw	18
  3457   001A22  2581               	addwf	(??_make_master_closeness+8)& (0+255),w,b
  3458   001A24  6ED9               	movwf	fsr2l,c
  3459   001A26  0E00               	movlw	0
  3460   001A28  2182               	addwfc	(??_make_master_closeness+9)& (0+255),w,b
  3461   001A2A  6EDA               	movwf	fsr2h,c
  3462   001A2C  CFDE F083          	movff	postinc2,??_make_master_closeness+10
  3463   001A30  CFDD F084          	movff	postdec2,??_make_master_closeness+11
  3464   001A34  505F               	movf	make_master_closeness@i^0,w,c
  3465   001A36  0D02               	mullw	2
  3466   001A38  CFF3 F085          	movff	prodl,??_make_master_closeness+12
  3467   001A3C  CFF4 F086          	movff	prodh,??_make_master_closeness+13
  3468   001A40  5185               	movf	(??_make_master_closeness+12)& (0+255),w,b
  3469   001A42  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3470   001A44  6ED9               	movwf	fsr2l,c
  3471   001A46  5186               	movf	(??_make_master_closeness+13)& (0+255),w,b
  3472   001A48  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3473   001A4A  6EDA               	movwf	fsr2h,c
  3474   001A4C  CFDE F087          	movff	postinc2,??_make_master_closeness+14
  3475   001A50  CFDD F088          	movff	postdec2,??_make_master_closeness+15
  3476   001A54  5183               	movf	(??_make_master_closeness+10)& (0+255),w,b
  3477   001A56  2587               	addwf	(??_make_master_closeness+14)& (0+255),w,b
  3478   001A58  6F89               	movwf	(??_make_master_closeness+16)& (0+255),b
  3479   001A5A  5184               	movf	(??_make_master_closeness+11)& (0+255),w,b
  3480   001A5C  2188               	addwfc	(??_make_master_closeness+15)& (0+255),w,b
  3481   001A5E  6F8A               	movwf	(??_make_master_closeness+17)& (0+255),b
  3482   001A60  517D               	movf	(??_make_master_closeness+4)& (0+255),w,b
  3483   001A62  2589               	addwf	(??_make_master_closeness+16)& (0+255),w,b
  3484   001A64  6E07               	movwf	___lwdiv@dividend^0,c
  3485   001A66  517E               	movf	(??_make_master_closeness+5)& (0+255),w,b
  3486   001A68  218A               	addwfc	(??_make_master_closeness+17)& (0+255),w,b
  3487   001A6A  6E08               	movwf	(___lwdiv@dividend+1)^0,c
  3488   001A6C  0E00               	movlw	0
  3489   001A6E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3490   001A70  0E03               	movlw	3
  3491   001A72  6E09               	movwf	___lwdiv@divisor^0,c
  3492   001A74  EC89  F013         	call	___lwdiv	;wreg free
  3493   001A78  505F               	movf	make_master_closeness@i^0,w,c
  3494   001A7A  0D02               	mullw	2
  3495   001A7C  CFF3 F08B          	movff	prodl,??_make_master_closeness+18
  3496   001A80  CFF4 F08C          	movff	prodh,??_make_master_closeness+19
  3497   001A84  0100               	movlb	0	; () banked
  3498   001A86  518B               	movf	(??_make_master_closeness+18)& (0+255),w,b
  3499   001A88  245D               	addwf	make_master_closeness@master_closeness^0,w,c
  3500   001A8A  6ED9               	movwf	fsr2l,c
  3501   001A8C  518C               	movf	(??_make_master_closeness+19)& (0+255),w,b
  3502   001A8E  205E               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  3503   001A90  6EDA               	movwf	fsr2h,c
  3504   001A92  C007  FFDE         	movff	?___lwdiv,postinc2
  3505   001A96  C008  FFDD         	movff	?___lwdiv+1,postdec2
  3506   001A9A                     
  3507                           ; BSR set to: 0
  3508                           ;colour_identify.c: 101:         sprintf(buf, "MC Avg: normRED %d, normGREEN %d, normBLU
      +                          E %d, master %d \n", normalised_values[RED][i], normalised_values[GREEN][i],normalised_v
      +                          alues[BLUE][i], master_closeness[i]);
  3509   001A9A  C059  F060         	movff	make_master_closeness@buf,sprintf@s
  3510   001A9E  C05A  F061         	movff	make_master_closeness@buf+1,sprintf@s+1
  3511   001AA2  0E01               	movlw	low STR_2
  3512   001AA4  6F62               	movwf	sprintf@fmt& (0+255),b
  3513   001AA6  0E0E               	movlw	high STR_2
  3514   001AA8  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  3515   001AAA  505F               	movf	make_master_closeness@i^0,w,c
  3516   001AAC  0D02               	mullw	2
  3517   001AAE  CFF3 F079          	movff	prodl,??_make_master_closeness
  3518   001AB2  CFF4 F07A          	movff	prodh,??_make_master_closeness+1
  3519   001AB6  5179               	movf	??_make_master_closeness& (0+255),w,b
  3520   001AB8  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3521   001ABA  6ED9               	movwf	fsr2l,c
  3522   001ABC  517A               	movf	(??_make_master_closeness+1)& (0+255),w,b
  3523   001ABE  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3524   001AC0  6EDA               	movwf	fsr2h,c
  3525   001AC2  CFDE F064          	movff	postinc2,?_sprintf+4
  3526   001AC6  CFDD F065          	movff	postdec2,?_sprintf+5
  3527   001ACA  505F               	movf	make_master_closeness@i^0,w,c
  3528   001ACC  0D02               	mullw	2
  3529   001ACE  CFF3 F07B          	movff	prodl,??_make_master_closeness+2
  3530   001AD2  CFF4 F07C          	movff	prodh,??_make_master_closeness+3
  3531   001AD6  517B               	movf	(??_make_master_closeness+2)& (0+255),w,b
  3532   001AD8  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3533   001ADA  6F7D               	movwf	(??_make_master_closeness+4)& (0+255),b
  3534   001ADC  517C               	movf	(??_make_master_closeness+3)& (0+255),w,b
  3535   001ADE  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3536   001AE0  6F7E               	movwf	(??_make_master_closeness+5)& (0+255),b
  3537   001AE2  0E12               	movlw	18
  3538   001AE4  257D               	addwf	(??_make_master_closeness+4)& (0+255),w,b
  3539   001AE6  6ED9               	movwf	fsr2l,c
  3540   001AE8  0E00               	movlw	0
  3541   001AEA  217E               	addwfc	(??_make_master_closeness+5)& (0+255),w,b
  3542   001AEC  6EDA               	movwf	fsr2h,c
  3543   001AEE  CFDE F066          	movff	postinc2,?_sprintf+6
  3544   001AF2  CFDD F067          	movff	postdec2,?_sprintf+7
  3545   001AF6  505F               	movf	make_master_closeness@i^0,w,c
  3546   001AF8  0D02               	mullw	2
  3547   001AFA  CFF3 F07F          	movff	prodl,??_make_master_closeness+6
  3548   001AFE  CFF4 F080          	movff	prodh,??_make_master_closeness+7
  3549   001B02  517F               	movf	(??_make_master_closeness+6)& (0+255),w,b
  3550   001B04  245B               	addwf	make_master_closeness@normalised_values^0,w,c
  3551   001B06  6F81               	movwf	(??_make_master_closeness+8)& (0+255),b
  3552   001B08  5180               	movf	(??_make_master_closeness+7)& (0+255),w,b
  3553   001B0A  205C               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  3554   001B0C  6F82               	movwf	(??_make_master_closeness+9)& (0+255),b
  3555   001B0E  0E24               	movlw	36
  3556   001B10  2581               	addwf	(??_make_master_closeness+8)& (0+255),w,b
  3557   001B12  6ED9               	movwf	fsr2l,c
  3558   001B14  0E00               	movlw	0
  3559   001B16  2182               	addwfc	(??_make_master_closeness+9)& (0+255),w,b
  3560   001B18  6EDA               	movwf	fsr2h,c
  3561   001B1A  CFDE F068          	movff	postinc2,?_sprintf+8
  3562   001B1E  CFDD F069          	movff	postdec2,?_sprintf+9
  3563   001B22  505F               	movf	make_master_closeness@i^0,w,c
  3564   001B24  0D02               	mullw	2
  3565   001B26  CFF3 F083          	movff	prodl,??_make_master_closeness+10
  3566   001B2A  CFF4 F084          	movff	prodh,??_make_master_closeness+11
  3567   001B2E  5183               	movf	(??_make_master_closeness+10)& (0+255),w,b
  3568   001B30  245D               	addwf	make_master_closeness@master_closeness^0,w,c
  3569   001B32  6ED9               	movwf	fsr2l,c
  3570   001B34  5184               	movf	(??_make_master_closeness+11)& (0+255),w,b
  3571   001B36  205E               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  3572   001B38  6EDA               	movwf	fsr2h,c
  3573   001B3A  CFDE F06A          	movff	postinc2,?_sprintf+10
  3574   001B3E  CFDD F06B          	movff	postdec2,?_sprintf+11
  3575   001B42  ECC3  F013         	call	_sprintf	;wreg free
  3576   001B46                     
  3577                           ;colour_identify.c: 102:         sendStringSerial4(buf);
  3578   001B46  C059  F002         	movff	make_master_closeness@buf,sendStringSerial4@string
  3579   001B4A  C05A  F003         	movff	make_master_closeness@buf+1,sendStringSerial4@string+1
  3580   001B4E  EC0A  F015         	call	_sendStringSerial4	;wreg free
  3581   001B52                     
  3582                           ;colour_identify.c: 103:                 _delay((unsigned long)((200)*(64000000/4000.0))
      +                          );
  3583   001B52  0E11               	movlw	17
  3584   001B54  0100               	movlb	0	; () banked
  3585   001B56  6F7A               	movwf	(??_make_master_closeness+1)& (0+255),b
  3586   001B58  0E3C               	movlw	60
  3587   001B5A  6F79               	movwf	??_make_master_closeness& (0+255),b
  3588   001B5C  0ECB               	movlw	203
  3589   001B5E                     u1637:
  3590   001B5E  2EE8               	decfsz	wreg,f,c
  3591   001B60  D7FE               	bra	u1637
  3592   001B62  2F79               	decfsz	??_make_master_closeness& (0+255),f,b
  3593   001B64  D7FC               	bra	u1637
  3594   001B66  2F7A               	decfsz	(??_make_master_closeness+1)& (0+255),f,b
  3595   001B68  D7FA               	bra	u1637
  3596   001B6A                     
  3597                           ;colour_identify.c: 105:     }
  3598   001B6A  2A5F               	incf	make_master_closeness@i^0,f,c
  3599   001B6C  0E08               	movlw	8
  3600   001B6E  645F               	cpfsgt	make_master_closeness@i^0,c
  3601   001B70  EFBC  F00D         	goto	u1291
  3602   001B74  EFBE  F00D         	goto	u1290
  3603   001B78                     u1291:
  3604   001B78  EFED  F00C         	goto	l2626
  3605   001B7C                     u1290:
  3606   001B7C  0012               	return		;funcret
  3607   001B7E                     __end_of_make_master_closeness:
  3608                           	callstack 0
  3609                           
  3610 ;; *************** function _sprintf *****************
  3611 ;; Defined at:
  3612 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  s               2    0[BANK0 ] PTR unsigned char 
  3615 ;;		 -> main@buf(150), 
  3616 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  3617 ;;		 -> STR_4(10), STR_3(26), STR_2(59), STR_1(41), 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  f              11   14[BANK0 ] struct _IO_FILE
  3620 ;;  ap              2   12[BANK0 ] PTR void [1]
  3621 ;;		 -> ?_sprintf(2), 
  3622 ;;  ret             2    0        int 
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  2    0[BANK0 ] int 
  3625 ;; Registers used:
  3626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3632 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;Total ram usage:       25 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; Hardware stack levels required when called: 7
  3639 ;; This function calls:
  3640 ;;		_vfprintf
  3641 ;; This function is called by:
  3642 ;;		_main
  3643 ;;		_make_master_closeness
  3644 ;;		_card_response
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text16
  3649   002786                     __ptext16:
  3650                           	callstack 0
  3651   002786                     _sprintf:
  3652                           	callstack 23
  3653   002786  0E64               	movlw	low (?_sprintf+4)
  3654   002788  0100               	movlb	0	; () banked
  3655   00278A  6F6C               	movwf	sprintf@ap& (0+255),b
  3656   00278C  0E00               	movlw	high (?_sprintf+4)
  3657   00278E  6F6D               	movwf	(sprintf@ap+1)& (0+255),b
  3658   002790  C060  F06E         	movff	sprintf@s,sprintf@f
  3659   002794  C061  F06F         	movff	sprintf@s+1,sprintf@f+1
  3660   002798                     
  3661                           ; BSR set to: 0
  3662   002798  0E00               	movlw	0
  3663   00279A  6F72               	movwf	(sprintf@f+4)& (0+255),b
  3664   00279C  0E00               	movlw	0
  3665   00279E  6F71               	movwf	(sprintf@f+3)& (0+255),b
  3666   0027A0                     
  3667                           ; BSR set to: 0
  3668   0027A0  0E00               	movlw	0
  3669   0027A2  6F78               	movwf	(sprintf@f+10)& (0+255),b
  3670   0027A4  0E00               	movlw	0
  3671   0027A6  6F77               	movwf	(sprintf@f+9)& (0+255),b
  3672   0027A8                     
  3673                           ; BSR set to: 0
  3674   0027A8  0E6E               	movlw	low sprintf@f
  3675   0027AA  6E51               	movwf	vfprintf@fp^0,c
  3676   0027AC  0E00               	movlw	high sprintf@f
  3677   0027AE  6E52               	movwf	(vfprintf@fp+1)^0,c
  3678   0027B0  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  3679   0027B4  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  3680   0027B8  0E6C               	movlw	low sprintf@ap
  3681   0027BA  6E55               	movwf	vfprintf@ap^0,c
  3682   0027BC  0E00               	movlw	high sprintf@ap
  3683   0027BE  6E56               	movwf	(vfprintf@ap+1)^0,c
  3684   0027C0  ECEC  F013         	call	_vfprintf	;wreg free
  3685   0027C4  0100               	movlb	0	; () banked
  3686   0027C6  5171               	movf	(sprintf@f+3)& (0+255),w,b
  3687   0027C8  2560               	addwf	sprintf@s& (0+255),w,b
  3688   0027CA  6ED9               	movwf	fsr2l,c
  3689   0027CC  5172               	movf	(sprintf@f+4)& (0+255),w,b
  3690   0027CE  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  3691   0027D0  6EDA               	movwf	fsr2h,c
  3692   0027D2  0E00               	movlw	0
  3693   0027D4  6EDF               	movwf	indf2,c
  3694   0027D6                     
  3695                           ; BSR set to: 0
  3696   0027D6  0012               	return		;funcret
  3697   0027D8                     __end_of_sprintf:
  3698                           	callstack 0
  3699                           
  3700 ;; *************** function _vfprintf *****************
  3701 ;; Defined at:
  3702 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  3705 ;;		 -> sprintf@f(11), 
  3706 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  3707 ;;		 -> STR_4(10), STR_3(26), STR_2(59), STR_1(41), 
  3708 ;;  ap              2   84[COMRAM] PTR PTR void 
  3709 ;;		 -> sprintf@ap(2), 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  3712 ;;		 -> STR_4(10), STR_3(26), STR_2(59), STR_1(41), 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  2   80[COMRAM] int 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3722 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3725 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3726 ;;Total ram usage:        8 bytes
  3727 ;; Hardware stack levels used: 1
  3728 ;; Hardware stack levels required when called: 6
  3729 ;; This function calls:
  3730 ;;		_vfpfcnvrt
  3731 ;; This function is called by:
  3732 ;;		_sprintf
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text17
  3737   0027D8                     __ptext17:
  3738                           	callstack 0
  3739   0027D8                     _vfprintf:
  3740                           	callstack 23
  3741   0027D8                     
  3742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  3743   0027D8  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  3744   0027DC  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  3745                           
  3746                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3747   0027E0  EF00  F014         	goto	l2406
  3748   0027E4                     l2404:
  3749                           
  3750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3751   0027E4  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  3752   0027E8  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  3753   0027EC  0E57               	movlw	low vfprintf@cfmt
  3754   0027EE  6E41               	movwf	vfpfcnvrt@fmt^0,c
  3755   0027F0  0E00               	movlw	high vfprintf@cfmt
  3756   0027F2  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  3757   0027F4  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  3758   0027F8  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  3759   0027FC  ECEB  F00F         	call	_vfpfcnvrt	;wreg free
  3760   002800                     l2406:
  3761                           
  3762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3763   002800  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  3764   002804  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  3765   002808                     	if	0	;tblptru may be non-zero
  3766   002808                     	endif
  3767   002808                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3768   002808  0E00               	movlw	low (__mediumconst shr (0+16))
  3769   00280A  6EF8               	movwf	tblptru,c
  3770   00280C                     	endif
  3771   00280C  0008               	tblrd		*
  3772   00280E  50F5               	movf	tablat,w,c
  3773   002810  0900               	iorlw	0
  3774   002812  A4D8               	btfss	status,2,c
  3775   002814  EF0E  F014         	goto	u1171
  3776   002818  EF10  F014         	goto	u1170
  3777   00281C                     u1171:
  3778   00281C  EFF2  F013         	goto	l2404
  3779   002820                     u1170:
  3780   002820                     
  3781                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  3782   002820  0E00               	movlw	0
  3783   002822  6E52               	movwf	(?_vfprintf+1)^0,c
  3784   002824  0E00               	movlw	0
  3785   002826  6E51               	movwf	?_vfprintf^0,c
  3786   002828  0012               	return		;funcret
  3787   00282A                     __end_of_vfprintf:
  3788                           	callstack 0
  3789                           
  3790 ;; *************** function _vfpfcnvrt *****************
  3791 ;; Defined at:
  3792 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  3795 ;;		 -> sprintf@f(11), 
  3796 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  3797 ;;		 -> vfprintf@cfmt(2), 
  3798 ;;  ap              2   66[COMRAM] PTR PTR void 
  3799 ;;		 -> sprintf@ap(2), 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  convarg         8   70[COMRAM] struct .
  3802 ;;  cp              2   78[COMRAM] PTR unsigned char 
  3803 ;;		 -> STR_4(10), STR_3(26), STR_2(59), STR_1(41), 
  3804 ;;  i               2    0        int 
  3805 ;;  done            2    0        int 
  3806 ;;  c               1    0        unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3816 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;Total ram usage:       18 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; Hardware stack levels required when called: 5
  3823 ;; This function calls:
  3824 ;;		_dtoa
  3825 ;;		_fputc
  3826 ;; This function is called by:
  3827 ;;		_vfprintf
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text18
  3832   001FD6                     __ptext18:
  3833                           	callstack 0
  3834   001FD6                     _vfpfcnvrt:
  3835                           	callstack 23
  3836   001FD6                     
  3837                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  3838   001FD6  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3839   001FDA  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3840   001FDE  CFDE FFF6          	movff	postinc2,tblptrl
  3841   001FE2  CFDD FFF7          	movff	postdec2,tblptrh
  3842   001FE6                     	if	0	;tblptru may be non-zero
  3843   001FE6                     	endif
  3844   001FE6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3845   001FE6  0E00               	movlw	low (__mediumconst shr (0+16))
  3846   001FE8  6EF8               	movwf	tblptru,c
  3847   001FEA                     	endif
  3848   001FEA  0008               	tblrd		*
  3849   001FEC  50F5               	movf	tablat,w,c
  3850   001FEE  0A25               	xorlw	37
  3851   001FF0  A4D8               	btfss	status,2,c
  3852   001FF2  EFFD  F00F         	goto	u1091
  3853   001FF6  EFFF  F00F         	goto	u1090
  3854   001FFA                     u1091:
  3855   001FFA  EF83  F010         	goto	l2346
  3856   001FFE                     u1090:
  3857   001FFE                     
  3858                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  3859   001FFE  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3860   002002  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3861   002006  2ADE               	incf	postinc2,f,c
  3862   002008  0E00               	movlw	0
  3863   00200A  22DD               	addwfc	postdec2,f,c
  3864   00200C                     
  3865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  3866   00200C  0E00               	movlw	0
  3867   00200E  0100               	movlb	0	; () banked
  3868   002010  6FE7               	movwf	(_width+1)& (0+255),b
  3869   002012  0E00               	movlw	0
  3870   002014  6FE6               	movwf	_width& (0+255),b
  3871   002016  C0E6  F0EA         	movff	_width,_flags
  3872   00201A                     
  3873                           ; BSR set to: 0
  3874                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  3875   00201A  69E8               	setf	_prec& (0+255),b
  3876   00201C  69E9               	setf	(_prec+1)& (0+255),b
  3877   00201E                     
  3878                           ; BSR set to: 0
  3879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  3880   00201E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3881   002022  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3882   002026  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  3883   00202A  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  3884   00202E                     
  3885                           ; BSR set to: 0
  3886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3887   00202E  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3888   002032  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3889   002036                     	if	0	;tblptru may be non-zero
  3890   002036                     	endif
  3891   002036                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3892   002036  0E00               	movlw	low (__mediumconst shr (0+16))
  3893   002038  6EF8               	movwf	tblptru,c
  3894   00203A                     	endif
  3895   00203A  0008               	tblrd		*
  3896   00203C  50F5               	movf	tablat,w,c
  3897   00203E  0A64               	xorlw	100
  3898   002040  B4D8               	btfsc	status,2,c
  3899   002042  EF25  F010         	goto	u1101
  3900   002046  EF27  F010         	goto	u1100
  3901   00204A                     u1101:
  3902   00204A  EF37  F010         	goto	l2336
  3903   00204E                     u1100:
  3904   00204E                     
  3905                           ; BSR set to: 0
  3906   00204E  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3907   002052  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3908   002056                     	if	0	;tblptru may be non-zero
  3909   002056                     	endif
  3910   002056                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3911   002056  0E00               	movlw	low (__mediumconst shr (0+16))
  3912   002058  6EF8               	movwf	tblptru,c
  3913   00205A                     	endif
  3914   00205A  0008               	tblrd		*
  3915   00205C  50F5               	movf	tablat,w,c
  3916   00205E  0A69               	xorlw	105
  3917   002060  A4D8               	btfss	status,2,c
  3918   002062  EF35  F010         	goto	u1111
  3919   002066  EF37  F010         	goto	u1110
  3920   00206A                     u1111:
  3921   00206A  EF7A  F010         	goto	l2342
  3922   00206E                     u1110:
  3923   00206E                     l2336:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3927   00206E  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3928   002072  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3929   002076  CFDF F045          	movff	indf2,??_vfpfcnvrt
  3930   00207A  0E02               	movlw	2
  3931   00207C  26DE               	addwf	postinc2,f,c
  3932   00207E  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  3933   002082  0E00               	movlw	0
  3934   002084  22DD               	addwfc	postdec2,f,c
  3935   002086  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3936   00208A  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3937   00208E  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  3938   002092  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  3939   002096  0E00               	movlw	0
  3940   002098  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3941   00209A  0EFF               	movlw	-1
  3942   00209C  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  3943   00209E  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  3944   0020A0  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  3945   0020A2  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  3946   0020A4  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  3947   0020A6  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  3948                           
  3949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  3950   0020A8  0E01               	movlw	1
  3951   0020AA  244F               	addwf	vfpfcnvrt@cp^0,w,c
  3952   0020AC  6E45               	movwf	??_vfpfcnvrt^0,c
  3953   0020AE  0E00               	movlw	0
  3954   0020B0  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3955   0020B2  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  3956   0020B4  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3957   0020B8  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3958   0020BC  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  3959   0020C0  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3960   0020C4                     
  3961                           ; BSR set to: 0
  3962                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  3963   0020C4  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  3964   0020C8  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  3965   0020CC  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  3966   0020D0  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  3967   0020D4  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  3968   0020D8  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  3969   0020DC  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  3970   0020E0  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  3971   0020E4  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  3972   0020E8  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  3973   0020EC  ECD0  F008         	call	_dtoa	;wreg free
  3974   0020F0  EF99  F010         	goto	l1173
  3975   0020F4                     l2342:
  3976                           
  3977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  3978   0020F4  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3979   0020F8  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3980   0020FC  2ADE               	incf	postinc2,f,c
  3981   0020FE  0E00               	movlw	0
  3982   002100  22DD               	addwfc	postdec2,f,c
  3983   002102  EF99  F010         	goto	l1173
  3984   002106                     l2346:
  3985                           
  3986                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  3987   002106  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3988   00210A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3989   00210E  CFDE FFF6          	movff	postinc2,tblptrl
  3990   002112  CFDD FFF7          	movff	postdec2,tblptrh
  3991   002116                     	if	0	;tblptru may be non-zero
  3992   002116                     	endif
  3993   002116                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3994   002116  0E00               	movlw	low (__mediumconst shr (0+16))
  3995   002118  6EF8               	movwf	tblptru,c
  3996   00211A                     	endif
  3997   00211A  0008               	tblrd		*
  3998   00211C  50F5               	movf	tablat,w,c
  3999   00211E  6E01               	movwf	fputc@c^0,c
  4000   002120  6A02               	clrf	(fputc@c+1)^0,c
  4001   002122  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4002   002126  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4003   00212A  EC2D  F011         	call	_fputc	;wreg free
  4004   00212E  EF7A  F010         	goto	l2342
  4005   002132                     l1173:
  4006   002132  0012               	return		;funcret
  4007   002134                     __end_of_vfpfcnvrt:
  4008                           	callstack 0
  4009                           
  4010 ;; *************** function _dtoa *****************
  4011 ;; Defined at:
  4012 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  4015 ;;		 -> sprintf@f(11), 
  4016 ;;  d               8   29[COMRAM] long long 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  n               8   51[COMRAM] long long 
  4019 ;;  i               2   59[COMRAM] int 
  4020 ;;  w               2   49[COMRAM] int 
  4021 ;;  p               2   47[COMRAM] int 
  4022 ;;  s               1   61[COMRAM] unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4032 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;Total ram usage:       35 bytes
  4037 ;; Hardware stack levels used: 1
  4038 ;; Hardware stack levels required when called: 4
  4039 ;; This function calls:
  4040 ;;		___aodiv
  4041 ;;		___aomod
  4042 ;;		_abs
  4043 ;;		_pad
  4044 ;; This function is called by:
  4045 ;;		_vfpfcnvrt
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text19
  4050   0011A0                     __ptext19:
  4051                           	callstack 0
  4052   0011A0                     _dtoa:
  4053                           	callstack 23
  4054   0011A0                     
  4055                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4056   0011A0  C01E  F034         	movff	dtoa@d,dtoa@n
  4057   0011A4  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  4058   0011A8  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  4059   0011AC  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  4060   0011B0  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  4061   0011B4  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  4062   0011B8  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  4063   0011BC  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  4064   0011C0                     
  4065                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4066   0011C0  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  4067   0011C2  EFE5  F008         	goto	u941
  4068   0011C6  EFE8  F008         	goto	u940
  4069   0011CA                     u941:
  4070   0011CA  0E01               	movlw	1
  4071   0011CC  EFE9  F008         	goto	u950
  4072   0011D0                     u940:
  4073   0011D0  0E00               	movlw	0
  4074   0011D2                     u950:
  4075   0011D2  6E3E               	movwf	dtoa@s^0,c
  4076   0011D4                     
  4077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4078   0011D4  503E               	movf	dtoa@s^0,w,c
  4079   0011D6  B4D8               	btfsc	status,2,c
  4080   0011D8  EFF0  F008         	goto	u961
  4081   0011DC  EFF2  F008         	goto	u960
  4082   0011E0                     u961:
  4083   0011E0  EF02  F009         	goto	l2246
  4084   0011E4                     u960:
  4085   0011E4                     
  4086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4087   0011E4  1E3B               	comf	(dtoa@n+7)^0,f,c
  4088   0011E6  1E3A               	comf	(dtoa@n+6)^0,f,c
  4089   0011E8  1E39               	comf	(dtoa@n+5)^0,f,c
  4090   0011EA  1E38               	comf	(dtoa@n+4)^0,f,c
  4091   0011EC  1E37               	comf	(dtoa@n+3)^0,f,c
  4092   0011EE  1E36               	comf	(dtoa@n+2)^0,f,c
  4093   0011F0  1E35               	comf	(dtoa@n+1)^0,f,c
  4094   0011F2  6C34               	negf	dtoa@n^0,c
  4095   0011F4  0E00               	movlw	0
  4096   0011F6  2235               	addwfc	(dtoa@n+1)^0,f,c
  4097   0011F8  2236               	addwfc	(dtoa@n+2)^0,f,c
  4098   0011FA  2237               	addwfc	(dtoa@n+3)^0,f,c
  4099   0011FC  2238               	addwfc	(dtoa@n+4)^0,f,c
  4100   0011FE  2239               	addwfc	(dtoa@n+5)^0,f,c
  4101   001200  223A               	addwfc	(dtoa@n+6)^0,f,c
  4102   001202  223B               	addwfc	(dtoa@n+7)^0,f,c
  4103   001204                     l2246:
  4104                           
  4105                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4106   001204  0100               	movlb	0	; () banked
  4107   001206  BFE9               	btfsc	(_prec+1)& (0+255),7,b
  4108   001208  EF10  F009         	goto	u970
  4109   00120C  51E9               	movf	(_prec+1)& (0+255),w,b
  4110   00120E  E106               	bnz	u971
  4111   001210  05E8               	decf	_prec& (0+255),w,b
  4112   001212  B0D8               	btfsc	status,0,c
  4113   001214  EF0E  F009         	goto	u971
  4114   001218  EF10  F009         	goto	u970
  4115   00121C                     u971:
  4116   00121C  EF16  F009         	goto	l1152
  4117   001220                     u970:
  4118   001220                     
  4119                           ; BSR set to: 0
  4120   001220  0E00               	movlw	0
  4121   001222  6E31               	movwf	(dtoa@p+1)^0,c
  4122   001224  0E01               	movlw	1
  4123   001226  6E30               	movwf	dtoa@p^0,c
  4124   001228  EF1A  F009         	goto	l1154
  4125   00122C                     l1152:
  4126                           
  4127                           ; BSR set to: 0
  4128   00122C  C0E8  F030         	movff	_prec,dtoa@p
  4129   001230  C0E9  F031         	movff	_prec+1,dtoa@p+1
  4130   001234                     l1154:
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4134   001234  C0E6  F032         	movff	_width,dtoa@w
  4135   001238  C0E7  F033         	movff	_width+1,dtoa@w+1
  4136   00123C                     
  4137                           ; BSR set to: 0
  4138                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4139   00123C  503E               	movf	dtoa@s^0,w,c
  4140   00123E  B4D8               	btfsc	status,2,c
  4141   001240  EF24  F009         	goto	u981
  4142   001244  EF26  F009         	goto	u980
  4143   001248                     u981:
  4144   001248  EF3D  F009         	goto	l1155
  4145   00124C                     u980:
  4146   00124C                     
  4147                           ; BSR set to: 0
  4148                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4149   00124C  0632               	decf	dtoa@w^0,f,c
  4150   00124E  A0D8               	btfss	status,0,c
  4151   001250  0633               	decf	(dtoa@w+1)^0,f,c
  4152   001252                     
  4153                           ; BSR set to: 0
  4154                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4155   001252  503E               	movf	dtoa@s^0,w,c
  4156   001254  A4D8               	btfss	status,2,c
  4157   001256  EF2F  F009         	goto	u991
  4158   00125A  EF31  F009         	goto	u990
  4159   00125E                     u991:
  4160   00125E  EF37  F009         	goto	l2258
  4161   001262                     u990:
  4162   001262                     
  4163                           ; BSR set to: 0
  4164   001262  0E00               	movlw	0
  4165   001264  6E2F               	movwf	(_dtoa$2284+1)^0,c
  4166   001266  0E2B               	movlw	43
  4167   001268  6E2E               	movwf	_dtoa$2284^0,c
  4168   00126A  EF3B  F009         	goto	l2260
  4169   00126E                     l2258:
  4170                           
  4171                           ; BSR set to: 0
  4172   00126E  0E00               	movlw	0
  4173   001270  6E2F               	movwf	(_dtoa$2284+1)^0,c
  4174   001272  0E2D               	movlw	45
  4175   001274  6E2E               	movwf	_dtoa$2284^0,c
  4176   001276                     l2260:
  4177                           
  4178                           ; BSR set to: 0
  4179   001276  C02E  F03E         	movff	_dtoa$2284,dtoa@s
  4180   00127A                     l1155:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  4184   00127A  0E00               	movlw	0
  4185   00127C  6E3D               	movwf	(dtoa@i+1)^0,c
  4186   00127E  0E1F               	movlw	31
  4187   001280  6E3C               	movwf	dtoa@i^0,c
  4188   001282                     
  4189                           ; BSR set to: 0
  4190                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  4191   001282  0E00               	movlw	0
  4192   001284  0102               	movlb	2	; () banked
  4193   001286  6F5B               	movwf	(_dbuf+31)& (0+255),b
  4194                           
  4195                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4196   001288  EFC2  F009         	goto	l2274
  4197   00128C                     l2264:
  4198                           
  4199                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  4200   00128C  063C               	decf	dtoa@i^0,f,c
  4201   00128E  A0D8               	btfss	status,0,c
  4202   001290  063D               	decf	(dtoa@i+1)^0,f,c
  4203   001292                     
  4204                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4205   001292  0E3C               	movlw	low _dbuf
  4206   001294  243C               	addwf	dtoa@i^0,w,c
  4207   001296  6ED9               	movwf	fsr2l,c
  4208   001298  0E02               	movlw	high _dbuf
  4209   00129A  203D               	addwfc	(dtoa@i+1)^0,w,c
  4210   00129C  6EDA               	movwf	fsr2h,c
  4211   00129E  C034  F001         	movff	dtoa@n,___aomod@dividend
  4212   0012A2  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  4213   0012A6  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  4214   0012AA  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  4215   0012AE  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  4216   0012B2  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  4217   0012B6  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  4218   0012BA  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  4219   0012BE  0E0A               	movlw	10
  4220   0012C0  6E09               	movwf	___aomod@divisor^0,c
  4221   0012C2  0E00               	movlw	0
  4222   0012C4  6E0A               	movwf	(___aomod@divisor+1)^0,c
  4223   0012C6  0E00               	movlw	0
  4224   0012C8  6E0B               	movwf	(___aomod@divisor+2)^0,c
  4225   0012CA  0E00               	movlw	0
  4226   0012CC  6E0C               	movwf	(___aomod@divisor+3)^0,c
  4227   0012CE  0E00               	movlw	0
  4228   0012D0  6E0D               	movwf	(___aomod@divisor+4)^0,c
  4229   0012D2  0E00               	movlw	0
  4230   0012D4  6E0E               	movwf	(___aomod@divisor+5)^0,c
  4231   0012D6  0E00               	movlw	0
  4232   0012D8  6E0F               	movwf	(___aomod@divisor+6)^0,c
  4233   0012DA  0E00               	movlw	0
  4234   0012DC  6E10               	movwf	(___aomod@divisor+7)^0,c
  4235   0012DE  EC39  F00F         	call	___aomod	;wreg free
  4236   0012E2  C001  F026         	movff	?___aomod,??_dtoa
  4237   0012E6  C002  F027         	movff	?___aomod+1,??_dtoa+1
  4238   0012EA  C003  F028         	movff	?___aomod+2,??_dtoa+2
  4239   0012EE  C004  F029         	movff	?___aomod+3,??_dtoa+3
  4240   0012F2  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  4241   0012F6  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  4242   0012FA  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  4243   0012FE  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  4244   001302  C026  F013         	movff	??_dtoa,abs@a
  4245   001306  C027  F014         	movff	??_dtoa+1,abs@a+1
  4246   00130A  ECD0  F014         	call	_abs	;wreg free
  4247   00130E  5013               	movf	?_abs^0,w,c
  4248   001310  0F30               	addlw	48
  4249   001312  6EDF               	movwf	indf2,c
  4250   001314                     
  4251                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  4252   001314  0630               	decf	dtoa@p^0,f,c
  4253   001316  A0D8               	btfss	status,0,c
  4254   001318  0631               	decf	(dtoa@p+1)^0,f,c
  4255   00131A                     
  4256                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  4257   00131A  0632               	decf	dtoa@w^0,f,c
  4258   00131C  A0D8               	btfss	status,0,c
  4259   00131E  0633               	decf	(dtoa@w+1)^0,f,c
  4260   001320                     
  4261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  4262   001320  C034  F001         	movff	dtoa@n,___aodiv@dividend
  4263   001324  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  4264   001328  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  4265   00132C  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  4266   001330  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  4267   001334  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  4268   001338  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  4269   00133C  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  4270   001340  0E0A               	movlw	10
  4271   001342  6E09               	movwf	___aodiv@divisor^0,c
  4272   001344  0E00               	movlw	0
  4273   001346  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  4274   001348  0E00               	movlw	0
  4275   00134A  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  4276   00134C  0E00               	movlw	0
  4277   00134E  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  4278   001350  0E00               	movlw	0
  4279   001352  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  4280   001354  0E00               	movlw	0
  4281   001356  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  4282   001358  0E00               	movlw	0
  4283   00135A  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  4284   00135C  0E00               	movlw	0
  4285   00135E  6E10               	movwf	(___aodiv@divisor+7)^0,c
  4286   001360  ECBF  F00D         	call	___aodiv	;wreg free
  4287   001364  C001  F034         	movff	?___aodiv,dtoa@n
  4288   001368  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  4289   00136C  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  4290   001370  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  4291   001374  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  4292   001378  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  4293   00137C  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  4294   001380  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  4295   001384                     l2274:
  4296                           
  4297                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4298   001384  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  4299   001386  EFCD  F009         	goto	u1001
  4300   00138A  503D               	movf	(dtoa@i+1)^0,w,c
  4301   00138C  E108               	bnz	u1000
  4302   00138E  043C               	decf	dtoa@i^0,w,c
  4303   001390  A0D8               	btfss	status,0,c
  4304   001392  EFCD  F009         	goto	u1001
  4305   001396  EFCF  F009         	goto	u1000
  4306   00139A                     u1001:
  4307   00139A  EFEB  F009         	goto	l2280
  4308   00139E                     u1000:
  4309   00139E  5034               	movf	dtoa@n^0,w,c
  4310   0013A0  1035               	iorwf	(dtoa@n+1)^0,w,c
  4311   0013A2  1036               	iorwf	(dtoa@n+2)^0,w,c
  4312   0013A4  1037               	iorwf	(dtoa@n+3)^0,w,c
  4313   0013A6  1038               	iorwf	(dtoa@n+4)^0,w,c
  4314   0013A8  1039               	iorwf	(dtoa@n+5)^0,w,c
  4315   0013AA  103A               	iorwf	(dtoa@n+6)^0,w,c
  4316   0013AC  103B               	iorwf	(dtoa@n+7)^0,w,c
  4317   0013AE  A4D8               	btfss	status,2,c
  4318   0013B0  EFDC  F009         	goto	u1011
  4319   0013B4  EFDE  F009         	goto	u1010
  4320   0013B8                     u1011:
  4321   0013B8  EF46  F009         	goto	l2264
  4322   0013BC                     u1010:
  4323   0013BC  BE31               	btfsc	(dtoa@p+1)^0,7,c
  4324   0013BE  EFEB  F009         	goto	u1020
  4325   0013C2  5031               	movf	(dtoa@p+1)^0,w,c
  4326   0013C4  E106               	bnz	u1021
  4327   0013C6  0430               	decf	dtoa@p^0,w,c
  4328   0013C8  B0D8               	btfsc	status,0,c
  4329   0013CA  EFE9  F009         	goto	u1021
  4330   0013CE  EFEB  F009         	goto	u1020
  4331   0013D2                     u1021:
  4332   0013D2  EF46  F009         	goto	l2264
  4333   0013D6                     u1020:
  4334   0013D6                     l2280:
  4335                           
  4336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  4337   0013D6  503E               	movf	dtoa@s^0,w,c
  4338   0013D8  B4D8               	btfsc	status,2,c
  4339   0013DA  EFF1  F009         	goto	u1031
  4340   0013DE  EFF3  F009         	goto	u1030
  4341   0013E2                     u1031:
  4342   0013E2  EFFE  F009         	goto	l2286
  4343   0013E6                     u1030:
  4344   0013E6                     
  4345                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  4346   0013E6  063C               	decf	dtoa@i^0,f,c
  4347   0013E8  A0D8               	btfss	status,0,c
  4348   0013EA  063D               	decf	(dtoa@i+1)^0,f,c
  4349   0013EC                     
  4350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  4351   0013EC  0E3C               	movlw	low _dbuf
  4352   0013EE  243C               	addwf	dtoa@i^0,w,c
  4353   0013F0  6ED9               	movwf	fsr2l,c
  4354   0013F2  0E02               	movlw	high _dbuf
  4355   0013F4  203D               	addwfc	(dtoa@i+1)^0,w,c
  4356   0013F6  6EDA               	movwf	fsr2h,c
  4357   0013F8  C03E  FFDF         	movff	dtoa@s,indf2
  4358   0013FC                     l2286:
  4359                           
  4360                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4361   0013FC  C01C  F011         	movff	dtoa@fp,pad@fp
  4362   001400  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  4363   001404  0E3C               	movlw	low _dbuf
  4364   001406  243C               	addwf	dtoa@i^0,w,c
  4365   001408  6E13               	movwf	pad@buf^0,c
  4366   00140A  0E02               	movlw	high _dbuf
  4367   00140C  203D               	addwfc	(dtoa@i+1)^0,w,c
  4368   00140E  6E14               	movwf	(pad@buf+1)^0,c
  4369   001410  C032  F015         	movff	dtoa@w,pad@p
  4370   001414  C033  F016         	movff	dtoa@w+1,pad@p+1
  4371   001418  EC4C  F013         	call	_pad	;wreg free
  4372   00141C  0012               	return		;funcret
  4373   00141E                     __end_of_dtoa:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function _pad *****************
  4377 ;; Defined at:
  4378 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  4381 ;;		 -> sprintf@f(11), 
  4382 ;;  buf             2   18[COMRAM] PTR unsigned char 
  4383 ;;		 -> dbuf(32), 
  4384 ;;  p               2   20[COMRAM] int 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  w               2   25[COMRAM] int 
  4387 ;;  i               2   23[COMRAM] int 
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  1    wreg      void 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4397 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4400 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4401 ;;Total ram usage:       11 bytes
  4402 ;; Hardware stack levels used: 1
  4403 ;; Hardware stack levels required when called: 3
  4404 ;; This function calls:
  4405 ;;		_fputc
  4406 ;;		_fputs
  4407 ;; This function is called by:
  4408 ;;		_dtoa
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text20
  4413   002698                     __ptext20:
  4414                           	callstack 0
  4415   002698                     _pad:
  4416                           	callstack 23
  4417   002698                     
  4418                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  4419   002698  BE16               	btfsc	(pad@p+1)^0,7,c
  4420   00269A  EF51  F013         	goto	u921
  4421   00269E  EF53  F013         	goto	u920
  4422   0026A2                     u921:
  4423   0026A2  EF59  F013         	goto	l2228
  4424   0026A6                     u920:
  4425   0026A6  C015  F01A         	movff	pad@p,pad@w
  4426   0026AA  C016  F01B         	movff	pad@p+1,pad@w+1
  4427   0026AE  EF5D  F013         	goto	l1143
  4428   0026B2                     l2228:
  4429   0026B2  0E00               	movlw	0
  4430   0026B4  6E1B               	movwf	(pad@w+1)^0,c
  4431   0026B6  0E00               	movlw	0
  4432   0026B8  6E1A               	movwf	pad@w^0,c
  4433   0026BA                     l1143:
  4434                           
  4435                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  4436   0026BA  0E00               	movlw	0
  4437   0026BC  6E19               	movwf	(pad@i+1)^0,c
  4438   0026BE  0E00               	movlw	0
  4439   0026C0  6E18               	movwf	pad@i^0,c
  4440                           
  4441                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4442   0026C2  EF6F  F013         	goto	l2234
  4443   0026C6                     l2230:
  4444                           
  4445                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  4446   0026C6  0E00               	movlw	0
  4447   0026C8  6E02               	movwf	(fputc@c+1)^0,c
  4448   0026CA  0E20               	movlw	32
  4449   0026CC  6E01               	movwf	fputc@c^0,c
  4450   0026CE  C011  F003         	movff	pad@fp,fputc@fp
  4451   0026D2  C012  F004         	movff	pad@fp+1,fputc@fp+1
  4452   0026D6  EC2D  F011         	call	_fputc	;wreg free
  4453   0026DA                     
  4454                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  4455   0026DA  4A18               	infsnz	pad@i^0,f,c
  4456   0026DC  2A19               	incf	(pad@i+1)^0,f,c
  4457   0026DE                     l2234:
  4458                           
  4459                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4460   0026DE  501A               	movf	pad@w^0,w,c
  4461   0026E0  5C18               	subwf	pad@i^0,w,c
  4462   0026E2  5019               	movf	(pad@i+1)^0,w,c
  4463   0026E4  0A80               	xorlw	128
  4464   0026E6  6E17               	movwf	??_pad^0,c
  4465   0026E8  501B               	movf	(pad@w+1)^0,w,c
  4466   0026EA  0A80               	xorlw	128
  4467   0026EC  5817               	subwfb	??_pad^0,w,c
  4468   0026EE  A0D8               	btfss	status,0,c
  4469   0026F0  EF7C  F013         	goto	u931
  4470   0026F4  EF7E  F013         	goto	u930
  4471   0026F8                     u931:
  4472   0026F8  EF63  F013         	goto	l2230
  4473   0026FC                     u930:
  4474   0026FC                     
  4475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  4476   0026FC  C013  F00A         	movff	pad@buf,fputs@s
  4477   002700  C014  F00B         	movff	pad@buf+1,fputs@s+1
  4478   002704  C011  F00C         	movff	pad@fp,fputs@fp
  4479   002708  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  4480   00270C  EC8D  F014         	call	_fputs	;wreg free
  4481   002710  0012               	return		;funcret
  4482   002712                     __end_of_pad:
  4483                           	callstack 0
  4484                           
  4485 ;; *************** function _fputs *****************
  4486 ;; Defined at:
  4487 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  s               2    9[COMRAM] PTR const unsigned char 
  4490 ;;		 -> dbuf(32), 
  4491 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  4492 ;;		 -> sprintf@f(11), 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  i               2   14[COMRAM] int 
  4495 ;;  c               1   13[COMRAM] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  2    9[COMRAM] int 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4506 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4508 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4509 ;;Total ram usage:        7 bytes
  4510 ;; Hardware stack levels used: 1
  4511 ;; Hardware stack levels required when called: 2
  4512 ;; This function calls:
  4513 ;;		_fputc
  4514 ;; This function is called by:
  4515 ;;		_pad
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text21
  4520   00291A                     __ptext21:
  4521                           	callstack 0
  4522   00291A                     _fputs:
  4523                           	callstack 23
  4524   00291A  0E00               	movlw	0
  4525   00291C  6E10               	movwf	(fputs@i+1)^0,c
  4526   00291E  0E00               	movlw	0
  4527   002920  6E0F               	movwf	fputs@i^0,c
  4528   002922  EF9E  F014         	goto	l2138
  4529   002926                     l2134:
  4530   002926  C00E  F001         	movff	fputs@c,fputc@c
  4531   00292A  6A02               	clrf	(fputc@c+1)^0,c
  4532   00292C  C00C  F003         	movff	fputs@fp,fputc@fp
  4533   002930  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  4534   002934  EC2D  F011         	call	_fputc	;wreg free
  4535   002938  4A0F               	infsnz	fputs@i^0,f,c
  4536   00293A  2A10               	incf	(fputs@i+1)^0,f,c
  4537   00293C                     l2138:
  4538   00293C  500F               	movf	fputs@i^0,w,c
  4539   00293E  240A               	addwf	fputs@s^0,w,c
  4540   002940  6ED9               	movwf	fsr2l,c
  4541   002942  5010               	movf	(fputs@i+1)^0,w,c
  4542   002944  200B               	addwfc	(fputs@s+1)^0,w,c
  4543   002946  6EDA               	movwf	fsr2h,c
  4544   002948  50DF               	movf	indf2,w,c
  4545   00294A  6E0E               	movwf	fputs@c^0,c
  4546   00294C  500E               	movf	fputs@c^0,w,c
  4547   00294E  A4D8               	btfss	status,2,c
  4548   002950  EFAC  F014         	goto	u771
  4549   002954  EFAE  F014         	goto	u770
  4550   002958                     u771:
  4551   002958  EF93  F014         	goto	l2134
  4552   00295C                     u770:
  4553   00295C  0012               	return		;funcret
  4554   00295E                     __end_of_fputs:
  4555                           	callstack 0
  4556                           
  4557 ;; *************** function _fputc *****************
  4558 ;; Defined at:
  4559 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  c               2    0[COMRAM] int 
  4562 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  4563 ;;		 -> sprintf@f(11), 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  2    0[COMRAM] int 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4577 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4578 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4579 ;;Total ram usage:        9 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; Hardware stack levels required when called: 1
  4582 ;; This function calls:
  4583 ;;		_putch
  4584 ;; This function is called by:
  4585 ;;		_pad
  4586 ;;		_vfpfcnvrt
  4587 ;;		_fputs
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text22
  4592   00225A                     __ptext22:
  4593                           	callstack 0
  4594   00225A                     _fputc:
  4595                           	callstack 26
  4596   00225A  5003               	movf	fputc@fp^0,w,c
  4597   00225C  1004               	iorwf	(fputc@fp+1)^0,w,c
  4598   00225E  B4D8               	btfsc	status,2,c
  4599   002260  EF34  F011         	goto	u731
  4600   002264  EF36  F011         	goto	u730
  4601   002268                     u731:
  4602   002268  EF3F  F011         	goto	l2122
  4603   00226C                     u730:
  4604   00226C  5003               	movf	fputc@fp^0,w,c
  4605   00226E  1004               	iorwf	(fputc@fp+1)^0,w,c
  4606   002270  A4D8               	btfss	status,2,c
  4607   002272  EF3D  F011         	goto	u741
  4608   002276  EF3F  F011         	goto	u740
  4609   00227A                     u741:
  4610   00227A  EF44  F011         	goto	l2124
  4611   00227E                     u740:
  4612   00227E                     l2122:
  4613   00227E  5001               	movf	fputc@c^0,w,c
  4614   002280  ECC5  F015         	call	_putch
  4615   002284  EF91  F011         	goto	l1191
  4616   002288                     l2124:
  4617   002288  EE20 F009          	lfsr	2,9
  4618   00228C  5003               	movf	fputc@fp^0,w,c
  4619   00228E  26D9               	addwf	fsr2l,f,c
  4620   002290  5004               	movf	(fputc@fp+1)^0,w,c
  4621   002292  22DA               	addwfc	fsr2h,f,c
  4622   002294  50DE               	movf	postinc2,w,c
  4623   002296  10DE               	iorwf	postinc2,w,c
  4624   002298  B4D8               	btfsc	status,2,c
  4625   00229A  EF51  F011         	goto	u751
  4626   00229E  EF53  F011         	goto	u750
  4627   0022A2                     u751:
  4628   0022A2  EF6E  F011         	goto	l2128
  4629   0022A6                     u750:
  4630   0022A6  EE20 F009          	lfsr	2,9
  4631   0022AA  5003               	movf	fputc@fp^0,w,c
  4632   0022AC  26D9               	addwf	fsr2l,f,c
  4633   0022AE  5004               	movf	(fputc@fp+1)^0,w,c
  4634   0022B0  22DA               	addwfc	fsr2h,f,c
  4635   0022B2  EE10 F003          	lfsr	1,3
  4636   0022B6  5003               	movf	fputc@fp^0,w,c
  4637   0022B8  26E1               	addwf	fsr1l,f,c
  4638   0022BA  5004               	movf	(fputc@fp+1)^0,w,c
  4639   0022BC  22E2               	addwfc	fsr1h,f,c
  4640   0022BE  50DE               	movf	postinc2,w,c
  4641   0022C0  5CE6               	subwf	postinc1,w,c
  4642   0022C2  50E6               	movf	postinc1,w,c
  4643   0022C4  0A80               	xorlw	128
  4644   0022C6  6E09               	movwf	(??_fputc+4)^0,c
  4645   0022C8  50DE               	movf	postinc2,w,c
  4646   0022CA  0A80               	xorlw	128
  4647   0022CC  5809               	subwfb	(??_fputc+4)^0,w,c
  4648   0022CE  B0D8               	btfsc	status,0,c
  4649   0022D0  EF6C  F011         	goto	u761
  4650   0022D4  EF6E  F011         	goto	u760
  4651   0022D8                     u761:
  4652   0022D8  EF91  F011         	goto	l1191
  4653   0022DC                     u760:
  4654   0022DC                     l2128:
  4655   0022DC  EE20 F003          	lfsr	2,3
  4656   0022E0  5003               	movf	fputc@fp^0,w,c
  4657   0022E2  26D9               	addwf	fsr2l,f,c
  4658   0022E4  5004               	movf	(fputc@fp+1)^0,w,c
  4659   0022E6  22DA               	addwfc	fsr2h,f,c
  4660   0022E8  CFDE F005          	movff	postinc2,??_fputc
  4661   0022EC  CFDD F006          	movff	postdec2,??_fputc+1
  4662   0022F0  C003  FFD9         	movff	fputc@fp,fsr2l
  4663   0022F4  C004  FFDA         	movff	fputc@fp+1,fsr2h
  4664   0022F8  CFDE F007          	movff	postinc2,??_fputc+2
  4665   0022FC  CFDD F008          	movff	postdec2,??_fputc+3
  4666   002300  5005               	movf	??_fputc^0,w,c
  4667   002302  2407               	addwf	(??_fputc+2)^0,w,c
  4668   002304  6ED9               	movwf	fsr2l,c
  4669   002306  5006               	movf	(??_fputc+1)^0,w,c
  4670   002308  2008               	addwfc	(??_fputc+3)^0,w,c
  4671   00230A  6EDA               	movwf	fsr2h,c
  4672   00230C  C001  FFDF         	movff	fputc@c,indf2
  4673   002310  EE20 F003          	lfsr	2,3
  4674   002314  5003               	movf	fputc@fp^0,w,c
  4675   002316  26D9               	addwf	fsr2l,f,c
  4676   002318  5004               	movf	(fputc@fp+1)^0,w,c
  4677   00231A  22DA               	addwfc	fsr2h,f,c
  4678   00231C  2ADE               	incf	postinc2,f,c
  4679   00231E  0E00               	movlw	0
  4680   002320  22DD               	addwfc	postdec2,f,c
  4681   002322                     l1191:
  4682   002322  0012               	return		;funcret
  4683   002324                     __end_of_fputc:
  4684                           	callstack 0
  4685                           
  4686 ;; *************** function _putch *****************
  4687 ;; Defined at:
  4688 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  c               1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  c               1    0[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used: 1
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_fputc
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text23
  4716   002B8A                     __ptext23:
  4717                           	callstack 0
  4718   002B8A                     _putch:
  4719                           	callstack 26
  4720   002B8A  0012               	return		;funcret
  4721   002B8C                     __end_of_putch:
  4722                           	callstack 0
  4723                           
  4724 ;; *************** function _abs *****************
  4725 ;; Defined at:
  4726 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  a               2   18[COMRAM] int 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  2   18[COMRAM] int 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4743 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4744 ;;Total ram usage:        4 bytes
  4745 ;; Hardware stack levels used: 1
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_normalise_readings
  4750 ;;		_dtoa
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text24
  4755   0029A0                     __ptext24:
  4756                           	callstack 0
  4757   0029A0                     _abs:
  4758                           	callstack 26
  4759   0029A0  BE14               	btfsc	(abs@a+1)^0,7,c
  4760   0029A2  EFDD  F014         	goto	u780
  4761   0029A6  5014               	movf	(abs@a+1)^0,w,c
  4762   0029A8  E106               	bnz	u781
  4763   0029AA  0413               	decf	abs@a^0,w,c
  4764   0029AC  B0D8               	btfsc	status,0,c
  4765   0029AE  EFDB  F014         	goto	u781
  4766   0029B2  EFDD  F014         	goto	u780
  4767   0029B6                     u781:
  4768   0029B6  EFEB  F014         	goto	l1111
  4769   0029BA                     u780:
  4770   0029BA  C013  F015         	movff	abs@a,??_abs
  4771   0029BE  C014  F016         	movff	abs@a+1,??_abs+1
  4772   0029C2  1E15               	comf	??_abs^0,f,c
  4773   0029C4  1E16               	comf	(??_abs+1)^0,f,c
  4774   0029C6  4A15               	infsnz	??_abs^0,f,c
  4775   0029C8  2A16               	incf	(??_abs+1)^0,f,c
  4776   0029CA  C015  F013         	movff	??_abs,?_abs
  4777   0029CE  C016  F014         	movff	??_abs+1,?_abs+1
  4778   0029D2  EFEF  F014         	goto	l1114
  4779   0029D6                     l1111:
  4780   0029D6  C013  F013         	movff	abs@a,?_abs
  4781   0029DA  C014  F014         	movff	abs@a+1,?_abs+1
  4782   0029DE                     l1114:
  4783   0029DE  0012               	return		;funcret
  4784   0029E0                     __end_of_abs:
  4785                           	callstack 0
  4786                           
  4787 ;; *************** function ___aomod *****************
  4788 ;; Defined at:
  4789 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  dividend        8    0[COMRAM] long long 
  4792 ;;  divisor         8    8[COMRAM] long long 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  sign            1   17[COMRAM] unsigned char 
  4795 ;;  counter         1   16[COMRAM] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  8    0[COMRAM] long long 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4805 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;Total ram usage:       18 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_dtoa
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text25
  4819   001E72                     __ptext25:
  4820                           	callstack 0
  4821   001E72                     ___aomod:
  4822                           	callstack 26
  4823   001E72  0E00               	movlw	0
  4824   001E74  6E12               	movwf	___aomod@sign^0,c
  4825   001E76  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  4826   001E78  EF42  F00F         	goto	u860
  4827   001E7C  EF40  F00F         	goto	u861
  4828   001E80                     u861:
  4829   001E80  EF54  F00F         	goto	l2196
  4830   001E84                     u860:
  4831   001E84  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4832   001E86  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4833   001E88  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4834   001E8A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4835   001E8C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4836   001E8E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4837   001E90  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4838   001E92  6C01               	negf	___aomod@dividend^0,c
  4839   001E94  0E00               	movlw	0
  4840   001E96  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4841   001E98  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4842   001E9A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4843   001E9C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4844   001E9E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4845   001EA0  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4846   001EA2  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4847   001EA4  0E01               	movlw	1
  4848   001EA6  6E12               	movwf	___aomod@sign^0,c
  4849   001EA8                     l2196:
  4850   001EA8  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  4851   001EAA  EF5B  F00F         	goto	u870
  4852   001EAE  EF59  F00F         	goto	u871
  4853   001EB2                     u871:
  4854   001EB2  EF6B  F00F         	goto	l2200
  4855   001EB6                     u870:
  4856   001EB6  1E10               	comf	(___aomod@divisor+7)^0,f,c
  4857   001EB8  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  4858   001EBA  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  4859   001EBC  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  4860   001EBE  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  4861   001EC0  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  4862   001EC2  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  4863   001EC4  6C09               	negf	___aomod@divisor^0,c
  4864   001EC6  0E00               	movlw	0
  4865   001EC8  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  4866   001ECA  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  4867   001ECC  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  4868   001ECE  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  4869   001ED0  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  4870   001ED2  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  4871   001ED4  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  4872   001ED6                     l2200:
  4873   001ED6  5009               	movf	___aomod@divisor^0,w,c
  4874   001ED8  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  4875   001EDA  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  4876   001EDC  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  4877   001EDE  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  4878   001EE0  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  4879   001EE2  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  4880   001EE4  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  4881   001EE6  B4D8               	btfsc	status,2,c
  4882   001EE8  EF78  F00F         	goto	u881
  4883   001EEC  EF7A  F00F         	goto	u880
  4884   001EF0                     u881:
  4885   001EF0  EFC2  F00F         	goto	l2216
  4886   001EF4                     u880:
  4887   001EF4  0E01               	movlw	1
  4888   001EF6  6E11               	movwf	___aomod@counter^0,c
  4889   001EF8  EF88  F00F         	goto	l2206
  4890   001EFC                     l2204:
  4891   001EFC  90D8               	bcf	status,0,c
  4892   001EFE  3609               	rlcf	___aomod@divisor^0,f,c
  4893   001F00  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  4894   001F02  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  4895   001F04  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  4896   001F06  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  4897   001F08  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  4898   001F0A  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  4899   001F0C  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  4900   001F0E  2A11               	incf	___aomod@counter^0,f,c
  4901   001F10                     l2206:
  4902   001F10  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  4903   001F12  EF8D  F00F         	goto	u891
  4904   001F16  EF8F  F00F         	goto	u890
  4905   001F1A                     u891:
  4906   001F1A  EF7E  F00F         	goto	l2204
  4907   001F1E                     u890:
  4908   001F1E                     l2208:
  4909   001F1E  5009               	movf	___aomod@divisor^0,w,c
  4910   001F20  5C01               	subwf	___aomod@dividend^0,w,c
  4911   001F22  500A               	movf	(___aomod@divisor+1)^0,w,c
  4912   001F24  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  4913   001F26  500B               	movf	(___aomod@divisor+2)^0,w,c
  4914   001F28  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  4915   001F2A  500C               	movf	(___aomod@divisor+3)^0,w,c
  4916   001F2C  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  4917   001F2E  500D               	movf	(___aomod@divisor+4)^0,w,c
  4918   001F30  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  4919   001F32  500E               	movf	(___aomod@divisor+5)^0,w,c
  4920   001F34  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  4921   001F36  500F               	movf	(___aomod@divisor+6)^0,w,c
  4922   001F38  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  4923   001F3A  5010               	movf	(___aomod@divisor+7)^0,w,c
  4924   001F3C  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  4925   001F3E  A0D8               	btfss	status,0,c
  4926   001F40  EFA4  F00F         	goto	u901
  4927   001F44  EFA6  F00F         	goto	u900
  4928   001F48                     u901:
  4929   001F48  EFB6  F00F         	goto	l2212
  4930   001F4C                     u900:
  4931   001F4C  5009               	movf	___aomod@divisor^0,w,c
  4932   001F4E  5E01               	subwf	___aomod@dividend^0,f,c
  4933   001F50  500A               	movf	(___aomod@divisor+1)^0,w,c
  4934   001F52  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  4935   001F54  500B               	movf	(___aomod@divisor+2)^0,w,c
  4936   001F56  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  4937   001F58  500C               	movf	(___aomod@divisor+3)^0,w,c
  4938   001F5A  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  4939   001F5C  500D               	movf	(___aomod@divisor+4)^0,w,c
  4940   001F5E  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  4941   001F60  500E               	movf	(___aomod@divisor+5)^0,w,c
  4942   001F62  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  4943   001F64  500F               	movf	(___aomod@divisor+6)^0,w,c
  4944   001F66  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4945   001F68  5010               	movf	(___aomod@divisor+7)^0,w,c
  4946   001F6A  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4947   001F6C                     l2212:
  4948   001F6C  90D8               	bcf	status,0,c
  4949   001F6E  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4950   001F70  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4951   001F72  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4952   001F74  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4953   001F76  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4954   001F78  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4955   001F7A  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4956   001F7C  3209               	rrcf	___aomod@divisor^0,f,c
  4957   001F7E  2E11               	decfsz	___aomod@counter^0,f,c
  4958   001F80  EF8F  F00F         	goto	l2208
  4959   001F84                     l2216:
  4960   001F84  5012               	movf	___aomod@sign^0,w,c
  4961   001F86  B4D8               	btfsc	status,2,c
  4962   001F88  EFC8  F00F         	goto	u911
  4963   001F8C  EFCA  F00F         	goto	u910
  4964   001F90                     u911:
  4965   001F90  EFDA  F00F         	goto	l2220
  4966   001F94                     u910:
  4967   001F94  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4968   001F96  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4969   001F98  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4970   001F9A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4971   001F9C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4972   001F9E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4973   001FA0  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4974   001FA2  6C01               	negf	___aomod@dividend^0,c
  4975   001FA4  0E00               	movlw	0
  4976   001FA6  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4977   001FA8  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4978   001FAA  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4979   001FAC  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4980   001FAE  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4981   001FB0  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4982   001FB2  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4983   001FB4                     l2220:
  4984   001FB4  C001  F001         	movff	___aomod@dividend,?___aomod
  4985   001FB8  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4986   001FBC  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4987   001FC0  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4988   001FC4  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4989   001FC8  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4990   001FCC  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4991   001FD0  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4992   001FD4  0012               	return		;funcret
  4993   001FD6                     __end_of___aomod:
  4994                           	callstack 0
  4995                           
  4996 ;; *************** function ___aodiv *****************
  4997 ;; Defined at:
  4998 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  dividend        8    0[COMRAM] long long 
  5001 ;;  divisor         8    8[COMRAM] long long 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  quotient        8   18[COMRAM] long long 
  5004 ;;  sign            1   17[COMRAM] unsigned char 
  5005 ;;  counter         1   16[COMRAM] unsigned char 
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  8    0[COMRAM] long long 
  5008 ;; Registers used:
  5009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5015 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5016 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;Total ram usage:       26 bytes
  5020 ;; Hardware stack levels used: 1
  5021 ;; This function calls:
  5022 ;;		Nothing
  5023 ;; This function is called by:
  5024 ;;		_dtoa
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text26
  5029   001B7E                     __ptext26:
  5030                           	callstack 0
  5031   001B7E                     ___aodiv:
  5032                           	callstack 26
  5033   001B7E  0E00               	movlw	0
  5034   001B80  6E12               	movwf	___aodiv@sign^0,c
  5035   001B82  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  5036   001B84  EFC8  F00D         	goto	u790
  5037   001B88  EFC6  F00D         	goto	u791
  5038   001B8C                     u791:
  5039   001B8C  EFDA  F00D         	goto	l2152
  5040   001B90                     u790:
  5041   001B90  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  5042   001B92  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  5043   001B94  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  5044   001B96  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  5045   001B98  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  5046   001B9A  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  5047   001B9C  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  5048   001B9E  6C09               	negf	___aodiv@divisor^0,c
  5049   001BA0  0E00               	movlw	0
  5050   001BA2  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  5051   001BA4  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  5052   001BA6  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  5053   001BA8  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  5054   001BAA  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  5055   001BAC  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  5056   001BAE  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  5057   001BB0  0E01               	movlw	1
  5058   001BB2  6E12               	movwf	___aodiv@sign^0,c
  5059   001BB4                     l2152:
  5060   001BB4  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  5061   001BB6  EFE1  F00D         	goto	u800
  5062   001BBA  EFDF  F00D         	goto	u801
  5063   001BBE                     u801:
  5064   001BBE  EFF3  F00D         	goto	l2158
  5065   001BC2                     u800:
  5066   001BC2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  5067   001BC4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  5068   001BC6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  5069   001BC8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  5070   001BCA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  5071   001BCC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  5072   001BCE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  5073   001BD0  6C01               	negf	___aodiv@dividend^0,c
  5074   001BD2  0E00               	movlw	0
  5075   001BD4  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  5076   001BD6  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  5077   001BD8  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  5078   001BDA  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  5079   001BDC  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  5080   001BDE  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  5081   001BE0  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  5082   001BE2  0E01               	movlw	1
  5083   001BE4  1A12               	xorwf	___aodiv@sign^0,f,c
  5084   001BE6                     l2158:
  5085   001BE6  EE20  F013         	lfsr	2,___aodiv@quotient
  5086   001BEA  0E07               	movlw	7
  5087   001BEC                     u811:
  5088   001BEC  6ADE               	clrf	postinc2,c
  5089   001BEE  06E8               	decf	wreg,f,c
  5090   001BF0  E2FD               	bc	u811
  5091   001BF2  5009               	movf	___aodiv@divisor^0,w,c
  5092   001BF4  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  5093   001BF6  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  5094   001BF8  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  5095   001BFA  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  5096   001BFC  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  5097   001BFE  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  5098   001C00  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  5099   001C02  B4D8               	btfsc	status,2,c
  5100   001C04  EF06  F00E         	goto	u821
  5101   001C08  EF08  F00E         	goto	u820
  5102   001C0C                     u821:
  5103   001C0C  EF5A  F00E         	goto	l2180
  5104   001C10                     u820:
  5105   001C10  0E01               	movlw	1
  5106   001C12  6E11               	movwf	___aodiv@counter^0,c
  5107   001C14  EF16  F00E         	goto	l2166
  5108   001C18                     l2164:
  5109   001C18  90D8               	bcf	status,0,c
  5110   001C1A  3609               	rlcf	___aodiv@divisor^0,f,c
  5111   001C1C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  5112   001C1E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  5113   001C20  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  5114   001C22  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  5115   001C24  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  5116   001C26  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  5117   001C28  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  5118   001C2A  2A11               	incf	___aodiv@counter^0,f,c
  5119   001C2C                     l2166:
  5120   001C2C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  5121   001C2E  EF1B  F00E         	goto	u831
  5122   001C32  EF1D  F00E         	goto	u830
  5123   001C36                     u831:
  5124   001C36  EF0C  F00E         	goto	l2164
  5125   001C3A                     u830:
  5126   001C3A                     l2168:
  5127   001C3A  90D8               	bcf	status,0,c
  5128   001C3C  3613               	rlcf	___aodiv@quotient^0,f,c
  5129   001C3E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  5130   001C40  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  5131   001C42  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  5132   001C44  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  5133   001C46  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  5134   001C48  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  5135   001C4A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  5136   001C4C  5009               	movf	___aodiv@divisor^0,w,c
  5137   001C4E  5C01               	subwf	___aodiv@dividend^0,w,c
  5138   001C50  500A               	movf	(___aodiv@divisor+1)^0,w,c
  5139   001C52  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  5140   001C54  500B               	movf	(___aodiv@divisor+2)^0,w,c
  5141   001C56  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  5142   001C58  500C               	movf	(___aodiv@divisor+3)^0,w,c
  5143   001C5A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  5144   001C5C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  5145   001C5E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  5146   001C60  500E               	movf	(___aodiv@divisor+5)^0,w,c
  5147   001C62  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  5148   001C64  500F               	movf	(___aodiv@divisor+6)^0,w,c
  5149   001C66  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  5150   001C68  5010               	movf	(___aodiv@divisor+7)^0,w,c
  5151   001C6A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  5152   001C6C  A0D8               	btfss	status,0,c
  5153   001C6E  EF3B  F00E         	goto	u841
  5154   001C72  EF3D  F00E         	goto	u840
  5155   001C76                     u841:
  5156   001C76  EF4E  F00E         	goto	l2176
  5157   001C7A                     u840:
  5158   001C7A  5009               	movf	___aodiv@divisor^0,w,c
  5159   001C7C  5E01               	subwf	___aodiv@dividend^0,f,c
  5160   001C7E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  5161   001C80  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  5162   001C82  500B               	movf	(___aodiv@divisor+2)^0,w,c
  5163   001C84  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  5164   001C86  500C               	movf	(___aodiv@divisor+3)^0,w,c
  5165   001C88  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  5166   001C8A  500D               	movf	(___aodiv@divisor+4)^0,w,c
  5167   001C8C  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  5168   001C8E  500E               	movf	(___aodiv@divisor+5)^0,w,c
  5169   001C90  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  5170   001C92  500F               	movf	(___aodiv@divisor+6)^0,w,c
  5171   001C94  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  5172   001C96  5010               	movf	(___aodiv@divisor+7)^0,w,c
  5173   001C98  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  5174   001C9A  8013               	bsf	___aodiv@quotient^0,0,c
  5175   001C9C                     l2176:
  5176   001C9C  90D8               	bcf	status,0,c
  5177   001C9E  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  5178   001CA0  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  5179   001CA2  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  5180   001CA4  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  5181   001CA6  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  5182   001CA8  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  5183   001CAA  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  5184   001CAC  3209               	rrcf	___aodiv@divisor^0,f,c
  5185   001CAE  2E11               	decfsz	___aodiv@counter^0,f,c
  5186   001CB0  EF1D  F00E         	goto	l2168
  5187   001CB4                     l2180:
  5188   001CB4  5012               	movf	___aodiv@sign^0,w,c
  5189   001CB6  B4D8               	btfsc	status,2,c
  5190   001CB8  EF60  F00E         	goto	u851
  5191   001CBC  EF62  F00E         	goto	u850
  5192   001CC0                     u851:
  5193   001CC0  EF72  F00E         	goto	l2184
  5194   001CC4                     u850:
  5195   001CC4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  5196   001CC6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  5197   001CC8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  5198   001CCA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  5199   001CCC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  5200   001CCE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  5201   001CD0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  5202   001CD2  6C13               	negf	___aodiv@quotient^0,c
  5203   001CD4  0E00               	movlw	0
  5204   001CD6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  5205   001CD8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  5206   001CDA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  5207   001CDC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  5208   001CDE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  5209   001CE0  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  5210   001CE2  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  5211   001CE4                     l2184:
  5212   001CE4  C013  F001         	movff	___aodiv@quotient,?___aodiv
  5213   001CE8  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  5214   001CEC  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  5215   001CF0  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  5216   001CF4  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  5217   001CF8  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  5218   001CFC  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  5219   001D00  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  5220   001D04  0012               	return		;funcret
  5221   001D06                     __end_of___aodiv:
  5222                           	callstack 0
  5223                           
  5224 ;; *************** function _sendStringSerial4 *****************
  5225 ;; Defined at:
  5226 ;;		line 39 in file "serial.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  string          2    1[COMRAM] PTR unsigned char 
  5229 ;;		 -> main@buf(150), 
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5245 ;;Total ram usage:        2 bytes
  5246 ;; Hardware stack levels used: 1
  5247 ;; Hardware stack levels required when called: 1
  5248 ;; This function calls:
  5249 ;;		_sendCharSerial4
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;;		_make_master_closeness
  5253 ;;		_card_response
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text27
  5258   002A14                     __ptext27:
  5259                           	callstack 0
  5260   002A14                     _sendStringSerial4:
  5261                           	callstack 29
  5262   002A14                     
  5263                           ;serial.c: 40:  while(*string != 0) {
  5264   002A14  EF15  F015         	goto	l2530
  5265   002A18                     l2526:
  5266                           
  5267                           ;serial.c: 41:         sendCharSerial4(*string++);
  5268   002A18  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5269   002A1C  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5270   002A20  50DF               	movf	indf2,w,c
  5271   002A22  ECA4  F015         	call	_sendCharSerial4
  5272   002A26  4A02               	infsnz	sendStringSerial4@string^0,f,c
  5273   002A28  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  5274   002A2A                     l2530:
  5275                           
  5276                           ;serial.c: 40:  while(*string != 0) {
  5277   002A2A  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  5278   002A2E  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5279   002A32  50DF               	movf	indf2,w,c
  5280   002A34  A4D8               	btfss	status,2,c
  5281   002A36  EF1F  F015         	goto	u1231
  5282   002A3A  EF21  F015         	goto	u1230
  5283   002A3E                     u1231:
  5284   002A3E  EF0C  F015         	goto	l2526
  5285   002A42                     u1230:
  5286   002A42  0012               	return		;funcret
  5287   002A44                     __end_of_sendStringSerial4:
  5288                           	callstack 0
  5289                           
  5290 ;; *************** function _sendCharSerial4 *****************
  5291 ;; Defined at:
  5292 ;;		line 32 in file "serial.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  charToSend      1    wreg     unsigned char 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  charToSend      1    0[COMRAM] unsigned char 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  1    wreg      void 
  5299 ;; Registers used:
  5300 ;;		wreg
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5310 ;;Total ram usage:        1 bytes
  5311 ;; Hardware stack levels used: 1
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_sendStringSerial4
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text28
  5320   002B48                     __ptext28:
  5321                           	callstack 0
  5322   002B48                     _sendCharSerial4:
  5323                           	callstack 29
  5324                           
  5325                           ;incstack = 0
  5326                           ;sendCharSerial4@charToSend stored from wreg
  5327   002B48  6E01               	movwf	sendCharSerial4@charToSend^0,c
  5328   002B4A                     l392:
  5329   002B4A  010E               	movlb	14	; () banked
  5330   002B4C  A537               	btfss	55,2,b	;volatile
  5331   002B4E  EFAB  F015         	goto	u1161
  5332   002B52  EFAD  F015         	goto	u1160
  5333   002B56                     u1161:
  5334   002B56  EFA5  F015         	goto	l392
  5335   002B5A                     u1160:
  5336   002B5A                     
  5337                           ; BSR set to: 14
  5338                           ;serial.c: 34:     TX4REG = charToSend;
  5339   002B5A  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  5340   002B5E                     
  5341                           ; BSR set to: 14
  5342   002B5E  0012               	return		;funcret
  5343   002B60                     __end_of_sendCharSerial4:
  5344                           	callstack 0
  5345                           
  5346 ;; *************** function _determine_card *****************
  5347 ;; Defined at:
  5348 ;;		line 108 in file "colour_identify.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  master_close    2    0[COMRAM] PTR unsigned int 
  5351 ;;		 -> card_response@master_closeness(18), 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  i               1    9[COMRAM] enum E14551
  5354 ;;  current_smal    2    6[COMRAM] unsigned int 
  5355 ;;  predicted_co    1    8[COMRAM] enum E14551
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      enum E14551
  5358 ;; Registers used:
  5359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5366 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;Total ram usage:       10 bytes
  5370 ;; Hardware stack levels used: 1
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_card_response
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text29
  5379   002618                     __ptext29:
  5380                           	callstack 0
  5381   002618                     _determine_card:
  5382                           	callstack 29
  5383   002618                     
  5384                           ;colour_identify.c: 109:     colour predicted_colour = RED;
  5385   002618  0E00               	movlw	0
  5386   00261A  6E09               	movwf	determine_card@predicted_colour^0,c
  5387   00261C                     
  5388                           ;colour_identify.c: 110:     unsigned int current_smallest = master_closeness[RED];
  5389   00261C  C001  FFD9         	movff	determine_card@master_closeness,fsr2l
  5390   002620  C002  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  5391   002624  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5392   002628  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5393   00262C                     
  5394                           ;colour_identify.c: 111:     for(colour i = GREEN; i<=BLACK; i++){
  5395   00262C  0E01               	movlw	1
  5396   00262E  6E0A               	movwf	determine_card@i^0,c
  5397   002630                     l2648:
  5398                           
  5399                           ;colour_identify.c: 112:         if(master_closeness[i] < current_smallest){
  5400   002630  500A               	movf	determine_card@i^0,w,c
  5401   002632  0D02               	mullw	2
  5402   002634  CFF3 F003          	movff	prodl,??_determine_card
  5403   002638  CFF4 F004          	movff	prodh,??_determine_card+1
  5404   00263C  5003               	movf	??_determine_card^0,w,c
  5405   00263E  2401               	addwf	determine_card@master_closeness^0,w,c
  5406   002640  6ED9               	movwf	fsr2l,c
  5407   002642  5004               	movf	(??_determine_card+1)^0,w,c
  5408   002644  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5409   002646  6EDA               	movwf	fsr2h,c
  5410   002648  5007               	movf	determine_card@current_smallest^0,w,c
  5411   00264A  5CDE               	subwf	postinc2,w,c
  5412   00264C  5008               	movf	(determine_card@current_smallest+1)^0,w,c
  5413   00264E  58DE               	subwfb	postinc2,w,c
  5414   002650  B0D8               	btfsc	status,0,c
  5415   002652  EF2D  F013         	goto	u1301
  5416   002656  EF2F  F013         	goto	u1300
  5417   00265A                     u1301:
  5418   00265A  EF41  F013         	goto	l2654
  5419   00265E                     u1300:
  5420   00265E                     
  5421                           ;colour_identify.c: 113:             current_smallest = master_closeness[i];
  5422   00265E  500A               	movf	determine_card@i^0,w,c
  5423   002660  0D02               	mullw	2
  5424   002662  CFF3 F003          	movff	prodl,??_determine_card
  5425   002666  CFF4 F004          	movff	prodh,??_determine_card+1
  5426   00266A  5003               	movf	??_determine_card^0,w,c
  5427   00266C  2401               	addwf	determine_card@master_closeness^0,w,c
  5428   00266E  6ED9               	movwf	fsr2l,c
  5429   002670  5004               	movf	(??_determine_card+1)^0,w,c
  5430   002672  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5431   002674  6EDA               	movwf	fsr2h,c
  5432   002676  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5433   00267A  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5434   00267E                     
  5435                           ;colour_identify.c: 114:             predicted_colour = i;
  5436   00267E  C00A  F009         	movff	determine_card@i,determine_card@predicted_colour
  5437   002682                     l2654:
  5438                           
  5439                           ;colour_identify.c: 116:     }
  5440   002682  2A0A               	incf	determine_card@i^0,f,c
  5441   002684  0E08               	movlw	8
  5442   002686  640A               	cpfsgt	determine_card@i^0,c
  5443   002688  EF48  F013         	goto	u1311
  5444   00268C  EF4A  F013         	goto	u1310
  5445   002690                     u1311:
  5446   002690  EF18  F013         	goto	l2648
  5447   002694                     u1310:
  5448   002694                     
  5449                           ;colour_identify.c: 117:     return predicted_colour;
  5450   002694  5009               	movf	determine_card@predicted_colour^0,w,c
  5451   002696  0012               	return		;funcret
  5452   002698                     __end_of_determine_card:
  5453                           	callstack 0
  5454                           
  5455 ;; *************** function _collect_avg_readings *****************
  5456 ;; Defined at:
  5457 ;;		line 25 in file "colour_identify.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  red_read        2   13[COMRAM] PTR unsigned int 
  5460 ;;		 -> main@red_read(2), 
  5461 ;;  green_read      2   15[COMRAM] PTR unsigned int 
  5462 ;;		 -> main@green_read(2), 
  5463 ;;  blue_read       2   17[COMRAM] PTR unsigned int 
  5464 ;;		 -> main@blue_read(2), 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  i               2   27[COMRAM] int 
  5467 ;;  i               2   25[COMRAM] int 
  5468 ;;  i               2   23[COMRAM] int 
  5469 ;;  i               2   21[COMRAM] int 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5479 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5480 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;Total ram usage:       16 bytes
  5484 ;; Hardware stack levels used: 1
  5485 ;; Hardware stack levels required when called: 3
  5486 ;; This function calls:
  5487 ;;		___lwdiv
  5488 ;;		_color_read_Blue
  5489 ;;		_color_read_Green
  5490 ;;		_color_read_Red
  5491 ;; This function is called by:
  5492 ;;		_main
  5493 ;;		_card_response
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text30
  5498   001610                     __ptext30:
  5499                           	callstack 0
  5500   001610                     _collect_avg_readings:
  5501                           	callstack 27
  5502   001610                     
  5503                           ;colour_identify.c: 25: void collect_avg_readings( unsigned int *red_read, unsigned int 
      +                          *green_read, unsigned int *blue_read);colour_identify.c: 26: {;colour_identify.c: 29:   
      +                            for (int i = 0; i <= 500; i++){
  5504   001610  0E00               	movlw	0
  5505   001612  6E17               	movwf	(collect_avg_readings@i+1)^0,c
  5506   001614  0E00               	movlw	0
  5507   001616  6E16               	movwf	collect_avg_readings@i^0,c
  5508   001618                     l2552:
  5509                           
  5510                           ;colour_identify.c: 30:         *red_read = color_read_Red();
  5511   001618  EC15  F014         	call	_color_read_Red	;wreg free
  5512   00161C  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5513   001620  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5514   001624  C005  FFDE         	movff	?_color_read_Red,postinc2
  5515   001628  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5516                           
  5517                           ;colour_identify.c: 31:         *green_read = color_read_Green();
  5518   00162C  EC3D  F014         	call	_color_read_Green	;wreg free
  5519   001630  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5520   001634  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5521   001638  C005  FFDE         	movff	?_color_read_Green,postinc2
  5522   00163C  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5523                           
  5524                           ;colour_identify.c: 32:         *blue_read = color_read_Blue();
  5525   001640  EC65  F014         	call	_color_read_Blue	;wreg free
  5526   001644  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5527   001648  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5528   00164C  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5529   001650  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5530   001654                     
  5531                           ;colour_identify.c: 33:     }
  5532   001654  4A16               	infsnz	collect_avg_readings@i^0,f,c
  5533   001656  2A17               	incf	(collect_avg_readings@i+1)^0,f,c
  5534   001658  BE17               	btfsc	(collect_avg_readings@i+1)^0,7,c
  5535   00165A  EF38  F00B         	goto	u1241
  5536   00165E  0EF5               	movlw	245
  5537   001660  5C16               	subwf	collect_avg_readings@i^0,w,c
  5538   001662  0E01               	movlw	1
  5539   001664  5817               	subwfb	(collect_avg_readings@i+1)^0,w,c
  5540   001666  A0D8               	btfss	status,0,c
  5541   001668  EF38  F00B         	goto	u1241
  5542   00166C  EF3A  F00B         	goto	u1240
  5543   001670                     u1241:
  5544   001670  EF0C  F00B         	goto	l2552
  5545   001674                     u1240:
  5546   001674                     
  5547                           ;colour_identify.c: 35:     for(int i = 0; i <= 2; i++){
  5548   001674  0E00               	movlw	0
  5549   001676  6E19               	movwf	(collect_avg_readings@i_1538+1)^0,c
  5550   001678  0E00               	movlw	0
  5551   00167A  6E18               	movwf	collect_avg_readings@i_1538^0,c
  5552   00167C                     l2564:
  5553                           
  5554                           ;colour_identify.c: 36:         *red_read += color_read_Red();
  5555   00167C  EC15  F014         	call	_color_read_Red	;wreg free
  5556   001680  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5557   001684  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5558   001688  5005               	movf	?_color_read_Red^0,w,c
  5559   00168A  26DE               	addwf	postinc2,f,c
  5560   00168C  5006               	movf	(?_color_read_Red+1)^0,w,c
  5561   00168E  22DD               	addwfc	postdec2,f,c
  5562   001690                     
  5563                           ;colour_identify.c: 37:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5564   001690  0E11               	movlw	17
  5565   001692  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  5566   001694  0E3C               	movlw	60
  5567   001696  6E14               	movwf	??_collect_avg_readings^0,c
  5568   001698  0ECB               	movlw	203
  5569   00169A                     u1647:
  5570   00169A  2EE8               	decfsz	wreg,f,c
  5571   00169C  D7FE               	bra	u1647
  5572   00169E  2E14               	decfsz	??_collect_avg_readings^0,f,c
  5573   0016A0  D7FC               	bra	u1647
  5574   0016A2  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5575   0016A4  D7FA               	bra	u1647
  5576   0016A6  F000               	nop	
  5577   0016A8                     
  5578                           ;colour_identify.c: 38:     }
  5579   0016A8  4A18               	infsnz	collect_avg_readings@i_1538^0,f,c
  5580   0016AA  2A19               	incf	(collect_avg_readings@i_1538+1)^0,f,c
  5581   0016AC  BE19               	btfsc	(collect_avg_readings@i_1538+1)^0,7,c
  5582   0016AE  EF62  F00B         	goto	u1251
  5583   0016B2  5019               	movf	(collect_avg_readings@i_1538+1)^0,w,c
  5584   0016B4  E109               	bnz	u1250
  5585   0016B6  0E03               	movlw	3
  5586   0016B8  5C18               	subwf	collect_avg_readings@i_1538^0,w,c
  5587   0016BA  A0D8               	btfss	status,0,c
  5588   0016BC  EF62  F00B         	goto	u1251
  5589   0016C0  EF64  F00B         	goto	u1250
  5590   0016C4                     u1251:
  5591   0016C4  EF3E  F00B         	goto	l2564
  5592   0016C8                     u1250:
  5593   0016C8                     
  5594                           ;colour_identify.c: 39:     *red_read = *red_read/3;
  5595   0016C8  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5596   0016CC  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5597   0016D0  CFDE F007          	movff	postinc2,___lwdiv@dividend
  5598   0016D4  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  5599   0016D8  0E00               	movlw	0
  5600   0016DA  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5601   0016DC  0E03               	movlw	3
  5602   0016DE  6E09               	movwf	___lwdiv@divisor^0,c
  5603   0016E0  EC89  F013         	call	___lwdiv	;wreg free
  5604   0016E4  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5605   0016E8  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5606   0016EC  C007  FFDE         	movff	?___lwdiv,postinc2
  5607   0016F0  C008  FFDD         	movff	?___lwdiv+1,postdec2
  5608   0016F4                     
  5609                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  5610   0016F4  0E00               	movlw	0
  5611   0016F6  6E1B               	movwf	(collect_avg_readings@i_1539+1)^0,c
  5612   0016F8  0E00               	movlw	0
  5613   0016FA  6E1A               	movwf	collect_avg_readings@i_1539^0,c
  5614   0016FC                     l2580:
  5615                           
  5616                           ;colour_identify.c: 45:         *green_read += color_read_Green();
  5617   0016FC  EC3D  F014         	call	_color_read_Green	;wreg free
  5618   001700  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5619   001704  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5620   001708  5005               	movf	?_color_read_Green^0,w,c
  5621   00170A  26DE               	addwf	postinc2,f,c
  5622   00170C  5006               	movf	(?_color_read_Green+1)^0,w,c
  5623   00170E  22DD               	addwfc	postdec2,f,c
  5624   001710                     
  5625                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5626   001710  0E11               	movlw	17
  5627   001712  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  5628   001714  0E3C               	movlw	60
  5629   001716  6E14               	movwf	??_collect_avg_readings^0,c
  5630   001718  0ECB               	movlw	203
  5631   00171A                     u1657:
  5632   00171A  2EE8               	decfsz	wreg,f,c
  5633   00171C  D7FE               	bra	u1657
  5634   00171E  2E14               	decfsz	??_collect_avg_readings^0,f,c
  5635   001720  D7FC               	bra	u1657
  5636   001722  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5637   001724  D7FA               	bra	u1657
  5638   001726  F000               	nop	
  5639   001728                     
  5640                           ;colour_identify.c: 47:     }
  5641   001728  4A1A               	infsnz	collect_avg_readings@i_1539^0,f,c
  5642   00172A  2A1B               	incf	(collect_avg_readings@i_1539+1)^0,f,c
  5643   00172C  BE1B               	btfsc	(collect_avg_readings@i_1539+1)^0,7,c
  5644   00172E  EFA2  F00B         	goto	u1261
  5645   001732  501B               	movf	(collect_avg_readings@i_1539+1)^0,w,c
  5646   001734  E109               	bnz	u1260
  5647   001736  0E03               	movlw	3
  5648   001738  5C1A               	subwf	collect_avg_readings@i_1539^0,w,c
  5649   00173A  A0D8               	btfss	status,0,c
  5650   00173C  EFA2  F00B         	goto	u1261
  5651   001740  EFA4  F00B         	goto	u1260
  5652   001744                     u1261:
  5653   001744  EF7E  F00B         	goto	l2580
  5654   001748                     u1260:
  5655   001748                     
  5656                           ;colour_identify.c: 48:     *green_read = *green_read/3;
  5657   001748  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5658   00174C  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5659   001750  CFDE F007          	movff	postinc2,___lwdiv@dividend
  5660   001754  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  5661   001758  0E00               	movlw	0
  5662   00175A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5663   00175C  0E03               	movlw	3
  5664   00175E  6E09               	movwf	___lwdiv@divisor^0,c
  5665   001760  EC89  F013         	call	___lwdiv	;wreg free
  5666   001764  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5667   001768  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5668   00176C  C007  FFDE         	movff	?___lwdiv,postinc2
  5669   001770  C008  FFDD         	movff	?___lwdiv+1,postdec2
  5670   001774                     
  5671                           ;colour_identify.c: 53:     for(int i = 0; i <= 2; i++){
  5672   001774  0E00               	movlw	0
  5673   001776  6E1D               	movwf	(collect_avg_readings@i_1540+1)^0,c
  5674   001778  0E00               	movlw	0
  5675   00177A  6E1C               	movwf	collect_avg_readings@i_1540^0,c
  5676   00177C                     l2596:
  5677                           
  5678                           ;colour_identify.c: 54:         *blue_read += color_read_Blue();
  5679   00177C  EC65  F014         	call	_color_read_Blue	;wreg free
  5680   001780  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5681   001784  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5682   001788  5005               	movf	?_color_read_Blue^0,w,c
  5683   00178A  26DE               	addwf	postinc2,f,c
  5684   00178C  5006               	movf	(?_color_read_Blue+1)^0,w,c
  5685   00178E  22DD               	addwfc	postdec2,f,c
  5686   001790                     
  5687                           ;colour_identify.c: 55:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5688   001790  0E11               	movlw	17
  5689   001792  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  5690   001794  0E3C               	movlw	60
  5691   001796  6E14               	movwf	??_collect_avg_readings^0,c
  5692   001798  0ECB               	movlw	203
  5693   00179A                     u1667:
  5694   00179A  2EE8               	decfsz	wreg,f,c
  5695   00179C  D7FE               	bra	u1667
  5696   00179E  2E14               	decfsz	??_collect_avg_readings^0,f,c
  5697   0017A0  D7FC               	bra	u1667
  5698   0017A2  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5699   0017A4  D7FA               	bra	u1667
  5700   0017A6  F000               	nop	
  5701   0017A8                     
  5702                           ;colour_identify.c: 56:     }
  5703   0017A8  4A1C               	infsnz	collect_avg_readings@i_1540^0,f,c
  5704   0017AA  2A1D               	incf	(collect_avg_readings@i_1540+1)^0,f,c
  5705   0017AC  BE1D               	btfsc	(collect_avg_readings@i_1540+1)^0,7,c
  5706   0017AE  EFE2  F00B         	goto	u1271
  5707   0017B2  501D               	movf	(collect_avg_readings@i_1540+1)^0,w,c
  5708   0017B4  E109               	bnz	u1270
  5709   0017B6  0E03               	movlw	3
  5710   0017B8  5C1C               	subwf	collect_avg_readings@i_1540^0,w,c
  5711   0017BA  A0D8               	btfss	status,0,c
  5712   0017BC  EFE2  F00B         	goto	u1271
  5713   0017C0  EFE4  F00B         	goto	u1270
  5714   0017C4                     u1271:
  5715   0017C4  EFBE  F00B         	goto	l2596
  5716   0017C8                     u1270:
  5717   0017C8                     
  5718                           ;colour_identify.c: 57:     *blue_read = *blue_read/3;
  5719   0017C8  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5720   0017CC  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5721   0017D0  CFDE F007          	movff	postinc2,___lwdiv@dividend
  5722   0017D4  CFDD F008          	movff	postdec2,___lwdiv@dividend+1
  5723   0017D8  0E00               	movlw	0
  5724   0017DA  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5725   0017DC  0E03               	movlw	3
  5726   0017DE  6E09               	movwf	___lwdiv@divisor^0,c
  5727   0017E0  EC89  F013         	call	___lwdiv	;wreg free
  5728   0017E4  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5729   0017E8  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5730   0017EC  C007  FFDE         	movff	?___lwdiv,postinc2
  5731   0017F0  C008  FFDD         	movff	?___lwdiv+1,postdec2
  5732   0017F4  0012               	return		;funcret
  5733   0017F6                     __end_of_collect_avg_readings:
  5734                           	callstack 0
  5735                           
  5736 ;; *************** function _color_read_Red *****************
  5737 ;; Defined at:
  5738 ;;		line 29 in file "color.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  tmp             2    9[COMRAM] unsigned int 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  2    4[COMRAM] unsigned int 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5754 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5755 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5756 ;;Total ram usage:        7 bytes
  5757 ;; Hardware stack levels used: 1
  5758 ;; Hardware stack levels required when called: 2
  5759 ;; This function calls:
  5760 ;;		_I2C_2_Master_Read
  5761 ;;		_I2C_2_Master_RepStart
  5762 ;;		_I2C_2_Master_Start
  5763 ;;		_I2C_2_Master_Stop
  5764 ;;		_I2C_2_Master_Write
  5765 ;; This function is called by:
  5766 ;;		_collect_avg_readings
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text31
  5771   00282A                     __ptext31:
  5772                           	callstack 0
  5773   00282A                     _color_read_Red:
  5774                           	callstack 27
  5775   00282A                     
  5776                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  5777   00282A  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5778                           
  5779                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  5780   00282E  0E52               	movlw	82
  5781   002830  ECB0  F015         	call	_I2C_2_Master_Write
  5782                           
  5783                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  5784   002834  0EB6               	movlw	182
  5785   002836  ECB0  F015         	call	_I2C_2_Master_Write
  5786                           
  5787                           ;color.c: 35:  I2C_2_Master_RepStart();
  5788   00283A  ECC0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5789                           
  5790                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  5791   00283E  0E53               	movlw	83
  5792   002840  ECB0  F015         	call	_I2C_2_Master_Write
  5793                           
  5794                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  5795   002844  0E01               	movlw	1
  5796   002846  ECAF  F014         	call	_I2C_2_Master_Read
  5797   00284A  6E07               	movwf	??_color_read_Red^0,c
  5798   00284C  5007               	movf	??_color_read_Red^0,w,c
  5799   00284E  6E0A               	movwf	color_read_Red@tmp^0,c
  5800   002850  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5801                           
  5802                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5803   002852  0E00               	movlw	0
  5804   002854  ECAF  F014         	call	_I2C_2_Master_Read
  5805   002858  6E07               	movwf	??_color_read_Red^0,c
  5806   00285A  5007               	movf	??_color_read_Red^0,w,c
  5807   00285C  6E09               	movwf	(??_color_read_Red+2)^0,c
  5808   00285E  6A08               	clrf	(??_color_read_Red+1)^0,c
  5809   002860  500A               	movf	color_read_Red@tmp^0,w,c
  5810   002862  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5811   002864  6E0A               	movwf	color_read_Red@tmp^0,c
  5812   002866  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5813   002868  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5814   00286A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5815                           
  5816                           ;color.c: 39:  I2C_2_Master_Stop();
  5817   00286C  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5818   002870                     
  5819                           ;color.c: 40:  return tmp;
  5820   002870  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5821   002874  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5822   002878  0012               	return		;funcret
  5823   00287A                     __end_of_color_read_Red:
  5824                           	callstack 0
  5825                           
  5826 ;; *************** function _color_read_Green *****************
  5827 ;; Defined at:
  5828 ;;		line 43 in file "color.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  tmp             2    9[COMRAM] unsigned int 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  2    4[COMRAM] unsigned int 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5844 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5845 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5846 ;;Total ram usage:        7 bytes
  5847 ;; Hardware stack levels used: 1
  5848 ;; Hardware stack levels required when called: 2
  5849 ;; This function calls:
  5850 ;;		_I2C_2_Master_Read
  5851 ;;		_I2C_2_Master_RepStart
  5852 ;;		_I2C_2_Master_Start
  5853 ;;		_I2C_2_Master_Stop
  5854 ;;		_I2C_2_Master_Write
  5855 ;; This function is called by:
  5856 ;;		_collect_avg_readings
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text32
  5861   00287A                     __ptext32:
  5862                           	callstack 0
  5863   00287A                     _color_read_Green:
  5864                           	callstack 27
  5865   00287A                     
  5866                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  5867   00287A  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5868                           
  5869                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  5870   00287E  0E52               	movlw	82
  5871   002880  ECB0  F015         	call	_I2C_2_Master_Write
  5872                           
  5873                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  5874   002884  0EB8               	movlw	184
  5875   002886  ECB0  F015         	call	_I2C_2_Master_Write
  5876                           
  5877                           ;color.c: 49:  I2C_2_Master_RepStart();
  5878   00288A  ECC0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5879                           
  5880                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  5881   00288E  0E53               	movlw	83
  5882   002890  ECB0  F015         	call	_I2C_2_Master_Write
  5883                           
  5884                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  5885   002894  0E01               	movlw	1
  5886   002896  ECAF  F014         	call	_I2C_2_Master_Read
  5887   00289A  6E07               	movwf	??_color_read_Green^0,c
  5888   00289C  5007               	movf	??_color_read_Green^0,w,c
  5889   00289E  6E0A               	movwf	color_read_Green@tmp^0,c
  5890   0028A0  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5891                           
  5892                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5893   0028A2  0E00               	movlw	0
  5894   0028A4  ECAF  F014         	call	_I2C_2_Master_Read
  5895   0028A8  6E07               	movwf	??_color_read_Green^0,c
  5896   0028AA  5007               	movf	??_color_read_Green^0,w,c
  5897   0028AC  6E09               	movwf	(??_color_read_Green+2)^0,c
  5898   0028AE  6A08               	clrf	(??_color_read_Green+1)^0,c
  5899   0028B0  500A               	movf	color_read_Green@tmp^0,w,c
  5900   0028B2  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5901   0028B4  6E0A               	movwf	color_read_Green@tmp^0,c
  5902   0028B6  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5903   0028B8  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5904   0028BA  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5905                           
  5906                           ;color.c: 53:  I2C_2_Master_Stop();
  5907   0028BC  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5908   0028C0                     
  5909                           ;color.c: 54:  return tmp;
  5910   0028C0  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5911   0028C4  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5912   0028C8  0012               	return		;funcret
  5913   0028CA                     __end_of_color_read_Green:
  5914                           	callstack 0
  5915                           
  5916 ;; *************** function _color_read_Blue *****************
  5917 ;; Defined at:
  5918 ;;		line 57 in file "color.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;		None
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  tmp             2    9[COMRAM] unsigned int 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  2    4[COMRAM] unsigned int 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5934 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5935 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5936 ;;Total ram usage:        7 bytes
  5937 ;; Hardware stack levels used: 1
  5938 ;; Hardware stack levels required when called: 2
  5939 ;; This function calls:
  5940 ;;		_I2C_2_Master_Read
  5941 ;;		_I2C_2_Master_RepStart
  5942 ;;		_I2C_2_Master_Start
  5943 ;;		_I2C_2_Master_Stop
  5944 ;;		_I2C_2_Master_Write
  5945 ;; This function is called by:
  5946 ;;		_collect_avg_readings
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text33
  5951   0028CA                     __ptext33:
  5952                           	callstack 0
  5953   0028CA                     _color_read_Blue:
  5954                           	callstack 27
  5955   0028CA                     
  5956                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5957   0028CA  ECBB  F015         	call	_I2C_2_Master_Start	;wreg free
  5958                           
  5959                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5960   0028CE  0E52               	movlw	82
  5961   0028D0  ECB0  F015         	call	_I2C_2_Master_Write
  5962                           
  5963                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  5964   0028D4  0EBA               	movlw	186
  5965   0028D6  ECB0  F015         	call	_I2C_2_Master_Write
  5966                           
  5967                           ;color.c: 63:  I2C_2_Master_RepStart();
  5968   0028DA  ECC0  F015         	call	_I2C_2_Master_RepStart	;wreg free
  5969                           
  5970                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  5971   0028DE  0E53               	movlw	83
  5972   0028E0  ECB0  F015         	call	_I2C_2_Master_Write
  5973                           
  5974                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  5975   0028E4  0E01               	movlw	1
  5976   0028E6  ECAF  F014         	call	_I2C_2_Master_Read
  5977   0028EA  6E07               	movwf	??_color_read_Blue^0,c
  5978   0028EC  5007               	movf	??_color_read_Blue^0,w,c
  5979   0028EE  6E0A               	movwf	color_read_Blue@tmp^0,c
  5980   0028F0  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5981                           
  5982                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5983   0028F2  0E00               	movlw	0
  5984   0028F4  ECAF  F014         	call	_I2C_2_Master_Read
  5985   0028F8  6E07               	movwf	??_color_read_Blue^0,c
  5986   0028FA  5007               	movf	??_color_read_Blue^0,w,c
  5987   0028FC  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5988   0028FE  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5989   002900  500A               	movf	color_read_Blue@tmp^0,w,c
  5990   002902  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5991   002904  6E0A               	movwf	color_read_Blue@tmp^0,c
  5992   002906  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5993   002908  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5994   00290A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5995                           
  5996                           ;color.c: 67:  I2C_2_Master_Stop();
  5997   00290C  ECB6  F015         	call	_I2C_2_Master_Stop	;wreg free
  5998   002910                     
  5999                           ;color.c: 68:  return tmp;
  6000   002910  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  6001   002914  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6002   002918  0012               	return		;funcret
  6003   00291A                     __end_of_color_read_Blue:
  6004                           	callstack 0
  6005                           
  6006 ;; *************** function _I2C_2_Master_Write *****************
  6007 ;; Defined at:
  6008 ;;		line 45 in file "i2c.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  data_byte       1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  data_byte       1    1[COMRAM] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6025 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 1
  6029 ;; This function calls:
  6030 ;;		_I2C_2_Master_Idle
  6031 ;; This function is called by:
  6032 ;;		_color_writetoaddr
  6033 ;;		_color_read_Red
  6034 ;;		_color_read_Green
  6035 ;;		_color_read_Blue
  6036 ;;		_color_read_Clear
  6037 ;;		_read_interrupt_status
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text34
  6042   002B60                     __ptext34:
  6043                           	callstack 0
  6044   002B60                     _I2C_2_Master_Write:
  6045                           	callstack 27
  6046                           
  6047                           ;incstack = 0
  6048                           ;I2C_2_Master_Write@data_byte stored from wreg
  6049   002B60  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6050   002B62                     
  6051                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6052   002B62  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6053   002B66                     
  6054                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6055   002B66  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6056   002B6A  0012               	return		;funcret
  6057   002B6C                     __end_of_I2C_2_Master_Write:
  6058                           	callstack 0
  6059                           
  6060 ;; *************** function _I2C_2_Master_Stop *****************
  6061 ;; Defined at:
  6062 ;;		line 39 in file "i2c.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg, status,2, status,0, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used: 1
  6082 ;; Hardware stack levels required when called: 1
  6083 ;; This function calls:
  6084 ;;		_I2C_2_Master_Idle
  6085 ;; This function is called by:
  6086 ;;		_color_writetoaddr
  6087 ;;		_color_read_Red
  6088 ;;		_color_read_Green
  6089 ;;		_color_read_Blue
  6090 ;;		_color_read_Clear
  6091 ;;		_read_interrupt_status
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text35
  6096   002B6C                     __ptext35:
  6097                           	callstack 0
  6098   002B6C                     _I2C_2_Master_Stop:
  6099                           	callstack 27
  6100   002B6C                     
  6101                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6102   002B6C  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6103   002B70                     
  6104                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6105   002B70  010E               	movlb	14	; () banked
  6106   002B72  85DA               	bsf	218,2,b	;volatile
  6107   002B74                     
  6108                           ; BSR set to: 14
  6109   002B74  0012               	return		;funcret
  6110   002B76                     __end_of_I2C_2_Master_Stop:
  6111                           	callstack 0
  6112                           
  6113 ;; *************** function _I2C_2_Master_Start *****************
  6114 ;; Defined at:
  6115 ;;		line 27 in file "i2c.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg, status,2, status,0, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;Total ram usage:        0 bytes
  6134 ;; Hardware stack levels used: 1
  6135 ;; Hardware stack levels required when called: 1
  6136 ;; This function calls:
  6137 ;;		_I2C_2_Master_Idle
  6138 ;; This function is called by:
  6139 ;;		_color_writetoaddr
  6140 ;;		_color_read_Red
  6141 ;;		_color_read_Green
  6142 ;;		_color_read_Blue
  6143 ;;		_color_read_Clear
  6144 ;;		_read_interrupt_status
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text36
  6149   002B76                     __ptext36:
  6150                           	callstack 0
  6151   002B76                     _I2C_2_Master_Start:
  6152                           	callstack 27
  6153   002B76                     
  6154                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6155   002B76  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6156   002B7A                     
  6157                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6158   002B7A  010E               	movlb	14	; () banked
  6159   002B7C  81DA               	bsf	218,0,b	;volatile
  6160   002B7E                     
  6161                           ; BSR set to: 14
  6162   002B7E  0012               	return		;funcret
  6163   002B80                     __end_of_I2C_2_Master_Start:
  6164                           	callstack 0
  6165                           
  6166 ;; *************** function _I2C_2_Master_RepStart *****************
  6167 ;; Defined at:
  6168 ;;		line 33 in file "i2c.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;		None
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  1    wreg      void 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6186 ;;Total ram usage:        0 bytes
  6187 ;; Hardware stack levels used: 1
  6188 ;; Hardware stack levels required when called: 1
  6189 ;; This function calls:
  6190 ;;		_I2C_2_Master_Idle
  6191 ;; This function is called by:
  6192 ;;		_color_read_Red
  6193 ;;		_color_read_Green
  6194 ;;		_color_read_Blue
  6195 ;;		_color_read_Clear
  6196 ;;		_read_interrupt_status
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text37
  6201   002B80                     __ptext37:
  6202                           	callstack 0
  6203   002B80                     _I2C_2_Master_RepStart:
  6204                           	callstack 27
  6205   002B80                     
  6206                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6207   002B80  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6208   002B84                     
  6209                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6210   002B84  010E               	movlb	14	; () banked
  6211   002B86  83DA               	bsf	218,1,b	;volatile
  6212   002B88                     
  6213                           ; BSR set to: 14
  6214   002B88  0012               	return		;funcret
  6215   002B8A                     __end_of_I2C_2_Master_RepStart:
  6216                           	callstack 0
  6217                           
  6218 ;; *************** function _I2C_2_Master_Read *****************
  6219 ;; Defined at:
  6220 ;;		line 51 in file "i2c.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  ack             1    wreg     unsigned char 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  ack             1    2[COMRAM] unsigned char 
  6225 ;;  tmp             1    3[COMRAM] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      unsigned char 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6238 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6239 ;;Total ram usage:        3 bytes
  6240 ;; Hardware stack levels used: 1
  6241 ;; Hardware stack levels required when called: 1
  6242 ;; This function calls:
  6243 ;;		_I2C_2_Master_Idle
  6244 ;; This function is called by:
  6245 ;;		_color_read_Red
  6246 ;;		_color_read_Green
  6247 ;;		_color_read_Blue
  6248 ;;		_color_read_Clear
  6249 ;;		_read_interrupt_status
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text38
  6254   00295E                     __ptext38:
  6255                           	callstack 0
  6256   00295E                     _I2C_2_Master_Read:
  6257                           	callstack 27
  6258                           
  6259                           ; BSR set to: 14
  6260                           ;incstack = 0
  6261                           ;I2C_2_Master_Read@ack stored from wreg
  6262   00295E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6263   002960                     
  6264                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6265   002960  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6266   002964                     
  6267                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6268   002964  010E               	movlb	14	; () banked
  6269   002966  87DA               	bsf	218,3,b	;volatile
  6270                           
  6271                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6272   002968  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6273   00296C                     
  6274                           ;i2c.c: 57:   tmp = SSP2BUF;
  6275   00296C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6276                           
  6277                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6278   002970  EC4C  F015         	call	_I2C_2_Master_Idle	;wreg free
  6279   002974                     
  6280                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6281   002974  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6282   002976  B4D8               	btfsc	status,2,c
  6283   002978  EFC0  F014         	goto	u1121
  6284   00297C  EFC4  F014         	goto	u1120
  6285   002980                     u1121:
  6286   002980  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6287   002982  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6288   002984  EFC5  F014         	goto	u1138
  6289   002988                     u1120:
  6290   002988  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6291   00298A                     u1138:
  6292   00298A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6293   00298C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6294   00298E  010E               	movlb	14	; () banked
  6295   002990  51DA               	movf	218,w,b	;volatile
  6296   002992  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6297   002994  0BDF               	andlw	-33
  6298   002996  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6299   002998  6FDA               	movwf	218,b	;volatile
  6300   00299A                     
  6301                           ; BSR set to: 14
  6302                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6303   00299A  89DA               	bsf	218,4,b	;volatile
  6304   00299C                     
  6305                           ; BSR set to: 14
  6306                           ;i2c.c: 61:   return tmp;
  6307   00299C  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6308   00299E                     
  6309                           ; BSR set to: 14
  6310   00299E  0012               	return		;funcret
  6311   0029A0                     __end_of_I2C_2_Master_Read:
  6312                           	callstack 0
  6313                           
  6314 ;; *************** function _I2C_2_Master_Idle *****************
  6315 ;; Defined at:
  6316 ;;		line 22 in file "i2c.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;Total ram usage:        1 bytes
  6335 ;; Hardware stack levels used: 1
  6336 ;; This function calls:
  6337 ;;		Nothing
  6338 ;; This function is called by:
  6339 ;;		_I2C_2_Master_Start
  6340 ;;		_I2C_2_Master_RepStart
  6341 ;;		_I2C_2_Master_Stop
  6342 ;;		_I2C_2_Master_Write
  6343 ;;		_I2C_2_Master_Read
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text39
  6348   002A98                     __ptext39:
  6349                           	callstack 0
  6350   002A98                     _I2C_2_Master_Idle:
  6351                           	callstack 27
  6352   002A98                     l154:
  6353   002A98  010E               	movlb	14	; () banked
  6354   002A9A  B5D8               	btfsc	216,2,b	;volatile
  6355   002A9C  EF52  F015         	goto	u1041
  6356   002AA0  EF54  F015         	goto	u1040
  6357   002AA4                     u1041:
  6358   002AA4  EF4C  F015         	goto	l154
  6359   002AA8                     u1040:
  6360   002AA8                     
  6361                           ; BSR set to: 14
  6362   002AA8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6363   002AAC  0E1F               	movlw	31
  6364   002AAE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6365   002AB0  A4D8               	btfss	status,2,c
  6366   002AB2  EF5D  F015         	goto	u1051
  6367   002AB6  EF5F  F015         	goto	u1050
  6368   002ABA                     u1051:
  6369   002ABA  EF4C  F015         	goto	l154
  6370   002ABE                     u1050:
  6371   002ABE                     
  6372                           ; BSR set to: 14
  6373   002ABE  0012               	return		;funcret
  6374   002AC0                     __end_of_I2C_2_Master_Idle:
  6375                           	callstack 0
  6376                           
  6377 ;; *************** function ___lwdiv *****************
  6378 ;; Defined at:
  6379 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  dividend        2    6[COMRAM] unsigned int 
  6382 ;;  divisor         2    8[COMRAM] unsigned int 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  quotient        2   10[COMRAM] unsigned int 
  6385 ;;  counter         1   12[COMRAM] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  2    6[COMRAM] unsigned int 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6396 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6398 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6399 ;;Total ram usage:        7 bytes
  6400 ;; Hardware stack levels used: 1
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_setMotorPWM
  6405 ;;		_collect_avg_readings
  6406 ;;		_normalise_readings
  6407 ;;		_make_master_closeness
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text40
  6412   002712                     __ptext40:
  6413                           	callstack 0
  6414   002712                     ___lwdiv:
  6415                           	callstack 29
  6416   002712  0E00               	movlw	0
  6417   002714  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6418   002716  0E00               	movlw	0
  6419   002718  6E0B               	movwf	___lwdiv@quotient^0,c
  6420   00271A  5009               	movf	___lwdiv@divisor^0,w,c
  6421   00271C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6422   00271E  B4D8               	btfsc	status,2,c
  6423   002720  EF94  F013         	goto	u1061
  6424   002724  EF96  F013         	goto	u1060
  6425   002728                     u1061:
  6426   002728  EFBE  F013         	goto	l927
  6427   00272C                     u1060:
  6428   00272C  0E01               	movlw	1
  6429   00272E  6E0D               	movwf	___lwdiv@counter^0,c
  6430   002730  EF9E  F013         	goto	l2308
  6431   002734                     l2306:
  6432   002734  90D8               	bcf	status,0,c
  6433   002736  3609               	rlcf	___lwdiv@divisor^0,f,c
  6434   002738  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6435   00273A  2A0D               	incf	___lwdiv@counter^0,f,c
  6436   00273C                     l2308:
  6437   00273C  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6438   00273E  EFA3  F013         	goto	u1071
  6439   002742  EFA5  F013         	goto	u1070
  6440   002746                     u1071:
  6441   002746  EF9A  F013         	goto	l2306
  6442   00274A                     u1070:
  6443   00274A                     l2310:
  6444   00274A  90D8               	bcf	status,0,c
  6445   00274C  360B               	rlcf	___lwdiv@quotient^0,f,c
  6446   00274E  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6447   002750  5009               	movf	___lwdiv@divisor^0,w,c
  6448   002752  5C07               	subwf	___lwdiv@dividend^0,w,c
  6449   002754  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6450   002756  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6451   002758  A0D8               	btfss	status,0,c
  6452   00275A  EFB1  F013         	goto	u1081
  6453   00275E  EFB3  F013         	goto	u1080
  6454   002762                     u1081:
  6455   002762  EFB8  F013         	goto	l2318
  6456   002766                     u1080:
  6457   002766  5009               	movf	___lwdiv@divisor^0,w,c
  6458   002768  5E07               	subwf	___lwdiv@dividend^0,f,c
  6459   00276A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6460   00276C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6461   00276E  800B               	bsf	___lwdiv@quotient^0,0,c
  6462   002770                     l2318:
  6463   002770  90D8               	bcf	status,0,c
  6464   002772  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6465   002774  3209               	rrcf	___lwdiv@divisor^0,f,c
  6466   002776  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6467   002778  EFA5  F013         	goto	l2310
  6468   00277C                     l927:
  6469   00277C  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6470   002780  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6471   002784  0012               	return		;funcret
  6472   002786                     __end_of___lwdiv:
  6473                           	callstack 0
  6474                           
  6475 ;; *************** function _LEDSon_init *****************
  6476 ;; Defined at:
  6477 ;;		line 18 in file "LEDsOn.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		None
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used: 1
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text41
  6505   002AE6                     __ptext41:
  6506                           	callstack 0
  6507   002AE6                     _LEDSon_init:
  6508                           	callstack 30
  6509   002AE6                     
  6510                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  6511   002AE6  9288               	bcf	136,1,c	;volatile
  6512                           
  6513                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  6514   002AE8  9088               	bcf	136,0,c	;volatile
  6515                           
  6516                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  6517   002AEA  9884               	bcf	132,4,c	;volatile
  6518                           
  6519                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  6520   002AEC  9684               	bcf	132,3,c	;volatile
  6521                           
  6522                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  6523   002AEE  9086               	bcf	134,0,c	;volatile
  6524                           
  6525                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  6526   002AF0  9287               	bcf	135,1,c	;volatile
  6527                           
  6528                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  6529   002AF2  9E86               	bcf	134,7,c	;volatile
  6530                           
  6531                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  6532   002AF4  9881               	bcf	129,4,c	;volatile
  6533                           
  6534                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  6535   002AF6  8E7E               	bsf	126,7,c	;volatile
  6536                           
  6537                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  6538   002AF8  827F               	bsf	127,1,c	;volatile
  6539                           
  6540                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  6541   002AFA  8879               	bsf	121,4,c	;volatile
  6542                           
  6543                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  6544   002AFC  987C               	bcf	124,4,c	;volatile
  6545                           
  6546                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  6547   002AFE  9280               	bcf	128,1,c	;volatile
  6548                           
  6549                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  6550   002B00  907E               	bcf	126,0,c	;volatile
  6551                           
  6552                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  6553   002B02  9080               	bcf	128,0,c	;volatile
  6554                           
  6555                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  6556   002B04  967C               	bcf	124,3,c	;volatile
  6557   002B06  0012               	return		;funcret
  6558   002B08                     __end_of_LEDSon_init:
  6559                           	callstack 0
  6560                           
  6561                           	psect	rparam
  6562   000000                     
  6563                           	psect	idloc
  6564                           
  6565                           ;Config register IDLOC0 @ 0x200000
  6566                           ;	unspecified, using default values
  6567   200000                     	org	2097152
  6568   200000  0FFF               	dw	4095
  6569                           
  6570                           ;Config register IDLOC1 @ 0x200002
  6571                           ;	unspecified, using default values
  6572   200002                     	org	2097154
  6573   200002  0FFF               	dw	4095
  6574                           
  6575                           ;Config register IDLOC2 @ 0x200004
  6576                           ;	unspecified, using default values
  6577   200004                     	org	2097156
  6578   200004  0FFF               	dw	4095
  6579                           
  6580                           ;Config register IDLOC3 @ 0x200006
  6581                           ;	unspecified, using default values
  6582   200006                     	org	2097158
  6583   200006  0FFF               	dw	4095
  6584                           
  6585                           ;Config register IDLOC4 @ 0x200008
  6586                           ;	unspecified, using default values
  6587   200008                     	org	2097160
  6588   200008  0FFF               	dw	4095
  6589                           
  6590                           ;Config register IDLOC5 @ 0x20000A
  6591                           ;	unspecified, using default values
  6592   20000A                     	org	2097162
  6593   20000A  0FFF               	dw	4095
  6594                           
  6595                           ;Config register IDLOC6 @ 0x20000C
  6596                           ;	unspecified, using default values
  6597   20000C                     	org	2097164
  6598   20000C  0FFF               	dw	4095
  6599                           
  6600                           ;Config register IDLOC7 @ 0x20000E
  6601                           ;	unspecified, using default values
  6602   20000E                     	org	2097166
  6603   20000E  0FFF               	dw	4095
  6604                           
  6605                           	psect	config
  6606                           
  6607                           ;Config register CONFIG1L @ 0x300000
  6608                           ;	External Oscillator mode Selection bits
  6609                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6610                           ;	Power-up default value for COSC bits
  6611                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6612   300000                     	org	3145728
  6613   300000  AA                 	db	170
  6614                           
  6615                           ;Config register CONFIG1H @ 0x300001
  6616                           ;	unspecified, using default values
  6617                           ;	Clock Out Enable bit
  6618                           ;	CLKOUTEN = 0x1, unprogrammed default
  6619                           ;	Clock Switch Enable bit
  6620                           ;	CSWEN = 0x1, unprogrammed default
  6621                           ;	Fail-Safe Clock Monitor Enable bit
  6622                           ;	FCMEN = 0x1, unprogrammed default
  6623   300001                     	org	3145729
  6624   300001  FF                 	db	255
  6625                           
  6626                           ;Config register CONFIG2L @ 0x300002
  6627                           ;	unspecified, using default values
  6628                           ;	Master Clear Enable bit
  6629                           ;	MCLRE = 0x1, unprogrammed default
  6630                           ;	Power-up Timer Enable bit
  6631                           ;	PWRTE = 0x1, unprogrammed default
  6632                           ;	Low-power BOR enable bit
  6633                           ;	LPBOREN = 0x1, unprogrammed default
  6634                           ;	Brown-out Reset Enable bits
  6635                           ;	BOREN = 0x3, unprogrammed default
  6636   300002                     	org	3145730
  6637   300002  FF                 	db	255
  6638                           
  6639                           ;Config register CONFIG2H @ 0x300003
  6640                           ;	unspecified, using default values
  6641                           ;	Brown Out Reset Voltage selection bits
  6642                           ;	BORV = 0x3, unprogrammed default
  6643                           ;	ZCD Disable bit
  6644                           ;	ZCD = 0x1, unprogrammed default
  6645                           ;	PPSLOCK bit One-Way Set Enable bit
  6646                           ;	PPS1WAY = 0x1, unprogrammed default
  6647                           ;	Stack Full/Underflow Reset Enable bit
  6648                           ;	STVREN = 0x1, unprogrammed default
  6649                           ;	Debugger Enable bit
  6650                           ;	DEBUG = 0x1, unprogrammed default
  6651                           ;	Extended Instruction Set Enable bit
  6652                           ;	XINST = 0x1, unprogrammed default
  6653   300003                     	org	3145731
  6654   300003  FF                 	db	255
  6655                           
  6656                           ;Config register CONFIG3L @ 0x300004
  6657                           ;	WDT Period Select bits
  6658                           ;	WDTCPS = 0x1F, unprogrammed default
  6659                           ;	WDT operating mode
  6660                           ;	WDTE = OFF, WDT Disabled
  6661   300004                     	org	3145732
  6662   300004  9F                 	db	159
  6663                           
  6664                           ;Config register CONFIG3H @ 0x300005
  6665                           ;	unspecified, using default values
  6666                           ;	WDT Window Select bits
  6667                           ;	WDTCWS = 0x7, unprogrammed default
  6668                           ;	WDT input clock selector
  6669                           ;	WDTCCS = 0x7, unprogrammed default
  6670   300005                     	org	3145733
  6671   300005  FF                 	db	255
  6672                           
  6673                           ;Config register CONFIG4L @ 0x300006
  6674                           ;	unspecified, using default values
  6675                           ;	Write Protection Block 0
  6676                           ;	WRT0 = 0x1, unprogrammed default
  6677                           ;	Write Protection Block 1
  6678                           ;	WRT1 = 0x1, unprogrammed default
  6679                           ;	Write Protection Block 2
  6680                           ;	WRT2 = 0x1, unprogrammed default
  6681                           ;	Write Protection Block 3
  6682                           ;	WRT3 = 0x1, unprogrammed default
  6683                           ;	Write Protection Block 3
  6684                           ;	WRT4 = 0x1, unprogrammed default
  6685                           ;	Write Protection Block 3
  6686                           ;	WRT5 = 0x1, unprogrammed default
  6687                           ;	Write Protection Block 3
  6688                           ;	WRT6 = 0x1, unprogrammed default
  6689                           ;	Write Protection Block 3
  6690                           ;	WRT7 = 0x1, unprogrammed default
  6691   300006                     	org	3145734
  6692   300006  FF                 	db	255
  6693                           
  6694                           ;Config register CONFIG4H @ 0x300007
  6695                           ;	unspecified, using default values
  6696                           ;	Configuration Register Write Protection bit
  6697                           ;	WRTC = 0x1, unprogrammed default
  6698                           ;	Boot Block Write Protection bit
  6699                           ;	WRTB = 0x1, unprogrammed default
  6700                           ;	Data EEPROM Write Protection bit
  6701                           ;	WRTD = 0x1, unprogrammed default
  6702                           ;	Scanner Enable bit
  6703                           ;	SCANE = 0x1, unprogrammed default
  6704                           ;	Low Voltage Programming Enable bit
  6705                           ;	LVP = 0x1, unprogrammed default
  6706   300007                     	org	3145735
  6707   300007  FF                 	db	255
  6708                           
  6709                           ;Config register CONFIG5L @ 0x300008
  6710                           ;	unspecified, using default values
  6711                           ;	UserNVM Program Memory Code Protection bit
  6712                           ;	CP = 0x1, unprogrammed default
  6713                           ;	DataNVM Memory Code Protection bit
  6714                           ;	CPD = 0x1, unprogrammed default
  6715   300008                     	org	3145736
  6716   300008  FF                 	db	255
  6717                           
  6718                           ;Config register CONFIG5H @ 0x300009
  6719                           ;	unspecified, using default values
  6720   300009                     	org	3145737
  6721   300009  FF                 	db	255
  6722                           
  6723                           ;Config register CONFIG6L @ 0x30000A
  6724                           ;	unspecified, using default values
  6725                           ;	Table Read Protection Block 0
  6726                           ;	EBTR0 = 0x1, unprogrammed default
  6727                           ;	Table Read Protection Block 1
  6728                           ;	EBTR1 = 0x1, unprogrammed default
  6729                           ;	Table Read Protection Block 2
  6730                           ;	EBTR2 = 0x1, unprogrammed default
  6731                           ;	Table Read Protection Block 3
  6732                           ;	EBTR3 = 0x1, unprogrammed default
  6733                           ;	Table Read Protection Block 4
  6734                           ;	EBTR4 = 0x1, unprogrammed default
  6735                           ;	Table Read Protection Block 5
  6736                           ;	EBTR5 = 0x1, unprogrammed default
  6737                           ;	Table Read Protection Block 6
  6738                           ;	EBTR6 = 0x1, unprogrammed default
  6739                           ;	Table Read Protection Block 7
  6740                           ;	EBTR7 = 0x1, unprogrammed default
  6741   30000A                     	org	3145738
  6742   30000A  FF                 	db	255
  6743                           
  6744                           ;Config register CONFIG6H @ 0x30000B
  6745                           ;	unspecified, using default values
  6746                           ;	Boot Block Table Read Protection bit
  6747                           ;	EBTRB = 0x1, unprogrammed default
  6748   30000B                     	org	3145739
  6749   30000B  FF                 	db	255
  6750                           tosu	equ	0xFFF
  6751                           tosh	equ	0xFFE
  6752                           tosl	equ	0xFFD
  6753                           stkptr	equ	0xFFC
  6754                           pclatu	equ	0xFFB
  6755                           pclath	equ	0xFFA
  6756                           pcl	equ	0xFF9
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           indf0	equ	0xFEF
  6764                           postinc0	equ	0xFEE
  6765                           postdec0	equ	0xFED
  6766                           preinc0	equ	0xFEC
  6767                           plusw0	equ	0xFEB
  6768                           fsr0h	equ	0xFEA
  6769                           fsr0l	equ	0xFE9
  6770                           wreg	equ	0xFE8
  6771                           indf1	equ	0xFE7
  6772                           postinc1	equ	0xFE6
  6773                           postdec1	equ	0xFE5
  6774                           preinc1	equ	0xFE4
  6775                           plusw1	equ	0xFE3
  6776                           fsr1h	equ	0xFE2
  6777                           fsr1l	equ	0xFE1
  6778                           bsr	equ	0xFE0
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           preinc2	equ	0xFDC
  6783                           plusw2	equ	0xFDB
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8

Data Sizes:
    Strings     136
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    134     143
    BANK1           256    230     250
    BANK2           256      0      92
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[59]), STR_1(CODE[41]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 59
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[59]), STR_1(CODE[41]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 59
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[59]), STR_1(CODE[41]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2256$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[59]), STR_1(CODE[41]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2207$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2207$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S532DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S532DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _card_response->_make_master_closeness
    _normalise_readings->_abs
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_make_master_closeness
    _make_master_closeness->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               232   232      0   61076
                                            132 BANK0      2     2      0
                                              0 BANK1    230   230      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                       87    73     14   46769
                                             45 BANK0     87    73     14
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  21     9     12    3516
                                             22 COMRAM    21     9     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   23972
                                             27 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    5341
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4733
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    6619
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    5037
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    3447
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     811
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    8663
                                             88 COMRAM     7     1      6
                                             25 BANK0     20    20      0
                            ___lwdiv
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    6254
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5447
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5097
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3877
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     370
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    2611
                                             13 COMRAM    16    10      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1368
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _card_response
     _collect_avg_readings
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      5C       9       35.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E6      FA       7       97.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRllhhhl     1E      0       0      48        0.0%
BITBIGSFRhhlllh     17      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      49        0.0%
BITBIGSFRllllhl      F      0       0      56        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      55        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      57        0.0%
BITBIGSFRllllhh      6      0       0      53        0.0%
BITBIGSFRlllhl       5      0       0      52        0.0%
BITBIGSFRhhllll      5      0       0      37        0.0%
BITBIGSFRlllhh       3      0       0      51        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      50        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     244      59        0.0%
DATA                 0      0     244       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 11:59:00 2022

                        _color_read_Red 282A                         _color_read_Blue 28CA  
                                    l22 2B46                                      l31 2918  
                                    l25 2878                                      l19 2A12  
                                    l28 28C8                                      l95 1E70  
                                    l88 2590                     ___wmul@multiplicand 0003  
                      _color_read_Green 287A                                     l104 2616  
                                   l114 247C                                     l124 2508  
                                   l109 23D0                                     l310 17F4  
                                   l151 2A96                                     l160 2B7E  
                                   l320 1B7C                                     l401 2A42  
                                   l233 14C0                                     l154 2A98  
                                   l234 14BE                                     l163 2B88  
                                   l315 19D4                                     l235 14CE  
                                   l172 299E                                     l157 2ABE  
                                   l341 119E                                     l237 15BA  
                                   l166 2B74                                     l326 2696  
                                   l238 15B6                                     l239 15C8  
                                   l344 2258                                     l265 2B06  
                                   l169 2B6A                                     l436 2AE4  
                                   l550 1D04                                     l383 2B26  
                                   l392 2B4A                                     l395 2B5E  
                                   l563 1FD4                                     l934 2784  
                                   l927 277C                                     u800 1BC2  
                                   u801 1BBE                                     u730 226C  
                                   u811 1BEC                                     u731 2268  
                                   u820 1C10                                     u900 1F4C  
                                   u740 227E                                     u821 1C0C  
                                   u901 1F48                                     u741 227A  
                                   u830 1C3A                                     u910 1F94  
                                   u750 22A6                                     u831 1C36  
                                   u911 1F90                                     u751 22A2  
                                   u840 1C7A                                     u760 22DC  
                                   u920 26A6                                     u841 1C76  
                                   u761 22D8                                     u921 26A2  
                                   u850 1CC4                                     u770 295C  
                                   u930 26FC                                     u851 1CC0  
                                   u771 2958                                     u931 26F8  
                                   u860 1E84                                     u780 29BA  
                                   u940 11D0                                     u861 1E80  
                                   u781 29B6                                     u941 11CA  
                                   u790 1B90                                     u870 1EB6  
                                   u950 11D2                                     u791 1B8C  
                                   u871 1EB2                                     u880 1EF4  
                                   u960 11E4                                     u881 1EF0  
                                   u961 11E0                                     u890 1F1E  
                                   u970 1220                                     u891 1F1A  
                                   u971 121C                                     u980 124C  
                                   u981 1248                                     u990 1262  
                                   u991 125E     normalise_readings@normalised_values 0021  
                      ??_motor_response 0020                                     _abs 29A0  
                                   _pad 2698                   __end_of_card_response 225A  
                                   prod 000FF3                                     wreg 000FE8  
                                  l1111 29D6                                    l1121 27D6  
                                  l1114 29DE                                    l1202 2B8A  
                                  ?_abs 0013                                    l1143 26BA  
                                  l2200 1ED6                                    l2120 226C  
                                  l1152 122C                                    l2210 1F4C  
                                  l2202 1EF4                                    l2122 227E  
                                  l1154 1234                                    l1147 2710  
                                  l1155 127A                                    l2300 2712  
                                  l2220 1FB4                                    l2212 1F6C  
                                  l2204 1EFC                                    l2140 29A0  
                                  l2124 2288                                    l2132 291A  
                                  l1173 2132                                    l2310 274A  
                                  l2302 271A                                    l2150 1BB0  
                                  l2214 1F7E                                    l2206 1F10  
                                  l2142 29BA                                    l2126 22A6  
                                  l2118 225A                                    l2134 2926  
                                  l2230 26C6                                    l1166 141C  
                                  l1191 2322                                    l2320 2776  
                                  l2312 2750                                    l2304 272C  
                                  l2400 2B5A                                    l2160 1BF2  
                                  l2152 1BB4                                    l2144 1B7E  
                                  l2208 1F1E                                    l2216 1F84  
                                  l2128 22DC                                    l2136 2938  
                                  l2232 26DA                                    l2224 2698  
                                  l2240 11C0                                    l3024 1150  
                                  l2314 2766                                    l2306 2734  
                                  l2170 1C4C                                    l2162 1C10  
                                  l2154 1BC2                                    l2146 1B82  
                                  l2218 1F94                                    l2138 293C  
                                  l2234 26DE                                    l2226 26A6  
                                  l2250 123C                                    l2242 11D4  
                                  l2330 201E                                    l2322 1FD6  
                                  l2402 27D8                                    l1179 2828  
                                  l2316 276E                                    l2308 273C  
                                  l2420 28C0                                    l2412 282A  
                                  l2172 1C7A                                    l2164 1C18  
                                  l2180 1CB4                                    l2156 1BE2  
                                  l2148 1B90                                    l2236 26FC  
                                  l2228 26B2                                    l2260 1276  
                                  l2252 124C                                    l2244 11E4  
                                  l2332 202E                                    l2324 1FFE  
                                  l2404 27E4                                    l2500 24A6  
                                  l2318 2770                                    l2414 2870  
                                  l2182 1CC4                                    l2174 1C9A  
                                  l2166 1C2C                                    l2158 1BE6  
                                  l2190 1E76                                    l2270 131A  
                                  l2262 1282                                    l2254 1252  
                                  l2246 1204                                    l2238 11A0  
                                  l2342 20F4                                    l2334 204E  
                                  l2326 200C                                    l2406 2800  
                                  l2510 24EC                                    l2502 24BE  
                                  l2430 2592                                    l1199 295C  
                                  l2352 2B76                                    l2360 2B6C  
                                  l2424 28CA                                    l2600 17A8  
                                  l2184 1CE4                                    l2176 1C9C  
                                  l2168 1C3A                                    l2192 1E84  
                                  l2280 13D6                                    l2272 1320  
                                  l2264 128C                                    l2256 1262  
                                  l2248 1220                                    l2336 206E  
                                  l2328 201A                                    l2408 2820  
                                  l2520 27C4                                    l2512 2786  
                                  l2504 24CA                                    l2440 25D8  
                                  l2432 2596                                    l2290 2A98  
                                  l2370 2964                                    l2354 2B7A  
                                  l2362 2B70                                    l2426 2910  
                                  l2418 287A                                    l2602 17AC  
                                  l2530 2A2A                                    l2178 1CAE  
                                  l2194 1EA4                                    l2282 13E6  
                                  l2266 1292                                    l2274 1384  
                                  l2258 126E                                    l2338 20C4  
                                  l2346 2106                                    l2514 2798  
                                  l2506 24D6                                    l2442 25E4  
                                  l2434 25A2                                    l2450 2344  
                                  l2292 2AA8                                    l2372 296C  
                                  l2364 2B80                                    l2356 2B62  
                                  l2604 17C8                                    l2524 2A14  
                                  l2196 1EA8                                    l2188 1E72  
                                  l2284 13EC                                    l2276 139E  
                                  l2268 1314                                    l2516 27A0  
                                  l2620 19D6                                    l2508 24E4  
                                  l2444 25F2                                    l2436 25B0  
                                  l2460 237C                                    l2612 17FA  
                                  l2540 2A82                                    l2532 2A6E  
                                  l2374 2974                                    l2366 2B84  
                                  l2358 2B66                                    l2526 2A18  
                                  l2198 1EB6                                    l2286 13FC  
                                  l2278 13BC                                    l2518 27A8  
                                  l2630 1B46                                    l2294 2AC0  
                                  l2390 1D8E                                    l2382 1D06  
                                  l2446 25FE                                    l2438 25BC  
                                  l2462 2388                                    l2470 23D2  
                                  l2710 1010                                    l2614 19AA  
                                  l2606 17F6                                    l2542 2A84  
                                  l2534 2A78                                    l2376 299A  
                                  l2368 2960                                    l2552 1618  
                                  l2640 261C                                    l2528 2A26  
                                  l2632 1B52                                    l2296 2ADC  
                                  l2392 1DD0                                    l2384 1D22  
                                  l2464 2394                                    l2456 234C  
                                  l2448 2324                                    l2480 2412  
                                  l2472 23F2                                    l2712 1028  
                                  l2616 19C2                                    l2536 2A7E  
                                  l2544 2B2A                                    l2800 256C  
                                  l2378 299C                                    l2570 16AC  
                                  l2554 1654                                    l2546 1610  
                                  l2650 265E                                    l2642 262C  
                                  l2634 1B6A                                    l2626 19DA  
                                  l2394 1DEC                                    l2386 1D76  
                                  l2466 239C                                    l2458 2364  
                                  l2490 2466                                    l2482 242A  
                                  l2730 10B0                                    l2618 19C4  
                                  l2538 2A80                                    l2810 258E  
                                  l2802 2576                                    l2812 2AE6  
                                  l2580 16FC                                    l2572 16C8  
                                  l2564 167C                                    l2556 1658  
                                  l2652 267E                                    l2636 1B6C  
                                  l2628 1A9A                                    l2396 1E30  
                                  l2388 1D8A                                    l2492 247E  
                                  l2468 23B8                                    l2484 2436  
                                  l2740 10C8                                    l2724 1058  
                                  l2708 0FFC                                    l2804 2578  
                                  l2820 2B16                                    l2900 1438  
                                  l2590 1774                                    l2582 1710  
                                  l2574 16F4                                    l2566 1690  
                                  l2558 1674                                    l2654 2682  
                                  l2638 2618                                    l2398 2B4A  
                                  l2494 249E                                    l2486 2442  
                                  l2478 23FA                                    l2742 10DC  
                                  l2726 106C                                    l2670 0ED0  
                                  l2662 0E8C                                    l2830 2134  
                                  l2806 2582                                    l2822 2B20  
                                  l2814 2B08                                    l2910 1452  
                                  l2902 143C                                    l2584 1728  
                                  l2568 16A8                                    l2656 2684  
                                  l2648 2630                                    l2488 244A  
                                  l2760 1124                                    l2728 1084  
                                  l2680 0F3C                                    l2672 0EE4  
                                  l2664 0E90                                    l2840 220A  
                                  l2832 2150                                    l2808 2584  
                                  l2824 2B22                                    l2816 2B12  
                                  l2920 146C                                    l2912 145A  
                                  l2904 1442                                    l2586 172C  
                                  l2658 2694                                    l2690 0F90  
                                  l2682 0F50                                    l2674 0EF8  
                                  l2666 0EA4                                    l2842 221A  
                                  l2834 2196                                    l2826 2B24  
                                  l2818 2B14                                    l2930 149A  
                                  l2922 1474                                    l2914 1460  
                                  l2906 1446                                    l2596 177C  
                                  l2588 1748                                    l2756 10F8  
                                  l2692 0FA8                                    l2684 0F64  
                                  l2676 0F10                                    l2668 0EBC  
                                  l2844 2234                                    l2836 21A2  
                                  l2828 2134                                    l2780 29E0  
                                  l2932 14A4                                    l2924 147C  
                                  l2916 1464                                    l2908 144A  
                                  l2598 1790                                    l2758 110C  
                                  l2694 0FBC                                    l2678 0F24  
                                  l2774 113C                                    l2846 2240  
                                  l2838 21EE                                    l2782 29E4  
                                  l2790 250A                                    l2950 151E  
                                  l2934 14AC                                    l2926 1482  
                                  l2918 1468                                    ?_pad 0011  
                                  l2696 0FD0                                    l2688 0F7C  
                                  l2784 29EE                                    l2792 2512  
                                  l2960 15A2                                    l2952 153E  
                                  l2944 14D0                                    l2936 14B4  
                                  l2928 148E                                    l2698 0FE4  
                                  l2786 29FE                                    l2794 253C  
                                  l2962 15CA                                    l2954 155E  
                                  l2946 14E8                                    l2938 14B6  
                                  l2890 1426                                    l2788 2A08  
                                  l2796 2560                                    l2956 1592  
                                  l2948 1504                                    l2892 142A  
                                  l2798 256A                                    l2958 159E  
                                  l2894 142E                                    l2886 141E  
                                  l2896 1432                                    l2888 1422  
                                  l2898 1434                                    STR_1 0E3C  
                                  STR_2 0E01                                    STR_3 0E65  
                                  STR_4 0E7F                                    u1000 139E  
                                  u1001 139A                                    u1010 13BC  
                                  u1011 13B8                                    u1020 13D6  
                                  u1100 204E                                    u1021 13D2  
                                  u1101 204A                                    u1030 13E6  
                                  u1110 206E                                    u1031 13E2  
                                  u1111 206A                                    u1040 2AA8  
                                  u1120 2988                                    u1200 23B8  
                                  u1041 2AA4                                    u1121 2980  
                                  u1201 23B4                                    u1050 2ABE  
                                  u1210 2466                                    u1051 2ABA  
                                  u1211 2462                                    u1060 272C  
                                  u1300 265E                                    u1140 1D22  
                                  u1220 2508                            ?_LEDSon_init 0001  
                                  u1061 2728                                    u1301 265A  
                                  u1141 1D1E                                    u1221 2504  
                                  u1070 274A                                    u1310 2694  
                                  u1230 2A42                                    u1150 1DEC  
                                  u1071 2746                                    u1311 2690  
                                  u1231 2A3E                                    u1151 1DE8  
                                  u1080 2766                                    u1240 1674  
                                  u1160 2B5A                                    u1081 2762  
                                  u1241 1670                                    u1161 2B56  
                                  u1138 298A                                    u1250 16C8  
                                  u1090 1FFE                                    u1170 2820  
                                  u1251 16C4                                    u1091 1FFA  
                                  u1171 281C                                    u1260 1748  
                                  u1180 25D4                                    u1261 1744  
                                  u1181 25D0                                    u1270 17C8  
                                  u1190 2616                                    u1271 17C4  
                                  u1191 2612                                    u1280 19D4  
                                  u1360 14CE                            _BAUD4CONbits 000EE9  
                                  u1281 19D0                                    u1361 14CA  
                                  u1290 1B7C                                    u1370 15B2  
                                  u1291 1B78                                    u1507 101A  
                                  u1371 15AE                                    u1380 15C8  
                                  u1517 1046                                    u1381 15C4  
                                  u1607 25A8                                    u1527 1076  
                                  u1447 14DC                                    u1617 25EA  
                                  u1537 10A2                                    u1457 29F4  
                                  _T2PR 000FBC                                    u1627 24DC  
                                  u1547 10E6                                    u1467 19B4  
                                  u1637 1B5E                                    u1557 1116  
                                  u1477 0EAE                                    u1647 169A  
                                  u1567 241C                                    u1487 0F2E  
                                  u1657 171A                                    u1577 2470  
                                  u1497 0F9A                                    u1667 179A  
                                  u1587 236E                                    u1597 23C2  
            normalise_readings@red_read 0019                                    abs@a 0013  
                                  _dbuf 023C                                    _main 141E  
                                  _dtoa 11A0                                    _prec 00E8  
                                  pad@i 0018                                    pad@p 0015  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  pad@w 001A                                    fsr2l 000FD9  
                                  _stop 2592                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0000  
                       card_response@mL 0097                         card_response@mR 0099  
                __end_of_color_read_Red 287A             normalise_readings@blue_read 001D  
                          ___param_bank 000000                                   ??_abs 0015  
                                 ??_pad 0017                             _turnRight45 23D2  
                       __end_of___aodiv 1D06                                   ?_main 0001  
                                 ?_dtoa 001C                         __end_of___aomod 1FD6  
                                 ?_stop 0014                         __end_of___lwdiv 2786  
                          vfpfcnvrt@fmt 0041                            main@red_read 01CD  
               __end_of_sendCharSerial4 2B60              __end_of_I2C_2_Master_Start 2B80  
            __end_of_I2C_2_Master_Write 2B6C                                   _flags 00EA  
                                 _fputc 225A                                   _fputs 291A  
                                 pad@fp 0011          determine_card@master_closeness 0001  
               ??_make_master_closeness 0079                                   _width 00E6  
                                 _putch 2B8A                                   main@i 01D3  
                                 dtoa@d 001E                                   dtoa@i 003C  
                                 dtoa@n 0034                                   dtoa@p 0030  
                                 dtoa@s 003E                                   dtoa@w 0032  
                   normalise_readings@i 002B                                   tablat 000FF5  
                                 status 000FD8                         __end_of_sprintf 27D8  
        card_response@normalised_values 009B                        card_response@buf 008D  
               __end_of_color_read_Blue 291A                   _I2C_2_Master_RepStart 2B80  
                       ?_color_read_Red 0005                         __initialization 2A44  
                          __end_of_main 1610                            __end_of_dtoa 141E  
                          __end_of_stop 2618                                  ??_main 00E4  
                                ??_dtoa 0026                                  ??_stop 0018  
                         __activetblptr 000003                           main@blue_read 01D1  
                          ?_setMotorPWM 000E                                  ?_fputc 0001  
                                ?_fputs 000A                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 000E  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                _RG6PPS 000E88                __end_of_color_click_init 2A14  
                make_master_closeness@i 005F                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0057                               ??___aodiv 0011  
                             ??___aomod 0011                                  ___wmul 2AC0  
                    _normalise_readings 17F6                               ??___lwdiv 000B  
                                clear_0 2A4A                                  clear_1 2A56  
                                clear_2 2A62                                  isa$std 000001  
                                pad@buf 0013                                  dtoa@fp 001C  
                   ?_normalise_readings 0017                                  fputc@c 0001  
                                fputs@c 000E                                  fputs@i 000F  
                                fputs@s 000A                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                                putch@c 0001                        __end_of_vfprintf 282A  
                                stop@mL 0014                                  stop@mR 0016  
                     ??_initDCmotorsPWM 0001                               ??_sprintf 0059  
                     card_response@card 00E3                              __accesstop 0060  
               __end_of__initialization 2A68                __end_of_color_read_Green 28CA  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0023  
                         ___rparam_used 000001                        ?_color_read_Blue 0005  
          __end_of_collect_avg_readings 17F6                          __pcstackCOMRAM 0001  
                      _reverseFullSpeed 247E              collect_avg_readings@i_1540 001C  
            collect_avg_readings@i_1538 0018              collect_avg_readings@i_1539 001A  
                         __end_of_fputc 2324                           __end_of_fputs 295E  
                         __end_of_putch 2B8C                                 ??_fputc 0005  
                               ??_fputs 000E                                 ??_putch 0001  
                            __pbssBANK0 00E6                              __pbssBANK1 01E6  
                            __pbssBANK2 0200                       _color_writetoaddr 2B28  
                          _T2CLKCONbits 000FBF                        motor_response@mL 001C  
                      motor_response@mR 001E                      ?_color_writetoaddr 0003  
                               ?___wmul 0001                      motor_response@card 0022  
                          ?_turnRight45 0014                     ??_color_writetoaddr 0004  
                        main@green_read 01CF                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                  color_writetoaddr@value 0003  
                      ??_color_read_Red 0007           __end_of_make_master_closeness 1B7E  
        determine_card@predicted_colour 0009               __end_of_color_writetoaddr 2B48  
                    _I2C_2_Master_Start 2B76                              _initUSART4 2B08  
                    _I2C_2_Master_Write 2B60                                 __Hparam 0000  
                               __Lparam 0000                       color_read_Red@tmp 000A  
make_master_closeness@normalised_values 005B                 sendStringSerial4@string 0002  
                     reverseFullSpeed@i 0019                                 ___aodiv 1B7E  
                               ___aomod 1E72                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 2712                     ?_I2C_2_Master_Write 0001  
                             ?_vfprintf 0051                            __psmallconst 0E00  
                          turnLeft45@mL 0014                            turnLeft45@mR 0016  
                               __pcinit 2A44                                 __ramtop 0E00  
                               __ptext0 141E                                 __ptext1 2B08  
                               __ptext2 250A                                 __ptext3 29E0  
                               __ptext4 2B28                                 __ptext5 2A6E  
                               __ptext6 2134                                 __ptext7 17F6  
                               __ptext8 0E8A                                 __ptext9 23D2  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 00EE                    _collect_avg_readings 1610  
                               main@buf 0100                                 _sprintf 2786  
                  ??_I2C_2_Master_Start 0002                    ??_I2C_2_Master_Write 0002  
                  end_of_initialization 2A68          collect_avg_readings@green_read 0010  
                 normalise_readings@buf 0017                                 fputc@fp 0003  
                               fputs@fp 000C                       ?_color_click_init 0001  
                          turnRight45@i 001A                      ??_color_click_init 0005  
                     __end_of_vfpfcnvrt 2134                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 0047  
                            ??_vfprintf 0057                         _initDCmotorsPWM 250A  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0013  
     normalise_readings@expected_values 001F                           _card_response 2134  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0012  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 000E                __end_of_reverseFullSpeed 250A  
                   main@expected_values 0196                color_writetoaddr@address 0004  
               ??_I2C_2_Master_RepStart 0002                             _CCP1CONbits 000FAB  
                          _EUSART4RXbuf 01E6                            _EUSART4TXbuf 0200  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0005  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0001  
                            main@motorL 01D4                              main@motorR 01DD  
                    ??_color_read_Green 0007                              _turnLeft45 2324  
                           vfpfcnvrt@ap 0043                             vfpfcnvrt@cp 004F  
                           vfpfcnvrt@fp 003F                          __end_of___wmul 2AE6  
                       determine_card@i 000A                          ?_card_response 008D  
                   start_initialization 2A44                             __end_of_abs 29E0  
                           __end_of_pad 2712                           _TxBufWriteCnt 00EC  
                         ??_LEDSon_init 0001                     color_read_Green@tmp 000A  
               __end_of_initDCmotorsPWM 2592                             vfprintf@fmt 0053  
                              ??___wmul 0005                          _determine_card 2618  
                ??_collect_avg_readings 0014                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                        ___aodiv@dividend 0001  
                        _motor_response 0E8A                     __end_of_LEDSon_init 2B08  
                      ___lwdiv@dividend 0007                               _dtoa$2284 002E  
                           ?_turnLeft45 0014                                ?___aodiv 0001  
                              ?___aomod 0001                        ___aodiv@quotient 0013  
                __end_of_determine_card 2698                                ?___lwdiv 0007  
                  I2C_2_Master_Read@ack 0003                         ??_card_response 0060  
                  I2C_2_Master_Read@tmp 0004                             __smallconst 0E00  
                     _I2C_2_Master_Idle 2A98                       _I2C_2_Master_Init 2A6E  
                     _I2C_2_Master_Read 295E                       _I2C_2_Master_Stop 2B6C  
                          _RxBufReadCnt 00ED            normalise_readings@difference 0029  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0010  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000B  
                __end_of_motor_response 11A0                             turnLeft45@i 001A  
                              ?_sprintf 0060                       _sendStringSerial4 2A14  
                   ??_I2C_2_Master_Idle 0001                     ??_I2C_2_Master_Init 0001  
                   ??_I2C_2_Master_Read 0002                          ___wmul@product 0005  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0002  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                    ?_sendStringSerial4 0002                                _PIE4bits 000E2D  
                 _make_master_closeness 19D6                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0001  
              make_master_closeness@buf 0059                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0004                                _SSP2STAT 000ED8  
                       ?_determine_card 0001                               _vfpfcnvrt 1FD6  
             __end_of_I2C_2_Master_Idle 2AC0               __end_of_I2C_2_Master_Init 2A98  
             __end_of_I2C_2_Master_Read 29A0                       ___wmul@multiplier 0001  
             __end_of_I2C_2_Master_Stop 2B76                            setMotorPWM@m 000E  
           I2C_2_Master_Write@data_byte 0002            normalise_readings@green_read 001B  
                     ??_color_read_Blue 0007                            _TxBufReadCnt 00EB  
                       ?_motor_response 001C                       ?_reverseFullSpeed 0014  
             __end_of_sendStringSerial4 2A44                             _LEDSon_init 2AE6  
                    ??_reverseFullSpeed 0018           __end_of_I2C_2_Master_RepStart 2B8A  
                    color_read_Blue@tmp 000A                     __end_of_setMotorPWM 1E72  
                          ??_initUSART4 0001                                __Hrparam 0000  
                            vfprintf@ap 0055                                __Lrparam 0000  
                            vfprintf@fp 0051   make_master_closeness@master_closeness 005D  
                    reverseFullSpeed@mL 0014                      reverseFullSpeed@mR 0016  
                            ?_vfpfcnvrt 003F                         ___aodiv@divisor 0009  
                       ___aodiv@counter 0011                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0062  
                       ___lwdiv@divisor 0009                      __end_of_initUSART4 2B28  
                       ___lwdiv@counter 000D                                __ptext10 2324  
                              __ptext11 2592                                __ptext20 2698  
                              __ptext12 247E                                __ptext21 291A  
                              __ptext13 1D06                                __ptext30 1610  
                              __ptext22 225A                                __ptext14 2AC0  
                              __ptext31 282A                                __ptext23 2B8A  
                              __ptext15 19D6                                __ptext40 2712  
                              __ptext32 287A                                __ptext24 29A0  
                              __ptext16 2786                                __ptext41 2AE6  
                              __ptext33 28CA                                __ptext25 1E72  
                              __ptext17 27D8                                __ptext34 2B60  
                              __ptext26 1B7E                                __ptext18 1FD6  
                              __ptext35 2B6C                                __ptext27 2A14  
                              __ptext19 11A0                                __ptext36 2B76  
                              __ptext28 2B48                                __ptext37 2B80  
                              __ptext29 2618                                __ptext38 295E  
                              __ptext39 2A98                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0059  
                              isa$xinst 000000                              _RC4STAbits 000EE7  
                              _vfprintf 27D8                           ??_turnRight45 0018  
                      ___aomod@dividend 0001                   collect_avg_readings@i 0016  
                           _setMotorPWM 1D06           collect_avg_readings@blue_read 0012  
                         turnRight45@mL 0014                           turnRight45@mR 0016  
                             sprintf@ap 006C              __end_of_normalise_readings 19D6  
          card_response@expected_values 0095                 card_response@green_read 0091  
                          ??_turnLeft45 0018          determine_card@current_smallest 0007  
                       ___aomod@divisor 0009                             ??_vfpfcnvrt 0045  
                       ___aomod@counter 0011                  card_response@blue_read 0093  
                      _color_click_init 29E0           card_response@master_closeness 00D1  
                              sprintf@f 006E                                sprintf@s 0060  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 247E                      __end_of_turnLeft45 23D2  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0012  
                       _sendCharSerial4 2B48                   card_response@red_read 008F  
                          ___aomod@sign 0012                        ??_determine_card 0003  
                          main@PWMcycle 01CC  
