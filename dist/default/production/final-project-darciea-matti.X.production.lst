

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 20:45:38 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Version 2.35
    63                           ; Generated 05/05/2021 GMT
    64                           ; 
    65                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F67K40 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97   000000                     _TX4REG	set	3812
    98   000000                     _RC4STAbits	set	3815
    99   000000                     _SP4BRGH	set	3814
   100   000000                     _LATHbits	set	3968
   101   000000                     _LATGbits	set	3967
   102   000000                     _TRISAbits	set	3969
   103   000000                     _TRISFbits	set	3974
   104   000000                     _TRISDbits	set	3972
   105   000000                     _TRISGbits	set	3975
   106   000000                     _SSP2CON2bits	set	3802
   107   000000                     _RX4PPS	set	3605
   108   000000                     _SSP2CLKPPS	set	3612
   109   000000                     _SSP2DATPPS	set	3613
   110   000000                     _RC7PPS	set	3689
   111   000000                     _RE2PPS	set	3700
   112   000000                     _TRISCbits	set	3971
   113   000000                     _TRISEbits	set	3973
   114   000000                     _TRISHbits	set	3976
   115   000000                     _PORTFbits	set	3982
   116   000000                     _T2PR	set	4028
   117   000000                     _T2CONbits	set	4029
   118   000000                     _CCPR2H	set	4006
   119   000000                     _CCPR1H	set	4010
   120   000000                     _RE4PPS	set	3702
   121   000000                     _RG6PPS	set	3720
   122   000000                     _RD5PPS	set	3695
   123   000000                     _ANSELDbits	set	3751
   124   000000                     _SSP2ADD	set	3798
   125   000000                     _SSP2CON1bits	set	3801
   126   000000                     _CCPR4H	set	3873
   127   000000                     _CCPR3H	set	3877
   128   000000                     _T2CLKCONbits	set	4031
   129   000000                     _T2HLTbits	set	4030
   130   000000                     _CCP1CONbits	set	4011
   131   000000                     _CCPTMRS0bits	set	4013
   132   000000                     _CCP2CONbits	set	4007
   133   000000                     _LATAbits	set	3961
   134   000000                     _LATDbits	set	3964
   135   000000                     _CCP3CONbits	set	3878
   136   000000                     _CCP4CONbits	set	3874
   137   000000                     _RC4REG	set	3811
   138   000000                     _SP4BRGL	set	3813
   139   000000                     _TX4STAbits	set	3816
   140   000000                     _BAUD4CONbits	set	3817
   141   000000                     _SSP2CON2	set	3802
   142   000000                     _SSP2STAT	set	3800
   143   000000                     _ANSELFbits	set	3764
   144   000000                     _SSP2BUF	set	3797
   145   000000                     _PIE4bits	set	3629
   146   000000                     _PIR4bits	set	3639
   147   000000                     _RC0PPS	set	3682
   148   000000                     _RD6PPS	set	3696
   149   000000                     _LATFbits	set	3966
   150                           
   151                           	psect	smallconst
   152   000E00                     __psmallconst:
   153                           	callstack 0
   154   000E00  00                 	db	0
   155   000E01                     STR_1:
   156   000E01  0A                 	db	10
   157   000E02  20                 	db	32
   158   000E03  45                 	db	69	;'E'
   159   000E04  58                 	db	88	;'X'
   160   000E05  50                 	db	80	;'P'
   161   000E06  45                 	db	69	;'E'
   162   000E07  43                 	db	67	;'C'
   163   000E08  54                 	db	84	;'T'
   164   000E09  45                 	db	69	;'E'
   165   000E0A  44                 	db	68	;'D'
   166   000E0B  3A                 	db	58	;':'
   167   000E0C  20                 	db	32
   168   000E0D  43                 	db	67	;'C'
   169   000E0E  6C                 	db	108	;'l'
   170   000E0F  65                 	db	101	;'e'
   171   000E10  61                 	db	97	;'a'
   172   000E11  72                 	db	114	;'r'
   173   000E12  20                 	db	32
   174   000E13  25                 	db	37
   175   000E14  64                 	db	100	;'d'
   176   000E15  2C                 	db	44
   177   000E16  52                 	db	82	;'R'
   178   000E17  20                 	db	32
   179   000E18  25                 	db	37
   180   000E19  64                 	db	100	;'d'
   181   000E1A  2C                 	db	44
   182   000E1B  20                 	db	32
   183   000E1C  47                 	db	71	;'G'
   184   000E1D  20                 	db	32
   185   000E1E  25                 	db	37
   186   000E1F  64                 	db	100	;'d'
   187   000E20  2C                 	db	44
   188   000E21  20                 	db	32
   189   000E22  42                 	db	66	;'B'
   190   000E23  20                 	db	32
   191   000E24  25                 	db	37
   192   000E25  64                 	db	100	;'d'
   193   000E26  20                 	db	32
   194   000E27  20                 	db	32
   195   000E28  43                 	db	67	;'C'
   196   000E29  41                 	db	65	;'A'
   197   000E2A  52                 	db	82	;'R'
   198   000E2B  44                 	db	68	;'D'
   199   000E2C  3A                 	db	58	;':'
   200   000E2D  20                 	db	32
   201   000E2E  25                 	db	37
   202   000E2F  64                 	db	100	;'d'
   203   000E30  20                 	db	32
   204   000E31  0A                 	db	10
   205   000E32  00                 	db	0
   206   000E33                     STR_3:
   207   000E33  0A                 	db	10
   208   000E34  20                 	db	32
   209   000E35  41                 	db	65	;'A'
   210   000E36  56                 	db	86	;'V'
   211   000E37  47                 	db	71	;'G'
   212   000E38  3A                 	db	58	;':'
   213   000E39  20                 	db	32
   214   000E3A  43                 	db	67	;'C'
   215   000E3B  6C                 	db	108	;'l'
   216   000E3C  65                 	db	101	;'e'
   217   000E3D  61                 	db	97	;'a'
   218   000E3E  72                 	db	114	;'r'
   219   000E3F  20                 	db	32
   220   000E40  25                 	db	37
   221   000E41  64                 	db	100	;'d'
   222   000E42  2C                 	db	44
   223   000E43  20                 	db	32
   224   000E44  52                 	db	82	;'R'
   225   000E45  20                 	db	32
   226   000E46  25                 	db	37
   227   000E47  64                 	db	100	;'d'
   228   000E48  2C                 	db	44
   229   000E49  20                 	db	32
   230   000E4A  47                 	db	71	;'G'
   231   000E4B  20                 	db	32
   232   000E4C  25                 	db	37
   233   000E4D  64                 	db	100	;'d'
   234   000E4E  2C                 	db	44
   235   000E4F  20                 	db	32
   236   000E50  42                 	db	66	;'B'
   237   000E51  20                 	db	32
   238   000E52  25                 	db	37
   239   000E53  64                 	db	100	;'d'
   240   000E54  20                 	db	32
   241   000E55  0A                 	db	10
   242   000E56  00                 	db	0
   243   000E57                     STR_2:
   244   000E57  0A                 	db	10
   245   000E58  20                 	db	32
   246   000E59  45                 	db	69	;'E'
   247   000E5A  78                 	db	120	;'x'
   248   000E5B  70                 	db	112	;'p'
   249   000E5C  65                 	db	101	;'e'
   250   000E5D  63                 	db	99	;'c'
   251   000E5E  74                 	db	116	;'t'
   252   000E5F  65                 	db	101	;'e'
   253   000E60  64                 	db	100	;'d'
   254   000E61  20                 	db	32
   255   000E62  63                 	db	99	;'c'
   256   000E63  6C                 	db	108	;'l'
   257   000E64  65                 	db	101	;'e'
   258   000E65  61                 	db	97	;'a'
   259   000E66  72                 	db	114	;'r'
   260   000E67  3A                 	db	58	;':'
   261   000E68  20                 	db	32
   262   000E69  25                 	db	37
   263   000E6A  64                 	db	100	;'d'
   264   000E6B  20                 	db	32
   265   000E6C  0A                 	db	10
   266   000E6D  00                 	db	0
   267   000E6E                     STR_4:
   268   000E6E  43                 	db	67	;'C'
   269   000E6F  41                 	db	65	;'A'
   270   000E70  52                 	db	82	;'R'
   271   000E71  44                 	db	68	;'D'
   272   000E72  20                 	db	32
   273   000E73  25                 	db	37
   274   000E74  64                 	db	100	;'d'
   275   000E75  20                 	db	32
   276   000E76  0A                 	db	10
   277   000E77  00                 	db	0
   278   000E78  00                 	db	0	; dummy byte at the end
   279   000000                     
   280                           ; #config settings
   281                           
   282                           	psect	cinit
   283   002DC4                     __pcinit:
   284                           	callstack 0
   285   002DC4                     start_initialization:
   286                           	callstack 0
   287   002DC4                     __initialization:
   288                           	callstack 0
   289                           
   290                           ; Clear objects allocated to BANK2 (112 bytes)
   291   002DC4  EE02  F000         	lfsr	0,__pbssBANK2
   292   002DC8  0E70               	movlw	112
   293   002DCA                     clear_0:
   294   002DCA  6AEE               	clrf	postinc0,c
   295   002DCC  06E8               	decf	wreg,f,c
   296   002DCE  E1FD               	bnz	clear_0
   297                           
   298                           ; Clear objects allocated to BANK0 (8 bytes)
   299   002DD0  EE00  F0E6         	lfsr	0,__pbssBANK0
   300   002DD4  0E08               	movlw	8
   301   002DD6                     clear_1:
   302   002DD6  6AEE               	clrf	postinc0,c
   303   002DD8  06E8               	decf	wreg,f,c
   304   002DDA  E1FD               	bnz	clear_1
   305                           
   306                           ; Clear objects allocated to COMRAM (1 bytes)
   307   002DDC  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   308   002DDE                     end_of_initialization:
   309                           	callstack 0
   310   002DDE                     __end_of__initialization:
   311                           	callstack 0
   312   002DDE  0100               	movlb	0
   313   002DE0  EFB6  F00C         	goto	_main	;jump to C main() function
   314                           
   315                           	psect	bssCOMRAM
   316   00005F                     __pbssCOMRAM:
   317                           	callstack 0
   318   00005F                     _TxBufWriteCnt:
   319                           	callstack 0
   320   00005F                     	ds	1
   321                           
   322                           	psect	bssBANK0
   323   0000E6                     __pbssBANK0:
   324                           	callstack 0
   325   0000E6                     _width:
   326                           	callstack 0
   327   0000E6                     	ds	2
   328   0000E8                     _prec:
   329                           	callstack 0
   330   0000E8                     	ds	2
   331   0000EA                     _flags:
   332                           	callstack 0
   333   0000EA                     	ds	1
   334   0000EB                     _TxBufReadCnt:
   335                           	callstack 0
   336   0000EB                     	ds	1
   337   0000EC                     _RxBufReadCnt:
   338                           	callstack 0
   339   0000EC                     	ds	1
   340   0000ED                     _RxBufWriteCnt:
   341                           	callstack 0
   342   0000ED                     	ds	1
   343                           
   344                           	psect	bssBANK2
   345   000200                     __pbssBANK2:
   346                           	callstack 0
   347   000200                     _EUSART4TXbuf:
   348                           	callstack 0
   349   000200                     	ds	60
   350   00023C                     _EUSART4RXbuf:
   351                           	callstack 0
   352   00023C                     	ds	20
   353   000250                     _dbuf:
   354                           	callstack 0
   355   000250                     	ds	32
   356                           
   357                           	psect	cstackBANK1
   358   000100                     __pcstackBANK1:
   359                           	callstack 0
   360   000100                     main@buf:
   361                           	callstack 0
   362                           
   363                           ; 150 bytes @ 0x0
   364   000100                     	ds	150
   365   000196                     main@expected_values:
   366                           	callstack 0
   367                           
   368                           ; 72 bytes @ 0x96
   369   000196                     	ds	72
   370   0001DE                     main@clear_read_check:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xDE
   374   0001DE                     	ds	2
   375   0001E0                     main@PWMcycle:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0xE0
   379   0001E0                     	ds	1
   380   0001E1                     main@red_read:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0xE1
   384   0001E1                     	ds	2
   385   0001E3                     main@green_read:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xE3
   389   0001E3                     	ds	2
   390   0001E5                     main@blue_read:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0xE5
   394   0001E5                     	ds	2
   395   0001E7                     main@i:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0xE7
   399   0001E7                     	ds	1
   400   0001E8                     main@clear_read:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0xE8
   404   0001E8                     	ds	2
   405   0001EA                     main@motorL:
   406                           	callstack 0
   407                           
   408                           ; 9 bytes @ 0xEA
   409   0001EA                     	ds	9
   410   0001F3                     main@motorR:
   411                           	callstack 0
   412                           
   413                           ; 9 bytes @ 0xF3
   414   0001F3                     	ds	9
   415                           
   416                           	psect	cstackBANK0
   417   000060                     __pcstackBANK0:
   418                           	callstack 0
   419   000060                     ?_sprintf:
   420                           	callstack 0
   421   000060                     sprintf@s:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0x0
   425   000060                     	ds	2
   426   000062                     sprintf@fmt:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x2
   430   000062                     	ds	12
   431   00006E                     sprintf@ap:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0xE
   435   00006E                     	ds	2
   436   000070                     sprintf@f:
   437                           	callstack 0
   438                           
   439                           ; 11 bytes @ 0x10
   440   000070                     	ds	11
   441   00007B                     clear_read_calibration@buf:
   442                           	callstack 0
   443   00007B                     card_response@buf:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x1B
   447   00007B                     	ds	2
   448   00007D                     clear_read_calibration@clear_read:
   449                           	callstack 0
   450   00007D                     card_response@clear_read:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x1D
   454   00007D                     	ds	2
   455   00007F                     clear_read_calibration@clear_read_check:
   456                           	callstack 0
   457   00007F                     card_response@red_read:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x1F
   461   00007F                     	ds	2
   462   000081                     clear_read_calibration@i:
   463                           	callstack 0
   464   000081                     card_response@green_read:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x21
   468   000081                     	ds	2
   469   000083                     clear_read_calibration@i_1550:
   470                           	callstack 0
   471   000083                     card_response@blue_read:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x23
   475   000083                     	ds	2
   476   000085                     card_response@expected_values:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x25
   480   000085                     	ds	2
   481   000087                     card_response@mL:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x27
   485   000087                     	ds	2
   486   000089                     card_response@mR:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x29
   490   000089                     	ds	2
   491   00008B                     card_response@normalised_values:
   492                           	callstack 0
   493                           
   494                           ; 72 bytes @ 0x2B
   495   00008B                     	ds	72
   496   0000D3                     card_response@master_closeness:
   497                           	callstack 0
   498                           
   499                           ; 18 bytes @ 0x73
   500   0000D3                     	ds	18
   501   0000E5                     card_response@card:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x85
   505   0000E5                     	ds	1
   506                           
   507                           	psect	cstackCOMRAM
   508   000001                     __pcstackCOMRAM:
   509                           	callstack 0
   510   000001                     ??_I2C_2_Master_Idle:
   511   000001                     ?___wmul:
   512                           	callstack 0
   513   000001                     ?___aodiv:
   514                           	callstack 0
   515   000001                     ?___aomod:
   516                           	callstack 0
   517   000001                     sendCharSerial4@charToSend:
   518                           	callstack 0
   519   000001                     make_master_closeness@buf:
   520                           	callstack 0
   521   000001                     determine_card@master_closeness:
   522                           	callstack 0
   523   000001                     ___wmul@multiplier:
   524                           	callstack 0
   525   000001                     fputc@c:
   526                           	callstack 0
   527   000001                     ___aodiv@dividend:
   528                           	callstack 0
   529   000001                     ___aomod@dividend:
   530                           	callstack 0
   531                           
   532                           ; 8 bytes @ 0x0
   533   000001                     	ds	1
   534   000002                     ??_I2C_2_Master_Read:
   535   000002                     I2C_2_Master_Write@data_byte:
   536                           	callstack 0
   537   000002                     sendStringSerial4@string:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x1
   541   000002                     	ds	1
   542   000003                     ??_determine_card:
   543   000003                     color_writetoaddr@value:
   544                           	callstack 0
   545   000003                     I2C_2_Master_Read@ack:
   546                           	callstack 0
   547   000003                     make_master_closeness@normalised_values:
   548                           	callstack 0
   549   000003                     ___wmul@multiplicand:
   550                           	callstack 0
   551   000003                     fputc@fp:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x2
   555   000003                     	ds	1
   556   000004                     color_writetoaddr@address:
   557                           	callstack 0
   558   000004                     I2C_2_Master_Read@tmp:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x3
   562   000004                     	ds	1
   563   000005                     ??_fputc:
   564   000005                     ??_color_click_init:
   565   000005                     ?_color_read_Red:
   566                           	callstack 0
   567   000005                     ?_color_read_Green:
   568                           	callstack 0
   569   000005                     ?_color_read_Blue:
   570                           	callstack 0
   571   000005                     ?_color_read_Clear:
   572                           	callstack 0
   573   000005                     make_master_closeness@master_closeness:
   574                           	callstack 0
   575   000005                     ___wmul@product:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0x4
   579   000005                     	ds	2
   580   000007                     ??_color_read_Red:
   581   000007                     ??_color_read_Green:
   582   000007                     ??_color_read_Blue:
   583   000007                     ??_color_read_Clear:
   584   000007                     ??_make_master_closeness:
   585   000007                     ?___lwdiv:
   586                           	callstack 0
   587   000007                     determine_card@current_smallest:
   588                           	callstack 0
   589   000007                     ___lwdiv@dividend:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x6
   593   000007                     	ds	2
   594   000009                     determine_card@predicted_colour:
   595                           	callstack 0
   596   000009                     ___lwdiv@divisor:
   597                           	callstack 0
   598   000009                     ___aodiv@divisor:
   599                           	callstack 0
   600   000009                     ___aomod@divisor:
   601                           	callstack 0
   602                           
   603                           ; 8 bytes @ 0x8
   604   000009                     	ds	1
   605   00000A                     determine_card@i:
   606                           	callstack 0
   607   00000A                     color_read_Red@tmp:
   608                           	callstack 0
   609   00000A                     color_read_Green@tmp:
   610                           	callstack 0
   611   00000A                     color_read_Blue@tmp:
   612                           	callstack 0
   613   00000A                     color_read_Clear@tmp:
   614                           	callstack 0
   615   00000A                     fputs@s:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x9
   619   00000A                     	ds	1
   620   00000B                     ___lwdiv@quotient:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0xA
   624   00000B                     	ds	1
   625   00000C                     collect_avg_readings@clear_read:
   626                           	callstack 0
   627   00000C                     fputs@fp:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0xB
   631   00000C                     	ds	1
   632   00000D                     ___lwdiv@counter:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0xC
   636   00000D                     	ds	1
   637   00000E                     fputs@c:
   638                           	callstack 0
   639   00000E                     setMotorPWM@m:
   640                           	callstack 0
   641   00000E                     collect_avg_readings@red_read:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0xD
   645   00000E                     	ds	1
   646   00000F                     fputs@i:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0xE
   650   00000F                     	ds	1
   651   000010                     ??_setMotorPWM:
   652   000010                     collect_avg_readings@green_read:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0xF
   656   000010                     	ds	1
   657   000011                     ___aodiv@counter:
   658                           	callstack 0
   659   000011                     ___aomod@counter:
   660                           	callstack 0
   661   000011                     pad@fp:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x10
   665   000011                     	ds	1
   666   000012                     setMotorPWM@posDuty:
   667                           	callstack 0
   668   000012                     ___aodiv@sign:
   669                           	callstack 0
   670   000012                     ___aomod@sign:
   671                           	callstack 0
   672   000012                     collect_avg_readings@blue_read:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x11
   676   000012                     	ds	1
   677   000013                     ?_abs:
   678                           	callstack 0
   679   000013                     setMotorPWM@negDuty:
   680                           	callstack 0
   681   000013                     abs@a:
   682                           	callstack 0
   683   000013                     pad@buf:
   684                           	callstack 0
   685   000013                     ___aodiv@quotient:
   686                           	callstack 0
   687                           
   688                           ; 8 bytes @ 0x12
   689   000013                     	ds	1
   690   000014                     ??_collect_avg_readings:
   691   000014                     stop@mL:
   692                           	callstack 0
   693   000014                     turnLeft45@mL:
   694                           	callstack 0
   695   000014                     turnRight45@mL:
   696                           	callstack 0
   697   000014                     reverseFullSpeed@mL:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x13
   701   000014                     	ds	1
   702   000015                     ??_abs:
   703   000015                     pad@p:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0x14
   707   000015                     	ds	1
   708   000016                     stop@mR:
   709                           	callstack 0
   710   000016                     turnLeft45@mR:
   711                           	callstack 0
   712   000016                     turnRight45@mR:
   713                           	callstack 0
   714   000016                     reverseFullSpeed@mR:
   715                           	callstack 0
   716   000016                     collect_avg_readings@i:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x15
   720   000016                     	ds	1
   721   000017                     ??_pad:
   722   000017                     normalise_readings@buf:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x16
   726   000017                     	ds	1
   727   000018                     ??_stop:
   728   000018                     ??_turnLeft45:
   729   000018                     ??_turnRight45:
   730   000018                     ??_reverseFullSpeed:
   731   000018                     collect_avg_readings@i_1561:
   732                           	callstack 0
   733   000018                     pad@i:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x17
   737   000018                     	ds	1
   738   000019                     reverseFullSpeed@i:
   739                           	callstack 0
   740   000019                     normalise_readings@clear_read:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x18
   744   000019                     	ds	1
   745   00001A                     turnLeft45@i:
   746                           	callstack 0
   747   00001A                     turnRight45@i:
   748                           	callstack 0
   749   00001A                     collect_avg_readings@i_1562:
   750                           	callstack 0
   751   00001A                     pad@w:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x19
   755   00001A                     	ds	1
   756   00001B                     normalise_readings@red_read:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x1A
   760   00001B                     	ds	1
   761   00001C                     collect_avg_readings@i_1563:
   762                           	callstack 0
   763   00001C                     motor_response@mL:
   764                           	callstack 0
   765   00001C                     dtoa@fp:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x1B
   769   00001C                     	ds	1
   770   00001D                     normalise_readings@green_read:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x1C
   774   00001D                     	ds	1
   775   00001E                     collect_avg_readings@i_1564:
   776                           	callstack 0
   777   00001E                     motor_response@mR:
   778                           	callstack 0
   779   00001E                     dtoa@d:
   780                           	callstack 0
   781                           
   782                           ; 8 bytes @ 0x1D
   783   00001E                     	ds	1
   784   00001F                     normalise_readings@blue_read:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x1E
   788   00001F                     	ds	1
   789   000020                     ??_motor_response:
   790                           
   791                           ; 1 bytes @ 0x1F
   792   000020                     	ds	1
   793   000021                     normalise_readings@expected_values:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x20
   797   000021                     	ds	1
   798   000022                     motor_response@card:
   799                           	callstack 0
   800                           
   801                           ; 1 bytes @ 0x21
   802   000022                     	ds	1
   803   000023                     normalise_readings@normalised_values:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x22
   807   000023                     	ds	2
   808   000025                     ??_normalise_readings:
   809   000025                     make_master_closeness@i:
   810                           	callstack 0
   811                           
   812                           ; 1 bytes @ 0x24
   813   000025                     	ds	1
   814   000026                     ??_dtoa:
   815                           
   816                           ; 1 bytes @ 0x25
   817   000026                     	ds	7
   818   00002D                     normalise_readings@difference:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x2C
   822   00002D                     	ds	1
   823   00002E                     _dtoa$2309:
   824                           	callstack 0
   825                           
   826                           ; 2 bytes @ 0x2D
   827   00002E                     	ds	1
   828   00002F                     normalise_readings@i:
   829                           	callstack 0
   830                           
   831                           ; 1 bytes @ 0x2E
   832   00002F                     	ds	1
   833   000030                     dtoa@p:
   834                           	callstack 0
   835                           
   836                           ; 2 bytes @ 0x2F
   837   000030                     	ds	2
   838   000032                     dtoa@w:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x31
   842   000032                     	ds	2
   843   000034                     dtoa@n:
   844                           	callstack 0
   845                           
   846                           ; 8 bytes @ 0x33
   847   000034                     	ds	8
   848   00003C                     dtoa@i:
   849                           	callstack 0
   850                           
   851                           ; 2 bytes @ 0x3B
   852   00003C                     	ds	2
   853   00003E                     dtoa@s:
   854                           	callstack 0
   855                           
   856                           ; 1 bytes @ 0x3D
   857   00003E                     	ds	1
   858   00003F                     vfpfcnvrt@fp:
   859                           	callstack 0
   860                           
   861                           ; 2 bytes @ 0x3E
   862   00003F                     	ds	2
   863   000041                     vfpfcnvrt@fmt:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0x40
   867   000041                     	ds	2
   868   000043                     vfpfcnvrt@ap:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x42
   872   000043                     	ds	2
   873   000045                     ??_vfpfcnvrt:
   874                           
   875                           ; 1 bytes @ 0x44
   876   000045                     	ds	2
   877   000047                     vfpfcnvrt@convarg:
   878                           	callstack 0
   879                           
   880                           ; 8 bytes @ 0x46
   881   000047                     	ds	8
   882   00004F                     vfpfcnvrt@cp:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x4E
   886   00004F                     	ds	2
   887   000051                     ?_vfprintf:
   888                           	callstack 0
   889   000051                     vfprintf@fp:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x50
   893   000051                     	ds	2
   894   000053                     vfprintf@fmt:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x52
   898   000053                     	ds	2
   899   000055                     vfprintf@ap:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x54
   903   000055                     	ds	2
   904   000057                     vfprintf@cfmt:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x56
   908   000057                     	ds	2
   909   000059                     ??_clear_read_calibration:
   910   000059                     
   911                           ; 1 bytes @ 0x58
   912   000059                     	ds	4
   913   00005D                     ??_main:
   914                           
   915                           ; 1 bytes @ 0x5C
   916   00005D                     	ds	2
   917                           
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 20 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  i               1  231[BANK1 ] enum E14575
   928 ;;  buf           150    0[BANK1 ] unsigned char [150]
   929 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   930 ;;  motorR          9  243[BANK1 ] struct DC_motor
   931 ;;  motorL          9  234[BANK1 ] struct DC_motor
   932 ;;  clear_read      2  232[BANK1 ] unsigned int 
   933 ;;  blue_read       2  229[BANK1 ] unsigned int 
   934 ;;  green_read      2  227[BANK1 ] unsigned int 
   935 ;;  red_read        2  225[BANK1 ] unsigned int 
   936 ;;  clear_read_c    2  222[BANK1 ] unsigned int 
   937 ;;  PWMcycle        1  224[BANK1 ] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   948 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
   949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   950 ;;      Totals:         2       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
   951 ;;Total ram usage:      254 bytes
   952 ;; Hardware stack levels required when called: 9
   953 ;; This function calls:
   954 ;;		_I2C_2_Master_Init
   955 ;;		_LEDSon_init
   956 ;;		_card_response
   957 ;;		_clear_read_calibration
   958 ;;		_collect_avg_readings
   959 ;;		_color_click_init
   960 ;;		_initDCmotorsPWM
   961 ;;		_initUSART4
   962 ;;		_sendStringSerial4
   963 ;;		_setMotorPWM
   964 ;;		_sprintf
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text0
   971   00196C                     __ptext0:
   972                           	callstack 0
   973   00196C                     _main:
   974                           	callstack 22
   975   00196C                     
   976                           ;main.c: 25:     LEDSon_init();
   977   00196C  ECD1  F016         	call	_LEDSon_init	;wreg free
   978   001970                     
   979                           ;main.c: 26:     I2C_2_Master_Init();
   980   001970  EC95  F016         	call	_I2C_2_Master_Init	;wreg free
   981   001974                     
   982                           ;main.c: 27:     color_click_init();
   983   001974  EC63  F016         	call	_color_click_init	;wreg free
   984   001978                     
   985                           ;main.c: 28:     initDCmotorsPWM();
   986   001978  ECCE  F013         	call	_initDCmotorsPWM	;wreg free
   987   00197C                     
   988                           ;main.c: 29:     initUSART4();
   989   00197C  ECF2  F016         	call	_initUSART4	;wreg free
   990   001980                     
   991                           ;main.c: 31:     TRISFbits.TRISF2=1;
   992   001980  8486               	bsf	134,2,c	;volatile
   993   001982                     
   994                           ;main.c: 32:     ANSELFbits.ANSELF2=0;
   995   001982  010E               	movlb	14	; () banked
   996   001984  95B4               	bcf	180,2,b	;volatile
   997   001986                     
   998                           ; BSR set to: 14
   999                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1000   001986  CFBC F1E0          	movff	4028,main@PWMcycle	;volatile
  1001   00198A                     
  1002                           ; BSR set to: 14
  1003                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1004   00198A  0E00               	movlw	0
  1005   00198C  0101               	movlb	1	; () banked
  1006   00198E  6FEA               	movwf	main@motorL& (0+255),b
  1007   001990                     
  1008                           ; BSR set to: 1
  1009                           ;main.c: 45:     motorL.direction=1;
  1010   001990  0E01               	movlw	1
  1011   001992  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1012   001994                     
  1013                           ; BSR set to: 1
  1014                           ;main.c: 46:     motorL.brakemode=1;
  1015   001994  0E01               	movlw	1
  1016   001996  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1017   001998                     
  1018                           ; BSR set to: 1
  1019                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1020   001998  0EAA               	movlw	170
  1021   00199A  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1022   00199C  0E0F               	movlw	15
  1023   00199E  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1024   0019A0                     
  1025                           ; BSR set to: 1
  1026                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1027   0019A0  0EA6               	movlw	166
  1028   0019A2  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1029   0019A4  0E0F               	movlw	15
  1030   0019A6  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1031   0019A8                     
  1032                           ; BSR set to: 1
  1033                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1034   0019A8  C1E0  F1ED         	movff	main@PWMcycle,main@motorL+3
  1035   0019AC  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1036   0019AE                     
  1037                           ; BSR set to: 1
  1038                           ;main.c: 51:     motorR.power=0;
  1039   0019AE  0E00               	movlw	0
  1040   0019B0  6FF3               	movwf	main@motorR& (0+255),b
  1041   0019B2                     
  1042                           ; BSR set to: 1
  1043                           ;main.c: 52:     motorR.direction=1;
  1044   0019B2  0E01               	movlw	1
  1045   0019B4  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1046   0019B6                     
  1047                           ; BSR set to: 1
  1048                           ;main.c: 53:     motorR.brakemode=1;
  1049   0019B6  0E01               	movlw	1
  1050   0019B8  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1051   0019BA                     
  1052                           ; BSR set to: 1
  1053                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1054   0019BA  0E25               	movlw	37
  1055   0019BC  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1056   0019BE  0E0F               	movlw	15
  1057   0019C0  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1058   0019C2                     
  1059                           ; BSR set to: 1
  1060                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1061   0019C2  0E21               	movlw	33
  1062   0019C4  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1063   0019C6  0E0F               	movlw	15
  1064   0019C8  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1065   0019CA                     
  1066                           ; BSR set to: 1
  1067                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1068   0019CA  C1E0  F1F6         	movff	main@PWMcycle,main@motorR+3
  1069   0019CE  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1070   0019D0                     
  1071                           ; BSR set to: 1
  1072                           ;main.c: 58:     setMotorPWM(&motorL);
  1073   0019D0  0EEA               	movlw	low main@motorL
  1074   0019D2  6E0E               	movwf	setMotorPWM@m^0,c
  1075   0019D4  0E01               	movlw	high main@motorL
  1076   0019D6  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1077   0019D8  ECA6  F00E         	call	_setMotorPWM	;wreg free
  1078   0019DC                     
  1079                           ;main.c: 59:     setMotorPWM(&motorR);
  1080   0019DC  0EF3               	movlw	low main@motorR
  1081   0019DE  6E0E               	movwf	setMotorPWM@m^0,c
  1082   0019E0  0E01               	movlw	high main@motorR
  1083   0019E2  6E0F               	movwf	(setMotorPWM@m+1)^0,c
  1084   0019E4  ECA6  F00E         	call	_setMotorPWM	;wreg free
  1085   0019E8                     
  1086                           ;main.c: 64:     char buf[150];;main.c: 66:     unsigned int red_read = 0;
  1087   0019E8  0E00               	movlw	0
  1088   0019EA  0101               	movlb	1	; () banked
  1089   0019EC  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1090   0019EE  0E00               	movlw	0
  1091   0019F0  6FE1               	movwf	main@red_read& (0+255),b
  1092   0019F2                     
  1093                           ; BSR set to: 1
  1094                           ;main.c: 67:     unsigned int green_read = 0;
  1095   0019F2  0E00               	movlw	0
  1096   0019F4  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1097   0019F6  0E00               	movlw	0
  1098   0019F8  6FE3               	movwf	main@green_read& (0+255),b
  1099   0019FA                     
  1100                           ; BSR set to: 1
  1101                           ;main.c: 68:     unsigned int blue_read = 0;
  1102   0019FA  0E00               	movlw	0
  1103   0019FC  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1104   0019FE  0E00               	movlw	0
  1105   001A00  6FE5               	movwf	main@blue_read& (0+255),b
  1106   001A02                     
  1107                           ; BSR set to: 1
  1108                           ;main.c: 69:     unsigned int clear_read = 0;
  1109   001A02  0E00               	movlw	0
  1110   001A04  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1111   001A06  0E00               	movlw	0
  1112   001A08  6FE8               	movwf	main@clear_read& (0+255),b
  1113   001A0A                     
  1114                           ; BSR set to: 1
  1115                           ;main.c: 70:     unsigned int clear_read_check = 0;
  1116   001A0A  0E00               	movlw	0
  1117   001A0C  6FDF               	movwf	(main@clear_read_check+1)& (0+255),b
  1118   001A0E  0E00               	movlw	0
  1119   001A10  6FDE               	movwf	main@clear_read_check& (0+255),b
  1120   001A12                     
  1121                           ; BSR set to: 1
  1122                           ;main.c: 71:     unsigned int expected_values[4][9];;main.c: 82:     LATDbits.LATD4 = 0;
  1123   001A12  987C               	bcf	124,4,c	;volatile
  1124   001A14                     
  1125                           ; BSR set to: 1
  1126                           ;main.c: 83:     for(colour i = RED; i<= BLACK; i++){
  1127   001A14  0E01               	movlw	1
  1128   001A16  6FE7               	movwf	main@i& (0+255),b
  1129   001A18  EF0F  F00D         	goto	l235
  1130   001A1C                     l236:
  1131                           
  1132                           ;main.c: 85:             LATDbits.LATD4 = 1;
  1133   001A1C  887C               	bsf	124,4,c	;volatile
  1134   001A1E                     l235:
  1135                           
  1136                           ;main.c: 84:         while(PORTFbits.RF2){
  1137   001A1E  B48E               	btfsc	142,2,c	;volatile
  1138   001A20  EF14  F00D         	goto	u1421
  1139   001A24  EF16  F00D         	goto	u1420
  1140   001A28                     u1421:
  1141   001A28  EF0E  F00D         	goto	l236
  1142   001A2C                     u1420:
  1143   001A2C                     
  1144                           ;main.c: 87:         LATDbits.LATD4 = 0;
  1145   001A2C  987C               	bcf	124,4,c	;volatile
  1146   001A2E                     
  1147                           ;main.c: 88:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1148   001A2E  0E29               	movlw	41
  1149   001A30  6E5E               	movwf	(??_main+1)^0,c
  1150   001A32  0E96               	movlw	150
  1151   001A34  6E5D               	movwf	??_main^0,c
  1152   001A36  0E7F               	movlw	127
  1153   001A38                     u1507:
  1154   001A38  2EE8               	decfsz	wreg,f,c
  1155   001A3A  D7FE               	bra	u1507
  1156   001A3C  2E5D               	decfsz	??_main^0,f,c
  1157   001A3E  D7FC               	bra	u1507
  1158   001A40  2E5E               	decfsz	(??_main+1)^0,f,c
  1159   001A42  D7FA               	bra	u1507
  1160   001A44  F000               	nop	
  1161   001A46                     
  1162                           ;main.c: 89:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1163   001A46  0EE8               	movlw	low main@clear_read
  1164   001A48  6E0C               	movwf	collect_avg_readings@clear_read^0,c
  1165   001A4A  0E01               	movlw	high main@clear_read
  1166   001A4C  6E0D               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1167   001A4E  0EE1               	movlw	low main@red_read
  1168   001A50  6E0E               	movwf	collect_avg_readings@red_read^0,c
  1169   001A52  0E01               	movlw	high main@red_read
  1170   001A54  6E0F               	movwf	(collect_avg_readings@red_read+1)^0,c
  1171   001A56  0EE3               	movlw	low main@green_read
  1172   001A58  6E10               	movwf	collect_avg_readings@green_read^0,c
  1173   001A5A  0E01               	movlw	high main@green_read
  1174   001A5C  6E11               	movwf	(collect_avg_readings@green_read+1)^0,c
  1175   001A5E  0EE5               	movlw	low main@blue_read
  1176   001A60  6E12               	movwf	collect_avg_readings@blue_read^0,c
  1177   001A62  0E01               	movlw	high main@blue_read
  1178   001A64  6E13               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1179   001A66  EC79  F00B         	call	_collect_avg_readings	;wreg free
  1180   001A6A                     
  1181                           ;main.c: 90:         expected_values[CLEAR][i] = clear_read;
  1182   001A6A  0101               	movlb	1	; () banked
  1183   001A6C  51E7               	movf	main@i& (0+255),w,b
  1184   001A6E  0D02               	mullw	2
  1185   001A70  0E96               	movlw	low main@expected_values
  1186   001A72  24F3               	addwf	243,w,c
  1187   001A74  6ED9               	movwf	fsr2l,c
  1188   001A76  0E01               	movlw	high main@expected_values
  1189   001A78  20F4               	addwfc	prodh,w,c
  1190   001A7A  6EDA               	movwf	fsr2h,c
  1191   001A7C  C1E8  FFDE         	movff	main@clear_read,postinc2
  1192   001A80  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1193   001A84                     
  1194                           ; BSR set to: 1
  1195                           ;main.c: 91:         expected_values[RED][i] = red_read;
  1196   001A84  51E7               	movf	main@i& (0+255),w,b
  1197   001A86  0D02               	mullw	2
  1198   001A88  0E12               	movlw	18
  1199   001A8A  26F3               	addwf	243,f,c
  1200   001A8C  0E00               	movlw	0
  1201   001A8E  22F4               	addwfc	244,f,c
  1202   001A90  0E96               	movlw	low main@expected_values
  1203   001A92  24F3               	addwf	243,w,c
  1204   001A94  6ED9               	movwf	fsr2l,c
  1205   001A96  0E01               	movlw	high main@expected_values
  1206   001A98  20F4               	addwfc	prodh,w,c
  1207   001A9A  6EDA               	movwf	fsr2h,c
  1208   001A9C  C1E1  FFDE         	movff	main@red_read,postinc2
  1209   001AA0  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1210   001AA4                     
  1211                           ; BSR set to: 1
  1212                           ;main.c: 92:         expected_values[GREEN][i] = green_read;
  1213   001AA4  51E7               	movf	main@i& (0+255),w,b
  1214   001AA6  0D02               	mullw	2
  1215   001AA8  0E24               	movlw	36
  1216   001AAA  26F3               	addwf	243,f,c
  1217   001AAC  0E00               	movlw	0
  1218   001AAE  22F4               	addwfc	244,f,c
  1219   001AB0  0E96               	movlw	low main@expected_values
  1220   001AB2  24F3               	addwf	243,w,c
  1221   001AB4  6ED9               	movwf	fsr2l,c
  1222   001AB6  0E01               	movlw	high main@expected_values
  1223   001AB8  20F4               	addwfc	prodh,w,c
  1224   001ABA  6EDA               	movwf	fsr2h,c
  1225   001ABC  C1E3  FFDE         	movff	main@green_read,postinc2
  1226   001AC0  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1227   001AC4                     
  1228                           ; BSR set to: 1
  1229                           ;main.c: 93:         expected_values[BLUE][i] = blue_read;
  1230   001AC4  51E7               	movf	main@i& (0+255),w,b
  1231   001AC6  0D02               	mullw	2
  1232   001AC8  0E36               	movlw	54
  1233   001ACA  26F3               	addwf	243,f,c
  1234   001ACC  0E00               	movlw	0
  1235   001ACE  22F4               	addwfc	244,f,c
  1236   001AD0  0E96               	movlw	low main@expected_values
  1237   001AD2  24F3               	addwf	243,w,c
  1238   001AD4  6ED9               	movwf	fsr2l,c
  1239   001AD6  0E01               	movlw	high main@expected_values
  1240   001AD8  20F4               	addwfc	prodh,w,c
  1241   001ADA  6EDA               	movwf	fsr2h,c
  1242   001ADC  C1E5  FFDE         	movff	main@blue_read,postinc2
  1243   001AE0  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1244   001AE4                     
  1245                           ; BSR set to: 1
  1246                           ;main.c: 94:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n",
      +                           clear_read, red_read, green_read, blue_read, i);
  1247   001AE4  0E00               	movlw	low main@buf
  1248   001AE6  0100               	movlb	0	; () banked
  1249   001AE8  6F60               	movwf	sprintf@s& (0+255),b
  1250   001AEA  0E01               	movlw	high main@buf
  1251   001AEC  6F61               	movwf	(sprintf@s+1)& (0+255),b
  1252   001AEE  0E01               	movlw	low STR_1
  1253   001AF0  6F62               	movwf	sprintf@fmt& (0+255),b
  1254   001AF2  0E0E               	movlw	high STR_1
  1255   001AF4  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  1256   001AF6  C1E8  F064         	movff	main@clear_read,?_sprintf+4
  1257   001AFA  C1E9  F065         	movff	main@clear_read+1,?_sprintf+5
  1258   001AFE  C1E1  F066         	movff	main@red_read,?_sprintf+6
  1259   001B02  C1E2  F067         	movff	main@red_read+1,?_sprintf+7
  1260   001B06  C1E3  F068         	movff	main@green_read,?_sprintf+8
  1261   001B0A  C1E4  F069         	movff	main@green_read+1,?_sprintf+9
  1262   001B0E  C1E5  F06A         	movff	main@blue_read,?_sprintf+10
  1263   001B12  C1E6  F06B         	movff	main@blue_read+1,?_sprintf+11
  1264   001B16  C1E7  F06C         	movff	main@i,?_sprintf+12
  1265   001B1A  6B6D               	clrf	(?_sprintf+13)& (0+255),b
  1266   001B1C  EC0E  F015         	call	_sprintf	;wreg free
  1267   001B20                     
  1268                           ;main.c: 95:         sendStringSerial4(buf);
  1269   001B20  0E00               	movlw	low main@buf
  1270   001B22  6E02               	movwf	sendStringSerial4@string^0,c
  1271   001B24  0E01               	movlw	high main@buf
  1272   001B26  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  1273   001B28  EC7D  F016         	call	_sendStringSerial4	;wreg free
  1274   001B2C                     
  1275                           ;main.c: 96:     }
  1276   001B2C  0101               	movlb	1	; () banked
  1277   001B2E  2BE7               	incf	main@i& (0+255),f,b
  1278   001B30                     
  1279                           ; BSR set to: 1
  1280   001B30  0E09               	movlw	9
  1281   001B32  65E7               	cpfsgt	main@i& (0+255),b
  1282   001B34  EF9E  F00D         	goto	u1431
  1283   001B38  EFA0  F00D         	goto	u1430
  1284   001B3C                     u1431:
  1285   001B3C  EF0F  F00D         	goto	l235
  1286   001B40                     u1430:
  1287   001B40                     
  1288                           ; BSR set to: 1
  1289                           ;main.c: 97:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1290   001B40  0E00               	movlw	low main@buf
  1291   001B42  0100               	movlb	0	; () banked
  1292   001B44  6F7B               	movwf	clear_read_calibration@buf& (0+255),b
  1293   001B46  0E01               	movlw	high main@buf
  1294   001B48  6F7C               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1295   001B4A  0EE8               	movlw	low main@clear_read
  1296   001B4C  6F7D               	movwf	clear_read_calibration@clear_read& (0+255),b
  1297   001B4E  0E01               	movlw	high main@clear_read
  1298   001B50  6F7E               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1299   001B52  0EDE               	movlw	low main@clear_read_check
  1300   001B54  6F7F               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1301   001B56  0E01               	movlw	high main@clear_read_check
  1302   001B58  6F80               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1303   001B5A  EC64  F011         	call	_clear_read_calibration	;wreg free
  1304   001B5E  EFB3  F00D         	goto	l239
  1305   001B62                     l240:
  1306                           
  1307                           ;main.c: 122:             LATDbits.LATD4 = 1;
  1308   001B62  887C               	bsf	124,4,c	;volatile
  1309                           
  1310                           ;main.c: 123:             LATFbits.LATF0 = 1;
  1311   001B64  807E               	bsf	126,0,c	;volatile
  1312   001B66                     l239:
  1313                           
  1314                           ;main.c: 121:         while(PORTFbits.RF2){
  1315   001B66  B48E               	btfsc	142,2,c	;volatile
  1316   001B68  EFB8  F00D         	goto	u1441
  1317   001B6C  EFBA  F00D         	goto	u1440
  1318   001B70                     u1441:
  1319   001B70  EFB1  F00D         	goto	l240
  1320   001B74                     u1440:
  1321   001B74                     
  1322                           ;main.c: 125:         LATFbits.LATF0 = 0;
  1323   001B74  907E               	bcf	126,0,c	;volatile
  1324   001B76                     
  1325                           ;main.c: 127:         card_response(buf, &clear_read, &red_read, &green_read, &blue_read
      +                          , expected_values, &motorL, &motorR);
  1326   001B76  0E00               	movlw	low main@buf
  1327   001B78  0100               	movlb	0	; () banked
  1328   001B7A  6F7B               	movwf	card_response@buf& (0+255),b
  1329   001B7C  0E01               	movlw	high main@buf
  1330   001B7E  6F7C               	movwf	(card_response@buf+1)& (0+255),b
  1331   001B80  0EE8               	movlw	low main@clear_read
  1332   001B82  6F7D               	movwf	card_response@clear_read& (0+255),b
  1333   001B84  0E01               	movlw	high main@clear_read
  1334   001B86  6F7E               	movwf	(card_response@clear_read+1)& (0+255),b
  1335   001B88  0EE1               	movlw	low main@red_read
  1336   001B8A  6F7F               	movwf	card_response@red_read& (0+255),b
  1337   001B8C  0E01               	movlw	high main@red_read
  1338   001B8E  6F80               	movwf	(card_response@red_read+1)& (0+255),b
  1339   001B90  0EE3               	movlw	low main@green_read
  1340   001B92  6F81               	movwf	card_response@green_read& (0+255),b
  1341   001B94  0E01               	movlw	high main@green_read
  1342   001B96  6F82               	movwf	(card_response@green_read+1)& (0+255),b
  1343   001B98  0EE5               	movlw	low main@blue_read
  1344   001B9A  6F83               	movwf	card_response@blue_read& (0+255),b
  1345   001B9C  0E01               	movlw	high main@blue_read
  1346   001B9E  6F84               	movwf	(card_response@blue_read+1)& (0+255),b
  1347   001BA0  0E96               	movlw	low main@expected_values
  1348   001BA2  6F85               	movwf	card_response@expected_values& (0+255),b
  1349   001BA4  0E01               	movlw	high main@expected_values
  1350   001BA6  6F86               	movwf	(card_response@expected_values+1)& (0+255),b
  1351   001BA8  0EEA               	movlw	low main@motorL
  1352   001BAA  6F87               	movwf	card_response@mL& (0+255),b
  1353   001BAC  0E01               	movlw	high main@motorL
  1354   001BAE  6F88               	movwf	(card_response@mL+1)& (0+255),b
  1355   001BB0  0EF3               	movlw	low main@motorR
  1356   001BB2  6F89               	movwf	card_response@mR& (0+255),b
  1357   001BB4  0E01               	movlw	high main@motorR
  1358   001BB6  6F8A               	movwf	(card_response@mR+1)& (0+255),b
  1359   001BB8  ECBD  F010         	call	_card_response	;wreg free
  1360   001BBC  EFB3  F00D         	goto	l239
  1361   001BC0  EF00  F000         	goto	start
  1362   001BC4                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _initUSART4 *****************
  1366 ;; Defined at:
  1367 ;;		line 6 in file "serial.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text1
  1395   002DE4                     __ptext1:
  1396                           	callstack 0
  1397   002DE4                     _initUSART4:
  1398                           	callstack 30
  1399   002DE4                     
  1400                           ;serial.c: 10:     RC0PPS = 0x12;
  1401   002DE4  0E12               	movlw	18
  1402   002DE6  010E               	movlb	14	; () banked
  1403   002DE8  6F62               	movwf	98,b	;volatile
  1404                           
  1405                           ;serial.c: 11:     RX4PPS = 0x11;
  1406   002DEA  0E11               	movlw	17
  1407   002DEC  6F15               	movwf	21,b	;volatile
  1408   002DEE                     
  1409                           ; BSR set to: 14
  1410                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1411   002DEE  8283               	bsf	131,1,c	;volatile
  1412   002DF0                     
  1413                           ; BSR set to: 14
  1414                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1415   002DF0  97E9               	bcf	233,3,b	;volatile
  1416   002DF2                     
  1417                           ; BSR set to: 14
  1418                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1419   002DF2  95E8               	bcf	232,2,b	;volatile
  1420                           
  1421                           ;serial.c: 17:     SP4BRGL = 51;
  1422   002DF4  0E33               	movlw	51
  1423   002DF6  6FE5               	movwf	229,b	;volatile
  1424                           
  1425                           ;serial.c: 18:     SP4BRGH = 0;
  1426   002DF8  0E00               	movlw	0
  1427   002DFA  6FE6               	movwf	230,b	;volatile
  1428   002DFC                     
  1429                           ; BSR set to: 14
  1430                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1431   002DFC  89E7               	bsf	231,4,b	;volatile
  1432   002DFE                     
  1433                           ; BSR set to: 14
  1434                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1435   002DFE  8BE8               	bsf	232,5,b	;volatile
  1436   002E00                     
  1437                           ; BSR set to: 14
  1438                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1439   002E00  8FE7               	bsf	231,7,b	;volatile
  1440   002E02                     
  1441                           ; BSR set to: 14
  1442   002E02  0012               	return		;funcret
  1443   002E04                     __end_of_initUSART4:
  1444                           	callstack 0
  1445                           
  1446 ;; *************** function _initDCmotorsPWM *****************
  1447 ;; Defined at:
  1448 ;;		line 6 in file "dc_motor.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1466 ;;Total ram usage:        0 bytes
  1467 ;; Hardware stack levels used: 1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text2
  1476   00279C                     __ptext2:
  1477                           	callstack 0
  1478   00279C                     _initDCmotorsPWM:
  1479                           	callstack 30
  1480   00279C                     
  1481                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1482   00279C  9485               	bcf	133,2,c	;volatile
  1483                           
  1484                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1485   00279E  9885               	bcf	133,4,c	;volatile
  1486                           
  1487                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1488   0027A0  9E83               	bcf	131,7,c	;volatile
  1489                           
  1490                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1491   0027A2  9C87               	bcf	135,6,c	;volatile
  1492   0027A4                     
  1493                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1494   0027A4  0E05               	movlw	5
  1495   0027A6  010E               	movlb	14	; () banked
  1496   0027A8  6F74               	movwf	116,b	;volatile
  1497                           
  1498                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1499   0027AA  0E06               	movlw	6
  1500   0027AC  6F76               	movwf	118,b	;volatile
  1501                           
  1502                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1503   0027AE  0E07               	movlw	7
  1504   0027B0  6F69               	movwf	105,b	;volatile
  1505                           
  1506                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1507   0027B2  0E08               	movlw	8
  1508   0027B4  6F88               	movwf	136,b	;volatile
  1509                           
  1510                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1511   0027B6  50BD               	movf	189,w,c	;volatile
  1512   0027B8  0B8F               	andlw	-113
  1513   0027BA  0940               	iorlw	64
  1514   0027BC  6EBD               	movwf	189,c	;volatile
  1515                           
  1516                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1517   0027BE  0EE0               	movlw	-32
  1518   0027C0  16BE               	andwf	190,f,c	;volatile
  1519                           
  1520                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1521   0027C2  50BF               	movf	191,w,c	;volatile
  1522   0027C4  0BF0               	andlw	-16
  1523   0027C6  0901               	iorlw	1
  1524   0027C8  6EBF               	movwf	191,c	;volatile
  1525                           
  1526                           ;dc_motor.c: 26:     T2PR=99;
  1527   0027CA  0E63               	movlw	99
  1528   0027CC  6EBC               	movwf	188,c	;volatile
  1529   0027CE                     
  1530                           ; BSR set to: 14
  1531                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1532   0027CE  8EBD               	bsf	189,7,c	;volatile
  1533                           
  1534                           ;dc_motor.c: 31:     CCPR1H=0;
  1535   0027D0  0E00               	movlw	0
  1536   0027D2  6EAA               	movwf	170,c	;volatile
  1537                           
  1538                           ;dc_motor.c: 32:     CCPR2H=0;
  1539   0027D4  0E00               	movlw	0
  1540   0027D6  6EA6               	movwf	166,c	;volatile
  1541                           
  1542                           ;dc_motor.c: 33:     CCPR3H=0;
  1543   0027D8  0E00               	movlw	0
  1544   0027DA  010F               	movlb	15	; () banked
  1545   0027DC  6F25               	movwf	37,b	;volatile
  1546                           
  1547                           ;dc_motor.c: 34:     CCPR4H=0;
  1548   0027DE  0E00               	movlw	0
  1549   0027E0  6F21               	movwf	33,b	;volatile
  1550                           
  1551                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1552   0027E2  0EFC               	movlw	-4
  1553   0027E4  16AD               	andwf	173,f,c	;volatile
  1554                           
  1555                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1556   0027E6  0EF3               	movlw	-13
  1557   0027E8  16AD               	andwf	173,f,c	;volatile
  1558                           
  1559                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1560   0027EA  0ECF               	movlw	-49
  1561   0027EC  16AD               	andwf	173,f,c	;volatile
  1562                           
  1563                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1564   0027EE  0E3F               	movlw	-193
  1565   0027F0  16AD               	andwf	173,f,c	;volatile
  1566   0027F2                     
  1567                           ; BSR set to: 15
  1568                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1569   0027F2  88AB               	bsf	171,4,c	;volatile
  1570                           
  1571                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1572   0027F4  50AB               	movf	171,w,c	;volatile
  1573   0027F6  0BF0               	andlw	-16
  1574   0027F8  090C               	iorlw	12
  1575   0027FA  6EAB               	movwf	171,c	;volatile
  1576   0027FC                     
  1577                           ; BSR set to: 15
  1578                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1579   0027FC  8EAB               	bsf	171,7,c	;volatile
  1580   0027FE                     
  1581                           ; BSR set to: 15
  1582                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1583   0027FE  88A7               	bsf	167,4,c	;volatile
  1584                           
  1585                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1586   002800  50A7               	movf	167,w,c	;volatile
  1587   002802  0BF0               	andlw	-16
  1588   002804  090C               	iorlw	12
  1589   002806  6EA7               	movwf	167,c	;volatile
  1590   002808                     
  1591                           ; BSR set to: 15
  1592                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1593   002808  8EA7               	bsf	167,7,c	;volatile
  1594   00280A                     
  1595                           ; BSR set to: 15
  1596                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1597   00280A  8926               	bsf	38,4,b	;volatile
  1598                           
  1599                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1600   00280C  5126               	movf	38,w,b	;volatile
  1601   00280E  0BF0               	andlw	-16
  1602   002810  090C               	iorlw	12
  1603   002812  6F26               	movwf	38,b	;volatile
  1604   002814                     
  1605                           ; BSR set to: 15
  1606                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1607   002814  8F26               	bsf	38,7,b	;volatile
  1608   002816                     
  1609                           ; BSR set to: 15
  1610                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1611   002816  8922               	bsf	34,4,b	;volatile
  1612                           
  1613                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1614   002818  5122               	movf	34,w,b	;volatile
  1615   00281A  0BF0               	andlw	-16
  1616   00281C  090C               	iorlw	12
  1617   00281E  6F22               	movwf	34,b	;volatile
  1618   002820                     
  1619                           ; BSR set to: 15
  1620                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1621   002820  8F22               	bsf	34,7,b	;volatile
  1622   002822                     
  1623                           ; BSR set to: 15
  1624   002822  0012               	return		;funcret
  1625   002824                     __end_of_initDCmotorsPWM:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _color_click_init *****************
  1629 ;; Defined at:
  1630 ;;		line 5 in file "color.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;		None
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;		None
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;Total ram usage:        1 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 3
  1651 ;; This function calls:
  1652 ;;		_I2C_2_Master_Init
  1653 ;;		_color_writetoaddr
  1654 ;; This function is called by:
  1655 ;;		_main
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text3
  1660   002CC6                     __ptext3:
  1661                           	callstack 0
  1662   002CC6                     _color_click_init:
  1663                           	callstack 27
  1664   002CC6                     
  1665                           ;color.c: 8:     I2C_2_Master_Init();
  1666   002CC6  EC95  F016         	call	_I2C_2_Master_Init	;wreg free
  1667   002CCA                     
  1668                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1669   002CCA  0E01               	movlw	1
  1670   002CCC  6E03               	movwf	color_writetoaddr@value^0,c
  1671   002CCE  0E00               	movlw	0
  1672   002CD0  EC02  F017         	call	_color_writetoaddr
  1673   002CD4                     
  1674                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1675   002CD4  0E3F               	movlw	63
  1676   002CD6  6E05               	movwf	??_color_click_init^0,c
  1677   002CD8  0E55               	movlw	85
  1678   002CDA                     u1517:
  1679   002CDA  2EE8               	decfsz	wreg,f,c
  1680   002CDC  D7FE               	bra	u1517
  1681   002CDE  2E05               	decfsz	??_color_click_init^0,f,c
  1682   002CE0  D7FC               	bra	u1517
  1683   002CE2  F000               	nop	
  1684   002CE4                     
  1685                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1686   002CE4  0E03               	movlw	3
  1687   002CE6  6E03               	movwf	color_writetoaddr@value^0,c
  1688   002CE8  0E00               	movlw	0
  1689   002CEA  EC02  F017         	call	_color_writetoaddr
  1690   002CEE                     
  1691                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1692   002CEE  0ED5               	movlw	213
  1693   002CF0  6E03               	movwf	color_writetoaddr@value^0,c
  1694   002CF2  0E01               	movlw	1
  1695   002CF4  EC02  F017         	call	_color_writetoaddr
  1696   002CF8  0012               	return		;funcret
  1697   002CFA                     __end_of_color_click_init:
  1698                           	callstack 0
  1699                           
  1700 ;; *************** function _color_writetoaddr *****************
  1701 ;; Defined at:
  1702 ;;		line 21 in file "color.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  address         1    wreg     unsigned char 
  1705 ;;  value           1    2[COMRAM] unsigned char 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  address         1    3[COMRAM] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1717 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1721 ;;Total ram usage:        2 bytes
  1722 ;; Hardware stack levels used: 1
  1723 ;; Hardware stack levels required when called: 2
  1724 ;; This function calls:
  1725 ;;		_I2C_2_Master_Start
  1726 ;;		_I2C_2_Master_Stop
  1727 ;;		_I2C_2_Master_Write
  1728 ;; This function is called by:
  1729 ;;		_color_click_init
  1730 ;;		_enable_color_interrupt
  1731 ;;		_set_interrupt_threshold
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text4
  1736   002E04                     __ptext4:
  1737                           	callstack 0
  1738   002E04                     _color_writetoaddr:
  1739                           	callstack 27
  1740                           
  1741                           ;incstack = 0
  1742                           ;color_writetoaddr@address stored from wreg
  1743   002E04  6E04               	movwf	color_writetoaddr@address^0,c
  1744   002E06                     
  1745                           ;color.c: 22:     I2C_2_Master_Start();
  1746   002E06  EC29  F017         	call	_I2C_2_Master_Start	;wreg free
  1747                           
  1748                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1749   002E0A  0E52               	movlw	82
  1750   002E0C  EC1E  F017         	call	_I2C_2_Master_Write
  1751                           
  1752                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1753   002E10  5004               	movf	color_writetoaddr@address^0,w,c
  1754   002E12  0980               	iorlw	128
  1755   002E14  EC1E  F017         	call	_I2C_2_Master_Write
  1756                           
  1757                           ;color.c: 25:     I2C_2_Master_Write(value);
  1758   002E18  5003               	movf	color_writetoaddr@value^0,w,c
  1759   002E1A  EC1E  F017         	call	_I2C_2_Master_Write
  1760                           
  1761                           ;color.c: 26:     I2C_2_Master_Stop();
  1762   002E1E  EC24  F017         	call	_I2C_2_Master_Stop	;wreg free
  1763   002E22  0012               	return		;funcret
  1764   002E24                     __end_of_color_writetoaddr:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _I2C_2_Master_Init *****************
  1768 ;; Defined at:
  1769 ;;		line 4 in file "i2c.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_color_click_init
  1793 ;;		_main
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text5
  1798   002D2A                     __ptext5:
  1799                           	callstack 0
  1800   002D2A                     _I2C_2_Master_Init:
  1801                           	callstack 29
  1802   002D2A                     
  1803                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1804   002D2A  010E               	movlb	14	; () banked
  1805   002D2C  51D9               	movf	217,w,b	;volatile
  1806   002D2E  0BF0               	andlw	-16
  1807   002D30  0908               	iorlw	8
  1808   002D32  6FD9               	movwf	217,b	;volatile
  1809   002D34                     
  1810                           ; BSR set to: 14
  1811                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1812   002D34  8BD9               	bsf	217,5,b	;volatile
  1813                           
  1814                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1815   002D36  0E9F               	movlw	159
  1816   002D38  6FD6               	movwf	214,b	;volatile
  1817   002D3A                     
  1818                           ; BSR set to: 14
  1819                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1820   002D3A  8A84               	bsf	132,5,c	;volatile
  1821   002D3C                     
  1822                           ; BSR set to: 14
  1823                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1824   002D3C  8C84               	bsf	132,6,c	;volatile
  1825   002D3E                     
  1826                           ; BSR set to: 14
  1827                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1828   002D3E  9BA7               	bcf	167,5,b	;volatile
  1829   002D40                     
  1830                           ; BSR set to: 14
  1831                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1832   002D40  9DA7               	bcf	167,6,b	;volatile
  1833                           
  1834                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1835   002D42  0E1D               	movlw	29
  1836   002D44  6F1D               	movwf	29,b	;volatile
  1837                           
  1838                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1839   002D46  0E1E               	movlw	30
  1840   002D48  6F1C               	movwf	28,b	;volatile
  1841                           
  1842                           ;i2c.c: 18:   RD5PPS=0x1C;
  1843   002D4A  0E1C               	movlw	28
  1844   002D4C  6F6F               	movwf	111,b	;volatile
  1845                           
  1846                           ;i2c.c: 19:   RD6PPS=0x1B;
  1847   002D4E  0E1B               	movlw	27
  1848   002D50  6F70               	movwf	112,b	;volatile
  1849   002D52                     
  1850                           ; BSR set to: 14
  1851   002D52  0012               	return		;funcret
  1852   002D54                     __end_of_I2C_2_Master_Init:
  1853                           	callstack 0
  1854                           
  1855 ;; *************** function _clear_read_calibration *****************
  1856 ;; Defined at:
  1857 ;;		line 26 in file "colour_identify.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  1860 ;;		 -> main@buf(150), 
  1861 ;;  clear_read      2   29[BANK0 ] PTR unsigned int 
  1862 ;;		 -> main@clear_read(2), 
  1863 ;;  clear_read_c    2   31[BANK0 ] PTR unsigned int 
  1864 ;;		 -> main@clear_read_check(2), 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  i               2   35[BANK0 ] int 
  1867 ;;  i               2   33[BANK0 ] int 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1881 ;;Total ram usage:       14 bytes
  1882 ;; Hardware stack levels used: 1
  1883 ;; Hardware stack levels required when called: 8
  1884 ;; This function calls:
  1885 ;;		_color_read_Clear
  1886 ;;		_sendStringSerial4
  1887 ;;		_sprintf
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text6
  1894   0022C8                     __ptext6:
  1895                           	callstack 0
  1896   0022C8                     _clear_read_calibration:
  1897                           	callstack 22
  1898   0022C8                     
  1899                           ;colour_identify.c: 28:     for (int i = 0; i <= 500; i++){
  1900   0022C8  0E00               	movlw	0
  1901   0022CA  0100               	movlb	0	; () banked
  1902   0022CC  6F82               	movwf	(clear_read_calibration@i+1)& (0+255),b
  1903   0022CE  0E00               	movlw	0
  1904   0022D0  6F81               	movwf	clear_read_calibration@i& (0+255),b
  1905   0022D2                     l2913:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;colour_identify.c: 29:         *clear_read = color_read_Clear();
  1909   0022D2  ECB0  F015         	call	_color_read_Clear	;wreg free
  1910   0022D6  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1911   0022DA  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  1912   0022DE  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1913   0022E2  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1914   0022E6                     
  1915                           ;colour_identify.c: 30:     }
  1916   0022E6  0100               	movlb	0	; () banked
  1917   0022E8  4B81               	infsnz	clear_read_calibration@i& (0+255),f,b
  1918   0022EA  2B82               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  1919   0022EC                     
  1920                           ; BSR set to: 0
  1921   0022EC  BF82               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  1922   0022EE  EF82  F011         	goto	u1361
  1923   0022F2  0EF5               	movlw	245
  1924   0022F4  5D81               	subwf	clear_read_calibration@i& (0+255),w,b
  1925   0022F6  0E01               	movlw	1
  1926   0022F8  5982               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  1927   0022FA  A0D8               	btfss	status,0,c
  1928   0022FC  EF82  F011         	goto	u1361
  1929   002300  EF84  F011         	goto	u1360
  1930   002304                     u1361:
  1931   002304  EF69  F011         	goto	l2913
  1932   002308                     u1360:
  1933   002308                     
  1934                           ; BSR set to: 0
  1935                           ;colour_identify.c: 32:     for(int i = 0; i <= 2; i++){
  1936   002308  0E00               	movlw	0
  1937   00230A  6F84               	movwf	(clear_read_calibration@i_1550+1)& (0+255),b
  1938   00230C  0E00               	movlw	0
  1939   00230E  6F83               	movwf	clear_read_calibration@i_1550& (0+255),b
  1940   002310                     l2925:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;colour_identify.c: 33:         *clear_read += color_read_Clear();
  1944   002310  ECB0  F015         	call	_color_read_Clear	;wreg free
  1945   002314  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1946   002318  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  1947   00231C  5005               	movf	?_color_read_Clear^0,w,c
  1948   00231E  26DE               	addwf	postinc2,f,c
  1949   002320  5006               	movf	(?_color_read_Clear+1)^0,w,c
  1950   002322  22DD               	addwfc	postdec2,f,c
  1951   002324                     
  1952                           ;colour_identify.c: 34:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1953   002324  0E11               	movlw	17
  1954   002326  6E5A               	movwf	(??_clear_read_calibration+1)^0,c
  1955   002328  0E3C               	movlw	60
  1956   00232A  6E59               	movwf	??_clear_read_calibration^0,c
  1957   00232C  0ECB               	movlw	203
  1958   00232E                     u1527:
  1959   00232E  2EE8               	decfsz	wreg,f,c
  1960   002330  D7FE               	bra	u1527
  1961   002332  2E59               	decfsz	??_clear_read_calibration^0,f,c
  1962   002334  D7FC               	bra	u1527
  1963   002336  2E5A               	decfsz	(??_clear_read_calibration+1)^0,f,c
  1964   002338  D7FA               	bra	u1527
  1965   00233A  F000               	nop	
  1966   00233C                     
  1967                           ;colour_identify.c: 35:     }
  1968   00233C  0100               	movlb	0	; () banked
  1969   00233E  4B83               	infsnz	clear_read_calibration@i_1550& (0+255),f,b
  1970   002340  2B84               	incf	(clear_read_calibration@i_1550+1)& (0+255),f,b
  1971   002342                     
  1972                           ; BSR set to: 0
  1973   002342  BF84               	btfsc	(clear_read_calibration@i_1550+1)& (0+255),7,b
  1974   002344  EFAD  F011         	goto	u1371
  1975   002348  5184               	movf	(clear_read_calibration@i_1550+1)& (0+255),w,b
  1976   00234A  E109               	bnz	u1370
  1977   00234C  0E03               	movlw	3
  1978   00234E  5D83               	subwf	clear_read_calibration@i_1550& (0+255),w,b
  1979   002350  A0D8               	btfss	status,0,c
  1980   002352  EFAD  F011         	goto	u1371
  1981   002356  EFAF  F011         	goto	u1370
  1982   00235A                     u1371:
  1983   00235A  EF88  F011         	goto	l2925
  1984   00235E                     u1370:
  1985   00235E                     
  1986                           ; BSR set to: 0
  1987                           ;colour_identify.c: 37:     *clear_read = *clear_read/4;
  1988   00235E  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1989   002362  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  1990   002366  CFDE F059          	movff	postinc2,??_clear_read_calibration
  1991   00236A  CFDD F05A          	movff	postdec2,??_clear_read_calibration+1
  1992   00236E  90D8               	bcf	status,0,c
  1993   002370  325A               	rrcf	(??_clear_read_calibration+1)^0,f,c
  1994   002372  3259               	rrcf	??_clear_read_calibration^0,f,c
  1995   002374  90D8               	bcf	status,0,c
  1996   002376  325A               	rrcf	(??_clear_read_calibration+1)^0,f,c
  1997   002378  3259               	rrcf	??_clear_read_calibration^0,f,c
  1998   00237A  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  1999   00237E  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2000   002382  C059  FFDE         	movff	??_clear_read_calibration,postinc2
  2001   002386  C05A  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2002   00238A                     
  2003                           ; BSR set to: 0
  2004                           ;colour_identify.c: 39:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2005   00238A  C07B  F060         	movff	clear_read_calibration@buf,sprintf@s
  2006   00238E  C07C  F061         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2007   002392  0E57               	movlw	low STR_2
  2008   002394  6F62               	movwf	sprintf@fmt& (0+255),b
  2009   002396  0E0E               	movlw	high STR_2
  2010   002398  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2011   00239A  C07D  F064         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2012   00239E  C07E  F065         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2013   0023A2  EC0E  F015         	call	_sprintf	;wreg free
  2014   0023A6                     
  2015                           ;colour_identify.c: 40:     sendStringSerial4(buf);
  2016   0023A6  C07B  F002         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2017   0023AA  C07C  F003         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2018   0023AE  EC7D  F016         	call	_sendStringSerial4	;wreg free
  2019   0023B2                     
  2020                           ;colour_identify.c: 42:     *clear_read_check = *clear_read + 800;
  2021   0023B2  C07D  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2022   0023B6  C07E  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2023   0023BA  CFDE F059          	movff	postinc2,??_clear_read_calibration
  2024   0023BE  CFDD F05A          	movff	postdec2,??_clear_read_calibration+1
  2025   0023C2  0E20               	movlw	32
  2026   0023C4  2459               	addwf	??_clear_read_calibration^0,w,c
  2027   0023C6  6E5B               	movwf	(??_clear_read_calibration+2)^0,c
  2028   0023C8  0E03               	movlw	3
  2029   0023CA  205A               	addwfc	(??_clear_read_calibration+1)^0,w,c
  2030   0023CC  6E5C               	movwf	(??_clear_read_calibration+3)^0,c
  2031   0023CE  C07F  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2032   0023D2  C080  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2033   0023D6  C05B  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2034   0023DA  C05C  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2035   0023DE  0012               	return		;funcret
  2036   0023E0                     __end_of_clear_read_calibration:
  2037                           	callstack 0
  2038                           
  2039 ;; *************** function _card_response *****************
  2040 ;; Defined at:
  2041 ;;		line 224 in file "colour_identify.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  2044 ;;		 -> main@buf(150), 
  2045 ;;  clear_read      2   29[BANK0 ] PTR unsigned int 
  2046 ;;		 -> main@clear_read(2), 
  2047 ;;  red_read        2   31[BANK0 ] PTR unsigned int 
  2048 ;;		 -> main@red_read(2), 
  2049 ;;  green_read      2   33[BANK0 ] PTR unsigned int 
  2050 ;;		 -> main@green_read(2), 
  2051 ;;  blue_read       2   35[BANK0 ] PTR unsigned int 
  2052 ;;		 -> main@blue_read(2), 
  2053 ;;  expected_val    2   37[BANK0 ] PTR unsigned int [9]
  2054 ;;		 -> main@expected_values(72), 
  2055 ;;  mL              2   39[BANK0 ] PTR struct DC_motor
  2056 ;;		 -> main@motorL(9), 
  2057 ;;  mR              2   41[BANK0 ] PTR struct DC_motor
  2058 ;;		 -> main@motorR(9), 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  normalised_v   72   43[BANK0 ] unsigned int [9][4]
  2061 ;;  master_close   18  115[BANK0 ] unsigned int [9]
  2062 ;;  card            1  133[BANK0 ] enum E14551
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2072 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2073 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2076 ;;Total ram usage:      107 bytes
  2077 ;; Hardware stack levels used: 1
  2078 ;; Hardware stack levels required when called: 8
  2079 ;; This function calls:
  2080 ;;		_collect_avg_readings
  2081 ;;		_determine_card
  2082 ;;		_make_master_closeness
  2083 ;;		_motor_response
  2084 ;;		_normalise_readings
  2085 ;;		_sendStringSerial4
  2086 ;;		_sprintf
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text7
  2093   00217A                     __ptext7:
  2094                           	callstack 0
  2095   00217A                     _card_response:
  2096                           	callstack 22
  2097   00217A                     
  2098                           ;colour_identify.c: 228:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          9:     unsigned int master_closeness[9];;colour_identify.c: 231:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2099   00217A  C07D  F00C         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2100   00217E  C07E  F00D         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2101   002182  C07F  F00E         	movff	card_response@red_read,collect_avg_readings@red_read
  2102   002186  C080  F00F         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2103   00218A  C081  F010         	movff	card_response@green_read,collect_avg_readings@green_read
  2104   00218E  C082  F011         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2105   002192  C083  F012         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2106   002196  C084  F013         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2107   00219A  EC79  F00B         	call	_collect_avg_readings	;wreg free
  2108   00219E                     
  2109                           ;colour_identify.c: 232:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2110   00219E  C07B  F060         	movff	card_response@buf,sprintf@s
  2111   0021A2  C07C  F061         	movff	card_response@buf+1,sprintf@s+1
  2112   0021A6  0E33               	movlw	low STR_3
  2113   0021A8  0100               	movlb	0	; () banked
  2114   0021AA  6F62               	movwf	sprintf@fmt& (0+255),b
  2115   0021AC  0E0E               	movlw	high STR_3
  2116   0021AE  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2117   0021B0  C07D  FFD9         	movff	card_response@clear_read,fsr2l
  2118   0021B4  C07E  FFDA         	movff	card_response@clear_read+1,fsr2h
  2119   0021B8  CFDE F064          	movff	postinc2,?_sprintf+4
  2120   0021BC  CFDD F065          	movff	postdec2,?_sprintf+5
  2121   0021C0  C07F  FFD9         	movff	card_response@red_read,fsr2l
  2122   0021C4  C080  FFDA         	movff	card_response@red_read+1,fsr2h
  2123   0021C8  CFDE F066          	movff	postinc2,?_sprintf+6
  2124   0021CC  CFDD F067          	movff	postdec2,?_sprintf+7
  2125   0021D0  C081  FFD9         	movff	card_response@green_read,fsr2l
  2126   0021D4  C082  FFDA         	movff	card_response@green_read+1,fsr2h
  2127   0021D8  CFDE F068          	movff	postinc2,?_sprintf+8
  2128   0021DC  CFDD F069          	movff	postdec2,?_sprintf+9
  2129   0021E0  C083  FFD9         	movff	card_response@blue_read,fsr2l
  2130   0021E4  C084  FFDA         	movff	card_response@blue_read+1,fsr2h
  2131   0021E8  CFDE F06A          	movff	postinc2,?_sprintf+10
  2132   0021EC  CFDD F06B          	movff	postdec2,?_sprintf+11
  2133   0021F0  EC0E  F015         	call	_sprintf	;wreg free
  2134   0021F4                     
  2135                           ;colour_identify.c: 233:     sendStringSerial4(buf);
  2136   0021F4  C07B  F002         	movff	card_response@buf,sendStringSerial4@string
  2137   0021F8  C07C  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  2138   0021FC  EC7D  F016         	call	_sendStringSerial4	;wreg free
  2139   002200                     
  2140                           ;colour_identify.c: 235:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2141   002200  C07B  F017         	movff	card_response@buf,normalise_readings@buf
  2142   002204  C07C  F018         	movff	card_response@buf+1,normalise_readings@buf+1
  2143   002208  C07D  FFD9         	movff	card_response@clear_read,fsr2l
  2144   00220C  C07E  FFDA         	movff	card_response@clear_read+1,fsr2h
  2145   002210  CFDE F019          	movff	postinc2,normalise_readings@clear_read
  2146   002214  CFDD F01A          	movff	postdec2,normalise_readings@clear_read+1
  2147   002218  C07F  FFD9         	movff	card_response@red_read,fsr2l
  2148   00221C  C080  FFDA         	movff	card_response@red_read+1,fsr2h
  2149   002220  CFDE F01B          	movff	postinc2,normalise_readings@red_read
  2150   002224  CFDD F01C          	movff	postdec2,normalise_readings@red_read+1
  2151   002228  C081  FFD9         	movff	card_response@green_read,fsr2l
  2152   00222C  C082  FFDA         	movff	card_response@green_read+1,fsr2h
  2153   002230  CFDE F01D          	movff	postinc2,normalise_readings@green_read
  2154   002234  CFDD F01E          	movff	postdec2,normalise_readings@green_read+1
  2155   002238  C083  FFD9         	movff	card_response@blue_read,fsr2l
  2156   00223C  C084  FFDA         	movff	card_response@blue_read+1,fsr2h
  2157   002240  CFDE F01F          	movff	postinc2,normalise_readings@blue_read
  2158   002244  CFDD F020          	movff	postdec2,normalise_readings@blue_read+1
  2159   002248  C085  F021         	movff	card_response@expected_values,normalise_readings@expected_values
  2160   00224C  C086  F022         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2161   002250  0E8B               	movlw	low card_response@normalised_values
  2162   002252  6E23               	movwf	normalise_readings@normalised_values^0,c
  2163   002254  0E00               	movlw	high card_response@normalised_values
  2164   002256  6E24               	movwf	(normalise_readings@normalised_values+1)^0,c
  2165   002258  ECC8  F008         	call	_normalise_readings	;wreg free
  2166   00225C                     
  2167                           ;colour_identify.c: 237:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2168   00225C  C07B  F001         	movff	card_response@buf,make_master_closeness@buf
  2169   002260  C07C  F002         	movff	card_response@buf+1,make_master_closeness@buf+1
  2170   002264  0E8B               	movlw	low card_response@normalised_values
  2171   002266  6E03               	movwf	make_master_closeness@normalised_values^0,c
  2172   002268  0E00               	movlw	high card_response@normalised_values
  2173   00226A  6E04               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2174   00226C  0ED3               	movlw	low card_response@master_closeness
  2175   00226E  6E05               	movwf	make_master_closeness@master_closeness^0,c
  2176   002270  0E00               	movlw	high card_response@master_closeness
  2177   002272  6E06               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2178   002274  ECF0  F011         	call	_make_master_closeness	;wreg free
  2179   002278                     
  2180                           ;colour_identify.c: 239:     card = determine_card(master_closeness);
  2181   002278  0ED3               	movlw	low card_response@master_closeness
  2182   00227A  6E01               	movwf	determine_card@master_closeness^0,c
  2183   00227C  0E00               	movlw	high card_response@master_closeness
  2184   00227E  6E02               	movwf	(determine_card@master_closeness+1)^0,c
  2185   002280  EC55  F014         	call	_determine_card	;wreg free
  2186   002284  0100               	movlb	0	; () banked
  2187   002286  6FE5               	movwf	card_response@card& (0+255),b
  2188   002288                     
  2189                           ; BSR set to: 0
  2190                           ;colour_identify.c: 240:     sprintf(buf, "CARD %d \n", card);
  2191   002288  C07B  F060         	movff	card_response@buf,sprintf@s
  2192   00228C  C07C  F061         	movff	card_response@buf+1,sprintf@s+1
  2193   002290  0E6E               	movlw	low STR_4
  2194   002292  6F62               	movwf	sprintf@fmt& (0+255),b
  2195   002294  0E0E               	movlw	high STR_4
  2196   002296  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2197   002298  C0E5  F064         	movff	card_response@card,?_sprintf+4
  2198   00229C  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2199   00229E  EC0E  F015         	call	_sprintf	;wreg free
  2200   0022A2                     
  2201                           ;colour_identify.c: 241:     sendStringSerial4(buf);
  2202   0022A2  C07B  F002         	movff	card_response@buf,sendStringSerial4@string
  2203   0022A6  C07C  F003         	movff	card_response@buf+1,sendStringSerial4@string+1
  2204   0022AA  EC7D  F016         	call	_sendStringSerial4	;wreg free
  2205   0022AE                     
  2206                           ;colour_identify.c: 243:     motor_response(card, mL, mR);
  2207   0022AE  C087  F01C         	movff	card_response@mL,motor_response@mL
  2208   0022B2  C088  F01D         	movff	card_response@mL+1,motor_response@mL+1
  2209   0022B6  C089  F01E         	movff	card_response@mR,motor_response@mR
  2210   0022BA  C08A  F01F         	movff	card_response@mR+1,motor_response@mR+1
  2211   0022BE  0100               	movlb	0	; () banked
  2212   0022C0  51E5               	movf	card_response@card& (0+255),w,b
  2213   0022C2  EC3D  F007         	call	_motor_response
  2214   0022C6  0012               	return		;funcret
  2215   0022C8                     __end_of_card_response:
  2216                           	callstack 0
  2217                           
  2218 ;; *************** function _sprintf *****************
  2219 ;; Defined at:
  2220 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2223 ;;		 -> main@buf(150), 
  2224 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2225 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  f              11   16[BANK0 ] struct _IO_FILE
  2228 ;;  ap              2   14[BANK0 ] PTR void [1]
  2229 ;;		 -> ?_sprintf(2), 
  2230 ;;  ret             2    0        int 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  2    0[BANK0 ] int 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2240 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2243 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2244 ;;Total ram usage:       27 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; Hardware stack levels required when called: 7
  2247 ;; This function calls:
  2248 ;;		_vfprintf
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;;		_clear_read_calibration
  2252 ;;		_card_response
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text8
  2257   002A1C                     __ptext8:
  2258                           	callstack 0
  2259   002A1C                     _sprintf:
  2260                           	callstack 23
  2261   002A1C  0E64               	movlw	low (?_sprintf+4)
  2262   002A1E  0100               	movlb	0	; () banked
  2263   002A20  6F6E               	movwf	sprintf@ap& (0+255),b
  2264   002A22  0E00               	movlw	high (?_sprintf+4)
  2265   002A24  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  2266   002A26  C060  F070         	movff	sprintf@s,sprintf@f
  2267   002A2A  C061  F071         	movff	sprintf@s+1,sprintf@f+1
  2268   002A2E                     
  2269                           ; BSR set to: 0
  2270   002A2E  0E00               	movlw	0
  2271   002A30  6F74               	movwf	(sprintf@f+4)& (0+255),b
  2272   002A32  0E00               	movlw	0
  2273   002A34  6F73               	movwf	(sprintf@f+3)& (0+255),b
  2274   002A36                     
  2275                           ; BSR set to: 0
  2276   002A36  0E00               	movlw	0
  2277   002A38  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  2278   002A3A  0E00               	movlw	0
  2279   002A3C  6F79               	movwf	(sprintf@f+9)& (0+255),b
  2280   002A3E                     
  2281                           ; BSR set to: 0
  2282   002A3E  0E70               	movlw	low sprintf@f
  2283   002A40  6E51               	movwf	vfprintf@fp^0,c
  2284   002A42  0E00               	movlw	high sprintf@f
  2285   002A44  6E52               	movwf	(vfprintf@fp+1)^0,c
  2286   002A46  C062  F053         	movff	sprintf@fmt,vfprintf@fmt
  2287   002A4A  C063  F054         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2288   002A4E  0E6E               	movlw	low sprintf@ap
  2289   002A50  6E55               	movwf	vfprintf@ap^0,c
  2290   002A52  0E00               	movlw	high sprintf@ap
  2291   002A54  6E56               	movwf	(vfprintf@ap+1)^0,c
  2292   002A56  EC37  F015         	call	_vfprintf	;wreg free
  2293   002A5A  0100               	movlb	0	; () banked
  2294   002A5C  5173               	movf	(sprintf@f+3)& (0+255),w,b
  2295   002A5E  2560               	addwf	sprintf@s& (0+255),w,b
  2296   002A60  6ED9               	movwf	fsr2l,c
  2297   002A62  5174               	movf	(sprintf@f+4)& (0+255),w,b
  2298   002A64  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  2299   002A66  6EDA               	movwf	fsr2h,c
  2300   002A68  0E00               	movlw	0
  2301   002A6A  6EDF               	movwf	indf2,c
  2302   002A6C                     
  2303                           ; BSR set to: 0
  2304   002A6C  0012               	return		;funcret
  2305   002A6E                     __end_of_sprintf:
  2306                           	callstack 0
  2307                           
  2308 ;; *************** function _vfprintf *****************
  2309 ;; Defined at:
  2310 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  fp              2   80[COMRAM] PTR struct _IO_FILE
  2313 ;;		 -> sprintf@f(11), 
  2314 ;;  fmt             2   82[COMRAM] PTR const unsigned char 
  2315 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2316 ;;  ap              2   84[COMRAM] PTR PTR void 
  2317 ;;		 -> sprintf@ap(2), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  cfmt            2   86[COMRAM] PTR unsigned char 
  2320 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  2   80[COMRAM] int 
  2323 ;; Registers used:
  2324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2330 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2333 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2334 ;;Total ram usage:        8 bytes
  2335 ;; Hardware stack levels used: 1
  2336 ;; Hardware stack levels required when called: 6
  2337 ;; This function calls:
  2338 ;;		_vfpfcnvrt
  2339 ;; This function is called by:
  2340 ;;		_sprintf
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text9
  2345   002A6E                     __ptext9:
  2346                           	callstack 0
  2347   002A6E                     _vfprintf:
  2348                           	callstack 23
  2349   002A6E                     
  2350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2351   002A6E  C053  F057         	movff	vfprintf@fmt,vfprintf@cfmt
  2352   002A72  C054  F058         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2353                           
  2354                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2355   002A76  EF4B  F015         	goto	l2577
  2356   002A7A                     l2575:
  2357                           
  2358                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2359   002A7A  C051  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
  2360   002A7E  C052  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2361   002A82  0E57               	movlw	low vfprintf@cfmt
  2362   002A84  6E41               	movwf	vfpfcnvrt@fmt^0,c
  2363   002A86  0E00               	movlw	high vfprintf@cfmt
  2364   002A88  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2365   002A8A  C055  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
  2366   002A8E  C056  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2367   002A92  EC0E  F010         	call	_vfpfcnvrt	;wreg free
  2368   002A96                     l2577:
  2369                           
  2370                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2371   002A96  C057  FFF6         	movff	vfprintf@cfmt,tblptrl
  2372   002A9A  C058  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2373   002A9E                     	if	0	;tblptru may be non-zero
  2374   002A9E                     	endif
  2375   002A9E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2376   002A9E  0E00               	movlw	low (__mediumconst shr (0+16))
  2377   002AA0  6EF8               	movwf	tblptru,c
  2378   002AA2                     	endif
  2379   002AA2  0008               	tblrd		*
  2380   002AA4  50F5               	movf	tablat,w,c
  2381   002AA6  0900               	iorlw	0
  2382   002AA8  A4D8               	btfss	status,2,c
  2383   002AAA  EF59  F015         	goto	u1251
  2384   002AAE  EF5B  F015         	goto	u1250
  2385   002AB2                     u1251:
  2386   002AB2  EF3D  F015         	goto	l2575
  2387   002AB6                     u1250:
  2388   002AB6                     
  2389                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2390   002AB6  0E00               	movlw	0
  2391   002AB8  6E52               	movwf	(?_vfprintf+1)^0,c
  2392   002ABA  0E00               	movlw	0
  2393   002ABC  6E51               	movwf	?_vfprintf^0,c
  2394   002ABE  0012               	return		;funcret
  2395   002AC0                     __end_of_vfprintf:
  2396                           	callstack 0
  2397                           
  2398 ;; *************** function _vfpfcnvrt *****************
  2399 ;; Defined at:
  2400 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
  2403 ;;		 -> sprintf@f(11), 
  2404 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
  2405 ;;		 -> vfprintf@cfmt(2), 
  2406 ;;  ap              2   66[COMRAM] PTR PTR void 
  2407 ;;		 -> sprintf@ap(2), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  convarg         8   70[COMRAM] struct .
  2410 ;;  cp              2   78[COMRAM] PTR unsigned char 
  2411 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2412 ;;  i               2    0        int 
  2413 ;;  done            2    0        int 
  2414 ;;  c               1    0        unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2424 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;Total ram usage:       18 bytes
  2429 ;; Hardware stack levels used: 1
  2430 ;; Hardware stack levels required when called: 5
  2431 ;; This function calls:
  2432 ;;		_dtoa
  2433 ;;		_fputc
  2434 ;; This function is called by:
  2435 ;;		_vfprintf
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text10
  2440   00201C                     __ptext10:
  2441                           	callstack 0
  2442   00201C                     _vfpfcnvrt:
  2443                           	callstack 23
  2444   00201C                     
  2445                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2446   00201C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2447   002020  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2448   002024  CFDE FFF6          	movff	postinc2,tblptrl
  2449   002028  CFDD FFF7          	movff	postdec2,tblptrh
  2450   00202C                     	if	0	;tblptru may be non-zero
  2451   00202C                     	endif
  2452   00202C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2453   00202C  0E00               	movlw	low (__mediumconst shr (0+16))
  2454   00202E  6EF8               	movwf	tblptru,c
  2455   002030                     	endif
  2456   002030  0008               	tblrd		*
  2457   002032  50F5               	movf	tablat,w,c
  2458   002034  0A25               	xorlw	37
  2459   002036  A4D8               	btfss	status,2,c
  2460   002038  EF20  F010         	goto	u1161
  2461   00203C  EF22  F010         	goto	u1160
  2462   002040                     u1161:
  2463   002040  EFA6  F010         	goto	l2457
  2464   002044                     u1160:
  2465   002044                     
  2466                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2467   002044  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2468   002048  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2469   00204C  2ADE               	incf	postinc2,f,c
  2470   00204E  0E00               	movlw	0
  2471   002050  22DD               	addwfc	postdec2,f,c
  2472   002052                     
  2473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2474   002052  0E00               	movlw	0
  2475   002054  0100               	movlb	0	; () banked
  2476   002056  6FE7               	movwf	(_width+1)& (0+255),b
  2477   002058  0E00               	movlw	0
  2478   00205A  6FE6               	movwf	_width& (0+255),b
  2479   00205C  C0E6  F0EA         	movff	_width,_flags
  2480   002060                     
  2481                           ; BSR set to: 0
  2482                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2483   002060  69E8               	setf	_prec& (0+255),b
  2484   002062  69E9               	setf	(_prec+1)& (0+255),b
  2485   002064                     
  2486                           ; BSR set to: 0
  2487                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2488   002064  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2489   002068  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2490   00206C  CFDE F04F          	movff	postinc2,vfpfcnvrt@cp
  2491   002070  CFDD F050          	movff	postdec2,vfpfcnvrt@cp+1
  2492   002074                     
  2493                           ; BSR set to: 0
  2494                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2495   002074  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2496   002078  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2497   00207C                     	if	0	;tblptru may be non-zero
  2498   00207C                     	endif
  2499   00207C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2500   00207C  0E00               	movlw	low (__mediumconst shr (0+16))
  2501   00207E  6EF8               	movwf	tblptru,c
  2502   002080                     	endif
  2503   002080  0008               	tblrd		*
  2504   002082  50F5               	movf	tablat,w,c
  2505   002084  0A64               	xorlw	100
  2506   002086  B4D8               	btfsc	status,2,c
  2507   002088  EF48  F010         	goto	u1171
  2508   00208C  EF4A  F010         	goto	u1170
  2509   002090                     u1171:
  2510   002090  EF5A  F010         	goto	l2447
  2511   002094                     u1170:
  2512   002094                     
  2513                           ; BSR set to: 0
  2514   002094  C04F  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2515   002098  C050  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2516   00209C                     	if	0	;tblptru may be non-zero
  2517   00209C                     	endif
  2518   00209C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2519   00209C  0E00               	movlw	low (__mediumconst shr (0+16))
  2520   00209E  6EF8               	movwf	tblptru,c
  2521   0020A0                     	endif
  2522   0020A0  0008               	tblrd		*
  2523   0020A2  50F5               	movf	tablat,w,c
  2524   0020A4  0A69               	xorlw	105
  2525   0020A6  A4D8               	btfss	status,2,c
  2526   0020A8  EF58  F010         	goto	u1181
  2527   0020AC  EF5A  F010         	goto	u1180
  2528   0020B0                     u1181:
  2529   0020B0  EF9D  F010         	goto	l2453
  2530   0020B4                     u1180:
  2531   0020B4                     l2447:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2535   0020B4  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2536   0020B8  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2537   0020BC  CFDF F045          	movff	indf2,??_vfpfcnvrt
  2538   0020C0  0E02               	movlw	2
  2539   0020C2  26DE               	addwf	postinc2,f,c
  2540   0020C4  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  2541   0020C8  0E00               	movlw	0
  2542   0020CA  22DD               	addwfc	postdec2,f,c
  2543   0020CC  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2544   0020D0  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2545   0020D4  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg
  2546   0020D8  CFDD F048          	movff	postdec2,vfpfcnvrt@convarg+1
  2547   0020DC  0E00               	movlw	0
  2548   0020DE  BE48               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2549   0020E0  0EFF               	movlw	-1
  2550   0020E2  6E49               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2551   0020E4  6E4A               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2552   0020E6  6E4B               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2553   0020E8  6E4C               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2554   0020EA  6E4D               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2555   0020EC  6E4E               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2556                           
  2557                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2558   0020EE  0E01               	movlw	1
  2559   0020F0  244F               	addwf	vfpfcnvrt@cp^0,w,c
  2560   0020F2  6E45               	movwf	??_vfpfcnvrt^0,c
  2561   0020F4  0E00               	movlw	0
  2562   0020F6  2050               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2563   0020F8  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  2564   0020FA  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2565   0020FE  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2566   002102  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  2567   002106  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2568   00210A                     
  2569                           ; BSR set to: 0
  2570                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2571   00210A  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2572   00210E  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2573   002112  C047  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  2574   002116  C048  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2575   00211A  C049  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2576   00211E  C04A  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2577   002122  C04B  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2578   002126  C04C  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2579   00212A  C04D  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2580   00212E  C04E  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2581   002132  EC3A  F00A         	call	_dtoa	;wreg free
  2582   002136  EFBC  F010         	goto	l1186
  2583   00213A                     l2453:
  2584                           
  2585                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2586   00213A  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2587   00213E  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2588   002142  2ADE               	incf	postinc2,f,c
  2589   002144  0E00               	movlw	0
  2590   002146  22DD               	addwfc	postdec2,f,c
  2591   002148  EFBC  F010         	goto	l1186
  2592   00214C                     l2457:
  2593                           
  2594                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2595   00214C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2596   002150  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2597   002154  CFDE FFF6          	movff	postinc2,tblptrl
  2598   002158  CFDD FFF7          	movff	postdec2,tblptrh
  2599   00215C                     	if	0	;tblptru may be non-zero
  2600   00215C                     	endif
  2601   00215C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2602   00215C  0E00               	movlw	low (__mediumconst shr (0+16))
  2603   00215E  6EF8               	movwf	tblptru,c
  2604   002160                     	endif
  2605   002160  0008               	tblrd		*
  2606   002162  50F5               	movf	tablat,w,c
  2607   002164  6E01               	movwf	fputc@c^0,c
  2608   002166  6A02               	clrf	(fputc@c+1)^0,c
  2609   002168  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2610   00216C  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2611   002170  EC76  F012         	call	_fputc	;wreg free
  2612   002174  EF9D  F010         	goto	l2453
  2613   002178                     l1186:
  2614   002178  0012               	return		;funcret
  2615   00217A                     __end_of_vfpfcnvrt:
  2616                           	callstack 0
  2617                           
  2618 ;; *************** function _dtoa *****************
  2619 ;; Defined at:
  2620 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2623 ;;		 -> sprintf@f(11), 
  2624 ;;  d               8   29[COMRAM] long long 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  n               8   51[COMRAM] long long 
  2627 ;;  i               2   59[COMRAM] int 
  2628 ;;  w               2   49[COMRAM] int 
  2629 ;;  p               2   47[COMRAM] int 
  2630 ;;  s               1   61[COMRAM] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2640 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;Total ram usage:       35 bytes
  2645 ;; Hardware stack levels used: 1
  2646 ;; Hardware stack levels required when called: 4
  2647 ;; This function calls:
  2648 ;;		___aodiv
  2649 ;;		___aomod
  2650 ;;		_abs
  2651 ;;		_pad
  2652 ;; This function is called by:
  2653 ;;		_vfpfcnvrt
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text11
  2658   001474                     __ptext11:
  2659                           	callstack 0
  2660   001474                     _dtoa:
  2661                           	callstack 23
  2662   001474                     
  2663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2664   001474  C01E  F034         	movff	dtoa@d,dtoa@n
  2665   001478  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  2666   00147C  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  2667   001480  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  2668   001484  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  2669   001488  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  2670   00148C  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  2671   001490  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  2672   001494                     
  2673                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2674   001494  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  2675   001496  EF4F  F00A         	goto	u1021
  2676   00149A  EF52  F00A         	goto	u1020
  2677   00149E                     u1021:
  2678   00149E  0E01               	movlw	1
  2679   0014A0  EF53  F00A         	goto	u1030
  2680   0014A4                     u1020:
  2681   0014A4  0E00               	movlw	0
  2682   0014A6                     u1030:
  2683   0014A6  6E3E               	movwf	dtoa@s^0,c
  2684   0014A8                     
  2685                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2686   0014A8  503E               	movf	dtoa@s^0,w,c
  2687   0014AA  B4D8               	btfsc	status,2,c
  2688   0014AC  EF5A  F00A         	goto	u1041
  2689   0014B0  EF5C  F00A         	goto	u1040
  2690   0014B4                     u1041:
  2691   0014B4  EF6C  F00A         	goto	l2343
  2692   0014B8                     u1040:
  2693   0014B8                     
  2694                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2695   0014B8  1E3B               	comf	(dtoa@n+7)^0,f,c
  2696   0014BA  1E3A               	comf	(dtoa@n+6)^0,f,c
  2697   0014BC  1E39               	comf	(dtoa@n+5)^0,f,c
  2698   0014BE  1E38               	comf	(dtoa@n+4)^0,f,c
  2699   0014C0  1E37               	comf	(dtoa@n+3)^0,f,c
  2700   0014C2  1E36               	comf	(dtoa@n+2)^0,f,c
  2701   0014C4  1E35               	comf	(dtoa@n+1)^0,f,c
  2702   0014C6  6C34               	negf	dtoa@n^0,c
  2703   0014C8  0E00               	movlw	0
  2704   0014CA  2235               	addwfc	(dtoa@n+1)^0,f,c
  2705   0014CC  2236               	addwfc	(dtoa@n+2)^0,f,c
  2706   0014CE  2237               	addwfc	(dtoa@n+3)^0,f,c
  2707   0014D0  2238               	addwfc	(dtoa@n+4)^0,f,c
  2708   0014D2  2239               	addwfc	(dtoa@n+5)^0,f,c
  2709   0014D4  223A               	addwfc	(dtoa@n+6)^0,f,c
  2710   0014D6  223B               	addwfc	(dtoa@n+7)^0,f,c
  2711   0014D8                     l2343:
  2712                           
  2713                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2714   0014D8  0100               	movlb	0	; () banked
  2715   0014DA  BFE9               	btfsc	(_prec+1)& (0+255),7,b
  2716   0014DC  EF7A  F00A         	goto	u1050
  2717   0014E0  51E9               	movf	(_prec+1)& (0+255),w,b
  2718   0014E2  E106               	bnz	u1051
  2719   0014E4  05E8               	decf	_prec& (0+255),w,b
  2720   0014E6  B0D8               	btfsc	status,0,c
  2721   0014E8  EF78  F00A         	goto	u1051
  2722   0014EC  EF7A  F00A         	goto	u1050
  2723   0014F0                     u1051:
  2724   0014F0  EF80  F00A         	goto	l1165
  2725   0014F4                     u1050:
  2726   0014F4                     
  2727                           ; BSR set to: 0
  2728   0014F4  0E00               	movlw	0
  2729   0014F6  6E31               	movwf	(dtoa@p+1)^0,c
  2730   0014F8  0E01               	movlw	1
  2731   0014FA  6E30               	movwf	dtoa@p^0,c
  2732   0014FC  EF84  F00A         	goto	l1167
  2733   001500                     l1165:
  2734                           
  2735                           ; BSR set to: 0
  2736   001500  C0E8  F030         	movff	_prec,dtoa@p
  2737   001504  C0E9  F031         	movff	_prec+1,dtoa@p+1
  2738   001508                     l1167:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2742   001508  C0E6  F032         	movff	_width,dtoa@w
  2743   00150C  C0E7  F033         	movff	_width+1,dtoa@w+1
  2744   001510                     
  2745                           ; BSR set to: 0
  2746                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2747   001510  503E               	movf	dtoa@s^0,w,c
  2748   001512  B4D8               	btfsc	status,2,c
  2749   001514  EF8E  F00A         	goto	u1061
  2750   001518  EF90  F00A         	goto	u1060
  2751   00151C                     u1061:
  2752   00151C  EFA7  F00A         	goto	l1168
  2753   001520                     u1060:
  2754   001520                     
  2755                           ; BSR set to: 0
  2756                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2757   001520  0632               	decf	dtoa@w^0,f,c
  2758   001522  A0D8               	btfss	status,0,c
  2759   001524  0633               	decf	(dtoa@w+1)^0,f,c
  2760   001526                     
  2761                           ; BSR set to: 0
  2762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2763   001526  503E               	movf	dtoa@s^0,w,c
  2764   001528  A4D8               	btfss	status,2,c
  2765   00152A  EF99  F00A         	goto	u1071
  2766   00152E  EF9B  F00A         	goto	u1070
  2767   001532                     u1071:
  2768   001532  EFA1  F00A         	goto	l2355
  2769   001536                     u1070:
  2770   001536                     
  2771                           ; BSR set to: 0
  2772   001536  0E00               	movlw	0
  2773   001538  6E2F               	movwf	(_dtoa$2309+1)^0,c
  2774   00153A  0E2B               	movlw	43
  2775   00153C  6E2E               	movwf	_dtoa$2309^0,c
  2776   00153E  EFA5  F00A         	goto	l2357
  2777   001542                     l2355:
  2778                           
  2779                           ; BSR set to: 0
  2780   001542  0E00               	movlw	0
  2781   001544  6E2F               	movwf	(_dtoa$2309+1)^0,c
  2782   001546  0E2D               	movlw	45
  2783   001548  6E2E               	movwf	_dtoa$2309^0,c
  2784   00154A                     l2357:
  2785                           
  2786                           ; BSR set to: 0
  2787   00154A  C02E  F03E         	movff	_dtoa$2309,dtoa@s
  2788   00154E                     l1168:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2792   00154E  0E00               	movlw	0
  2793   001550  6E3D               	movwf	(dtoa@i+1)^0,c
  2794   001552  0E1F               	movlw	31
  2795   001554  6E3C               	movwf	dtoa@i^0,c
  2796   001556                     
  2797                           ; BSR set to: 0
  2798                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2799   001556  0E00               	movlw	0
  2800   001558  0102               	movlb	2	; () banked
  2801   00155A  6F6F               	movwf	(_dbuf+31)& (0+255),b
  2802                           
  2803                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2804   00155C  EF2C  F00B         	goto	l2371
  2805   001560                     l2361:
  2806                           
  2807                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2808   001560  063C               	decf	dtoa@i^0,f,c
  2809   001562  A0D8               	btfss	status,0,c
  2810   001564  063D               	decf	(dtoa@i+1)^0,f,c
  2811   001566                     
  2812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2813   001566  0E50               	movlw	low _dbuf
  2814   001568  243C               	addwf	dtoa@i^0,w,c
  2815   00156A  6ED9               	movwf	fsr2l,c
  2816   00156C  0E02               	movlw	high _dbuf
  2817   00156E  203D               	addwfc	(dtoa@i+1)^0,w,c
  2818   001570  6EDA               	movwf	fsr2h,c
  2819   001572  C034  F001         	movff	dtoa@n,___aomod@dividend
  2820   001576  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2821   00157A  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2822   00157E  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2823   001582  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2824   001586  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2825   00158A  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2826   00158E  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2827   001592  0E0A               	movlw	10
  2828   001594  6E09               	movwf	___aomod@divisor^0,c
  2829   001596  0E00               	movlw	0
  2830   001598  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2831   00159A  0E00               	movlw	0
  2832   00159C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2833   00159E  0E00               	movlw	0
  2834   0015A0  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2835   0015A2  0E00               	movlw	0
  2836   0015A4  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2837   0015A6  0E00               	movlw	0
  2838   0015A8  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2839   0015AA  0E00               	movlw	0
  2840   0015AC  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2841   0015AE  0E00               	movlw	0
  2842   0015B0  6E10               	movwf	(___aomod@divisor+7)^0,c
  2843   0015B2  EC5C  F00F         	call	___aomod	;wreg free
  2844   0015B6  C001  F026         	movff	?___aomod,??_dtoa
  2845   0015BA  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2846   0015BE  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2847   0015C2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2848   0015C6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2849   0015CA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2850   0015CE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2851   0015D2  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2852   0015D6  C026  F013         	movff	??_dtoa,abs@a
  2853   0015DA  C027  F014         	movff	??_dtoa+1,abs@a+1
  2854   0015DE  EC43  F016         	call	_abs	;wreg free
  2855   0015E2  5013               	movf	?_abs^0,w,c
  2856   0015E4  0F30               	addlw	48
  2857   0015E6  6EDF               	movwf	indf2,c
  2858   0015E8                     
  2859                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2860   0015E8  0630               	decf	dtoa@p^0,f,c
  2861   0015EA  A0D8               	btfss	status,0,c
  2862   0015EC  0631               	decf	(dtoa@p+1)^0,f,c
  2863   0015EE                     
  2864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2865   0015EE  0632               	decf	dtoa@w^0,f,c
  2866   0015F0  A0D8               	btfss	status,0,c
  2867   0015F2  0633               	decf	(dtoa@w+1)^0,f,c
  2868   0015F4                     
  2869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2870   0015F4  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2871   0015F8  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2872   0015FC  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2873   001600  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2874   001604  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2875   001608  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2876   00160C  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2877   001610  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2878   001614  0E0A               	movlw	10
  2879   001616  6E09               	movwf	___aodiv@divisor^0,c
  2880   001618  0E00               	movlw	0
  2881   00161A  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2882   00161C  0E00               	movlw	0
  2883   00161E  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2884   001620  0E00               	movlw	0
  2885   001622  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2886   001624  0E00               	movlw	0
  2887   001626  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2888   001628  0E00               	movlw	0
  2889   00162A  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2890   00162C  0E00               	movlw	0
  2891   00162E  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2892   001630  0E00               	movlw	0
  2893   001632  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2894   001634  ECE2  F00D         	call	___aodiv	;wreg free
  2895   001638  C001  F034         	movff	?___aodiv,dtoa@n
  2896   00163C  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2897   001640  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2898   001644  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2899   001648  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2900   00164C  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2901   001650  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2902   001654  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2903   001658                     l2371:
  2904                           
  2905                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2906   001658  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2907   00165A  EF37  F00B         	goto	u1081
  2908   00165E  503D               	movf	(dtoa@i+1)^0,w,c
  2909   001660  E108               	bnz	u1080
  2910   001662  043C               	decf	dtoa@i^0,w,c
  2911   001664  A0D8               	btfss	status,0,c
  2912   001666  EF37  F00B         	goto	u1081
  2913   00166A  EF39  F00B         	goto	u1080
  2914   00166E                     u1081:
  2915   00166E  EF55  F00B         	goto	l2377
  2916   001672                     u1080:
  2917   001672  5034               	movf	dtoa@n^0,w,c
  2918   001674  1035               	iorwf	(dtoa@n+1)^0,w,c
  2919   001676  1036               	iorwf	(dtoa@n+2)^0,w,c
  2920   001678  1037               	iorwf	(dtoa@n+3)^0,w,c
  2921   00167A  1038               	iorwf	(dtoa@n+4)^0,w,c
  2922   00167C  1039               	iorwf	(dtoa@n+5)^0,w,c
  2923   00167E  103A               	iorwf	(dtoa@n+6)^0,w,c
  2924   001680  103B               	iorwf	(dtoa@n+7)^0,w,c
  2925   001682  A4D8               	btfss	status,2,c
  2926   001684  EF46  F00B         	goto	u1091
  2927   001688  EF48  F00B         	goto	u1090
  2928   00168C                     u1091:
  2929   00168C  EFB0  F00A         	goto	l2361
  2930   001690                     u1090:
  2931   001690  BE31               	btfsc	(dtoa@p+1)^0,7,c
  2932   001692  EF55  F00B         	goto	u1100
  2933   001696  5031               	movf	(dtoa@p+1)^0,w,c
  2934   001698  E106               	bnz	u1101
  2935   00169A  0430               	decf	dtoa@p^0,w,c
  2936   00169C  B0D8               	btfsc	status,0,c
  2937   00169E  EF53  F00B         	goto	u1101
  2938   0016A2  EF55  F00B         	goto	u1100
  2939   0016A6                     u1101:
  2940   0016A6  EFB0  F00A         	goto	l2361
  2941   0016AA                     u1100:
  2942   0016AA                     l2377:
  2943                           
  2944                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2945   0016AA  503E               	movf	dtoa@s^0,w,c
  2946   0016AC  B4D8               	btfsc	status,2,c
  2947   0016AE  EF5B  F00B         	goto	u1111
  2948   0016B2  EF5D  F00B         	goto	u1110
  2949   0016B6                     u1111:
  2950   0016B6  EF68  F00B         	goto	l2383
  2951   0016BA                     u1110:
  2952   0016BA                     
  2953                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2954   0016BA  063C               	decf	dtoa@i^0,f,c
  2955   0016BC  A0D8               	btfss	status,0,c
  2956   0016BE  063D               	decf	(dtoa@i+1)^0,f,c
  2957   0016C0                     
  2958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2959   0016C0  0E50               	movlw	low _dbuf
  2960   0016C2  243C               	addwf	dtoa@i^0,w,c
  2961   0016C4  6ED9               	movwf	fsr2l,c
  2962   0016C6  0E02               	movlw	high _dbuf
  2963   0016C8  203D               	addwfc	(dtoa@i+1)^0,w,c
  2964   0016CA  6EDA               	movwf	fsr2h,c
  2965   0016CC  C03E  FFDF         	movff	dtoa@s,indf2
  2966   0016D0                     l2383:
  2967                           
  2968                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2969   0016D0  C01C  F011         	movff	dtoa@fp,pad@fp
  2970   0016D4  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2971   0016D8  0E50               	movlw	low _dbuf
  2972   0016DA  243C               	addwf	dtoa@i^0,w,c
  2973   0016DC  6E13               	movwf	pad@buf^0,c
  2974   0016DE  0E02               	movlw	high _dbuf
  2975   0016E0  203D               	addwfc	(dtoa@i+1)^0,w,c
  2976   0016E2  6E14               	movwf	(pad@buf+1)^0,c
  2977   0016E4  C032  F015         	movff	dtoa@w,pad@p
  2978   0016E8  C033  F016         	movff	dtoa@w+1,pad@p+1
  2979   0016EC  EC97  F014         	call	_pad	;wreg free
  2980   0016F0  0012               	return		;funcret
  2981   0016F2                     __end_of_dtoa:
  2982                           	callstack 0
  2983                           
  2984 ;; *************** function _pad *****************
  2985 ;; Defined at:
  2986 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2989 ;;		 -> sprintf@f(11), 
  2990 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2991 ;;		 -> dbuf(32), 
  2992 ;;  p               2   20[COMRAM] int 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  w               2   25[COMRAM] int 
  2995 ;;  i               2   23[COMRAM] int 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3005 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3006 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;Total ram usage:       11 bytes
  3010 ;; Hardware stack levels used: 1
  3011 ;; Hardware stack levels required when called: 3
  3012 ;; This function calls:
  3013 ;;		_fputc
  3014 ;;		_fputs
  3015 ;; This function is called by:
  3016 ;;		_dtoa
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text12
  3021   00292E                     __ptext12:
  3022                           	callstack 0
  3023   00292E                     _pad:
  3024                           	callstack 23
  3025   00292E                     
  3026                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3027   00292E  BE16               	btfsc	(pad@p+1)^0,7,c
  3028   002930  EF9C  F014         	goto	u951
  3029   002934  EF9E  F014         	goto	u950
  3030   002938                     u951:
  3031   002938  EFA4  F014         	goto	l2293
  3032   00293C                     u950:
  3033   00293C  C015  F01A         	movff	pad@p,pad@w
  3034   002940  C016  F01B         	movff	pad@p+1,pad@w+1
  3035   002944  EFA8  F014         	goto	l1156
  3036   002948                     l2293:
  3037   002948  0E00               	movlw	0
  3038   00294A  6E1B               	movwf	(pad@w+1)^0,c
  3039   00294C  0E00               	movlw	0
  3040   00294E  6E1A               	movwf	pad@w^0,c
  3041   002950                     l1156:
  3042                           
  3043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3044   002950  0E00               	movlw	0
  3045   002952  6E19               	movwf	(pad@i+1)^0,c
  3046   002954  0E00               	movlw	0
  3047   002956  6E18               	movwf	pad@i^0,c
  3048                           
  3049                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3050   002958  EFBA  F014         	goto	l2299
  3051   00295C                     l2295:
  3052                           
  3053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3054   00295C  0E00               	movlw	0
  3055   00295E  6E02               	movwf	(fputc@c+1)^0,c
  3056   002960  0E20               	movlw	32
  3057   002962  6E01               	movwf	fputc@c^0,c
  3058   002964  C011  F003         	movff	pad@fp,fputc@fp
  3059   002968  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3060   00296C  EC76  F012         	call	_fputc	;wreg free
  3061   002970                     
  3062                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3063   002970  4A18               	infsnz	pad@i^0,f,c
  3064   002972  2A19               	incf	(pad@i+1)^0,f,c
  3065   002974                     l2299:
  3066                           
  3067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3068   002974  501A               	movf	pad@w^0,w,c
  3069   002976  5C18               	subwf	pad@i^0,w,c
  3070   002978  5019               	movf	(pad@i+1)^0,w,c
  3071   00297A  0A80               	xorlw	128
  3072   00297C  6E17               	movwf	??_pad^0,c
  3073   00297E  501B               	movf	(pad@w+1)^0,w,c
  3074   002980  0A80               	xorlw	128
  3075   002982  5817               	subwfb	??_pad^0,w,c
  3076   002984  A0D8               	btfss	status,0,c
  3077   002986  EFC7  F014         	goto	u961
  3078   00298A  EFC9  F014         	goto	u960
  3079   00298E                     u961:
  3080   00298E  EFAE  F014         	goto	l2295
  3081   002992                     u960:
  3082   002992                     
  3083                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3084   002992  C013  F00A         	movff	pad@buf,fputs@s
  3085   002996  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3086   00299A  C011  F00C         	movff	pad@fp,fputs@fp
  3087   00299E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3088   0029A2  EC00  F016         	call	_fputs	;wreg free
  3089   0029A6  0012               	return		;funcret
  3090   0029A8                     __end_of_pad:
  3091                           	callstack 0
  3092                           
  3093 ;; *************** function _fputs *****************
  3094 ;; Defined at:
  3095 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3098 ;;		 -> dbuf(32), 
  3099 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3100 ;;		 -> sprintf@f(11), 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  i               2   14[COMRAM] int 
  3103 ;;  c               1   13[COMRAM] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  2    9[COMRAM] int 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3113 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3116 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3117 ;;Total ram usage:        7 bytes
  3118 ;; Hardware stack levels used: 1
  3119 ;; Hardware stack levels required when called: 2
  3120 ;; This function calls:
  3121 ;;		_fputc
  3122 ;; This function is called by:
  3123 ;;		_pad
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text13
  3128   002C00                     __ptext13:
  3129                           	callstack 0
  3130   002C00                     _fputs:
  3131                           	callstack 23
  3132   002C00  0E00               	movlw	0
  3133   002C02  6E10               	movwf	(fputs@i+1)^0,c
  3134   002C04  0E00               	movlw	0
  3135   002C06  6E0F               	movwf	fputs@i^0,c
  3136   002C08  EF11  F016         	goto	l2203
  3137   002C0C                     l2199:
  3138   002C0C  C00E  F001         	movff	fputs@c,fputc@c
  3139   002C10  6A02               	clrf	(fputc@c+1)^0,c
  3140   002C12  C00C  F003         	movff	fputs@fp,fputc@fp
  3141   002C16  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3142   002C1A  EC76  F012         	call	_fputc	;wreg free
  3143   002C1E  4A0F               	infsnz	fputs@i^0,f,c
  3144   002C20  2A10               	incf	(fputs@i+1)^0,f,c
  3145   002C22                     l2203:
  3146   002C22  500F               	movf	fputs@i^0,w,c
  3147   002C24  240A               	addwf	fputs@s^0,w,c
  3148   002C26  6ED9               	movwf	fsr2l,c
  3149   002C28  5010               	movf	(fputs@i+1)^0,w,c
  3150   002C2A  200B               	addwfc	(fputs@s+1)^0,w,c
  3151   002C2C  6EDA               	movwf	fsr2h,c
  3152   002C2E  50DF               	movf	indf2,w,c
  3153   002C30  6E0E               	movwf	fputs@c^0,c
  3154   002C32  500E               	movf	fputs@c^0,w,c
  3155   002C34  A4D8               	btfss	status,2,c
  3156   002C36  EF1F  F016         	goto	u801
  3157   002C3A  EF21  F016         	goto	u800
  3158   002C3E                     u801:
  3159   002C3E  EF06  F016         	goto	l2199
  3160   002C42                     u800:
  3161   002C42  0012               	return		;funcret
  3162   002C44                     __end_of_fputs:
  3163                           	callstack 0
  3164                           
  3165 ;; *************** function _fputc *****************
  3166 ;; Defined at:
  3167 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  c               2    0[COMRAM] int 
  3170 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3171 ;;		 -> sprintf@f(11), 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  2    0[COMRAM] int 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3183 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3185 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3186 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3187 ;;Total ram usage:        9 bytes
  3188 ;; Hardware stack levels used: 1
  3189 ;; Hardware stack levels required when called: 1
  3190 ;; This function calls:
  3191 ;;		_putch
  3192 ;; This function is called by:
  3193 ;;		_pad
  3194 ;;		_vfpfcnvrt
  3195 ;;		_fputs
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text14
  3200   0024EC                     __ptext14:
  3201                           	callstack 0
  3202   0024EC                     _fputc:
  3203                           	callstack 26
  3204   0024EC  5003               	movf	fputc@fp^0,w,c
  3205   0024EE  1004               	iorwf	(fputc@fp+1)^0,w,c
  3206   0024F0  B4D8               	btfsc	status,2,c
  3207   0024F2  EF7D  F012         	goto	u761
  3208   0024F6  EF7F  F012         	goto	u760
  3209   0024FA                     u761:
  3210   0024FA  EF88  F012         	goto	l2187
  3211   0024FE                     u760:
  3212   0024FE  5003               	movf	fputc@fp^0,w,c
  3213   002500  1004               	iorwf	(fputc@fp+1)^0,w,c
  3214   002502  A4D8               	btfss	status,2,c
  3215   002504  EF86  F012         	goto	u771
  3216   002508  EF88  F012         	goto	u770
  3217   00250C                     u771:
  3218   00250C  EF8D  F012         	goto	l2189
  3219   002510                     u770:
  3220   002510                     l2187:
  3221   002510  5001               	movf	fputc@c^0,w,c
  3222   002512  EC33  F017         	call	_putch
  3223   002516  EFDA  F012         	goto	l1204
  3224   00251A                     l2189:
  3225   00251A  EE20 F009          	lfsr	2,9
  3226   00251E  5003               	movf	fputc@fp^0,w,c
  3227   002520  26D9               	addwf	fsr2l,f,c
  3228   002522  5004               	movf	(fputc@fp+1)^0,w,c
  3229   002524  22DA               	addwfc	fsr2h,f,c
  3230   002526  50DE               	movf	postinc2,w,c
  3231   002528  10DE               	iorwf	postinc2,w,c
  3232   00252A  B4D8               	btfsc	status,2,c
  3233   00252C  EF9A  F012         	goto	u781
  3234   002530  EF9C  F012         	goto	u780
  3235   002534                     u781:
  3236   002534  EFB7  F012         	goto	l2193
  3237   002538                     u780:
  3238   002538  EE20 F009          	lfsr	2,9
  3239   00253C  5003               	movf	fputc@fp^0,w,c
  3240   00253E  26D9               	addwf	fsr2l,f,c
  3241   002540  5004               	movf	(fputc@fp+1)^0,w,c
  3242   002542  22DA               	addwfc	fsr2h,f,c
  3243   002544  EE10 F003          	lfsr	1,3
  3244   002548  5003               	movf	fputc@fp^0,w,c
  3245   00254A  26E1               	addwf	fsr1l,f,c
  3246   00254C  5004               	movf	(fputc@fp+1)^0,w,c
  3247   00254E  22E2               	addwfc	fsr1h,f,c
  3248   002550  50DE               	movf	postinc2,w,c
  3249   002552  5CE6               	subwf	postinc1,w,c
  3250   002554  50E6               	movf	postinc1,w,c
  3251   002556  0A80               	xorlw	128
  3252   002558  6E09               	movwf	(??_fputc+4)^0,c
  3253   00255A  50DE               	movf	postinc2,w,c
  3254   00255C  0A80               	xorlw	128
  3255   00255E  5809               	subwfb	(??_fputc+4)^0,w,c
  3256   002560  B0D8               	btfsc	status,0,c
  3257   002562  EFB5  F012         	goto	u791
  3258   002566  EFB7  F012         	goto	u790
  3259   00256A                     u791:
  3260   00256A  EFDA  F012         	goto	l1204
  3261   00256E                     u790:
  3262   00256E                     l2193:
  3263   00256E  EE20 F003          	lfsr	2,3
  3264   002572  5003               	movf	fputc@fp^0,w,c
  3265   002574  26D9               	addwf	fsr2l,f,c
  3266   002576  5004               	movf	(fputc@fp+1)^0,w,c
  3267   002578  22DA               	addwfc	fsr2h,f,c
  3268   00257A  CFDE F005          	movff	postinc2,??_fputc
  3269   00257E  CFDD F006          	movff	postdec2,??_fputc+1
  3270   002582  C003  FFD9         	movff	fputc@fp,fsr2l
  3271   002586  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3272   00258A  CFDE F007          	movff	postinc2,??_fputc+2
  3273   00258E  CFDD F008          	movff	postdec2,??_fputc+3
  3274   002592  5005               	movf	??_fputc^0,w,c
  3275   002594  2407               	addwf	(??_fputc+2)^0,w,c
  3276   002596  6ED9               	movwf	fsr2l,c
  3277   002598  5006               	movf	(??_fputc+1)^0,w,c
  3278   00259A  2008               	addwfc	(??_fputc+3)^0,w,c
  3279   00259C  6EDA               	movwf	fsr2h,c
  3280   00259E  C001  FFDF         	movff	fputc@c,indf2
  3281   0025A2  EE20 F003          	lfsr	2,3
  3282   0025A6  5003               	movf	fputc@fp^0,w,c
  3283   0025A8  26D9               	addwf	fsr2l,f,c
  3284   0025AA  5004               	movf	(fputc@fp+1)^0,w,c
  3285   0025AC  22DA               	addwfc	fsr2h,f,c
  3286   0025AE  2ADE               	incf	postinc2,f,c
  3287   0025B0  0E00               	movlw	0
  3288   0025B2  22DD               	addwfc	postdec2,f,c
  3289   0025B4                     l1204:
  3290   0025B4  0012               	return		;funcret
  3291   0025B6                     __end_of_fputc:
  3292                           	callstack 0
  3293                           
  3294 ;; *************** function _putch *****************
  3295 ;; Defined at:
  3296 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  c               1    wreg     unsigned char 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  c               1    0[COMRAM] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used: 1
  3316 ;; This function calls:
  3317 ;;		Nothing
  3318 ;; This function is called by:
  3319 ;;		_fputc
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text15
  3324   002E66                     __ptext15:
  3325                           	callstack 0
  3326   002E66                     _putch:
  3327                           	callstack 26
  3328   002E66  0012               	return		;funcret
  3329   002E68                     __end_of_putch:
  3330                           	callstack 0
  3331                           
  3332 ;; *************** function ___aomod *****************
  3333 ;; Defined at:
  3334 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  dividend        8    0[COMRAM] long long 
  3337 ;;  divisor         8    8[COMRAM] long long 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  sign            1   17[COMRAM] unsigned char 
  3340 ;;  counter         1   16[COMRAM] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  8    0[COMRAM] long long 
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3350 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3354 ;;Total ram usage:       18 bytes
  3355 ;; Hardware stack levels used: 1
  3356 ;; This function calls:
  3357 ;;		Nothing
  3358 ;; This function is called by:
  3359 ;;		_dtoa
  3360 ;; This function uses a non-reentrant model
  3361 ;;
  3362                           
  3363                           	psect	text16
  3364   001EB8                     __ptext16:
  3365                           	callstack 0
  3366   001EB8                     ___aomod:
  3367                           	callstack 26
  3368   001EB8  0E00               	movlw	0
  3369   001EBA  6E12               	movwf	___aomod@sign^0,c
  3370   001EBC  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  3371   001EBE  EF65  F00F         	goto	u890
  3372   001EC2  EF63  F00F         	goto	u891
  3373   001EC6                     u891:
  3374   001EC6  EF77  F00F         	goto	l2261
  3375   001ECA                     u890:
  3376   001ECA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3377   001ECC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3378   001ECE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3379   001ED0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3380   001ED2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3381   001ED4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3382   001ED6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3383   001ED8  6C01               	negf	___aomod@dividend^0,c
  3384   001EDA  0E00               	movlw	0
  3385   001EDC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3386   001EDE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3387   001EE0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3388   001EE2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3389   001EE4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3390   001EE6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3391   001EE8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3392   001EEA  0E01               	movlw	1
  3393   001EEC  6E12               	movwf	___aomod@sign^0,c
  3394   001EEE                     l2261:
  3395   001EEE  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  3396   001EF0  EF7E  F00F         	goto	u900
  3397   001EF4  EF7C  F00F         	goto	u901
  3398   001EF8                     u901:
  3399   001EF8  EF8E  F00F         	goto	l2265
  3400   001EFC                     u900:
  3401   001EFC  1E10               	comf	(___aomod@divisor+7)^0,f,c
  3402   001EFE  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  3403   001F00  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  3404   001F02  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  3405   001F04  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  3406   001F06  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  3407   001F08  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  3408   001F0A  6C09               	negf	___aomod@divisor^0,c
  3409   001F0C  0E00               	movlw	0
  3410   001F0E  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  3411   001F10  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  3412   001F12  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  3413   001F14  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  3414   001F16  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  3415   001F18  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  3416   001F1A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  3417   001F1C                     l2265:
  3418   001F1C  5009               	movf	___aomod@divisor^0,w,c
  3419   001F1E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  3420   001F20  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  3421   001F22  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  3422   001F24  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  3423   001F26  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  3424   001F28  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  3425   001F2A  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  3426   001F2C  B4D8               	btfsc	status,2,c
  3427   001F2E  EF9B  F00F         	goto	u911
  3428   001F32  EF9D  F00F         	goto	u910
  3429   001F36                     u911:
  3430   001F36  EFE5  F00F         	goto	l2281
  3431   001F3A                     u910:
  3432   001F3A  0E01               	movlw	1
  3433   001F3C  6E11               	movwf	___aomod@counter^0,c
  3434   001F3E  EFAB  F00F         	goto	l2271
  3435   001F42                     l2269:
  3436   001F42  90D8               	bcf	status,0,c
  3437   001F44  3609               	rlcf	___aomod@divisor^0,f,c
  3438   001F46  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  3439   001F48  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  3440   001F4A  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  3441   001F4C  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  3442   001F4E  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  3443   001F50  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  3444   001F52  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  3445   001F54  2A11               	incf	___aomod@counter^0,f,c
  3446   001F56                     l2271:
  3447   001F56  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  3448   001F58  EFB0  F00F         	goto	u921
  3449   001F5C  EFB2  F00F         	goto	u920
  3450   001F60                     u921:
  3451   001F60  EFA1  F00F         	goto	l2269
  3452   001F64                     u920:
  3453   001F64                     l2273:
  3454   001F64  5009               	movf	___aomod@divisor^0,w,c
  3455   001F66  5C01               	subwf	___aomod@dividend^0,w,c
  3456   001F68  500A               	movf	(___aomod@divisor+1)^0,w,c
  3457   001F6A  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  3458   001F6C  500B               	movf	(___aomod@divisor+2)^0,w,c
  3459   001F6E  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  3460   001F70  500C               	movf	(___aomod@divisor+3)^0,w,c
  3461   001F72  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  3462   001F74  500D               	movf	(___aomod@divisor+4)^0,w,c
  3463   001F76  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  3464   001F78  500E               	movf	(___aomod@divisor+5)^0,w,c
  3465   001F7A  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  3466   001F7C  500F               	movf	(___aomod@divisor+6)^0,w,c
  3467   001F7E  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  3468   001F80  5010               	movf	(___aomod@divisor+7)^0,w,c
  3469   001F82  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  3470   001F84  A0D8               	btfss	status,0,c
  3471   001F86  EFC7  F00F         	goto	u931
  3472   001F8A  EFC9  F00F         	goto	u930
  3473   001F8E                     u931:
  3474   001F8E  EFD9  F00F         	goto	l2277
  3475   001F92                     u930:
  3476   001F92  5009               	movf	___aomod@divisor^0,w,c
  3477   001F94  5E01               	subwf	___aomod@dividend^0,f,c
  3478   001F96  500A               	movf	(___aomod@divisor+1)^0,w,c
  3479   001F98  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  3480   001F9A  500B               	movf	(___aomod@divisor+2)^0,w,c
  3481   001F9C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  3482   001F9E  500C               	movf	(___aomod@divisor+3)^0,w,c
  3483   001FA0  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  3484   001FA2  500D               	movf	(___aomod@divisor+4)^0,w,c
  3485   001FA4  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  3486   001FA6  500E               	movf	(___aomod@divisor+5)^0,w,c
  3487   001FA8  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  3488   001FAA  500F               	movf	(___aomod@divisor+6)^0,w,c
  3489   001FAC  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  3490   001FAE  5010               	movf	(___aomod@divisor+7)^0,w,c
  3491   001FB0  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  3492   001FB2                     l2277:
  3493   001FB2  90D8               	bcf	status,0,c
  3494   001FB4  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  3495   001FB6  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  3496   001FB8  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  3497   001FBA  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  3498   001FBC  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  3499   001FBE  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  3500   001FC0  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  3501   001FC2  3209               	rrcf	___aomod@divisor^0,f,c
  3502   001FC4  2E11               	decfsz	___aomod@counter^0,f,c
  3503   001FC6  EFB2  F00F         	goto	l2273
  3504   001FCA                     l2281:
  3505   001FCA  5012               	movf	___aomod@sign^0,w,c
  3506   001FCC  B4D8               	btfsc	status,2,c
  3507   001FCE  EFEB  F00F         	goto	u941
  3508   001FD2  EFED  F00F         	goto	u940
  3509   001FD6                     u941:
  3510   001FD6  EFFD  F00F         	goto	l2285
  3511   001FDA                     u940:
  3512   001FDA  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3513   001FDC  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3514   001FDE  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3515   001FE0  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3516   001FE2  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3517   001FE4  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3518   001FE6  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3519   001FE8  6C01               	negf	___aomod@dividend^0,c
  3520   001FEA  0E00               	movlw	0
  3521   001FEC  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3522   001FEE  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3523   001FF0  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3524   001FF2  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3525   001FF4  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3526   001FF6  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3527   001FF8  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3528   001FFA                     l2285:
  3529   001FFA  C001  F001         	movff	___aomod@dividend,?___aomod
  3530   001FFE  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3531   002002  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3532   002006  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3533   00200A  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3534   00200E  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3535   002012  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3536   002016  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3537   00201A  0012               	return		;funcret
  3538   00201C                     __end_of___aomod:
  3539                           	callstack 0
  3540                           
  3541 ;; *************** function ___aodiv *****************
  3542 ;; Defined at:
  3543 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        8    0[COMRAM] long long 
  3546 ;;  divisor         8    8[COMRAM] long long 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  quotient        8   18[COMRAM] long long 
  3549 ;;  sign            1   17[COMRAM] unsigned char 
  3550 ;;  counter         1   16[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  8    0[COMRAM] long long 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3560 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3563 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3564 ;;Total ram usage:       26 bytes
  3565 ;; Hardware stack levels used: 1
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_dtoa
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text17
  3574   001BC4                     __ptext17:
  3575                           	callstack 0
  3576   001BC4                     ___aodiv:
  3577                           	callstack 26
  3578   001BC4  0E00               	movlw	0
  3579   001BC6  6E12               	movwf	___aodiv@sign^0,c
  3580   001BC8  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  3581   001BCA  EFEB  F00D         	goto	u820
  3582   001BCE  EFE9  F00D         	goto	u821
  3583   001BD2                     u821:
  3584   001BD2  EFFD  F00D         	goto	l2217
  3585   001BD6                     u820:
  3586   001BD6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3587   001BD8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3588   001BDA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3589   001BDC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3590   001BDE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3591   001BE0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3592   001BE2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3593   001BE4  6C09               	negf	___aodiv@divisor^0,c
  3594   001BE6  0E00               	movlw	0
  3595   001BE8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3596   001BEA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3597   001BEC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3598   001BEE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3599   001BF0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3600   001BF2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3601   001BF4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3602   001BF6  0E01               	movlw	1
  3603   001BF8  6E12               	movwf	___aodiv@sign^0,c
  3604   001BFA                     l2217:
  3605   001BFA  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  3606   001BFC  EF04  F00E         	goto	u830
  3607   001C00  EF02  F00E         	goto	u831
  3608   001C04                     u831:
  3609   001C04  EF16  F00E         	goto	l2223
  3610   001C08                     u830:
  3611   001C08  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3612   001C0A  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3613   001C0C  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3614   001C0E  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3615   001C10  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3616   001C12  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3617   001C14  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3618   001C16  6C01               	negf	___aodiv@dividend^0,c
  3619   001C18  0E00               	movlw	0
  3620   001C1A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3621   001C1C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3622   001C1E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3623   001C20  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3624   001C22  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3625   001C24  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3626   001C26  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3627   001C28  0E01               	movlw	1
  3628   001C2A  1A12               	xorwf	___aodiv@sign^0,f,c
  3629   001C2C                     l2223:
  3630   001C2C  EE20  F013         	lfsr	2,___aodiv@quotient
  3631   001C30  0E07               	movlw	7
  3632   001C32                     u841:
  3633   001C32  6ADE               	clrf	postinc2,c
  3634   001C34  06E8               	decf	wreg,f,c
  3635   001C36  E2FD               	bc	u841
  3636   001C38  5009               	movf	___aodiv@divisor^0,w,c
  3637   001C3A  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3638   001C3C  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3639   001C3E  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3640   001C40  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3641   001C42  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3642   001C44  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3643   001C46  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3644   001C48  B4D8               	btfsc	status,2,c
  3645   001C4A  EF29  F00E         	goto	u851
  3646   001C4E  EF2B  F00E         	goto	u850
  3647   001C52                     u851:
  3648   001C52  EF7D  F00E         	goto	l2245
  3649   001C56                     u850:
  3650   001C56  0E01               	movlw	1
  3651   001C58  6E11               	movwf	___aodiv@counter^0,c
  3652   001C5A  EF39  F00E         	goto	l2231
  3653   001C5E                     l2229:
  3654   001C5E  90D8               	bcf	status,0,c
  3655   001C60  3609               	rlcf	___aodiv@divisor^0,f,c
  3656   001C62  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3657   001C64  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3658   001C66  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3659   001C68  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3660   001C6A  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3661   001C6C  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3662   001C6E  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3663   001C70  2A11               	incf	___aodiv@counter^0,f,c
  3664   001C72                     l2231:
  3665   001C72  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3666   001C74  EF3E  F00E         	goto	u861
  3667   001C78  EF40  F00E         	goto	u860
  3668   001C7C                     u861:
  3669   001C7C  EF2F  F00E         	goto	l2229
  3670   001C80                     u860:
  3671   001C80                     l2233:
  3672   001C80  90D8               	bcf	status,0,c
  3673   001C82  3613               	rlcf	___aodiv@quotient^0,f,c
  3674   001C84  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3675   001C86  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3676   001C88  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3677   001C8A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3678   001C8C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3679   001C8E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3680   001C90  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3681   001C92  5009               	movf	___aodiv@divisor^0,w,c
  3682   001C94  5C01               	subwf	___aodiv@dividend^0,w,c
  3683   001C96  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3684   001C98  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3685   001C9A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3686   001C9C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3687   001C9E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3688   001CA0  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3689   001CA2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3690   001CA4  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3691   001CA6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3692   001CA8  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3693   001CAA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3694   001CAC  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3695   001CAE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3696   001CB0  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3697   001CB2  A0D8               	btfss	status,0,c
  3698   001CB4  EF5E  F00E         	goto	u871
  3699   001CB8  EF60  F00E         	goto	u870
  3700   001CBC                     u871:
  3701   001CBC  EF71  F00E         	goto	l2241
  3702   001CC0                     u870:
  3703   001CC0  5009               	movf	___aodiv@divisor^0,w,c
  3704   001CC2  5E01               	subwf	___aodiv@dividend^0,f,c
  3705   001CC4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3706   001CC6  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3707   001CC8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3708   001CCA  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3709   001CCC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3710   001CCE  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3711   001CD0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3712   001CD2  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3713   001CD4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3714   001CD6  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3715   001CD8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3716   001CDA  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3717   001CDC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3718   001CDE  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3719   001CE0  8013               	bsf	___aodiv@quotient^0,0,c
  3720   001CE2                     l2241:
  3721   001CE2  90D8               	bcf	status,0,c
  3722   001CE4  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3723   001CE6  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3724   001CE8  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3725   001CEA  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3726   001CEC  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3727   001CEE  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3728   001CF0  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3729   001CF2  3209               	rrcf	___aodiv@divisor^0,f,c
  3730   001CF4  2E11               	decfsz	___aodiv@counter^0,f,c
  3731   001CF6  EF40  F00E         	goto	l2233
  3732   001CFA                     l2245:
  3733   001CFA  5012               	movf	___aodiv@sign^0,w,c
  3734   001CFC  B4D8               	btfsc	status,2,c
  3735   001CFE  EF83  F00E         	goto	u881
  3736   001D02  EF85  F00E         	goto	u880
  3737   001D06                     u881:
  3738   001D06  EF95  F00E         	goto	l2249
  3739   001D0A                     u880:
  3740   001D0A  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3741   001D0C  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3742   001D0E  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3743   001D10  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3744   001D12  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3745   001D14  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3746   001D16  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3747   001D18  6C13               	negf	___aodiv@quotient^0,c
  3748   001D1A  0E00               	movlw	0
  3749   001D1C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3750   001D1E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3751   001D20  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3752   001D22  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3753   001D24  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3754   001D26  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3755   001D28  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3756   001D2A                     l2249:
  3757   001D2A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3758   001D2E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3759   001D32  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3760   001D36  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3761   001D3A  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3762   001D3E  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3763   001D42  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3764   001D46  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3765   001D4A  0012               	return		;funcret
  3766   001D4C                     __end_of___aodiv:
  3767                           	callstack 0
  3768                           
  3769 ;; *************** function _sendStringSerial4 *****************
  3770 ;; Defined at:
  3771 ;;		line 39 in file "serial.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  string          2    1[COMRAM] PTR unsigned char 
  3774 ;;		 -> main@buf(150), 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;Total ram usage:        2 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 1
  3793 ;; This function calls:
  3794 ;;		_sendCharSerial4
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;;		_clear_read_calibration
  3798 ;;		_card_response
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text18
  3803   002CFA                     __ptext18:
  3804                           	callstack 0
  3805   002CFA                     _sendStringSerial4:
  3806                           	callstack 29
  3807   002CFA                     
  3808                           ;serial.c: 40:  while(*string != 0) {
  3809   002CFA  EF88  F016         	goto	l2691
  3810   002CFE                     l2687:
  3811                           
  3812                           ;serial.c: 41:         sendCharSerial4(*string++);
  3813   002CFE  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3814   002D02  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3815   002D06  50DF               	movf	indf2,w,c
  3816   002D08  EC12  F017         	call	_sendCharSerial4
  3817   002D0C  4A02               	infsnz	sendStringSerial4@string^0,f,c
  3818   002D0E  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  3819   002D10                     l2691:
  3820                           
  3821                           ;serial.c: 40:  while(*string != 0) {
  3822   002D10  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  3823   002D14  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3824   002D18  50DF               	movf	indf2,w,c
  3825   002D1A  A4D8               	btfss	status,2,c
  3826   002D1C  EF92  F016         	goto	u1311
  3827   002D20  EF94  F016         	goto	u1310
  3828   002D24                     u1311:
  3829   002D24  EF7F  F016         	goto	l2687
  3830   002D28                     u1310:
  3831   002D28  0012               	return		;funcret
  3832   002D2A                     __end_of_sendStringSerial4:
  3833                           	callstack 0
  3834                           
  3835 ;; *************** function _sendCharSerial4 *****************
  3836 ;; Defined at:
  3837 ;;		line 32 in file "serial.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  charToSend      1    wreg     unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  charToSend      1    0[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3855 ;;Total ram usage:        1 bytes
  3856 ;; Hardware stack levels used: 1
  3857 ;; This function calls:
  3858 ;;		Nothing
  3859 ;; This function is called by:
  3860 ;;		_sendStringSerial4
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text19
  3865   002E24                     __ptext19:
  3866                           	callstack 0
  3867   002E24                     _sendCharSerial4:
  3868                           	callstack 29
  3869                           
  3870                           ;incstack = 0
  3871                           ;sendCharSerial4@charToSend stored from wreg
  3872   002E24  6E01               	movwf	sendCharSerial4@charToSend^0,c
  3873   002E26                     l405:
  3874   002E26  010E               	movlb	14	; () banked
  3875   002E28  A537               	btfss	55,2,b	;volatile
  3876   002E2A  EF19  F017         	goto	u1241
  3877   002E2E  EF1B  F017         	goto	u1240
  3878   002E32                     u1241:
  3879   002E32  EF13  F017         	goto	l405
  3880   002E36                     u1240:
  3881   002E36                     
  3882                           ; BSR set to: 14
  3883                           ;serial.c: 34:     TX4REG = charToSend;
  3884   002E36  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3885   002E3A                     
  3886                           ; BSR set to: 14
  3887   002E3A  0012               	return		;funcret
  3888   002E3C                     __end_of_sendCharSerial4:
  3889                           	callstack 0
  3890                           
  3891 ;; *************** function _normalise_readings *****************
  3892 ;; Defined at:
  3893 ;;		line 85 in file "colour_identify.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3896 ;;		 -> main@buf(150), 
  3897 ;;  clear_read      2   24[COMRAM] unsigned int 
  3898 ;;  red_read        2   26[COMRAM] unsigned int 
  3899 ;;  green_read      2   28[COMRAM] unsigned int 
  3900 ;;  blue_read       2   30[COMRAM] unsigned int 
  3901 ;;  expected_val    2   32[COMRAM] PTR unsigned int [9]
  3902 ;;		 -> main@expected_values(72), 
  3903 ;;  normalised_v    2   34[COMRAM] PTR unsigned int [9]
  3904 ;;		 -> card_response@normalised_values(72), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  difference      2   44[COMRAM] unsigned int 
  3907 ;;  i               1   46[COMRAM] enum E14551
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3917 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3918 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3919 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3920 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3921 ;;Total ram usage:       25 bytes
  3922 ;; Hardware stack levels used: 1
  3923 ;; Hardware stack levels required when called: 1
  3924 ;; This function calls:
  3925 ;;		___lwdiv
  3926 ;;		___wmul
  3927 ;;		_abs
  3928 ;; This function is called by:
  3929 ;;		_card_response
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text20
  3934   001190                     __ptext20:
  3935                           	callstack 0
  3936   001190                     _normalise_readings:
  3937                           	callstack 28
  3938   001190                     
  3939                           ;colour_identify.c: 92:     for(colour i = RED; i<= BLACK; i++){
  3940   001190  0E01               	movlw	1
  3941   001192  6E2F               	movwf	normalise_readings@i^0,c
  3942   001194                     l2699:
  3943                           
  3944                           ;colour_identify.c: 96:         unsigned int difference = abs(clear_read - expected_valu
      +                          es[CLEAR][i]);
  3945   001194  502F               	movf	normalise_readings@i^0,w,c
  3946   001196  0D02               	mullw	2
  3947   001198  CFF3 F025          	movff	prodl,??_normalise_readings
  3948   00119C  CFF4 F026          	movff	prodh,??_normalise_readings+1
  3949   0011A0  5025               	movf	??_normalise_readings^0,w,c
  3950   0011A2  2421               	addwf	normalise_readings@expected_values^0,w,c
  3951   0011A4  6ED9               	movwf	fsr2l,c
  3952   0011A6  5026               	movf	(??_normalise_readings+1)^0,w,c
  3953   0011A8  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3954   0011AA  6EDA               	movwf	fsr2h,c
  3955   0011AC  CFDE F027          	movff	postinc2,??_normalise_readings+2
  3956   0011B0  CFDD F028          	movff	postdec2,??_normalise_readings+3
  3957   0011B4  5027               	movf	(??_normalise_readings+2)^0,w,c
  3958   0011B6  5C19               	subwf	normalise_readings@clear_read^0,w,c
  3959   0011B8  6E13               	movwf	abs@a^0,c
  3960   0011BA  5028               	movf	(??_normalise_readings+3)^0,w,c
  3961   0011BC  581A               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3962   0011BE  6E14               	movwf	(abs@a+1)^0,c
  3963   0011C0  EC43  F016         	call	_abs	;wreg free
  3964   0011C4  C013  F02D         	movff	?_abs,normalise_readings@difference
  3965   0011C8  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  3966                           
  3967                           ;colour_identify.c: 97:         normalised_values[CLEAR][i] = (difference*100) / expecte
      +                          d_values[CLEAR][i];
  3968   0011CC  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  3969   0011D0  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3970   0011D4  0E00               	movlw	0
  3971   0011D6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3972   0011D8  0E64               	movlw	100
  3973   0011DA  6E03               	movwf	___wmul@multiplicand^0,c
  3974   0011DC  ECBE  F016         	call	___wmul	;wreg free
  3975   0011E0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3976   0011E4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3977   0011E8  502F               	movf	normalise_readings@i^0,w,c
  3978   0011EA  0D02               	mullw	2
  3979   0011EC  CFF3 F025          	movff	prodl,??_normalise_readings
  3980   0011F0  CFF4 F026          	movff	prodh,??_normalise_readings+1
  3981   0011F4  5025               	movf	??_normalise_readings^0,w,c
  3982   0011F6  2421               	addwf	normalise_readings@expected_values^0,w,c
  3983   0011F8  6ED9               	movwf	fsr2l,c
  3984   0011FA  5026               	movf	(??_normalise_readings+1)^0,w,c
  3985   0011FC  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3986   0011FE  6EDA               	movwf	fsr2h,c
  3987   001200  CFDE F009          	movff	postinc2,___lwdiv@divisor
  3988   001204  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  3989   001208  ECD4  F014         	call	___lwdiv	;wreg free
  3990   00120C  502F               	movf	normalise_readings@i^0,w,c
  3991   00120E  0D02               	mullw	2
  3992   001210  CFF3 F027          	movff	prodl,??_normalise_readings+2
  3993   001214  CFF4 F028          	movff	prodh,??_normalise_readings+3
  3994   001218  5027               	movf	(??_normalise_readings+2)^0,w,c
  3995   00121A  2423               	addwf	normalise_readings@normalised_values^0,w,c
  3996   00121C  6ED9               	movwf	fsr2l,c
  3997   00121E  5028               	movf	(??_normalise_readings+3)^0,w,c
  3998   001220  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3999   001222  6EDA               	movwf	fsr2h,c
  4000   001224  C007  FFDE         	movff	?___lwdiv,postinc2
  4001   001228  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4002                           
  4003                           ;colour_identify.c: 100:         difference = abs(red_read - expected_values[RED][i]);
  4004   00122C  502F               	movf	normalise_readings@i^0,w,c
  4005   00122E  0D02               	mullw	2
  4006   001230  CFF3 F025          	movff	prodl,??_normalise_readings
  4007   001234  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4008   001238  5025               	movf	??_normalise_readings^0,w,c
  4009   00123A  2421               	addwf	normalise_readings@expected_values^0,w,c
  4010   00123C  6E27               	movwf	(??_normalise_readings+2)^0,c
  4011   00123E  5026               	movf	(??_normalise_readings+1)^0,w,c
  4012   001240  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4013   001242  6E28               	movwf	(??_normalise_readings+3)^0,c
  4014   001244  0E12               	movlw	18
  4015   001246  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4016   001248  6ED9               	movwf	fsr2l,c
  4017   00124A  0E00               	movlw	0
  4018   00124C  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4019   00124E  6EDA               	movwf	fsr2h,c
  4020   001250  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4021   001254  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4022   001258  5029               	movf	(??_normalise_readings+4)^0,w,c
  4023   00125A  5C1B               	subwf	normalise_readings@red_read^0,w,c
  4024   00125C  6E13               	movwf	abs@a^0,c
  4025   00125E  502A               	movf	(??_normalise_readings+5)^0,w,c
  4026   001260  581C               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4027   001262  6E14               	movwf	(abs@a+1)^0,c
  4028   001264  EC43  F016         	call	_abs	;wreg free
  4029   001268  C013  F02D         	movff	?_abs,normalise_readings@difference
  4030   00126C  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4031                           
  4032                           ;colour_identify.c: 101:         normalised_values[RED][i] = (difference*100) / expected
      +                          _values[RED][i];
  4033   001270  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4034   001274  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4035   001278  0E00               	movlw	0
  4036   00127A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4037   00127C  0E64               	movlw	100
  4038   00127E  6E03               	movwf	___wmul@multiplicand^0,c
  4039   001280  ECBE  F016         	call	___wmul	;wreg free
  4040   001284  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4041   001288  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4042   00128C  502F               	movf	normalise_readings@i^0,w,c
  4043   00128E  0D02               	mullw	2
  4044   001290  CFF3 F025          	movff	prodl,??_normalise_readings
  4045   001294  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4046   001298  5025               	movf	??_normalise_readings^0,w,c
  4047   00129A  2421               	addwf	normalise_readings@expected_values^0,w,c
  4048   00129C  6E27               	movwf	(??_normalise_readings+2)^0,c
  4049   00129E  5026               	movf	(??_normalise_readings+1)^0,w,c
  4050   0012A0  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4051   0012A2  6E28               	movwf	(??_normalise_readings+3)^0,c
  4052   0012A4  0E12               	movlw	18
  4053   0012A6  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4054   0012A8  6ED9               	movwf	fsr2l,c
  4055   0012AA  0E00               	movlw	0
  4056   0012AC  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4057   0012AE  6EDA               	movwf	fsr2h,c
  4058   0012B0  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4059   0012B4  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4060   0012B8  ECD4  F014         	call	___lwdiv	;wreg free
  4061   0012BC  502F               	movf	normalise_readings@i^0,w,c
  4062   0012BE  0D02               	mullw	2
  4063   0012C0  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4064   0012C4  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4065   0012C8  5029               	movf	(??_normalise_readings+4)^0,w,c
  4066   0012CA  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4067   0012CC  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4068   0012CE  502A               	movf	(??_normalise_readings+5)^0,w,c
  4069   0012D0  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4070   0012D2  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4071   0012D4  0E12               	movlw	18
  4072   0012D6  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4073   0012D8  6ED9               	movwf	fsr2l,c
  4074   0012DA  0E00               	movlw	0
  4075   0012DC  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4076   0012DE  6EDA               	movwf	fsr2h,c
  4077   0012E0  C007  FFDE         	movff	?___lwdiv,postinc2
  4078   0012E4  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4079                           
  4080                           ;colour_identify.c: 104:         difference = abs(green_read - expected_values[GREEN][i]
      +                          );
  4081   0012E8  502F               	movf	normalise_readings@i^0,w,c
  4082   0012EA  0D02               	mullw	2
  4083   0012EC  CFF3 F025          	movff	prodl,??_normalise_readings
  4084   0012F0  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4085   0012F4  5025               	movf	??_normalise_readings^0,w,c
  4086   0012F6  2421               	addwf	normalise_readings@expected_values^0,w,c
  4087   0012F8  6E27               	movwf	(??_normalise_readings+2)^0,c
  4088   0012FA  5026               	movf	(??_normalise_readings+1)^0,w,c
  4089   0012FC  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4090   0012FE  6E28               	movwf	(??_normalise_readings+3)^0,c
  4091   001300  0E24               	movlw	36
  4092   001302  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4093   001304  6ED9               	movwf	fsr2l,c
  4094   001306  0E00               	movlw	0
  4095   001308  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4096   00130A  6EDA               	movwf	fsr2h,c
  4097   00130C  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4098   001310  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4099   001314  5029               	movf	(??_normalise_readings+4)^0,w,c
  4100   001316  5C1D               	subwf	normalise_readings@green_read^0,w,c
  4101   001318  6E13               	movwf	abs@a^0,c
  4102   00131A  502A               	movf	(??_normalise_readings+5)^0,w,c
  4103   00131C  581E               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4104   00131E  6E14               	movwf	(abs@a+1)^0,c
  4105   001320  EC43  F016         	call	_abs	;wreg free
  4106   001324  C013  F02D         	movff	?_abs,normalise_readings@difference
  4107   001328  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4108                           
  4109                           ;colour_identify.c: 105:         normalised_values[GREEN][i] = (difference*100) / expect
      +                          ed_values[GREEN][i];
  4110   00132C  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4111   001330  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4112   001334  0E00               	movlw	0
  4113   001336  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4114   001338  0E64               	movlw	100
  4115   00133A  6E03               	movwf	___wmul@multiplicand^0,c
  4116   00133C  ECBE  F016         	call	___wmul	;wreg free
  4117   001340  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4118   001344  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4119   001348  502F               	movf	normalise_readings@i^0,w,c
  4120   00134A  0D02               	mullw	2
  4121   00134C  CFF3 F025          	movff	prodl,??_normalise_readings
  4122   001350  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4123   001354  5025               	movf	??_normalise_readings^0,w,c
  4124   001356  2421               	addwf	normalise_readings@expected_values^0,w,c
  4125   001358  6E27               	movwf	(??_normalise_readings+2)^0,c
  4126   00135A  5026               	movf	(??_normalise_readings+1)^0,w,c
  4127   00135C  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4128   00135E  6E28               	movwf	(??_normalise_readings+3)^0,c
  4129   001360  0E24               	movlw	36
  4130   001362  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4131   001364  6ED9               	movwf	fsr2l,c
  4132   001366  0E00               	movlw	0
  4133   001368  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4134   00136A  6EDA               	movwf	fsr2h,c
  4135   00136C  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4136   001370  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4137   001374  ECD4  F014         	call	___lwdiv	;wreg free
  4138   001378  502F               	movf	normalise_readings@i^0,w,c
  4139   00137A  0D02               	mullw	2
  4140   00137C  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4141   001380  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4142   001384  5029               	movf	(??_normalise_readings+4)^0,w,c
  4143   001386  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4144   001388  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4145   00138A  502A               	movf	(??_normalise_readings+5)^0,w,c
  4146   00138C  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4147   00138E  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4148   001390  0E24               	movlw	36
  4149   001392  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4150   001394  6ED9               	movwf	fsr2l,c
  4151   001396  0E00               	movlw	0
  4152   001398  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4153   00139A  6EDA               	movwf	fsr2h,c
  4154   00139C  C007  FFDE         	movff	?___lwdiv,postinc2
  4155   0013A0  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4156                           
  4157                           ;colour_identify.c: 108:         difference = abs(blue_read - expected_values[BLUE][i]);
  4158   0013A4  502F               	movf	normalise_readings@i^0,w,c
  4159   0013A6  0D02               	mullw	2
  4160   0013A8  CFF3 F025          	movff	prodl,??_normalise_readings
  4161   0013AC  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4162   0013B0  5025               	movf	??_normalise_readings^0,w,c
  4163   0013B2  2421               	addwf	normalise_readings@expected_values^0,w,c
  4164   0013B4  6E27               	movwf	(??_normalise_readings+2)^0,c
  4165   0013B6  5026               	movf	(??_normalise_readings+1)^0,w,c
  4166   0013B8  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4167   0013BA  6E28               	movwf	(??_normalise_readings+3)^0,c
  4168   0013BC  0E36               	movlw	54
  4169   0013BE  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4170   0013C0  6ED9               	movwf	fsr2l,c
  4171   0013C2  0E00               	movlw	0
  4172   0013C4  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4173   0013C6  6EDA               	movwf	fsr2h,c
  4174   0013C8  CFDE F029          	movff	postinc2,??_normalise_readings+4
  4175   0013CC  CFDD F02A          	movff	postdec2,??_normalise_readings+5
  4176   0013D0  5029               	movf	(??_normalise_readings+4)^0,w,c
  4177   0013D2  5C1F               	subwf	normalise_readings@blue_read^0,w,c
  4178   0013D4  6E13               	movwf	abs@a^0,c
  4179   0013D6  502A               	movf	(??_normalise_readings+5)^0,w,c
  4180   0013D8  5820               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4181   0013DA  6E14               	movwf	(abs@a+1)^0,c
  4182   0013DC  EC43  F016         	call	_abs	;wreg free
  4183   0013E0  C013  F02D         	movff	?_abs,normalise_readings@difference
  4184   0013E4  C014  F02E         	movff	?_abs+1,normalise_readings@difference+1
  4185                           
  4186                           ;colour_identify.c: 109:         normalised_values[BLUE][i] = (difference*100) / expecte
      +                          d_values[BLUE][i];
  4187   0013E8  C02D  F001         	movff	normalise_readings@difference,___wmul@multiplier
  4188   0013EC  C02E  F002         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4189   0013F0  0E00               	movlw	0
  4190   0013F2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4191   0013F4  0E64               	movlw	100
  4192   0013F6  6E03               	movwf	___wmul@multiplicand^0,c
  4193   0013F8  ECBE  F016         	call	___wmul	;wreg free
  4194   0013FC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4195   001400  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4196   001404  502F               	movf	normalise_readings@i^0,w,c
  4197   001406  0D02               	mullw	2
  4198   001408  CFF3 F025          	movff	prodl,??_normalise_readings
  4199   00140C  CFF4 F026          	movff	prodh,??_normalise_readings+1
  4200   001410  5025               	movf	??_normalise_readings^0,w,c
  4201   001412  2421               	addwf	normalise_readings@expected_values^0,w,c
  4202   001414  6E27               	movwf	(??_normalise_readings+2)^0,c
  4203   001416  5026               	movf	(??_normalise_readings+1)^0,w,c
  4204   001418  2022               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4205   00141A  6E28               	movwf	(??_normalise_readings+3)^0,c
  4206   00141C  0E36               	movlw	54
  4207   00141E  2427               	addwf	(??_normalise_readings+2)^0,w,c
  4208   001420  6ED9               	movwf	fsr2l,c
  4209   001422  0E00               	movlw	0
  4210   001424  2028               	addwfc	(??_normalise_readings+3)^0,w,c
  4211   001426  6EDA               	movwf	fsr2h,c
  4212   001428  CFDE F009          	movff	postinc2,___lwdiv@divisor
  4213   00142C  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  4214   001430  ECD4  F014         	call	___lwdiv	;wreg free
  4215   001434  502F               	movf	normalise_readings@i^0,w,c
  4216   001436  0D02               	mullw	2
  4217   001438  CFF3 F029          	movff	prodl,??_normalise_readings+4
  4218   00143C  CFF4 F02A          	movff	prodh,??_normalise_readings+5
  4219   001440  5029               	movf	(??_normalise_readings+4)^0,w,c
  4220   001442  2423               	addwf	normalise_readings@normalised_values^0,w,c
  4221   001444  6E2B               	movwf	(??_normalise_readings+6)^0,c
  4222   001446  502A               	movf	(??_normalise_readings+5)^0,w,c
  4223   001448  2024               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4224   00144A  6E2C               	movwf	(??_normalise_readings+7)^0,c
  4225   00144C  0E36               	movlw	54
  4226   00144E  242B               	addwf	(??_normalise_readings+6)^0,w,c
  4227   001450  6ED9               	movwf	fsr2l,c
  4228   001452  0E00               	movlw	0
  4229   001454  202C               	addwfc	(??_normalise_readings+7)^0,w,c
  4230   001456  6EDA               	movwf	fsr2h,c
  4231   001458  C007  FFDE         	movff	?___lwdiv,postinc2
  4232   00145C  C008  FFDD         	movff	?___lwdiv+1,postdec2
  4233   001460                     
  4234                           ;colour_identify.c: 110:     }
  4235   001460  2A2F               	incf	normalise_readings@i^0,f,c
  4236   001462  0E09               	movlw	9
  4237   001464  642F               	cpfsgt	normalise_readings@i^0,c
  4238   001466  EF37  F00A         	goto	u1321
  4239   00146A  EF39  F00A         	goto	u1320
  4240   00146E                     u1321:
  4241   00146E  EFCA  F008         	goto	l2699
  4242   001472                     u1320:
  4243   001472  0012               	return		;funcret
  4244   001474                     __end_of_normalise_readings:
  4245                           	callstack 0
  4246                           
  4247 ;; *************** function _abs *****************
  4248 ;; Defined at:
  4249 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  a               2   18[COMRAM] int 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;		None
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2   18[COMRAM] int 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4266 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4267 ;;Total ram usage:        4 bytes
  4268 ;; Hardware stack levels used: 1
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_normalise_readings
  4273 ;;		_dtoa
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text21
  4278   002C86                     __ptext21:
  4279                           	callstack 0
  4280   002C86                     _abs:
  4281                           	callstack 26
  4282   002C86  BE14               	btfsc	(abs@a+1)^0,7,c
  4283   002C88  EF50  F016         	goto	u810
  4284   002C8C  5014               	movf	(abs@a+1)^0,w,c
  4285   002C8E  E106               	bnz	u811
  4286   002C90  0413               	decf	abs@a^0,w,c
  4287   002C92  B0D8               	btfsc	status,0,c
  4288   002C94  EF4E  F016         	goto	u811
  4289   002C98  EF50  F016         	goto	u810
  4290   002C9C                     u811:
  4291   002C9C  EF5E  F016         	goto	l1124
  4292   002CA0                     u810:
  4293   002CA0  C013  F015         	movff	abs@a,??_abs
  4294   002CA4  C014  F016         	movff	abs@a+1,??_abs+1
  4295   002CA8  1E15               	comf	??_abs^0,f,c
  4296   002CAA  1E16               	comf	(??_abs+1)^0,f,c
  4297   002CAC  4A15               	infsnz	??_abs^0,f,c
  4298   002CAE  2A16               	incf	(??_abs+1)^0,f,c
  4299   002CB0  C015  F013         	movff	??_abs,?_abs
  4300   002CB4  C016  F014         	movff	??_abs+1,?_abs+1
  4301   002CB8  EF62  F016         	goto	l1127
  4302   002CBC                     l1124:
  4303   002CBC  C013  F013         	movff	abs@a,?_abs
  4304   002CC0  C014  F014         	movff	abs@a+1,?_abs+1
  4305   002CC4                     l1127:
  4306   002CC4  0012               	return		;funcret
  4307   002CC6                     __end_of_abs:
  4308                           	callstack 0
  4309                           
  4310 ;; *************** function _motor_response *****************
  4311 ;; Defined at:
  4312 ;;		line 139 in file "colour_identify.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  card            1    wreg     enum E14551
  4315 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4316 ;;		 -> main@motorL(9), 
  4317 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4318 ;;		 -> main@motorR(9), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  card            1   33[COMRAM] enum E14551
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4334 ;;Total ram usage:        7 bytes
  4335 ;; Hardware stack levels used: 1
  4336 ;; Hardware stack levels required when called: 3
  4337 ;; This function calls:
  4338 ;;		_reverseFullSpeed
  4339 ;;		_stop
  4340 ;;		_turnLeft45
  4341 ;;		_turnRight45
  4342 ;; This function is called by:
  4343 ;;		_card_response
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text22
  4348   000E7A                     __ptext22:
  4349                           	callstack 0
  4350   000E7A                     _motor_response:
  4351                           	callstack 26
  4352                           
  4353                           ;incstack = 0
  4354                           ;motor_response@card stored from wreg
  4355   000E7A  6E22               	movwf	motor_response@card^0,c
  4356   000E7C                     
  4357                           ;colour_identify.c: 141:     switch (card){
  4358   000E7C  EF96  F008         	goto	l2853
  4359   000E80                     l2743:
  4360                           
  4361                           ;colour_identify.c: 143:             reverseFullSpeed(mL,mR);
  4362   000E80  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4363   000E84  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4364   000E88  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4365   000E8C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4366   000E90  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4367   000E94                     
  4368                           ;colour_identify.c: 144:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4369   000E94  0E05               	movlw	5
  4370   000E96  6E21               	movwf	(??_motor_response+1)^0,c
  4371   000E98  0E0F               	movlw	15
  4372   000E9A  6E20               	movwf	??_motor_response^0,c
  4373   000E9C  0EF1               	movlw	241
  4374   000E9E                     u1537:
  4375   000E9E  2EE8               	decfsz	wreg,f,c
  4376   000EA0  D7FE               	bra	u1537
  4377   000EA2  2E20               	decfsz	??_motor_response^0,f,c
  4378   000EA4  D7FC               	bra	u1537
  4379   000EA6  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4380   000EA8  D7FA               	bra	u1537
  4381   000EAA  F000               	nop	
  4382   000EAC                     l2747:
  4383                           
  4384                           ;colour_identify.c: 145:             turnRight45(mL,mR);
  4385   000EAC  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4386   000EB0  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4387   000EB4  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4388   000EB8  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4389   000EBC  EC32  F013         	call	_turnRight45	;wreg free
  4390   000EC0                     
  4391                           ;colour_identify.c: 146:             stop(mL,mR);
  4392   000EC0  C01C  F014         	movff	motor_response@mL,stop@mL
  4393   000EC4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4394   000EC8  C01E  F016         	movff	motor_response@mR,stop@mR
  4395   000ECC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4396   000ED0  EC12  F014         	call	_stop	;wreg free
  4397   000ED4                     
  4398                           ;colour_identify.c: 147:             turnRight45(mL,mR);
  4399   000ED4  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4400   000ED8  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4401   000EDC  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4402   000EE0  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4403   000EE4  EC32  F013         	call	_turnRight45	;wreg free
  4404   000EE8                     l2753:
  4405                           
  4406                           ;colour_identify.c: 148:             stop(mL,mR);
  4407   000EE8  C01C  F014         	movff	motor_response@mL,stop@mL
  4408   000EEC  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4409   000EF0  C01E  F016         	movff	motor_response@mR,stop@mR
  4410   000EF4  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4411   000EF8  EC12  F014         	call	_stop	;wreg free
  4412                           
  4413                           ;colour_identify.c: 149:             break;
  4414   000EFC  EFC7  F008         	goto	l354
  4415   000F00                     l2755:
  4416                           
  4417                           ;colour_identify.c: 151:             reverseFullSpeed(mL,mR);
  4418   000F00  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4419   000F04  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4420   000F08  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4421   000F0C  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4422   000F10  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4423   000F14                     
  4424                           ;colour_identify.c: 152:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4425   000F14  0E05               	movlw	5
  4426   000F16  6E21               	movwf	(??_motor_response+1)^0,c
  4427   000F18  0E0F               	movlw	15
  4428   000F1A  6E20               	movwf	??_motor_response^0,c
  4429   000F1C  0EF1               	movlw	241
  4430   000F1E                     u1547:
  4431   000F1E  2EE8               	decfsz	wreg,f,c
  4432   000F20  D7FE               	bra	u1547
  4433   000F22  2E20               	decfsz	??_motor_response^0,f,c
  4434   000F24  D7FC               	bra	u1547
  4435   000F26  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4436   000F28  D7FA               	bra	u1547
  4437   000F2A  F000               	nop	
  4438   000F2C                     l2759:
  4439                           
  4440                           ;colour_identify.c: 153:             turnLeft45(mL,mR);
  4441   000F2C  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4442   000F30  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4443   000F34  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4444   000F38  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4445   000F3C  ECDB  F012         	call	_turnLeft45	;wreg free
  4446   000F40                     
  4447                           ;colour_identify.c: 154:             stop(mL,mR);
  4448   000F40  C01C  F014         	movff	motor_response@mL,stop@mL
  4449   000F44  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4450   000F48  C01E  F016         	movff	motor_response@mR,stop@mR
  4451   000F4C  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4452   000F50  EC12  F014         	call	_stop	;wreg free
  4453   000F54                     
  4454                           ;colour_identify.c: 155:             turnLeft45(mL,mR);
  4455   000F54  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4456   000F58  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4457   000F5C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4458   000F60  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4459   000F64  ECDB  F012         	call	_turnLeft45	;wreg free
  4460   000F68  EF74  F007         	goto	l2753
  4461   000F6C                     l2767:
  4462                           
  4463                           ;colour_identify.c: 159:             reverseFullSpeed(mL,mR);
  4464   000F6C  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4465   000F70  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4466   000F74  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4467   000F78  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4468   000F7C  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4469   000F80                     
  4470                           ;colour_identify.c: 160:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4471   000F80  0E05               	movlw	5
  4472   000F82  6E21               	movwf	(??_motor_response+1)^0,c
  4473   000F84  0E0F               	movlw	15
  4474   000F86  6E20               	movwf	??_motor_response^0,c
  4475   000F88  0EF1               	movlw	241
  4476   000F8A                     u1557:
  4477   000F8A  2EE8               	decfsz	wreg,f,c
  4478   000F8C  D7FE               	bra	u1557
  4479   000F8E  2E20               	decfsz	??_motor_response^0,f,c
  4480   000F90  D7FC               	bra	u1557
  4481   000F92  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4482   000F94  D7FA               	bra	u1557
  4483   000F96  F000               	nop	
  4484   000F98                     
  4485                           ;colour_identify.c: 161:             turnRight45(mL,mR);
  4486   000F98  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4487   000F9C  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4488   000FA0  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4489   000FA4  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4490   000FA8  EC32  F013         	call	_turnRight45	;wreg free
  4491   000FAC                     
  4492                           ;colour_identify.c: 162:             stop(mL,mR);
  4493   000FAC  C01C  F014         	movff	motor_response@mL,stop@mL
  4494   000FB0  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4495   000FB4  C01E  F016         	movff	motor_response@mR,stop@mR
  4496   000FB8  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4497   000FBC  EC12  F014         	call	_stop	;wreg free
  4498   000FC0                     l2775:
  4499                           
  4500                           ;colour_identify.c: 163:             turnRight45(mL,mR);
  4501   000FC0  C01C  F014         	movff	motor_response@mL,turnRight45@mL
  4502   000FC4  C01D  F015         	movff	motor_response@mL+1,turnRight45@mL+1
  4503   000FC8  C01E  F016         	movff	motor_response@mR,turnRight45@mR
  4504   000FCC  C01F  F017         	movff	motor_response@mR+1,turnRight45@mR+1
  4505   000FD0  EC32  F013         	call	_turnRight45	;wreg free
  4506   000FD4                     l2777:
  4507                           
  4508                           ;colour_identify.c: 164:             stop(mL,mR);
  4509   000FD4  C01C  F014         	movff	motor_response@mL,stop@mL
  4510   000FD8  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4511   000FDC  C01E  F016         	movff	motor_response@mR,stop@mR
  4512   000FE0  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4513   000FE4  EC12  F014         	call	_stop	;wreg free
  4514   000FE8  EF56  F007         	goto	l2747
  4515   000FEC                     l2787:
  4516                           
  4517                           ;colour_identify.c: 171:             reverseFullSpeed(mL,mR);
  4518   000FEC  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4519   000FF0  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4520   000FF4  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4521   000FF8  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4522   000FFC  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4523   001000                     
  4524                           ;colour_identify.c: 172:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4525   001000  0E05               	movlw	5
  4526   001002  6E21               	movwf	(??_motor_response+1)^0,c
  4527   001004  0E0F               	movlw	15
  4528   001006  6E20               	movwf	??_motor_response^0,c
  4529   001008  0EF1               	movlw	241
  4530   00100A                     u1567:
  4531   00100A  2EE8               	decfsz	wreg,f,c
  4532   00100C  D7FE               	bra	u1567
  4533   00100E  2E20               	decfsz	??_motor_response^0,f,c
  4534   001010  D7FC               	bra	u1567
  4535   001012  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4536   001014  D7FA               	bra	u1567
  4537   001016  F000               	nop	
  4538   001018                     
  4539                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  4540   001018  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4541   00101C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4542   001020  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4543   001024  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4544   001028  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4545                           
  4546                           ;colour_identify.c: 174:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4547   00102C  0E29               	movlw	41
  4548   00102E  6E21               	movwf	(??_motor_response+1)^0,c
  4549   001030  0E96               	movlw	150
  4550   001032  6E20               	movwf	??_motor_response^0,c
  4551   001034  0E7F               	movlw	127
  4552   001036                     u1577:
  4553   001036  2EE8               	decfsz	wreg,f,c
  4554   001038  D7FE               	bra	u1577
  4555   00103A  2E20               	decfsz	??_motor_response^0,f,c
  4556   00103C  D7FC               	bra	u1577
  4557   00103E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4558   001040  D7FA               	bra	u1577
  4559   001042  F000               	nop	
  4560   001044  EFEA  F007         	goto	l2777
  4561   001048                     l2803:
  4562                           
  4563                           ;colour_identify.c: 182:             reverseFullSpeed(mL,mR);
  4564   001048  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4565   00104C  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4566   001050  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4567   001054  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4568   001058  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4569   00105C                     
  4570                           ;colour_identify.c: 183:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4571   00105C  0E05               	movlw	5
  4572   00105E  6E21               	movwf	(??_motor_response+1)^0,c
  4573   001060  0E0F               	movlw	15
  4574   001062  6E20               	movwf	??_motor_response^0,c
  4575   001064  0EF1               	movlw	241
  4576   001066                     u1587:
  4577   001066  2EE8               	decfsz	wreg,f,c
  4578   001068  D7FE               	bra	u1587
  4579   00106A  2E20               	decfsz	??_motor_response^0,f,c
  4580   00106C  D7FC               	bra	u1587
  4581   00106E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4582   001070  D7FA               	bra	u1587
  4583   001072  F000               	nop	
  4584   001074                     
  4585                           ;colour_identify.c: 184:             reverseFullSpeed(mL,mR);
  4586   001074  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4587   001078  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4588   00107C  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4589   001080  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4590   001084  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4591                           
  4592                           ;colour_identify.c: 185:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4593   001088  0E29               	movlw	41
  4594   00108A  6E21               	movwf	(??_motor_response+1)^0,c
  4595   00108C  0E96               	movlw	150
  4596   00108E  6E20               	movwf	??_motor_response^0,c
  4597   001090  0E7F               	movlw	127
  4598   001092                     u1597:
  4599   001092  2EE8               	decfsz	wreg,f,c
  4600   001094  D7FE               	bra	u1597
  4601   001096  2E20               	decfsz	??_motor_response^0,f,c
  4602   001098  D7FC               	bra	u1597
  4603   00109A  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4604   00109C  D7FA               	bra	u1597
  4605   00109E  F000               	nop	
  4606   0010A0                     l2809:
  4607                           
  4608                           ;colour_identify.c: 186:             stop(mL,mR);
  4609   0010A0  C01C  F014         	movff	motor_response@mL,stop@mL
  4610   0010A4  C01D  F015         	movff	motor_response@mL+1,stop@mL+1
  4611   0010A8  C01E  F016         	movff	motor_response@mR,stop@mR
  4612   0010AC  C01F  F017         	movff	motor_response@mR+1,stop@mR+1
  4613   0010B0  EC12  F014         	call	_stop	;wreg free
  4614   0010B4  EF96  F007         	goto	l2759
  4615   0010B8                     l2819:
  4616                           
  4617                           ;colour_identify.c: 193:             reverseFullSpeed(mL,mR);
  4618   0010B8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4619   0010BC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4620   0010C0  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4621   0010C4  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4622   0010C8  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4623   0010CC                     
  4624                           ;colour_identify.c: 194:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4625   0010CC  0E05               	movlw	5
  4626   0010CE  6E21               	movwf	(??_motor_response+1)^0,c
  4627   0010D0  0E0F               	movlw	15
  4628   0010D2  6E20               	movwf	??_motor_response^0,c
  4629   0010D4  0EF1               	movlw	241
  4630   0010D6                     u1607:
  4631   0010D6  2EE8               	decfsz	wreg,f,c
  4632   0010D8  D7FE               	bra	u1607
  4633   0010DA  2E20               	decfsz	??_motor_response^0,f,c
  4634   0010DC  D7FC               	bra	u1607
  4635   0010DE  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4636   0010E0  D7FA               	bra	u1607
  4637   0010E2  F000               	nop	
  4638   0010E4  EFE0  F007         	goto	l2775
  4639   0010E8                     l2835:
  4640                           
  4641                           ;colour_identify.c: 203:             reverseFullSpeed(mL,mR);
  4642   0010E8  C01C  F014         	movff	motor_response@mL,reverseFullSpeed@mL
  4643   0010EC  C01D  F015         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4644   0010F0  C01E  F016         	movff	motor_response@mR,reverseFullSpeed@mR
  4645   0010F4  C01F  F017         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4646   0010F8  EC88  F013         	call	_reverseFullSpeed	;wreg free
  4647   0010FC                     
  4648                           ;colour_identify.c: 204:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4649   0010FC  0E05               	movlw	5
  4650   0010FE  6E21               	movwf	(??_motor_response+1)^0,c
  4651   001100  0E0F               	movlw	15
  4652   001102  6E20               	movwf	??_motor_response^0,c
  4653   001104  0EF1               	movlw	241
  4654   001106                     u1617:
  4655   001106  2EE8               	decfsz	wreg,f,c
  4656   001108  D7FE               	bra	u1617
  4657   00110A  2E20               	decfsz	??_motor_response^0,f,c
  4658   00110C  D7FC               	bra	u1617
  4659   00110E  2E21               	decfsz	(??_motor_response+1)^0,f,c
  4660   001110  D7FA               	bra	u1617
  4661   001112  F000               	nop	
  4662   001114                     
  4663                           ;colour_identify.c: 205:             turnLeft45(mL,mR);
  4664   001114  C01C  F014         	movff	motor_response@mL,turnLeft45@mL
  4665   001118  C01D  F015         	movff	motor_response@mL+1,turnLeft45@mL+1
  4666   00111C  C01E  F016         	movff	motor_response@mR,turnLeft45@mR
  4667   001120  C01F  F017         	movff	motor_response@mR+1,turnLeft45@mR+1
  4668   001124  ECDB  F012         	call	_turnLeft45	;wreg free
  4669   001128  EF50  F008         	goto	l2809
  4670   00112C                     l2853:
  4671   00112C  5022               	movf	motor_response@card^0,w,c
  4672   00112E  6E20               	movwf	??_motor_response^0,c
  4673   001130  6A21               	clrf	(??_motor_response+1)^0,c
  4674                           
  4675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4676                           ; Switch size 1, requested type "simple"
  4677                           ; Number of cases is 1, Range of values is 0 to 0
  4678                           ; switch strategies available:
  4679                           ; Name         Instructions Cycles
  4680                           ; simple_byte            4     3 (average)
  4681                           ;	Chosen strategy is simple_byte
  4682   001132  5021               	movf	(??_motor_response+1)^0,w,c
  4683   001134  0A00               	xorlw	0	; case 0
  4684   001136  B4D8               	btfsc	status,2,c
  4685   001138  EFA0  F008         	goto	l3141
  4686   00113C  EFC7  F008         	goto	l354
  4687   001140                     l3141:
  4688                           
  4689                           ; Switch size 1, requested type "simple"
  4690                           ; Number of cases is 9, Range of values is 1 to 9
  4691                           ; switch strategies available:
  4692                           ; Name         Instructions Cycles
  4693                           ; simple_byte           28    15 (average)
  4694                           ;	Chosen strategy is simple_byte
  4695   001140  5020               	movf	??_motor_response^0,w,c
  4696   001142  0A01               	xorlw	1	; case 1
  4697   001144  B4D8               	btfsc	status,2,c
  4698   001146  EF40  F007         	goto	l2743
  4699   00114A  0A03               	xorlw	3	; case 2
  4700   00114C  B4D8               	btfsc	status,2,c
  4701   00114E  EF80  F007         	goto	l2755
  4702   001152  0A01               	xorlw	1	; case 3
  4703   001154  B4D8               	btfsc	status,2,c
  4704   001156  EFB6  F007         	goto	l2767
  4705   00115A  0A07               	xorlw	7	; case 4
  4706   00115C  B4D8               	btfsc	status,2,c
  4707   00115E  EFF6  F007         	goto	l2787
  4708   001162  0A01               	xorlw	1	; case 5
  4709   001164  B4D8               	btfsc	status,2,c
  4710   001166  EF24  F008         	goto	l2803
  4711   00116A  0A03               	xorlw	3	; case 6
  4712   00116C  B4D8               	btfsc	status,2,c
  4713   00116E  EF5C  F008         	goto	l2819
  4714   001172  0A01               	xorlw	1	; case 7
  4715   001174  B4D8               	btfsc	status,2,c
  4716   001176  EF74  F008         	goto	l2835
  4717   00117A  0A0F               	xorlw	15	; case 8
  4718   00117C  B4D8               	btfsc	status,2,c
  4719   00117E  EFC7  F008         	goto	l354
  4720   001182  0A01               	xorlw	1	; case 9
  4721   001184  B4D8               	btfsc	status,2,c
  4722   001186  EFC7  F008         	goto	l354
  4723   00118A  EFC7  F008         	goto	l354
  4724   00118E                     l354:
  4725   00118E  0012               	return		;funcret
  4726   001190                     __end_of_motor_response:
  4727                           	callstack 0
  4728                           
  4729 ;; *************** function _turnRight45 *****************
  4730 ;; Defined at:
  4731 ;;		line 116 in file "dc_motor.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4734 ;;		 -> main@motorL(9), 
  4735 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4736 ;;		 -> main@motorR(9), 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  i               2   25[COMRAM] int 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4751 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4752 ;;Total ram usage:        8 bytes
  4753 ;; Hardware stack levels used: 1
  4754 ;; Hardware stack levels required when called: 2
  4755 ;; This function calls:
  4756 ;;		_setMotorPWM
  4757 ;; This function is called by:
  4758 ;;		_motor_response
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text23
  4763   002664                     __ptext23:
  4764                           	callstack 0
  4765   002664                     _turnRight45:
  4766                           	callstack 26
  4767   002664                     
  4768                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  4769   002664  EE20 F001          	lfsr	2,1
  4770   002668  5014               	movf	turnRight45@mL^0,w,c
  4771   00266A  26D9               	addwf	fsr2l,f,c
  4772   00266C  5015               	movf	(turnRight45@mL+1)^0,w,c
  4773   00266E  22DA               	addwfc	fsr2h,f,c
  4774   002670  0E01               	movlw	1
  4775   002672  6EDF               	movwf	indf2,c
  4776                           
  4777                           ;dc_motor.c: 119:     mR->direction=0;
  4778   002674  EE20 F001          	lfsr	2,1
  4779   002678  5016               	movf	turnRight45@mR^0,w,c
  4780   00267A  26D9               	addwf	fsr2l,f,c
  4781   00267C  5017               	movf	(turnRight45@mR+1)^0,w,c
  4782   00267E  22DA               	addwfc	fsr2h,f,c
  4783   002680  0E00               	movlw	0
  4784   002682  6EDF               	movwf	indf2,c
  4785   002684                     
  4786                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  4787   002684  0E00               	movlw	0
  4788   002686  6E1B               	movwf	(turnRight45@i+1)^0,c
  4789   002688  0E00               	movlw	0
  4790   00268A  6E1A               	movwf	turnRight45@i^0,c
  4791   00268C                     l2535:
  4792                           
  4793                           ;dc_motor.c: 122:         mR->power=i;
  4794   00268C  C016  FFD9         	movff	turnRight45@mR,fsr2l
  4795   002690  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
  4796   002694  C01A  FFDF         	movff	turnRight45@i,indf2
  4797                           
  4798                           ;dc_motor.c: 123:         mL->power=i;
  4799   002698  C014  FFD9         	movff	turnRight45@mL,fsr2l
  4800   00269C  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
  4801   0026A0  C01A  FFDF         	movff	turnRight45@i,indf2
  4802   0026A4                     
  4803                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4804   0026A4  0E02               	movlw	2
  4805   0026A6  6E19               	movwf	(??_turnRight45+1)^0,c
  4806   0026A8  0E38               	movlw	56
  4807   0026AA  6E18               	movwf	??_turnRight45^0,c
  4808   0026AC  0EAD               	movlw	173
  4809   0026AE                     u1627:
  4810   0026AE  2EE8               	decfsz	wreg,f,c
  4811   0026B0  D7FE               	bra	u1627
  4812   0026B2  2E18               	decfsz	??_turnRight45^0,f,c
  4813   0026B4  D7FC               	bra	u1627
  4814   0026B6  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  4815   0026B8  D7FA               	bra	u1627
  4816   0026BA  F000               	nop	
  4817   0026BC                     
  4818                           ;dc_motor.c: 125:         setMotorPWM(mL);
  4819   0026BC  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
  4820   0026C0  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
  4821   0026C4  ECA6  F00E         	call	_setMotorPWM	;wreg free
  4822   0026C8                     
  4823                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  4824   0026C8  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
  4825   0026CC  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
  4826   0026D0  ECA6  F00E         	call	_setMotorPWM	;wreg free
  4827   0026D4  0E0A               	movlw	10
  4828   0026D6  261A               	addwf	turnRight45@i^0,f,c
  4829   0026D8  0E00               	movlw	0
  4830   0026DA  221B               	addwfc	(turnRight45@i+1)^0,f,c
  4831   0026DC  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
  4832   0026DE  EF7A  F013         	goto	u1221
  4833   0026E2  501B               	movf	(turnRight45@i+1)^0,w,c
  4834   0026E4  E109               	bnz	u1220
  4835   0026E6  0E50               	movlw	80
  4836   0026E8  5C1A               	subwf	turnRight45@i^0,w,c
  4837   0026EA  A0D8               	btfss	status,0,c
  4838   0026EC  EF7A  F013         	goto	u1221
  4839   0026F0  EF7C  F013         	goto	u1220
  4840   0026F4                     u1221:
  4841   0026F4  EF46  F013         	goto	l2535
  4842   0026F8                     u1220:
  4843   0026F8                     
  4844                           ;dc_motor.c: 127:     _delay((unsigned long)((45)*(64000000/4000.0)));
  4845   0026F8  0E04               	movlw	4
  4846   0026FA  6E19               	movwf	(??_turnRight45+1)^0,c
  4847   0026FC  0EA8               	movlw	168
  4848   0026FE  6E18               	movwf	??_turnRight45^0,c
  4849   002700  0E0C               	movlw	12
  4850   002702                     u1637:
  4851   002702  2EE8               	decfsz	wreg,f,c
  4852   002704  D7FE               	bra	u1637
  4853   002706  2E18               	decfsz	??_turnRight45^0,f,c
  4854   002708  D7FC               	bra	u1637
  4855   00270A  2E19               	decfsz	(??_turnRight45+1)^0,f,c
  4856   00270C  D7FA               	bra	u1637
  4857   00270E  0012               	return		;funcret
  4858   002710                     __end_of_turnRight45:
  4859                           	callstack 0
  4860                           
  4861 ;; *************** function _turnLeft45 *****************
  4862 ;; Defined at:
  4863 ;;		line 101 in file "dc_motor.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4866 ;;		 -> main@motorL(9), 
  4867 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4868 ;;		 -> main@motorR(9), 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  i               2   25[COMRAM] int 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4880 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4882 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4883 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4884 ;;Total ram usage:        8 bytes
  4885 ;; Hardware stack levels used: 1
  4886 ;; Hardware stack levels required when called: 2
  4887 ;; This function calls:
  4888 ;;		_setMotorPWM
  4889 ;; This function is called by:
  4890 ;;		_motor_response
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text24
  4895   0025B6                     __ptext24:
  4896                           	callstack 0
  4897   0025B6                     _turnLeft45:
  4898                           	callstack 26
  4899   0025B6                     
  4900                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  4901   0025B6  EE20 F001          	lfsr	2,1
  4902   0025BA  5014               	movf	turnLeft45@mL^0,w,c
  4903   0025BC  26D9               	addwf	fsr2l,f,c
  4904   0025BE  5015               	movf	(turnLeft45@mL+1)^0,w,c
  4905   0025C0  22DA               	addwfc	fsr2h,f,c
  4906   0025C2  0E00               	movlw	0
  4907   0025C4  6EDF               	movwf	indf2,c
  4908                           
  4909                           ;dc_motor.c: 104:     mR->direction=1;
  4910   0025C6  EE20 F001          	lfsr	2,1
  4911   0025CA  5016               	movf	turnLeft45@mR^0,w,c
  4912   0025CC  26D9               	addwf	fsr2l,f,c
  4913   0025CE  5017               	movf	(turnLeft45@mR+1)^0,w,c
  4914   0025D0  22DA               	addwfc	fsr2h,f,c
  4915   0025D2  0E01               	movlw	1
  4916   0025D4  6EDF               	movwf	indf2,c
  4917   0025D6                     
  4918                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  4919   0025D6  0E00               	movlw	0
  4920   0025D8  6E1B               	movwf	(turnLeft45@i+1)^0,c
  4921   0025DA  0E00               	movlw	0
  4922   0025DC  6E1A               	movwf	turnLeft45@i^0,c
  4923   0025DE                     l2513:
  4924                           
  4925                           ;dc_motor.c: 107:         mR->power=i;
  4926   0025DE  C016  FFD9         	movff	turnLeft45@mR,fsr2l
  4927   0025E2  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
  4928   0025E6  C01A  FFDF         	movff	turnLeft45@i,indf2
  4929                           
  4930                           ;dc_motor.c: 108:         mL->power=i;
  4931   0025EA  C014  FFD9         	movff	turnLeft45@mL,fsr2l
  4932   0025EE  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
  4933   0025F2  C01A  FFDF         	movff	turnLeft45@i,indf2
  4934   0025F6                     
  4935                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4936   0025F6  0E02               	movlw	2
  4937   0025F8  6E19               	movwf	(??_turnLeft45+1)^0,c
  4938   0025FA  0E38               	movlw	56
  4939   0025FC  6E18               	movwf	??_turnLeft45^0,c
  4940   0025FE  0EAD               	movlw	173
  4941   002600                     u1647:
  4942   002600  2EE8               	decfsz	wreg,f,c
  4943   002602  D7FE               	bra	u1647
  4944   002604  2E18               	decfsz	??_turnLeft45^0,f,c
  4945   002606  D7FC               	bra	u1647
  4946   002608  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  4947   00260A  D7FA               	bra	u1647
  4948   00260C  F000               	nop	
  4949   00260E                     
  4950                           ;dc_motor.c: 110:         setMotorPWM(mL);
  4951   00260E  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
  4952   002612  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  4953   002616  ECA6  F00E         	call	_setMotorPWM	;wreg free
  4954   00261A                     
  4955                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  4956   00261A  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
  4957   00261E  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  4958   002622  ECA6  F00E         	call	_setMotorPWM	;wreg free
  4959   002626  0E0A               	movlw	10
  4960   002628  261A               	addwf	turnLeft45@i^0,f,c
  4961   00262A  0E00               	movlw	0
  4962   00262C  221B               	addwfc	(turnLeft45@i+1)^0,f,c
  4963   00262E  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
  4964   002630  EF23  F013         	goto	u1211
  4965   002634  501B               	movf	(turnLeft45@i+1)^0,w,c
  4966   002636  E109               	bnz	u1210
  4967   002638  0E50               	movlw	80
  4968   00263A  5C1A               	subwf	turnLeft45@i^0,w,c
  4969   00263C  A0D8               	btfss	status,0,c
  4970   00263E  EF23  F013         	goto	u1211
  4971   002642  EF25  F013         	goto	u1210
  4972   002646                     u1211:
  4973   002646  EFEF  F012         	goto	l2513
  4974   00264A                     u1210:
  4975   00264A                     
  4976                           ;dc_motor.c: 112:     _delay((unsigned long)((40)*(64000000/4000.0)));
  4977   00264A  0E04               	movlw	4
  4978   00264C  6E19               	movwf	(??_turnLeft45+1)^0,c
  4979   00264E  0E40               	movlw	64
  4980   002650  6E18               	movwf	??_turnLeft45^0,c
  4981   002652  0E26               	movlw	38
  4982   002654                     u1657:
  4983   002654  2EE8               	decfsz	wreg,f,c
  4984   002656  D7FE               	bra	u1657
  4985   002658  2E18               	decfsz	??_turnLeft45^0,f,c
  4986   00265A  D7FC               	bra	u1657
  4987   00265C  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  4988   00265E  D7FA               	bra	u1657
  4989   002660  D000               	nop2	
  4990   002662  0012               	return		;funcret
  4991   002664                     __end_of_turnLeft45:
  4992                           	callstack 0
  4993                           
  4994 ;; *************** function _stop *****************
  4995 ;; Defined at:
  4996 ;;		line 84 in file "dc_motor.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4999 ;;		 -> main@motorL(9), 
  5000 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5001 ;;		 -> main@motorR(9), 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5016 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;Total ram usage:        5 bytes
  5018 ;; Hardware stack levels used: 1
  5019 ;; Hardware stack levels required when called: 2
  5020 ;; This function calls:
  5021 ;;		_setMotorPWM
  5022 ;; This function is called by:
  5023 ;;		_motor_response
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text25
  5028   002824                     __ptext25:
  5029                           	callstack 0
  5030   002824                     _stop:
  5031                           	callstack 26
  5032   002824                     
  5033                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5034   002824  EF27  F014         	goto	l2495
  5035   002828                     l2489:
  5036                           
  5037                           ;dc_motor.c: 87:         mL->power -=10;
  5038   002828  C014  FFD9         	movff	stop@mL,fsr2l
  5039   00282C  C015  FFDA         	movff	stop@mL+1,fsr2h
  5040   002830  0E0A               	movlw	10
  5041   002832  5EDF               	subwf	indf2,f,c
  5042   002834                     
  5043                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5044   002834  0E2A               	movlw	42
  5045   002836  6E18               	movwf	??_stop^0,c
  5046   002838  0E8E               	movlw	142
  5047   00283A                     u1667:
  5048   00283A  2EE8               	decfsz	wreg,f,c
  5049   00283C  D7FE               	bra	u1667
  5050   00283E  2E18               	decfsz	??_stop^0,f,c
  5051   002840  D7FC               	bra	u1667
  5052   002842                     
  5053                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5054   002842  C014  F00E         	movff	stop@mL,setMotorPWM@m
  5055   002846  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  5056   00284A  ECA6  F00E         	call	_setMotorPWM	;wreg free
  5057   00284E                     l2495:
  5058                           
  5059                           ;dc_motor.c: 86:     while(mL->power !=0){
  5060   00284E  C014  FFD9         	movff	stop@mL,fsr2l
  5061   002852  C015  FFDA         	movff	stop@mL+1,fsr2h
  5062   002856  50DF               	movf	indf2,w,c
  5063   002858  A4D8               	btfss	status,2,c
  5064   00285A  EF31  F014         	goto	u1191
  5065   00285E  EF33  F014         	goto	u1190
  5066   002862                     u1191:
  5067   002862  EF14  F014         	goto	l2489
  5068   002866                     u1190:
  5069   002866  EF48  F014         	goto	l2503
  5070   00286A                     l2497:
  5071                           
  5072                           ;dc_motor.c: 92:         mR->power -=10;
  5073   00286A  C016  FFD9         	movff	stop@mR,fsr2l
  5074   00286E  C017  FFDA         	movff	stop@mR+1,fsr2h
  5075   002872  0E0A               	movlw	10
  5076   002874  5EDF               	subwf	indf2,f,c
  5077   002876                     
  5078                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5079   002876  0E2A               	movlw	42
  5080   002878  6E18               	movwf	??_stop^0,c
  5081   00287A  0E8E               	movlw	142
  5082   00287C                     u1677:
  5083   00287C  2EE8               	decfsz	wreg,f,c
  5084   00287E  D7FE               	bra	u1677
  5085   002880  2E18               	decfsz	??_stop^0,f,c
  5086   002882  D7FC               	bra	u1677
  5087   002884                     
  5088                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5089   002884  C016  F00E         	movff	stop@mR,setMotorPWM@m
  5090   002888  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  5091   00288C  ECA6  F00E         	call	_setMotorPWM	;wreg free
  5092   002890                     l2503:
  5093                           
  5094                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5095   002890  C016  FFD9         	movff	stop@mR,fsr2l
  5096   002894  C017  FFDA         	movff	stop@mR+1,fsr2h
  5097   002898  50DF               	movf	indf2,w,c
  5098   00289A  A4D8               	btfss	status,2,c
  5099   00289C  EF52  F014         	goto	u1201
  5100   0028A0  EF54  F014         	goto	u1200
  5101   0028A4                     u1201:
  5102   0028A4  EF35  F014         	goto	l2497
  5103   0028A8                     u1200:
  5104   0028A8  0012               	return		;funcret
  5105   0028AA                     __end_of_stop:
  5106                           	callstack 0
  5107                           
  5108 ;; *************** function _reverseFullSpeed *****************
  5109 ;; Defined at:
  5110 ;;		line 145 in file "dc_motor.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5113 ;;		 -> main@motorL(9), 
  5114 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5115 ;;		 -> main@motorR(9), 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  i               2   24[COMRAM] int 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      void 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5127 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5130 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;Total ram usage:        7 bytes
  5132 ;; Hardware stack levels used: 1
  5133 ;; Hardware stack levels required when called: 2
  5134 ;; This function calls:
  5135 ;;		_setMotorPWM
  5136 ;; This function is called by:
  5137 ;;		_motor_response
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text26
  5142   002710                     __ptext26:
  5143                           	callstack 0
  5144   002710                     _reverseFullSpeed:
  5145                           	callstack 26
  5146   002710                     
  5147                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5148   002710  EE20 F001          	lfsr	2,1
  5149   002714  5014               	movf	reverseFullSpeed@mL^0,w,c
  5150   002716  26D9               	addwf	fsr2l,f,c
  5151   002718  5015               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5152   00271A  22DA               	addwfc	fsr2h,f,c
  5153   00271C  0E00               	movlw	0
  5154   00271E  6EDF               	movwf	indf2,c
  5155                           
  5156                           ;dc_motor.c: 148:     mR->direction=0;
  5157   002720  EE20 F001          	lfsr	2,1
  5158   002724  5016               	movf	reverseFullSpeed@mR^0,w,c
  5159   002726  26D9               	addwf	fsr2l,f,c
  5160   002728  5017               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5161   00272A  22DA               	addwfc	fsr2h,f,c
  5162   00272C  0E00               	movlw	0
  5163   00272E  6EDF               	movwf	indf2,c
  5164   002730                     
  5165                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5166   002730  0E00               	movlw	0
  5167   002732  6E1A               	movwf	(reverseFullSpeed@i+1)^0,c
  5168   002734  0E00               	movlw	0
  5169   002736  6E19               	movwf	reverseFullSpeed@i^0,c
  5170   002738                     l2557:
  5171                           
  5172                           ;dc_motor.c: 150:         mL->power=i;
  5173   002738  C014  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5174   00273C  C015  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5175   002740  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  5176                           
  5177                           ;dc_motor.c: 151:         mR->power=i;
  5178   002744  C016  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5179   002748  C017  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5180   00274C  C019  FFDF         	movff	reverseFullSpeed@i,indf2
  5181   002750                     
  5182                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5183   002750  C014  F00E         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5184   002754  C015  F00F         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5185   002758  ECA6  F00E         	call	_setMotorPWM	;wreg free
  5186   00275C                     
  5187                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5188   00275C  C016  F00E         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5189   002760  C017  F00F         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5190   002764  ECA6  F00E         	call	_setMotorPWM	;wreg free
  5191   002768                     
  5192                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5193   002768  0ED0               	movlw	208
  5194   00276A  6E18               	movwf	??_reverseFullSpeed^0,c
  5195   00276C  0ECA               	movlw	202
  5196   00276E                     u1687:
  5197   00276E  2EE8               	decfsz	wreg,f,c
  5198   002770  D7FE               	bra	u1687
  5199   002772  2E18               	decfsz	??_reverseFullSpeed^0,f,c
  5200   002774  D7FC               	bra	u1687
  5201   002776                     
  5202                           ;dc_motor.c: 155:     }
  5203   002776  0E0A               	movlw	10
  5204   002778  2619               	addwf	reverseFullSpeed@i^0,f,c
  5205   00277A  0E00               	movlw	0
  5206   00277C  221A               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5207   00277E  BE1A               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5208   002780  EFCB  F013         	goto	u1231
  5209   002784  501A               	movf	(reverseFullSpeed@i+1)^0,w,c
  5210   002786  E109               	bnz	u1230
  5211   002788  0E3C               	movlw	60
  5212   00278A  5C19               	subwf	reverseFullSpeed@i^0,w,c
  5213   00278C  A0D8               	btfss	status,0,c
  5214   00278E  EFCB  F013         	goto	u1231
  5215   002792  EFCD  F013         	goto	u1230
  5216   002796                     u1231:
  5217   002796  EF9C  F013         	goto	l2557
  5218   00279A                     u1230:
  5219   00279A  0012               	return		;funcret
  5220   00279C                     __end_of_reverseFullSpeed:
  5221                           	callstack 0
  5222                           
  5223 ;; *************** function _setMotorPWM *****************
  5224 ;; Defined at:
  5225 ;;		line 61 in file "dc_motor.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  m               2   13[COMRAM] PTR struct DC_motor
  5228 ;;		 -> main@motorR(9), main@motorL(9), 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  negDuty         1   18[COMRAM] unsigned char 
  5231 ;;  posDuty         1   17[COMRAM] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5245 ;;Total ram usage:        6 bytes
  5246 ;; Hardware stack levels used: 1
  5247 ;; Hardware stack levels required when called: 1
  5248 ;; This function calls:
  5249 ;;		___lwdiv
  5250 ;;		___wmul
  5251 ;; This function is called by:
  5252 ;;		_stop
  5253 ;;		_turnLeft45
  5254 ;;		_turnRight45
  5255 ;;		_reverseFullSpeed
  5256 ;;		_main
  5257 ;;		_fullSpeedAhead
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text27
  5262   001D4C                     __ptext27:
  5263                           	callstack 0
  5264   001D4C                     _setMotorPWM:
  5265                           	callstack 29
  5266   001D4C                     
  5267                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5268   001D4C  EE20 F002          	lfsr	2,2
  5269   001D50  500E               	movf	setMotorPWM@m^0,w,c
  5270   001D52  26D9               	addwf	fsr2l,f,c
  5271   001D54  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5272   001D56  22DA               	addwfc	fsr2h,f,c
  5273   001D58  50DF               	movf	indf2,w,c
  5274   001D5A  B4D8               	btfsc	status,2,c
  5275   001D5C  EFB2  F00E         	goto	u1141
  5276   001D60  EFB4  F00E         	goto	u1140
  5277   001D64                     u1141:
  5278   001D64  EFE8  F00E         	goto	l2423
  5279   001D68                     u1140:
  5280   001D68                     
  5281                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5282   001D68  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5283   001D6C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5284   001D70  50DF               	movf	indf2,w,c
  5285   001D72  6E10               	movwf	??_setMotorPWM^0,c
  5286   001D74  5010               	movf	??_setMotorPWM^0,w,c
  5287   001D76  6E01               	movwf	___wmul@multiplier^0,c
  5288   001D78  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5289   001D7A  EE20 F003          	lfsr	2,3
  5290   001D7E  500E               	movf	setMotorPWM@m^0,w,c
  5291   001D80  26D9               	addwf	fsr2l,f,c
  5292   001D82  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5293   001D84  22DA               	addwfc	fsr2h,f,c
  5294   001D86  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5295   001D8A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5296   001D8E  ECBE  F016         	call	___wmul	;wreg free
  5297   001D92  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5298   001D96  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5299   001D9A  0E00               	movlw	0
  5300   001D9C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5301   001D9E  0E64               	movlw	100
  5302   001DA0  6E09               	movwf	___lwdiv@divisor^0,c
  5303   001DA2  ECD4  F014         	call	___lwdiv	;wreg free
  5304   001DA6  EE20 F003          	lfsr	2,3
  5305   001DAA  500E               	movf	setMotorPWM@m^0,w,c
  5306   001DAC  26D9               	addwf	fsr2l,f,c
  5307   001DAE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5308   001DB0  22DA               	addwfc	fsr2h,f,c
  5309   001DB2  50DF               	movf	indf2,w,c
  5310   001DB4  6E11               	movwf	(??_setMotorPWM+1)^0,c
  5311   001DB6  5007               	movf	?___lwdiv^0,w,c
  5312   001DB8  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  5313   001DBA  6E12               	movwf	setMotorPWM@posDuty^0,c
  5314   001DBC                     
  5315                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5316   001DBC  EE20 F003          	lfsr	2,3
  5317   001DC0  500E               	movf	setMotorPWM@m^0,w,c
  5318   001DC2  26D9               	addwf	fsr2l,f,c
  5319   001DC4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5320   001DC6  22DA               	addwfc	fsr2h,f,c
  5321   001DC8  50DF               	movf	indf2,w,c
  5322   001DCA  6E13               	movwf	setMotorPWM@negDuty^0,c
  5323                           
  5324                           ;dc_motor.c: 68:     }
  5325   001DCC  EF0B  F00F         	goto	l2427
  5326   001DD0                     l2423:
  5327                           
  5328                           ;dc_motor.c: 70:         posDuty=0;
  5329   001DD0  0E00               	movlw	0
  5330   001DD2  6E12               	movwf	setMotorPWM@posDuty^0,c
  5331   001DD4                     
  5332                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5333   001DD4  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5334   001DD8  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5335   001DDC  50DF               	movf	indf2,w,c
  5336   001DDE  6E10               	movwf	??_setMotorPWM^0,c
  5337   001DE0  5010               	movf	??_setMotorPWM^0,w,c
  5338   001DE2  6E01               	movwf	___wmul@multiplier^0,c
  5339   001DE4  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5340   001DE6  EE20 F003          	lfsr	2,3
  5341   001DEA  500E               	movf	setMotorPWM@m^0,w,c
  5342   001DEC  26D9               	addwf	fsr2l,f,c
  5343   001DEE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5344   001DF0  22DA               	addwfc	fsr2h,f,c
  5345   001DF2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5346   001DF6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5347   001DFA  ECBE  F016         	call	___wmul	;wreg free
  5348   001DFE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5349   001E02  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5350   001E06  0E00               	movlw	0
  5351   001E08  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5352   001E0A  0E64               	movlw	100
  5353   001E0C  6E09               	movwf	___lwdiv@divisor^0,c
  5354   001E0E  ECD4  F014         	call	___lwdiv	;wreg free
  5355   001E12  5007               	movf	?___lwdiv^0,w,c
  5356   001E14  6E13               	movwf	setMotorPWM@negDuty^0,c
  5357   001E16                     l2427:
  5358                           
  5359                           ;dc_motor.c: 74:     if (m->direction) {
  5360   001E16  EE20 F001          	lfsr	2,1
  5361   001E1A  500E               	movf	setMotorPWM@m^0,w,c
  5362   001E1C  26D9               	addwf	fsr2l,f,c
  5363   001E1E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5364   001E20  22DA               	addwfc	fsr2h,f,c
  5365   001E22  50DF               	movf	indf2,w,c
  5366   001E24  B4D8               	btfsc	status,2,c
  5367   001E26  EF17  F00F         	goto	u1151
  5368   001E2A  EF19  F00F         	goto	u1150
  5369   001E2E                     u1151:
  5370   001E2E  EF3B  F00F         	goto	l2431
  5371   001E32                     u1150:
  5372   001E32                     
  5373                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5374   001E32  EE20 F005          	lfsr	2,5
  5375   001E36  500E               	movf	setMotorPWM@m^0,w,c
  5376   001E38  26D9               	addwf	fsr2l,f,c
  5377   001E3A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5378   001E3C  22DA               	addwfc	fsr2h,f,c
  5379   001E3E  CFDE F010          	movff	postinc2,??_setMotorPWM
  5380   001E42  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5381   001E46  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5382   001E4A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5383   001E4E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5384                           
  5385                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5386   001E52  EE20 F007          	lfsr	2,7
  5387   001E56  500E               	movf	setMotorPWM@m^0,w,c
  5388   001E58  26D9               	addwf	fsr2l,f,c
  5389   001E5A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5390   001E5C  22DA               	addwfc	fsr2h,f,c
  5391   001E5E  CFDE F010          	movff	postinc2,??_setMotorPWM
  5392   001E62  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5393   001E66  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5394   001E6A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5395   001E6E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5396                           
  5397                           ;dc_motor.c: 77:     } else {
  5398   001E72  EF5B  F00F         	goto	l95
  5399   001E76                     l2431:
  5400                           
  5401                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5402   001E76  EE20 F005          	lfsr	2,5
  5403   001E7A  500E               	movf	setMotorPWM@m^0,w,c
  5404   001E7C  26D9               	addwf	fsr2l,f,c
  5405   001E7E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5406   001E80  22DA               	addwfc	fsr2h,f,c
  5407   001E82  CFDE F010          	movff	postinc2,??_setMotorPWM
  5408   001E86  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5409   001E8A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5410   001E8E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5411   001E92  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5412                           
  5413                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5414   001E96  EE20 F007          	lfsr	2,7
  5415   001E9A  500E               	movf	setMotorPWM@m^0,w,c
  5416   001E9C  26D9               	addwf	fsr2l,f,c
  5417   001E9E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5418   001EA0  22DA               	addwfc	fsr2h,f,c
  5419   001EA2  CFDE F010          	movff	postinc2,??_setMotorPWM
  5420   001EA6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5421   001EAA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5422   001EAE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5423   001EB2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5424   001EB6                     l95:
  5425   001EB6  0012               	return		;funcret
  5426   001EB8                     __end_of_setMotorPWM:
  5427                           	callstack 0
  5428                           
  5429 ;; *************** function ___wmul *****************
  5430 ;; Defined at:
  5431 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  multiplier      2    0[COMRAM] unsigned int 
  5434 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  product         2    4[COMRAM] unsigned int 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  2    0[COMRAM] unsigned int 
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0, prodl, prodh
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5449 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5450 ;;Total ram usage:        6 bytes
  5451 ;; Hardware stack levels used: 1
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_setMotorPWM
  5456 ;;		_normalise_readings
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text28
  5461   002D7C                     __ptext28:
  5462                           	callstack 0
  5463   002D7C                     ___wmul:
  5464                           	callstack 29
  5465   002D7C  5001               	movf	___wmul@multiplier^0,w,c
  5466   002D7E  0203               	mulwf	___wmul@multiplicand^0,c
  5467   002D80  CFF3 F005          	movff	prodl,___wmul@product
  5468   002D84  CFF4 F006          	movff	prodh,___wmul@product+1
  5469   002D88  5001               	movf	___wmul@multiplier^0,w,c
  5470   002D8A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5471   002D8C  50F3               	movf	243,w,c
  5472   002D8E  2606               	addwf	(___wmul@product+1)^0,f,c
  5473   002D90  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5474   002D92  0203               	mulwf	___wmul@multiplicand^0,c
  5475   002D94  50F3               	movf	243,w,c
  5476   002D96  2606               	addwf	(___wmul@product+1)^0,f,c
  5477   002D98  C005  F001         	movff	___wmul@product,?___wmul
  5478   002D9C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5479   002DA0  0012               	return		;funcret
  5480   002DA2                     __end_of___wmul:
  5481                           	callstack 0
  5482                           
  5483 ;; *************** function ___lwdiv *****************
  5484 ;; Defined at:
  5485 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;  dividend        2    6[COMRAM] unsigned int 
  5488 ;;  divisor         2    8[COMRAM] unsigned int 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  quotient        2   10[COMRAM] unsigned int 
  5491 ;;  counter         1   12[COMRAM] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  2    6[COMRAM] unsigned int 
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5502 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5505 ;;Total ram usage:        7 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_setMotorPWM
  5511 ;;		_normalise_readings
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text29
  5516   0029A8                     __ptext29:
  5517                           	callstack 0
  5518   0029A8                     ___lwdiv:
  5519                           	callstack 29
  5520   0029A8  0E00               	movlw	0
  5521   0029AA  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  5522   0029AC  0E00               	movlw	0
  5523   0029AE  6E0B               	movwf	___lwdiv@quotient^0,c
  5524   0029B0  5009               	movf	___lwdiv@divisor^0,w,c
  5525   0029B2  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5526   0029B4  B4D8               	btfsc	status,2,c
  5527   0029B6  EFDF  F014         	goto	u991
  5528   0029BA  EFE1  F014         	goto	u990
  5529   0029BE                     u991:
  5530   0029BE  EF09  F015         	goto	l940
  5531   0029C2                     u990:
  5532   0029C2  0E01               	movlw	1
  5533   0029C4  6E0D               	movwf	___lwdiv@counter^0,c
  5534   0029C6  EFE9  F014         	goto	l2321
  5535   0029CA                     l2319:
  5536   0029CA  90D8               	bcf	status,0,c
  5537   0029CC  3609               	rlcf	___lwdiv@divisor^0,f,c
  5538   0029CE  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5539   0029D0  2A0D               	incf	___lwdiv@counter^0,f,c
  5540   0029D2                     l2321:
  5541   0029D2  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  5542   0029D4  EFEE  F014         	goto	u1001
  5543   0029D8  EFF0  F014         	goto	u1000
  5544   0029DC                     u1001:
  5545   0029DC  EFE5  F014         	goto	l2319
  5546   0029E0                     u1000:
  5547   0029E0                     l2323:
  5548   0029E0  90D8               	bcf	status,0,c
  5549   0029E2  360B               	rlcf	___lwdiv@quotient^0,f,c
  5550   0029E4  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5551   0029E6  5009               	movf	___lwdiv@divisor^0,w,c
  5552   0029E8  5C07               	subwf	___lwdiv@dividend^0,w,c
  5553   0029EA  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  5554   0029EC  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5555   0029EE  A0D8               	btfss	status,0,c
  5556   0029F0  EFFC  F014         	goto	u1011
  5557   0029F4  EFFE  F014         	goto	u1010
  5558   0029F8                     u1011:
  5559   0029F8  EF03  F015         	goto	l2331
  5560   0029FC                     u1010:
  5561   0029FC  5009               	movf	___lwdiv@divisor^0,w,c
  5562   0029FE  5E07               	subwf	___lwdiv@dividend^0,f,c
  5563   002A00  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  5564   002A02  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5565   002A04  800B               	bsf	___lwdiv@quotient^0,0,c
  5566   002A06                     l2331:
  5567   002A06  90D8               	bcf	status,0,c
  5568   002A08  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5569   002A0A  3209               	rrcf	___lwdiv@divisor^0,f,c
  5570   002A0C  2E0D               	decfsz	___lwdiv@counter^0,f,c
  5571   002A0E  EFF0  F014         	goto	l2323
  5572   002A12                     l940:
  5573   002A12  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  5574   002A16  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5575   002A1A  0012               	return		;funcret
  5576   002A1C                     __end_of___lwdiv:
  5577                           	callstack 0
  5578                           
  5579 ;; *************** function _make_master_closeness *****************
  5580 ;; Defined at:
  5581 ;;		line 114 in file "colour_identify.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  buf             2    0[COMRAM] PTR unsigned char 
  5584 ;;		 -> main@buf(150), 
  5585 ;;  normalised_v    2    2[COMRAM] PTR unsigned int [9]
  5586 ;;		 -> card_response@normalised_values(72), 
  5587 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  5588 ;;		 -> card_response@master_closeness(18), 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  i               1   36[COMRAM] enum E14551
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5600 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5602 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5603 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;Total ram usage:       37 bytes
  5605 ;; Hardware stack levels used: 1
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_card_response
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text30
  5614   0023E0                     __ptext30:
  5615                           	callstack 0
  5616   0023E0                     _make_master_closeness:
  5617                           	callstack 29
  5618   0023E0                     
  5619                           ;colour_identify.c: 115:     for(colour i = RED; i<=BLACK; i++){
  5620   0023E0  0E01               	movlw	1
  5621   0023E2  6E25               	movwf	make_master_closeness@i^0,c
  5622   0023E4                     l2711:
  5623                           
  5624                           ;colour_identify.c: 117:         master_closeness[i] = (normalised_values[CLEAR][i] + no
      +                          rmalised_values[RED][i] + normalised_values[GREEN][i] + normalised_values[BLUE][i])/4;
  5625   0023E4  5025               	movf	make_master_closeness@i^0,w,c
  5626   0023E6  0D02               	mullw	2
  5627   0023E8  CFF3 F007          	movff	prodl,??_make_master_closeness
  5628   0023EC  CFF4 F008          	movff	prodh,??_make_master_closeness+1
  5629   0023F0  5007               	movf	??_make_master_closeness^0,w,c
  5630   0023F2  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5631   0023F4  6E09               	movwf	(??_make_master_closeness+2)^0,c
  5632   0023F6  5008               	movf	(??_make_master_closeness+1)^0,w,c
  5633   0023F8  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5634   0023FA  6E0A               	movwf	(??_make_master_closeness+3)^0,c
  5635   0023FC  0E36               	movlw	54
  5636   0023FE  2409               	addwf	(??_make_master_closeness+2)^0,w,c
  5637   002400  6ED9               	movwf	fsr2l,c
  5638   002402  0E00               	movlw	0
  5639   002404  200A               	addwfc	(??_make_master_closeness+3)^0,w,c
  5640   002406  6EDA               	movwf	fsr2h,c
  5641   002408  CFDE F00B          	movff	postinc2,??_make_master_closeness+4
  5642   00240C  CFDD F00C          	movff	postdec2,??_make_master_closeness+5
  5643   002410  5025               	movf	make_master_closeness@i^0,w,c
  5644   002412  0D02               	mullw	2
  5645   002414  CFF3 F00D          	movff	prodl,??_make_master_closeness+6
  5646   002418  CFF4 F00E          	movff	prodh,??_make_master_closeness+7
  5647   00241C  500D               	movf	(??_make_master_closeness+6)^0,w,c
  5648   00241E  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5649   002420  6E0F               	movwf	(??_make_master_closeness+8)^0,c
  5650   002422  500E               	movf	(??_make_master_closeness+7)^0,w,c
  5651   002424  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5652   002426  6E10               	movwf	(??_make_master_closeness+9)^0,c
  5653   002428  0E24               	movlw	36
  5654   00242A  240F               	addwf	(??_make_master_closeness+8)^0,w,c
  5655   00242C  6ED9               	movwf	fsr2l,c
  5656   00242E  0E00               	movlw	0
  5657   002430  2010               	addwfc	(??_make_master_closeness+9)^0,w,c
  5658   002432  6EDA               	movwf	fsr2h,c
  5659   002434  CFDE F011          	movff	postinc2,??_make_master_closeness+10
  5660   002438  CFDD F012          	movff	postdec2,??_make_master_closeness+11
  5661   00243C  5025               	movf	make_master_closeness@i^0,w,c
  5662   00243E  0D02               	mullw	2
  5663   002440  CFF3 F013          	movff	prodl,??_make_master_closeness+12
  5664   002444  CFF4 F014          	movff	prodh,??_make_master_closeness+13
  5665   002448  5013               	movf	(??_make_master_closeness+12)^0,w,c
  5666   00244A  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5667   00244C  6E15               	movwf	(??_make_master_closeness+14)^0,c
  5668   00244E  5014               	movf	(??_make_master_closeness+13)^0,w,c
  5669   002450  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5670   002452  6E16               	movwf	(??_make_master_closeness+15)^0,c
  5671   002454  0E12               	movlw	18
  5672   002456  2415               	addwf	(??_make_master_closeness+14)^0,w,c
  5673   002458  6ED9               	movwf	fsr2l,c
  5674   00245A  0E00               	movlw	0
  5675   00245C  2016               	addwfc	(??_make_master_closeness+15)^0,w,c
  5676   00245E  6EDA               	movwf	fsr2h,c
  5677   002460  CFDE F017          	movff	postinc2,??_make_master_closeness+16
  5678   002464  CFDD F018          	movff	postdec2,??_make_master_closeness+17
  5679   002468  5025               	movf	make_master_closeness@i^0,w,c
  5680   00246A  0D02               	mullw	2
  5681   00246C  CFF3 F019          	movff	prodl,??_make_master_closeness+18
  5682   002470  CFF4 F01A          	movff	prodh,??_make_master_closeness+19
  5683   002474  5019               	movf	(??_make_master_closeness+18)^0,w,c
  5684   002476  2403               	addwf	make_master_closeness@normalised_values^0,w,c
  5685   002478  6ED9               	movwf	fsr2l,c
  5686   00247A  501A               	movf	(??_make_master_closeness+19)^0,w,c
  5687   00247C  2004               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5688   00247E  6EDA               	movwf	fsr2h,c
  5689   002480  CFDE F01B          	movff	postinc2,??_make_master_closeness+20
  5690   002484  CFDD F01C          	movff	postdec2,??_make_master_closeness+21
  5691   002488  5017               	movf	(??_make_master_closeness+16)^0,w,c
  5692   00248A  241B               	addwf	(??_make_master_closeness+20)^0,w,c
  5693   00248C  6E1D               	movwf	(??_make_master_closeness+22)^0,c
  5694   00248E  5018               	movf	(??_make_master_closeness+17)^0,w,c
  5695   002490  201C               	addwfc	(??_make_master_closeness+21)^0,w,c
  5696   002492  6E1E               	movwf	(??_make_master_closeness+23)^0,c
  5697   002494  5011               	movf	(??_make_master_closeness+10)^0,w,c
  5698   002496  241D               	addwf	(??_make_master_closeness+22)^0,w,c
  5699   002498  6E1F               	movwf	(??_make_master_closeness+24)^0,c
  5700   00249A  5012               	movf	(??_make_master_closeness+11)^0,w,c
  5701   00249C  201E               	addwfc	(??_make_master_closeness+23)^0,w,c
  5702   00249E  6E20               	movwf	(??_make_master_closeness+25)^0,c
  5703   0024A0  500B               	movf	(??_make_master_closeness+4)^0,w,c
  5704   0024A2  241F               	addwf	(??_make_master_closeness+24)^0,w,c
  5705   0024A4  6E21               	movwf	(??_make_master_closeness+26)^0,c
  5706   0024A6  500C               	movf	(??_make_master_closeness+5)^0,w,c
  5707   0024A8  2020               	addwfc	(??_make_master_closeness+25)^0,w,c
  5708   0024AA  6E22               	movwf	(??_make_master_closeness+27)^0,c
  5709   0024AC  90D8               	bcf	status,0,c
  5710   0024AE  3222               	rrcf	(??_make_master_closeness+27)^0,f,c
  5711   0024B0  3221               	rrcf	(??_make_master_closeness+26)^0,f,c
  5712   0024B2  90D8               	bcf	status,0,c
  5713   0024B4  3222               	rrcf	(??_make_master_closeness+27)^0,f,c
  5714   0024B6  3221               	rrcf	(??_make_master_closeness+26)^0,f,c
  5715   0024B8  5025               	movf	make_master_closeness@i^0,w,c
  5716   0024BA  0D02               	mullw	2
  5717   0024BC  CFF3 F023          	movff	prodl,??_make_master_closeness+28
  5718   0024C0  CFF4 F024          	movff	prodh,??_make_master_closeness+29
  5719   0024C4  5023               	movf	(??_make_master_closeness+28)^0,w,c
  5720   0024C6  2405               	addwf	make_master_closeness@master_closeness^0,w,c
  5721   0024C8  6ED9               	movwf	fsr2l,c
  5722   0024CA  5024               	movf	(??_make_master_closeness+29)^0,w,c
  5723   0024CC  2006               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  5724   0024CE  6EDA               	movwf	fsr2h,c
  5725   0024D0  C021  FFDE         	movff	??_make_master_closeness+26,postinc2
  5726   0024D4  C022  FFDD         	movff	??_make_master_closeness+27,postdec2
  5727   0024D8                     
  5728                           ;colour_identify.c: 122:     }
  5729   0024D8  2A25               	incf	make_master_closeness@i^0,f,c
  5730   0024DA  0E09               	movlw	9
  5731   0024DC  6425               	cpfsgt	make_master_closeness@i^0,c
  5732   0024DE  EF73  F012         	goto	u1331
  5733   0024E2  EF75  F012         	goto	u1330
  5734   0024E6                     u1331:
  5735   0024E6  EFF2  F011         	goto	l2711
  5736   0024EA                     u1330:
  5737   0024EA  0012               	return		;funcret
  5738   0024EC                     __end_of_make_master_closeness:
  5739                           	callstack 0
  5740                           
  5741 ;; *************** function _determine_card *****************
  5742 ;; Defined at:
  5743 ;;		line 125 in file "colour_identify.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  master_close    2    0[COMRAM] PTR unsigned int 
  5746 ;;		 -> card_response@master_closeness(18), 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  i               1    9[COMRAM] enum E14551
  5749 ;;  current_smal    2    6[COMRAM] unsigned int 
  5750 ;;  predicted_co    1    8[COMRAM] enum E14551
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      enum E14551
  5753 ;; Registers used:
  5754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5760 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5761 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5762 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5763 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5764 ;;Total ram usage:       10 bytes
  5765 ;; Hardware stack levels used: 1
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_card_response
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           	psect	text31
  5774   0028AA                     __ptext31:
  5775                           	callstack 0
  5776   0028AA                     _determine_card:
  5777                           	callstack 29
  5778   0028AA                     
  5779                           ;colour_identify.c: 127:     colour predicted_colour = RED;
  5780   0028AA  0E01               	movlw	1
  5781   0028AC  6E09               	movwf	determine_card@predicted_colour^0,c
  5782   0028AE                     
  5783                           ;colour_identify.c: 128:     unsigned int current_smallest = master_closeness[RED];
  5784   0028AE  EE20 F002          	lfsr	2,2
  5785   0028B2  5001               	movf	determine_card@master_closeness^0,w,c
  5786   0028B4  26D9               	addwf	fsr2l,f,c
  5787   0028B6  5002               	movf	(determine_card@master_closeness+1)^0,w,c
  5788   0028B8  22DA               	addwfc	fsr2h,f,c
  5789   0028BA  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5790   0028BE  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5791   0028C2                     
  5792                           ;colour_identify.c: 129:     for(colour i = GREEN; i<=BLACK; i++){
  5793   0028C2  0E02               	movlw	2
  5794   0028C4  6E0A               	movwf	determine_card@i^0,c
  5795   0028C6                     l2727:
  5796                           
  5797                           ;colour_identify.c: 130:         if(master_closeness[i] < current_smallest){
  5798   0028C6  500A               	movf	determine_card@i^0,w,c
  5799   0028C8  0D02               	mullw	2
  5800   0028CA  CFF3 F003          	movff	prodl,??_determine_card
  5801   0028CE  CFF4 F004          	movff	prodh,??_determine_card+1
  5802   0028D2  5003               	movf	??_determine_card^0,w,c
  5803   0028D4  2401               	addwf	determine_card@master_closeness^0,w,c
  5804   0028D6  6ED9               	movwf	fsr2l,c
  5805   0028D8  5004               	movf	(??_determine_card+1)^0,w,c
  5806   0028DA  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5807   0028DC  6EDA               	movwf	fsr2h,c
  5808   0028DE  5007               	movf	determine_card@current_smallest^0,w,c
  5809   0028E0  5CDE               	subwf	postinc2,w,c
  5810   0028E2  5008               	movf	(determine_card@current_smallest+1)^0,w,c
  5811   0028E4  58DE               	subwfb	postinc2,w,c
  5812   0028E6  B0D8               	btfsc	status,0,c
  5813   0028E8  EF78  F014         	goto	u1341
  5814   0028EC  EF7A  F014         	goto	u1340
  5815   0028F0                     u1341:
  5816   0028F0  EF8C  F014         	goto	l2733
  5817   0028F4                     u1340:
  5818   0028F4                     
  5819                           ;colour_identify.c: 131:             current_smallest = master_closeness[i];
  5820   0028F4  500A               	movf	determine_card@i^0,w,c
  5821   0028F6  0D02               	mullw	2
  5822   0028F8  CFF3 F003          	movff	prodl,??_determine_card
  5823   0028FC  CFF4 F004          	movff	prodh,??_determine_card+1
  5824   002900  5003               	movf	??_determine_card^0,w,c
  5825   002902  2401               	addwf	determine_card@master_closeness^0,w,c
  5826   002904  6ED9               	movwf	fsr2l,c
  5827   002906  5004               	movf	(??_determine_card+1)^0,w,c
  5828   002908  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5829   00290A  6EDA               	movwf	fsr2h,c
  5830   00290C  CFDE F007          	movff	postinc2,determine_card@current_smallest
  5831   002910  CFDD F008          	movff	postdec2,determine_card@current_smallest+1
  5832   002914                     
  5833                           ;colour_identify.c: 132:             predicted_colour = i;
  5834   002914  C00A  F009         	movff	determine_card@i,determine_card@predicted_colour
  5835   002918                     l2733:
  5836                           
  5837                           ;colour_identify.c: 134:     }
  5838   002918  2A0A               	incf	determine_card@i^0,f,c
  5839   00291A  0E09               	movlw	9
  5840   00291C  640A               	cpfsgt	determine_card@i^0,c
  5841   00291E  EF93  F014         	goto	u1351
  5842   002922  EF95  F014         	goto	u1350
  5843   002926                     u1351:
  5844   002926  EF63  F014         	goto	l2727
  5845   00292A                     u1350:
  5846   00292A                     
  5847                           ;colour_identify.c: 135:     return predicted_colour;
  5848   00292A  5009               	movf	determine_card@predicted_colour^0,w,c
  5849   00292C  0012               	return		;funcret
  5850   00292E                     __end_of_determine_card:
  5851                           	callstack 0
  5852                           
  5853 ;; *************** function _collect_avg_readings *****************
  5854 ;; Defined at:
  5855 ;;		line 46 in file "colour_identify.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  clear_read      2   11[COMRAM] PTR unsigned int 
  5858 ;;		 -> main@clear_read(2), 
  5859 ;;  red_read        2   13[COMRAM] PTR unsigned int 
  5860 ;;		 -> main@red_read(2), 
  5861 ;;  green_read      2   15[COMRAM] PTR unsigned int 
  5862 ;;		 -> main@green_read(2), 
  5863 ;;  blue_read       2   17[COMRAM] PTR unsigned int 
  5864 ;;		 -> main@blue_read(2), 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  i               2   29[COMRAM] int 
  5867 ;;  i               2   27[COMRAM] int 
  5868 ;;  i               2   25[COMRAM] int 
  5869 ;;  i               2   23[COMRAM] int 
  5870 ;;  i               2   21[COMRAM] int 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5880 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5881 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5882 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5883 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;Total ram usage:       20 bytes
  5885 ;; Hardware stack levels used: 1
  5886 ;; Hardware stack levels required when called: 3
  5887 ;; This function calls:
  5888 ;;		_color_read_Blue
  5889 ;;		_color_read_Clear
  5890 ;;		_color_read_Green
  5891 ;;		_color_read_Red
  5892 ;; This function is called by:
  5893 ;;		_main
  5894 ;;		_card_response
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text32
  5899   0016F2                     __ptext32:
  5900                           	callstack 0
  5901   0016F2                     _collect_avg_readings:
  5902                           	callstack 27
  5903   0016F2                     
  5904                           ;colour_identify.c: 46: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 47: {;
      +                          colour_identify.c: 50:     for (int i = 0; i <= 500; i++){
  5905   0016F2  0E00               	movlw	0
  5906   0016F4  6E17               	movwf	(collect_avg_readings@i+1)^0,c
  5907   0016F6  0E00               	movlw	0
  5908   0016F8  6E16               	movwf	collect_avg_readings@i^0,c
  5909   0016FA                     l2603:
  5910                           
  5911                           ;colour_identify.c: 51:         *clear_read = color_read_Clear();
  5912   0016FA  ECB0  F015         	call	_color_read_Clear	;wreg free
  5913   0016FE  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  5914   001702  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  5915   001706  C005  FFDE         	movff	?_color_read_Clear,postinc2
  5916   00170A  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  5917                           
  5918                           ;colour_identify.c: 52:         *red_read = color_read_Red();
  5919   00170E  EC60  F015         	call	_color_read_Red	;wreg free
  5920   001712  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5921   001716  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5922   00171A  C005  FFDE         	movff	?_color_read_Red,postinc2
  5923   00171E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  5924                           
  5925                           ;colour_identify.c: 53:         *green_read = color_read_Green();
  5926   001722  EC88  F015         	call	_color_read_Green	;wreg free
  5927   001726  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5928   00172A  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5929   00172E  C005  FFDE         	movff	?_color_read_Green,postinc2
  5930   001732  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  5931                           
  5932                           ;colour_identify.c: 54:         *blue_read = color_read_Blue();
  5933   001736  ECD8  F015         	call	_color_read_Blue	;wreg free
  5934   00173A  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5935   00173E  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5936   001742  C005  FFDE         	movff	?_color_read_Blue,postinc2
  5937   001746  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  5938   00174A                     
  5939                           ;colour_identify.c: 55:     }
  5940   00174A  4A16               	infsnz	collect_avg_readings@i^0,f,c
  5941   00174C  2A17               	incf	(collect_avg_readings@i+1)^0,f,c
  5942   00174E  BE17               	btfsc	(collect_avg_readings@i+1)^0,7,c
  5943   001750  EFB3  F00B         	goto	u1261
  5944   001754  0EF5               	movlw	245
  5945   001756  5C16               	subwf	collect_avg_readings@i^0,w,c
  5946   001758  0E01               	movlw	1
  5947   00175A  5817               	subwfb	(collect_avg_readings@i+1)^0,w,c
  5948   00175C  A0D8               	btfss	status,0,c
  5949   00175E  EFB3  F00B         	goto	u1261
  5950   001762  EFB5  F00B         	goto	u1260
  5951   001766                     u1261:
  5952   001766  EF7D  F00B         	goto	l2603
  5953   00176A                     u1260:
  5954   00176A                     
  5955                           ;colour_identify.c: 59:     for(int i = 0; i <= 2; i++){
  5956   00176A  0E00               	movlw	0
  5957   00176C  6E19               	movwf	(collect_avg_readings@i_1561+1)^0,c
  5958   00176E  0E00               	movlw	0
  5959   001770  6E18               	movwf	collect_avg_readings@i_1561^0,c
  5960   001772                     l2615:
  5961                           
  5962                           ;colour_identify.c: 60:         *clear_read += color_read_Clear();
  5963   001772  ECB0  F015         	call	_color_read_Clear	;wreg free
  5964   001776  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  5965   00177A  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  5966   00177E  5005               	movf	?_color_read_Clear^0,w,c
  5967   001780  26DE               	addwf	postinc2,f,c
  5968   001782  5006               	movf	(?_color_read_Clear+1)^0,w,c
  5969   001784  22DD               	addwfc	postdec2,f,c
  5970   001786                     
  5971                           ;colour_identify.c: 61:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5972   001786  0E11               	movlw	17
  5973   001788  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  5974   00178A  0E3C               	movlw	60
  5975   00178C  6E14               	movwf	??_collect_avg_readings^0,c
  5976   00178E  0ECB               	movlw	203
  5977   001790                     u1697:
  5978   001790  2EE8               	decfsz	wreg,f,c
  5979   001792  D7FE               	bra	u1697
  5980   001794  2E14               	decfsz	??_collect_avg_readings^0,f,c
  5981   001796  D7FC               	bra	u1697
  5982   001798  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5983   00179A  D7FA               	bra	u1697
  5984   00179C  F000               	nop	
  5985   00179E                     
  5986                           ;colour_identify.c: 62:     }
  5987   00179E  4A18               	infsnz	collect_avg_readings@i_1561^0,f,c
  5988   0017A0  2A19               	incf	(collect_avg_readings@i_1561+1)^0,f,c
  5989   0017A2  BE19               	btfsc	(collect_avg_readings@i_1561+1)^0,7,c
  5990   0017A4  EFDD  F00B         	goto	u1271
  5991   0017A8  5019               	movf	(collect_avg_readings@i_1561+1)^0,w,c
  5992   0017AA  E109               	bnz	u1270
  5993   0017AC  0E03               	movlw	3
  5994   0017AE  5C18               	subwf	collect_avg_readings@i_1561^0,w,c
  5995   0017B0  A0D8               	btfss	status,0,c
  5996   0017B2  EFDD  F00B         	goto	u1271
  5997   0017B6  EFDF  F00B         	goto	u1270
  5998   0017BA                     u1271:
  5999   0017BA  EFB9  F00B         	goto	l2615
  6000   0017BE                     u1270:
  6001   0017BE                     
  6002                           ;colour_identify.c: 63:     *clear_read = *clear_read/4;
  6003   0017BE  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6004   0017C2  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6005   0017C6  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6006   0017CA  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6007   0017CE  90D8               	bcf	status,0,c
  6008   0017D0  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6009   0017D2  3214               	rrcf	??_collect_avg_readings^0,f,c
  6010   0017D4  90D8               	bcf	status,0,c
  6011   0017D6  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6012   0017D8  3214               	rrcf	??_collect_avg_readings^0,f,c
  6013   0017DA  C00C  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6014   0017DE  C00D  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6015   0017E2  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6016   0017E6  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6017   0017EA                     
  6018                           ;colour_identify.c: 65:     for(int i = 0; i <= 2; i++){
  6019   0017EA  0E00               	movlw	0
  6020   0017EC  6E1B               	movwf	(collect_avg_readings@i_1562+1)^0,c
  6021   0017EE  0E00               	movlw	0
  6022   0017F0  6E1A               	movwf	collect_avg_readings@i_1562^0,c
  6023   0017F2                     l2631:
  6024                           
  6025                           ;colour_identify.c: 66:         *red_read += color_read_Red();
  6026   0017F2  EC60  F015         	call	_color_read_Red	;wreg free
  6027   0017F6  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6028   0017FA  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6029   0017FE  5005               	movf	?_color_read_Red^0,w,c
  6030   001800  26DE               	addwf	postinc2,f,c
  6031   001802  5006               	movf	(?_color_read_Red+1)^0,w,c
  6032   001804  22DD               	addwfc	postdec2,f,c
  6033   001806                     
  6034                           ;colour_identify.c: 67:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6035   001806  0E11               	movlw	17
  6036   001808  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6037   00180A  0E3C               	movlw	60
  6038   00180C  6E14               	movwf	??_collect_avg_readings^0,c
  6039   00180E  0ECB               	movlw	203
  6040   001810                     u1707:
  6041   001810  2EE8               	decfsz	wreg,f,c
  6042   001812  D7FE               	bra	u1707
  6043   001814  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6044   001816  D7FC               	bra	u1707
  6045   001818  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6046   00181A  D7FA               	bra	u1707
  6047   00181C  F000               	nop	
  6048   00181E                     
  6049                           ;colour_identify.c: 68:     }
  6050   00181E  4A1A               	infsnz	collect_avg_readings@i_1562^0,f,c
  6051   001820  2A1B               	incf	(collect_avg_readings@i_1562+1)^0,f,c
  6052   001822  BE1B               	btfsc	(collect_avg_readings@i_1562+1)^0,7,c
  6053   001824  EF1D  F00C         	goto	u1281
  6054   001828  501B               	movf	(collect_avg_readings@i_1562+1)^0,w,c
  6055   00182A  E109               	bnz	u1280
  6056   00182C  0E03               	movlw	3
  6057   00182E  5C1A               	subwf	collect_avg_readings@i_1562^0,w,c
  6058   001830  A0D8               	btfss	status,0,c
  6059   001832  EF1D  F00C         	goto	u1281
  6060   001836  EF1F  F00C         	goto	u1280
  6061   00183A                     u1281:
  6062   00183A  EFF9  F00B         	goto	l2631
  6063   00183E                     u1280:
  6064   00183E                     
  6065                           ;colour_identify.c: 69:     *red_read = *red_read/4;
  6066   00183E  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6067   001842  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6068   001846  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6069   00184A  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6070   00184E  90D8               	bcf	status,0,c
  6071   001850  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6072   001852  3214               	rrcf	??_collect_avg_readings^0,f,c
  6073   001854  90D8               	bcf	status,0,c
  6074   001856  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6075   001858  3214               	rrcf	??_collect_avg_readings^0,f,c
  6076   00185A  C00E  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6077   00185E  C00F  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6078   001862  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6079   001866  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6080   00186A                     
  6081                           ;colour_identify.c: 71:     for(int i = 0; i <= 2; i++){
  6082   00186A  0E00               	movlw	0
  6083   00186C  6E1D               	movwf	(collect_avg_readings@i_1563+1)^0,c
  6084   00186E  0E00               	movlw	0
  6085   001870  6E1C               	movwf	collect_avg_readings@i_1563^0,c
  6086   001872                     l2647:
  6087                           
  6088                           ;colour_identify.c: 72:         *green_read += color_read_Green();
  6089   001872  EC88  F015         	call	_color_read_Green	;wreg free
  6090   001876  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6091   00187A  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6092   00187E  5005               	movf	?_color_read_Green^0,w,c
  6093   001880  26DE               	addwf	postinc2,f,c
  6094   001882  5006               	movf	(?_color_read_Green+1)^0,w,c
  6095   001884  22DD               	addwfc	postdec2,f,c
  6096   001886                     
  6097                           ;colour_identify.c: 73:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6098   001886  0E11               	movlw	17
  6099   001888  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6100   00188A  0E3C               	movlw	60
  6101   00188C  6E14               	movwf	??_collect_avg_readings^0,c
  6102   00188E  0ECB               	movlw	203
  6103   001890                     u1717:
  6104   001890  2EE8               	decfsz	wreg,f,c
  6105   001892  D7FE               	bra	u1717
  6106   001894  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6107   001896  D7FC               	bra	u1717
  6108   001898  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6109   00189A  D7FA               	bra	u1717
  6110   00189C  F000               	nop	
  6111   00189E                     
  6112                           ;colour_identify.c: 74:     }
  6113   00189E  4A1C               	infsnz	collect_avg_readings@i_1563^0,f,c
  6114   0018A0  2A1D               	incf	(collect_avg_readings@i_1563+1)^0,f,c
  6115   0018A2  BE1D               	btfsc	(collect_avg_readings@i_1563+1)^0,7,c
  6116   0018A4  EF5D  F00C         	goto	u1291
  6117   0018A8  501D               	movf	(collect_avg_readings@i_1563+1)^0,w,c
  6118   0018AA  E109               	bnz	u1290
  6119   0018AC  0E03               	movlw	3
  6120   0018AE  5C1C               	subwf	collect_avg_readings@i_1563^0,w,c
  6121   0018B0  A0D8               	btfss	status,0,c
  6122   0018B2  EF5D  F00C         	goto	u1291
  6123   0018B6  EF5F  F00C         	goto	u1290
  6124   0018BA                     u1291:
  6125   0018BA  EF39  F00C         	goto	l2647
  6126   0018BE                     u1290:
  6127   0018BE                     
  6128                           ;colour_identify.c: 75:     *green_read = *green_read/4;
  6129   0018BE  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6130   0018C2  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6131   0018C6  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6132   0018CA  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6133   0018CE  90D8               	bcf	status,0,c
  6134   0018D0  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6135   0018D2  3214               	rrcf	??_collect_avg_readings^0,f,c
  6136   0018D4  90D8               	bcf	status,0,c
  6137   0018D6  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6138   0018D8  3214               	rrcf	??_collect_avg_readings^0,f,c
  6139   0018DA  C010  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6140   0018DE  C011  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6141   0018E2  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6142   0018E6  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6143   0018EA                     
  6144                           ;colour_identify.c: 77:     for(int i = 0; i <= 2; i++){
  6145   0018EA  0E00               	movlw	0
  6146   0018EC  6E1F               	movwf	(collect_avg_readings@i_1564+1)^0,c
  6147   0018EE  0E00               	movlw	0
  6148   0018F0  6E1E               	movwf	collect_avg_readings@i_1564^0,c
  6149   0018F2                     l2663:
  6150                           
  6151                           ;colour_identify.c: 78:         *blue_read += color_read_Blue();
  6152   0018F2  ECD8  F015         	call	_color_read_Blue	;wreg free
  6153   0018F6  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6154   0018FA  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6155   0018FE  5005               	movf	?_color_read_Blue^0,w,c
  6156   001900  26DE               	addwf	postinc2,f,c
  6157   001902  5006               	movf	(?_color_read_Blue+1)^0,w,c
  6158   001904  22DD               	addwfc	postdec2,f,c
  6159   001906                     
  6160                           ;colour_identify.c: 79:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6161   001906  0E11               	movlw	17
  6162   001908  6E15               	movwf	(??_collect_avg_readings+1)^0,c
  6163   00190A  0E3C               	movlw	60
  6164   00190C  6E14               	movwf	??_collect_avg_readings^0,c
  6165   00190E  0ECB               	movlw	203
  6166   001910                     u1727:
  6167   001910  2EE8               	decfsz	wreg,f,c
  6168   001912  D7FE               	bra	u1727
  6169   001914  2E14               	decfsz	??_collect_avg_readings^0,f,c
  6170   001916  D7FC               	bra	u1727
  6171   001918  2E15               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6172   00191A  D7FA               	bra	u1727
  6173   00191C  F000               	nop	
  6174   00191E                     
  6175                           ;colour_identify.c: 80:     }
  6176   00191E  4A1E               	infsnz	collect_avg_readings@i_1564^0,f,c
  6177   001920  2A1F               	incf	(collect_avg_readings@i_1564+1)^0,f,c
  6178   001922  BE1F               	btfsc	(collect_avg_readings@i_1564+1)^0,7,c
  6179   001924  EF9D  F00C         	goto	u1301
  6180   001928  501F               	movf	(collect_avg_readings@i_1564+1)^0,w,c
  6181   00192A  E109               	bnz	u1300
  6182   00192C  0E03               	movlw	3
  6183   00192E  5C1E               	subwf	collect_avg_readings@i_1564^0,w,c
  6184   001930  A0D8               	btfss	status,0,c
  6185   001932  EF9D  F00C         	goto	u1301
  6186   001936  EF9F  F00C         	goto	u1300
  6187   00193A                     u1301:
  6188   00193A  EF79  F00C         	goto	l2663
  6189   00193E                     u1300:
  6190   00193E                     
  6191                           ;colour_identify.c: 81:     *blue_read = *blue_read/4;
  6192   00193E  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6193   001942  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6194   001946  CFDE F014          	movff	postinc2,??_collect_avg_readings
  6195   00194A  CFDD F015          	movff	postdec2,??_collect_avg_readings+1
  6196   00194E  90D8               	bcf	status,0,c
  6197   001950  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6198   001952  3214               	rrcf	??_collect_avg_readings^0,f,c
  6199   001954  90D8               	bcf	status,0,c
  6200   001956  3215               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6201   001958  3214               	rrcf	??_collect_avg_readings^0,f,c
  6202   00195A  C012  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6203   00195E  C013  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6204   001962  C014  FFDE         	movff	??_collect_avg_readings,postinc2
  6205   001966  C015  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6206   00196A  0012               	return		;funcret
  6207   00196C                     __end_of_collect_avg_readings:
  6208                           	callstack 0
  6209                           
  6210 ;; *************** function _color_read_Red *****************
  6211 ;; Defined at:
  6212 ;;		line 29 in file "color.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  tmp             2    9[COMRAM] unsigned int 
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  2    4[COMRAM] unsigned int 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2, status,0, cstack
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6226 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6228 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6229 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6230 ;;Total ram usage:        7 bytes
  6231 ;; Hardware stack levels used: 1
  6232 ;; Hardware stack levels required when called: 2
  6233 ;; This function calls:
  6234 ;;		_I2C_2_Master_Read
  6235 ;;		_I2C_2_Master_RepStart
  6236 ;;		_I2C_2_Master_Start
  6237 ;;		_I2C_2_Master_Stop
  6238 ;;		_I2C_2_Master_Write
  6239 ;; This function is called by:
  6240 ;;		_collect_avg_readings
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text33
  6245   002AC0                     __ptext33:
  6246                           	callstack 0
  6247   002AC0                     _color_read_Red:
  6248                           	callstack 27
  6249   002AC0                     
  6250                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6251   002AC0  EC29  F017         	call	_I2C_2_Master_Start	;wreg free
  6252                           
  6253                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6254   002AC4  0E52               	movlw	82
  6255   002AC6  EC1E  F017         	call	_I2C_2_Master_Write
  6256                           
  6257                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6258   002ACA  0EB6               	movlw	182
  6259   002ACC  EC1E  F017         	call	_I2C_2_Master_Write
  6260                           
  6261                           ;color.c: 35:  I2C_2_Master_RepStart();
  6262   002AD0  EC2E  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6263                           
  6264                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6265   002AD4  0E53               	movlw	83
  6266   002AD6  EC1E  F017         	call	_I2C_2_Master_Write
  6267                           
  6268                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6269   002ADA  0E01               	movlw	1
  6270   002ADC  EC22  F016         	call	_I2C_2_Master_Read
  6271   002AE0  6E07               	movwf	??_color_read_Red^0,c
  6272   002AE2  5007               	movf	??_color_read_Red^0,w,c
  6273   002AE4  6E0A               	movwf	color_read_Red@tmp^0,c
  6274   002AE6  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  6275                           
  6276                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6277   002AE8  0E00               	movlw	0
  6278   002AEA  EC22  F016         	call	_I2C_2_Master_Read
  6279   002AEE  6E07               	movwf	??_color_read_Red^0,c
  6280   002AF0  5007               	movf	??_color_read_Red^0,w,c
  6281   002AF2  6E09               	movwf	(??_color_read_Red+2)^0,c
  6282   002AF4  6A08               	clrf	(??_color_read_Red+1)^0,c
  6283   002AF6  500A               	movf	color_read_Red@tmp^0,w,c
  6284   002AF8  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  6285   002AFA  6E0A               	movwf	color_read_Red@tmp^0,c
  6286   002AFC  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  6287   002AFE  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  6288   002B00  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  6289                           
  6290                           ;color.c: 39:  I2C_2_Master_Stop();
  6291   002B02  EC24  F017         	call	_I2C_2_Master_Stop	;wreg free
  6292   002B06                     
  6293                           ;color.c: 40:  return tmp;
  6294   002B06  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  6295   002B0A  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6296   002B0E  0012               	return		;funcret
  6297   002B10                     __end_of_color_read_Red:
  6298                           	callstack 0
  6299                           
  6300 ;; *************** function _color_read_Green *****************
  6301 ;; Defined at:
  6302 ;;		line 43 in file "color.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;		None
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  tmp             2    9[COMRAM] unsigned int 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  2    4[COMRAM] unsigned int 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6318 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6319 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6320 ;;Total ram usage:        7 bytes
  6321 ;; Hardware stack levels used: 1
  6322 ;; Hardware stack levels required when called: 2
  6323 ;; This function calls:
  6324 ;;		_I2C_2_Master_Read
  6325 ;;		_I2C_2_Master_RepStart
  6326 ;;		_I2C_2_Master_Start
  6327 ;;		_I2C_2_Master_Stop
  6328 ;;		_I2C_2_Master_Write
  6329 ;; This function is called by:
  6330 ;;		_collect_avg_readings
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text34
  6335   002B10                     __ptext34:
  6336                           	callstack 0
  6337   002B10                     _color_read_Green:
  6338                           	callstack 27
  6339   002B10                     
  6340                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6341   002B10  EC29  F017         	call	_I2C_2_Master_Start	;wreg free
  6342                           
  6343                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6344   002B14  0E52               	movlw	82
  6345   002B16  EC1E  F017         	call	_I2C_2_Master_Write
  6346                           
  6347                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6348   002B1A  0EB8               	movlw	184
  6349   002B1C  EC1E  F017         	call	_I2C_2_Master_Write
  6350                           
  6351                           ;color.c: 49:  I2C_2_Master_RepStart();
  6352   002B20  EC2E  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6353                           
  6354                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6355   002B24  0E53               	movlw	83
  6356   002B26  EC1E  F017         	call	_I2C_2_Master_Write
  6357                           
  6358                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6359   002B2A  0E01               	movlw	1
  6360   002B2C  EC22  F016         	call	_I2C_2_Master_Read
  6361   002B30  6E07               	movwf	??_color_read_Green^0,c
  6362   002B32  5007               	movf	??_color_read_Green^0,w,c
  6363   002B34  6E0A               	movwf	color_read_Green@tmp^0,c
  6364   002B36  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  6365                           
  6366                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6367   002B38  0E00               	movlw	0
  6368   002B3A  EC22  F016         	call	_I2C_2_Master_Read
  6369   002B3E  6E07               	movwf	??_color_read_Green^0,c
  6370   002B40  5007               	movf	??_color_read_Green^0,w,c
  6371   002B42  6E09               	movwf	(??_color_read_Green+2)^0,c
  6372   002B44  6A08               	clrf	(??_color_read_Green+1)^0,c
  6373   002B46  500A               	movf	color_read_Green@tmp^0,w,c
  6374   002B48  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  6375   002B4A  6E0A               	movwf	color_read_Green@tmp^0,c
  6376   002B4C  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  6377   002B4E  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  6378   002B50  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  6379                           
  6380                           ;color.c: 53:  I2C_2_Master_Stop();
  6381   002B52  EC24  F017         	call	_I2C_2_Master_Stop	;wreg free
  6382   002B56                     
  6383                           ;color.c: 54:  return tmp;
  6384   002B56  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  6385   002B5A  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6386   002B5E  0012               	return		;funcret
  6387   002B60                     __end_of_color_read_Green:
  6388                           	callstack 0
  6389                           
  6390 ;; *************** function _color_read_Clear *****************
  6391 ;; Defined at:
  6392 ;;		line 71 in file "color.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  tmp             2    9[COMRAM] unsigned int 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  2    4[COMRAM] unsigned int 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6408 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6409 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6410 ;;Total ram usage:        7 bytes
  6411 ;; Hardware stack levels used: 1
  6412 ;; Hardware stack levels required when called: 2
  6413 ;; This function calls:
  6414 ;;		_I2C_2_Master_Read
  6415 ;;		_I2C_2_Master_RepStart
  6416 ;;		_I2C_2_Master_Start
  6417 ;;		_I2C_2_Master_Stop
  6418 ;;		_I2C_2_Master_Write
  6419 ;; This function is called by:
  6420 ;;		_clear_read_calibration
  6421 ;;		_collect_avg_readings
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text35
  6426   002B60                     __ptext35:
  6427                           	callstack 0
  6428   002B60                     _color_read_Clear:
  6429                           	callstack 27
  6430   002B60                     
  6431                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6432   002B60  EC29  F017         	call	_I2C_2_Master_Start	;wreg free
  6433                           
  6434                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6435   002B64  0E52               	movlw	82
  6436   002B66  EC1E  F017         	call	_I2C_2_Master_Write
  6437                           
  6438                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6439   002B6A  0EB4               	movlw	180
  6440   002B6C  EC1E  F017         	call	_I2C_2_Master_Write
  6441                           
  6442                           ;color.c: 77:  I2C_2_Master_RepStart();
  6443   002B70  EC2E  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6444                           
  6445                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6446   002B74  0E53               	movlw	83
  6447   002B76  EC1E  F017         	call	_I2C_2_Master_Write
  6448                           
  6449                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6450   002B7A  0E01               	movlw	1
  6451   002B7C  EC22  F016         	call	_I2C_2_Master_Read
  6452   002B80  6E07               	movwf	??_color_read_Clear^0,c
  6453   002B82  5007               	movf	??_color_read_Clear^0,w,c
  6454   002B84  6E0A               	movwf	color_read_Clear@tmp^0,c
  6455   002B86  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  6456                           
  6457                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6458   002B88  0E00               	movlw	0
  6459   002B8A  EC22  F016         	call	_I2C_2_Master_Read
  6460   002B8E  6E07               	movwf	??_color_read_Clear^0,c
  6461   002B90  5007               	movf	??_color_read_Clear^0,w,c
  6462   002B92  6E09               	movwf	(??_color_read_Clear+2)^0,c
  6463   002B94  6A08               	clrf	(??_color_read_Clear+1)^0,c
  6464   002B96  500A               	movf	color_read_Clear@tmp^0,w,c
  6465   002B98  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  6466   002B9A  6E0A               	movwf	color_read_Clear@tmp^0,c
  6467   002B9C  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  6468   002B9E  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  6469   002BA0  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  6470                           
  6471                           ;color.c: 81:  I2C_2_Master_Stop();
  6472   002BA2  EC24  F017         	call	_I2C_2_Master_Stop	;wreg free
  6473   002BA6                     
  6474                           ;color.c: 82:  return tmp;
  6475   002BA6  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  6476   002BAA  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6477   002BAE  0012               	return		;funcret
  6478   002BB0                     __end_of_color_read_Clear:
  6479                           	callstack 0
  6480                           
  6481 ;; *************** function _color_read_Blue *****************
  6482 ;; Defined at:
  6483 ;;		line 57 in file "color.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  tmp             2    9[COMRAM] unsigned int 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  2    4[COMRAM] unsigned int 
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6499 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6500 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6501 ;;Total ram usage:        7 bytes
  6502 ;; Hardware stack levels used: 1
  6503 ;; Hardware stack levels required when called: 2
  6504 ;; This function calls:
  6505 ;;		_I2C_2_Master_Read
  6506 ;;		_I2C_2_Master_RepStart
  6507 ;;		_I2C_2_Master_Start
  6508 ;;		_I2C_2_Master_Stop
  6509 ;;		_I2C_2_Master_Write
  6510 ;; This function is called by:
  6511 ;;		_collect_avg_readings
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text36
  6516   002BB0                     __ptext36:
  6517                           	callstack 0
  6518   002BB0                     _color_read_Blue:
  6519                           	callstack 27
  6520   002BB0                     
  6521                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6522   002BB0  EC29  F017         	call	_I2C_2_Master_Start	;wreg free
  6523                           
  6524                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6525   002BB4  0E52               	movlw	82
  6526   002BB6  EC1E  F017         	call	_I2C_2_Master_Write
  6527                           
  6528                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6529   002BBA  0EBA               	movlw	186
  6530   002BBC  EC1E  F017         	call	_I2C_2_Master_Write
  6531                           
  6532                           ;color.c: 63:  I2C_2_Master_RepStart();
  6533   002BC0  EC2E  F017         	call	_I2C_2_Master_RepStart	;wreg free
  6534                           
  6535                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6536   002BC4  0E53               	movlw	83
  6537   002BC6  EC1E  F017         	call	_I2C_2_Master_Write
  6538                           
  6539                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6540   002BCA  0E01               	movlw	1
  6541   002BCC  EC22  F016         	call	_I2C_2_Master_Read
  6542   002BD0  6E07               	movwf	??_color_read_Blue^0,c
  6543   002BD2  5007               	movf	??_color_read_Blue^0,w,c
  6544   002BD4  6E0A               	movwf	color_read_Blue@tmp^0,c
  6545   002BD6  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  6546                           
  6547                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6548   002BD8  0E00               	movlw	0
  6549   002BDA  EC22  F016         	call	_I2C_2_Master_Read
  6550   002BDE  6E07               	movwf	??_color_read_Blue^0,c
  6551   002BE0  5007               	movf	??_color_read_Blue^0,w,c
  6552   002BE2  6E09               	movwf	(??_color_read_Blue+2)^0,c
  6553   002BE4  6A08               	clrf	(??_color_read_Blue+1)^0,c
  6554   002BE6  500A               	movf	color_read_Blue@tmp^0,w,c
  6555   002BE8  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  6556   002BEA  6E0A               	movwf	color_read_Blue@tmp^0,c
  6557   002BEC  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  6558   002BEE  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  6559   002BF0  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  6560                           
  6561                           ;color.c: 67:  I2C_2_Master_Stop();
  6562   002BF2  EC24  F017         	call	_I2C_2_Master_Stop	;wreg free
  6563   002BF6                     
  6564                           ;color.c: 68:  return tmp;
  6565   002BF6  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  6566   002BFA  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6567   002BFE  0012               	return		;funcret
  6568   002C00                     __end_of_color_read_Blue:
  6569                           	callstack 0
  6570                           
  6571 ;; *************** function _I2C_2_Master_Write *****************
  6572 ;; Defined at:
  6573 ;;		line 45 in file "i2c.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  data_byte       1    wreg     unsigned char 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  data_byte       1    1[COMRAM] unsigned char 
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  1    wreg      void 
  6580 ;; Registers used:
  6581 ;;		wreg, status,2, status,0, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6591 ;;Total ram usage:        1 bytes
  6592 ;; Hardware stack levels used: 1
  6593 ;; Hardware stack levels required when called: 1
  6594 ;; This function calls:
  6595 ;;		_I2C_2_Master_Idle
  6596 ;; This function is called by:
  6597 ;;		_color_writetoaddr
  6598 ;;		_color_read_Red
  6599 ;;		_color_read_Green
  6600 ;;		_color_read_Blue
  6601 ;;		_color_read_Clear
  6602 ;;		_read_interrupt_status
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text37
  6607   002E3C                     __ptext37:
  6608                           	callstack 0
  6609   002E3C                     _I2C_2_Master_Write:
  6610                           	callstack 27
  6611                           
  6612                           ;incstack = 0
  6613                           ;I2C_2_Master_Write@data_byte stored from wreg
  6614   002E3C  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  6615   002E3E                     
  6616                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6617   002E3E  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6618   002E42                     
  6619                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6620   002E42  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6621   002E46  0012               	return		;funcret
  6622   002E48                     __end_of_I2C_2_Master_Write:
  6623                           	callstack 0
  6624                           
  6625 ;; *************** function _I2C_2_Master_Stop *****************
  6626 ;; Defined at:
  6627 ;;		line 39 in file "i2c.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      void 
  6634 ;; Registers used:
  6635 ;;		wreg, status,2, status,0, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6645 ;;Total ram usage:        0 bytes
  6646 ;; Hardware stack levels used: 1
  6647 ;; Hardware stack levels required when called: 1
  6648 ;; This function calls:
  6649 ;;		_I2C_2_Master_Idle
  6650 ;; This function is called by:
  6651 ;;		_color_writetoaddr
  6652 ;;		_color_read_Red
  6653 ;;		_color_read_Green
  6654 ;;		_color_read_Blue
  6655 ;;		_color_read_Clear
  6656 ;;		_read_interrupt_status
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text38
  6661   002E48                     __ptext38:
  6662                           	callstack 0
  6663   002E48                     _I2C_2_Master_Stop:
  6664                           	callstack 27
  6665   002E48                     
  6666                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6667   002E48  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6668   002E4C                     
  6669                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6670   002E4C  010E               	movlb	14	; () banked
  6671   002E4E  85DA               	bsf	218,2,b	;volatile
  6672   002E50                     
  6673                           ; BSR set to: 14
  6674   002E50  0012               	return		;funcret
  6675   002E52                     __end_of_I2C_2_Master_Stop:
  6676                           	callstack 0
  6677                           
  6678 ;; *************** function _I2C_2_Master_Start *****************
  6679 ;; Defined at:
  6680 ;;		line 27 in file "i2c.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      void 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used: 1
  6700 ;; Hardware stack levels required when called: 1
  6701 ;; This function calls:
  6702 ;;		_I2C_2_Master_Idle
  6703 ;; This function is called by:
  6704 ;;		_color_writetoaddr
  6705 ;;		_color_read_Red
  6706 ;;		_color_read_Green
  6707 ;;		_color_read_Blue
  6708 ;;		_color_read_Clear
  6709 ;;		_read_interrupt_status
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text39
  6714   002E52                     __ptext39:
  6715                           	callstack 0
  6716   002E52                     _I2C_2_Master_Start:
  6717                           	callstack 27
  6718   002E52                     
  6719                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6720   002E52  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6721   002E56                     
  6722                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6723   002E56  010E               	movlb	14	; () banked
  6724   002E58  81DA               	bsf	218,0,b	;volatile
  6725   002E5A                     
  6726                           ; BSR set to: 14
  6727   002E5A  0012               	return		;funcret
  6728   002E5C                     __end_of_I2C_2_Master_Start:
  6729                           	callstack 0
  6730                           
  6731 ;; *************** function _I2C_2_Master_RepStart *****************
  6732 ;; Defined at:
  6733 ;;		line 33 in file "i2c.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used: 1
  6753 ;; Hardware stack levels required when called: 1
  6754 ;; This function calls:
  6755 ;;		_I2C_2_Master_Idle
  6756 ;; This function is called by:
  6757 ;;		_color_read_Red
  6758 ;;		_color_read_Green
  6759 ;;		_color_read_Blue
  6760 ;;		_color_read_Clear
  6761 ;;		_read_interrupt_status
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text40
  6766   002E5C                     __ptext40:
  6767                           	callstack 0
  6768   002E5C                     _I2C_2_Master_RepStart:
  6769                           	callstack 27
  6770   002E5C                     
  6771                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6772   002E5C  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6773   002E60                     
  6774                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6775   002E60  010E               	movlb	14	; () banked
  6776   002E62  83DA               	bsf	218,1,b	;volatile
  6777   002E64                     
  6778                           ; BSR set to: 14
  6779   002E64  0012               	return		;funcret
  6780   002E66                     __end_of_I2C_2_Master_RepStart:
  6781                           	callstack 0
  6782                           
  6783 ;; *************** function _I2C_2_Master_Read *****************
  6784 ;; Defined at:
  6785 ;;		line 51 in file "i2c.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;  ack             1    wreg     unsigned char 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  ack             1    2[COMRAM] unsigned char 
  6790 ;;  tmp             1    3[COMRAM] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      unsigned char 
  6793 ;; Registers used:
  6794 ;;		wreg, status,2, status,0, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6804 ;;Total ram usage:        3 bytes
  6805 ;; Hardware stack levels used: 1
  6806 ;; Hardware stack levels required when called: 1
  6807 ;; This function calls:
  6808 ;;		_I2C_2_Master_Idle
  6809 ;; This function is called by:
  6810 ;;		_color_read_Red
  6811 ;;		_color_read_Green
  6812 ;;		_color_read_Blue
  6813 ;;		_color_read_Clear
  6814 ;;		_read_interrupt_status
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text41
  6819   002C44                     __ptext41:
  6820                           	callstack 0
  6821   002C44                     _I2C_2_Master_Read:
  6822                           	callstack 27
  6823                           
  6824                           ; BSR set to: 14
  6825                           ;incstack = 0
  6826                           ;I2C_2_Master_Read@ack stored from wreg
  6827   002C44  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  6828   002C46                     
  6829                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6830   002C46  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6831   002C4A                     
  6832                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6833   002C4A  010E               	movlb	14	; () banked
  6834   002C4C  87DA               	bsf	218,3,b	;volatile
  6835                           
  6836                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6837   002C4E  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6838   002C52                     
  6839                           ;i2c.c: 57:   tmp = SSP2BUF;
  6840   002C52  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6841                           
  6842                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6843   002C56  ECAA  F016         	call	_I2C_2_Master_Idle	;wreg free
  6844   002C5A                     
  6845                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6846   002C5A  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  6847   002C5C  B4D8               	btfsc	status,2,c
  6848   002C5E  EF33  F016         	goto	u1121
  6849   002C62  EF37  F016         	goto	u1120
  6850   002C66                     u1121:
  6851   002C66  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6852   002C68  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  6853   002C6A  EF38  F016         	goto	u1138
  6854   002C6E                     u1120:
  6855   002C6E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  6856   002C70                     u1138:
  6857   002C70  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  6858   002C72  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  6859   002C74  010E               	movlb	14	; () banked
  6860   002C76  51DA               	movf	218,w,b	;volatile
  6861   002C78  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6862   002C7A  0BDF               	andlw	-33
  6863   002C7C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  6864   002C7E  6FDA               	movwf	218,b	;volatile
  6865   002C80                     
  6866                           ; BSR set to: 14
  6867                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6868   002C80  89DA               	bsf	218,4,b	;volatile
  6869   002C82                     
  6870                           ; BSR set to: 14
  6871                           ;i2c.c: 61:   return tmp;
  6872   002C82  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  6873   002C84                     
  6874                           ; BSR set to: 14
  6875   002C84  0012               	return		;funcret
  6876   002C86                     __end_of_I2C_2_Master_Read:
  6877                           	callstack 0
  6878                           
  6879 ;; *************** function _I2C_2_Master_Idle *****************
  6880 ;; Defined at:
  6881 ;;		line 22 in file "i2c.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6899 ;;Total ram usage:        1 bytes
  6900 ;; Hardware stack levels used: 1
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_I2C_2_Master_Start
  6905 ;;		_I2C_2_Master_RepStart
  6906 ;;		_I2C_2_Master_Stop
  6907 ;;		_I2C_2_Master_Write
  6908 ;;		_I2C_2_Master_Read
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text42
  6913   002D54                     __ptext42:
  6914                           	callstack 0
  6915   002D54                     _I2C_2_Master_Idle:
  6916                           	callstack 27
  6917   002D54                     l154:
  6918   002D54  010E               	movlb	14	; () banked
  6919   002D56  B5D8               	btfsc	216,2,b	;volatile
  6920   002D58  EFB0  F016         	goto	u971
  6921   002D5C  EFB2  F016         	goto	u970
  6922   002D60                     u971:
  6923   002D60  EFAA  F016         	goto	l154
  6924   002D64                     u970:
  6925   002D64                     
  6926                           ; BSR set to: 14
  6927   002D64  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6928   002D68  0E1F               	movlw	31
  6929   002D6A  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  6930   002D6C  A4D8               	btfss	status,2,c
  6931   002D6E  EFBB  F016         	goto	u981
  6932   002D72  EFBD  F016         	goto	u980
  6933   002D76                     u981:
  6934   002D76  EFAA  F016         	goto	l154
  6935   002D7A                     u980:
  6936   002D7A                     
  6937                           ; BSR set to: 14
  6938   002D7A  0012               	return		;funcret
  6939   002D7C                     __end_of_I2C_2_Master_Idle:
  6940                           	callstack 0
  6941                           
  6942 ;; *************** function _LEDSon_init *****************
  6943 ;; Defined at:
  6944 ;;		line 18 in file "LEDsOn.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      void 
  6951 ;; Registers used:
  6952 ;;		None
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used: 1
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_main
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text43
  6972   002DA2                     __ptext43:
  6973                           	callstack 0
  6974   002DA2                     _LEDSon_init:
  6975                           	callstack 30
  6976   002DA2                     
  6977                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  6978   002DA2  9288               	bcf	136,1,c	;volatile
  6979                           
  6980                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  6981   002DA4  9088               	bcf	136,0,c	;volatile
  6982                           
  6983                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  6984   002DA6  9884               	bcf	132,4,c	;volatile
  6985                           
  6986                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  6987   002DA8  9684               	bcf	132,3,c	;volatile
  6988                           
  6989                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  6990   002DAA  9086               	bcf	134,0,c	;volatile
  6991                           
  6992                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  6993   002DAC  9287               	bcf	135,1,c	;volatile
  6994                           
  6995                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  6996   002DAE  9E86               	bcf	134,7,c	;volatile
  6997                           
  6998                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  6999   002DB0  9881               	bcf	129,4,c	;volatile
  7000                           
  7001                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7002   002DB2  8E7E               	bsf	126,7,c	;volatile
  7003                           
  7004                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7005   002DB4  827F               	bsf	127,1,c	;volatile
  7006                           
  7007                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7008   002DB6  8879               	bsf	121,4,c	;volatile
  7009                           
  7010                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7011   002DB8  987C               	bcf	124,4,c	;volatile
  7012                           
  7013                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7014   002DBA  9280               	bcf	128,1,c	;volatile
  7015                           
  7016                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7017   002DBC  907E               	bcf	126,0,c	;volatile
  7018                           
  7019                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7020   002DBE  9080               	bcf	128,0,c	;volatile
  7021                           
  7022                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7023   002DC0  967C               	bcf	124,3,c	;volatile
  7024   002DC2  0012               	return		;funcret
  7025   002DC4                     __end_of_LEDSon_init:
  7026                           	callstack 0
  7027                           
  7028                           	psect	rparam
  7029   000000                     
  7030                           	psect	idloc
  7031                           
  7032                           ;Config register IDLOC0 @ 0x200000
  7033                           ;	unspecified, using default values
  7034   200000                     	org	2097152
  7035   200000  0FFF               	dw	4095
  7036                           
  7037                           ;Config register IDLOC1 @ 0x200002
  7038                           ;	unspecified, using default values
  7039   200002                     	org	2097154
  7040   200002  0FFF               	dw	4095
  7041                           
  7042                           ;Config register IDLOC2 @ 0x200004
  7043                           ;	unspecified, using default values
  7044   200004                     	org	2097156
  7045   200004  0FFF               	dw	4095
  7046                           
  7047                           ;Config register IDLOC3 @ 0x200006
  7048                           ;	unspecified, using default values
  7049   200006                     	org	2097158
  7050   200006  0FFF               	dw	4095
  7051                           
  7052                           ;Config register IDLOC4 @ 0x200008
  7053                           ;	unspecified, using default values
  7054   200008                     	org	2097160
  7055   200008  0FFF               	dw	4095
  7056                           
  7057                           ;Config register IDLOC5 @ 0x20000A
  7058                           ;	unspecified, using default values
  7059   20000A                     	org	2097162
  7060   20000A  0FFF               	dw	4095
  7061                           
  7062                           ;Config register IDLOC6 @ 0x20000C
  7063                           ;	unspecified, using default values
  7064   20000C                     	org	2097164
  7065   20000C  0FFF               	dw	4095
  7066                           
  7067                           ;Config register IDLOC7 @ 0x20000E
  7068                           ;	unspecified, using default values
  7069   20000E                     	org	2097166
  7070   20000E  0FFF               	dw	4095
  7071                           
  7072                           	psect	config
  7073                           
  7074                           ;Config register CONFIG1L @ 0x300000
  7075                           ;	External Oscillator mode Selection bits
  7076                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7077                           ;	Power-up default value for COSC bits
  7078                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7079   300000                     	org	3145728
  7080   300000  AA                 	db	170
  7081                           
  7082                           ;Config register CONFIG1H @ 0x300001
  7083                           ;	unspecified, using default values
  7084                           ;	Clock Out Enable bit
  7085                           ;	CLKOUTEN = 0x1, unprogrammed default
  7086                           ;	Clock Switch Enable bit
  7087                           ;	CSWEN = 0x1, unprogrammed default
  7088                           ;	Fail-Safe Clock Monitor Enable bit
  7089                           ;	FCMEN = 0x1, unprogrammed default
  7090   300001                     	org	3145729
  7091   300001  FF                 	db	255
  7092                           
  7093                           ;Config register CONFIG2L @ 0x300002
  7094                           ;	unspecified, using default values
  7095                           ;	Master Clear Enable bit
  7096                           ;	MCLRE = 0x1, unprogrammed default
  7097                           ;	Power-up Timer Enable bit
  7098                           ;	PWRTE = 0x1, unprogrammed default
  7099                           ;	Low-power BOR enable bit
  7100                           ;	LPBOREN = 0x1, unprogrammed default
  7101                           ;	Brown-out Reset Enable bits
  7102                           ;	BOREN = 0x3, unprogrammed default
  7103   300002                     	org	3145730
  7104   300002  FF                 	db	255
  7105                           
  7106                           ;Config register CONFIG2H @ 0x300003
  7107                           ;	unspecified, using default values
  7108                           ;	Brown Out Reset Voltage selection bits
  7109                           ;	BORV = 0x3, unprogrammed default
  7110                           ;	ZCD Disable bit
  7111                           ;	ZCD = 0x1, unprogrammed default
  7112                           ;	PPSLOCK bit One-Way Set Enable bit
  7113                           ;	PPS1WAY = 0x1, unprogrammed default
  7114                           ;	Stack Full/Underflow Reset Enable bit
  7115                           ;	STVREN = 0x1, unprogrammed default
  7116                           ;	Debugger Enable bit
  7117                           ;	DEBUG = 0x1, unprogrammed default
  7118                           ;	Extended Instruction Set Enable bit
  7119                           ;	XINST = 0x1, unprogrammed default
  7120   300003                     	org	3145731
  7121   300003  FF                 	db	255
  7122                           
  7123                           ;Config register CONFIG3L @ 0x300004
  7124                           ;	WDT Period Select bits
  7125                           ;	WDTCPS = 0x1F, unprogrammed default
  7126                           ;	WDT operating mode
  7127                           ;	WDTE = OFF, WDT Disabled
  7128   300004                     	org	3145732
  7129   300004  9F                 	db	159
  7130                           
  7131                           ;Config register CONFIG3H @ 0x300005
  7132                           ;	unspecified, using default values
  7133                           ;	WDT Window Select bits
  7134                           ;	WDTCWS = 0x7, unprogrammed default
  7135                           ;	WDT input clock selector
  7136                           ;	WDTCCS = 0x7, unprogrammed default
  7137   300005                     	org	3145733
  7138   300005  FF                 	db	255
  7139                           
  7140                           ;Config register CONFIG4L @ 0x300006
  7141                           ;	unspecified, using default values
  7142                           ;	Write Protection Block 0
  7143                           ;	WRT0 = 0x1, unprogrammed default
  7144                           ;	Write Protection Block 1
  7145                           ;	WRT1 = 0x1, unprogrammed default
  7146                           ;	Write Protection Block 2
  7147                           ;	WRT2 = 0x1, unprogrammed default
  7148                           ;	Write Protection Block 3
  7149                           ;	WRT3 = 0x1, unprogrammed default
  7150                           ;	Write Protection Block 3
  7151                           ;	WRT4 = 0x1, unprogrammed default
  7152                           ;	Write Protection Block 3
  7153                           ;	WRT5 = 0x1, unprogrammed default
  7154                           ;	Write Protection Block 3
  7155                           ;	WRT6 = 0x1, unprogrammed default
  7156                           ;	Write Protection Block 3
  7157                           ;	WRT7 = 0x1, unprogrammed default
  7158   300006                     	org	3145734
  7159   300006  FF                 	db	255
  7160                           
  7161                           ;Config register CONFIG4H @ 0x300007
  7162                           ;	unspecified, using default values
  7163                           ;	Configuration Register Write Protection bit
  7164                           ;	WRTC = 0x1, unprogrammed default
  7165                           ;	Boot Block Write Protection bit
  7166                           ;	WRTB = 0x1, unprogrammed default
  7167                           ;	Data EEPROM Write Protection bit
  7168                           ;	WRTD = 0x1, unprogrammed default
  7169                           ;	Scanner Enable bit
  7170                           ;	SCANE = 0x1, unprogrammed default
  7171                           ;	Low Voltage Programming Enable bit
  7172                           ;	LVP = 0x1, unprogrammed default
  7173   300007                     	org	3145735
  7174   300007  FF                 	db	255
  7175                           
  7176                           ;Config register CONFIG5L @ 0x300008
  7177                           ;	unspecified, using default values
  7178                           ;	UserNVM Program Memory Code Protection bit
  7179                           ;	CP = 0x1, unprogrammed default
  7180                           ;	DataNVM Memory Code Protection bit
  7181                           ;	CPD = 0x1, unprogrammed default
  7182   300008                     	org	3145736
  7183   300008  FF                 	db	255
  7184                           
  7185                           ;Config register CONFIG5H @ 0x300009
  7186                           ;	unspecified, using default values
  7187   300009                     	org	3145737
  7188   300009  FF                 	db	255
  7189                           
  7190                           ;Config register CONFIG6L @ 0x30000A
  7191                           ;	unspecified, using default values
  7192                           ;	Table Read Protection Block 0
  7193                           ;	EBTR0 = 0x1, unprogrammed default
  7194                           ;	Table Read Protection Block 1
  7195                           ;	EBTR1 = 0x1, unprogrammed default
  7196                           ;	Table Read Protection Block 2
  7197                           ;	EBTR2 = 0x1, unprogrammed default
  7198                           ;	Table Read Protection Block 3
  7199                           ;	EBTR3 = 0x1, unprogrammed default
  7200                           ;	Table Read Protection Block 4
  7201                           ;	EBTR4 = 0x1, unprogrammed default
  7202                           ;	Table Read Protection Block 5
  7203                           ;	EBTR5 = 0x1, unprogrammed default
  7204                           ;	Table Read Protection Block 6
  7205                           ;	EBTR6 = 0x1, unprogrammed default
  7206                           ;	Table Read Protection Block 7
  7207                           ;	EBTR7 = 0x1, unprogrammed default
  7208   30000A                     	org	3145738
  7209   30000A  FF                 	db	255
  7210                           
  7211                           ;Config register CONFIG6H @ 0x30000B
  7212                           ;	unspecified, using default values
  7213                           ;	Boot Block Table Read Protection bit
  7214                           ;	EBTRB = 0x1, unprogrammed default
  7215   30000B                     	org	3145739
  7216   30000B  FF                 	db	255
  7217                           tosu	equ	0xFFF
  7218                           tosh	equ	0xFFE
  7219                           tosl	equ	0xFFD
  7220                           stkptr	equ	0xFFC
  7221                           pclatu	equ	0xFFB
  7222                           pclath	equ	0xFFA
  7223                           pcl	equ	0xFF9
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           indf0	equ	0xFEF
  7231                           postinc0	equ	0xFEE
  7232                           postdec0	equ	0xFED
  7233                           preinc0	equ	0xFEC
  7234                           plusw0	equ	0xFEB
  7235                           fsr0h	equ	0xFEA
  7236                           fsr0l	equ	0xFE9
  7237                           wreg	equ	0xFE8
  7238                           indf1	equ	0xFE7
  7239                           postinc1	equ	0xFE6
  7240                           postdec1	equ	0xFE5
  7241                           preinc1	equ	0xFE4
  7242                           plusw1	equ	0xFE3
  7243                           fsr1h	equ	0xFE2
  7244                           fsr1l	equ	0xFE1
  7245                           bsr	equ	0xFE0
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           preinc2	equ	0xFDC
  7250                           plusw2	equ	0xFDB
  7251                           fsr2h	equ	0xFDA
  7252                           fsr2l	equ	0xFD9
  7253                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160    134     142
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2281$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2232$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2232$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S532DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S532DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_clear_read_calibration
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               254   254      0   56419
                                             92 COMRAM     2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     598
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     598
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    7332
                                             88 COMRAM     4     4      0
                                             27 BANK0     10     4      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   35913
                                             27 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    6330
                                              0 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5523
                                             80 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    5173
                                             62 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3953
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    3445
                                             22 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     446
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   22108
                                             27 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    4875
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4267
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    6153
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4571
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    2981
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     963
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     750
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     494
                                              0 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1642
                                             11 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      60        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRllllhl     2A      0       0      54        0.0%
BITBIGSFRllllll     26      0       0      58        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRllhhhl     1E      0       0      48        0.0%
BITBIGSFRhhlllh     17      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      49        0.0%
BITBIGSFRllllhl      F      0       0      56        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      55        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      57        0.0%
BITBIGSFRllllhh      6      0       0      53        0.0%
BITBIGSFRlllhl       5      0       0      52        0.0%
BITBIGSFRhhllll      5      0       0      37        0.0%
BITBIGSFRlllhh       3      0       0      51        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      50        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     259      59        0.0%
DATA                 0      0     259       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 20:45:38 2022

clear_read_calibration@clear_read_check 007F                          _color_read_Red 2AC0  
                       _color_read_Blue 2BB0                                      l22 2E22  
                                    l31 2BFE                                      l25 2B0E  
                                    l34 2BAE                                      l19 2CF8  
                                    l28 2B5E                                      l95 1EB6  
                                    l88 2822                     ___wmul@multiplicand 0003  
                      _color_read_Clear 2B60                        _color_read_Green 2B10  
                                   l104 28A8                                     l114 270E  
                                   l124 279A                                     l109 2662  
                                   l310 23DE                                     l151 2D52  
                                   l160 2E5A                                     l240 1B62  
                                   l241 1B74                                     l154 2D54  
                                   l163 2E64                                     l323 196A  
                                   l235 1A1E                                     l172 2C84  
                                   l236 1A1C                                     l157 2D7A  
                                   l333 24EA                                     l405 2E26  
                                   l237 1A2C                                     l166 2E50  
                                   l414 2D28                                     l239 1B66  
                                   l328 1472                                     l408 2E3A  
                                   l169 2E46                                     l354 118E  
                                   l267 2DC2                                     l339 292C  
                                   l357 22C6                                     l449 2DA0  
                                   l563 1D4A                                     l396 2E02  
                                   l576 201A                                     l940 2A12  
                                   l947 2A1A                                     u800 2C42  
                                   u801 2C3E                                     u810 2CA0  
                                   u811 2C9C                                     u820 1BD6  
                                   u900 1EFC                                     u821 1BD2  
                                   u901 1EF8                                     u830 1C08  
                                   u910 1F3A                                     u831 1C04  
                                   u911 1F36                                     u920 1F64  
                                   u760 24FE                                     u841 1C32  
                                   u921 1F60                                     u761 24FA  
                                   u850 1C56                                     u930 1F92  
                                   u770 2510                                     u851 1C52  
                                   u931 1F8E                                     u771 250C  
                                   u860 1C80                                     u940 1FDA  
                                   u780 2538                                     u861 1C7C  
                                   u941 1FD6                                     u781 2534  
                                   u870 1CC0                                     u790 256E  
                                   u950 293C                                     u871 1CBC  
                                   u791 256A                                     u951 2938  
                                   u880 1D0A                                     u960 2992  
                                   u881 1D06                                     u961 298E  
                                   u970 2D64                                     u890 1ECA  
                                   u971 2D60                                     u891 1EC6  
                                   u980 2D7A                                     u981 2D76  
                                   u990 29C2                                     u991 29BE  
   normalise_readings@normalised_values 0023                        ??_motor_response 0020  
                                   _abs 2C86                                     _pad 292E  
                 __end_of_card_response 22C8                                     prod 000FF3  
                                   wreg 000FE8                ??_clear_read_calibration 0059  
                                  ?_abs 0013                                    l1124 2CBC  
                                  l1204 25B4                                    l1212 2C42  
                                  l1134 2A6C                                    l1127 2CC4  
                                  l1215 2E66                                    l1160 29A6  
                                  l2201 2C1E                                    l3001 1978  
                                  l2211 1BC8                                    l2203 2C22  
                                  l3011 198A                                    l3003 197C  
                                  l1156 2950                                    l2205 2C86  
                                  l2221 1C28                                    l2213 1BD6  
                                  l2301 2992                                    l1165 1500  
                                  l3021 19A8                                    l3013 1990  
                                  l3005 1980                                    l2303 2D54  
                                  l2207 2CA0                                    l2231 1C72  
                                  l2223 1C2C                                    l2215 1BF6  
                                  l1167 1508                                    l3031 19C2  
                                  l3023 19AE                                    l3015 1994  
                                  l3007 1982                                    l1168 154E  
                                  l1192 2ABE                                    l2305 2D64  
                                  l2401 2E60                                    l2321 29D2  
                                  l2313 29A8                                    l2241 1CE2  
                                  l2233 1C80                                    l2225 1C38  
                                  l2217 1BFA                                    l2209 1BC4  
                                  l3041 19F2                                    l3033 19CA  
                                  l3025 19B2                                    l3017 1998  
                                  l3009 1986                                    l1186 2178  
                                  l2411 2C80                                    l2403 2C46  
                                  l2331 2A06                                    l2323 29E0  
                                  l2315 29B0                                    l2307 2D7C  
                                  l2243 1CF4                                    l2235 1C92  
                                  l2227 1C56                                    l2219 1C08  
                                  l1179 16F0                                    l3051 1A14  
                                  l3043 19FA                                    l3035 19D0  
                                  l3027 19B6                                    l3019 19A0  
                                  l2413 2C82                                    l2405 2C4A  
                                  l2333 2A0C                                    l2325 29E6  
                                  l2317 29C2                                    l2309 2D98  
                                  l2421 1DBC                                    l2501 2884  
                                  l3141 1140                                    l2237 1CC0  
                                  l2229 1C5E                                    l2245 1CFA  
                                  l2261 1EEE                                    l2253 1EB8  
                                  l2341 14B8                                    l3061 1A6A  
                                  l3045 1A02                                    l3037 19DC  
                                  l3029 19BA                                    l2407 2C52  
                                  l2327 29FC                                    l2319 29CA  
                                  l2431 1E76                                    l2423 1DD0  
                                  l2503 2890                                    l2247 1D0A  
                                  l2239 1CE0                                    l2271 1F56  
                                  l2263 1EFC                                    l2255 1EBC  
                                  l2191 2538                                    l2183 24EC  
                                  l2351 1526                                    l2343 14D8  
                                  l2335 1474                                    l3071 1B20  
                                  l3063 1A84                                    l3047 1A0A  
                                  l3039 19E8                                    l2409 2C5A  
                                  l2329 2A04                                    l2425 1DD4  
                                  l2417 1D4C                                    l2521 2626  
                                  l2513 25DE                                    l2505 25B6  
                                  l2249 1D2A                                    l2273 1F64  
                                  l2281 1FCA                                    l2265 1F1C  
                                  l2257 1ECA                                    l2193 256E  
                                  l2185 24FE                                    l2361 1560  
                                  l2353 1536                                    l2345 14F4  
                                  l2337 1494                                    l2441 2064  
                                  l2433 201C                                    l3073 1B2C  
                                  l3065 1AA4                                    l3057 1A2E  
                                  l3049 1A12                                    l2603 16FA  
                                  l2427 1E16                                    l2419 1D68  
                                  l2523 262E                                    l2515 25F6  
                                  l2507 25D6                                    l2283 1FDA  
                                  l2275 1F92                                    l2267 1F3A  
                                  l2259 1EEA                                    l2187 2510  
                                  l2291 293C                                    l2363 1566  
                                  l2371 1658                                    l2355 1542  
                                  l2347 1510                                    l2339 14A8  
                                  l2443 2074                                    l2435 2044  
                                  l3075 1B30                                    l3067 1AC4  
                                  l3059 1A46                                    l2621 17A2  
                                  l2605 174A                                    l2429 1E32  
                                  l2525 264A                                    l2517 260E  
                                  l2541 26C8                                    l2701 1460  
                                  l2285 1FFA                                    l2277 1FB2  
                                  l2269 1F42                                    l2189 251A  
                                  l2197 2C00                                    l2293 2948  
                                  l2381 16C0                                    l2373 1672  
                                  l2365 15E8                                    l2357 154A  
                                  l2349 1520                                    l2453 213A  
                                  l2445 2094                                    l2437 2052  
                                  l3077 1B40                                    l3069 1AE4  
                                  l2391 2E3E                                    l2471 2B56  
                                  l2463 2AC0                                    l2631 17F2  
                                  l2623 17BE                                    l2615 1772  
                                  l2607 174E                                    l2711 23E4  
                                  l2551 2730                                    l2519 261A  
                                  l2543 26D4                                    l2535 268C  
                                  l2527 2664                                    l2703 1462  
                                  l2279 1FC4                                    l2199 2C0C  
                                  l2295 295C                                    l2383 16D0  
                                  l2375 1690                                    l2367 15EE  
                                  l2359 1556                                    l2447 20B4  
                                  l2439 2060                                    l3079 1B76  
                                  l2393 2E42                                    l2481 2B60  
                                  l2465 2B06                                    l2641 186A  
                                  l2633 1806                                    l2625 17EA  
                                  l2617 1786                                    l2609 176A  
                                  l2721 28C2                                    l2713 24D8  
                                  l2705 23E0                                    l2561 275C  
                                  l2545 26DC                                    l2537 26A4  
                                  l2529 2684                                    l2297 2970  
                                  l2289 292E                                    l2377 16AA  
                                  l2369 15F4                                    l2449 210A  
                                  l2457 214C                                    l2387 2E52  
                                  l2395 2E48                                    l2475 2BB0  
                                  l2483 2BA6                                    l2651 189E  
                                  l2635 181E                                    l2619 179E  
                                  l2731 2914                                    l2715 24DA  
                                  l2563 2768                                    l2491 2834  
                                  l2547 26F8                                    l2539 26BC  
                                  l2803 1048                                    l2571 2E36  
                                  l2299 2974                                    l2379 16BA  
                                  l2389 2E56                                    l2397 2E4C  
                                  l2477 2BF6                                    l2469 2B10  
                                  l2653 18A2                                    l2637 1822  
                                  l2733 2918                                    l2717 28AA  
                                  l2565 2776                                    l2557 2738  
                                  l2549 2710                                    l2493 2842  
                                  l2821 10CC                                    l2805 105C  
                                  l2741 0E7C                                    l2573 2A6E  
                                  l2901 2DFC                                    l2399 2E5C  
                                  l2671 193E                                    l2663 18F2  
                                  l2655 18BE                                    l2647 1872  
                                  l2639 183E                                    l2735 291A  
                                  l2727 28C6                                    l2719 28AE  
                                  l2567 277E                                    l2559 2750  
                                  l2495 284E                                    l2487 2824  
                                  l2807 1074                                    l2751 0ED4  
                                  l2743 0E80                                    l2575 2A7A  
                                  l2591 2D3E                                    l2583 2D2A  
                                  l2903 2DFE                                    l2665 1906  
                                  l2657 18EA                                    l2649 1886  
                                  l2737 292A                                    l2729 28F4  
                                  l2497 286A                                    l2489 2828  
                                  l2809 10A0                                    l2761 0F40  
                                  l2753 0EE8                                    l2745 0E94  
                                  l2569 2E26                                    l2577 2A96  
                                  l2681 2A5A                                    l2673 2A1C  
                                  l2913 22D2                                    l2593 2D40  
                                  l2585 2D34                                    l2905 2E00  
                                  l2667 191E                                    l2499 2876  
                                  l2835 10E8                                    l2819 10B8  
                                  l2771 0F98                                    l2763 0F54  
                                  l2755 0F00                                    l2747 0EAC  
                                  l2691 2D10                                    l2579 2AB6  
                                  l2675 2A2E                                    l2931 2342  
                                  l2915 22E6                                    l2907 22C8  
                                  l2587 2D3A                                    l2595 2E06  
                                  l2669 1922                                    l2597 16F2  
                                  l2837 10FC                                    l2773 0FAC  
                                  l2757 0F14                                    l2749 0EC0  
                                  l2853 112C                                    l2693 1190  
                                  l2685 2CFA                                    l2677 2A36  
                                  l2941 217A                                    l2933 235E  
                                  l2925 2310                                    l2917 22EC  
                                  l2589 2D3C                                    l2861 2CCA  
                                  ?_pad 0011                                    l2839 1114  
                                  l2791 1018                                    l2775 0FC0  
                                  l2767 0F6C                                    l2759 0F2C  
                                  l2687 2CFE                                    l2679 2A3E  
                                  l2951 225C                                    l2943 217A  
                                  l2935 238A                                    l2927 2324  
                                  l2919 2308                                    l2863 2CD4  
                                  l2871 27A4                                    l2777 0FD4  
                                  l2769 0F80                                    l2689 2D0C  
                                  l2953 2278                                    l2945 219E  
                                  l2937 23A6                                    l2929 233C  
                                  l2865 2CE4                                    l2881 2808  
                                  l2873 27CE                                    l2891 2DA2  
                                  l2787 0FEC                                    l2699 1194  
                                  l2955 2288                                    l2947 21F4  
                                  l2939 23B2                                    l2867 2CEE  
                                  l2859 2CC6                                    l2883 280A  
                                  l2875 27F2                                    l2789 1000  
                                  l2957 22A2                                    l2949 2200  
                                  l2885 2814                                    l2877 27FC  
                                  l2869 279C                                    l2893 2DE4  
                                  l2959 22AE                                    l2887 2816  
                                  l2879 27FE                                    l2895 2DEE  
                                  l2889 2820                                    l2897 2DF0  
                                  l2899 2DF2                                    l2995 196C  
                                  l2997 1970                                    l2999 1974  
                                  STR_1 0E01                                    STR_2 0E57  
                                  STR_3 0E33                                    STR_4 0E6E  
                                  u1000 29E0                                    u1001 29DC  
                                  u1010 29FC                                    u1011 29F8  
                                  u1100 16AA                                    u1020 14A4  
                                  u1101 16A6                                    u1021 149E  
                                  u1110 16BA                                    u1030 14A6  
                                  u1111 16B6                                    u1120 2C6E  
                                  u1200 28A8                                    u1040 14B8  
                                  u1121 2C66                                    u1201 28A4  
                                  u1041 14B4                                    u1210 264A  
                                  u1050 14F4                                    u1211 2646  
                                  u1051 14F0                                    u1300 193E  
                                  u1140 1D68                                    u1220 26F8  
                                  u1060 1520                            ?_LEDSon_init 0001  
                                  u1301 193A                                    u1141 1D64  
                                  u1221 26F4                                    u1061 151C  
                                  u1150 1E32                                    u1230 279A  
                                  u1310 2D28                                    u1070 1536  
                                  u1151 1E2E                                    u1231 2796  
                                  u1311 2D24                                    u1071 1532  
                                  u1320 1472                                    u1240 2E36  
                                  u1080 1672                                    u1160 2044  
                                  u1321 146E                                    u1241 2E32  
                                  u1081 166E                                    u1161 2040  
                                  u1138 2C70                                    u1330 24EA  
                                  u1090 1690                                    u1170 2094  
                                  u1250 2AB6                                    u1331 24E6  
                                  u1091 168C                                    u1171 2090  
                                  u1251 2AB2                                    u1260 176A  
                                  u1340 28F4                                    u1180 20B4  
                                  u1420 1A2C                                    u1261 1766  
                                  u1341 28F0                                    u1181 20B0  
                                  u1421 1A28                                    u1270 17BE  
                                  u1350 292A                                    u1190 2866  
                                  u1430 1B40                                    u1271 17BA  
                                  u1351 2926                                    u1191 2862  
                                  u1431 1B3C                                    u1280 183E  
                                  u1360 2308                                    u1440 1B74  
                          _BAUD4CONbits 000EE9                                    u1281 183A  
                                  u1361 2304                                    u1441 1B70  
                                  u1290 18BE                                    u1370 235E  
                                  u1291 18BA                                    u1371 235A  
                                  u1507 1A38                                    u1517 2CDA  
                                  u1607 10D6                                    u1527 232E  
                                  u1617 1106                                    u1537 0E9E  
                                  _T2PR 000FBC                                    u1707 1810  
                                  u1627 26AE                                    u1547 0F1E  
                                  u1717 1890                                    u1637 2702  
                                  u1557 0F8A                                    u1727 1910  
                                  u1647 2600                                    u1567 100A  
                                  u1657 2654                                    u1577 1036  
                                  u1667 283A                                    u1587 1066  
                                  u1677 287C                                    u1597 1092  
                                  u1687 276E                                    u1697 1790  
            normalise_readings@red_read 001B                                    abs@a 0013  
                                  _dbuf 0250                                    _main 196C  
                                  _dtoa 1474                                    _prec 00E8  
                                  pad@i 0018                                    pad@p 0015  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  pad@w 001A                                    fsr2l 000FD9  
                                  _stop 2824                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0000  
      clear_read_calibration@clear_read 007D                         card_response@mL 0087  
                       card_response@mR 0089                  __end_of_color_read_Red 2B10  
           normalise_readings@blue_read 001F                            ___param_bank 000000  
                                 ??_abs 0015                                   ??_pad 0017  
                           _turnRight45 2664                         __end_of___aodiv 1D4C  
                                 ?_main 0001                                   ?_dtoa 001C  
                       __end_of___aomod 201C                                   ?_stop 0014  
                       __end_of___lwdiv 2A1C                            vfpfcnvrt@fmt 0041  
                          main@red_read 01E1                 __end_of_sendCharSerial4 2E3C  
            __end_of_I2C_2_Master_Start 2E5C              __end_of_I2C_2_Master_Write 2E48  
                                 _flags 00EA                                   _fputc 24EC  
                                 _fputs 2C00                                   pad@fp 0011  
        determine_card@master_closeness 0001                 ??_make_master_closeness 0007  
                                 _width 00E6                                   _putch 2E66  
                                 main@i 01E7                                   dtoa@d 001E  
                                 dtoa@i 003C                                   dtoa@n 0034  
                                 dtoa@p 0030                                   dtoa@s 003E  
                                 dtoa@w 0032                     normalise_readings@i 002F  
                                 tablat 000FF5                                   status 000FD8  
                       __end_of_sprintf 2A6E          card_response@normalised_values 008B  
                      card_response@buf 007B                 __end_of_color_read_Blue 2C00  
                 _I2C_2_Master_RepStart 2E5C                         ?_color_read_Red 0005  
                       __initialization 2DC4                            __end_of_main 1BC4  
                          __end_of_dtoa 16F2                            __end_of_stop 28AA  
                                ??_main 005D                                  ??_dtoa 0026  
                                ??_stop 0018                           __activetblptr 000003  
                         main@blue_read 01E5                    main@clear_read_check 01DE  
             clear_read_calibration@buf 007B                            ?_setMotorPWM 000E  
                                ?_fputc 0001                                  ?_fputs 000A  
                                _CCPR1H 000FAA                                  _CCPR2H 000FA6  
                                _CCPR3H 000F25                                  _CCPR4H 000F21  
          collect_avg_readings@red_read 000E                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  _RG6PPS 000E88  
              __end_of_color_click_init 2CFA                  make_master_closeness@i 0025  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0057  
                             ??___aodiv 0011                               ??___aomod 0011  
                                ___wmul 2D7C                      _normalise_readings 1190  
                             ??___lwdiv 000B                                  clear_0 2DCA  
                                clear_1 2DD6                                  isa$std 000001  
                                pad@buf 0013                                  dtoa@fp 001C  
                   ?_normalise_readings 0017                                  fputc@c 0001  
                                fputs@c 000E                                  fputs@i 000F  
                                fputs@s 000A                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                                putch@c 0001                        __end_of_vfprintf 2AC0  
                                stop@mL 0014                                  stop@mR 0016  
                     ??_initDCmotorsPWM 0001                               ??_sprintf 0059  
                     card_response@card 00E5                              __accesstop 0060  
               __end_of__initialization 2DDE                __end_of_color_read_Clear 2BB0  
              __end_of_color_read_Green 2B60                  ?_I2C_2_Master_RepStart 0001  
                  ??_normalise_readings 0025                           ___rparam_used 000001  
                      ?_color_read_Blue 0005            __end_of_collect_avg_readings 196C  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 22C8  
                      _reverseFullSpeed 2710              collect_avg_readings@i_1561 0018  
            collect_avg_readings@i_1562 001A              collect_avg_readings@i_1563 001C  
            collect_avg_readings@i_1564 001E                           __end_of_fputc 25B6  
                         __end_of_fputs 2C44                           __end_of_putch 2E68  
                        main@clear_read 01E8                                 ??_fputc 0005  
                               ??_fputs 000E                                 ??_putch 0001  
                            __pbssBANK0 00E6                              __pbssBANK2 0200  
                     _color_writetoaddr 2E04                            _T2CLKCONbits 000FBF  
                      motor_response@mL 001C                        motor_response@mR 001E  
                    ?_color_writetoaddr 0003                                 ?___wmul 0001  
                    motor_response@card 0022                            ?_turnRight45 0014  
                   ??_color_writetoaddr 0004                          main@green_read 01E3  
                               _SP4BRGH 000EE6                                 _SP4BRGL 000EE5  
                               _SSP2ADD 000ED6                                 _SSP2BUF 000ED5  
        collect_avg_readings@clear_read 000C                  color_writetoaddr@value 0003  
                      ??_color_read_Red 0007           __end_of_make_master_closeness 24EC  
        determine_card@predicted_colour 0009               __end_of_color_writetoaddr 2E24  
                    _I2C_2_Master_Start 2E52                              _initUSART4 2DE4  
                    _I2C_2_Master_Write 2E3C                                 __Hparam 0000  
                               __Lparam 0000                       color_read_Red@tmp 000A  
make_master_closeness@normalised_values 0003                 sendStringSerial4@string 0002  
                     reverseFullSpeed@i 0019                                 ___aodiv 1BC4  
                               ___aomod 1EB8                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 29A8                     ?_I2C_2_Master_Write 0001  
                             ?_vfprintf 0051                            __psmallconst 0E00  
                          turnLeft45@mL 0014                            turnLeft45@mR 0016  
                               __pcinit 2DC4                                 __ramtop 0E00  
                               __ptext0 196C                                 __ptext1 2DE4  
                               __ptext2 279C                                 __ptext3 2CC6  
                               __ptext4 2E04                                 __ptext5 2D2A  
                               __ptext6 22C8                                 __ptext7 217A  
                               __ptext8 2A1C                                 __ptext9 2A6E  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 00ED                    _collect_avg_readings 16F2  
                               main@buf 0100                                 _sprintf 2A1C  
                  ??_I2C_2_Master_Start 0002                    ??_I2C_2_Master_Write 0002  
                  end_of_initialization 2DDE          collect_avg_readings@green_read 0010  
                 normalise_readings@buf 0017                                 fputc@fp 0003  
                               fputs@fp 000C                       ?_color_click_init 0001  
                          turnRight45@i 001A                      ??_color_click_init 0005  
                     __end_of_vfpfcnvrt 217A                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 0047  
                            ??_vfprintf 0057                         _initDCmotorsPWM 279C  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0013  
     normalise_readings@expected_values 0021                           _card_response 217A  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0012  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 000C                __end_of_reverseFullSpeed 279C  
                   main@expected_values 0196                color_writetoaddr@address 0004  
               ??_I2C_2_Master_RepStart 0002                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0005                            _EUSART4RXbuf 023C  
                          _EUSART4TXbuf 0200                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0005                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 007B  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0001  
                            main@motorL 01EA                              main@motorR 01F3  
                    ??_color_read_Clear 0007                      ??_color_read_Green 0007  
                            _turnLeft45 25B6                             vfpfcnvrt@ap 0043  
                           vfpfcnvrt@cp 004F                             vfpfcnvrt@fp 003F  
                        __end_of___wmul 2DA2                         determine_card@i 000A  
                        ?_card_response 007B                     color_read_Clear@tmp 000A  
                   start_initialization 2DC4                             __end_of_abs 2CC6  
                           __end_of_pad 29A8                           _TxBufWriteCnt 005F  
                         ??_LEDSon_init 0001          __end_of_clear_read_calibration 23E0  
                   color_read_Green@tmp 000A                 __end_of_initDCmotorsPWM 2824  
                           vfprintf@fmt 0053                                ??___wmul 0005  
                        _determine_card 28AA                             __pbssCOMRAM 005F  
                ??_collect_avg_readings 0014                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                        ___aodiv@dividend 0001  
               clear_read_calibration@i 0081                          _motor_response 0E7A  
                   __end_of_LEDSon_init 2DC4                        ___lwdiv@dividend 0007  
                             _dtoa$2309 002E                             ?_turnLeft45 0014  
                              ?___aodiv 0001                                ?___aomod 0001  
                      ___aodiv@quotient 0013                  __end_of_determine_card 292E  
                              ?___lwdiv 0007                    I2C_2_Master_Read@ack 0003  
                       ??_card_response 0059                    I2C_2_Master_Read@tmp 0004  
                           __smallconst 0E00                       _I2C_2_Master_Idle 2D54  
                     _I2C_2_Master_Init 2D2A                       _I2C_2_Master_Read 2C44  
                     _I2C_2_Master_Stop 2E48                            _RxBufReadCnt 00EC  
          normalise_readings@clear_read 0019            normalise_readings@difference 002D  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0010  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000B  
                __end_of_motor_response 1190                             turnLeft45@i 001A  
                              ?_sprintf 0060            clear_read_calibration@i_1550 0083  
                     _sendStringSerial4 2CFA                     ??_I2C_2_Master_Idle 0001  
                   ??_I2C_2_Master_Init 0001                     ??_I2C_2_Master_Read 0002  
                        ___wmul@product 0005                                _LATAbits 000F79  
                   ??_I2C_2_Master_Stop 0002                                _LATDbits 000F7C  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                      ?_sendStringSerial4 0002  
                              _PIE4bits 000E2D                   _make_master_closeness 23E0  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0001                make_master_closeness@buf 0001  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0004  
                              _SSP2STAT 000ED8                         ?_determine_card 0001  
                             _vfpfcnvrt 201C               __end_of_I2C_2_Master_Idle 2D7C  
             __end_of_I2C_2_Master_Init 2D54               __end_of_I2C_2_Master_Read 2C86  
                     ___wmul@multiplier 0001               __end_of_I2C_2_Master_Stop 2E52  
                          setMotorPWM@m 000E             I2C_2_Master_Write@data_byte 0002  
          normalise_readings@green_read 001D                       ??_color_read_Blue 0007  
                          _TxBufReadCnt 00EB                         ?_motor_response 001C  
                     ?_reverseFullSpeed 0014               __end_of_sendStringSerial4 2D2A  
                           _LEDSon_init 2DA2                      ??_reverseFullSpeed 0018  
         __end_of_I2C_2_Master_RepStart 2E66                      color_read_Blue@tmp 000A  
                   __end_of_setMotorPWM 1EB8                            ??_initUSART4 0001  
                              __Hrparam 0000                              vfprintf@ap 0055  
                              __Lrparam 0000                              vfprintf@fp 0051  
 make_master_closeness@master_closeness 0005                      reverseFullSpeed@mL 0014  
                    reverseFullSpeed@mR 0016                              ?_vfpfcnvrt 003F  
                       ___aodiv@divisor 0009                         ___aodiv@counter 0011  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0062                         ___lwdiv@divisor 0009  
                    __end_of_initUSART4 2E04                         ___lwdiv@counter 000D  
                              __ptext10 201C                                __ptext11 1474  
                              __ptext20 1190                                __ptext12 292E  
                              __ptext21 2C86                                __ptext13 2C00  
                              __ptext30 23E0                                __ptext22 0E7A  
                              __ptext14 24EC                                __ptext31 28AA  
                              __ptext23 2664                                __ptext15 2E66  
                              __ptext40 2E5C                                __ptext32 16F2  
                              __ptext24 25B6                                __ptext16 1EB8  
                              __ptext41 2C44                                __ptext33 2AC0  
                              __ptext25 2824                                __ptext17 1BC4  
                              __ptext42 2D54                                __ptext34 2B10  
                              __ptext26 2710                                __ptext18 2CFA  
                              __ptext43 2DA2                                __ptext35 2B60  
                              __ptext27 1D4C                                __ptext19 2E24  
                              __ptext36 2BB0                                __ptext28 2D7C  
                              __ptext37 2E3C                                __ptext29 29A8  
                              __ptext38 2E48                                __ptext39 2E52  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0001                                isa$xinst 000000  
               card_response@clear_read 007D                              _RC4STAbits 000EE7  
                              _vfprintf 2A6E                           ??_turnRight45 0018  
                      ___aomod@dividend 0001                   collect_avg_readings@i 0016  
                           _setMotorPWM 1D4C           collect_avg_readings@blue_read 0012  
                         turnRight45@mL 0014                           turnRight45@mR 0016  
                             sprintf@ap 006E              __end_of_normalise_readings 1474  
          card_response@expected_values 0085                 card_response@green_read 0081  
                          ??_turnLeft45 0018          determine_card@current_smallest 0007  
                       ___aomod@divisor 0009                             ??_vfpfcnvrt 0045  
                       ___aomod@counter 0011                  card_response@blue_read 0083  
                      _color_click_init 2CC6           card_response@master_closeness 00D3  
                              sprintf@f 0070                                sprintf@s 0060  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 2710                      __end_of_turnLeft45 2664  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0012  
                       _sendCharSerial4 2E24                   card_response@red_read 007F  
                          ___aomod@sign 0012                        ??_determine_card 0003  
                          main@PWMcycle 01E0  
