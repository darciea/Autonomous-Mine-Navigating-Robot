

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Nov 25 13:05:40 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.35
    26                           ; Generated 05/05/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _LATHbits	set	3968
    61   000000                     _LATGbits	set	3967
    62   000000                     _TRISFbits	set	3974
    63   000000                     _TRISDbits	set	3972
    64   000000                     _TRISGbits	set	3975
    65   000000                     _SSP2CON2bits	set	3802
    66   000000                     _SSP2CLKPPS	set	3612
    67   000000                     _SSP2DATPPS	set	3613
    68   000000                     _RC7PPS	set	3689
    69   000000                     _RE2PPS	set	3700
    70   000000                     _TRISCbits	set	3971
    71   000000                     _TRISEbits	set	3973
    72   000000                     _TRISHbits	set	3976
    73   000000                     _T2PR	set	4028
    74   000000                     _T2CONbits	set	4029
    75   000000                     _CCPR2H	set	4006
    76   000000                     _CCPR1H	set	4010
    77   000000                     _RE4PPS	set	3702
    78   000000                     _RG6PPS	set	3720
    79   000000                     _RD5PPS	set	3695
    80   000000                     _ANSELDbits	set	3751
    81   000000                     _SSP2ADD	set	3798
    82   000000                     _SSP2CON1bits	set	3801
    83   000000                     _CCPR4H	set	3873
    84   000000                     _CCPR3H	set	3877
    85   000000                     _T2CLKCONbits	set	4031
    86   000000                     _T2HLTbits	set	4030
    87   000000                     _CCP1CONbits	set	4011
    88   000000                     _CCPTMRS0bits	set	4013
    89   000000                     _CCP2CONbits	set	4007
    90   000000                     _LATAbits	set	3961
    91   000000                     _LATFbits	set	3966
    92   000000                     _TRISAbits	set	3969
    93   000000                     _CCP3CONbits	set	3878
    94   000000                     _CCP4CONbits	set	3874
    95   000000                     _SSP2CON2	set	3802
    96   000000                     _SSP2STAT	set	3800
    97   000000                     _SSP2BUF	set	3797
    98   000000                     _RD6PPS	set	3696
    99   000000                     _LATDbits	set	3964
   100                           
   101                           ; #config settings
   102                           
   103                           	psect	cinit
   104   01FC0C                     __pcinit:
   105                           	callstack 0
   106   01FC0C                     start_initialization:
   107                           	callstack 0
   108   01FC0C                     __initialization:
   109                           	callstack 0
   110   01FC0C                     end_of_initialization:
   111                           	callstack 0
   112   01FC0C                     __end_of__initialization:
   113                           	callstack 0
   114   01FC0C  0100               	movlb	0
   115   01FC0E  EFCA  F0FE         	goto	_main	;jump to C main() function
   116                           
   117                           	psect	cstackCOMRAM
   118   000001                     __pcstackCOMRAM:
   119                           	callstack 0
   120   000001                     ??_I2C_2_Master_Idle:
   121   000001                     ?___wmul:
   122                           	callstack 0
   123   000001                     ___wmul@multiplier:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x0
   127   000001                     	ds	1
   128   000002                     I2C_2_Master_Write@data_byte:
   129                           	callstack 0
   130                           
   131                           ; 1 bytes @ 0x1
   132   000002                     	ds	1
   133   000003                     color_writetoaddr@value:
   134                           	callstack 0
   135   000003                     ___wmul@multiplicand:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x2
   139   000003                     	ds	1
   140   000004                     color_writetoaddr@address:
   141                           	callstack 0
   142                           
   143                           ; 1 bytes @ 0x3
   144   000004                     	ds	1
   145   000005                     ??_color_click_init:
   146   000005                     ___wmul@product:
   147                           	callstack 0
   148                           
   149                           ; 2 bytes @ 0x4
   150   000005                     	ds	2
   151   000007                     ?___lwdiv:
   152                           	callstack 0
   153   000007                     ___lwdiv@dividend:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x6
   157   000007                     	ds	2
   158   000009                     ___lwdiv@divisor:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0x8
   162   000009                     	ds	2
   163   00000B                     ___lwdiv@quotient:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0xA
   167   00000B                     	ds	2
   168   00000D                     ___lwdiv@counter:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0xC
   172   00000D                     	ds	1
   173   00000E                     setMotorPWM@m:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0xD
   177   00000E                     	ds	2
   178   000010                     ??_setMotorPWM:
   179                           
   180                           ; 1 bytes @ 0xF
   181   000010                     	ds	2
   182   000012                     setMotorPWM@posDuty:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0x11
   186   000012                     	ds	1
   187   000013                     setMotorPWM@negDuty:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x12
   191   000013                     	ds	1
   192   000014                     main@PWMcycle:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0x13
   196   000014                     	ds	1
   197   000015                     main@motorL:
   198                           	callstack 0
   199                           
   200                           ; 9 bytes @ 0x14
   201   000015                     	ds	9
   202   00001E                     main@motorR:
   203                           	callstack 0
   204                           
   205                           ; 9 bytes @ 0x1D
   206   00001E                     	ds	9
   207                           
   208 ;;
   209 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   210 ;;
   211 ;; *************** function _main *****************
   212 ;; Defined at:
   213 ;;		line 17 in file "main.c"
   214 ;; Parameters:    Size  Location     Type
   215 ;;		None
   216 ;; Auto vars:     Size  Location     Type
   217 ;;  motorR          9   29[COMRAM] struct DC_motor
   218 ;;  motorL          9   20[COMRAM] struct DC_motor
   219 ;;  PWMcycle        1   19[COMRAM] unsigned char 
   220 ;; Return value:  Size  Location     Type
   221 ;;                  1    wreg      void 
   222 ;; Registers used:
   223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   224 ;; Tracked objects:
   225 ;;		On entry : 0/0
   226 ;;		On exit  : 0/0
   227 ;;		Unchanged: 0/0
   228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   230 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   232 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   233 ;;Total ram usage:       19 bytes
   234 ;; Hardware stack levels required when called: 4
   235 ;; This function calls:
   236 ;;		_I2C_2_Master_Init
   237 ;;		_LEDSon_init
   238 ;;		_color_click_init
   239 ;;		_initDCmotorsPWM
   240 ;;		_setMotorPWM
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text0
   247   01FD94                     __ptext0:
   248                           	callstack 0
   249   01FD94                     _main:
   250                           	callstack 27
   251   01FD94                     
   252                           ;main.c: 22:     LEDSon_init();
   253   01FD94  EC29  F0FE         	call	_LEDSon_init	;wreg free
   254   01FD98                     
   255                           ;main.c: 23:     I2C_2_Master_Init();
   256   01FD98  EC61  F0FE         	call	_I2C_2_Master_Init	;wreg free
   257   01FD9C                     
   258                           ;main.c: 24:     color_click_init();
   259   01FD9C  EC76  F0FE         	call	_color_click_init	;wreg free
   260   01FDA0                     
   261                           ;main.c: 25:     initDCmotorsPWM();
   262   01FDA0  EC06  F0FF         	call	_initDCmotorsPWM	;wreg free
   263   01FDA4                     
   264                           ;main.c: 33:     unsigned char PWMcycle = T2PR;
   265   01FDA4  CFBC F014          	movff	4028,main@PWMcycle	;volatile
   266   01FDA8                     
   267                           ;main.c: 35:     struct DC_motor motorL, motorR;;main.c: 37:     motorL.power=0;
   268   01FDA8  0E00               	movlw	0
   269   01FDAA  6E15               	movwf	main@motorL^0,c
   270   01FDAC                     
   271                           ;main.c: 38:     motorL.direction=1;
   272   01FDAC  0E01               	movlw	1
   273   01FDAE  6E16               	movwf	(main@motorL+1)^0,c
   274   01FDB0                     
   275                           ;main.c: 39:     motorL.brakemode=1;
   276   01FDB0  0E01               	movlw	1
   277   01FDB2  6E17               	movwf	(main@motorL+2)^0,c
   278   01FDB4                     
   279                           ;main.c: 40:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   280   01FDB4  0EAA               	movlw	170
   281   01FDB6  6E1A               	movwf	(main@motorL+5)^0,c
   282   01FDB8  0E0F               	movlw	15
   283   01FDBA  6E1B               	movwf	(main@motorL+6)^0,c
   284   01FDBC                     
   285                           ;main.c: 41:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   286   01FDBC  0EA6               	movlw	166
   287   01FDBE  6E1C               	movwf	(main@motorL+7)^0,c
   288   01FDC0  0E0F               	movlw	15
   289   01FDC2  6E1D               	movwf	(main@motorL+8)^0,c
   290   01FDC4                     
   291                           ;main.c: 42:     motorL.PWMperiod=PWMcycle;
   292   01FDC4  C014  F018         	movff	main@PWMcycle,main@motorL+3
   293   01FDC8  6A19               	clrf	(main@motorL+4)^0,c
   294   01FDCA                     
   295                           ;main.c: 44:     motorR.power=0;
   296   01FDCA  0E00               	movlw	0
   297   01FDCC  6E1E               	movwf	main@motorR^0,c
   298   01FDCE                     
   299                           ;main.c: 45:     motorR.direction=1;
   300   01FDCE  0E01               	movlw	1
   301   01FDD0  6E1F               	movwf	(main@motorR+1)^0,c
   302   01FDD2                     
   303                           ;main.c: 46:     motorR.brakemode=1;
   304   01FDD2  0E01               	movlw	1
   305   01FDD4  6E20               	movwf	(main@motorR+2)^0,c
   306                           
   307                           ;main.c: 47:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   308   01FDD6  0E25               	movlw	37
   309   01FDD8  6E23               	movwf	(main@motorR+5)^0,c
   310   01FDDA  0E0F               	movlw	15
   311   01FDDC  6E24               	movwf	(main@motorR+6)^0,c
   312                           
   313                           ;main.c: 48:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   314   01FDDE  0E21               	movlw	33
   315   01FDE0  6E25               	movwf	(main@motorR+7)^0,c
   316   01FDE2  0E0F               	movlw	15
   317   01FDE4  6E26               	movwf	(main@motorR+8)^0,c
   318   01FDE6                     
   319                           ;main.c: 49:     motorR.PWMperiod=PWMcycle;
   320   01FDE6  C014  F021         	movff	main@PWMcycle,main@motorR+3
   321   01FDEA  6A22               	clrf	(main@motorR+4)^0,c
   322   01FDEC                     
   323                           ;main.c: 51:     setMotorPWM(&motorL);
   324   01FDEC  0E15               	movlw	low main@motorL
   325   01FDEE  6E0E               	movwf	setMotorPWM@m^0,c
   326   01FDF0  0E00               	movlw	high main@motorL
   327   01FDF2  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   328   01FDF4  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   329   01FDF8                     
   330                           ;main.c: 52:     setMotorPWM(&motorR);
   331   01FDF8  0E1E               	movlw	low main@motorR
   332   01FDFA  6E0E               	movwf	setMotorPWM@m^0,c
   333   01FDFC  0E00               	movlw	high main@motorR
   334   01FDFE  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   335   01FE00  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   336   01FE04                     l174:
   337   01FE04  EF02  F0FF         	goto	l174
   338   01FE08  EF00  F000         	goto	start
   339   01FE0C                     __end_of_main:
   340                           	callstack 0
   341                           
   342 ;; *************** function _setMotorPWM *****************
   343 ;; Defined at:
   344 ;;		line 61 in file "dc_motor.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;  m               2   13[COMRAM] PTR struct DC_motor
   347 ;;		 -> main@motorR(9), main@motorL(9), 
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  negDuty         1   18[COMRAM] unsigned char 
   350 ;;  posDuty         1   17[COMRAM] unsigned char 
   351 ;; Return value:  Size  Location     Type
   352 ;;                  1    wreg      void 
   353 ;; Registers used:
   354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   355 ;; Tracked objects:
   356 ;;		On entry : 0/0
   357 ;;		On exit  : 0/0
   358 ;;		Unchanged: 0/0
   359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   364 ;;Total ram usage:        6 bytes
   365 ;; Hardware stack levels used: 1
   366 ;; Hardware stack levels required when called: 1
   367 ;; This function calls:
   368 ;;		___lwdiv
   369 ;;		___wmul
   370 ;; This function is called by:
   371 ;;		_main
   372 ;;		_stop
   373 ;;		_turnLeft
   374 ;;		_turnRight
   375 ;;		_fullSpeedAhead
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           	psect	text1
   380   01FE94                     __ptext1:
   381                           	callstack 0
   382   01FE94                     _setMotorPWM:
   383                           	callstack 29
   384   01FE94                     
   385                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
   386   01FE94  EE20 F002          	lfsr	2,2
   387   01FE98  500E               	movf	setMotorPWM@m^0,w,c
   388   01FE9A  26D9               	addwf	fsr2l,f,c
   389   01FE9C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   390   01FE9E  22DA               	addwfc	fsr2h,f,c
   391   01FEA0  50DF               	movf	indf2,w,c
   392   01FEA2  B4D8               	btfsc	status,2,c
   393   01FEA4  EF56  F0FF         	goto	u181
   394   01FEA8  EF58  F0FF         	goto	u180
   395   01FEAC                     u181:
   396   01FEAC  EF8C  F0FF         	goto	l1158
   397   01FEB0                     u180:
   398   01FEB0                     
   399                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
   400   01FEB0  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   401   01FEB4  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   402   01FEB8  50DF               	movf	indf2,w,c
   403   01FEBA  6E10               	movwf	??_setMotorPWM^0,c
   404   01FEBC  5010               	movf	??_setMotorPWM^0,w,c
   405   01FEBE  6E01               	movwf	___wmul@multiplier^0,c
   406   01FEC0  6A02               	clrf	(___wmul@multiplier+1)^0,c
   407   01FEC2  EE20 F003          	lfsr	2,3
   408   01FEC6  500E               	movf	setMotorPWM@m^0,w,c
   409   01FEC8  26D9               	addwf	fsr2l,f,c
   410   01FECA  500F               	movf	(setMotorPWM@m+1)^0,w,c
   411   01FECC  22DA               	addwfc	fsr2h,f,c
   412   01FECE  CFDE F003          	movff	postinc2,___wmul@multiplicand
   413   01FED2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   414   01FED6  EC3A  F0FE         	call	___wmul	;wreg free
   415   01FEDA  C001  F007         	movff	?___wmul,___lwdiv@dividend
   416   01FEDE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   417   01FEE2  0E00               	movlw	0
   418   01FEE4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   419   01FEE6  0E64               	movlw	100
   420   01FEE8  6E09               	movwf	___lwdiv@divisor^0,c
   421   01FEEA  EC90  F0FE         	call	___lwdiv	;wreg free
   422   01FEEE  EE20 F003          	lfsr	2,3
   423   01FEF2  500E               	movf	setMotorPWM@m^0,w,c
   424   01FEF4  26D9               	addwf	fsr2l,f,c
   425   01FEF6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   426   01FEF8  22DA               	addwfc	fsr2h,f,c
   427   01FEFA  50DF               	movf	indf2,w,c
   428   01FEFC  6E11               	movwf	(??_setMotorPWM+1)^0,c
   429   01FEFE  5007               	movf	?___lwdiv^0,w,c
   430   01FF00  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
   431   01FF02  6E12               	movwf	setMotorPWM@posDuty^0,c
   432   01FF04                     
   433                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
   434   01FF04  EE20 F003          	lfsr	2,3
   435   01FF08  500E               	movf	setMotorPWM@m^0,w,c
   436   01FF0A  26D9               	addwf	fsr2l,f,c
   437   01FF0C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   438   01FF0E  22DA               	addwfc	fsr2h,f,c
   439   01FF10  50DF               	movf	indf2,w,c
   440   01FF12  6E13               	movwf	setMotorPWM@negDuty^0,c
   441                           
   442                           ;dc_motor.c: 68:     }
   443   01FF14  EFAF  F0FF         	goto	l1162
   444   01FF18                     l1158:
   445                           
   446                           ;dc_motor.c: 70:         posDuty=0;
   447   01FF18  0E00               	movlw	0
   448   01FF1A  6E12               	movwf	setMotorPWM@posDuty^0,c
   449   01FF1C                     
   450                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
   451   01FF1C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   452   01FF20  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   453   01FF24  50DF               	movf	indf2,w,c
   454   01FF26  6E10               	movwf	??_setMotorPWM^0,c
   455   01FF28  5010               	movf	??_setMotorPWM^0,w,c
   456   01FF2A  6E01               	movwf	___wmul@multiplier^0,c
   457   01FF2C  6A02               	clrf	(___wmul@multiplier+1)^0,c
   458   01FF2E  EE20 F003          	lfsr	2,3
   459   01FF32  500E               	movf	setMotorPWM@m^0,w,c
   460   01FF34  26D9               	addwf	fsr2l,f,c
   461   01FF36  500F               	movf	(setMotorPWM@m+1)^0,w,c
   462   01FF38  22DA               	addwfc	fsr2h,f,c
   463   01FF3A  CFDE F003          	movff	postinc2,___wmul@multiplicand
   464   01FF3E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   465   01FF42  EC3A  F0FE         	call	___wmul	;wreg free
   466   01FF46  C001  F007         	movff	?___wmul,___lwdiv@dividend
   467   01FF4A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   468   01FF4E  0E00               	movlw	0
   469   01FF50  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   470   01FF52  0E64               	movlw	100
   471   01FF54  6E09               	movwf	___lwdiv@divisor^0,c
   472   01FF56  EC90  F0FE         	call	___lwdiv	;wreg free
   473   01FF5A  5007               	movf	?___lwdiv^0,w,c
   474   01FF5C  6E13               	movwf	setMotorPWM@negDuty^0,c
   475   01FF5E                     l1162:
   476                           
   477                           ;dc_motor.c: 74:     if (m->direction) {
   478   01FF5E  EE20 F001          	lfsr	2,1
   479   01FF62  500E               	movf	setMotorPWM@m^0,w,c
   480   01FF64  26D9               	addwf	fsr2l,f,c
   481   01FF66  500F               	movf	(setMotorPWM@m+1)^0,w,c
   482   01FF68  22DA               	addwfc	fsr2h,f,c
   483   01FF6A  50DF               	movf	indf2,w,c
   484   01FF6C  B4D8               	btfsc	status,2,c
   485   01FF6E  EFBB  F0FF         	goto	u191
   486   01FF72  EFBD  F0FF         	goto	u190
   487   01FF76                     u191:
   488   01FF76  EFDF  F0FF         	goto	l1166
   489   01FF7A                     u190:
   490   01FF7A                     
   491                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
   492   01FF7A  EE20 F005          	lfsr	2,5
   493   01FF7E  500E               	movf	setMotorPWM@m^0,w,c
   494   01FF80  26D9               	addwf	fsr2l,f,c
   495   01FF82  500F               	movf	(setMotorPWM@m+1)^0,w,c
   496   01FF84  22DA               	addwfc	fsr2h,f,c
   497   01FF86  CFDE F010          	movff	postinc2,??_setMotorPWM
   498   01FF8A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   499   01FF8E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   500   01FF92  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   501   01FF96  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   502                           
   503                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
   504   01FF9A  EE20 F007          	lfsr	2,7
   505   01FF9E  500E               	movf	setMotorPWM@m^0,w,c
   506   01FFA0  26D9               	addwf	fsr2l,f,c
   507   01FFA2  500F               	movf	(setMotorPWM@m+1)^0,w,c
   508   01FFA4  22DA               	addwfc	fsr2h,f,c
   509   01FFA6  CFDE F010          	movff	postinc2,??_setMotorPWM
   510   01FFAA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   511   01FFAE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   512   01FFB2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   513   01FFB6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   514                           
   515                           ;dc_motor.c: 77:     } else {
   516   01FFBA  EFFF  F0FF         	goto	l77
   517   01FFBE                     l1166:
   518                           
   519                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
   520   01FFBE  EE20 F005          	lfsr	2,5
   521   01FFC2  500E               	movf	setMotorPWM@m^0,w,c
   522   01FFC4  26D9               	addwf	fsr2l,f,c
   523   01FFC6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   524   01FFC8  22DA               	addwfc	fsr2h,f,c
   525   01FFCA  CFDE F010          	movff	postinc2,??_setMotorPWM
   526   01FFCE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   527   01FFD2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   528   01FFD6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   529   01FFDA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   530                           
   531                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
   532   01FFDE  EE20 F007          	lfsr	2,7
   533   01FFE2  500E               	movf	setMotorPWM@m^0,w,c
   534   01FFE4  26D9               	addwf	fsr2l,f,c
   535   01FFE6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   536   01FFE8  22DA               	addwfc	fsr2h,f,c
   537   01FFEA  CFDE F010          	movff	postinc2,??_setMotorPWM
   538   01FFEE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   539   01FFF2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   540   01FFF6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   541   01FFFA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   542   01FFFE                     l77:
   543   01FFFE  0012               	return		;funcret
   544   020000                     __end_of_setMotorPWM:
   545                           	callstack 0
   546                           
   547 ;; *************** function ___wmul *****************
   548 ;; Defined at:
   549 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;  multiplier      2    0[COMRAM] unsigned int 
   552 ;;  multiplicand    2    2[COMRAM] unsigned int 
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  product         2    4[COMRAM] unsigned int 
   555 ;; Return value:  Size  Location     Type
   556 ;;                  2    0[COMRAM] unsigned int 
   557 ;; Registers used:
   558 ;;		wreg, status,2, status,0, prodl, prodh
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   567 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   568 ;;Total ram usage:        6 bytes
   569 ;; Hardware stack levels used: 1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_setMotorPWM
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578   01FC74                     __ptext2:
   579                           	callstack 0
   580   01FC74                     ___wmul:
   581                           	callstack 29
   582   01FC74  5001               	movf	___wmul@multiplier^0,w,c
   583   01FC76  0203               	mulwf	___wmul@multiplicand^0,c
   584   01FC78  CFF3 F005          	movff	prodl,___wmul@product
   585   01FC7C  CFF4 F006          	movff	prodh,___wmul@product+1
   586   01FC80  5001               	movf	___wmul@multiplier^0,w,c
   587   01FC82  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   588   01FC84  50F3               	movf	243,w,c
   589   01FC86  2606               	addwf	(___wmul@product+1)^0,f,c
   590   01FC88  5002               	movf	(___wmul@multiplier+1)^0,w,c
   591   01FC8A  0203               	mulwf	___wmul@multiplicand^0,c
   592   01FC8C  50F3               	movf	243,w,c
   593   01FC8E  2606               	addwf	(___wmul@product+1)^0,f,c
   594   01FC90  C005  F001         	movff	___wmul@product,?___wmul
   595   01FC94  C006  F002         	movff	___wmul@product+1,?___wmul+1
   596   01FC98  0012               	return		;funcret
   597   01FC9A                     __end_of___wmul:
   598                           	callstack 0
   599                           
   600 ;; *************** function ___lwdiv *****************
   601 ;; Defined at:
   602 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  dividend        2    6[COMRAM] unsigned int 
   605 ;;  divisor         2    8[COMRAM] unsigned int 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  quotient        2   10[COMRAM] unsigned int 
   608 ;;  counter         1   12[COMRAM] unsigned char 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  2    6[COMRAM] unsigned int 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   618 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   621 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   622 ;;Total ram usage:        7 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_setMotorPWM
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text3
   632   01FD20                     __ptext3:
   633                           	callstack 0
   634   01FD20                     ___lwdiv:
   635                           	callstack 29
   636   01FD20  0E00               	movlw	0
   637   01FD22  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
   638   01FD24  0E00               	movlw	0
   639   01FD26  6E0B               	movwf	___lwdiv@quotient^0,c
   640   01FD28  5009               	movf	___lwdiv@divisor^0,w,c
   641   01FD2A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
   642   01FD2C  B4D8               	btfsc	status,2,c
   643   01FD2E  EF9B  F0FE         	goto	u151
   644   01FD32  EF9D  F0FE         	goto	u150
   645   01FD36                     u151:
   646   01FD36  EFC5  F0FE         	goto	l694
   647   01FD3A                     u150:
   648   01FD3A  0E01               	movlw	1
   649   01FD3C  6E0D               	movwf	___lwdiv@counter^0,c
   650   01FD3E  EFA5  F0FE         	goto	l1128
   651   01FD42                     l1126:
   652   01FD42  90D8               	bcf	status,0,c
   653   01FD44  3609               	rlcf	___lwdiv@divisor^0,f,c
   654   01FD46  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
   655   01FD48  2A0D               	incf	___lwdiv@counter^0,f,c
   656   01FD4A                     l1128:
   657   01FD4A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
   658   01FD4C  EFAA  F0FE         	goto	u161
   659   01FD50  EFAC  F0FE         	goto	u160
   660   01FD54                     u161:
   661   01FD54  EFA1  F0FE         	goto	l1126
   662   01FD58                     u160:
   663   01FD58                     l1130:
   664   01FD58  90D8               	bcf	status,0,c
   665   01FD5A  360B               	rlcf	___lwdiv@quotient^0,f,c
   666   01FD5C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
   667   01FD5E  5009               	movf	___lwdiv@divisor^0,w,c
   668   01FD60  5C07               	subwf	___lwdiv@dividend^0,w,c
   669   01FD62  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   670   01FD64  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
   671   01FD66  A0D8               	btfss	status,0,c
   672   01FD68  EFB8  F0FE         	goto	u171
   673   01FD6C  EFBA  F0FE         	goto	u170
   674   01FD70                     u171:
   675   01FD70  EFBF  F0FE         	goto	l1138
   676   01FD74                     u170:
   677   01FD74  5009               	movf	___lwdiv@divisor^0,w,c
   678   01FD76  5E07               	subwf	___lwdiv@dividend^0,f,c
   679   01FD78  500A               	movf	(___lwdiv@divisor+1)^0,w,c
   680   01FD7A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
   681   01FD7C  800B               	bsf	___lwdiv@quotient^0,0,c
   682   01FD7E                     l1138:
   683   01FD7E  90D8               	bcf	status,0,c
   684   01FD80  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
   685   01FD82  3209               	rrcf	___lwdiv@divisor^0,f,c
   686   01FD84  2E0D               	decfsz	___lwdiv@counter^0,f,c
   687   01FD86  EFAC  F0FE         	goto	l1130
   688   01FD8A                     l694:
   689   01FD8A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
   690   01FD8E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   691   01FD92  0012               	return		;funcret
   692   01FD94                     __end_of___lwdiv:
   693                           	callstack 0
   694                           
   695 ;; *************** function _initDCmotorsPWM *****************
   696 ;; Defined at:
   697 ;;		line 6 in file "dc_motor.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   715 ;;Total ram usage:        0 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text4
   725   01FE0C                     __ptext4:
   726                           	callstack 0
   727   01FE0C                     _initDCmotorsPWM:
   728                           	callstack 30
   729   01FE0C                     
   730                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
   731   01FE0C  9485               	bcf	133,2,c	;volatile
   732                           
   733                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
   734   01FE0E  9885               	bcf	133,4,c	;volatile
   735                           
   736                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
   737   01FE10  9E83               	bcf	131,7,c	;volatile
   738                           
   739                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
   740   01FE12  9C87               	bcf	135,6,c	;volatile
   741   01FE14                     
   742                           ;dc_motor.c: 14:     RE2PPS=0x05;
   743   01FE14  0E05               	movlw	5
   744   01FE16  010E               	movlb	14	; () banked
   745   01FE18  6F74               	movwf	116,b	;volatile
   746                           
   747                           ;dc_motor.c: 15:     RE4PPS=0x06;
   748   01FE1A  0E06               	movlw	6
   749   01FE1C  6F76               	movwf	118,b	;volatile
   750                           
   751                           ;dc_motor.c: 16:     RC7PPS=0x07;
   752   01FE1E  0E07               	movlw	7
   753   01FE20  6F69               	movwf	105,b	;volatile
   754                           
   755                           ;dc_motor.c: 17:     RG6PPS=0x08;
   756   01FE22  0E08               	movlw	8
   757   01FE24  6F88               	movwf	136,b	;volatile
   758                           
   759                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
   760   01FE26  50BD               	movf	189,w,c	;volatile
   761   01FE28  0B8F               	andlw	-113
   762   01FE2A  0940               	iorlw	64
   763   01FE2C  6EBD               	movwf	189,c	;volatile
   764                           
   765                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
   766   01FE2E  0EE0               	movlw	-32
   767   01FE30  16BE               	andwf	190,f,c	;volatile
   768                           
   769                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
   770   01FE32  50BF               	movf	191,w,c	;volatile
   771   01FE34  0BF0               	andlw	-16
   772   01FE36  0901               	iorlw	1
   773   01FE38  6EBF               	movwf	191,c	;volatile
   774                           
   775                           ;dc_motor.c: 26:     T2PR=99;
   776   01FE3A  0E63               	movlw	99
   777   01FE3C  6EBC               	movwf	188,c	;volatile
   778   01FE3E                     
   779                           ; BSR set to: 14
   780                           ;dc_motor.c: 27:     T2CONbits.ON=1;
   781   01FE3E  8EBD               	bsf	189,7,c	;volatile
   782                           
   783                           ;dc_motor.c: 31:     CCPR1H=0;
   784   01FE40  0E00               	movlw	0
   785   01FE42  6EAA               	movwf	170,c	;volatile
   786                           
   787                           ;dc_motor.c: 32:     CCPR2H=0;
   788   01FE44  0E00               	movlw	0
   789   01FE46  6EA6               	movwf	166,c	;volatile
   790                           
   791                           ;dc_motor.c: 33:     CCPR3H=0;
   792   01FE48  0E00               	movlw	0
   793   01FE4A  010F               	movlb	15	; () banked
   794   01FE4C  6F25               	movwf	37,b	;volatile
   795                           
   796                           ;dc_motor.c: 34:     CCPR4H=0;
   797   01FE4E  0E00               	movlw	0
   798   01FE50  6F21               	movwf	33,b	;volatile
   799                           
   800                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
   801   01FE52  0EFC               	movlw	-4
   802   01FE54  16AD               	andwf	173,f,c	;volatile
   803                           
   804                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
   805   01FE56  0EF3               	movlw	-13
   806   01FE58  16AD               	andwf	173,f,c	;volatile
   807                           
   808                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
   809   01FE5A  0ECF               	movlw	-49
   810   01FE5C  16AD               	andwf	173,f,c	;volatile
   811                           
   812                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
   813   01FE5E  0E3F               	movlw	-193
   814   01FE60  16AD               	andwf	173,f,c	;volatile
   815   01FE62                     
   816                           ; BSR set to: 15
   817                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
   818   01FE62  88AB               	bsf	171,4,c	;volatile
   819                           
   820                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
   821   01FE64  50AB               	movf	171,w,c	;volatile
   822   01FE66  0BF0               	andlw	-16
   823   01FE68  090C               	iorlw	12
   824   01FE6A  6EAB               	movwf	171,c	;volatile
   825   01FE6C                     
   826                           ; BSR set to: 15
   827                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
   828   01FE6C  8EAB               	bsf	171,7,c	;volatile
   829   01FE6E                     
   830                           ; BSR set to: 15
   831                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
   832   01FE6E  88A7               	bsf	167,4,c	;volatile
   833                           
   834                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
   835   01FE70  50A7               	movf	167,w,c	;volatile
   836   01FE72  0BF0               	andlw	-16
   837   01FE74  090C               	iorlw	12
   838   01FE76  6EA7               	movwf	167,c	;volatile
   839   01FE78                     
   840                           ; BSR set to: 15
   841                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
   842   01FE78  8EA7               	bsf	167,7,c	;volatile
   843   01FE7A                     
   844                           ; BSR set to: 15
   845                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
   846   01FE7A  8926               	bsf	38,4,b	;volatile
   847                           
   848                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
   849   01FE7C  5126               	movf	38,w,b	;volatile
   850   01FE7E  0BF0               	andlw	-16
   851   01FE80  090C               	iorlw	12
   852   01FE82  6F26               	movwf	38,b	;volatile
   853   01FE84                     
   854                           ; BSR set to: 15
   855                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
   856   01FE84  8F26               	bsf	38,7,b	;volatile
   857   01FE86                     
   858                           ; BSR set to: 15
   859                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
   860   01FE86  8922               	bsf	34,4,b	;volatile
   861                           
   862                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
   863   01FE88  5122               	movf	34,w,b	;volatile
   864   01FE8A  0BF0               	andlw	-16
   865   01FE8C  090C               	iorlw	12
   866   01FE8E  6F22               	movwf	34,b	;volatile
   867   01FE90                     
   868                           ; BSR set to: 15
   869                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
   870   01FE90  8F22               	bsf	34,7,b	;volatile
   871   01FE92                     
   872                           ; BSR set to: 15
   873   01FE92  0012               	return		;funcret
   874   01FE94                     __end_of_initDCmotorsPWM:
   875                           	callstack 0
   876                           
   877 ;; *************** function _color_click_init *****************
   878 ;; Defined at:
   879 ;;		line 5 in file "color.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   897 ;;Total ram usage:        1 bytes
   898 ;; Hardware stack levels used: 1
   899 ;; Hardware stack levels required when called: 3
   900 ;; This function calls:
   901 ;;		_I2C_2_Master_Init
   902 ;;		_color_writetoaddr
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text5
   909   01FCEC                     __ptext5:
   910                           	callstack 0
   911   01FCEC                     _color_click_init:
   912                           	callstack 27
   913   01FCEC                     
   914                           ;color.c: 8:     I2C_2_Master_Init();
   915   01FCEC  EC61  F0FE         	call	_I2C_2_Master_Init	;wreg free
   916   01FCF0                     
   917                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
   918   01FCF0  0E01               	movlw	1
   919   01FCF2  6E03               	movwf	color_writetoaddr@value^0,c
   920   01FCF4  0E00               	movlw	0
   921   01FCF6  EC19  F0FE         	call	_color_writetoaddr
   922   01FCFA                     
   923                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
   924   01FCFA  0E3F               	movlw	63
   925   01FCFC  6E05               	movwf	??_color_click_init^0,c
   926   01FCFE  0E55               	movlw	85
   927   01FD00                     u257:
   928   01FD00  2EE8               	decfsz	wreg,f,c
   929   01FD02  D7FE               	bra	u257
   930   01FD04  2E05               	decfsz	??_color_click_init^0,f,c
   931   01FD06  D7FC               	bra	u257
   932   01FD08  F000               	nop	
   933   01FD0A                     
   934                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
   935   01FD0A  0E03               	movlw	3
   936   01FD0C  6E03               	movwf	color_writetoaddr@value^0,c
   937   01FD0E  0E00               	movlw	0
   938   01FD10  EC19  F0FE         	call	_color_writetoaddr
   939   01FD14                     
   940                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
   941   01FD14  0ED5               	movlw	213
   942   01FD16  6E03               	movwf	color_writetoaddr@value^0,c
   943   01FD18  0E01               	movlw	1
   944   01FD1A  EC19  F0FE         	call	_color_writetoaddr
   945   01FD1E  0012               	return		;funcret
   946   01FD20                     __end_of_color_click_init:
   947                           	callstack 0
   948                           
   949 ;; *************** function _color_writetoaddr *****************
   950 ;; Defined at:
   951 ;;		line 21 in file "color.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  address         1    wreg     unsigned char 
   954 ;;  value           1    2[COMRAM] unsigned char 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  address         1    3[COMRAM] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   966 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   969 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   970 ;;Total ram usage:        2 bytes
   971 ;; Hardware stack levels used: 1
   972 ;; Hardware stack levels required when called: 2
   973 ;; This function calls:
   974 ;;		_I2C_2_Master_Start
   975 ;;		_I2C_2_Master_Stop
   976 ;;		_I2C_2_Master_Write
   977 ;; This function is called by:
   978 ;;		_color_click_init
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text6
   983   01FC32                     __ptext6:
   984                           	callstack 0
   985   01FC32                     _color_writetoaddr:
   986                           	callstack 27
   987                           
   988                           ;incstack = 0
   989                           ;color_writetoaddr@address stored from wreg
   990   01FC32  6E04               	movwf	color_writetoaddr@address^0,c
   991   01FC34                     
   992                           ;color.c: 22:     I2C_2_Master_Start();
   993   01FC34  EC09  F0FE         	call	_I2C_2_Master_Start	;wreg free
   994                           
   995                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
   996   01FC38  0E52               	movlw	82
   997   01FC3A  EC13  F0FE         	call	_I2C_2_Master_Write
   998                           
   999                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1000   01FC3E  5004               	movf	color_writetoaddr@address^0,w,c
  1001   01FC40  0980               	iorlw	128
  1002   01FC42  EC13  F0FE         	call	_I2C_2_Master_Write
  1003                           
  1004                           ;color.c: 25:     I2C_2_Master_Write(value);
  1005   01FC46  5003               	movf	color_writetoaddr@value^0,w,c
  1006   01FC48  EC13  F0FE         	call	_I2C_2_Master_Write
  1007                           
  1008                           ;color.c: 26:     I2C_2_Master_Stop();
  1009   01FC4C  EC0E  F0FE         	call	_I2C_2_Master_Stop	;wreg free
  1010   01FC50  0012               	return		;funcret
  1011   01FC52                     __end_of_color_writetoaddr:
  1012                           	callstack 0
  1013                           
  1014 ;; *************** function _I2C_2_Master_Write *****************
  1015 ;; Defined at:
  1016 ;;		line 45 in file "i2c.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;  data_byte       1    wreg     unsigned char 
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;  data_byte       1    1[COMRAM] unsigned char 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  1    wreg      void 
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0, cstack
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1034 ;;Total ram usage:        1 bytes
  1035 ;; Hardware stack levels used: 1
  1036 ;; Hardware stack levels required when called: 1
  1037 ;; This function calls:
  1038 ;;		_I2C_2_Master_Idle
  1039 ;; This function is called by:
  1040 ;;		_color_writetoaddr
  1041 ;;		_color_read_Red
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text7
  1046   01FC26                     __ptext7:
  1047                           	callstack 0
  1048   01FC26                     _I2C_2_Master_Write:
  1049                           	callstack 27
  1050                           
  1051                           ;incstack = 0
  1052                           ;I2C_2_Master_Write@data_byte stored from wreg
  1053   01FC26  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1054   01FC28                     
  1055                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1056   01FC28  EC4D  F0FE         	call	_I2C_2_Master_Idle	;wreg free
  1057   01FC2C                     
  1058                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1059   01FC2C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1060   01FC30  0012               	return		;funcret
  1061   01FC32                     __end_of_I2C_2_Master_Write:
  1062                           	callstack 0
  1063                           
  1064 ;; *************** function _I2C_2_Master_Stop *****************
  1065 ;; Defined at:
  1066 ;;		line 39 in file "i2c.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;Total ram usage:        0 bytes
  1085 ;; Hardware stack levels used: 1
  1086 ;; Hardware stack levels required when called: 1
  1087 ;; This function calls:
  1088 ;;		_I2C_2_Master_Idle
  1089 ;; This function is called by:
  1090 ;;		_color_writetoaddr
  1091 ;;		_color_read_Red
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text8
  1096   01FC1C                     __ptext8:
  1097                           	callstack 0
  1098   01FC1C                     _I2C_2_Master_Stop:
  1099                           	callstack 27
  1100   01FC1C                     
  1101                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1102   01FC1C  EC4D  F0FE         	call	_I2C_2_Master_Idle	;wreg free
  1103   01FC20                     
  1104                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1105   01FC20  010E               	movlb	14	; () banked
  1106   01FC22  85DA               	bsf	218,2,b	;volatile
  1107   01FC24                     
  1108                           ; BSR set to: 14
  1109   01FC24  0012               	return		;funcret
  1110   01FC26                     __end_of_I2C_2_Master_Stop:
  1111                           	callstack 0
  1112                           
  1113 ;; *************** function _I2C_2_Master_Start *****************
  1114 ;; Defined at:
  1115 ;;		line 27 in file "i2c.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, status,2, status,0, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1133 ;;Total ram usage:        0 bytes
  1134 ;; Hardware stack levels used: 1
  1135 ;; Hardware stack levels required when called: 1
  1136 ;; This function calls:
  1137 ;;		_I2C_2_Master_Idle
  1138 ;; This function is called by:
  1139 ;;		_color_writetoaddr
  1140 ;;		_color_read_Red
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text9
  1145   01FC12                     __ptext9:
  1146                           	callstack 0
  1147   01FC12                     _I2C_2_Master_Start:
  1148                           	callstack 27
  1149   01FC12                     
  1150                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1151   01FC12  EC4D  F0FE         	call	_I2C_2_Master_Idle	;wreg free
  1152   01FC16                     
  1153                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1154   01FC16  010E               	movlb	14	; () banked
  1155   01FC18  81DA               	bsf	218,0,b	;volatile
  1156   01FC1A                     
  1157                           ; BSR set to: 14
  1158   01FC1A  0012               	return		;funcret
  1159   01FC1C                     __end_of_I2C_2_Master_Start:
  1160                           	callstack 0
  1161                           
  1162 ;; *************** function _I2C_2_Master_Idle *****************
  1163 ;; Defined at:
  1164 ;;		line 22 in file "i2c.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;Total ram usage:        1 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_I2C_2_Master_Start
  1188 ;;		_I2C_2_Master_Stop
  1189 ;;		_I2C_2_Master_Write
  1190 ;;		_I2C_2_Master_RepStart
  1191 ;;		_I2C_2_Master_Read
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text10
  1196   01FC9A                     __ptext10:
  1197                           	callstack 0
  1198   01FC9A                     _I2C_2_Master_Idle:
  1199                           	callstack 27
  1200   01FC9A                     l131:
  1201   01FC9A  010E               	movlb	14	; () banked
  1202   01FC9C  B5D8               	btfsc	216,2,b	;volatile
  1203   01FC9E  EF53  F0FE         	goto	u11
  1204   01FCA2  EF55  F0FE         	goto	u10
  1205   01FCA6                     u11:
  1206   01FCA6  EF4D  F0FE         	goto	l131
  1207   01FCAA                     u10:
  1208   01FCAA                     
  1209                           ; BSR set to: 14
  1210   01FCAA  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1211   01FCAE  0E1F               	movlw	31
  1212   01FCB0  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1213   01FCB2  A4D8               	btfss	status,2,c
  1214   01FCB4  EF5E  F0FE         	goto	u21
  1215   01FCB8  EF60  F0FE         	goto	u20
  1216   01FCBC                     u21:
  1217   01FCBC  EF4D  F0FE         	goto	l131
  1218   01FCC0                     u20:
  1219   01FCC0                     
  1220                           ; BSR set to: 14
  1221   01FCC0  0012               	return		;funcret
  1222   01FCC2                     __end_of_I2C_2_Master_Idle:
  1223                           	callstack 0
  1224                           
  1225 ;; *************** function _I2C_2_Master_Init *****************
  1226 ;; Defined at:
  1227 ;;		line 4 in file "i2c.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels used: 1
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_color_click_init
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text11
  1256   01FCC2                     __ptext11:
  1257                           	callstack 0
  1258   01FCC2                     _I2C_2_Master_Init:
  1259                           	callstack 29
  1260   01FCC2                     
  1261                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1262   01FCC2  010E               	movlb	14	; () banked
  1263   01FCC4  51D9               	movf	217,w,b	;volatile
  1264   01FCC6  0BF0               	andlw	-16
  1265   01FCC8  0908               	iorlw	8
  1266   01FCCA  6FD9               	movwf	217,b	;volatile
  1267   01FCCC                     
  1268                           ; BSR set to: 14
  1269                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1270   01FCCC  8BD9               	bsf	217,5,b	;volatile
  1271                           
  1272                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1273   01FCCE  0E9F               	movlw	159
  1274   01FCD0  6FD6               	movwf	214,b	;volatile
  1275   01FCD2                     
  1276                           ; BSR set to: 14
  1277                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1278   01FCD2  8A84               	bsf	132,5,c	;volatile
  1279   01FCD4                     
  1280                           ; BSR set to: 14
  1281                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1282   01FCD4  8C84               	bsf	132,6,c	;volatile
  1283   01FCD6                     
  1284                           ; BSR set to: 14
  1285                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1286   01FCD6  9BA7               	bcf	167,5,b	;volatile
  1287   01FCD8                     
  1288                           ; BSR set to: 14
  1289                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1290   01FCD8  9DA7               	bcf	167,6,b	;volatile
  1291                           
  1292                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1293   01FCDA  0E1D               	movlw	29
  1294   01FCDC  6F1D               	movwf	29,b	;volatile
  1295                           
  1296                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1297   01FCDE  0E1E               	movlw	30
  1298   01FCE0  6F1C               	movwf	28,b	;volatile
  1299                           
  1300                           ;i2c.c: 18:   RD5PPS=0x1C;
  1301   01FCE2  0E1C               	movlw	28
  1302   01FCE4  6F6F               	movwf	111,b	;volatile
  1303                           
  1304                           ;i2c.c: 19:   RD6PPS=0x1B;
  1305   01FCE6  0E1B               	movlw	27
  1306   01FCE8  6F70               	movwf	112,b	;volatile
  1307   01FCEA                     
  1308                           ; BSR set to: 14
  1309   01FCEA  0012               	return		;funcret
  1310   01FCEC                     __end_of_I2C_2_Master_Init:
  1311                           	callstack 0
  1312                           
  1313 ;; *************** function _LEDSon_init *****************
  1314 ;; Defined at:
  1315 ;;		line 18 in file "LEDsOn.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		None
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used: 1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text12
  1343   01FC52                     __ptext12:
  1344                           	callstack 0
  1345   01FC52                     _LEDSon_init:
  1346                           	callstack 30
  1347   01FC52                     
  1348                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  1349   01FC52  9288               	bcf	136,1,c	;volatile
  1350                           
  1351                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  1352   01FC54  9088               	bcf	136,0,c	;volatile
  1353                           
  1354                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  1355   01FC56  9884               	bcf	132,4,c	;volatile
  1356                           
  1357                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  1358   01FC58  9684               	bcf	132,3,c	;volatile
  1359                           
  1360                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  1361   01FC5A  9086               	bcf	134,0,c	;volatile
  1362                           
  1363                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  1364   01FC5C  9287               	bcf	135,1,c	;volatile
  1365                           
  1366                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  1367   01FC5E  9E86               	bcf	134,7,c	;volatile
  1368                           
  1369                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  1370   01FC60  9881               	bcf	129,4,c	;volatile
  1371                           
  1372                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 0;
  1373   01FC62  9E7E               	bcf	126,7,c	;volatile
  1374                           
  1375                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 0;
  1376   01FC64  927F               	bcf	127,1,c	;volatile
  1377                           
  1378                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 0;
  1379   01FC66  9879               	bcf	121,4,c	;volatile
  1380                           
  1381                           ;LEDsOn.c: 36:     LATDbits.LATD4 = 0;
  1382   01FC68  987C               	bcf	124,4,c	;volatile
  1383                           
  1384                           ;LEDsOn.c: 37:     LATHbits.LATH1 = 0;
  1385   01FC6A  9280               	bcf	128,1,c	;volatile
  1386                           
  1387                           ;LEDsOn.c: 38:     LATFbits.LATF0 = 0;
  1388   01FC6C  907E               	bcf	126,0,c	;volatile
  1389                           
  1390                           ;LEDsOn.c: 39:     LATHbits.LATH0 = 0;
  1391   01FC6E  9080               	bcf	128,0,c	;volatile
  1392                           
  1393                           ;LEDsOn.c: 40:     LATDbits.LATD3 = 0;
  1394   01FC70  967C               	bcf	124,3,c	;volatile
  1395   01FC72  0012               	return		;funcret
  1396   01FC74                     __end_of_LEDSon_init:
  1397                           	callstack 0
  1398   000000                     
  1399                           	psect	rparam
  1400   000000                     
  1401                           	psect	idloc
  1402                           
  1403                           ;Config register IDLOC0 @ 0x200000
  1404                           ;	unspecified, using default values
  1405   200000                     	org	2097152
  1406   200000  0FFF               	dw	4095
  1407                           
  1408                           ;Config register IDLOC1 @ 0x200002
  1409                           ;	unspecified, using default values
  1410   200002                     	org	2097154
  1411   200002  0FFF               	dw	4095
  1412                           
  1413                           ;Config register IDLOC2 @ 0x200004
  1414                           ;	unspecified, using default values
  1415   200004                     	org	2097156
  1416   200004  0FFF               	dw	4095
  1417                           
  1418                           ;Config register IDLOC3 @ 0x200006
  1419                           ;	unspecified, using default values
  1420   200006                     	org	2097158
  1421   200006  0FFF               	dw	4095
  1422                           
  1423                           ;Config register IDLOC4 @ 0x200008
  1424                           ;	unspecified, using default values
  1425   200008                     	org	2097160
  1426   200008  0FFF               	dw	4095
  1427                           
  1428                           ;Config register IDLOC5 @ 0x20000A
  1429                           ;	unspecified, using default values
  1430   20000A                     	org	2097162
  1431   20000A  0FFF               	dw	4095
  1432                           
  1433                           ;Config register IDLOC6 @ 0x20000C
  1434                           ;	unspecified, using default values
  1435   20000C                     	org	2097164
  1436   20000C  0FFF               	dw	4095
  1437                           
  1438                           ;Config register IDLOC7 @ 0x20000E
  1439                           ;	unspecified, using default values
  1440   20000E                     	org	2097166
  1441   20000E  0FFF               	dw	4095
  1442                           
  1443                           	psect	config
  1444                           
  1445                           ;Config register CONFIG1L @ 0x300000
  1446                           ;	External Oscillator mode Selection bits
  1447                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1448                           ;	Power-up default value for COSC bits
  1449                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1450   300000                     	org	3145728
  1451   300000  AA                 	db	170
  1452                           
  1453                           ;Config register CONFIG1H @ 0x300001
  1454                           ;	unspecified, using default values
  1455                           ;	Clock Out Enable bit
  1456                           ;	CLKOUTEN = 0x1, unprogrammed default
  1457                           ;	Clock Switch Enable bit
  1458                           ;	CSWEN = 0x1, unprogrammed default
  1459                           ;	Fail-Safe Clock Monitor Enable bit
  1460                           ;	FCMEN = 0x1, unprogrammed default
  1461   300001                     	org	3145729
  1462   300001  FF                 	db	255
  1463                           
  1464                           ;Config register CONFIG2L @ 0x300002
  1465                           ;	unspecified, using default values
  1466                           ;	Master Clear Enable bit
  1467                           ;	MCLRE = 0x1, unprogrammed default
  1468                           ;	Power-up Timer Enable bit
  1469                           ;	PWRTE = 0x1, unprogrammed default
  1470                           ;	Low-power BOR enable bit
  1471                           ;	LPBOREN = 0x1, unprogrammed default
  1472                           ;	Brown-out Reset Enable bits
  1473                           ;	BOREN = 0x3, unprogrammed default
  1474   300002                     	org	3145730
  1475   300002  FF                 	db	255
  1476                           
  1477                           ;Config register CONFIG2H @ 0x300003
  1478                           ;	unspecified, using default values
  1479                           ;	Brown Out Reset Voltage selection bits
  1480                           ;	BORV = 0x3, unprogrammed default
  1481                           ;	ZCD Disable bit
  1482                           ;	ZCD = 0x1, unprogrammed default
  1483                           ;	PPSLOCK bit One-Way Set Enable bit
  1484                           ;	PPS1WAY = 0x1, unprogrammed default
  1485                           ;	Stack Full/Underflow Reset Enable bit
  1486                           ;	STVREN = 0x1, unprogrammed default
  1487                           ;	Debugger Enable bit
  1488                           ;	DEBUG = 0x1, unprogrammed default
  1489                           ;	Extended Instruction Set Enable bit
  1490                           ;	XINST = 0x1, unprogrammed default
  1491   300003                     	org	3145731
  1492   300003  FF                 	db	255
  1493                           
  1494                           ;Config register CONFIG3L @ 0x300004
  1495                           ;	WDT Period Select bits
  1496                           ;	WDTCPS = 0x1F, unprogrammed default
  1497                           ;	WDT operating mode
  1498                           ;	WDTE = OFF, WDT Disabled
  1499   300004                     	org	3145732
  1500   300004  9F                 	db	159
  1501                           
  1502                           ;Config register CONFIG3H @ 0x300005
  1503                           ;	unspecified, using default values
  1504                           ;	WDT Window Select bits
  1505                           ;	WDTCWS = 0x7, unprogrammed default
  1506                           ;	WDT input clock selector
  1507                           ;	WDTCCS = 0x7, unprogrammed default
  1508   300005                     	org	3145733
  1509   300005  FF                 	db	255
  1510                           
  1511                           ;Config register CONFIG4L @ 0x300006
  1512                           ;	unspecified, using default values
  1513                           ;	Write Protection Block 0
  1514                           ;	WRT0 = 0x1, unprogrammed default
  1515                           ;	Write Protection Block 1
  1516                           ;	WRT1 = 0x1, unprogrammed default
  1517                           ;	Write Protection Block 2
  1518                           ;	WRT2 = 0x1, unprogrammed default
  1519                           ;	Write Protection Block 3
  1520                           ;	WRT3 = 0x1, unprogrammed default
  1521                           ;	Write Protection Block 3
  1522                           ;	WRT4 = 0x1, unprogrammed default
  1523                           ;	Write Protection Block 3
  1524                           ;	WRT5 = 0x1, unprogrammed default
  1525                           ;	Write Protection Block 3
  1526                           ;	WRT6 = 0x1, unprogrammed default
  1527                           ;	Write Protection Block 3
  1528                           ;	WRT7 = 0x1, unprogrammed default
  1529   300006                     	org	3145734
  1530   300006  FF                 	db	255
  1531                           
  1532                           ;Config register CONFIG4H @ 0x300007
  1533                           ;	unspecified, using default values
  1534                           ;	Configuration Register Write Protection bit
  1535                           ;	WRTC = 0x1, unprogrammed default
  1536                           ;	Boot Block Write Protection bit
  1537                           ;	WRTB = 0x1, unprogrammed default
  1538                           ;	Data EEPROM Write Protection bit
  1539                           ;	WRTD = 0x1, unprogrammed default
  1540                           ;	Scanner Enable bit
  1541                           ;	SCANE = 0x1, unprogrammed default
  1542                           ;	Low Voltage Programming Enable bit
  1543                           ;	LVP = 0x1, unprogrammed default
  1544   300007                     	org	3145735
  1545   300007  FF                 	db	255
  1546                           
  1547                           ;Config register CONFIG5L @ 0x300008
  1548                           ;	unspecified, using default values
  1549                           ;	UserNVM Program Memory Code Protection bit
  1550                           ;	CP = 0x1, unprogrammed default
  1551                           ;	DataNVM Memory Code Protection bit
  1552                           ;	CPD = 0x1, unprogrammed default
  1553   300008                     	org	3145736
  1554   300008  FF                 	db	255
  1555                           
  1556                           ;Config register CONFIG5H @ 0x300009
  1557                           ;	unspecified, using default values
  1558   300009                     	org	3145737
  1559   300009  FF                 	db	255
  1560                           
  1561                           ;Config register CONFIG6L @ 0x30000A
  1562                           ;	unspecified, using default values
  1563                           ;	Table Read Protection Block 0
  1564                           ;	EBTR0 = 0x1, unprogrammed default
  1565                           ;	Table Read Protection Block 1
  1566                           ;	EBTR1 = 0x1, unprogrammed default
  1567                           ;	Table Read Protection Block 2
  1568                           ;	EBTR2 = 0x1, unprogrammed default
  1569                           ;	Table Read Protection Block 3
  1570                           ;	EBTR3 = 0x1, unprogrammed default
  1571                           ;	Table Read Protection Block 4
  1572                           ;	EBTR4 = 0x1, unprogrammed default
  1573                           ;	Table Read Protection Block 5
  1574                           ;	EBTR5 = 0x1, unprogrammed default
  1575                           ;	Table Read Protection Block 6
  1576                           ;	EBTR6 = 0x1, unprogrammed default
  1577                           ;	Table Read Protection Block 7
  1578                           ;	EBTR7 = 0x1, unprogrammed default
  1579   30000A                     	org	3145738
  1580   30000A  FF                 	db	255
  1581                           
  1582                           ;Config register CONFIG6H @ 0x30000B
  1583                           ;	unspecified, using default values
  1584                           ;	Boot Block Table Read Protection bit
  1585                           ;	EBTRB = 0x1, unprogrammed default
  1586   30000B                     	org	3145739
  1587   30000B  FF                 	db	255
  1588                           tosu	equ	0xFFF
  1589                           tosh	equ	0xFFE
  1590                           tosl	equ	0xFFD
  1591                           stkptr	equ	0xFFC
  1592                           pclatu	equ	0xFFB
  1593                           pclath	equ	0xFFA
  1594                           pcl	equ	0xFF9
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           prodh	equ	0xFF4
  1600                           prodl	equ	0xFF3
  1601                           indf0	equ	0xFEF
  1602                           postinc0	equ	0xFEE
  1603                           postdec0	equ	0xFED
  1604                           preinc0	equ	0xFEC
  1605                           plusw0	equ	0xFEB
  1606                           fsr0h	equ	0xFEA
  1607                           fsr0l	equ	0xFE9
  1608                           wreg	equ	0xFE8
  1609                           indf1	equ	0xFE7
  1610                           postinc1	equ	0xFE6
  1611                           postdec1	equ	0xFE5
  1612                           preinc1	equ	0xFE4
  1613                           plusw1	equ	0xFE3
  1614                           fsr1h	equ	0xFE2
  1615                           fsr1l	equ	0xFE1
  1616                           bsr	equ	0xFE0
  1617                           indf2	equ	0xFDF
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           preinc2	equ	0xFDC
  1621                           plusw2	equ	0xFDB
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      38
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    S519DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S519DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    2471
                                             19 COMRAM    19    19      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                   _color_click_init
                    _initDCmotorsPWM
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    1829
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _setMotorPWM
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     26      26       1       40.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhhh      1      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      2      0       0      39        0.0%
BITBIGSFRllhhhh     52      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      41        0.0%
BITBIGSFRllhhhl     46      0       0      42        0.0%
BITBIGSFRllhhhl      1      0       0      43        0.0%
BITBIGSFRllhhhl     2D      0       0      44        0.0%
BITBIGSFRllhhhl     1E      0       0      45        0.0%
BITBIGSFRllhhl      11      0       0      46        0.0%
BITBIGSFRllhl        1      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      48        0.0%
BITBIGSFRlllhl       5      0       0      49        0.0%
BITBIGSFRllllh      4B      0       0      50        0.0%
BITBIGSFRlllll      2D      0       0      51        0.0%
ABS                  0      0       0      52        0.0%
BIGRAM             DE9      0       0      53        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Nov 25 13:05:40 2022

                         l22 FC50                           l19 FD1E                           l70 FE92  
                         l77 FFFE                           u10 FCAA                           u11 FCA6  
                         u20 FCC0                           u21 FCBC          ___wmul@multiplicand 0003  
                        l200 FC72                          l131 FC9A                          l203 FC98  
                        l134 FCC0                          l143 FC24                          l128 FCEA  
                        l137 FC1A                          l146 FC30                          l174 FE04  
                        l175 FE04                          l701 FD92                          l900 FCD6  
                        l902 FCD8                          l950 FE62                          l694 FD8A  
                        l880 FC12                          l960 FE84                          l952 FE6C  
                        l944 FE0C                          l882 FC16                          l890 FC20  
                        l962 FE86                          l954 FE6E                          l946 FE14  
                        l892 FCC2                          l876 FC9A                          l884 FC28  
                        l964 FE90                          l956 FE78                          l948 FE3E  
                        l982 FC52                          l894 FCCC                          l878 FCAA  
                        l886 FC2C                          l958 FE7A                          l896 FCD2  
                        l888 FC1C                          l898 FCD4                          u150 FD3A  
                        u151 FD36                          u160 FD58                          u161 FD54  
                        u170 FD74                          u171 FD70                          u180 FEB0  
                        u181 FEAC                          u190 FF7A                          u191 FF76  
                        u257 FD00                          wreg 000FE8                         l1112 FC34  
                       l1120 FD20                         l1130 FD58                         l1122 FD28  
                       l1114 FC74                         l1140 FD84                         l1132 FD5E  
                       l1124 FD3A                         l1116 FC90                         l1150 FD14  
                       l1142 FCEC                         l1134 FD74                         l1126 FD42  
                       l1144 FCF0                         l1136 FD7C                         l1128 FD4A  
                       l1160 FF1C                         l1152 FE94                         l1240 FDA0  
                       l1146 FCFA                         l1138 FD7E                         l1162 FF5E  
                       l1154 FEB0                         l1250 FDB4                         l1242 FDA4  
                       l1234 FD94                         l1148 FD0A                         l1164 FF7A  
                       l1156 FF04                         l1260 FDD2                         l1252 FDBC  
                       l1244 FDA8                         l1236 FD98                         l1166 FFBE  
                       l1158 FF18                         l1262 FDE6                         l1254 FDC4  
                       l1246 FDAC                         l1238 FD9C                         l1264 FDEC  
                       l1256 FDCA                         l1248 FDB0                         l1266 FDF8  
                       l1258 FDCE                 ?_LEDSon_init 0001                         _T2PR 000FBC  
                       _main FD94                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                 ___param_bank 000000                        ?_main 0001  
            __end_of___lwdiv FD94   __end_of_I2C_2_Master_Start FC1C   __end_of_I2C_2_Master_Write FC32  
                      status 000FD8              __initialization FC0C                 __end_of_main FE0C  
                     ??_main 0014                __activetblptr 000000                 ?_setMotorPWM 000E  
                     _CCPR1H 000FAA                       _CCPR2H 000FA6                       _CCPR3H 000F25  
                     _CCPR4H 000F21                       _RE2PPS 000E74                       _RD5PPS 000E6F  
                     _RC7PPS 000E69                       _RD6PPS 000E70                       _RE4PPS 000E76  
                     _RG6PPS 000E88     __end_of_color_click_init FD20                 _CCPTMRS0bits 000FAD  
                     ___wmul FC74                    ??___lwdiv 000B                       isa$std 000001  
          ??_initDCmotorsPWM 0001                   __accesstop 0060      __end_of__initialization FC0C  
              ___rparam_used 000001               __pcstackCOMRAM 0001            _color_writetoaddr FC32  
               _T2CLKCONbits 000FBF           ?_color_writetoaddr 0003                      ?___wmul 0001  
        ??_color_writetoaddr 0004                      _SSP2ADD 000ED6                      _SSP2BUF 000ED5  
     color_writetoaddr@value 0003    __end_of_color_writetoaddr FC52           _I2C_2_Master_Start FC12  
         _I2C_2_Master_Write FC26                      __Hparam 0000                      __Lparam 0000  
        ?_I2C_2_Master_Start 0001                      ___lwdiv FD20          ?_I2C_2_Master_Write 0001  
                    __pcinit FC0C                      __ramtop 0E00                      __ptext0 FD94  
                    __ptext1 FE94                      __ptext2 FC74                      __ptext3 FD20  
                    __ptext4 FE0C                      __ptext5 FCEC                      __ptext6 FC32  
                    __ptext7 FC26                      __ptext8 FC1C                      __ptext9 FC12  
                  _T2CONbits 000FBD                    _T2HLTbits 000FBE         ??_I2C_2_Master_Start 0002  
       ??_I2C_2_Master_Write 0002         end_of_initialization FC0C            ?_color_click_init 0001  
         ??_color_click_init 0005                      postdec2 000FDD                      postinc2 000FDE  
            _initDCmotorsPWM FE0C           setMotorPWM@negDuty 0013                    _TRISAbits 000F81  
         setMotorPWM@posDuty 0012                    _TRISCbits 000F83                    _TRISDbits 000F84  
                  _TRISEbits 000F85                    _TRISFbits 000F86                    _TRISGbits 000F87  
                  _TRISHbits 000F88     color_writetoaddr@address 0004                  _CCP1CONbits 000FAB  
                _CCP2CONbits 000FA7                  _CCP3CONbits 000F26                  _CCP4CONbits 000F22  
                 main@motorL 0015                   main@motorR 001E               __end_of___wmul FC9A  
        start_initialization FC0C                ??_LEDSon_init 0001      __end_of_initDCmotorsPWM FE94  
                   ??___wmul 0005          __end_of_LEDSon_init FC74             ___lwdiv@dividend 0007  
                   ?___lwdiv 0007            _I2C_2_Master_Idle FC9A            _I2C_2_Master_Init FCC2  
          _I2C_2_Master_Stop FC1C           ?_I2C_2_Master_Idle 0001           ?_I2C_2_Master_Init 0001  
              ??_setMotorPWM 0010           ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
                   _LATAbits 000F79          ??_I2C_2_Master_Stop 0002                     _LATDbits 000F7C  
                   _LATFbits 000F7E                     _LATGbits 000F7F                     _LATHbits 000F80  
           ?_initDCmotorsPWM 0001                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle FCC2    __end_of_I2C_2_Master_Init FCEC            ___wmul@multiplier 0001  
  __end_of_I2C_2_Master_Stop FC26                 setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002  
                _LEDSon_init FC52          __end_of_setMotorPWM 0000                     __Hrparam 0000  
                   __Lrparam 0000                   _ANSELDbits 000EA7              ___lwdiv@divisor 0009  
            ___lwdiv@counter 000D                     __ptext10 FC9A                     __ptext11 FCC2  
                   __ptext12 FC52                 _SSP2CON1bits 000ED9                 _SSP2CON2bits 000EDA  
                   isa$xinst 000000                  _setMotorPWM FE94             _color_click_init FCEC  
                 _SSP2DATPPS 000E1D                   _SSP2CLKPPS 000E1C                 main@PWMcycle 0014  
