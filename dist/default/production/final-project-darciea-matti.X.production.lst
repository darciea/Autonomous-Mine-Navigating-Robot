

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 30 01:28:24 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31   000000                     
    32                           ; Version 2.35
    33                           ; Generated 05/05/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F67K40 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67   000000                     
    68                           	psect	idataCOMRAM
    69   01F7BF                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for main@F14288
    73   01F7BF  11                 	db	17
    74   01F7C0  02                 	db	2
    75   01F7C1  0C                 	db	12
    76   01F7C2  0C                 	db	12
    77   01F7C3  0A                 	db	10
    78   01F7C4  0B                 	db	11
    79   01F7C5  0C                 	db	12
    80   01F7C6  0E                 	db	14
    81   01F7C7  10                 	db	16
    82   000000                     _LATHbits	set	3968
    83   000000                     _LATGbits	set	3967
    84   000000                     _TRISFbits	set	3974
    85   000000                     _TRISDbits	set	3972
    86   000000                     _TRISGbits	set	3975
    87   000000                     _SSP2CON2bits	set	3802
    88   000000                     _SSP2CLKPPS	set	3612
    89   000000                     _SSP2DATPPS	set	3613
    90   000000                     _RC7PPS	set	3689
    91   000000                     _RE2PPS	set	3700
    92   000000                     _TRISCbits	set	3971
    93   000000                     _TRISEbits	set	3973
    94   000000                     _TRISHbits	set	3976
    95   000000                     _T2PR	set	4028
    96   000000                     _T2CONbits	set	4029
    97   000000                     _CCPR2H	set	4006
    98   000000                     _CCPR1H	set	4010
    99   000000                     _RE4PPS	set	3702
   100   000000                     _RG6PPS	set	3720
   101   000000                     _RD5PPS	set	3695
   102   000000                     _ANSELDbits	set	3751
   103   000000                     _SSP2ADD	set	3798
   104   000000                     _SSP2CON1bits	set	3801
   105   000000                     _CCPR4H	set	3873
   106   000000                     _CCPR3H	set	3877
   107   000000                     _T2CLKCONbits	set	4031
   108   000000                     _T2HLTbits	set	4030
   109   000000                     _CCP1CONbits	set	4011
   110   000000                     _CCPTMRS0bits	set	4013
   111   000000                     _CCP2CONbits	set	4007
   112   000000                     _LATAbits	set	3961
   113   000000                     _LATDbits	set	3964
   114   000000                     _CCP3CONbits	set	3878
   115   000000                     _CCP4CONbits	set	3874
   116   000000                     _SSP2CON2	set	3802
   117   000000                     _SSP2STAT	set	3800
   118   000000                     _SSP2BUF	set	3797
   119   000000                     _RD6PPS	set	3696
   120   000000                     _LATFbits	set	3966
   121   000000                     _TRISAbits	set	3969
   122                           
   123                           ; #config settings
   124                           
   125                           	psect	cinit
   126   01F850                     __pcinit:
   127                           	callstack 0
   128   01F850                     start_initialization:
   129                           	callstack 0
   130   01F850                     __initialization:
   131                           	callstack 0
   132                           
   133                           ; Initialize objects allocated to COMRAM (9 bytes)
   134                           ; load TBLPTR registers with __pidataCOMRAM
   135   01F850  0EBF               	movlw	low __pidataCOMRAM
   136   01F852  6EF6               	movwf	tblptrl,c
   137   01F854  0EF7               	movlw	high __pidataCOMRAM
   138   01F856  6EF7               	movwf	tblptrh,c
   139   01F858  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   140   01F85A  6EF8               	movwf	tblptru,c
   141   01F85C  EE00  F042         	lfsr	0,__pdataCOMRAM
   142   01F860  EE10 F009          	lfsr	1,9
   143   01F864                     copy_data0:
   144   01F864  0009               	tblrd		*+
   145   01F866  CFF5 FFEE          	movff	tablat,postinc0
   146   01F86A  50E5               	movf	postdec1,w,c
   147   01F86C  50E1               	movf	fsr1l,w,c
   148   01F86E  E1FA               	bnz	copy_data0
   149   01F870                     end_of_initialization:
   150                           	callstack 0
   151   01F870                     __end_of__initialization:
   152                           	callstack 0
   153   01F870  0100               	movlb	0
   154   01F872  EF1C  F0FE         	goto	_main	;jump to C main() function
   155                           
   156                           	psect	dataCOMRAM
   157   000042                     __pdataCOMRAM:
   158                           	callstack 0
   159   000042                     main@F14288:
   160                           	callstack 0
   161   000042                     	ds	9
   162                           
   163                           	psect	cstackCOMRAM
   164   000001                     __pcstackCOMRAM:
   165                           	callstack 0
   166   000001                     ??_I2C_2_Master_Idle:
   167   000001                     ?___wmul:
   168                           	callstack 0
   169   000001                     determine_card@master_closeness:
   170                           	callstack 0
   171   000001                     ___wmul@multiplier:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x0
   175   000001                     	ds	1
   176   000002                     I2C_2_Master_Write@data_byte:
   177                           	callstack 0
   178                           
   179                           ; 1 bytes @ 0x1
   180   000002                     	ds	1
   181   000003                     color_writetoaddr@value:
   182                           	callstack 0
   183   000003                     ___wmul@multiplicand:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187   000003                     	ds	1
   188   000004                     color_writetoaddr@address:
   189                           	callstack 0
   190   000004                     determine_card@predicted_colour:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x3
   194   000004                     	ds	1
   195   000005                     ??_color_click_init:
   196   000005                     determine_card@current_smallest:
   197                           	callstack 0
   198   000005                     ___wmul@product:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x4
   202   000005                     	ds	1
   203   000006                     determine_card@i:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x5
   207   000006                     	ds	1
   208   000007                     ?___lwdiv:
   209                           	callstack 0
   210   000007                     ___lwdiv@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x6
   214   000007                     	ds	2
   215   000009                     ___lwdiv@divisor:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x8
   219   000009                     	ds	2
   220   00000B                     ___lwdiv@quotient:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0xA
   224   00000B                     	ds	2
   225   00000D                     ___lwdiv@counter:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0xC
   229   00000D                     	ds	1
   230   00000E                     setMotorPWM@m:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0xD
   234   00000E                     	ds	2
   235   000010                     ??_setMotorPWM:
   236                           
   237                           ; 1 bytes @ 0xF
   238   000010                     	ds	2
   239   000012                     setMotorPWM@posDuty:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x11
   243   000012                     	ds	1
   244   000013                     setMotorPWM@negDuty:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x12
   248   000013                     	ds	1
   249   000014                     stop@mL:
   250                           	callstack 0
   251   000014                     turnLeft45@mL:
   252                           	callstack 0
   253   000014                     turnRight45@mL:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x13
   257   000014                     	ds	2
   258   000016                     stop@mR:
   259                           	callstack 0
   260   000016                     turnLeft45@mR:
   261                           	callstack 0
   262   000016                     turnRight45@mR:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x15
   266   000016                     	ds	2
   267   000018                     ??_stop:
   268   000018                     ??_turnLeft45:
   269   000018                     ??_turnRight45:
   270                           
   271                           ; 1 bytes @ 0x17
   272   000018                     	ds	2
   273   00001A                     turnLeft45@i:
   274                           	callstack 0
   275   00001A                     turnRight45@i:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x19
   279   00001A                     	ds	2
   280   00001C                     respond_to_card@mL:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x1B
   284   00001C                     	ds	2
   285   00001E                     respond_to_card@mR:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x1D
   289   00001E                     	ds	2
   290   000020                     ??_respond_to_card:
   291                           
   292                           ; 1 bytes @ 0x1F
   293   000020                     	ds	2
   294   000022                     respond_to_card@card:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0x21
   298   000022                     	ds	1
   299   000023                     ??_main:
   300                           
   301                           ; 1 bytes @ 0x22
   302   000023                     	ds	2
   303   000025                     main@master_closeness:
   304                           	callstack 0
   305                           
   306                           ; 9 bytes @ 0x24
   307   000025                     	ds	9
   308   00002E                     main@card:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x2D
   312   00002E                     	ds	1
   313   00002F                     main@PWMcycle:
   314                           	callstack 0
   315                           
   316                           ; 1 bytes @ 0x2E
   317   00002F                     	ds	1
   318   000030                     main@motorL:
   319                           	callstack 0
   320                           
   321                           ; 9 bytes @ 0x2F
   322   000030                     	ds	9
   323   000039                     main@motorR:
   324                           	callstack 0
   325                           
   326                           ; 9 bytes @ 0x38
   327   000039                     	ds	9
   328                           
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 18 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  normalised_v   24    0        unsigned char [3][8]
   339 ;;  expected_val   24    0        unsigned char [3][8]
   340 ;;  motorR          9   56[COMRAM] struct DC_motor
   341 ;;  motorL          9   47[COMRAM] struct DC_motor
   342 ;;  master_close    9   36[COMRAM] unsigned char [9]
   343 ;;  PWMcycle        1   46[COMRAM] unsigned char 
   344 ;;  card            1   45[COMRAM] enum E14250
   345 ;;  blue_read       1    0        unsigned char 
   346 ;;  green_read      1    0        unsigned char 
   347 ;;  red_read        1    0        unsigned char 
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   358 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   360 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   361 ;;Total ram usage:       31 bytes
   362 ;; Hardware stack levels required when called: 4
   363 ;; This function calls:
   364 ;;		_I2C_2_Master_Init
   365 ;;		_LEDSon_init
   366 ;;		_color_click_init
   367 ;;		_determine_card
   368 ;;		_initDCmotorsPWM
   369 ;;		_respond_to_card
   370 ;;		_setMotorPWM
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text0
   377   01FC38                     __ptext0:
   378                           	callstack 0
   379   01FC38                     _main:
   380                           	callstack 27
   381   01FC38                     
   382                           ;main.c: 23:     LEDSon_init();
   383   01FC38  EC04  F0FC         	call	_LEDSon_init	;wreg free
   384   01FC3C                     
   385                           ;main.c: 24:     I2C_2_Master_Init();
   386   01FC3C  EC4F  F0FC         	call	_I2C_2_Master_Init	;wreg free
   387   01FC40                     
   388                           ;main.c: 25:     color_click_init();
   389   01FC40  EC64  F0FC         	call	_color_click_init	;wreg free
   390   01FC44                     
   391                           ;main.c: 26:     initDCmotorsPWM();
   392   01FC44  ECE6  F0FC         	call	_initDCmotorsPWM	;wreg free
   393   01FC48                     
   394                           ;main.c: 34:     unsigned char PWMcycle = T2PR;
   395   01FC48  CFBC F02F          	movff	4028,main@PWMcycle	;volatile
   396   01FC4C                     
   397                           ;main.c: 36:     struct DC_motor motorL, motorR;;main.c: 38:     motorL.power=0;
   398   01FC4C  0E00               	movlw	0
   399   01FC4E  6E30               	movwf	main@motorL^0,c
   400   01FC50                     
   401                           ;main.c: 39:     motorL.direction=1;
   402   01FC50  0E01               	movlw	1
   403   01FC52  6E31               	movwf	(main@motorL+1)^0,c
   404   01FC54                     
   405                           ;main.c: 40:     motorL.brakemode=1;
   406   01FC54  0E01               	movlw	1
   407   01FC56  6E32               	movwf	(main@motorL+2)^0,c
   408   01FC58                     
   409                           ;main.c: 41:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   410   01FC58  0EAA               	movlw	170
   411   01FC5A  6E35               	movwf	(main@motorL+5)^0,c
   412   01FC5C  0E0F               	movlw	15
   413   01FC5E  6E36               	movwf	(main@motorL+6)^0,c
   414   01FC60                     
   415                           ;main.c: 42:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   416   01FC60  0EA6               	movlw	166
   417   01FC62  6E37               	movwf	(main@motorL+7)^0,c
   418   01FC64  0E0F               	movlw	15
   419   01FC66  6E38               	movwf	(main@motorL+8)^0,c
   420   01FC68                     
   421                           ;main.c: 43:     motorL.PWMperiod=PWMcycle;
   422   01FC68  C02F  F033         	movff	main@PWMcycle,main@motorL+3
   423   01FC6C  6A34               	clrf	(main@motorL+4)^0,c
   424   01FC6E                     
   425                           ;main.c: 45:     motorR.power=0;
   426   01FC6E  0E00               	movlw	0
   427   01FC70  6E39               	movwf	main@motorR^0,c
   428   01FC72                     
   429                           ;main.c: 46:     motorR.direction=1;
   430   01FC72  0E01               	movlw	1
   431   01FC74  6E3A               	movwf	(main@motorR+1)^0,c
   432   01FC76                     
   433                           ;main.c: 47:     motorR.brakemode=1;
   434   01FC76  0E01               	movlw	1
   435   01FC78  6E3B               	movwf	(main@motorR+2)^0,c
   436                           
   437                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   438   01FC7A  0E25               	movlw	37
   439   01FC7C  6E3E               	movwf	(main@motorR+5)^0,c
   440   01FC7E  0E0F               	movlw	15
   441   01FC80  6E3F               	movwf	(main@motorR+6)^0,c
   442                           
   443                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   444   01FC82  0E21               	movlw	33
   445   01FC84  6E40               	movwf	(main@motorR+7)^0,c
   446   01FC86  0E0F               	movlw	15
   447   01FC88  6E41               	movwf	(main@motorR+8)^0,c
   448   01FC8A                     
   449                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
   450   01FC8A  C02F  F03C         	movff	main@PWMcycle,main@motorR+3
   451   01FC8E  6A3D               	clrf	(main@motorR+4)^0,c
   452   01FC90                     
   453                           ;main.c: 52:     setMotorPWM(&motorL);
   454   01FC90  0E30               	movlw	low main@motorL
   455   01FC92  6E0E               	movwf	setMotorPWM@m^0,c
   456   01FC94  0E00               	movlw	high main@motorL
   457   01FC96  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   458   01FC98  EC81  F0FE         	call	_setMotorPWM	;wreg free
   459   01FC9C                     
   460                           ;main.c: 53:     setMotorPWM(&motorR);
   461   01FC9C  0E39               	movlw	low main@motorR
   462   01FC9E  6E0E               	movwf	setMotorPWM@m^0,c
   463   01FCA0  0E00               	movlw	high main@motorR
   464   01FCA2  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   465   01FCA4  EC81  F0FE         	call	_setMotorPWM	;wreg free
   466   01FCA8                     
   467                           ;main.c: 59:     unsigned char expected_values[8][3];;main.c: 60:     unsigned char norm
      +                          alised_values[8][3];;main.c: 61:     unsigned char master_closeness[9] = {17, 2, 12, 12,
      +                           10, 11, 12, 14, 16};
   468   01FCA8  EE20  F042         	lfsr	2,main@F14288
   469   01FCAC  EE10  F025         	lfsr	1,main@master_closeness
   470   01FCB0  0E08               	movlw	8
   471   01FCB2                     u321:
   472   01FCB2  CFDB FFE3          	movff	plusw2,plusw1
   473   01FCB6  06E8               	decf	wreg,f,c
   474   01FCB8  E2FC               	bc	u321
   475   01FCBA                     
   476                           ;main.c: 103:     card = determine_card(master_closeness);
   477   01FCBA  0E25               	movlw	low main@master_closeness
   478   01FCBC  6E01               	movwf	determine_card@master_closeness^0,c
   479   01FCBE  0E00               	movlw	high main@master_closeness
   480   01FCC0  6E02               	movwf	(determine_card@master_closeness+1)^0,c
   481   01FCC2  EC7E  F0FC         	call	_determine_card	;wreg free
   482   01FCC6  6E2E               	movwf	main@card^0,c
   483   01FCC8                     
   484                           ;main.c: 110:     LATDbits.LATD7=1;
   485   01FCC8  8E7C               	bsf	124,7,c	;volatile
   486   01FCCA                     
   487                           ;main.c: 111:     TRISDbits.TRISD7=0;
   488   01FCCA  9E84               	bcf	132,7,c	;volatile
   489   01FCCC                     l1528:
   490                           
   491                           ;main.c: 115:         respond_to_card(card, &motorL, &motorR);
   492   01FCCC  0E30               	movlw	low main@motorL
   493   01FCCE  6E1C               	movwf	respond_to_card@mL^0,c
   494   01FCD0  0E00               	movlw	high main@motorL
   495   01FCD2  6E1D               	movwf	(respond_to_card@mL+1)^0,c
   496   01FCD4  0E39               	movlw	low main@motorR
   497   01FCD6  6E1E               	movwf	respond_to_card@mR^0,c
   498   01FCD8  0E00               	movlw	high main@motorR
   499   01FCDA  6E1F               	movwf	(respond_to_card@mR+1)^0,c
   500   01FCDC  502E               	movf	main@card^0,w,c
   501   01FCDE  EC37  F0FF         	call	_respond_to_card
   502   01FCE2                     
   503                           ;main.c: 119:         _delay((unsigned long)((3000)*(64000000/4000.0)));
   504   01FCE2  0EF4               	movlw	244
   505   01FCE4  6E24               	movwf	(??_main+1)^0,c
   506   01FCE6  0E82               	movlw	130
   507   01FCE8  6E23               	movwf	??_main^0,c
   508   01FCEA  0E05               	movlw	5
   509   01FCEC                     u337:
   510   01FCEC  2EE8               	decfsz	wreg,f,c
   511   01FCEE  D7FE               	bra	u337
   512   01FCF0  2E23               	decfsz	??_main^0,f,c
   513   01FCF2  D7FC               	bra	u337
   514   01FCF4  2E24               	decfsz	(??_main+1)^0,f,c
   515   01FCF6  D7FA               	bra	u337
   516   01FCF8  F000               	nop	
   517   01FCFA  EF66  F0FE         	goto	l1528
   518   01FCFE  EF00  F000         	goto	start
   519   01FD02                     __end_of_main:
   520                           	callstack 0
   521                           
   522 ;; *************** function _respond_to_card *****************
   523 ;; Defined at:
   524 ;;		line 76 in file "colour_identify.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;  card            1    wreg     enum E14551
   527 ;;  mL              2   27[COMRAM] PTR struct DC_motor
   528 ;;		 -> main@motorL(9), 
   529 ;;  mR              2   29[COMRAM] PTR struct DC_motor
   530 ;;		 -> main@motorR(9), 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  card            1   33[COMRAM] enum E14551
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   545 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   546 ;;Total ram usage:        7 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; Hardware stack levels required when called: 3
   549 ;; This function calls:
   550 ;;		_stop
   551 ;;		_turnLeft45
   552 ;;		_turnRight45
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text1
   559   01FE6E                     __ptext1:
   560                           	callstack 0
   561   01FE6E                     _respond_to_card:
   562                           	callstack 27
   563                           
   564                           ;incstack = 0
   565                           ;respond_to_card@card stored from wreg
   566   01FE6E  6E22               	movwf	respond_to_card@card^0,c
   567   01FE70                     
   568                           ;colour_identify.c: 78:     switch (card){
   569   01FE70  EFCE  F0FF         	goto	l1438
   570   01FE74                     l245:
   571                           
   572                           ;colour_identify.c: 80:             LATFbits.LATF0 = 1;
   573   01FE74  807E               	bsf	126,0,c	;volatile
   574                           
   575                           ;colour_identify.c: 86:             break;
   576   01FE76  EFFF  F0FF         	goto	l256
   577   01FE7A                     l247:
   578                           
   579                           ;colour_identify.c: 88:             LATHbits.LATH0 = 1;
   580   01FE7A  8080               	bsf	128,0,c	;volatile
   581                           
   582                           ;colour_identify.c: 94:             break;
   583   01FE7C  EFFF  F0FF         	goto	l256
   584   01FE80                     l1430:
   585                           
   586                           ;colour_identify.c: 96:             turnRight45(mL,mR);
   587   01FE80  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   588   01FE84  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   589   01FE88  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   590   01FE8C  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   591   01FE90  EC6F  F0FD         	call	_turnRight45	;wreg free
   592                           
   593                           ;colour_identify.c: 97:             turnRight45(mL,mR);
   594   01FE94  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   595   01FE98  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   596   01FE9C  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   597   01FEA0  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   598   01FEA4  EC6F  F0FD         	call	_turnRight45	;wreg free
   599                           
   600                           ;colour_identify.c: 98:             turnRight45(mL,mR);
   601   01FEA8  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   602   01FEAC  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   603   01FEB0  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   604   01FEB4  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   605   01FEB8  EC6F  F0FD         	call	_turnRight45	;wreg free
   606                           
   607                           ;colour_identify.c: 99:             turnRight45(mL,mR);
   608   01FEBC  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   609   01FEC0  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   610   01FEC4  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   611   01FEC8  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   612   01FECC  EC6F  F0FD         	call	_turnRight45	;wreg free
   613                           
   614                           ;colour_identify.c: 100:             stop(mL,mR);
   615   01FED0  C01C  F014         	movff	respond_to_card@mL,stop@mL
   616   01FED4  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   617   01FED8  C01E  F016         	movff	respond_to_card@mR,stop@mR
   618   01FEDC  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   619   01FEE0  EC2A  F0FD         	call	_stop	;wreg free
   620                           
   621                           ;colour_identify.c: 101:             break;
   622   01FEE4  EFFF  F0FF         	goto	l256
   623   01FEE8                     l249:
   624                           
   625                           ;colour_identify.c: 103:             LATDbits.LATD3 = 1;
   626   01FEE8  867C               	bsf	124,3,c	;volatile
   627                           
   628                           ;colour_identify.c: 110:             break;
   629   01FEEA  EFFF  F0FF         	goto	l256
   630   01FEEE                     l250:
   631                           
   632                           ;colour_identify.c: 112:             LATDbits.LATD4 = 1;
   633   01FEEE  887C               	bsf	124,4,c	;volatile
   634                           
   635                           ;colour_identify.c: 119:             break;
   636   01FEF0  EFFF  F0FF         	goto	l256
   637   01FEF4                     l1432:
   638                           
   639                           ;colour_identify.c: 121:             turnRight45(mL,mR);
   640   01FEF4  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   641   01FEF8  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   642   01FEFC  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   643   01FF00  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   644   01FF04  EC6F  F0FD         	call	_turnRight45	;wreg free
   645                           
   646                           ;colour_identify.c: 122:             turnRight45(mL,mR);
   647   01FF08  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   648   01FF0C  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   649   01FF10  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   650   01FF14  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   651   01FF18  EC6F  F0FD         	call	_turnRight45	;wreg free
   652                           
   653                           ;colour_identify.c: 123:             turnRight45(mL,mR);
   654   01FF1C  C01C  F014         	movff	respond_to_card@mL,turnRight45@mL
   655   01FF20  C01D  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   656   01FF24  C01E  F016         	movff	respond_to_card@mR,turnRight45@mR
   657   01FF28  C01F  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   658   01FF2C  EC6F  F0FD         	call	_turnRight45	;wreg free
   659                           
   660                           ;colour_identify.c: 124:             stop(mL,mR);
   661   01FF30  C01C  F014         	movff	respond_to_card@mL,stop@mL
   662   01FF34  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   663   01FF38  C01E  F016         	movff	respond_to_card@mR,stop@mR
   664   01FF3C  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   665   01FF40  EC2A  F0FD         	call	_stop	;wreg free
   666                           
   667                           ;colour_identify.c: 125:             break;
   668   01FF44  EFFF  F0FF         	goto	l256
   669   01FF48                     l1434:
   670                           
   671                           ;colour_identify.c: 127:             turnLeft45(mL,mR);
   672   01FF48  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   673   01FF4C  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   674   01FF50  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   675   01FF54  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   676   01FF58  ECC5  F0FD         	call	_turnLeft45	;wreg free
   677                           
   678                           ;colour_identify.c: 128:             turnLeft45(mL,mR);
   679   01FF5C  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   680   01FF60  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   681   01FF64  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   682   01FF68  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   683   01FF6C  ECC5  F0FD         	call	_turnLeft45	;wreg free
   684                           
   685                           ;colour_identify.c: 129:             turnLeft45(mL,mR);
   686   01FF70  C01C  F014         	movff	respond_to_card@mL,turnLeft45@mL
   687   01FF74  C01D  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   688   01FF78  C01E  F016         	movff	respond_to_card@mR,turnLeft45@mR
   689   01FF7C  C01F  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   690   01FF80  ECC5  F0FD         	call	_turnLeft45	;wreg free
   691                           
   692                           ;colour_identify.c: 130:             stop(mL,mR);
   693   01FF84  C01C  F014         	movff	respond_to_card@mL,stop@mL
   694   01FF88  C01D  F015         	movff	respond_to_card@mL+1,stop@mL+1
   695   01FF8C  C01E  F016         	movff	respond_to_card@mR,stop@mR
   696   01FF90  C01F  F017         	movff	respond_to_card@mR+1,stop@mR+1
   697   01FF94  EC2A  F0FD         	call	_stop	;wreg free
   698                           
   699                           ;colour_identify.c: 131:             break;
   700   01FF98  EFFF  F0FF         	goto	l256
   701   01FF9C                     l1438:
   702   01FF9C  5022               	movf	respond_to_card@card^0,w,c
   703   01FF9E  6E20               	movwf	??_respond_to_card^0,c
   704   01FFA0  6A21               	clrf	(??_respond_to_card+1)^0,c
   705                           
   706                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   707                           ; Switch size 1, requested type "simple"
   708                           ; Number of cases is 1, Range of values is 0 to 0
   709                           ; switch strategies available:
   710                           ; Name         Instructions Cycles
   711                           ; simple_byte            4     3 (average)
   712                           ;	Chosen strategy is simple_byte
   713   01FFA2  5021               	movf	(??_respond_to_card+1)^0,w,c
   714   01FFA4  0A00               	xorlw	0	; case 0
   715   01FFA6  B4D8               	btfsc	status,2,c
   716   01FFA8  EFD8  F0FF         	goto	l1552
   717   01FFAC  EFFF  F0FF         	goto	l256
   718   01FFB0                     l1552:
   719                           
   720                           ; Switch size 1, requested type "simple"
   721                           ; Number of cases is 9, Range of values is 0 to 8
   722                           ; switch strategies available:
   723                           ; Name         Instructions Cycles
   724                           ; simple_byte           28    15 (average)
   725                           ;	Chosen strategy is simple_byte
   726   01FFB0  5020               	movf	??_respond_to_card^0,w,c
   727   01FFB2  0A00               	xorlw	0	; case 0
   728   01FFB4  B4D8               	btfsc	status,2,c
   729   01FFB6  EF3A  F0FF         	goto	l245
   730   01FFBA  0A01               	xorlw	1	; case 1
   731   01FFBC  B4D8               	btfsc	status,2,c
   732   01FFBE  EF3D  F0FF         	goto	l247
   733   01FFC2  0A03               	xorlw	3	; case 2
   734   01FFC4  B4D8               	btfsc	status,2,c
   735   01FFC6  EF40  F0FF         	goto	l1430
   736   01FFCA  0A01               	xorlw	1	; case 3
   737   01FFCC  B4D8               	btfsc	status,2,c
   738   01FFCE  EF74  F0FF         	goto	l249
   739   01FFD2  0A07               	xorlw	7	; case 4
   740   01FFD4  B4D8               	btfsc	status,2,c
   741   01FFD6  EF77  F0FF         	goto	l250
   742   01FFDA  0A01               	xorlw	1	; case 5
   743   01FFDC  B4D8               	btfsc	status,2,c
   744   01FFDE  EF7A  F0FF         	goto	l1432
   745   01FFE2  0A03               	xorlw	3	; case 6
   746   01FFE4  B4D8               	btfsc	status,2,c
   747   01FFE6  EFA4  F0FF         	goto	l1434
   748   01FFEA  0A01               	xorlw	1	; case 7
   749   01FFEC  B4D8               	btfsc	status,2,c
   750   01FFEE  EFFF  F0FF         	goto	l256
   751   01FFF2  0A0F               	xorlw	15	; case 8
   752   01FFF4  B4D8               	btfsc	status,2,c
   753   01FFF6  EFFF  F0FF         	goto	l256
   754   01FFFA  EFFF  F0FF         	goto	l256
   755   01FFFE                     l256:
   756   01FFFE  0012               	return		;funcret
   757   020000                     __end_of_respond_to_card:
   758                           	callstack 0
   759                           
   760 ;; *************** function _turnRight45 *****************
   761 ;; Defined at:
   762 ;;		line 116 in file "dc_motor.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   765 ;;		 -> main@motorL(9), 
   766 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   767 ;;		 -> main@motorR(9), 
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  i               2   25[COMRAM] int 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   783 ;;Total ram usage:        8 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; Hardware stack levels required when called: 2
   786 ;; This function calls:
   787 ;;		_setMotorPWM
   788 ;; This function is called by:
   789 ;;		_respond_to_card
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text2
   794   01FADE                     __ptext2:
   795                           	callstack 0
   796   01FADE                     _turnRight45:
   797                           	callstack 27
   798   01FADE                     
   799                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
   800   01FADE  EE20 F001          	lfsr	2,1
   801   01FAE2  5014               	movf	turnRight45@mL^0,w,c
   802   01FAE4  26D9               	addwf	fsr2l,f,c
   803   01FAE6  5015               	movf	(turnRight45@mL+1)^0,w,c
   804   01FAE8  22DA               	addwfc	fsr2h,f,c
   805   01FAEA  0E01               	movlw	1
   806   01FAEC  6EDF               	movwf	indf2,c
   807                           
   808                           ;dc_motor.c: 119:     mR->direction=0;
   809   01FAEE  EE20 F001          	lfsr	2,1
   810   01FAF2  5016               	movf	turnRight45@mR^0,w,c
   811   01FAF4  26D9               	addwf	fsr2l,f,c
   812   01FAF6  5017               	movf	(turnRight45@mR+1)^0,w,c
   813   01FAF8  22DA               	addwfc	fsr2h,f,c
   814   01FAFA  0E00               	movlw	0
   815   01FAFC  6EDF               	movwf	indf2,c
   816   01FAFE                     
   817                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
   818   01FAFE  0E00               	movlw	0
   819   01FB00  6E1B               	movwf	(turnRight45@i+1)^0,c
   820   01FB02  0E00               	movlw	0
   821   01FB04  6E1A               	movwf	turnRight45@i^0,c
   822   01FB06                     l1380:
   823                           
   824                           ;dc_motor.c: 122:         mR->power=i;
   825   01FB06  C016  FFD9         	movff	turnRight45@mR,fsr2l
   826   01FB0A  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
   827   01FB0E  C01A  FFDF         	movff	turnRight45@i,indf2
   828                           
   829                           ;dc_motor.c: 123:         mL->power=i;
   830   01FB12  C014  FFD9         	movff	turnRight45@mL,fsr2l
   831   01FB16  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
   832   01FB1A  C01A  FFDF         	movff	turnRight45@i,indf2
   833   01FB1E                     
   834                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
   835   01FB1E  0E02               	movlw	2
   836   01FB20  6E19               	movwf	(??_turnRight45+1)^0,c
   837   01FB22  0E38               	movlw	56
   838   01FB24  6E18               	movwf	??_turnRight45^0,c
   839   01FB26  0EAD               	movlw	173
   840   01FB28                     u347:
   841   01FB28  2EE8               	decfsz	wreg,f,c
   842   01FB2A  D7FE               	bra	u347
   843   01FB2C  2E18               	decfsz	??_turnRight45^0,f,c
   844   01FB2E  D7FC               	bra	u347
   845   01FB30  2E19               	decfsz	(??_turnRight45+1)^0,f,c
   846   01FB32  D7FA               	bra	u347
   847   01FB34  F000               	nop	
   848   01FB36                     
   849                           ;dc_motor.c: 125:         setMotorPWM(mL);
   850   01FB36  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
   851   01FB3A  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
   852   01FB3E  EC81  F0FE         	call	_setMotorPWM	;wreg free
   853   01FB42                     
   854                           ;dc_motor.c: 126:         setMotorPWM(mR);}
   855   01FB42  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
   856   01FB46  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
   857   01FB4A  EC81  F0FE         	call	_setMotorPWM	;wreg free
   858   01FB4E  0E0A               	movlw	10
   859   01FB50  261A               	addwf	turnRight45@i^0,f,c
   860   01FB52  0E00               	movlw	0
   861   01FB54  221B               	addwfc	(turnRight45@i+1)^0,f,c
   862   01FB56  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
   863   01FB58  EFB7  F0FD         	goto	u271
   864   01FB5C  501B               	movf	(turnRight45@i+1)^0,w,c
   865   01FB5E  E109               	bnz	u270
   866   01FB60  0E50               	movlw	80
   867   01FB62  5C1A               	subwf	turnRight45@i^0,w,c
   868   01FB64  A0D8               	btfss	status,0,c
   869   01FB66  EFB7  F0FD         	goto	u271
   870   01FB6A  EFB9  F0FD         	goto	u270
   871   01FB6E                     u271:
   872   01FB6E  EF83  F0FD         	goto	l1380
   873   01FB72                     u270:
   874   01FB72                     
   875                           ;dc_motor.c: 127:     _delay((unsigned long)((45)*(64000000/4000.0)));
   876   01FB72  0E04               	movlw	4
   877   01FB74  6E19               	movwf	(??_turnRight45+1)^0,c
   878   01FB76  0EA8               	movlw	168
   879   01FB78  6E18               	movwf	??_turnRight45^0,c
   880   01FB7A  0E0C               	movlw	12
   881   01FB7C                     u357:
   882   01FB7C  2EE8               	decfsz	wreg,f,c
   883   01FB7E  D7FE               	bra	u357
   884   01FB80  2E18               	decfsz	??_turnRight45^0,f,c
   885   01FB82  D7FC               	bra	u357
   886   01FB84  2E19               	decfsz	(??_turnRight45+1)^0,f,c
   887   01FB86  D7FA               	bra	u357
   888   01FB88  0012               	return		;funcret
   889   01FB8A                     __end_of_turnRight45:
   890                           	callstack 0
   891                           
   892 ;; *************** function _turnLeft45 *****************
   893 ;; Defined at:
   894 ;;		line 101 in file "dc_motor.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   897 ;;		 -> main@motorL(9), 
   898 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   899 ;;		 -> main@motorR(9), 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  i               2   25[COMRAM] int 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   913 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;Total ram usage:        8 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; Hardware stack levels required when called: 2
   918 ;; This function calls:
   919 ;;		_setMotorPWM
   920 ;; This function is called by:
   921 ;;		_respond_to_card
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text3
   926   01FB8A                     __ptext3:
   927                           	callstack 0
   928   01FB8A                     _turnLeft45:
   929                           	callstack 27
   930   01FB8A                     
   931                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
   932   01FB8A  EE20 F001          	lfsr	2,1
   933   01FB8E  5014               	movf	turnLeft45@mL^0,w,c
   934   01FB90  26D9               	addwf	fsr2l,f,c
   935   01FB92  5015               	movf	(turnLeft45@mL+1)^0,w,c
   936   01FB94  22DA               	addwfc	fsr2h,f,c
   937   01FB96  0E00               	movlw	0
   938   01FB98  6EDF               	movwf	indf2,c
   939                           
   940                           ;dc_motor.c: 104:     mR->direction=1;
   941   01FB9A  EE20 F001          	lfsr	2,1
   942   01FB9E  5016               	movf	turnLeft45@mR^0,w,c
   943   01FBA0  26D9               	addwf	fsr2l,f,c
   944   01FBA2  5017               	movf	(turnLeft45@mR+1)^0,w,c
   945   01FBA4  22DA               	addwfc	fsr2h,f,c
   946   01FBA6  0E01               	movlw	1
   947   01FBA8  6EDF               	movwf	indf2,c
   948   01FBAA                     
   949                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
   950   01FBAA  0E00               	movlw	0
   951   01FBAC  6E1B               	movwf	(turnLeft45@i+1)^0,c
   952   01FBAE  0E00               	movlw	0
   953   01FBB0  6E1A               	movwf	turnLeft45@i^0,c
   954   01FBB2                     l1358:
   955                           
   956                           ;dc_motor.c: 107:         mR->power=i;
   957   01FBB2  C016  FFD9         	movff	turnLeft45@mR,fsr2l
   958   01FBB6  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
   959   01FBBA  C01A  FFDF         	movff	turnLeft45@i,indf2
   960                           
   961                           ;dc_motor.c: 108:         mL->power=i;
   962   01FBBE  C014  FFD9         	movff	turnLeft45@mL,fsr2l
   963   01FBC2  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
   964   01FBC6  C01A  FFDF         	movff	turnLeft45@i,indf2
   965   01FBCA                     
   966                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
   967   01FBCA  0E02               	movlw	2
   968   01FBCC  6E19               	movwf	(??_turnLeft45+1)^0,c
   969   01FBCE  0E38               	movlw	56
   970   01FBD0  6E18               	movwf	??_turnLeft45^0,c
   971   01FBD2  0EAD               	movlw	173
   972   01FBD4                     u367:
   973   01FBD4  2EE8               	decfsz	wreg,f,c
   974   01FBD6  D7FE               	bra	u367
   975   01FBD8  2E18               	decfsz	??_turnLeft45^0,f,c
   976   01FBDA  D7FC               	bra	u367
   977   01FBDC  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
   978   01FBDE  D7FA               	bra	u367
   979   01FBE0  F000               	nop	
   980   01FBE2                     
   981                           ;dc_motor.c: 110:         setMotorPWM(mL);
   982   01FBE2  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
   983   01FBE6  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
   984   01FBEA  EC81  F0FE         	call	_setMotorPWM	;wreg free
   985   01FBEE                     
   986                           ;dc_motor.c: 111:         setMotorPWM(mR);}
   987   01FBEE  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
   988   01FBF2  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
   989   01FBF6  EC81  F0FE         	call	_setMotorPWM	;wreg free
   990   01FBFA  0E0A               	movlw	10
   991   01FBFC  261A               	addwf	turnLeft45@i^0,f,c
   992   01FBFE  0E00               	movlw	0
   993   01FC00  221B               	addwfc	(turnLeft45@i+1)^0,f,c
   994   01FC02  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
   995   01FC04  EF0D  F0FE         	goto	u261
   996   01FC08  501B               	movf	(turnLeft45@i+1)^0,w,c
   997   01FC0A  E109               	bnz	u260
   998   01FC0C  0E50               	movlw	80
   999   01FC0E  5C1A               	subwf	turnLeft45@i^0,w,c
  1000   01FC10  A0D8               	btfss	status,0,c
  1001   01FC12  EF0D  F0FE         	goto	u261
  1002   01FC16  EF0F  F0FE         	goto	u260
  1003   01FC1A                     u261:
  1004   01FC1A  EFD9  F0FD         	goto	l1358
  1005   01FC1E                     u260:
  1006   01FC1E                     
  1007                           ;dc_motor.c: 112:     _delay((unsigned long)((40)*(64000000/4000.0)));
  1008   01FC1E  0E04               	movlw	4
  1009   01FC20  6E19               	movwf	(??_turnLeft45+1)^0,c
  1010   01FC22  0E40               	movlw	64
  1011   01FC24  6E18               	movwf	??_turnLeft45^0,c
  1012   01FC26  0E26               	movlw	38
  1013   01FC28                     u377:
  1014   01FC28  2EE8               	decfsz	wreg,f,c
  1015   01FC2A  D7FE               	bra	u377
  1016   01FC2C  2E18               	decfsz	??_turnLeft45^0,f,c
  1017   01FC2E  D7FC               	bra	u377
  1018   01FC30  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  1019   01FC32  D7FA               	bra	u377
  1020   01FC34  D000               	nop2	
  1021   01FC36  0012               	return		;funcret
  1022   01FC38                     __end_of_turnLeft45:
  1023                           	callstack 0
  1024                           
  1025 ;; *************** function _stop *****************
  1026 ;; Defined at:
  1027 ;;		line 84 in file "dc_motor.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1030 ;;		 -> main@motorL(9), 
  1031 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1032 ;;		 -> main@motorR(9), 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1047 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1048 ;;Total ram usage:        5 bytes
  1049 ;; Hardware stack levels used: 1
  1050 ;; Hardware stack levels required when called: 2
  1051 ;; This function calls:
  1052 ;;		_setMotorPWM
  1053 ;; This function is called by:
  1054 ;;		_respond_to_card
  1055 ;;		_reverseOneSquare
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text4
  1060   01FA54                     __ptext4:
  1061                           	callstack 0
  1062   01FA54                     _stop:
  1063                           	callstack 27
  1064   01FA54                     
  1065                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  1066   01FA54  EF40  F0FD         	goto	l1340
  1067   01FA58                     l1334:
  1068                           
  1069                           ;dc_motor.c: 87:         mL->power -=10;
  1070   01FA58  C014  FFD9         	movff	stop@mL,fsr2l
  1071   01FA5C  C015  FFDA         	movff	stop@mL+1,fsr2h
  1072   01FA60  0E0A               	movlw	10
  1073   01FA62  5EDF               	subwf	indf2,f,c
  1074   01FA64                     
  1075                           ;dc_motor.c: 88:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1076   01FA64  0E68               	movlw	104
  1077   01FA66  6E18               	movwf	??_stop^0,c
  1078   01FA68  0EE4               	movlw	228
  1079   01FA6A                     u387:
  1080   01FA6A  2EE8               	decfsz	wreg,f,c
  1081   01FA6C  D7FE               	bra	u387
  1082   01FA6E  2E18               	decfsz	??_stop^0,f,c
  1083   01FA70  D7FC               	bra	u387
  1084   01FA72  D000               	nop2	
  1085   01FA74                     
  1086                           ;dc_motor.c: 89:         setMotorPWM(mL);
  1087   01FA74  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1088   01FA78  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1089   01FA7C  EC81  F0FE         	call	_setMotorPWM	;wreg free
  1090   01FA80                     l1340:
  1091                           
  1092                           ;dc_motor.c: 86:     while(mL->power !=0){
  1093   01FA80  C014  FFD9         	movff	stop@mL,fsr2l
  1094   01FA84  C015  FFDA         	movff	stop@mL+1,fsr2h
  1095   01FA88  50DF               	movf	indf2,w,c
  1096   01FA8A  A4D8               	btfss	status,2,c
  1097   01FA8C  EF4A  F0FD         	goto	u241
  1098   01FA90  EF4C  F0FD         	goto	u240
  1099   01FA94                     u241:
  1100   01FA94  EF2C  F0FD         	goto	l1334
  1101   01FA98                     u240:
  1102   01FA98  EF62  F0FD         	goto	l1348
  1103   01FA9C                     l1342:
  1104                           
  1105                           ;dc_motor.c: 92:         mR->power -=10;
  1106   01FA9C  C016  FFD9         	movff	stop@mR,fsr2l
  1107   01FAA0  C017  FFDA         	movff	stop@mR+1,fsr2h
  1108   01FAA4  0E0A               	movlw	10
  1109   01FAA6  5EDF               	subwf	indf2,f,c
  1110   01FAA8                     
  1111                           ;dc_motor.c: 93:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1112   01FAA8  0E68               	movlw	104
  1113   01FAAA  6E18               	movwf	??_stop^0,c
  1114   01FAAC  0EE4               	movlw	228
  1115   01FAAE                     u397:
  1116   01FAAE  2EE8               	decfsz	wreg,f,c
  1117   01FAB0  D7FE               	bra	u397
  1118   01FAB2  2E18               	decfsz	??_stop^0,f,c
  1119   01FAB4  D7FC               	bra	u397
  1120   01FAB6  D000               	nop2	
  1121   01FAB8                     
  1122                           ;dc_motor.c: 94:         setMotorPWM(mR);
  1123   01FAB8  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1124   01FABC  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1125   01FAC0  EC81  F0FE         	call	_setMotorPWM	;wreg free
  1126   01FAC4                     l1348:
  1127                           
  1128                           ;dc_motor.c: 91:     while(mR -> power !=0){
  1129   01FAC4  C016  FFD9         	movff	stop@mR,fsr2l
  1130   01FAC8  C017  FFDA         	movff	stop@mR+1,fsr2h
  1131   01FACC  50DF               	movf	indf2,w,c
  1132   01FACE  A4D8               	btfss	status,2,c
  1133   01FAD0  EF6C  F0FD         	goto	u251
  1134   01FAD4  EF6E  F0FD         	goto	u250
  1135   01FAD8                     u251:
  1136   01FAD8  EF4E  F0FD         	goto	l1342
  1137   01FADC                     u250:
  1138   01FADC  0012               	return		;funcret
  1139   01FADE                     __end_of_stop:
  1140                           	callstack 0
  1141                           
  1142 ;; *************** function _setMotorPWM *****************
  1143 ;; Defined at:
  1144 ;;		line 61 in file "dc_motor.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  m               2   13[COMRAM] PTR struct DC_motor
  1147 ;;		 -> main@motorR(9), main@motorL(9), 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  negDuty         1   18[COMRAM] unsigned char 
  1150 ;;  posDuty         1   17[COMRAM] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1164 ;;Total ram usage:        6 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 1
  1167 ;; This function calls:
  1168 ;;		___lwdiv
  1169 ;;		___wmul
  1170 ;; This function is called by:
  1171 ;;		_stop
  1172 ;;		_turnLeft45
  1173 ;;		_turnRight45
  1174 ;;		_main
  1175 ;;		_fullSpeedAhead
  1176 ;;		_reverseOneSquare
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text5
  1181   01FD02                     __ptext5:
  1182                           	callstack 0
  1183   01FD02                     _setMotorPWM:
  1184                           	callstack 29
  1185   01FD02                     
  1186                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  1187   01FD02  EE20 F002          	lfsr	2,2
  1188   01FD06  500E               	movf	setMotorPWM@m^0,w,c
  1189   01FD08  26D9               	addwf	fsr2l,f,c
  1190   01FD0A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1191   01FD0C  22DA               	addwfc	fsr2h,f,c
  1192   01FD0E  50DF               	movf	indf2,w,c
  1193   01FD10  B4D8               	btfsc	status,2,c
  1194   01FD12  EF8D  F0FE         	goto	u221
  1195   01FD16  EF8F  F0FE         	goto	u220
  1196   01FD1A                     u221:
  1197   01FD1A  EFC3  F0FE         	goto	l1320
  1198   01FD1E                     u220:
  1199   01FD1E                     
  1200                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1201   01FD1E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1202   01FD22  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1203   01FD26  50DF               	movf	indf2,w,c
  1204   01FD28  6E10               	movwf	??_setMotorPWM^0,c
  1205   01FD2A  5010               	movf	??_setMotorPWM^0,w,c
  1206   01FD2C  6E01               	movwf	___wmul@multiplier^0,c
  1207   01FD2E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1208   01FD30  EE20 F003          	lfsr	2,3
  1209   01FD34  500E               	movf	setMotorPWM@m^0,w,c
  1210   01FD36  26D9               	addwf	fsr2l,f,c
  1211   01FD38  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1212   01FD3A  22DA               	addwfc	fsr2h,f,c
  1213   01FD3C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1214   01FD40  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1215   01FD44  EC15  F0FC         	call	___wmul	;wreg free
  1216   01FD48  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1217   01FD4C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1218   01FD50  0E00               	movlw	0
  1219   01FD52  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1220   01FD54  0E64               	movlw	100
  1221   01FD56  6E09               	movwf	___lwdiv@divisor^0,c
  1222   01FD58  ECAC  F0FC         	call	___lwdiv	;wreg free
  1223   01FD5C  EE20 F003          	lfsr	2,3
  1224   01FD60  500E               	movf	setMotorPWM@m^0,w,c
  1225   01FD62  26D9               	addwf	fsr2l,f,c
  1226   01FD64  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1227   01FD66  22DA               	addwfc	fsr2h,f,c
  1228   01FD68  50DF               	movf	indf2,w,c
  1229   01FD6A  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1230   01FD6C  5007               	movf	?___lwdiv^0,w,c
  1231   01FD6E  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1232   01FD70  6E12               	movwf	setMotorPWM@posDuty^0,c
  1233   01FD72                     
  1234                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  1235   01FD72  EE20 F003          	lfsr	2,3
  1236   01FD76  500E               	movf	setMotorPWM@m^0,w,c
  1237   01FD78  26D9               	addwf	fsr2l,f,c
  1238   01FD7A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1239   01FD7C  22DA               	addwfc	fsr2h,f,c
  1240   01FD7E  50DF               	movf	indf2,w,c
  1241   01FD80  6E13               	movwf	setMotorPWM@negDuty^0,c
  1242                           
  1243                           ;dc_motor.c: 68:     }
  1244   01FD82  EFE6  F0FE         	goto	l1324
  1245   01FD86                     l1320:
  1246                           
  1247                           ;dc_motor.c: 70:         posDuty=0;
  1248   01FD86  0E00               	movlw	0
  1249   01FD88  6E12               	movwf	setMotorPWM@posDuty^0,c
  1250   01FD8A                     
  1251                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1252   01FD8A  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1253   01FD8E  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1254   01FD92  50DF               	movf	indf2,w,c
  1255   01FD94  6E10               	movwf	??_setMotorPWM^0,c
  1256   01FD96  5010               	movf	??_setMotorPWM^0,w,c
  1257   01FD98  6E01               	movwf	___wmul@multiplier^0,c
  1258   01FD9A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1259   01FD9C  EE20 F003          	lfsr	2,3
  1260   01FDA0  500E               	movf	setMotorPWM@m^0,w,c
  1261   01FDA2  26D9               	addwf	fsr2l,f,c
  1262   01FDA4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1263   01FDA6  22DA               	addwfc	fsr2h,f,c
  1264   01FDA8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1265   01FDAC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1266   01FDB0  EC15  F0FC         	call	___wmul	;wreg free
  1267   01FDB4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1268   01FDB8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1269   01FDBC  0E00               	movlw	0
  1270   01FDBE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1271   01FDC0  0E64               	movlw	100
  1272   01FDC2  6E09               	movwf	___lwdiv@divisor^0,c
  1273   01FDC4  ECAC  F0FC         	call	___lwdiv	;wreg free
  1274   01FDC8  5007               	movf	?___lwdiv^0,w,c
  1275   01FDCA  6E13               	movwf	setMotorPWM@negDuty^0,c
  1276   01FDCC                     l1324:
  1277                           
  1278                           ;dc_motor.c: 74:     if (m->direction) {
  1279   01FDCC  EE20 F001          	lfsr	2,1
  1280   01FDD0  500E               	movf	setMotorPWM@m^0,w,c
  1281   01FDD2  26D9               	addwf	fsr2l,f,c
  1282   01FDD4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1283   01FDD6  22DA               	addwfc	fsr2h,f,c
  1284   01FDD8  50DF               	movf	indf2,w,c
  1285   01FDDA  B4D8               	btfsc	status,2,c
  1286   01FDDC  EFF2  F0FE         	goto	u231
  1287   01FDE0  EFF4  F0FE         	goto	u230
  1288   01FDE4                     u231:
  1289   01FDE4  EF16  F0FF         	goto	l1328
  1290   01FDE8                     u230:
  1291   01FDE8                     
  1292                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  1293   01FDE8  EE20 F005          	lfsr	2,5
  1294   01FDEC  500E               	movf	setMotorPWM@m^0,w,c
  1295   01FDEE  26D9               	addwf	fsr2l,f,c
  1296   01FDF0  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1297   01FDF2  22DA               	addwfc	fsr2h,f,c
  1298   01FDF4  CFDE F010          	movff	postinc2,??_setMotorPWM
  1299   01FDF8  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1300   01FDFC  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1301   01FE00  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1302   01FE04  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1303                           
  1304                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  1305   01FE08  EE20 F007          	lfsr	2,7
  1306   01FE0C  500E               	movf	setMotorPWM@m^0,w,c
  1307   01FE0E  26D9               	addwf	fsr2l,f,c
  1308   01FE10  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1309   01FE12  22DA               	addwfc	fsr2h,f,c
  1310   01FE14  CFDE F010          	movff	postinc2,??_setMotorPWM
  1311   01FE18  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1312   01FE1C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1313   01FE20  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1314   01FE24  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1315                           
  1316                           ;dc_motor.c: 77:     } else {
  1317   01FE28  EF36  F0FF         	goto	l83
  1318   01FE2C                     l1328:
  1319                           
  1320                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  1321   01FE2C  EE20 F005          	lfsr	2,5
  1322   01FE30  500E               	movf	setMotorPWM@m^0,w,c
  1323   01FE32  26D9               	addwf	fsr2l,f,c
  1324   01FE34  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1325   01FE36  22DA               	addwfc	fsr2h,f,c
  1326   01FE38  CFDE F010          	movff	postinc2,??_setMotorPWM
  1327   01FE3C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1328   01FE40  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1329   01FE44  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1330   01FE48  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1331                           
  1332                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  1333   01FE4C  EE20 F007          	lfsr	2,7
  1334   01FE50  500E               	movf	setMotorPWM@m^0,w,c
  1335   01FE52  26D9               	addwf	fsr2l,f,c
  1336   01FE54  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1337   01FE56  22DA               	addwfc	fsr2h,f,c
  1338   01FE58  CFDE F010          	movff	postinc2,??_setMotorPWM
  1339   01FE5C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1340   01FE60  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1341   01FE64  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1342   01FE68  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1343   01FE6C                     l83:
  1344   01FE6C  0012               	return		;funcret
  1345   01FE6E                     __end_of_setMotorPWM:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function ___wmul *****************
  1349 ;; Defined at:
  1350 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  multiplier      2    0[COMRAM] unsigned int 
  1353 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  product         2    4[COMRAM] unsigned int 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2    0[COMRAM] unsigned int 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0, prodl, prodh
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;Total ram usage:        6 bytes
  1370 ;; Hardware stack levels used: 1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_setMotorPWM
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text6
  1379   01F82A                     __ptext6:
  1380                           	callstack 0
  1381   01F82A                     ___wmul:
  1382                           	callstack 29
  1383   01F82A  5001               	movf	___wmul@multiplier^0,w,c
  1384   01F82C  0203               	mulwf	___wmul@multiplicand^0,c
  1385   01F82E  CFF3 F005          	movff	prodl,___wmul@product
  1386   01F832  CFF4 F006          	movff	prodh,___wmul@product+1
  1387   01F836  5001               	movf	___wmul@multiplier^0,w,c
  1388   01F838  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1389   01F83A  50F3               	movf	243,w,c
  1390   01F83C  2606               	addwf	(___wmul@product+1)^0,f,c
  1391   01F83E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1392   01F840  0203               	mulwf	___wmul@multiplicand^0,c
  1393   01F842  50F3               	movf	243,w,c
  1394   01F844  2606               	addwf	(___wmul@product+1)^0,f,c
  1395   01F846  C005  F001         	movff	___wmul@product,?___wmul
  1396   01F84A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1397   01F84E  0012               	return		;funcret
  1398   01F850                     __end_of___wmul:
  1399                           	callstack 0
  1400                           
  1401 ;; *************** function ___lwdiv *****************
  1402 ;; Defined at:
  1403 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  dividend        2    6[COMRAM] unsigned int 
  1406 ;;  divisor         2    8[COMRAM] unsigned int 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  quotient        2   10[COMRAM] unsigned int 
  1409 ;;  counter         1   12[COMRAM] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  2    6[COMRAM] unsigned int 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1422 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1423 ;;Total ram usage:        7 bytes
  1424 ;; Hardware stack levels used: 1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_setMotorPWM
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text7
  1433   01F958                     __ptext7:
  1434                           	callstack 0
  1435   01F958                     ___lwdiv:
  1436                           	callstack 29
  1437   01F958  0E00               	movlw	0
  1438   01F95A  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1439   01F95C  0E00               	movlw	0
  1440   01F95E  6E0B               	movwf	___lwdiv@quotient^0,c
  1441   01F960  5009               	movf	___lwdiv@divisor^0,w,c
  1442   01F962  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1443   01F964  B4D8               	btfsc	status,2,c
  1444   01F966  EFB7  F0FC         	goto	u191
  1445   01F96A  EFB9  F0FC         	goto	u190
  1446   01F96E                     u191:
  1447   01F96E  EFE1  F0FC         	goto	l750
  1448   01F972                     u190:
  1449   01F972  0E01               	movlw	1
  1450   01F974  6E0D               	movwf	___lwdiv@counter^0,c
  1451   01F976  EFC1  F0FC         	goto	l1300
  1452   01F97A                     l1298:
  1453   01F97A  90D8               	bcf	status,0,c
  1454   01F97C  3609               	rlcf	___lwdiv@divisor^0,f,c
  1455   01F97E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1456   01F980  2A0D               	incf	___lwdiv@counter^0,f,c
  1457   01F982                     l1300:
  1458   01F982  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1459   01F984  EFC6  F0FC         	goto	u201
  1460   01F988  EFC8  F0FC         	goto	u200
  1461   01F98C                     u201:
  1462   01F98C  EFBD  F0FC         	goto	l1298
  1463   01F990                     u200:
  1464   01F990                     l1302:
  1465   01F990  90D8               	bcf	status,0,c
  1466   01F992  360B               	rlcf	___lwdiv@quotient^0,f,c
  1467   01F994  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1468   01F996  5009               	movf	___lwdiv@divisor^0,w,c
  1469   01F998  5C07               	subwf	___lwdiv@dividend^0,w,c
  1470   01F99A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1471   01F99C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1472   01F99E  A0D8               	btfss	status,0,c
  1473   01F9A0  EFD4  F0FC         	goto	u211
  1474   01F9A4  EFD6  F0FC         	goto	u210
  1475   01F9A8                     u211:
  1476   01F9A8  EFDB  F0FC         	goto	l1310
  1477   01F9AC                     u210:
  1478   01F9AC  5009               	movf	___lwdiv@divisor^0,w,c
  1479   01F9AE  5E07               	subwf	___lwdiv@dividend^0,f,c
  1480   01F9B0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1481   01F9B2  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1482   01F9B4  800B               	bsf	___lwdiv@quotient^0,0,c
  1483   01F9B6                     l1310:
  1484   01F9B6  90D8               	bcf	status,0,c
  1485   01F9B8  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1486   01F9BA  3209               	rrcf	___lwdiv@divisor^0,f,c
  1487   01F9BC  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1488   01F9BE  EFC8  F0FC         	goto	l1302
  1489   01F9C2                     l750:
  1490   01F9C2  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1491   01F9C6  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1492   01F9CA  0012               	return		;funcret
  1493   01F9CC                     __end_of___lwdiv:
  1494                           	callstack 0
  1495                           
  1496 ;; *************** function _initDCmotorsPWM *****************
  1497 ;; Defined at:
  1498 ;;		line 6 in file "dc_motor.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1516 ;;Total ram usage:        0 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text8
  1526   01F9CC                     __ptext8:
  1527                           	callstack 0
  1528   01F9CC                     _initDCmotorsPWM:
  1529                           	callstack 30
  1530   01F9CC                     
  1531                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1532   01F9CC  9485               	bcf	133,2,c	;volatile
  1533                           
  1534                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1535   01F9CE  9885               	bcf	133,4,c	;volatile
  1536                           
  1537                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1538   01F9D0  9E83               	bcf	131,7,c	;volatile
  1539                           
  1540                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1541   01F9D2  9C87               	bcf	135,6,c	;volatile
  1542   01F9D4                     
  1543                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1544   01F9D4  0E05               	movlw	5
  1545   01F9D6  010E               	movlb	14	; () banked
  1546   01F9D8  6F74               	movwf	116,b	;volatile
  1547                           
  1548                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1549   01F9DA  0E06               	movlw	6
  1550   01F9DC  6F76               	movwf	118,b	;volatile
  1551                           
  1552                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1553   01F9DE  0E07               	movlw	7
  1554   01F9E0  6F69               	movwf	105,b	;volatile
  1555                           
  1556                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1557   01F9E2  0E08               	movlw	8
  1558   01F9E4  6F88               	movwf	136,b	;volatile
  1559                           
  1560                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1561   01F9E6  50BD               	movf	189,w,c	;volatile
  1562   01F9E8  0B8F               	andlw	-113
  1563   01F9EA  0940               	iorlw	64
  1564   01F9EC  6EBD               	movwf	189,c	;volatile
  1565                           
  1566                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1567   01F9EE  0EE0               	movlw	-32
  1568   01F9F0  16BE               	andwf	190,f,c	;volatile
  1569                           
  1570                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1571   01F9F2  50BF               	movf	191,w,c	;volatile
  1572   01F9F4  0BF0               	andlw	-16
  1573   01F9F6  0901               	iorlw	1
  1574   01F9F8  6EBF               	movwf	191,c	;volatile
  1575                           
  1576                           ;dc_motor.c: 26:     T2PR=99;
  1577   01F9FA  0E63               	movlw	99
  1578   01F9FC  6EBC               	movwf	188,c	;volatile
  1579   01F9FE                     
  1580                           ; BSR set to: 14
  1581                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1582   01F9FE  8EBD               	bsf	189,7,c	;volatile
  1583                           
  1584                           ;dc_motor.c: 31:     CCPR1H=0;
  1585   01FA00  0E00               	movlw	0
  1586   01FA02  6EAA               	movwf	170,c	;volatile
  1587                           
  1588                           ;dc_motor.c: 32:     CCPR2H=0;
  1589   01FA04  0E00               	movlw	0
  1590   01FA06  6EA6               	movwf	166,c	;volatile
  1591                           
  1592                           ;dc_motor.c: 33:     CCPR3H=0;
  1593   01FA08  0E00               	movlw	0
  1594   01FA0A  010F               	movlb	15	; () banked
  1595   01FA0C  6F25               	movwf	37,b	;volatile
  1596                           
  1597                           ;dc_motor.c: 34:     CCPR4H=0;
  1598   01FA0E  0E00               	movlw	0
  1599   01FA10  6F21               	movwf	33,b	;volatile
  1600                           
  1601                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1602   01FA12  0EFC               	movlw	-4
  1603   01FA14  16AD               	andwf	173,f,c	;volatile
  1604                           
  1605                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1606   01FA16  0EF3               	movlw	-13
  1607   01FA18  16AD               	andwf	173,f,c	;volatile
  1608                           
  1609                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1610   01FA1A  0ECF               	movlw	-49
  1611   01FA1C  16AD               	andwf	173,f,c	;volatile
  1612                           
  1613                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1614   01FA1E  0E3F               	movlw	-193
  1615   01FA20  16AD               	andwf	173,f,c	;volatile
  1616   01FA22                     
  1617                           ; BSR set to: 15
  1618                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1619   01FA22  88AB               	bsf	171,4,c	;volatile
  1620                           
  1621                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1622   01FA24  50AB               	movf	171,w,c	;volatile
  1623   01FA26  0BF0               	andlw	-16
  1624   01FA28  090C               	iorlw	12
  1625   01FA2A  6EAB               	movwf	171,c	;volatile
  1626   01FA2C                     
  1627                           ; BSR set to: 15
  1628                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1629   01FA2C  8EAB               	bsf	171,7,c	;volatile
  1630   01FA2E                     
  1631                           ; BSR set to: 15
  1632                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1633   01FA2E  88A7               	bsf	167,4,c	;volatile
  1634                           
  1635                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1636   01FA30  50A7               	movf	167,w,c	;volatile
  1637   01FA32  0BF0               	andlw	-16
  1638   01FA34  090C               	iorlw	12
  1639   01FA36  6EA7               	movwf	167,c	;volatile
  1640   01FA38                     
  1641                           ; BSR set to: 15
  1642                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1643   01FA38  8EA7               	bsf	167,7,c	;volatile
  1644   01FA3A                     
  1645                           ; BSR set to: 15
  1646                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1647   01FA3A  8926               	bsf	38,4,b	;volatile
  1648                           
  1649                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1650   01FA3C  5126               	movf	38,w,b	;volatile
  1651   01FA3E  0BF0               	andlw	-16
  1652   01FA40  090C               	iorlw	12
  1653   01FA42  6F26               	movwf	38,b	;volatile
  1654   01FA44                     
  1655                           ; BSR set to: 15
  1656                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1657   01FA44  8F26               	bsf	38,7,b	;volatile
  1658   01FA46                     
  1659                           ; BSR set to: 15
  1660                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1661   01FA46  8922               	bsf	34,4,b	;volatile
  1662                           
  1663                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1664   01FA48  5122               	movf	34,w,b	;volatile
  1665   01FA4A  0BF0               	andlw	-16
  1666   01FA4C  090C               	iorlw	12
  1667   01FA4E  6F22               	movwf	34,b	;volatile
  1668   01FA50                     
  1669                           ; BSR set to: 15
  1670                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1671   01FA50  8F22               	bsf	34,7,b	;volatile
  1672   01FA52                     
  1673                           ; BSR set to: 15
  1674   01FA52  0012               	return		;funcret
  1675   01FA54                     __end_of_initDCmotorsPWM:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _determine_card *****************
  1679 ;; Defined at:
  1680 ;;		line 63 in file "colour_identify.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  master_close    2    0[COMRAM] PTR unsigned char 
  1683 ;;		 -> main@master_closeness(9), 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  i               1    5[COMRAM] enum E14551
  1686 ;;  current_smal    1    4[COMRAM] unsigned char 
  1687 ;;  predicted_co    1    3[COMRAM] enum E14551
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      enum E14250
  1690 ;; Registers used:
  1691 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1700 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1701 ;;Total ram usage:        6 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text9
  1711   01F8FC                     __ptext9:
  1712                           	callstack 0
  1713   01F8FC                     _determine_card:
  1714                           	callstack 30
  1715   01F8FC                     
  1716                           ;colour_identify.c: 64:     colour predicted_colour = RED;
  1717   01F8FC  0E00               	movlw	0
  1718   01F8FE  6E04               	movwf	determine_card@predicted_colour^0,c
  1719   01F900                     
  1720                           ;colour_identify.c: 65:     unsigned char current_smallest = master_closeness[RED];
  1721   01F900  C001  FFD9         	movff	determine_card@master_closeness,fsr2l
  1722   01F904  C002  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  1723   01F908  50DF               	movf	indf2,w,c
  1724   01F90A  6E05               	movwf	determine_card@current_smallest^0,c
  1725   01F90C                     
  1726                           ;colour_identify.c: 66:     for(colour i = GREEN; i<=BLACK; i++){
  1727   01F90C  0E01               	movlw	1
  1728   01F90E  6E06               	movwf	determine_card@i^0,c
  1729   01F910                     l1414:
  1730                           
  1731                           ;colour_identify.c: 67:         if(master_closeness[i] < current_smallest){
  1732   01F910  5006               	movf	determine_card@i^0,w,c
  1733   01F912  2401               	addwf	determine_card@master_closeness^0,w,c
  1734   01F914  6ED9               	movwf	fsr2l,c
  1735   01F916  0E00               	movlw	0
  1736   01F918  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  1737   01F91A  6EDA               	movwf	fsr2h,c
  1738   01F91C  5005               	movf	determine_card@current_smallest^0,w,c
  1739   01F91E  5CDE               	subwf	postinc2,w,c
  1740   01F920  B0D8               	btfsc	status,0,c
  1741   01F922  EF95  F0FC         	goto	u281
  1742   01F926  EF97  F0FC         	goto	u280
  1743   01F92A                     u281:
  1744   01F92A  EFA1  F0FC         	goto	l1420
  1745   01F92E                     u280:
  1746   01F92E                     
  1747                           ;colour_identify.c: 68:             current_smallest = master_closeness[i];
  1748   01F92E  5006               	movf	determine_card@i^0,w,c
  1749   01F930  2401               	addwf	determine_card@master_closeness^0,w,c
  1750   01F932  6ED9               	movwf	fsr2l,c
  1751   01F934  0E00               	movlw	0
  1752   01F936  2002               	addwfc	(determine_card@master_closeness+1)^0,w,c
  1753   01F938  6EDA               	movwf	fsr2h,c
  1754   01F93A  50DF               	movf	indf2,w,c
  1755   01F93C  6E05               	movwf	determine_card@current_smallest^0,c
  1756   01F93E                     
  1757                           ;colour_identify.c: 69:             predicted_colour = i;
  1758   01F93E  C006  F004         	movff	determine_card@i,determine_card@predicted_colour
  1759   01F942                     l1420:
  1760                           
  1761                           ;colour_identify.c: 71:     }
  1762   01F942  2A06               	incf	determine_card@i^0,f,c
  1763   01F944  0E08               	movlw	8
  1764   01F946  6406               	cpfsgt	determine_card@i^0,c
  1765   01F948  EFA8  F0FC         	goto	u291
  1766   01F94C  EFAA  F0FC         	goto	u290
  1767   01F950                     u291:
  1768   01F950  EF88  F0FC         	goto	l1414
  1769   01F954                     u290:
  1770   01F954                     
  1771                           ;colour_identify.c: 72:     return predicted_colour;
  1772   01F954  5004               	movf	determine_card@predicted_colour^0,w,c
  1773   01F956  0012               	return		;funcret
  1774   01F958                     __end_of_determine_card:
  1775                           	callstack 0
  1776                           
  1777 ;; *************** function _color_click_init *****************
  1778 ;; Defined at:
  1779 ;;		line 5 in file "color.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1796 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;Total ram usage:        1 bytes
  1798 ;; Hardware stack levels used: 1
  1799 ;; Hardware stack levels required when called: 3
  1800 ;; This function calls:
  1801 ;;		_I2C_2_Master_Init
  1802 ;;		_color_writetoaddr
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text10
  1809   01F8C8                     __ptext10:
  1810                           	callstack 0
  1811   01F8C8                     _color_click_init:
  1812                           	callstack 27
  1813   01F8C8                     
  1814                           ;color.c: 8:     I2C_2_Master_Init();
  1815   01F8C8  EC4F  F0FC         	call	_I2C_2_Master_Init	;wreg free
  1816   01F8CC                     
  1817                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1818   01F8CC  0E01               	movlw	1
  1819   01F8CE  6E03               	movwf	color_writetoaddr@value^0,c
  1820   01F8D0  0E00               	movlw	0
  1821   01F8D2  ECF4  F0FB         	call	_color_writetoaddr
  1822   01F8D6                     
  1823                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1824   01F8D6  0E3F               	movlw	63
  1825   01F8D8  6E05               	movwf	??_color_click_init^0,c
  1826   01F8DA  0E55               	movlw	85
  1827   01F8DC                     u407:
  1828   01F8DC  2EE8               	decfsz	wreg,f,c
  1829   01F8DE  D7FE               	bra	u407
  1830   01F8E0  2E05               	decfsz	??_color_click_init^0,f,c
  1831   01F8E2  D7FC               	bra	u407
  1832   01F8E4  F000               	nop	
  1833   01F8E6                     
  1834                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1835   01F8E6  0E03               	movlw	3
  1836   01F8E8  6E03               	movwf	color_writetoaddr@value^0,c
  1837   01F8EA  0E00               	movlw	0
  1838   01F8EC  ECF4  F0FB         	call	_color_writetoaddr
  1839   01F8F0                     
  1840                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1841   01F8F0  0ED5               	movlw	213
  1842   01F8F2  6E03               	movwf	color_writetoaddr@value^0,c
  1843   01F8F4  0E01               	movlw	1
  1844   01F8F6  ECF4  F0FB         	call	_color_writetoaddr
  1845   01F8FA  0012               	return		;funcret
  1846   01F8FC                     __end_of_color_click_init:
  1847                           	callstack 0
  1848                           
  1849 ;; *************** function _color_writetoaddr *****************
  1850 ;; Defined at:
  1851 ;;		line 21 in file "color.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  address         1    wreg     unsigned char 
  1854 ;;  value           1    2[COMRAM] unsigned char 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  address         1    3[COMRAM] unsigned char 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2, status,0, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1866 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;Total ram usage:        2 bytes
  1871 ;; Hardware stack levels used: 1
  1872 ;; Hardware stack levels required when called: 2
  1873 ;; This function calls:
  1874 ;;		_I2C_2_Master_Start
  1875 ;;		_I2C_2_Master_Stop
  1876 ;;		_I2C_2_Master_Write
  1877 ;; This function is called by:
  1878 ;;		_color_click_init
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text11
  1883   01F7E8                     __ptext11:
  1884                           	callstack 0
  1885   01F7E8                     _color_writetoaddr:
  1886                           	callstack 27
  1887                           
  1888                           ;incstack = 0
  1889                           ;color_writetoaddr@address stored from wreg
  1890   01F7E8  6E04               	movwf	color_writetoaddr@address^0,c
  1891   01F7EA                     
  1892                           ;color.c: 22:     I2C_2_Master_Start();
  1893   01F7EA  ECE4  F0FB         	call	_I2C_2_Master_Start	;wreg free
  1894                           
  1895                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1896   01F7EE  0E52               	movlw	82
  1897   01F7F0  ECEE  F0FB         	call	_I2C_2_Master_Write
  1898                           
  1899                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1900   01F7F4  5004               	movf	color_writetoaddr@address^0,w,c
  1901   01F7F6  0980               	iorlw	128
  1902   01F7F8  ECEE  F0FB         	call	_I2C_2_Master_Write
  1903                           
  1904                           ;color.c: 25:     I2C_2_Master_Write(value);
  1905   01F7FC  5003               	movf	color_writetoaddr@value^0,w,c
  1906   01F7FE  ECEE  F0FB         	call	_I2C_2_Master_Write
  1907                           
  1908                           ;color.c: 26:     I2C_2_Master_Stop();
  1909   01F802  ECE9  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  1910   01F806  0012               	return		;funcret
  1911   01F808                     __end_of_color_writetoaddr:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function _I2C_2_Master_Write *****************
  1915 ;; Defined at:
  1916 ;;		line 45 in file "i2c.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  data_byte       1    wreg     unsigned char 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  data_byte       1    1[COMRAM] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1934 ;;Total ram usage:        1 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; Hardware stack levels required when called: 1
  1937 ;; This function calls:
  1938 ;;		_I2C_2_Master_Idle
  1939 ;; This function is called by:
  1940 ;;		_color_writetoaddr
  1941 ;;		_color_read_Red
  1942 ;;		_color_read_Green
  1943 ;;		_color_read_Blue
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text12
  1948   01F7DC                     __ptext12:
  1949                           	callstack 0
  1950   01F7DC                     _I2C_2_Master_Write:
  1951                           	callstack 27
  1952                           
  1953                           ;incstack = 0
  1954                           ;I2C_2_Master_Write@data_byte stored from wreg
  1955   01F7DC  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1956   01F7DE                     
  1957                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1958   01F7DE  EC3B  F0FC         	call	_I2C_2_Master_Idle	;wreg free
  1959   01F7E2                     
  1960                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1961   01F7E2  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1962   01F7E6  0012               	return		;funcret
  1963   01F7E8                     __end_of_I2C_2_Master_Write:
  1964                           	callstack 0
  1965                           
  1966 ;; *************** function _I2C_2_Master_Stop *****************
  1967 ;; Defined at:
  1968 ;;		line 39 in file "i2c.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1986 ;;Total ram usage:        0 bytes
  1987 ;; Hardware stack levels used: 1
  1988 ;; Hardware stack levels required when called: 1
  1989 ;; This function calls:
  1990 ;;		_I2C_2_Master_Idle
  1991 ;; This function is called by:
  1992 ;;		_color_writetoaddr
  1993 ;;		_color_read_Red
  1994 ;;		_color_read_Green
  1995 ;;		_color_read_Blue
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text13
  2000   01F7D2                     __ptext13:
  2001                           	callstack 0
  2002   01F7D2                     _I2C_2_Master_Stop:
  2003                           	callstack 27
  2004   01F7D2                     
  2005                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2006   01F7D2  EC3B  F0FC         	call	_I2C_2_Master_Idle	;wreg free
  2007   01F7D6                     
  2008                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2009   01F7D6  010E               	movlb	14	; () banked
  2010   01F7D8  85DA               	bsf	218,2,b	;volatile
  2011   01F7DA                     
  2012                           ; BSR set to: 14
  2013   01F7DA  0012               	return		;funcret
  2014   01F7DC                     __end_of_I2C_2_Master_Stop:
  2015                           	callstack 0
  2016                           
  2017 ;; *************** function _I2C_2_Master_Start *****************
  2018 ;; Defined at:
  2019 ;;		line 27 in file "i2c.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;Total ram usage:        0 bytes
  2038 ;; Hardware stack levels used: 1
  2039 ;; Hardware stack levels required when called: 1
  2040 ;; This function calls:
  2041 ;;		_I2C_2_Master_Idle
  2042 ;; This function is called by:
  2043 ;;		_color_writetoaddr
  2044 ;;		_color_read_Red
  2045 ;;		_color_read_Green
  2046 ;;		_color_read_Blue
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text14
  2051   01F7C8                     __ptext14:
  2052                           	callstack 0
  2053   01F7C8                     _I2C_2_Master_Start:
  2054                           	callstack 27
  2055   01F7C8                     
  2056                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2057   01F7C8  EC3B  F0FC         	call	_I2C_2_Master_Idle	;wreg free
  2058   01F7CC                     
  2059                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2060   01F7CC  010E               	movlb	14	; () banked
  2061   01F7CE  81DA               	bsf	218,0,b	;volatile
  2062   01F7D0                     
  2063                           ; BSR set to: 14
  2064   01F7D0  0012               	return		;funcret
  2065   01F7D2                     __end_of_I2C_2_Master_Start:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function _I2C_2_Master_Idle *****************
  2069 ;; Defined at:
  2070 ;;		line 22 in file "i2c.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;Total ram usage:        1 bytes
  2089 ;; Hardware stack levels used: 1
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_I2C_2_Master_Start
  2094 ;;		_I2C_2_Master_Stop
  2095 ;;		_I2C_2_Master_Write
  2096 ;;		_I2C_2_Master_RepStart
  2097 ;;		_I2C_2_Master_Read
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text15
  2102   01F876                     __ptext15:
  2103                           	callstack 0
  2104   01F876                     _I2C_2_Master_Idle:
  2105                           	callstack 27
  2106   01F876                     l142:
  2107   01F876  010E               	movlb	14	; () banked
  2108   01F878  B5D8               	btfsc	216,2,b	;volatile
  2109   01F87A  EF41  F0FC         	goto	u11
  2110   01F87E  EF43  F0FC         	goto	u10
  2111   01F882                     u11:
  2112   01F882  EF3B  F0FC         	goto	l142
  2113   01F886                     u10:
  2114   01F886                     
  2115                           ; BSR set to: 14
  2116   01F886  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2117   01F88A  0E1F               	movlw	31
  2118   01F88C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2119   01F88E  A4D8               	btfss	status,2,c
  2120   01F890  EF4C  F0FC         	goto	u21
  2121   01F894  EF4E  F0FC         	goto	u20
  2122   01F898                     u21:
  2123   01F898  EF3B  F0FC         	goto	l142
  2124   01F89C                     u20:
  2125   01F89C                     
  2126                           ; BSR set to: 14
  2127   01F89C  0012               	return		;funcret
  2128   01F89E                     __end_of_I2C_2_Master_Idle:
  2129                           	callstack 0
  2130                           
  2131 ;; *************** function _I2C_2_Master_Init *****************
  2132 ;; Defined at:
  2133 ;;		line 4 in file "i2c.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used: 1
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_color_click_init
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text16
  2162   01F89E                     __ptext16:
  2163                           	callstack 0
  2164   01F89E                     _I2C_2_Master_Init:
  2165                           	callstack 29
  2166   01F89E                     
  2167                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2168   01F89E  010E               	movlb	14	; () banked
  2169   01F8A0  51D9               	movf	217,w,b	;volatile
  2170   01F8A2  0BF0               	andlw	-16
  2171   01F8A4  0908               	iorlw	8
  2172   01F8A6  6FD9               	movwf	217,b	;volatile
  2173   01F8A8                     
  2174                           ; BSR set to: 14
  2175                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2176   01F8A8  8BD9               	bsf	217,5,b	;volatile
  2177                           
  2178                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2179   01F8AA  0E9F               	movlw	159
  2180   01F8AC  6FD6               	movwf	214,b	;volatile
  2181   01F8AE                     
  2182                           ; BSR set to: 14
  2183                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2184   01F8AE  8A84               	bsf	132,5,c	;volatile
  2185   01F8B0                     
  2186                           ; BSR set to: 14
  2187                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2188   01F8B0  8C84               	bsf	132,6,c	;volatile
  2189   01F8B2                     
  2190                           ; BSR set to: 14
  2191                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2192   01F8B2  9BA7               	bcf	167,5,b	;volatile
  2193   01F8B4                     
  2194                           ; BSR set to: 14
  2195                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2196   01F8B4  9DA7               	bcf	167,6,b	;volatile
  2197                           
  2198                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2199   01F8B6  0E1D               	movlw	29
  2200   01F8B8  6F1D               	movwf	29,b	;volatile
  2201                           
  2202                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2203   01F8BA  0E1E               	movlw	30
  2204   01F8BC  6F1C               	movwf	28,b	;volatile
  2205                           
  2206                           ;i2c.c: 18:   RD5PPS=0x1C;
  2207   01F8BE  0E1C               	movlw	28
  2208   01F8C0  6F6F               	movwf	111,b	;volatile
  2209                           
  2210                           ;i2c.c: 19:   RD6PPS=0x1B;
  2211   01F8C2  0E1B               	movlw	27
  2212   01F8C4  6F70               	movwf	112,b	;volatile
  2213   01F8C6                     
  2214                           ; BSR set to: 14
  2215   01F8C6  0012               	return		;funcret
  2216   01F8C8                     __end_of_I2C_2_Master_Init:
  2217                           	callstack 0
  2218                           
  2219 ;; *************** function _LEDSon_init *****************
  2220 ;; Defined at:
  2221 ;;		line 18 in file "LEDsOn.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		None
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;Total ram usage:        0 bytes
  2240 ;; Hardware stack levels used: 1
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text17
  2249   01F808                     __ptext17:
  2250                           	callstack 0
  2251   01F808                     _LEDSon_init:
  2252                           	callstack 30
  2253   01F808                     
  2254                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  2255   01F808  9288               	bcf	136,1,c	;volatile
  2256                           
  2257                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  2258   01F80A  9088               	bcf	136,0,c	;volatile
  2259                           
  2260                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  2261   01F80C  9884               	bcf	132,4,c	;volatile
  2262                           
  2263                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  2264   01F80E  9684               	bcf	132,3,c	;volatile
  2265                           
  2266                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  2267   01F810  9086               	bcf	134,0,c	;volatile
  2268                           
  2269                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  2270   01F812  9287               	bcf	135,1,c	;volatile
  2271                           
  2272                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  2273   01F814  9E86               	bcf	134,7,c	;volatile
  2274                           
  2275                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  2276   01F816  9881               	bcf	129,4,c	;volatile
  2277                           
  2278                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  2279   01F818  8E7E               	bsf	126,7,c	;volatile
  2280                           
  2281                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  2282   01F81A  827F               	bsf	127,1,c	;volatile
  2283                           
  2284                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  2285   01F81C  8879               	bsf	121,4,c	;volatile
  2286                           
  2287                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  2288   01F81E  987C               	bcf	124,4,c	;volatile
  2289                           
  2290                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  2291   01F820  9280               	bcf	128,1,c	;volatile
  2292                           
  2293                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  2294   01F822  907E               	bcf	126,0,c	;volatile
  2295                           
  2296                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  2297   01F824  9080               	bcf	128,0,c	;volatile
  2298                           
  2299                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  2300   01F826  967C               	bcf	124,3,c	;volatile
  2301   01F828  0012               	return		;funcret
  2302   01F82A                     __end_of_LEDSon_init:
  2303                           	callstack 0
  2304   000000                     
  2305                           	psect	rparam
  2306   000000                     
  2307                           	psect	idloc
  2308                           
  2309                           ;Config register IDLOC0 @ 0x200000
  2310                           ;	unspecified, using default values
  2311   200000                     	org	2097152
  2312   200000  0FFF               	dw	4095
  2313                           
  2314                           ;Config register IDLOC1 @ 0x200002
  2315                           ;	unspecified, using default values
  2316   200002                     	org	2097154
  2317   200002  0FFF               	dw	4095
  2318                           
  2319                           ;Config register IDLOC2 @ 0x200004
  2320                           ;	unspecified, using default values
  2321   200004                     	org	2097156
  2322   200004  0FFF               	dw	4095
  2323                           
  2324                           ;Config register IDLOC3 @ 0x200006
  2325                           ;	unspecified, using default values
  2326   200006                     	org	2097158
  2327   200006  0FFF               	dw	4095
  2328                           
  2329                           ;Config register IDLOC4 @ 0x200008
  2330                           ;	unspecified, using default values
  2331   200008                     	org	2097160
  2332   200008  0FFF               	dw	4095
  2333                           
  2334                           ;Config register IDLOC5 @ 0x20000A
  2335                           ;	unspecified, using default values
  2336   20000A                     	org	2097162
  2337   20000A  0FFF               	dw	4095
  2338                           
  2339                           ;Config register IDLOC6 @ 0x20000C
  2340                           ;	unspecified, using default values
  2341   20000C                     	org	2097164
  2342   20000C  0FFF               	dw	4095
  2343                           
  2344                           ;Config register IDLOC7 @ 0x20000E
  2345                           ;	unspecified, using default values
  2346   20000E                     	org	2097166
  2347   20000E  0FFF               	dw	4095
  2348                           
  2349                           	psect	config
  2350                           
  2351                           ;Config register CONFIG1L @ 0x300000
  2352                           ;	External Oscillator mode Selection bits
  2353                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2354                           ;	Power-up default value for COSC bits
  2355                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2356   300000                     	org	3145728
  2357   300000  AA                 	db	170
  2358                           
  2359                           ;Config register CONFIG1H @ 0x300001
  2360                           ;	unspecified, using default values
  2361                           ;	Clock Out Enable bit
  2362                           ;	CLKOUTEN = 0x1, unprogrammed default
  2363                           ;	Clock Switch Enable bit
  2364                           ;	CSWEN = 0x1, unprogrammed default
  2365                           ;	Fail-Safe Clock Monitor Enable bit
  2366                           ;	FCMEN = 0x1, unprogrammed default
  2367   300001                     	org	3145729
  2368   300001  FF                 	db	255
  2369                           
  2370                           ;Config register CONFIG2L @ 0x300002
  2371                           ;	unspecified, using default values
  2372                           ;	Master Clear Enable bit
  2373                           ;	MCLRE = 0x1, unprogrammed default
  2374                           ;	Power-up Timer Enable bit
  2375                           ;	PWRTE = 0x1, unprogrammed default
  2376                           ;	Low-power BOR enable bit
  2377                           ;	LPBOREN = 0x1, unprogrammed default
  2378                           ;	Brown-out Reset Enable bits
  2379                           ;	BOREN = 0x3, unprogrammed default
  2380   300002                     	org	3145730
  2381   300002  FF                 	db	255
  2382                           
  2383                           ;Config register CONFIG2H @ 0x300003
  2384                           ;	unspecified, using default values
  2385                           ;	Brown Out Reset Voltage selection bits
  2386                           ;	BORV = 0x3, unprogrammed default
  2387                           ;	ZCD Disable bit
  2388                           ;	ZCD = 0x1, unprogrammed default
  2389                           ;	PPSLOCK bit One-Way Set Enable bit
  2390                           ;	PPS1WAY = 0x1, unprogrammed default
  2391                           ;	Stack Full/Underflow Reset Enable bit
  2392                           ;	STVREN = 0x1, unprogrammed default
  2393                           ;	Debugger Enable bit
  2394                           ;	DEBUG = 0x1, unprogrammed default
  2395                           ;	Extended Instruction Set Enable bit
  2396                           ;	XINST = 0x1, unprogrammed default
  2397   300003                     	org	3145731
  2398   300003  FF                 	db	255
  2399                           
  2400                           ;Config register CONFIG3L @ 0x300004
  2401                           ;	WDT Period Select bits
  2402                           ;	WDTCPS = 0x1F, unprogrammed default
  2403                           ;	WDT operating mode
  2404                           ;	WDTE = OFF, WDT Disabled
  2405   300004                     	org	3145732
  2406   300004  9F                 	db	159
  2407                           
  2408                           ;Config register CONFIG3H @ 0x300005
  2409                           ;	unspecified, using default values
  2410                           ;	WDT Window Select bits
  2411                           ;	WDTCWS = 0x7, unprogrammed default
  2412                           ;	WDT input clock selector
  2413                           ;	WDTCCS = 0x7, unprogrammed default
  2414   300005                     	org	3145733
  2415   300005  FF                 	db	255
  2416                           
  2417                           ;Config register CONFIG4L @ 0x300006
  2418                           ;	unspecified, using default values
  2419                           ;	Write Protection Block 0
  2420                           ;	WRT0 = 0x1, unprogrammed default
  2421                           ;	Write Protection Block 1
  2422                           ;	WRT1 = 0x1, unprogrammed default
  2423                           ;	Write Protection Block 2
  2424                           ;	WRT2 = 0x1, unprogrammed default
  2425                           ;	Write Protection Block 3
  2426                           ;	WRT3 = 0x1, unprogrammed default
  2427                           ;	Write Protection Block 3
  2428                           ;	WRT4 = 0x1, unprogrammed default
  2429                           ;	Write Protection Block 3
  2430                           ;	WRT5 = 0x1, unprogrammed default
  2431                           ;	Write Protection Block 3
  2432                           ;	WRT6 = 0x1, unprogrammed default
  2433                           ;	Write Protection Block 3
  2434                           ;	WRT7 = 0x1, unprogrammed default
  2435   300006                     	org	3145734
  2436   300006  FF                 	db	255
  2437                           
  2438                           ;Config register CONFIG4H @ 0x300007
  2439                           ;	unspecified, using default values
  2440                           ;	Configuration Register Write Protection bit
  2441                           ;	WRTC = 0x1, unprogrammed default
  2442                           ;	Boot Block Write Protection bit
  2443                           ;	WRTB = 0x1, unprogrammed default
  2444                           ;	Data EEPROM Write Protection bit
  2445                           ;	WRTD = 0x1, unprogrammed default
  2446                           ;	Scanner Enable bit
  2447                           ;	SCANE = 0x1, unprogrammed default
  2448                           ;	Low Voltage Programming Enable bit
  2449                           ;	LVP = 0x1, unprogrammed default
  2450   300007                     	org	3145735
  2451   300007  FF                 	db	255
  2452                           
  2453                           ;Config register CONFIG5L @ 0x300008
  2454                           ;	unspecified, using default values
  2455                           ;	UserNVM Program Memory Code Protection bit
  2456                           ;	CP = 0x1, unprogrammed default
  2457                           ;	DataNVM Memory Code Protection bit
  2458                           ;	CPD = 0x1, unprogrammed default
  2459   300008                     	org	3145736
  2460   300008  FF                 	db	255
  2461                           
  2462                           ;Config register CONFIG5H @ 0x300009
  2463                           ;	unspecified, using default values
  2464   300009                     	org	3145737
  2465   300009  FF                 	db	255
  2466                           
  2467                           ;Config register CONFIG6L @ 0x30000A
  2468                           ;	unspecified, using default values
  2469                           ;	Table Read Protection Block 0
  2470                           ;	EBTR0 = 0x1, unprogrammed default
  2471                           ;	Table Read Protection Block 1
  2472                           ;	EBTR1 = 0x1, unprogrammed default
  2473                           ;	Table Read Protection Block 2
  2474                           ;	EBTR2 = 0x1, unprogrammed default
  2475                           ;	Table Read Protection Block 3
  2476                           ;	EBTR3 = 0x1, unprogrammed default
  2477                           ;	Table Read Protection Block 4
  2478                           ;	EBTR4 = 0x1, unprogrammed default
  2479                           ;	Table Read Protection Block 5
  2480                           ;	EBTR5 = 0x1, unprogrammed default
  2481                           ;	Table Read Protection Block 6
  2482                           ;	EBTR6 = 0x1, unprogrammed default
  2483                           ;	Table Read Protection Block 7
  2484                           ;	EBTR7 = 0x1, unprogrammed default
  2485   30000A                     	org	3145738
  2486   30000A  FF                 	db	255
  2487                           
  2488                           ;Config register CONFIG6H @ 0x30000B
  2489                           ;	unspecified, using default values
  2490                           ;	Boot Block Table Read Protection bit
  2491                           ;	EBTRB = 0x1, unprogrammed default
  2492   30000B                     	org	3145739
  2493   30000B  FF                 	db	255
  2494                           tosu	equ	0xFFF
  2495                           tosh	equ	0xFFE
  2496                           tosl	equ	0xFFD
  2497                           stkptr	equ	0xFFC
  2498                           pclatu	equ	0xFFB
  2499                           pclath	equ	0xFFA
  2500                           pcl	equ	0xFF9
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           indf0	equ	0xFEF
  2508                           postinc0	equ	0xFEE
  2509                           postdec0	equ	0xFED
  2510                           preinc0	equ	0xFEC
  2511                           plusw0	equ	0xFEB
  2512                           fsr0h	equ	0xFEA
  2513                           fsr0l	equ	0xFE9
  2514                           wreg	equ	0xFE8
  2515                           indf1	equ	0xFE7
  2516                           postinc1	equ	0xFE6
  2517                           postdec1	equ	0xFE5
  2518                           preinc1	equ	0xFE4
  2519                           plusw1	equ	0xFE3
  2520                           fsr1h	equ	0xFE2
  2521                           fsr1l	equ	0xFE1
  2522                           bsr	equ	0xFE0
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           preinc2	equ	0xFDC
  2527                           plusw2	equ	0xFDB
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      74
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    respond_to_card@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    respond_to_card@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    determine_card@master_closeness	PTR unsigned char  size(2) Largest target is 9
		 -> main@master_closeness(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S523DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S523DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_respond_to_card
    _respond_to_card->_turnLeft45
    _respond_to_card->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                82    82      0   12437
                                             34 COMRAM    31    31      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                   _color_click_init
                     _determine_card
                    _initDCmotorsPWM
                    _respond_to_card
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _respond_to_card                                      7     3      4    9393
                                             27 COMRAM     7     3      4
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (2) _turnRight45                                          8     4      4    3267
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft45                                           8     4      4    2659
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    2721
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    1981
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _determine_card                                       6     4      2     302
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _determine_card
   _initDCmotorsPWM
   _respond_to_card
     _stop
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft45
       _setMotorPWM
     _turnRight45
       _setMotorPWM
   _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      53        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      4A       1       77.9%
BITBIGSFRllhhhh     52      0       0      40        0.0%
BITBIGSFRllllh      4B      0       0      50        0.0%
BITBIGSFRllhhhl     46      0       0      42        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRllhhhl     2D      0       0      44        0.0%
BITBIGSFRlllll      2D      0       0      51        0.0%
BITBIGSFRllhhhl     1E      0       0      45        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhl      11      0       0      46        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRlllhl       5      0       0      49        0.0%
BITBIGSFRlllhh       3      0       0      48        0.0%
BITBIGSFRllhhhh      2      0       0      39        0.0%
BITBIGSFRllhhhl      2      0       0      41        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRllhhhh      1      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhl      1      0       0      43        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRllhl        1      0       0      47        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      52        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 30 01:28:24 2022

                            l22 F806                              l19 F8FA                              l83 FE6C  
                            l76 FA52                              l92 FADC                              l97 FC36  
                            u10 F886                              u11 F882                              u20 F89C  
                            u21 F898             ___wmul@multiplicand 0003               ??_respond_to_card 0020  
                           l102 FB88                             l142 F876                             l223 F828  
                           l145 F89C                             l241 F956                             l154 F7DA  
                           l250 FEEE                             l139 F8C6                             l148 F7D0  
                           l157 F7E6                             l245 FE74                             l247 FE7A  
                           l256 FFFE                             l249 FEE8                             l259 F84E  
                           l750 F9C2                             l932 F876                             l757 F9CA  
                           l934 F886                             l970 F7E2                             l964 F7C8  
                           l972 F7D2                             l966 F7CC                             l974 F7D6  
                           l992 F89E                             l968 F7DE                             l994 F8A8  
                           l996 F8AE                             l998 F8B0                             u200 F990  
                           u201 F98C                             u210 F9AC                             u211 F9A8  
                           u220 FD1E                             u221 FD1A                             u230 FDE8  
                           u231 FDE4                             u240 FA98                             u241 FA94  
                           u321 FCB2                             u250 FADC                             u251 FAD8  
                           u260 FC1E                             u261 FC1A                             u190 F972  
                           u270 FB72                             u407 F8DC                             u191 F96E  
                           u271 FB6E                             u280 F92E                             u281 F92A  
                           u337 FCEC                             u290 F954                             u291 F950  
                           u347 FB28                             u357 FB7C                             u367 FBD4  
                           u377 FC28                             u387 FA6A                             u397 FAAE  
                           wreg 000FE8                            l1000 F8B2                            l1002 F8B4  
                          l1100 F808                            l1300 F982                            l1310 F9B6  
                          l1302 F990                            l1400 F8E6                            l1080 F9D4  
                          l1312 F9BC                            l1304 F996                            l1320 FD86  
                          l1330 F7EA                            l1402 F8F0                            l1090 FA38  
                          l1082 F9FE                            l1306 F9AC                            l1322 FD8A  
                          l1314 FD02                            l1420 F942                            l1404 F8FC  
                          l1092 FA3A                            l1084 FA22                            l1308 F9B4  
                          l1324 FDCC                            l1316 FD1E                            l1340 FA80  
                          l1332 FA54                            l1500 FC6E                            l1422 F944  
                          l1414 F910                            l1406 F900                            l1094 FA44  
                          l1086 FA2C                            l1078 F9CC                            l1326 FDE8  
                          l1318 FD72                            l1342 FA9C                            l1334 FA58  
                          l1350 FB8A                            l1430 FE80                            l1510 FC9C  
                          l1502 FC72                            l1424 F954                            l1416 F92E  
                          l1408 F90C                            l1096 FA46                            l1088 FA2E  
                          l1328 FE2C                            l1344 FAA8                            l1336 FA64  
                          l1360 FBCA                            l1352 FBAA                            l1432 FEF4  
                          l1520 FCBA                            l1512 FCA8                            l1504 FC76  
                          l1418 F93E                            l1098 FA50                            l1346 FAB8  
                          l1338 FA74                            l1370 FC1E                            l1362 FBE2  
                          l1434 FF48                            l1530 FCE2                            l1522 FCBA  
                          l1514 FCA8                            l1506 FC8A                            l1292 F958  
                          l1348 FAC4                            l1364 FBEE                            l1380 FB06  
                          l1372 FADE                            l1428 FE70                            l1524 FCC8  
                          l1516 FCBA                            l1508 FC90                            l1294 F960  
                          l1286 F82A                            l1366 FBFA                            l1358 FBB2  
                          l1390 FB56                            l1382 FB1E                            l1374 FAFE  
                          l1438 FF9C                            l1526 FCCA                            l1518 FCBA  
                          l1296 F972                            l1288 F846                            l1368 FC02  
                          l1392 FB72                            l1384 FB36                            l1552 FFB0  
                          l1528 FCCC                            l1480 FC3C                            l1394 F8C8  
                          l1298 F97A                            l1386 FB42                            l1490 FC50  
                          l1482 FC40                            l1396 F8CC                            l1388 FB4E  
                          l1492 FC54                            l1484 FC44                            l1398 F8D6  
                          l1494 FC58                            l1486 FC48                            l1478 FC38  
                          l1496 FC60                            l1488 FC4C                            l1498 FC68  
                  ?_LEDSon_init 0001                            _T2PR 000FBC                            _main FC38  
                          fsr2h 000FDA                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            _stop FA54                            prodh 000FF4  
                          prodl 000FF3                            start 0000                    ___param_bank 000000  
                   _turnRight45 FADE                           ?_main 0001                           ?_stop 0014  
               __end_of___lwdiv F9CC      __end_of_I2C_2_Master_Start F7D2      __end_of_I2C_2_Master_Write F7E8  
determine_card@master_closeness 0001                           tablat 000FF5                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8                 __initialization F850  
                  __end_of_main FD02                    __end_of_stop FADE                          ??_main 0023  
                        ??_stop 0018                   __activetblptr 000003                    ?_setMotorPWM 000E  
                        _CCPR1H 000FAA                          _CCPR2H 000FA6                          _CCPR3H 000F25  
                        _CCPR4H 000F21                          _RE2PPS 000E74                          _RD5PPS 000E6F  
                        _RC7PPS 000E69                          _RD6PPS 000E70                          _RE4PPS 000E76  
                        _RG6PPS 000E88        __end_of_color_click_init F8FC                    _CCPTMRS0bits 000FAD  
                        ___wmul F82A                       ??___lwdiv 000B                          isa$std 000001  
                  __pdataCOMRAM 0042                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                          stop@mL 0014                          stop@mR 0016  
             ??_initDCmotorsPWM 0001                      __accesstop 0060         __end_of__initialization F870  
                 ___rparam_used 000001                 _respond_to_card FE6E                  __pcstackCOMRAM 0001  
             _color_writetoaddr F7E8                    _T2CLKCONbits 000FBF              ?_color_writetoaddr 0003  
                       ?___wmul 0001                    ?_turnRight45 0014             ??_color_writetoaddr 0004  
                       _SSP2ADD 000ED6                         _SSP2BUF 000ED5         __end_of_respond_to_card 0000  
        color_writetoaddr@value 0003  determine_card@predicted_colour 0004       __end_of_color_writetoaddr F808  
             respond_to_card@mL 001C               respond_to_card@mR 001E              _I2C_2_Master_Start F7C8  
            _I2C_2_Master_Write F7DC                         __Hparam 0000                         __Lparam 0000  
           ?_I2C_2_Master_Start 0001                         ___lwdiv F958             ?_I2C_2_Master_Write 0001  
                  turnLeft45@mL 0014                    turnLeft45@mR 0016                         __pcinit F850  
                       __ramtop 0E00                         __ptext0 FC38                         __ptext1 FE6E  
                       __ptext2 FADE                         __ptext3 FB8A                         __ptext4 FA54  
                       __ptext5 FD02                         __ptext6 F82A                         __ptext7 F958  
                       __ptext8 F9CC                         __ptext9 F8FC                       _T2CONbits 000FBD  
                     _T2HLTbits 000FBE            ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002  
          end_of_initialization F870               ?_color_click_init 0001                    turnRight45@i 001A  
            ??_color_click_init 0005                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                      main@F14288 0042  
               _initDCmotorsPWM F9CC              setMotorPWM@negDuty 0013                       _TRISAbits 000F81  
            setMotorPWM@posDuty 0012                       _TRISCbits 000F83                       _TRISDbits 000F84  
                     _TRISEbits 000F85                       _TRISFbits 000F86                       _TRISGbits 000F87  
                     _TRISHbits 000F88        color_writetoaddr@address 0004                ?_respond_to_card 001C  
                   _CCP1CONbits 000FAB                     _CCP2CONbits 000FA7                     _CCP3CONbits 000F26  
                   _CCP4CONbits 000F22                      main@motorL 0030                      main@motorR 0039  
                    _turnLeft45 FB8A            main@master_closeness 0025                  __end_of___wmul F850  
                 __pidataCOMRAM F7BF                 determine_card@i 0006             start_initialization F850  
           respond_to_card@card 0022                   ??_LEDSon_init 0001         __end_of_initDCmotorsPWM FA54  
                      ??___wmul 0005                  _determine_card F8FC             __end_of_LEDSon_init F82A  
              ___lwdiv@dividend 0007                     ?_turnLeft45 0014          __end_of_determine_card F958  
                      ?___lwdiv 0007               _I2C_2_Master_Idle F876               _I2C_2_Master_Init F89E  
             _I2C_2_Master_Stop F7D2              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
                 ??_setMotorPWM 0010              ?_I2C_2_Master_Stop 0001                ___lwdiv@quotient 000B  
                   turnLeft45@i 001A             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
                ___wmul@product 0005                        _LATAbits 000F79             ??_I2C_2_Master_Stop 0002  
                      _LATDbits 000F7C                        _LATFbits 000F7E                        _LATGbits 000F7F  
                      _LATHbits 000F80                ?_initDCmotorsPWM 0001                        _SSP2CON2 000EDA  
                      _SSP2STAT 000ED8                 ?_determine_card 0001       __end_of_I2C_2_Master_Idle F89E  
     __end_of_I2C_2_Master_Init F8C8               ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop F7DC  
                  setMotorPWM@m 000E     I2C_2_Master_Write@data_byte 0002                       copy_data0 F864  
                   _LEDSon_init F808             __end_of_setMotorPWM FE6E                        __Hrparam 0000  
                      __Lrparam 0000                      _ANSELDbits 000EA7                 ___lwdiv@divisor 0009  
               ___lwdiv@counter 000D                        __ptext10 F8C8                        __ptext11 F7E8  
                      __ptext12 F7DC                        __ptext13 F7D2                        __ptext14 F7C8  
                      __ptext15 F876                        __ptext16 F89E                        __ptext17 F808  
                  _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA                        isa$xinst 000000  
                 ??_turnRight45 0018                        main@card 002E                     _setMotorPWM FD02  
                 turnRight45@mL 0014                   turnRight45@mR 0016                    ??_turnLeft45 0018  
determine_card@current_smallest 0005                _color_click_init F8C8                      _SSP2DATPPS 000E1D  
                    _SSP2CLKPPS 000E1C             __end_of_turnRight45 FB8A              __end_of_turnLeft45 FC38  
              ??_determine_card 0003                    main@PWMcycle 002F  
