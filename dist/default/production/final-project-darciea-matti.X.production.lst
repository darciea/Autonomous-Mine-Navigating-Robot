

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 21:21:06 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Version 2.35
    75                           ; Generated 05/05/2021 GMT
    76                           ; 
    77                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F67K40 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000000                     _TRISBbits	set	3970
   110   000000                     _TX4REG	set	3812
   111   000000                     _RC4STAbits	set	3815
   112   000000                     _SP4BRGH	set	3814
   113   000000                     _LATHbits	set	3968
   114   000000                     _LATGbits	set	3967
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISDbits	set	3972
   117   000000                     _TRISGbits	set	3975
   118   000000                     _SSP2CON2bits	set	3802
   119   000000                     _INT1PPS	set	3569
   120   000000                     _RX4PPS	set	3605
   121   000000                     _SSP2CLKPPS	set	3612
   122   000000                     _SSP2DATPPS	set	3613
   123   000000                     _RC7PPS	set	3689
   124   000000                     _RE2PPS	set	3700
   125   000000                     _TRISCbits	set	3971
   126   000000                     _TRISEbits	set	3973
   127   000000                     _TRISHbits	set	3976
   128   000000                     _PORTFbits	set	3982
   129   000000                     _T2PR	set	4028
   130   000000                     _T2CONbits	set	4029
   131   000000                     _CCPR2H	set	4006
   132   000000                     _CCPR1H	set	4010
   133   000000                     _RE4PPS	set	3702
   134   000000                     _RG6PPS	set	3720
   135   000000                     _RD5PPS	set	3695
   136   000000                     _ANSELBbits	set	3738
   137   000000                     _ANSELDbits	set	3751
   138   000000                     _SSP2ADD	set	3798
   139   000000                     _SSP2CON1bits	set	3801
   140   000000                     _CCPR4H	set	3873
   141   000000                     _CCPR3H	set	3877
   142   000000                     _INTCONbits	set	4082
   143   000000                     _T2CLKCONbits	set	4031
   144   000000                     _T2HLTbits	set	4030
   145   000000                     _CCP1CONbits	set	4011
   146   000000                     _CCPTMRS0bits	set	4013
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _LATAbits	set	3961
   149   000000                     _LATDbits	set	3964
   150   000000                     _CCP3CONbits	set	3878
   151   000000                     _CCP4CONbits	set	3874
   152   000000                     _RC4REG	set	3811
   153   000000                     _SP4BRGL	set	3813
   154   000000                     _TX4STAbits	set	3816
   155   000000                     _BAUD4CONbits	set	3817
   156   000000                     _SSP2CON2	set	3802
   157   000000                     _SSP2STAT	set	3800
   158   000000                     _ANSELFbits	set	3764
   159   000000                     _SSP2BUF	set	3797
   160   000000                     _IPR0bits	set	3615
   161   000000                     _PIE0bits	set	3625
   162   000000                     _PIE4bits	set	3629
   163   000000                     _PIR4bits	set	3639
   164   000000                     _RC0PPS	set	3682
   165   000000                     _RD6PPS	set	3696
   166   000000                     _LATFbits	set	3966
   167   000000                     _TRISAbits	set	3969
   168   000000                     _PIR0bits	set	3635
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01                     STR_1:
   175                           
   176                           ; BSR set to: 14
   177   000E01  0A                 	db	10
   178   000E02  20                 	db	32
   179   000E03  45                 	db	69	;'E'
   180   000E04  58                 	db	88	;'X'
   181   000E05  50                 	db	80	;'P'
   182   000E06  45                 	db	69	;'E'
   183   000E07  43                 	db	67	;'C'
   184   000E08  54                 	db	84	;'T'
   185   000E09  45                 	db	69	;'E'
   186   000E0A  44                 	db	68	;'D'
   187   000E0B  3A                 	db	58	;':'
   188   000E0C  20                 	db	32
   189   000E0D  43                 	db	67	;'C'
   190   000E0E  6C                 	db	108	;'l'
   191   000E0F  65                 	db	101	;'e'
   192   000E10  61                 	db	97	;'a'
   193   000E11  72                 	db	114	;'r'
   194   000E12  20                 	db	32
   195   000E13  25                 	db	37
   196   000E14  64                 	db	100	;'d'
   197   000E15  2C                 	db	44
   198   000E16  52                 	db	82	;'R'
   199   000E17  20                 	db	32
   200   000E18  25                 	db	37
   201   000E19  64                 	db	100	;'d'
   202   000E1A  2C                 	db	44
   203   000E1B  20                 	db	32
   204   000E1C  47                 	db	71	;'G'
   205   000E1D  20                 	db	32
   206   000E1E  25                 	db	37
   207   000E1F  64                 	db	100	;'d'
   208   000E20  2C                 	db	44
   209   000E21  20                 	db	32
   210   000E22  42                 	db	66	;'B'
   211   000E23  20                 	db	32
   212   000E24  25                 	db	37
   213   000E25  64                 	db	100	;'d'
   214   000E26  20                 	db	32
   215   000E27  20                 	db	32
   216   000E28  43                 	db	67	;'C'
   217   000E29  41                 	db	65	;'A'
   218   000E2A  52                 	db	82	;'R'
   219   000E2B  44                 	db	68	;'D'
   220   000E2C  3A                 	db	58	;':'
   221   000E2D  20                 	db	32
   222   000E2E  25                 	db	37
   223   000E2F  64                 	db	100	;'d'
   224   000E30  20                 	db	32
   225   000E31  0A                 	db	10
   226   000E32  00                 	db	0
   227   000E33                     STR_3:
   228                           
   229                           ; BSR set to: 14
   230   000E33  0A                 	db	10
   231   000E34  20                 	db	32
   232   000E35  41                 	db	65	;'A'
   233   000E36  56                 	db	86	;'V'
   234   000E37  47                 	db	71	;'G'
   235   000E38  3A                 	db	58	;':'
   236   000E39  20                 	db	32
   237   000E3A  43                 	db	67	;'C'
   238   000E3B  6C                 	db	108	;'l'
   239   000E3C  65                 	db	101	;'e'
   240   000E3D  61                 	db	97	;'a'
   241   000E3E  72                 	db	114	;'r'
   242   000E3F  20                 	db	32
   243   000E40  25                 	db	37
   244   000E41  64                 	db	100	;'d'
   245   000E42  2C                 	db	44
   246   000E43  20                 	db	32
   247   000E44  52                 	db	82	;'R'
   248   000E45  20                 	db	32
   249   000E46  25                 	db	37
   250   000E47  64                 	db	100	;'d'
   251   000E48  2C                 	db	44
   252   000E49  20                 	db	32
   253   000E4A  47                 	db	71	;'G'
   254   000E4B  20                 	db	32
   255   000E4C  25                 	db	37
   256   000E4D  64                 	db	100	;'d'
   257   000E4E  2C                 	db	44
   258   000E4F  20                 	db	32
   259   000E50  42                 	db	66	;'B'
   260   000E51  20                 	db	32
   261   000E52  25                 	db	37
   262   000E53  64                 	db	100	;'d'
   263   000E54  20                 	db	32
   264   000E55  0A                 	db	10
   265   000E56  00                 	db	0
   266   000E57                     STR_2:
   267                           
   268                           ; BSR set to: 14
   269   000E57  0A                 	db	10
   270   000E58  20                 	db	32
   271   000E59  45                 	db	69	;'E'
   272   000E5A  78                 	db	120	;'x'
   273   000E5B  70                 	db	112	;'p'
   274   000E5C  65                 	db	101	;'e'
   275   000E5D  63                 	db	99	;'c'
   276   000E5E  74                 	db	116	;'t'
   277   000E5F  65                 	db	101	;'e'
   278   000E60  64                 	db	100	;'d'
   279   000E61  20                 	db	32
   280   000E62  63                 	db	99	;'c'
   281   000E63  6C                 	db	108	;'l'
   282   000E64  65                 	db	101	;'e'
   283   000E65  61                 	db	97	;'a'
   284   000E66  72                 	db	114	;'r'
   285   000E67  3A                 	db	58	;':'
   286   000E68  20                 	db	32
   287   000E69  25                 	db	37
   288   000E6A  64                 	db	100	;'d'
   289   000E6B  20                 	db	32
   290   000E6C  0A                 	db	10
   291   000E6D  00                 	db	0
   292   000E6E                     STR_4:
   293                           
   294                           ; BSR set to: 14
   295   000E6E  43                 	db	67	;'C'
   296   000E6F  41                 	db	65	;'A'
   297   000E70  52                 	db	82	;'R'
   298   000E71  44                 	db	68	;'D'
   299   000E72  20                 	db	32
   300   000E73  25                 	db	37
   301   000E74  64                 	db	100	;'d'
   302   000E75  20                 	db	32
   303   000E76  0A                 	db	10
   304   000E77  00                 	db	0
   305   000E78  00                 	db	0	; dummy byte at the end
   306   000000                     
   307                           ; #config settings
   308                           
   309                           	psect	cinit
   310   003082                     __pcinit:
   311                           	callstack 0
   312   003082                     start_initialization:
   313                           	callstack 0
   314   003082                     __initialization:
   315                           	callstack 0
   316                           
   317                           ; Clear objects allocated to BANK2 (112 bytes)
   318   003082  EE02  F000         	lfsr	0,__pbssBANK2
   319   003086  0E70               	movlw	112
   320   003088                     clear_0:
   321   003088  6AEE               	clrf	postinc0,c
   322   00308A  06E8               	decf	wreg,f,c
   323   00308C  E1FD               	bnz	clear_0
   324                           
   325                           ; Clear objects allocated to BANK0 (9 bytes)
   326   00308E  EE00  F0EC         	lfsr	0,__pbssBANK0
   327   003092  0E09               	movlw	9
   328   003094                     clear_1:
   329   003094  6AEE               	clrf	postinc0,c
   330   003096  06E8               	decf	wreg,f,c
   331   003098  E1FD               	bnz	clear_1
   332                           
   333                           ; Clear objects allocated to COMRAM (4 bytes)
   334   00309A  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   335   00309C  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   336   00309E  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   337   0030A0  6A57               	clrf	__pbssCOMRAM& (0+255),c
   338   0030A2                     end_of_initialization:
   339                           	callstack 0
   340   0030A2                     __end_of__initialization:
   341                           	callstack 0
   342   0030A2  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   343   0030A4  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   344   0030A6  0100               	movlb	0
   345   0030A8  EF39  F009         	goto	_main	;jump to C main() function
   346                           
   347                           	psect	bssCOMRAM
   348   000057                     __pbssCOMRAM:
   349                           	callstack 0
   350   000057                     _TxBufReadCnt:
   351                           	callstack 0
   352   000057                     	ds	1
   353   000058                     _TxBufWriteCnt:
   354                           	callstack 0
   355   000058                     	ds	1
   356   000059                     _RxBufReadCnt:
   357                           	callstack 0
   358   000059                     	ds	1
   359   00005A                     _RxBufWriteCnt:
   360                           	callstack 0
   361   00005A                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364   0000EC                     __pbssBANK0:
   365                           	callstack 0
   366   0000EC                     _width:
   367                           	callstack 0
   368   0000EC                     	ds	2
   369   0000EE                     _prec:
   370                           	callstack 0
   371   0000EE                     	ds	2
   372   0000F0                     _card_detected:
   373                           	callstack 0
   374   0000F0                     	ds	2
   375   0000F2                     _response_in_progress:
   376                           	callstack 0
   377   0000F2                     	ds	2
   378   0000F4                     _flags:
   379                           	callstack 0
   380   0000F4                     	ds	1
   381                           
   382                           	psect	bssBANK2
   383   000200                     __pbssBANK2:
   384                           	callstack 0
   385   000200                     _EUSART4TXbuf:
   386                           	callstack 0
   387   000200                     	ds	60
   388   00023C                     _EUSART4RXbuf:
   389                           	callstack 0
   390   00023C                     	ds	20
   391   000250                     _dbuf:
   392                           	callstack 0
   393   000250                     	ds	32
   394                           
   395                           	psect	cstackBANK1
   396   000100                     __pcstackBANK1:
   397                           	callstack 0
   398   000100                     main@buf:
   399                           	callstack 0
   400                           
   401                           ; 150 bytes @ 0x0
   402   000100                     	ds	150
   403   000196                     main@expected_values:
   404                           	callstack 0
   405                           
   406                           ; 72 bytes @ 0x96
   407   000196                     	ds	72
   408   0001DE                     main@PWMcycle:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xDE
   412   0001DE                     	ds	1
   413   0001DF                     main@clear_read_check:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0xDF
   417   0001DF                     	ds	2
   418   0001E1                     main@red_read:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0xE1
   422   0001E1                     	ds	2
   423   0001E3                     main@green_read:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xE3
   427   0001E3                     	ds	2
   428   0001E5                     main@blue_read:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xE5
   432   0001E5                     	ds	2
   433   0001E7                     main@i:
   434                           	callstack 0
   435                           
   436                           ; 1 bytes @ 0xE7
   437   0001E7                     	ds	1
   438   0001E8                     main@clear_read:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0xE8
   442   0001E8                     	ds	2
   443   0001EA                     main@motorL:
   444                           	callstack 0
   445                           
   446                           ; 9 bytes @ 0xEA
   447   0001EA                     	ds	9
   448   0001F3                     main@motorR:
   449                           	callstack 0
   450                           
   451                           ; 9 bytes @ 0xF3
   452   0001F3                     	ds	9
   453                           
   454                           	psect	cstackBANK0
   455   000060                     __pcstackBANK0:
   456                           	callstack 0
   457   000060                     ?_vfprintf:
   458                           	callstack 0
   459   000060                     vfprintf@fp:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463   000060                     	ds	2
   464   000062                     vfprintf@fmt:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x2
   468   000062                     	ds	2
   469   000064                     vfprintf@ap:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473   000064                     	ds	2
   474   000066                     ?_sprintf:
   475                           	callstack 0
   476   000066                     sprintf@s:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x6
   480   000066                     	ds	2
   481   000068                     sprintf@fmt:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x8
   485   000068                     	ds	10
   486   000072                     sprintf@ap:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x12
   490   000072                     	ds	2
   491   000074                     sprintf@f:
   492                           	callstack 0
   493                           
   494                           ; 11 bytes @ 0x14
   495   000074                     	ds	11
   496   00007F                     clear_read_calibration@buf:
   497                           	callstack 0
   498   00007F                     card_response@buf:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x1F
   502   00007F                     	ds	2
   503   000081                     clear_read_calibration@clear_read:
   504                           	callstack 0
   505   000081                     card_response@clear_read:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x21
   509   000081                     	ds	2
   510   000083                     clear_read_calibration@clear_read_check:
   511                           	callstack 0
   512   000083                     card_response@red_read:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x23
   516   000083                     	ds	2
   517   000085                     ??_clear_read_calibration:
   518   000085                     card_response@green_read:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x25
   522   000085                     	ds	2
   523   000087                     card_response@blue_read:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x27
   527   000087                     	ds	2
   528   000089                     clear_read_calibration@i:
   529                           	callstack 0
   530   000089                     card_response@expected_values:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x29
   534   000089                     	ds	2
   535   00008B                     clear_read_calibration@i_1589:
   536                           	callstack 0
   537   00008B                     card_response@mL:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x2B
   541   00008B                     	ds	2
   542   00008D                     card_response@mR:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x2D
   546   00008D                     	ds	2
   547   00008F                     card_response@normalised_values:
   548                           	callstack 0
   549                           
   550                           ; 72 bytes @ 0x2F
   551   00008F                     	ds	72
   552   0000D7                     card_response@master_closeness:
   553                           	callstack 0
   554                           
   555                           ; 18 bytes @ 0x77
   556   0000D7                     	ds	18
   557   0000E9                     card_response@card:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x89
   561   0000E9                     	ds	1
   562   0000EA                     ??_main:
   563                           
   564                           ; 1 bytes @ 0x8A
   565   0000EA                     	ds	2
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     
   572                           ; 1 bytes @ 0x0
   573   000001                     	ds	1
   574   000002                     i2I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576                           
   577                           ; 1 bytes @ 0x1
   578   000002                     	ds	1
   579   000003                     ??_HighISR:
   580   000003                     
   581                           ; 1 bytes @ 0x2
   582   000003                     	ds	2
   583   000005                     ??_I2C_2_Master_Idle:
   584   000005                     ?___wmul:
   585                           	callstack 0
   586   000005                     ?___aodiv:
   587                           	callstack 0
   588   000005                     ?___aomod:
   589                           	callstack 0
   590   000005                     sendCharSerial4@charToSend:
   591                           	callstack 0
   592   000005                     make_master_closeness@buf:
   593                           	callstack 0
   594   000005                     determine_card@master_closeness:
   595                           	callstack 0
   596   000005                     ___wmul@multiplier:
   597                           	callstack 0
   598   000005                     fputc@c:
   599                           	callstack 0
   600   000005                     ___aodiv@dividend:
   601                           	callstack 0
   602   000005                     ___aomod@dividend:
   603                           	callstack 0
   604                           
   605                           ; 8 bytes @ 0x4
   606   000005                     	ds	1
   607   000006                     ??_I2C_2_Master_Read:
   608   000006                     I2C_2_Master_Write@data_byte:
   609                           	callstack 0
   610   000006                     sendStringSerial4@string:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x5
   614   000006                     	ds	1
   615   000007                     ??_determine_card:
   616   000007                     color_writetoaddr@value:
   617                           	callstack 0
   618   000007                     I2C_2_Master_Read@ack:
   619                           	callstack 0
   620   000007                     make_master_closeness@normalised_values:
   621                           	callstack 0
   622   000007                     ___wmul@multiplicand:
   623                           	callstack 0
   624   000007                     fputc@fp:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x6
   628   000007                     	ds	1
   629   000008                     color_writetoaddr@address:
   630                           	callstack 0
   631   000008                     I2C_2_Master_Read@tmp:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x7
   635   000008                     	ds	1
   636   000009                     ??_fputc:
   637   000009                     ??_color_click_init:
   638   000009                     ?_color_read_Red:
   639                           	callstack 0
   640   000009                     ?_color_read_Green:
   641                           	callstack 0
   642   000009                     ?_color_read_Blue:
   643                           	callstack 0
   644   000009                     ?_color_read_Clear:
   645                           	callstack 0
   646   000009                     make_master_closeness@master_closeness:
   647                           	callstack 0
   648   000009                     set_interrupt_threshold@AILT:
   649                           	callstack 0
   650   000009                     ___wmul@product:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654   000009                     	ds	2
   655   00000B                     ??_color_read_Red:
   656   00000B                     ??_color_read_Green:
   657   00000B                     ??_color_read_Blue:
   658   00000B                     ??_color_read_Clear:
   659   00000B                     ??_make_master_closeness:
   660   00000B                     ?___lwdiv:
   661                           	callstack 0
   662   00000B                     determine_card@current_smallest:
   663                           	callstack 0
   664   00000B                     set_interrupt_threshold@AIHT:
   665                           	callstack 0
   666   00000B                     ___lwdiv@dividend:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0xA
   670   00000B                     	ds	2
   671   00000D                     determine_card@predicted_colour:
   672                           	callstack 0
   673   00000D                     set_interrupt_threshold@persistence:
   674                           	callstack 0
   675   00000D                     ___lwdiv@divisor:
   676                           	callstack 0
   677   00000D                     ___aodiv@divisor:
   678                           	callstack 0
   679   00000D                     ___aomod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 8 bytes @ 0xC
   683   00000D                     	ds	1
   684   00000E                     determine_card@i:
   685                           	callstack 0
   686   00000E                     color_read_Red@tmp:
   687                           	callstack 0
   688   00000E                     color_read_Green@tmp:
   689                           	callstack 0
   690   00000E                     color_read_Blue@tmp:
   691                           	callstack 0
   692   00000E                     color_read_Clear@tmp:
   693                           	callstack 0
   694   00000E                     fputs@s:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0xD
   698   00000E                     	ds	1
   699   00000F                     _set_interrupt_threshold$2091:
   700                           	callstack 0
   701   00000F                     ___lwdiv@quotient:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0xE
   705   00000F                     	ds	1
   706   000010                     _set_interrupt_threshold$2092:
   707                           	callstack 0
   708   000010                     collect_avg_readings@clear_read:
   709                           	callstack 0
   710   000010                     fputs@fp:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0xF
   714   000010                     	ds	1
   715   000011                     ___lwdiv@counter:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x10
   719   000011                     	ds	1
   720   000012                     fputs@c:
   721                           	callstack 0
   722   000012                     setMotorPWM@m:
   723                           	callstack 0
   724   000012                     collect_avg_readings@red_read:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x11
   728   000012                     	ds	1
   729   000013                     fputs@i:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x12
   733   000013                     	ds	1
   734   000014                     ??_setMotorPWM:
   735   000014                     collect_avg_readings@green_read:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x13
   739   000014                     	ds	1
   740   000015                     ___aodiv@counter:
   741                           	callstack 0
   742   000015                     ___aomod@counter:
   743                           	callstack 0
   744   000015                     pad@fp:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x14
   748   000015                     	ds	1
   749   000016                     setMotorPWM@posDuty:
   750                           	callstack 0
   751   000016                     ___aodiv@sign:
   752                           	callstack 0
   753   000016                     ___aomod@sign:
   754                           	callstack 0
   755   000016                     collect_avg_readings@blue_read:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x15
   759   000016                     	ds	1
   760   000017                     ?_abs:
   761                           	callstack 0
   762   000017                     setMotorPWM@negDuty:
   763                           	callstack 0
   764   000017                     abs@a:
   765                           	callstack 0
   766   000017                     pad@buf:
   767                           	callstack 0
   768   000017                     ___aodiv@quotient:
   769                           	callstack 0
   770                           
   771                           ; 8 bytes @ 0x16
   772   000017                     	ds	1
   773   000018                     ??_collect_avg_readings:
   774   000018                     stop@mL:
   775                           	callstack 0
   776   000018                     turnLeft45@mL:
   777                           	callstack 0
   778   000018                     turnRight45@mL:
   779                           	callstack 0
   780   000018                     fullSpeedAhead@mL:
   781                           	callstack 0
   782   000018                     reverseFullSpeed@mL:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x17
   786   000018                     	ds	1
   787   000019                     ??_abs:
   788   000019                     pad@p:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x18
   792   000019                     	ds	1
   793   00001A                     stop@mR:
   794                           	callstack 0
   795   00001A                     turnLeft45@mR:
   796                           	callstack 0
   797   00001A                     turnRight45@mR:
   798                           	callstack 0
   799   00001A                     fullSpeedAhead@mR:
   800                           	callstack 0
   801   00001A                     reverseFullSpeed@mR:
   802                           	callstack 0
   803   00001A                     collect_avg_readings@i:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x19
   807   00001A                     	ds	1
   808   00001B                     ??_pad:
   809   00001B                     normalise_readings@buf:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x1A
   813   00001B                     	ds	1
   814   00001C                     ??_stop:
   815   00001C                     ??_turnLeft45:
   816   00001C                     ??_turnRight45:
   817   00001C                     ??_fullSpeedAhead:
   818   00001C                     ??_reverseFullSpeed:
   819   00001C                     collect_avg_readings@i_1600:
   820                           	callstack 0
   821   00001C                     pad@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x1B
   825   00001C                     	ds	1
   826   00001D                     fullSpeedAhead@i:
   827                           	callstack 0
   828   00001D                     reverseFullSpeed@i:
   829                           	callstack 0
   830   00001D                     normalise_readings@clear_read:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x1C
   834   00001D                     	ds	1
   835   00001E                     turnLeft45@i:
   836                           	callstack 0
   837   00001E                     turnRight45@i:
   838                           	callstack 0
   839   00001E                     collect_avg_readings@i_1601:
   840                           	callstack 0
   841   00001E                     pad@w:
   842                           	callstack 0
   843                           
   844                           ; 2 bytes @ 0x1D
   845   00001E                     	ds	1
   846   00001F                     normalise_readings@red_read:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x1E
   850   00001F                     	ds	1
   851   000020                     collect_avg_readings@i_1602:
   852                           	callstack 0
   853   000020                     motor_response@mL:
   854                           	callstack 0
   855   000020                     dtoa@fp:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x1F
   859   000020                     	ds	1
   860   000021                     normalise_readings@green_read:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x20
   864   000021                     	ds	1
   865   000022                     collect_avg_readings@i_1603:
   866                           	callstack 0
   867   000022                     motor_response@mR:
   868                           	callstack 0
   869   000022                     dtoa@d:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x21
   873   000022                     	ds	1
   874   000023                     normalise_readings@blue_read:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x22
   878   000023                     	ds	1
   879   000024                     ??_motor_response:
   880                           
   881                           ; 1 bytes @ 0x23
   882   000024                     	ds	1
   883   000025                     normalise_readings@expected_values:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x24
   887   000025                     	ds	1
   888   000026                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x25
   892   000026                     	ds	1
   893   000027                     normalise_readings@normalised_values:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ??_normalise_readings:
   899   000029                     make_master_closeness@i:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x28
   903   000029                     	ds	1
   904   00002A                     ??_dtoa:
   905                           
   906                           ; 1 bytes @ 0x29
   907   00002A                     	ds	7
   908   000031                     normalise_readings@difference:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x30
   912   000031                     	ds	1
   913   000032                     _dtoa$2610:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x31
   917   000032                     	ds	1
   918   000033                     normalise_readings@i:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x32
   922   000033                     	ds	1
   923   000034                     dtoa@p:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x33
   927   000034                     	ds	2
   928   000036                     dtoa@w:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x35
   932   000036                     	ds	2
   933   000038                     dtoa@n:
   934                           	callstack 0
   935                           
   936                           ; 8 bytes @ 0x37
   937   000038                     	ds	8
   938   000040                     dtoa@s:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x3F
   942   000040                     	ds	1
   943   000041                     dtoa@i:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x40
   947   000041                     	ds	2
   948   000043                     vfpfcnvrt@fp:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x42
   952   000043                     	ds	2
   953   000045                     vfpfcnvrt@fmt:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x44
   957   000045                     	ds	2
   958   000047                     vfpfcnvrt@ap:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x46
   962   000047                     	ds	2
   963   000049                     ??_vfpfcnvrt:
   964                           
   965                           ; 1 bytes @ 0x48
   966   000049                     	ds	2
   967   00004B                     vfpfcnvrt@convarg:
   968                           	callstack 0
   969                           
   970                           ; 8 bytes @ 0x4A
   971   00004B                     	ds	8
   972   000053                     vfpfcnvrt@cp:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x52
   976   000053                     	ds	2
   977   000055                     vfprintf@cfmt:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x54
   981   000055                     	ds	2
   982   000057                     
   983                           ; 1 bytes @ 0x56
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 21 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  i               1  231[BANK1 ] enum E14569
   994 ;;  buf           150    0[BANK1 ] unsigned char [150]
   995 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   996 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   997 ;;  expected_val   40    0        unsigned int [5][4]
   998 ;;  motorR          9  243[BANK1 ] struct DC_motor
   999 ;;  motorL          9  234[BANK1 ] struct DC_motor
  1000 ;;  clear_read      2  232[BANK1 ] unsigned int 
  1001 ;;  blue_read       2  229[BANK1 ] unsigned int 
  1002 ;;  green_read      2  227[BANK1 ] unsigned int 
  1003 ;;  red_read        2  225[BANK1 ] unsigned int 
  1004 ;;  clear_read_c    2  223[BANK1 ] unsigned int 
  1005 ;;  PWMcycle        1  222[BANK1 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;      Totals:         0       2     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1019 ;;Total ram usage:      254 bytes
  1020 ;; Hardware stack levels required when called: 13
  1021 ;; This function calls:
  1022 ;;		_I2C_2_Master_Init
  1023 ;;		_Interrupts_init
  1024 ;;		_LEDSon_init
  1025 ;;		_card_response
  1026 ;;		_clear_read_calibration
  1027 ;;		_collect_avg_readings
  1028 ;;		_color_click_init
  1029 ;;		_color_read_Clear
  1030 ;;		_fullSpeedAhead
  1031 ;;		_initDCmotorsPWM
  1032 ;;		_initUSART4
  1033 ;;		_reverseFullSpeed
  1034 ;;		_sendStringSerial4
  1035 ;;		_setMotorPWM
  1036 ;;		_sprintf
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		Startup code after reset
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text0
  1044   001272                     __ptext0:
  1045                           	callstack 0
  1046   001272                     _main:
  1047                           	callstack 18
  1048   001272                     
  1049                           ;main.c: 26:     LEDSon_init();
  1050   001272  ECA6  F018         	call	_LEDSon_init	;wreg free
  1051   001276                     
  1052                           ;main.c: 27:     I2C_2_Master_Init();
  1053   001276  EC56  F018         	call	_I2C_2_Master_Init	;wreg free
  1054   00127A                     
  1055                           ;main.c: 28:     color_click_init();
  1056   00127A  EC0F  F018         	call	_color_click_init	;wreg free
  1057   00127E                     
  1058                           ;main.c: 29:     initDCmotorsPWM();
  1059   00127E  EC28  F015         	call	_initDCmotorsPWM	;wreg free
  1060   001282                     
  1061                           ;main.c: 30:     initUSART4();
  1062   001282  ECB7  F018         	call	_initUSART4	;wreg free
  1063   001286                     
  1064                           ;main.c: 31:     Interrupts_init();
  1065   001286  ECF0  F017         	call	_Interrupts_init	;wreg free
  1066   00128A                     
  1067                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1068   00128A  8486               	bsf	134,2,c	;volatile
  1069   00128C                     
  1070                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1071   00128C  010E               	movlb	14	; () banked
  1072   00128E  95B4               	bcf	180,2,b	;volatile
  1073   001290                     
  1074                           ; BSR set to: 14
  1075                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1076   001290  CFBC F1DE          	movff	4028,main@PWMcycle	;volatile
  1077                           
  1078                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1079   001294  0E00               	movlw	0
  1080   001296  0101               	movlb	1	; () banked
  1081   001298  6FEA               	movwf	main@motorL& (0+255),b
  1082                           
  1083                           ;main.c: 47:     motorL.direction=1;
  1084   00129A  0E01               	movlw	1
  1085   00129C  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1086                           
  1087                           ;main.c: 48:     motorL.brakemode=1;
  1088   00129E  0E01               	movlw	1
  1089   0012A0  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1090   0012A2                     
  1091                           ; BSR set to: 1
  1092                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1093   0012A2  0EAA               	movlw	170
  1094   0012A4  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1095   0012A6  0E0F               	movlw	15
  1096   0012A8  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1097   0012AA                     
  1098                           ; BSR set to: 1
  1099                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1100   0012AA  0EA6               	movlw	166
  1101   0012AC  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1102   0012AE  0E0F               	movlw	15
  1103   0012B0  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1104   0012B2                     
  1105                           ; BSR set to: 1
  1106                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1107   0012B2  C1DE  F1ED         	movff	main@PWMcycle,main@motorL+3
  1108   0012B6  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1109                           
  1110                           ;main.c: 53:     motorR.power=0;
  1111   0012B8  0E00               	movlw	0
  1112   0012BA  6FF3               	movwf	main@motorR& (0+255),b
  1113                           
  1114                           ;main.c: 54:     motorR.direction=1;
  1115   0012BC  0E01               	movlw	1
  1116   0012BE  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1117                           
  1118                           ;main.c: 55:     motorR.brakemode=1;
  1119   0012C0  0E01               	movlw	1
  1120   0012C2  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1121   0012C4                     
  1122                           ; BSR set to: 1
  1123                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1124   0012C4  0E25               	movlw	37
  1125   0012C6  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1126   0012C8  0E0F               	movlw	15
  1127   0012CA  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1128   0012CC                     
  1129                           ; BSR set to: 1
  1130                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1131   0012CC  0E21               	movlw	33
  1132   0012CE  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1133   0012D0  0E0F               	movlw	15
  1134   0012D2  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1135   0012D4                     
  1136                           ; BSR set to: 1
  1137                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1138   0012D4  C1DE  F1F6         	movff	main@PWMcycle,main@motorR+3
  1139   0012D8  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1140   0012DA                     
  1141                           ; BSR set to: 1
  1142                           ;main.c: 60:     setMotorPWM(&motorL);
  1143   0012DA  0EEA               	movlw	low main@motorL
  1144   0012DC  6E12               	movwf	setMotorPWM@m^0,c
  1145   0012DE  0E01               	movlw	high main@motorL
  1146   0012E0  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1147   0012E2  ECBA  F00F         	call	_setMotorPWM	;wreg free
  1148   0012E6                     
  1149                           ;main.c: 61:     setMotorPWM(&motorR);
  1150   0012E6  0EF3               	movlw	low main@motorR
  1151   0012E8  6E12               	movwf	setMotorPWM@m^0,c
  1152   0012EA  0E01               	movlw	high main@motorR
  1153   0012EC  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1154   0012EE  ECBA  F00F         	call	_setMotorPWM	;wreg free
  1155                           
  1156                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1157   0012F2  0E00               	movlw	0
  1158   0012F4  0101               	movlb	1	; () banked
  1159   0012F6  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1160   0012F8  0E00               	movlw	0
  1161   0012FA  6FE1               	movwf	main@red_read& (0+255),b
  1162                           
  1163                           ;main.c: 69:     unsigned int green_read = 0;
  1164   0012FC  0E00               	movlw	0
  1165   0012FE  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1166   001300  0E00               	movlw	0
  1167   001302  6FE3               	movwf	main@green_read& (0+255),b
  1168                           
  1169                           ;main.c: 70:     unsigned int blue_read = 0;
  1170   001304  0E00               	movlw	0
  1171   001306  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1172   001308  0E00               	movlw	0
  1173   00130A  6FE5               	movwf	main@blue_read& (0+255),b
  1174                           
  1175                           ;main.c: 71:     unsigned int clear_read = 0;
  1176   00130C  0E00               	movlw	0
  1177   00130E  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1178   001310  0E00               	movlw	0
  1179   001312  6FE8               	movwf	main@clear_read& (0+255),b
  1180                           
  1181                           ;main.c: 72:     unsigned int clear_read_check = 0;
  1182   001314  0E00               	movlw	0
  1183   001316  6FE0               	movwf	(main@clear_read_check+1)& (0+255),b
  1184   001318  0E00               	movlw	0
  1185   00131A  6FDF               	movwf	main@clear_read_check& (0+255),b
  1186   00131C                     
  1187                           ; BSR set to: 1
  1188                           ;main.c: 74:     unsigned int expected_values[4][9];;main.c: 75:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 76:     unsigned int ReturnHomeArray[2][30];;main.c: 86:  
      +                             LATDbits.LATD4 = 0;
  1189   00131C  987C               	bcf	124,4,c	;volatile
  1190                           
  1191                           ;main.c: 87:     for(colour i = RED; i<= BLACK; i++){
  1192   00131E  0E00               	movlw	0
  1193   001320  6FE7               	movwf	main@i& (0+255),b
  1194   001322  EF94  F009         	goto	l238
  1195   001326                     l239:
  1196                           
  1197                           ;main.c: 89:             LATDbits.LATD4 = 1;
  1198   001326  887C               	bsf	124,4,c	;volatile
  1199   001328                     l238:
  1200                           
  1201                           ;main.c: 88:         while(PORTFbits.RF2){
  1202   001328  B48E               	btfsc	142,2,c	;volatile
  1203   00132A  EF99  F009         	goto	u2011
  1204   00132E  EF9B  F009         	goto	u2010
  1205   001332                     u2011:
  1206   001332  EF93  F009         	goto	l239
  1207   001336                     u2010:
  1208   001336                     
  1209                           ;main.c: 91:         LATDbits.LATD4 = 0;
  1210   001336  987C               	bcf	124,4,c	;volatile
  1211   001338                     
  1212                           ;main.c: 92:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1213   001338  0E29               	movlw	41
  1214   00133A  0100               	movlb	0	; () banked
  1215   00133C  6FEB               	movwf	(??_main+1)& (0+255),b
  1216   00133E  0E96               	movlw	150
  1217   001340  6FEA               	movwf	??_main& (0+255),b
  1218   001342  0E7F               	movlw	127
  1219   001344                     u2067:
  1220   001344  2EE8               	decfsz	wreg,f,c
  1221   001346  D7FE               	bra	u2067
  1222   001348  2FEA               	decfsz	??_main& (0+255),f,b
  1223   00134A  D7FC               	bra	u2067
  1224   00134C  2FEB               	decfsz	(??_main+1)& (0+255),f,b
  1225   00134E  D7FA               	bra	u2067
  1226   001350                     
  1227                           ;main.c: 93:         stop(&motorL, &motorR);
  1228   001350  0EEA               	movlw	low main@motorL
  1229   001352  6E18               	movwf	stop@mL^0,c
  1230   001354  0E01               	movlw	high main@motorL
  1231   001356  6E19               	movwf	(stop@mL+1)^0,c
  1232   001358  0EF3               	movlw	low main@motorR
  1233   00135A  6E1A               	movwf	stop@mR^0,c
  1234   00135C  0E01               	movlw	high main@motorR
  1235   00135E  6E1B               	movwf	(stop@mR+1)^0,c
  1236   001360  EC6C  F015         	call	_stop	;wreg free
  1237   001364                     
  1238                           ;main.c: 94:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1239   001364  0E02               	movlw	2
  1240   001366  0100               	movlb	0	; () banked
  1241   001368  6FEB               	movwf	(??_main+1)& (0+255),b
  1242   00136A  0EA0               	movlw	160
  1243   00136C  6FEA               	movwf	??_main& (0+255),b
  1244   00136E  0E92               	movlw	146
  1245   001370                     u2077:
  1246   001370  2EE8               	decfsz	wreg,f,c
  1247   001372  D7FE               	bra	u2077
  1248   001374  2FEA               	decfsz	??_main& (0+255),f,b
  1249   001376  D7FC               	bra	u2077
  1250   001378  2FEB               	decfsz	(??_main+1)& (0+255),f,b
  1251   00137A  D7FA               	bra	u2077
  1252   00137C  F000               	nop	
  1253                           
  1254                           ;main.c: 95:         reverseFullSpeed(&motorL, &motorR);
  1255   00137E  0EEA               	movlw	low main@motorL
  1256   001380  6E18               	movwf	reverseFullSpeed@mL^0,c
  1257   001382  0E01               	movlw	high main@motorL
  1258   001384  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1259   001386  0EF3               	movlw	low main@motorR
  1260   001388  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1261   00138A  0E01               	movlw	high main@motorR
  1262   00138C  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1263   00138E  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  1264   001392                     
  1265                           ;main.c: 96:         _delay((unsigned long)((150)*(64000000/4000.0)));
  1266   001392  0E0D               	movlw	13
  1267   001394  0100               	movlb	0	; () banked
  1268   001396  6FEB               	movwf	(??_main+1)& (0+255),b
  1269   001398  0E2D               	movlw	45
  1270   00139A  6FEA               	movwf	??_main& (0+255),b
  1271   00139C  0ED7               	movlw	215
  1272   00139E                     u2087:
  1273   00139E  2EE8               	decfsz	wreg,f,c
  1274   0013A0  D7FE               	bra	u2087
  1275   0013A2  2FEA               	decfsz	??_main& (0+255),f,b
  1276   0013A4  D7FC               	bra	u2087
  1277   0013A6  2FEB               	decfsz	(??_main+1)& (0+255),f,b
  1278   0013A8  D7FA               	bra	u2087
  1279   0013AA  D000               	nop2	
  1280   0013AC                     
  1281                           ;main.c: 97:         stop(&motorL, &motorR);
  1282   0013AC  0EEA               	movlw	low main@motorL
  1283   0013AE  6E18               	movwf	stop@mL^0,c
  1284   0013B0  0E01               	movlw	high main@motorL
  1285   0013B2  6E19               	movwf	(stop@mL+1)^0,c
  1286   0013B4  0EF3               	movlw	low main@motorR
  1287   0013B6  6E1A               	movwf	stop@mR^0,c
  1288   0013B8  0E01               	movlw	high main@motorR
  1289   0013BA  6E1B               	movwf	(stop@mR+1)^0,c
  1290   0013BC  EC6C  F015         	call	_stop	;wreg free
  1291   0013C0                     
  1292                           ;main.c: 98:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1293   0013C0  0EE8               	movlw	low main@clear_read
  1294   0013C2  6E10               	movwf	collect_avg_readings@clear_read^0,c
  1295   0013C4  0E01               	movlw	high main@clear_read
  1296   0013C6  6E11               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1297   0013C8  0EE1               	movlw	low main@red_read
  1298   0013CA  6E12               	movwf	collect_avg_readings@red_read^0,c
  1299   0013CC  0E01               	movlw	high main@red_read
  1300   0013CE  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1301   0013D0  0EE3               	movlw	low main@green_read
  1302   0013D2  6E14               	movwf	collect_avg_readings@green_read^0,c
  1303   0013D4  0E01               	movlw	high main@green_read
  1304   0013D6  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1305   0013D8  0EE5               	movlw	low main@blue_read
  1306   0013DA  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1307   0013DC  0E01               	movlw	high main@blue_read
  1308   0013DE  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1309   0013E0  ECB9  F00D         	call	_collect_avg_readings	;wreg free
  1310   0013E4                     
  1311                           ;main.c: 99:         expected_values[RED][i] = red_read;
  1312   0013E4  0101               	movlb	1	; () banked
  1313   0013E6  51E7               	movf	main@i& (0+255),w,b
  1314   0013E8  0D02               	mullw	2
  1315   0013EA  0E96               	movlw	low main@expected_values
  1316   0013EC  24F3               	addwf	243,w,c
  1317   0013EE  6ED9               	movwf	fsr2l,c
  1318   0013F0  0E01               	movlw	high main@expected_values
  1319   0013F2  20F4               	addwfc	prodh,w,c
  1320   0013F4  6EDA               	movwf	fsr2h,c
  1321   0013F6  C1E1  FFDE         	movff	main@red_read,postinc2
  1322   0013FA  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1323   0013FE                     
  1324                           ; BSR set to: 1
  1325                           ;main.c: 100:         expected_values[GREEN][i] = green_read;
  1326   0013FE  51E7               	movf	main@i& (0+255),w,b
  1327   001400  0D02               	mullw	2
  1328   001402  0E12               	movlw	18
  1329   001404  26F3               	addwf	243,f,c
  1330   001406  0E00               	movlw	0
  1331   001408  22F4               	addwfc	244,f,c
  1332   00140A  0E96               	movlw	low main@expected_values
  1333   00140C  24F3               	addwf	243,w,c
  1334   00140E  6ED9               	movwf	fsr2l,c
  1335   001410  0E01               	movlw	high main@expected_values
  1336   001412  20F4               	addwfc	prodh,w,c
  1337   001414  6EDA               	movwf	fsr2h,c
  1338   001416  C1E3  FFDE         	movff	main@green_read,postinc2
  1339   00141A  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1340   00141E                     
  1341                           ; BSR set to: 1
  1342                           ;main.c: 101:         expected_values[BLUE][i] = blue_read;
  1343   00141E  51E7               	movf	main@i& (0+255),w,b
  1344   001420  0D02               	mullw	2
  1345   001422  0E24               	movlw	36
  1346   001424  26F3               	addwf	243,f,c
  1347   001426  0E00               	movlw	0
  1348   001428  22F4               	addwfc	244,f,c
  1349   00142A  0E96               	movlw	low main@expected_values
  1350   00142C  24F3               	addwf	243,w,c
  1351   00142E  6ED9               	movwf	fsr2l,c
  1352   001430  0E01               	movlw	high main@expected_values
  1353   001432  20F4               	addwfc	prodh,w,c
  1354   001434  6EDA               	movwf	fsr2h,c
  1355   001436  C1E5  FFDE         	movff	main@blue_read,postinc2
  1356   00143A  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1357   00143E                     
  1358                           ; BSR set to: 1
  1359                           ;main.c: 102:         expected_values[3][i] = clear_read;
  1360   00143E  51E7               	movf	main@i& (0+255),w,b
  1361   001440  0D02               	mullw	2
  1362   001442  0E36               	movlw	54
  1363   001444  26F3               	addwf	243,f,c
  1364   001446  0E00               	movlw	0
  1365   001448  22F4               	addwfc	244,f,c
  1366   00144A  0E96               	movlw	low main@expected_values
  1367   00144C  24F3               	addwf	243,w,c
  1368   00144E  6ED9               	movwf	fsr2l,c
  1369   001450  0E01               	movlw	high main@expected_values
  1370   001452  20F4               	addwfc	prodh,w,c
  1371   001454  6EDA               	movwf	fsr2h,c
  1372   001456  C1E8  FFDE         	movff	main@clear_read,postinc2
  1373   00145A  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1374   00145E                     
  1375                           ; BSR set to: 1
  1376                           ;main.c: 103:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read);
  1377   00145E  0E00               	movlw	low main@buf
  1378   001460  0100               	movlb	0	; () banked
  1379   001462  6F66               	movwf	sprintf@s& (0+255),b
  1380   001464  0E01               	movlw	high main@buf
  1381   001466  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1382   001468  0E01               	movlw	low STR_1
  1383   00146A  6F68               	movwf	sprintf@fmt& (0+255),b
  1384   00146C  0E0E               	movlw	high STR_1
  1385   00146E  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1386   001470  C1E8  F06A         	movff	main@clear_read,?_sprintf+4
  1387   001474  C1E9  F06B         	movff	main@clear_read+1,?_sprintf+5
  1388   001478  C1E1  F06C         	movff	main@red_read,?_sprintf+6
  1389   00147C  C1E2  F06D         	movff	main@red_read+1,?_sprintf+7
  1390   001480  C1E3  F06E         	movff	main@green_read,?_sprintf+8
  1391   001484  C1E4  F06F         	movff	main@green_read+1,?_sprintf+9
  1392   001488  C1E5  F070         	movff	main@blue_read,?_sprintf+10
  1393   00148C  C1E6  F071         	movff	main@blue_read+1,?_sprintf+11
  1394   001490  ECC4  F016         	call	_sprintf	;wreg free
  1395   001494                     
  1396                           ;main.c: 104:         sendStringSerial4(buf);
  1397   001494  0E00               	movlw	low main@buf
  1398   001496  6E06               	movwf	sendStringSerial4@string^0,c
  1399   001498  0E01               	movlw	high main@buf
  1400   00149A  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1401   00149C  EC29  F018         	call	_sendStringSerial4	;wreg free
  1402   0014A0                     
  1403                           ;main.c: 105:     }
  1404   0014A0  0101               	movlb	1	; () banked
  1405   0014A2  2BE7               	incf	main@i& (0+255),f,b
  1406   0014A4                     
  1407                           ; BSR set to: 1
  1408   0014A4  0E08               	movlw	8
  1409   0014A6  65E7               	cpfsgt	main@i& (0+255),b
  1410   0014A8  EF58  F00A         	goto	u2021
  1411   0014AC  EF5A  F00A         	goto	u2020
  1412   0014B0                     u2021:
  1413   0014B0  EF94  F009         	goto	l238
  1414   0014B4                     u2020:
  1415   0014B4                     
  1416                           ; BSR set to: 1
  1417                           ;main.c: 106:     LATDbits.LATD4 = 1;
  1418   0014B4  887C               	bsf	124,4,c	;volatile
  1419                           
  1420                           ;main.c: 107:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1421   0014B6  EF5E  F00A         	goto	l241
  1422   0014BA                     l242:
  1423   0014BA  987C               	bcf	124,4,c	;volatile
  1424   0014BC                     l241:
  1425   0014BC  B48E               	btfsc	142,2,c	;volatile
  1426   0014BE  EF63  F00A         	goto	u2031
  1427   0014C2  EF65  F00A         	goto	u2030
  1428   0014C6                     u2031:
  1429   0014C6  EF5D  F00A         	goto	l242
  1430   0014CA                     u2030:
  1431   0014CA                     
  1432                           ;main.c: 108:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1433   0014CA  0E00               	movlw	low main@buf
  1434   0014CC  0100               	movlb	0	; () banked
  1435   0014CE  6F7F               	movwf	clear_read_calibration@buf& (0+255),b
  1436   0014D0  0E01               	movlw	high main@buf
  1437   0014D2  6F80               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1438   0014D4  0EE8               	movlw	low main@clear_read
  1439   0014D6  6F81               	movwf	clear_read_calibration@clear_read& (0+255),b
  1440   0014D8  0E01               	movlw	high main@clear_read
  1441   0014DA  6F82               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1442   0014DC  0EDF               	movlw	low main@clear_read_check
  1443   0014DE  6F83               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1444   0014E0  0E01               	movlw	high main@clear_read_check
  1445   0014E2  6F84               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1446   0014E4  EC78  F012         	call	_clear_read_calibration	;wreg free
  1447   0014E8                     l244:
  1448   0014E8  B48E               	btfsc	142,2,c	;volatile
  1449   0014EA  EF79  F00A         	goto	u2041
  1450   0014EE  EF7B  F00A         	goto	u2040
  1451   0014F2                     u2041:
  1452   0014F2  EF74  F00A         	goto	l244
  1453   0014F6                     u2040:
  1454   0014F6                     l3928:
  1455                           
  1456                           ;main.c: 128:     fullSpeedAhead(&motorL, &motorR);
  1457   0014F6  0EEA               	movlw	low main@motorL
  1458   0014F8  6E18               	movwf	fullSpeedAhead@mL^0,c
  1459   0014FA  0E01               	movlw	high main@motorL
  1460   0014FC  6E19               	movwf	(fullSpeedAhead@mL+1)^0,c
  1461   0014FE  0EF3               	movlw	low main@motorR
  1462   001500  6E1A               	movwf	fullSpeedAhead@mR^0,c
  1463   001502  0E01               	movlw	high main@motorR
  1464   001504  6E1B               	movwf	(fullSpeedAhead@mR+1)^0,c
  1465   001506  EC9C  F014         	call	_fullSpeedAhead	;wreg free
  1466   00150A                     l3930:
  1467                           
  1468                           ;main.c: 131:         clear_read = color_read_Clear();
  1469   00150A  EC3D  F017         	call	_color_read_Clear	;wreg free
  1470   00150E  C009  F1E8         	movff	?_color_read_Clear,main@clear_read
  1471   001512  C00A  F1E9         	movff	?_color_read_Clear+1,main@clear_read+1
  1472   001516                     
  1473                           ;main.c: 132:         if (clear_read > clear_read_check){
  1474   001516  0101               	movlb	1	; () banked
  1475   001518  51E8               	movf	main@clear_read& (0+255),w,b
  1476   00151A  5DDF               	subwf	main@clear_read_check& (0+255),w,b
  1477   00151C  51E9               	movf	(main@clear_read+1)& (0+255),w,b
  1478   00151E  59E0               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1479   001520  B0D8               	btfsc	status,0,c
  1480   001522  EF95  F00A         	goto	u2051
  1481   001526  EF97  F00A         	goto	u2050
  1482   00152A                     u2051:
  1483   00152A  EF85  F00A         	goto	l3930
  1484   00152E                     u2050:
  1485   00152E                     
  1486                           ; BSR set to: 1
  1487                           ;main.c: 133:             stop(&motorL, &motorR);
  1488   00152E  0EEA               	movlw	low main@motorL
  1489   001530  6E18               	movwf	stop@mL^0,c
  1490   001532  0E01               	movlw	high main@motorL
  1491   001534  6E19               	movwf	(stop@mL+1)^0,c
  1492   001536  0EF3               	movlw	low main@motorR
  1493   001538  6E1A               	movwf	stop@mR^0,c
  1494   00153A  0E01               	movlw	high main@motorR
  1495   00153C  6E1B               	movwf	(stop@mR+1)^0,c
  1496   00153E  EC6C  F015         	call	_stop	;wreg free
  1497   001542                     
  1498                           ;main.c: 134:             _delay((unsigned long)((20)*(64000000/4000.0)));
  1499   001542  0E02               	movlw	2
  1500   001544  0100               	movlb	0	; () banked
  1501   001546  6FEB               	movwf	(??_main+1)& (0+255),b
  1502   001548  0EA0               	movlw	160
  1503   00154A  6FEA               	movwf	??_main& (0+255),b
  1504   00154C  0E92               	movlw	146
  1505   00154E                     u2097:
  1506   00154E  2EE8               	decfsz	wreg,f,c
  1507   001550  D7FE               	bra	u2097
  1508   001552  2FEA               	decfsz	??_main& (0+255),f,b
  1509   001554  D7FC               	bra	u2097
  1510   001556  2FEB               	decfsz	(??_main+1)& (0+255),f,b
  1511   001558  D7FA               	bra	u2097
  1512   00155A  F000               	nop	
  1513   00155C                     
  1514                           ;main.c: 135:             reverseFullSpeed(&motorL, &motorR);
  1515   00155C  0EEA               	movlw	low main@motorL
  1516   00155E  6E18               	movwf	reverseFullSpeed@mL^0,c
  1517   001560  0E01               	movlw	high main@motorL
  1518   001562  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1519   001564  0EF3               	movlw	low main@motorR
  1520   001566  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1521   001568  0E01               	movlw	high main@motorR
  1522   00156A  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1523   00156C  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  1524                           
  1525                           ;main.c: 136:             _delay((unsigned long)((150)*(64000000/4000.0)));
  1526   001570  0E0D               	movlw	13
  1527   001572  0100               	movlb	0	; () banked
  1528   001574  6FEB               	movwf	(??_main+1)& (0+255),b
  1529   001576  0E2D               	movlw	45
  1530   001578  6FEA               	movwf	??_main& (0+255),b
  1531   00157A  0ED7               	movlw	215
  1532   00157C                     u2107:
  1533   00157C  2EE8               	decfsz	wreg,f,c
  1534   00157E  D7FE               	bra	u2107
  1535   001580  2FEA               	decfsz	??_main& (0+255),f,b
  1536   001582  D7FC               	bra	u2107
  1537   001584  2FEB               	decfsz	(??_main+1)& (0+255),f,b
  1538   001586  D7FA               	bra	u2107
  1539   001588  D000               	nop2	
  1540   00158A                     
  1541                           ;main.c: 137:             stop(&motorL, &motorR);
  1542   00158A  0EEA               	movlw	low main@motorL
  1543   00158C  6E18               	movwf	stop@mL^0,c
  1544   00158E  0E01               	movlw	high main@motorL
  1545   001590  6E19               	movwf	(stop@mL+1)^0,c
  1546   001592  0EF3               	movlw	low main@motorR
  1547   001594  6E1A               	movwf	stop@mR^0,c
  1548   001596  0E01               	movlw	high main@motorR
  1549   001598  6E1B               	movwf	(stop@mR+1)^0,c
  1550   00159A  EC6C  F015         	call	_stop	;wreg free
  1551   00159E                     
  1552                           ;main.c: 138:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1553   00159E  0E2A               	movlw	42
  1554   0015A0  0100               	movlb	0	; () banked
  1555   0015A2  6FEA               	movwf	??_main& (0+255),b
  1556   0015A4  0E8D               	movlw	141
  1557   0015A6                     u2117:
  1558   0015A6  2EE8               	decfsz	wreg,f,c
  1559   0015A8  D7FE               	bra	u2117
  1560   0015AA  2FEA               	decfsz	??_main& (0+255),f,b
  1561   0015AC  D7FC               	bra	u2117
  1562   0015AE  D000               	nop2	
  1563   0015B0                     
  1564                           ;main.c: 139:             card_response(buf, &clear_read, &red_read, &green_read, &blue_
      +                          read, expected_values, &motorL, &motorR);
  1565   0015B0  0E00               	movlw	low main@buf
  1566   0015B2  0100               	movlb	0	; () banked
  1567   0015B4  6F7F               	movwf	card_response@buf& (0+255),b
  1568   0015B6  0E01               	movlw	high main@buf
  1569   0015B8  6F80               	movwf	(card_response@buf+1)& (0+255),b
  1570   0015BA  0EE8               	movlw	low main@clear_read
  1571   0015BC  6F81               	movwf	card_response@clear_read& (0+255),b
  1572   0015BE  0E01               	movlw	high main@clear_read
  1573   0015C0  6F82               	movwf	(card_response@clear_read+1)& (0+255),b
  1574   0015C2  0EE1               	movlw	low main@red_read
  1575   0015C4  6F83               	movwf	card_response@red_read& (0+255),b
  1576   0015C6  0E01               	movlw	high main@red_read
  1577   0015C8  6F84               	movwf	(card_response@red_read+1)& (0+255),b
  1578   0015CA  0EE3               	movlw	low main@green_read
  1579   0015CC  6F85               	movwf	card_response@green_read& (0+255),b
  1580   0015CE  0E01               	movlw	high main@green_read
  1581   0015D0  6F86               	movwf	(card_response@green_read+1)& (0+255),b
  1582   0015D2  0EE5               	movlw	low main@blue_read
  1583   0015D4  6F87               	movwf	card_response@blue_read& (0+255),b
  1584   0015D6  0E01               	movlw	high main@blue_read
  1585   0015D8  6F88               	movwf	(card_response@blue_read+1)& (0+255),b
  1586   0015DA  0E96               	movlw	low main@expected_values
  1587   0015DC  6F89               	movwf	card_response@expected_values& (0+255),b
  1588   0015DE  0E01               	movlw	high main@expected_values
  1589   0015E0  6F8A               	movwf	(card_response@expected_values+1)& (0+255),b
  1590   0015E2  0EEA               	movlw	low main@motorL
  1591   0015E4  6F8B               	movwf	card_response@mL& (0+255),b
  1592   0015E6  0E01               	movlw	high main@motorL
  1593   0015E8  6F8C               	movwf	(card_response@mL+1)& (0+255),b
  1594   0015EA  0EF3               	movlw	low main@motorR
  1595   0015EC  6F8D               	movwf	card_response@mR& (0+255),b
  1596   0015EE  0E01               	movlw	high main@motorR
  1597   0015F0  6F8E               	movwf	(card_response@mR+1)& (0+255),b
  1598   0015F2  ECD1  F011         	call	_card_response	;wreg free
  1599   0015F6                     
  1600                           ;main.c: 140:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1601   0015F6  0E2A               	movlw	42
  1602   0015F8  0100               	movlb	0	; () banked
  1603   0015FA  6FEA               	movwf	??_main& (0+255),b
  1604   0015FC  0E8D               	movlw	141
  1605   0015FE                     u2127:
  1606   0015FE  2EE8               	decfsz	wreg,f,c
  1607   001600  D7FE               	bra	u2127
  1608   001602  2FEA               	decfsz	??_main& (0+255),f,b
  1609   001604  D7FC               	bra	u2127
  1610   001606  D000               	nop2	
  1611   001608  EF7B  F00A         	goto	l3928
  1612   00160C  EF3B  F000         	goto	start
  1613   001610                     __end_of_main:
  1614                           	callstack 0
  1615                           
  1616 ;; *************** function _initUSART4 *****************
  1617 ;; Defined at:
  1618 ;;		line 6 in file "serial.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used: 1
  1638 ;; Hardware stack levels required when called: 4
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text1
  1647   00316E                     __ptext1:
  1648                           	callstack 0
  1649   00316E                     _initUSART4:
  1650                           	callstack 26
  1651   00316E                     
  1652                           ;serial.c: 10:     RC0PPS = 0x12;
  1653   00316E  0E12               	movlw	18
  1654   003170  010E               	movlb	14	; () banked
  1655   003172  6F62               	movwf	98,b	;volatile
  1656                           
  1657                           ;serial.c: 11:     RX4PPS = 0x11;
  1658   003174  0E11               	movlw	17
  1659   003176  6F15               	movwf	21,b	;volatile
  1660   003178                     
  1661                           ; BSR set to: 14
  1662                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1663   003178  8283               	bsf	131,1,c	;volatile
  1664   00317A                     
  1665                           ; BSR set to: 14
  1666                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1667   00317A  97E9               	bcf	233,3,b	;volatile
  1668   00317C                     
  1669                           ; BSR set to: 14
  1670                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1671   00317C  95E8               	bcf	232,2,b	;volatile
  1672                           
  1673                           ;serial.c: 17:     SP4BRGL = 51;
  1674   00317E  0E33               	movlw	51
  1675   003180  6FE5               	movwf	229,b	;volatile
  1676                           
  1677                           ;serial.c: 18:     SP4BRGH = 0;
  1678   003182  0E00               	movlw	0
  1679   003184  6FE6               	movwf	230,b	;volatile
  1680   003186                     
  1681                           ; BSR set to: 14
  1682                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1683   003186  89E7               	bsf	231,4,b	;volatile
  1684   003188                     
  1685                           ; BSR set to: 14
  1686                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1687   003188  8BE8               	bsf	232,5,b	;volatile
  1688   00318A                     
  1689                           ; BSR set to: 14
  1690                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1691   00318A  8FE7               	bsf	231,7,b	;volatile
  1692   00318C                     
  1693                           ; BSR set to: 14
  1694   00318C  0012               	return		;funcret
  1695   00318E                     __end_of_initUSART4:
  1696                           	callstack 0
  1697                           
  1698 ;; *************** function _initDCmotorsPWM *****************
  1699 ;; Defined at:
  1700 ;;		line 6 in file "dc_motor.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; Hardware stack levels required when called: 4
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_main
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           	psect	text2
  1729   002A50                     __ptext2:
  1730                           	callstack 0
  1731   002A50                     _initDCmotorsPWM:
  1732                           	callstack 26
  1733   002A50                     
  1734                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1735   002A50  9485               	bcf	133,2,c	;volatile
  1736                           
  1737                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1738   002A52  9885               	bcf	133,4,c	;volatile
  1739                           
  1740                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1741   002A54  9E83               	bcf	131,7,c	;volatile
  1742                           
  1743                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1744   002A56  9C87               	bcf	135,6,c	;volatile
  1745   002A58                     
  1746                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1747   002A58  0E05               	movlw	5
  1748   002A5A  010E               	movlb	14	; () banked
  1749   002A5C  6F74               	movwf	116,b	;volatile
  1750                           
  1751                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1752   002A5E  0E06               	movlw	6
  1753   002A60  6F76               	movwf	118,b	;volatile
  1754                           
  1755                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1756   002A62  0E07               	movlw	7
  1757   002A64  6F69               	movwf	105,b	;volatile
  1758                           
  1759                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1760   002A66  0E08               	movlw	8
  1761   002A68  6F88               	movwf	136,b	;volatile
  1762                           
  1763                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1764   002A6A  50BD               	movf	189,w,c	;volatile
  1765   002A6C  0B8F               	andlw	-113
  1766   002A6E  0940               	iorlw	64
  1767   002A70  6EBD               	movwf	189,c	;volatile
  1768                           
  1769                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1770   002A72  0EE0               	movlw	-32
  1771   002A74  16BE               	andwf	190,f,c	;volatile
  1772                           
  1773                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1774   002A76  50BF               	movf	191,w,c	;volatile
  1775   002A78  0BF0               	andlw	-16
  1776   002A7A  0901               	iorlw	1
  1777   002A7C  6EBF               	movwf	191,c	;volatile
  1778                           
  1779                           ;dc_motor.c: 26:     T2PR=99;
  1780   002A7E  0E63               	movlw	99
  1781   002A80  6EBC               	movwf	188,c	;volatile
  1782   002A82                     
  1783                           ; BSR set to: 14
  1784                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1785   002A82  8EBD               	bsf	189,7,c	;volatile
  1786                           
  1787                           ;dc_motor.c: 31:     CCPR1H=0;
  1788   002A84  0E00               	movlw	0
  1789   002A86  6EAA               	movwf	170,c	;volatile
  1790                           
  1791                           ;dc_motor.c: 32:     CCPR2H=0;
  1792   002A88  0E00               	movlw	0
  1793   002A8A  6EA6               	movwf	166,c	;volatile
  1794                           
  1795                           ;dc_motor.c: 33:     CCPR3H=0;
  1796   002A8C  0E00               	movlw	0
  1797   002A8E  010F               	movlb	15	; () banked
  1798   002A90  6F25               	movwf	37,b	;volatile
  1799                           
  1800                           ;dc_motor.c: 34:     CCPR4H=0;
  1801   002A92  0E00               	movlw	0
  1802   002A94  6F21               	movwf	33,b	;volatile
  1803                           
  1804                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1805   002A96  0EFC               	movlw	-4
  1806   002A98  16AD               	andwf	173,f,c	;volatile
  1807                           
  1808                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1809   002A9A  0EF3               	movlw	-13
  1810   002A9C  16AD               	andwf	173,f,c	;volatile
  1811                           
  1812                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1813   002A9E  0ECF               	movlw	-49
  1814   002AA0  16AD               	andwf	173,f,c	;volatile
  1815                           
  1816                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1817   002AA2  0E3F               	movlw	-193
  1818   002AA4  16AD               	andwf	173,f,c	;volatile
  1819   002AA6                     
  1820                           ; BSR set to: 15
  1821                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1822   002AA6  88AB               	bsf	171,4,c	;volatile
  1823                           
  1824                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1825   002AA8  50AB               	movf	171,w,c	;volatile
  1826   002AAA  0BF0               	andlw	-16
  1827   002AAC  090C               	iorlw	12
  1828   002AAE  6EAB               	movwf	171,c	;volatile
  1829   002AB0                     
  1830                           ; BSR set to: 15
  1831                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1832   002AB0  8EAB               	bsf	171,7,c	;volatile
  1833   002AB2                     
  1834                           ; BSR set to: 15
  1835                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1836   002AB2  88A7               	bsf	167,4,c	;volatile
  1837                           
  1838                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1839   002AB4  50A7               	movf	167,w,c	;volatile
  1840   002AB6  0BF0               	andlw	-16
  1841   002AB8  090C               	iorlw	12
  1842   002ABA  6EA7               	movwf	167,c	;volatile
  1843   002ABC                     
  1844                           ; BSR set to: 15
  1845                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1846   002ABC  8EA7               	bsf	167,7,c	;volatile
  1847   002ABE                     
  1848                           ; BSR set to: 15
  1849                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1850   002ABE  8926               	bsf	38,4,b	;volatile
  1851                           
  1852                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1853   002AC0  5126               	movf	38,w,b	;volatile
  1854   002AC2  0BF0               	andlw	-16
  1855   002AC4  090C               	iorlw	12
  1856   002AC6  6F26               	movwf	38,b	;volatile
  1857   002AC8                     
  1858                           ; BSR set to: 15
  1859                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1860   002AC8  8F26               	bsf	38,7,b	;volatile
  1861   002ACA                     
  1862                           ; BSR set to: 15
  1863                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1864   002ACA  8922               	bsf	34,4,b	;volatile
  1865                           
  1866                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1867   002ACC  5122               	movf	34,w,b	;volatile
  1868   002ACE  0BF0               	andlw	-16
  1869   002AD0  090C               	iorlw	12
  1870   002AD2  6F22               	movwf	34,b	;volatile
  1871   002AD4                     
  1872                           ; BSR set to: 15
  1873                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1874   002AD4  8F22               	bsf	34,7,b	;volatile
  1875   002AD6                     
  1876                           ; BSR set to: 15
  1877   002AD6  0012               	return		;funcret
  1878   002AD8                     __end_of_initDCmotorsPWM:
  1879                           	callstack 0
  1880                           
  1881 ;; *************** function _fullSpeedAhead *****************
  1882 ;; Defined at:
  1883 ;;		line 131 in file "dc_motor.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1886 ;;		 -> main@motorL(9), 
  1887 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1888 ;;		 -> main@motorR(9), 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  i               2   28[COMRAM] int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:        7 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 6
  1907 ;; This function calls:
  1908 ;;		_setMotorPWM
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text3
  1915   002938                     __ptext3:
  1916                           	callstack 0
  1917   002938                     _fullSpeedAhead:
  1918                           	callstack 24
  1919   002938                     
  1920                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  1921   002938  EE20 F001          	lfsr	2,1
  1922   00293C  5018               	movf	fullSpeedAhead@mL^0,w,c
  1923   00293E  26D9               	addwf	fsr2l,f,c
  1924   002940  5019               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1925   002942  22DA               	addwfc	fsr2h,f,c
  1926   002944  0E01               	movlw	1
  1927   002946  6EDF               	movwf	indf2,c
  1928                           
  1929                           ;dc_motor.c: 134:     mR->direction=1;
  1930   002948  EE20 F001          	lfsr	2,1
  1931   00294C  501A               	movf	fullSpeedAhead@mR^0,w,c
  1932   00294E  26D9               	addwf	fsr2l,f,c
  1933   002950  501B               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1934   002952  22DA               	addwfc	fsr2h,f,c
  1935   002954  0E01               	movlw	1
  1936   002956  6EDF               	movwf	indf2,c
  1937   002958                     
  1938                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  1939   002958  0E00               	movlw	0
  1940   00295A  6E1E               	movwf	(fullSpeedAhead@i+1)^0,c
  1941   00295C  0E00               	movlw	0
  1942   00295E  6E1D               	movwf	fullSpeedAhead@i^0,c
  1943   002960                     l3202:
  1944                           
  1945                           ;dc_motor.c: 136:         mL->power=i;
  1946   002960  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1947   002964  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1948   002968  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1949                           
  1950                           ;dc_motor.c: 137:         mR->power=i;
  1951   00296C  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1952   002970  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1953   002974  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1954   002978                     
  1955                           ;dc_motor.c: 138:         setMotorPWM(mL);
  1956   002978  C018  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1957   00297C  C019  F013         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1958   002980  ECBA  F00F         	call	_setMotorPWM	;wreg free
  1959   002984                     
  1960                           ;dc_motor.c: 139:         setMotorPWM(mR);
  1961   002984  C01A  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1962   002988  C01B  F013         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1963   00298C  ECBA  F00F         	call	_setMotorPWM	;wreg free
  1964   002990                     
  1965                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1966   002990  0ED0               	movlw	208
  1967   002992  6E1C               	movwf	??_fullSpeedAhead^0,c
  1968   002994  0ECA               	movlw	202
  1969   002996                     u2137:
  1970   002996  2EE8               	decfsz	wreg,f,c
  1971   002998  D7FE               	bra	u2137
  1972   00299A  2E1C               	decfsz	??_fullSpeedAhead^0,f,c
  1973   00299C  D7FC               	bra	u2137
  1974   00299E                     
  1975                           ;dc_motor.c: 141:     }
  1976   00299E  0E0A               	movlw	10
  1977   0029A0  261D               	addwf	fullSpeedAhead@i^0,f,c
  1978   0029A2  0E00               	movlw	0
  1979   0029A4  221E               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  1980   0029A6  BE1E               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  1981   0029A8  EFDF  F014         	goto	u1481
  1982   0029AC  501E               	movf	(fullSpeedAhead@i+1)^0,w,c
  1983   0029AE  E109               	bnz	u1480
  1984   0029B0  0E3C               	movlw	60
  1985   0029B2  5C1D               	subwf	fullSpeedAhead@i^0,w,c
  1986   0029B4  A0D8               	btfss	status,0,c
  1987   0029B6  EFDF  F014         	goto	u1481
  1988   0029BA  EFE1  F014         	goto	u1480
  1989   0029BE                     u1481:
  1990   0029BE  EFB0  F014         	goto	l3202
  1991   0029C2                     u1480:
  1992   0029C2  0012               	return		;funcret
  1993   0029C4                     __end_of_fullSpeedAhead:
  1994                           	callstack 0
  1995                           
  1996 ;; *************** function _color_click_init *****************
  1997 ;; Defined at:
  1998 ;;		line 5 in file "color.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;Total ram usage:        1 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 7
  2019 ;; This function calls:
  2020 ;;		_I2C_2_Master_Init
  2021 ;;		_color_writetoaddr
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text4
  2028   00301E                     __ptext4:
  2029                           	callstack 0
  2030   00301E                     _color_click_init:
  2031                           	callstack 23
  2032   00301E                     
  2033                           ;color.c: 8:     I2C_2_Master_Init();
  2034   00301E  EC56  F018         	call	_I2C_2_Master_Init	;wreg free
  2035   003022                     
  2036                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2037   003022  0E01               	movlw	1
  2038   003024  6E07               	movwf	color_writetoaddr@value^0,c
  2039   003026  0E00               	movlw	0
  2040   003028  ECC7  F018         	call	_color_writetoaddr
  2041   00302C                     
  2042                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2043   00302C  0E3F               	movlw	63
  2044   00302E  6E09               	movwf	??_color_click_init^0,c
  2045   003030  0E55               	movlw	85
  2046   003032                     u2147:
  2047   003032  2EE8               	decfsz	wreg,f,c
  2048   003034  D7FE               	bra	u2147
  2049   003036  2E09               	decfsz	??_color_click_init^0,f,c
  2050   003038  D7FC               	bra	u2147
  2051   00303A  F000               	nop	
  2052   00303C                     
  2053                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2054   00303C  0E03               	movlw	3
  2055   00303E  6E07               	movwf	color_writetoaddr@value^0,c
  2056   003040  0E00               	movlw	0
  2057   003042  ECC7  F018         	call	_color_writetoaddr
  2058   003046                     
  2059                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2060   003046  0ED5               	movlw	213
  2061   003048  6E07               	movwf	color_writetoaddr@value^0,c
  2062   00304A  0E01               	movlw	1
  2063   00304C  ECC7  F018         	call	_color_writetoaddr
  2064   003050  0012               	return		;funcret
  2065   003052                     __end_of_color_click_init:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function _I2C_2_Master_Init *****************
  2069 ;; Defined at:
  2070 ;;		line 4 in file "i2c.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used: 1
  2090 ;; Hardware stack levels required when called: 4
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_color_click_init
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text5
  2100   0030AC                     __ptext5:
  2101                           	callstack 0
  2102   0030AC                     _I2C_2_Master_Init:
  2103                           	callstack 25
  2104   0030AC                     
  2105                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2106   0030AC  010E               	movlb	14	; () banked
  2107   0030AE  51D9               	movf	217,w,b	;volatile
  2108   0030B0  0BF0               	andlw	-16
  2109   0030B2  0908               	iorlw	8
  2110   0030B4  6FD9               	movwf	217,b	;volatile
  2111   0030B6                     
  2112                           ; BSR set to: 14
  2113                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2114   0030B6  8BD9               	bsf	217,5,b	;volatile
  2115                           
  2116                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2117   0030B8  0E9F               	movlw	159
  2118   0030BA  6FD6               	movwf	214,b	;volatile
  2119   0030BC                     
  2120                           ; BSR set to: 14
  2121                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2122   0030BC  8A84               	bsf	132,5,c	;volatile
  2123   0030BE                     
  2124                           ; BSR set to: 14
  2125                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2126   0030BE  8C84               	bsf	132,6,c	;volatile
  2127   0030C0                     
  2128                           ; BSR set to: 14
  2129                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2130   0030C0  9BA7               	bcf	167,5,b	;volatile
  2131   0030C2                     
  2132                           ; BSR set to: 14
  2133                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2134   0030C2  9DA7               	bcf	167,6,b	;volatile
  2135                           
  2136                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2137   0030C4  0E1D               	movlw	29
  2138   0030C6  6F1D               	movwf	29,b	;volatile
  2139                           
  2140                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2141   0030C8  0E1E               	movlw	30
  2142   0030CA  6F1C               	movwf	28,b	;volatile
  2143                           
  2144                           ;i2c.c: 18:   RD5PPS=0x1C;
  2145   0030CC  0E1C               	movlw	28
  2146   0030CE  6F6F               	movwf	111,b	;volatile
  2147                           
  2148                           ;i2c.c: 19:   RD6PPS=0x1B;
  2149   0030D0  0E1B               	movlw	27
  2150   0030D2  6F70               	movwf	112,b	;volatile
  2151   0030D4                     
  2152                           ; BSR set to: 14
  2153   0030D4  0012               	return		;funcret
  2154   0030D6                     __end_of_I2C_2_Master_Init:
  2155                           	callstack 0
  2156                           
  2157 ;; *************** function _clear_read_calibration *****************
  2158 ;; Defined at:
  2159 ;;		line 11 in file "colour_identify.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  buf             2   31[BANK0 ] PTR unsigned char 
  2162 ;;		 -> main@buf(150), 
  2163 ;;  clear_read      2   33[BANK0 ] PTR unsigned int 
  2164 ;;		 -> main@clear_read(2), 
  2165 ;;  clear_read_c    2   35[BANK0 ] PTR unsigned int 
  2166 ;;		 -> main@clear_read_check(2), 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  i               2   43[BANK0 ] int 
  2169 ;;  i               2   41[BANK0 ] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2179 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2180 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;Total ram usage:       14 bytes
  2184 ;; Hardware stack levels used: 1
  2185 ;; Hardware stack levels required when called: 12
  2186 ;; This function calls:
  2187 ;;		_color_read_Clear
  2188 ;;		_sendStringSerial4
  2189 ;;		_sprintf
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text6
  2196   0024F0                     __ptext6:
  2197                           	callstack 0
  2198   0024F0                     _clear_read_calibration:
  2199                           	callstack 18
  2200   0024F0                     
  2201                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2202   0024F0  0E00               	movlw	0
  2203   0024F2  0100               	movlb	0	; () banked
  2204   0024F4  6F8A               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2205   0024F6  0E00               	movlw	0
  2206   0024F8  6F89               	movwf	clear_read_calibration@i& (0+255),b
  2207   0024FA                     l3810:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2211   0024FA  EC3D  F017         	call	_color_read_Clear	;wreg free
  2212   0024FE  C081  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2213   002502  C082  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2214   002506  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2215   00250A  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2216   00250E                     
  2217                           ;colour_identify.c: 15:     }
  2218   00250E  0100               	movlb	0	; () banked
  2219   002510  4B89               	infsnz	clear_read_calibration@i& (0+255),f,b
  2220   002512  2B8A               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2221   002514                     
  2222                           ; BSR set to: 0
  2223   002514  BF8A               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2224   002516  EF96  F012         	goto	u1991
  2225   00251A  0EF5               	movlw	245
  2226   00251C  5D89               	subwf	clear_read_calibration@i& (0+255),w,b
  2227   00251E  0E01               	movlw	1
  2228   002520  598A               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2229   002522  A0D8               	btfss	status,0,c
  2230   002524  EF96  F012         	goto	u1991
  2231   002528  EF98  F012         	goto	u1990
  2232   00252C                     u1991:
  2233   00252C  EF7D  F012         	goto	l3810
  2234   002530                     u1990:
  2235   002530                     
  2236                           ; BSR set to: 0
  2237                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2238   002530  0E00               	movlw	0
  2239   002532  6F8C               	movwf	(clear_read_calibration@i_1589+1)& (0+255),b
  2240   002534  0E00               	movlw	0
  2241   002536  6F8B               	movwf	clear_read_calibration@i_1589& (0+255),b
  2242   002538                     l3822:
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2246   002538  EC3D  F017         	call	_color_read_Clear	;wreg free
  2247   00253C  C081  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2248   002540  C082  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2249   002544  5009               	movf	?_color_read_Clear^0,w,c
  2250   002546  26DE               	addwf	postinc2,f,c
  2251   002548  500A               	movf	(?_color_read_Clear+1)^0,w,c
  2252   00254A  22DD               	addwfc	postdec2,f,c
  2253   00254C                     
  2254                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2255   00254C  0E11               	movlw	17
  2256   00254E  0100               	movlb	0	; () banked
  2257   002550  6F86               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2258   002552  0E3C               	movlw	60
  2259   002554  6F85               	movwf	??_clear_read_calibration& (0+255),b
  2260   002556  0ECB               	movlw	203
  2261   002558                     u2157:
  2262   002558  2EE8               	decfsz	wreg,f,c
  2263   00255A  D7FE               	bra	u2157
  2264   00255C  2F85               	decfsz	??_clear_read_calibration& (0+255),f,b
  2265   00255E  D7FC               	bra	u2157
  2266   002560  2F86               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2267   002562  D7FA               	bra	u2157
  2268   002564                     
  2269                           ;colour_identify.c: 20:     }
  2270   002564  0100               	movlb	0	; () banked
  2271   002566  4B8B               	infsnz	clear_read_calibration@i_1589& (0+255),f,b
  2272   002568  2B8C               	incf	(clear_read_calibration@i_1589+1)& (0+255),f,b
  2273   00256A                     
  2274                           ; BSR set to: 0
  2275   00256A  BF8C               	btfsc	(clear_read_calibration@i_1589+1)& (0+255),7,b
  2276   00256C  EFC1  F012         	goto	u2001
  2277   002570  518C               	movf	(clear_read_calibration@i_1589+1)& (0+255),w,b
  2278   002572  E109               	bnz	u2000
  2279   002574  0E03               	movlw	3
  2280   002576  5D8B               	subwf	clear_read_calibration@i_1589& (0+255),w,b
  2281   002578  A0D8               	btfss	status,0,c
  2282   00257A  EFC1  F012         	goto	u2001
  2283   00257E  EFC3  F012         	goto	u2000
  2284   002582                     u2001:
  2285   002582  EF9C  F012         	goto	l3822
  2286   002586                     u2000:
  2287   002586                     
  2288                           ; BSR set to: 0
  2289                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2290   002586  C081  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2291   00258A  C082  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2292   00258E  CFDE F085          	movff	postinc2,??_clear_read_calibration
  2293   002592  CFDD F086          	movff	postdec2,??_clear_read_calibration+1
  2294   002596  90D8               	bcf	status,0,c
  2295   002598  3386               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2296   00259A  3385               	rrcf	??_clear_read_calibration& (0+255),f,b
  2297   00259C  90D8               	bcf	status,0,c
  2298   00259E  3386               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2299   0025A0  3385               	rrcf	??_clear_read_calibration& (0+255),f,b
  2300   0025A2  C081  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2301   0025A6  C082  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2302   0025AA  C085  FFDE         	movff	??_clear_read_calibration,postinc2
  2303   0025AE  C086  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2304   0025B2                     
  2305                           ; BSR set to: 0
  2306                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2307   0025B2  C07F  F066         	movff	clear_read_calibration@buf,sprintf@s
  2308   0025B6  C080  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2309   0025BA  0E57               	movlw	low STR_2
  2310   0025BC  6F68               	movwf	sprintf@fmt& (0+255),b
  2311   0025BE  0E0E               	movlw	high STR_2
  2312   0025C0  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2313   0025C2  C081  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2314   0025C6  C082  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2315   0025CA  ECC4  F016         	call	_sprintf	;wreg free
  2316   0025CE                     
  2317                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2318   0025CE  C07F  F006         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2319   0025D2  C080  F007         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2320   0025D6  EC29  F018         	call	_sendStringSerial4	;wreg free
  2321   0025DA                     
  2322                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2323   0025DA  C081  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2324   0025DE  C082  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2325   0025E2  CFDE F085          	movff	postinc2,??_clear_read_calibration
  2326   0025E6  CFDD F086          	movff	postdec2,??_clear_read_calibration+1
  2327   0025EA  0E20               	movlw	32
  2328   0025EC  0100               	movlb	0	; () banked
  2329   0025EE  2585               	addwf	??_clear_read_calibration& (0+255),w,b
  2330   0025F0  6F87               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2331   0025F2  0E03               	movlw	3
  2332   0025F4  2186               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2333   0025F6  6F88               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2334   0025F8  C083  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2335   0025FC  C084  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2336   002600  C087  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2337   002604  C088  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2338   002608                     
  2339                           ; BSR set to: 0
  2340   002608  0012               	return		;funcret
  2341   00260A                     __end_of_clear_read_calibration:
  2342                           	callstack 0
  2343                           
  2344 ;; *************** function _card_response *****************
  2345 ;; Defined at:
  2346 ;;		line 222 in file "colour_identify.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  buf             2   31[BANK0 ] PTR unsigned char 
  2349 ;;		 -> main@buf(150), 
  2350 ;;  clear_read      2   33[BANK0 ] PTR unsigned int 
  2351 ;;		 -> main@clear_read(2), 
  2352 ;;  red_read        2   35[BANK0 ] PTR unsigned int 
  2353 ;;		 -> main@red_read(2), 
  2354 ;;  green_read      2   37[BANK0 ] PTR unsigned int 
  2355 ;;		 -> main@green_read(2), 
  2356 ;;  blue_read       2   39[BANK0 ] PTR unsigned int 
  2357 ;;		 -> main@blue_read(2), 
  2358 ;;  expected_val    2   41[BANK0 ] PTR unsigned int [9]
  2359 ;;		 -> main@expected_values(72), 
  2360 ;;  mL              2   43[BANK0 ] PTR struct DC_motor
  2361 ;;		 -> main@motorL(9), 
  2362 ;;  mR              2   45[BANK0 ] PTR struct DC_motor
  2363 ;;		 -> main@motorR(9), 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  normalised_v   72   47[BANK0 ] unsigned int [9][4]
  2366 ;;  master_close   18  119[BANK0 ] unsigned int [9]
  2367 ;;  card            1  137[BANK0 ] enum E14551
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2377 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2378 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2380 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2381 ;;Total ram usage:      107 bytes
  2382 ;; Hardware stack levels used: 1
  2383 ;; Hardware stack levels required when called: 12
  2384 ;; This function calls:
  2385 ;;		_collect_avg_readings
  2386 ;;		_determine_card
  2387 ;;		_make_master_closeness
  2388 ;;		_motor_response
  2389 ;;		_normalise_readings
  2390 ;;		_sendStringSerial4
  2391 ;;		_sprintf
  2392 ;; This function is called by:
  2393 ;;		_main
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text7
  2398   0023A2                     __ptext7:
  2399                           	callstack 0
  2400   0023A2                     _card_response:
  2401                           	callstack 18
  2402   0023A2                     
  2403                           ;colour_identify.c: 226:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          7:     unsigned int master_closeness[9];;colour_identify.c: 229:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2404   0023A2  C081  F010         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2405   0023A6  C082  F011         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2406   0023AA  C083  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  2407   0023AE  C084  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2408   0023B2  C085  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  2409   0023B6  C086  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2410   0023BA  C087  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2411   0023BE  C088  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2412   0023C2  ECB9  F00D         	call	_collect_avg_readings	;wreg free
  2413   0023C6                     
  2414                           ;colour_identify.c: 230:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2415   0023C6  C07F  F066         	movff	card_response@buf,sprintf@s
  2416   0023CA  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  2417   0023CE  0E33               	movlw	low STR_3
  2418   0023D0  0100               	movlb	0	; () banked
  2419   0023D2  6F68               	movwf	sprintf@fmt& (0+255),b
  2420   0023D4  0E0E               	movlw	high STR_3
  2421   0023D6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2422   0023D8  C081  FFD9         	movff	card_response@clear_read,fsr2l
  2423   0023DC  C082  FFDA         	movff	card_response@clear_read+1,fsr2h
  2424   0023E0  CFDE F06A          	movff	postinc2,?_sprintf+4
  2425   0023E4  CFDD F06B          	movff	postdec2,?_sprintf+5
  2426   0023E8  C083  FFD9         	movff	card_response@red_read,fsr2l
  2427   0023EC  C084  FFDA         	movff	card_response@red_read+1,fsr2h
  2428   0023F0  CFDE F06C          	movff	postinc2,?_sprintf+6
  2429   0023F4  CFDD F06D          	movff	postdec2,?_sprintf+7
  2430   0023F8  C085  FFD9         	movff	card_response@green_read,fsr2l
  2431   0023FC  C086  FFDA         	movff	card_response@green_read+1,fsr2h
  2432   002400  CFDE F06E          	movff	postinc2,?_sprintf+8
  2433   002404  CFDD F06F          	movff	postdec2,?_sprintf+9
  2434   002408  C087  FFD9         	movff	card_response@blue_read,fsr2l
  2435   00240C  C088  FFDA         	movff	card_response@blue_read+1,fsr2h
  2436   002410  CFDE F070          	movff	postinc2,?_sprintf+10
  2437   002414  CFDD F071          	movff	postdec2,?_sprintf+11
  2438   002418  ECC4  F016         	call	_sprintf	;wreg free
  2439   00241C                     
  2440                           ;colour_identify.c: 231:     sendStringSerial4(buf);
  2441   00241C  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2442   002420  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2443   002424  EC29  F018         	call	_sendStringSerial4	;wreg free
  2444   002428                     
  2445                           ;colour_identify.c: 233:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2446   002428  C07F  F01B         	movff	card_response@buf,normalise_readings@buf
  2447   00242C  C080  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2448   002430  C081  FFD9         	movff	card_response@clear_read,fsr2l
  2449   002434  C082  FFDA         	movff	card_response@clear_read+1,fsr2h
  2450   002438  CFDE F01D          	movff	postinc2,normalise_readings@clear_read
  2451   00243C  CFDD F01E          	movff	postdec2,normalise_readings@clear_read+1
  2452   002440  C083  FFD9         	movff	card_response@red_read,fsr2l
  2453   002444  C084  FFDA         	movff	card_response@red_read+1,fsr2h
  2454   002448  CFDE F01F          	movff	postinc2,normalise_readings@red_read
  2455   00244C  CFDD F020          	movff	postdec2,normalise_readings@red_read+1
  2456   002450  C085  FFD9         	movff	card_response@green_read,fsr2l
  2457   002454  C086  FFDA         	movff	card_response@green_read+1,fsr2h
  2458   002458  CFDE F021          	movff	postinc2,normalise_readings@green_read
  2459   00245C  CFDD F022          	movff	postdec2,normalise_readings@green_read+1
  2460   002460  C087  FFD9         	movff	card_response@blue_read,fsr2l
  2461   002464  C088  FFDA         	movff	card_response@blue_read+1,fsr2h
  2462   002468  CFDE F023          	movff	postinc2,normalise_readings@blue_read
  2463   00246C  CFDD F024          	movff	postdec2,normalise_readings@blue_read+1
  2464   002470  C089  F025         	movff	card_response@expected_values,normalise_readings@expected_values
  2465   002474  C08A  F026         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2466   002478  0E8F               	movlw	low card_response@normalised_values
  2467   00247A  6E27               	movwf	normalise_readings@normalised_values^0,c
  2468   00247C  0E00               	movlw	high card_response@normalised_values
  2469   00247E  6E28               	movwf	(normalise_readings@normalised_values+1)^0,c
  2470   002480  EC08  F00B         	call	_normalise_readings	;wreg free
  2471   002484                     
  2472                           ;colour_identify.c: 235:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2473   002484  C07F  F005         	movff	card_response@buf,make_master_closeness@buf
  2474   002488  C080  F006         	movff	card_response@buf+1,make_master_closeness@buf+1
  2475   00248C  0E8F               	movlw	low card_response@normalised_values
  2476   00248E  6E07               	movwf	make_master_closeness@normalised_values^0,c
  2477   002490  0E00               	movlw	high card_response@normalised_values
  2478   002492  6E08               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2479   002494  0ED7               	movlw	low card_response@master_closeness
  2480   002496  6E09               	movwf	make_master_closeness@master_closeness^0,c
  2481   002498  0E00               	movlw	high card_response@master_closeness
  2482   00249A  6E0A               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2483   00249C  EC05  F013         	call	_make_master_closeness	;wreg free
  2484   0024A0                     
  2485                           ;colour_identify.c: 237:     card = determine_card(master_closeness);
  2486   0024A0  0ED7               	movlw	low card_response@master_closeness
  2487   0024A2  6E05               	movwf	determine_card@master_closeness^0,c
  2488   0024A4  0E00               	movlw	high card_response@master_closeness
  2489   0024A6  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2490   0024A8  ECAF  F015         	call	_determine_card	;wreg free
  2491   0024AC  0100               	movlb	0	; () banked
  2492   0024AE  6FE9               	movwf	card_response@card& (0+255),b
  2493   0024B0                     
  2494                           ; BSR set to: 0
  2495                           ;colour_identify.c: 238:     sprintf(buf, "CARD %d \n", card);
  2496   0024B0  C07F  F066         	movff	card_response@buf,sprintf@s
  2497   0024B4  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  2498   0024B8  0E6E               	movlw	low STR_4
  2499   0024BA  6F68               	movwf	sprintf@fmt& (0+255),b
  2500   0024BC  0E0E               	movlw	high STR_4
  2501   0024BE  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2502   0024C0  C0E9  F06A         	movff	card_response@card,?_sprintf+4
  2503   0024C4  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2504   0024C6  ECC4  F016         	call	_sprintf	;wreg free
  2505   0024CA                     
  2506                           ;colour_identify.c: 239:     sendStringSerial4(buf);
  2507   0024CA  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2508   0024CE  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2509   0024D2  EC29  F018         	call	_sendStringSerial4	;wreg free
  2510   0024D6                     
  2511                           ;colour_identify.c: 241:     motor_response(card, mL, mR);
  2512   0024D6  C08B  F020         	movff	card_response@mL,motor_response@mL
  2513   0024DA  C08C  F021         	movff	card_response@mL+1,motor_response@mL+1
  2514   0024DE  C08D  F022         	movff	card_response@mR,motor_response@mR
  2515   0024E2  C08E  F023         	movff	card_response@mR+1,motor_response@mR+1
  2516   0024E6  0100               	movlb	0	; () banked
  2517   0024E8  51E9               	movf	card_response@card& (0+255),w,b
  2518   0024EA  EC3D  F007         	call	_motor_response
  2519   0024EE  0012               	return		;funcret
  2520   0024F0                     __end_of_card_response:
  2521                           	callstack 0
  2522                           
  2523 ;; *************** function _sprintf *****************
  2524 ;; Defined at:
  2525 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2528 ;;		 -> main@buf(150), 
  2529 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2530 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2531 ;;		 -> STR_2(23), STR_1(50), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2534 ;;  ap              2   18[BANK0 ] PTR void [1]
  2535 ;;		 -> ?_sprintf(2), 
  2536 ;;  ret             2    0        int 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  2    6[BANK0 ] int 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2546 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2547 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;Total ram usage:       25 bytes
  2551 ;; Hardware stack levels used: 1
  2552 ;; Hardware stack levels required when called: 11
  2553 ;; This function calls:
  2554 ;;		_vfprintf
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;;		_clear_read_calibration
  2558 ;;		_card_response
  2559 ;;		_card_response_easy
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text8
  2564   002D88                     __ptext8:
  2565                           	callstack 0
  2566   002D88                     _sprintf:
  2567                           	callstack 19
  2568   002D88  0E6A               	movlw	low (?_sprintf+4)
  2569   002D8A  0100               	movlb	0	; () banked
  2570   002D8C  6F72               	movwf	sprintf@ap& (0+255),b
  2571   002D8E  0E00               	movlw	high (?_sprintf+4)
  2572   002D90  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2573   002D92  C066  F074         	movff	sprintf@s,sprintf@f
  2574   002D96  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2575   002D9A                     
  2576                           ; BSR set to: 0
  2577   002D9A  0E00               	movlw	0
  2578   002D9C  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2579   002D9E  0E00               	movlw	0
  2580   002DA0  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2581   002DA2                     
  2582                           ; BSR set to: 0
  2583   002DA2  0E00               	movlw	0
  2584   002DA4  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2585   002DA6  0E00               	movlw	0
  2586   002DA8  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2587   002DAA                     
  2588                           ; BSR set to: 0
  2589   002DAA  0E74               	movlw	low sprintf@f
  2590   002DAC  6F60               	movwf	vfprintf@fp& (0+255),b
  2591   002DAE  0E00               	movlw	high sprintf@f
  2592   002DB0  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2593   002DB2  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2594   002DB6  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2595   002DBA  0E72               	movlw	low sprintf@ap
  2596   002DBC  6F64               	movwf	vfprintf@ap& (0+255),b
  2597   002DBE  0E00               	movlw	high sprintf@ap
  2598   002DC0  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2599   002DC2  EC9A  F016         	call	_vfprintf	;wreg free
  2600   002DC6  0100               	movlb	0	; () banked
  2601   002DC8  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2602   002DCA  2566               	addwf	sprintf@s& (0+255),w,b
  2603   002DCC  6ED9               	movwf	fsr2l,c
  2604   002DCE  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2605   002DD0  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2606   002DD2  6EDA               	movwf	fsr2h,c
  2607   002DD4  0E00               	movlw	0
  2608   002DD6  6EDF               	movwf	indf2,c
  2609   002DD8                     
  2610                           ; BSR set to: 0
  2611   002DD8  0012               	return		;funcret
  2612   002DDA                     __end_of_sprintf:
  2613                           	callstack 0
  2614                           
  2615 ;; *************** function _vfprintf *****************
  2616 ;; Defined at:
  2617 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2620 ;;		 -> sprintf@f(11), 
  2621 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2622 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2623 ;;		 -> STR_2(23), STR_1(50), 
  2624 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2625 ;;		 -> sprintf@ap(2), 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2628 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2629 ;;		 -> STR_2(23), STR_1(50), 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  2    0[BANK0 ] int 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2639 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;Total ram usage:        8 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; Hardware stack levels required when called: 10
  2646 ;; This function calls:
  2647 ;;		_vfpfcnvrt
  2648 ;; This function is called by:
  2649 ;;		_sprintf
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text9
  2654   002D34                     __ptext9:
  2655                           	callstack 0
  2656   002D34                     _vfprintf:
  2657                           	callstack 19
  2658   002D34                     
  2659                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2660   002D34  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2661   002D38  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2662                           
  2663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2664   002D3C  EFAE  F016         	goto	l3774
  2665   002D40                     l3772:
  2666                           
  2667                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2668   002D40  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2669   002D44  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2670   002D48  0E55               	movlw	low vfprintf@cfmt
  2671   002D4A  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2672   002D4C  0E00               	movlw	high vfprintf@cfmt
  2673   002D4E  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2674   002D50  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2675   002D54  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2676   002D58  EC22  F011         	call	_vfpfcnvrt	;wreg free
  2677   002D5C                     l3774:
  2678                           
  2679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2680   002D5C  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2681   002D60  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2682   002D64                     	if	0	;tblptru may be non-zero
  2683   002D64                     	endif
  2684   002D64                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2685   002D64  0E00               	movlw	low (__mediumconst shr (0+16))
  2686   002D66  6EF8               	movwf	tblptru,c
  2687   002D68                     	endif
  2688   002D68  0008               	tblrd		*
  2689   002D6A  50F5               	movf	tablat,w,c
  2690   002D6C  0900               	iorlw	0
  2691   002D6E  A4D8               	btfss	status,2,c
  2692   002D70  EFBC  F016         	goto	u1971
  2693   002D74  EFBE  F016         	goto	u1970
  2694   002D78                     u1971:
  2695   002D78  EFA0  F016         	goto	l3772
  2696   002D7C                     u1970:
  2697   002D7C                     
  2698                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2699   002D7C  0E00               	movlw	0
  2700   002D7E  0100               	movlb	0	; () banked
  2701   002D80  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2702   002D82  0E00               	movlw	0
  2703   002D84  6F60               	movwf	?_vfprintf& (0+255),b
  2704   002D86                     
  2705                           ; BSR set to: 0
  2706   002D86  0012               	return		;funcret
  2707   002D88                     __end_of_vfprintf:
  2708                           	callstack 0
  2709                           
  2710 ;; *************** function _vfpfcnvrt *****************
  2711 ;; Defined at:
  2712 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2715 ;;		 -> sprintf@f(11), 
  2716 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2717 ;;		 -> vfprintf@cfmt(2), 
  2718 ;;  ap              2   70[COMRAM] PTR PTR void 
  2719 ;;		 -> sprintf@ap(2), 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  convarg         8   74[COMRAM] struct .
  2722 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2723 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2724 ;;		 -> STR_2(23), STR_1(50), 
  2725 ;;  i               2    0        int 
  2726 ;;  done            2    0        int 
  2727 ;;  c               1    0        unsigned char 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2737 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2738 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2741 ;;Total ram usage:       18 bytes
  2742 ;; Hardware stack levels used: 1
  2743 ;; Hardware stack levels required when called: 9
  2744 ;; This function calls:
  2745 ;;		_dtoa
  2746 ;;		_fputc
  2747 ;; This function is called by:
  2748 ;;		_vfprintf
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text10
  2753   002244                     __ptext10:
  2754                           	callstack 0
  2755   002244                     _vfpfcnvrt:
  2756                           	callstack 19
  2757   002244                     
  2758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2759   002244  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2760   002248  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2761   00224C  CFDE FFF6          	movff	postinc2,tblptrl
  2762   002250  CFDD FFF7          	movff	postdec2,tblptrh
  2763   002254                     	if	0	;tblptru may be non-zero
  2764   002254                     	endif
  2765   002254                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2766   002254  0E00               	movlw	low (__mediumconst shr (0+16))
  2767   002256  6EF8               	movwf	tblptru,c
  2768   002258                     	endif
  2769   002258  0008               	tblrd		*
  2770   00225A  50F5               	movf	tablat,w,c
  2771   00225C  0A25               	xorlw	37
  2772   00225E  A4D8               	btfss	status,2,c
  2773   002260  EF34  F011         	goto	u1941
  2774   002264  EF36  F011         	goto	u1940
  2775   002268                     u1941:
  2776   002268  EFBA  F011         	goto	l3764
  2777   00226C                     u1940:
  2778   00226C                     
  2779                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2780   00226C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2781   002270  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2782   002274  2ADE               	incf	postinc2,f,c
  2783   002276  0E00               	movlw	0
  2784   002278  22DD               	addwfc	postdec2,f,c
  2785   00227A                     
  2786                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2787   00227A  0E00               	movlw	0
  2788   00227C  0100               	movlb	0	; () banked
  2789   00227E  6FED               	movwf	(_width+1)& (0+255),b
  2790   002280  0E00               	movlw	0
  2791   002282  6FEC               	movwf	_width& (0+255),b
  2792   002284  C0EC  F0F4         	movff	_width,_flags
  2793   002288                     
  2794                           ; BSR set to: 0
  2795                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2796   002288  69EE               	setf	_prec& (0+255),b
  2797   00228A  69EF               	setf	(_prec+1)& (0+255),b
  2798   00228C                     
  2799                           ; BSR set to: 0
  2800                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2801   00228C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2802   002290  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2803   002294  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2804   002298  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2805   00229C                     
  2806                           ; BSR set to: 0
  2807                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2808   00229C  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2809   0022A0  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2810   0022A4                     	if	0	;tblptru may be non-zero
  2811   0022A4                     	endif
  2812   0022A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2813   0022A4  0E00               	movlw	low (__mediumconst shr (0+16))
  2814   0022A6  6EF8               	movwf	tblptru,c
  2815   0022A8                     	endif
  2816   0022A8  0008               	tblrd		*
  2817   0022AA  50F5               	movf	tablat,w,c
  2818   0022AC  0A64               	xorlw	100
  2819   0022AE  B4D8               	btfsc	status,2,c
  2820   0022B0  EF5C  F011         	goto	u1951
  2821   0022B4  EF5E  F011         	goto	u1950
  2822   0022B8                     u1951:
  2823   0022B8  EF6E  F011         	goto	l3754
  2824   0022BC                     u1950:
  2825   0022BC                     
  2826                           ; BSR set to: 0
  2827   0022BC  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2828   0022C0  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2829   0022C4                     	if	0	;tblptru may be non-zero
  2830   0022C4                     	endif
  2831   0022C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2832   0022C4  0E00               	movlw	low (__mediumconst shr (0+16))
  2833   0022C6  6EF8               	movwf	tblptru,c
  2834   0022C8                     	endif
  2835   0022C8  0008               	tblrd		*
  2836   0022CA  50F5               	movf	tablat,w,c
  2837   0022CC  0A69               	xorlw	105
  2838   0022CE  A4D8               	btfss	status,2,c
  2839   0022D0  EF6C  F011         	goto	u1961
  2840   0022D4  EF6E  F011         	goto	u1960
  2841   0022D8                     u1961:
  2842   0022D8  EFB1  F011         	goto	l3760
  2843   0022DC                     u1960:
  2844   0022DC                     l3754:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2848   0022DC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2849   0022E0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2850   0022E4  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2851   0022E8  0E02               	movlw	2
  2852   0022EA  26DE               	addwf	postinc2,f,c
  2853   0022EC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2854   0022F0  0E00               	movlw	0
  2855   0022F2  22DD               	addwfc	postdec2,f,c
  2856   0022F4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2857   0022F8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2858   0022FC  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2859   002300  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2860   002304  0E00               	movlw	0
  2861   002306  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2862   002308  0EFF               	movlw	-1
  2863   00230A  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2864   00230C  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2865   00230E  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2866   002310  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2867   002312  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2868   002314  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2869                           
  2870                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2871   002316  0E01               	movlw	1
  2872   002318  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2873   00231A  6E49               	movwf	??_vfpfcnvrt^0,c
  2874   00231C  0E00               	movlw	0
  2875   00231E  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2876   002320  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2877   002322  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2878   002326  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2879   00232A  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2880   00232E  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2881   002332                     
  2882                           ; BSR set to: 0
  2883                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2884   002332  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2885   002336  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2886   00233A  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2887   00233E  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2888   002342  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2889   002346  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2890   00234A  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2891   00234E  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2892   002352  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2893   002356  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2894   00235A  EC7A  F00C         	call	_dtoa	;wreg free
  2895   00235E  EFD0  F011         	goto	l1269
  2896   002362                     l3760:
  2897                           
  2898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2899   002362  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2900   002366  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2901   00236A  2ADE               	incf	postinc2,f,c
  2902   00236C  0E00               	movlw	0
  2903   00236E  22DD               	addwfc	postdec2,f,c
  2904   002370  EFD0  F011         	goto	l1269
  2905   002374                     l3764:
  2906                           
  2907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2908   002374  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2909   002378  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2910   00237C  CFDE FFF6          	movff	postinc2,tblptrl
  2911   002380  CFDD FFF7          	movff	postdec2,tblptrh
  2912   002384                     	if	0	;tblptru may be non-zero
  2913   002384                     	endif
  2914   002384                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2915   002384  0E00               	movlw	low (__mediumconst shr (0+16))
  2916   002386  6EF8               	movwf	tblptru,c
  2917   002388                     	endif
  2918   002388  0008               	tblrd		*
  2919   00238A  50F5               	movf	tablat,w,c
  2920   00238C  6E05               	movwf	fputc@c^0,c
  2921   00238E  6A06               	clrf	(fputc@c+1)^0,c
  2922   002390  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2923   002394  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2924   002398  EC8B  F013         	call	_fputc	;wreg free
  2925   00239C  EFB1  F011         	goto	l3760
  2926   0023A0                     l1269:
  2927   0023A0  0012               	return		;funcret
  2928   0023A2                     __end_of_vfpfcnvrt:
  2929                           	callstack 0
  2930                           
  2931 ;; *************** function _dtoa *****************
  2932 ;; Defined at:
  2933 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2936 ;;		 -> sprintf@f(11), 
  2937 ;;  d               8   33[COMRAM] long long 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  n               8   55[COMRAM] long long 
  2940 ;;  i               2   64[COMRAM] int 
  2941 ;;  w               2   53[COMRAM] int 
  2942 ;;  p               2   51[COMRAM] int 
  2943 ;;  s               1   63[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2953 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2956 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2957 ;;Total ram usage:       35 bytes
  2958 ;; Hardware stack levels used: 1
  2959 ;; Hardware stack levels required when called: 8
  2960 ;; This function calls:
  2961 ;;		___aodiv
  2962 ;;		___aomod
  2963 ;;		_abs
  2964 ;;		_pad
  2965 ;; This function is called by:
  2966 ;;		_vfpfcnvrt
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text11
  2971   0018F4                     __ptext11:
  2972                           	callstack 0
  2973   0018F4                     _dtoa:
  2974                           	callstack 19
  2975   0018F4                     
  2976                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2977   0018F4  C022  F038         	movff	dtoa@d,dtoa@n
  2978   0018F8  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2979   0018FC  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2980   001900  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2981   001904  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2982   001908  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2983   00190C  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2984   001910  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2985   001914                     
  2986                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2987   001914  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2988   001916  EF8F  F00C         	goto	u1841
  2989   00191A  EF92  F00C         	goto	u1840
  2990   00191E                     u1841:
  2991   00191E  0E01               	movlw	1
  2992   001920  EF93  F00C         	goto	u1850
  2993   001924                     u1840:
  2994   001924  0E00               	movlw	0
  2995   001926                     u1850:
  2996   001926  6E40               	movwf	dtoa@s^0,c
  2997   001928                     
  2998                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2999   001928  5040               	movf	dtoa@s^0,w,c
  3000   00192A  B4D8               	btfsc	status,2,c
  3001   00192C  EF9A  F00C         	goto	u1861
  3002   001930  EF9C  F00C         	goto	u1860
  3003   001934                     u1861:
  3004   001934  EFAC  F00C         	goto	l3696
  3005   001938                     u1860:
  3006   001938                     
  3007                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  3008   001938  1E3F               	comf	(dtoa@n+7)^0,f,c
  3009   00193A  1E3E               	comf	(dtoa@n+6)^0,f,c
  3010   00193C  1E3D               	comf	(dtoa@n+5)^0,f,c
  3011   00193E  1E3C               	comf	(dtoa@n+4)^0,f,c
  3012   001940  1E3B               	comf	(dtoa@n+3)^0,f,c
  3013   001942  1E3A               	comf	(dtoa@n+2)^0,f,c
  3014   001944  1E39               	comf	(dtoa@n+1)^0,f,c
  3015   001946  6C38               	negf	dtoa@n^0,c
  3016   001948  0E00               	movlw	0
  3017   00194A  2239               	addwfc	(dtoa@n+1)^0,f,c
  3018   00194C  223A               	addwfc	(dtoa@n+2)^0,f,c
  3019   00194E  223B               	addwfc	(dtoa@n+3)^0,f,c
  3020   001950  223C               	addwfc	(dtoa@n+4)^0,f,c
  3021   001952  223D               	addwfc	(dtoa@n+5)^0,f,c
  3022   001954  223E               	addwfc	(dtoa@n+6)^0,f,c
  3023   001956  223F               	addwfc	(dtoa@n+7)^0,f,c
  3024   001958                     l3696:
  3025                           
  3026                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  3027   001958  0100               	movlb	0	; () banked
  3028   00195A  BFEF               	btfsc	(_prec+1)& (0+255),7,b
  3029   00195C  EFBA  F00C         	goto	u1870
  3030   001960  51EF               	movf	(_prec+1)& (0+255),w,b
  3031   001962  E106               	bnz	u1871
  3032   001964  05EE               	decf	_prec& (0+255),w,b
  3033   001966  B0D8               	btfsc	status,0,c
  3034   001968  EFB8  F00C         	goto	u1871
  3035   00196C  EFBA  F00C         	goto	u1870
  3036   001970                     u1871:
  3037   001970  EFC0  F00C         	goto	l1248
  3038   001974                     u1870:
  3039   001974                     
  3040                           ; BSR set to: 0
  3041   001974  0E00               	movlw	0
  3042   001976  6E35               	movwf	(dtoa@p+1)^0,c
  3043   001978  0E01               	movlw	1
  3044   00197A  6E34               	movwf	dtoa@p^0,c
  3045   00197C  EFC4  F00C         	goto	l1250
  3046   001980                     l1248:
  3047                           
  3048                           ; BSR set to: 0
  3049   001980  C0EE  F034         	movff	_prec,dtoa@p
  3050   001984  C0EF  F035         	movff	_prec+1,dtoa@p+1
  3051   001988                     l1250:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  3055   001988  C0EC  F036         	movff	_width,dtoa@w
  3056   00198C  C0ED  F037         	movff	_width+1,dtoa@w+1
  3057   001990                     
  3058                           ; BSR set to: 0
  3059                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  3060   001990  5040               	movf	dtoa@s^0,w,c
  3061   001992  B4D8               	btfsc	status,2,c
  3062   001994  EFCE  F00C         	goto	u1881
  3063   001998  EFD0  F00C         	goto	u1880
  3064   00199C                     u1881:
  3065   00199C  EFE7  F00C         	goto	l1251
  3066   0019A0                     u1880:
  3067   0019A0                     
  3068                           ; BSR set to: 0
  3069                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3070   0019A0  0636               	decf	dtoa@w^0,f,c
  3071   0019A2  A0D8               	btfss	status,0,c
  3072   0019A4  0637               	decf	(dtoa@w+1)^0,f,c
  3073   0019A6                     
  3074                           ; BSR set to: 0
  3075                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3076   0019A6  5040               	movf	dtoa@s^0,w,c
  3077   0019A8  A4D8               	btfss	status,2,c
  3078   0019AA  EFD9  F00C         	goto	u1891
  3079   0019AE  EFDB  F00C         	goto	u1890
  3080   0019B2                     u1891:
  3081   0019B2  EFE1  F00C         	goto	l3708
  3082   0019B6                     u1890:
  3083   0019B6                     
  3084                           ; BSR set to: 0
  3085   0019B6  0E00               	movlw	0
  3086   0019B8  6E33               	movwf	(_dtoa$2610+1)^0,c
  3087   0019BA  0E2B               	movlw	43
  3088   0019BC  6E32               	movwf	_dtoa$2610^0,c
  3089   0019BE  EFE5  F00C         	goto	l3710
  3090   0019C2                     l3708:
  3091                           
  3092                           ; BSR set to: 0
  3093   0019C2  0E00               	movlw	0
  3094   0019C4  6E33               	movwf	(_dtoa$2610+1)^0,c
  3095   0019C6  0E2D               	movlw	45
  3096   0019C8  6E32               	movwf	_dtoa$2610^0,c
  3097   0019CA                     l3710:
  3098                           
  3099                           ; BSR set to: 0
  3100   0019CA  C032  F040         	movff	_dtoa$2610,dtoa@s
  3101   0019CE                     l1251:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3105   0019CE  0E00               	movlw	0
  3106   0019D0  6E42               	movwf	(dtoa@i+1)^0,c
  3107   0019D2  0E1F               	movlw	31
  3108   0019D4  6E41               	movwf	dtoa@i^0,c
  3109   0019D6                     
  3110                           ; BSR set to: 0
  3111                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3112   0019D6  0E00               	movlw	0
  3113   0019D8  0102               	movlb	2	; () banked
  3114   0019DA  6F6F               	movwf	(_dbuf+31)& (0+255),b
  3115                           
  3116                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3117   0019DC  EF6C  F00D         	goto	l3724
  3118   0019E0                     l3714:
  3119                           
  3120                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3121   0019E0  0641               	decf	dtoa@i^0,f,c
  3122   0019E2  A0D8               	btfss	status,0,c
  3123   0019E4  0642               	decf	(dtoa@i+1)^0,f,c
  3124   0019E6                     
  3125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3126   0019E6  0E50               	movlw	low _dbuf
  3127   0019E8  2441               	addwf	dtoa@i^0,w,c
  3128   0019EA  6ED9               	movwf	fsr2l,c
  3129   0019EC  0E02               	movlw	high _dbuf
  3130   0019EE  2042               	addwfc	(dtoa@i+1)^0,w,c
  3131   0019F0  6EDA               	movwf	fsr2h,c
  3132   0019F2  C038  F005         	movff	dtoa@n,___aomod@dividend
  3133   0019F6  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  3134   0019FA  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  3135   0019FE  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  3136   001A02  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  3137   001A06  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  3138   001A0A  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  3139   001A0E  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  3140   001A12  0E0A               	movlw	10
  3141   001A14  6E0D               	movwf	___aomod@divisor^0,c
  3142   001A16  0E00               	movlw	0
  3143   001A18  6E0E               	movwf	(___aomod@divisor+1)^0,c
  3144   001A1A  0E00               	movlw	0
  3145   001A1C  6E0F               	movwf	(___aomod@divisor+2)^0,c
  3146   001A1E  0E00               	movlw	0
  3147   001A20  6E10               	movwf	(___aomod@divisor+3)^0,c
  3148   001A22  0E00               	movlw	0
  3149   001A24  6E11               	movwf	(___aomod@divisor+4)^0,c
  3150   001A26  0E00               	movlw	0
  3151   001A28  6E12               	movwf	(___aomod@divisor+5)^0,c
  3152   001A2A  0E00               	movlw	0
  3153   001A2C  6E13               	movwf	(___aomod@divisor+6)^0,c
  3154   001A2E  0E00               	movlw	0
  3155   001A30  6E14               	movwf	(___aomod@divisor+7)^0,c
  3156   001A32  EC70  F010         	call	___aomod	;wreg free
  3157   001A36  C005  F02A         	movff	?___aomod,??_dtoa
  3158   001A3A  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  3159   001A3E  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  3160   001A42  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  3161   001A46  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  3162   001A4A  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  3163   001A4E  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  3164   001A52  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  3165   001A56  C02A  F017         	movff	??_dtoa,abs@a
  3166   001A5A  C02B  F018         	movff	??_dtoa+1,abs@a+1
  3167   001A5E  ECD0  F017         	call	_abs	;wreg free
  3168   001A62  5017               	movf	?_abs^0,w,c
  3169   001A64  0F30               	addlw	48
  3170   001A66  6EDF               	movwf	indf2,c
  3171   001A68                     
  3172                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3173   001A68  0634               	decf	dtoa@p^0,f,c
  3174   001A6A  A0D8               	btfss	status,0,c
  3175   001A6C  0635               	decf	(dtoa@p+1)^0,f,c
  3176   001A6E                     
  3177                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3178   001A6E  0636               	decf	dtoa@w^0,f,c
  3179   001A70  A0D8               	btfss	status,0,c
  3180   001A72  0637               	decf	(dtoa@w+1)^0,f,c
  3181   001A74                     
  3182                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3183   001A74  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3184   001A78  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3185   001A7C  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3186   001A80  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3187   001A84  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3188   001A88  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3189   001A8C  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3190   001A90  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3191   001A94  0E0A               	movlw	10
  3192   001A96  6E0D               	movwf	___aodiv@divisor^0,c
  3193   001A98  0E00               	movlw	0
  3194   001A9A  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3195   001A9C  0E00               	movlw	0
  3196   001A9E  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3197   001AA0  0E00               	movlw	0
  3198   001AA2  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3199   001AA4  0E00               	movlw	0
  3200   001AA6  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3201   001AA8  0E00               	movlw	0
  3202   001AAA  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3203   001AAC  0E00               	movlw	0
  3204   001AAE  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3205   001AB0  0E00               	movlw	0
  3206   001AB2  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3207   001AB4  ECF6  F00E         	call	___aodiv	;wreg free
  3208   001AB8  C005  F038         	movff	?___aodiv,dtoa@n
  3209   001ABC  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3210   001AC0  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3211   001AC4  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3212   001AC8  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3213   001ACC  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3214   001AD0  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3215   001AD4  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3216   001AD8                     l3724:
  3217                           
  3218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3219   001AD8  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3220   001ADA  EF77  F00D         	goto	u1901
  3221   001ADE  5042               	movf	(dtoa@i+1)^0,w,c
  3222   001AE0  E108               	bnz	u1900
  3223   001AE2  0441               	decf	dtoa@i^0,w,c
  3224   001AE4  A0D8               	btfss	status,0,c
  3225   001AE6  EF77  F00D         	goto	u1901
  3226   001AEA  EF79  F00D         	goto	u1900
  3227   001AEE                     u1901:
  3228   001AEE  EF95  F00D         	goto	l3730
  3229   001AF2                     u1900:
  3230   001AF2  5038               	movf	dtoa@n^0,w,c
  3231   001AF4  1039               	iorwf	(dtoa@n+1)^0,w,c
  3232   001AF6  103A               	iorwf	(dtoa@n+2)^0,w,c
  3233   001AF8  103B               	iorwf	(dtoa@n+3)^0,w,c
  3234   001AFA  103C               	iorwf	(dtoa@n+4)^0,w,c
  3235   001AFC  103D               	iorwf	(dtoa@n+5)^0,w,c
  3236   001AFE  103E               	iorwf	(dtoa@n+6)^0,w,c
  3237   001B00  103F               	iorwf	(dtoa@n+7)^0,w,c
  3238   001B02  A4D8               	btfss	status,2,c
  3239   001B04  EF86  F00D         	goto	u1911
  3240   001B08  EF88  F00D         	goto	u1910
  3241   001B0C                     u1911:
  3242   001B0C  EFF0  F00C         	goto	l3714
  3243   001B10                     u1910:
  3244   001B10  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3245   001B12  EF95  F00D         	goto	u1920
  3246   001B16  5035               	movf	(dtoa@p+1)^0,w,c
  3247   001B18  E106               	bnz	u1921
  3248   001B1A  0434               	decf	dtoa@p^0,w,c
  3249   001B1C  B0D8               	btfsc	status,0,c
  3250   001B1E  EF93  F00D         	goto	u1921
  3251   001B22  EF95  F00D         	goto	u1920
  3252   001B26                     u1921:
  3253   001B26  EFF0  F00C         	goto	l3714
  3254   001B2A                     u1920:
  3255   001B2A                     l3730:
  3256                           
  3257                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3258   001B2A  5040               	movf	dtoa@s^0,w,c
  3259   001B2C  B4D8               	btfsc	status,2,c
  3260   001B2E  EF9B  F00D         	goto	u1931
  3261   001B32  EF9D  F00D         	goto	u1930
  3262   001B36                     u1931:
  3263   001B36  EFA8  F00D         	goto	l3736
  3264   001B3A                     u1930:
  3265   001B3A                     
  3266                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3267   001B3A  0641               	decf	dtoa@i^0,f,c
  3268   001B3C  A0D8               	btfss	status,0,c
  3269   001B3E  0642               	decf	(dtoa@i+1)^0,f,c
  3270   001B40                     
  3271                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3272   001B40  0E50               	movlw	low _dbuf
  3273   001B42  2441               	addwf	dtoa@i^0,w,c
  3274   001B44  6ED9               	movwf	fsr2l,c
  3275   001B46  0E02               	movlw	high _dbuf
  3276   001B48  2042               	addwfc	(dtoa@i+1)^0,w,c
  3277   001B4A  6EDA               	movwf	fsr2h,c
  3278   001B4C  C040  FFDF         	movff	dtoa@s,indf2
  3279   001B50                     l3736:
  3280                           
  3281                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3282   001B50  C020  F015         	movff	dtoa@fp,pad@fp
  3283   001B54  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3284   001B58  0E50               	movlw	low _dbuf
  3285   001B5A  2441               	addwf	dtoa@i^0,w,c
  3286   001B5C  6E17               	movwf	pad@buf^0,c
  3287   001B5E  0E02               	movlw	high _dbuf
  3288   001B60  2042               	addwfc	(dtoa@i+1)^0,w,c
  3289   001B62  6E18               	movwf	(pad@buf+1)^0,c
  3290   001B64  C036  F019         	movff	dtoa@w,pad@p
  3291   001B68  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3292   001B6C  ECEF  F015         	call	_pad	;wreg free
  3293   001B70  0012               	return		;funcret
  3294   001B72                     __end_of_dtoa:
  3295                           	callstack 0
  3296                           
  3297 ;; *************** function _pad *****************
  3298 ;; Defined at:
  3299 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3302 ;;		 -> sprintf@f(11), 
  3303 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3304 ;;		 -> dbuf(32), 
  3305 ;;  p               2   24[COMRAM] int 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  w               2   29[COMRAM] int 
  3308 ;;  i               2   27[COMRAM] int 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3318 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3319 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;Total ram usage:       11 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; Hardware stack levels required when called: 7
  3325 ;; This function calls:
  3326 ;;		_fputc
  3327 ;;		_fputs
  3328 ;; This function is called by:
  3329 ;;		_dtoa
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text12
  3334   002BDE                     __ptext12:
  3335                           	callstack 0
  3336   002BDE                     _pad:
  3337                           	callstack 19
  3338   002BDE                     
  3339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3340   002BDE  BE1A               	btfsc	(pad@p+1)^0,7,c
  3341   002BE0  EFF4  F015         	goto	u1821
  3342   002BE4  EFF6  F015         	goto	u1820
  3343   002BE8                     u1821:
  3344   002BE8  EFFC  F015         	goto	l3678
  3345   002BEC                     u1820:
  3346   002BEC  C019  F01E         	movff	pad@p,pad@w
  3347   002BF0  C01A  F01F         	movff	pad@p+1,pad@w+1
  3348   002BF4  EF00  F016         	goto	l1239
  3349   002BF8                     l3678:
  3350   002BF8  0E00               	movlw	0
  3351   002BFA  6E1F               	movwf	(pad@w+1)^0,c
  3352   002BFC  0E00               	movlw	0
  3353   002BFE  6E1E               	movwf	pad@w^0,c
  3354   002C00                     l1239:
  3355                           
  3356                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3357   002C00  0E00               	movlw	0
  3358   002C02  6E1D               	movwf	(pad@i+1)^0,c
  3359   002C04  0E00               	movlw	0
  3360   002C06  6E1C               	movwf	pad@i^0,c
  3361                           
  3362                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3363   002C08  EF12  F016         	goto	l3684
  3364   002C0C                     l3680:
  3365                           
  3366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3367   002C0C  0E00               	movlw	0
  3368   002C0E  6E06               	movwf	(fputc@c+1)^0,c
  3369   002C10  0E20               	movlw	32
  3370   002C12  6E05               	movwf	fputc@c^0,c
  3371   002C14  C015  F007         	movff	pad@fp,fputc@fp
  3372   002C18  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3373   002C1C  EC8B  F013         	call	_fputc	;wreg free
  3374   002C20                     
  3375                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3376   002C20  4A1C               	infsnz	pad@i^0,f,c
  3377   002C22  2A1D               	incf	(pad@i+1)^0,f,c
  3378   002C24                     l3684:
  3379                           
  3380                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3381   002C24  501E               	movf	pad@w^0,w,c
  3382   002C26  5C1C               	subwf	pad@i^0,w,c
  3383   002C28  501D               	movf	(pad@i+1)^0,w,c
  3384   002C2A  0A80               	xorlw	128
  3385   002C2C  6E1B               	movwf	??_pad^0,c
  3386   002C2E  501F               	movf	(pad@w+1)^0,w,c
  3387   002C30  0A80               	xorlw	128
  3388   002C32  581B               	subwfb	??_pad^0,w,c
  3389   002C34  A0D8               	btfss	status,0,c
  3390   002C36  EF1F  F016         	goto	u1831
  3391   002C3A  EF21  F016         	goto	u1830
  3392   002C3E                     u1831:
  3393   002C3E  EF06  F016         	goto	l3680
  3394   002C42                     u1830:
  3395   002C42                     
  3396                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3397   002C42  C017  F00E         	movff	pad@buf,fputs@s
  3398   002C46  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3399   002C4A  C015  F010         	movff	pad@fp,fputs@fp
  3400   002C4E  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3401   002C52  EC8D  F017         	call	_fputs	;wreg free
  3402   002C56  0012               	return		;funcret
  3403   002C58                     __end_of_pad:
  3404                           	callstack 0
  3405                           
  3406 ;; *************** function _fputs *****************
  3407 ;; Defined at:
  3408 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3411 ;;		 -> dbuf(32), 
  3412 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3413 ;;		 -> sprintf@f(11), 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  i               2   18[COMRAM] int 
  3416 ;;  c               1   17[COMRAM] unsigned char 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2   13[COMRAM] int 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3427 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;Total ram usage:        7 bytes
  3431 ;; Hardware stack levels used: 1
  3432 ;; Hardware stack levels required when called: 6
  3433 ;; This function calls:
  3434 ;;		_fputc
  3435 ;; This function is called by:
  3436 ;;		_pad
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text13
  3441   002F1A                     __ptext13:
  3442                           	callstack 0
  3443   002F1A                     _fputs:
  3444                           	callstack 19
  3445   002F1A  0E00               	movlw	0
  3446   002F1C  6E14               	movwf	(fputs@i+1)^0,c
  3447   002F1E  0E00               	movlw	0
  3448   002F20  6E13               	movwf	fputs@i^0,c
  3449   002F22  EF9E  F017         	goto	l3588
  3450   002F26                     l3584:
  3451   002F26  C012  F005         	movff	fputs@c,fputc@c
  3452   002F2A  6A06               	clrf	(fputc@c+1)^0,c
  3453   002F2C  C010  F007         	movff	fputs@fp,fputc@fp
  3454   002F30  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3455   002F34  EC8B  F013         	call	_fputc	;wreg free
  3456   002F38  4A13               	infsnz	fputs@i^0,f,c
  3457   002F3A  2A14               	incf	(fputs@i+1)^0,f,c
  3458   002F3C                     l3588:
  3459   002F3C  5013               	movf	fputs@i^0,w,c
  3460   002F3E  240E               	addwf	fputs@s^0,w,c
  3461   002F40  6ED9               	movwf	fsr2l,c
  3462   002F42  5014               	movf	(fputs@i+1)^0,w,c
  3463   002F44  200F               	addwfc	(fputs@s+1)^0,w,c
  3464   002F46  6EDA               	movwf	fsr2h,c
  3465   002F48  50DF               	movf	indf2,w,c
  3466   002F4A  6E12               	movwf	fputs@c^0,c
  3467   002F4C  5012               	movf	fputs@c^0,w,c
  3468   002F4E  A4D8               	btfss	status,2,c
  3469   002F50  EFAC  F017         	goto	u1671
  3470   002F54  EFAE  F017         	goto	u1670
  3471   002F58                     u1671:
  3472   002F58  EF93  F017         	goto	l3584
  3473   002F5C                     u1670:
  3474   002F5C  0012               	return		;funcret
  3475   002F5E                     __end_of_fputs:
  3476                           	callstack 0
  3477                           
  3478 ;; *************** function _fputc *****************
  3479 ;; Defined at:
  3480 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  c               2    4[COMRAM] int 
  3483 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3484 ;;		 -> sprintf@f(11), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  2    4[COMRAM] int 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3498 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;Total ram usage:        9 bytes
  3501 ;; Hardware stack levels used: 1
  3502 ;; Hardware stack levels required when called: 5
  3503 ;; This function calls:
  3504 ;;		_putch
  3505 ;; This function is called by:
  3506 ;;		_pad
  3507 ;;		_vfpfcnvrt
  3508 ;;		_fputs
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text14
  3513   002716                     __ptext14:
  3514                           	callstack 0
  3515   002716                     _fputc:
  3516                           	callstack 22
  3517   002716  5007               	movf	fputc@fp^0,w,c
  3518   002718  1008               	iorwf	(fputc@fp+1)^0,w,c
  3519   00271A  B4D8               	btfsc	status,2,c
  3520   00271C  EF92  F013         	goto	u1631
  3521   002720  EF94  F013         	goto	u1630
  3522   002724                     u1631:
  3523   002724  EF9D  F013         	goto	l3572
  3524   002728                     u1630:
  3525   002728  5007               	movf	fputc@fp^0,w,c
  3526   00272A  1008               	iorwf	(fputc@fp+1)^0,w,c
  3527   00272C  A4D8               	btfss	status,2,c
  3528   00272E  EF9B  F013         	goto	u1641
  3529   002732  EF9D  F013         	goto	u1640
  3530   002736                     u1641:
  3531   002736  EFA2  F013         	goto	l3574
  3532   00273A                     u1640:
  3533   00273A                     l3572:
  3534   00273A  5005               	movf	fputc@c^0,w,c
  3535   00273C  EC26  F019         	call	_putch
  3536   002740  EFEF  F013         	goto	l1287
  3537   002744                     l3574:
  3538   002744  EE20 F009          	lfsr	2,9
  3539   002748  5007               	movf	fputc@fp^0,w,c
  3540   00274A  26D9               	addwf	fsr2l,f,c
  3541   00274C  5008               	movf	(fputc@fp+1)^0,w,c
  3542   00274E  22DA               	addwfc	fsr2h,f,c
  3543   002750  50DE               	movf	postinc2,w,c
  3544   002752  10DE               	iorwf	postinc2,w,c
  3545   002754  B4D8               	btfsc	status,2,c
  3546   002756  EFAF  F013         	goto	u1651
  3547   00275A  EFB1  F013         	goto	u1650
  3548   00275E                     u1651:
  3549   00275E  EFCC  F013         	goto	l3578
  3550   002762                     u1650:
  3551   002762  EE20 F009          	lfsr	2,9
  3552   002766  5007               	movf	fputc@fp^0,w,c
  3553   002768  26D9               	addwf	fsr2l,f,c
  3554   00276A  5008               	movf	(fputc@fp+1)^0,w,c
  3555   00276C  22DA               	addwfc	fsr2h,f,c
  3556   00276E  EE10 F003          	lfsr	1,3
  3557   002772  5007               	movf	fputc@fp^0,w,c
  3558   002774  26E1               	addwf	fsr1l,f,c
  3559   002776  5008               	movf	(fputc@fp+1)^0,w,c
  3560   002778  22E2               	addwfc	fsr1h,f,c
  3561   00277A  50DE               	movf	postinc2,w,c
  3562   00277C  5CE6               	subwf	postinc1,w,c
  3563   00277E  50E6               	movf	postinc1,w,c
  3564   002780  0A80               	xorlw	128
  3565   002782  6E0D               	movwf	(??_fputc+4)^0,c
  3566   002784  50DE               	movf	postinc2,w,c
  3567   002786  0A80               	xorlw	128
  3568   002788  580D               	subwfb	(??_fputc+4)^0,w,c
  3569   00278A  B0D8               	btfsc	status,0,c
  3570   00278C  EFCA  F013         	goto	u1661
  3571   002790  EFCC  F013         	goto	u1660
  3572   002794                     u1661:
  3573   002794  EFEF  F013         	goto	l1287
  3574   002798                     u1660:
  3575   002798                     l3578:
  3576   002798  EE20 F003          	lfsr	2,3
  3577   00279C  5007               	movf	fputc@fp^0,w,c
  3578   00279E  26D9               	addwf	fsr2l,f,c
  3579   0027A0  5008               	movf	(fputc@fp+1)^0,w,c
  3580   0027A2  22DA               	addwfc	fsr2h,f,c
  3581   0027A4  CFDE F009          	movff	postinc2,??_fputc
  3582   0027A8  CFDD F00A          	movff	postdec2,??_fputc+1
  3583   0027AC  C007  FFD9         	movff	fputc@fp,fsr2l
  3584   0027B0  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3585   0027B4  CFDE F00B          	movff	postinc2,??_fputc+2
  3586   0027B8  CFDD F00C          	movff	postdec2,??_fputc+3
  3587   0027BC  5009               	movf	??_fputc^0,w,c
  3588   0027BE  240B               	addwf	(??_fputc+2)^0,w,c
  3589   0027C0  6ED9               	movwf	fsr2l,c
  3590   0027C2  500A               	movf	(??_fputc+1)^0,w,c
  3591   0027C4  200C               	addwfc	(??_fputc+3)^0,w,c
  3592   0027C6  6EDA               	movwf	fsr2h,c
  3593   0027C8  C005  FFDF         	movff	fputc@c,indf2
  3594   0027CC  EE20 F003          	lfsr	2,3
  3595   0027D0  5007               	movf	fputc@fp^0,w,c
  3596   0027D2  26D9               	addwf	fsr2l,f,c
  3597   0027D4  5008               	movf	(fputc@fp+1)^0,w,c
  3598   0027D6  22DA               	addwfc	fsr2h,f,c
  3599   0027D8  2ADE               	incf	postinc2,f,c
  3600   0027DA  0E00               	movlw	0
  3601   0027DC  22DD               	addwfc	postdec2,f,c
  3602   0027DE                     l1287:
  3603   0027DE  0012               	return		;funcret
  3604   0027E0                     __end_of_fputc:
  3605                           	callstack 0
  3606                           
  3607 ;; *************** function _putch *****************
  3608 ;; Defined at:
  3609 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  c               1    wreg     unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  c               1    0[COMRAM] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used: 1
  3629 ;; Hardware stack levels required when called: 4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_fputc
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text15
  3638   00324C                     __ptext15:
  3639                           	callstack 0
  3640   00324C                     _putch:
  3641                           	callstack 22
  3642   00324C  0012               	return		;funcret
  3643   00324E                     __end_of_putch:
  3644                           	callstack 0
  3645                           
  3646 ;; *************** function ___aomod *****************
  3647 ;; Defined at:
  3648 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  dividend        8    4[COMRAM] long long 
  3651 ;;  divisor         8   12[COMRAM] long long 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  sign            1   21[COMRAM] unsigned char 
  3654 ;;  counter         1   20[COMRAM] unsigned char 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  8    4[COMRAM] long long 
  3657 ;; Registers used:
  3658 ;;		wreg, status,2, status,0
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3664 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3667 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;Total ram usage:       18 bytes
  3669 ;; Hardware stack levels used: 1
  3670 ;; Hardware stack levels required when called: 4
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_dtoa
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text16
  3679   0020E0                     __ptext16:
  3680                           	callstack 0
  3681   0020E0                     ___aomod:
  3682                           	callstack 22
  3683   0020E0  0E00               	movlw	0
  3684   0020E2  6E16               	movwf	___aomod@sign^0,c
  3685   0020E4  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3686   0020E6  EF79  F010         	goto	u1760
  3687   0020EA  EF77  F010         	goto	u1761
  3688   0020EE                     u1761:
  3689   0020EE  EF8B  F010         	goto	l3646
  3690   0020F2                     u1760:
  3691   0020F2  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3692   0020F4  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3693   0020F6  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3694   0020F8  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3695   0020FA  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3696   0020FC  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3697   0020FE  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3698   002100  6C05               	negf	___aomod@dividend^0,c
  3699   002102  0E00               	movlw	0
  3700   002104  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3701   002106  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3702   002108  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3703   00210A  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3704   00210C  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3705   00210E  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3706   002110  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3707   002112  0E01               	movlw	1
  3708   002114  6E16               	movwf	___aomod@sign^0,c
  3709   002116                     l3646:
  3710   002116  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3711   002118  EF92  F010         	goto	u1770
  3712   00211C  EF90  F010         	goto	u1771
  3713   002120                     u1771:
  3714   002120  EFA2  F010         	goto	l3650
  3715   002124                     u1770:
  3716   002124  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3717   002126  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3718   002128  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3719   00212A  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3720   00212C  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3721   00212E  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3722   002130  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3723   002132  6C0D               	negf	___aomod@divisor^0,c
  3724   002134  0E00               	movlw	0
  3725   002136  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3726   002138  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3727   00213A  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3728   00213C  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3729   00213E  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3730   002140  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3731   002142  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3732   002144                     l3650:
  3733   002144  500D               	movf	___aomod@divisor^0,w,c
  3734   002146  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3735   002148  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3736   00214A  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3737   00214C  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3738   00214E  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3739   002150  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3740   002152  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3741   002154  B4D8               	btfsc	status,2,c
  3742   002156  EFAF  F010         	goto	u1781
  3743   00215A  EFB1  F010         	goto	u1780
  3744   00215E                     u1781:
  3745   00215E  EFF9  F010         	goto	l3666
  3746   002162                     u1780:
  3747   002162  0E01               	movlw	1
  3748   002164  6E15               	movwf	___aomod@counter^0,c
  3749   002166  EFBF  F010         	goto	l3656
  3750   00216A                     l3654:
  3751   00216A  90D8               	bcf	status,0,c
  3752   00216C  360D               	rlcf	___aomod@divisor^0,f,c
  3753   00216E  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3754   002170  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3755   002172  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3756   002174  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3757   002176  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3758   002178  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3759   00217A  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3760   00217C  2A15               	incf	___aomod@counter^0,f,c
  3761   00217E                     l3656:
  3762   00217E  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3763   002180  EFC4  F010         	goto	u1791
  3764   002184  EFC6  F010         	goto	u1790
  3765   002188                     u1791:
  3766   002188  EFB5  F010         	goto	l3654
  3767   00218C                     u1790:
  3768   00218C                     l3658:
  3769   00218C  500D               	movf	___aomod@divisor^0,w,c
  3770   00218E  5C05               	subwf	___aomod@dividend^0,w,c
  3771   002190  500E               	movf	(___aomod@divisor+1)^0,w,c
  3772   002192  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3773   002194  500F               	movf	(___aomod@divisor+2)^0,w,c
  3774   002196  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3775   002198  5010               	movf	(___aomod@divisor+3)^0,w,c
  3776   00219A  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3777   00219C  5011               	movf	(___aomod@divisor+4)^0,w,c
  3778   00219E  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3779   0021A0  5012               	movf	(___aomod@divisor+5)^0,w,c
  3780   0021A2  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3781   0021A4  5013               	movf	(___aomod@divisor+6)^0,w,c
  3782   0021A6  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3783   0021A8  5014               	movf	(___aomod@divisor+7)^0,w,c
  3784   0021AA  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3785   0021AC  A0D8               	btfss	status,0,c
  3786   0021AE  EFDB  F010         	goto	u1801
  3787   0021B2  EFDD  F010         	goto	u1800
  3788   0021B6                     u1801:
  3789   0021B6  EFED  F010         	goto	l3662
  3790   0021BA                     u1800:
  3791   0021BA  500D               	movf	___aomod@divisor^0,w,c
  3792   0021BC  5E05               	subwf	___aomod@dividend^0,f,c
  3793   0021BE  500E               	movf	(___aomod@divisor+1)^0,w,c
  3794   0021C0  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3795   0021C2  500F               	movf	(___aomod@divisor+2)^0,w,c
  3796   0021C4  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3797   0021C6  5010               	movf	(___aomod@divisor+3)^0,w,c
  3798   0021C8  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3799   0021CA  5011               	movf	(___aomod@divisor+4)^0,w,c
  3800   0021CC  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3801   0021CE  5012               	movf	(___aomod@divisor+5)^0,w,c
  3802   0021D0  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3803   0021D2  5013               	movf	(___aomod@divisor+6)^0,w,c
  3804   0021D4  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3805   0021D6  5014               	movf	(___aomod@divisor+7)^0,w,c
  3806   0021D8  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3807   0021DA                     l3662:
  3808   0021DA  90D8               	bcf	status,0,c
  3809   0021DC  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3810   0021DE  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3811   0021E0  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3812   0021E2  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3813   0021E4  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3814   0021E6  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3815   0021E8  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3816   0021EA  320D               	rrcf	___aomod@divisor^0,f,c
  3817   0021EC  2E15               	decfsz	___aomod@counter^0,f,c
  3818   0021EE  EFC6  F010         	goto	l3658
  3819   0021F2                     l3666:
  3820   0021F2  5016               	movf	___aomod@sign^0,w,c
  3821   0021F4  B4D8               	btfsc	status,2,c
  3822   0021F6  EFFF  F010         	goto	u1811
  3823   0021FA  EF01  F011         	goto	u1810
  3824   0021FE                     u1811:
  3825   0021FE  EF11  F011         	goto	l3670
  3826   002202                     u1810:
  3827   002202  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3828   002204  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3829   002206  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3830   002208  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3831   00220A  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3832   00220C  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3833   00220E  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3834   002210  6C05               	negf	___aomod@dividend^0,c
  3835   002212  0E00               	movlw	0
  3836   002214  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3837   002216  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3838   002218  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3839   00221A  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3840   00221C  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3841   00221E  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3842   002220  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3843   002222                     l3670:
  3844   002222  C005  F005         	movff	___aomod@dividend,?___aomod
  3845   002226  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3846   00222A  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3847   00222E  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3848   002232  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3849   002236  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3850   00223A  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3851   00223E  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3852   002242  0012               	return		;funcret
  3853   002244                     __end_of___aomod:
  3854                           	callstack 0
  3855                           
  3856 ;; *************** function ___aodiv *****************
  3857 ;; Defined at:
  3858 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  dividend        8    4[COMRAM] long long 
  3861 ;;  divisor         8   12[COMRAM] long long 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  quotient        8   22[COMRAM] long long 
  3864 ;;  sign            1   21[COMRAM] unsigned char 
  3865 ;;  counter         1   20[COMRAM] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  8    4[COMRAM] long long 
  3868 ;; Registers used:
  3869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3875 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;Total ram usage:       26 bytes
  3880 ;; Hardware stack levels used: 1
  3881 ;; Hardware stack levels required when called: 4
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_dtoa
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text17
  3890   001DEC                     __ptext17:
  3891                           	callstack 0
  3892   001DEC                     ___aodiv:
  3893                           	callstack 22
  3894   001DEC  0E00               	movlw	0
  3895   001DEE  6E16               	movwf	___aodiv@sign^0,c
  3896   001DF0  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3897   001DF2  EFFF  F00E         	goto	u1690
  3898   001DF6  EFFD  F00E         	goto	u1691
  3899   001DFA                     u1691:
  3900   001DFA  EF11  F00F         	goto	l3602
  3901   001DFE                     u1690:
  3902   001DFE  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3903   001E00  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3904   001E02  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3905   001E04  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3906   001E06  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3907   001E08  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3908   001E0A  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3909   001E0C  6C0D               	negf	___aodiv@divisor^0,c
  3910   001E0E  0E00               	movlw	0
  3911   001E10  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3912   001E12  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3913   001E14  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3914   001E16  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3915   001E18  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3916   001E1A  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3917   001E1C  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3918   001E1E  0E01               	movlw	1
  3919   001E20  6E16               	movwf	___aodiv@sign^0,c
  3920   001E22                     l3602:
  3921   001E22  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3922   001E24  EF18  F00F         	goto	u1700
  3923   001E28  EF16  F00F         	goto	u1701
  3924   001E2C                     u1701:
  3925   001E2C  EF2A  F00F         	goto	l3608
  3926   001E30                     u1700:
  3927   001E30  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3928   001E32  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3929   001E34  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3930   001E36  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3931   001E38  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3932   001E3A  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3933   001E3C  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3934   001E3E  6C05               	negf	___aodiv@dividend^0,c
  3935   001E40  0E00               	movlw	0
  3936   001E42  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3937   001E44  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3938   001E46  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3939   001E48  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3940   001E4A  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3941   001E4C  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3942   001E4E  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3943   001E50  0E01               	movlw	1
  3944   001E52  1A16               	xorwf	___aodiv@sign^0,f,c
  3945   001E54                     l3608:
  3946   001E54  EE20  F017         	lfsr	2,___aodiv@quotient
  3947   001E58  0E07               	movlw	7
  3948   001E5A                     u1711:
  3949   001E5A  6ADE               	clrf	postinc2,c
  3950   001E5C  06E8               	decf	wreg,f,c
  3951   001E5E  E2FD               	bc	u1711
  3952   001E60  500D               	movf	___aodiv@divisor^0,w,c
  3953   001E62  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3954   001E64  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3955   001E66  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3956   001E68  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3957   001E6A  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3958   001E6C  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3959   001E6E  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3960   001E70  B4D8               	btfsc	status,2,c
  3961   001E72  EF3D  F00F         	goto	u1721
  3962   001E76  EF3F  F00F         	goto	u1720
  3963   001E7A                     u1721:
  3964   001E7A  EF91  F00F         	goto	l3630
  3965   001E7E                     u1720:
  3966   001E7E  0E01               	movlw	1
  3967   001E80  6E15               	movwf	___aodiv@counter^0,c
  3968   001E82  EF4D  F00F         	goto	l3616
  3969   001E86                     l3614:
  3970   001E86  90D8               	bcf	status,0,c
  3971   001E88  360D               	rlcf	___aodiv@divisor^0,f,c
  3972   001E8A  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3973   001E8C  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3974   001E8E  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3975   001E90  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3976   001E92  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3977   001E94  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3978   001E96  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3979   001E98  2A15               	incf	___aodiv@counter^0,f,c
  3980   001E9A                     l3616:
  3981   001E9A  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3982   001E9C  EF52  F00F         	goto	u1731
  3983   001EA0  EF54  F00F         	goto	u1730
  3984   001EA4                     u1731:
  3985   001EA4  EF43  F00F         	goto	l3614
  3986   001EA8                     u1730:
  3987   001EA8                     l3618:
  3988   001EA8  90D8               	bcf	status,0,c
  3989   001EAA  3617               	rlcf	___aodiv@quotient^0,f,c
  3990   001EAC  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3991   001EAE  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3992   001EB0  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3993   001EB2  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3994   001EB4  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3995   001EB6  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3996   001EB8  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3997   001EBA  500D               	movf	___aodiv@divisor^0,w,c
  3998   001EBC  5C05               	subwf	___aodiv@dividend^0,w,c
  3999   001EBE  500E               	movf	(___aodiv@divisor+1)^0,w,c
  4000   001EC0  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  4001   001EC2  500F               	movf	(___aodiv@divisor+2)^0,w,c
  4002   001EC4  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  4003   001EC6  5010               	movf	(___aodiv@divisor+3)^0,w,c
  4004   001EC8  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  4005   001ECA  5011               	movf	(___aodiv@divisor+4)^0,w,c
  4006   001ECC  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  4007   001ECE  5012               	movf	(___aodiv@divisor+5)^0,w,c
  4008   001ED0  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  4009   001ED2  5013               	movf	(___aodiv@divisor+6)^0,w,c
  4010   001ED4  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  4011   001ED6  5014               	movf	(___aodiv@divisor+7)^0,w,c
  4012   001ED8  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  4013   001EDA  A0D8               	btfss	status,0,c
  4014   001EDC  EF72  F00F         	goto	u1741
  4015   001EE0  EF74  F00F         	goto	u1740
  4016   001EE4                     u1741:
  4017   001EE4  EF85  F00F         	goto	l3626
  4018   001EE8                     u1740:
  4019   001EE8  500D               	movf	___aodiv@divisor^0,w,c
  4020   001EEA  5E05               	subwf	___aodiv@dividend^0,f,c
  4021   001EEC  500E               	movf	(___aodiv@divisor+1)^0,w,c
  4022   001EEE  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  4023   001EF0  500F               	movf	(___aodiv@divisor+2)^0,w,c
  4024   001EF2  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  4025   001EF4  5010               	movf	(___aodiv@divisor+3)^0,w,c
  4026   001EF6  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  4027   001EF8  5011               	movf	(___aodiv@divisor+4)^0,w,c
  4028   001EFA  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  4029   001EFC  5012               	movf	(___aodiv@divisor+5)^0,w,c
  4030   001EFE  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  4031   001F00  5013               	movf	(___aodiv@divisor+6)^0,w,c
  4032   001F02  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  4033   001F04  5014               	movf	(___aodiv@divisor+7)^0,w,c
  4034   001F06  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  4035   001F08  8017               	bsf	___aodiv@quotient^0,0,c
  4036   001F0A                     l3626:
  4037   001F0A  90D8               	bcf	status,0,c
  4038   001F0C  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  4039   001F0E  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  4040   001F10  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  4041   001F12  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  4042   001F14  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  4043   001F16  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  4044   001F18  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  4045   001F1A  320D               	rrcf	___aodiv@divisor^0,f,c
  4046   001F1C  2E15               	decfsz	___aodiv@counter^0,f,c
  4047   001F1E  EF54  F00F         	goto	l3618
  4048   001F22                     l3630:
  4049   001F22  5016               	movf	___aodiv@sign^0,w,c
  4050   001F24  B4D8               	btfsc	status,2,c
  4051   001F26  EF97  F00F         	goto	u1751
  4052   001F2A  EF99  F00F         	goto	u1750
  4053   001F2E                     u1751:
  4054   001F2E  EFA9  F00F         	goto	l3634
  4055   001F32                     u1750:
  4056   001F32  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  4057   001F34  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  4058   001F36  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  4059   001F38  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  4060   001F3A  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  4061   001F3C  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  4062   001F3E  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  4063   001F40  6C17               	negf	___aodiv@quotient^0,c
  4064   001F42  0E00               	movlw	0
  4065   001F44  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  4066   001F46  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  4067   001F48  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  4068   001F4A  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  4069   001F4C  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  4070   001F4E  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  4071   001F50  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  4072   001F52                     l3634:
  4073   001F52  C017  F005         	movff	___aodiv@quotient,?___aodiv
  4074   001F56  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  4075   001F5A  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  4076   001F5E  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  4077   001F62  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  4078   001F66  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  4079   001F6A  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  4080   001F6E  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  4081   001F72  0012               	return		;funcret
  4082   001F74                     __end_of___aodiv:
  4083                           	callstack 0
  4084                           
  4085 ;; *************** function _sendStringSerial4 *****************
  4086 ;; Defined at:
  4087 ;;		line 39 in file "serial.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  string          2    5[COMRAM] PTR unsigned char 
  4090 ;;		 -> main@buf(150), 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;Total ram usage:        2 bytes
  4107 ;; Hardware stack levels used: 1
  4108 ;; Hardware stack levels required when called: 5
  4109 ;; This function calls:
  4110 ;;		_sendCharSerial4
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;;		_clear_read_calibration
  4114 ;;		_card_response
  4115 ;;		_card_response_easy
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text18
  4120   003052                     __ptext18:
  4121                           	callstack 0
  4122   003052                     _sendStringSerial4:
  4123                           	callstack 25
  4124   003052                     
  4125                           ;serial.c: 40:  while(*string != 0) {
  4126   003052  EF34  F018         	goto	l2956
  4127   003056                     l2952:
  4128                           
  4129                           ;serial.c: 41:         sendCharSerial4(*string++);
  4130   003056  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4131   00305A  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4132   00305E  50DF               	movf	indf2,w,c
  4133   003060  ECD7  F018         	call	_sendCharSerial4
  4134   003064  4A06               	infsnz	sendStringSerial4@string^0,f,c
  4135   003066  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  4136   003068                     l2956:
  4137                           
  4138                           ;serial.c: 40:  while(*string != 0) {
  4139   003068  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4140   00306C  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4141   003070  50DF               	movf	indf2,w,c
  4142   003072  A4D8               	btfss	status,2,c
  4143   003074  EF3E  F018         	goto	u1411
  4144   003078  EF40  F018         	goto	u1410
  4145   00307C                     u1411:
  4146   00307C  EF2B  F018         	goto	l2952
  4147   003080                     u1410:
  4148   003080  0012               	return		;funcret
  4149   003082                     __end_of_sendStringSerial4:
  4150                           	callstack 0
  4151                           
  4152 ;; *************** function _sendCharSerial4 *****************
  4153 ;; Defined at:
  4154 ;;		line 32 in file "serial.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  charToSend      1    wreg     unsigned char 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  charToSend      1    4[COMRAM] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used: 1
  4174 ;; Hardware stack levels required when called: 4
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_sendStringSerial4
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text19
  4183   0031AE                     __ptext19:
  4184                           	callstack 0
  4185   0031AE                     _sendCharSerial4:
  4186                           	callstack 25
  4187                           
  4188                           ;incstack = 0
  4189                           ;sendCharSerial4@charToSend stored from wreg
  4190   0031AE  6E05               	movwf	sendCharSerial4@charToSend^0,c
  4191   0031B0                     l430:
  4192   0031B0  010E               	movlb	14	; () banked
  4193   0031B2  A537               	btfss	55,2,b	;volatile
  4194   0031B4  EFDE  F018         	goto	u1321
  4195   0031B8  EFE0  F018         	goto	u1320
  4196   0031BC                     u1321:
  4197   0031BC  EFD8  F018         	goto	l430
  4198   0031C0                     u1320:
  4199   0031C0                     
  4200                           ; BSR set to: 14
  4201                           ;serial.c: 34:     TX4REG = charToSend;
  4202   0031C0  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4203   0031C4                     
  4204                           ; BSR set to: 14
  4205   0031C4  0012               	return		;funcret
  4206   0031C6                     __end_of_sendCharSerial4:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _normalise_readings *****************
  4210 ;; Defined at:
  4211 ;;		line 70 in file "colour_identify.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  buf             2   26[COMRAM] PTR unsigned char 
  4214 ;;		 -> main@buf(150), 
  4215 ;;  clear_read      2   28[COMRAM] unsigned int 
  4216 ;;  red_read        2   30[COMRAM] unsigned int 
  4217 ;;  green_read      2   32[COMRAM] unsigned int 
  4218 ;;  blue_read       2   34[COMRAM] unsigned int 
  4219 ;;  expected_val    2   36[COMRAM] PTR unsigned int [9]
  4220 ;;		 -> main@expected_values(72), 
  4221 ;;  normalised_v    2   38[COMRAM] PTR unsigned int [9]
  4222 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  difference      2   48[COMRAM] unsigned int 
  4225 ;;  i               1   50[COMRAM] enum E14551
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4235 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4239 ;;Total ram usage:       25 bytes
  4240 ;; Hardware stack levels used: 1
  4241 ;; Hardware stack levels required when called: 5
  4242 ;; This function calls:
  4243 ;;		___lwdiv
  4244 ;;		___wmul
  4245 ;;		_abs
  4246 ;; This function is called by:
  4247 ;;		_card_response
  4248 ;;		_card_response_easy
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text20
  4253   001610                     __ptext20:
  4254                           	callstack 0
  4255   001610                     _normalise_readings:
  4256                           	callstack 24
  4257   001610                     
  4258                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  4259   001610  0E00               	movlw	0
  4260   001612  6E33               	movwf	normalise_readings@i^0,c
  4261   001614                     l3798:
  4262                           
  4263                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  4264   001614  5033               	movf	normalise_readings@i^0,w,c
  4265   001616  0D02               	mullw	2
  4266   001618  CFF3 F029          	movff	prodl,??_normalise_readings
  4267   00161C  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4268   001620  5029               	movf	??_normalise_readings^0,w,c
  4269   001622  2425               	addwf	normalise_readings@expected_values^0,w,c
  4270   001624  6ED9               	movwf	fsr2l,c
  4271   001626  502A               	movf	(??_normalise_readings+1)^0,w,c
  4272   001628  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4273   00162A  6EDA               	movwf	fsr2h,c
  4274   00162C  CFDE F02B          	movff	postinc2,??_normalise_readings+2
  4275   001630  CFDD F02C          	movff	postdec2,??_normalise_readings+3
  4276   001634  502B               	movf	(??_normalise_readings+2)^0,w,c
  4277   001636  5C1F               	subwf	normalise_readings@red_read^0,w,c
  4278   001638  6E17               	movwf	abs@a^0,c
  4279   00163A  502C               	movf	(??_normalise_readings+3)^0,w,c
  4280   00163C  5820               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4281   00163E  6E18               	movwf	(abs@a+1)^0,c
  4282   001640  ECD0  F017         	call	_abs	;wreg free
  4283   001644  C017  F031         	movff	?_abs,normalise_readings@difference
  4284   001648  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4285                           
  4286                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4287   00164C  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4288   001650  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4289   001654  0E00               	movlw	0
  4290   001656  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4291   001658  0E64               	movlw	100
  4292   00165A  6E07               	movwf	___wmul@multiplicand^0,c
  4293   00165C  EC93  F018         	call	___wmul	;wreg free
  4294   001660  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4295   001664  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4296   001668  5033               	movf	normalise_readings@i^0,w,c
  4297   00166A  0D02               	mullw	2
  4298   00166C  CFF3 F029          	movff	prodl,??_normalise_readings
  4299   001670  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4300   001674  5029               	movf	??_normalise_readings^0,w,c
  4301   001676  2425               	addwf	normalise_readings@expected_values^0,w,c
  4302   001678  6ED9               	movwf	fsr2l,c
  4303   00167A  502A               	movf	(??_normalise_readings+1)^0,w,c
  4304   00167C  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4305   00167E  6EDA               	movwf	fsr2h,c
  4306   001680  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4307   001684  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4308   001688  EC2C  F016         	call	___lwdiv	;wreg free
  4309   00168C  5033               	movf	normalise_readings@i^0,w,c
  4310   00168E  0D02               	mullw	2
  4311   001690  CFF3 F02B          	movff	prodl,??_normalise_readings+2
  4312   001694  CFF4 F02C          	movff	prodh,??_normalise_readings+3
  4313   001698  502B               	movf	(??_normalise_readings+2)^0,w,c
  4314   00169A  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4315   00169C  6ED9               	movwf	fsr2l,c
  4316   00169E  502C               	movf	(??_normalise_readings+3)^0,w,c
  4317   0016A0  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4318   0016A2  6EDA               	movwf	fsr2h,c
  4319   0016A4  C00B  FFDE         	movff	?___lwdiv,postinc2
  4320   0016A8  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4321                           
  4322                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4323   0016AC  5033               	movf	normalise_readings@i^0,w,c
  4324   0016AE  0D02               	mullw	2
  4325   0016B0  CFF3 F029          	movff	prodl,??_normalise_readings
  4326   0016B4  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4327   0016B8  5029               	movf	??_normalise_readings^0,w,c
  4328   0016BA  2425               	addwf	normalise_readings@expected_values^0,w,c
  4329   0016BC  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4330   0016BE  502A               	movf	(??_normalise_readings+1)^0,w,c
  4331   0016C0  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4332   0016C2  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4333   0016C4  0E12               	movlw	18
  4334   0016C6  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4335   0016C8  6ED9               	movwf	fsr2l,c
  4336   0016CA  0E00               	movlw	0
  4337   0016CC  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4338   0016CE  6EDA               	movwf	fsr2h,c
  4339   0016D0  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4340   0016D4  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4341   0016D8  502D               	movf	(??_normalise_readings+4)^0,w,c
  4342   0016DA  5C21               	subwf	normalise_readings@green_read^0,w,c
  4343   0016DC  6E17               	movwf	abs@a^0,c
  4344   0016DE  502E               	movf	(??_normalise_readings+5)^0,w,c
  4345   0016E0  5822               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4346   0016E2  6E18               	movwf	(abs@a+1)^0,c
  4347   0016E4  ECD0  F017         	call	_abs	;wreg free
  4348   0016E8  C017  F031         	movff	?_abs,normalise_readings@difference
  4349   0016EC  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4350                           
  4351                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4352   0016F0  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4353   0016F4  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4354   0016F8  0E00               	movlw	0
  4355   0016FA  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4356   0016FC  0E64               	movlw	100
  4357   0016FE  6E07               	movwf	___wmul@multiplicand^0,c
  4358   001700  EC93  F018         	call	___wmul	;wreg free
  4359   001704  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4360   001708  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4361   00170C  5033               	movf	normalise_readings@i^0,w,c
  4362   00170E  0D02               	mullw	2
  4363   001710  CFF3 F029          	movff	prodl,??_normalise_readings
  4364   001714  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4365   001718  5029               	movf	??_normalise_readings^0,w,c
  4366   00171A  2425               	addwf	normalise_readings@expected_values^0,w,c
  4367   00171C  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4368   00171E  502A               	movf	(??_normalise_readings+1)^0,w,c
  4369   001720  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4370   001722  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4371   001724  0E12               	movlw	18
  4372   001726  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4373   001728  6ED9               	movwf	fsr2l,c
  4374   00172A  0E00               	movlw	0
  4375   00172C  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4376   00172E  6EDA               	movwf	fsr2h,c
  4377   001730  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4378   001734  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4379   001738  EC2C  F016         	call	___lwdiv	;wreg free
  4380   00173C  5033               	movf	normalise_readings@i^0,w,c
  4381   00173E  0D02               	mullw	2
  4382   001740  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4383   001744  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4384   001748  502D               	movf	(??_normalise_readings+4)^0,w,c
  4385   00174A  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4386   00174C  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4387   00174E  502E               	movf	(??_normalise_readings+5)^0,w,c
  4388   001750  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4389   001752  6E30               	movwf	(??_normalise_readings+7)^0,c
  4390   001754  0E12               	movlw	18
  4391   001756  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4392   001758  6ED9               	movwf	fsr2l,c
  4393   00175A  0E00               	movlw	0
  4394   00175C  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4395   00175E  6EDA               	movwf	fsr2h,c
  4396   001760  C00B  FFDE         	movff	?___lwdiv,postinc2
  4397   001764  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4398                           
  4399                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  4400   001768  5033               	movf	normalise_readings@i^0,w,c
  4401   00176A  0D02               	mullw	2
  4402   00176C  CFF3 F029          	movff	prodl,??_normalise_readings
  4403   001770  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4404   001774  5029               	movf	??_normalise_readings^0,w,c
  4405   001776  2425               	addwf	normalise_readings@expected_values^0,w,c
  4406   001778  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4407   00177A  502A               	movf	(??_normalise_readings+1)^0,w,c
  4408   00177C  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4409   00177E  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4410   001780  0E24               	movlw	36
  4411   001782  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4412   001784  6ED9               	movwf	fsr2l,c
  4413   001786  0E00               	movlw	0
  4414   001788  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4415   00178A  6EDA               	movwf	fsr2h,c
  4416   00178C  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4417   001790  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4418   001794  502D               	movf	(??_normalise_readings+4)^0,w,c
  4419   001796  5C23               	subwf	normalise_readings@blue_read^0,w,c
  4420   001798  6E17               	movwf	abs@a^0,c
  4421   00179A  502E               	movf	(??_normalise_readings+5)^0,w,c
  4422   00179C  5824               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4423   00179E  6E18               	movwf	(abs@a+1)^0,c
  4424   0017A0  ECD0  F017         	call	_abs	;wreg free
  4425   0017A4  C017  F031         	movff	?_abs,normalise_readings@difference
  4426   0017A8  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4427                           
  4428                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4429   0017AC  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4430   0017B0  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4431   0017B4  0E00               	movlw	0
  4432   0017B6  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4433   0017B8  0E64               	movlw	100
  4434   0017BA  6E07               	movwf	___wmul@multiplicand^0,c
  4435   0017BC  EC93  F018         	call	___wmul	;wreg free
  4436   0017C0  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4437   0017C4  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4438   0017C8  5033               	movf	normalise_readings@i^0,w,c
  4439   0017CA  0D02               	mullw	2
  4440   0017CC  CFF3 F029          	movff	prodl,??_normalise_readings
  4441   0017D0  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4442   0017D4  5029               	movf	??_normalise_readings^0,w,c
  4443   0017D6  2425               	addwf	normalise_readings@expected_values^0,w,c
  4444   0017D8  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4445   0017DA  502A               	movf	(??_normalise_readings+1)^0,w,c
  4446   0017DC  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4447   0017DE  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4448   0017E0  0E24               	movlw	36
  4449   0017E2  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4450   0017E4  6ED9               	movwf	fsr2l,c
  4451   0017E6  0E00               	movlw	0
  4452   0017E8  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4453   0017EA  6EDA               	movwf	fsr2h,c
  4454   0017EC  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4455   0017F0  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4456   0017F4  EC2C  F016         	call	___lwdiv	;wreg free
  4457   0017F8  5033               	movf	normalise_readings@i^0,w,c
  4458   0017FA  0D02               	mullw	2
  4459   0017FC  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4460   001800  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4461   001804  502D               	movf	(??_normalise_readings+4)^0,w,c
  4462   001806  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4463   001808  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4464   00180A  502E               	movf	(??_normalise_readings+5)^0,w,c
  4465   00180C  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4466   00180E  6E30               	movwf	(??_normalise_readings+7)^0,c
  4467   001810  0E24               	movlw	36
  4468   001812  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4469   001814  6ED9               	movwf	fsr2l,c
  4470   001816  0E00               	movlw	0
  4471   001818  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4472   00181A  6EDA               	movwf	fsr2h,c
  4473   00181C  C00B  FFDE         	movff	?___lwdiv,postinc2
  4474   001820  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4475                           
  4476                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  4477   001824  5033               	movf	normalise_readings@i^0,w,c
  4478   001826  0D02               	mullw	2
  4479   001828  CFF3 F029          	movff	prodl,??_normalise_readings
  4480   00182C  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4481   001830  5029               	movf	??_normalise_readings^0,w,c
  4482   001832  2425               	addwf	normalise_readings@expected_values^0,w,c
  4483   001834  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4484   001836  502A               	movf	(??_normalise_readings+1)^0,w,c
  4485   001838  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4486   00183A  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4487   00183C  0E36               	movlw	54
  4488   00183E  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4489   001840  6ED9               	movwf	fsr2l,c
  4490   001842  0E00               	movlw	0
  4491   001844  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4492   001846  6EDA               	movwf	fsr2h,c
  4493   001848  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4494   00184C  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4495   001850  502D               	movf	(??_normalise_readings+4)^0,w,c
  4496   001852  5C1D               	subwf	normalise_readings@clear_read^0,w,c
  4497   001854  6E17               	movwf	abs@a^0,c
  4498   001856  502E               	movf	(??_normalise_readings+5)^0,w,c
  4499   001858  581E               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  4500   00185A  6E18               	movwf	(abs@a+1)^0,c
  4501   00185C  ECD0  F017         	call	_abs	;wreg free
  4502   001860  C017  F031         	movff	?_abs,normalise_readings@difference
  4503   001864  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4504                           
  4505                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  4506   001868  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4507   00186C  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4508   001870  0E00               	movlw	0
  4509   001872  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4510   001874  0E64               	movlw	100
  4511   001876  6E07               	movwf	___wmul@multiplicand^0,c
  4512   001878  EC93  F018         	call	___wmul	;wreg free
  4513   00187C  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4514   001880  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4515   001884  5033               	movf	normalise_readings@i^0,w,c
  4516   001886  0D02               	mullw	2
  4517   001888  CFF3 F029          	movff	prodl,??_normalise_readings
  4518   00188C  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4519   001890  5029               	movf	??_normalise_readings^0,w,c
  4520   001892  2425               	addwf	normalise_readings@expected_values^0,w,c
  4521   001894  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4522   001896  502A               	movf	(??_normalise_readings+1)^0,w,c
  4523   001898  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4524   00189A  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4525   00189C  0E36               	movlw	54
  4526   00189E  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4527   0018A0  6ED9               	movwf	fsr2l,c
  4528   0018A2  0E00               	movlw	0
  4529   0018A4  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4530   0018A6  6EDA               	movwf	fsr2h,c
  4531   0018A8  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4532   0018AC  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4533   0018B0  EC2C  F016         	call	___lwdiv	;wreg free
  4534   0018B4  5033               	movf	normalise_readings@i^0,w,c
  4535   0018B6  0D02               	mullw	2
  4536   0018B8  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4537   0018BC  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4538   0018C0  502D               	movf	(??_normalise_readings+4)^0,w,c
  4539   0018C2  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4540   0018C4  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4541   0018C6  502E               	movf	(??_normalise_readings+5)^0,w,c
  4542   0018C8  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4543   0018CA  6E30               	movwf	(??_normalise_readings+7)^0,c
  4544   0018CC  0E36               	movlw	54
  4545   0018CE  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4546   0018D0  6ED9               	movwf	fsr2l,c
  4547   0018D2  0E00               	movlw	0
  4548   0018D4  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4549   0018D6  6EDA               	movwf	fsr2h,c
  4550   0018D8  C00B  FFDE         	movff	?___lwdiv,postinc2
  4551   0018DC  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4552   0018E0                     
  4553                           ;colour_identify.c: 97:     }
  4554   0018E0  2A33               	incf	normalise_readings@i^0,f,c
  4555   0018E2  0E08               	movlw	8
  4556   0018E4  6433               	cpfsgt	normalise_readings@i^0,c
  4557   0018E6  EF77  F00C         	goto	u1981
  4558   0018EA  EF79  F00C         	goto	u1980
  4559   0018EE                     u1981:
  4560   0018EE  EF0A  F00B         	goto	l3798
  4561   0018F2                     u1980:
  4562   0018F2  0012               	return		;funcret
  4563   0018F4                     __end_of_normalise_readings:
  4564                           	callstack 0
  4565                           
  4566 ;; *************** function _abs *****************
  4567 ;; Defined at:
  4568 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  a               2   22[COMRAM] int 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  2   22[COMRAM] int 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4582 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4586 ;;Total ram usage:        4 bytes
  4587 ;; Hardware stack levels used: 1
  4588 ;; Hardware stack levels required when called: 4
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_normalise_readings
  4593 ;;		_dtoa
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text21
  4598   002FA0                     __ptext21:
  4599                           	callstack 0
  4600   002FA0                     _abs:
  4601                           	callstack 22
  4602   002FA0  BE18               	btfsc	(abs@a+1)^0,7,c
  4603   002FA2  EFDD  F017         	goto	u1680
  4604   002FA6  5018               	movf	(abs@a+1)^0,w,c
  4605   002FA8  E106               	bnz	u1681
  4606   002FAA  0417               	decf	abs@a^0,w,c
  4607   002FAC  B0D8               	btfsc	status,0,c
  4608   002FAE  EFDB  F017         	goto	u1681
  4609   002FB2  EFDD  F017         	goto	u1680
  4610   002FB6                     u1681:
  4611   002FB6  EFEB  F017         	goto	l1207
  4612   002FBA                     u1680:
  4613   002FBA  C017  F019         	movff	abs@a,??_abs
  4614   002FBE  C018  F01A         	movff	abs@a+1,??_abs+1
  4615   002FC2  1E19               	comf	??_abs^0,f,c
  4616   002FC4  1E1A               	comf	(??_abs+1)^0,f,c
  4617   002FC6  4A19               	infsnz	??_abs^0,f,c
  4618   002FC8  2A1A               	incf	(??_abs+1)^0,f,c
  4619   002FCA  C019  F017         	movff	??_abs,?_abs
  4620   002FCE  C01A  F018         	movff	??_abs+1,?_abs+1
  4621   002FD2  EFEF  F017         	goto	l1210
  4622   002FD6                     l1207:
  4623   002FD6  C017  F017         	movff	abs@a,?_abs
  4624   002FDA  C018  F018         	movff	abs@a+1,?_abs+1
  4625   002FDE                     l1210:
  4626   002FDE  0012               	return		;funcret
  4627   002FE0                     __end_of_abs:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function _motor_response *****************
  4631 ;; Defined at:
  4632 ;;		line 126 in file "colour_identify.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  card            1    wreg     enum E14551
  4635 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4636 ;;		 -> main@motorL(9), 
  4637 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4638 ;;		 -> main@motorR(9), 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  card            1   37[COMRAM] enum E14551
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;Total ram usage:        7 bytes
  4655 ;; Hardware stack levels used: 1
  4656 ;; Hardware stack levels required when called: 7
  4657 ;; This function calls:
  4658 ;;		_reverseFullSpeed
  4659 ;;		_stop
  4660 ;;		_turnLeft45
  4661 ;;		_turnRight45
  4662 ;; This function is called by:
  4663 ;;		_card_response
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text22
  4668   000E7A                     __ptext22:
  4669                           	callstack 0
  4670   000E7A                     _motor_response:
  4671                           	callstack 22
  4672                           
  4673                           ;incstack = 0
  4674                           ;motor_response@card stored from wreg
  4675   000E7A  6E26               	movwf	motor_response@card^0,c
  4676   000E7C                     
  4677                           ;colour_identify.c: 128:     switch (card){
  4678   000E7C  EF07  F009         	goto	l3124
  4679   000E80                     l3008:
  4680                           
  4681                           ;colour_identify.c: 130:             reverseFullSpeed(mL,mR);
  4682   000E80  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4683   000E84  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4684   000E88  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4685   000E8C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4686   000E90  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4687   000E94                     
  4688                           ;colour_identify.c: 131:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4689   000E94  0E0D               	movlw	13
  4690   000E96  6E25               	movwf	(??_motor_response+1)^0,c
  4691   000E98  0E2D               	movlw	45
  4692   000E9A  6E24               	movwf	??_motor_response^0,c
  4693   000E9C  0ED8               	movlw	216
  4694   000E9E                     u2167:
  4695   000E9E  2EE8               	decfsz	wreg,f,c
  4696   000EA0  D7FE               	bra	u2167
  4697   000EA2  2E24               	decfsz	??_motor_response^0,f,c
  4698   000EA4  D7FC               	bra	u2167
  4699   000EA6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4700   000EA8  D7FA               	bra	u2167
  4701   000EAA                     l3012:
  4702                           
  4703                           ;colour_identify.c: 132:             turnRight45(mL,mR);
  4704   000EAA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4705   000EAE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4706   000EB2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4707   000EB6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4708   000EBA  ECF0  F013         	call	_turnRight45	;wreg free
  4709   000EBE                     
  4710                           ;colour_identify.c: 133:             stop(mL,mR);
  4711   000EBE  C020  F018         	movff	motor_response@mL,stop@mL
  4712   000EC2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4713   000EC6  C022  F01A         	movff	motor_response@mR,stop@mR
  4714   000ECA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4715   000ECE  EC6C  F015         	call	_stop	;wreg free
  4716   000ED2                     
  4717                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  4718   000ED2  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4719   000ED6  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4720   000EDA  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4721   000EDE  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4722   000EE2  ECF0  F013         	call	_turnRight45	;wreg free
  4723   000EE6                     l3018:
  4724                           
  4725                           ;colour_identify.c: 135:             stop(mL,mR);
  4726   000EE6  C020  F018         	movff	motor_response@mL,stop@mL
  4727   000EEA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4728   000EEE  C022  F01A         	movff	motor_response@mR,stop@mR
  4729   000EF2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4730   000EF6  EC6C  F015         	call	_stop	;wreg free
  4731                           
  4732                           ;colour_identify.c: 136:             break;
  4733   000EFA  EF38  F009         	goto	l365
  4734   000EFE                     l3020:
  4735                           
  4736                           ;colour_identify.c: 138:             reverseFullSpeed(mL,mR);
  4737   000EFE  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4738   000F02  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4739   000F06  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4740   000F0A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4741   000F0E  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4742   000F12                     
  4743                           ;colour_identify.c: 139:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4744   000F12  0E0D               	movlw	13
  4745   000F14  6E25               	movwf	(??_motor_response+1)^0,c
  4746   000F16  0E2D               	movlw	45
  4747   000F18  6E24               	movwf	??_motor_response^0,c
  4748   000F1A  0ED8               	movlw	216
  4749   000F1C                     u2177:
  4750   000F1C  2EE8               	decfsz	wreg,f,c
  4751   000F1E  D7FE               	bra	u2177
  4752   000F20  2E24               	decfsz	??_motor_response^0,f,c
  4753   000F22  D7FC               	bra	u2177
  4754   000F24  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4755   000F26  D7FA               	bra	u2177
  4756   000F28                     l3024:
  4757                           
  4758                           ;colour_identify.c: 140:             turnLeft45(mL,mR);
  4759   000F28  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4760   000F2C  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4761   000F30  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4762   000F34  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4763   000F38  EC46  F014         	call	_turnLeft45	;wreg free
  4764   000F3C                     
  4765                           ;colour_identify.c: 141:             stop(mL,mR);
  4766   000F3C  C020  F018         	movff	motor_response@mL,stop@mL
  4767   000F40  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4768   000F44  C022  F01A         	movff	motor_response@mR,stop@mR
  4769   000F48  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4770   000F4C  EC6C  F015         	call	_stop	;wreg free
  4771   000F50                     
  4772                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  4773   000F50  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4774   000F54  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4775   000F58  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4776   000F5C  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4777   000F60  EC46  F014         	call	_turnLeft45	;wreg free
  4778   000F64  EF73  F007         	goto	l3018
  4779   000F68                     l3032:
  4780                           
  4781                           ;colour_identify.c: 146:             reverseFullSpeed(mL,mR);
  4782   000F68  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4783   000F6C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4784   000F70  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4785   000F74  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4786   000F78  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4787   000F7C                     
  4788                           ;colour_identify.c: 147:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4789   000F7C  0E0D               	movlw	13
  4790   000F7E  6E25               	movwf	(??_motor_response+1)^0,c
  4791   000F80  0E2D               	movlw	45
  4792   000F82  6E24               	movwf	??_motor_response^0,c
  4793   000F84  0ED8               	movlw	216
  4794   000F86                     u2187:
  4795   000F86  2EE8               	decfsz	wreg,f,c
  4796   000F88  D7FE               	bra	u2187
  4797   000F8A  2E24               	decfsz	??_motor_response^0,f,c
  4798   000F8C  D7FC               	bra	u2187
  4799   000F8E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4800   000F90  D7FA               	bra	u2187
  4801   000F92                     
  4802                           ;colour_identify.c: 148:             turnRight45(mL,mR);
  4803   000F92  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4804   000F96  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4805   000F9A  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4806   000F9E  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4807   000FA2  ECF0  F013         	call	_turnRight45	;wreg free
  4808   000FA6                     
  4809                           ;colour_identify.c: 149:             stop(mL,mR);
  4810   000FA6  C020  F018         	movff	motor_response@mL,stop@mL
  4811   000FAA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4812   000FAE  C022  F01A         	movff	motor_response@mR,stop@mR
  4813   000FB2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4814   000FB6  EC6C  F015         	call	_stop	;wreg free
  4815   000FBA                     l3040:
  4816                           
  4817                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  4818   000FBA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4819   000FBE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4820   000FC2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4821   000FC6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4822   000FCA  ECF0  F013         	call	_turnRight45	;wreg free
  4823   000FCE                     
  4824                           ;colour_identify.c: 151:             stop(mL,mR);
  4825   000FCE  C020  F018         	movff	motor_response@mL,stop@mL
  4826   000FD2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4827   000FD6  C022  F01A         	movff	motor_response@mR,stop@mR
  4828   000FDA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4829   000FDE  EC6C  F015         	call	_stop	;wreg free
  4830   000FE2  EF55  F007         	goto	l3012
  4831   000FE6                     l3052:
  4832                           
  4833                           ;colour_identify.c: 158:             reverseFullSpeed(mL,mR);
  4834   000FE6  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4835   000FEA  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4836   000FEE  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4837   000FF2  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4838   000FF6  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4839   000FFA                     
  4840                           ;colour_identify.c: 159:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4841   000FFA  0E0D               	movlw	13
  4842   000FFC  6E25               	movwf	(??_motor_response+1)^0,c
  4843   000FFE  0E2D               	movlw	45
  4844   001000  6E24               	movwf	??_motor_response^0,c
  4845   001002  0ED8               	movlw	216
  4846   001004                     u2197:
  4847   001004  2EE8               	decfsz	wreg,f,c
  4848   001006  D7FE               	bra	u2197
  4849   001008  2E24               	decfsz	??_motor_response^0,f,c
  4850   00100A  D7FC               	bra	u2197
  4851   00100C  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4852   00100E  D7FA               	bra	u2197
  4853   001010                     
  4854                           ;colour_identify.c: 160:             stop(mL,mR);
  4855   001010  C020  F018         	movff	motor_response@mL,stop@mL
  4856   001014  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4857   001018  C022  F01A         	movff	motor_response@mR,stop@mR
  4858   00101C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4859   001020  EC6C  F015         	call	_stop	;wreg free
  4860                           
  4861                           ;colour_identify.c: 161:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4862   001024  0E11               	movlw	17
  4863   001026  6E25               	movwf	(??_motor_response+1)^0,c
  4864   001028  0E3C               	movlw	60
  4865   00102A  6E24               	movwf	??_motor_response^0,c
  4866   00102C  0ECB               	movlw	203
  4867   00102E                     u2207:
  4868   00102E  2EE8               	decfsz	wreg,f,c
  4869   001030  D7FE               	bra	u2207
  4870   001032  2E24               	decfsz	??_motor_response^0,f,c
  4871   001034  D7FC               	bra	u2207
  4872   001036  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4873   001038  D7FA               	bra	u2207
  4874   00103A  F000               	nop	
  4875   00103C                     
  4876                           ;colour_identify.c: 162:             reverseFullSpeed(mL,mR);
  4877   00103C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4878   001040  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4879   001044  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4880   001048  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4881   00104C  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4882   001050                     
  4883                           ;colour_identify.c: 163:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4884   001050  0E29               	movlw	41
  4885   001052  6E25               	movwf	(??_motor_response+1)^0,c
  4886   001054  0E96               	movlw	150
  4887   001056  6E24               	movwf	??_motor_response^0,c
  4888   001058  0E7F               	movlw	127
  4889   00105A                     u2217:
  4890   00105A  2EE8               	decfsz	wreg,f,c
  4891   00105C  D7FE               	bra	u2217
  4892   00105E  2E24               	decfsz	??_motor_response^0,f,c
  4893   001060  D7FC               	bra	u2217
  4894   001062  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4895   001064  D7FA               	bra	u2217
  4896   001066  F000               	nop	
  4897                           
  4898                           ;colour_identify.c: 164:             stop(mL,mR);
  4899   001068  C020  F018         	movff	motor_response@mL,stop@mL
  4900   00106C  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4901   001070  C022  F01A         	movff	motor_response@mR,stop@mR
  4902   001074  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4903   001078  EC6C  F015         	call	_stop	;wreg free
  4904                           
  4905                           ;colour_identify.c: 165:             turnRight45(mL,mR);
  4906   00107C  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4907   001080  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4908   001084  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4909   001088  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4910   00108C  ECF0  F013         	call	_turnRight45	;wreg free
  4911                           
  4912                           ;colour_identify.c: 166:             stop(mL,mR);
  4913   001090  C020  F018         	movff	motor_response@mL,stop@mL
  4914   001094  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4915   001098  C022  F01A         	movff	motor_response@mR,stop@mR
  4916   00109C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4917   0010A0  EC6C  F015         	call	_stop	;wreg free
  4918                           
  4919                           ;colour_identify.c: 167:             turnRight45(mL,mR);
  4920   0010A4  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4921   0010A8  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4922   0010AC  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4923   0010B0  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4924   0010B4  ECF0  F013         	call	_turnRight45	;wreg free
  4925                           
  4926                           ;colour_identify.c: 168:             stop(mL,mR);
  4927   0010B8  C020  F018         	movff	motor_response@mL,stop@mL
  4928   0010BC  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4929   0010C0  C022  F01A         	movff	motor_response@mR,stop@mR
  4930   0010C4  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4931   0010C8  EC6C  F015         	call	_stop	;wreg free
  4932                           
  4933                           ;colour_identify.c: 169:             break;
  4934   0010CC  EF38  F009         	goto	l365
  4935   0010D0                     l3062:
  4936                           
  4937                           ;colour_identify.c: 171:             reverseFullSpeed(mL,mR);
  4938   0010D0  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4939   0010D4  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4940   0010D8  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4941   0010DC  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4942   0010E0  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4943   0010E4                     
  4944                           ;colour_identify.c: 172:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4945   0010E4  0E0D               	movlw	13
  4946   0010E6  6E25               	movwf	(??_motor_response+1)^0,c
  4947   0010E8  0E2D               	movlw	45
  4948   0010EA  6E24               	movwf	??_motor_response^0,c
  4949   0010EC  0ED8               	movlw	216
  4950   0010EE                     u2227:
  4951   0010EE  2EE8               	decfsz	wreg,f,c
  4952   0010F0  D7FE               	bra	u2227
  4953   0010F2  2E24               	decfsz	??_motor_response^0,f,c
  4954   0010F4  D7FC               	bra	u2227
  4955   0010F6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4956   0010F8  D7FA               	bra	u2227
  4957   0010FA                     
  4958                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  4959   0010FA  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4960   0010FE  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4961   001102  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4962   001106  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4963   00110A  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4964                           
  4965                           ;colour_identify.c: 174:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4966   00110E  0E29               	movlw	41
  4967   001110  6E25               	movwf	(??_motor_response+1)^0,c
  4968   001112  0E96               	movlw	150
  4969   001114  6E24               	movwf	??_motor_response^0,c
  4970   001116  0E7F               	movlw	127
  4971   001118                     u2237:
  4972   001118  2EE8               	decfsz	wreg,f,c
  4973   00111A  D7FE               	bra	u2237
  4974   00111C  2E24               	decfsz	??_motor_response^0,f,c
  4975   00111E  D7FC               	bra	u2237
  4976   001120  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4977   001122  D7FA               	bra	u2237
  4978   001124  F000               	nop	
  4979   001126                     l3068:
  4980                           
  4981                           ;colour_identify.c: 175:             stop(mL,mR);
  4982   001126  C020  F018         	movff	motor_response@mL,stop@mL
  4983   00112A  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4984   00112E  C022  F01A         	movff	motor_response@mR,stop@mR
  4985   001132  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4986   001136  EC6C  F015         	call	_stop	;wreg free
  4987   00113A  EF94  F007         	goto	l3024
  4988   00113E                     l3078:
  4989                           
  4990                           ;colour_identify.c: 182:             reverseFullSpeed(mL,mR);
  4991   00113E  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4992   001142  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4993   001146  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4994   00114A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4995   00114E  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  4996   001152                     
  4997                           ;colour_identify.c: 183:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4998   001152  0E0D               	movlw	13
  4999   001154  6E25               	movwf	(??_motor_response+1)^0,c
  5000   001156  0E2D               	movlw	45
  5001   001158  6E24               	movwf	??_motor_response^0,c
  5002   00115A  0ED8               	movlw	216
  5003   00115C                     u2247:
  5004   00115C  2EE8               	decfsz	wreg,f,c
  5005   00115E  D7FE               	bra	u2247
  5006   001160  2E24               	decfsz	??_motor_response^0,f,c
  5007   001162  D7FC               	bra	u2247
  5008   001164  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5009   001166  D7FA               	bra	u2247
  5010   001168  EFDD  F007         	goto	l3040
  5011   00116C                     l3094:
  5012                           
  5013                           ;colour_identify.c: 192:             reverseFullSpeed(mL,mR);
  5014   00116C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  5015   001170  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  5016   001174  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  5017   001178  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  5018   00117C  ECE2  F014         	call	_reverseFullSpeed	;wreg free
  5019   001180                     
  5020                           ;colour_identify.c: 193:             _delay((unsigned long)((150)*(64000000/4000.0)));
  5021   001180  0E0D               	movlw	13
  5022   001182  6E25               	movwf	(??_motor_response+1)^0,c
  5023   001184  0E2D               	movlw	45
  5024   001186  6E24               	movwf	??_motor_response^0,c
  5025   001188  0ED8               	movlw	216
  5026   00118A                     u2257:
  5027   00118A  2EE8               	decfsz	wreg,f,c
  5028   00118C  D7FE               	bra	u2257
  5029   00118E  2E24               	decfsz	??_motor_response^0,f,c
  5030   001190  D7FC               	bra	u2257
  5031   001192  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5032   001194  D7FA               	bra	u2257
  5033   001196                     
  5034                           ;colour_identify.c: 194:             turnLeft45(mL,mR);
  5035   001196  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  5036   00119A  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  5037   00119E  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  5038   0011A2  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  5039   0011A6  EC46  F014         	call	_turnLeft45	;wreg free
  5040   0011AA  EF93  F008         	goto	l3068
  5041   0011AE                     l362:
  5042                           
  5043                           ;colour_identify.c: 203:             LATDbits.LATD7=1;
  5044   0011AE  8E7C               	bsf	124,7,c	;volatile
  5045   0011B0                     
  5046                           ;colour_identify.c: 204:             _delay((unsigned long)((200)*(64000000/4000.0)));
  5047   0011B0  0E11               	movlw	17
  5048   0011B2  6E25               	movwf	(??_motor_response+1)^0,c
  5049   0011B4  0E3C               	movlw	60
  5050   0011B6  6E24               	movwf	??_motor_response^0,c
  5051   0011B8  0ECB               	movlw	203
  5052   0011BA                     u2267:
  5053   0011BA  2EE8               	decfsz	wreg,f,c
  5054   0011BC  D7FE               	bra	u2267
  5055   0011BE  2E24               	decfsz	??_motor_response^0,f,c
  5056   0011C0  D7FC               	bra	u2267
  5057   0011C2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5058   0011C4  D7FA               	bra	u2267
  5059   0011C6  F000               	nop	
  5060   0011C8                     
  5061                           ;colour_identify.c: 205:             LATDbits.LATD7=0;
  5062   0011C8  9E7C               	bcf	124,7,c	;volatile
  5063                           
  5064                           ;colour_identify.c: 206:             break;
  5065   0011CA  EF38  F009         	goto	l365
  5066   0011CE                     l363:
  5067                           
  5068                           ;colour_identify.c: 209:             LATHbits.LATH3=1;
  5069   0011CE  8680               	bsf	128,3,c	;volatile
  5070   0011D0                     
  5071                           ;colour_identify.c: 210:             _delay((unsigned long)((200)*(64000000/4000.0)));
  5072   0011D0  0E11               	movlw	17
  5073   0011D2  6E25               	movwf	(??_motor_response+1)^0,c
  5074   0011D4  0E3C               	movlw	60
  5075   0011D6  6E24               	movwf	??_motor_response^0,c
  5076   0011D8  0ECB               	movlw	203
  5077   0011DA                     u2277:
  5078   0011DA  2EE8               	decfsz	wreg,f,c
  5079   0011DC  D7FE               	bra	u2277
  5080   0011DE  2E24               	decfsz	??_motor_response^0,f,c
  5081   0011E0  D7FC               	bra	u2277
  5082   0011E2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5083   0011E4  D7FA               	bra	u2277
  5084   0011E6  F000               	nop	
  5085   0011E8                     
  5086                           ;colour_identify.c: 211:             LATHbits.LATH3=0;
  5087   0011E8  9680               	bcf	128,3,c	;volatile
  5088                           
  5089                           ;colour_identify.c: 212:             break;
  5090   0011EA  EF38  F009         	goto	l365
  5091   0011EE                     l364:
  5092                           
  5093                           ;colour_identify.c: 214:             LATHbits.LATH1 = 1;
  5094   0011EE  8280               	bsf	128,1,c	;volatile
  5095   0011F0                     
  5096                           ;colour_identify.c: 215:             _delay((unsigned long)((500)*(64000000/4000.0)));
  5097   0011F0  0E29               	movlw	41
  5098   0011F2  6E25               	movwf	(??_motor_response+1)^0,c
  5099   0011F4  0E96               	movlw	150
  5100   0011F6  6E24               	movwf	??_motor_response^0,c
  5101   0011F8  0E7F               	movlw	127
  5102   0011FA                     u2287:
  5103   0011FA  2EE8               	decfsz	wreg,f,c
  5104   0011FC  D7FE               	bra	u2287
  5105   0011FE  2E24               	decfsz	??_motor_response^0,f,c
  5106   001200  D7FC               	bra	u2287
  5107   001202  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5108   001204  D7FA               	bra	u2287
  5109   001206  F000               	nop	
  5110   001208                     
  5111                           ;colour_identify.c: 216:             LATHbits.LATH1 = 0;
  5112   001208  9280               	bcf	128,1,c	;volatile
  5113                           
  5114                           ;colour_identify.c: 217:             break;
  5115   00120A  EF38  F009         	goto	l365
  5116   00120E                     l3124:
  5117   00120E  5026               	movf	motor_response@card^0,w,c
  5118   001210  6E24               	movwf	??_motor_response^0,c
  5119   001212  6A25               	clrf	(??_motor_response+1)^0,c
  5120                           
  5121                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5122                           ; Switch size 1, requested type "simple"
  5123                           ; Number of cases is 1, Range of values is 0 to 0
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte            4     3 (average)
  5127                           ;	Chosen strategy is simple_byte
  5128   001214  5025               	movf	(??_motor_response+1)^0,w,c
  5129   001216  0A00               	xorlw	0	; case 0
  5130   001218  B4D8               	btfsc	status,2,c
  5131   00121A  EF11  F009         	goto	l3990
  5132   00121E  EFF7  F008         	goto	l364
  5133   001222                     l3990:
  5134                           
  5135                           ; Switch size 1, requested type "simple"
  5136                           ; Number of cases is 9, Range of values is 0 to 8
  5137                           ; switch strategies available:
  5138                           ; Name         Instructions Cycles
  5139                           ; simple_byte           28    15 (average)
  5140                           ;	Chosen strategy is simple_byte
  5141   001222  5024               	movf	??_motor_response^0,w,c
  5142   001224  0A00               	xorlw	0	; case 0
  5143   001226  B4D8               	btfsc	status,2,c
  5144   001228  EF40  F007         	goto	l3008
  5145   00122C  0A01               	xorlw	1	; case 1
  5146   00122E  B4D8               	btfsc	status,2,c
  5147   001230  EF7F  F007         	goto	l3020
  5148   001234  0A03               	xorlw	3	; case 2
  5149   001236  B4D8               	btfsc	status,2,c
  5150   001238  EFB4  F007         	goto	l3032
  5151   00123C  0A01               	xorlw	1	; case 3
  5152   00123E  B4D8               	btfsc	status,2,c
  5153   001240  EFF3  F007         	goto	l3052
  5154   001244  0A07               	xorlw	7	; case 4
  5155   001246  B4D8               	btfsc	status,2,c
  5156   001248  EF68  F008         	goto	l3062
  5157   00124C  0A01               	xorlw	1	; case 5
  5158   00124E  B4D8               	btfsc	status,2,c
  5159   001250  EF9F  F008         	goto	l3078
  5160   001254  0A03               	xorlw	3	; case 6
  5161   001256  B4D8               	btfsc	status,2,c
  5162   001258  EFB6  F008         	goto	l3094
  5163   00125C  0A01               	xorlw	1	; case 7
  5164   00125E  B4D8               	btfsc	status,2,c
  5165   001260  EFD7  F008         	goto	l362
  5166   001264  0A0F               	xorlw	15	; case 8
  5167   001266  B4D8               	btfsc	status,2,c
  5168   001268  EFE7  F008         	goto	l363
  5169   00126C  EFF7  F008         	goto	l364
  5170   001270                     l365:
  5171   001270  0012               	return		;funcret
  5172   001272                     __end_of_motor_response:
  5173                           	callstack 0
  5174                           
  5175 ;; *************** function _turnRight45 *****************
  5176 ;; Defined at:
  5177 ;;		line 116 in file "dc_motor.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5180 ;;		 -> main@motorL(9), 
  5181 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5182 ;;		 -> main@motorR(9), 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  i               2   29[COMRAM] int 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5197 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5198 ;;Total ram usage:        8 bytes
  5199 ;; Hardware stack levels used: 1
  5200 ;; Hardware stack levels required when called: 6
  5201 ;; This function calls:
  5202 ;;		_setMotorPWM
  5203 ;; This function is called by:
  5204 ;;		_motor_response
  5205 ;;		_motor_response_easy
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text23
  5210   0027E0                     __ptext23:
  5211                           	callstack 0
  5212   0027E0                     _turnRight45:
  5213                           	callstack 22
  5214   0027E0                     
  5215                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5216   0027E0  EE20 F001          	lfsr	2,1
  5217   0027E4  5018               	movf	turnRight45@mL^0,w,c
  5218   0027E6  26D9               	addwf	fsr2l,f,c
  5219   0027E8  5019               	movf	(turnRight45@mL+1)^0,w,c
  5220   0027EA  22DA               	addwfc	fsr2h,f,c
  5221   0027EC  0E01               	movlw	1
  5222   0027EE  6EDF               	movwf	indf2,c
  5223                           
  5224                           ;dc_motor.c: 119:     mR->direction=0;
  5225   0027F0  EE20 F001          	lfsr	2,1
  5226   0027F4  501A               	movf	turnRight45@mR^0,w,c
  5227   0027F6  26D9               	addwf	fsr2l,f,c
  5228   0027F8  501B               	movf	(turnRight45@mR+1)^0,w,c
  5229   0027FA  22DA               	addwfc	fsr2h,f,c
  5230   0027FC  0E00               	movlw	0
  5231   0027FE  6EDF               	movwf	indf2,c
  5232   002800                     
  5233                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5234   002800  0E00               	movlw	0
  5235   002802  6E1F               	movwf	(turnRight45@i+1)^0,c
  5236   002804  0E00               	movlw	0
  5237   002806  6E1E               	movwf	turnRight45@i^0,c
  5238   002808                     l2796:
  5239                           
  5240                           ;dc_motor.c: 122:         mR->power=i;
  5241   002808  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  5242   00280C  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  5243   002810  C01E  FFDF         	movff	turnRight45@i,indf2
  5244                           
  5245                           ;dc_motor.c: 123:         mL->power=i;
  5246   002814  C018  FFD9         	movff	turnRight45@mL,fsr2l
  5247   002818  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  5248   00281C  C01E  FFDF         	movff	turnRight45@i,indf2
  5249   002820                     
  5250                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5251   002820  0E02               	movlw	2
  5252   002822  6E1D               	movwf	(??_turnRight45+1)^0,c
  5253   002824  0E38               	movlw	56
  5254   002826  6E1C               	movwf	??_turnRight45^0,c
  5255   002828  0EAD               	movlw	173
  5256   00282A                     u2297:
  5257   00282A  2EE8               	decfsz	wreg,f,c
  5258   00282C  D7FE               	bra	u2297
  5259   00282E  2E1C               	decfsz	??_turnRight45^0,f,c
  5260   002830  D7FC               	bra	u2297
  5261   002832  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5262   002834  D7FA               	bra	u2297
  5263   002836  F000               	nop	
  5264   002838                     
  5265                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5266   002838  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  5267   00283C  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5268   002840  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5269   002844                     
  5270                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5271   002844  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  5272   002848  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5273   00284C  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5274   002850  0E0A               	movlw	10
  5275   002852  261E               	addwf	turnRight45@i^0,f,c
  5276   002854  0E00               	movlw	0
  5277   002856  221F               	addwfc	(turnRight45@i+1)^0,f,c
  5278   002858  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  5279   00285A  EF38  F014         	goto	u1301
  5280   00285E  501F               	movf	(turnRight45@i+1)^0,w,c
  5281   002860  E109               	bnz	u1300
  5282   002862  0E50               	movlw	80
  5283   002864  5C1E               	subwf	turnRight45@i^0,w,c
  5284   002866  A0D8               	btfss	status,0,c
  5285   002868  EF38  F014         	goto	u1301
  5286   00286C  EF3A  F014         	goto	u1300
  5287   002870                     u1301:
  5288   002870  EF04  F014         	goto	l2796
  5289   002874                     u1300:
  5290   002874                     
  5291                           ;dc_motor.c: 127:     _delay((unsigned long)((90)*(64000000/4000.0)));
  5292   002874  0E08               	movlw	8
  5293   002876  6E1D               	movwf	(??_turnRight45+1)^0,c
  5294   002878  0E4F               	movlw	79
  5295   00287A  6E1C               	movwf	??_turnRight45^0,c
  5296   00287C  0E1A               	movlw	26
  5297   00287E                     u2307:
  5298   00287E  2EE8               	decfsz	wreg,f,c
  5299   002880  D7FE               	bra	u2307
  5300   002882  2E1C               	decfsz	??_turnRight45^0,f,c
  5301   002884  D7FC               	bra	u2307
  5302   002886  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5303   002888  D7FA               	bra	u2307
  5304   00288A  0012               	return		;funcret
  5305   00288C                     __end_of_turnRight45:
  5306                           	callstack 0
  5307                           
  5308 ;; *************** function _turnLeft45 *****************
  5309 ;; Defined at:
  5310 ;;		line 101 in file "dc_motor.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5313 ;;		 -> main@motorL(9), 
  5314 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5315 ;;		 -> main@motorR(9), 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  i               2   29[COMRAM] int 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      void 
  5320 ;; Registers used:
  5321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5331 ;;Total ram usage:        8 bytes
  5332 ;; Hardware stack levels used: 1
  5333 ;; Hardware stack levels required when called: 6
  5334 ;; This function calls:
  5335 ;;		_setMotorPWM
  5336 ;; This function is called by:
  5337 ;;		_motor_response
  5338 ;;		_motor_response_easy
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text24
  5343   00288C                     __ptext24:
  5344                           	callstack 0
  5345   00288C                     _turnLeft45:
  5346                           	callstack 22
  5347   00288C                     
  5348                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5349   00288C  EE20 F001          	lfsr	2,1
  5350   002890  5018               	movf	turnLeft45@mL^0,w,c
  5351   002892  26D9               	addwf	fsr2l,f,c
  5352   002894  5019               	movf	(turnLeft45@mL+1)^0,w,c
  5353   002896  22DA               	addwfc	fsr2h,f,c
  5354   002898  0E00               	movlw	0
  5355   00289A  6EDF               	movwf	indf2,c
  5356                           
  5357                           ;dc_motor.c: 104:     mR->direction=1;
  5358   00289C  EE20 F001          	lfsr	2,1
  5359   0028A0  501A               	movf	turnLeft45@mR^0,w,c
  5360   0028A2  26D9               	addwf	fsr2l,f,c
  5361   0028A4  501B               	movf	(turnLeft45@mR+1)^0,w,c
  5362   0028A6  22DA               	addwfc	fsr2h,f,c
  5363   0028A8  0E01               	movlw	1
  5364   0028AA  6EDF               	movwf	indf2,c
  5365   0028AC                     
  5366                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5367   0028AC  0E00               	movlw	0
  5368   0028AE  6E1F               	movwf	(turnLeft45@i+1)^0,c
  5369   0028B0  0E00               	movlw	0
  5370   0028B2  6E1E               	movwf	turnLeft45@i^0,c
  5371   0028B4                     l2774:
  5372                           
  5373                           ;dc_motor.c: 107:         mR->power=i;
  5374   0028B4  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  5375   0028B8  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5376   0028BC  C01E  FFDF         	movff	turnLeft45@i,indf2
  5377                           
  5378                           ;dc_motor.c: 108:         mL->power=i;
  5379   0028C0  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  5380   0028C4  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5381   0028C8  C01E  FFDF         	movff	turnLeft45@i,indf2
  5382   0028CC                     
  5383                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5384   0028CC  0E02               	movlw	2
  5385   0028CE  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5386   0028D0  0E38               	movlw	56
  5387   0028D2  6E1C               	movwf	??_turnLeft45^0,c
  5388   0028D4  0EAD               	movlw	173
  5389   0028D6                     u2317:
  5390   0028D6  2EE8               	decfsz	wreg,f,c
  5391   0028D8  D7FE               	bra	u2317
  5392   0028DA  2E1C               	decfsz	??_turnLeft45^0,f,c
  5393   0028DC  D7FC               	bra	u2317
  5394   0028DE  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5395   0028E0  D7FA               	bra	u2317
  5396   0028E2  F000               	nop	
  5397   0028E4                     
  5398                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5399   0028E4  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  5400   0028E8  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5401   0028EC  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5402   0028F0                     
  5403                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5404   0028F0  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  5405   0028F4  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5406   0028F8  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5407   0028FC  0E0A               	movlw	10
  5408   0028FE  261E               	addwf	turnLeft45@i^0,f,c
  5409   002900  0E00               	movlw	0
  5410   002902  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  5411   002904  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  5412   002906  EF8E  F014         	goto	u1291
  5413   00290A  501F               	movf	(turnLeft45@i+1)^0,w,c
  5414   00290C  E109               	bnz	u1290
  5415   00290E  0E50               	movlw	80
  5416   002910  5C1E               	subwf	turnLeft45@i^0,w,c
  5417   002912  A0D8               	btfss	status,0,c
  5418   002914  EF8E  F014         	goto	u1291
  5419   002918  EF90  F014         	goto	u1290
  5420   00291C                     u1291:
  5421   00291C  EF5A  F014         	goto	l2774
  5422   002920                     u1290:
  5423   002920                     
  5424                           ;dc_motor.c: 112:     _delay((unsigned long)((90)*(64000000/4000.0)));
  5425   002920  0E08               	movlw	8
  5426   002922  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5427   002924  0E4F               	movlw	79
  5428   002926  6E1C               	movwf	??_turnLeft45^0,c
  5429   002928  0E1A               	movlw	26
  5430   00292A                     u2327:
  5431   00292A  2EE8               	decfsz	wreg,f,c
  5432   00292C  D7FE               	bra	u2327
  5433   00292E  2E1C               	decfsz	??_turnLeft45^0,f,c
  5434   002930  D7FC               	bra	u2327
  5435   002932  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5436   002934  D7FA               	bra	u2327
  5437   002936  0012               	return		;funcret
  5438   002938                     __end_of_turnLeft45:
  5439                           	callstack 0
  5440                           
  5441 ;; *************** function _stop *****************
  5442 ;; Defined at:
  5443 ;;		line 84 in file "dc_motor.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5446 ;;		 -> main@motorL(9), 
  5447 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5448 ;;		 -> main@motorR(9), 
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5462 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5463 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5464 ;;Total ram usage:        5 bytes
  5465 ;; Hardware stack levels used: 1
  5466 ;; Hardware stack levels required when called: 6
  5467 ;; This function calls:
  5468 ;;		_setMotorPWM
  5469 ;; This function is called by:
  5470 ;;		_main
  5471 ;;		_motor_response
  5472 ;;		_motor_response_easy
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text25
  5477   002AD8                     __ptext25:
  5478                           	callstack 0
  5479   002AD8                     _stop:
  5480                           	callstack 24
  5481   002AD8                     
  5482                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5483   002AD8  EF81  F015         	goto	l2756
  5484   002ADC                     l2750:
  5485                           
  5486                           ;dc_motor.c: 87:         mL->power -=10;
  5487   002ADC  C018  FFD9         	movff	stop@mL,fsr2l
  5488   002AE0  C019  FFDA         	movff	stop@mL+1,fsr2h
  5489   002AE4  0E0A               	movlw	10
  5490   002AE6  5EDF               	subwf	indf2,f,c
  5491   002AE8                     
  5492                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5493   002AE8  0E2A               	movlw	42
  5494   002AEA  6E1C               	movwf	??_stop^0,c
  5495   002AEC  0E8E               	movlw	142
  5496   002AEE                     u2337:
  5497   002AEE  2EE8               	decfsz	wreg,f,c
  5498   002AF0  D7FE               	bra	u2337
  5499   002AF2  2E1C               	decfsz	??_stop^0,f,c
  5500   002AF4  D7FC               	bra	u2337
  5501   002AF6                     
  5502                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5503   002AF6  C018  F012         	movff	stop@mL,setMotorPWM@m
  5504   002AFA  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5505   002AFE  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5506   002B02                     l2756:
  5507                           
  5508                           ;dc_motor.c: 86:     while(mL->power !=0){
  5509   002B02  C018  FFD9         	movff	stop@mL,fsr2l
  5510   002B06  C019  FFDA         	movff	stop@mL+1,fsr2h
  5511   002B0A  50DF               	movf	indf2,w,c
  5512   002B0C  A4D8               	btfss	status,2,c
  5513   002B0E  EF8B  F015         	goto	u1271
  5514   002B12  EF8D  F015         	goto	u1270
  5515   002B16                     u1271:
  5516   002B16  EF6E  F015         	goto	l2750
  5517   002B1A                     u1270:
  5518   002B1A  EFA2  F015         	goto	l2764
  5519   002B1E                     l2758:
  5520                           
  5521                           ;dc_motor.c: 92:         mR->power -=10;
  5522   002B1E  C01A  FFD9         	movff	stop@mR,fsr2l
  5523   002B22  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5524   002B26  0E0A               	movlw	10
  5525   002B28  5EDF               	subwf	indf2,f,c
  5526   002B2A                     
  5527                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5528   002B2A  0E2A               	movlw	42
  5529   002B2C  6E1C               	movwf	??_stop^0,c
  5530   002B2E  0E8E               	movlw	142
  5531   002B30                     u2347:
  5532   002B30  2EE8               	decfsz	wreg,f,c
  5533   002B32  D7FE               	bra	u2347
  5534   002B34  2E1C               	decfsz	??_stop^0,f,c
  5535   002B36  D7FC               	bra	u2347
  5536   002B38                     
  5537                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5538   002B38  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5539   002B3C  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5540   002B40  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5541   002B44                     l2764:
  5542                           
  5543                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5544   002B44  C01A  FFD9         	movff	stop@mR,fsr2l
  5545   002B48  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5546   002B4C  50DF               	movf	indf2,w,c
  5547   002B4E  A4D8               	btfss	status,2,c
  5548   002B50  EFAC  F015         	goto	u1281
  5549   002B54  EFAE  F015         	goto	u1280
  5550   002B58                     u1281:
  5551   002B58  EF8F  F015         	goto	l2758
  5552   002B5C                     u1280:
  5553   002B5C  0012               	return		;funcret
  5554   002B5E                     __end_of_stop:
  5555                           	callstack 0
  5556                           
  5557 ;; *************** function _reverseFullSpeed *****************
  5558 ;; Defined at:
  5559 ;;		line 145 in file "dc_motor.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5562 ;;		 -> main@motorL(9), 
  5563 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5564 ;;		 -> main@motorR(9), 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  i               2   28[COMRAM] int 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5576 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5579 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;Total ram usage:        7 bytes
  5581 ;; Hardware stack levels used: 1
  5582 ;; Hardware stack levels required when called: 6
  5583 ;; This function calls:
  5584 ;;		_setMotorPWM
  5585 ;; This function is called by:
  5586 ;;		_main
  5587 ;;		_motor_response
  5588 ;;		_motor_response_easy
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text26
  5593   0029C4                     __ptext26:
  5594                           	callstack 0
  5595   0029C4                     _reverseFullSpeed:
  5596                           	callstack 24
  5597   0029C4                     
  5598                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5599   0029C4  EE20 F001          	lfsr	2,1
  5600   0029C8  5018               	movf	reverseFullSpeed@mL^0,w,c
  5601   0029CA  26D9               	addwf	fsr2l,f,c
  5602   0029CC  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5603   0029CE  22DA               	addwfc	fsr2h,f,c
  5604   0029D0  0E00               	movlw	0
  5605   0029D2  6EDF               	movwf	indf2,c
  5606                           
  5607                           ;dc_motor.c: 148:     mR->direction=0;
  5608   0029D4  EE20 F001          	lfsr	2,1
  5609   0029D8  501A               	movf	reverseFullSpeed@mR^0,w,c
  5610   0029DA  26D9               	addwf	fsr2l,f,c
  5611   0029DC  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5612   0029DE  22DA               	addwfc	fsr2h,f,c
  5613   0029E0  0E00               	movlw	0
  5614   0029E2  6EDF               	movwf	indf2,c
  5615   0029E4                     
  5616                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5617   0029E4  0E00               	movlw	0
  5618   0029E6  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  5619   0029E8  0E00               	movlw	0
  5620   0029EA  6E1D               	movwf	reverseFullSpeed@i^0,c
  5621   0029EC                     l2818:
  5622                           
  5623                           ;dc_motor.c: 150:         mL->power=i;
  5624   0029EC  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5625   0029F0  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5626   0029F4  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5627                           
  5628                           ;dc_motor.c: 151:         mR->power=i;
  5629   0029F8  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5630   0029FC  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5631   002A00  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5632   002A04                     
  5633                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5634   002A04  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5635   002A08  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5636   002A0C  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5637   002A10                     
  5638                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5639   002A10  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5640   002A14  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5641   002A18  ECBA  F00F         	call	_setMotorPWM	;wreg free
  5642   002A1C                     
  5643                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5644   002A1C  0ED0               	movlw	208
  5645   002A1E  6E1C               	movwf	??_reverseFullSpeed^0,c
  5646   002A20  0ECA               	movlw	202
  5647   002A22                     u2357:
  5648   002A22  2EE8               	decfsz	wreg,f,c
  5649   002A24  D7FE               	bra	u2357
  5650   002A26  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  5651   002A28  D7FC               	bra	u2357
  5652   002A2A                     
  5653                           ;dc_motor.c: 155:     }
  5654   002A2A  0E0A               	movlw	10
  5655   002A2C  261D               	addwf	reverseFullSpeed@i^0,f,c
  5656   002A2E  0E00               	movlw	0
  5657   002A30  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5658   002A32  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5659   002A34  EF25  F015         	goto	u1311
  5660   002A38  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5661   002A3A  E109               	bnz	u1310
  5662   002A3C  0E3C               	movlw	60
  5663   002A3E  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5664   002A40  A0D8               	btfss	status,0,c
  5665   002A42  EF25  F015         	goto	u1311
  5666   002A46  EF27  F015         	goto	u1310
  5667   002A4A                     u1311:
  5668   002A4A  EFF6  F014         	goto	l2818
  5669   002A4E                     u1310:
  5670   002A4E  0012               	return		;funcret
  5671   002A50                     __end_of_reverseFullSpeed:
  5672                           	callstack 0
  5673                           
  5674 ;; *************** function _setMotorPWM *****************
  5675 ;; Defined at:
  5676 ;;		line 61 in file "dc_motor.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5679 ;;		 -> main@motorR(9), main@motorL(9), 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;  negDuty         1   22[COMRAM] unsigned char 
  5682 ;;  posDuty         1   21[COMRAM] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;Total ram usage:        6 bytes
  5697 ;; Hardware stack levels used: 1
  5698 ;; Hardware stack levels required when called: 5
  5699 ;; This function calls:
  5700 ;;		___lwdiv
  5701 ;;		___wmul
  5702 ;; This function is called by:
  5703 ;;		_stop
  5704 ;;		_turnLeft45
  5705 ;;		_turnRight45
  5706 ;;		_fullSpeedAhead
  5707 ;;		_reverseFullSpeed
  5708 ;;		_main
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text27
  5713   001F74                     __ptext27:
  5714                           	callstack 0
  5715   001F74                     _setMotorPWM:
  5716                           	callstack 24
  5717   001F74                     
  5718                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5719   001F74  EE20 F002          	lfsr	2,2
  5720   001F78  5012               	movf	setMotorPWM@m^0,w,c
  5721   001F7A  26D9               	addwf	fsr2l,f,c
  5722   001F7C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5723   001F7E  22DA               	addwfc	fsr2h,f,c
  5724   001F80  50DF               	movf	indf2,w,c
  5725   001F82  B4D8               	btfsc	status,2,c
  5726   001F84  EFC6  F00F         	goto	u1221
  5727   001F88  EFC8  F00F         	goto	u1220
  5728   001F8C                     u1221:
  5729   001F8C  EFFC  F00F         	goto	l2682
  5730   001F90                     u1220:
  5731   001F90                     
  5732                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5733   001F90  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5734   001F94  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5735   001F98  50DF               	movf	indf2,w,c
  5736   001F9A  6E14               	movwf	??_setMotorPWM^0,c
  5737   001F9C  5014               	movf	??_setMotorPWM^0,w,c
  5738   001F9E  6E05               	movwf	___wmul@multiplier^0,c
  5739   001FA0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5740   001FA2  EE20 F003          	lfsr	2,3
  5741   001FA6  5012               	movf	setMotorPWM@m^0,w,c
  5742   001FA8  26D9               	addwf	fsr2l,f,c
  5743   001FAA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5744   001FAC  22DA               	addwfc	fsr2h,f,c
  5745   001FAE  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5746   001FB2  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5747   001FB6  EC93  F018         	call	___wmul	;wreg free
  5748   001FBA  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5749   001FBE  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5750   001FC2  0E00               	movlw	0
  5751   001FC4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5752   001FC6  0E64               	movlw	100
  5753   001FC8  6E0D               	movwf	___lwdiv@divisor^0,c
  5754   001FCA  EC2C  F016         	call	___lwdiv	;wreg free
  5755   001FCE  EE20 F003          	lfsr	2,3
  5756   001FD2  5012               	movf	setMotorPWM@m^0,w,c
  5757   001FD4  26D9               	addwf	fsr2l,f,c
  5758   001FD6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5759   001FD8  22DA               	addwfc	fsr2h,f,c
  5760   001FDA  50DF               	movf	indf2,w,c
  5761   001FDC  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5762   001FDE  500B               	movf	?___lwdiv^0,w,c
  5763   001FE0  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5764   001FE2  6E16               	movwf	setMotorPWM@posDuty^0,c
  5765   001FE4                     
  5766                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5767   001FE4  EE20 F003          	lfsr	2,3
  5768   001FE8  5012               	movf	setMotorPWM@m^0,w,c
  5769   001FEA  26D9               	addwf	fsr2l,f,c
  5770   001FEC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5771   001FEE  22DA               	addwfc	fsr2h,f,c
  5772   001FF0  50DF               	movf	indf2,w,c
  5773   001FF2  6E17               	movwf	setMotorPWM@negDuty^0,c
  5774                           
  5775                           ;dc_motor.c: 68:     }
  5776   001FF4  EF1F  F010         	goto	l2686
  5777   001FF8                     l2682:
  5778                           
  5779                           ;dc_motor.c: 70:         posDuty=0;
  5780   001FF8  0E00               	movlw	0
  5781   001FFA  6E16               	movwf	setMotorPWM@posDuty^0,c
  5782   001FFC                     
  5783                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5784   001FFC  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5785   002000  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5786   002004  50DF               	movf	indf2,w,c
  5787   002006  6E14               	movwf	??_setMotorPWM^0,c
  5788   002008  5014               	movf	??_setMotorPWM^0,w,c
  5789   00200A  6E05               	movwf	___wmul@multiplier^0,c
  5790   00200C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5791   00200E  EE20 F003          	lfsr	2,3
  5792   002012  5012               	movf	setMotorPWM@m^0,w,c
  5793   002014  26D9               	addwf	fsr2l,f,c
  5794   002016  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5795   002018  22DA               	addwfc	fsr2h,f,c
  5796   00201A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5797   00201E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5798   002022  EC93  F018         	call	___wmul	;wreg free
  5799   002026  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5800   00202A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5801   00202E  0E00               	movlw	0
  5802   002030  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5803   002032  0E64               	movlw	100
  5804   002034  6E0D               	movwf	___lwdiv@divisor^0,c
  5805   002036  EC2C  F016         	call	___lwdiv	;wreg free
  5806   00203A  500B               	movf	?___lwdiv^0,w,c
  5807   00203C  6E17               	movwf	setMotorPWM@negDuty^0,c
  5808   00203E                     l2686:
  5809                           
  5810                           ;dc_motor.c: 74:     if (m->direction) {
  5811   00203E  EE20 F001          	lfsr	2,1
  5812   002042  5012               	movf	setMotorPWM@m^0,w,c
  5813   002044  26D9               	addwf	fsr2l,f,c
  5814   002046  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5815   002048  22DA               	addwfc	fsr2h,f,c
  5816   00204A  50DF               	movf	indf2,w,c
  5817   00204C  B4D8               	btfsc	status,2,c
  5818   00204E  EF2B  F010         	goto	u1231
  5819   002052  EF2D  F010         	goto	u1230
  5820   002056                     u1231:
  5821   002056  EF4F  F010         	goto	l2690
  5822   00205A                     u1230:
  5823   00205A                     
  5824                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5825   00205A  EE20 F005          	lfsr	2,5
  5826   00205E  5012               	movf	setMotorPWM@m^0,w,c
  5827   002060  26D9               	addwf	fsr2l,f,c
  5828   002062  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5829   002064  22DA               	addwfc	fsr2h,f,c
  5830   002066  CFDE F014          	movff	postinc2,??_setMotorPWM
  5831   00206A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5832   00206E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5833   002072  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5834   002076  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5835                           
  5836                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5837   00207A  EE20 F007          	lfsr	2,7
  5838   00207E  5012               	movf	setMotorPWM@m^0,w,c
  5839   002080  26D9               	addwf	fsr2l,f,c
  5840   002082  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5841   002084  22DA               	addwfc	fsr2h,f,c
  5842   002086  CFDE F014          	movff	postinc2,??_setMotorPWM
  5843   00208A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5844   00208E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5845   002092  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5846   002096  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5847                           
  5848                           ;dc_motor.c: 77:     } else {
  5849   00209A  EF6F  F010         	goto	l86
  5850   00209E                     l2690:
  5851                           
  5852                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5853   00209E  EE20 F005          	lfsr	2,5
  5854   0020A2  5012               	movf	setMotorPWM@m^0,w,c
  5855   0020A4  26D9               	addwf	fsr2l,f,c
  5856   0020A6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5857   0020A8  22DA               	addwfc	fsr2h,f,c
  5858   0020AA  CFDE F014          	movff	postinc2,??_setMotorPWM
  5859   0020AE  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5860   0020B2  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5861   0020B6  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5862   0020BA  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5863                           
  5864                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5865   0020BE  EE20 F007          	lfsr	2,7
  5866   0020C2  5012               	movf	setMotorPWM@m^0,w,c
  5867   0020C4  26D9               	addwf	fsr2l,f,c
  5868   0020C6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5869   0020C8  22DA               	addwfc	fsr2h,f,c
  5870   0020CA  CFDE F014          	movff	postinc2,??_setMotorPWM
  5871   0020CE  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5872   0020D2  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5873   0020D6  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5874   0020DA  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5875   0020DE                     l86:
  5876   0020DE  0012               	return		;funcret
  5877   0020E0                     __end_of_setMotorPWM:
  5878                           	callstack 0
  5879                           
  5880 ;; *************** function ___wmul *****************
  5881 ;; Defined at:
  5882 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  multiplier      2    4[COMRAM] unsigned int 
  5885 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  product         2    8[COMRAM] unsigned int 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  2    4[COMRAM] unsigned int 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0, prodl, prodh
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;Total ram usage:        6 bytes
  5902 ;; Hardware stack levels used: 1
  5903 ;; Hardware stack levels required when called: 4
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_setMotorPWM
  5908 ;;		_normalise_readings
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text28
  5913   003126                     __ptext28:
  5914                           	callstack 0
  5915   003126                     ___wmul:
  5916                           	callstack 24
  5917   003126  5005               	movf	___wmul@multiplier^0,w,c
  5918   003128  0207               	mulwf	___wmul@multiplicand^0,c
  5919   00312A  CFF3 F009          	movff	prodl,___wmul@product
  5920   00312E  CFF4 F00A          	movff	prodh,___wmul@product+1
  5921   003132  5005               	movf	___wmul@multiplier^0,w,c
  5922   003134  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5923   003136  50F3               	movf	243,w,c
  5924   003138  260A               	addwf	(___wmul@product+1)^0,f,c
  5925   00313A  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5926   00313C  0207               	mulwf	___wmul@multiplicand^0,c
  5927   00313E  50F3               	movf	243,w,c
  5928   003140  260A               	addwf	(___wmul@product+1)^0,f,c
  5929   003142  C009  F005         	movff	___wmul@product,?___wmul
  5930   003146  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5931   00314A  0012               	return		;funcret
  5932   00314C                     __end_of___wmul:
  5933                           	callstack 0
  5934                           
  5935 ;; *************** function ___lwdiv *****************
  5936 ;; Defined at:
  5937 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  dividend        2   10[COMRAM] unsigned int 
  5940 ;;  divisor         2   12[COMRAM] unsigned int 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;  quotient        2   14[COMRAM] unsigned int 
  5943 ;;  counter         1   16[COMRAM] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  2   10[COMRAM] unsigned int 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5954 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;Total ram usage:        7 bytes
  5958 ;; Hardware stack levels used: 1
  5959 ;; Hardware stack levels required when called: 4
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_setMotorPWM
  5964 ;;		_normalise_readings
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text29
  5969   002C58                     __ptext29:
  5970                           	callstack 0
  5971   002C58                     ___lwdiv:
  5972                           	callstack 24
  5973   002C58  0E00               	movlw	0
  5974   002C5A  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5975   002C5C  0E00               	movlw	0
  5976   002C5E  6E0F               	movwf	___lwdiv@quotient^0,c
  5977   002C60  500D               	movf	___lwdiv@divisor^0,w,c
  5978   002C62  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5979   002C64  B4D8               	btfsc	status,2,c
  5980   002C66  EF37  F016         	goto	u1071
  5981   002C6A  EF39  F016         	goto	u1070
  5982   002C6E                     u1071:
  5983   002C6E  EF61  F016         	goto	l1023
  5984   002C72                     u1070:
  5985   002C72  0E01               	movlw	1
  5986   002C74  6E11               	movwf	___lwdiv@counter^0,c
  5987   002C76  EF41  F016         	goto	l2580
  5988   002C7A                     l2578:
  5989   002C7A  90D8               	bcf	status,0,c
  5990   002C7C  360D               	rlcf	___lwdiv@divisor^0,f,c
  5991   002C7E  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5992   002C80  2A11               	incf	___lwdiv@counter^0,f,c
  5993   002C82                     l2580:
  5994   002C82  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5995   002C84  EF46  F016         	goto	u1081
  5996   002C88  EF48  F016         	goto	u1080
  5997   002C8C                     u1081:
  5998   002C8C  EF3D  F016         	goto	l2578
  5999   002C90                     u1080:
  6000   002C90                     l2582:
  6001   002C90  90D8               	bcf	status,0,c
  6002   002C92  360F               	rlcf	___lwdiv@quotient^0,f,c
  6003   002C94  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6004   002C96  500D               	movf	___lwdiv@divisor^0,w,c
  6005   002C98  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6006   002C9A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6007   002C9C  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6008   002C9E  A0D8               	btfss	status,0,c
  6009   002CA0  EF54  F016         	goto	u1091
  6010   002CA4  EF56  F016         	goto	u1090
  6011   002CA8                     u1091:
  6012   002CA8  EF5B  F016         	goto	l2590
  6013   002CAC                     u1090:
  6014   002CAC  500D               	movf	___lwdiv@divisor^0,w,c
  6015   002CAE  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6016   002CB0  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6017   002CB2  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6018   002CB4  800F               	bsf	___lwdiv@quotient^0,0,c
  6019   002CB6                     l2590:
  6020   002CB6  90D8               	bcf	status,0,c
  6021   002CB8  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6022   002CBA  320D               	rrcf	___lwdiv@divisor^0,f,c
  6023   002CBC  2E11               	decfsz	___lwdiv@counter^0,f,c
  6024   002CBE  EF48  F016         	goto	l2582
  6025   002CC2                     l1023:
  6026   002CC2  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6027   002CC6  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6028   002CCA  0012               	return		;funcret
  6029   002CCC                     __end_of___lwdiv:
  6030                           	callstack 0
  6031                           
  6032 ;; *************** function _make_master_closeness *****************
  6033 ;; Defined at:
  6034 ;;		line 101 in file "colour_identify.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  buf             2    4[COMRAM] PTR unsigned char 
  6037 ;;		 -> main@buf(150), 
  6038 ;;  normalised_v    2    6[COMRAM] PTR unsigned int [9]
  6039 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  6040 ;;  master_close    2    8[COMRAM] PTR unsigned int 
  6041 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  i               1   40[COMRAM] enum E14551
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6055 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6057 ;;Total ram usage:       37 bytes
  6058 ;; Hardware stack levels used: 1
  6059 ;; Hardware stack levels required when called: 4
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_card_response
  6064 ;;		_card_response_easy
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text30
  6069   00260A                     __ptext30:
  6070                           	callstack 0
  6071   00260A                     _make_master_closeness:
  6072                           	callstack 25
  6073   00260A                     
  6074                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  6075   00260A  0E00               	movlw	0
  6076   00260C  6E29               	movwf	make_master_closeness@i^0,c
  6077   00260E                     l2976:
  6078                           
  6079                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  6080   00260E  5029               	movf	make_master_closeness@i^0,w,c
  6081   002610  0D02               	mullw	2
  6082   002612  CFF3 F00B          	movff	prodl,??_make_master_closeness
  6083   002616  CFF4 F00C          	movff	prodh,??_make_master_closeness+1
  6084   00261A  500B               	movf	??_make_master_closeness^0,w,c
  6085   00261C  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6086   00261E  6E0D               	movwf	(??_make_master_closeness+2)^0,c
  6087   002620  500C               	movf	(??_make_master_closeness+1)^0,w,c
  6088   002622  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6089   002624  6E0E               	movwf	(??_make_master_closeness+3)^0,c
  6090   002626  0E36               	movlw	54
  6091   002628  240D               	addwf	(??_make_master_closeness+2)^0,w,c
  6092   00262A  6ED9               	movwf	fsr2l,c
  6093   00262C  0E00               	movlw	0
  6094   00262E  200E               	addwfc	(??_make_master_closeness+3)^0,w,c
  6095   002630  6EDA               	movwf	fsr2h,c
  6096   002632  CFDE F00F          	movff	postinc2,??_make_master_closeness+4
  6097   002636  CFDD F010          	movff	postdec2,??_make_master_closeness+5
  6098   00263A  5029               	movf	make_master_closeness@i^0,w,c
  6099   00263C  0D02               	mullw	2
  6100   00263E  CFF3 F011          	movff	prodl,??_make_master_closeness+6
  6101   002642  CFF4 F012          	movff	prodh,??_make_master_closeness+7
  6102   002646  5011               	movf	(??_make_master_closeness+6)^0,w,c
  6103   002648  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6104   00264A  6E13               	movwf	(??_make_master_closeness+8)^0,c
  6105   00264C  5012               	movf	(??_make_master_closeness+7)^0,w,c
  6106   00264E  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6107   002650  6E14               	movwf	(??_make_master_closeness+9)^0,c
  6108   002652  0E24               	movlw	36
  6109   002654  2413               	addwf	(??_make_master_closeness+8)^0,w,c
  6110   002656  6ED9               	movwf	fsr2l,c
  6111   002658  0E00               	movlw	0
  6112   00265A  2014               	addwfc	(??_make_master_closeness+9)^0,w,c
  6113   00265C  6EDA               	movwf	fsr2h,c
  6114   00265E  CFDE F015          	movff	postinc2,??_make_master_closeness+10
  6115   002662  CFDD F016          	movff	postdec2,??_make_master_closeness+11
  6116   002666  5029               	movf	make_master_closeness@i^0,w,c
  6117   002668  0D02               	mullw	2
  6118   00266A  CFF3 F017          	movff	prodl,??_make_master_closeness+12
  6119   00266E  CFF4 F018          	movff	prodh,??_make_master_closeness+13
  6120   002672  5017               	movf	(??_make_master_closeness+12)^0,w,c
  6121   002674  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6122   002676  6E19               	movwf	(??_make_master_closeness+14)^0,c
  6123   002678  5018               	movf	(??_make_master_closeness+13)^0,w,c
  6124   00267A  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6125   00267C  6E1A               	movwf	(??_make_master_closeness+15)^0,c
  6126   00267E  0E12               	movlw	18
  6127   002680  2419               	addwf	(??_make_master_closeness+14)^0,w,c
  6128   002682  6ED9               	movwf	fsr2l,c
  6129   002684  0E00               	movlw	0
  6130   002686  201A               	addwfc	(??_make_master_closeness+15)^0,w,c
  6131   002688  6EDA               	movwf	fsr2h,c
  6132   00268A  CFDE F01B          	movff	postinc2,??_make_master_closeness+16
  6133   00268E  CFDD F01C          	movff	postdec2,??_make_master_closeness+17
  6134   002692  5029               	movf	make_master_closeness@i^0,w,c
  6135   002694  0D02               	mullw	2
  6136   002696  CFF3 F01D          	movff	prodl,??_make_master_closeness+18
  6137   00269A  CFF4 F01E          	movff	prodh,??_make_master_closeness+19
  6138   00269E  501D               	movf	(??_make_master_closeness+18)^0,w,c
  6139   0026A0  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6140   0026A2  6ED9               	movwf	fsr2l,c
  6141   0026A4  501E               	movf	(??_make_master_closeness+19)^0,w,c
  6142   0026A6  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6143   0026A8  6EDA               	movwf	fsr2h,c
  6144   0026AA  CFDE F01F          	movff	postinc2,??_make_master_closeness+20
  6145   0026AE  CFDD F020          	movff	postdec2,??_make_master_closeness+21
  6146   0026B2  501B               	movf	(??_make_master_closeness+16)^0,w,c
  6147   0026B4  241F               	addwf	(??_make_master_closeness+20)^0,w,c
  6148   0026B6  6E21               	movwf	(??_make_master_closeness+22)^0,c
  6149   0026B8  501C               	movf	(??_make_master_closeness+17)^0,w,c
  6150   0026BA  2020               	addwfc	(??_make_master_closeness+21)^0,w,c
  6151   0026BC  6E22               	movwf	(??_make_master_closeness+23)^0,c
  6152   0026BE  5015               	movf	(??_make_master_closeness+10)^0,w,c
  6153   0026C0  2421               	addwf	(??_make_master_closeness+22)^0,w,c
  6154   0026C2  6E23               	movwf	(??_make_master_closeness+24)^0,c
  6155   0026C4  5016               	movf	(??_make_master_closeness+11)^0,w,c
  6156   0026C6  2022               	addwfc	(??_make_master_closeness+23)^0,w,c
  6157   0026C8  6E24               	movwf	(??_make_master_closeness+25)^0,c
  6158   0026CA  500F               	movf	(??_make_master_closeness+4)^0,w,c
  6159   0026CC  2423               	addwf	(??_make_master_closeness+24)^0,w,c
  6160   0026CE  6E25               	movwf	(??_make_master_closeness+26)^0,c
  6161   0026D0  5010               	movf	(??_make_master_closeness+5)^0,w,c
  6162   0026D2  2024               	addwfc	(??_make_master_closeness+25)^0,w,c
  6163   0026D4  6E26               	movwf	(??_make_master_closeness+27)^0,c
  6164   0026D6  90D8               	bcf	status,0,c
  6165   0026D8  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6166   0026DA  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6167   0026DC  90D8               	bcf	status,0,c
  6168   0026DE  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6169   0026E0  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6170   0026E2  5029               	movf	make_master_closeness@i^0,w,c
  6171   0026E4  0D02               	mullw	2
  6172   0026E6  CFF3 F027          	movff	prodl,??_make_master_closeness+28
  6173   0026EA  CFF4 F028          	movff	prodh,??_make_master_closeness+29
  6174   0026EE  5027               	movf	(??_make_master_closeness+28)^0,w,c
  6175   0026F0  2409               	addwf	make_master_closeness@master_closeness^0,w,c
  6176   0026F2  6ED9               	movwf	fsr2l,c
  6177   0026F4  5028               	movf	(??_make_master_closeness+29)^0,w,c
  6178   0026F6  200A               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6179   0026F8  6EDA               	movwf	fsr2h,c
  6180   0026FA  C025  FFDE         	movff	??_make_master_closeness+26,postinc2
  6181   0026FE  C026  FFDD         	movff	??_make_master_closeness+27,postdec2
  6182   002702                     
  6183                           ;colour_identify.c: 109:     }
  6184   002702  2A29               	incf	make_master_closeness@i^0,f,c
  6185   002704  0E08               	movlw	8
  6186   002706  6429               	cpfsgt	make_master_closeness@i^0,c
  6187   002708  EF88  F013         	goto	u1431
  6188   00270C  EF8A  F013         	goto	u1430
  6189   002710                     u1431:
  6190   002710  EF07  F013         	goto	l2976
  6191   002714                     u1430:
  6192   002714  0012               	return		;funcret
  6193   002716                     __end_of_make_master_closeness:
  6194                           	callstack 0
  6195                           
  6196 ;; *************** function _determine_card *****************
  6197 ;; Defined at:
  6198 ;;		line 112 in file "colour_identify.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  6201 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  i               1   13[COMRAM] enum E14551
  6204 ;;  current_smal    2   10[COMRAM] unsigned int 
  6205 ;;  predicted_co    1   12[COMRAM] enum E14551
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      enum E14551
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6216 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6217 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6219 ;;Total ram usage:       10 bytes
  6220 ;; Hardware stack levels used: 1
  6221 ;; Hardware stack levels required when called: 4
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_card_response
  6226 ;;		_card_response_easy
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text31
  6231   002B5E                     __ptext31:
  6232                           	callstack 0
  6233   002B5E                     _determine_card:
  6234                           	callstack 25
  6235   002B5E                     
  6236                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  6237   002B5E  0E00               	movlw	0
  6238   002B60  6E0D               	movwf	determine_card@predicted_colour^0,c
  6239   002B62                     
  6240                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  6241   002B62  C005  FFD9         	movff	determine_card@master_closeness,fsr2l
  6242   002B66  C006  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  6243   002B6A  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6244   002B6E  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6245   002B72                     
  6246                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  6247   002B72  0E01               	movlw	1
  6248   002B74  6E0E               	movwf	determine_card@i^0,c
  6249   002B76                     l2992:
  6250                           
  6251                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  6252   002B76  500E               	movf	determine_card@i^0,w,c
  6253   002B78  0D02               	mullw	2
  6254   002B7A  CFF3 F007          	movff	prodl,??_determine_card
  6255   002B7E  CFF4 F008          	movff	prodh,??_determine_card+1
  6256   002B82  5007               	movf	??_determine_card^0,w,c
  6257   002B84  2405               	addwf	determine_card@master_closeness^0,w,c
  6258   002B86  6ED9               	movwf	fsr2l,c
  6259   002B88  5008               	movf	(??_determine_card+1)^0,w,c
  6260   002B8A  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6261   002B8C  6EDA               	movwf	fsr2h,c
  6262   002B8E  500B               	movf	determine_card@current_smallest^0,w,c
  6263   002B90  5CDE               	subwf	postinc2,w,c
  6264   002B92  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  6265   002B94  58DE               	subwfb	postinc2,w,c
  6266   002B96  B0D8               	btfsc	status,0,c
  6267   002B98  EFD0  F015         	goto	u1441
  6268   002B9C  EFD2  F015         	goto	u1440
  6269   002BA0                     u1441:
  6270   002BA0  EFE4  F015         	goto	l2998
  6271   002BA4                     u1440:
  6272   002BA4                     
  6273                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  6274   002BA4  500E               	movf	determine_card@i^0,w,c
  6275   002BA6  0D02               	mullw	2
  6276   002BA8  CFF3 F007          	movff	prodl,??_determine_card
  6277   002BAC  CFF4 F008          	movff	prodh,??_determine_card+1
  6278   002BB0  5007               	movf	??_determine_card^0,w,c
  6279   002BB2  2405               	addwf	determine_card@master_closeness^0,w,c
  6280   002BB4  6ED9               	movwf	fsr2l,c
  6281   002BB6  5008               	movf	(??_determine_card+1)^0,w,c
  6282   002BB8  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6283   002BBA  6EDA               	movwf	fsr2h,c
  6284   002BBC  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6285   002BC0  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6286   002BC4                     
  6287                           ;colour_identify.c: 119:             predicted_colour = i;
  6288   002BC4  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  6289   002BC8                     l2998:
  6290                           
  6291                           ;colour_identify.c: 121:     }
  6292   002BC8  2A0E               	incf	determine_card@i^0,f,c
  6293   002BCA  0E08               	movlw	8
  6294   002BCC  640E               	cpfsgt	determine_card@i^0,c
  6295   002BCE  EFEB  F015         	goto	u1451
  6296   002BD2  EFED  F015         	goto	u1450
  6297   002BD6                     u1451:
  6298   002BD6  EFBB  F015         	goto	l2992
  6299   002BDA                     u1450:
  6300   002BDA                     
  6301                           ;colour_identify.c: 122:     return predicted_colour;
  6302   002BDA  500D               	movf	determine_card@predicted_colour^0,w,c
  6303   002BDC  0012               	return		;funcret
  6304   002BDE                     __end_of_determine_card:
  6305                           	callstack 0
  6306                           
  6307 ;; *************** function _collect_avg_readings *****************
  6308 ;; Defined at:
  6309 ;;		line 31 in file "colour_identify.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  clear_read      2   15[COMRAM] PTR unsigned int 
  6312 ;;		 -> main@clear_read(2), 
  6313 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  6314 ;;		 -> main@red_read(2), 
  6315 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  6316 ;;		 -> main@green_read(2), 
  6317 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  6318 ;;		 -> main@blue_read(2), 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  i               2   33[COMRAM] int 
  6321 ;;  i               2   31[COMRAM] int 
  6322 ;;  i               2   29[COMRAM] int 
  6323 ;;  i               2   27[COMRAM] int 
  6324 ;;  i               2   25[COMRAM] int 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6334 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6337 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;Total ram usage:       20 bytes
  6339 ;; Hardware stack levels used: 1
  6340 ;; Hardware stack levels required when called: 7
  6341 ;; This function calls:
  6342 ;;		_color_read_Blue
  6343 ;;		_color_read_Clear
  6344 ;;		_color_read_Green
  6345 ;;		_color_read_Red
  6346 ;; This function is called by:
  6347 ;;		_main
  6348 ;;		_card_response
  6349 ;;		_card_response_easy
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text32
  6354   001B72                     __ptext32:
  6355                           	callstack 0
  6356   001B72                     _collect_avg_readings:
  6357                           	callstack 23
  6358   001B72                     
  6359                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  6360   001B72  0E00               	movlw	0
  6361   001B74  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  6362   001B76  0E00               	movlw	0
  6363   001B78  6E1A               	movwf	collect_avg_readings@i^0,c
  6364   001B7A                     l2868:
  6365                           
  6366                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  6367   001B7A  EC3D  F017         	call	_color_read_Clear	;wreg free
  6368   001B7E  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6369   001B82  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6370   001B86  C009  FFDE         	movff	?_color_read_Clear,postinc2
  6371   001B8A  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  6372                           
  6373                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  6374   001B8E  ECED  F016         	call	_color_read_Red	;wreg free
  6375   001B92  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6376   001B96  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6377   001B9A  C009  FFDE         	movff	?_color_read_Red,postinc2
  6378   001B9E  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  6379                           
  6380                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  6381   001BA2  EC15  F017         	call	_color_read_Green	;wreg free
  6382   001BA6  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6383   001BAA  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6384   001BAE  C009  FFDE         	movff	?_color_read_Green,postinc2
  6385   001BB2  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  6386                           
  6387                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  6388   001BB6  EC65  F017         	call	_color_read_Blue	;wreg free
  6389   001BBA  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6390   001BBE  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6391   001BC2  C009  FFDE         	movff	?_color_read_Blue,postinc2
  6392   001BC6  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  6393   001BCA                     
  6394                           ;colour_identify.c: 40:     }
  6395   001BCA  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  6396   001BCC  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  6397   001BCE  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6398   001BD0  EFF3  F00D         	goto	u1361
  6399   001BD4  0EF5               	movlw	245
  6400   001BD6  5C1A               	subwf	collect_avg_readings@i^0,w,c
  6401   001BD8  0E01               	movlw	1
  6402   001BDA  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6403   001BDC  A0D8               	btfss	status,0,c
  6404   001BDE  EFF3  F00D         	goto	u1361
  6405   001BE2  EFF5  F00D         	goto	u1360
  6406   001BE6                     u1361:
  6407   001BE6  EFBD  F00D         	goto	l2868
  6408   001BEA                     u1360:
  6409   001BEA                     
  6410                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  6411   001BEA  0E00               	movlw	0
  6412   001BEC  6E1D               	movwf	(collect_avg_readings@i_1600+1)^0,c
  6413   001BEE  0E00               	movlw	0
  6414   001BF0  6E1C               	movwf	collect_avg_readings@i_1600^0,c
  6415   001BF2                     l2880:
  6416                           
  6417                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  6418   001BF2  EC3D  F017         	call	_color_read_Clear	;wreg free
  6419   001BF6  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6420   001BFA  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6421   001BFE  5009               	movf	?_color_read_Clear^0,w,c
  6422   001C00  26DE               	addwf	postinc2,f,c
  6423   001C02  500A               	movf	(?_color_read_Clear+1)^0,w,c
  6424   001C04  22DD               	addwfc	postdec2,f,c
  6425   001C06                     
  6426                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6427   001C06  0E11               	movlw	17
  6428   001C08  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6429   001C0A  0E3C               	movlw	60
  6430   001C0C  6E18               	movwf	??_collect_avg_readings^0,c
  6431   001C0E  0ECB               	movlw	203
  6432   001C10                     u2367:
  6433   001C10  2EE8               	decfsz	wreg,f,c
  6434   001C12  D7FE               	bra	u2367
  6435   001C14  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6436   001C16  D7FC               	bra	u2367
  6437   001C18  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6438   001C1A  D7FA               	bra	u2367
  6439   001C1C  F000               	nop	
  6440   001C1E                     
  6441                           ;colour_identify.c: 47:     }
  6442   001C1E  4A1C               	infsnz	collect_avg_readings@i_1600^0,f,c
  6443   001C20  2A1D               	incf	(collect_avg_readings@i_1600+1)^0,f,c
  6444   001C22  BE1D               	btfsc	(collect_avg_readings@i_1600+1)^0,7,c
  6445   001C24  EF1D  F00E         	goto	u1371
  6446   001C28  501D               	movf	(collect_avg_readings@i_1600+1)^0,w,c
  6447   001C2A  E109               	bnz	u1370
  6448   001C2C  0E03               	movlw	3
  6449   001C2E  5C1C               	subwf	collect_avg_readings@i_1600^0,w,c
  6450   001C30  A0D8               	btfss	status,0,c
  6451   001C32  EF1D  F00E         	goto	u1371
  6452   001C36  EF1F  F00E         	goto	u1370
  6453   001C3A                     u1371:
  6454   001C3A  EFF9  F00D         	goto	l2880
  6455   001C3E                     u1370:
  6456   001C3E                     
  6457                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  6458   001C3E  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6459   001C42  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6460   001C46  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6461   001C4A  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6462   001C4E  90D8               	bcf	status,0,c
  6463   001C50  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6464   001C52  3218               	rrcf	??_collect_avg_readings^0,f,c
  6465   001C54  90D8               	bcf	status,0,c
  6466   001C56  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6467   001C58  3218               	rrcf	??_collect_avg_readings^0,f,c
  6468   001C5A  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6469   001C5E  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6470   001C62  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6471   001C66  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6472   001C6A                     
  6473                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  6474   001C6A  0E00               	movlw	0
  6475   001C6C  6E1F               	movwf	(collect_avg_readings@i_1601+1)^0,c
  6476   001C6E  0E00               	movlw	0
  6477   001C70  6E1E               	movwf	collect_avg_readings@i_1601^0,c
  6478   001C72                     l2896:
  6479                           
  6480                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  6481   001C72  ECED  F016         	call	_color_read_Red	;wreg free
  6482   001C76  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6483   001C7A  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6484   001C7E  5009               	movf	?_color_read_Red^0,w,c
  6485   001C80  26DE               	addwf	postinc2,f,c
  6486   001C82  500A               	movf	(?_color_read_Red+1)^0,w,c
  6487   001C84  22DD               	addwfc	postdec2,f,c
  6488   001C86                     
  6489                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6490   001C86  0E11               	movlw	17
  6491   001C88  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6492   001C8A  0E3C               	movlw	60
  6493   001C8C  6E18               	movwf	??_collect_avg_readings^0,c
  6494   001C8E  0ECB               	movlw	203
  6495   001C90                     u2377:
  6496   001C90  2EE8               	decfsz	wreg,f,c
  6497   001C92  D7FE               	bra	u2377
  6498   001C94  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6499   001C96  D7FC               	bra	u2377
  6500   001C98  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6501   001C9A  D7FA               	bra	u2377
  6502   001C9C  F000               	nop	
  6503   001C9E                     
  6504                           ;colour_identify.c: 53:     }
  6505   001C9E  4A1E               	infsnz	collect_avg_readings@i_1601^0,f,c
  6506   001CA0  2A1F               	incf	(collect_avg_readings@i_1601+1)^0,f,c
  6507   001CA2  BE1F               	btfsc	(collect_avg_readings@i_1601+1)^0,7,c
  6508   001CA4  EF5D  F00E         	goto	u1381
  6509   001CA8  501F               	movf	(collect_avg_readings@i_1601+1)^0,w,c
  6510   001CAA  E109               	bnz	u1380
  6511   001CAC  0E03               	movlw	3
  6512   001CAE  5C1E               	subwf	collect_avg_readings@i_1601^0,w,c
  6513   001CB0  A0D8               	btfss	status,0,c
  6514   001CB2  EF5D  F00E         	goto	u1381
  6515   001CB6  EF5F  F00E         	goto	u1380
  6516   001CBA                     u1381:
  6517   001CBA  EF39  F00E         	goto	l2896
  6518   001CBE                     u1380:
  6519   001CBE                     
  6520                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  6521   001CBE  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6522   001CC2  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6523   001CC6  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6524   001CCA  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6525   001CCE  90D8               	bcf	status,0,c
  6526   001CD0  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6527   001CD2  3218               	rrcf	??_collect_avg_readings^0,f,c
  6528   001CD4  90D8               	bcf	status,0,c
  6529   001CD6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6530   001CD8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6531   001CDA  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6532   001CDE  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6533   001CE2  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6534   001CE6  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6535   001CEA                     
  6536                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  6537   001CEA  0E00               	movlw	0
  6538   001CEC  6E21               	movwf	(collect_avg_readings@i_1602+1)^0,c
  6539   001CEE  0E00               	movlw	0
  6540   001CF0  6E20               	movwf	collect_avg_readings@i_1602^0,c
  6541   001CF2                     l2912:
  6542                           
  6543                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  6544   001CF2  EC15  F017         	call	_color_read_Green	;wreg free
  6545   001CF6  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6546   001CFA  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6547   001CFE  5009               	movf	?_color_read_Green^0,w,c
  6548   001D00  26DE               	addwf	postinc2,f,c
  6549   001D02  500A               	movf	(?_color_read_Green+1)^0,w,c
  6550   001D04  22DD               	addwfc	postdec2,f,c
  6551   001D06                     
  6552                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6553   001D06  0E11               	movlw	17
  6554   001D08  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6555   001D0A  0E3C               	movlw	60
  6556   001D0C  6E18               	movwf	??_collect_avg_readings^0,c
  6557   001D0E  0ECB               	movlw	203
  6558   001D10                     u2387:
  6559   001D10  2EE8               	decfsz	wreg,f,c
  6560   001D12  D7FE               	bra	u2387
  6561   001D14  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6562   001D16  D7FC               	bra	u2387
  6563   001D18  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6564   001D1A  D7FA               	bra	u2387
  6565   001D1C  F000               	nop	
  6566   001D1E                     
  6567                           ;colour_identify.c: 59:     }
  6568   001D1E  4A20               	infsnz	collect_avg_readings@i_1602^0,f,c
  6569   001D20  2A21               	incf	(collect_avg_readings@i_1602+1)^0,f,c
  6570   001D22  BE21               	btfsc	(collect_avg_readings@i_1602+1)^0,7,c
  6571   001D24  EF9D  F00E         	goto	u1391
  6572   001D28  5021               	movf	(collect_avg_readings@i_1602+1)^0,w,c
  6573   001D2A  E109               	bnz	u1390
  6574   001D2C  0E03               	movlw	3
  6575   001D2E  5C20               	subwf	collect_avg_readings@i_1602^0,w,c
  6576   001D30  A0D8               	btfss	status,0,c
  6577   001D32  EF9D  F00E         	goto	u1391
  6578   001D36  EF9F  F00E         	goto	u1390
  6579   001D3A                     u1391:
  6580   001D3A  EF79  F00E         	goto	l2912
  6581   001D3E                     u1390:
  6582   001D3E                     
  6583                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  6584   001D3E  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6585   001D42  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6586   001D46  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6587   001D4A  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6588   001D4E  90D8               	bcf	status,0,c
  6589   001D50  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6590   001D52  3218               	rrcf	??_collect_avg_readings^0,f,c
  6591   001D54  90D8               	bcf	status,0,c
  6592   001D56  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6593   001D58  3218               	rrcf	??_collect_avg_readings^0,f,c
  6594   001D5A  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6595   001D5E  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6596   001D62  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6597   001D66  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6598   001D6A                     
  6599                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  6600   001D6A  0E00               	movlw	0
  6601   001D6C  6E23               	movwf	(collect_avg_readings@i_1603+1)^0,c
  6602   001D6E  0E00               	movlw	0
  6603   001D70  6E22               	movwf	collect_avg_readings@i_1603^0,c
  6604   001D72                     l2928:
  6605                           
  6606                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  6607   001D72  EC65  F017         	call	_color_read_Blue	;wreg free
  6608   001D76  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6609   001D7A  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6610   001D7E  5009               	movf	?_color_read_Blue^0,w,c
  6611   001D80  26DE               	addwf	postinc2,f,c
  6612   001D82  500A               	movf	(?_color_read_Blue+1)^0,w,c
  6613   001D84  22DD               	addwfc	postdec2,f,c
  6614   001D86                     
  6615                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6616   001D86  0E11               	movlw	17
  6617   001D88  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6618   001D8A  0E3C               	movlw	60
  6619   001D8C  6E18               	movwf	??_collect_avg_readings^0,c
  6620   001D8E  0ECB               	movlw	203
  6621   001D90                     u2397:
  6622   001D90  2EE8               	decfsz	wreg,f,c
  6623   001D92  D7FE               	bra	u2397
  6624   001D94  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6625   001D96  D7FC               	bra	u2397
  6626   001D98  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6627   001D9A  D7FA               	bra	u2397
  6628   001D9C  F000               	nop	
  6629   001D9E                     
  6630                           ;colour_identify.c: 65:     }
  6631   001D9E  4A22               	infsnz	collect_avg_readings@i_1603^0,f,c
  6632   001DA0  2A23               	incf	(collect_avg_readings@i_1603+1)^0,f,c
  6633   001DA2  BE23               	btfsc	(collect_avg_readings@i_1603+1)^0,7,c
  6634   001DA4  EFDD  F00E         	goto	u1401
  6635   001DA8  5023               	movf	(collect_avg_readings@i_1603+1)^0,w,c
  6636   001DAA  E109               	bnz	u1400
  6637   001DAC  0E03               	movlw	3
  6638   001DAE  5C22               	subwf	collect_avg_readings@i_1603^0,w,c
  6639   001DB0  A0D8               	btfss	status,0,c
  6640   001DB2  EFDD  F00E         	goto	u1401
  6641   001DB6  EFDF  F00E         	goto	u1400
  6642   001DBA                     u1401:
  6643   001DBA  EFB9  F00E         	goto	l2928
  6644   001DBE                     u1400:
  6645   001DBE                     
  6646                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  6647   001DBE  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6648   001DC2  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6649   001DC6  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6650   001DCA  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6651   001DCE  90D8               	bcf	status,0,c
  6652   001DD0  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6653   001DD2  3218               	rrcf	??_collect_avg_readings^0,f,c
  6654   001DD4  90D8               	bcf	status,0,c
  6655   001DD6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6656   001DD8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6657   001DDA  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6658   001DDE  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6659   001DE2  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6660   001DE6  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6661   001DEA  0012               	return		;funcret
  6662   001DEC                     __end_of_collect_avg_readings:
  6663                           	callstack 0
  6664                           
  6665 ;; *************** function _color_read_Red *****************
  6666 ;; Defined at:
  6667 ;;		line 29 in file "color.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;		None
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;  tmp             2   13[COMRAM] unsigned int 
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  2    8[COMRAM] unsigned int 
  6674 ;; Registers used:
  6675 ;;		wreg, status,2, status,0, cstack
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6681 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6683 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6684 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6685 ;;Total ram usage:        7 bytes
  6686 ;; Hardware stack levels used: 1
  6687 ;; Hardware stack levels required when called: 6
  6688 ;; This function calls:
  6689 ;;		_I2C_2_Master_Read
  6690 ;;		_I2C_2_Master_RepStart
  6691 ;;		_I2C_2_Master_Start
  6692 ;;		_I2C_2_Master_Stop
  6693 ;;		_I2C_2_Master_Write
  6694 ;; This function is called by:
  6695 ;;		_collect_avg_readings
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text33
  6700   002DDA                     __ptext33:
  6701                           	callstack 0
  6702   002DDA                     _color_read_Red:
  6703                           	callstack 23
  6704   002DDA                     
  6705                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6706   002DDA  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  6707                           
  6708                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6709   002DDE  0E52               	movlw	82
  6710   002DE0  EC01  F019         	call	_I2C_2_Master_Write
  6711                           
  6712                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6713   002DE4  0EB6               	movlw	182
  6714   002DE6  EC01  F019         	call	_I2C_2_Master_Write
  6715                           
  6716                           ;color.c: 35:  I2C_2_Master_RepStart();
  6717   002DEA  EC0D  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6718                           
  6719                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6720   002DEE  0E53               	movlw	83
  6721   002DF0  EC01  F019         	call	_I2C_2_Master_Write
  6722                           
  6723                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6724   002DF4  0E01               	movlw	1
  6725   002DF6  ECAF  F017         	call	_I2C_2_Master_Read
  6726   002DFA  6E0B               	movwf	??_color_read_Red^0,c
  6727   002DFC  500B               	movf	??_color_read_Red^0,w,c
  6728   002DFE  6E0E               	movwf	color_read_Red@tmp^0,c
  6729   002E00  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6730                           
  6731                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6732   002E02  0E00               	movlw	0
  6733   002E04  ECAF  F017         	call	_I2C_2_Master_Read
  6734   002E08  6E0B               	movwf	??_color_read_Red^0,c
  6735   002E0A  500B               	movf	??_color_read_Red^0,w,c
  6736   002E0C  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6737   002E0E  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6738   002E10  500E               	movf	color_read_Red@tmp^0,w,c
  6739   002E12  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6740   002E14  6E0E               	movwf	color_read_Red@tmp^0,c
  6741   002E16  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6742   002E18  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6743   002E1A  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6744                           
  6745                           ;color.c: 39:  I2C_2_Master_Stop();
  6746   002E1C  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  6747   002E20                     
  6748                           ;color.c: 40:  return tmp;
  6749   002E20  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6750   002E24  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6751   002E28  0012               	return		;funcret
  6752   002E2A                     __end_of_color_read_Red:
  6753                           	callstack 0
  6754                           
  6755 ;; *************** function _color_read_Green *****************
  6756 ;; Defined at:
  6757 ;;		line 43 in file "color.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;  tmp             2   13[COMRAM] unsigned int 
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  2    8[COMRAM] unsigned int 
  6764 ;; Registers used:
  6765 ;;		wreg, status,2, status,0, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6773 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;Total ram usage:        7 bytes
  6776 ;; Hardware stack levels used: 1
  6777 ;; Hardware stack levels required when called: 6
  6778 ;; This function calls:
  6779 ;;		_I2C_2_Master_Read
  6780 ;;		_I2C_2_Master_RepStart
  6781 ;;		_I2C_2_Master_Start
  6782 ;;		_I2C_2_Master_Stop
  6783 ;;		_I2C_2_Master_Write
  6784 ;; This function is called by:
  6785 ;;		_collect_avg_readings
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text34
  6790   002E2A                     __ptext34:
  6791                           	callstack 0
  6792   002E2A                     _color_read_Green:
  6793                           	callstack 23
  6794   002E2A                     
  6795                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6796   002E2A  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  6797                           
  6798                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6799   002E2E  0E52               	movlw	82
  6800   002E30  EC01  F019         	call	_I2C_2_Master_Write
  6801                           
  6802                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6803   002E34  0EB8               	movlw	184
  6804   002E36  EC01  F019         	call	_I2C_2_Master_Write
  6805                           
  6806                           ;color.c: 49:  I2C_2_Master_RepStart();
  6807   002E3A  EC0D  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6808                           
  6809                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6810   002E3E  0E53               	movlw	83
  6811   002E40  EC01  F019         	call	_I2C_2_Master_Write
  6812                           
  6813                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6814   002E44  0E01               	movlw	1
  6815   002E46  ECAF  F017         	call	_I2C_2_Master_Read
  6816   002E4A  6E0B               	movwf	??_color_read_Green^0,c
  6817   002E4C  500B               	movf	??_color_read_Green^0,w,c
  6818   002E4E  6E0E               	movwf	color_read_Green@tmp^0,c
  6819   002E50  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6820                           
  6821                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6822   002E52  0E00               	movlw	0
  6823   002E54  ECAF  F017         	call	_I2C_2_Master_Read
  6824   002E58  6E0B               	movwf	??_color_read_Green^0,c
  6825   002E5A  500B               	movf	??_color_read_Green^0,w,c
  6826   002E5C  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6827   002E5E  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6828   002E60  500E               	movf	color_read_Green@tmp^0,w,c
  6829   002E62  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6830   002E64  6E0E               	movwf	color_read_Green@tmp^0,c
  6831   002E66  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6832   002E68  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6833   002E6A  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6834                           
  6835                           ;color.c: 53:  I2C_2_Master_Stop();
  6836   002E6C  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  6837   002E70                     
  6838                           ;color.c: 54:  return tmp;
  6839   002E70  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6840   002E74  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6841   002E78  0012               	return		;funcret
  6842   002E7A                     __end_of_color_read_Green:
  6843                           	callstack 0
  6844                           
  6845 ;; *************** function _color_read_Clear *****************
  6846 ;; Defined at:
  6847 ;;		line 71 in file "color.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;  tmp             2   13[COMRAM] unsigned int 
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  2    8[COMRAM] unsigned int 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6863 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;Total ram usage:        7 bytes
  6866 ;; Hardware stack levels used: 1
  6867 ;; Hardware stack levels required when called: 6
  6868 ;; This function calls:
  6869 ;;		_I2C_2_Master_Read
  6870 ;;		_I2C_2_Master_RepStart
  6871 ;;		_I2C_2_Master_Start
  6872 ;;		_I2C_2_Master_Stop
  6873 ;;		_I2C_2_Master_Write
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;;		_clear_read_calibration
  6877 ;;		_collect_avg_readings
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text35
  6882   002E7A                     __ptext35:
  6883                           	callstack 0
  6884   002E7A                     _color_read_Clear:
  6885                           	callstack 24
  6886   002E7A                     
  6887                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6888   002E7A  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  6889                           
  6890                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6891   002E7E  0E52               	movlw	82
  6892   002E80  EC01  F019         	call	_I2C_2_Master_Write
  6893                           
  6894                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6895   002E84  0EB4               	movlw	180
  6896   002E86  EC01  F019         	call	_I2C_2_Master_Write
  6897                           
  6898                           ;color.c: 77:  I2C_2_Master_RepStart();
  6899   002E8A  EC0D  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6900                           
  6901                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6902   002E8E  0E53               	movlw	83
  6903   002E90  EC01  F019         	call	_I2C_2_Master_Write
  6904                           
  6905                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6906   002E94  0E01               	movlw	1
  6907   002E96  ECAF  F017         	call	_I2C_2_Master_Read
  6908   002E9A  6E0B               	movwf	??_color_read_Clear^0,c
  6909   002E9C  500B               	movf	??_color_read_Clear^0,w,c
  6910   002E9E  6E0E               	movwf	color_read_Clear@tmp^0,c
  6911   002EA0  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  6912                           
  6913                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6914   002EA2  0E00               	movlw	0
  6915   002EA4  ECAF  F017         	call	_I2C_2_Master_Read
  6916   002EA8  6E0B               	movwf	??_color_read_Clear^0,c
  6917   002EAA  500B               	movf	??_color_read_Clear^0,w,c
  6918   002EAC  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  6919   002EAE  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  6920   002EB0  500E               	movf	color_read_Clear@tmp^0,w,c
  6921   002EB2  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  6922   002EB4  6E0E               	movwf	color_read_Clear@tmp^0,c
  6923   002EB6  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  6924   002EB8  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  6925   002EBA  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  6926                           
  6927                           ;color.c: 81:  I2C_2_Master_Stop();
  6928   002EBC  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  6929   002EC0                     
  6930                           ;color.c: 82:  return tmp;
  6931   002EC0  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  6932   002EC4  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6933   002EC8  0012               	return		;funcret
  6934   002ECA                     __end_of_color_read_Clear:
  6935                           	callstack 0
  6936                           
  6937 ;; *************** function _color_read_Blue *****************
  6938 ;; Defined at:
  6939 ;;		line 57 in file "color.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  tmp             2   13[COMRAM] unsigned int 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  2    8[COMRAM] unsigned int 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;Total ram usage:        7 bytes
  6958 ;; Hardware stack levels used: 1
  6959 ;; Hardware stack levels required when called: 6
  6960 ;; This function calls:
  6961 ;;		_I2C_2_Master_Read
  6962 ;;		_I2C_2_Master_RepStart
  6963 ;;		_I2C_2_Master_Start
  6964 ;;		_I2C_2_Master_Stop
  6965 ;;		_I2C_2_Master_Write
  6966 ;; This function is called by:
  6967 ;;		_collect_avg_readings
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text36
  6972   002ECA                     __ptext36:
  6973                           	callstack 0
  6974   002ECA                     _color_read_Blue:
  6975                           	callstack 23
  6976   002ECA                     
  6977                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6978   002ECA  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  6979                           
  6980                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6981   002ECE  0E52               	movlw	82
  6982   002ED0  EC01  F019         	call	_I2C_2_Master_Write
  6983                           
  6984                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6985   002ED4  0EBA               	movlw	186
  6986   002ED6  EC01  F019         	call	_I2C_2_Master_Write
  6987                           
  6988                           ;color.c: 63:  I2C_2_Master_RepStart();
  6989   002EDA  EC0D  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6990                           
  6991                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6992   002EDE  0E53               	movlw	83
  6993   002EE0  EC01  F019         	call	_I2C_2_Master_Write
  6994                           
  6995                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6996   002EE4  0E01               	movlw	1
  6997   002EE6  ECAF  F017         	call	_I2C_2_Master_Read
  6998   002EEA  6E0B               	movwf	??_color_read_Blue^0,c
  6999   002EEC  500B               	movf	??_color_read_Blue^0,w,c
  7000   002EEE  6E0E               	movwf	color_read_Blue@tmp^0,c
  7001   002EF0  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  7002                           
  7003                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7004   002EF2  0E00               	movlw	0
  7005   002EF4  ECAF  F017         	call	_I2C_2_Master_Read
  7006   002EF8  6E0B               	movwf	??_color_read_Blue^0,c
  7007   002EFA  500B               	movf	??_color_read_Blue^0,w,c
  7008   002EFC  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  7009   002EFE  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  7010   002F00  500E               	movf	color_read_Blue@tmp^0,w,c
  7011   002F02  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  7012   002F04  6E0E               	movwf	color_read_Blue@tmp^0,c
  7013   002F06  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  7014   002F08  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  7015   002F0A  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  7016                           
  7017                           ;color.c: 67:  I2C_2_Master_Stop();
  7018   002F0C  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  7019   002F10                     
  7020                           ;color.c: 68:  return tmp;
  7021   002F10  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  7022   002F14  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  7023   002F18  0012               	return		;funcret
  7024   002F1A                     __end_of_color_read_Blue:
  7025                           	callstack 0
  7026                           
  7027 ;; *************** function _I2C_2_Master_RepStart *****************
  7028 ;; Defined at:
  7029 ;;		line 33 in file "i2c.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, status,2, status,0, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7047 ;;Total ram usage:        0 bytes
  7048 ;; Hardware stack levels used: 1
  7049 ;; Hardware stack levels required when called: 5
  7050 ;; This function calls:
  7051 ;;		_I2C_2_Master_Idle
  7052 ;; This function is called by:
  7053 ;;		_color_read_Red
  7054 ;;		_color_read_Green
  7055 ;;		_color_read_Blue
  7056 ;;		_color_read_Clear
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text37
  7061   00321A                     __ptext37:
  7062                           	callstack 0
  7063   00321A                     _I2C_2_Master_RepStart:
  7064                           	callstack 24
  7065   00321A                     
  7066                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7067   00321A  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7068   00321E                     
  7069                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7070   00321E  010E               	movlb	14	; () banked
  7071   003220  83DA               	bsf	218,1,b	;volatile
  7072   003222                     
  7073                           ; BSR set to: 14
  7074   003222  0012               	return		;funcret
  7075   003224                     __end_of_I2C_2_Master_RepStart:
  7076                           	callstack 0
  7077                           
  7078 ;; *************** function _I2C_2_Master_Read *****************
  7079 ;; Defined at:
  7080 ;;		line 51 in file "i2c.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  ack             1    wreg     unsigned char 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  ack             1    6[COMRAM] unsigned char 
  7085 ;;  tmp             1    7[COMRAM] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      unsigned char 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7098 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7099 ;;Total ram usage:        3 bytes
  7100 ;; Hardware stack levels used: 1
  7101 ;; Hardware stack levels required when called: 5
  7102 ;; This function calls:
  7103 ;;		_I2C_2_Master_Idle
  7104 ;; This function is called by:
  7105 ;;		_color_read_Red
  7106 ;;		_color_read_Green
  7107 ;;		_color_read_Blue
  7108 ;;		_color_read_Clear
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text38
  7113   002F5E                     __ptext38:
  7114                           	callstack 0
  7115   002F5E                     _I2C_2_Master_Read:
  7116                           	callstack 24
  7117                           
  7118                           ; BSR set to: 14
  7119                           ;incstack = 0
  7120                           ;I2C_2_Master_Read@ack stored from wreg
  7121   002F5E  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  7122   002F60                     
  7123                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7124   002F60  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7125   002F64                     
  7126                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7127   002F64  010E               	movlb	14	; () banked
  7128   002F66  87DA               	bsf	218,3,b	;volatile
  7129                           
  7130                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7131   002F68  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7132   002F6C                     
  7133                           ;i2c.c: 57:   tmp = SSP2BUF;
  7134   002F6C  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7135                           
  7136                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7137   002F70  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7138   002F74                     
  7139                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7140   002F74  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  7141   002F76  B4D8               	btfsc	status,2,c
  7142   002F78  EFC0  F017         	goto	u1201
  7143   002F7C  EFC4  F017         	goto	u1200
  7144   002F80                     u1201:
  7145   002F80  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7146   002F82  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  7147   002F84  EFC5  F017         	goto	u1218
  7148   002F88                     u1200:
  7149   002F88  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7150   002F8A                     u1218:
  7151   002F8A  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  7152   002F8C  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  7153   002F8E  010E               	movlb	14	; () banked
  7154   002F90  51DA               	movf	218,w,b	;volatile
  7155   002F92  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7156   002F94  0BDF               	andlw	-33
  7157   002F96  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7158   002F98  6FDA               	movwf	218,b	;volatile
  7159   002F9A                     
  7160                           ; BSR set to: 14
  7161                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7162   002F9A  89DA               	bsf	218,4,b	;volatile
  7163   002F9C                     
  7164                           ; BSR set to: 14
  7165                           ;i2c.c: 61:   return tmp;
  7166   002F9C  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  7167   002F9E                     
  7168                           ; BSR set to: 14
  7169   002F9E  0012               	return		;funcret
  7170   002FA0                     __end_of_I2C_2_Master_Read:
  7171                           	callstack 0
  7172                           
  7173 ;; *************** function _LEDSon_init *****************
  7174 ;; Defined at:
  7175 ;;		line 18 in file "LEDsOn.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		None
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;Total ram usage:        0 bytes
  7194 ;; Hardware stack levels used: 1
  7195 ;; Hardware stack levels required when called: 4
  7196 ;; This function calls:
  7197 ;;		Nothing
  7198 ;; This function is called by:
  7199 ;;		_main
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text39
  7204   00314C                     __ptext39:
  7205                           	callstack 0
  7206   00314C                     _LEDSon_init:
  7207                           	callstack 26
  7208   00314C                     
  7209                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7210   00314C  9288               	bcf	136,1,c	;volatile
  7211                           
  7212                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7213   00314E  9088               	bcf	136,0,c	;volatile
  7214                           
  7215                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7216   003150  9884               	bcf	132,4,c	;volatile
  7217                           
  7218                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7219   003152  9684               	bcf	132,3,c	;volatile
  7220                           
  7221                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7222   003154  9086               	bcf	134,0,c	;volatile
  7223                           
  7224                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7225   003156  9287               	bcf	135,1,c	;volatile
  7226                           
  7227                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7228   003158  9E86               	bcf	134,7,c	;volatile
  7229                           
  7230                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7231   00315A  9881               	bcf	129,4,c	;volatile
  7232                           
  7233                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7234   00315C  8E7E               	bsf	126,7,c	;volatile
  7235                           
  7236                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7237   00315E  827F               	bsf	127,1,c	;volatile
  7238                           
  7239                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7240   003160  8879               	bsf	121,4,c	;volatile
  7241                           
  7242                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7243   003162  987C               	bcf	124,4,c	;volatile
  7244                           
  7245                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7246   003164  9280               	bcf	128,1,c	;volatile
  7247                           
  7248                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7249   003166  907E               	bcf	126,0,c	;volatile
  7250                           
  7251                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7252   003168  9080               	bcf	128,0,c	;volatile
  7253                           
  7254                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7255   00316A  967C               	bcf	124,3,c	;volatile
  7256   00316C  0012               	return		;funcret
  7257   00316E                     __end_of_LEDSon_init:
  7258                           	callstack 0
  7259                           
  7260 ;; *************** function _Interrupts_init *****************
  7261 ;; Defined at:
  7262 ;;		line 7 in file "interrupts.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      void 
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7280 ;;Total ram usage:        0 bytes
  7281 ;; Hardware stack levels used: 1
  7282 ;; Hardware stack levels required when called: 8
  7283 ;; This function calls:
  7284 ;;		_enable_color_interrupt
  7285 ;;		_set_interrupt_threshold
  7286 ;; This function is called by:
  7287 ;;		_main
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text40
  7292   002FE0                     __ptext40:
  7293                           	callstack 0
  7294   002FE0                     _Interrupts_init:
  7295                           	callstack 22
  7296   002FE0                     
  7297                           ;interrupts.c: 9:     enable_color_interrupt();
  7298   002FE0  ECF9  F018         	call	_enable_color_interrupt	;wreg free
  7299                           
  7300                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  7301   002FE4  0E00               	movlw	0
  7302   002FE6  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  7303   002FE8  0E01               	movlw	1
  7304   002FEA  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  7305   002FEC  0E07               	movlw	7
  7306   002FEE  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  7307   002FF0  0ED0               	movlw	208
  7308   002FF2  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  7309   002FF4  0E00               	movlw	0
  7310   002FF6  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  7311   002FF8  0E04               	movlw	4
  7312   002FFA  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  7313   002FFC  EC66  F016         	call	_set_interrupt_threshold	;wreg free
  7314   003000                     
  7315                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  7316   003000  9282               	bcf	130,1,c	;volatile
  7317   003002                     
  7318                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  7319   003002  010E               	movlb	14	; () banked
  7320   003004  939A               	bcf	154,1,b	;volatile
  7321   003006                     
  7322                           ; BSR set to: 14
  7323                           ;interrupts.c: 14:     INT1PPS=0x09;
  7324   003006  0E09               	movlw	9
  7325   003008  010D               	movlb	13	; () banked
  7326   00300A  6FF1               	movwf	241,b	;volatile
  7327   00300C                     
  7328                           ; BSR set to: 13
  7329                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  7330   00300C  010E               	movlb	14	; () banked
  7331   00300E  8329               	bsf	41,1,b	;volatile
  7332   003010                     
  7333                           ; BSR set to: 14
  7334                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  7335   003010  831F               	bsf	31,1,b	;volatile
  7336   003012                     
  7337                           ; BSR set to: 14
  7338                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  7339   003012  92F2               	bcf	242,1,c	;volatile
  7340   003014                     
  7341                           ; BSR set to: 14
  7342                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  7343   003014  8CF2               	bsf	242,6,c	;volatile
  7344   003016                     
  7345                           ; BSR set to: 14
  7346                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  7347   003016  8AF2               	bsf	242,5,c	;volatile
  7348   003018                     
  7349                           ; BSR set to: 14
  7350                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7351   003018  8CF2               	bsf	242,6,c	;volatile
  7352   00301A                     
  7353                           ; BSR set to: 14
  7354                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7355   00301A  8EF2               	bsf	242,7,c	;volatile
  7356   00301C                     
  7357                           ; BSR set to: 14
  7358   00301C  0012               	return		;funcret
  7359   00301E                     __end_of_Interrupts_init:
  7360                           	callstack 0
  7361                           
  7362 ;; *************** function _set_interrupt_threshold *****************
  7363 ;; Defined at:
  7364 ;;		line 43 in file "interrupts.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  AILT            2    8[COMRAM] unsigned int 
  7367 ;;  AIHT            2   10[COMRAM] unsigned int 
  7368 ;;  persistence     2   12[COMRAM] unsigned int 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2, status,0, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7380 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7383 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7384 ;;Total ram usage:        8 bytes
  7385 ;; Hardware stack levels used: 1
  7386 ;; Hardware stack levels required when called: 7
  7387 ;; This function calls:
  7388 ;;		_color_writetoaddr
  7389 ;; This function is called by:
  7390 ;;		_Interrupts_init
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text41
  7395   002CCC                     __ptext41:
  7396                           	callstack 0
  7397   002CCC                     _set_interrupt_threshold:
  7398                           	callstack 22
  7399   002CCC                     
  7400                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  7401   002CCC  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  7402   002CD0  0E0C               	movlw	12
  7403   002CD2  ECC7  F018         	call	_color_writetoaddr
  7404                           
  7405                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  7406   002CD6  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  7407   002CD8  6E07               	movwf	color_writetoaddr@value^0,c
  7408   002CDA  0E05               	movlw	5
  7409   002CDC  ECC7  F018         	call	_color_writetoaddr
  7410   002CE0                     
  7411                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  7412   002CE0  0E00               	movlw	0
  7413   002CE2  6E0F               	movwf	_set_interrupt_threshold$2091^0,c
  7414   002CE4  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  7415   002CE6  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  7416   002CE8  B4D8               	btfsc	status,2,c
  7417   002CEA  EF79  F016         	goto	u1461
  7418   002CEE  EF7B  F016         	goto	u1460
  7419   002CF2                     u1461:
  7420   002CF2  EF7D  F016         	goto	l3140
  7421   002CF6                     u1460:
  7422   002CF6  0E01               	movlw	1
  7423   002CF8  6E0F               	movwf	_set_interrupt_threshold$2091^0,c
  7424   002CFA                     l3140:
  7425   002CFA  C00F  F007         	movff	_set_interrupt_threshold$2091,color_writetoaddr@value
  7426   002CFE  0E04               	movlw	4
  7427   002D00  ECC7  F018         	call	_color_writetoaddr
  7428   002D04                     
  7429                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  7430   002D04  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7431   002D06  6E07               	movwf	color_writetoaddr@value^0,c
  7432   002D08  0E07               	movlw	7
  7433   002D0A  ECC7  F018         	call	_color_writetoaddr
  7434                           
  7435                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  7436   002D0E  0E00               	movlw	0
  7437   002D10  6E10               	movwf	_set_interrupt_threshold$2092^0,c
  7438   002D12  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  7439   002D14  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7440   002D16  B4D8               	btfsc	status,2,c
  7441   002D18  EF90  F016         	goto	u1471
  7442   002D1C  EF92  F016         	goto	u1470
  7443   002D20                     u1471:
  7444   002D20  EF94  F016         	goto	l3148
  7445   002D24                     u1470:
  7446   002D24  0E01               	movlw	1
  7447   002D26  6E10               	movwf	_set_interrupt_threshold$2092^0,c
  7448   002D28                     l3148:
  7449   002D28  C010  F007         	movff	_set_interrupt_threshold$2092,color_writetoaddr@value
  7450   002D2C  0E06               	movlw	6
  7451   002D2E  ECC7  F018         	call	_color_writetoaddr
  7452   002D32  0012               	return		;funcret
  7453   002D34                     __end_of_set_interrupt_threshold:
  7454                           	callstack 0
  7455                           
  7456 ;; *************** function _enable_color_interrupt *****************
  7457 ;; Defined at:
  7458 ;;		line 38 in file "interrupts.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7476 ;;Total ram usage:        0 bytes
  7477 ;; Hardware stack levels used: 1
  7478 ;; Hardware stack levels required when called: 7
  7479 ;; This function calls:
  7480 ;;		_clear_interrupt_flag
  7481 ;;		_color_writetoaddr
  7482 ;; This function is called by:
  7483 ;;		_Interrupts_init
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text42
  7488   0031F2                     __ptext42:
  7489                           	callstack 0
  7490   0031F2                     _enable_color_interrupt:
  7491                           	callstack 22
  7492   0031F2                     
  7493                           ;interrupts.c: 39:     clear_interrupt_flag();
  7494   0031F2  ECE3  F018         	call	_clear_interrupt_flag	;wreg free
  7495                           
  7496                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  7497   0031F6  0E13               	movlw	19
  7498   0031F8  6E07               	movwf	color_writetoaddr@value^0,c
  7499   0031FA  0E00               	movlw	0
  7500   0031FC  ECC7  F018         	call	_color_writetoaddr
  7501   003200  0012               	return		;funcret
  7502   003202                     __end_of_enable_color_interrupt:
  7503                           	callstack 0
  7504                           
  7505 ;; *************** function _color_writetoaddr *****************
  7506 ;; Defined at:
  7507 ;;		line 21 in file "color.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  address         1    wreg     unsigned char 
  7510 ;;  value           1    6[COMRAM] unsigned char 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;  address         1    7[COMRAM] unsigned char 
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg, status,2, status,0, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7522 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7526 ;;Total ram usage:        2 bytes
  7527 ;; Hardware stack levels used: 1
  7528 ;; Hardware stack levels required when called: 6
  7529 ;; This function calls:
  7530 ;;		_I2C_2_Master_Start
  7531 ;;		_I2C_2_Master_Stop
  7532 ;;		_I2C_2_Master_Write
  7533 ;; This function is called by:
  7534 ;;		_color_click_init
  7535 ;;		_enable_color_interrupt
  7536 ;;		_set_interrupt_threshold
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text43
  7541   00318E                     __ptext43:
  7542                           	callstack 0
  7543   00318E                     _color_writetoaddr:
  7544                           	callstack 23
  7545                           
  7546                           ;incstack = 0
  7547                           ;color_writetoaddr@address stored from wreg
  7548   00318E  6E08               	movwf	color_writetoaddr@address^0,c
  7549   003190                     
  7550                           ;color.c: 22:     I2C_2_Master_Start();
  7551   003190  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  7552                           
  7553                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  7554   003194  0E52               	movlw	82
  7555   003196  EC01  F019         	call	_I2C_2_Master_Write
  7556                           
  7557                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  7558   00319A  5008               	movf	color_writetoaddr@address^0,w,c
  7559   00319C  0980               	iorlw	128
  7560   00319E  EC01  F019         	call	_I2C_2_Master_Write
  7561                           
  7562                           ;color.c: 25:     I2C_2_Master_Write(value);
  7563   0031A2  5007               	movf	color_writetoaddr@value^0,w,c
  7564   0031A4  EC01  F019         	call	_I2C_2_Master_Write
  7565                           
  7566                           ;color.c: 26:     I2C_2_Master_Stop();
  7567   0031A8  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  7568   0031AC  0012               	return		;funcret
  7569   0031AE                     __end_of_color_writetoaddr:
  7570                           	callstack 0
  7571                           
  7572 ;; *************** function _clear_interrupt_flag *****************
  7573 ;; Defined at:
  7574 ;;		line 52 in file "interrupts.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;		None
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7592 ;;Total ram usage:        0 bytes
  7593 ;; Hardware stack levels used: 1
  7594 ;; Hardware stack levels required when called: 6
  7595 ;; This function calls:
  7596 ;;		_I2C_2_Master_Start
  7597 ;;		_I2C_2_Master_Stop
  7598 ;;		_I2C_2_Master_Write
  7599 ;; This function is called by:
  7600 ;;		_enable_color_interrupt
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           	psect	text44
  7605   0031C6                     __ptext44:
  7606                           	callstack 0
  7607   0031C6                     _clear_interrupt_flag:
  7608                           	callstack 22
  7609   0031C6                     
  7610                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7611   0031C6  EC17  F019         	call	_I2C_2_Master_Start	;wreg free
  7612                           
  7613                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7614   0031CA  0E52               	movlw	82
  7615   0031CC  EC01  F019         	call	_I2C_2_Master_Write
  7616                           
  7617                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7618   0031D0  0EE6               	movlw	230
  7619   0031D2  EC01  F019         	call	_I2C_2_Master_Write
  7620                           
  7621                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7622   0031D6  EC12  F019         	call	_I2C_2_Master_Stop	;wreg free
  7623   0031DA  0012               	return		;funcret
  7624   0031DC                     __end_of_clear_interrupt_flag:
  7625                           	callstack 0
  7626                           
  7627 ;; *************** function _I2C_2_Master_Write *****************
  7628 ;; Defined at:
  7629 ;;		line 45 in file "i2c.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;  data_byte       1    wreg     unsigned char 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  data_byte       1    5[COMRAM] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, status,2, status,0, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7647 ;;Total ram usage:        1 bytes
  7648 ;; Hardware stack levels used: 1
  7649 ;; Hardware stack levels required when called: 5
  7650 ;; This function calls:
  7651 ;;		_I2C_2_Master_Idle
  7652 ;; This function is called by:
  7653 ;;		_color_writetoaddr
  7654 ;;		_color_read_Red
  7655 ;;		_color_read_Green
  7656 ;;		_color_read_Blue
  7657 ;;		_color_read_Clear
  7658 ;;		_clear_interrupt_flag
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           	psect	text45
  7663   003202                     __ptext45:
  7664                           	callstack 0
  7665   003202                     _I2C_2_Master_Write:
  7666                           	callstack 24
  7667                           
  7668                           ;incstack = 0
  7669                           ;I2C_2_Master_Write@data_byte stored from wreg
  7670   003202  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  7671   003204                     
  7672                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7673   003204  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7674   003208                     
  7675                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7676   003208  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7677   00320C  0012               	return		;funcret
  7678   00320E                     __end_of_I2C_2_Master_Write:
  7679                           	callstack 0
  7680                           
  7681 ;; *************** function _I2C_2_Master_Stop *****************
  7682 ;; Defined at:
  7683 ;;		line 39 in file "i2c.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;		None
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;		None
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7701 ;;Total ram usage:        0 bytes
  7702 ;; Hardware stack levels used: 1
  7703 ;; Hardware stack levels required when called: 5
  7704 ;; This function calls:
  7705 ;;		_I2C_2_Master_Idle
  7706 ;; This function is called by:
  7707 ;;		_color_writetoaddr
  7708 ;;		_color_read_Red
  7709 ;;		_color_read_Green
  7710 ;;		_color_read_Blue
  7711 ;;		_color_read_Clear
  7712 ;;		_clear_interrupt_flag
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text46
  7717   003224                     __ptext46:
  7718                           	callstack 0
  7719   003224                     _I2C_2_Master_Stop:
  7720                           	callstack 24
  7721   003224                     
  7722                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7723   003224  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7724   003228                     
  7725                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7726   003228  010E               	movlb	14	; () banked
  7727   00322A  85DA               	bsf	218,2,b	;volatile
  7728   00322C                     
  7729                           ; BSR set to: 14
  7730   00322C  0012               	return		;funcret
  7731   00322E                     __end_of_I2C_2_Master_Stop:
  7732                           	callstack 0
  7733                           
  7734 ;; *************** function _I2C_2_Master_Start *****************
  7735 ;; Defined at:
  7736 ;;		line 27 in file "i2c.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  1    wreg      void 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;Total ram usage:        0 bytes
  7755 ;; Hardware stack levels used: 1
  7756 ;; Hardware stack levels required when called: 5
  7757 ;; This function calls:
  7758 ;;		_I2C_2_Master_Idle
  7759 ;; This function is called by:
  7760 ;;		_color_writetoaddr
  7761 ;;		_color_read_Red
  7762 ;;		_color_read_Green
  7763 ;;		_color_read_Blue
  7764 ;;		_color_read_Clear
  7765 ;;		_clear_interrupt_flag
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text47
  7770   00322E                     __ptext47:
  7771                           	callstack 0
  7772   00322E                     _I2C_2_Master_Start:
  7773                           	callstack 24
  7774   00322E                     
  7775                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7776   00322E  EC6B  F018         	call	_I2C_2_Master_Idle	;wreg free
  7777   003232                     
  7778                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7779   003232  010E               	movlb	14	; () banked
  7780   003234  81DA               	bsf	218,0,b	;volatile
  7781   003236                     
  7782                           ; BSR set to: 14
  7783   003236  0012               	return		;funcret
  7784   003238                     __end_of_I2C_2_Master_Start:
  7785                           	callstack 0
  7786                           
  7787 ;; *************** function _I2C_2_Master_Idle *****************
  7788 ;; Defined at:
  7789 ;;		line 22 in file "i2c.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7807 ;;Total ram usage:        1 bytes
  7808 ;; Hardware stack levels used: 1
  7809 ;; Hardware stack levels required when called: 4
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_I2C_2_Master_Start
  7814 ;;		_I2C_2_Master_RepStart
  7815 ;;		_I2C_2_Master_Stop
  7816 ;;		_I2C_2_Master_Write
  7817 ;;		_I2C_2_Master_Read
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text48
  7822   0030D6                     __ptext48:
  7823                           	callstack 0
  7824   0030D6                     _I2C_2_Master_Idle:
  7825                           	callstack 24
  7826   0030D6                     l145:
  7827   0030D6  010E               	movlb	14	; () banked
  7828   0030D8  B5D8               	btfsc	216,2,b	;volatile
  7829   0030DA  EF71  F018         	goto	u1051
  7830   0030DE  EF73  F018         	goto	u1050
  7831   0030E2                     u1051:
  7832   0030E2  EF6B  F018         	goto	l145
  7833   0030E6                     u1050:
  7834   0030E6                     
  7835                           ; BSR set to: 14
  7836   0030E6  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7837   0030EA  0E1F               	movlw	31
  7838   0030EC  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7839   0030EE  A4D8               	btfss	status,2,c
  7840   0030F0  EF7C  F018         	goto	u1061
  7841   0030F4  EF7E  F018         	goto	u1060
  7842   0030F8                     u1061:
  7843   0030F8  EF6B  F018         	goto	l145
  7844   0030FC                     u1060:
  7845   0030FC                     
  7846                           ; BSR set to: 14
  7847   0030FC  0012               	return		;funcret
  7848   0030FE                     __end_of_I2C_2_Master_Idle:
  7849                           	callstack 0
  7850                           
  7851 ;; *************** function _HighISR *****************
  7852 ;; Defined at:
  7853 ;;		line 23 in file "interrupts.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2, status,0, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7871 ;;Total ram usage:        2 bytes
  7872 ;; Hardware stack levels used: 1
  7873 ;; Hardware stack levels required when called: 3
  7874 ;; This function calls:
  7875 ;;		i2_clear_interrupt_flag
  7876 ;; This function is called by:
  7877 ;;		Interrupt level 2
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           	psect	intcode
  7882   000008                     __pintcode:
  7883                           	callstack 0
  7884   000008                     _HighISR:
  7885                           	callstack 18
  7886                           
  7887                           ; BSR set to: 14
  7888                           ;incstack = 0
  7889   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7890   00000A                     
  7891                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7892   00000A  010E               	movlb	14	; () banked
  7893   00000C  A333               	btfss	51,1,b	;volatile
  7894   00000E  EF0B  F000         	goto	i2u161_41
  7895   000012  EF0D  F000         	goto	i2u161_40
  7896   000016                     i2u161_41:
  7897   000016  EF39  F000         	goto	i2l516
  7898   00001A                     i2u161_40:
  7899   00001A                     
  7900                           ; BSR set to: 14
  7901   00001A  0100               	movlb	0	; () banked
  7902   00001C  51F2               	movf	_response_in_progress& (0+255),w,b
  7903   00001E  11F3               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7904   000020  A4D8               	btfss	status,2,c
  7905   000022  EF15  F000         	goto	i2u162_41
  7906   000026  EF17  F000         	goto	i2u162_40
  7907   00002A                     i2u162_41:
  7908   00002A  EF39  F000         	goto	i2l516
  7909   00002E                     i2u162_40:
  7910   00002E                     
  7911                           ; BSR set to: 0
  7912                           ;interrupts.c: 27:         card_detected = 1;
  7913   00002E  0E00               	movlw	0
  7914   000030  6FF1               	movwf	(_card_detected+1)& (0+255),b
  7915   000032  0E01               	movlw	1
  7916   000034  6FF0               	movwf	_card_detected& (0+255),b
  7917   000036                     
  7918                           ; BSR set to: 0
  7919                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7920   000036  8E7C               	bsf	124,7,c	;volatile
  7921   000038                     
  7922                           ; BSR set to: 0
  7923                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7924   000038  0E05               	movlw	5
  7925   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7926   00003C  0E0F               	movlw	15
  7927   00003E  6E03               	movwf	??_HighISR^0,c
  7928   000040  0EF1               	movlw	241
  7929   000042                     i2u240_47:
  7930   000042  2EE8               	decfsz	wreg,f,c
  7931   000044  D7FE               	bra	i2u240_47
  7932   000046  2E03               	decfsz	??_HighISR^0,f,c
  7933   000048  D7FC               	bra	i2u240_47
  7934   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7935   00004C  D7FA               	bra	i2u240_47
  7936   00004E  F000               	nop	
  7937   000050                     
  7938                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7939   000050  9E7C               	bcf	124,7,c	;volatile
  7940   000052                     
  7941                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7942   000052  0E05               	movlw	5
  7943   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7944   000056  0E0F               	movlw	15
  7945   000058  6E03               	movwf	??_HighISR^0,c
  7946   00005A  0EF1               	movlw	241
  7947   00005C                     i2u241_47:
  7948   00005C  2EE8               	decfsz	wreg,f,c
  7949   00005E  D7FE               	bra	i2u241_47
  7950   000060  2E03               	decfsz	??_HighISR^0,f,c
  7951   000062  D7FC               	bra	i2u241_47
  7952   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7953   000066  D7FA               	bra	i2u241_47
  7954   000068  F000               	nop	
  7955   00006A                     
  7956                           ;interrupts.c: 32:         clear_interrupt_flag();
  7957   00006A  ECEE  F018         	call	i2_clear_interrupt_flag	;wreg free
  7958   00006E                     
  7959                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7960   00006E  010E               	movlb	14	; () banked
  7961   000070  9333               	bcf	51,1,b	;volatile
  7962   000072                     i2l516:
  7963   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7964   000074  0011               	retfie		f
  7965   000076                     __end_of_HighISR:
  7966                           	callstack 0
  7967                           
  7968 ;; *************** function i2_clear_interrupt_flag *****************
  7969 ;; Defined at:
  7970 ;;		line 52 in file "interrupts.c"
  7971 ;; Parameters:    Size  Location     Type
  7972 ;;		None
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;		None
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  1    wreg      void 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;Total ram usage:        0 bytes
  7989 ;; Hardware stack levels used: 1
  7990 ;; Hardware stack levels required when called: 2
  7991 ;; This function calls:
  7992 ;;		i2_I2C_2_Master_Start
  7993 ;;		i2_I2C_2_Master_Stop
  7994 ;;		i2_I2C_2_Master_Write
  7995 ;; This function is called by:
  7996 ;;		_HighISR
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text50
  8001   0031DC                     __ptext50:
  8002                           	callstack 0
  8003   0031DC                     i2_clear_interrupt_flag:
  8004                           	callstack 18
  8005   0031DC                     
  8006                           ;interrupts.c: 53:     I2C_2_Master_Start();
  8007   0031DC  EC21  F019         	call	i2_I2C_2_Master_Start	;wreg free
  8008                           
  8009                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  8010   0031E0  0E52               	movlw	82
  8011   0031E2  EC07  F019         	call	i2_I2C_2_Master_Write
  8012                           
  8013                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  8014   0031E6  0EE6               	movlw	230
  8015   0031E8  EC07  F019         	call	i2_I2C_2_Master_Write
  8016                           
  8017                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  8018   0031EC  EC1C  F019         	call	i2_I2C_2_Master_Stop	;wreg free
  8019   0031F0  0012               	return		;funcret
  8020   0031F2                     __end_ofi2_clear_interrupt_flag:
  8021                           	callstack 0
  8022                           
  8023 ;; *************** function i2_I2C_2_Master_Write *****************
  8024 ;; Defined at:
  8025 ;;		line 45 in file "i2c.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  data_byte       1    wreg     unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  data_byte       1    1[COMRAM] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8043 ;;Total ram usage:        1 bytes
  8044 ;; Hardware stack levels used: 1
  8045 ;; Hardware stack levels required when called: 1
  8046 ;; This function calls:
  8047 ;;		i2_I2C_2_Master_Idle
  8048 ;; This function is called by:
  8049 ;;		i2_clear_interrupt_flag
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text51
  8054   00320E                     __ptext51:
  8055                           	callstack 0
  8056   00320E                     i2_I2C_2_Master_Write:
  8057                           	callstack 18
  8058                           
  8059                           ;incstack = 0
  8060                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  8061   00320E  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  8062   003210                     
  8063                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8064   003210  EC7F  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8065   003214                     
  8066                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8067   003214  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  8068   003218  0012               	return		;funcret
  8069   00321A                     __end_ofi2_I2C_2_Master_Write:
  8070                           	callstack 0
  8071                           
  8072 ;; *************** function i2_I2C_2_Master_Stop *****************
  8073 ;; Defined at:
  8074 ;;		line 39 in file "i2c.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;		None
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;		None
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      void 
  8081 ;; Registers used:
  8082 ;;		wreg, status,2, status,0, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8092 ;;Total ram usage:        0 bytes
  8093 ;; Hardware stack levels used: 1
  8094 ;; Hardware stack levels required when called: 1
  8095 ;; This function calls:
  8096 ;;		i2_I2C_2_Master_Idle
  8097 ;; This function is called by:
  8098 ;;		i2_clear_interrupt_flag
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text52
  8103   003238                     __ptext52:
  8104                           	callstack 0
  8105   003238                     i2_I2C_2_Master_Stop:
  8106                           	callstack 18
  8107   003238                     
  8108                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8109   003238  EC7F  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8110   00323C                     
  8111                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8112   00323C  010E               	movlb	14	; () banked
  8113   00323E  85DA               	bsf	218,2,b	;volatile
  8114   003240                     
  8115                           ; BSR set to: 14
  8116   003240  0012               	return		;funcret
  8117   003242                     __end_ofi2_I2C_2_Master_Stop:
  8118                           	callstack 0
  8119                           
  8120 ;; *************** function i2_I2C_2_Master_Start *****************
  8121 ;; Defined at:
  8122 ;;		line 27 in file "i2c.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;		None
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8140 ;;Total ram usage:        0 bytes
  8141 ;; Hardware stack levels used: 1
  8142 ;; Hardware stack levels required when called: 1
  8143 ;; This function calls:
  8144 ;;		i2_I2C_2_Master_Idle
  8145 ;; This function is called by:
  8146 ;;		i2_clear_interrupt_flag
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text53
  8151   003242                     __ptext53:
  8152                           	callstack 0
  8153   003242                     i2_I2C_2_Master_Start:
  8154                           	callstack 18
  8155   003242                     
  8156                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8157   003242  EC7F  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8158   003246                     
  8159                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8160   003246  010E               	movlb	14	; () banked
  8161   003248  81DA               	bsf	218,0,b	;volatile
  8162   00324A                     
  8163                           ; BSR set to: 14
  8164   00324A  0012               	return		;funcret
  8165   00324C                     __end_ofi2_I2C_2_Master_Start:
  8166                           	callstack 0
  8167                           
  8168 ;; *************** function i2_I2C_2_Master_Idle *****************
  8169 ;; Defined at:
  8170 ;;		line 22 in file "i2c.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;		None
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;		None
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		wreg, status,2, status,0
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8188 ;;Total ram usage:        1 bytes
  8189 ;; Hardware stack levels used: 1
  8190 ;; This function calls:
  8191 ;;		Nothing
  8192 ;; This function is called by:
  8193 ;;		i2_I2C_2_Master_Start
  8194 ;;		i2_I2C_2_Master_Stop
  8195 ;;		i2_I2C_2_Master_Write
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           	psect	text54
  8200   0030FE                     __ptext54:
  8201                           	callstack 0
  8202   0030FE                     i2_I2C_2_Master_Idle:
  8203                           	callstack 18
  8204   0030FE                     i2l145:
  8205   0030FE  010E               	movlb	14	; () banked
  8206   003100  B5D8               	btfsc	216,2,b	;volatile
  8207   003102  EF85  F018         	goto	i2u134_41
  8208   003106  EF87  F018         	goto	i2u134_40
  8209   00310A                     i2u134_41:
  8210   00310A  EF7F  F018         	goto	i2l145
  8211   00310E                     i2u134_40:
  8212   00310E                     
  8213                           ; BSR set to: 14
  8214   00310E  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8215   003112  0E1F               	movlw	31
  8216   003114  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8217   003116  A4D8               	btfss	status,2,c
  8218   003118  EF90  F018         	goto	i2u135_41
  8219   00311C  EF92  F018         	goto	i2u135_40
  8220   003120                     i2u135_41:
  8221   003120  EF7F  F018         	goto	i2l145
  8222   003124                     i2u135_40:
  8223   003124                     
  8224                           ; BSR set to: 14
  8225   003124  0012               	return		;funcret
  8226   003126                     __end_ofi2_I2C_2_Master_Idle:
  8227                           	callstack 0
  8228                           
  8229                           	psect	rparam
  8230   000000                     
  8231                           	psect	temp
  8232   00005B                     btemp:
  8233                           	callstack 0
  8234   00005B                     	ds	1
  8235   000000                     int$flags	set	btemp
  8236   000000                     wtemp8	set	btemp+1
  8237   000000                     ttemp5	set	btemp+1
  8238   000000                     ttemp6	set	btemp+4
  8239   000000                     ttemp7	set	btemp+8
  8240                           
  8241                           	psect	idloc
  8242                           
  8243                           ;Config register IDLOC0 @ 0x200000
  8244                           ;	unspecified, using default values
  8245   200000                     	org	2097152
  8246   200000  0FFF               	dw	4095
  8247                           
  8248                           ;Config register IDLOC1 @ 0x200002
  8249                           ;	unspecified, using default values
  8250   200002                     	org	2097154
  8251   200002  0FFF               	dw	4095
  8252                           
  8253                           ;Config register IDLOC2 @ 0x200004
  8254                           ;	unspecified, using default values
  8255   200004                     	org	2097156
  8256   200004  0FFF               	dw	4095
  8257                           
  8258                           ;Config register IDLOC3 @ 0x200006
  8259                           ;	unspecified, using default values
  8260   200006                     	org	2097158
  8261   200006  0FFF               	dw	4095
  8262                           
  8263                           ;Config register IDLOC4 @ 0x200008
  8264                           ;	unspecified, using default values
  8265   200008                     	org	2097160
  8266   200008  0FFF               	dw	4095
  8267                           
  8268                           ;Config register IDLOC5 @ 0x20000A
  8269                           ;	unspecified, using default values
  8270   20000A                     	org	2097162
  8271   20000A  0FFF               	dw	4095
  8272                           
  8273                           ;Config register IDLOC6 @ 0x20000C
  8274                           ;	unspecified, using default values
  8275   20000C                     	org	2097164
  8276   20000C  0FFF               	dw	4095
  8277                           
  8278                           ;Config register IDLOC7 @ 0x20000E
  8279                           ;	unspecified, using default values
  8280   20000E                     	org	2097166
  8281   20000E  0FFF               	dw	4095
  8282                           
  8283                           	psect	config
  8284                           
  8285                           ;Config register CONFIG1L @ 0x300000
  8286                           ;	External Oscillator mode Selection bits
  8287                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8288                           ;	Power-up default value for COSC bits
  8289                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8290   300000                     	org	3145728
  8291   300000  AA                 	db	170
  8292                           
  8293                           ;Config register CONFIG1H @ 0x300001
  8294                           ;	unspecified, using default values
  8295                           ;	Clock Out Enable bit
  8296                           ;	CLKOUTEN = 0x1, unprogrammed default
  8297                           ;	Clock Switch Enable bit
  8298                           ;	CSWEN = 0x1, unprogrammed default
  8299                           ;	Fail-Safe Clock Monitor Enable bit
  8300                           ;	FCMEN = 0x1, unprogrammed default
  8301   300001                     	org	3145729
  8302   300001  FF                 	db	255
  8303                           
  8304                           ;Config register CONFIG2L @ 0x300002
  8305                           ;	unspecified, using default values
  8306                           ;	Master Clear Enable bit
  8307                           ;	MCLRE = 0x1, unprogrammed default
  8308                           ;	Power-up Timer Enable bit
  8309                           ;	PWRTE = 0x1, unprogrammed default
  8310                           ;	Low-power BOR enable bit
  8311                           ;	LPBOREN = 0x1, unprogrammed default
  8312                           ;	Brown-out Reset Enable bits
  8313                           ;	BOREN = 0x3, unprogrammed default
  8314   300002                     	org	3145730
  8315   300002  FF                 	db	255
  8316                           
  8317                           ;Config register CONFIG2H @ 0x300003
  8318                           ;	unspecified, using default values
  8319                           ;	Brown Out Reset Voltage selection bits
  8320                           ;	BORV = 0x3, unprogrammed default
  8321                           ;	ZCD Disable bit
  8322                           ;	ZCD = 0x1, unprogrammed default
  8323                           ;	PPSLOCK bit One-Way Set Enable bit
  8324                           ;	PPS1WAY = 0x1, unprogrammed default
  8325                           ;	Stack Full/Underflow Reset Enable bit
  8326                           ;	STVREN = 0x1, unprogrammed default
  8327                           ;	Debugger Enable bit
  8328                           ;	DEBUG = 0x1, unprogrammed default
  8329                           ;	Extended Instruction Set Enable bit
  8330                           ;	XINST = 0x1, unprogrammed default
  8331   300003                     	org	3145731
  8332   300003  FF                 	db	255
  8333                           
  8334                           ;Config register CONFIG3L @ 0x300004
  8335                           ;	WDT Period Select bits
  8336                           ;	WDTCPS = 0x1F, unprogrammed default
  8337                           ;	WDT operating mode
  8338                           ;	WDTE = OFF, WDT Disabled
  8339   300004                     	org	3145732
  8340   300004  9F                 	db	159
  8341                           
  8342                           ;Config register CONFIG3H @ 0x300005
  8343                           ;	unspecified, using default values
  8344                           ;	WDT Window Select bits
  8345                           ;	WDTCWS = 0x7, unprogrammed default
  8346                           ;	WDT input clock selector
  8347                           ;	WDTCCS = 0x7, unprogrammed default
  8348   300005                     	org	3145733
  8349   300005  FF                 	db	255
  8350                           
  8351                           ;Config register CONFIG4L @ 0x300006
  8352                           ;	unspecified, using default values
  8353                           ;	Write Protection Block 0
  8354                           ;	WRT0 = 0x1, unprogrammed default
  8355                           ;	Write Protection Block 1
  8356                           ;	WRT1 = 0x1, unprogrammed default
  8357                           ;	Write Protection Block 2
  8358                           ;	WRT2 = 0x1, unprogrammed default
  8359                           ;	Write Protection Block 3
  8360                           ;	WRT3 = 0x1, unprogrammed default
  8361                           ;	Write Protection Block 3
  8362                           ;	WRT4 = 0x1, unprogrammed default
  8363                           ;	Write Protection Block 3
  8364                           ;	WRT5 = 0x1, unprogrammed default
  8365                           ;	Write Protection Block 3
  8366                           ;	WRT6 = 0x1, unprogrammed default
  8367                           ;	Write Protection Block 3
  8368                           ;	WRT7 = 0x1, unprogrammed default
  8369   300006                     	org	3145734
  8370   300006  FF                 	db	255
  8371                           
  8372                           ;Config register CONFIG4H @ 0x300007
  8373                           ;	unspecified, using default values
  8374                           ;	Configuration Register Write Protection bit
  8375                           ;	WRTC = 0x1, unprogrammed default
  8376                           ;	Boot Block Write Protection bit
  8377                           ;	WRTB = 0x1, unprogrammed default
  8378                           ;	Data EEPROM Write Protection bit
  8379                           ;	WRTD = 0x1, unprogrammed default
  8380                           ;	Scanner Enable bit
  8381                           ;	SCANE = 0x1, unprogrammed default
  8382                           ;	Low Voltage Programming Enable bit
  8383                           ;	LVP = 0x1, unprogrammed default
  8384   300007                     	org	3145735
  8385   300007  FF                 	db	255
  8386                           
  8387                           ;Config register CONFIG5L @ 0x300008
  8388                           ;	unspecified, using default values
  8389                           ;	UserNVM Program Memory Code Protection bit
  8390                           ;	CP = 0x1, unprogrammed default
  8391                           ;	DataNVM Memory Code Protection bit
  8392                           ;	CPD = 0x1, unprogrammed default
  8393   300008                     	org	3145736
  8394   300008  FF                 	db	255
  8395                           
  8396                           ;Config register CONFIG5H @ 0x300009
  8397                           ;	unspecified, using default values
  8398   300009                     	org	3145737
  8399   300009  FF                 	db	255
  8400                           
  8401                           ;Config register CONFIG6L @ 0x30000A
  8402                           ;	unspecified, using default values
  8403                           ;	Table Read Protection Block 0
  8404                           ;	EBTR0 = 0x1, unprogrammed default
  8405                           ;	Table Read Protection Block 1
  8406                           ;	EBTR1 = 0x1, unprogrammed default
  8407                           ;	Table Read Protection Block 2
  8408                           ;	EBTR2 = 0x1, unprogrammed default
  8409                           ;	Table Read Protection Block 3
  8410                           ;	EBTR3 = 0x1, unprogrammed default
  8411                           ;	Table Read Protection Block 4
  8412                           ;	EBTR4 = 0x1, unprogrammed default
  8413                           ;	Table Read Protection Block 5
  8414                           ;	EBTR5 = 0x1, unprogrammed default
  8415                           ;	Table Read Protection Block 6
  8416                           ;	EBTR6 = 0x1, unprogrammed default
  8417                           ;	Table Read Protection Block 7
  8418                           ;	EBTR7 = 0x1, unprogrammed default
  8419   30000A                     	org	3145738
  8420   30000A  FF                 	db	255
  8421                           
  8422                           ;Config register CONFIG6H @ 0x30000B
  8423                           ;	unspecified, using default values
  8424                           ;	Boot Block Table Read Protection bit
  8425                           ;	EBTRB = 0x1, unprogrammed default
  8426   30000B                     	org	3145739
  8427   30000B  FF                 	db	255
  8428                           tosu	equ	0xFFF
  8429                           tosh	equ	0xFFE
  8430                           tosl	equ	0xFFD
  8431                           stkptr	equ	0xFFC
  8432                           pclatu	equ	0xFFB
  8433                           pclath	equ	0xFFA
  8434                           pcl	equ	0xFF9
  8435                           tblptru	equ	0xFF8
  8436                           tblptrh	equ	0xFF7
  8437                           tblptrl	equ	0xFF6
  8438                           tablat	equ	0xFF5
  8439                           prodh	equ	0xFF4
  8440                           prodl	equ	0xFF3
  8441                           indf0	equ	0xFEF
  8442                           postinc0	equ	0xFEE
  8443                           postdec0	equ	0xFED
  8444                           preinc0	equ	0xFEC
  8445                           plusw0	equ	0xFEB
  8446                           fsr0h	equ	0xFEA
  8447                           fsr0l	equ	0xFE9
  8448                           wreg	equ	0xFE8
  8449                           indf1	equ	0xFE7
  8450                           postinc1	equ	0xFE6
  8451                           postdec1	equ	0xFE5
  8452                           preinc1	equ	0xFE4
  8453                           plusw1	equ	0xFE3
  8454                           fsr1h	equ	0xFE2
  8455                           fsr1l	equ	0xFE1
  8456                           bsr	equ	0xFE0
  8457                           indf2	equ	0xFDF
  8458                           postinc2	equ	0xFDE
  8459                           postdec2	equ	0xFDD
  8460                           preinc2	equ	0xFDC
  8461                           plusw2	equ	0xFDB
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    140     149
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2582$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2533$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2533$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               414   414      0   90672
                                            138 BANK0      2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    3507
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    9897
                                             31 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   44451
                                             31 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    8576
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     523
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    4588
                                             26 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   26104
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    5787
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4571
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    8129
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5331
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2981
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     963
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     750
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     722
                                              4 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     378
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1946
                                             15 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Clear
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8C      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25B      64        0.0%
DATA                 0      0     25B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 21:21:06 2022

clear_read_calibration@clear_read_check 0083                          _color_read_Red 2DDA  
                       _color_read_Blue 2ECA                                      l22 31AC  
                                    l31 2F18                                      l25 2E28  
                                    l34 2EC8                                      l19 3050  
                                    l28 2E78                                      l86 20DE  
                                    l95 2B5C                                      l79 2AD6  
                   ___wmul@multiplicand 0007                        _color_read_Clear 2E7A  
                      _color_read_Green 2E2A                       ??_Interrupts_init 0011  
                                   l100 2936                                     l110 29C2  
                                   l105 288A                                     l115 2A4E  
                                   l142 30D4                                     l151 3236  
                                   l160 320C                                     l240 1336  
                                   l145 30D6                                     l321 2608  
                                   l241 14BC                                     l154 3222  
                                   l242 14BA                                     l163 2F9E  
                                   l148 30FC                                     l244 14E8  
                                   l157 322C                                     l421 318C  
                                   l237 14B4                                     l510 301C  
                                   l334 1DEA                                     l350 2BDC  
                                   l430 31B0                                     l238 1328  
                                   l239 1326                                     l344 2714  
                                   l433 31C4                                     l274 316C  
                                   l362 11AE                                     l363 11CE  
                                   l339 18F2                                     l532 314A  
                                   l364 11EE                                     l365 1270  
                                   l526 2D32                                     l519 3200  
                                   l439 3080                                     l368 24EE  
                                   l529 31DA                                     l646 1F72  
                                   l659 2242     normalise_readings@normalised_values 0027  
                      ??_motor_response 0024                                     _abs 2FA0  
                                   _pad 2BDE                   __end_of_card_response 24F0  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0085                                    l1030 2CCA  
                                  l1023 2CC2                                    l1210 2FDE  
                                  ?_abs 0017                                    l1207 2FD6  
                                  l3000 2BCA                                    l1217 2DD8  
                                  l3002 2BDA                                    l3010 0E94  
                                  l1250 1988                                    l1243 2C56  
                                  l1251 19CE                                    l3020 0EFE  
                                  l3012 0EAA                                    l3110 11B0  
                                  l3022 0F12                                    l3014 0EBE  
                                  l3006 0E7C                                    l1262 1B70  
                                  l1239 2C00                                    l3120 1208  
                                  l3112 11C8                                    l3040 0FBA  
                                  l3032 0F68                                    l3024 0F28  
                                  l3016 0ED2                                    l3008 0E80  
                                  l1248 1980                                    l3130 31F2  
                                  l3114 11D0                                    l3042 0FCE  
                                  l3034 0F7C                                    l3026 0F3C  
                                  l3018 0EE6                                    l3210 299E  
                                  l3202 2960                                    l1275 2D86  
                                  l3140 2CFA                                    l3132 2CCC  
                                  l3116 11E8                                    l3060 1050  
                                  l3052 0FE6                                    l3036 0F92  
                                  l3028 0F50                                    l3124 120E  
                                  l3212 29A6                                    l3204 2978  
                                  l3220 317A                                    l1269 23A0  
                                  l3142 2D04                                    l3134 2CE0  
                                  l3230 2FE0                                    l3214 314C  
                                  l3118 11F0                                    l3062 10D0  
                                  l3054 0FFA                                    l3038 0FA6  
                                  l3206 2984                                    l3222 317C  
                                  l1287 27DE                                    l1295 2F5C  
                                  l3144 2D12                                    l3136 2CE4  
                                  l3240 3010                                    l3232 3000  
                                  l3080 1152                                    l3064 10E4  
                                  l3056 1010                                    l3208 2990  
                                  l3224 3186                                    l3216 316E  
                                  l3146 2D24                                    l3138 2CF6  
                                  l3250 301A                                    l3242 3012  
                                  l3234 3002                                    l3066 10FA  
                                  l3058 103C                                    l1298 324C  
                                  l3170 3046                                    l3162 301E  
                                  l3226 3188                                    l3218 3178  
                                  l3148 2D28                                    l3244 3014  
                                  l3236 3006                                    l3068 1126  
                                  l3164 3022                                    l3180 2AB0  
                                  l3172 2A50                                    l3228 318A  
                                  l3246 3016                                    l3238 300C  
                                  l3094 116C                                    l3078 113E  
                                  l3166 302C                                    l3190 2ACA  
                                  l3182 2AB2                                    l3174 2A58  
                                  l3248 3018                                    l2800 2838  
                                  l3096 1180                                    l3600 1E1E  
                                  l3168 303C                                    l3192 2AD4  
                                  l3184 2ABC                                    l3176 2A82  
                                  l2562 30D6                                    l2650 3204  
                                  l2722 3190                                    l2730 2E2A  
                                  l2810 29C4                                    l2802 2844  
                                  l3098 1196                                    l3610 1E60  
                                  l3602 1E22                                    l3194 2938  
                                  l3186 2ABE                                    l3178 2AA6  
                                  l2564 30E6                                    l2652 3208  
                                  l2660 321E                                    l2732 2E70  
                                  l2724 2DDA                                    l2900 1C9E  
                                  l2580 2C82                                    l2572 2C58  
                                  l2820 2A04                                    l2812 29E4  
                                  l2804 2850                                    l3620 1EBA  
                                  l3612 1E7E                                    l3604 1E30  
                                  l3700 1990                                    l3196 2958  
                                  l3188 2AC8                                    l2646 322E  
                                  l2654 3224                                    l2670 2F9A  
                                  l2662 2F60                                    l2742 2E7A  
                                  l2726 2E20                                    l2902 1CA2  
                                  l2590 2CB6                                    l2582 2C90  
                                  l2574 2C60                                    l2566 3126  
                                  l2822 2A10                                    l2750 2ADC  
                                  l2806 2858                                    l2830 31B0  
                                  l3622 1EE8                                    l3614 1E86  
                                  l3630 1F22                                    l3606 1E50  
                                  l3710 19CA                                    l3702 19A0  
                                  l2648 3232                                    l2656 3228  
                                  l2672 2F9C                                    l2664 2F64  
                                  l2736 2ECA                                    l2744 2EC0  
                                  l2920 1D3E                                    l2912 1CF2  
                                  l2904 1CBE                                    l2592 2CBC  
                                  l2584 2C96                                    l2576 2C72  
                                  l2568 3142                                    l2680 1FE4  
                                  l2824 2A1C                                    l2760 2B2A  
                                  l2752 2AE8                                    l2808 2874  
                                  l3800 18E0                                    l2832 31C0  
                                  l3632 1F32                                    l3624 1F08  
                                  l3616 1E9A                                    l3608 1E54  
                                  l3640 20E4                                    l3720 1A6E  
                                  l3712 19D6                                    l3704 19A6  
                                  l2834 31C6                                    l2666 2F6C  
                                  l2658 321A                                    l2738 2F10  
                                  l2930 1D86                                    l2922 1D6A  
                                  l2914 1D06                                    l2906 1CEA  
                                  l2586 2CAC                                    l2578 2C7A  
                                  l2690 209E                                    l2682 1FF8  
                                  l2826 2A2A                                    l2818 29EC  
                                  l2762 2B38                                    l2754 2AF6  
                                  l3802 18E2                                    l3634 1F52  
                                  l3626 1F0A                                    l3618 1EA8  
                                  l3650 2144                                    l3642 20F2  
                                  l3570 2728                                    l3730 1B2A  
                                  l3722 1A74                                    l3714 19E0  
                                  l3706 19B6                                    l3810 24FA  
                                  l2850 30AC                                    l2668 2F74  
                                  l2932 1D9E                                    l2916 1D1E  
                                  l2588 2CB4                                    l2684 1FFC  
                                  l2676 1F74                                    l2828 2A32  
                                  l2764 2B44                                    l2756 2B02  
                                  l2748 2AD8                                    l2780 28F0  
                                  l3628 1F1C                                    l3660 21BA  
                                  l3652 2162                                    l3644 2112  
                                  l3572 273A                                    l3732 1B3A  
                                  l3716 19E6                                    l3724 1AD8  
                                  l3708 19C2                                    l3740 2244  
                                  l3812 250E                                    l3804 24F0  
                                  l2860 30C2                                    l2852 30B6  
                                  l3900 1350                                    l2934 1DA2  
                                  l2918 1D22                                    l2870 1BCA  
                                  l2862 1B72                                    l2686 203E  
                                  l2678 1F90                                    l2758 2B1E  
                                  l2782 28FC                                    l2774 28B4  
                                  l2766 288C                                    l2790 2800  
                                  l3590 2FA0                                    l2950 3052  
                                  l3670 2222                                    l3662 21DA  
                                  l3654 216A                                    l3646 2116  
                                  l3638 20E0                                    l3574 2744  
                                  l3582 2F1A                                    l3734 1B40  
                                  l3726 1AF2                                    l3718 1A68  
                                  l3750 229C                                    l3742 226C  
                                  l3830 2586                                    l3822 2538  
                                  l3814 2514                                    l2854 30BC  
                                  l3910 13E4                                    l3902 1364  
                                  ?_pad 0015                                    l2936 1DBE  
                                  l2928 1D72                                    l2880 1BF2  
                                  l2872 1BCE                                    l2688 205A  
                                  l2784 2904                                    l2776 28CC  
                                  l2768 28AC                                    l3592 2FBA  
                                  l2952 3056                                    l3664 21EC  
                                  l3656 217E                                    l3648 2124  
                                  l3576 2762                                    l3568 2716  
                                  l3584 2F26                                    l3680 2C0C  
                                  l3736 1B50                                    l3728 1B10  
                                  l3760 2362                                    l3752 22BC  
                                  l3744 227A                                    l3840 23A2  
                                  l3832 25B2                                    l3824 254C  
                                  l3816 2530                                    l2856 30BE  
                                  l3920 1494                                    l3912 13FE  
                                  l3904 1392                                    l2890 1C6A  
                                  l2882 1C06                                    l2874 1BEA  
                                  l2970 260A                                    l2786 2920  
                                  l2778 28E4                                    l2954 3064  
                                  l3594 1DEC                                    l3658 218C  
                                  l3666 21F2                                    l3578 2798  
                                  l3586 2F38                                    l3682 2C20  
                                  l3674 2BDE                                    l3690 1914  
                                  l3754 22DC                                    l3746 2288  
                                  l3770 2D34                                    l3850 24A0  
                                  l3842 23C6                                    l3834 25CE  
                                  l3826 2564                                    l2858 30C0  
                                  l3930 150A                                    l3922 14A0  
                                  l3914 141E                                    l3906 13AC  
                                  l2884 1C1E                                    l2868 1B7A  
                                  l2980 2704                                    l2796 2808  
                                  l2788 27E0                                    l2956 3068  
                                  l3596 1DF0                                    l3668 2202  
                                  l3588 2F3C                                    l3684 2C24  
                                  l3676 2BEC                                    l3692 1928  
                                  l3756 2332                                    l3748 228C  
                                  l3764 2374                                    l3772 2D40  
                                  l3780 2D88                                    l3852 24B0  
                                  l3844 241C                                    l3836 25DA  
                                  l3828 256A                                    l3940 158A  
                                  l3932 1516                                    l3924 14A4  
                                  l3916 143E                                    l3908 13C0  
                                  l3860 1276                                    l2886 1C22  
                                  l2982 2B5E                                    l2798 2820  
                                  l3598 1DFE                                    l3686 2C42  
                                  l3678 2BF8                                    l3694 1938  
                                  l3774 2D5C                                    l3782 2D9A  
                                  l3854 24CA                                    l3846 2428  
                                  l3838 23A2                                    l3942 159E  
                                  l3934 152E                                    l3926 14CA  
                                  l3918 145E                                    l3870 128A  
                                  l3862 127A                                    l2896 1C72  
                                  l2888 1C3E                                    l2992 2B76  
                                  l2984 2B62                                    l2976 260E  
                                  l3792 1610                                    l3696 1958  
                                  l3688 18F4                                    l3776 2D7C  
                                  l3784 2DA2                                    l3856 24D6  
                                  l3848 2484                                    l3944 15B0  
                                  l3936 1542                                    l3928 14F6  
                                  l3880 12B2                                    l3872 128C  
                                  l3864 127E                                    l2898 1C86  
                                  l2994 2BA4                                    l2986 2B72  
                                  l2978 2702                                    l3698 1974  
                                  l3786 2DAA                                    l3946 15F6  
                                  l3938 155C                                    l3890 12E6  
                                  l3882 12C4                                    l3874 1290  
                                  l3866 1282                                    l3858 1272  
                                  l2996 2BC4                                    l3788 2DC6  
                                  l3892 131C                                    l3884 12CC  
                                  l3876 12A2                                    l3868 1286  
                                  l2998 2BC8                                    l3990 1222  
                                  l3798 1614                                    l3886 12D4  
                                  l3878 12AA                                    l3888 12DA  
                                  l3898 1338                                    STR_1 0E01  
                                  STR_2 0E57                                    STR_3 0E33  
                                  STR_4 0E6E                                    u1200 2F88  
                                  u2000 2586                                    u1201 2F80  
                                  u2001 2582                                    u1050 30E6  
                                  u2010 1336                                    u1051 30E2  
                                  u2011 1332                                    u1060 30FC  
                                  u1220 1F90                                    u1300 2874  
                                  u2020 14B4                            ?_LEDSon_init 0001  
                                  u1061 30F8                                    u1221 1F8C  
                                  u1301 2870                                    u2021 14B0  
                                  u1070 2C72                                    u1230 205A  
                                  u1310 2A4E                                    u2030 14CA  
                                  u1071 2C6E                                    u1231 2056  
                                  u1311 2A4A                                    u2031 14C6  
                                  u1400 1DBE                                    u1080 2C90  
                                  u1320 31C0                                    u2040 14F6  
                                  u1401 1DBA                                    u1081 2C8C  
                                  u1321 31BC                                    u2041 14F2  
                                  u1218 2F8A                                    u1090 2CAC  
                                  u1410 3080                                    u2050 152E  
                                  u1091 2CA8                                    u1411 307C  
                                  u2107 157C                                    u2051 152A  
                                  u2117 15A6                                    u1430 2714  
                                  u1270 2B1A                                    u1431 2710  
                                  u1271 2B16                                    u2207 102E  
                                  u2127 15FE                                    u1360 1BEA  
                                  u1440 2BA4                                    u1280 2B5C  
                          _BAUD4CONbits 000EE9                                    u1361 1BE6  
                                  u1441 2BA0                                    u1281 2B58  
                                  u2217 105A                                    u2137 2996  
                                  u1370 1C3E                                    u1450 2BDA  
                                  u1290 2920                                    u1371 1C3A  
                                  u1451 2BD6                                    u1291 291C  
                                  u2307 287E                                    u2227 10EE  
                                  u2147 3032                                    u2067 1344  
                                  u1460 2CF6                                    u1380 1CBE  
                                  u1700 1E30                                    u1461 2CF2  
                                  u1381 1CBA                                    u2317 28D6  
                                  u2237 1118                                    u1701 1E2C  
                                  u2157 2558                                    u2077 1370  
                                  u1470 2D24                                    u1390 1D3E  
                                  u1630 2728                                    u1471 2D20  
                                  u1391 1D3A                                    u2327 292A  
                                  u2247 115C                                    u2167 0E9E  
                                  u1711 1E5A                                    u1631 2724  
                                  u2087 139E                                    u1720 1E7E  
                                  u1800 21BA                                    u1640 273A  
                                  u1480 29C2                                    u2337 2AEE  
                                  u2257 118A                                    u2177 0F1C  
                                  u1721 1E7A                                    u1801 21B6  
                                  u1641 2736                                    u1481 29BE  
                                  u2097 154E                                    u1730 1EA8  
                                  u1810 2202                                    u1650 2762  
                                  _T2PR 000FBC                                    u2347 2B30  
                                  u2267 11BA                                    u2187 0F86  
                                  u1731 1EA4                                    u1811 21FE  
                                  u1651 275E                                    u1740 1EE8  
                                  u1660 2798                                    u1820 2BEC  
                                  u1900 1AF2                                    u2357 2A22  
                                  u2277 11DA                                    u2197 1004  
                                  u1741 1EE4                                    u1661 2794  
                                  u1821 2BE8                                    u1901 1AEE  
                                  u1750 1F32                                    u1670 2F5C  
                                  u1830 2C42                                    u1910 1B10  
                                  u2367 1C10                                    u2287 11FA  
                                  u1751 1F2E                                    u1671 2F58  
                                  u1831 2C3E                                    u1911 1B0C  
                                  u1680 2FBA                                    u1760 20F2  
                                  u1920 1B2A                                    u1840 1924  
                                  u2377 1C90                                    u2297 282A  
                                  u1681 2FB6                                    u1761 20EE  
                                  u1921 1B26                                    u1841 191E  
                                  u1690 1DFE                                    u1770 2124  
                                  u1930 1B3A                                    u1850 1926  
                                  u2387 1D10                                    u1691 1DFA  
                                  u1771 2120                                    u1931 1B36  
                                  u1780 2162                                    u1860 1938  
                                  u1940 226C                                    u2397 1D90  
                                  u1781 215E                                    u1861 1934  
                                  u1941 2268                                    u1790 218C  
                                  u1870 1974                                    u1950 22BC  
                                  u1791 2188                                    u1871 1970  
                                  u1951 22B8                                    u1880 19A0  
                                  u1960 22DC                                    u1881 199C  
                                  u1961 22D8                                    u1890 19B6  
                                  u1970 2D7C                                    u1891 19B2  
                                  u1971 2D78                                    u1980 18F2  
                                  u1981 18EE                                    u1990 2530  
                                  u1991 252C              normalise_readings@red_read 001F  
                                  abs@a 0017                                    _dbuf 0250  
                                  _main 1272                                    _dtoa 18F4  
                                  _prec 00EE                                    pad@i 001C  
                                  pad@p 0019                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001E  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2AD8                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0076  
      clear_read_calibration@clear_read 0081                         card_response@mL 008B  
                       card_response@mR 008D                  __end_of_color_read_Red 2E2A  
                       __end_of_HighISR 0076                    _response_in_progress 00F2  
           normalise_readings@blue_read 0023                            ___param_bank 000000  
                                 ??_abs 0019                                   ??_pad 001B  
                           _turnRight45 27E0                         __end_of___aodiv 1F74  
                                 ?_main 0001                                   ?_dtoa 0020  
                       __end_of___aomod 2244                                   ?_stop 0018  
                       __end_of___lwdiv 2CCC                                   i2l151 324A  
                                 i2l160 3218                                   i2l145 30FE  
                                 i2l148 3124                                   i2l157 3240  
                                 i2l516 0072                                   i2l529 31F0  
                          vfpfcnvrt@fmt 0045                 ?_enable_color_interrupt 0001  
                          main@red_read 01E1                 __end_of_sendCharSerial4 31C6  
            __end_of_I2C_2_Master_Start 3238              __end_of_I2C_2_Master_Write 320E  
                                 _flags 00F4                                   _fputc 2716  
                                 _fputs 2F1A                                   pad@fp 0015  
        determine_card@master_closeness 0005                 ??_make_master_closeness 000B  
                                 _width 00EC                                   _putch 324C  
                                 main@i 01E7                                   dtoa@d 0022  
                                 dtoa@i 0041                                   dtoa@n 0038  
                                 dtoa@p 0034                                   dtoa@s 0040  
                                 dtoa@w 0036                     normalise_readings@i 0033  
                                 tablat 000FF5                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2DDA          card_response@normalised_values 008F  
                      card_response@buf 007F                 __end_of_color_read_Blue 2F1A  
                 _I2C_2_Master_RepStart 321A                         ?_color_read_Red 0009  
                       __initialization 3082                            __end_of_main 1610  
                          __end_of_dtoa 1B72                            __end_of_stop 2B5E  
        __end_of_enable_color_interrupt 3202                                  ??_main 00EA  
                                ??_dtoa 002A                                  ??_stop 001C  
                         __activetblptr 000003                           main@blue_read 01E5  
                  main@clear_read_check 01DF               clear_read_calibration@buf 007F  
                          ?_setMotorPWM 0012                                  ?_fputc 0005  
                                ?_fputs 000E                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 0012  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i2l3150 3242                                  i2l3152 3246  
                                i2l3160 3214                                  i2l3154 3238  
                                i2l3156 323C                                  i2l3158 3210  
                                i2l3530 000A                                  i2l3380 31DC  
                                i2l3540 0050                                  i2l3532 001A  
                                i2l3542 0052                                  i2l3534 002E  
                                i2l3544 006A                                  i2l3536 0036  
                                i2l3546 006E                                  i2l3538 0038  
                                i2l2846 30FE                                  i2l2848 310E  
                                _RG6PPS 000E88                               ??_HighISR 0003  
              __end_of_color_click_init 3052                  make_master_closeness@i 0029  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0055  
                             ??___aodiv 0015                               ??___aomod 0015  
                                ___wmul 3126                      _normalise_readings 1610  
                             ??___lwdiv 000F                                  clear_0 3088  
                                clear_1 3094                                  isa$std 000001  
                                pad@buf 0017                                  dtoa@fp 0020  
          __end_of_clear_interrupt_flag 31DC                     ?_normalise_readings 001B  
                                fputc@c 0005                                  fputs@c 0012  
                                fputs@i 0013                                  fputs@s 000E  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                                  putch@c 0001  
                      __end_of_vfprintf 2D88                                  stop@mL 0018  
                                stop@mR 001A                       ??_initDCmotorsPWM 0005  
                             ??_sprintf 0057                 ?i2_clear_interrupt_flag 0001  
                     card_response@card 00E9                              __accesstop 0060  
               __end_of__initialization 30A2                __end_of_color_read_Clear 2ECA  
                       fullSpeedAhead@i 001D                __end_of_color_read_Green 2E7A  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0029  
                         ___rparam_used 000001                        ?_color_read_Blue 0009  
                       _Interrupts_init 2FE0            __end_of_collect_avg_readings 1DEC  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 24F0  
                      _reverseFullSpeed 29C4              collect_avg_readings@i_1600 001C  
            collect_avg_readings@i_1601 001E              collect_avg_readings@i_1602 0020  
            collect_avg_readings@i_1603 0022                 _set_interrupt_threshold 2CCC  
                         __end_of_fputc 27E0                           __end_of_fputs 2F5E  
                         __end_of_putch 324E                          main@clear_read 01E8  
        __end_ofi2_clear_interrupt_flag 31F2                                 ??_fputc 0009  
                               ??_fputs 0012                                 ??_putch 0005  
                            __pbssBANK0 00EC                              __pbssBANK2 0200  
                     _color_writetoaddr 318E                            _T2CLKCONbits 000FBF  
                      motor_response@mL 0020                        motor_response@mR 0022  
                    ?_color_writetoaddr 0007                                 ?___wmul 0005  
                    motor_response@card 0026                            ?_turnRight45 0018  
                   ??_color_writetoaddr 0008                                 _INT1PPS 000DF1  
                        main@green_read 01E3                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5             set_interrupt_threshold@AIHT 000B  
           set_interrupt_threshold@AILT 0009                 __end_of_Interrupts_init 301E  
        collect_avg_readings@clear_read 0010                  color_writetoaddr@value 0007  
                      ??_color_read_Red 000B           __end_of_make_master_closeness 2716  
                               _HighISR 0008          determine_card@predicted_colour 000D  
             __end_of_color_writetoaddr 31AE                    _clear_interrupt_flag 31C6  
                    _I2C_2_Master_Start 322E                              _initUSART4 316E  
                   i2_I2C_2_Master_Idle 30FE                      _I2C_2_Master_Write 3202  
                               __Hparam 0000                     i2_I2C_2_Master_Stop 3238  
                               __Lparam 0000                       color_read_Red@tmp 000E  
             ??_set_interrupt_threshold 000F  make_master_closeness@normalised_values 0007  
               sendStringSerial4@string 0006                       reverseFullSpeed@i 001D  
                               ___aodiv 1DEC                                 ___aomod 20E0  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 2C58  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0018  
                          turnLeft45@mR 001A                                 __pcinit 3082  
                               __ramtop 0E00                                 __ptext0 1272  
                               __ptext1 316E                                 __ptext2 2A50  
                               __ptext3 2938                                 __ptext4 301E  
                               __ptext5 30AC                                 __ptext6 24F0  
                               __ptext7 23A2                                 __ptext8 2D88  
                               __ptext9 2D34                    ?i2_I2C_2_Master_Idle 0001  
                             _T2CONbits 000FBD                    ?i2_I2C_2_Master_Stop 0001  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 005A  
                  _collect_avg_readings 1B72                                 main@buf 0100  
                               _sprintf 2D88                    ??_I2C_2_Master_Start 0006  
                  ??_I2C_2_Master_Write 0006                    end_of_initialization 30A2  
        collect_avg_readings@green_read 0014                   normalise_readings@buf 001B  
                               fputc@fp 0007                                 fputs@fp 0010  
                     ?_color_click_init 0001                            turnRight45@i 001E  
                 ?_clear_interrupt_flag 0001                      ??_color_click_init 0009  
                         _card_detected 00F0                       __end_of_vfpfcnvrt 23A2  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004B                              ??_vfprintf 0055  
                       _initDCmotorsPWM 2A50                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0017                   ??i2_I2C_2_Master_Idle 0001  
                 ??i2_I2C_2_Master_Stop 0002       normalise_readings@expected_values 0025  
       __end_of_set_interrupt_threshold 2D34                           _card_response 23A2  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0016  
                             _TRISBbits 000F82                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 0010  
              __end_of_reverseFullSpeed 2A50                        fullSpeedAhead@mL 0018  
                      fullSpeedAhead@mR 001A                     main@expected_values 0196  
              color_writetoaddr@address 0008                 ??_I2C_2_Master_RepStart 0006  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0009                            _EUSART4RXbuf 023C  
                          _EUSART4TXbuf 0200                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0009                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 007F  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0005  
                            main@motorL 01EA                              main@motorR 01F3  
                    ??_color_read_Clear 000B                      ??_color_read_Green 000B  
                            _turnLeft45 288C                          _fullSpeedAhead 2938  
                           vfpfcnvrt@ap 0047                             vfpfcnvrt@cp 0053  
                           vfpfcnvrt@fp 0043                          __end_of___wmul 314C  
                       determine_card@i 000E                          ?_card_response 007F  
                   color_read_Clear@tmp 000E                     start_initialization 3082  
                           __end_of_abs 2FE0                             __end_of_pad 2C58  
                         _TxBufWriteCnt 0058                           ??_LEDSon_init 0005  
                ??_clear_interrupt_flag 0007          __end_of_clear_read_calibration 260A  
                   color_read_Green@tmp 000E                 __end_of_initDCmotorsPWM 2AD8  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 29C4  
              ??_enable_color_interrupt 0009                                ??___wmul 0009  
         i2I2C_2_Master_Write@data_byte 0002                          _determine_card 2B5E  
          __end_ofi2_I2C_2_Master_Start 324C            __end_ofi2_I2C_2_Master_Write 321A  
                           __pbssCOMRAM 0057                  ??_collect_avg_readings 0018  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                      ___aodiv@dividend 0005                 clear_read_calibration@i 0089  
                        _motor_response 0E7A                                ?_HighISR 0001  
                   __end_of_LEDSon_init 316E                        ___lwdiv@dividend 000B  
                             _dtoa$2610 0032                             ?_turnLeft45 0018  
                       ?_fullSpeedAhead 0018                               __pintcode 0008  
                              ?___aodiv 0005                                ?___aomod 0005  
                      ___aodiv@quotient 0017                  __end_of_determine_card 2BDE  
                              ?___lwdiv 000B                    I2C_2_Master_Read@ack 0007  
                       ??_card_response 0057                    I2C_2_Master_Read@tmp 0008  
                           __smallconst 0E00                       _I2C_2_Master_Idle 30D6  
                     _I2C_2_Master_Init 30AC                       _I2C_2_Master_Read 2F5E  
                     _I2C_2_Master_Stop 3224                            _RxBufReadCnt 0059  
          normalise_readings@clear_read 001D            normalise_readings@difference 0031  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0014  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                __end_of_motor_response 1272                             turnLeft45@i 001E  
                              ?_sprintf 0066            clear_read_calibration@i_1589 008B  
                     _sendStringSerial4 3052                     ??_I2C_2_Master_Idle 0005  
                   ??_I2C_2_Master_Init 0005                     ??_I2C_2_Master_Read 0006  
    set_interrupt_threshold@persistence 000D                          ___wmul@product 0009  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0006  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                                _PIE0bits 000E29  
                    ?_sendStringSerial4 0006                                _PIE4bits 000E2D  
                 _make_master_closeness 260A                                i2u134_40 310E  
                              i2u134_41 310A                                i2u135_40 3124  
                              i2u135_41 3120                                i2u240_47 0042  
                              i2u161_40 001A                                i2u161_41 0016  
                              i2u241_47 005C                                i2u162_40 002E  
                              i2u162_41 002A                                _PIR0bits 000E33  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0005                make_master_closeness@buf 0005  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0008  
                              _SSP2STAT 000ED8                         ?_determine_card 0005  
                             _vfpfcnvrt 2244               __end_of_I2C_2_Master_Idle 30FE  
             __end_of_I2C_2_Master_Init 30D6               __end_of_I2C_2_Master_Read 2FA0  
                     ___wmul@multiplier 0005               __end_of_I2C_2_Master_Stop 322E  
              ??i2_clear_interrupt_flag 0003                            setMotorPWM@m 0012  
           I2C_2_Master_Write@data_byte 0006            normalise_readings@green_read 0021  
                     ??_color_read_Blue 000B                            _TxBufReadCnt 0057  
                       ?_motor_response 0020                       ?_reverseFullSpeed 0018  
             __end_of_sendStringSerial4 3082                             _LEDSon_init 314C  
                    ??_reverseFullSpeed 001C           __end_of_I2C_2_Master_RepStart 3224  
                    color_read_Blue@tmp 000E                ?_set_interrupt_threshold 0009  
                   __end_of_setMotorPWM 20E0                            ??_initUSART4 0005  
                  i2_I2C_2_Master_Start 3242                    i2_I2C_2_Master_Write 320E  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0009             __end_ofi2_I2C_2_Master_Idle 3126  
                    reverseFullSpeed@mL 0018                      reverseFullSpeed@mR 001A  
           __end_ofi2_I2C_2_Master_Stop 3242                              ?_vfpfcnvrt 0043  
                       ___aodiv@divisor 000D                         ___aodiv@counter 0015  
                            _ANSELBbits 000E9A                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                       ___lwdiv@divisor 000D                      __end_of_initUSART4 318E  
                       ___lwdiv@counter 0011                                __ptext10 2244  
                              __ptext11 18F4                                __ptext20 1610  
                              __ptext12 2BDE                                __ptext21 2FA0  
                              __ptext13 2F1A                  _enable_color_interrupt 31F2  
                              __ptext30 260A                                __ptext22 0E7A  
                              __ptext14 2716                                __ptext31 2B5E  
                              __ptext23 27E0                                __ptext15 324C  
                              __ptext40 2FE0                                __ptext32 1B72  
                              __ptext24 288C                                __ptext16 20E0  
                              __ptext41 2CCC                                __ptext33 2DDA  
                              __ptext25 2AD8                                __ptext17 1DEC  
                              __ptext50 31DC                                __ptext42 31F2  
                              __ptext34 2E2A                                __ptext26 29C4  
                              __ptext18 3052                                __ptext51 320E  
                              __ptext43 318E                                __ptext35 2E7A  
                              __ptext27 1F74                                __ptext19 31AE  
                              __ptext52 3238                                __ptext44 31C6  
                              __ptext36 2ECA                                __ptext28 3126  
                              __ptext53 3242                                __ptext45 3202  
                              __ptext37 321A                                __ptext29 2C58  
                              __ptext54 30FE                                __ptext46 3224  
                              __ptext38 2F5E                                __ptext47 322E  
                              __ptext39 314C                                __ptext48 30D6  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0005                   ?i2_I2C_2_Master_Start 0001  
                 ?i2_I2C_2_Master_Write 0001                                isa$xinst 000000  
               card_response@clear_read 0081                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 2D34  
                         ??_turnRight45 001C                        ___aomod@dividend 0005  
                 collect_avg_readings@i 001A                              _INTCONbits 000FF2  
          _set_interrupt_threshold$2091 000F            _set_interrupt_threshold$2092 0010  
                           _setMotorPWM 1F74           collect_avg_readings@blue_read 0016  
                         turnRight45@mL 0018                           turnRight45@mR 001A  
                              intlevel2 0000                               sprintf@ap 0072  
            __end_of_normalise_readings 18F4            card_response@expected_values 0089  
                      ??_fullSpeedAhead 001C                 card_response@green_read 0085  
                          ??_turnLeft45 001C          determine_card@current_smallest 000B  
                       ___aomod@divisor 000D                             ??_vfpfcnvrt 0049  
                       ___aomod@counter 0015                  card_response@blue_read 0087  
                      _color_click_init 301E           card_response@master_closeness 00D7  
                              sprintf@f 0074                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 288C                      __end_of_turnLeft45 2938  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0016  
                       _sendCharSerial4 31AE                  ??i2_I2C_2_Master_Start 0002  
                ??i2_I2C_2_Master_Write 0002                  i2_clear_interrupt_flag 31DC  
                 card_response@red_read 0083                            ___aomod@sign 0016  
                      ??_determine_card 0007                            main@PWMcycle 01DE  
