

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 20:11:41 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70   000000                     
    71                           ; Version 2.35
    72                           ; Generated 05/05/2021 GMT
    73                           ; 
    74                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution. Publication is not required when
    88                           ;        this file is used in an embedded application.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F67K40 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106   000000                     
   107                           	psect	idataBANK2
   108   012CD6                     __pidataBANK2:
   109                           	callstack 0
   110                           
   111                           ;initializer for main@F14702
   112   012CD6  08                 	db	8
   113   012CD7  00                 	db	0
   114   012CD8  00                 	db	0
   115   012CD9  00                 	db	0
   116   012CDA  00                 	db	0
   117   012CDB  00                 	db	0
   118   012CDC  00                 	db	0
   119   012CDD  00                 	db	0
   120   012CDE  00                 	db	0
   121   012CDF  00                 	db	0
   122   012CE0  00                 	db	0
   123   012CE1  00                 	db	0
   124   012CE2  00                 	db	0
   125   012CE3  00                 	db	0
   126   012CE4  00                 	db	0
   127   012CE5  00                 	db	0
   128   012CE6  00                 	db	0
   129   012CE7  00                 	db	0
   130   012CE8  00                 	db	0
   131   012CE9  00                 	db	0
   132   012CEA  00                 	db	0
   133   012CEB  00                 	db	0
   134   012CEC  00                 	db	0
   135   012CED  00                 	db	0
   136   012CEE  00                 	db	0
   137   012CEF  00                 	db	0
   138   012CF0  00                 	db	0
   139   012CF1  00                 	db	0
   140   012CF2  00                 	db	0
   141   012CF3  00                 	db	0
   142   000000                     _TX4REG	set	3812
   143   000000                     _RC4STAbits	set	3815
   144   000000                     _SP4BRGH	set	3814
   145   000000                     _LATGbits	set	3967
   146   000000                     _TRISFbits	set	3974
   147   000000                     _TRISDbits	set	3972
   148   000000                     _TRISGbits	set	3975
   149   000000                     _SSP2CON2bits	set	3802
   150   000000                     _RX4PPS	set	3605
   151   000000                     _SSP2CLKPPS	set	3612
   152   000000                     _SSP2DATPPS	set	3613
   153   000000                     _RC7PPS	set	3689
   154   000000                     _RE2PPS	set	3700
   155   000000                     _TRISCbits	set	3971
   156   000000                     _TRISEbits	set	3973
   157   000000                     _TRISHbits	set	3976
   158   000000                     _PORTFbits	set	3982
   159   000000                     _T2PR	set	4028
   160   000000                     _T2CONbits	set	4029
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RE4PPS	set	3702
   164   000000                     _RG6PPS	set	3720
   165   000000                     _RD5PPS	set	3695
   166   000000                     _ANSELDbits	set	3751
   167   000000                     _SSP2ADD	set	3798
   168   000000                     _SSP2CON1bits	set	3801
   169   000000                     _CCPR4H	set	3873
   170   000000                     _CCPR3H	set	3877
   171   000000                     _TMR0L	set	4051
   172   000000                     _TMR0H	set	4052
   173   000000                     _T0CON0bits	set	4053
   174   000000                     _T0CON1bits	set	4054
   175   000000                     _T2CLKCONbits	set	4031
   176   000000                     _T2HLTbits	set	4030
   177   000000                     _CCP1CONbits	set	4011
   178   000000                     _CCPTMRS0bits	set	4013
   179   000000                     _CCP2CONbits	set	4007
   180   000000                     _LATAbits	set	3961
   181   000000                     _LATDbits	set	3964
   182   000000                     _CCP3CONbits	set	3878
   183   000000                     _CCP4CONbits	set	3874
   184   000000                     _RC4REG	set	3811
   185   000000                     _SP4BRGL	set	3813
   186   000000                     _TX4STAbits	set	3816
   187   000000                     _BAUD4CONbits	set	3817
   188   000000                     _SSP2CON2	set	3802
   189   000000                     _SSP2STAT	set	3800
   190   000000                     _ANSELFbits	set	3764
   191   000000                     _SSP2BUF	set	3797
   192   000000                     _IPR0bits	set	3615
   193   000000                     _PIE4bits	set	3629
   194   000000                     _PIR4bits	set	3639
   195   000000                     _RC0PPS	set	3682
   196   000000                     _TMR0IE	set	29005
   197   000000                     _RD6PPS	set	3696
   198   000000                     _LATFbits	set	3966
   199   000000                     _LATHbits	set	3968
   200   000000                     _TRISAbits	set	3969
   201   000000                     _TMR0IF	set	29085
   202   000000                     _INTCONbits	set	4082
   203                           
   204                           	psect	mediumconst
   205   00FEF2                     __pmediumconst:
   206                           	callstack 0
   207   00FEF2  00                 	db	0
   208   00FEF3                     STR_1:
   209                           
   210                           ; BSR set to: 14
   211   00FEF3  0A                 	db	10
   212   00FEF4  20                 	db	32
   213   00FEF5  45                 	db	69	;'E'
   214   00FEF6  58                 	db	88	;'X'
   215   00FEF7  50                 	db	80	;'P'
   216   00FEF8  45                 	db	69	;'E'
   217   00FEF9  43                 	db	67	;'C'
   218   00FEFA  54                 	db	84	;'T'
   219   00FEFB  45                 	db	69	;'E'
   220   00FEFC  44                 	db	68	;'D'
   221   00FEFD  3A                 	db	58	;':'
   222   00FEFE  20                 	db	32
   223   00FEFF  43                 	db	67	;'C'
   224   00FF00  6C                 	db	108	;'l'
   225   00FF01  65                 	db	101	;'e'
   226   00FF02  61                 	db	97	;'a'
   227   00FF03  72                 	db	114	;'r'
   228   00FF04  20                 	db	32
   229   00FF05  25                 	db	37
   230   00FF06  64                 	db	100	;'d'
   231   00FF07  2C                 	db	44
   232   00FF08  52                 	db	82	;'R'
   233   00FF09  20                 	db	32
   234   00FF0A  25                 	db	37
   235   00FF0B  64                 	db	100	;'d'
   236   00FF0C  2C                 	db	44
   237   00FF0D  20                 	db	32
   238   00FF0E  47                 	db	71	;'G'
   239   00FF0F  20                 	db	32
   240   00FF10  25                 	db	37
   241   00FF11  64                 	db	100	;'d'
   242   00FF12  2C                 	db	44
   243   00FF13  20                 	db	32
   244   00FF14  42                 	db	66	;'B'
   245   00FF15  20                 	db	32
   246   00FF16  25                 	db	37
   247   00FF17  64                 	db	100	;'d'
   248   00FF18  20                 	db	32
   249   00FF19  20                 	db	32
   250   00FF1A  43                 	db	67	;'C'
   251   00FF1B  41                 	db	65	;'A'
   252   00FF1C  52                 	db	82	;'R'
   253   00FF1D  44                 	db	68	;'D'
   254   00FF1E  3A                 	db	58	;':'
   255   00FF1F  20                 	db	32
   256   00FF20  25                 	db	37
   257   00FF21  64                 	db	100	;'d'
   258   00FF22  20                 	db	32
   259   00FF23  0A                 	db	10
   260   00FF24  00                 	db	0
   261   00FF25                     STR_11:
   262                           
   263                           ; BSR set to: 14
   264   00FF25  0A                 	db	10
   265   00FF26  20                 	db	32
   266   00FF27  41                 	db	65	;'A'
   267   00FF28  56                 	db	86	;'V'
   268   00FF29  47                 	db	71	;'G'
   269   00FF2A  3A                 	db	58	;':'
   270   00FF2B  20                 	db	32
   271   00FF2C  43                 	db	67	;'C'
   272   00FF2D  6C                 	db	108	;'l'
   273   00FF2E  65                 	db	101	;'e'
   274   00FF2F  61                 	db	97	;'a'
   275   00FF30  72                 	db	114	;'r'
   276   00FF31  20                 	db	32
   277   00FF32  25                 	db	37
   278   00FF33  64                 	db	100	;'d'
   279   00FF34  2C                 	db	44
   280   00FF35  20                 	db	32
   281   00FF36  52                 	db	82	;'R'
   282   00FF37  20                 	db	32
   283   00FF38  25                 	db	37
   284   00FF39  64                 	db	100	;'d'
   285   00FF3A  2C                 	db	44
   286   00FF3B  20                 	db	32
   287   00FF3C  47                 	db	71	;'G'
   288   00FF3D  20                 	db	32
   289   00FF3E  25                 	db	37
   290   00FF3F  64                 	db	100	;'d'
   291   00FF40  2C                 	db	44
   292   00FF41  20                 	db	32
   293   00FF42  42                 	db	66	;'B'
   294   00FF43  20                 	db	32
   295   00FF44  25                 	db	37
   296   00FF45  64                 	db	100	;'d'
   297   00FF46  20                 	db	32
   298   00FF47  0A                 	db	10
   299   00FF48  00                 	db	0
   300   00FF49                     STR_4:
   301                           
   302                           ; BSR set to: 14
   303   00FF49  54                 	db	84	;'T'
   304   00FF4A  69                 	db	105	;'i'
   305   00FF4B  6D                 	db	109	;'m'
   306   00FF4C  65                 	db	101	;'e'
   307   00FF4D  72                 	db	114	;'r'
   308   00FF4E  63                 	db	99	;'c'
   309   00FF4F  6F                 	db	111	;'o'
   310   00FF50  75                 	db	117	;'u'
   311   00FF51  6E                 	db	110	;'n'
   312   00FF52  74                 	db	116	;'t'
   313   00FF53  20                 	db	32
   314   00FF54  61                 	db	97	;'a'
   315   00FF55  72                 	db	114	;'r'
   316   00FF56  72                 	db	114	;'r'
   317   00FF57  61                 	db	97	;'a'
   318   00FF58  79                 	db	121	;'y'
   319   00FF59  20                 	db	32
   320   00FF5A  72                 	db	114	;'r'
   321   00FF5B  65                 	db	101	;'e'
   322   00FF5C  61                 	db	97	;'a'
   323   00FF5D  64                 	db	100	;'d'
   324   00FF5E  69                 	db	105	;'i'
   325   00FF5F  6E                 	db	110	;'n'
   326   00FF60  67                 	db	103	;'g'
   327   00FF61  20                 	db	32
   328   00FF62  25                 	db	37
   329   00FF63  64                 	db	100	;'d'
   330   00FF64  20                 	db	32
   331   00FF65  0A                 	db	10
   332   00FF66  00                 	db	0
   333   00FF67                     STR_9:
   334                           
   335                           ; BSR set to: 14
   336   00FF67  43                 	db	67	;'C'
   337   00FF68  61                 	db	97	;'a'
   338   00FF69  72                 	db	114	;'r'
   339   00FF6A  64                 	db	100	;'d'
   340   00FF6B  20                 	db	32
   341   00FF6C  67                 	db	103	;'g'
   342   00FF6D  6F                 	db	111	;'o'
   343   00FF6E  6E                 	db	110	;'n'
   344   00FF6F  6E                 	db	110	;'n'
   345   00FF70  61                 	db	97	;'a'
   346   00FF71  20                 	db	32
   347   00FF72  72                 	db	114	;'r'
   348   00FF73  65                 	db	101	;'e'
   349   00FF74  73                 	db	115	;'s'
   350   00FF75  70                 	db	112	;'p'
   351   00FF76  6F                 	db	111	;'o'
   352   00FF77  6E                 	db	110	;'n'
   353   00FF78  64                 	db	100	;'d'
   354   00FF79  20                 	db	32
   355   00FF7A  74                 	db	116	;'t'
   356   00FF7B  6F                 	db	111	;'o'
   357   00FF7C  20                 	db	32
   358   00FF7D  25                 	db	37
   359   00FF7E  64                 	db	100	;'d'
   360   00FF7F  20                 	db	32
   361   00FF80  0A                 	db	10
   362   00FF81  00                 	db	0
   363   00FF82                     STR_6:
   364                           
   365                           ; BSR set to: 14
   366   00FF82  54                 	db	84	;'T'
   367   00FF83  69                 	db	105	;'i'
   368   00FF84  6D                 	db	109	;'m'
   369   00FF85  65                 	db	101	;'e'
   370   00FF86  72                 	db	114	;'r'
   371   00FF87  63                 	db	99	;'c'
   372   00FF88  6F                 	db	111	;'o'
   373   00FF89  75                 	db	117	;'u'
   374   00FF8A  6E                 	db	110	;'n'
   375   00FF8B  74                 	db	116	;'t'
   376   00FF8C  20                 	db	32
   377   00FF8D  25                 	db	37
   378   00FF8E  64                 	db	100	;'d'
   379   00FF8F  2C                 	db	44
   380   00FF90  20                 	db	32
   381   00FF91  74                 	db	116	;'t'
   382   00FF92  69                 	db	105	;'i'
   383   00FF93  6D                 	db	109	;'m'
   384   00FF94  65                 	db	101	;'e'
   385   00FF95  20                 	db	32
   386   00FF96  25                 	db	37
   387   00FF97  64                 	db	100	;'d'
   388   00FF98  20                 	db	32
   389   00FF99  20                 	db	32
   390   00FF9A  0A                 	db	10
   391   00FF9B  00                 	db	0
   392   00FF9C                     STR_7:
   393                           
   394                           ; BSR set to: 14
   395   00FF9C  43                 	db	67	;'C'
   396   00FF9D  61                 	db	97	;'a'
   397   00FF9E  72                 	db	114	;'r'
   398   00FF9F  64                 	db	100	;'d'
   399   00FFA0  63                 	db	99	;'c'
   400   00FFA1  6F                 	db	111	;'o'
   401   00FFA2  75                 	db	117	;'u'
   402   00FFA3  6E                 	db	110	;'n'
   403   00FFA4  74                 	db	116	;'t'
   404   00FFA5  20                 	db	32
   405   00FFA6  25                 	db	37
   406   00FFA7  64                 	db	100	;'d'
   407   00FFA8  2C                 	db	44
   408   00FFA9  20                 	db	32
   409   00FFAA  63                 	db	99	;'c'
   410   00FFAB  61                 	db	97	;'a'
   411   00FFAC  72                 	db	114	;'r'
   412   00FFAD  64                 	db	100	;'d'
   413   00FFAE  20                 	db	32
   414   00FFAF  25                 	db	37
   415   00FFB0  64                 	db	100	;'d'
   416   00FFB1  20                 	db	32
   417   00FFB2  20                 	db	32
   418   00FFB3  0A                 	db	10
   419   00FFB4  00                 	db	0
   420   00FFB5                     STR_8:
   421                           
   422                           ; BSR set to: 14
   423   00FFB5  54                 	db	84	;'T'
   424   00FFB6  69                 	db	105	;'i'
   425   00FFB7  6D                 	db	109	;'m'
   426   00FFB8  65                 	db	101	;'e'
   427   00FFB9  20                 	db	32
   428   00FFBA  67                 	db	103	;'g'
   429   00FFBB  6F                 	db	111	;'o'
   430   00FFBC  6E                 	db	110	;'n'
   431   00FFBD  6E                 	db	110	;'n'
   432   00FFBE  61                 	db	97	;'a'
   433   00FFBF  20                 	db	32
   434   00FFC0  6D                 	db	109	;'m'
   435   00FFC1  6F                 	db	111	;'o'
   436   00FFC2  76                 	db	118	;'v'
   437   00FFC3  65                 	db	101	;'e'
   438   00FFC4  20                 	db	32
   439   00FFC5  66                 	db	102	;'f'
   440   00FFC6  6F                 	db	111	;'o'
   441   00FFC7  72                 	db	114	;'r'
   442   00FFC8  20                 	db	32
   443   00FFC9  25                 	db	37
   444   00FFCA  64                 	db	100	;'d'
   445   00FFCB  20                 	db	32
   446   00FFCC  0A                 	db	10
   447   00FFCD  00                 	db	0
   448   00FFCE                     STR_2:
   449                           
   450                           ; BSR set to: 14
   451   00FFCE  0A                 	db	10
   452   00FFCF  20                 	db	32
   453   00FFD0  45                 	db	69	;'E'
   454   00FFD1  78                 	db	120	;'x'
   455   00FFD2  70                 	db	112	;'p'
   456   00FFD3  65                 	db	101	;'e'
   457   00FFD4  63                 	db	99	;'c'
   458   00FFD5  74                 	db	116	;'t'
   459   00FFD6  65                 	db	101	;'e'
   460   00FFD7  64                 	db	100	;'d'
   461   00FFD8  20                 	db	32
   462   00FFD9  63                 	db	99	;'c'
   463   00FFDA  6C                 	db	108	;'l'
   464   00FFDB  65                 	db	101	;'e'
   465   00FFDC  61                 	db	97	;'a'
   466   00FFDD  72                 	db	114	;'r'
   467   00FFDE  3A                 	db	58	;':'
   468   00FFDF  20                 	db	32
   469   00FFE0  25                 	db	37
   470   00FFE1  64                 	db	100	;'d'
   471   00FFE2  20                 	db	32
   472   00FFE3  0A                 	db	10
   473   00FFE4  00                 	db	0
   474   00FFE5                     STR_3:
   475                           
   476                           ; BSR set to: 14
   477   00FFE5  43                 	db	67	;'C'
   478   00FFE6  61                 	db	97	;'a'
   479   00FFE7  72                 	db	114	;'r'
   480   00FFE8  64                 	db	100	;'d'
   481   00FFE9  63                 	db	99	;'c'
   482   00FFEA  6F                 	db	111	;'o'
   483   00FFEB  75                 	db	117	;'u'
   484   00FFEC  6E                 	db	110	;'n'
   485   00FFED  74                 	db	116	;'t'
   486   00FFEE  20                 	db	32
   487   00FFEF  25                 	db	37
   488   00FFF0  64                 	db	100	;'d'
   489   00FFF1  20                 	db	32
   490   00FFF2  0A                 	db	10
   491   00FFF3  00                 	db	0
   492   00FFF4                     STR_12:
   493                           
   494                           ; BSR set to: 14
   495   00FFF4  43                 	db	67	;'C'
   496   00FFF5  41                 	db	65	;'A'
   497   00FFF6  52                 	db	82	;'R'
   498   00FFF7  44                 	db	68	;'D'
   499   00FFF8  20                 	db	32
   500   00FFF9  25                 	db	37
   501   00FFFA  64                 	db	100	;'d'
   502   00FFFB  20                 	db	32
   503   00FFFC  0A                 	db	10
   504   00FFFD  00                 	db	0
   505   00FFFE  00                 	db	0	; dummy byte at the end
   506   000000                     
   507                           ; #config settings
   508                           
   509                           	psect	cinit
   510   012A58                     __pcinit:
   511                           	callstack 0
   512   012A58                     start_initialization:
   513                           	callstack 0
   514   012A58                     __initialization:
   515                           	callstack 0
   516                           
   517                           ; Initialize objects allocated to BANK2 (30 bytes)
   518                           ; load TBLPTR registers with __pidataBANK2
   519   012A58  0ED6               	movlw	low __pidataBANK2
   520   012A5A  6EF6               	movwf	tblptrl,c
   521   012A5C  0E2C               	movlw	high __pidataBANK2
   522   012A5E  6EF7               	movwf	tblptrh,c
   523   012A60  0E01               	movlw	low (__pidataBANK2 shr (0+16))
   524   012A62  6EF8               	movwf	tblptru,c
   525   012A64  EE02  F0AB         	lfsr	0,__pdataBANK2
   526   012A68  EE10 F01E          	lfsr	1,30
   527   012A6C                     copy_data0:
   528   012A6C  0009               	tblrd		*+
   529   012A6E  CFF5 FFEE          	movff	tablat,postinc0
   530   012A72  50E5               	movf	postdec1,w,c
   531   012A74  50E1               	movf	fsr1l,w,c
   532   012A76  E1FA               	bnz	copy_data0
   533                           
   534                           ; Clear objects allocated to BANK3 (120 bytes)
   535   012A78  EE03  F000         	lfsr	0,__pbssBANK3
   536   012A7C  0E78               	movlw	120
   537   012A7E                     clear_0:
   538   012A7E  6AEE               	clrf	postinc0,c
   539   012A80  06E8               	decf	wreg,f,c
   540   012A82  E1FD               	bnz	clear_0
   541                           
   542                           ; Clear objects allocated to BANK0 (64 bytes)
   543   012A84  EE00  F0BF         	lfsr	0,__pbssBANK0
   544   012A88  0E40               	movlw	64
   545   012A8A                     clear_1:
   546   012A8A  6AEE               	clrf	postinc0,c
   547   012A8C  06E8               	decf	wreg,f,c
   548   012A8E  E1FD               	bnz	clear_1
   549                           
   550                           ; Clear objects allocated to COMRAM (3 bytes)
   551   012A90  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   552   012A92  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   553   012A94  6A58               	clrf	__pbssCOMRAM& (0+255),c
   554   012A96                     end_of_initialization:
   555                           	callstack 0
   556   012A96                     __end_of__initialization:
   557                           	callstack 0
   558   012A96  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   559   012A98  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   560   012A9A  0100               	movlb	0
   561   012A9C  EF83  F083         	goto	_main	;jump to C main() function
   562                           
   563                           	psect	bssCOMRAM
   564   000058                     __pbssCOMRAM:
   565                           	callstack 0
   566   000058                     _TxBufReadCnt:
   567                           	callstack 0
   568   000058                     	ds	1
   569   000059                     _TxBufWriteCnt:
   570                           	callstack 0
   571   000059                     	ds	1
   572   00005A                     _RxBufWriteCnt:
   573                           	callstack 0
   574   00005A                     	ds	1
   575                           
   576                           	psect	bssBANK0
   577   0000BF                     __pbssBANK0:
   578                           	callstack 0
   579   0000BF                     _EUSART4RXbuf:
   580                           	callstack 0
   581   0000BF                     	ds	20
   582   0000D3                     _width:
   583                           	callstack 0
   584   0000D3                     	ds	2
   585   0000D5                     _prec:
   586                           	callstack 0
   587   0000D5                     	ds	2
   588   0000D7                     _card_detected:
   589                           	callstack 0
   590   0000D7                     	ds	2
   591   0000D9                     _response_in_progress:
   592                           	callstack 0
   593   0000D9                     	ds	2
   594   0000DB                     _TimerFlag:
   595                           	callstack 0
   596   0000DB                     	ds	2
   597   0000DD                     _flags:
   598                           	callstack 0
   599   0000DD                     	ds	1
   600   0000DE                     _RxBufReadCnt:
   601                           	callstack 0
   602   0000DE                     	ds	1
   603   0000DF                     _dbuf:
   604                           	callstack 0
   605   0000DF                     	ds	32
   606                           
   607                           	psect	dataBANK2
   608   0002AB                     __pdataBANK2:
   609                           	callstack 0
   610   0002AB                     main@F14702:
   611                           	callstack 0
   612   0002AB                     	ds	30
   613                           
   614                           	psect	bssBANK3
   615   000300                     __pbssBANK3:
   616                           	callstack 0
   617   000300                     	ds	60
   618   00033C                     _EUSART4TXbuf:
   619                           	callstack 0
   620   00033C                     	ds	60
   621                           
   622                           	psect	cstackBANK2
   623   000200                     __pcstackBANK2:
   624                           	callstack 0
   625   000200                     main@ReturnHomeCards:
   626                           	callstack 0
   627                           
   628                           ; 30 bytes @ 0x0
   629   000200                     	ds	30
   630   00021E                     main@ReturnHomeTimes:
   631                           	callstack 0
   632                           
   633                           ; 60 bytes @ 0x1E
   634   00021E                     	ds	60
   635   00025A                     main@expected_values:
   636                           	callstack 0
   637                           
   638                           ; 72 bytes @ 0x5A
   639   00025A                     	ds	72
   640   0002A2                     main@motorR:
   641                           	callstack 0
   642                           
   643                           ; 9 bytes @ 0xA2
   644   0002A2                     	ds	9
   645                           
   646                           	psect	cstackBANK1
   647   000100                     __pcstackBANK1:
   648                           	callstack 0
   649   000100                     card_response@normalised_values:
   650                           	callstack 0
   651                           
   652                           ; 72 bytes @ 0x0
   653   000100                     	ds	72
   654   000148                     card_response@master_closeness:
   655                           	callstack 0
   656                           
   657                           ; 18 bytes @ 0x48
   658   000148                     	ds	18
   659   00015A                     main@buf:
   660                           	callstack 0
   661                           
   662                           ; 150 bytes @ 0x5A
   663   00015A                     	ds	150
   664   0001F0                     main@CardCount:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0xF0
   668   0001F0                     	ds	2
   669   0001F2                     main@blue_read:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0xF2
   673   0001F2                     	ds	2
   674   0001F4                     main@i:
   675                           	callstack 0
   676                           
   677                           ; 1 bytes @ 0xF4
   678   0001F4                     	ds	1
   679   0001F5                     main@clear_read:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0xF5
   683   0001F5                     	ds	2
   684   0001F7                     main@motorL:
   685                           	callstack 0
   686                           
   687                           ; 9 bytes @ 0xF7
   688   0001F7                     	ds	9
   689                           
   690                           	psect	cstackBANK0
   691   000060                     __pcstackBANK0:
   692                           	callstack 0
   693   000060                     ?_vfprintf:
   694                           	callstack 0
   695   000060                     vfprintf@fp:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x0
   699   000060                     	ds	2
   700   000062                     vfprintf@fmt:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x2
   704   000062                     	ds	2
   705   000064                     vfprintf@ap:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x4
   709   000064                     	ds	2
   710   000066                     ?_sprintf:
   711                           	callstack 0
   712   000066                     sprintf@s:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x6
   716   000066                     	ds	2
   717   000068                     sprintf@fmt:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x8
   721   000068                     	ds	12
   722   000074                     sprintf@ap:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x14
   726   000074                     	ds	2
   727   000076                     sprintf@f:
   728                           	callstack 0
   729                           
   730                           ; 11 bytes @ 0x16
   731   000076                     	ds	11
   732   000081                     clear_read_calibration@buf:
   733                           	callstack 0
   734   000081                     motor_response@buf:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x21
   738   000081                     	ds	2
   739   000083                     motor_response@card:
   740                           	callstack 0
   741   000083                     clear_read_calibration@clear_read:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x23
   745   000083                     	ds	1
   746   000084                     motor_response@mL:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x24
   750   000084                     	ds	1
   751   000085                     clear_read_calibration@clear_read_check:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x25
   755   000085                     	ds	1
   756   000086                     motor_response@mR:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x26
   760   000086                     	ds	1
   761   000087                     ??_clear_read_calibration:
   762                           
   763                           ; 1 bytes @ 0x27
   764   000087                     	ds	1
   765   000088                     motor_response@ReturnHomeTimes:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x28
   769   000088                     	ds	2
   770   00008A                     motor_response@ReturnHomeCards:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x2A
   774   00008A                     	ds	1
   775   00008B                     clear_read_calibration@i:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x2B
   779   00008B                     	ds	1
   780   00008C                     motor_response@stop_all:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x2C
   784   00008C                     	ds	1
   785   00008D                     clear_read_calibration@i_1640:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x2D
   789   00008D                     	ds	1
   790   00008E                     ??_motor_response:
   791                           
   792                           ; 1 bytes @ 0x2E
   793   00008E                     	ds	6
   794   000094                     motor_response@j:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x34
   798   000094                     	ds	2
   799   000096                     motor_response@j_1696:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x36
   803   000096                     	ds	2
   804   000098                     motor_response@k:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x38
   808   000098                     	ds	2
   809   00009A                     motor_response@i:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x3A
   813   00009A                     	ds	2
   814   00009C                     card_response@buf:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x3C
   818   00009C                     	ds	2
   819   00009E                     card_response@clear_read:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x3E
   823   00009E                     	ds	2
   824   0000A0                     card_response@red_read:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x40
   828   0000A0                     	ds	2
   829   0000A2                     card_response@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x42
   833   0000A2                     	ds	2
   834   0000A4                     card_response@blue_read:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x44
   838   0000A4                     	ds	2
   839   0000A6                     card_response@expected_values:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x46
   843   0000A6                     	ds	2
   844   0000A8                     card_response@card:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0x48
   848   0000A8                     	ds	1
   849   0000A9                     card_response@mL:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x49
   853   0000A9                     	ds	2
   854   0000AB                     card_response@mR:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x4B
   858   0000AB                     	ds	2
   859   0000AD                     card_response@ReturnHomeTimes:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x4D
   863   0000AD                     	ds	2
   864   0000AF                     card_response@ReturnHomeCards:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x4F
   868   0000AF                     	ds	2
   869   0000B1                     card_response@stop_all:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x51
   873   0000B1                     	ds	2
   874   0000B3                     main@PWMcycle:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x53
   878   0000B3                     	ds	1
   879   0000B4                     main@card:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x54
   883   0000B4                     	ds	1
   884   0000B5                     main@TimerCount:
   885                           	callstack 0
   886                           
   887                           ; 2 bytes @ 0x55
   888   0000B5                     	ds	2
   889   0000B7                     main@clear_read_check:
   890                           	callstack 0
   891                           
   892                           ; 2 bytes @ 0x57
   893   0000B7                     	ds	2
   894   0000B9                     main@stop_all:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x59
   898   0000B9                     	ds	2
   899   0000BB                     main@red_read:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x5B
   903   0000BB                     	ds	2
   904   0000BD                     main@green_read:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x5D
   908   0000BD                     	ds	2
   909                           
   910                           	psect	cstackCOMRAM
   911   000001                     __pcstackCOMRAM:
   912                           	callstack 0
   913   000001                     ??_LowISR:
   914   000001                     
   915                           ; 1 bytes @ 0x0
   916   000001                     	ds	3
   917   000004                     ??_I2C_2_Master_Idle:
   918   000004                     ?___wmul:
   919                           	callstack 0
   920   000004                     ?___lwmod:
   921                           	callstack 0
   922   000004                     ?___aodiv:
   923                           	callstack 0
   924   000004                     ?___aomod:
   925                           	callstack 0
   926   000004                     sendCharSerial4@charToSend:
   927                           	callstack 0
   928   000004                     make_master_closeness@buf:
   929                           	callstack 0
   930   000004                     determine_card@master_closeness:
   931                           	callstack 0
   932   000004                     ___wmul@multiplier:
   933                           	callstack 0
   934   000004                     ___lwmod@dividend:
   935                           	callstack 0
   936   000004                     fputc@c:
   937                           	callstack 0
   938   000004                     ___aodiv@dividend:
   939                           	callstack 0
   940   000004                     ___aomod@dividend:
   941                           	callstack 0
   942                           
   943                           ; 8 bytes @ 0x3
   944   000004                     	ds	1
   945   000005                     ??_I2C_2_Master_Read:
   946   000005                     I2C_2_Master_Write@data_byte:
   947                           	callstack 0
   948   000005                     sendStringSerial4@string:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x4
   952   000005                     	ds	1
   953   000006                     ??_determine_card:
   954   000006                     color_writetoaddr@value:
   955                           	callstack 0
   956   000006                     I2C_2_Master_Read@ack:
   957                           	callstack 0
   958   000006                     make_master_closeness@normalised_values:
   959                           	callstack 0
   960   000006                     ___wmul@multiplicand:
   961                           	callstack 0
   962   000006                     ___lwmod@divisor:
   963                           	callstack 0
   964   000006                     fputc@fp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x5
   968   000006                     	ds	1
   969   000007                     color_writetoaddr@address:
   970                           	callstack 0
   971   000007                     I2C_2_Master_Read@tmp:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x6
   975   000007                     	ds	1
   976   000008                     ??_fputc:
   977   000008                     ??_color_click_init:
   978   000008                     ?_color_read_Red:
   979                           	callstack 0
   980   000008                     ?_color_read_Green:
   981                           	callstack 0
   982   000008                     ?_color_read_Blue:
   983                           	callstack 0
   984   000008                     ?_color_read_Clear:
   985                           	callstack 0
   986   000008                     ___lwmod@counter:
   987                           	callstack 0
   988   000008                     make_master_closeness@master_closeness:
   989                           	callstack 0
   990   000008                     ___wmul@product:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x7
   994   000008                     	ds	2
   995   00000A                     ??_color_read_Red:
   996   00000A                     ??_color_read_Green:
   997   00000A                     ??_color_read_Blue:
   998   00000A                     ??_color_read_Clear:
   999   00000A                     ??_make_master_closeness:
  1000   00000A                     ?___lwdiv:
  1001                           	callstack 0
  1002   00000A                     determine_card@current_smallest:
  1003                           	callstack 0
  1004   00000A                     ___lwdiv@dividend:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x9
  1008   00000A                     	ds	2
  1009   00000C                     determine_card@predicted_colour:
  1010                           	callstack 0
  1011   00000C                     ___lwdiv@divisor:
  1012                           	callstack 0
  1013   00000C                     ___aodiv@divisor:
  1014                           	callstack 0
  1015   00000C                     ___aomod@divisor:
  1016                           	callstack 0
  1017                           
  1018                           ; 8 bytes @ 0xB
  1019   00000C                     	ds	1
  1020   00000D                     determine_card@i:
  1021                           	callstack 0
  1022   00000D                     color_read_Red@tmp:
  1023                           	callstack 0
  1024   00000D                     color_read_Green@tmp:
  1025                           	callstack 0
  1026   00000D                     color_read_Blue@tmp:
  1027                           	callstack 0
  1028   00000D                     color_read_Clear@tmp:
  1029                           	callstack 0
  1030   00000D                     fputs@s:
  1031                           	callstack 0
  1032                           
  1033                           ; 2 bytes @ 0xC
  1034   00000D                     	ds	1
  1035   00000E                     ___lwdiv@counter:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0xD
  1039   00000E                     	ds	1
  1040   00000F                     collect_avg_readings@clear_read:
  1041                           	callstack 0
  1042   00000F                     ___lwdiv@quotient:
  1043                           	callstack 0
  1044   00000F                     fputs@fp:
  1045                           	callstack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048   00000F                     	ds	2
  1049   000011                     fputs@c:
  1050                           	callstack 0
  1051   000011                     setMotorPWM@m:
  1052                           	callstack 0
  1053   000011                     collect_avg_readings@red_read:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x10
  1057   000011                     	ds	1
  1058   000012                     fputs@i:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x11
  1062   000012                     	ds	1
  1063   000013                     ??_setMotorPWM:
  1064   000013                     collect_avg_readings@green_read:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x12
  1068   000013                     	ds	1
  1069   000014                     ___aodiv@counter:
  1070                           	callstack 0
  1071   000014                     ___aomod@counter:
  1072                           	callstack 0
  1073   000014                     pad@fp:
  1074                           	callstack 0
  1075                           
  1076                           ; 2 bytes @ 0x13
  1077   000014                     	ds	1
  1078   000015                     setMotorPWM@posDuty:
  1079                           	callstack 0
  1080   000015                     ___aodiv@sign:
  1081                           	callstack 0
  1082   000015                     ___aomod@sign:
  1083                           	callstack 0
  1084   000015                     collect_avg_readings@blue_read:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x14
  1088   000015                     	ds	1
  1089   000016                     ?_abs:
  1090                           	callstack 0
  1091   000016                     setMotorPWM@negDuty:
  1092                           	callstack 0
  1093   000016                     abs@a:
  1094                           	callstack 0
  1095   000016                     pad@buf:
  1096                           	callstack 0
  1097   000016                     ___aodiv@quotient:
  1098                           	callstack 0
  1099                           
  1100                           ; 8 bytes @ 0x15
  1101   000016                     	ds	1
  1102   000017                     ??_collect_avg_readings:
  1103   000017                     stop@mL:
  1104                           	callstack 0
  1105   000017                     turnLeft45@mL:
  1106                           	callstack 0
  1107   000017                     turnRight45@mL:
  1108                           	callstack 0
  1109   000017                     fullSpeedAhead@mL:
  1110                           	callstack 0
  1111   000017                     reverseFullSpeed@mL:
  1112                           	callstack 0
  1113                           
  1114                           ; 2 bytes @ 0x16
  1115   000017                     	ds	1
  1116   000018                     ??_abs:
  1117   000018                     pad@p:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x17
  1121   000018                     	ds	1
  1122   000019                     stop@mR:
  1123                           	callstack 0
  1124   000019                     turnLeft45@mR:
  1125                           	callstack 0
  1126   000019                     turnRight45@mR:
  1127                           	callstack 0
  1128   000019                     fullSpeedAhead@mR:
  1129                           	callstack 0
  1130   000019                     reverseFullSpeed@mR:
  1131                           	callstack 0
  1132   000019                     collect_avg_readings@i:
  1133                           	callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x18
  1136   000019                     	ds	1
  1137   00001A                     ??_pad:
  1138   00001A                     normalise_readings@buf:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x19
  1142   00001A                     	ds	1
  1143   00001B                     ??_stop:
  1144   00001B                     ??_turnLeft45:
  1145   00001B                     ??_turnRight45:
  1146   00001B                     ??_fullSpeedAhead:
  1147   00001B                     ??_reverseFullSpeed:
  1148   00001B                     collect_avg_readings@i_1651:
  1149                           	callstack 0
  1150   00001B                     pad@i:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x1A
  1154   00001B                     	ds	1
  1155   00001C                     fullSpeedAhead@i:
  1156                           	callstack 0
  1157   00001C                     reverseFullSpeed@i:
  1158                           	callstack 0
  1159   00001C                     normalise_readings@clear_read:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x1B
  1163   00001C                     	ds	1
  1164   00001D                     turnLeft45@i:
  1165                           	callstack 0
  1166   00001D                     turnRight45@i:
  1167                           	callstack 0
  1168   00001D                     collect_avg_readings@i_1652:
  1169                           	callstack 0
  1170   00001D                     pad@w:
  1171                           	callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x1C
  1174   00001D                     	ds	1
  1175   00001E                     normalise_readings@red_read:
  1176                           	callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x1D
  1179   00001E                     	ds	1
  1180   00001F                     collect_avg_readings@i_1653:
  1181                           	callstack 0
  1182   00001F                     home_response@mL:
  1183                           	callstack 0
  1184   00001F                     dtoa@fp:
  1185                           	callstack 0
  1186                           
  1187                           ; 2 bytes @ 0x1E
  1188   00001F                     	ds	1
  1189   000020                     normalise_readings@green_read:
  1190                           	callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x1F
  1193   000020                     	ds	1
  1194   000021                     collect_avg_readings@i_1654:
  1195                           	callstack 0
  1196   000021                     home_response@mR:
  1197                           	callstack 0
  1198   000021                     dtoa@d:
  1199                           	callstack 0
  1200                           
  1201                           ; 8 bytes @ 0x20
  1202   000021                     	ds	1
  1203   000022                     normalise_readings@blue_read:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0x21
  1207   000022                     	ds	1
  1208   000023                     ??_home_response:
  1209                           
  1210                           ; 1 bytes @ 0x22
  1211   000023                     	ds	1
  1212   000024                     normalise_readings@expected_values:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x23
  1216   000024                     	ds	1
  1217   000025                     home_response@i:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x24
  1221   000025                     	ds	1
  1222   000026                     home_response@card:
  1223                           	callstack 0
  1224   000026                     normalise_readings@normalised_values:
  1225                           	callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x25
  1228   000026                     	ds	2
  1229   000028                     ??_normalise_readings:
  1230   000028                     make_master_closeness@i:
  1231                           	callstack 0
  1232                           
  1233                           ; 1 bytes @ 0x27
  1234   000028                     	ds	1
  1235   000029                     ??_dtoa:
  1236                           
  1237                           ; 1 bytes @ 0x28
  1238   000029                     	ds	7
  1239   000030                     normalise_readings@difference:
  1240                           	callstack 0
  1241                           
  1242                           ; 2 bytes @ 0x2F
  1243   000030                     	ds	1
  1244   000031                     _dtoa$2576:
  1245                           	callstack 0
  1246                           
  1247                           ; 2 bytes @ 0x30
  1248   000031                     	ds	1
  1249   000032                     normalise_readings@i:
  1250                           	callstack 0
  1251                           
  1252                           ; 1 bytes @ 0x31
  1253   000032                     	ds	1
  1254   000033                     dtoa@p:
  1255                           	callstack 0
  1256                           
  1257                           ; 2 bytes @ 0x32
  1258   000033                     	ds	2
  1259   000035                     dtoa@w:
  1260                           	callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x34
  1263   000035                     	ds	2
  1264   000037                     dtoa@n:
  1265                           	callstack 0
  1266                           
  1267                           ; 8 bytes @ 0x36
  1268   000037                     	ds	8
  1269   00003F                     dtoa@s:
  1270                           	callstack 0
  1271                           
  1272                           ; 1 bytes @ 0x3E
  1273   00003F                     	ds	1
  1274   000040                     dtoa@i:
  1275                           	callstack 0
  1276                           
  1277                           ; 2 bytes @ 0x3F
  1278   000040                     	ds	2
  1279   000042                     vfpfcnvrt@fp:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x41
  1283   000042                     	ds	2
  1284   000044                     vfpfcnvrt@fmt:
  1285                           	callstack 0
  1286                           
  1287                           ; 2 bytes @ 0x43
  1288   000044                     	ds	2
  1289   000046                     vfpfcnvrt@ap:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x45
  1293   000046                     	ds	2
  1294   000048                     ??_vfpfcnvrt:
  1295                           
  1296                           ; 1 bytes @ 0x47
  1297   000048                     	ds	2
  1298   00004A                     vfpfcnvrt@convarg:
  1299                           	callstack 0
  1300                           
  1301                           ; 8 bytes @ 0x49
  1302   00004A                     	ds	8
  1303   000052                     vfpfcnvrt@cp:
  1304                           	callstack 0
  1305                           
  1306                           ; 2 bytes @ 0x51
  1307   000052                     	ds	2
  1308   000054                     vfprintf@cfmt:
  1309                           	callstack 0
  1310                           
  1311                           ; 2 bytes @ 0x53
  1312   000054                     	ds	2
  1313   000056                     ??_main:
  1314                           
  1315                           ; 1 bytes @ 0x55
  1316   000056                     	ds	2
  1317                           
  1318 ;;
  1319 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1320 ;;
  1321 ;; *************** function _main *****************
  1322 ;; Defined at:
  1323 ;;		line 21 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  i               1  244[BANK1 ] enum E14569
  1328 ;;  buf           150   90[BANK1 ] unsigned char [150]
  1329 ;;  expected_val   72   90[BANK2 ] unsigned int [9][4]
  1330 ;;  ReturnHomeTi   60   30[BANK2 ] unsigned int [30]
  1331 ;;  expected_val   40    0        unsigned int [5][4]
  1332 ;;  ReturnHomeCa   30    0[BANK2 ] enum E14569[30]
  1333 ;;  motorL          9  247[BANK1 ] struct DC_motor
  1334 ;;  motorR          9  162[BANK2 ] struct DC_motor
  1335 ;;  clear_read      2  245[BANK1 ] unsigned int 
  1336 ;;  blue_read       2  242[BANK1 ] unsigned int 
  1337 ;;  green_read      2   93[BANK0 ] unsigned int 
  1338 ;;  red_read        2   91[BANK0 ] unsigned int 
  1339 ;;  CardCount       2  240[BANK1 ] unsigned int 
  1340 ;;  stop_all        2   89[BANK0 ] unsigned int 
  1341 ;;  clear_read_c    2   87[BANK0 ] unsigned int 
  1342 ;;  TimerCount      2   85[BANK0 ] unsigned int 
  1343 ;;  card            1   84[BANK0 ] enum E14569
  1344 ;;  PWMcycle        1   83[BANK0 ] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Locals:         0      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Totals:         2      12     166     171       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;Total ram usage:      351 bytes
  1359 ;; Hardware stack levels required when called: 11
  1360 ;; This function calls:
  1361 ;;		_I2C_2_Master_Init
  1362 ;;		_Interrupts_init
  1363 ;;		_LEDSon_init
  1364 ;;		___lwmod
  1365 ;;		_card_response
  1366 ;;		_clear_read_calibration
  1367 ;;		_collect_avg_readings
  1368 ;;		_color_click_init
  1369 ;;		_color_read_Clear
  1370 ;;		_fullSpeedAhead
  1371 ;;		_initDCmotorsPWM
  1372 ;;		_initUSART4
  1373 ;;		_reverseFullSpeed
  1374 ;;		_sendStringSerial4
  1375 ;;		_setMotorPWM
  1376 ;;		_sprintf
  1377 ;;		_stop
  1378 ;; This function is called by:
  1379 ;;		Startup code after reset
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text0
  1384   010706                     __ptext0:
  1385                           	callstack 0
  1386   010706                     _main:
  1387                           	callstack 20
  1388   010706                     
  1389                           ;main.c: 26:     LEDSon_init();
  1390   010706  ECFA  F095         	call	_LEDSon_init	;wreg free
  1391   01070A                     
  1392                           ;main.c: 27:     I2C_2_Master_Init();
  1393   01070A  ECE5  F095         	call	_I2C_2_Master_Init	;wreg free
  1394   01070E                     
  1395                           ;main.c: 28:     color_click_init();
  1396   01070E  ECB3  F095         	call	_color_click_init	;wreg free
  1397   010712                     
  1398                           ;main.c: 29:     initDCmotorsPWM();
  1399   010712  ECDE  F092         	call	_initDCmotorsPWM	;wreg free
  1400   010716                     
  1401                           ;main.c: 30:     initUSART4();
  1402   010716  EC4B  F096         	call	_initUSART4	;wreg free
  1403   01071A                     
  1404                           ;main.c: 31:     Interrupts_init();
  1405   01071A  EC0F  F096         	call	_Interrupts_init	;wreg free
  1406   01071E                     
  1407                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1408   01071E  8486               	bsf	134,2,c	;volatile
  1409   010720                     
  1410                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1411   010720  010E               	movlb	14	; () banked
  1412   010722  95B4               	bcf	180,2,b	;volatile
  1413   010724                     
  1414                           ; BSR set to: 14
  1415                           ;main.c: 36:     TRISFbits.TRISF3=1;
  1416   010724  8686               	bsf	134,3,c	;volatile
  1417   010726                     
  1418                           ; BSR set to: 14
  1419                           ;main.c: 37:     ANSELFbits.ANSELF3=0;
  1420   010726  97B4               	bcf	180,3,b	;volatile
  1421   010728                     
  1422                           ; BSR set to: 14
  1423                           ;main.c: 43:     unsigned char PWMcycle = T2PR;
  1424   010728  CFBC F0B3          	movff	4028,main@PWMcycle	;volatile
  1425   01072C                     
  1426                           ; BSR set to: 14
  1427                           ;main.c: 45:     struct DC_motor motorL, motorR;;main.c: 47:     motorL.power=0;
  1428   01072C  0E00               	movlw	0
  1429   01072E  0101               	movlb	1	; () banked
  1430   010730  6FF7               	movwf	main@motorL& (0+255),b
  1431   010732                     
  1432                           ; BSR set to: 1
  1433                           ;main.c: 48:     motorL.direction=1;
  1434   010732  0E01               	movlw	1
  1435   010734  6FF8               	movwf	(main@motorL+1)& (0+255),b
  1436   010736                     
  1437                           ; BSR set to: 1
  1438                           ;main.c: 49:     motorL.brakemode=1;
  1439   010736  0E01               	movlw	1
  1440   010738  6FF9               	movwf	(main@motorL+2)& (0+255),b
  1441   01073A                     
  1442                           ; BSR set to: 1
  1443                           ;main.c: 50:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1444   01073A  0EAA               	movlw	170
  1445   01073C  6FFC               	movwf	(main@motorL+5)& (0+255),b
  1446   01073E  0E0F               	movlw	15
  1447   010740  6FFD               	movwf	(main@motorL+6)& (0+255),b
  1448   010742                     
  1449                           ; BSR set to: 1
  1450                           ;main.c: 51:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1451   010742  0EA6               	movlw	166
  1452   010744  6FFE               	movwf	(main@motorL+7)& (0+255),b
  1453   010746  0E0F               	movlw	15
  1454   010748  6FFF               	movwf	(main@motorL+8)& (0+255),b
  1455   01074A                     
  1456                           ; BSR set to: 1
  1457                           ;main.c: 52:     motorL.PWMperiod=PWMcycle;
  1458   01074A  C0B3  F1FA         	movff	main@PWMcycle,main@motorL+3
  1459   01074E  6BFB               	clrf	(main@motorL+4)& (0+255),b
  1460   010750                     
  1461                           ; BSR set to: 1
  1462                           ;main.c: 54:     motorR.power=0;
  1463   010750  0E00               	movlw	0
  1464   010752  0102               	movlb	2	; () banked
  1465   010754  6FA2               	movwf	main@motorR& (0+255),b
  1466   010756                     
  1467                           ; BSR set to: 2
  1468                           ;main.c: 55:     motorR.direction=1;
  1469   010756  0E01               	movlw	1
  1470   010758  6FA3               	movwf	(main@motorR+1)& (0+255),b
  1471   01075A                     
  1472                           ; BSR set to: 2
  1473                           ;main.c: 56:     motorR.brakemode=1;
  1474   01075A  0E01               	movlw	1
  1475   01075C  6FA4               	movwf	(main@motorR+2)& (0+255),b
  1476                           
  1477                           ;main.c: 57:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1478   01075E  0E25               	movlw	37
  1479   010760  6FA7               	movwf	(main@motorR+5)& (0+255),b
  1480   010762  0E0F               	movlw	15
  1481   010764  6FA8               	movwf	(main@motorR+6)& (0+255),b
  1482                           
  1483                           ;main.c: 58:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1484   010766  0E21               	movlw	33
  1485   010768  6FA9               	movwf	(main@motorR+7)& (0+255),b
  1486   01076A  0E0F               	movlw	15
  1487   01076C  6FAA               	movwf	(main@motorR+8)& (0+255),b
  1488   01076E                     
  1489                           ; BSR set to: 2
  1490                           ;main.c: 59:     motorR.PWMperiod=PWMcycle;
  1491   01076E  C0B3  F2A5         	movff	main@PWMcycle,main@motorR+3
  1492   010772  6BA6               	clrf	(main@motorR+4)& (0+255),b
  1493   010774                     
  1494                           ; BSR set to: 2
  1495                           ;main.c: 61:     setMotorPWM(&motorL);
  1496   010774  0EF7               	movlw	low main@motorL
  1497   010776  6E11               	movwf	setMotorPWM@m^0,c
  1498   010778  0E01               	movlw	high main@motorL
  1499   01077A  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1500   01077C  EC0E  F08E         	call	_setMotorPWM	;wreg free
  1501   010780                     
  1502                           ;main.c: 62:     setMotorPWM(&motorR);
  1503   010780  0EA2               	movlw	low main@motorR
  1504   010782  6E11               	movwf	setMotorPWM@m^0,c
  1505   010784  0E02               	movlw	high main@motorR
  1506   010786  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1507   010788  EC0E  F08E         	call	_setMotorPWM	;wreg free
  1508   01078C                     
  1509                           ;main.c: 68:     colour card;;main.c: 69:     char buf[150];;main.c: 72:     unsigned in
      +                          t red_read = 0;
  1510   01078C  0E00               	movlw	0
  1511   01078E  0100               	movlb	0	; () banked
  1512   010790  6FBC               	movwf	(main@red_read+1)& (0+255),b
  1513   010792  0E00               	movlw	0
  1514   010794  6FBB               	movwf	main@red_read& (0+255),b
  1515   010796                     
  1516                           ; BSR set to: 0
  1517                           ;main.c: 73:     unsigned int green_read = 0;
  1518   010796  0E00               	movlw	0
  1519   010798  6FBE               	movwf	(main@green_read+1)& (0+255),b
  1520   01079A  0E00               	movlw	0
  1521   01079C  6FBD               	movwf	main@green_read& (0+255),b
  1522   01079E                     
  1523                           ; BSR set to: 0
  1524                           ;main.c: 74:     unsigned int blue_read = 0;
  1525   01079E  0E00               	movlw	0
  1526   0107A0  0101               	movlb	1	; () banked
  1527   0107A2  6FF3               	movwf	(main@blue_read+1)& (0+255),b
  1528   0107A4  0E00               	movlw	0
  1529   0107A6  6FF2               	movwf	main@blue_read& (0+255),b
  1530   0107A8                     
  1531                           ; BSR set to: 1
  1532                           ;main.c: 75:     unsigned int clear_read = 0;
  1533   0107A8  0E00               	movlw	0
  1534   0107AA  6FF6               	movwf	(main@clear_read+1)& (0+255),b
  1535   0107AC  0E00               	movlw	0
  1536   0107AE  6FF5               	movwf	main@clear_read& (0+255),b
  1537   0107B0                     
  1538                           ; BSR set to: 1
  1539                           ;main.c: 77:     unsigned int TimerCount = 0;
  1540   0107B0  0E00               	movlw	0
  1541   0107B2  0100               	movlb	0	; () banked
  1542   0107B4  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  1543   0107B6  0E00               	movlw	0
  1544   0107B8  6FB5               	movwf	main@TimerCount& (0+255),b
  1545   0107BA                     
  1546                           ; BSR set to: 0
  1547                           ;main.c: 78:     unsigned int CardCount = 0;
  1548   0107BA  0E00               	movlw	0
  1549   0107BC  0101               	movlb	1	; () banked
  1550   0107BE  6FF1               	movwf	(main@CardCount+1)& (0+255),b
  1551   0107C0  0E00               	movlw	0
  1552   0107C2  6FF0               	movwf	main@CardCount& (0+255),b
  1553   0107C4                     
  1554                           ; BSR set to: 1
  1555                           ;main.c: 79:     unsigned int clear_read_check = 0;
  1556   0107C4  0E00               	movlw	0
  1557   0107C6  0100               	movlb	0	; () banked
  1558   0107C8  6FB8               	movwf	(main@clear_read_check+1)& (0+255),b
  1559   0107CA  0E00               	movlw	0
  1560   0107CC  6FB7               	movwf	main@clear_read_check& (0+255),b
  1561   0107CE                     
  1562                           ; BSR set to: 0
  1563                           ;main.c: 81:     unsigned int expected_values[4][9];;main.c: 82:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 84:     unsigned int ReturnHomeTimes[30] = {0};
  1564   0107CE  EE22  F01E         	lfsr	2,main@ReturnHomeTimes
  1565   0107D2  0E3B               	movlw	59
  1566   0107D4                     u2581:
  1567   0107D4  6ADE               	clrf	postinc2,c
  1568   0107D6  06E8               	decf	wreg,f,c
  1569   0107D8  E2FD               	bc	u2581
  1570   0107DA                     
  1571                           ; BSR set to: 0
  1572                           ;main.c: 85:     colour ReturnHomeCards[30] = {BLACK};
  1573   0107DA  EE22  F0AB         	lfsr	2,main@F14702
  1574   0107DE  EE12  F000         	lfsr	1,main@ReturnHomeCards
  1575   0107E2  0E1D               	movlw	29
  1576   0107E4                     u2591:
  1577   0107E4  CFDB FFE3          	movff	plusw2,plusw1
  1578   0107E8  06E8               	decf	wreg,f,c
  1579   0107EA  E2FC               	bc	u2591
  1580   0107EC                     
  1581                           ; BSR set to: 0
  1582                           ;main.c: 87:     unsigned int stop_all = 0;
  1583   0107EC  0E00               	movlw	0
  1584   0107EE  6FBA               	movwf	(main@stop_all+1)& (0+255),b
  1585   0107F0  0E00               	movlw	0
  1586   0107F2  6FB9               	movwf	main@stop_all& (0+255),b
  1587   0107F4                     
  1588                           ; BSR set to: 0
  1589                           ;main.c: 98:     LATDbits.LATD4 = 0;
  1590   0107F4  987C               	bcf	124,4,c	;volatile
  1591   0107F6                     
  1592                           ; BSR set to: 0
  1593                           ;main.c: 99:     for(colour i = RED; i<= BLACK; i++){
  1594   0107F6  0E00               	movlw	0
  1595   0107F8  0101               	movlb	1	; () banked
  1596   0107FA  6FF4               	movwf	main@i& (0+255),b
  1597   0107FC  EF01  F084         	goto	l243
  1598   010800                     l244:
  1599                           
  1600                           ;main.c: 101:             LATDbits.LATD4 = 1;
  1601   010800  887C               	bsf	124,4,c	;volatile
  1602   010802                     l243:
  1603                           
  1604                           ;main.c: 100:         while(PORTFbits.RF2){
  1605   010802  B48E               	btfsc	142,2,c	;volatile
  1606   010804  EF06  F084         	goto	u2601
  1607   010808  EF08  F084         	goto	u2600
  1608   01080C                     u2601:
  1609   01080C  EF00  F084         	goto	l244
  1610   010810                     u2600:
  1611   010810                     
  1612                           ;main.c: 103:         LATDbits.LATD4 = 0;
  1613   010810  987C               	bcf	124,4,c	;volatile
  1614   010812                     
  1615                           ;main.c: 104:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1616   010812  0E09               	movlw	9
  1617   010814  6E57               	movwf	(??_main+1)^0,c
  1618   010816  0E1E               	movlw	30
  1619   010818  6E56               	movwf	??_main^0,c
  1620   01081A  0EE4               	movlw	228
  1621   01081C                     u2727:
  1622   01081C  2EE8               	decfsz	wreg,f,c
  1623   01081E  D7FE               	bra	u2727
  1624   010820  2E56               	decfsz	??_main^0,f,c
  1625   010822  D7FC               	bra	u2727
  1626   010824  2E57               	decfsz	(??_main+1)^0,f,c
  1627   010826  D7FA               	bra	u2727
  1628   010828  D000               	nop2	
  1629   01082A                     
  1630                           ;main.c: 105:         stop(&motorL, &motorR);
  1631   01082A  0EF7               	movlw	low main@motorL
  1632   01082C  6E17               	movwf	stop@mL^0,c
  1633   01082E  0E01               	movlw	high main@motorL
  1634   010830  6E18               	movwf	(stop@mL+1)^0,c
  1635   010832  0EA2               	movlw	low main@motorR
  1636   010834  6E19               	movwf	stop@mR^0,c
  1637   010836  0E02               	movlw	high main@motorR
  1638   010838  6E1A               	movwf	(stop@mR+1)^0,c
  1639   01083A  EC0B  F094         	call	_stop	;wreg free
  1640   01083E                     
  1641                           ;main.c: 106:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1642   01083E  0E02               	movlw	2
  1643   010840  6E57               	movwf	(??_main+1)^0,c
  1644   010842  0EA0               	movlw	160
  1645   010844  6E56               	movwf	??_main^0,c
  1646   010846  0E92               	movlw	146
  1647   010848                     u2737:
  1648   010848  2EE8               	decfsz	wreg,f,c
  1649   01084A  D7FE               	bra	u2737
  1650   01084C  2E56               	decfsz	??_main^0,f,c
  1651   01084E  D7FC               	bra	u2737
  1652   010850  2E57               	decfsz	(??_main+1)^0,f,c
  1653   010852  D7FA               	bra	u2737
  1654   010854  D000               	nop2	
  1655                           
  1656                           ;main.c: 107:         reverseFullSpeed(&motorL, &motorR);
  1657   010856  0EF7               	movlw	low main@motorL
  1658   010858  6E17               	movwf	reverseFullSpeed@mL^0,c
  1659   01085A  0E01               	movlw	high main@motorL
  1660   01085C  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1661   01085E  0EA2               	movlw	low main@motorR
  1662   010860  6E19               	movwf	reverseFullSpeed@mR^0,c
  1663   010862  0E02               	movlw	high main@motorR
  1664   010864  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1665   010866  EC98  F092         	call	_reverseFullSpeed	;wreg free
  1666   01086A                     
  1667                           ;main.c: 108:         _delay((unsigned long)((150)*(64000000/4000.0)));
  1668   01086A  0E0D               	movlw	13
  1669   01086C  6E57               	movwf	(??_main+1)^0,c
  1670   01086E  0E2D               	movlw	45
  1671   010870  6E56               	movwf	??_main^0,c
  1672   010872  0ED8               	movlw	216
  1673   010874                     u2747:
  1674   010874  2EE8               	decfsz	wreg,f,c
  1675   010876  D7FE               	bra	u2747
  1676   010878  2E56               	decfsz	??_main^0,f,c
  1677   01087A  D7FC               	bra	u2747
  1678   01087C  2E57               	decfsz	(??_main+1)^0,f,c
  1679   01087E  D7FA               	bra	u2747
  1680   010880                     
  1681                           ;main.c: 109:         stop(&motorL, &motorR);
  1682   010880  0EF7               	movlw	low main@motorL
  1683   010882  6E17               	movwf	stop@mL^0,c
  1684   010884  0E01               	movlw	high main@motorL
  1685   010886  6E18               	movwf	(stop@mL+1)^0,c
  1686   010888  0EA2               	movlw	low main@motorR
  1687   01088A  6E19               	movwf	stop@mR^0,c
  1688   01088C  0E02               	movlw	high main@motorR
  1689   01088E  6E1A               	movwf	(stop@mR+1)^0,c
  1690   010890  EC0B  F094         	call	_stop	;wreg free
  1691   010894                     
  1692                           ;main.c: 110:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_re
      +                          ad);
  1693   010894  0EF5               	movlw	low main@clear_read
  1694   010896  6E0F               	movwf	collect_avg_readings@clear_read^0,c
  1695   010898  0E01               	movlw	high main@clear_read
  1696   01089A  6E10               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1697   01089C  0EBB               	movlw	low main@red_read
  1698   01089E  6E11               	movwf	collect_avg_readings@red_read^0,c
  1699   0108A0  0E00               	movlw	high main@red_read
  1700   0108A2  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1701   0108A4  0EBD               	movlw	low main@green_read
  1702   0108A6  6E13               	movwf	collect_avg_readings@green_read^0,c
  1703   0108A8  0E00               	movlw	high main@green_read
  1704   0108AA  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1705   0108AC  0EF2               	movlw	low main@blue_read
  1706   0108AE  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1707   0108B0  0E01               	movlw	high main@blue_read
  1708   0108B2  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1709   0108B4  EC54  F08B         	call	_collect_avg_readings	;wreg free
  1710   0108B8                     
  1711                           ;main.c: 111:         expected_values[RED][i] = red_read;
  1712   0108B8  0101               	movlb	1	; () banked
  1713   0108BA  51F4               	movf	main@i& (0+255),w,b
  1714   0108BC  0D02               	mullw	2
  1715   0108BE  0E5A               	movlw	low main@expected_values
  1716   0108C0  24F3               	addwf	243,w,c
  1717   0108C2  6ED9               	movwf	fsr2l,c
  1718   0108C4  0E02               	movlw	high main@expected_values
  1719   0108C6  20F4               	addwfc	prodh,w,c
  1720   0108C8  6EDA               	movwf	fsr2h,c
  1721   0108CA  C0BB  FFDE         	movff	main@red_read,postinc2
  1722   0108CE  C0BC  FFDD         	movff	main@red_read+1,postdec2
  1723   0108D2                     
  1724                           ; BSR set to: 1
  1725                           ;main.c: 112:         expected_values[GREEN][i] = green_read;
  1726   0108D2  51F4               	movf	main@i& (0+255),w,b
  1727   0108D4  0D02               	mullw	2
  1728   0108D6  0E12               	movlw	18
  1729   0108D8  26F3               	addwf	243,f,c
  1730   0108DA  0E00               	movlw	0
  1731   0108DC  22F4               	addwfc	244,f,c
  1732   0108DE  0E5A               	movlw	low main@expected_values
  1733   0108E0  24F3               	addwf	243,w,c
  1734   0108E2  6ED9               	movwf	fsr2l,c
  1735   0108E4  0E02               	movlw	high main@expected_values
  1736   0108E6  20F4               	addwfc	prodh,w,c
  1737   0108E8  6EDA               	movwf	fsr2h,c
  1738   0108EA  C0BD  FFDE         	movff	main@green_read,postinc2
  1739   0108EE  C0BE  FFDD         	movff	main@green_read+1,postdec2
  1740   0108F2                     
  1741                           ; BSR set to: 1
  1742                           ;main.c: 113:         expected_values[BLUE][i] = blue_read;
  1743   0108F2  51F4               	movf	main@i& (0+255),w,b
  1744   0108F4  0D02               	mullw	2
  1745   0108F6  0E24               	movlw	36
  1746   0108F8  26F3               	addwf	243,f,c
  1747   0108FA  0E00               	movlw	0
  1748   0108FC  22F4               	addwfc	244,f,c
  1749   0108FE  0E5A               	movlw	low main@expected_values
  1750   010900  24F3               	addwf	243,w,c
  1751   010902  6ED9               	movwf	fsr2l,c
  1752   010904  0E02               	movlw	high main@expected_values
  1753   010906  20F4               	addwfc	prodh,w,c
  1754   010908  6EDA               	movwf	fsr2h,c
  1755   01090A  C1F2  FFDE         	movff	main@blue_read,postinc2
  1756   01090E  C1F3  FFDD         	movff	main@blue_read+1,postdec2
  1757   010912                     
  1758                           ; BSR set to: 1
  1759                           ;main.c: 114:         expected_values[3][i] = clear_read;
  1760   010912  51F4               	movf	main@i& (0+255),w,b
  1761   010914  0D02               	mullw	2
  1762   010916  0E36               	movlw	54
  1763   010918  26F3               	addwf	243,f,c
  1764   01091A  0E00               	movlw	0
  1765   01091C  22F4               	addwfc	244,f,c
  1766   01091E  0E5A               	movlw	low main@expected_values
  1767   010920  24F3               	addwf	243,w,c
  1768   010922  6ED9               	movwf	fsr2l,c
  1769   010924  0E02               	movlw	high main@expected_values
  1770   010926  20F4               	addwfc	prodh,w,c
  1771   010928  6EDA               	movwf	fsr2h,c
  1772   01092A  C1F5  FFDE         	movff	main@clear_read,postinc2
  1773   01092E  C1F6  FFDD         	movff	main@clear_read+1,postdec2
  1774   010932                     
  1775                           ; BSR set to: 1
  1776                           ;main.c: 115:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i );
  1777   010932  0E5A               	movlw	low main@buf
  1778   010934  0100               	movlb	0	; () banked
  1779   010936  6F66               	movwf	sprintf@s& (0+255),b
  1780   010938  0E01               	movlw	high main@buf
  1781   01093A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1782   01093C  0EF3               	movlw	low STR_1
  1783   01093E  6F68               	movwf	sprintf@fmt& (0+255),b
  1784   010940  0EFE               	movlw	high STR_1
  1785   010942  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1786   010944  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1787   010948  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1788   01094C  C0BB  F06C         	movff	main@red_read,?_sprintf+6
  1789   010950  C0BC  F06D         	movff	main@red_read+1,?_sprintf+7
  1790   010954  C0BD  F06E         	movff	main@green_read,?_sprintf+8
  1791   010958  C0BE  F06F         	movff	main@green_read+1,?_sprintf+9
  1792   01095C  C1F2  F070         	movff	main@blue_read,?_sprintf+10
  1793   010960  C1F3  F071         	movff	main@blue_read+1,?_sprintf+11
  1794   010964  C1F4  F072         	movff	main@i,?_sprintf+12
  1795   010968  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1796   01096A  EC63  F094         	call	_sprintf	;wreg free
  1797   01096E                     
  1798                           ;main.c: 116:         sendStringSerial4(buf);
  1799   01096E  0E5A               	movlw	low main@buf
  1800   010970  6E05               	movwf	sendStringSerial4@string^0,c
  1801   010972  0E01               	movlw	high main@buf
  1802   010974  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1803   010976  ECCD  F095         	call	_sendStringSerial4	;wreg free
  1804   01097A                     
  1805                           ;main.c: 117:     }
  1806   01097A  0101               	movlb	1	; () banked
  1807   01097C  2BF4               	incf	main@i& (0+255),f,b
  1808   01097E                     
  1809                           ; BSR set to: 1
  1810   01097E  0E08               	movlw	8
  1811   010980  65F4               	cpfsgt	main@i& (0+255),b
  1812   010982  EFC5  F084         	goto	u2611
  1813   010986  EFC7  F084         	goto	u2610
  1814   01098A                     u2611:
  1815   01098A  EF01  F084         	goto	l243
  1816   01098E                     u2610:
  1817   01098E                     
  1818                           ; BSR set to: 1
  1819                           ;main.c: 118:     LATDbits.LATD4 = 1;
  1820   01098E  887C               	bsf	124,4,c	;volatile
  1821                           
  1822                           ;main.c: 119:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1823   010990  EFCB  F084         	goto	l246
  1824   010994                     l247:
  1825   010994  987C               	bcf	124,4,c	;volatile
  1826   010996                     l246:
  1827   010996  B48E               	btfsc	142,2,c	;volatile
  1828   010998  EFD0  F084         	goto	u2621
  1829   01099C  EFD2  F084         	goto	u2620
  1830   0109A0                     u2621:
  1831   0109A0  EFCA  F084         	goto	l247
  1832   0109A4                     u2620:
  1833   0109A4                     
  1834                           ;main.c: 120:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1835   0109A4  0E5A               	movlw	low main@buf
  1836   0109A6  0100               	movlb	0	; () banked
  1837   0109A8  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1838   0109AA  0E01               	movlw	high main@buf
  1839   0109AC  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1840   0109AE  0EF5               	movlw	low main@clear_read
  1841   0109B0  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1842   0109B2  0E01               	movlw	high main@clear_read
  1843   0109B4  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1844   0109B6  0EB7               	movlw	low main@clear_read_check
  1845   0109B8  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1846   0109BA  0E00               	movlw	high main@clear_read_check
  1847   0109BC  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1848   0109BE  EC25  F090         	call	_clear_read_calibration	;wreg free
  1849                           
  1850                           ;main.c: 122:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1851   0109C2  0E5A               	movlw	low main@buf
  1852   0109C4  0100               	movlb	0	; () banked
  1853   0109C6  6F66               	movwf	sprintf@s& (0+255),b
  1854   0109C8  0E01               	movlw	high main@buf
  1855   0109CA  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1856   0109CC  0ECE               	movlw	low STR_2
  1857   0109CE  6F68               	movwf	sprintf@fmt& (0+255),b
  1858   0109D0  0EFF               	movlw	high STR_2
  1859   0109D2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1860   0109D4  C1F5  F06A         	movff	main@clear_read,?_sprintf+4
  1861   0109D8  C1F6  F06B         	movff	main@clear_read+1,?_sprintf+5
  1862   0109DC  EC63  F094         	call	_sprintf	;wreg free
  1863   0109E0                     
  1864                           ;main.c: 123:     sendStringSerial4(buf);
  1865   0109E0  0E5A               	movlw	low main@buf
  1866   0109E2  6E05               	movwf	sendStringSerial4@string^0,c
  1867   0109E4  0E01               	movlw	high main@buf
  1868   0109E6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1869   0109E8  ECCD  F095         	call	_sendStringSerial4	;wreg free
  1870   0109EC                     l249:
  1871   0109EC  B48E               	btfsc	142,2,c	;volatile
  1872   0109EE  EFFB  F084         	goto	u2631
  1873   0109F2  EFFD  F084         	goto	u2630
  1874   0109F6                     u2631:
  1875   0109F6  EFF6  F084         	goto	l249
  1876   0109FA                     u2630:
  1877   0109FA                     
  1878                           ;main.c: 130:     fullSpeedAhead(&motorL, &motorR);
  1879   0109FA  0EF7               	movlw	low main@motorL
  1880   0109FC  6E17               	movwf	fullSpeedAhead@mL^0,c
  1881   0109FE  0E01               	movlw	high main@motorL
  1882   010A00  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1883   010A02  0EA2               	movlw	low main@motorR
  1884   010A04  6E19               	movwf	fullSpeedAhead@mR^0,c
  1885   010A06  0E02               	movlw	high main@motorR
  1886   010A08  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1887   010A0A  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  1888   010A0E                     l4949:
  1889                           
  1890                           ;main.c: 133:         if (TimerFlag == 1){
  1891   010A0E  0100               	movlb	0	; () banked
  1892   010A10  05DB               	decf	_TimerFlag& (0+255),w,b
  1893   010A12  11DC               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1894   010A14  A4D8               	btfss	status,2,c
  1895   010A16  EF0F  F085         	goto	u2641
  1896   010A1A  EF11  F085         	goto	u2640
  1897   010A1E                     u2641:
  1898   010A1E  EF3D  F085         	goto	l4959
  1899   010A22                     u2640:
  1900   010A22                     
  1901                           ; BSR set to: 0
  1902                           ;main.c: 134:             TimerCount += 1;
  1903   010A22  4BB5               	infsnz	main@TimerCount& (0+255),f,b
  1904   010A24  2BB6               	incf	(main@TimerCount+1)& (0+255),f,b
  1905   010A26                     
  1906                           ; BSR set to: 0
  1907                           ;main.c: 135:             if (TimerCount % 10 == 0){LATHbits.LATH3=!LATHbits.LATH3;}
  1908   010A26  C0B5  F004         	movff	main@TimerCount,___lwmod@dividend
  1909   010A2A  C0B6  F005         	movff	main@TimerCount+1,___lwmod@dividend+1
  1910   010A2E  0E00               	movlw	0
  1911   010A30  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1912   010A32  0E0A               	movlw	10
  1913   010A34  6E06               	movwf	___lwmod@divisor^0,c
  1914   010A36  ECD9  F093         	call	___lwmod	;wreg free
  1915   010A3A  5004               	movf	?___lwmod^0,w,c
  1916   010A3C  1005               	iorwf	(?___lwmod+1)^0,w,c
  1917   010A3E  A4D8               	btfss	status,2,c
  1918   010A40  EF24  F085         	goto	u2651
  1919   010A44  EF26  F085         	goto	u2650
  1920   010A48                     u2651:
  1921   010A48  EF38  F085         	goto	l4957
  1922   010A4C                     u2650:
  1923   010A4C  A680               	btfss	128,3,c	;volatile
  1924   010A4E  EF2B  F085         	goto	u2661
  1925   010A52  EF2F  F085         	goto	u2660
  1926   010A56                     u2661:
  1927   010A56  6A56               	clrf	??_main^0,c
  1928   010A58  2A56               	incf	??_main^0,f,c
  1929   010A5A  EF30  F085         	goto	u2678
  1930   010A5E                     u2660:
  1931   010A5E  6A56               	clrf	??_main^0,c
  1932   010A60                     u2678:
  1933   010A60  4656               	rlncf	??_main^0,f,c
  1934   010A62  4656               	rlncf	??_main^0,f,c
  1935   010A64  4656               	rlncf	??_main^0,f,c
  1936   010A66  5080               	movf	128,w,c	;volatile
  1937   010A68  1856               	xorwf	??_main^0,w,c
  1938   010A6A  0BF7               	andlw	-9
  1939   010A6C  1856               	xorwf	??_main^0,w,c
  1940   010A6E  6E80               	movwf	128,c	;volatile
  1941   010A70                     l4957:
  1942                           
  1943                           ;main.c: 136:             TimerFlag = 0;
  1944   010A70  0E00               	movlw	0
  1945   010A72  0100               	movlb	0	; () banked
  1946   010A74  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  1947   010A76  0E00               	movlw	0
  1948   010A78  6FDB               	movwf	_TimerFlag& (0+255),b
  1949   010A7A                     l4959:
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 138:         clear_read = color_read_Clear();
  1953   010A7A  ECDC  F094         	call	_color_read_Clear	;wreg free
  1954   010A7E  C008  F1F5         	movff	?_color_read_Clear,main@clear_read
  1955   010A82  C009  F1F6         	movff	?_color_read_Clear+1,main@clear_read+1
  1956   010A86                     
  1957                           ;main.c: 139:         if (clear_read > clear_read_check && stop_all == 0){
  1958   010A86  0101               	movlb	1	; () banked
  1959   010A88  51F5               	movf	main@clear_read& (0+255),w,b
  1960   010A8A  0100               	movlb	0	; () banked
  1961   010A8C  5DB7               	subwf	main@clear_read_check& (0+255),w,b
  1962   010A8E  0101               	movlb	1	; () banked
  1963   010A90  51F6               	movf	(main@clear_read+1)& (0+255),w,b
  1964   010A92  0100               	movlb	0	; () banked
  1965   010A94  59B8               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1966   010A96  B0D8               	btfsc	status,0,c
  1967   010A98  EF50  F085         	goto	u2681
  1968   010A9C  EF52  F085         	goto	u2680
  1969   010AA0                     u2681:
  1970   010AA0  EF43  F086         	goto	l5003
  1971   010AA4                     u2680:
  1972   010AA4                     
  1973                           ; BSR set to: 0
  1974   010AA4  51B9               	movf	main@stop_all& (0+255),w,b
  1975   010AA6  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  1976   010AA8  A4D8               	btfss	status,2,c
  1977   010AAA  EF59  F085         	goto	u2691
  1978   010AAE  EF5B  F085         	goto	u2690
  1979   010AB2                     u2691:
  1980   010AB2  EF43  F086         	goto	l5003
  1981   010AB6                     u2690:
  1982   010AB6                     
  1983                           ; BSR set to: 0
  1984                           ;main.c: 141:             sprintf(buf, "Cardcount %d \n", CardCount);
  1985   010AB6  0E5A               	movlw	low main@buf
  1986   010AB8  6F66               	movwf	sprintf@s& (0+255),b
  1987   010ABA  0E01               	movlw	high main@buf
  1988   010ABC  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1989   010ABE  0EE5               	movlw	low STR_3
  1990   010AC0  6F68               	movwf	sprintf@fmt& (0+255),b
  1991   010AC2  0EFF               	movlw	high STR_3
  1992   010AC4  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1993   010AC6  C1F0  F06A         	movff	main@CardCount,?_sprintf+4
  1994   010ACA  C1F1  F06B         	movff	main@CardCount+1,?_sprintf+5
  1995   010ACE  EC63  F094         	call	_sprintf	;wreg free
  1996   010AD2                     
  1997                           ;main.c: 142:             sendStringSerial4(buf);
  1998   010AD2  0E5A               	movlw	low main@buf
  1999   010AD4  6E05               	movwf	sendStringSerial4@string^0,c
  2000   010AD6  0E01               	movlw	high main@buf
  2001   010AD8  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2002   010ADA  ECCD  F095         	call	_sendStringSerial4	;wreg free
  2003   010ADE                     
  2004                           ;main.c: 144:             ReturnHomeTimes[CardCount] = TimerCount - 6;
  2005   010ADE  0EFA               	movlw	250
  2006   010AE0  0100               	movlb	0	; () banked
  2007   010AE2  25B5               	addwf	main@TimerCount& (0+255),w,b
  2008   010AE4  6E56               	movwf	??_main^0,c
  2009   010AE6  0EFF               	movlw	255
  2010   010AE8  21B6               	addwfc	(main@TimerCount+1)& (0+255),w,b
  2011   010AEA  6E57               	movwf	(??_main+1)^0,c
  2012   010AEC  90D8               	bcf	status,0,c
  2013   010AEE  0101               	movlb	1	; () banked
  2014   010AF0  35F0               	rlcf	main@CardCount& (0+255),w,b
  2015   010AF2  6ED9               	movwf	fsr2l,c
  2016   010AF4  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2017   010AF6  6EDA               	movwf	fsr2h,c
  2018   010AF8  0E1E               	movlw	low main@ReturnHomeTimes
  2019   010AFA  26D9               	addwf	fsr2l,f,c
  2020   010AFC  0E02               	movlw	high main@ReturnHomeTimes
  2021   010AFE  22DA               	addwfc	fsr2h,f,c
  2022   010B00  C056  FFDE         	movff	??_main,postinc2
  2023   010B04  C057  FFDD         	movff	??_main+1,postdec2
  2024   010B08                     
  2025                           ; BSR set to: 1
  2026                           ;main.c: 146:             sprintf(buf, "Timercount array reading %d \n", ReturnHomeTimes
      +                          [CardCount]);
  2027   010B08  0E5A               	movlw	low main@buf
  2028   010B0A  0100               	movlb	0	; () banked
  2029   010B0C  6F66               	movwf	sprintf@s& (0+255),b
  2030   010B0E  0E01               	movlw	high main@buf
  2031   010B10  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2032   010B12  0E49               	movlw	low STR_4
  2033   010B14  6F68               	movwf	sprintf@fmt& (0+255),b
  2034   010B16  0EFF               	movlw	high STR_4
  2035   010B18  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2036   010B1A  90D8               	bcf	status,0,c
  2037   010B1C  0101               	movlb	1	; () banked
  2038   010B1E  35F0               	rlcf	main@CardCount& (0+255),w,b
  2039   010B20  6ED9               	movwf	fsr2l,c
  2040   010B22  35F1               	rlcf	(main@CardCount+1)& (0+255),w,b
  2041   010B24  6EDA               	movwf	fsr2h,c
  2042   010B26  0E1E               	movlw	low main@ReturnHomeTimes
  2043   010B28  26D9               	addwf	fsr2l,f,c
  2044   010B2A  0E02               	movlw	high main@ReturnHomeTimes
  2045   010B2C  22DA               	addwfc	fsr2h,f,c
  2046   010B2E  CFDE F06A          	movff	postinc2,?_sprintf+4
  2047   010B32  CFDD F06B          	movff	postdec2,?_sprintf+5
  2048   010B36  EC63  F094         	call	_sprintf	;wreg free
  2049   010B3A                     
  2050                           ;main.c: 147:             sendStringSerial4(buf);
  2051   010B3A  0E5A               	movlw	low main@buf
  2052   010B3C  6E05               	movwf	sendStringSerial4@string^0,c
  2053   010B3E  0E01               	movlw	high main@buf
  2054   010B40  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2055   010B42  ECCD  F095         	call	_sendStringSerial4	;wreg free
  2056   010B46                     
  2057                           ;main.c: 149:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2058   010B46  0E2A               	movlw	42
  2059   010B48  6E56               	movwf	??_main^0,c
  2060   010B4A  0E8E               	movlw	142
  2061   010B4C                     u2757:
  2062   010B4C  2EE8               	decfsz	wreg,f,c
  2063   010B4E  D7FE               	bra	u2757
  2064   010B50  2E56               	decfsz	??_main^0,f,c
  2065   010B52  D7FC               	bra	u2757
  2066   010B54                     
  2067                           ;main.c: 150:             stop(&motorL, &motorR);
  2068   010B54  0EF7               	movlw	low main@motorL
  2069   010B56  6E17               	movwf	stop@mL^0,c
  2070   010B58  0E01               	movlw	high main@motorL
  2071   010B5A  6E18               	movwf	(stop@mL+1)^0,c
  2072   010B5C  0EA2               	movlw	low main@motorR
  2073   010B5E  6E19               	movwf	stop@mR^0,c
  2074   010B60  0E02               	movlw	high main@motorR
  2075   010B62  6E1A               	movwf	(stop@mR+1)^0,c
  2076   010B64  EC0B  F094         	call	_stop	;wreg free
  2077   010B68                     
  2078                           ;main.c: 151:             _delay((unsigned long)((20)*(64000000/4000.0)));
  2079   010B68  0E02               	movlw	2
  2080   010B6A  6E57               	movwf	(??_main+1)^0,c
  2081   010B6C  0EA0               	movlw	160
  2082   010B6E  6E56               	movwf	??_main^0,c
  2083   010B70  0E92               	movlw	146
  2084   010B72                     u2767:
  2085   010B72  2EE8               	decfsz	wreg,f,c
  2086   010B74  D7FE               	bra	u2767
  2087   010B76  2E56               	decfsz	??_main^0,f,c
  2088   010B78  D7FC               	bra	u2767
  2089   010B7A  2E57               	decfsz	(??_main+1)^0,f,c
  2090   010B7C  D7FA               	bra	u2767
  2091   010B7E  D000               	nop2	
  2092   010B80                     
  2093                           ;main.c: 152:             reverseFullSpeed(&motorL, &motorR);
  2094   010B80  0EF7               	movlw	low main@motorL
  2095   010B82  6E17               	movwf	reverseFullSpeed@mL^0,c
  2096   010B84  0E01               	movlw	high main@motorL
  2097   010B86  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  2098   010B88  0EA2               	movlw	low main@motorR
  2099   010B8A  6E19               	movwf	reverseFullSpeed@mR^0,c
  2100   010B8C  0E02               	movlw	high main@motorR
  2101   010B8E  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  2102   010B90  EC98  F092         	call	_reverseFullSpeed	;wreg free
  2103   010B94                     
  2104                           ;main.c: 153:             _delay((unsigned long)((150)*(64000000/4000.0)));
  2105   010B94  0E0D               	movlw	13
  2106   010B96  6E57               	movwf	(??_main+1)^0,c
  2107   010B98  0E2D               	movlw	45
  2108   010B9A  6E56               	movwf	??_main^0,c
  2109   010B9C  0ED8               	movlw	216
  2110   010B9E                     u2777:
  2111   010B9E  2EE8               	decfsz	wreg,f,c
  2112   010BA0  D7FE               	bra	u2777
  2113   010BA2  2E56               	decfsz	??_main^0,f,c
  2114   010BA4  D7FC               	bra	u2777
  2115   010BA6  2E57               	decfsz	(??_main+1)^0,f,c
  2116   010BA8  D7FA               	bra	u2777
  2117   010BAA                     
  2118                           ;main.c: 154:             stop(&motorL, &motorR);
  2119   010BAA  0EF7               	movlw	low main@motorL
  2120   010BAC  6E17               	movwf	stop@mL^0,c
  2121   010BAE  0E01               	movlw	high main@motorL
  2122   010BB0  6E18               	movwf	(stop@mL+1)^0,c
  2123   010BB2  0EA2               	movlw	low main@motorR
  2124   010BB4  6E19               	movwf	stop@mR^0,c
  2125   010BB6  0E02               	movlw	high main@motorR
  2126   010BB8  6E1A               	movwf	(stop@mR+1)^0,c
  2127   010BBA  EC0B  F094         	call	_stop	;wreg free
  2128   010BBE                     
  2129                           ;main.c: 155:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2130   010BBE  0E2A               	movlw	42
  2131   010BC0  6E56               	movwf	??_main^0,c
  2132   010BC2  0E8E               	movlw	142
  2133   010BC4                     u2787:
  2134   010BC4  2EE8               	decfsz	wreg,f,c
  2135   010BC6  D7FE               	bra	u2787
  2136   010BC8  2E56               	decfsz	??_main^0,f,c
  2137   010BCA  D7FC               	bra	u2787
  2138   010BCC                     
  2139                           ;main.c: 158:             card = card_response(buf, &clear_read, &red_read, &green_read,
      +                           &blue_read, expected_values, card, &motorL, &motorR, ReturnHomeTimes, ReturnHomeCards, 
      +                          &stop_all);
  2140   010BCC  0E5A               	movlw	low main@buf
  2141   010BCE  0100               	movlb	0	; () banked
  2142   010BD0  6F9C               	movwf	card_response@buf& (0+255),b
  2143   010BD2  0E01               	movlw	high main@buf
  2144   010BD4  6F9D               	movwf	(card_response@buf+1)& (0+255),b
  2145   010BD6  0EF5               	movlw	low main@clear_read
  2146   010BD8  6F9E               	movwf	card_response@clear_read& (0+255),b
  2147   010BDA  0E01               	movlw	high main@clear_read
  2148   010BDC  6F9F               	movwf	(card_response@clear_read+1)& (0+255),b
  2149   010BDE  0EBB               	movlw	low main@red_read
  2150   010BE0  6FA0               	movwf	card_response@red_read& (0+255),b
  2151   010BE2  0E00               	movlw	high main@red_read
  2152   010BE4  6FA1               	movwf	(card_response@red_read+1)& (0+255),b
  2153   010BE6  0EBD               	movlw	low main@green_read
  2154   010BE8  6FA2               	movwf	card_response@green_read& (0+255),b
  2155   010BEA  0E00               	movlw	high main@green_read
  2156   010BEC  6FA3               	movwf	(card_response@green_read+1)& (0+255),b
  2157   010BEE  0EF2               	movlw	low main@blue_read
  2158   010BF0  6FA4               	movwf	card_response@blue_read& (0+255),b
  2159   010BF2  0E01               	movlw	high main@blue_read
  2160   010BF4  6FA5               	movwf	(card_response@blue_read+1)& (0+255),b
  2161   010BF6  0E5A               	movlw	low main@expected_values
  2162   010BF8  6FA6               	movwf	card_response@expected_values& (0+255),b
  2163   010BFA  0E02               	movlw	high main@expected_values
  2164   010BFC  6FA7               	movwf	(card_response@expected_values+1)& (0+255),b
  2165   010BFE  C0B4  F0A8         	movff	main@card,card_response@card
  2166   010C02  0EF7               	movlw	low main@motorL
  2167   010C04  6FA9               	movwf	card_response@mL& (0+255),b
  2168   010C06  0E01               	movlw	high main@motorL
  2169   010C08  6FAA               	movwf	(card_response@mL+1)& (0+255),b
  2170   010C0A  0EA2               	movlw	low main@motorR
  2171   010C0C  6FAB               	movwf	card_response@mR& (0+255),b
  2172   010C0E  0E02               	movlw	high main@motorR
  2173   010C10  6FAC               	movwf	(card_response@mR+1)& (0+255),b
  2174   010C12  0E1E               	movlw	low main@ReturnHomeTimes
  2175   010C14  6FAD               	movwf	card_response@ReturnHomeTimes& (0+255),b
  2176   010C16  0E02               	movlw	high main@ReturnHomeTimes
  2177   010C18  6FAE               	movwf	(card_response@ReturnHomeTimes+1)& (0+255),b
  2178   010C1A  0E00               	movlw	low main@ReturnHomeCards
  2179   010C1C  6FAF               	movwf	card_response@ReturnHomeCards& (0+255),b
  2180   010C1E  0E02               	movlw	high main@ReturnHomeCards
  2181   010C20  6FB0               	movwf	(card_response@ReturnHomeCards+1)& (0+255),b
  2182   010C22  0EB9               	movlw	low main@stop_all
  2183   010C24  6FB1               	movwf	card_response@stop_all& (0+255),b
  2184   010C26  0E00               	movlw	high main@stop_all
  2185   010C28  6FB2               	movwf	(card_response@stop_all+1)& (0+255),b
  2186   010C2A  EC55  F08D         	call	_card_response	;wreg free
  2187   010C2E  0100               	movlb	0	; () banked
  2188   010C30  6FB4               	movwf	main@card& (0+255),b
  2189   010C32                     
  2190                           ; BSR set to: 0
  2191                           ;main.c: 159:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2192   010C32  0E2A               	movlw	42
  2193   010C34  6E56               	movwf	??_main^0,c
  2194   010C36  0E8E               	movlw	142
  2195   010C38                     u2797:
  2196   010C38  2EE8               	decfsz	wreg,f,c
  2197   010C3A  D7FE               	bra	u2797
  2198   010C3C  2E56               	decfsz	??_main^0,f,c
  2199   010C3E  D7FC               	bra	u2797
  2200   010C40                     
  2201                           ;main.c: 160:             ReturnHomeCards[CardCount] = card;
  2202   010C40  0E00               	movlw	low main@ReturnHomeCards
  2203   010C42  0101               	movlb	1	; () banked
  2204   010C44  25F0               	addwf	main@CardCount& (0+255),w,b
  2205   010C46  6ED9               	movwf	fsr2l,c
  2206   010C48  0E02               	movlw	high main@ReturnHomeCards
  2207   010C4A  21F1               	addwfc	(main@CardCount+1)& (0+255),w,b
  2208   010C4C  6EDA               	movwf	fsr2h,c
  2209   010C4E  C0B4  FFDF         	movff	main@card,indf2
  2210   010C52                     
  2211                           ; BSR set to: 1
  2212                           ;main.c: 164:             CardCount += 1;
  2213   010C52  4BF0               	infsnz	main@CardCount& (0+255),f,b
  2214   010C54  2BF1               	incf	(main@CardCount+1)& (0+255),f,b
  2215   010C56                     
  2216                           ; BSR set to: 1
  2217                           ;main.c: 166:             TimerCount = 0;
  2218   010C56  0E00               	movlw	0
  2219   010C58  0100               	movlb	0	; () banked
  2220   010C5A  6FB6               	movwf	(main@TimerCount+1)& (0+255),b
  2221   010C5C  0E00               	movlw	0
  2222   010C5E  6FB5               	movwf	main@TimerCount& (0+255),b
  2223   010C60                     
  2224                           ; BSR set to: 0
  2225                           ;main.c: 167:             if (stop_all == 0){fullSpeedAhead(&motorL, &motorR);}
  2226   010C60  51B9               	movf	main@stop_all& (0+255),w,b
  2227   010C62  11BA               	iorwf	(main@stop_all+1)& (0+255),w,b
  2228   010C64  A4D8               	btfss	status,2,c
  2229   010C66  EF37  F086         	goto	u2701
  2230   010C6A  EF39  F086         	goto	u2700
  2231   010C6E                     u2701:
  2232   010C6E  EF43  F086         	goto	l5003
  2233   010C72                     u2700:
  2234   010C72                     
  2235                           ; BSR set to: 0
  2236   010C72  0EF7               	movlw	low main@motorL
  2237   010C74  6E17               	movwf	fullSpeedAhead@mL^0,c
  2238   010C76  0E01               	movlw	high main@motorL
  2239   010C78  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  2240   010C7A  0EA2               	movlw	low main@motorR
  2241   010C7C  6E19               	movwf	fullSpeedAhead@mR^0,c
  2242   010C7E  0E02               	movlw	high main@motorR
  2243   010C80  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  2244   010C82  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  2245   010C86                     l5003:
  2246                           
  2247                           ;main.c: 170:         if(!PORTFbits.RF3){stop_all = 0;}
  2248   010C86  B68E               	btfsc	142,3,c	;volatile
  2249   010C88  EF48  F086         	goto	u2711
  2250   010C8C  EF4A  F086         	goto	u2710
  2251   010C90                     u2711:
  2252   010C90  EF07  F085         	goto	l4949
  2253   010C94                     u2710:
  2254   010C94  0E00               	movlw	0
  2255   010C96  0100               	movlb	0	; () banked
  2256   010C98  6FBA               	movwf	(main@stop_all+1)& (0+255),b
  2257   010C9A  0E00               	movlw	0
  2258   010C9C  6FB9               	movwf	main@stop_all& (0+255),b
  2259   010C9E  EF07  F085         	goto	l4949
  2260   010CA2  EF2E  F000         	goto	start
  2261   010CA6                     __end_of_main:
  2262                           	callstack 0
  2263                           
  2264 ;; *************** function _initUSART4 *****************
  2265 ;; Defined at:
  2266 ;;		line 6 in file "serial.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2284 ;;Total ram usage:        0 bytes
  2285 ;; Hardware stack levels used: 1
  2286 ;; Hardware stack levels required when called: 1
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_main
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text1
  2295   012C96                     __ptext1:
  2296                           	callstack 0
  2297   012C96                     _initUSART4:
  2298                           	callstack 29
  2299   012C96                     
  2300                           ;serial.c: 10:     RC0PPS = 0x12;
  2301   012C96  0E12               	movlw	18
  2302   012C98  010E               	movlb	14	; () banked
  2303   012C9A  6F62               	movwf	98,b	;volatile
  2304                           
  2305                           ;serial.c: 11:     RX4PPS = 0x11;
  2306   012C9C  0E11               	movlw	17
  2307   012C9E  6F15               	movwf	21,b	;volatile
  2308   012CA0                     
  2309                           ; BSR set to: 14
  2310                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  2311   012CA0  8283               	bsf	131,1,c	;volatile
  2312   012CA2                     
  2313                           ; BSR set to: 14
  2314                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  2315   012CA2  97E9               	bcf	233,3,b	;volatile
  2316   012CA4                     
  2317                           ; BSR set to: 14
  2318                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  2319   012CA4  95E8               	bcf	232,2,b	;volatile
  2320                           
  2321                           ;serial.c: 17:     SP4BRGL = 51;
  2322   012CA6  0E33               	movlw	51
  2323   012CA8  6FE5               	movwf	229,b	;volatile
  2324                           
  2325                           ;serial.c: 18:     SP4BRGH = 0;
  2326   012CAA  0E00               	movlw	0
  2327   012CAC  6FE6               	movwf	230,b	;volatile
  2328   012CAE                     
  2329                           ; BSR set to: 14
  2330                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  2331   012CAE  89E7               	bsf	231,4,b	;volatile
  2332   012CB0                     
  2333                           ; BSR set to: 14
  2334                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  2335   012CB0  8BE8               	bsf	232,5,b	;volatile
  2336   012CB2                     
  2337                           ; BSR set to: 14
  2338                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  2339   012CB2  8FE7               	bsf	231,7,b	;volatile
  2340   012CB4                     
  2341                           ; BSR set to: 14
  2342   012CB4  0012               	return		;funcret
  2343   012CB6                     __end_of_initUSART4:
  2344                           	callstack 0
  2345                           
  2346 ;; *************** function _initDCmotorsPWM *****************
  2347 ;; Defined at:
  2348 ;;		line 6 in file "dc_motor.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text2
  2377   0125BC                     __ptext2:
  2378                           	callstack 0
  2379   0125BC                     _initDCmotorsPWM:
  2380                           	callstack 29
  2381   0125BC                     
  2382                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  2383   0125BC  9485               	bcf	133,2,c	;volatile
  2384                           
  2385                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2386   0125BE  9885               	bcf	133,4,c	;volatile
  2387                           
  2388                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  2389   0125C0  9E83               	bcf	131,7,c	;volatile
  2390                           
  2391                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  2392   0125C2  9C87               	bcf	135,6,c	;volatile
  2393   0125C4                     
  2394                           ;dc_motor.c: 14:     RE2PPS=0x05;
  2395   0125C4  0E05               	movlw	5
  2396   0125C6  010E               	movlb	14	; () banked
  2397   0125C8  6F74               	movwf	116,b	;volatile
  2398                           
  2399                           ;dc_motor.c: 15:     RE4PPS=0x06;
  2400   0125CA  0E06               	movlw	6
  2401   0125CC  6F76               	movwf	118,b	;volatile
  2402                           
  2403                           ;dc_motor.c: 16:     RC7PPS=0x07;
  2404   0125CE  0E07               	movlw	7
  2405   0125D0  6F69               	movwf	105,b	;volatile
  2406                           
  2407                           ;dc_motor.c: 17:     RG6PPS=0x08;
  2408   0125D2  0E08               	movlw	8
  2409   0125D4  6F88               	movwf	136,b	;volatile
  2410                           
  2411                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  2412   0125D6  50BD               	movf	189,w,c	;volatile
  2413   0125D8  0B8F               	andlw	-113
  2414   0125DA  0940               	iorlw	64
  2415   0125DC  6EBD               	movwf	189,c	;volatile
  2416                           
  2417                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  2418   0125DE  0EE0               	movlw	-32
  2419   0125E0  16BE               	andwf	190,f,c	;volatile
  2420                           
  2421                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  2422   0125E2  50BF               	movf	191,w,c	;volatile
  2423   0125E4  0BF0               	andlw	-16
  2424   0125E6  0901               	iorlw	1
  2425   0125E8  6EBF               	movwf	191,c	;volatile
  2426                           
  2427                           ;dc_motor.c: 26:     T2PR=99;
  2428   0125EA  0E63               	movlw	99
  2429   0125EC  6EBC               	movwf	188,c	;volatile
  2430   0125EE                     
  2431                           ; BSR set to: 14
  2432                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  2433   0125EE  8EBD               	bsf	189,7,c	;volatile
  2434                           
  2435                           ;dc_motor.c: 31:     CCPR1H=0;
  2436   0125F0  0E00               	movlw	0
  2437   0125F2  6EAA               	movwf	170,c	;volatile
  2438                           
  2439                           ;dc_motor.c: 32:     CCPR2H=0;
  2440   0125F4  0E00               	movlw	0
  2441   0125F6  6EA6               	movwf	166,c	;volatile
  2442                           
  2443                           ;dc_motor.c: 33:     CCPR3H=0;
  2444   0125F8  0E00               	movlw	0
  2445   0125FA  010F               	movlb	15	; () banked
  2446   0125FC  6F25               	movwf	37,b	;volatile
  2447                           
  2448                           ;dc_motor.c: 34:     CCPR4H=0;
  2449   0125FE  0E00               	movlw	0
  2450   012600  6F21               	movwf	33,b	;volatile
  2451                           
  2452                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  2453   012602  0EFC               	movlw	-4
  2454   012604  16AD               	andwf	173,f,c	;volatile
  2455                           
  2456                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  2457   012606  0EF3               	movlw	-13
  2458   012608  16AD               	andwf	173,f,c	;volatile
  2459                           
  2460                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  2461   01260A  0ECF               	movlw	-49
  2462   01260C  16AD               	andwf	173,f,c	;volatile
  2463                           
  2464                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  2465   01260E  0E3F               	movlw	-193
  2466   012610  16AD               	andwf	173,f,c	;volatile
  2467   012612                     
  2468                           ; BSR set to: 15
  2469                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  2470   012612  88AB               	bsf	171,4,c	;volatile
  2471                           
  2472                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  2473   012614  50AB               	movf	171,w,c	;volatile
  2474   012616  0BF0               	andlw	-16
  2475   012618  090C               	iorlw	12
  2476   01261A  6EAB               	movwf	171,c	;volatile
  2477   01261C                     
  2478                           ; BSR set to: 15
  2479                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  2480   01261C  8EAB               	bsf	171,7,c	;volatile
  2481   01261E                     
  2482                           ; BSR set to: 15
  2483                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  2484   01261E  88A7               	bsf	167,4,c	;volatile
  2485                           
  2486                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  2487   012620  50A7               	movf	167,w,c	;volatile
  2488   012622  0BF0               	andlw	-16
  2489   012624  090C               	iorlw	12
  2490   012626  6EA7               	movwf	167,c	;volatile
  2491   012628                     
  2492                           ; BSR set to: 15
  2493                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2494   012628  8EA7               	bsf	167,7,c	;volatile
  2495   01262A                     
  2496                           ; BSR set to: 15
  2497                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2498   01262A  8926               	bsf	38,4,b	;volatile
  2499                           
  2500                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2501   01262C  5126               	movf	38,w,b	;volatile
  2502   01262E  0BF0               	andlw	-16
  2503   012630  090C               	iorlw	12
  2504   012632  6F26               	movwf	38,b	;volatile
  2505   012634                     
  2506                           ; BSR set to: 15
  2507                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2508   012634  8F26               	bsf	38,7,b	;volatile
  2509   012636                     
  2510                           ; BSR set to: 15
  2511                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2512   012636  8922               	bsf	34,4,b	;volatile
  2513                           
  2514                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2515   012638  5122               	movf	34,w,b	;volatile
  2516   01263A  0BF0               	andlw	-16
  2517   01263C  090C               	iorlw	12
  2518   01263E  6F22               	movwf	34,b	;volatile
  2519   012640                     
  2520                           ; BSR set to: 15
  2521                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2522   012640  8F22               	bsf	34,7,b	;volatile
  2523   012642                     
  2524                           ; BSR set to: 15
  2525   012642  0012               	return		;funcret
  2526   012644                     __end_of_initDCmotorsPWM:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _color_click_init *****************
  2530 ;; Defined at:
  2531 ;;		line 5 in file "color.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;Total ram usage:        1 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 4
  2552 ;; This function calls:
  2553 ;;		_I2C_2_Master_Init
  2554 ;;		_color_writetoaddr
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text3
  2561   012B66                     __ptext3:
  2562                           	callstack 0
  2563   012B66                     _color_click_init:
  2564                           	callstack 26
  2565   012B66                     
  2566                           ;color.c: 8:     I2C_2_Master_Init();
  2567   012B66  ECE5  F095         	call	_I2C_2_Master_Init	;wreg free
  2568   012B6A                     
  2569                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2570   012B6A  0E01               	movlw	1
  2571   012B6C  6E06               	movwf	color_writetoaddr@value^0,c
  2572   012B6E  0E00               	movlw	0
  2573   012B70  EC5B  F096         	call	_color_writetoaddr
  2574   012B74                     
  2575                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2576   012B74  0E3F               	movlw	63
  2577   012B76  6E08               	movwf	??_color_click_init^0,c
  2578   012B78  0E55               	movlw	85
  2579   012B7A                     u2807:
  2580   012B7A  2EE8               	decfsz	wreg,f,c
  2581   012B7C  D7FE               	bra	u2807
  2582   012B7E  2E08               	decfsz	??_color_click_init^0,f,c
  2583   012B80  D7FC               	bra	u2807
  2584   012B82  F000               	nop	
  2585   012B84                     
  2586                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2587   012B84  0E03               	movlw	3
  2588   012B86  6E06               	movwf	color_writetoaddr@value^0,c
  2589   012B88  0E00               	movlw	0
  2590   012B8A  EC5B  F096         	call	_color_writetoaddr
  2591   012B8E                     
  2592                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2593   012B8E  0ED5               	movlw	213
  2594   012B90  6E06               	movwf	color_writetoaddr@value^0,c
  2595   012B92  0E01               	movlw	1
  2596   012B94  EC5B  F096         	call	_color_writetoaddr
  2597   012B98  0012               	return		;funcret
  2598   012B9A                     __end_of_color_click_init:
  2599                           	callstack 0
  2600                           
  2601 ;; *************** function _color_writetoaddr *****************
  2602 ;; Defined at:
  2603 ;;		line 21 in file "color.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  address         1    wreg     unsigned char 
  2606 ;;  value           1    5[COMRAM] unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  address         1    6[COMRAM] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, status,2, status,0, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2618 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;Total ram usage:        2 bytes
  2623 ;; Hardware stack levels used: 1
  2624 ;; Hardware stack levels required when called: 3
  2625 ;; This function calls:
  2626 ;;		_I2C_2_Master_Start
  2627 ;;		_I2C_2_Master_Stop
  2628 ;;		_I2C_2_Master_Write
  2629 ;; This function is called by:
  2630 ;;		_color_click_init
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text4
  2635   012CB6                     __ptext4:
  2636                           	callstack 0
  2637   012CB6                     _color_writetoaddr:
  2638                           	callstack 26
  2639                           
  2640                           ;incstack = 0
  2641                           ;color_writetoaddr@address stored from wreg
  2642   012CB6  6E07               	movwf	color_writetoaddr@address^0,c
  2643   012CB8                     
  2644                           ;color.c: 22:     I2C_2_Master_Start();
  2645   012CB8  EC91  F096         	call	_I2C_2_Master_Start	;wreg free
  2646                           
  2647                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2648   012CBC  0E52               	movlw	82
  2649   012CBE  EC86  F096         	call	_I2C_2_Master_Write
  2650                           
  2651                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2652   012CC2  5007               	movf	color_writetoaddr@address^0,w,c
  2653   012CC4  0980               	iorlw	128
  2654   012CC6  EC86  F096         	call	_I2C_2_Master_Write
  2655                           
  2656                           ;color.c: 25:     I2C_2_Master_Write(value);
  2657   012CCA  5006               	movf	color_writetoaddr@value^0,w,c
  2658   012CCC  EC86  F096         	call	_I2C_2_Master_Write
  2659                           
  2660                           ;color.c: 26:     I2C_2_Master_Stop();
  2661   012CD0  EC8C  F096         	call	_I2C_2_Master_Stop	;wreg free
  2662   012CD4  0012               	return		;funcret
  2663   012CD6                     __end_of_color_writetoaddr:
  2664                           	callstack 0
  2665                           
  2666 ;; *************** function _I2C_2_Master_Init *****************
  2667 ;; Defined at:
  2668 ;;		line 4 in file "i2c.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2686 ;;Total ram usage:        0 bytes
  2687 ;; Hardware stack levels used: 1
  2688 ;; Hardware stack levels required when called: 1
  2689 ;; This function calls:
  2690 ;;		Nothing
  2691 ;; This function is called by:
  2692 ;;		_color_click_init
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text5
  2698   012BCA                     __ptext5:
  2699                           	callstack 0
  2700   012BCA                     _I2C_2_Master_Init:
  2701                           	callstack 28
  2702   012BCA                     
  2703                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2704   012BCA  010E               	movlb	14	; () banked
  2705   012BCC  51D9               	movf	217,w,b	;volatile
  2706   012BCE  0BF0               	andlw	-16
  2707   012BD0  0908               	iorlw	8
  2708   012BD2  6FD9               	movwf	217,b	;volatile
  2709   012BD4                     
  2710                           ; BSR set to: 14
  2711                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2712   012BD4  8BD9               	bsf	217,5,b	;volatile
  2713                           
  2714                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2715   012BD6  0E9F               	movlw	159
  2716   012BD8  6FD6               	movwf	214,b	;volatile
  2717   012BDA                     
  2718                           ; BSR set to: 14
  2719                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2720   012BDA  8A84               	bsf	132,5,c	;volatile
  2721   012BDC                     
  2722                           ; BSR set to: 14
  2723                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2724   012BDC  8C84               	bsf	132,6,c	;volatile
  2725   012BDE                     
  2726                           ; BSR set to: 14
  2727                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2728   012BDE  9BA7               	bcf	167,5,b	;volatile
  2729   012BE0                     
  2730                           ; BSR set to: 14
  2731                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2732   012BE0  9DA7               	bcf	167,6,b	;volatile
  2733                           
  2734                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2735   012BE2  0E1D               	movlw	29
  2736   012BE4  6F1D               	movwf	29,b	;volatile
  2737                           
  2738                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2739   012BE6  0E1E               	movlw	30
  2740   012BE8  6F1C               	movwf	28,b	;volatile
  2741                           
  2742                           ;i2c.c: 18:   RD5PPS=0x1C;
  2743   012BEA  0E1C               	movlw	28
  2744   012BEC  6F6F               	movwf	111,b	;volatile
  2745                           
  2746                           ;i2c.c: 19:   RD6PPS=0x1B;
  2747   012BEE  0E1B               	movlw	27
  2748   012BF0  6F70               	movwf	112,b	;volatile
  2749   012BF2                     
  2750                           ; BSR set to: 14
  2751   012BF2  0012               	return		;funcret
  2752   012BF4                     __end_of_I2C_2_Master_Init:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _clear_read_calibration *****************
  2756 ;; Defined at:
  2757 ;;		line 11 in file "colour_identify.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2760 ;;		 -> main@buf(150), 
  2761 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2762 ;;		 -> main@clear_read(2), 
  2763 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2764 ;;		 -> main@clear_read_check(2), 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  i               2   45[BANK0 ] int 
  2767 ;;  i               2   43[BANK0 ] int 
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;Total ram usage:       14 bytes
  2782 ;; Hardware stack levels used: 1
  2783 ;; Hardware stack levels required when called: 9
  2784 ;; This function calls:
  2785 ;;		_color_read_Clear
  2786 ;;		_sendStringSerial4
  2787 ;;		_sprintf
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text6
  2794   01204A                     __ptext6:
  2795                           	callstack 0
  2796   01204A                     _clear_read_calibration:
  2797                           	callstack 21
  2798   01204A                     
  2799                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2800   01204A  0E00               	movlw	0
  2801   01204C  0100               	movlb	0	; () banked
  2802   01204E  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2803   012050  0E00               	movlw	0
  2804   012052  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2805   012054                     l4773:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2809   012054  ECDC  F094         	call	_color_read_Clear	;wreg free
  2810   012058  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2811   01205C  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2812   012060  C008  FFDE         	movff	?_color_read_Clear,postinc2
  2813   012064  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  2814   012068                     
  2815                           ;colour_identify.c: 15:     }
  2816   012068  0100               	movlb	0	; () banked
  2817   01206A  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2818   01206C  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2819   01206E                     
  2820                           ; BSR set to: 0
  2821   01206E  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2822   012070  EF43  F090         	goto	u2531
  2823   012074  0EF5               	movlw	245
  2824   012076  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2825   012078  0E01               	movlw	1
  2826   01207A  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2827   01207C  A0D8               	btfss	status,0,c
  2828   01207E  EF43  F090         	goto	u2531
  2829   012082  EF45  F090         	goto	u2530
  2830   012086                     u2531:
  2831   012086  EF2A  F090         	goto	l4773
  2832   01208A                     u2530:
  2833   01208A                     
  2834                           ; BSR set to: 0
  2835                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2836   01208A  0E00               	movlw	0
  2837   01208C  6F8E               	movwf	(clear_read_calibration@i_1640+1)& (0+255),b
  2838   01208E  0E00               	movlw	0
  2839   012090  6F8D               	movwf	clear_read_calibration@i_1640& (0+255),b
  2840   012092                     l4785:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2844   012092  ECDC  F094         	call	_color_read_Clear	;wreg free
  2845   012096  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2846   01209A  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2847   01209E  5008               	movf	?_color_read_Clear^0,w,c
  2848   0120A0  26DE               	addwf	postinc2,f,c
  2849   0120A2  5009               	movf	(?_color_read_Clear+1)^0,w,c
  2850   0120A4  22DD               	addwfc	postdec2,f,c
  2851   0120A6                     
  2852                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2853   0120A6  0E11               	movlw	17
  2854   0120A8  0100               	movlb	0	; () banked
  2855   0120AA  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2856   0120AC  0E3C               	movlw	60
  2857   0120AE  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2858   0120B0  0ECB               	movlw	203
  2859   0120B2                     u2817:
  2860   0120B2  2EE8               	decfsz	wreg,f,c
  2861   0120B4  D7FE               	bra	u2817
  2862   0120B6  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2863   0120B8  D7FC               	bra	u2817
  2864   0120BA  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2865   0120BC  D7FA               	bra	u2817
  2866   0120BE                     
  2867                           ;colour_identify.c: 20:     }
  2868   0120BE  0100               	movlb	0	; () banked
  2869   0120C0  4B8D               	infsnz	clear_read_calibration@i_1640& (0+255),f,b
  2870   0120C2  2B8E               	incf	(clear_read_calibration@i_1640+1)& (0+255),f,b
  2871   0120C4                     
  2872                           ; BSR set to: 0
  2873   0120C4  BF8E               	btfsc	(clear_read_calibration@i_1640+1)& (0+255),7,b
  2874   0120C6  EF6E  F090         	goto	u2541
  2875   0120CA  518E               	movf	(clear_read_calibration@i_1640+1)& (0+255),w,b
  2876   0120CC  E109               	bnz	u2540
  2877   0120CE  0E03               	movlw	3
  2878   0120D0  5D8D               	subwf	clear_read_calibration@i_1640& (0+255),w,b
  2879   0120D2  A0D8               	btfss	status,0,c
  2880   0120D4  EF6E  F090         	goto	u2541
  2881   0120D8  EF70  F090         	goto	u2540
  2882   0120DC                     u2541:
  2883   0120DC  EF49  F090         	goto	l4785
  2884   0120E0                     u2540:
  2885   0120E0                     
  2886                           ; BSR set to: 0
  2887                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2888   0120E0  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2889   0120E4  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2890   0120E8  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2891   0120EC  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2892   0120F0  90D8               	bcf	status,0,c
  2893   0120F2  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2894   0120F4  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2895   0120F6  90D8               	bcf	status,0,c
  2896   0120F8  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2897   0120FA  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2898   0120FC  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2899   012100  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2900   012104  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2901   012108  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2902   01210C                     
  2903                           ; BSR set to: 0
  2904                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2905   01210C  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2906   012110  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2907   012114  0ECE               	movlw	low STR_2
  2908   012116  6F68               	movwf	sprintf@fmt& (0+255),b
  2909   012118  0EFF               	movlw	high STR_2
  2910   01211A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2911   01211C  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2912   012120  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2913   012124  EC63  F094         	call	_sprintf	;wreg free
  2914   012128                     
  2915                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2916   012128  C081  F005         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2917   01212C  C082  F006         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2918   012130  ECCD  F095         	call	_sendStringSerial4	;wreg free
  2919   012134                     
  2920                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2921   012134  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2922   012138  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2923   01213C  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2924   012140  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2925   012144  0E20               	movlw	32
  2926   012146  0100               	movlb	0	; () banked
  2927   012148  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2928   01214A  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2929   01214C  0E03               	movlw	3
  2930   01214E  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2931   012150  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2932   012152  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2933   012156  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2934   01215A  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2935   01215E  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2936   012162                     
  2937                           ; BSR set to: 0
  2938   012162  0012               	return		;funcret
  2939   012164                     __end_of_clear_read_calibration:
  2940                           	callstack 0
  2941                           
  2942 ;; *************** function _card_response *****************
  2943 ;; Defined at:
  2944 ;;		line 345 in file "colour_identify.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  buf             2   60[BANK0 ] PTR unsigned char 
  2947 ;;		 -> main@buf(150), 
  2948 ;;  clear_read      2   62[BANK0 ] PTR unsigned int 
  2949 ;;		 -> main@clear_read(2), 
  2950 ;;  red_read        2   64[BANK0 ] PTR unsigned int 
  2951 ;;		 -> main@red_read(2), 
  2952 ;;  green_read      2   66[BANK0 ] PTR unsigned int 
  2953 ;;		 -> main@green_read(2), 
  2954 ;;  blue_read       2   68[BANK0 ] PTR unsigned int 
  2955 ;;		 -> main@blue_read(2), 
  2956 ;;  expected_val    2   70[BANK0 ] PTR unsigned int [9]
  2957 ;;		 -> main@expected_values(72), 
  2958 ;;  card            1   72[BANK0 ] enum E14551
  2959 ;;  mL              2   73[BANK0 ] PTR struct DC_motor
  2960 ;;		 -> main@motorL(9), 
  2961 ;;  mR              2   75[BANK0 ] PTR struct DC_motor
  2962 ;;		 -> main@motorR(9), 
  2963 ;;  ReturnHomeTi    2   77[BANK0 ] PTR unsigned int 
  2964 ;;		 -> main@ReturnHomeTimes(60), 
  2965 ;;  ReturnHomeCa    2   79[BANK0 ] PTR enum E14551
  2966 ;;		 -> main@ReturnHomeCards(30), 
  2967 ;;  stop_all        2   81[BANK0 ] PTR unsigned int 
  2968 ;;		 -> main@stop_all(2), 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  normalised_v   72    0[BANK1 ] unsigned int [9][4]
  2971 ;;  master_close   18   72[BANK1 ] unsigned int [9]
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      enum E14569
  2974 ;; Registers used:
  2975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2981 ;;      Params:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2982 ;;      Locals:         0       0      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2984 ;;      Totals:         0      23      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2985 ;;Total ram usage:      113 bytes
  2986 ;; Hardware stack levels used: 1
  2987 ;; Hardware stack levels required when called: 10
  2988 ;; This function calls:
  2989 ;;		_collect_avg_readings
  2990 ;;		_determine_card
  2991 ;;		_make_master_closeness
  2992 ;;		_motor_response
  2993 ;;		_normalise_readings
  2994 ;;		_sendStringSerial4
  2995 ;;		_sprintf
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text7
  3002   011AAA                     __ptext7:
  3003                           	callstack 0
  3004   011AAA                     _card_response:
  3005                           	callstack 20
  3006   011AAA                     
  3007                           ;colour_identify.c: 349:     unsigned int normalised_values[4][9];;colour_identify.c: 35
      +                          0:     unsigned int master_closeness[9];;colour_identify.c: 352:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  3008   011AAA  C09E  F00F         	movff	card_response@clear_read,collect_avg_readings@clear_read
  3009   011AAE  C09F  F010         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  3010   011AB2  C0A0  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  3011   011AB6  C0A1  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  3012   011ABA  C0A2  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  3013   011ABE  C0A3  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  3014   011AC2  C0A4  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  3015   011AC6  C0A5  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  3016   011ACA  EC54  F08B         	call	_collect_avg_readings	;wreg free
  3017   011ACE                     
  3018                           ;colour_identify.c: 353:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  3019   011ACE  C09C  F066         	movff	card_response@buf,sprintf@s
  3020   011AD2  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  3021   011AD6  0E25               	movlw	low STR_11
  3022   011AD8  0100               	movlb	0	; () banked
  3023   011ADA  6F68               	movwf	sprintf@fmt& (0+255),b
  3024   011ADC  0EFF               	movlw	high STR_11
  3025   011ADE  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3026   011AE0  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  3027   011AE4  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  3028   011AE8  CFDE F06A          	movff	postinc2,?_sprintf+4
  3029   011AEC  CFDD F06B          	movff	postdec2,?_sprintf+5
  3030   011AF0  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3031   011AF4  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3032   011AF8  CFDE F06C          	movff	postinc2,?_sprintf+6
  3033   011AFC  CFDD F06D          	movff	postdec2,?_sprintf+7
  3034   011B00  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3035   011B04  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3036   011B08  CFDE F06E          	movff	postinc2,?_sprintf+8
  3037   011B0C  CFDD F06F          	movff	postdec2,?_sprintf+9
  3038   011B10  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3039   011B14  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3040   011B18  CFDE F070          	movff	postinc2,?_sprintf+10
  3041   011B1C  CFDD F071          	movff	postdec2,?_sprintf+11
  3042   011B20  EC63  F094         	call	_sprintf	;wreg free
  3043   011B24                     
  3044                           ;colour_identify.c: 354:     sendStringSerial4(buf);
  3045   011B24  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3046   011B28  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3047   011B2C  ECCD  F095         	call	_sendStringSerial4	;wreg free
  3048   011B30                     
  3049                           ;colour_identify.c: 356:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  3050   011B30  C09C  F01A         	movff	card_response@buf,normalise_readings@buf
  3051   011B34  C09D  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  3052   011B38  C09E  FFD9         	movff	card_response@clear_read,fsr2l
  3053   011B3C  C09F  FFDA         	movff	card_response@clear_read+1,fsr2h
  3054   011B40  CFDE F01C          	movff	postinc2,normalise_readings@clear_read
  3055   011B44  CFDD F01D          	movff	postdec2,normalise_readings@clear_read+1
  3056   011B48  C0A0  FFD9         	movff	card_response@red_read,fsr2l
  3057   011B4C  C0A1  FFDA         	movff	card_response@red_read+1,fsr2h
  3058   011B50  CFDE F01E          	movff	postinc2,normalise_readings@red_read
  3059   011B54  CFDD F01F          	movff	postdec2,normalise_readings@red_read+1
  3060   011B58  C0A2  FFD9         	movff	card_response@green_read,fsr2l
  3061   011B5C  C0A3  FFDA         	movff	card_response@green_read+1,fsr2h
  3062   011B60  CFDE F020          	movff	postinc2,normalise_readings@green_read
  3063   011B64  CFDD F021          	movff	postdec2,normalise_readings@green_read+1
  3064   011B68  C0A4  FFD9         	movff	card_response@blue_read,fsr2l
  3065   011B6C  C0A5  FFDA         	movff	card_response@blue_read+1,fsr2h
  3066   011B70  CFDE F022          	movff	postinc2,normalise_readings@blue_read
  3067   011B74  CFDD F023          	movff	postdec2,normalise_readings@blue_read+1
  3068   011B78  C0A6  F024         	movff	card_response@expected_values,normalise_readings@expected_values
  3069   011B7C  C0A7  F025         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  3070   011B80  0E00               	movlw	low card_response@normalised_values
  3071   011B82  6E26               	movwf	normalise_readings@normalised_values^0,c
  3072   011B84  0E01               	movlw	high card_response@normalised_values
  3073   011B86  6E27               	movwf	(normalise_readings@normalised_values+1)^0,c
  3074   011B88  ECA4  F088         	call	_normalise_readings	;wreg free
  3075   011B8C                     
  3076                           ;colour_identify.c: 358:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  3077   011B8C  C09C  F004         	movff	card_response@buf,make_master_closeness@buf
  3078   011B90  C09D  F005         	movff	card_response@buf+1,make_master_closeness@buf+1
  3079   011B94  0E00               	movlw	low card_response@normalised_values
  3080   011B96  6E06               	movwf	make_master_closeness@normalised_values^0,c
  3081   011B98  0E01               	movlw	high card_response@normalised_values
  3082   011B9A  6E07               	movwf	(make_master_closeness@normalised_values+1)^0,c
  3083   011B9C  0E48               	movlw	low card_response@master_closeness
  3084   011B9E  6E08               	movwf	make_master_closeness@master_closeness^0,c
  3085   011BA0  0E01               	movlw	high card_response@master_closeness
  3086   011BA2  6E09               	movwf	(make_master_closeness@master_closeness+1)^0,c
  3087   011BA4  ECB2  F090         	call	_make_master_closeness	;wreg free
  3088   011BA8                     
  3089                           ;colour_identify.c: 360:     card = determine_card(master_closeness);
  3090   011BA8  0E48               	movlw	low card_response@master_closeness
  3091   011BAA  6E04               	movwf	determine_card@master_closeness^0,c
  3092   011BAC  0E01               	movlw	high card_response@master_closeness
  3093   011BAE  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  3094   011BB0  EC22  F093         	call	_determine_card	;wreg free
  3095   011BB4  0100               	movlb	0	; () banked
  3096   011BB6  6FA8               	movwf	card_response@card& (0+255),b
  3097   011BB8                     
  3098                           ; BSR set to: 0
  3099                           ;colour_identify.c: 361:     sprintf(buf, "CARD %d \n", card);
  3100   011BB8  C09C  F066         	movff	card_response@buf,sprintf@s
  3101   011BBC  C09D  F067         	movff	card_response@buf+1,sprintf@s+1
  3102   011BC0  0EF4               	movlw	low STR_12
  3103   011BC2  6F68               	movwf	sprintf@fmt& (0+255),b
  3104   011BC4  0EFF               	movlw	high STR_12
  3105   011BC6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3106   011BC8  C0A8  F06A         	movff	card_response@card,?_sprintf+4
  3107   011BCC  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  3108   011BCE  EC63  F094         	call	_sprintf	;wreg free
  3109   011BD2                     
  3110                           ;colour_identify.c: 362:     sendStringSerial4(buf);
  3111   011BD2  C09C  F005         	movff	card_response@buf,sendStringSerial4@string
  3112   011BD6  C09D  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3113   011BDA  ECCD  F095         	call	_sendStringSerial4	;wreg free
  3114   011BDE                     
  3115                           ;colour_identify.c: 364:     motor_response(buf, card, mL, mR, ReturnHomeTimes, ReturnHo
      +                          meCards, stop_all);
  3116   011BDE  C09C  F081         	movff	card_response@buf,motor_response@buf
  3117   011BE2  C09D  F082         	movff	card_response@buf+1,motor_response@buf+1
  3118   011BE6  C0A8  F083         	movff	card_response@card,motor_response@card
  3119   011BEA  C0A9  F084         	movff	card_response@mL,motor_response@mL
  3120   011BEE  C0AA  F085         	movff	card_response@mL+1,motor_response@mL+1
  3121   011BF2  C0AB  F086         	movff	card_response@mR,motor_response@mR
  3122   011BF6  C0AC  F087         	movff	card_response@mR+1,motor_response@mR+1
  3123   011BFA  C0AD  F088         	movff	card_response@ReturnHomeTimes,motor_response@ReturnHomeTimes
  3124   011BFE  C0AE  F089         	movff	card_response@ReturnHomeTimes+1,motor_response@ReturnHomeTimes+1
  3125   011C02  C0AF  F08A         	movff	card_response@ReturnHomeCards,motor_response@ReturnHomeCards
  3126   011C06  C0B0  F08B         	movff	card_response@ReturnHomeCards+1,motor_response@ReturnHomeCards+1
  3127   011C0A  C0B1  F08C         	movff	card_response@stop_all,motor_response@stop_all
  3128   011C0E  C0B2  F08D         	movff	card_response@stop_all+1,motor_response@stop_all+1
  3129   011C12  EC00  F080         	call	_motor_response	;wreg free
  3130   011C16                     
  3131                           ;colour_identify.c: 366:     return card;
  3132   011C16  0100               	movlb	0	; () banked
  3133   011C18  51A8               	movf	card_response@card& (0+255),w,b
  3134   011C1A                     
  3135                           ; BSR set to: 0
  3136   011C1A  0012               	return		;funcret
  3137   011C1C                     __end_of_card_response:
  3138                           	callstack 0
  3139                           
  3140 ;; *************** function _normalise_readings *****************
  3141 ;; Defined at:
  3142 ;;		line 70 in file "colour_identify.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  buf             2   25[COMRAM] PTR unsigned char 
  3145 ;;		 -> main@buf(150), 
  3146 ;;  clear_read      2   27[COMRAM] unsigned int 
  3147 ;;  red_read        2   29[COMRAM] unsigned int 
  3148 ;;  green_read      2   31[COMRAM] unsigned int 
  3149 ;;  blue_read       2   33[COMRAM] unsigned int 
  3150 ;;  expected_val    2   35[COMRAM] PTR unsigned int [9]
  3151 ;;		 -> main@expected_values(72), 
  3152 ;;  normalised_v    2   37[COMRAM] PTR unsigned int [9]
  3153 ;;		 -> card_response@normalised_values(72), 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  difference      2   47[COMRAM] unsigned int 
  3156 ;;  i               1   49[COMRAM] enum E14551
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3166 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3167 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3168 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3169 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3170 ;;Total ram usage:       25 bytes
  3171 ;; Hardware stack levels used: 1
  3172 ;; Hardware stack levels required when called: 2
  3173 ;; This function calls:
  3174 ;;		___lwdiv
  3175 ;;		___wmul
  3176 ;;		_abs
  3177 ;; This function is called by:
  3178 ;;		_card_response
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text8
  3183   011148                     __ptext8:
  3184                           	callstack 0
  3185   011148                     _normalise_readings:
  3186                           	callstack 27
  3187   011148                     
  3188                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  3189   011148  0E00               	movlw	0
  3190   01114A  6E32               	movwf	normalise_readings@i^0,c
  3191   01114C                     l4447:
  3192                           
  3193                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3194   01114C  5032               	movf	normalise_readings@i^0,w,c
  3195   01114E  0D02               	mullw	2
  3196   011150  CFF3 F028          	movff	prodl,??_normalise_readings
  3197   011154  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3198   011158  5028               	movf	??_normalise_readings^0,w,c
  3199   01115A  2424               	addwf	normalise_readings@expected_values^0,w,c
  3200   01115C  6ED9               	movwf	fsr2l,c
  3201   01115E  5029               	movf	(??_normalise_readings+1)^0,w,c
  3202   011160  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3203   011162  6EDA               	movwf	fsr2h,c
  3204   011164  CFDE F02A          	movff	postinc2,??_normalise_readings+2
  3205   011168  CFDD F02B          	movff	postdec2,??_normalise_readings+3
  3206   01116C  502A               	movf	(??_normalise_readings+2)^0,w,c
  3207   01116E  5C1E               	subwf	normalise_readings@red_read^0,w,c
  3208   011170  6E16               	movwf	abs@a^0,c
  3209   011172  502B               	movf	(??_normalise_readings+3)^0,w,c
  3210   011174  581F               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3211   011176  6E17               	movwf	(abs@a+1)^0,c
  3212   011178  EC93  F095         	call	_abs	;wreg free
  3213   01117C  C016  F030         	movff	?_abs,normalise_readings@difference
  3214   011180  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3215                           
  3216                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3217   011184  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3218   011188  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3219   01118C  0E00               	movlw	0
  3220   01118E  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3221   011190  0E64               	movlw	100
  3222   011192  6E06               	movwf	___wmul@multiplicand^0,c
  3223   011194  EC38  F096         	call	___wmul	;wreg free
  3224   011198  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3225   01119C  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3226   0111A0  5032               	movf	normalise_readings@i^0,w,c
  3227   0111A2  0D02               	mullw	2
  3228   0111A4  CFF3 F028          	movff	prodl,??_normalise_readings
  3229   0111A8  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3230   0111AC  5028               	movf	??_normalise_readings^0,w,c
  3231   0111AE  2424               	addwf	normalise_readings@expected_values^0,w,c
  3232   0111B0  6ED9               	movwf	fsr2l,c
  3233   0111B2  5029               	movf	(??_normalise_readings+1)^0,w,c
  3234   0111B4  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3235   0111B6  6EDA               	movwf	fsr2h,c
  3236   0111B8  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3237   0111BC  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3238   0111C0  EC9F  F093         	call	___lwdiv	;wreg free
  3239   0111C4  5032               	movf	normalise_readings@i^0,w,c
  3240   0111C6  0D02               	mullw	2
  3241   0111C8  CFF3 F02A          	movff	prodl,??_normalise_readings+2
  3242   0111CC  CFF4 F02B          	movff	prodh,??_normalise_readings+3
  3243   0111D0  502A               	movf	(??_normalise_readings+2)^0,w,c
  3244   0111D2  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3245   0111D4  6ED9               	movwf	fsr2l,c
  3246   0111D6  502B               	movf	(??_normalise_readings+3)^0,w,c
  3247   0111D8  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3248   0111DA  6EDA               	movwf	fsr2h,c
  3249   0111DC  C00A  FFDE         	movff	?___lwdiv,postinc2
  3250   0111E0  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3251                           
  3252                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3253   0111E4  5032               	movf	normalise_readings@i^0,w,c
  3254   0111E6  0D02               	mullw	2
  3255   0111E8  CFF3 F028          	movff	prodl,??_normalise_readings
  3256   0111EC  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3257   0111F0  5028               	movf	??_normalise_readings^0,w,c
  3258   0111F2  2424               	addwf	normalise_readings@expected_values^0,w,c
  3259   0111F4  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3260   0111F6  5029               	movf	(??_normalise_readings+1)^0,w,c
  3261   0111F8  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3262   0111FA  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3263   0111FC  0E12               	movlw	18
  3264   0111FE  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3265   011200  6ED9               	movwf	fsr2l,c
  3266   011202  0E00               	movlw	0
  3267   011204  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3268   011206  6EDA               	movwf	fsr2h,c
  3269   011208  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3270   01120C  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3271   011210  502C               	movf	(??_normalise_readings+4)^0,w,c
  3272   011212  5C20               	subwf	normalise_readings@green_read^0,w,c
  3273   011214  6E16               	movwf	abs@a^0,c
  3274   011216  502D               	movf	(??_normalise_readings+5)^0,w,c
  3275   011218  5821               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3276   01121A  6E17               	movwf	(abs@a+1)^0,c
  3277   01121C  EC93  F095         	call	_abs	;wreg free
  3278   011220  C016  F030         	movff	?_abs,normalise_readings@difference
  3279   011224  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3280                           
  3281                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3282   011228  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3283   01122C  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3284   011230  0E00               	movlw	0
  3285   011232  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3286   011234  0E64               	movlw	100
  3287   011236  6E06               	movwf	___wmul@multiplicand^0,c
  3288   011238  EC38  F096         	call	___wmul	;wreg free
  3289   01123C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3290   011240  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3291   011244  5032               	movf	normalise_readings@i^0,w,c
  3292   011246  0D02               	mullw	2
  3293   011248  CFF3 F028          	movff	prodl,??_normalise_readings
  3294   01124C  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3295   011250  5028               	movf	??_normalise_readings^0,w,c
  3296   011252  2424               	addwf	normalise_readings@expected_values^0,w,c
  3297   011254  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3298   011256  5029               	movf	(??_normalise_readings+1)^0,w,c
  3299   011258  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3300   01125A  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3301   01125C  0E12               	movlw	18
  3302   01125E  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3303   011260  6ED9               	movwf	fsr2l,c
  3304   011262  0E00               	movlw	0
  3305   011264  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3306   011266  6EDA               	movwf	fsr2h,c
  3307   011268  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3308   01126C  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3309   011270  EC9F  F093         	call	___lwdiv	;wreg free
  3310   011274  5032               	movf	normalise_readings@i^0,w,c
  3311   011276  0D02               	mullw	2
  3312   011278  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3313   01127C  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3314   011280  502C               	movf	(??_normalise_readings+4)^0,w,c
  3315   011282  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3316   011284  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3317   011286  502D               	movf	(??_normalise_readings+5)^0,w,c
  3318   011288  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3319   01128A  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3320   01128C  0E12               	movlw	18
  3321   01128E  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3322   011290  6ED9               	movwf	fsr2l,c
  3323   011292  0E00               	movlw	0
  3324   011294  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3325   011296  6EDA               	movwf	fsr2h,c
  3326   011298  C00A  FFDE         	movff	?___lwdiv,postinc2
  3327   01129C  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3328                           
  3329                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  3330   0112A0  5032               	movf	normalise_readings@i^0,w,c
  3331   0112A2  0D02               	mullw	2
  3332   0112A4  CFF3 F028          	movff	prodl,??_normalise_readings
  3333   0112A8  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3334   0112AC  5028               	movf	??_normalise_readings^0,w,c
  3335   0112AE  2424               	addwf	normalise_readings@expected_values^0,w,c
  3336   0112B0  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3337   0112B2  5029               	movf	(??_normalise_readings+1)^0,w,c
  3338   0112B4  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3339   0112B6  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3340   0112B8  0E24               	movlw	36
  3341   0112BA  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3342   0112BC  6ED9               	movwf	fsr2l,c
  3343   0112BE  0E00               	movlw	0
  3344   0112C0  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3345   0112C2  6EDA               	movwf	fsr2h,c
  3346   0112C4  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3347   0112C8  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3348   0112CC  502C               	movf	(??_normalise_readings+4)^0,w,c
  3349   0112CE  5C22               	subwf	normalise_readings@blue_read^0,w,c
  3350   0112D0  6E16               	movwf	abs@a^0,c
  3351   0112D2  502D               	movf	(??_normalise_readings+5)^0,w,c
  3352   0112D4  5823               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3353   0112D6  6E17               	movwf	(abs@a+1)^0,c
  3354   0112D8  EC93  F095         	call	_abs	;wreg free
  3355   0112DC  C016  F030         	movff	?_abs,normalise_readings@difference
  3356   0112E0  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3357                           
  3358                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3359   0112E4  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3360   0112E8  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3361   0112EC  0E00               	movlw	0
  3362   0112EE  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3363   0112F0  0E64               	movlw	100
  3364   0112F2  6E06               	movwf	___wmul@multiplicand^0,c
  3365   0112F4  EC38  F096         	call	___wmul	;wreg free
  3366   0112F8  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3367   0112FC  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3368   011300  5032               	movf	normalise_readings@i^0,w,c
  3369   011302  0D02               	mullw	2
  3370   011304  CFF3 F028          	movff	prodl,??_normalise_readings
  3371   011308  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3372   01130C  5028               	movf	??_normalise_readings^0,w,c
  3373   01130E  2424               	addwf	normalise_readings@expected_values^0,w,c
  3374   011310  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3375   011312  5029               	movf	(??_normalise_readings+1)^0,w,c
  3376   011314  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3377   011316  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3378   011318  0E24               	movlw	36
  3379   01131A  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3380   01131C  6ED9               	movwf	fsr2l,c
  3381   01131E  0E00               	movlw	0
  3382   011320  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3383   011322  6EDA               	movwf	fsr2h,c
  3384   011324  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3385   011328  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3386   01132C  EC9F  F093         	call	___lwdiv	;wreg free
  3387   011330  5032               	movf	normalise_readings@i^0,w,c
  3388   011332  0D02               	mullw	2
  3389   011334  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3390   011338  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3391   01133C  502C               	movf	(??_normalise_readings+4)^0,w,c
  3392   01133E  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3393   011340  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3394   011342  502D               	movf	(??_normalise_readings+5)^0,w,c
  3395   011344  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3396   011346  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3397   011348  0E24               	movlw	36
  3398   01134A  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3399   01134C  6ED9               	movwf	fsr2l,c
  3400   01134E  0E00               	movlw	0
  3401   011350  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3402   011352  6EDA               	movwf	fsr2h,c
  3403   011354  C00A  FFDE         	movff	?___lwdiv,postinc2
  3404   011358  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3405                           
  3406                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  3407   01135C  5032               	movf	normalise_readings@i^0,w,c
  3408   01135E  0D02               	mullw	2
  3409   011360  CFF3 F028          	movff	prodl,??_normalise_readings
  3410   011364  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3411   011368  5028               	movf	??_normalise_readings^0,w,c
  3412   01136A  2424               	addwf	normalise_readings@expected_values^0,w,c
  3413   01136C  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3414   01136E  5029               	movf	(??_normalise_readings+1)^0,w,c
  3415   011370  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3416   011372  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3417   011374  0E36               	movlw	54
  3418   011376  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3419   011378  6ED9               	movwf	fsr2l,c
  3420   01137A  0E00               	movlw	0
  3421   01137C  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3422   01137E  6EDA               	movwf	fsr2h,c
  3423   011380  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3424   011384  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3425   011388  502C               	movf	(??_normalise_readings+4)^0,w,c
  3426   01138A  5C1C               	subwf	normalise_readings@clear_read^0,w,c
  3427   01138C  6E16               	movwf	abs@a^0,c
  3428   01138E  502D               	movf	(??_normalise_readings+5)^0,w,c
  3429   011390  581D               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3430   011392  6E17               	movwf	(abs@a+1)^0,c
  3431   011394  EC93  F095         	call	_abs	;wreg free
  3432   011398  C016  F030         	movff	?_abs,normalise_readings@difference
  3433   01139C  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3434                           
  3435                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  3436   0113A0  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3437   0113A4  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3438   0113A8  0E00               	movlw	0
  3439   0113AA  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3440   0113AC  0E64               	movlw	100
  3441   0113AE  6E06               	movwf	___wmul@multiplicand^0,c
  3442   0113B0  EC38  F096         	call	___wmul	;wreg free
  3443   0113B4  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3444   0113B8  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3445   0113BC  5032               	movf	normalise_readings@i^0,w,c
  3446   0113BE  0D02               	mullw	2
  3447   0113C0  CFF3 F028          	movff	prodl,??_normalise_readings
  3448   0113C4  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3449   0113C8  5028               	movf	??_normalise_readings^0,w,c
  3450   0113CA  2424               	addwf	normalise_readings@expected_values^0,w,c
  3451   0113CC  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3452   0113CE  5029               	movf	(??_normalise_readings+1)^0,w,c
  3453   0113D0  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3454   0113D2  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3455   0113D4  0E36               	movlw	54
  3456   0113D6  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3457   0113D8  6ED9               	movwf	fsr2l,c
  3458   0113DA  0E00               	movlw	0
  3459   0113DC  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3460   0113DE  6EDA               	movwf	fsr2h,c
  3461   0113E0  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3462   0113E4  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3463   0113E8  EC9F  F093         	call	___lwdiv	;wreg free
  3464   0113EC  5032               	movf	normalise_readings@i^0,w,c
  3465   0113EE  0D02               	mullw	2
  3466   0113F0  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3467   0113F4  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3468   0113F8  502C               	movf	(??_normalise_readings+4)^0,w,c
  3469   0113FA  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3470   0113FC  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3471   0113FE  502D               	movf	(??_normalise_readings+5)^0,w,c
  3472   011400  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3473   011402  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3474   011404  0E36               	movlw	54
  3475   011406  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3476   011408  6ED9               	movwf	fsr2l,c
  3477   01140A  0E00               	movlw	0
  3478   01140C  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3479   01140E  6EDA               	movwf	fsr2h,c
  3480   011410  C00A  FFDE         	movff	?___lwdiv,postinc2
  3481   011414  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3482   011418                     
  3483                           ;colour_identify.c: 97:     }
  3484   011418  2A32               	incf	normalise_readings@i^0,f,c
  3485   01141A  0E08               	movlw	8
  3486   01141C  6432               	cpfsgt	normalise_readings@i^0,c
  3487   01141E  EF13  F08A         	goto	u2441
  3488   011422  EF15  F08A         	goto	u2440
  3489   011426                     u2441:
  3490   011426  EFA6  F088         	goto	l4447
  3491   01142A                     u2440:
  3492   01142A  0012               	return		;funcret
  3493   01142C                     __end_of_normalise_readings:
  3494                           	callstack 0
  3495                           
  3496 ;; *************** function _motor_response *****************
  3497 ;; Defined at:
  3498 ;;		line 125 in file "colour_identify.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  3501 ;;		 -> main@buf(150), 
  3502 ;;  card            1   35[BANK0 ] enum E14551
  3503 ;;  mL              2   36[BANK0 ] PTR struct DC_motor
  3504 ;;		 -> main@motorL(9), 
  3505 ;;  mR              2   38[BANK0 ] PTR struct DC_motor
  3506 ;;		 -> main@motorR(9), 
  3507 ;;  ReturnHomeTi    2   40[BANK0 ] PTR unsigned int 
  3508 ;;		 -> main@ReturnHomeTimes(60), 
  3509 ;;  ReturnHomeCa    2   42[BANK0 ] PTR enum E14551
  3510 ;;		 -> main@ReturnHomeCards(30), 
  3511 ;;  stop_all        2   44[BANK0 ] PTR unsigned int 
  3512 ;;		 -> main@stop_all(2), 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  j               2   52[BANK0 ] int 
  3515 ;;  j               2   54[BANK0 ] int 
  3516 ;;  i               2   58[BANK0 ] int 
  3517 ;;  k               2   56[BANK0 ] int 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      void 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3527 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3528 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3529 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3530 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3531 ;;Total ram usage:       27 bytes
  3532 ;; Hardware stack levels used: 1
  3533 ;; Hardware stack levels required when called: 9
  3534 ;; This function calls:
  3535 ;;		_fullSpeedAhead
  3536 ;;		_home_response
  3537 ;;		_reverseFullSpeed
  3538 ;;		_sendStringSerial4
  3539 ;;		_sprintf
  3540 ;;		_stop
  3541 ;;		_turnLeft45
  3542 ;;		_turnRight45
  3543 ;; This function is called by:
  3544 ;;		_card_response
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text9
  3549   010000                     __ptext9:
  3550                           	callstack 0
  3551   010000                     _motor_response:
  3552                           	callstack 20
  3553   010000                     
  3554                           ;colour_identify.c: 130:     switch (card){
  3555   010000  EF50  F083         	goto	l4695
  3556   010004                     l4491:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  3560   010004  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3561   010008  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3562   01000C  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3563   010010  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3564   010014  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3565   010018                     
  3566                           ;colour_identify.c: 133:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3567   010018  0E19               	movlw	25
  3568   01001A  0100               	movlb	0	; () banked
  3569   01001C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3570   01001E  0E5A               	movlw	90
  3571   010020  6F8E               	movwf	??_motor_response& (0+255),b
  3572   010022  0EB1               	movlw	177
  3573   010024                     u2827:
  3574   010024  2EE8               	decfsz	wreg,f,c
  3575   010026  D7FE               	bra	u2827
  3576   010028  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3577   01002A  D7FC               	bra	u2827
  3578   01002C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3579   01002E  D7FA               	bra	u2827
  3580   010030  D000               	nop2	
  3581   010032                     l4495:
  3582                           
  3583                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  3584   010032  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3585   010036  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3586   01003A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3587   01003E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3588   010042  EC9D  F091         	call	_turnRight45	;wreg free
  3589   010046                     
  3590                           ;colour_identify.c: 135:             stop(mL,mR);
  3591   010046  C084  F017         	movff	motor_response@mL,stop@mL
  3592   01004A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3593   01004E  C086  F019         	movff	motor_response@mR,stop@mR
  3594   010052  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3595   010056  EC0B  F094         	call	_stop	;wreg free
  3596   01005A                     
  3597                           ;colour_identify.c: 136:             turnRight45(mL,mR);
  3598   01005A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3599   01005E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3600   010062  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3601   010066  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3602   01006A  EC9D  F091         	call	_turnRight45	;wreg free
  3603   01006E                     l4501:
  3604                           
  3605                           ;colour_identify.c: 137:             stop(mL,mR);
  3606   01006E  C084  F017         	movff	motor_response@mL,stop@mL
  3607   010072  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3608   010076  C086  F019         	movff	motor_response@mR,stop@mR
  3609   01007A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3610   01007E  EC0B  F094         	call	_stop	;wreg free
  3611                           
  3612                           ;colour_identify.c: 138:             break;
  3613   010082  EF82  F083         	goto	l389
  3614   010086                     l4503:
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  3618   010086  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3619   01008A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3620   01008E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3621   010092  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3622   010096  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3623   01009A                     
  3624                           ;colour_identify.c: 141:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3625   01009A  0E19               	movlw	25
  3626   01009C  0100               	movlb	0	; () banked
  3627   01009E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3628   0100A0  0E5A               	movlw	90
  3629   0100A2  6F8E               	movwf	??_motor_response& (0+255),b
  3630   0100A4  0EB1               	movlw	177
  3631   0100A6                     u2837:
  3632   0100A6  2EE8               	decfsz	wreg,f,c
  3633   0100A8  D7FE               	bra	u2837
  3634   0100AA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3635   0100AC  D7FC               	bra	u2837
  3636   0100AE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3637   0100B0  D7FA               	bra	u2837
  3638   0100B2  D000               	nop2	
  3639   0100B4                     l4507:
  3640                           
  3641                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  3642   0100B4  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3643   0100B8  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3644   0100BC  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3645   0100C0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3646   0100C4  ECF4  F091         	call	_turnLeft45	;wreg free
  3647   0100C8                     
  3648                           ;colour_identify.c: 143:             stop(mL,mR);
  3649   0100C8  C084  F017         	movff	motor_response@mL,stop@mL
  3650   0100CC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3651   0100D0  C086  F019         	movff	motor_response@mR,stop@mR
  3652   0100D4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3653   0100D8  EC0B  F094         	call	_stop	;wreg free
  3654   0100DC                     
  3655                           ;colour_identify.c: 144:             turnLeft45(mL,mR);
  3656   0100DC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3657   0100E0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3658   0100E4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3659   0100E8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3660   0100EC  ECF4  F091         	call	_turnLeft45	;wreg free
  3661   0100F0  EF37  F080         	goto	l4501
  3662   0100F4                     l4515:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  3666   0100F4  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3667   0100F8  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3668   0100FC  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3669   010100  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3670   010104  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3671   010108                     
  3672                           ;colour_identify.c: 149:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3673   010108  0E19               	movlw	25
  3674   01010A  0100               	movlb	0	; () banked
  3675   01010C  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3676   01010E  0E5A               	movlw	90
  3677   010110  6F8E               	movwf	??_motor_response& (0+255),b
  3678   010112  0EB1               	movlw	177
  3679   010114                     u2847:
  3680   010114  2EE8               	decfsz	wreg,f,c
  3681   010116  D7FE               	bra	u2847
  3682   010118  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3683   01011A  D7FC               	bra	u2847
  3684   01011C  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3685   01011E  D7FA               	bra	u2847
  3686   010120  D000               	nop2	
  3687   010122                     
  3688                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  3689   010122  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3690   010126  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3691   01012A  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3692   01012E  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3693   010132  EC9D  F091         	call	_turnRight45	;wreg free
  3694   010136                     
  3695                           ;colour_identify.c: 151:             stop(mL,mR);
  3696   010136  C084  F017         	movff	motor_response@mL,stop@mL
  3697   01013A  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3698   01013E  C086  F019         	movff	motor_response@mR,stop@mR
  3699   010142  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3700   010146  EC0B  F094         	call	_stop	;wreg free
  3701   01014A                     l4523:
  3702                           
  3703                           ;colour_identify.c: 152:             turnRight45(mL,mR);
  3704   01014A  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3705   01014E  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3706   010152  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3707   010156  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3708   01015A  EC9D  F091         	call	_turnRight45	;wreg free
  3709   01015E                     l4525:
  3710                           
  3711                           ;colour_identify.c: 153:             stop(mL,mR);
  3712   01015E  C084  F017         	movff	motor_response@mL,stop@mL
  3713   010162  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3714   010166  C086  F019         	movff	motor_response@mR,stop@mR
  3715   01016A  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3716   01016E  EC0B  F094         	call	_stop	;wreg free
  3717   010172  EF19  F080         	goto	l4495
  3718   010176                     l4535:
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  3722   010176  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3723   01017A  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3724   01017E  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3725   010182  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3726   010186  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3727   01018A                     
  3728                           ;colour_identify.c: 162:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  3729   01018A  0E8A               	movlw	138
  3730   01018C  0100               	movlb	0	; () banked
  3731   01018E  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3732   010190  0EFD               	movlw	253
  3733   010192  6F8E               	movwf	??_motor_response& (0+255),b
  3734   010194  0E4F               	movlw	79
  3735   010196                     u2857:
  3736   010196  2EE8               	decfsz	wreg,f,c
  3737   010198  D7FE               	bra	u2857
  3738   01019A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3739   01019C  D7FC               	bra	u2857
  3740   01019E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3741   0101A0  D7FA               	bra	u2857
  3742   0101A2  EFAF  F080         	goto	l4525
  3743   0101A6                     l4549:
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;colour_identify.c: 170:             reverseFullSpeed(mL,mR);
  3747   0101A6  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3748   0101AA  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3749   0101AE  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3750   0101B2  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3751   0101B6  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3752   0101BA                     
  3753                           ;colour_identify.c: 172:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  3754   0101BA  0E8A               	movlw	138
  3755   0101BC  0100               	movlb	0	; () banked
  3756   0101BE  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3757   0101C0  0EFD               	movlw	253
  3758   0101C2  6F8E               	movwf	??_motor_response& (0+255),b
  3759   0101C4  0E4F               	movlw	79
  3760   0101C6                     u2867:
  3761   0101C6  2EE8               	decfsz	wreg,f,c
  3762   0101C8  D7FE               	bra	u2867
  3763   0101CA  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3764   0101CC  D7FC               	bra	u2867
  3765   0101CE  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3766   0101D0  D7FA               	bra	u2867
  3767   0101D2                     l4553:
  3768                           
  3769                           ;colour_identify.c: 173:             stop(mL,mR);
  3770   0101D2  C084  F017         	movff	motor_response@mL,stop@mL
  3771   0101D6  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3772   0101DA  C086  F019         	movff	motor_response@mR,stop@mR
  3773   0101DE  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3774   0101E2  EC0B  F094         	call	_stop	;wreg free
  3775   0101E6  EF5A  F080         	goto	l4507
  3776   0101EA                     l4563:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;colour_identify.c: 180:             reverseFullSpeed(mL,mR);
  3780   0101EA  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3781   0101EE  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3782   0101F2  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3783   0101F6  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3784   0101FA  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3785   0101FE                     
  3786                           ;colour_identify.c: 181:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3787   0101FE  0E19               	movlw	25
  3788   010200  0100               	movlb	0	; () banked
  3789   010202  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3790   010204  0E5A               	movlw	90
  3791   010206  6F8E               	movwf	??_motor_response& (0+255),b
  3792   010208  0EB1               	movlw	177
  3793   01020A                     u2877:
  3794   01020A  2EE8               	decfsz	wreg,f,c
  3795   01020C  D7FE               	bra	u2877
  3796   01020E  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3797   010210  D7FC               	bra	u2877
  3798   010212  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3799   010214  D7FA               	bra	u2877
  3800   010216  D000               	nop2	
  3801   010218  EFA5  F080         	goto	l4523
  3802   01021C                     l4579:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;colour_identify.c: 190:             reverseFullSpeed(mL,mR);
  3806   01021C  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3807   010220  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3808   010224  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3809   010228  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3810   01022C  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3811   010230                     
  3812                           ;colour_identify.c: 191:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3813   010230  0E19               	movlw	25
  3814   010232  0100               	movlb	0	; () banked
  3815   010234  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3816   010236  0E5A               	movlw	90
  3817   010238  6F8E               	movwf	??_motor_response& (0+255),b
  3818   01023A  0EB1               	movlw	177
  3819   01023C                     u2887:
  3820   01023C  2EE8               	decfsz	wreg,f,c
  3821   01023E  D7FE               	bra	u2887
  3822   010240  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3823   010242  D7FC               	bra	u2887
  3824   010244  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3825   010246  D7FA               	bra	u2887
  3826   010248  D000               	nop2	
  3827   01024A                     
  3828                           ;colour_identify.c: 192:             turnLeft45(mL,mR);
  3829   01024A  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3830   01024E  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3831   010252  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3832   010256  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3833   01025A  ECF4  F091         	call	_turnLeft45	;wreg free
  3834   01025E  EFE9  F080         	goto	l4553
  3835   010262                     l4595:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;colour_identify.c: 201:             reverseFullSpeed(mL,mR);
  3839   010262  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3840   010266  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3841   01026A  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3842   01026E  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3843   010272  EC98  F092         	call	_reverseFullSpeed	;wreg free
  3844   010276                     
  3845                           ;colour_identify.c: 202:             _delay((unsigned long)((300)*(64000000/4000.0)));
  3846   010276  0E19               	movlw	25
  3847   010278  0100               	movlb	0	; () banked
  3848   01027A  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3849   01027C  0E5A               	movlw	90
  3850   01027E  6F8E               	movwf	??_motor_response& (0+255),b
  3851   010280  0EB1               	movlw	177
  3852   010282                     u2897:
  3853   010282  2EE8               	decfsz	wreg,f,c
  3854   010284  D7FE               	bra	u2897
  3855   010286  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3856   010288  D7FC               	bra	u2897
  3857   01028A  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3858   01028C  D7FA               	bra	u2897
  3859   01028E  D000               	nop2	
  3860   010290                     
  3861                           ;colour_identify.c: 203:             stop(mL,mR);
  3862   010290  C084  F017         	movff	motor_response@mL,stop@mL
  3863   010294  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3864   010298  C086  F019         	movff	motor_response@mR,stop@mR
  3865   01029C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3866   0102A0  EC0B  F094         	call	_stop	;wreg free
  3867   0102A4                     
  3868                           ;colour_identify.c: 204:             turnLeft45(mL,mR);
  3869   0102A4  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3870   0102A8  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3871   0102AC  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3872   0102B0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3873   0102B4  ECF4  F091         	call	_turnLeft45	;wreg free
  3874   0102B8                     
  3875                           ;colour_identify.c: 205:             stop(mL,mR);
  3876   0102B8  C084  F017         	movff	motor_response@mL,stop@mL
  3877   0102BC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3878   0102C0  C086  F019         	movff	motor_response@mR,stop@mR
  3879   0102C4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3880   0102C8  EC0B  F094         	call	_stop	;wreg free
  3881   0102CC                     
  3882                           ;colour_identify.c: 206:             turnLeft45(mL,mR);
  3883   0102CC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3884   0102D0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3885   0102D4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3886   0102D8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3887   0102DC  ECF4  F091         	call	_turnLeft45	;wreg free
  3888   0102E0                     
  3889                           ;colour_identify.c: 207:             stop(mL,mR);
  3890   0102E0  C084  F017         	movff	motor_response@mL,stop@mL
  3891   0102E4  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3892   0102E8  C086  F019         	movff	motor_response@mR,stop@mR
  3893   0102EC  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3894   0102F0  EC0B  F094         	call	_stop	;wreg free
  3895                           
  3896                           ;colour_identify.c: 208:             _delay((unsigned long)((100)*(64000000/4000.0)));
  3897   0102F4  0E09               	movlw	9
  3898   0102F6  0100               	movlb	0	; () banked
  3899   0102F8  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  3900   0102FA  0E1E               	movlw	30
  3901   0102FC  6F8E               	movwf	??_motor_response& (0+255),b
  3902   0102FE  0EE4               	movlw	228
  3903   010300                     u2907:
  3904   010300  2EE8               	decfsz	wreg,f,c
  3905   010302  D7FE               	bra	u2907
  3906   010304  2F8E               	decfsz	??_motor_response& (0+255),f,b
  3907   010306  D7FC               	bra	u2907
  3908   010308  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  3909   01030A  D7FA               	bra	u2907
  3910   01030C  F000               	nop	
  3911   01030E                     
  3912                           ;colour_identify.c: 209:             turnLeft45(mL,mR);
  3913   01030E  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3914   010312  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3915   010316  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3916   01031A  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3917   01031E  ECF4  F091         	call	_turnLeft45	;wreg free
  3918   010322                     
  3919                           ;colour_identify.c: 210:             stop(mL,mR);
  3920   010322  C084  F017         	movff	motor_response@mL,stop@mL
  3921   010326  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3922   01032A  C086  F019         	movff	motor_response@mR,stop@mR
  3923   01032E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3924   010332  EC0B  F094         	call	_stop	;wreg free
  3925   010336                     
  3926                           ;colour_identify.c: 211:             turnLeft45(mL,mR);
  3927   010336  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3928   01033A  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3929   01033E  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3930   010342  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3931   010346  ECF4  F091         	call	_turnLeft45	;wreg free
  3932   01034A                     
  3933                           ;colour_identify.c: 212:             stop(mL,mR);
  3934   01034A  C084  F017         	movff	motor_response@mL,stop@mL
  3935   01034E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3936   010352  C086  F019         	movff	motor_response@mR,stop@mR
  3937   010356  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3938   01035A  EC0B  F094         	call	_stop	;wreg free
  3939   01035E                     
  3940                           ;colour_identify.c: 213:             for(int k = 0; k<= 5; k++){
  3941   01035E  0E00               	movlw	0
  3942   010360  0100               	movlb	0	; () banked
  3943   010362  6F99               	movwf	(motor_response@k+1)& (0+255),b
  3944   010364  0E00               	movlw	0
  3945   010366  6F98               	movwf	motor_response@k& (0+255),b
  3946   010368                     l4623:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;colour_identify.c: 214:                 sprintf(buf, "Timercount %d, time %d  \n", k, R
      +                          eturnHomeTimes[k]);
  3950   010368  C081  F066         	movff	motor_response@buf,sprintf@s
  3951   01036C  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3952   010370  0E82               	movlw	low STR_6
  3953   010372  6F68               	movwf	sprintf@fmt& (0+255),b
  3954   010374  0EFF               	movlw	high STR_6
  3955   010376  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3956   010378  C098  F06A         	movff	motor_response@k,?_sprintf+4
  3957   01037C  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  3958   010380  90D8               	bcf	status,0,c
  3959   010382  3598               	rlcf	motor_response@k& (0+255),w,b
  3960   010384  6ED9               	movwf	fsr2l,c
  3961   010386  3599               	rlcf	(motor_response@k+1)& (0+255),w,b
  3962   010388  6EDA               	movwf	fsr2h,c
  3963   01038A  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  3964   01038C  26D9               	addwf	fsr2l,f,c
  3965   01038E  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  3966   010390  22DA               	addwfc	fsr2h,f,c
  3967   010392  CFDE F06C          	movff	postinc2,?_sprintf+6
  3968   010396  CFDD F06D          	movff	postdec2,?_sprintf+7
  3969   01039A  EC63  F094         	call	_sprintf	;wreg free
  3970   01039E                     
  3971                           ;colour_identify.c: 215:                 sendStringSerial4(buf);
  3972   01039E  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  3973   0103A2  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  3974   0103A6  ECCD  F095         	call	_sendStringSerial4	;wreg free
  3975   0103AA                     
  3976                           ;colour_identify.c: 216:                 sprintf(buf, "Cardcount %d, card %d  \n", k, Re
      +                          turnHomeCards[k]);
  3977   0103AA  C081  F066         	movff	motor_response@buf,sprintf@s
  3978   0103AE  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3979   0103B2  0E9C               	movlw	low STR_7
  3980   0103B4  0100               	movlb	0	; () banked
  3981   0103B6  6F68               	movwf	sprintf@fmt& (0+255),b
  3982   0103B8  0EFF               	movlw	high STR_7
  3983   0103BA  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3984   0103BC  C098  F06A         	movff	motor_response@k,?_sprintf+4
  3985   0103C0  C099  F06B         	movff	motor_response@k+1,?_sprintf+5
  3986   0103C4  5198               	movf	motor_response@k& (0+255),w,b
  3987   0103C6  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  3988   0103C8  6ED9               	movwf	fsr2l,c
  3989   0103CA  5199               	movf	(motor_response@k+1)& (0+255),w,b
  3990   0103CC  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  3991   0103CE  6EDA               	movwf	fsr2h,c
  3992   0103D0  50DF               	movf	indf2,w,c
  3993   0103D2  6F8E               	movwf	??_motor_response& (0+255),b
  3994   0103D4  518E               	movf	??_motor_response& (0+255),w,b
  3995   0103D6  6F6C               	movwf	(?_sprintf+6)& (0+255),b
  3996   0103D8  6B6D               	clrf	(?_sprintf+7)& (0+255),b
  3997   0103DA  EC63  F094         	call	_sprintf	;wreg free
  3998                           
  3999                           ;colour_identify.c: 217:                 sendStringSerial4(buf);
  4000   0103DE  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4001   0103E2  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4002   0103E6  ECCD  F095         	call	_sendStringSerial4	;wreg free
  4003   0103EA                     
  4004                           ;colour_identify.c: 219:             }
  4005   0103EA  0100               	movlb	0	; () banked
  4006   0103EC  4B98               	infsnz	motor_response@k& (0+255),f,b
  4007   0103EE  2B99               	incf	(motor_response@k+1)& (0+255),f,b
  4008   0103F0                     
  4009                           ; BSR set to: 0
  4010   0103F0  BF99               	btfsc	(motor_response@k+1)& (0+255),7,b
  4011   0103F2  EF04  F082         	goto	u2481
  4012   0103F6  5199               	movf	(motor_response@k+1)& (0+255),w,b
  4013   0103F8  E109               	bnz	u2480
  4014   0103FA  0E06               	movlw	6
  4015   0103FC  5D98               	subwf	motor_response@k& (0+255),w,b
  4016   0103FE  A0D8               	btfss	status,0,c
  4017   010400  EF04  F082         	goto	u2481
  4018   010404  EF06  F082         	goto	u2480
  4019   010408                     u2481:
  4020   010408  EFB4  F081         	goto	l4623
  4021   01040C                     u2480:
  4022   01040C                     
  4023                           ; BSR set to: 0
  4024                           ;colour_identify.c: 220:             for(int i = 28; i >= 0; i--){
  4025   01040C  0E00               	movlw	0
  4026   01040E  6F9B               	movwf	(motor_response@i+1)& (0+255),b
  4027   010410  0E1C               	movlw	28
  4028   010412  6F9A               	movwf	motor_response@i& (0+255),b
  4029   010414                     l4635:
  4030                           
  4031                           ; BSR set to: 0
  4032   010414  BF9B               	btfsc	(motor_response@i+1)& (0+255),7,b
  4033   010416  EF11  F082         	goto	u2490
  4034   01041A  EF0F  F082         	goto	u2491
  4035   01041E                     u2491:
  4036   01041E  EF13  F082         	goto	l4639
  4037   010422                     u2490:
  4038   010422  EFD4  F082         	goto	l4667
  4039   010426                     l4639:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;colour_identify.c: 221:                 if (ReturnHomeTimes[i+1] != 0){
  4043   010426  C09A  F08E         	movff	motor_response@i,??_motor_response
  4044   01042A  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4045   01042E  90D8               	bcf	status,0,c
  4046   010430  378E               	rlcf	??_motor_response& (0+255),f,b
  4047   010432  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4048   010434  518E               	movf	??_motor_response& (0+255),w,b
  4049   010436  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4050   010438  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4051   01043A  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4052   01043C  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4053   01043E  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4054   010440  0E02               	movlw	2
  4055   010442  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4056   010444  6ED9               	movwf	fsr2l,c
  4057   010446  0E00               	movlw	0
  4058   010448  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4059   01044A  6EDA               	movwf	fsr2h,c
  4060   01044C  50DE               	movf	postinc2,w,c
  4061   01044E  10DE               	iorwf	postinc2,w,c
  4062   010450  B4D8               	btfsc	status,2,c
  4063   010452  EF2D  F082         	goto	u2501
  4064   010456  EF2F  F082         	goto	u2500
  4065   01045A                     u2501:
  4066   01045A  EFCE  F082         	goto	l4663
  4067   01045E                     u2500:
  4068   01045E                     
  4069                           ; BSR set to: 0
  4070                           ;colour_identify.c: 222:                     fullSpeedAhead(mL,mR);
  4071   01045E  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4072   010462  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4073   010466  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4074   01046A  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4075   01046E  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  4076   010472                     
  4077                           ;colour_identify.c: 223:                     sprintf(buf, "Time gonna move for %d \n", R
      +                          eturnHomeTimes[i+1]);
  4078   010472  C081  F066         	movff	motor_response@buf,sprintf@s
  4079   010476  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4080   01047A  0EB5               	movlw	low STR_8
  4081   01047C  0100               	movlb	0	; () banked
  4082   01047E  6F68               	movwf	sprintf@fmt& (0+255),b
  4083   010480  0EFF               	movlw	high STR_8
  4084   010482  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4085   010484  C09A  F08E         	movff	motor_response@i,??_motor_response
  4086   010488  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4087   01048C  90D8               	bcf	status,0,c
  4088   01048E  378E               	rlcf	??_motor_response& (0+255),f,b
  4089   010490  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4090   010492  518E               	movf	??_motor_response& (0+255),w,b
  4091   010494  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4092   010496  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4093   010498  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4094   01049A  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4095   01049C  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4096   01049E  0E02               	movlw	2
  4097   0104A0  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4098   0104A2  6ED9               	movwf	fsr2l,c
  4099   0104A4  0E00               	movlw	0
  4100   0104A6  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4101   0104A8  6EDA               	movwf	fsr2h,c
  4102   0104AA  CFDE F06A          	movff	postinc2,?_sprintf+4
  4103   0104AE  CFDD F06B          	movff	postdec2,?_sprintf+5
  4104   0104B2  EC63  F094         	call	_sprintf	;wreg free
  4105   0104B6                     
  4106                           ;colour_identify.c: 224:                     sendStringSerial4(buf);
  4107   0104B6  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4108   0104BA  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4109   0104BE  ECCD  F095         	call	_sendStringSerial4	;wreg free
  4110   0104C2                     
  4111                           ;colour_identify.c: 225:                     for (int j=0; j<= ReturnHomeTimes[i+1]; j++
      +                          ){
  4112   0104C2  0E00               	movlw	0
  4113   0104C4  0100               	movlb	0	; () banked
  4114   0104C6  6F95               	movwf	(motor_response@j+1)& (0+255),b
  4115   0104C8  0E00               	movlw	0
  4116   0104CA  6F94               	movwf	motor_response@j& (0+255),b
  4117   0104CC  EF78  F082         	goto	l4653
  4118   0104D0                     l4649:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;colour_identify.c: 226:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  4122   0104D0  0E09               	movlw	9
  4123   0104D2  0100               	movlb	0	; () banked
  4124   0104D4  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4125   0104D6  0E1E               	movlw	30
  4126   0104D8  6F8E               	movwf	??_motor_response& (0+255),b
  4127   0104DA  0EE4               	movlw	228
  4128   0104DC                     u2917:
  4129   0104DC  2EE8               	decfsz	wreg,f,c
  4130   0104DE  D7FE               	bra	u2917
  4131   0104E0  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4132   0104E2  D7FC               	bra	u2917
  4133   0104E4  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4134   0104E6  D7FA               	bra	u2917
  4135   0104E8  F000               	nop	
  4136   0104EA                     
  4137                           ;colour_identify.c: 227:                     }
  4138   0104EA  0100               	movlb	0	; () banked
  4139   0104EC  4B94               	infsnz	motor_response@j& (0+255),f,b
  4140   0104EE  2B95               	incf	(motor_response@j+1)& (0+255),f,b
  4141   0104F0                     l4653:
  4142                           
  4143                           ; BSR set to: 0
  4144   0104F0  C09A  F08E         	movff	motor_response@i,??_motor_response
  4145   0104F4  C09B  F08F         	movff	motor_response@i+1,??_motor_response+1
  4146   0104F8  90D8               	bcf	status,0,c
  4147   0104FA  378E               	rlcf	??_motor_response& (0+255),f,b
  4148   0104FC  378F               	rlcf	(??_motor_response+1)& (0+255),f,b
  4149   0104FE  518E               	movf	??_motor_response& (0+255),w,b
  4150   010500  2588               	addwf	motor_response@ReturnHomeTimes& (0+255),w,b
  4151   010502  6F90               	movwf	(??_motor_response+2)& (0+255),b
  4152   010504  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4153   010506  2189               	addwfc	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4154   010508  6F91               	movwf	(??_motor_response+3)& (0+255),b
  4155   01050A  0E02               	movlw	2
  4156   01050C  2590               	addwf	(??_motor_response+2)& (0+255),w,b
  4157   01050E  6ED9               	movwf	fsr2l,c
  4158   010510  0E00               	movlw	0
  4159   010512  2191               	addwfc	(??_motor_response+3)& (0+255),w,b
  4160   010514  6EDA               	movwf	fsr2h,c
  4161   010516  5194               	movf	motor_response@j& (0+255),w,b
  4162   010518  5CDE               	subwf	postinc2,w,c
  4163   01051A  5195               	movf	(motor_response@j+1)& (0+255),w,b
  4164   01051C  58DE               	subwfb	postinc2,w,c
  4165   01051E  B0D8               	btfsc	status,0,c
  4166   010520  EF94  F082         	goto	u2511
  4167   010524  EF96  F082         	goto	u2510
  4168   010528                     u2511:
  4169   010528  EF68  F082         	goto	l4649
  4170   01052C                     u2510:
  4171   01052C                     
  4172                           ; BSR set to: 0
  4173                           ;colour_identify.c: 228:                     stop(mL,mR);
  4174   01052C  C084  F017         	movff	motor_response@mL,stop@mL
  4175   010530  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4176   010534  C086  F019         	movff	motor_response@mR,stop@mR
  4177   010538  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4178   01053C  EC0B  F094         	call	_stop	;wreg free
  4179   010540                     
  4180                           ;colour_identify.c: 229:                     sprintf(buf, "Card gonna respond to %d \n",
      +                           ReturnHomeCards[i]);
  4181   010540  C081  F066         	movff	motor_response@buf,sprintf@s
  4182   010544  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4183   010548  0E67               	movlw	low STR_9
  4184   01054A  0100               	movlb	0	; () banked
  4185   01054C  6F68               	movwf	sprintf@fmt& (0+255),b
  4186   01054E  0EFF               	movlw	high STR_9
  4187   010550  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4188   010552  519A               	movf	motor_response@i& (0+255),w,b
  4189   010554  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4190   010556  6ED9               	movwf	fsr2l,c
  4191   010558  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4192   01055A  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4193   01055C  6EDA               	movwf	fsr2h,c
  4194   01055E  50DF               	movf	indf2,w,c
  4195   010560  6F8E               	movwf	??_motor_response& (0+255),b
  4196   010562  518E               	movf	??_motor_response& (0+255),w,b
  4197   010564  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  4198   010566  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  4199   010568  EC63  F094         	call	_sprintf	;wreg free
  4200   01056C                     
  4201                           ;colour_identify.c: 230:                     sendStringSerial4(buf);
  4202   01056C  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4203   010570  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4204   010574  ECCD  F095         	call	_sendStringSerial4	;wreg free
  4205   010578                     
  4206                           ;colour_identify.c: 231:                     home_response(ReturnHomeCards[i], mL, mR);
  4207   010578  C084  F01F         	movff	motor_response@mL,home_response@mL
  4208   01057C  C085  F020         	movff	motor_response@mL+1,home_response@mL+1
  4209   010580  C086  F021         	movff	motor_response@mR,home_response@mR
  4210   010584  C087  F022         	movff	motor_response@mR+1,home_response@mR+1
  4211   010588  0100               	movlb	0	; () banked
  4212   01058A  519A               	movf	motor_response@i& (0+255),w,b
  4213   01058C  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4214   01058E  6ED9               	movwf	fsr2l,c
  4215   010590  519B               	movf	(motor_response@i+1)& (0+255),w,b
  4216   010592  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4217   010594  6EDA               	movwf	fsr2h,c
  4218   010596  50DF               	movf	indf2,w,c
  4219   010598  EC53  F086         	call	_home_response
  4220   01059C                     l4663:
  4221                           
  4222                           ;colour_identify.c: 233:             }
  4223   01059C  0100               	movlb	0	; () banked
  4224   01059E  079A               	decf	motor_response@i& (0+255),f,b
  4225   0105A0  A0D8               	btfss	status,0,c
  4226   0105A2  079B               	decf	(motor_response@i+1)& (0+255),f,b
  4227   0105A4  EF0A  F082         	goto	l4635
  4228   0105A8                     l4667:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;colour_identify.c: 234:             sprintf(buf, "Time gonna move for %d \n", ReturnHom
      +                          eTimes[0]);
  4232   0105A8  C081  F066         	movff	motor_response@buf,sprintf@s
  4233   0105AC  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4234   0105B0  0EB5               	movlw	low STR_8
  4235   0105B2  6F68               	movwf	sprintf@fmt& (0+255),b
  4236   0105B4  0EFF               	movlw	high STR_8
  4237   0105B6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4238   0105B8  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4239   0105BC  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4240   0105C0  CFDE F06A          	movff	postinc2,?_sprintf+4
  4241   0105C4  CFDD F06B          	movff	postdec2,?_sprintf+5
  4242   0105C8  EC63  F094         	call	_sprintf	;wreg free
  4243   0105CC                     
  4244                           ;colour_identify.c: 235:             sendStringSerial4(buf);
  4245   0105CC  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4246   0105D0  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4247   0105D4  ECCD  F095         	call	_sendStringSerial4	;wreg free
  4248   0105D8                     
  4249                           ;colour_identify.c: 236:             fullSpeedAhead(mL,mR);
  4250   0105D8  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  4251   0105DC  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  4252   0105E0  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  4253   0105E4  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  4254   0105E8  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  4255   0105EC                     
  4256                           ;colour_identify.c: 237:             for (int j=0; j<= ReturnHomeTimes[0]; j++){
  4257   0105EC  0E00               	movlw	0
  4258   0105EE  0100               	movlb	0	; () banked
  4259   0105F0  6F97               	movwf	(motor_response@j_1696+1)& (0+255),b
  4260   0105F2  0E00               	movlw	0
  4261   0105F4  6F96               	movwf	motor_response@j_1696& (0+255),b
  4262   0105F6  EF0D  F083         	goto	l4679
  4263   0105FA                     l4675:
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;colour_identify.c: 238:                 _delay((unsigned long)((100)*(64000000/4000.0))
      +                          );}
  4267   0105FA  0E09               	movlw	9
  4268   0105FC  0100               	movlb	0	; () banked
  4269   0105FE  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4270   010600  0E1E               	movlw	30
  4271   010602  6F8E               	movwf	??_motor_response& (0+255),b
  4272   010604  0EE4               	movlw	228
  4273   010606                     u2927:
  4274   010606  2EE8               	decfsz	wreg,f,c
  4275   010608  D7FE               	bra	u2927
  4276   01060A  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4277   01060C  D7FC               	bra	u2927
  4278   01060E  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4279   010610  D7FA               	bra	u2927
  4280   010612  F000               	nop	
  4281   010614  0100               	movlb	0	; () banked
  4282   010616  4B96               	infsnz	motor_response@j_1696& (0+255),f,b
  4283   010618  2B97               	incf	(motor_response@j_1696+1)& (0+255),f,b
  4284   01061A                     l4679:
  4285                           
  4286                           ; BSR set to: 0
  4287   01061A  C088  FFD9         	movff	motor_response@ReturnHomeTimes,fsr2l
  4288   01061E  C089  FFDA         	movff	motor_response@ReturnHomeTimes+1,fsr2h
  4289   010622  5196               	movf	motor_response@j_1696& (0+255),w,b
  4290   010624  5CDE               	subwf	postinc2,w,c
  4291   010626  5197               	movf	(motor_response@j_1696+1)& (0+255),w,b
  4292   010628  58DE               	subwfb	postinc2,w,c
  4293   01062A  B0D8               	btfsc	status,0,c
  4294   01062C  EF1A  F083         	goto	u2521
  4295   010630  EF1C  F083         	goto	u2520
  4296   010634                     u2521:
  4297   010634  EFFD  F082         	goto	l4675
  4298   010638                     u2520:
  4299   010638                     
  4300                           ; BSR set to: 0
  4301                           ;colour_identify.c: 239:             stop(mL,mR);
  4302   010638  C084  F017         	movff	motor_response@mL,stop@mL
  4303   01063C  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4304   010640  C086  F019         	movff	motor_response@mR,stop@mR
  4305   010644  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4306   010648  EC0B  F094         	call	_stop	;wreg free
  4307   01064C                     
  4308                           ;colour_identify.c: 240:             *stop_all = 1;
  4309   01064C  C08C  FFD9         	movff	motor_response@stop_all,fsr2l
  4310   010650  C08D  FFDA         	movff	motor_response@stop_all+1,fsr2h
  4311   010654  0E01               	movlw	1
  4312   010656  6EDE               	movwf	postinc2,c
  4313   010658  0E00               	movlw	0
  4314   01065A  6EDD               	movwf	postdec2,c
  4315                           
  4316                           ;colour_identify.c: 241:             break;
  4317   01065C  EF82  F083         	goto	l389
  4318   010660                     l387:
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;colour_identify.c: 244:             LATHbits.LATH3=1;
  4322   010660  8680               	bsf	128,3,c	;volatile
  4323   010662                     
  4324                           ; BSR set to: 0
  4325                           ;colour_identify.c: 245:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4326   010662  0E11               	movlw	17
  4327   010664  0100               	movlb	0	; () banked
  4328   010666  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4329   010668  0E3C               	movlw	60
  4330   01066A  6F8E               	movwf	??_motor_response& (0+255),b
  4331   01066C  0ECB               	movlw	203
  4332   01066E                     u2937:
  4333   01066E  2EE8               	decfsz	wreg,f,c
  4334   010670  D7FE               	bra	u2937
  4335   010672  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4336   010674  D7FC               	bra	u2937
  4337   010676  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4338   010678  D7FA               	bra	u2937
  4339   01067A                     
  4340                           ;colour_identify.c: 246:             LATHbits.LATH3=0;
  4341   01067A  9680               	bcf	128,3,c	;volatile
  4342                           
  4343                           ;colour_identify.c: 247:             break;
  4344   01067C  EF82  F083         	goto	l389
  4345   010680                     l388:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;colour_identify.c: 249:             LATHbits.LATH1 = 1;
  4349   010680  8280               	bsf	128,1,c	;volatile
  4350   010682                     
  4351                           ; BSR set to: 0
  4352                           ;colour_identify.c: 250:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4353   010682  0E29               	movlw	41
  4354   010684  0100               	movlb	0	; () banked
  4355   010686  6F8F               	movwf	(??_motor_response+1)& (0+255),b
  4356   010688  0E96               	movlw	150
  4357   01068A  6F8E               	movwf	??_motor_response& (0+255),b
  4358   01068C  0E7F               	movlw	127
  4359   01068E                     u2947:
  4360   01068E  2EE8               	decfsz	wreg,f,c
  4361   010690  D7FE               	bra	u2947
  4362   010692  2F8E               	decfsz	??_motor_response& (0+255),f,b
  4363   010694  D7FC               	bra	u2947
  4364   010696  2F8F               	decfsz	(??_motor_response+1)& (0+255),f,b
  4365   010698  D7FA               	bra	u2947
  4366   01069A                     
  4367                           ;colour_identify.c: 251:             LATHbits.LATH1 = 0;
  4368   01069A  9280               	bcf	128,1,c	;volatile
  4369                           
  4370                           ;colour_identify.c: 252:             break;
  4371   01069C  EF82  F083         	goto	l389
  4372   0106A0                     l4695:
  4373   0106A0  0100               	movlb	0	; () banked
  4374   0106A2  5183               	movf	motor_response@card& (0+255),w,b
  4375   0106A4  6F8E               	movwf	??_motor_response& (0+255),b
  4376   0106A6  6B8F               	clrf	(??_motor_response+1)& (0+255),b
  4377                           
  4378                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4379                           ; Switch size 1, requested type "simple"
  4380                           ; Number of cases is 1, Range of values is 0 to 0
  4381                           ; switch strategies available:
  4382                           ; Name         Instructions Cycles
  4383                           ; simple_byte            4     3 (average)
  4384                           ;	Chosen strategy is simple_byte
  4385   0106A8  518F               	movf	(??_motor_response+1)& (0+255),w,b
  4386   0106AA  0A00               	xorlw	0	; case 0
  4387   0106AC  B4D8               	btfsc	status,2,c
  4388   0106AE  EF5B  F083         	goto	l5057
  4389   0106B2  EF40  F083         	goto	l388
  4390   0106B6                     l5057:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ; Switch size 1, requested type "simple"
  4394                           ; Number of cases is 9, Range of values is 0 to 8
  4395                           ; switch strategies available:
  4396                           ; Name         Instructions Cycles
  4397                           ; simple_byte           28    15 (average)
  4398                           ;	Chosen strategy is simple_byte
  4399   0106B6  518E               	movf	??_motor_response& (0+255),w,b
  4400   0106B8  0A00               	xorlw	0	; case 0
  4401   0106BA  B4D8               	btfsc	status,2,c
  4402   0106BC  EF02  F080         	goto	l4491
  4403   0106C0  0A01               	xorlw	1	; case 1
  4404   0106C2  B4D8               	btfsc	status,2,c
  4405   0106C4  EF43  F080         	goto	l4503
  4406   0106C8  0A03               	xorlw	3	; case 2
  4407   0106CA  B4D8               	btfsc	status,2,c
  4408   0106CC  EF7A  F080         	goto	l4515
  4409   0106D0  0A01               	xorlw	1	; case 3
  4410   0106D2  B4D8               	btfsc	status,2,c
  4411   0106D4  EFBB  F080         	goto	l4535
  4412   0106D8  0A07               	xorlw	7	; case 4
  4413   0106DA  B4D8               	btfsc	status,2,c
  4414   0106DC  EFD3  F080         	goto	l4549
  4415   0106E0  0A01               	xorlw	1	; case 5
  4416   0106E2  B4D8               	btfsc	status,2,c
  4417   0106E4  EFF5  F080         	goto	l4563
  4418   0106E8  0A03               	xorlw	3	; case 6
  4419   0106EA  B4D8               	btfsc	status,2,c
  4420   0106EC  EF0E  F081         	goto	l4579
  4421   0106F0  0A01               	xorlw	1	; case 7
  4422   0106F2  B4D8               	btfsc	status,2,c
  4423   0106F4  EF31  F081         	goto	l4595
  4424   0106F8  0A0F               	xorlw	15	; case 8
  4425   0106FA  B4D8               	btfsc	status,2,c
  4426   0106FC  EF30  F083         	goto	l387
  4427   010700  EF40  F083         	goto	l388
  4428   010704                     l389:
  4429   010704  0012               	return		;funcret
  4430   010706                     __end_of_motor_response:
  4431                           	callstack 0
  4432                           
  4433 ;; *************** function _sprintf *****************
  4434 ;; Defined at:
  4435 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  s               2    6[BANK0 ] PTR unsigned char 
  4438 ;;		 -> main@buf(150), 
  4439 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  4440 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4441 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4442 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  f              11   22[BANK0 ] struct _IO_FILE
  4445 ;;  ap              2   20[BANK0 ] PTR void [1]
  4446 ;;		 -> ?_sprintf(2), 
  4447 ;;  ret             2    0        int 
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  2    6[BANK0 ] int 
  4450 ;; Registers used:
  4451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4457 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4458 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4460 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4461 ;;Total ram usage:       27 bytes
  4462 ;; Hardware stack levels used: 1
  4463 ;; Hardware stack levels required when called: 8
  4464 ;; This function calls:
  4465 ;;		_vfprintf
  4466 ;; This function is called by:
  4467 ;;		_main
  4468 ;;		_clear_read_calibration
  4469 ;;		_motor_response
  4470 ;;		_card_response
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text10
  4475   0128C6                     __ptext10:
  4476                           	callstack 0
  4477   0128C6                     _sprintf:
  4478                           	callstack 22
  4479   0128C6  0E6A               	movlw	low (?_sprintf+4)
  4480   0128C8  0100               	movlb	0	; () banked
  4481   0128CA  6F74               	movwf	sprintf@ap& (0+255),b
  4482   0128CC  0E00               	movlw	high (?_sprintf+4)
  4483   0128CE  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4484   0128D0  C066  F076         	movff	sprintf@s,sprintf@f
  4485   0128D4  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  4486   0128D8                     
  4487                           ; BSR set to: 0
  4488   0128D8  0E00               	movlw	0
  4489   0128DA  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  4490   0128DC  0E00               	movlw	0
  4491   0128DE  6F79               	movwf	(sprintf@f+3)& (0+255),b
  4492   0128E0                     
  4493                           ; BSR set to: 0
  4494   0128E0  0E00               	movlw	0
  4495   0128E2  6F80               	movwf	(sprintf@f+10)& (0+255),b
  4496   0128E4  0E00               	movlw	0
  4497   0128E6  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  4498   0128E8                     
  4499                           ; BSR set to: 0
  4500   0128E8  0E76               	movlw	low sprintf@f
  4501   0128EA  6F60               	movwf	vfprintf@fp& (0+255),b
  4502   0128EC  0E00               	movlw	high sprintf@f
  4503   0128EE  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4504   0128F0  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4505   0128F4  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4506   0128F8  0E74               	movlw	low sprintf@ap
  4507   0128FA  6F64               	movwf	vfprintf@ap& (0+255),b
  4508   0128FC  0E00               	movlw	high sprintf@ap
  4509   0128FE  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4510   012900  EC39  F094         	call	_vfprintf	;wreg free
  4511   012904  0100               	movlb	0	; () banked
  4512   012906  5179               	movf	(sprintf@f+3)& (0+255),w,b
  4513   012908  2566               	addwf	sprintf@s& (0+255),w,b
  4514   01290A  6ED9               	movwf	fsr2l,c
  4515   01290C  517A               	movf	(sprintf@f+4)& (0+255),w,b
  4516   01290E  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4517   012910  6EDA               	movwf	fsr2h,c
  4518   012912  0E00               	movlw	0
  4519   012914  6EDF               	movwf	indf2,c
  4520   012916                     
  4521                           ; BSR set to: 0
  4522   012916  0012               	return		;funcret
  4523   012918                     __end_of_sprintf:
  4524                           	callstack 0
  4525                           
  4526 ;; *************** function _vfprintf *****************
  4527 ;; Defined at:
  4528 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4531 ;;		 -> sprintf@f(11), 
  4532 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4533 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4534 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4535 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4536 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4537 ;;		 -> sprintf@ap(2), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  4540 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4541 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4542 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    0[BANK0 ] int 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4552 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4555 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;Total ram usage:        8 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 7
  4559 ;; This function calls:
  4560 ;;		_vfpfcnvrt
  4561 ;; This function is called by:
  4562 ;;		_sprintf
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text11
  4567   012872                     __ptext11:
  4568                           	callstack 0
  4569   012872                     _vfprintf:
  4570                           	callstack 22
  4571   012872                     
  4572                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4573   012872  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  4574   012876  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4575                           
  4576                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4577   01287A  EF4D  F094         	goto	l4209
  4578   01287E                     l4207:
  4579                           
  4580                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4581   01287E  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  4582   012882  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4583   012886  0E54               	movlw	low vfprintf@cfmt
  4584   012888  6E44               	movwf	vfpfcnvrt@fmt^0,c
  4585   01288A  0E00               	movlw	high vfprintf@cfmt
  4586   01288C  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4587   01288E  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  4588   012892  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4589   012896  EC76  F08F         	call	_vfpfcnvrt	;wreg free
  4590   01289A                     l4209:
  4591                           
  4592                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4593   01289A  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  4594   01289E  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4595   0128A2                     	if	0	;tblptru may be non-zero
  4596   0128A2                     	endif
  4597   0128A2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4598   0128A2  0E00               	movlw	low (__mediumconst shr (0+16))
  4599   0128A4  6EF8               	movwf	tblptru,c
  4600   0128A6                     	endif
  4601   0128A6  0008               	tblrd		*
  4602   0128A8  50F5               	movf	tablat,w,c
  4603   0128AA  0900               	iorlw	0
  4604   0128AC  A4D8               	btfss	status,2,c
  4605   0128AE  EF5B  F094         	goto	u2351
  4606   0128B2  EF5D  F094         	goto	u2350
  4607   0128B6                     u2351:
  4608   0128B6  EF3F  F094         	goto	l4207
  4609   0128BA                     u2350:
  4610   0128BA                     
  4611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4612   0128BA  0E00               	movlw	0
  4613   0128BC  0100               	movlb	0	; () banked
  4614   0128BE  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4615   0128C0  0E00               	movlw	0
  4616   0128C2  6F60               	movwf	?_vfprintf& (0+255),b
  4617   0128C4                     
  4618                           ; BSR set to: 0
  4619   0128C4  0012               	return		;funcret
  4620   0128C6                     __end_of_vfprintf:
  4621                           	callstack 0
  4622                           
  4623 ;; *************** function _vfpfcnvrt *****************
  4624 ;; Defined at:
  4625 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  4628 ;;		 -> sprintf@f(11), 
  4629 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  4630 ;;		 -> vfprintf@cfmt(2), 
  4631 ;;  ap              2   69[COMRAM] PTR PTR void 
  4632 ;;		 -> sprintf@ap(2), 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  convarg         8   73[COMRAM] struct .
  4635 ;;  cp              2   81[COMRAM] PTR unsigned char 
  4636 ;;		 -> STR_12(10), STR_11(36), STR_10(25), STR_9(27), 
  4637 ;;		 -> STR_8(25), STR_7(25), STR_6(26), STR_5(23), 
  4638 ;;		 -> STR_4(30), STR_3(15), STR_2(23), STR_1(50), 
  4639 ;;  i               2    0        int 
  4640 ;;  done            2    0        int 
  4641 ;;  c               1    0        unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4651 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;Total ram usage:       18 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 6
  4658 ;; This function calls:
  4659 ;;		_dtoa
  4660 ;;		_fputc
  4661 ;; This function is called by:
  4662 ;;		_vfprintf
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text12
  4667   011EEC                     __ptext12:
  4668                           	callstack 0
  4669   011EEC                     _vfpfcnvrt:
  4670                           	callstack 22
  4671   011EEC                     
  4672                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4673   011EEC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4674   011EF0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4675   011EF4  CFDE FFF6          	movff	postinc2,tblptrl
  4676   011EF8  CFDD FFF7          	movff	postdec2,tblptrh
  4677   011EFC                     	if	0	;tblptru may be non-zero
  4678   011EFC                     	endif
  4679   011EFC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4680   011EFC  0E00               	movlw	low (__mediumconst shr (0+16))
  4681   011EFE  6EF8               	movwf	tblptru,c
  4682   011F00                     	endif
  4683   011F00  0008               	tblrd		*
  4684   011F02  50F5               	movf	tablat,w,c
  4685   011F04  0A25               	xorlw	37
  4686   011F06  A4D8               	btfss	status,2,c
  4687   011F08  EF88  F08F         	goto	u2251
  4688   011F0C  EF8A  F08F         	goto	u2250
  4689   011F10                     u2251:
  4690   011F10  EF0E  F090         	goto	l4087
  4691   011F14                     u2250:
  4692   011F14                     
  4693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4694   011F14  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4695   011F18  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4696   011F1C  2ADE               	incf	postinc2,f,c
  4697   011F1E  0E00               	movlw	0
  4698   011F20  22DD               	addwfc	postdec2,f,c
  4699   011F22                     
  4700                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4701   011F22  0E00               	movlw	0
  4702   011F24  0100               	movlb	0	; () banked
  4703   011F26  6FD4               	movwf	(_width+1)& (0+255),b
  4704   011F28  0E00               	movlw	0
  4705   011F2A  6FD3               	movwf	_width& (0+255),b
  4706   011F2C  C0D3  F0DD         	movff	_width,_flags
  4707   011F30                     
  4708                           ; BSR set to: 0
  4709                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4710   011F30  69D5               	setf	_prec& (0+255),b
  4711   011F32  69D6               	setf	(_prec+1)& (0+255),b
  4712   011F34                     
  4713                           ; BSR set to: 0
  4714                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4715   011F34  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4716   011F38  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4717   011F3C  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  4718   011F40  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  4719   011F44                     
  4720                           ; BSR set to: 0
  4721                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4722   011F44  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4723   011F48  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4724   011F4C                     	if	0	;tblptru may be non-zero
  4725   011F4C                     	endif
  4726   011F4C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4727   011F4C  0E00               	movlw	low (__mediumconst shr (0+16))
  4728   011F4E  6EF8               	movwf	tblptru,c
  4729   011F50                     	endif
  4730   011F50  0008               	tblrd		*
  4731   011F52  50F5               	movf	tablat,w,c
  4732   011F54  0A64               	xorlw	100
  4733   011F56  B4D8               	btfsc	status,2,c
  4734   011F58  EFB0  F08F         	goto	u2261
  4735   011F5C  EFB2  F08F         	goto	u2260
  4736   011F60                     u2261:
  4737   011F60  EFC2  F08F         	goto	l4077
  4738   011F64                     u2260:
  4739   011F64                     
  4740                           ; BSR set to: 0
  4741   011F64  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4742   011F68  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4743   011F6C                     	if	0	;tblptru may be non-zero
  4744   011F6C                     	endif
  4745   011F6C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4746   011F6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4747   011F6E  6EF8               	movwf	tblptru,c
  4748   011F70                     	endif
  4749   011F70  0008               	tblrd		*
  4750   011F72  50F5               	movf	tablat,w,c
  4751   011F74  0A69               	xorlw	105
  4752   011F76  A4D8               	btfss	status,2,c
  4753   011F78  EFC0  F08F         	goto	u2271
  4754   011F7C  EFC2  F08F         	goto	u2270
  4755   011F80                     u2271:
  4756   011F80  EF05  F090         	goto	l4083
  4757   011F84                     u2270:
  4758   011F84                     l4077:
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4762   011F84  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4763   011F88  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4764   011F8C  CFDF F048          	movff	indf2,??_vfpfcnvrt
  4765   011F90  0E02               	movlw	2
  4766   011F92  26DE               	addwf	postinc2,f,c
  4767   011F94  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  4768   011F98  0E00               	movlw	0
  4769   011F9A  22DD               	addwfc	postdec2,f,c
  4770   011F9C  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4771   011FA0  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4772   011FA4  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  4773   011FA8  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  4774   011FAC  0E00               	movlw	0
  4775   011FAE  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4776   011FB0  0EFF               	movlw	-1
  4777   011FB2  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4778   011FB4  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4779   011FB6  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4780   011FB8  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4781   011FBA  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4782   011FBC  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4783                           
  4784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4785   011FBE  0E01               	movlw	1
  4786   011FC0  2452               	addwf	vfpfcnvrt@cp^0,w,c
  4787   011FC2  6E48               	movwf	??_vfpfcnvrt^0,c
  4788   011FC4  0E00               	movlw	0
  4789   011FC6  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4790   011FC8  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  4791   011FCA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4792   011FCE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4793   011FD2  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  4794   011FD6  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4795   011FDA                     
  4796                           ; BSR set to: 0
  4797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4798   011FDA  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  4799   011FDE  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4800   011FE2  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  4801   011FE6  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4802   011FEA  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4803   011FEE  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4804   011FF2  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4805   011FF6  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4806   011FFA  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4807   011FFE  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4808   012002  EC16  F08A         	call	_dtoa	;wreg free
  4809   012006  EF24  F090         	goto	l1268
  4810   01200A                     l4083:
  4811                           
  4812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4813   01200A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4814   01200E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4815   012012  2ADE               	incf	postinc2,f,c
  4816   012014  0E00               	movlw	0
  4817   012016  22DD               	addwfc	postdec2,f,c
  4818   012018  EF24  F090         	goto	l1268
  4819   01201C                     l4087:
  4820                           
  4821                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4822   01201C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4823   012020  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4824   012024  CFDE FFF6          	movff	postinc2,tblptrl
  4825   012028  CFDD FFF7          	movff	postdec2,tblptrh
  4826   01202C                     	if	0	;tblptru may be non-zero
  4827   01202C                     	endif
  4828   01202C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4829   01202C  0E00               	movlw	low (__mediumconst shr (0+16))
  4830   01202E  6EF8               	movwf	tblptru,c
  4831   012030                     	endif
  4832   012030  0008               	tblrd		*
  4833   012032  50F5               	movf	tablat,w,c
  4834   012034  6E04               	movwf	fputc@c^0,c
  4835   012036  6A05               	clrf	(fputc@c+1)^0,c
  4836   012038  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  4837   01203C  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4838   012040  EC38  F091         	call	_fputc	;wreg free
  4839   012044  EF05  F090         	goto	l4083
  4840   012048                     l1268:
  4841   012048  0012               	return		;funcret
  4842   01204A                     __end_of_vfpfcnvrt:
  4843                           	callstack 0
  4844                           
  4845 ;; *************** function _dtoa *****************
  4846 ;; Defined at:
  4847 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  4850 ;;		 -> sprintf@f(11), 
  4851 ;;  d               8   32[COMRAM] long long 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  n               8   54[COMRAM] long long 
  4854 ;;  i               2   63[COMRAM] int 
  4855 ;;  w               2   52[COMRAM] int 
  4856 ;;  p               2   50[COMRAM] int 
  4857 ;;  s               1   62[COMRAM] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4867 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4868 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4869 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4870 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4871 ;;Total ram usage:       35 bytes
  4872 ;; Hardware stack levels used: 1
  4873 ;; Hardware stack levels required when called: 5
  4874 ;; This function calls:
  4875 ;;		___aodiv
  4876 ;;		___aomod
  4877 ;;		_abs
  4878 ;;		_pad
  4879 ;; This function is called by:
  4880 ;;		_vfpfcnvrt
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text13
  4885   01142C                     __ptext13:
  4886                           	callstack 0
  4887   01142C                     _dtoa:
  4888                           	callstack 22
  4889   01142C                     
  4890                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4891   01142C  C021  F037         	movff	dtoa@d,dtoa@n
  4892   011430  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  4893   011434  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  4894   011438  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  4895   01143C  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  4896   011440  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  4897   011444  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  4898   011448  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  4899   01144C                     
  4900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4901   01144C  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  4902   01144E  EF2B  F08A         	goto	u2111
  4903   011452  EF2E  F08A         	goto	u2110
  4904   011456                     u2111:
  4905   011456  0E01               	movlw	1
  4906   011458  EF2F  F08A         	goto	u2120
  4907   01145C                     u2110:
  4908   01145C  0E00               	movlw	0
  4909   01145E                     u2120:
  4910   01145E  6E3F               	movwf	dtoa@s^0,c
  4911   011460                     
  4912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4913   011460  503F               	movf	dtoa@s^0,w,c
  4914   011462  B4D8               	btfsc	status,2,c
  4915   011464  EF36  F08A         	goto	u2131
  4916   011468  EF38  F08A         	goto	u2130
  4917   01146C                     u2131:
  4918   01146C  EF48  F08A         	goto	l3999
  4919   011470                     u2130:
  4920   011470                     
  4921                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4922   011470  1E3E               	comf	(dtoa@n+7)^0,f,c
  4923   011472  1E3D               	comf	(dtoa@n+6)^0,f,c
  4924   011474  1E3C               	comf	(dtoa@n+5)^0,f,c
  4925   011476  1E3B               	comf	(dtoa@n+4)^0,f,c
  4926   011478  1E3A               	comf	(dtoa@n+3)^0,f,c
  4927   01147A  1E39               	comf	(dtoa@n+2)^0,f,c
  4928   01147C  1E38               	comf	(dtoa@n+1)^0,f,c
  4929   01147E  6C37               	negf	dtoa@n^0,c
  4930   011480  0E00               	movlw	0
  4931   011482  2238               	addwfc	(dtoa@n+1)^0,f,c
  4932   011484  2239               	addwfc	(dtoa@n+2)^0,f,c
  4933   011486  223A               	addwfc	(dtoa@n+3)^0,f,c
  4934   011488  223B               	addwfc	(dtoa@n+4)^0,f,c
  4935   01148A  223C               	addwfc	(dtoa@n+5)^0,f,c
  4936   01148C  223D               	addwfc	(dtoa@n+6)^0,f,c
  4937   01148E  223E               	addwfc	(dtoa@n+7)^0,f,c
  4938   011490                     l3999:
  4939                           
  4940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4941   011490  0100               	movlb	0	; () banked
  4942   011492  BFD6               	btfsc	(_prec+1)& (0+255),7,b
  4943   011494  EF56  F08A         	goto	u2140
  4944   011498  51D6               	movf	(_prec+1)& (0+255),w,b
  4945   01149A  E106               	bnz	u2141
  4946   01149C  05D5               	decf	_prec& (0+255),w,b
  4947   01149E  B0D8               	btfsc	status,0,c
  4948   0114A0  EF54  F08A         	goto	u2141
  4949   0114A4  EF56  F08A         	goto	u2140
  4950   0114A8                     u2141:
  4951   0114A8  EF5C  F08A         	goto	l1247
  4952   0114AC                     u2140:
  4953   0114AC                     
  4954                           ; BSR set to: 0
  4955   0114AC  0E00               	movlw	0
  4956   0114AE  6E34               	movwf	(dtoa@p+1)^0,c
  4957   0114B0  0E01               	movlw	1
  4958   0114B2  6E33               	movwf	dtoa@p^0,c
  4959   0114B4  EF60  F08A         	goto	l1249
  4960   0114B8                     l1247:
  4961                           
  4962                           ; BSR set to: 0
  4963   0114B8  C0D5  F033         	movff	_prec,dtoa@p
  4964   0114BC  C0D6  F034         	movff	_prec+1,dtoa@p+1
  4965   0114C0                     l1249:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4969   0114C0  C0D3  F035         	movff	_width,dtoa@w
  4970   0114C4  C0D4  F036         	movff	_width+1,dtoa@w+1
  4971   0114C8                     
  4972                           ; BSR set to: 0
  4973                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4974   0114C8  503F               	movf	dtoa@s^0,w,c
  4975   0114CA  B4D8               	btfsc	status,2,c
  4976   0114CC  EF6A  F08A         	goto	u2151
  4977   0114D0  EF6C  F08A         	goto	u2150
  4978   0114D4                     u2151:
  4979   0114D4  EF83  F08A         	goto	l1250
  4980   0114D8                     u2150:
  4981   0114D8                     
  4982                           ; BSR set to: 0
  4983                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4984   0114D8  0635               	decf	dtoa@w^0,f,c
  4985   0114DA  A0D8               	btfss	status,0,c
  4986   0114DC  0636               	decf	(dtoa@w+1)^0,f,c
  4987   0114DE                     
  4988                           ; BSR set to: 0
  4989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4990   0114DE  503F               	movf	dtoa@s^0,w,c
  4991   0114E0  A4D8               	btfss	status,2,c
  4992   0114E2  EF75  F08A         	goto	u2161
  4993   0114E6  EF77  F08A         	goto	u2160
  4994   0114EA                     u2161:
  4995   0114EA  EF7D  F08A         	goto	l4011
  4996   0114EE                     u2160:
  4997   0114EE                     
  4998                           ; BSR set to: 0
  4999   0114EE  0E00               	movlw	0
  5000   0114F0  6E32               	movwf	(_dtoa$2576+1)^0,c
  5001   0114F2  0E2B               	movlw	43
  5002   0114F4  6E31               	movwf	_dtoa$2576^0,c
  5003   0114F6  EF81  F08A         	goto	l4013
  5004   0114FA                     l4011:
  5005                           
  5006                           ; BSR set to: 0
  5007   0114FA  0E00               	movlw	0
  5008   0114FC  6E32               	movwf	(_dtoa$2576+1)^0,c
  5009   0114FE  0E2D               	movlw	45
  5010   011500  6E31               	movwf	_dtoa$2576^0,c
  5011   011502                     l4013:
  5012                           
  5013                           ; BSR set to: 0
  5014   011502  C031  F03F         	movff	_dtoa$2576,dtoa@s
  5015   011506                     l1250:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  5019   011506  0E00               	movlw	0
  5020   011508  6E41               	movwf	(dtoa@i+1)^0,c
  5021   01150A  0E1F               	movlw	31
  5022   01150C  6E40               	movwf	dtoa@i^0,c
  5023   01150E                     
  5024                           ; BSR set to: 0
  5025                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  5026   01150E  0E00               	movlw	0
  5027   011510  6FFE               	movwf	(_dbuf+31)& (0+255),b
  5028                           
  5029                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5030   011512  EF07  F08B         	goto	l4027
  5031   011516                     l4017:
  5032                           
  5033                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  5034   011516  0640               	decf	dtoa@i^0,f,c
  5035   011518  A0D8               	btfss	status,0,c
  5036   01151A  0641               	decf	(dtoa@i+1)^0,f,c
  5037   01151C                     
  5038                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  5039   01151C  0EDF               	movlw	low _dbuf
  5040   01151E  2440               	addwf	dtoa@i^0,w,c
  5041   011520  6ED9               	movwf	fsr2l,c
  5042   011522  0E00               	movlw	high _dbuf
  5043   011524  2041               	addwfc	(dtoa@i+1)^0,w,c
  5044   011526  6EDA               	movwf	fsr2h,c
  5045   011528  C037  F004         	movff	dtoa@n,___aomod@dividend
  5046   01152C  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  5047   011530  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  5048   011534  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  5049   011538  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  5050   01153C  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  5051   011540  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  5052   011544  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  5053   011548  0E0A               	movlw	10
  5054   01154A  6E0C               	movwf	___aomod@divisor^0,c
  5055   01154C  0E00               	movlw	0
  5056   01154E  6E0D               	movwf	(___aomod@divisor+1)^0,c
  5057   011550  0E00               	movlw	0
  5058   011552  6E0E               	movwf	(___aomod@divisor+2)^0,c
  5059   011554  0E00               	movlw	0
  5060   011556  6E0F               	movwf	(___aomod@divisor+3)^0,c
  5061   011558  0E00               	movlw	0
  5062   01155A  6E10               	movwf	(___aomod@divisor+4)^0,c
  5063   01155C  0E00               	movlw	0
  5064   01155E  6E11               	movwf	(___aomod@divisor+5)^0,c
  5065   011560  0E00               	movlw	0
  5066   011562  6E12               	movwf	(___aomod@divisor+6)^0,c
  5067   011564  0E00               	movlw	0
  5068   011566  6E13               	movwf	(___aomod@divisor+7)^0,c
  5069   011568  ECC4  F08E         	call	___aomod	;wreg free
  5070   01156C  C004  F029         	movff	?___aomod,??_dtoa
  5071   011570  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  5072   011574  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  5073   011578  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  5074   01157C  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  5075   011580  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  5076   011584  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  5077   011588  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  5078   01158C  C029  F016         	movff	??_dtoa,abs@a
  5079   011590  C02A  F017         	movff	??_dtoa+1,abs@a+1
  5080   011594  EC93  F095         	call	_abs	;wreg free
  5081   011598  5016               	movf	?_abs^0,w,c
  5082   01159A  0F30               	addlw	48
  5083   01159C  6EDF               	movwf	indf2,c
  5084   01159E                     
  5085                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  5086   01159E  0633               	decf	dtoa@p^0,f,c
  5087   0115A0  A0D8               	btfss	status,0,c
  5088   0115A2  0634               	decf	(dtoa@p+1)^0,f,c
  5089   0115A4                     
  5090                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  5091   0115A4  0635               	decf	dtoa@w^0,f,c
  5092   0115A6  A0D8               	btfss	status,0,c
  5093   0115A8  0636               	decf	(dtoa@w+1)^0,f,c
  5094   0115AA                     
  5095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  5096   0115AA  C037  F004         	movff	dtoa@n,___aodiv@dividend
  5097   0115AE  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  5098   0115B2  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  5099   0115B6  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  5100   0115BA  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  5101   0115BE  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  5102   0115C2  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  5103   0115C6  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  5104   0115CA  0E0A               	movlw	10
  5105   0115CC  6E0C               	movwf	___aodiv@divisor^0,c
  5106   0115CE  0E00               	movlw	0
  5107   0115D0  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  5108   0115D2  0E00               	movlw	0
  5109   0115D4  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  5110   0115D6  0E00               	movlw	0
  5111   0115D8  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  5112   0115DA  0E00               	movlw	0
  5113   0115DC  6E10               	movwf	(___aodiv@divisor+4)^0,c
  5114   0115DE  0E00               	movlw	0
  5115   0115E0  6E11               	movwf	(___aodiv@divisor+5)^0,c
  5116   0115E2  0E00               	movlw	0
  5117   0115E4  6E12               	movwf	(___aodiv@divisor+6)^0,c
  5118   0115E6  0E00               	movlw	0
  5119   0115E8  6E13               	movwf	(___aodiv@divisor+7)^0,c
  5120   0115EA  EC91  F08C         	call	___aodiv	;wreg free
  5121   0115EE  C004  F037         	movff	?___aodiv,dtoa@n
  5122   0115F2  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  5123   0115F6  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  5124   0115FA  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  5125   0115FE  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  5126   011602  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  5127   011606  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  5128   01160A  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  5129   01160E                     l4027:
  5130                           
  5131                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5132   01160E  BE41               	btfsc	(dtoa@i+1)^0,7,c
  5133   011610  EF12  F08B         	goto	u2171
  5134   011614  5041               	movf	(dtoa@i+1)^0,w,c
  5135   011616  E108               	bnz	u2170
  5136   011618  0440               	decf	dtoa@i^0,w,c
  5137   01161A  A0D8               	btfss	status,0,c
  5138   01161C  EF12  F08B         	goto	u2171
  5139   011620  EF14  F08B         	goto	u2170
  5140   011624                     u2171:
  5141   011624  EF30  F08B         	goto	l4033
  5142   011628                     u2170:
  5143   011628  5037               	movf	dtoa@n^0,w,c
  5144   01162A  1038               	iorwf	(dtoa@n+1)^0,w,c
  5145   01162C  1039               	iorwf	(dtoa@n+2)^0,w,c
  5146   01162E  103A               	iorwf	(dtoa@n+3)^0,w,c
  5147   011630  103B               	iorwf	(dtoa@n+4)^0,w,c
  5148   011632  103C               	iorwf	(dtoa@n+5)^0,w,c
  5149   011634  103D               	iorwf	(dtoa@n+6)^0,w,c
  5150   011636  103E               	iorwf	(dtoa@n+7)^0,w,c
  5151   011638  A4D8               	btfss	status,2,c
  5152   01163A  EF21  F08B         	goto	u2181
  5153   01163E  EF23  F08B         	goto	u2180
  5154   011642                     u2181:
  5155   011642  EF8B  F08A         	goto	l4017
  5156   011646                     u2180:
  5157   011646  BE34               	btfsc	(dtoa@p+1)^0,7,c
  5158   011648  EF30  F08B         	goto	u2190
  5159   01164C  5034               	movf	(dtoa@p+1)^0,w,c
  5160   01164E  E106               	bnz	u2191
  5161   011650  0433               	decf	dtoa@p^0,w,c
  5162   011652  B0D8               	btfsc	status,0,c
  5163   011654  EF2E  F08B         	goto	u2191
  5164   011658  EF30  F08B         	goto	u2190
  5165   01165C                     u2191:
  5166   01165C  EF8B  F08A         	goto	l4017
  5167   011660                     u2190:
  5168   011660                     l4033:
  5169                           
  5170                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5171   011660  503F               	movf	dtoa@s^0,w,c
  5172   011662  B4D8               	btfsc	status,2,c
  5173   011664  EF36  F08B         	goto	u2201
  5174   011668  EF38  F08B         	goto	u2200
  5175   01166C                     u2201:
  5176   01166C  EF43  F08B         	goto	l4039
  5177   011670                     u2200:
  5178   011670                     
  5179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5180   011670  0640               	decf	dtoa@i^0,f,c
  5181   011672  A0D8               	btfss	status,0,c
  5182   011674  0641               	decf	(dtoa@i+1)^0,f,c
  5183   011676                     
  5184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5185   011676  0EDF               	movlw	low _dbuf
  5186   011678  2440               	addwf	dtoa@i^0,w,c
  5187   01167A  6ED9               	movwf	fsr2l,c
  5188   01167C  0E00               	movlw	high _dbuf
  5189   01167E  2041               	addwfc	(dtoa@i+1)^0,w,c
  5190   011680  6EDA               	movwf	fsr2h,c
  5191   011682  C03F  FFDF         	movff	dtoa@s,indf2
  5192   011686                     l4039:
  5193                           
  5194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5195   011686  C01F  F014         	movff	dtoa@fp,pad@fp
  5196   01168A  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  5197   01168E  0EDF               	movlw	low _dbuf
  5198   011690  2440               	addwf	dtoa@i^0,w,c
  5199   011692  6E16               	movwf	pad@buf^0,c
  5200   011694  0E00               	movlw	high _dbuf
  5201   011696  2041               	addwfc	(dtoa@i+1)^0,w,c
  5202   011698  6E17               	movwf	(pad@buf+1)^0,c
  5203   01169A  C035  F018         	movff	dtoa@w,pad@p
  5204   01169E  C036  F019         	movff	dtoa@w+1,pad@p+1
  5205   0116A2  EC62  F093         	call	_pad	;wreg free
  5206   0116A6  0012               	return		;funcret
  5207   0116A8                     __end_of_dtoa:
  5208                           	callstack 0
  5209                           
  5210 ;; *************** function _pad *****************
  5211 ;; Defined at:
  5212 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  5215 ;;		 -> sprintf@f(11), 
  5216 ;;  buf             2   21[COMRAM] PTR unsigned char 
  5217 ;;		 -> dbuf(32), 
  5218 ;;  p               2   23[COMRAM] int 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  w               2   28[COMRAM] int 
  5221 ;;  i               2   26[COMRAM] int 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5231 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5232 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5233 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5234 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5235 ;;Total ram usage:       11 bytes
  5236 ;; Hardware stack levels used: 1
  5237 ;; Hardware stack levels required when called: 4
  5238 ;; This function calls:
  5239 ;;		_fputc
  5240 ;;		_fputs
  5241 ;; This function is called by:
  5242 ;;		_dtoa
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text14
  5247   0126C4                     __ptext14:
  5248                           	callstack 0
  5249   0126C4                     _pad:
  5250                           	callstack 22
  5251   0126C4                     
  5252                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5253   0126C4  BE19               	btfsc	(pad@p+1)^0,7,c
  5254   0126C6  EF67  F093         	goto	u2061
  5255   0126CA  EF69  F093         	goto	u2060
  5256   0126CE                     u2061:
  5257   0126CE  EF6F  F093         	goto	l3953
  5258   0126D2                     u2060:
  5259   0126D2  C018  F01D         	movff	pad@p,pad@w
  5260   0126D6  C019  F01E         	movff	pad@p+1,pad@w+1
  5261   0126DA  EF73  F093         	goto	l1238
  5262   0126DE                     l3953:
  5263   0126DE  0E00               	movlw	0
  5264   0126E0  6E1E               	movwf	(pad@w+1)^0,c
  5265   0126E2  0E00               	movlw	0
  5266   0126E4  6E1D               	movwf	pad@w^0,c
  5267   0126E6                     l1238:
  5268                           
  5269                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5270   0126E6  0E00               	movlw	0
  5271   0126E8  6E1C               	movwf	(pad@i+1)^0,c
  5272   0126EA  0E00               	movlw	0
  5273   0126EC  6E1B               	movwf	pad@i^0,c
  5274                           
  5275                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5276   0126EE  EF85  F093         	goto	l3959
  5277   0126F2                     l3955:
  5278                           
  5279                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5280   0126F2  0E00               	movlw	0
  5281   0126F4  6E05               	movwf	(fputc@c+1)^0,c
  5282   0126F6  0E20               	movlw	32
  5283   0126F8  6E04               	movwf	fputc@c^0,c
  5284   0126FA  C014  F006         	movff	pad@fp,fputc@fp
  5285   0126FE  C015  F007         	movff	pad@fp+1,fputc@fp+1
  5286   012702  EC38  F091         	call	_fputc	;wreg free
  5287   012706                     
  5288                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5289   012706  4A1B               	infsnz	pad@i^0,f,c
  5290   012708  2A1C               	incf	(pad@i+1)^0,f,c
  5291   01270A                     l3959:
  5292                           
  5293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5294   01270A  501D               	movf	pad@w^0,w,c
  5295   01270C  5C1B               	subwf	pad@i^0,w,c
  5296   01270E  501C               	movf	(pad@i+1)^0,w,c
  5297   012710  0A80               	xorlw	128
  5298   012712  6E1A               	movwf	??_pad^0,c
  5299   012714  501E               	movf	(pad@w+1)^0,w,c
  5300   012716  0A80               	xorlw	128
  5301   012718  581A               	subwfb	??_pad^0,w,c
  5302   01271A  A0D8               	btfss	status,0,c
  5303   01271C  EF92  F093         	goto	u2071
  5304   012720  EF94  F093         	goto	u2070
  5305   012724                     u2071:
  5306   012724  EF79  F093         	goto	l3955
  5307   012728                     u2070:
  5308   012728                     
  5309                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5310   012728  C016  F00D         	movff	pad@buf,fputs@s
  5311   01272C  C017  F00E         	movff	pad@buf+1,fputs@s+1
  5312   012730  C014  F00F         	movff	pad@fp,fputs@fp
  5313   012734  C015  F010         	movff	pad@fp+1,fputs@fp+1
  5314   012738  EC50  F095         	call	_fputs	;wreg free
  5315   01273C  0012               	return		;funcret
  5316   01273E                     __end_of_pad:
  5317                           	callstack 0
  5318                           
  5319 ;; *************** function _fputs *****************
  5320 ;; Defined at:
  5321 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  s               2   12[COMRAM] PTR const unsigned char 
  5324 ;;		 -> dbuf(32), 
  5325 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  5326 ;;		 -> sprintf@f(11), 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  i               2   17[COMRAM] int 
  5329 ;;  c               1   16[COMRAM] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2   12[COMRAM] int 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5342 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5343 ;;Total ram usage:        7 bytes
  5344 ;; Hardware stack levels used: 1
  5345 ;; Hardware stack levels required when called: 3
  5346 ;; This function calls:
  5347 ;;		_fputc
  5348 ;; This function is called by:
  5349 ;;		_pad
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text15
  5354   012AA0                     __ptext15:
  5355                           	callstack 0
  5356   012AA0                     _fputs:
  5357                           	callstack 22
  5358   012AA0  0E00               	movlw	0
  5359   012AA2  6E13               	movwf	(fputs@i+1)^0,c
  5360   012AA4  0E00               	movlw	0
  5361   012AA6  6E12               	movwf	fputs@i^0,c
  5362   012AA8  EF61  F095         	goto	l3863
  5363   012AAC                     l3859:
  5364   012AAC  C011  F004         	movff	fputs@c,fputc@c
  5365   012AB0  6A05               	clrf	(fputc@c+1)^0,c
  5366   012AB2  C00F  F006         	movff	fputs@fp,fputc@fp
  5367   012AB6  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  5368   012ABA  EC38  F091         	call	_fputc	;wreg free
  5369   012ABE  4A12               	infsnz	fputs@i^0,f,c
  5370   012AC0  2A13               	incf	(fputs@i+1)^0,f,c
  5371   012AC2                     l3863:
  5372   012AC2  5012               	movf	fputs@i^0,w,c
  5373   012AC4  240D               	addwf	fputs@s^0,w,c
  5374   012AC6  6ED9               	movwf	fsr2l,c
  5375   012AC8  5013               	movf	(fputs@i+1)^0,w,c
  5376   012ACA  200E               	addwfc	(fputs@s+1)^0,w,c
  5377   012ACC  6EDA               	movwf	fsr2h,c
  5378   012ACE  50DF               	movf	indf2,w,c
  5379   012AD0  6E11               	movwf	fputs@c^0,c
  5380   012AD2  5011               	movf	fputs@c^0,w,c
  5381   012AD4  A4D8               	btfss	status,2,c
  5382   012AD6  EF6F  F095         	goto	u1911
  5383   012ADA  EF71  F095         	goto	u1910
  5384   012ADE                     u1911:
  5385   012ADE  EF56  F095         	goto	l3859
  5386   012AE2                     u1910:
  5387   012AE2  0012               	return		;funcret
  5388   012AE4                     __end_of_fputs:
  5389                           	callstack 0
  5390                           
  5391 ;; *************** function _fputc *****************
  5392 ;; Defined at:
  5393 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  c               2    3[COMRAM] int 
  5396 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  5397 ;;		 -> sprintf@f(11), 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  2    3[COMRAM] int 
  5402 ;; Registers used:
  5403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5411 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5412 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5413 ;;Total ram usage:        9 bytes
  5414 ;; Hardware stack levels used: 1
  5415 ;; Hardware stack levels required when called: 2
  5416 ;; This function calls:
  5417 ;;		_putch
  5418 ;; This function is called by:
  5419 ;;		_pad
  5420 ;;		_vfpfcnvrt
  5421 ;;		_fputs
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text16
  5426   012270                     __ptext16:
  5427                           	callstack 0
  5428   012270                     _fputc:
  5429                           	callstack 25
  5430   012270  5006               	movf	fputc@fp^0,w,c
  5431   012272  1007               	iorwf	(fputc@fp+1)^0,w,c
  5432   012274  B4D8               	btfsc	status,2,c
  5433   012276  EF3F  F091         	goto	u1871
  5434   01227A  EF41  F091         	goto	u1870
  5435   01227E                     u1871:
  5436   01227E  EF4A  F091         	goto	l3847
  5437   012282                     u1870:
  5438   012282  5006               	movf	fputc@fp^0,w,c
  5439   012284  1007               	iorwf	(fputc@fp+1)^0,w,c
  5440   012286  A4D8               	btfss	status,2,c
  5441   012288  EF48  F091         	goto	u1881
  5442   01228C  EF4A  F091         	goto	u1880
  5443   012290                     u1881:
  5444   012290  EF4F  F091         	goto	l3849
  5445   012294                     u1880:
  5446   012294                     l3847:
  5447   012294  5004               	movf	fputc@c^0,w,c
  5448   012296  EC9B  F096         	call	_putch
  5449   01229A  EF9C  F091         	goto	l1286
  5450   01229E                     l3849:
  5451   01229E  EE20 F009          	lfsr	2,9
  5452   0122A2  5006               	movf	fputc@fp^0,w,c
  5453   0122A4  26D9               	addwf	fsr2l,f,c
  5454   0122A6  5007               	movf	(fputc@fp+1)^0,w,c
  5455   0122A8  22DA               	addwfc	fsr2h,f,c
  5456   0122AA  50DE               	movf	postinc2,w,c
  5457   0122AC  10DE               	iorwf	postinc2,w,c
  5458   0122AE  B4D8               	btfsc	status,2,c
  5459   0122B0  EF5C  F091         	goto	u1891
  5460   0122B4  EF5E  F091         	goto	u1890
  5461   0122B8                     u1891:
  5462   0122B8  EF79  F091         	goto	l3853
  5463   0122BC                     u1890:
  5464   0122BC  EE20 F009          	lfsr	2,9
  5465   0122C0  5006               	movf	fputc@fp^0,w,c
  5466   0122C2  26D9               	addwf	fsr2l,f,c
  5467   0122C4  5007               	movf	(fputc@fp+1)^0,w,c
  5468   0122C6  22DA               	addwfc	fsr2h,f,c
  5469   0122C8  EE10 F003          	lfsr	1,3
  5470   0122CC  5006               	movf	fputc@fp^0,w,c
  5471   0122CE  26E1               	addwf	fsr1l,f,c
  5472   0122D0  5007               	movf	(fputc@fp+1)^0,w,c
  5473   0122D2  22E2               	addwfc	fsr1h,f,c
  5474   0122D4  50DE               	movf	postinc2,w,c
  5475   0122D6  5CE6               	subwf	postinc1,w,c
  5476   0122D8  50E6               	movf	postinc1,w,c
  5477   0122DA  0A80               	xorlw	128
  5478   0122DC  6E0C               	movwf	(??_fputc+4)^0,c
  5479   0122DE  50DE               	movf	postinc2,w,c
  5480   0122E0  0A80               	xorlw	128
  5481   0122E2  580C               	subwfb	(??_fputc+4)^0,w,c
  5482   0122E4  B0D8               	btfsc	status,0,c
  5483   0122E6  EF77  F091         	goto	u1901
  5484   0122EA  EF79  F091         	goto	u1900
  5485   0122EE                     u1901:
  5486   0122EE  EF9C  F091         	goto	l1286
  5487   0122F2                     u1900:
  5488   0122F2                     l3853:
  5489   0122F2  EE20 F003          	lfsr	2,3
  5490   0122F6  5006               	movf	fputc@fp^0,w,c
  5491   0122F8  26D9               	addwf	fsr2l,f,c
  5492   0122FA  5007               	movf	(fputc@fp+1)^0,w,c
  5493   0122FC  22DA               	addwfc	fsr2h,f,c
  5494   0122FE  CFDE F008          	movff	postinc2,??_fputc
  5495   012302  CFDD F009          	movff	postdec2,??_fputc+1
  5496   012306  C006  FFD9         	movff	fputc@fp,fsr2l
  5497   01230A  C007  FFDA         	movff	fputc@fp+1,fsr2h
  5498   01230E  CFDE F00A          	movff	postinc2,??_fputc+2
  5499   012312  CFDD F00B          	movff	postdec2,??_fputc+3
  5500   012316  5008               	movf	??_fputc^0,w,c
  5501   012318  240A               	addwf	(??_fputc+2)^0,w,c
  5502   01231A  6ED9               	movwf	fsr2l,c
  5503   01231C  5009               	movf	(??_fputc+1)^0,w,c
  5504   01231E  200B               	addwfc	(??_fputc+3)^0,w,c
  5505   012320  6EDA               	movwf	fsr2h,c
  5506   012322  C004  FFDF         	movff	fputc@c,indf2
  5507   012326  EE20 F003          	lfsr	2,3
  5508   01232A  5006               	movf	fputc@fp^0,w,c
  5509   01232C  26D9               	addwf	fsr2l,f,c
  5510   01232E  5007               	movf	(fputc@fp+1)^0,w,c
  5511   012330  22DA               	addwfc	fsr2h,f,c
  5512   012332  2ADE               	incf	postinc2,f,c
  5513   012334  0E00               	movlw	0
  5514   012336  22DD               	addwfc	postdec2,f,c
  5515   012338                     l1286:
  5516   012338  0012               	return		;funcret
  5517   01233A                     __end_of_fputc:
  5518                           	callstack 0
  5519                           
  5520 ;; *************** function _putch *****************
  5521 ;; Defined at:
  5522 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  c               1    wreg     unsigned char 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;  c               1    0[COMRAM] unsigned char 
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5540 ;;Total ram usage:        0 bytes
  5541 ;; Hardware stack levels used: 1
  5542 ;; Hardware stack levels required when called: 1
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_fputc
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text17
  5551   012D36                     __ptext17:
  5552                           	callstack 0
  5553   012D36                     _putch:
  5554                           	callstack 25
  5555   012D36  0012               	return		;funcret
  5556   012D38                     __end_of_putch:
  5557                           	callstack 0
  5558                           
  5559 ;; *************** function _abs *****************
  5560 ;; Defined at:
  5561 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  a               2   21[COMRAM] int 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  2   21[COMRAM] int 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5578 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5579 ;;Total ram usage:        4 bytes
  5580 ;; Hardware stack levels used: 1
  5581 ;; Hardware stack levels required when called: 1
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_normalise_readings
  5586 ;;		_dtoa
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text18
  5591   012B26                     __ptext18:
  5592                           	callstack 0
  5593   012B26                     _abs:
  5594                           	callstack 25
  5595   012B26  BE17               	btfsc	(abs@a+1)^0,7,c
  5596   012B28  EFA0  F095         	goto	u1920
  5597   012B2C  5017               	movf	(abs@a+1)^0,w,c
  5598   012B2E  E106               	bnz	u1921
  5599   012B30  0416               	decf	abs@a^0,w,c
  5600   012B32  B0D8               	btfsc	status,0,c
  5601   012B34  EF9E  F095         	goto	u1921
  5602   012B38  EFA0  F095         	goto	u1920
  5603   012B3C                     u1921:
  5604   012B3C  EFAE  F095         	goto	l1206
  5605   012B40                     u1920:
  5606   012B40  C016  F018         	movff	abs@a,??_abs
  5607   012B44  C017  F019         	movff	abs@a+1,??_abs+1
  5608   012B48  1E18               	comf	??_abs^0,f,c
  5609   012B4A  1E19               	comf	(??_abs+1)^0,f,c
  5610   012B4C  4A18               	infsnz	??_abs^0,f,c
  5611   012B4E  2A19               	incf	(??_abs+1)^0,f,c
  5612   012B50  C018  F016         	movff	??_abs,?_abs
  5613   012B54  C019  F017         	movff	??_abs+1,?_abs+1
  5614   012B58  EFB2  F095         	goto	l1209
  5615   012B5C                     l1206:
  5616   012B5C  C016  F016         	movff	abs@a,?_abs
  5617   012B60  C017  F017         	movff	abs@a+1,?_abs+1
  5618   012B64                     l1209:
  5619   012B64  0012               	return		;funcret
  5620   012B66                     __end_of_abs:
  5621                           	callstack 0
  5622                           
  5623 ;; *************** function ___aomod *****************
  5624 ;; Defined at:
  5625 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  dividend        8    3[COMRAM] long long 
  5628 ;;  divisor         8   11[COMRAM] long long 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  sign            1   20[COMRAM] unsigned char 
  5631 ;;  counter         1   19[COMRAM] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  8    3[COMRAM] long long 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5641 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5645 ;;Total ram usage:       18 bytes
  5646 ;; Hardware stack levels used: 1
  5647 ;; Hardware stack levels required when called: 1
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		_dtoa
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text19
  5656   011D88                     __ptext19:
  5657                           	callstack 0
  5658   011D88                     ___aomod:
  5659                           	callstack 25
  5660   011D88  0E00               	movlw	0
  5661   011D8A  6E15               	movwf	___aomod@sign^0,c
  5662   011D8C  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  5663   011D8E  EFCD  F08E         	goto	u2000
  5664   011D92  EFCB  F08E         	goto	u2001
  5665   011D96                     u2001:
  5666   011D96  EFDF  F08E         	goto	l3921
  5667   011D9A                     u2000:
  5668   011D9A  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5669   011D9C  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5670   011D9E  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5671   011DA0  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5672   011DA2  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5673   011DA4  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5674   011DA6  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5675   011DA8  6C04               	negf	___aomod@dividend^0,c
  5676   011DAA  0E00               	movlw	0
  5677   011DAC  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5678   011DAE  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5679   011DB0  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5680   011DB2  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5681   011DB4  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5682   011DB6  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5683   011DB8  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5684   011DBA  0E01               	movlw	1
  5685   011DBC  6E15               	movwf	___aomod@sign^0,c
  5686   011DBE                     l3921:
  5687   011DBE  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  5688   011DC0  EFE6  F08E         	goto	u2010
  5689   011DC4  EFE4  F08E         	goto	u2011
  5690   011DC8                     u2011:
  5691   011DC8  EFF6  F08E         	goto	l3925
  5692   011DCC                     u2010:
  5693   011DCC  1E13               	comf	(___aomod@divisor+7)^0,f,c
  5694   011DCE  1E12               	comf	(___aomod@divisor+6)^0,f,c
  5695   011DD0  1E11               	comf	(___aomod@divisor+5)^0,f,c
  5696   011DD2  1E10               	comf	(___aomod@divisor+4)^0,f,c
  5697   011DD4  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  5698   011DD6  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  5699   011DD8  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  5700   011DDA  6C0C               	negf	___aomod@divisor^0,c
  5701   011DDC  0E00               	movlw	0
  5702   011DDE  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  5703   011DE0  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  5704   011DE2  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  5705   011DE4  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  5706   011DE6  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  5707   011DE8  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  5708   011DEA  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  5709   011DEC                     l3925:
  5710   011DEC  500C               	movf	___aomod@divisor^0,w,c
  5711   011DEE  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  5712   011DF0  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  5713   011DF2  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  5714   011DF4  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  5715   011DF6  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  5716   011DF8  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  5717   011DFA  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  5718   011DFC  B4D8               	btfsc	status,2,c
  5719   011DFE  EF03  F08F         	goto	u2021
  5720   011E02  EF05  F08F         	goto	u2020
  5721   011E06                     u2021:
  5722   011E06  EF4D  F08F         	goto	l3941
  5723   011E0A                     u2020:
  5724   011E0A  0E01               	movlw	1
  5725   011E0C  6E14               	movwf	___aomod@counter^0,c
  5726   011E0E  EF13  F08F         	goto	l3931
  5727   011E12                     l3929:
  5728   011E12  90D8               	bcf	status,0,c
  5729   011E14  360C               	rlcf	___aomod@divisor^0,f,c
  5730   011E16  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  5731   011E18  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  5732   011E1A  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  5733   011E1C  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  5734   011E1E  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  5735   011E20  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  5736   011E22  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  5737   011E24  2A14               	incf	___aomod@counter^0,f,c
  5738   011E26                     l3931:
  5739   011E26  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  5740   011E28  EF18  F08F         	goto	u2031
  5741   011E2C  EF1A  F08F         	goto	u2030
  5742   011E30                     u2031:
  5743   011E30  EF09  F08F         	goto	l3929
  5744   011E34                     u2030:
  5745   011E34                     l3933:
  5746   011E34  500C               	movf	___aomod@divisor^0,w,c
  5747   011E36  5C04               	subwf	___aomod@dividend^0,w,c
  5748   011E38  500D               	movf	(___aomod@divisor+1)^0,w,c
  5749   011E3A  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  5750   011E3C  500E               	movf	(___aomod@divisor+2)^0,w,c
  5751   011E3E  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  5752   011E40  500F               	movf	(___aomod@divisor+3)^0,w,c
  5753   011E42  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  5754   011E44  5010               	movf	(___aomod@divisor+4)^0,w,c
  5755   011E46  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  5756   011E48  5011               	movf	(___aomod@divisor+5)^0,w,c
  5757   011E4A  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  5758   011E4C  5012               	movf	(___aomod@divisor+6)^0,w,c
  5759   011E4E  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  5760   011E50  5013               	movf	(___aomod@divisor+7)^0,w,c
  5761   011E52  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  5762   011E54  A0D8               	btfss	status,0,c
  5763   011E56  EF2F  F08F         	goto	u2041
  5764   011E5A  EF31  F08F         	goto	u2040
  5765   011E5E                     u2041:
  5766   011E5E  EF41  F08F         	goto	l3937
  5767   011E62                     u2040:
  5768   011E62  500C               	movf	___aomod@divisor^0,w,c
  5769   011E64  5E04               	subwf	___aomod@dividend^0,f,c
  5770   011E66  500D               	movf	(___aomod@divisor+1)^0,w,c
  5771   011E68  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  5772   011E6A  500E               	movf	(___aomod@divisor+2)^0,w,c
  5773   011E6C  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  5774   011E6E  500F               	movf	(___aomod@divisor+3)^0,w,c
  5775   011E70  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  5776   011E72  5010               	movf	(___aomod@divisor+4)^0,w,c
  5777   011E74  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  5778   011E76  5011               	movf	(___aomod@divisor+5)^0,w,c
  5779   011E78  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  5780   011E7A  5012               	movf	(___aomod@divisor+6)^0,w,c
  5781   011E7C  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  5782   011E7E  5013               	movf	(___aomod@divisor+7)^0,w,c
  5783   011E80  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  5784   011E82                     l3937:
  5785   011E82  90D8               	bcf	status,0,c
  5786   011E84  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  5787   011E86  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  5788   011E88  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  5789   011E8A  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  5790   011E8C  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  5791   011E8E  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  5792   011E90  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  5793   011E92  320C               	rrcf	___aomod@divisor^0,f,c
  5794   011E94  2E14               	decfsz	___aomod@counter^0,f,c
  5795   011E96  EF1A  F08F         	goto	l3933
  5796   011E9A                     l3941:
  5797   011E9A  5015               	movf	___aomod@sign^0,w,c
  5798   011E9C  B4D8               	btfsc	status,2,c
  5799   011E9E  EF53  F08F         	goto	u2051
  5800   011EA2  EF55  F08F         	goto	u2050
  5801   011EA6                     u2051:
  5802   011EA6  EF65  F08F         	goto	l3945
  5803   011EAA                     u2050:
  5804   011EAA  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5805   011EAC  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5806   011EAE  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5807   011EB0  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5808   011EB2  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5809   011EB4  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5810   011EB6  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5811   011EB8  6C04               	negf	___aomod@dividend^0,c
  5812   011EBA  0E00               	movlw	0
  5813   011EBC  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5814   011EBE  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5815   011EC0  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5816   011EC2  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5817   011EC4  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5818   011EC6  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5819   011EC8  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5820   011ECA                     l3945:
  5821   011ECA  C004  F004         	movff	___aomod@dividend,?___aomod
  5822   011ECE  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  5823   011ED2  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  5824   011ED6  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  5825   011EDA  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  5826   011EDE  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  5827   011EE2  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  5828   011EE6  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  5829   011EEA  0012               	return		;funcret
  5830   011EEC                     __end_of___aomod:
  5831                           	callstack 0
  5832                           
  5833 ;; *************** function ___aodiv *****************
  5834 ;; Defined at:
  5835 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  dividend        8    3[COMRAM] long long 
  5838 ;;  divisor         8   11[COMRAM] long long 
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  quotient        8   21[COMRAM] long long 
  5841 ;;  sign            1   20[COMRAM] unsigned char 
  5842 ;;  counter         1   19[COMRAM] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  8    3[COMRAM] long long 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5852 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5853 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5855 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5856 ;;Total ram usage:       26 bytes
  5857 ;; Hardware stack levels used: 1
  5858 ;; Hardware stack levels required when called: 1
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_dtoa
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text20
  5867   011922                     __ptext20:
  5868                           	callstack 0
  5869   011922                     ___aodiv:
  5870                           	callstack 25
  5871   011922  0E00               	movlw	0
  5872   011924  6E15               	movwf	___aodiv@sign^0,c
  5873   011926  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  5874   011928  EF9A  F08C         	goto	u1930
  5875   01192C  EF98  F08C         	goto	u1931
  5876   011930                     u1931:
  5877   011930  EFAC  F08C         	goto	l3877
  5878   011934                     u1930:
  5879   011934  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  5880   011936  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  5881   011938  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  5882   01193A  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  5883   01193C  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  5884   01193E  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  5885   011940  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  5886   011942  6C0C               	negf	___aodiv@divisor^0,c
  5887   011944  0E00               	movlw	0
  5888   011946  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  5889   011948  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  5890   01194A  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  5891   01194C  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  5892   01194E  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  5893   011950  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  5894   011952  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  5895   011954  0E01               	movlw	1
  5896   011956  6E15               	movwf	___aodiv@sign^0,c
  5897   011958                     l3877:
  5898   011958  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  5899   01195A  EFB3  F08C         	goto	u1940
  5900   01195E  EFB1  F08C         	goto	u1941
  5901   011962                     u1941:
  5902   011962  EFC5  F08C         	goto	l3883
  5903   011966                     u1940:
  5904   011966  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  5905   011968  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  5906   01196A  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  5907   01196C  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  5908   01196E  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  5909   011970  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  5910   011972  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  5911   011974  6C04               	negf	___aodiv@dividend^0,c
  5912   011976  0E00               	movlw	0
  5913   011978  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  5914   01197A  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  5915   01197C  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  5916   01197E  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  5917   011980  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  5918   011982  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  5919   011984  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  5920   011986  0E01               	movlw	1
  5921   011988  1A15               	xorwf	___aodiv@sign^0,f,c
  5922   01198A                     l3883:
  5923   01198A  EE20  F016         	lfsr	2,___aodiv@quotient
  5924   01198E  0E07               	movlw	7
  5925   011990                     u1951:
  5926   011990  6ADE               	clrf	postinc2,c
  5927   011992  06E8               	decf	wreg,f,c
  5928   011994  E2FD               	bc	u1951
  5929   011996  500C               	movf	___aodiv@divisor^0,w,c
  5930   011998  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  5931   01199A  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  5932   01199C  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  5933   01199E  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  5934   0119A0  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  5935   0119A2  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  5936   0119A4  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  5937   0119A6  B4D8               	btfsc	status,2,c
  5938   0119A8  EFD8  F08C         	goto	u1961
  5939   0119AC  EFDA  F08C         	goto	u1960
  5940   0119B0                     u1961:
  5941   0119B0  EF2C  F08D         	goto	l3905
  5942   0119B4                     u1960:
  5943   0119B4  0E01               	movlw	1
  5944   0119B6  6E14               	movwf	___aodiv@counter^0,c
  5945   0119B8  EFE8  F08C         	goto	l3891
  5946   0119BC                     l3889:
  5947   0119BC  90D8               	bcf	status,0,c
  5948   0119BE  360C               	rlcf	___aodiv@divisor^0,f,c
  5949   0119C0  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  5950   0119C2  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  5951   0119C4  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  5952   0119C6  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  5953   0119C8  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  5954   0119CA  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  5955   0119CC  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  5956   0119CE  2A14               	incf	___aodiv@counter^0,f,c
  5957   0119D0                     l3891:
  5958   0119D0  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  5959   0119D2  EFED  F08C         	goto	u1971
  5960   0119D6  EFEF  F08C         	goto	u1970
  5961   0119DA                     u1971:
  5962   0119DA  EFDE  F08C         	goto	l3889
  5963   0119DE                     u1970:
  5964   0119DE                     l3893:
  5965   0119DE  90D8               	bcf	status,0,c
  5966   0119E0  3616               	rlcf	___aodiv@quotient^0,f,c
  5967   0119E2  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  5968   0119E4  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  5969   0119E6  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  5970   0119E8  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  5971   0119EA  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  5972   0119EC  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  5973   0119EE  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  5974   0119F0  500C               	movf	___aodiv@divisor^0,w,c
  5975   0119F2  5C04               	subwf	___aodiv@dividend^0,w,c
  5976   0119F4  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5977   0119F6  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  5978   0119F8  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5979   0119FA  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  5980   0119FC  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5981   0119FE  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  5982   011A00  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5983   011A02  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  5984   011A04  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5985   011A06  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  5986   011A08  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5987   011A0A  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  5988   011A0C  5013               	movf	(___aodiv@divisor+7)^0,w,c
  5989   011A0E  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  5990   011A10  A0D8               	btfss	status,0,c
  5991   011A12  EF0D  F08D         	goto	u1981
  5992   011A16  EF0F  F08D         	goto	u1980
  5993   011A1A                     u1981:
  5994   011A1A  EF20  F08D         	goto	l3901
  5995   011A1E                     u1980:
  5996   011A1E  500C               	movf	___aodiv@divisor^0,w,c
  5997   011A20  5E04               	subwf	___aodiv@dividend^0,f,c
  5998   011A22  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5999   011A24  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  6000   011A26  500E               	movf	(___aodiv@divisor+2)^0,w,c
  6001   011A28  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  6002   011A2A  500F               	movf	(___aodiv@divisor+3)^0,w,c
  6003   011A2C  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  6004   011A2E  5010               	movf	(___aodiv@divisor+4)^0,w,c
  6005   011A30  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  6006   011A32  5011               	movf	(___aodiv@divisor+5)^0,w,c
  6007   011A34  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  6008   011A36  5012               	movf	(___aodiv@divisor+6)^0,w,c
  6009   011A38  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  6010   011A3A  5013               	movf	(___aodiv@divisor+7)^0,w,c
  6011   011A3C  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  6012   011A3E  8016               	bsf	___aodiv@quotient^0,0,c
  6013   011A40                     l3901:
  6014   011A40  90D8               	bcf	status,0,c
  6015   011A42  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  6016   011A44  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  6017   011A46  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  6018   011A48  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  6019   011A4A  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  6020   011A4C  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  6021   011A4E  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  6022   011A50  320C               	rrcf	___aodiv@divisor^0,f,c
  6023   011A52  2E14               	decfsz	___aodiv@counter^0,f,c
  6024   011A54  EFEF  F08C         	goto	l3893
  6025   011A58                     l3905:
  6026   011A58  5015               	movf	___aodiv@sign^0,w,c
  6027   011A5A  B4D8               	btfsc	status,2,c
  6028   011A5C  EF32  F08D         	goto	u1991
  6029   011A60  EF34  F08D         	goto	u1990
  6030   011A64                     u1991:
  6031   011A64  EF44  F08D         	goto	l3909
  6032   011A68                     u1990:
  6033   011A68  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  6034   011A6A  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  6035   011A6C  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  6036   011A6E  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  6037   011A70  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  6038   011A72  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  6039   011A74  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  6040   011A76  6C16               	negf	___aodiv@quotient^0,c
  6041   011A78  0E00               	movlw	0
  6042   011A7A  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  6043   011A7C  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  6044   011A7E  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  6045   011A80  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  6046   011A82  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  6047   011A84  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  6048   011A86  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  6049   011A88                     l3909:
  6050   011A88  C016  F004         	movff	___aodiv@quotient,?___aodiv
  6051   011A8C  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  6052   011A90  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  6053   011A94  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  6054   011A98  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  6055   011A9C  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  6056   011AA0  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  6057   011AA4  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  6058   011AA8  0012               	return		;funcret
  6059   011AAA                     __end_of___aodiv:
  6060                           	callstack 0
  6061                           
  6062 ;; *************** function _sendStringSerial4 *****************
  6063 ;; Defined at:
  6064 ;;		line 39 in file "serial.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  string          2    4[COMRAM] PTR unsigned char 
  6067 ;;		 -> main@buf(150), 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6079 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;Total ram usage:        2 bytes
  6084 ;; Hardware stack levels used: 1
  6085 ;; Hardware stack levels required when called: 2
  6086 ;; This function calls:
  6087 ;;		_sendCharSerial4
  6088 ;; This function is called by:
  6089 ;;		_main
  6090 ;;		_clear_read_calibration
  6091 ;;		_motor_response
  6092 ;;		_card_response
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text21
  6097   012B9A                     __ptext21:
  6098                           	callstack 0
  6099   012B9A                     _sendStringSerial4:
  6100                           	callstack 28
  6101   012B9A                     
  6102                           ;serial.c: 40:  while(*string != 0) {
  6103   012B9A  EFD8  F095         	goto	l4277
  6104   012B9E                     l4273:
  6105                           
  6106                           ;serial.c: 41:         sendCharSerial4(*string++);
  6107   012B9E  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6108   012BA2  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6109   012BA6  50DF               	movf	indf2,w,c
  6110   012BA8  EC7A  F096         	call	_sendCharSerial4
  6111   012BAC  4A05               	infsnz	sendStringSerial4@string^0,f,c
  6112   012BAE  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  6113   012BB0                     l4277:
  6114                           
  6115                           ;serial.c: 40:  while(*string != 0) {
  6116   012BB0  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  6117   012BB4  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6118   012BB8  50DF               	movf	indf2,w,c
  6119   012BBA  A4D8               	btfss	status,2,c
  6120   012BBC  EFE2  F095         	goto	u2371
  6121   012BC0  EFE4  F095         	goto	u2370
  6122   012BC4                     u2371:
  6123   012BC4  EFCF  F095         	goto	l4273
  6124   012BC8                     u2370:
  6125   012BC8  0012               	return		;funcret
  6126   012BCA                     __end_of_sendStringSerial4:
  6127                           	callstack 0
  6128                           
  6129 ;; *************** function _sendCharSerial4 *****************
  6130 ;; Defined at:
  6131 ;;		line 32 in file "serial.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  charToSend      1    wreg     unsigned char 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  charToSend      1    3[COMRAM] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;Total ram usage:        1 bytes
  6150 ;; Hardware stack levels used: 1
  6151 ;; Hardware stack levels required when called: 1
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_sendStringSerial4
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text22
  6160   012CF4                     __ptext22:
  6161                           	callstack 0
  6162   012CF4                     _sendCharSerial4:
  6163                           	callstack 28
  6164                           
  6165                           ;incstack = 0
  6166                           ;sendCharSerial4@charToSend stored from wreg
  6167   012CF4  6E04               	movwf	sendCharSerial4@charToSend^0,c
  6168   012CF6                     l456:
  6169   012CF6  010E               	movlb	14	; () banked
  6170   012CF8  A537               	btfss	55,2,b	;volatile
  6171   012CFA  EF81  F096         	goto	u2341
  6172   012CFE  EF83  F096         	goto	u2340
  6173   012D02                     u2341:
  6174   012D02  EF7B  F096         	goto	l456
  6175   012D06                     u2340:
  6176   012D06                     
  6177                           ; BSR set to: 14
  6178                           ;serial.c: 34:     TX4REG = charToSend;
  6179   012D06  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  6180   012D0A                     
  6181                           ; BSR set to: 14
  6182   012D0A  0012               	return		;funcret
  6183   012D0C                     __end_of_sendCharSerial4:
  6184                           	callstack 0
  6185                           
  6186 ;; *************** function _reverseFullSpeed *****************
  6187 ;; Defined at:
  6188 ;;		line 148 in file "dc_motor.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6191 ;;		 -> main@motorL(9), 
  6192 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6193 ;;		 -> main@motorR(9), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  i               2   27[COMRAM] int 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6205 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6208 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6209 ;;Total ram usage:        7 bytes
  6210 ;; Hardware stack levels used: 1
  6211 ;; Hardware stack levels required when called: 3
  6212 ;; This function calls:
  6213 ;;		_setMotorPWM
  6214 ;; This function is called by:
  6215 ;;		_main
  6216 ;;		_motor_response
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text23
  6221   012530                     __ptext23:
  6222                           	callstack 0
  6223   012530                     _reverseFullSpeed:
  6224                           	callstack 27
  6225   012530                     
  6226                           ;dc_motor.c: 148: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;d
      +                          c_motor.c: 150:     mL->direction=0;
  6227   012530  EE20 F001          	lfsr	2,1
  6228   012534  5017               	movf	reverseFullSpeed@mL^0,w,c
  6229   012536  26D9               	addwf	fsr2l,f,c
  6230   012538  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  6231   01253A  22DA               	addwfc	fsr2h,f,c
  6232   01253C  0E00               	movlw	0
  6233   01253E  6EDF               	movwf	indf2,c
  6234                           
  6235                           ;dc_motor.c: 151:     mR->direction=0;
  6236   012540  EE20 F001          	lfsr	2,1
  6237   012544  5019               	movf	reverseFullSpeed@mR^0,w,c
  6238   012546  26D9               	addwf	fsr2l,f,c
  6239   012548  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  6240   01254A  22DA               	addwfc	fsr2h,f,c
  6241   01254C  0E00               	movlw	0
  6242   01254E  6EDF               	movwf	indf2,c
  6243   012550                     
  6244                           ;dc_motor.c: 152:     for(int i=0;i<40;i+=10){
  6245   012550  0E00               	movlw	0
  6246   012552  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  6247   012554  0E00               	movlw	0
  6248   012556  6E1C               	movwf	reverseFullSpeed@i^0,c
  6249   012558                     l4247:
  6250                           
  6251                           ;dc_motor.c: 153:         mL->power=i;
  6252   012558  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  6253   01255C  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  6254   012560  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6255                           
  6256                           ;dc_motor.c: 154:         mR->power=i;
  6257   012564  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  6258   012568  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  6259   01256C  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6260   012570                     
  6261                           ;dc_motor.c: 155:         setMotorPWM(mL);
  6262   012570  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  6263   012574  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  6264   012578  EC0E  F08E         	call	_setMotorPWM	;wreg free
  6265   01257C                     
  6266                           ;dc_motor.c: 156:         setMotorPWM(mR);
  6267   01257C  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  6268   012580  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  6269   012584  EC0E  F08E         	call	_setMotorPWM	;wreg free
  6270   012588                     
  6271                           ;dc_motor.c: 157:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6272   012588  0ED0               	movlw	208
  6273   01258A  6E1B               	movwf	??_reverseFullSpeed^0,c
  6274   01258C  0ECA               	movlw	202
  6275   01258E                     u2957:
  6276   01258E  2EE8               	decfsz	wreg,f,c
  6277   012590  D7FE               	bra	u2957
  6278   012592  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  6279   012594  D7FC               	bra	u2957
  6280   012596                     
  6281                           ;dc_motor.c: 158:     }
  6282   012596  0E0A               	movlw	10
  6283   012598  261C               	addwf	reverseFullSpeed@i^0,f,c
  6284   01259A  0E00               	movlw	0
  6285   01259C  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  6286   01259E  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  6287   0125A0  EFDB  F092         	goto	u2361
  6288   0125A4  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  6289   0125A6  E109               	bnz	u2360
  6290   0125A8  0E28               	movlw	40
  6291   0125AA  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  6292   0125AC  A0D8               	btfss	status,0,c
  6293   0125AE  EFDB  F092         	goto	u2361
  6294   0125B2  EFDD  F092         	goto	u2360
  6295   0125B6                     u2361:
  6296   0125B6  EFAC  F092         	goto	l4247
  6297   0125BA                     u2360:
  6298   0125BA  0012               	return		;funcret
  6299   0125BC                     __end_of_reverseFullSpeed:
  6300                           	callstack 0
  6301                           
  6302 ;; *************** function _home_response *****************
  6303 ;; Defined at:
  6304 ;;		line 257 in file "colour_identify.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  card            1    wreg     enum E14551
  6307 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  6308 ;;		 -> main@motorL(9), 
  6309 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  6310 ;;		 -> main@motorR(9), 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  card            1   37[COMRAM] enum E14551
  6313 ;;  i               1   36[COMRAM] enum E14551
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      void 
  6316 ;; Registers used:
  6317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6323 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6325 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6326 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6327 ;;Total ram usage:        8 bytes
  6328 ;; Hardware stack levels used: 1
  6329 ;; Hardware stack levels required when called: 4
  6330 ;; This function calls:
  6331 ;;		_fullSpeedAhead
  6332 ;;		_stop
  6333 ;;		_turnLeft45
  6334 ;;		_turnRight45
  6335 ;; This function is called by:
  6336 ;;		_motor_response
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text24
  6341   010CA6                     __ptext24:
  6342                           	callstack 0
  6343   010CA6                     _home_response:
  6344                           	callstack 24
  6345                           
  6346                           ;incstack = 0
  6347                           ;home_response@card stored from wreg
  6348   010CA6  6E26               	movwf	home_response@card^0,c
  6349   010CA8                     
  6350                           ;colour_identify.c: 258:     for(colour i = RED; i<= card; i++){
  6351   010CA8  0E00               	movlw	0
  6352   010CAA  6E25               	movwf	home_response@i^0,c
  6353   010CAC                     l392:
  6354                           
  6355                           ;colour_identify.c: 259:         LATDbits.LATD7 = 1;
  6356   010CAC  8E7C               	bsf	124,7,c	;volatile
  6357   010CAE                     
  6358                           ;colour_identify.c: 260:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6359   010CAE  0E09               	movlw	9
  6360   010CB0  6E24               	movwf	(??_home_response+1)^0,c
  6361   010CB2  0E1E               	movlw	30
  6362   010CB4  6E23               	movwf	??_home_response^0,c
  6363   010CB6  0EE4               	movlw	228
  6364   010CB8                     u2967:
  6365   010CB8  2EE8               	decfsz	wreg,f,c
  6366   010CBA  D7FE               	bra	u2967
  6367   010CBC  2E23               	decfsz	??_home_response^0,f,c
  6368   010CBE  D7FC               	bra	u2967
  6369   010CC0  2E24               	decfsz	(??_home_response+1)^0,f,c
  6370   010CC2  D7FA               	bra	u2967
  6371   010CC4  D000               	nop2	
  6372   010CC6                     
  6373                           ;colour_identify.c: 261:         LATDbits.LATD7 = 0;
  6374   010CC6  9E7C               	bcf	124,7,c	;volatile
  6375                           
  6376                           ;colour_identify.c: 262:         _delay((unsigned long)((100)*(64000000/4000.0)));
  6377   010CC8  0E09               	movlw	9
  6378   010CCA  6E24               	movwf	(??_home_response+1)^0,c
  6379   010CCC  0E1E               	movlw	30
  6380   010CCE  6E23               	movwf	??_home_response^0,c
  6381   010CD0  0EE4               	movlw	228
  6382   010CD2                     u2977:
  6383   010CD2  2EE8               	decfsz	wreg,f,c
  6384   010CD4  D7FE               	bra	u2977
  6385   010CD6  2E23               	decfsz	??_home_response^0,f,c
  6386   010CD8  D7FC               	bra	u2977
  6387   010CDA  2E24               	decfsz	(??_home_response+1)^0,f,c
  6388   010CDC  D7FA               	bra	u2977
  6389   010CDE  D000               	nop2	
  6390   010CE0                     
  6391                           ;colour_identify.c: 263:     }
  6392   010CE0  2A25               	incf	home_response@i^0,f,c
  6393   010CE2  5025               	movf	home_response@i^0,w,c
  6394   010CE4  5C26               	subwf	home_response@card^0,w,c
  6395   010CE6  B0D8               	btfsc	status,0,c
  6396   010CE8  EF78  F086         	goto	u2381
  6397   010CEC  EF7A  F086         	goto	u2380
  6398   010CF0                     u2381:
  6399   010CF0  EF56  F086         	goto	l392
  6400   010CF4                     u2380:
  6401   010CF4  EF76  F088         	goto	l4345
  6402   010CF8                     l4291:
  6403                           
  6404                           ;colour_identify.c: 266:             turnLeft45(mL,mR);
  6405   010CF8  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6406   010CFC  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6407   010D00  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6408   010D04  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6409   010D08  ECF4  F091         	call	_turnLeft45	;wreg free
  6410                           
  6411                           ;colour_identify.c: 267:             stop(mL,mR);
  6412   010D0C  C01F  F017         	movff	home_response@mL,stop@mL
  6413   010D10  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6414   010D14  C021  F019         	movff	home_response@mR,stop@mR
  6415   010D18  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6416   010D1C  EC0B  F094         	call	_stop	;wreg free
  6417                           
  6418                           ;colour_identify.c: 268:             turnLeft45(mL,mR);
  6419   010D20  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6420   010D24  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6421   010D28  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6422   010D2C  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6423   010D30  ECF4  F091         	call	_turnLeft45	;wreg free
  6424                           
  6425                           ;colour_identify.c: 269:             stop(mL,mR);
  6426   010D34  C01F  F017         	movff	home_response@mL,stop@mL
  6427   010D38  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6428   010D3C  C021  F019         	movff	home_response@mR,stop@mR
  6429   010D40  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6430   010D44  EC0B  F094         	call	_stop	;wreg free
  6431                           
  6432                           ;colour_identify.c: 270:             break;
  6433   010D48  EFA3  F088         	goto	l405
  6434   010D4C                     l4293:
  6435                           
  6436                           ;colour_identify.c: 272:             turnRight45(mL,mR);
  6437   010D4C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6438   010D50  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6439   010D54  C021  F019         	movff	home_response@mR,turnRight45@mR
  6440   010D58  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6441   010D5C  EC9D  F091         	call	_turnRight45	;wreg free
  6442                           
  6443                           ;colour_identify.c: 273:             stop(mL,mR);
  6444   010D60  C01F  F017         	movff	home_response@mL,stop@mL
  6445   010D64  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6446   010D68  C021  F019         	movff	home_response@mR,stop@mR
  6447   010D6C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6448   010D70  EC0B  F094         	call	_stop	;wreg free
  6449                           
  6450                           ;colour_identify.c: 274:             turnRight45(mL,mR);
  6451   010D74  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6452   010D78  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6453   010D7C  C021  F019         	movff	home_response@mR,turnRight45@mR
  6454   010D80  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6455   010D84  EC9D  F091         	call	_turnRight45	;wreg free
  6456                           
  6457                           ;colour_identify.c: 275:             stop(mL,mR);
  6458   010D88  C01F  F017         	movff	home_response@mL,stop@mL
  6459   010D8C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6460   010D90  C021  F019         	movff	home_response@mR,stop@mR
  6461   010D94  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6462   010D98  EC0B  F094         	call	_stop	;wreg free
  6463                           
  6464                           ;colour_identify.c: 276:             break;
  6465   010D9C  EFA3  F088         	goto	l405
  6466   010DA0                     l4295:
  6467                           
  6468                           ;colour_identify.c: 278:             turnRight45(mL,mR);
  6469   010DA0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6470   010DA4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6471   010DA8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6472   010DAC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6473   010DB0  EC9D  F091         	call	_turnRight45	;wreg free
  6474                           
  6475                           ;colour_identify.c: 279:             stop(mL,mR);
  6476   010DB4  C01F  F017         	movff	home_response@mL,stop@mL
  6477   010DB8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6478   010DBC  C021  F019         	movff	home_response@mR,stop@mR
  6479   010DC0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6480   010DC4  EC0B  F094         	call	_stop	;wreg free
  6481                           
  6482                           ;colour_identify.c: 280:             turnRight45(mL,mR);
  6483   010DC8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6484   010DCC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6485   010DD0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6486   010DD4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6487   010DD8  EC9D  F091         	call	_turnRight45	;wreg free
  6488                           
  6489                           ;colour_identify.c: 281:             stop(mL,mR);
  6490   010DDC  C01F  F017         	movff	home_response@mL,stop@mL
  6491   010DE0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6492   010DE4  C021  F019         	movff	home_response@mR,stop@mR
  6493   010DE8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6494   010DEC  EC0B  F094         	call	_stop	;wreg free
  6495                           
  6496                           ;colour_identify.c: 282:             turnRight45(mL,mR);
  6497   010DF0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6498   010DF4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6499   010DF8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6500   010DFC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6501   010E00  EC9D  F091         	call	_turnRight45	;wreg free
  6502                           
  6503                           ;colour_identify.c: 283:             stop(mL,mR);
  6504   010E04  C01F  F017         	movff	home_response@mL,stop@mL
  6505   010E08  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6506   010E0C  C021  F019         	movff	home_response@mR,stop@mR
  6507   010E10  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6508   010E14  EC0B  F094         	call	_stop	;wreg free
  6509                           
  6510                           ;colour_identify.c: 284:             turnRight45(mL,mR);
  6511   010E18  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6512   010E1C  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6513   010E20  C021  F019         	movff	home_response@mR,turnRight45@mR
  6514   010E24  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6515   010E28  EC9D  F091         	call	_turnRight45	;wreg free
  6516                           
  6517                           ;colour_identify.c: 285:             stop(mL,mR);
  6518   010E2C  C01F  F017         	movff	home_response@mL,stop@mL
  6519   010E30  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6520   010E34  C021  F019         	movff	home_response@mR,stop@mR
  6521   010E38  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6522   010E3C  EC0B  F094         	call	_stop	;wreg free
  6523                           
  6524                           ;colour_identify.c: 286:             break;
  6525   010E40  EFA3  F088         	goto	l405
  6526   010E44                     l4297:
  6527                           
  6528                           ;colour_identify.c: 288:             stop(mL,mR);
  6529   010E44  C01F  F017         	movff	home_response@mL,stop@mL
  6530   010E48  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6531   010E4C  C021  F019         	movff	home_response@mR,stop@mR
  6532   010E50  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6533   010E54  EC0B  F094         	call	_stop	;wreg free
  6534                           
  6535                           ;colour_identify.c: 289:             turnRight45(mL,mR);
  6536   010E58  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6537   010E5C  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6538   010E60  C021  F019         	movff	home_response@mR,turnRight45@mR
  6539   010E64  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6540   010E68  EC9D  F091         	call	_turnRight45	;wreg free
  6541                           
  6542                           ;colour_identify.c: 290:             stop(mL,mR);
  6543   010E6C  C01F  F017         	movff	home_response@mL,stop@mL
  6544   010E70  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6545   010E74  C021  F019         	movff	home_response@mR,stop@mR
  6546   010E78  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6547   010E7C  EC0B  F094         	call	_stop	;wreg free
  6548                           
  6549                           ;colour_identify.c: 291:             turnRight45(mL,mR);
  6550   010E80  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6551   010E84  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6552   010E88  C021  F019         	movff	home_response@mR,turnRight45@mR
  6553   010E8C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6554   010E90  EC9D  F091         	call	_turnRight45	;wreg free
  6555                           
  6556                           ;colour_identify.c: 292:             stop(mL,mR);
  6557   010E94  C01F  F017         	movff	home_response@mL,stop@mL
  6558   010E98  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6559   010E9C  C021  F019         	movff	home_response@mR,stop@mR
  6560   010EA0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6561   010EA4  EC0B  F094         	call	_stop	;wreg free
  6562                           
  6563                           ;colour_identify.c: 293:             fullSpeedAhead(mL,mR);
  6564   010EA8  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6565   010EAC  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6566   010EB0  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6567   010EB4  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6568   010EB8  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  6569   010EBC                     l4299:
  6570                           
  6571                           ;colour_identify.c: 294:             _delay((unsigned long)((1700)*(64000000/4000.0)));
  6572   010EBC  0E8A               	movlw	138
  6573   010EBE  6E24               	movwf	(??_home_response+1)^0,c
  6574   010EC0  0EFD               	movlw	253
  6575   010EC2  6E23               	movwf	??_home_response^0,c
  6576   010EC4  0E4F               	movlw	79
  6577   010EC6                     u2987:
  6578   010EC6  2EE8               	decfsz	wreg,f,c
  6579   010EC8  D7FE               	bra	u2987
  6580   010ECA  2E23               	decfsz	??_home_response^0,f,c
  6581   010ECC  D7FC               	bra	u2987
  6582   010ECE  2E24               	decfsz	(??_home_response+1)^0,f,c
  6583   010ED0  D7FA               	bra	u2987
  6584   010ED2  F000               	nop	
  6585   010ED4                     
  6586                           ;colour_identify.c: 295:             turnRight45(mL,mR);
  6587   010ED4  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6588   010ED8  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6589   010EDC  C021  F019         	movff	home_response@mR,turnRight45@mR
  6590   010EE0  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6591   010EE4  EC9D  F091         	call	_turnRight45	;wreg free
  6592   010EE8                     
  6593                           ;colour_identify.c: 296:             stop(mL,mR);
  6594   010EE8  C01F  F017         	movff	home_response@mL,stop@mL
  6595   010EEC  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6596   010EF0  C021  F019         	movff	home_response@mR,stop@mR
  6597   010EF4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6598   010EF8  EC0B  F094         	call	_stop	;wreg free
  6599   010EFC                     
  6600                           ;colour_identify.c: 297:             turnRight45(mL,mR);
  6601   010EFC  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6602   010F00  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6603   010F04  C021  F019         	movff	home_response@mR,turnRight45@mR
  6604   010F08  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6605   010F0C  EC9D  F091         	call	_turnRight45	;wreg free
  6606   010F10                     
  6607                           ;colour_identify.c: 298:             stop(mL,mR);
  6608   010F10  C01F  F017         	movff	home_response@mL,stop@mL
  6609   010F14  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6610   010F18  C021  F019         	movff	home_response@mR,stop@mR
  6611   010F1C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6612   010F20  EC0B  F094         	call	_stop	;wreg free
  6613   010F24                     
  6614                           ;colour_identify.c: 299:             turnRight45(mL,mR);
  6615   010F24  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6616   010F28  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6617   010F2C  C021  F019         	movff	home_response@mR,turnRight45@mR
  6618   010F30  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6619   010F34  EC9D  F091         	call	_turnRight45	;wreg free
  6620   010F38                     
  6621                           ;colour_identify.c: 300:             stop(mL,mR);
  6622   010F38  C01F  F017         	movff	home_response@mL,stop@mL
  6623   010F3C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6624   010F40  C021  F019         	movff	home_response@mR,stop@mR
  6625   010F44  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6626   010F48  EC0B  F094         	call	_stop	;wreg free
  6627   010F4C                     
  6628                           ;colour_identify.c: 301:             turnRight45(mL,mR);
  6629   010F4C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6630   010F50  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6631   010F54  C021  F019         	movff	home_response@mR,turnRight45@mR
  6632   010F58  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6633   010F5C  EC9D  F091         	call	_turnRight45	;wreg free
  6634   010F60                     l4315:
  6635                           
  6636                           ;colour_identify.c: 302:             stop(mL,mR);
  6637   010F60  C01F  F017         	movff	home_response@mL,stop@mL
  6638   010F64  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6639   010F68  C021  F019         	movff	home_response@mR,stop@mR
  6640   010F6C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6641   010F70  EC0B  F094         	call	_stop	;wreg free
  6642                           
  6643                           ;colour_identify.c: 303:             break;
  6644   010F74  EFA3  F088         	goto	l405
  6645   010F78                     l4317:
  6646                           
  6647                           ;colour_identify.c: 305:             stop(mL,mR);
  6648   010F78  C01F  F017         	movff	home_response@mL,stop@mL
  6649   010F7C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6650   010F80  C021  F019         	movff	home_response@mR,stop@mR
  6651   010F84  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6652   010F88  EC0B  F094         	call	_stop	;wreg free
  6653                           
  6654                           ;colour_identify.c: 306:             turnLeft45(mL,mR);
  6655   010F8C  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6656   010F90  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6657   010F94  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6658   010F98  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6659   010F9C  ECF4  F091         	call	_turnLeft45	;wreg free
  6660                           
  6661                           ;colour_identify.c: 307:             stop(mL,mR);
  6662   010FA0  C01F  F017         	movff	home_response@mL,stop@mL
  6663   010FA4  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6664   010FA8  C021  F019         	movff	home_response@mR,stop@mR
  6665   010FAC  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6666   010FB0  EC0B  F094         	call	_stop	;wreg free
  6667                           
  6668                           ;colour_identify.c: 308:             turnLeft45(mL,mR);
  6669   010FB4  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6670   010FB8  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6671   010FBC  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6672   010FC0  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6673   010FC4  ECF4  F091         	call	_turnLeft45	;wreg free
  6674                           
  6675                           ;colour_identify.c: 309:             stop(mL,mR);
  6676   010FC8  C01F  F017         	movff	home_response@mL,stop@mL
  6677   010FCC  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6678   010FD0  C021  F019         	movff	home_response@mR,stop@mR
  6679   010FD4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6680   010FD8  EC0B  F094         	call	_stop	;wreg free
  6681                           
  6682                           ;colour_identify.c: 310:             fullSpeedAhead(mL,mR);
  6683   010FDC  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6684   010FE0  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6685   010FE4  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6686   010FE8  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6687   010FEC  EC4B  F092         	call	_fullSpeedAhead	;wreg free
  6688   010FF0  EF5E  F087         	goto	l4299
  6689   010FF4                     l4337:
  6690                           
  6691                           ;colour_identify.c: 322:             turnLeft45(mL,mR);
  6692   010FF4  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6693   010FF8  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6694   010FFC  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6695   011000  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6696   011004  ECF4  F091         	call	_turnLeft45	;wreg free
  6697                           
  6698                           ;colour_identify.c: 323:             stop(mL,mR);
  6699   011008  C01F  F017         	movff	home_response@mL,stop@mL
  6700   01100C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6701   011010  C021  F019         	movff	home_response@mR,stop@mR
  6702   011014  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6703   011018  EC0B  F094         	call	_stop	;wreg free
  6704                           
  6705                           ;colour_identify.c: 324:             turnLeft45(mL,mR);
  6706   01101C  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6707   011020  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6708   011024  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6709   011028  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6710   01102C  ECF4  F091         	call	_turnLeft45	;wreg free
  6711                           
  6712                           ;colour_identify.c: 325:             stop(mL,mR);
  6713   011030  C01F  F017         	movff	home_response@mL,stop@mL
  6714   011034  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6715   011038  C021  F019         	movff	home_response@mR,stop@mR
  6716   01103C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6717   011040  EC0B  F094         	call	_stop	;wreg free
  6718                           
  6719                           ;colour_identify.c: 326:             turnLeft45(mL,mR);
  6720   011044  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6721   011048  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6722   01104C  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6723   011050  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6724   011054  ECF4  F091         	call	_turnLeft45	;wreg free
  6725                           
  6726                           ;colour_identify.c: 327:             stop(mL,mR);
  6727   011058  C01F  F017         	movff	home_response@mL,stop@mL
  6728   01105C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6729   011060  C021  F019         	movff	home_response@mR,stop@mR
  6730   011064  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6731   011068  EC0B  F094         	call	_stop	;wreg free
  6732                           
  6733                           ;colour_identify.c: 328:             break;
  6734   01106C  EFA3  F088         	goto	l405
  6735   011070                     l4339:
  6736                           
  6737                           ;colour_identify.c: 330:             turnRight45(mL,mR);
  6738   011070  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6739   011074  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6740   011078  C021  F019         	movff	home_response@mR,turnRight45@mR
  6741   01107C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6742   011080  EC9D  F091         	call	_turnRight45	;wreg free
  6743                           
  6744                           ;colour_identify.c: 331:             stop(mL,mR);
  6745   011084  C01F  F017         	movff	home_response@mL,stop@mL
  6746   011088  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6747   01108C  C021  F019         	movff	home_response@mR,stop@mR
  6748   011090  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6749   011094  EC0B  F094         	call	_stop	;wreg free
  6750                           
  6751                           ;colour_identify.c: 332:             turnRight45(mL,mR);
  6752   011098  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6753   01109C  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6754   0110A0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6755   0110A4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6756   0110A8  EC9D  F091         	call	_turnRight45	;wreg free
  6757                           
  6758                           ;colour_identify.c: 333:             stop(mL,mR);
  6759   0110AC  C01F  F017         	movff	home_response@mL,stop@mL
  6760   0110B0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6761   0110B4  C021  F019         	movff	home_response@mR,stop@mR
  6762   0110B8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6763   0110BC  EC0B  F094         	call	_stop	;wreg free
  6764                           
  6765                           ;colour_identify.c: 334:             turnRight45(mL,mR);
  6766   0110C0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6767   0110C4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6768   0110C8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6769   0110CC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6770   0110D0  EC9D  F091         	call	_turnRight45	;wreg free
  6771                           
  6772                           ;colour_identify.c: 335:             stop(mL,mR);
  6773   0110D4  C01F  F017         	movff	home_response@mL,stop@mL
  6774   0110D8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6775   0110DC  C021  F019         	movff	home_response@mR,stop@mR
  6776   0110E0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6777   0110E4  EC0B  F094         	call	_stop	;wreg free
  6778                           
  6779                           ;colour_identify.c: 336:             break;
  6780   0110E8  EFA3  F088         	goto	l405
  6781   0110EC                     l4345:
  6782   0110EC  5026               	movf	home_response@card^0,w,c
  6783   0110EE  6E23               	movwf	??_home_response^0,c
  6784   0110F0  6A24               	clrf	(??_home_response+1)^0,c
  6785                           
  6786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6787                           ; Switch size 1, requested type "simple"
  6788                           ; Number of cases is 1, Range of values is 0 to 0
  6789                           ; switch strategies available:
  6790                           ; Name         Instructions Cycles
  6791                           ; simple_byte            4     3 (average)
  6792                           ;	Chosen strategy is simple_byte
  6793   0110F2  5024               	movf	(??_home_response+1)^0,w,c
  6794   0110F4  0A00               	xorlw	0	; case 0
  6795   0110F6  B4D8               	btfsc	status,2,c
  6796   0110F8  EF80  F088         	goto	l5059
  6797   0110FC  EFA3  F088         	goto	l405
  6798   011100                     l5059:
  6799                           
  6800                           ; Switch size 1, requested type "simple"
  6801                           ; Number of cases is 8, Range of values is 0 to 7
  6802                           ; switch strategies available:
  6803                           ; Name         Instructions Cycles
  6804                           ; simple_byte           25    13 (average)
  6805                           ;	Chosen strategy is simple_byte
  6806   011100  5023               	movf	??_home_response^0,w,c
  6807   011102  0A00               	xorlw	0	; case 0
  6808   011104  B4D8               	btfsc	status,2,c
  6809   011106  EF7C  F086         	goto	l4291
  6810   01110A  0A01               	xorlw	1	; case 1
  6811   01110C  B4D8               	btfsc	status,2,c
  6812   01110E  EFA6  F086         	goto	l4293
  6813   011112  0A03               	xorlw	3	; case 2
  6814   011114  B4D8               	btfsc	status,2,c
  6815   011116  EFD0  F086         	goto	l4295
  6816   01111A  0A01               	xorlw	1	; case 3
  6817   01111C  B4D8               	btfsc	status,2,c
  6818   01111E  EF22  F087         	goto	l4297
  6819   011122  0A07               	xorlw	7	; case 4
  6820   011124  B4D8               	btfsc	status,2,c
  6821   011126  EFBC  F087         	goto	l4317
  6822   01112A  0A01               	xorlw	1	; case 5
  6823   01112C  B4D8               	btfsc	status,2,c
  6824   01112E  EFFA  F087         	goto	l4337
  6825   011132  0A03               	xorlw	3	; case 6
  6826   011134  B4D8               	btfsc	status,2,c
  6827   011136  EF38  F088         	goto	l4339
  6828   01113A  0A01               	xorlw	1	; case 7
  6829   01113C  B4D8               	btfsc	status,2,c
  6830   01113E  EFB0  F087         	goto	l4315
  6831   011142  EFA3  F088         	goto	l405
  6832   011146                     l405:
  6833   011146  0012               	return		;funcret
  6834   011148                     __end_of_home_response:
  6835                           	callstack 0
  6836                           
  6837 ;; *************** function _turnRight45 *****************
  6838 ;; Defined at:
  6839 ;;		line 118 in file "dc_motor.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6842 ;;		 -> main@motorL(9), 
  6843 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6844 ;;		 -> main@motorR(9), 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  i               2   28[COMRAM] int 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6859 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6860 ;;Total ram usage:        8 bytes
  6861 ;; Hardware stack levels used: 1
  6862 ;; Hardware stack levels required when called: 3
  6863 ;; This function calls:
  6864 ;;		_setMotorPWM
  6865 ;; This function is called by:
  6866 ;;		_motor_response
  6867 ;;		_home_response
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text25
  6872   01233A                     __ptext25:
  6873                           	callstack 0
  6874   01233A                     _turnRight45:
  6875                           	callstack 25
  6876   01233A                     
  6877                           ;dc_motor.c: 118: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_mot
      +                          or.c: 120:     mL->direction=1;
  6878   01233A  EE20 F001          	lfsr	2,1
  6879   01233E  5017               	movf	turnRight45@mL^0,w,c
  6880   012340  26D9               	addwf	fsr2l,f,c
  6881   012342  5018               	movf	(turnRight45@mL+1)^0,w,c
  6882   012344  22DA               	addwfc	fsr2h,f,c
  6883   012346  0E01               	movlw	1
  6884   012348  6EDF               	movwf	indf2,c
  6885                           
  6886                           ;dc_motor.c: 121:     mR->direction=0;
  6887   01234A  EE20 F001          	lfsr	2,1
  6888   01234E  5019               	movf	turnRight45@mR^0,w,c
  6889   012350  26D9               	addwf	fsr2l,f,c
  6890   012352  501A               	movf	(turnRight45@mR+1)^0,w,c
  6891   012354  22DA               	addwfc	fsr2h,f,c
  6892   012356  0E00               	movlw	0
  6893   012358  6EDF               	movwf	indf2,c
  6894   01235A                     
  6895                           ;dc_motor.c: 122:     for(int i=0;i<80;i+=10){
  6896   01235A  0E00               	movlw	0
  6897   01235C  6E1E               	movwf	(turnRight45@i+1)^0,c
  6898   01235E  0E00               	movlw	0
  6899   012360  6E1D               	movwf	turnRight45@i^0,c
  6900   012362                     l4165:
  6901                           
  6902                           ;dc_motor.c: 124:         mR->power=i;
  6903   012362  C019  FFD9         	movff	turnRight45@mR,fsr2l
  6904   012366  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  6905   01236A  C01D  FFDF         	movff	turnRight45@i,indf2
  6906                           
  6907                           ;dc_motor.c: 125:         mL->power=i;
  6908   01236E  C017  FFD9         	movff	turnRight45@mL,fsr2l
  6909   012372  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  6910   012376  C01D  FFDF         	movff	turnRight45@i,indf2
  6911   01237A                     
  6912                           ;dc_motor.c: 126:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6913   01237A  0E02               	movlw	2
  6914   01237C  6E1C               	movwf	(??_turnRight45+1)^0,c
  6915   01237E  0E38               	movlw	56
  6916   012380  6E1B               	movwf	??_turnRight45^0,c
  6917   012382  0EAD               	movlw	173
  6918   012384                     u2997:
  6919   012384  2EE8               	decfsz	wreg,f,c
  6920   012386  D7FE               	bra	u2997
  6921   012388  2E1B               	decfsz	??_turnRight45^0,f,c
  6922   01238A  D7FC               	bra	u2997
  6923   01238C  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6924   01238E  D7FA               	bra	u2997
  6925   012390  F000               	nop	
  6926   012392                     
  6927                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6928   012392  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  6929   012396  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  6930   01239A  EC0E  F08E         	call	_setMotorPWM	;wreg free
  6931   01239E                     
  6932                           ;dc_motor.c: 128:         setMotorPWM(mR);}
  6933   01239E  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  6934   0123A2  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  6935   0123A6  EC0E  F08E         	call	_setMotorPWM	;wreg free
  6936   0123AA  0E0A               	movlw	10
  6937   0123AC  261D               	addwf	turnRight45@i^0,f,c
  6938   0123AE  0E00               	movlw	0
  6939   0123B0  221E               	addwfc	(turnRight45@i+1)^0,f,c
  6940   0123B2  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  6941   0123B4  EFE5  F091         	goto	u2321
  6942   0123B8  501E               	movf	(turnRight45@i+1)^0,w,c
  6943   0123BA  E109               	bnz	u2320
  6944   0123BC  0E50               	movlw	80
  6945   0123BE  5C1D               	subwf	turnRight45@i^0,w,c
  6946   0123C0  A0D8               	btfss	status,0,c
  6947   0123C2  EFE5  F091         	goto	u2321
  6948   0123C6  EFE7  F091         	goto	u2320
  6949   0123CA                     u2321:
  6950   0123CA  EFB1  F091         	goto	l4165
  6951   0123CE                     u2320:
  6952   0123CE                     
  6953                           ;dc_motor.c: 129:     _delay((unsigned long)((68)*(64000000/4000.0)));
  6954   0123CE  0E06               	movlw	6
  6955   0123D0  6E1C               	movwf	(??_turnRight45+1)^0,c
  6956   0123D2  0E85               	movlw	133
  6957   0123D4  6E1B               	movwf	??_turnRight45^0,c
  6958   0123D6  0EF7               	movlw	247
  6959   0123D8                     u3007:
  6960   0123D8  2EE8               	decfsz	wreg,f,c
  6961   0123DA  D7FE               	bra	u3007
  6962   0123DC  2E1B               	decfsz	??_turnRight45^0,f,c
  6963   0123DE  D7FC               	bra	u3007
  6964   0123E0  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6965   0123E2  D7FA               	bra	u3007
  6966   0123E4  F000               	nop	
  6967   0123E6  0012               	return		;funcret
  6968   0123E8                     __end_of_turnRight45:
  6969                           	callstack 0
  6970                           
  6971 ;; *************** function _turnLeft45 *****************
  6972 ;; Defined at:
  6973 ;;		line 103 in file "dc_motor.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6976 ;;		 -> main@motorL(9), 
  6977 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6978 ;;		 -> main@motorR(9), 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  i               2   28[COMRAM] int 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      void 
  6983 ;; Registers used:
  6984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6993 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6994 ;;Total ram usage:        8 bytes
  6995 ;; Hardware stack levels used: 1
  6996 ;; Hardware stack levels required when called: 3
  6997 ;; This function calls:
  6998 ;;		_setMotorPWM
  6999 ;; This function is called by:
  7000 ;;		_motor_response
  7001 ;;		_home_response
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text26
  7006   0123E8                     __ptext26:
  7007                           	callstack 0
  7008   0123E8                     _turnLeft45:
  7009                           	callstack 25
  7010   0123E8                     
  7011                           ;dc_motor.c: 103: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 104: {;dc_moto
      +                          r.c: 105:     mL->direction=0;
  7012   0123E8  EE20 F001          	lfsr	2,1
  7013   0123EC  5017               	movf	turnLeft45@mL^0,w,c
  7014   0123EE  26D9               	addwf	fsr2l,f,c
  7015   0123F0  5018               	movf	(turnLeft45@mL+1)^0,w,c
  7016   0123F2  22DA               	addwfc	fsr2h,f,c
  7017   0123F4  0E00               	movlw	0
  7018   0123F6  6EDF               	movwf	indf2,c
  7019                           
  7020                           ;dc_motor.c: 106:     mR->direction=1;
  7021   0123F8  EE20 F001          	lfsr	2,1
  7022   0123FC  5019               	movf	turnLeft45@mR^0,w,c
  7023   0123FE  26D9               	addwf	fsr2l,f,c
  7024   012400  501A               	movf	(turnLeft45@mR+1)^0,w,c
  7025   012402  22DA               	addwfc	fsr2h,f,c
  7026   012404  0E01               	movlw	1
  7027   012406  6EDF               	movwf	indf2,c
  7028   012408                     
  7029                           ;dc_motor.c: 107:     for(int i=0;i<80;i+=10){
  7030   012408  0E00               	movlw	0
  7031   01240A  6E1E               	movwf	(turnLeft45@i+1)^0,c
  7032   01240C  0E00               	movlw	0
  7033   01240E  6E1D               	movwf	turnLeft45@i^0,c
  7034   012410                     l4143:
  7035                           
  7036                           ;dc_motor.c: 109:         mR->power=i;
  7037   012410  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  7038   012414  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  7039   012418  C01D  FFDF         	movff	turnLeft45@i,indf2
  7040                           
  7041                           ;dc_motor.c: 110:         mL->power=i;
  7042   01241C  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  7043   012420  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  7044   012424  C01D  FFDF         	movff	turnLeft45@i,indf2
  7045   012428                     
  7046                           ;dc_motor.c: 111:         _delay((unsigned long)((15)*(64000000/4000.0)));
  7047   012428  0E02               	movlw	2
  7048   01242A  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7049   01242C  0E38               	movlw	56
  7050   01242E  6E1B               	movwf	??_turnLeft45^0,c
  7051   012430  0EAD               	movlw	173
  7052   012432                     u3017:
  7053   012432  2EE8               	decfsz	wreg,f,c
  7054   012434  D7FE               	bra	u3017
  7055   012436  2E1B               	decfsz	??_turnLeft45^0,f,c
  7056   012438  D7FC               	bra	u3017
  7057   01243A  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7058   01243C  D7FA               	bra	u3017
  7059   01243E  F000               	nop	
  7060   012440                     
  7061                           ;dc_motor.c: 112:         setMotorPWM(mL);
  7062   012440  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  7063   012444  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  7064   012448  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7065   01244C                     
  7066                           ;dc_motor.c: 113:         setMotorPWM(mR);}
  7067   01244C  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  7068   012450  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  7069   012454  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7070   012458  0E0A               	movlw	10
  7071   01245A  261D               	addwf	turnLeft45@i^0,f,c
  7072   01245C  0E00               	movlw	0
  7073   01245E  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  7074   012460  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  7075   012462  EF3C  F092         	goto	u2311
  7076   012466  501E               	movf	(turnLeft45@i+1)^0,w,c
  7077   012468  E109               	bnz	u2310
  7078   01246A  0E50               	movlw	80
  7079   01246C  5C1D               	subwf	turnLeft45@i^0,w,c
  7080   01246E  A0D8               	btfss	status,0,c
  7081   012470  EF3C  F092         	goto	u2311
  7082   012474  EF3E  F092         	goto	u2310
  7083   012478                     u2311:
  7084   012478  EF08  F092         	goto	l4143
  7085   01247C                     u2310:
  7086   01247C                     
  7087                           ;dc_motor.c: 114:     _delay((unsigned long)((68)*(64000000/4000.0)));
  7088   01247C  0E06               	movlw	6
  7089   01247E  6E1C               	movwf	(??_turnLeft45+1)^0,c
  7090   012480  0E85               	movlw	133
  7091   012482  6E1B               	movwf	??_turnLeft45^0,c
  7092   012484  0EF7               	movlw	247
  7093   012486                     u3027:
  7094   012486  2EE8               	decfsz	wreg,f,c
  7095   012488  D7FE               	bra	u3027
  7096   01248A  2E1B               	decfsz	??_turnLeft45^0,f,c
  7097   01248C  D7FC               	bra	u3027
  7098   01248E  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  7099   012490  D7FA               	bra	u3027
  7100   012492  F000               	nop	
  7101   012494  0012               	return		;funcret
  7102   012496                     __end_of_turnLeft45:
  7103                           	callstack 0
  7104                           
  7105 ;; *************** function _stop *****************
  7106 ;; Defined at:
  7107 ;;		line 84 in file "dc_motor.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7110 ;;		 -> main@motorL(9), 
  7111 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7112 ;;		 -> main@motorR(9), 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7127 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;Total ram usage:        5 bytes
  7129 ;; Hardware stack levels used: 1
  7130 ;; Hardware stack levels required when called: 3
  7131 ;; This function calls:
  7132 ;;		_setMotorPWM
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;;		_motor_response
  7136 ;;		_home_response
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text27
  7141   012816                     __ptext27:
  7142                           	callstack 0
  7143   012816                     _stop:
  7144                           	callstack 27
  7145   012816                     
  7146                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  7147   012816  EF2C  F094         	goto	l4133
  7148   01281A                     l4125:
  7149                           
  7150                           ;dc_motor.c: 87:         mL->power -=10;
  7151   01281A  C017  FFD9         	movff	stop@mL,fsr2l
  7152   01281E  C018  FFDA         	movff	stop@mL+1,fsr2h
  7153   012822  0E0A               	movlw	10
  7154   012824  5EDF               	subwf	indf2,f,c
  7155                           
  7156                           ;dc_motor.c: 88:         mR->power -=10;
  7157   012826  C019  FFD9         	movff	stop@mR,fsr2l
  7158   01282A  C01A  FFDA         	movff	stop@mR+1,fsr2h
  7159   01282E  0E0A               	movlw	10
  7160   012830  5EDF               	subwf	indf2,f,c
  7161   012832                     
  7162                           ;dc_motor.c: 89:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7163   012832  0E2A               	movlw	42
  7164   012834  6E1B               	movwf	??_stop^0,c
  7165   012836  0E8E               	movlw	142
  7166   012838                     u3037:
  7167   012838  2EE8               	decfsz	wreg,f,c
  7168   01283A  D7FE               	bra	u3037
  7169   01283C  2E1B               	decfsz	??_stop^0,f,c
  7170   01283E  D7FC               	bra	u3037
  7171   012840                     
  7172                           ;dc_motor.c: 90:         setMotorPWM(mL);
  7173   012840  C017  F011         	movff	stop@mL,setMotorPWM@m
  7174   012844  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  7175   012848  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7176   01284C                     
  7177                           ;dc_motor.c: 91:         setMotorPWM(mR);
  7178   01284C  C019  F011         	movff	stop@mR,setMotorPWM@m
  7179   012850  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  7180   012854  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7181   012858                     l4133:
  7182                           
  7183                           ;dc_motor.c: 86:     while(mL->power !=0){
  7184   012858  C017  FFD9         	movff	stop@mL,fsr2l
  7185   01285C  C018  FFDA         	movff	stop@mL+1,fsr2h
  7186   012860  50DF               	movf	indf2,w,c
  7187   012862  A4D8               	btfss	status,2,c
  7188   012864  EF36  F094         	goto	u2301
  7189   012868  EF38  F094         	goto	u2300
  7190   01286C                     u2301:
  7191   01286C  EF0D  F094         	goto	l4125
  7192   012870                     u2300:
  7193   012870  0012               	return		;funcret
  7194   012872                     __end_of_stop:
  7195                           	callstack 0
  7196                           
  7197 ;; *************** function _fullSpeedAhead *****************
  7198 ;; Defined at:
  7199 ;;		line 133 in file "dc_motor.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  7202 ;;		 -> main@motorL(9), 
  7203 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  7204 ;;		 -> main@motorR(9), 
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  i               2   27[COMRAM] int 
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  1    wreg      void 
  7209 ;; Registers used:
  7210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7218 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7219 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7220 ;;Total ram usage:        7 bytes
  7221 ;; Hardware stack levels used: 1
  7222 ;; Hardware stack levels required when called: 3
  7223 ;; This function calls:
  7224 ;;		_setMotorPWM
  7225 ;; This function is called by:
  7226 ;;		_main
  7227 ;;		_motor_response
  7228 ;;		_home_response
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           	psect	text28
  7233   012496                     __ptext28:
  7234                           	callstack 0
  7235   012496                     _fullSpeedAhead:
  7236                           	callstack 27
  7237   012496                     
  7238                           ;dc_motor.c: 133: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 134: {;dc_
      +                          motor.c: 135:     mL->direction=1;
  7239   012496  EE20 F001          	lfsr	2,1
  7240   01249A  5017               	movf	fullSpeedAhead@mL^0,w,c
  7241   01249C  26D9               	addwf	fsr2l,f,c
  7242   01249E  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7243   0124A0  22DA               	addwfc	fsr2h,f,c
  7244   0124A2  0E01               	movlw	1
  7245   0124A4  6EDF               	movwf	indf2,c
  7246                           
  7247                           ;dc_motor.c: 136:     mR->direction=1;
  7248   0124A6  EE20 F001          	lfsr	2,1
  7249   0124AA  5019               	movf	fullSpeedAhead@mR^0,w,c
  7250   0124AC  26D9               	addwf	fsr2l,f,c
  7251   0124AE  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7252   0124B0  22DA               	addwfc	fsr2h,f,c
  7253   0124B2  0E01               	movlw	1
  7254   0124B4  6EDF               	movwf	indf2,c
  7255   0124B6                     
  7256                           ;dc_motor.c: 137:     for(int i=0;i<40;i+=10){
  7257   0124B6  0E00               	movlw	0
  7258   0124B8  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  7259   0124BA  0E00               	movlw	0
  7260   0124BC  6E1C               	movwf	fullSpeedAhead@i^0,c
  7261   0124BE                     l4187:
  7262                           
  7263                           ;dc_motor.c: 138:         mL->power=i;
  7264   0124BE  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7265   0124C2  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7266   0124C6  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7267                           
  7268                           ;dc_motor.c: 139:         mR->power=i;
  7269   0124CA  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7270   0124CE  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7271   0124D2  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7272   0124D6                     
  7273                           ;dc_motor.c: 140:         setMotorPWM(mL);
  7274   0124D6  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7275   0124DA  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7276   0124DE  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7277   0124E2                     
  7278                           ;dc_motor.c: 141:         setMotorPWM(mR);
  7279   0124E2  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7280   0124E6  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7281   0124EA  EC0E  F08E         	call	_setMotorPWM	;wreg free
  7282   0124EE                     
  7283                           ;dc_motor.c: 142:         _delay((unsigned long)((10)*(64000000/4000.0)));
  7284   0124EE  0ED0               	movlw	208
  7285   0124F0  6E1B               	movwf	??_fullSpeedAhead^0,c
  7286   0124F2  0ECA               	movlw	202
  7287   0124F4                     u3047:
  7288   0124F4  2EE8               	decfsz	wreg,f,c
  7289   0124F6  D7FE               	bra	u3047
  7290   0124F8  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7291   0124FA  D7FC               	bra	u3047
  7292   0124FC                     
  7293                           ;dc_motor.c: 143:     }
  7294   0124FC  0E0A               	movlw	10
  7295   0124FE  261C               	addwf	fullSpeedAhead@i^0,f,c
  7296   012500  0E00               	movlw	0
  7297   012502  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  7298   012504  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  7299   012506  EF8E  F092         	goto	u2331
  7300   01250A  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  7301   01250C  E109               	bnz	u2330
  7302   01250E  0E28               	movlw	40
  7303   012510  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  7304   012512  A0D8               	btfss	status,0,c
  7305   012514  EF8E  F092         	goto	u2331
  7306   012518  EF90  F092         	goto	u2330
  7307   01251C                     u2331:
  7308   01251C  EF5F  F092         	goto	l4187
  7309   012520                     u2330:
  7310   012520                     
  7311                           ;dc_motor.c: 144:     _delay((unsigned long)((10)*(64000000/4000.0)));
  7312   012520  0ED0               	movlw	208
  7313   012522  6E1B               	movwf	??_fullSpeedAhead^0,c
  7314   012524  0ECA               	movlw	202
  7315   012526                     u3057:
  7316   012526  2EE8               	decfsz	wreg,f,c
  7317   012528  D7FE               	bra	u3057
  7318   01252A  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7319   01252C  D7FC               	bra	u3057
  7320   01252E  0012               	return		;funcret
  7321   012530                     __end_of_fullSpeedAhead:
  7322                           	callstack 0
  7323                           
  7324 ;; *************** function _setMotorPWM *****************
  7325 ;; Defined at:
  7326 ;;		line 61 in file "dc_motor.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  m               2   16[COMRAM] PTR struct DC_motor
  7329 ;;		 -> main@motorR(9), main@motorL(9), 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  negDuty         1   21[COMRAM] unsigned char 
  7332 ;;  posDuty         1   20[COMRAM] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7344 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7345 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7346 ;;Total ram usage:        6 bytes
  7347 ;; Hardware stack levels used: 1
  7348 ;; Hardware stack levels required when called: 2
  7349 ;; This function calls:
  7350 ;;		___lwdiv
  7351 ;;		___wmul
  7352 ;; This function is called by:
  7353 ;;		_stop
  7354 ;;		_turnLeft45
  7355 ;;		_turnRight45
  7356 ;;		_fullSpeedAhead
  7357 ;;		_reverseFullSpeed
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text29
  7363   011C1C                     __ptext29:
  7364                           	callstack 0
  7365   011C1C                     _setMotorPWM:
  7366                           	callstack 27
  7367   011C1C                     
  7368                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  7369   011C1C  EE20 F002          	lfsr	2,2
  7370   011C20  5011               	movf	setMotorPWM@m^0,w,c
  7371   011C22  26D9               	addwf	fsr2l,f,c
  7372   011C24  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7373   011C26  22DA               	addwfc	fsr2h,f,c
  7374   011C28  50DF               	movf	indf2,w,c
  7375   011C2A  B4D8               	btfsc	status,2,c
  7376   011C2C  EF1A  F08E         	goto	u2211
  7377   011C30  EF1C  F08E         	goto	u2210
  7378   011C34                     u2211:
  7379   011C34  EF50  F08E         	goto	l4049
  7380   011C38                     u2210:
  7381   011C38                     
  7382                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  7383   011C38  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7384   011C3C  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7385   011C40  50DF               	movf	indf2,w,c
  7386   011C42  6E13               	movwf	??_setMotorPWM^0,c
  7387   011C44  5013               	movf	??_setMotorPWM^0,w,c
  7388   011C46  6E04               	movwf	___wmul@multiplier^0,c
  7389   011C48  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7390   011C4A  EE20 F003          	lfsr	2,3
  7391   011C4E  5011               	movf	setMotorPWM@m^0,w,c
  7392   011C50  26D9               	addwf	fsr2l,f,c
  7393   011C52  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7394   011C54  22DA               	addwfc	fsr2h,f,c
  7395   011C56  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7396   011C5A  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7397   011C5E  EC38  F096         	call	___wmul	;wreg free
  7398   011C62  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7399   011C66  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7400   011C6A  0E00               	movlw	0
  7401   011C6C  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7402   011C6E  0E64               	movlw	100
  7403   011C70  6E0C               	movwf	___lwdiv@divisor^0,c
  7404   011C72  EC9F  F093         	call	___lwdiv	;wreg free
  7405   011C76  EE20 F003          	lfsr	2,3
  7406   011C7A  5011               	movf	setMotorPWM@m^0,w,c
  7407   011C7C  26D9               	addwf	fsr2l,f,c
  7408   011C7E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7409   011C80  22DA               	addwfc	fsr2h,f,c
  7410   011C82  50DF               	movf	indf2,w,c
  7411   011C84  6E14               	movwf	(??_setMotorPWM+1)^0,c
  7412   011C86  500A               	movf	?___lwdiv^0,w,c
  7413   011C88  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  7414   011C8A  6E15               	movwf	setMotorPWM@posDuty^0,c
  7415   011C8C                     
  7416                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  7417   011C8C  EE20 F003          	lfsr	2,3
  7418   011C90  5011               	movf	setMotorPWM@m^0,w,c
  7419   011C92  26D9               	addwf	fsr2l,f,c
  7420   011C94  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7421   011C96  22DA               	addwfc	fsr2h,f,c
  7422   011C98  50DF               	movf	indf2,w,c
  7423   011C9A  6E16               	movwf	setMotorPWM@negDuty^0,c
  7424                           
  7425                           ;dc_motor.c: 68:     }
  7426   011C9C  EF73  F08E         	goto	l4053
  7427   011CA0                     l4049:
  7428                           
  7429                           ;dc_motor.c: 70:         posDuty=0;
  7430   011CA0  0E00               	movlw	0
  7431   011CA2  6E15               	movwf	setMotorPWM@posDuty^0,c
  7432   011CA4                     
  7433                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7434   011CA4  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7435   011CA8  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7436   011CAC  50DF               	movf	indf2,w,c
  7437   011CAE  6E13               	movwf	??_setMotorPWM^0,c
  7438   011CB0  5013               	movf	??_setMotorPWM^0,w,c
  7439   011CB2  6E04               	movwf	___wmul@multiplier^0,c
  7440   011CB4  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7441   011CB6  EE20 F003          	lfsr	2,3
  7442   011CBA  5011               	movf	setMotorPWM@m^0,w,c
  7443   011CBC  26D9               	addwf	fsr2l,f,c
  7444   011CBE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7445   011CC0  22DA               	addwfc	fsr2h,f,c
  7446   011CC2  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7447   011CC6  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7448   011CCA  EC38  F096         	call	___wmul	;wreg free
  7449   011CCE  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7450   011CD2  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7451   011CD6  0E00               	movlw	0
  7452   011CD8  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7453   011CDA  0E64               	movlw	100
  7454   011CDC  6E0C               	movwf	___lwdiv@divisor^0,c
  7455   011CDE  EC9F  F093         	call	___lwdiv	;wreg free
  7456   011CE2  500A               	movf	?___lwdiv^0,w,c
  7457   011CE4  6E16               	movwf	setMotorPWM@negDuty^0,c
  7458   011CE6                     l4053:
  7459                           
  7460                           ;dc_motor.c: 74:     if (m->direction) {
  7461   011CE6  EE20 F001          	lfsr	2,1
  7462   011CEA  5011               	movf	setMotorPWM@m^0,w,c
  7463   011CEC  26D9               	addwf	fsr2l,f,c
  7464   011CEE  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7465   011CF0  22DA               	addwfc	fsr2h,f,c
  7466   011CF2  50DF               	movf	indf2,w,c
  7467   011CF4  B4D8               	btfsc	status,2,c
  7468   011CF6  EF7F  F08E         	goto	u2221
  7469   011CFA  EF81  F08E         	goto	u2220
  7470   011CFE                     u2221:
  7471   011CFE  EFA3  F08E         	goto	l4057
  7472   011D02                     u2220:
  7473   011D02                     
  7474                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  7475   011D02  EE20 F005          	lfsr	2,5
  7476   011D06  5011               	movf	setMotorPWM@m^0,w,c
  7477   011D08  26D9               	addwf	fsr2l,f,c
  7478   011D0A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7479   011D0C  22DA               	addwfc	fsr2h,f,c
  7480   011D0E  CFDE F013          	movff	postinc2,??_setMotorPWM
  7481   011D12  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7482   011D16  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7483   011D1A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7484   011D1E  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7485                           
  7486                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  7487   011D22  EE20 F007          	lfsr	2,7
  7488   011D26  5011               	movf	setMotorPWM@m^0,w,c
  7489   011D28  26D9               	addwf	fsr2l,f,c
  7490   011D2A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7491   011D2C  22DA               	addwfc	fsr2h,f,c
  7492   011D2E  CFDE F013          	movff	postinc2,??_setMotorPWM
  7493   011D32  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7494   011D36  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7495   011D3A  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7496   011D3E  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7497                           
  7498                           ;dc_motor.c: 77:     } else {
  7499   011D42  EFC3  F08E         	goto	l86
  7500   011D46                     l4057:
  7501                           
  7502                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  7503   011D46  EE20 F005          	lfsr	2,5
  7504   011D4A  5011               	movf	setMotorPWM@m^0,w,c
  7505   011D4C  26D9               	addwf	fsr2l,f,c
  7506   011D4E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7507   011D50  22DA               	addwfc	fsr2h,f,c
  7508   011D52  CFDE F013          	movff	postinc2,??_setMotorPWM
  7509   011D56  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7510   011D5A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7511   011D5E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7512   011D62  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7513                           
  7514                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  7515   011D66  EE20 F007          	lfsr	2,7
  7516   011D6A  5011               	movf	setMotorPWM@m^0,w,c
  7517   011D6C  26D9               	addwf	fsr2l,f,c
  7518   011D6E  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7519   011D70  22DA               	addwfc	fsr2h,f,c
  7520   011D72  CFDE F013          	movff	postinc2,??_setMotorPWM
  7521   011D76  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7522   011D7A  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7523   011D7E  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7524   011D82  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7525   011D86                     l86:
  7526   011D86  0012               	return		;funcret
  7527   011D88                     __end_of_setMotorPWM:
  7528                           	callstack 0
  7529                           
  7530 ;; *************** function ___wmul *****************
  7531 ;; Defined at:
  7532 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  multiplier      2    3[COMRAM] unsigned int 
  7535 ;;  multiplicand    2    5[COMRAM] unsigned int 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  product         2    7[COMRAM] unsigned int 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  2    3[COMRAM] unsigned int 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, prodl, prodh
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7551 ;;Total ram usage:        6 bytes
  7552 ;; Hardware stack levels used: 1
  7553 ;; Hardware stack levels required when called: 1
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_setMotorPWM
  7558 ;;		_normalise_readings
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text30
  7563   012C70                     __ptext30:
  7564                           	callstack 0
  7565   012C70                     ___wmul:
  7566                           	callstack 27
  7567   012C70  5004               	movf	___wmul@multiplier^0,w,c
  7568   012C72  0206               	mulwf	___wmul@multiplicand^0,c
  7569   012C74  CFF3 F008          	movff	prodl,___wmul@product
  7570   012C78  CFF4 F009          	movff	prodh,___wmul@product+1
  7571   012C7C  5004               	movf	___wmul@multiplier^0,w,c
  7572   012C7E  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  7573   012C80  50F3               	movf	243,w,c
  7574   012C82  2609               	addwf	(___wmul@product+1)^0,f,c
  7575   012C84  5005               	movf	(___wmul@multiplier+1)^0,w,c
  7576   012C86  0206               	mulwf	___wmul@multiplicand^0,c
  7577   012C88  50F3               	movf	243,w,c
  7578   012C8A  2609               	addwf	(___wmul@product+1)^0,f,c
  7579   012C8C  C008  F004         	movff	___wmul@product,?___wmul
  7580   012C90  C009  F005         	movff	___wmul@product+1,?___wmul+1
  7581   012C94  0012               	return		;funcret
  7582   012C96                     __end_of___wmul:
  7583                           	callstack 0
  7584                           
  7585 ;; *************** function ___lwdiv *****************
  7586 ;; Defined at:
  7587 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  dividend        2    9[COMRAM] unsigned int 
  7590 ;;  divisor         2   11[COMRAM] unsigned int 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  quotient        2   14[COMRAM] unsigned int 
  7593 ;;  counter         1   13[COMRAM] unsigned char 
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  2    9[COMRAM] unsigned int 
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7607 ;;Total ram usage:        7 bytes
  7608 ;; Hardware stack levels used: 1
  7609 ;; Hardware stack levels required when called: 1
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_setMotorPWM
  7614 ;;		_normalise_readings
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text31
  7619   01273E                     __ptext31:
  7620                           	callstack 0
  7621   01273E                     ___lwdiv:
  7622                           	callstack 27
  7623   01273E  0E00               	movlw	0
  7624   012740  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7625   012742  0E00               	movlw	0
  7626   012744  6E0F               	movwf	___lwdiv@quotient^0,c
  7627   012746  500C               	movf	___lwdiv@divisor^0,w,c
  7628   012748  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7629   01274A  B4D8               	btfsc	status,2,c
  7630   01274C  EFAA  F093         	goto	u2081
  7631   012750  EFAC  F093         	goto	u2080
  7632   012754                     u2081:
  7633   012754  EFD4  F093         	goto	l1022
  7634   012758                     u2080:
  7635   012758  0E01               	movlw	1
  7636   01275A  6E0E               	movwf	___lwdiv@counter^0,c
  7637   01275C  EFB4  F093         	goto	l3977
  7638   012760                     l3975:
  7639   012760  90D8               	bcf	status,0,c
  7640   012762  360C               	rlcf	___lwdiv@divisor^0,f,c
  7641   012764  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7642   012766  2A0E               	incf	___lwdiv@counter^0,f,c
  7643   012768                     l3977:
  7644   012768  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7645   01276A  EFB9  F093         	goto	u2091
  7646   01276E  EFBB  F093         	goto	u2090
  7647   012772                     u2091:
  7648   012772  EFB0  F093         	goto	l3975
  7649   012776                     u2090:
  7650   012776                     l3979:
  7651   012776  90D8               	bcf	status,0,c
  7652   012778  360F               	rlcf	___lwdiv@quotient^0,f,c
  7653   01277A  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7654   01277C  500C               	movf	___lwdiv@divisor^0,w,c
  7655   01277E  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7656   012780  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7657   012782  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7658   012784  A0D8               	btfss	status,0,c
  7659   012786  EFC7  F093         	goto	u2101
  7660   01278A  EFC9  F093         	goto	u2100
  7661   01278E                     u2101:
  7662   01278E  EFCE  F093         	goto	l3987
  7663   012792                     u2100:
  7664   012792  500C               	movf	___lwdiv@divisor^0,w,c
  7665   012794  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7666   012796  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7667   012798  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7668   01279A  800F               	bsf	___lwdiv@quotient^0,0,c
  7669   01279C                     l3987:
  7670   01279C  90D8               	bcf	status,0,c
  7671   01279E  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7672   0127A0  320C               	rrcf	___lwdiv@divisor^0,f,c
  7673   0127A2  2E0E               	decfsz	___lwdiv@counter^0,f,c
  7674   0127A4  EFBB  F093         	goto	l3979
  7675   0127A8                     l1022:
  7676   0127A8  C00F  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7677   0127AC  C010  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7678   0127B0  0012               	return		;funcret
  7679   0127B2                     __end_of___lwdiv:
  7680                           	callstack 0
  7681                           
  7682 ;; *************** function _make_master_closeness *****************
  7683 ;; Defined at:
  7684 ;;		line 101 in file "colour_identify.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  buf             2    3[COMRAM] PTR unsigned char 
  7687 ;;		 -> main@buf(150), 
  7688 ;;  normalised_v    2    5[COMRAM] PTR unsigned int [9]
  7689 ;;		 -> card_response@normalised_values(72), 
  7690 ;;  master_close    2    7[COMRAM] PTR unsigned int 
  7691 ;;		 -> card_response@master_closeness(18), 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  i               1   39[COMRAM] enum E14551
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7703 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7707 ;;Total ram usage:       37 bytes
  7708 ;; Hardware stack levels used: 1
  7709 ;; Hardware stack levels required when called: 1
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_card_response
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text32
  7718   012164                     __ptext32:
  7719                           	callstack 0
  7720   012164                     _make_master_closeness:
  7721                           	callstack 28
  7722   012164                     
  7723                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  7724   012164  0E00               	movlw	0
  7725   012166  6E28               	movwf	make_master_closeness@i^0,c
  7726   012168                     l4459:
  7727                           
  7728                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  7729   012168  5028               	movf	make_master_closeness@i^0,w,c
  7730   01216A  0D02               	mullw	2
  7731   01216C  CFF3 F00A          	movff	prodl,??_make_master_closeness
  7732   012170  CFF4 F00B          	movff	prodh,??_make_master_closeness+1
  7733   012174  500A               	movf	??_make_master_closeness^0,w,c
  7734   012176  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7735   012178  6E0C               	movwf	(??_make_master_closeness+2)^0,c
  7736   01217A  500B               	movf	(??_make_master_closeness+1)^0,w,c
  7737   01217C  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7738   01217E  6E0D               	movwf	(??_make_master_closeness+3)^0,c
  7739   012180  0E36               	movlw	54
  7740   012182  240C               	addwf	(??_make_master_closeness+2)^0,w,c
  7741   012184  6ED9               	movwf	fsr2l,c
  7742   012186  0E00               	movlw	0
  7743   012188  200D               	addwfc	(??_make_master_closeness+3)^0,w,c
  7744   01218A  6EDA               	movwf	fsr2h,c
  7745   01218C  CFDE F00E          	movff	postinc2,??_make_master_closeness+4
  7746   012190  CFDD F00F          	movff	postdec2,??_make_master_closeness+5
  7747   012194  5028               	movf	make_master_closeness@i^0,w,c
  7748   012196  0D02               	mullw	2
  7749   012198  CFF3 F010          	movff	prodl,??_make_master_closeness+6
  7750   01219C  CFF4 F011          	movff	prodh,??_make_master_closeness+7
  7751   0121A0  5010               	movf	(??_make_master_closeness+6)^0,w,c
  7752   0121A2  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7753   0121A4  6E12               	movwf	(??_make_master_closeness+8)^0,c
  7754   0121A6  5011               	movf	(??_make_master_closeness+7)^0,w,c
  7755   0121A8  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7756   0121AA  6E13               	movwf	(??_make_master_closeness+9)^0,c
  7757   0121AC  0E24               	movlw	36
  7758   0121AE  2412               	addwf	(??_make_master_closeness+8)^0,w,c
  7759   0121B0  6ED9               	movwf	fsr2l,c
  7760   0121B2  0E00               	movlw	0
  7761   0121B4  2013               	addwfc	(??_make_master_closeness+9)^0,w,c
  7762   0121B6  6EDA               	movwf	fsr2h,c
  7763   0121B8  CFDE F014          	movff	postinc2,??_make_master_closeness+10
  7764   0121BC  CFDD F015          	movff	postdec2,??_make_master_closeness+11
  7765   0121C0  5028               	movf	make_master_closeness@i^0,w,c
  7766   0121C2  0D02               	mullw	2
  7767   0121C4  CFF3 F016          	movff	prodl,??_make_master_closeness+12
  7768   0121C8  CFF4 F017          	movff	prodh,??_make_master_closeness+13
  7769   0121CC  5016               	movf	(??_make_master_closeness+12)^0,w,c
  7770   0121CE  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7771   0121D0  6E18               	movwf	(??_make_master_closeness+14)^0,c
  7772   0121D2  5017               	movf	(??_make_master_closeness+13)^0,w,c
  7773   0121D4  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7774   0121D6  6E19               	movwf	(??_make_master_closeness+15)^0,c
  7775   0121D8  0E12               	movlw	18
  7776   0121DA  2418               	addwf	(??_make_master_closeness+14)^0,w,c
  7777   0121DC  6ED9               	movwf	fsr2l,c
  7778   0121DE  0E00               	movlw	0
  7779   0121E0  2019               	addwfc	(??_make_master_closeness+15)^0,w,c
  7780   0121E2  6EDA               	movwf	fsr2h,c
  7781   0121E4  CFDE F01A          	movff	postinc2,??_make_master_closeness+16
  7782   0121E8  CFDD F01B          	movff	postdec2,??_make_master_closeness+17
  7783   0121EC  5028               	movf	make_master_closeness@i^0,w,c
  7784   0121EE  0D02               	mullw	2
  7785   0121F0  CFF3 F01C          	movff	prodl,??_make_master_closeness+18
  7786   0121F4  CFF4 F01D          	movff	prodh,??_make_master_closeness+19
  7787   0121F8  501C               	movf	(??_make_master_closeness+18)^0,w,c
  7788   0121FA  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7789   0121FC  6ED9               	movwf	fsr2l,c
  7790   0121FE  501D               	movf	(??_make_master_closeness+19)^0,w,c
  7791   012200  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7792   012202  6EDA               	movwf	fsr2h,c
  7793   012204  CFDE F01E          	movff	postinc2,??_make_master_closeness+20
  7794   012208  CFDD F01F          	movff	postdec2,??_make_master_closeness+21
  7795   01220C  501A               	movf	(??_make_master_closeness+16)^0,w,c
  7796   01220E  241E               	addwf	(??_make_master_closeness+20)^0,w,c
  7797   012210  6E20               	movwf	(??_make_master_closeness+22)^0,c
  7798   012212  501B               	movf	(??_make_master_closeness+17)^0,w,c
  7799   012214  201F               	addwfc	(??_make_master_closeness+21)^0,w,c
  7800   012216  6E21               	movwf	(??_make_master_closeness+23)^0,c
  7801   012218  5014               	movf	(??_make_master_closeness+10)^0,w,c
  7802   01221A  2420               	addwf	(??_make_master_closeness+22)^0,w,c
  7803   01221C  6E22               	movwf	(??_make_master_closeness+24)^0,c
  7804   01221E  5015               	movf	(??_make_master_closeness+11)^0,w,c
  7805   012220  2021               	addwfc	(??_make_master_closeness+23)^0,w,c
  7806   012222  6E23               	movwf	(??_make_master_closeness+25)^0,c
  7807   012224  500E               	movf	(??_make_master_closeness+4)^0,w,c
  7808   012226  2422               	addwf	(??_make_master_closeness+24)^0,w,c
  7809   012228  6E24               	movwf	(??_make_master_closeness+26)^0,c
  7810   01222A  500F               	movf	(??_make_master_closeness+5)^0,w,c
  7811   01222C  2023               	addwfc	(??_make_master_closeness+25)^0,w,c
  7812   01222E  6E25               	movwf	(??_make_master_closeness+27)^0,c
  7813   012230  90D8               	bcf	status,0,c
  7814   012232  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7815   012234  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7816   012236  90D8               	bcf	status,0,c
  7817   012238  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7818   01223A  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7819   01223C  5028               	movf	make_master_closeness@i^0,w,c
  7820   01223E  0D02               	mullw	2
  7821   012240  CFF3 F026          	movff	prodl,??_make_master_closeness+28
  7822   012244  CFF4 F027          	movff	prodh,??_make_master_closeness+29
  7823   012248  5026               	movf	(??_make_master_closeness+28)^0,w,c
  7824   01224A  2408               	addwf	make_master_closeness@master_closeness^0,w,c
  7825   01224C  6ED9               	movwf	fsr2l,c
  7826   01224E  5027               	movf	(??_make_master_closeness+29)^0,w,c
  7827   012250  2009               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  7828   012252  6EDA               	movwf	fsr2h,c
  7829   012254  C024  FFDE         	movff	??_make_master_closeness+26,postinc2
  7830   012258  C025  FFDD         	movff	??_make_master_closeness+27,postdec2
  7831   01225C                     
  7832                           ;colour_identify.c: 109:     }
  7833   01225C  2A28               	incf	make_master_closeness@i^0,f,c
  7834   01225E  0E08               	movlw	8
  7835   012260  6428               	cpfsgt	make_master_closeness@i^0,c
  7836   012262  EF35  F091         	goto	u2451
  7837   012266  EF37  F091         	goto	u2450
  7838   01226A                     u2451:
  7839   01226A  EFB4  F090         	goto	l4459
  7840   01226E                     u2450:
  7841   01226E  0012               	return		;funcret
  7842   012270                     __end_of_make_master_closeness:
  7843                           	callstack 0
  7844                           
  7845 ;; *************** function _determine_card *****************
  7846 ;; Defined at:
  7847 ;;		line 112 in file "colour_identify.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  7850 ;;		 -> card_response@master_closeness(18), 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;  i               1   12[COMRAM] enum E14551
  7853 ;;  current_smal    2    9[COMRAM] unsigned int 
  7854 ;;  predicted_co    1   11[COMRAM] enum E14551
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      enum E14551
  7857 ;; Registers used:
  7858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7865 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7866 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7867 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7868 ;;Total ram usage:       10 bytes
  7869 ;; Hardware stack levels used: 1
  7870 ;; Hardware stack levels required when called: 1
  7871 ;; This function calls:
  7872 ;;		Nothing
  7873 ;; This function is called by:
  7874 ;;		_card_response
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text33
  7879   012644                     __ptext33:
  7880                           	callstack 0
  7881   012644                     _determine_card:
  7882                           	callstack 28
  7883   012644                     
  7884                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  7885   012644  0E00               	movlw	0
  7886   012646  6E0C               	movwf	determine_card@predicted_colour^0,c
  7887   012648                     
  7888                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  7889   012648  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  7890   01264C  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  7891   012650  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7892   012654  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7893   012658                     
  7894                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  7895   012658  0E01               	movlw	1
  7896   01265A  6E0D               	movwf	determine_card@i^0,c
  7897   01265C                     l4475:
  7898                           
  7899                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  7900   01265C  500D               	movf	determine_card@i^0,w,c
  7901   01265E  0D02               	mullw	2
  7902   012660  CFF3 F006          	movff	prodl,??_determine_card
  7903   012664  CFF4 F007          	movff	prodh,??_determine_card+1
  7904   012668  5006               	movf	??_determine_card^0,w,c
  7905   01266A  2404               	addwf	determine_card@master_closeness^0,w,c
  7906   01266C  6ED9               	movwf	fsr2l,c
  7907   01266E  5007               	movf	(??_determine_card+1)^0,w,c
  7908   012670  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7909   012672  6EDA               	movwf	fsr2h,c
  7910   012674  500A               	movf	determine_card@current_smallest^0,w,c
  7911   012676  5CDE               	subwf	postinc2,w,c
  7912   012678  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  7913   01267A  58DE               	subwfb	postinc2,w,c
  7914   01267C  B0D8               	btfsc	status,0,c
  7915   01267E  EF43  F093         	goto	u2461
  7916   012682  EF45  F093         	goto	u2460
  7917   012686                     u2461:
  7918   012686  EF57  F093         	goto	l4481
  7919   01268A                     u2460:
  7920   01268A                     
  7921                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  7922   01268A  500D               	movf	determine_card@i^0,w,c
  7923   01268C  0D02               	mullw	2
  7924   01268E  CFF3 F006          	movff	prodl,??_determine_card
  7925   012692  CFF4 F007          	movff	prodh,??_determine_card+1
  7926   012696  5006               	movf	??_determine_card^0,w,c
  7927   012698  2404               	addwf	determine_card@master_closeness^0,w,c
  7928   01269A  6ED9               	movwf	fsr2l,c
  7929   01269C  5007               	movf	(??_determine_card+1)^0,w,c
  7930   01269E  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7931   0126A0  6EDA               	movwf	fsr2h,c
  7932   0126A2  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7933   0126A6  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7934   0126AA                     
  7935                           ;colour_identify.c: 119:             predicted_colour = i;
  7936   0126AA  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  7937   0126AE                     l4481:
  7938                           
  7939                           ;colour_identify.c: 121:     }
  7940   0126AE  2A0D               	incf	determine_card@i^0,f,c
  7941   0126B0  0E08               	movlw	8
  7942   0126B2  640D               	cpfsgt	determine_card@i^0,c
  7943   0126B4  EF5E  F093         	goto	u2471
  7944   0126B8  EF60  F093         	goto	u2470
  7945   0126BC                     u2471:
  7946   0126BC  EF2E  F093         	goto	l4475
  7947   0126C0                     u2470:
  7948   0126C0                     
  7949                           ;colour_identify.c: 122:     return predicted_colour;
  7950   0126C0  500C               	movf	determine_card@predicted_colour^0,w,c
  7951   0126C2  0012               	return		;funcret
  7952   0126C4                     __end_of_determine_card:
  7953                           	callstack 0
  7954                           
  7955 ;; *************** function _collect_avg_readings *****************
  7956 ;; Defined at:
  7957 ;;		line 31 in file "colour_identify.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  clear_read      2   14[COMRAM] PTR unsigned int 
  7960 ;;		 -> main@clear_read(2), 
  7961 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  7962 ;;		 -> main@red_read(2), 
  7963 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  7964 ;;		 -> main@green_read(2), 
  7965 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  7966 ;;		 -> main@blue_read(2), 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  i               2   32[COMRAM] int 
  7969 ;;  i               2   30[COMRAM] int 
  7970 ;;  i               2   28[COMRAM] int 
  7971 ;;  i               2   26[COMRAM] int 
  7972 ;;  i               2   24[COMRAM] int 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7982 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7983 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7985 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;Total ram usage:       20 bytes
  7987 ;; Hardware stack levels used: 1
  7988 ;; Hardware stack levels required when called: 4
  7989 ;; This function calls:
  7990 ;;		_color_read_Blue
  7991 ;;		_color_read_Clear
  7992 ;;		_color_read_Green
  7993 ;;		_color_read_Red
  7994 ;; This function is called by:
  7995 ;;		_main
  7996 ;;		_card_response
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text34
  8001   0116A8                     __ptext34:
  8002                           	callstack 0
  8003   0116A8                     _collect_avg_readings:
  8004                           	callstack 26
  8005   0116A8                     
  8006                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  8007   0116A8  0E00               	movlw	0
  8008   0116AA  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  8009   0116AC  0E00               	movlw	0
  8010   0116AE  6E19               	movwf	collect_avg_readings@i^0,c
  8011   0116B0                     l4371:
  8012                           
  8013                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  8014   0116B0  ECDC  F094         	call	_color_read_Clear	;wreg free
  8015   0116B4  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8016   0116B8  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8017   0116BC  C008  FFDE         	movff	?_color_read_Clear,postinc2
  8018   0116C0  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  8019                           
  8020                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  8021   0116C4  EC8C  F094         	call	_color_read_Red	;wreg free
  8022   0116C8  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8023   0116CC  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8024   0116D0  C008  FFDE         	movff	?_color_read_Red,postinc2
  8025   0116D4  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  8026                           
  8027                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  8028   0116D8  ECB4  F094         	call	_color_read_Green	;wreg free
  8029   0116DC  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8030   0116E0  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8031   0116E4  C008  FFDE         	movff	?_color_read_Green,postinc2
  8032   0116E8  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  8033                           
  8034                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  8035   0116EC  EC04  F095         	call	_color_read_Blue	;wreg free
  8036   0116F0  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8037   0116F4  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8038   0116F8  C008  FFDE         	movff	?_color_read_Blue,postinc2
  8039   0116FC  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  8040   011700                     
  8041                           ;colour_identify.c: 40:     }
  8042   011700  4A19               	infsnz	collect_avg_readings@i^0,f,c
  8043   011702  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  8044   011704  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  8045   011706  EF8E  F08B         	goto	u2391
  8046   01170A  0EF5               	movlw	245
  8047   01170C  5C19               	subwf	collect_avg_readings@i^0,w,c
  8048   01170E  0E01               	movlw	1
  8049   011710  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  8050   011712  A0D8               	btfss	status,0,c
  8051   011714  EF8E  F08B         	goto	u2391
  8052   011718  EF90  F08B         	goto	u2390
  8053   01171C                     u2391:
  8054   01171C  EF58  F08B         	goto	l4371
  8055   011720                     u2390:
  8056   011720                     
  8057                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  8058   011720  0E00               	movlw	0
  8059   011722  6E1C               	movwf	(collect_avg_readings@i_1651+1)^0,c
  8060   011724  0E00               	movlw	0
  8061   011726  6E1B               	movwf	collect_avg_readings@i_1651^0,c
  8062   011728                     l4383:
  8063                           
  8064                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  8065   011728  ECDC  F094         	call	_color_read_Clear	;wreg free
  8066   01172C  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8067   011730  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8068   011734  5008               	movf	?_color_read_Clear^0,w,c
  8069   011736  26DE               	addwf	postinc2,f,c
  8070   011738  5009               	movf	(?_color_read_Clear+1)^0,w,c
  8071   01173A  22DD               	addwfc	postdec2,f,c
  8072   01173C                     
  8073                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8074   01173C  0E11               	movlw	17
  8075   01173E  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8076   011740  0E3C               	movlw	60
  8077   011742  6E17               	movwf	??_collect_avg_readings^0,c
  8078   011744  0ECB               	movlw	203
  8079   011746                     u3067:
  8080   011746  2EE8               	decfsz	wreg,f,c
  8081   011748  D7FE               	bra	u3067
  8082   01174A  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8083   01174C  D7FC               	bra	u3067
  8084   01174E  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8085   011750  D7FA               	bra	u3067
  8086   011752  F000               	nop	
  8087   011754                     
  8088                           ;colour_identify.c: 47:     }
  8089   011754  4A1B               	infsnz	collect_avg_readings@i_1651^0,f,c
  8090   011756  2A1C               	incf	(collect_avg_readings@i_1651+1)^0,f,c
  8091   011758  BE1C               	btfsc	(collect_avg_readings@i_1651+1)^0,7,c
  8092   01175A  EFB8  F08B         	goto	u2401
  8093   01175E  501C               	movf	(collect_avg_readings@i_1651+1)^0,w,c
  8094   011760  E109               	bnz	u2400
  8095   011762  0E03               	movlw	3
  8096   011764  5C1B               	subwf	collect_avg_readings@i_1651^0,w,c
  8097   011766  A0D8               	btfss	status,0,c
  8098   011768  EFB8  F08B         	goto	u2401
  8099   01176C  EFBA  F08B         	goto	u2400
  8100   011770                     u2401:
  8101   011770  EF94  F08B         	goto	l4383
  8102   011774                     u2400:
  8103   011774                     
  8104                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  8105   011774  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8106   011778  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8107   01177C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8108   011780  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8109   011784  90D8               	bcf	status,0,c
  8110   011786  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8111   011788  3217               	rrcf	??_collect_avg_readings^0,f,c
  8112   01178A  90D8               	bcf	status,0,c
  8113   01178C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8114   01178E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8115   011790  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  8116   011794  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  8117   011798  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8118   01179C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8119   0117A0                     
  8120                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  8121   0117A0  0E00               	movlw	0
  8122   0117A2  6E1E               	movwf	(collect_avg_readings@i_1652+1)^0,c
  8123   0117A4  0E00               	movlw	0
  8124   0117A6  6E1D               	movwf	collect_avg_readings@i_1652^0,c
  8125   0117A8                     l4399:
  8126                           
  8127                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  8128   0117A8  EC8C  F094         	call	_color_read_Red	;wreg free
  8129   0117AC  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8130   0117B0  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8131   0117B4  5008               	movf	?_color_read_Red^0,w,c
  8132   0117B6  26DE               	addwf	postinc2,f,c
  8133   0117B8  5009               	movf	(?_color_read_Red+1)^0,w,c
  8134   0117BA  22DD               	addwfc	postdec2,f,c
  8135   0117BC                     
  8136                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8137   0117BC  0E11               	movlw	17
  8138   0117BE  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8139   0117C0  0E3C               	movlw	60
  8140   0117C2  6E17               	movwf	??_collect_avg_readings^0,c
  8141   0117C4  0ECB               	movlw	203
  8142   0117C6                     u3077:
  8143   0117C6  2EE8               	decfsz	wreg,f,c
  8144   0117C8  D7FE               	bra	u3077
  8145   0117CA  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8146   0117CC  D7FC               	bra	u3077
  8147   0117CE  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8148   0117D0  D7FA               	bra	u3077
  8149   0117D2  F000               	nop	
  8150   0117D4                     
  8151                           ;colour_identify.c: 53:     }
  8152   0117D4  4A1D               	infsnz	collect_avg_readings@i_1652^0,f,c
  8153   0117D6  2A1E               	incf	(collect_avg_readings@i_1652+1)^0,f,c
  8154   0117D8  BE1E               	btfsc	(collect_avg_readings@i_1652+1)^0,7,c
  8155   0117DA  EFF8  F08B         	goto	u2411
  8156   0117DE  501E               	movf	(collect_avg_readings@i_1652+1)^0,w,c
  8157   0117E0  E109               	bnz	u2410
  8158   0117E2  0E03               	movlw	3
  8159   0117E4  5C1D               	subwf	collect_avg_readings@i_1652^0,w,c
  8160   0117E6  A0D8               	btfss	status,0,c
  8161   0117E8  EFF8  F08B         	goto	u2411
  8162   0117EC  EFFA  F08B         	goto	u2410
  8163   0117F0                     u2411:
  8164   0117F0  EFD4  F08B         	goto	l4399
  8165   0117F4                     u2410:
  8166   0117F4                     
  8167                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  8168   0117F4  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8169   0117F8  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8170   0117FC  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8171   011800  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8172   011804  90D8               	bcf	status,0,c
  8173   011806  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8174   011808  3217               	rrcf	??_collect_avg_readings^0,f,c
  8175   01180A  90D8               	bcf	status,0,c
  8176   01180C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8177   01180E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8178   011810  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  8179   011814  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  8180   011818  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8181   01181C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8182   011820                     
  8183                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  8184   011820  0E00               	movlw	0
  8185   011822  6E20               	movwf	(collect_avg_readings@i_1653+1)^0,c
  8186   011824  0E00               	movlw	0
  8187   011826  6E1F               	movwf	collect_avg_readings@i_1653^0,c
  8188   011828                     l4415:
  8189                           
  8190                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  8191   011828  ECB4  F094         	call	_color_read_Green	;wreg free
  8192   01182C  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8193   011830  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8194   011834  5008               	movf	?_color_read_Green^0,w,c
  8195   011836  26DE               	addwf	postinc2,f,c
  8196   011838  5009               	movf	(?_color_read_Green+1)^0,w,c
  8197   01183A  22DD               	addwfc	postdec2,f,c
  8198   01183C                     
  8199                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8200   01183C  0E11               	movlw	17
  8201   01183E  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8202   011840  0E3C               	movlw	60
  8203   011842  6E17               	movwf	??_collect_avg_readings^0,c
  8204   011844  0ECB               	movlw	203
  8205   011846                     u3087:
  8206   011846  2EE8               	decfsz	wreg,f,c
  8207   011848  D7FE               	bra	u3087
  8208   01184A  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8209   01184C  D7FC               	bra	u3087
  8210   01184E  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8211   011850  D7FA               	bra	u3087
  8212   011852  F000               	nop	
  8213   011854                     
  8214                           ;colour_identify.c: 59:     }
  8215   011854  4A1F               	infsnz	collect_avg_readings@i_1653^0,f,c
  8216   011856  2A20               	incf	(collect_avg_readings@i_1653+1)^0,f,c
  8217   011858  BE20               	btfsc	(collect_avg_readings@i_1653+1)^0,7,c
  8218   01185A  EF38  F08C         	goto	u2421
  8219   01185E  5020               	movf	(collect_avg_readings@i_1653+1)^0,w,c
  8220   011860  E109               	bnz	u2420
  8221   011862  0E03               	movlw	3
  8222   011864  5C1F               	subwf	collect_avg_readings@i_1653^0,w,c
  8223   011866  A0D8               	btfss	status,0,c
  8224   011868  EF38  F08C         	goto	u2421
  8225   01186C  EF3A  F08C         	goto	u2420
  8226   011870                     u2421:
  8227   011870  EF14  F08C         	goto	l4415
  8228   011874                     u2420:
  8229   011874                     
  8230                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  8231   011874  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8232   011878  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8233   01187C  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8234   011880  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8235   011884  90D8               	bcf	status,0,c
  8236   011886  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8237   011888  3217               	rrcf	??_collect_avg_readings^0,f,c
  8238   01188A  90D8               	bcf	status,0,c
  8239   01188C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8240   01188E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8241   011890  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8242   011894  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8243   011898  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8244   01189C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8245   0118A0                     
  8246                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  8247   0118A0  0E00               	movlw	0
  8248   0118A2  6E22               	movwf	(collect_avg_readings@i_1654+1)^0,c
  8249   0118A4  0E00               	movlw	0
  8250   0118A6  6E21               	movwf	collect_avg_readings@i_1654^0,c
  8251   0118A8                     l4431:
  8252                           
  8253                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  8254   0118A8  EC04  F095         	call	_color_read_Blue	;wreg free
  8255   0118AC  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8256   0118B0  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8257   0118B4  5008               	movf	?_color_read_Blue^0,w,c
  8258   0118B6  26DE               	addwf	postinc2,f,c
  8259   0118B8  5009               	movf	(?_color_read_Blue+1)^0,w,c
  8260   0118BA  22DD               	addwfc	postdec2,f,c
  8261   0118BC                     
  8262                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8263   0118BC  0E11               	movlw	17
  8264   0118BE  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8265   0118C0  0E3C               	movlw	60
  8266   0118C2  6E17               	movwf	??_collect_avg_readings^0,c
  8267   0118C4  0ECB               	movlw	203
  8268   0118C6                     u3097:
  8269   0118C6  2EE8               	decfsz	wreg,f,c
  8270   0118C8  D7FE               	bra	u3097
  8271   0118CA  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8272   0118CC  D7FC               	bra	u3097
  8273   0118CE  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8274   0118D0  D7FA               	bra	u3097
  8275   0118D2  F000               	nop	
  8276   0118D4                     
  8277                           ;colour_identify.c: 65:     }
  8278   0118D4  4A21               	infsnz	collect_avg_readings@i_1654^0,f,c
  8279   0118D6  2A22               	incf	(collect_avg_readings@i_1654+1)^0,f,c
  8280   0118D8  BE22               	btfsc	(collect_avg_readings@i_1654+1)^0,7,c
  8281   0118DA  EF78  F08C         	goto	u2431
  8282   0118DE  5022               	movf	(collect_avg_readings@i_1654+1)^0,w,c
  8283   0118E0  E109               	bnz	u2430
  8284   0118E2  0E03               	movlw	3
  8285   0118E4  5C21               	subwf	collect_avg_readings@i_1654^0,w,c
  8286   0118E6  A0D8               	btfss	status,0,c
  8287   0118E8  EF78  F08C         	goto	u2431
  8288   0118EC  EF7A  F08C         	goto	u2430
  8289   0118F0                     u2431:
  8290   0118F0  EF54  F08C         	goto	l4431
  8291   0118F4                     u2430:
  8292   0118F4                     
  8293                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  8294   0118F4  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8295   0118F8  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8296   0118FC  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8297   011900  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8298   011904  90D8               	bcf	status,0,c
  8299   011906  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8300   011908  3217               	rrcf	??_collect_avg_readings^0,f,c
  8301   01190A  90D8               	bcf	status,0,c
  8302   01190C  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8303   01190E  3217               	rrcf	??_collect_avg_readings^0,f,c
  8304   011910  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8305   011914  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8306   011918  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8307   01191C  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8308   011920  0012               	return		;funcret
  8309   011922                     __end_of_collect_avg_readings:
  8310                           	callstack 0
  8311                           
  8312 ;; *************** function _color_read_Red *****************
  8313 ;; Defined at:
  8314 ;;		line 29 in file "color.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;  tmp             2   12[COMRAM] unsigned int 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  2    7[COMRAM] unsigned int 
  8321 ;; Registers used:
  8322 ;;		wreg, status,2, status,0, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8331 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8332 ;;Total ram usage:        7 bytes
  8333 ;; Hardware stack levels used: 1
  8334 ;; Hardware stack levels required when called: 3
  8335 ;; This function calls:
  8336 ;;		_I2C_2_Master_Read
  8337 ;;		_I2C_2_Master_RepStart
  8338 ;;		_I2C_2_Master_Start
  8339 ;;		_I2C_2_Master_Stop
  8340 ;;		_I2C_2_Master_Write
  8341 ;; This function is called by:
  8342 ;;		_collect_avg_readings
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text35
  8347   012918                     __ptext35:
  8348                           	callstack 0
  8349   012918                     _color_read_Red:
  8350                           	callstack 26
  8351   012918                     
  8352                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  8353   012918  EC91  F096         	call	_I2C_2_Master_Start	;wreg free
  8354                           
  8355                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  8356   01291C  0E52               	movlw	82
  8357   01291E  EC86  F096         	call	_I2C_2_Master_Write
  8358                           
  8359                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  8360   012922  0EB6               	movlw	182
  8361   012924  EC86  F096         	call	_I2C_2_Master_Write
  8362                           
  8363                           ;color.c: 35:  I2C_2_Master_RepStart();
  8364   012928  EC96  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8365                           
  8366                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  8367   01292C  0E53               	movlw	83
  8368   01292E  EC86  F096         	call	_I2C_2_Master_Write
  8369                           
  8370                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  8371   012932  0E01               	movlw	1
  8372   012934  EC72  F095         	call	_I2C_2_Master_Read
  8373   012938  6E0A               	movwf	??_color_read_Red^0,c
  8374   01293A  500A               	movf	??_color_read_Red^0,w,c
  8375   01293C  6E0D               	movwf	color_read_Red@tmp^0,c
  8376   01293E  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  8377                           
  8378                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8379   012940  0E00               	movlw	0
  8380   012942  EC72  F095         	call	_I2C_2_Master_Read
  8381   012946  6E0A               	movwf	??_color_read_Red^0,c
  8382   012948  500A               	movf	??_color_read_Red^0,w,c
  8383   01294A  6E0C               	movwf	(??_color_read_Red+2)^0,c
  8384   01294C  6A0B               	clrf	(??_color_read_Red+1)^0,c
  8385   01294E  500D               	movf	color_read_Red@tmp^0,w,c
  8386   012950  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  8387   012952  6E0D               	movwf	color_read_Red@tmp^0,c
  8388   012954  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  8389   012956  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  8390   012958  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  8391                           
  8392                           ;color.c: 39:  I2C_2_Master_Stop();
  8393   01295A  EC8C  F096         	call	_I2C_2_Master_Stop	;wreg free
  8394   01295E                     
  8395                           ;color.c: 40:  return tmp;
  8396   01295E  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  8397   012962  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8398   012966  0012               	return		;funcret
  8399   012968                     __end_of_color_read_Red:
  8400                           	callstack 0
  8401                           
  8402 ;; *************** function _color_read_Green *****************
  8403 ;; Defined at:
  8404 ;;		line 43 in file "color.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  tmp             2   12[COMRAM] unsigned int 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  2    7[COMRAM] unsigned int 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8420 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8421 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8422 ;;Total ram usage:        7 bytes
  8423 ;; Hardware stack levels used: 1
  8424 ;; Hardware stack levels required when called: 3
  8425 ;; This function calls:
  8426 ;;		_I2C_2_Master_Read
  8427 ;;		_I2C_2_Master_RepStart
  8428 ;;		_I2C_2_Master_Start
  8429 ;;		_I2C_2_Master_Stop
  8430 ;;		_I2C_2_Master_Write
  8431 ;; This function is called by:
  8432 ;;		_collect_avg_readings
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text36
  8437   012968                     __ptext36:
  8438                           	callstack 0
  8439   012968                     _color_read_Green:
  8440                           	callstack 26
  8441   012968                     
  8442                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  8443   012968  EC91  F096         	call	_I2C_2_Master_Start	;wreg free
  8444                           
  8445                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  8446   01296C  0E52               	movlw	82
  8447   01296E  EC86  F096         	call	_I2C_2_Master_Write
  8448                           
  8449                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  8450   012972  0EB8               	movlw	184
  8451   012974  EC86  F096         	call	_I2C_2_Master_Write
  8452                           
  8453                           ;color.c: 49:  I2C_2_Master_RepStart();
  8454   012978  EC96  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8455                           
  8456                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  8457   01297C  0E53               	movlw	83
  8458   01297E  EC86  F096         	call	_I2C_2_Master_Write
  8459                           
  8460                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  8461   012982  0E01               	movlw	1
  8462   012984  EC72  F095         	call	_I2C_2_Master_Read
  8463   012988  6E0A               	movwf	??_color_read_Green^0,c
  8464   01298A  500A               	movf	??_color_read_Green^0,w,c
  8465   01298C  6E0D               	movwf	color_read_Green@tmp^0,c
  8466   01298E  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  8467                           
  8468                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8469   012990  0E00               	movlw	0
  8470   012992  EC72  F095         	call	_I2C_2_Master_Read
  8471   012996  6E0A               	movwf	??_color_read_Green^0,c
  8472   012998  500A               	movf	??_color_read_Green^0,w,c
  8473   01299A  6E0C               	movwf	(??_color_read_Green+2)^0,c
  8474   01299C  6A0B               	clrf	(??_color_read_Green+1)^0,c
  8475   01299E  500D               	movf	color_read_Green@tmp^0,w,c
  8476   0129A0  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  8477   0129A2  6E0D               	movwf	color_read_Green@tmp^0,c
  8478   0129A4  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  8479   0129A6  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  8480   0129A8  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  8481                           
  8482                           ;color.c: 53:  I2C_2_Master_Stop();
  8483   0129AA  EC8C  F096         	call	_I2C_2_Master_Stop	;wreg free
  8484   0129AE                     
  8485                           ;color.c: 54:  return tmp;
  8486   0129AE  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  8487   0129B2  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8488   0129B6  0012               	return		;funcret
  8489   0129B8                     __end_of_color_read_Green:
  8490                           	callstack 0
  8491                           
  8492 ;; *************** function _color_read_Clear *****************
  8493 ;; Defined at:
  8494 ;;		line 71 in file "color.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;		None
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  tmp             2   12[COMRAM] unsigned int 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  2    7[COMRAM] unsigned int 
  8501 ;; Registers used:
  8502 ;;		wreg, status,2, status,0, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8510 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8511 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;Total ram usage:        7 bytes
  8513 ;; Hardware stack levels used: 1
  8514 ;; Hardware stack levels required when called: 3
  8515 ;; This function calls:
  8516 ;;		_I2C_2_Master_Read
  8517 ;;		_I2C_2_Master_RepStart
  8518 ;;		_I2C_2_Master_Start
  8519 ;;		_I2C_2_Master_Stop
  8520 ;;		_I2C_2_Master_Write
  8521 ;; This function is called by:
  8522 ;;		_main
  8523 ;;		_clear_read_calibration
  8524 ;;		_collect_avg_readings
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text37
  8529   0129B8                     __ptext37:
  8530                           	callstack 0
  8531   0129B8                     _color_read_Clear:
  8532                           	callstack 27
  8533   0129B8                     
  8534                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  8535   0129B8  EC91  F096         	call	_I2C_2_Master_Start	;wreg free
  8536                           
  8537                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  8538   0129BC  0E52               	movlw	82
  8539   0129BE  EC86  F096         	call	_I2C_2_Master_Write
  8540                           
  8541                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  8542   0129C2  0EB4               	movlw	180
  8543   0129C4  EC86  F096         	call	_I2C_2_Master_Write
  8544                           
  8545                           ;color.c: 77:  I2C_2_Master_RepStart();
  8546   0129C8  EC96  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8547                           
  8548                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  8549   0129CC  0E53               	movlw	83
  8550   0129CE  EC86  F096         	call	_I2C_2_Master_Write
  8551                           
  8552                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  8553   0129D2  0E01               	movlw	1
  8554   0129D4  EC72  F095         	call	_I2C_2_Master_Read
  8555   0129D8  6E0A               	movwf	??_color_read_Clear^0,c
  8556   0129DA  500A               	movf	??_color_read_Clear^0,w,c
  8557   0129DC  6E0D               	movwf	color_read_Clear@tmp^0,c
  8558   0129DE  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  8559                           
  8560                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8561   0129E0  0E00               	movlw	0
  8562   0129E2  EC72  F095         	call	_I2C_2_Master_Read
  8563   0129E6  6E0A               	movwf	??_color_read_Clear^0,c
  8564   0129E8  500A               	movf	??_color_read_Clear^0,w,c
  8565   0129EA  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  8566   0129EC  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  8567   0129EE  500D               	movf	color_read_Clear@tmp^0,w,c
  8568   0129F0  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  8569   0129F2  6E0D               	movwf	color_read_Clear@tmp^0,c
  8570   0129F4  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  8571   0129F6  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  8572   0129F8  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  8573                           
  8574                           ;color.c: 81:  I2C_2_Master_Stop();
  8575   0129FA  EC8C  F096         	call	_I2C_2_Master_Stop	;wreg free
  8576   0129FE                     
  8577                           ;color.c: 82:  return tmp;
  8578   0129FE  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  8579   012A02  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8580   012A06  0012               	return		;funcret
  8581   012A08                     __end_of_color_read_Clear:
  8582                           	callstack 0
  8583                           
  8584 ;; *************** function _color_read_Blue *****************
  8585 ;; Defined at:
  8586 ;;		line 57 in file "color.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;		None
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  tmp             2   12[COMRAM] unsigned int 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  2    7[COMRAM] unsigned int 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, status,0, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8603 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8604 ;;Total ram usage:        7 bytes
  8605 ;; Hardware stack levels used: 1
  8606 ;; Hardware stack levels required when called: 3
  8607 ;; This function calls:
  8608 ;;		_I2C_2_Master_Read
  8609 ;;		_I2C_2_Master_RepStart
  8610 ;;		_I2C_2_Master_Start
  8611 ;;		_I2C_2_Master_Stop
  8612 ;;		_I2C_2_Master_Write
  8613 ;; This function is called by:
  8614 ;;		_collect_avg_readings
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text38
  8619   012A08                     __ptext38:
  8620                           	callstack 0
  8621   012A08                     _color_read_Blue:
  8622                           	callstack 26
  8623   012A08                     
  8624                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  8625   012A08  EC91  F096         	call	_I2C_2_Master_Start	;wreg free
  8626                           
  8627                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  8628   012A0C  0E52               	movlw	82
  8629   012A0E  EC86  F096         	call	_I2C_2_Master_Write
  8630                           
  8631                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  8632   012A12  0EBA               	movlw	186
  8633   012A14  EC86  F096         	call	_I2C_2_Master_Write
  8634                           
  8635                           ;color.c: 63:  I2C_2_Master_RepStart();
  8636   012A18  EC96  F096         	call	_I2C_2_Master_RepStart	;wreg free
  8637                           
  8638                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  8639   012A1C  0E53               	movlw	83
  8640   012A1E  EC86  F096         	call	_I2C_2_Master_Write
  8641                           
  8642                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  8643   012A22  0E01               	movlw	1
  8644   012A24  EC72  F095         	call	_I2C_2_Master_Read
  8645   012A28  6E0A               	movwf	??_color_read_Blue^0,c
  8646   012A2A  500A               	movf	??_color_read_Blue^0,w,c
  8647   012A2C  6E0D               	movwf	color_read_Blue@tmp^0,c
  8648   012A2E  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  8649                           
  8650                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8651   012A30  0E00               	movlw	0
  8652   012A32  EC72  F095         	call	_I2C_2_Master_Read
  8653   012A36  6E0A               	movwf	??_color_read_Blue^0,c
  8654   012A38  500A               	movf	??_color_read_Blue^0,w,c
  8655   012A3A  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  8656   012A3C  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  8657   012A3E  500D               	movf	color_read_Blue@tmp^0,w,c
  8658   012A40  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  8659   012A42  6E0D               	movwf	color_read_Blue@tmp^0,c
  8660   012A44  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  8661   012A46  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  8662   012A48  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  8663                           
  8664                           ;color.c: 67:  I2C_2_Master_Stop();
  8665   012A4A  EC8C  F096         	call	_I2C_2_Master_Stop	;wreg free
  8666   012A4E                     
  8667                           ;color.c: 68:  return tmp;
  8668   012A4E  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  8669   012A52  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8670   012A56  0012               	return		;funcret
  8671   012A58                     __end_of_color_read_Blue:
  8672                           	callstack 0
  8673                           
  8674 ;; *************** function _I2C_2_Master_Write *****************
  8675 ;; Defined at:
  8676 ;;		line 45 in file "i2c.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  data_byte       1    wreg     unsigned char 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  data_byte       1    4[COMRAM] unsigned char 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, status,2, status,0, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8694 ;;Total ram usage:        1 bytes
  8695 ;; Hardware stack levels used: 1
  8696 ;; Hardware stack levels required when called: 2
  8697 ;; This function calls:
  8698 ;;		_I2C_2_Master_Idle
  8699 ;; This function is called by:
  8700 ;;		_color_writetoaddr
  8701 ;;		_color_read_Red
  8702 ;;		_color_read_Green
  8703 ;;		_color_read_Blue
  8704 ;;		_color_read_Clear
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text39
  8709   012D0C                     __ptext39:
  8710                           	callstack 0
  8711   012D0C                     _I2C_2_Master_Write:
  8712                           	callstack 27
  8713                           
  8714                           ;incstack = 0
  8715                           ;I2C_2_Master_Write@data_byte stored from wreg
  8716   012D0C  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  8717   012D0E                     
  8718                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8719   012D0E  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8720   012D12                     
  8721                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8722   012D12  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8723   012D16  0012               	return		;funcret
  8724   012D18                     __end_of_I2C_2_Master_Write:
  8725                           	callstack 0
  8726                           
  8727 ;; *************** function _I2C_2_Master_Stop *****************
  8728 ;; Defined at:
  8729 ;;		line 39 in file "i2c.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;		None
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;		None
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  1    wreg      void 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8747 ;;Total ram usage:        0 bytes
  8748 ;; Hardware stack levels used: 1
  8749 ;; Hardware stack levels required when called: 2
  8750 ;; This function calls:
  8751 ;;		_I2C_2_Master_Idle
  8752 ;; This function is called by:
  8753 ;;		_color_writetoaddr
  8754 ;;		_color_read_Red
  8755 ;;		_color_read_Green
  8756 ;;		_color_read_Blue
  8757 ;;		_color_read_Clear
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text40
  8762   012D18                     __ptext40:
  8763                           	callstack 0
  8764   012D18                     _I2C_2_Master_Stop:
  8765                           	callstack 27
  8766   012D18                     
  8767                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8768   012D18  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8769   012D1C                     
  8770                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8771   012D1C  010E               	movlb	14	; () banked
  8772   012D1E  85DA               	bsf	218,2,b	;volatile
  8773   012D20                     
  8774                           ; BSR set to: 14
  8775   012D20  0012               	return		;funcret
  8776   012D22                     __end_of_I2C_2_Master_Stop:
  8777                           	callstack 0
  8778                           
  8779 ;; *************** function _I2C_2_Master_Start *****************
  8780 ;; Defined at:
  8781 ;;		line 27 in file "i2c.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;		None
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;		None
  8786 ;; Return value:  Size  Location     Type
  8787 ;;                  1    wreg      void 
  8788 ;; Registers used:
  8789 ;;		wreg, status,2, status,0, cstack
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8799 ;;Total ram usage:        0 bytes
  8800 ;; Hardware stack levels used: 1
  8801 ;; Hardware stack levels required when called: 2
  8802 ;; This function calls:
  8803 ;;		_I2C_2_Master_Idle
  8804 ;; This function is called by:
  8805 ;;		_color_writetoaddr
  8806 ;;		_color_read_Red
  8807 ;;		_color_read_Green
  8808 ;;		_color_read_Blue
  8809 ;;		_color_read_Clear
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           	psect	text41
  8814   012D22                     __ptext41:
  8815                           	callstack 0
  8816   012D22                     _I2C_2_Master_Start:
  8817                           	callstack 27
  8818   012D22                     
  8819                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8820   012D22  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8821   012D26                     
  8822                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8823   012D26  010E               	movlb	14	; () banked
  8824   012D28  81DA               	bsf	218,0,b	;volatile
  8825   012D2A                     
  8826                           ; BSR set to: 14
  8827   012D2A  0012               	return		;funcret
  8828   012D2C                     __end_of_I2C_2_Master_Start:
  8829                           	callstack 0
  8830                           
  8831 ;; *************** function _I2C_2_Master_RepStart *****************
  8832 ;; Defined at:
  8833 ;;		line 33 in file "i2c.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;		None
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0, cstack
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8851 ;;Total ram usage:        0 bytes
  8852 ;; Hardware stack levels used: 1
  8853 ;; Hardware stack levels required when called: 2
  8854 ;; This function calls:
  8855 ;;		_I2C_2_Master_Idle
  8856 ;; This function is called by:
  8857 ;;		_color_read_Red
  8858 ;;		_color_read_Green
  8859 ;;		_color_read_Blue
  8860 ;;		_color_read_Clear
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           	psect	text42
  8865   012D2C                     __ptext42:
  8866                           	callstack 0
  8867   012D2C                     _I2C_2_Master_RepStart:
  8868                           	callstack 27
  8869   012D2C                     
  8870                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8871   012D2C  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8872   012D30                     
  8873                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8874   012D30  010E               	movlb	14	; () banked
  8875   012D32  83DA               	bsf	218,1,b	;volatile
  8876   012D34                     
  8877                           ; BSR set to: 14
  8878   012D34  0012               	return		;funcret
  8879   012D36                     __end_of_I2C_2_Master_RepStart:
  8880                           	callstack 0
  8881                           
  8882 ;; *************** function _I2C_2_Master_Read *****************
  8883 ;; Defined at:
  8884 ;;		line 51 in file "i2c.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;  ack             1    wreg     unsigned char 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  ack             1    5[COMRAM] unsigned char 
  8889 ;;  tmp             1    6[COMRAM] unsigned char 
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  1    wreg      unsigned char 
  8892 ;; Registers used:
  8893 ;;		wreg, status,2, status,0, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8902 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8903 ;;Total ram usage:        3 bytes
  8904 ;; Hardware stack levels used: 1
  8905 ;; Hardware stack levels required when called: 2
  8906 ;; This function calls:
  8907 ;;		_I2C_2_Master_Idle
  8908 ;; This function is called by:
  8909 ;;		_color_read_Red
  8910 ;;		_color_read_Green
  8911 ;;		_color_read_Blue
  8912 ;;		_color_read_Clear
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text43
  8917   012AE4                     __ptext43:
  8918                           	callstack 0
  8919   012AE4                     _I2C_2_Master_Read:
  8920                           	callstack 27
  8921                           
  8922                           ; BSR set to: 14
  8923                           ;incstack = 0
  8924                           ;I2C_2_Master_Read@ack stored from wreg
  8925   012AE4  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  8926   012AE6                     
  8927                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8928   012AE6  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8929   012AEA                     
  8930                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8931   012AEA  010E               	movlb	14	; () banked
  8932   012AEC  87DA               	bsf	218,3,b	;volatile
  8933                           
  8934                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8935   012AEE  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8936   012AF2                     
  8937                           ;i2c.c: 57:   tmp = SSP2BUF;
  8938   012AF2  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8939                           
  8940                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8941   012AF6  EC24  F096         	call	_I2C_2_Master_Idle	;wreg free
  8942   012AFA                     
  8943                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8944   012AFA  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  8945   012AFC  B4D8               	btfsc	status,2,c
  8946   012AFE  EF83  F095         	goto	u2281
  8947   012B02  EF87  F095         	goto	u2280
  8948   012B06                     u2281:
  8949   012B06  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8950   012B08  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  8951   012B0A  EF88  F095         	goto	u2298
  8952   012B0E                     u2280:
  8953   012B0E  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8954   012B10                     u2298:
  8955   012B10  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  8956   012B12  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  8957   012B14  010E               	movlb	14	; () banked
  8958   012B16  51DA               	movf	218,w,b	;volatile
  8959   012B18  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8960   012B1A  0BDF               	andlw	-33
  8961   012B1C  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8962   012B1E  6FDA               	movwf	218,b	;volatile
  8963   012B20                     
  8964                           ; BSR set to: 14
  8965                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8966   012B20  89DA               	bsf	218,4,b	;volatile
  8967   012B22                     
  8968                           ; BSR set to: 14
  8969                           ;i2c.c: 61:   return tmp;
  8970   012B22  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  8971   012B24                     
  8972                           ; BSR set to: 14
  8973   012B24  0012               	return		;funcret
  8974   012B26                     __end_of_I2C_2_Master_Read:
  8975                           	callstack 0
  8976                           
  8977 ;; *************** function _I2C_2_Master_Idle *****************
  8978 ;; Defined at:
  8979 ;;		line 22 in file "i2c.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;		None
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;		None
  8984 ;; Return value:  Size  Location     Type
  8985 ;;                  1    wreg      void 
  8986 ;; Registers used:
  8987 ;;		wreg, status,2, status,0
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8997 ;;Total ram usage:        1 bytes
  8998 ;; Hardware stack levels used: 1
  8999 ;; Hardware stack levels required when called: 1
  9000 ;; This function calls:
  9001 ;;		Nothing
  9002 ;; This function is called by:
  9003 ;;		_I2C_2_Master_Start
  9004 ;;		_I2C_2_Master_RepStart
  9005 ;;		_I2C_2_Master_Stop
  9006 ;;		_I2C_2_Master_Write
  9007 ;;		_I2C_2_Master_Read
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text44
  9012   012C48                     __ptext44:
  9013                           	callstack 0
  9014   012C48                     _I2C_2_Master_Idle:
  9015                           	callstack 27
  9016   012C48                     l142:
  9017   012C48  010E               	movlb	14	; () banked
  9018   012C4A  B5D8               	btfsc	216,2,b	;volatile
  9019   012C4C  EF2A  F096         	goto	u2231
  9020   012C50  EF2C  F096         	goto	u2230
  9021   012C54                     u2231:
  9022   012C54  EF24  F096         	goto	l142
  9023   012C58                     u2230:
  9024   012C58                     
  9025                           ; BSR set to: 14
  9026   012C58  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9027   012C5C  0E1F               	movlw	31
  9028   012C5E  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  9029   012C60  A4D8               	btfss	status,2,c
  9030   012C62  EF35  F096         	goto	u2241
  9031   012C66  EF37  F096         	goto	u2240
  9032   012C6A                     u2241:
  9033   012C6A  EF24  F096         	goto	l142
  9034   012C6E                     u2240:
  9035   012C6E                     
  9036                           ; BSR set to: 14
  9037   012C6E  0012               	return		;funcret
  9038   012C70                     __end_of_I2C_2_Master_Idle:
  9039                           	callstack 0
  9040                           
  9041 ;; *************** function ___lwmod *****************
  9042 ;; Defined at:
  9043 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;  dividend        2    3[COMRAM] unsigned int 
  9046 ;;  divisor         2    5[COMRAM] unsigned int 
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  counter         1    7[COMRAM] unsigned char 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  2    3[COMRAM] unsigned int 
  9051 ;; Registers used:
  9052 ;;		wreg, status,2, status,0
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9061 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9062 ;;Total ram usage:        5 bytes
  9063 ;; Hardware stack levels used: 1
  9064 ;; Hardware stack levels required when called: 1
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_main
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text45
  9073   0127B2                     __ptext45:
  9074                           	callstack 0
  9075   0127B2                     ___lwmod:
  9076                           	callstack 29
  9077   0127B2  5006               	movf	___lwmod@divisor^0,w,c
  9078   0127B4  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  9079   0127B6  B4D8               	btfsc	status,2,c
  9080   0127B8  EFE0  F093         	goto	u2551
  9081   0127BC  EFE2  F093         	goto	u2550
  9082   0127C0                     u2551:
  9083   0127C0  EF06  F094         	goto	l1032
  9084   0127C4                     u2550:
  9085   0127C4  0E01               	movlw	1
  9086   0127C6  6E08               	movwf	___lwmod@counter^0,c
  9087   0127C8  EFEA  F093         	goto	l4831
  9088   0127CC                     l4829:
  9089   0127CC  90D8               	bcf	status,0,c
  9090   0127CE  3606               	rlcf	___lwmod@divisor^0,f,c
  9091   0127D0  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  9092   0127D2  2A08               	incf	___lwmod@counter^0,f,c
  9093   0127D4                     l4831:
  9094   0127D4  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  9095   0127D6  EFEF  F093         	goto	u2561
  9096   0127DA  EFF1  F093         	goto	u2560
  9097   0127DE                     u2561:
  9098   0127DE  EFE6  F093         	goto	l4829
  9099   0127E2                     u2560:
  9100   0127E2                     l4833:
  9101   0127E2  5006               	movf	___lwmod@divisor^0,w,c
  9102   0127E4  5C04               	subwf	___lwmod@dividend^0,w,c
  9103   0127E6  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9104   0127E8  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  9105   0127EA  A0D8               	btfss	status,0,c
  9106   0127EC  EFFA  F093         	goto	u2571
  9107   0127F0  EFFC  F093         	goto	u2570
  9108   0127F4                     u2571:
  9109   0127F4  EF00  F094         	goto	l4837
  9110   0127F8                     u2570:
  9111   0127F8  5006               	movf	___lwmod@divisor^0,w,c
  9112   0127FA  5E04               	subwf	___lwmod@dividend^0,f,c
  9113   0127FC  5007               	movf	(___lwmod@divisor+1)^0,w,c
  9114   0127FE  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  9115   012800                     l4837:
  9116   012800  90D8               	bcf	status,0,c
  9117   012802  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  9118   012804  3206               	rrcf	___lwmod@divisor^0,f,c
  9119   012806  2E08               	decfsz	___lwmod@counter^0,f,c
  9120   012808  EFF1  F093         	goto	l4833
  9121   01280C                     l1032:
  9122   01280C  C004  F004         	movff	___lwmod@dividend,?___lwmod
  9123   012810  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  9124   012814  0012               	return		;funcret
  9125   012816                     __end_of___lwmod:
  9126                           	callstack 0
  9127                           
  9128 ;; *************** function _LEDSon_init *****************
  9129 ;; Defined at:
  9130 ;;		line 18 in file "LEDsOn.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;		None
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;                  1    wreg      void 
  9137 ;; Registers used:
  9138 ;;		None
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9148 ;;Total ram usage:        0 bytes
  9149 ;; Hardware stack levels used: 1
  9150 ;; Hardware stack levels required when called: 1
  9151 ;; This function calls:
  9152 ;;		Nothing
  9153 ;; This function is called by:
  9154 ;;		_main
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           	psect	text46
  9159   012BF4                     __ptext46:
  9160                           	callstack 0
  9161   012BF4                     _LEDSon_init:
  9162                           	callstack 29
  9163   012BF4                     
  9164                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  9165   012BF4  9288               	bcf	136,1,c	;volatile
  9166                           
  9167                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  9168   012BF6  9088               	bcf	136,0,c	;volatile
  9169                           
  9170                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  9171   012BF8  9884               	bcf	132,4,c	;volatile
  9172                           
  9173                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  9174   012BFA  9684               	bcf	132,3,c	;volatile
  9175                           
  9176                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  9177   012BFC  9086               	bcf	134,0,c	;volatile
  9178                           
  9179                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  9180   012BFE  9287               	bcf	135,1,c	;volatile
  9181                           
  9182                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  9183   012C00  9E86               	bcf	134,7,c	;volatile
  9184                           
  9185                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  9186   012C02  9881               	bcf	129,4,c	;volatile
  9187                           
  9188                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  9189   012C04  8E7E               	bsf	126,7,c	;volatile
  9190                           
  9191                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  9192   012C06  827F               	bsf	127,1,c	;volatile
  9193                           
  9194                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  9195   012C08  8879               	bsf	121,4,c	;volatile
  9196                           
  9197                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  9198   012C0A  987C               	bcf	124,4,c	;volatile
  9199                           
  9200                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  9201   012C0C  9280               	bcf	128,1,c	;volatile
  9202                           
  9203                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  9204   012C0E  907E               	bcf	126,0,c	;volatile
  9205                           
  9206                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  9207   012C10  9080               	bcf	128,0,c	;volatile
  9208                           
  9209                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  9210   012C12  967C               	bcf	124,3,c	;volatile
  9211                           
  9212                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  9213   012C14  9688               	bcf	136,3,c	;volatile
  9214                           
  9215                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  9216   012C16  9680               	bcf	128,3,c	;volatile
  9217                           
  9218                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  9219   012C18  9E84               	bcf	132,7,c	;volatile
  9220                           
  9221                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  9222   012C1A  9E7C               	bcf	124,7,c	;volatile
  9223   012C1C  0012               	return		;funcret
  9224   012C1E                     __end_of_LEDSon_init:
  9225                           	callstack 0
  9226                           
  9227 ;; *************** function _Interrupts_init *****************
  9228 ;; Defined at:
  9229 ;;		line 7 in file "interrupts.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  1    wreg      void 
  9236 ;; Registers used:
  9237 ;;		wreg, status,2
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9247 ;;Total ram usage:        0 bytes
  9248 ;; Hardware stack levels used: 1
  9249 ;; Hardware stack levels required when called: 1
  9250 ;; This function calls:
  9251 ;;		Nothing
  9252 ;; This function is called by:
  9253 ;;		_main
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           	psect	text47
  9258   012C1E                     __ptext47:
  9259                           	callstack 0
  9260   012C1E                     _Interrupts_init:
  9261                           	callstack 29
  9262   012C1E                     
  9263                           ;interrupts.c: 10:     TMR0IE=1;
  9264   012C1E  010E               	movlb	14	; () banked
  9265   012C20  8B29               	bsf	41,5,b	;volatile
  9266   012C22                     
  9267                           ; BSR set to: 14
  9268                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  9269   012C22  50D6               	movf	214,w,c	;volatile
  9270   012C24  0B1F               	andlw	-225
  9271   012C26  0940               	iorlw	64
  9272   012C28  6ED6               	movwf	214,c	;volatile
  9273   012C2A                     
  9274                           ; BSR set to: 14
  9275                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  9276   012C2A  88D6               	bsf	214,4,c	;volatile
  9277                           
  9278                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  9279   012C2C  50D6               	movf	214,w,c	;volatile
  9280   012C2E  0BF0               	andlw	-16
  9281   012C30  0905               	iorlw	5
  9282   012C32  6ED6               	movwf	214,c	;volatile
  9283   012C34                     
  9284                           ; BSR set to: 14
  9285                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  9286   012C34  88D5               	bsf	213,4,c	;volatile
  9287   012C36                     
  9288                           ; BSR set to: 14
  9289                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  9290   012C36  9B1F               	bcf	31,5,b	;volatile
  9291                           
  9292                           ;interrupts.c: 16:     TMR0H=0b00111100;
  9293   012C38  0E3C               	movlw	60
  9294   012C3A  6ED4               	movwf	212,c	;volatile
  9295                           
  9296                           ;interrupts.c: 17:     TMR0L=0b10101111;
  9297   012C3C  0EAF               	movlw	175
  9298   012C3E  6ED3               	movwf	211,c	;volatile
  9299   012C40                     
  9300                           ; BSR set to: 14
  9301                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  9302   012C40  8ED5               	bsf	213,7,c	;volatile
  9303   012C42                     
  9304                           ; BSR set to: 14
  9305                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  9306   012C42  8CF2               	bsf	242,6,c	;volatile
  9307   012C44                     
  9308                           ; BSR set to: 14
  9309                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  9310   012C44  8EF2               	bsf	242,7,c	;volatile
  9311   012C46                     
  9312                           ; BSR set to: 14
  9313   012C46  0012               	return		;funcret
  9314   012C48                     __end_of_Interrupts_init:
  9315                           	callstack 0
  9316                           
  9317 ;; *************** function _LowISR *****************
  9318 ;; Defined at:
  9319 ;;		line 24 in file "interrupts.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9335 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9336 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9337 ;;Total ram usage:        3 bytes
  9338 ;; Hardware stack levels used: 1
  9339 ;; This function calls:
  9340 ;;		Nothing
  9341 ;; This function is called by:
  9342 ;;		Interrupt level 1
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           	psect	intcodelo
  9347   000018                     __pintcodelo:
  9348                           	callstack 0
  9349   000018                     _LowISR:
  9350                           	callstack 20
  9351                           
  9352                           ; BSR set to: 14
  9353                           ;incstack = 0
  9354   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  9355   00001A  CFD8 F001          	movff	status,??_LowISR
  9356   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  9357   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  9358   000026                     
  9359                           ;interrupts.c: 27:     if(TMR0IF){
  9360   000026  010E               	movlb	14	; () banked
  9361   000028  AB33               	btfss	51,5,b	;volatile
  9362   00002A  EF19  F000         	goto	i1u186_21
  9363   00002E  EF1B  F000         	goto	i1u186_20
  9364   000032                     i1u186_21:
  9365   000032  EF26  F000         	goto	i1l528
  9366   000036                     i1u186_20:
  9367   000036                     
  9368                           ; BSR set to: 14
  9369                           ;interrupts.c: 28:     TMR0H=0b00111100;
  9370   000036  0E3C               	movlw	60
  9371   000038  6ED4               	movwf	212,c	;volatile
  9372                           
  9373                           ;interrupts.c: 29:     TMR0L=0b10101111;
  9374   00003A  0EAF               	movlw	175
  9375   00003C  6ED3               	movwf	211,c	;volatile
  9376                           
  9377                           ;interrupts.c: 34:         TimerFlag=1;
  9378   00003E  0E00               	movlw	0
  9379   000040  0100               	movlb	0	; () banked
  9380   000042  6FDC               	movwf	(_TimerFlag+1)& (0+255),b
  9381   000044  0E01               	movlw	1
  9382   000046  6FDB               	movwf	_TimerFlag& (0+255),b
  9383   000048                     
  9384                           ; BSR set to: 0
  9385                           ;interrupts.c: 36:        TMR0IF=0;
  9386   000048  010E               	movlb	14	; () banked
  9387   00004A  9B33               	bcf	51,5,b	;volatile
  9388   00004C                     i1l528:
  9389                           
  9390                           ; BSR set to: 14
  9391   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  9392   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  9393   000054  C001  FFD8         	movff	??_LowISR,status
  9394   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  9395   00005A  0010               	retfie	
  9396   00005C                     __end_of_LowISR:
  9397                           	callstack 0
  9398                           
  9399                           	psect	rparam
  9400   000000                     
  9401                           	psect	temp
  9402   00005B                     btemp:
  9403                           	callstack 0
  9404   00005B                     	ds	1
  9405   000000                     int$flags	set	btemp
  9406   000000                     wtemp8	set	btemp+1
  9407   000000                     ttemp5	set	btemp+1
  9408   000000                     ttemp6	set	btemp+4
  9409   000000                     ttemp7	set	btemp+8
  9410                           
  9411                           	psect	idloc
  9412                           
  9413                           ;Config register IDLOC0 @ 0x200000
  9414                           ;	unspecified, using default values
  9415   200000                     	org	2097152
  9416   200000  0FFF               	dw	4095
  9417                           
  9418                           ;Config register IDLOC1 @ 0x200002
  9419                           ;	unspecified, using default values
  9420   200002                     	org	2097154
  9421   200002  0FFF               	dw	4095
  9422                           
  9423                           ;Config register IDLOC2 @ 0x200004
  9424                           ;	unspecified, using default values
  9425   200004                     	org	2097156
  9426   200004  0FFF               	dw	4095
  9427                           
  9428                           ;Config register IDLOC3 @ 0x200006
  9429                           ;	unspecified, using default values
  9430   200006                     	org	2097158
  9431   200006  0FFF               	dw	4095
  9432                           
  9433                           ;Config register IDLOC4 @ 0x200008
  9434                           ;	unspecified, using default values
  9435   200008                     	org	2097160
  9436   200008  0FFF               	dw	4095
  9437                           
  9438                           ;Config register IDLOC5 @ 0x20000A
  9439                           ;	unspecified, using default values
  9440   20000A                     	org	2097162
  9441   20000A  0FFF               	dw	4095
  9442                           
  9443                           ;Config register IDLOC6 @ 0x20000C
  9444                           ;	unspecified, using default values
  9445   20000C                     	org	2097164
  9446   20000C  0FFF               	dw	4095
  9447                           
  9448                           ;Config register IDLOC7 @ 0x20000E
  9449                           ;	unspecified, using default values
  9450   20000E                     	org	2097166
  9451   20000E  0FFF               	dw	4095
  9452                           
  9453                           	psect	config
  9454                           
  9455                           ;Config register CONFIG1L @ 0x300000
  9456                           ;	External Oscillator mode Selection bits
  9457                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9458                           ;	Power-up default value for COSC bits
  9459                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9460   300000                     	org	3145728
  9461   300000  AA                 	db	170
  9462                           
  9463                           ;Config register CONFIG1H @ 0x300001
  9464                           ;	unspecified, using default values
  9465                           ;	Clock Out Enable bit
  9466                           ;	CLKOUTEN = 0x1, unprogrammed default
  9467                           ;	Clock Switch Enable bit
  9468                           ;	CSWEN = 0x1, unprogrammed default
  9469                           ;	Fail-Safe Clock Monitor Enable bit
  9470                           ;	FCMEN = 0x1, unprogrammed default
  9471   300001                     	org	3145729
  9472   300001  FF                 	db	255
  9473                           
  9474                           ;Config register CONFIG2L @ 0x300002
  9475                           ;	unspecified, using default values
  9476                           ;	Master Clear Enable bit
  9477                           ;	MCLRE = 0x1, unprogrammed default
  9478                           ;	Power-up Timer Enable bit
  9479                           ;	PWRTE = 0x1, unprogrammed default
  9480                           ;	Low-power BOR enable bit
  9481                           ;	LPBOREN = 0x1, unprogrammed default
  9482                           ;	Brown-out Reset Enable bits
  9483                           ;	BOREN = 0x3, unprogrammed default
  9484   300002                     	org	3145730
  9485   300002  FF                 	db	255
  9486                           
  9487                           ;Config register CONFIG2H @ 0x300003
  9488                           ;	unspecified, using default values
  9489                           ;	Brown Out Reset Voltage selection bits
  9490                           ;	BORV = 0x3, unprogrammed default
  9491                           ;	ZCD Disable bit
  9492                           ;	ZCD = 0x1, unprogrammed default
  9493                           ;	PPSLOCK bit One-Way Set Enable bit
  9494                           ;	PPS1WAY = 0x1, unprogrammed default
  9495                           ;	Stack Full/Underflow Reset Enable bit
  9496                           ;	STVREN = 0x1, unprogrammed default
  9497                           ;	Debugger Enable bit
  9498                           ;	DEBUG = 0x1, unprogrammed default
  9499                           ;	Extended Instruction Set Enable bit
  9500                           ;	XINST = 0x1, unprogrammed default
  9501   300003                     	org	3145731
  9502   300003  FF                 	db	255
  9503                           
  9504                           ;Config register CONFIG3L @ 0x300004
  9505                           ;	WDT Period Select bits
  9506                           ;	WDTCPS = 0x1F, unprogrammed default
  9507                           ;	WDT operating mode
  9508                           ;	WDTE = OFF, WDT Disabled
  9509   300004                     	org	3145732
  9510   300004  9F                 	db	159
  9511                           
  9512                           ;Config register CONFIG3H @ 0x300005
  9513                           ;	unspecified, using default values
  9514                           ;	WDT Window Select bits
  9515                           ;	WDTCWS = 0x7, unprogrammed default
  9516                           ;	WDT input clock selector
  9517                           ;	WDTCCS = 0x7, unprogrammed default
  9518   300005                     	org	3145733
  9519   300005  FF                 	db	255
  9520                           
  9521                           ;Config register CONFIG4L @ 0x300006
  9522                           ;	unspecified, using default values
  9523                           ;	Write Protection Block 0
  9524                           ;	WRT0 = 0x1, unprogrammed default
  9525                           ;	Write Protection Block 1
  9526                           ;	WRT1 = 0x1, unprogrammed default
  9527                           ;	Write Protection Block 2
  9528                           ;	WRT2 = 0x1, unprogrammed default
  9529                           ;	Write Protection Block 3
  9530                           ;	WRT3 = 0x1, unprogrammed default
  9531                           ;	Write Protection Block 3
  9532                           ;	WRT4 = 0x1, unprogrammed default
  9533                           ;	Write Protection Block 3
  9534                           ;	WRT5 = 0x1, unprogrammed default
  9535                           ;	Write Protection Block 3
  9536                           ;	WRT6 = 0x1, unprogrammed default
  9537                           ;	Write Protection Block 3
  9538                           ;	WRT7 = 0x1, unprogrammed default
  9539   300006                     	org	3145734
  9540   300006  FF                 	db	255
  9541                           
  9542                           ;Config register CONFIG4H @ 0x300007
  9543                           ;	unspecified, using default values
  9544                           ;	Configuration Register Write Protection bit
  9545                           ;	WRTC = 0x1, unprogrammed default
  9546                           ;	Boot Block Write Protection bit
  9547                           ;	WRTB = 0x1, unprogrammed default
  9548                           ;	Data EEPROM Write Protection bit
  9549                           ;	WRTD = 0x1, unprogrammed default
  9550                           ;	Scanner Enable bit
  9551                           ;	SCANE = 0x1, unprogrammed default
  9552                           ;	Low Voltage Programming Enable bit
  9553                           ;	LVP = 0x1, unprogrammed default
  9554   300007                     	org	3145735
  9555   300007  FF                 	db	255
  9556                           
  9557                           ;Config register CONFIG5L @ 0x300008
  9558                           ;	unspecified, using default values
  9559                           ;	UserNVM Program Memory Code Protection bit
  9560                           ;	CP = 0x1, unprogrammed default
  9561                           ;	DataNVM Memory Code Protection bit
  9562                           ;	CPD = 0x1, unprogrammed default
  9563   300008                     	org	3145736
  9564   300008  FF                 	db	255
  9565                           
  9566                           ;Config register CONFIG5H @ 0x300009
  9567                           ;	unspecified, using default values
  9568   300009                     	org	3145737
  9569   300009  FF                 	db	255
  9570                           
  9571                           ;Config register CONFIG6L @ 0x30000A
  9572                           ;	unspecified, using default values
  9573                           ;	Table Read Protection Block 0
  9574                           ;	EBTR0 = 0x1, unprogrammed default
  9575                           ;	Table Read Protection Block 1
  9576                           ;	EBTR1 = 0x1, unprogrammed default
  9577                           ;	Table Read Protection Block 2
  9578                           ;	EBTR2 = 0x1, unprogrammed default
  9579                           ;	Table Read Protection Block 3
  9580                           ;	EBTR3 = 0x1, unprogrammed default
  9581                           ;	Table Read Protection Block 4
  9582                           ;	EBTR4 = 0x1, unprogrammed default
  9583                           ;	Table Read Protection Block 5
  9584                           ;	EBTR5 = 0x1, unprogrammed default
  9585                           ;	Table Read Protection Block 6
  9586                           ;	EBTR6 = 0x1, unprogrammed default
  9587                           ;	Table Read Protection Block 7
  9588                           ;	EBTR7 = 0x1, unprogrammed default
  9589   30000A                     	org	3145738
  9590   30000A  FF                 	db	255
  9591                           
  9592                           ;Config register CONFIG6H @ 0x30000B
  9593                           ;	unspecified, using default values
  9594                           ;	Boot Block Table Read Protection bit
  9595                           ;	EBTRB = 0x1, unprogrammed default
  9596   30000B                     	org	3145739
  9597   30000B  FF                 	db	255
  9598                           tosu	equ	0xFFF
  9599                           tosh	equ	0xFFE
  9600                           tosl	equ	0xFFD
  9601                           stkptr	equ	0xFFC
  9602                           pclatu	equ	0xFFB
  9603                           pclath	equ	0xFFA
  9604                           pcl	equ	0xFF9
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           indf0	equ	0xFEF
  9612                           postinc0	equ	0xFEE
  9613                           postdec0	equ	0xFED
  9614                           preinc0	equ	0xFEC
  9615                           plusw0	equ	0xFEB
  9616                           fsr0h	equ	0xFEA
  9617                           fsr0l	equ	0xFE9
  9618                           wreg	equ	0xFE8
  9619                           indf1	equ	0xFE7
  9620                           postinc1	equ	0xFE6
  9621                           postdec1	equ	0xFE5
  9622                           preinc1	equ	0xFE4
  9623                           plusw1	equ	0xFE3
  9624                           fsr1h	equ	0xFE2
  9625                           fsr1l	equ	0xFE1
  9626                           bsr	equ	0xFE0
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           preinc2	equ	0xFDC
  9631                           plusw2	equ	0xFDB
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8

Data Sizes:
    Strings     267
    Constant    0
    Data        30
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160     95     159
    BANK1           256    256     256
    BANK2           256    171     201
    BANK3           256      0     120
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2548$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_12(CODE[10]), STR_11(CODE[36]), STR_10(CODE[25]), STR_9(CODE[27]), 
		 -> STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[26]), STR_5(CODE[23]), 
		 -> STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2499$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2499$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    card_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    card_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motor_response@stop_all	PTR unsigned int  size(2) Largest target is 2
		 -> main@stop_all(BANK0[2]), 

    motor_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    motor_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    motor_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK1[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK1[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK2[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK0[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK0[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK0[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _normalise_readings->_abs
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_motor_response
    _motor_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               391   391      0  178339
                                             85 COMRAM     2     2      0
                                             83 BANK0     12    12      0
                                             90 BANK1    166   166      0
                                              0 BANK2    171   171      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                            ___lwmod
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6   11681
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      113    90     23  119865
                                             60 BANK0     23     0     23
                                              0 BANK1     90    90      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    4398
                                             25 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      27    14     13   99228
                                             33 BANK0     27    14     13
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                  _sendStringSerial4
                            _sprintf
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    9656
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2    1176
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5857
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        8     4      4   40462
                                             30 COMRAM     8     4      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    9457
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    7297
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   14696
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    5137
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3741
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1192
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     961
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     648
                                              3 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     418
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    2212
                                             14 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      31
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      65
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     412
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   ___lwmod
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      78      11       46.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100     AB      C9       9       78.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     33A      64        0.0%
DATA                 0      0     33A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 20:11:41 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2918  
                       _color_read_Blue 2A08                                      l22 2CD4  
                                    l31 2A56                                      l25 2966  
                                    l34 2A06                                      l19 2B98  
                                    l28 29B6                                      l92 2870  
                                    l86 1D86                                      l79 2642  
                                    l97 2494                                      bsr 000FE0  
                   ___wmul@multiplicand 0006                   card_response@stop_all 00B1  
                      _color_read_Clear 29B8                        _color_read_Green 2968  
                     ??_Interrupts_init 0004                                     l102 23E6  
                                   l112 25BA                                     l107 252E  
                                   l142 2C48                                     l151 2D34  
                                   l160 2B24                                     l145 2C6E  
                                   l154 2D20                                     l242 098E  
                                   l139 2BF2                                     l243 0802  
                                   l148 2D2A                                     l244 0800  
                                   l157 2D16                                     l405 1146  
                                   l245 0810                                     l334 2162  
                                   l246 0996                                     l247 0994  
                                   l352 142A                                     l408 1C1A  
                                   l249 09EC                                     l522 2C46  
                                   l283 2C1C                                     l347 1920  
                                   l363 26C2                                     l531 2C94  
                                   l357 226E                                     l447 2CB4  
                                   l392 0CAC                                     l456 2CF6  
                                   l465 2BC8                                     l459 2D0A  
                                   l387 0660                                     l388 0680  
                                   l645 1AA8                                     l389 0704  
                                   l658 1EEA     normalise_readings@normalised_values 0026  
                      ??_motor_response 008E                                     _abs 2B26  
                                   _pad 26C4                   __end_of_card_response 1C1C  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1022 27A8  
                                  l1032 280C                                    ?_abs 0016  
                                  l1029 27B0                                    l1206 2B5C  
                                  l1039 2814                                    l1216 2916  
                                  l1209 2B64                                    l1242 273C  
                                  l1250 1506                                    l1261 16A6  
                                  l1238 26E6                                    l1247 14B8  
                                  l1249 14C0                                    l4001 14AC  
                                  l1274 28C4                                    l4011 14FA  
                                  l4003 14C8                                    l1268 2048  
                                  l4101 2D18                                    l4021 159E  
                                  l4013 1502                                    l4005 14D8  
                                  l1286 2338                                    l1294 2AE2  
                                  l4111 2AEA                                    l4103 2D1C  
                                  l4031 1646                                    l4023 15A4  
                                  l4015 150E                                    l4007 14DE  
                                  l4113 2AF2                                    l4105 2D2C  
                                  l4201 2CF6                                    l1297 2D36  
                                  l4033 1660                                    l4025 15AA  
                                  l4017 1516                                    l4009 14EE  
                                  l5001 0C72                                    l4115 2AFA  
                                  l4107 2D30                                    l4051 1CA4  
                                  l4043 1C1C                                    l4131 284C  
                                  l4123 2816                                    l4203 2D06  
                                  l4035 1670                                    l4019 151C  
                                  l4027 160E                                    l4211 28BA  
                                  l5003 0C86                                    l4061 2C58  
                                  l4117 2B20                                    l4109 2AE6  
                                  l4221 2968                                    l4053 1CE6  
                                  l4045 1C38                                    l4125 281A  
                                  l4133 2858                                    l4301 0ED4  
                                  l4037 1676                                    l4029 1628  
                                  l4205 2872                                    l5005 0C94  
                                  l4119 2B22                                    l4223 29AE  
                                  l4215 2918                                    l4055 1D02  
                                  l4047 1C8C                                    l4127 2832  
                                  l4151 2458                                    l4143 2410  
                                  l4135 23E8                                    l4311 0F38  
                                  l4303 0EE8                                    l4039 1686  
                                  l4071 1F34                                    l4063 1EEC  
                                  l4207 287E                                    l4233 29B8  
                                  l4217 295E                                    l4401 17BC  
                                  l4057 1D46                                    l4049 1CA0  
                                  l4129 2840                                    l4153 2460  
                                  l4145 2428                                    l4137 2408  
                                  l4313 0F4C                                    l4305 0EFC  
                                  l4241 2550                                    l4073 1F44  
                                  l4065 1F14                                    l4209 289A  
                                  l4059 2C48                                    l4227 2A08  
                                  l4235 29FE                                    l4403 17D4  
                                  l4155 247C                                    l4147 2440  
                                  l4171 239E                                    l4315 0F60  
                                  l4307 0F10                                    l4251 257C  
                                  l4083 200A                                    l4075 1F64  
                                  l4067 1F22                                    l4093 2D22  
                                  l4229 2A4E                                    l4421 1858  
                                  l4405 17D8                                    l4181 24B6  
                                  l4149 244C                                    l4173 23AA  
                                  l4165 2362                                    l4157 233A  
                                  l4317 0F78                                    l4309 0F24  
                                  l4253 2588                                    l4077 1F84  
                                  l4069 1F30                                    l4261 28D8  
                                  l4501 006E                                    l4095 2D26  
                                  l4431 18A8                                    l4423 1874  
                                  l4415 1828                                    l4407 17F4  
                                  l4191 24E2                                    l4175 23B2  
                                  l4167 237A                                    l4159 235A  
                                  l4255 2596                                    l4247 2558  
                                  l4239 2530                                    l4271 2B9A  
                                  l4079 1FDA                                    l4087 201C  
                                  l4263 28E0                                    l4511 00DC  
                                  l4503 0086                                    l4351 2BCA  
                                  l4097 2D0E                                    l4433 18BC  
                                  l4425 18A0                                    l4417 183C  
                                  l4409 1820                                    l4193 24EE  
                                  l4177 23CE                                    l4169 2392  
                                  l4337 0FF4                                    l4345 10EC  
                                  l4257 259E                                    l4249 2570  
                                  l4273 2B9E                                    l4265 28E8  
                                  l5057 06B6                                    l4601 02A4  
                                  l4521 0136                                    l4505 009A  
                                  l4441 1148                                    l4361 2BE0  
                                  l4353 2BD4                                    l4099 2D12  
                                  l4435 18D4                                    l4419 1854  
                                  l4371 16B0                                    l4195 24FC  
                                  l4187 24BE                                    l4179 2496  
                                  l5059 1100                                    l4339 1070  
                                  l4291 0CF8                                    l4275 2BAC  
                                  l4267 2904                                    l4259 28C6  
                                  l4611 0322                                    l4603 02B8  
                                  l4523 014A                                    l4515 00F4  
                                  l4507 00B4                                    l4451 141A  
                                  l4355 2BDA                                    l4363 2CB8  
                                  l4437 18D8                                    l4373 1700  
                                  l4365 16A8                                    l4461 225C  
                                  l4453 2164                                    l4197 2504  
                                  l4189 24D6                                    l4293 0D4C  
                                  l4285 0CAE                                    l4277 2BB0  
                                  l3901 1A40                                    l4613 0336  
                                  l4605 02CC                                    l4525 015E  
                                  l4517 0108                                    l4509 00C8  
                                  l4357 2BDC                                    ?_pad 0014  
                                  l4439 18F4                                    l4391 1774  
                                  l4383 1728                                    l4375 1704  
                                  l4463 225E                                    l4199 2520  
                                  l4295 0DA0                                    l4287 0CC6  
                                  l4279 0CA8                                    l3903 1A52  
                                  l4631 03F0                                    l4623 0368  
                                  l4615 034A                                    l4607 02E0  
                                  l4551 01BA                                    l4535 0176  
                                  l4519 0122                                    l4447 114C  
                                  l4359 2BDE                                    l4711 2B8E  
                                  l4703 2B66                                    l4393 17A0  
                                  l4385 173C                                    l4377 1720  
                                  l4481 26AE                                    l4465 2644  
                                  l4297 0E44                                    l4289 0CE0  
                                  l3905 1A58                                    l3921 1DBE  
                                  l3913 1D88                                    l4641 045E  
                                  l4633 040C                                    l4625 039E  
                                  l4617 035E                                    l4609 030E  
                                  l4553 01D2                                    l4537 018A  
                                  l4449 1418                                    l4801 1AAA  
                                  l4705 2B6A                                    l4721 261C  
                                  l4713 25BC                                    l4387 1754  
                                  l4483 26B0                                    l4475 265C  
                                  l4467 2648                                    l4459 2168  
                                  l4299 0EBC                                    l3907 1A68  
                                  l3931 1E26                                    l3923 1DCC  
                                  l3915 1D8C                                    l3851 22BC  
                                  l3843 2270                                    l4651 04EA  
                                  l4643 0472                                    l4635 0414  
                                  l4627 03AA                                    l4563 01EA  
                                  l4491 0004                                    l4811 1B8C  
                                  l4803 1AAA                                    l4707 2B74  
                                  l4731 2636                                    l4723 261E  
                                  l4715 25C4                                    l4389 1758  
                                  l4485 26C0                                    l4477 268A  
                                  l4469 2658                                    l3909 1A88  
                                  l3933 1E34                                    l3941 1E9A  
                                  l3925 1DEC                                    l3917 1D9A  
                                  l3853 22F2                                    l3845 2282  
                                  l3861 2ABE                                    l4661 0578  
                                  l4653 04F0                                    l4645 04B6  
                                  l4629 03EA                                    l4581 0230  
                                  l4565 01FE                                    l4549 01A6  
                                  l4493 0018                                    l4821 1C16  
                                  l4813 1BA8                                    l4805 1ACE  
                                  l4709 2B84                                    l4733 2640  
                                  l4725 2628                                    l4717 25EE  
                                  l4741 2CA2                                    l4901 07CE  
                                  l4751 2C1E                                    l4735 2BF4  
                                  l4831 27D4                                    l4399 17A8  
                                  l4479 26AA                                    l3871 1926  
                                  l3943 1EAA                                    l3935 1E62  
                                  l3927 1E0A                                    l3919 1DBA  
                                  l3847 2294                                    l3863 2AC2  
                                  l3951 26D2                                    l4671 05D8  
                                  l4655 052C                                    l4647 04C2  
                                  l4663 059C                                    l4639 0426  
                                  l4583 024A                                    l4495 0032  
                                  l4815 1BB8                                    l4807 1B24  
                                  l4727 262A                                    l4719 2612  
                                  l4743 2CA4                                    l4903 07DA  
                                  l4761 2C40                                    l4753 2C22  
                                  l4833 27E2                                    l4825 27B2  
                                  l3881 1986                                    l3873 1934  
                                  l3945 1ECA                                    l3937 1E82  
                                  l3929 1E12                                    l3865 2B26  
                                  l3849 229E                                    l3857 2AA0  
                                  l3961 2728                                    l3953 26DE  
                                  l4681 0638                                    l4673 05EC  
                                  l4657 0540                                    l4649 04D0  
                                  l4497 0046                                    l4489 0000  
                                  l4817 1BD2                                    l4809 1B30  
                                  l4729 2634                                    l4745 2CAE  
                                  l4737 2C96                                    l4921 086A  
                                  l4905 07EC                                    l4841 0706  
                                  l4763 2C42                                    l4755 2C2A  
                                  l4835 27F8                                    l4827 27C4  
                                  l3971 2746                                    l3963 2C70  
                                  l3891 19D0                                    l3883 198A  
                                  l3875 1954                                    l3939 1E94  
                                  l3867 2B40                                    l3859 2AAC  
                                  l3955 26F2                                    l4691 069A  
                                  l4683 064C                                    l4675 05FA  
                                  l4659 056C                                    l4667 05A8  
                                  l4595 0262                                    l4579 021C  
                                  l4499 005A                                    l4819 1BDE  
                                  l4747 2CB0                                    l4739 2CA0  
                                  l4931 08F2                                    l4923 0880  
                                  l4915 0812                                    l4907 07F4  
                                  l4851 071A                                    l4843 070A  
                                  l4765 2C44                                    l4757 2C34  
                                  l4837 2800                                    l4829 27CC  
                                  l3981 277C                                    l3973 2758  
                                  l3965 2C8C                                    l3893 19DE  
                                  l3885 1996                                    l3877 1958  
                                  l3869 1922                                    l3957 2706  
                                  l3949 26C4                                    l4685 0662  
                                  l4677 0614                                    l4669 05CC  
                                  l4597 0276                                    l4773 2054  
                                  l4749 2CB2                                    l4941 097E  
                                  l4933 0912                                    l4925 0894  
                                  l4917 082A                                    l4909 07F6  
                                  l4861 0728                                    l4853 071E  
                                  l4845 070E                                    l4759 2C36  
                                  l4839 2806                                    l3983 2792  
                                  l3975 2760                                    l3895 19F0  
                                  l3887 19B4                                    l3879 1966  
                                  l3959 270A                                    l3991 142C  
                                  l4687 067A                                    l4679 061A  
                                  l4599 0290                                    l4695 06A0  
                                  l4791 20C4                                    l4775 2068  
                                  l4767 204A                                    l4951 0A22  
                                  l4943 09A4                                    l4935 0932  
                                  l4927 08B8                                    l4919 083E  
                                  l4871 0742                                    l4863 072C  
                                  l4855 0720                                    l4847 0712  
                                  l3985 279A                                    l3977 2768  
                                  l3969 273E                                    l3897 1A1E  
                                  l3889 19BC                                    l3993 144C  
                                  l4689 0682                                    l4793 20E0  
                                  l4785 2092                                    l4777 206E  
                                  l4961 0A86                                    l4953 0A26  
                                  l4945 09E0                                    l4937 096E  
                                  l4929 08D2                                    l4881 076E  
                                  l4873 074A                                    l4865 0732  
                                  l4857 0724                                    l4849 0716  
                                  l3987 279C                                    l3979 2776  
                                  l3899 1A3E                                    l3995 1460  
                                  l4795 210C                                    l4787 20A6  
                                  l4779 208A                                    l4971 0B08  
                                  l4963 0AA4                                    l4955 0A4C  
                                  l4947 09FA                                    l4939 097A  
                                  l4891 079E                                    l4883 0774  
                                  l4875 0750                                    l4867 0736  
                                  l4859 0726                                    l3989 27A2  
                                  l3997 1470                                    l4797 2128  
                                  l4789 20BE                                    l4981 0B80  
                                  l4973 0B3A                                    l4965 0AB6  
                                  l4957 0A70                                    l4949 0A0E  
                                  l4893 07A8                                    l4885 0780  
                                  l4877 0756                                    l4869 073A  
                                  l3999 1490                                    l4799 2134  
                                  l4991 0C32                                    l4983 0B94  
                                  l4975 0B46                                    l4967 0AD2  
                                  l4959 0A7A                                    l4895 07B0  
                                  l4887 078C                                    l4879 075A  
                                  l4993 0C40                                    l4985 0BAA  
                                  l4977 0B54                                    l4969 0ADE  
                                  l4897 07BA                                    l4889 0796  
                                  l4995 0C52                                    l4987 0BBE  
                                  l4979 0B68                                    l4899 07C4  
                                  l4997 0C56                                    l4989 0BCC  
                                  l4999 0C60                                    STR_1 FEF3  
                                  STR_2 FFCE                                    STR_3 FFE5  
                                  STR_4 FF49                                    STR_5 FFCE  
                                  STR_6 FF82                                    STR_7 FF9C  
                                  STR_8 FFB5                                    STR_9 FF67  
                                  u2000 1D9A                                    u2001 1D96  
                                  u2010 1DCC                                    u2011 1DC8  
                                  u2100 2792                                    u2020 1E0A  
                          ?_LEDSon_init 0001                                    u2101 278E  
                                  u2021 1E06                                    u2030 1E34  
                                  u2110 145C                                    u2031 1E30  
                                  u2111 1456                                    u2040 1E62  
                                  u2200 1670                                    u2120 145E  
                                  u2041 1E5E                                    u2201 166C  
                                  u2210 1C38                                    u2050 1EAA  
                                  u2130 1470                                    u2211 1C34  
                                  u2051 1EA6                                    u2131 146C  
                                  u2220 1D02                                    u2300 2870  
                                  u2060 26D2                                    u2140 14AC  
                                  u2221 1CFE                                    u2301 286C  
                                  u2061 26CE                                    u2141 14A8  
                                  u2230 2C58                                    u2310 247C  
                                  u2070 2728                                    u2150 14D8  
                                  u2231 2C54                                    u2311 2478  
                                  u3007 23D8                                    u2071 2724  
                                  u2151 14D4                                    u2240 2C6E  
                                  u2400 1774                                    u2080 2758  
                                  u2320 23CE                                    u2160 14EE  
                          _BAUD4CONbits 000EE9                                    u2241 2C6A  
                                  u2401 1770                                    u2081 2754  
                                  u3017 2432                                    u2321 23CA  
                                  u2161 14EA                                    u2410 17F4  
                                  u2090 2776                                    u2330 2520  
                                  u2170 1628                                    u2250 1F14  
                                  u2411 17F0                                    u2091 2772  
                                  u2331 251C                                    u3027 2486  
                                  u2171 1624                                    u2251 1F10  
                                  u2420 1874                                    u2340 2D06  
                                  u2180 1646                                    u2260 1F64  
                                  u2500 045E                                    u2421 1870  
                                  u3037 2838                                    u2341 2D02  
                                  u2181 1642                                    u2261 1F60  
                                  u2501 045A                                    u2430 18F4  
                                  u2190 1660                                    u2270 1F84  
                                  u2350 28BA                                    u2510 052C  
                                  u2431 18F0                                    u3047 24F4  
                                  u2191 165C                                    u2271 1F80  
                                  u2351 28B6                                    u2511 0528  
                                  u2280 2B0E                                    u2360 25BA  
                                  u2520 0638                                    u2440 142A  
                                  u2600 0810                                    u2281 2B06  
                                  u3057 2526                                    u2361 25B6  
                                  u2521 0634                                    u2441 1426  
                                  u2601 080C                                    u2450 226E  
                                  u2370 2BC8                                    u2530 208A  
                                  u2610 098E                                    _T2PR 000FBC  
                                  u3067 1746                                    u2451 226A  
                                  u2371 2BC4                                    u2531 2086  
                                  u2611 098A                                    u2460 268A  
                                  u2380 0CF4                                    u1900 22F2  
                                  u2540 20E0                                    u2700 0C72  
                                  u2620 09A4                                    u3077 17C6  
                                  u2461 2686                                    u2381 0CF0  
                                  u1901 22EE                                    u2541 20DC  
                                  u2701 0C6E                                    u2621 09A0  
                                  u2550 27C4                                    u2390 1720  
                                  u2470 26C0                                    u1910 2AE2  
                                  u2710 0C94                                    u2630 09FA  
                                  u2551 27C0                                    u3087 1846  
                                  u2391 171C                                    u2471 26BC  
                                  u1911 2ADE                                    u2711 0C90  
                                  u2631 09F6                                    u2560 27E2  
                                  u1920 2B40                                    u2480 040C  
                                  u2640 0A22                                    u2561 27DE  
                                  u3097 18C6                                    u1921 2B3C  
                                  u2481 0408                                    u2641 0A1E  
                                  u2570 27F8                                    u2298 2B10  
                                  u1930 1934                                    u2490 0422  
                                  u2650 0A4C                                    u2571 27F4  
                                  u1931 1930                                    u2491 041E  
                                  u2651 0A48                                    u1940 1966  
                                  u2660 0A5E                                    u1941 1962  
                                  u2661 0A56                                    u2581 07D4  
                                  u1870 2282                                    u1951 1990  
                                  u1871 227E                                    u2807 2B7A  
                                  u2727 081C                                    u2591 07E4  
                                  u1960 19B4                                    u1880 2294  
                                  u2680 0AA4                                    u1961 19B0  
                                  u1881 2290                                    u2817 20B2  
                                  u2681 0AA0                                    u2737 0848  
                                  u1970 19DE                                    u1890 22BC  
                                  u2690 0AB6                                    u1971 19DA  
                                  u1891 22B8                                    u2907 0300  
                                  u2827 0024                                    u2691 0AB2  
                                  u2747 0874                                    u1980 1A1E  
                                  u1981 1A1A                                    u2917 04DC  
                                  u2837 00A6                                    u2757 0B4C  
                                  u1990 1A68                                    u2678 0A60  
                                  u1991 1A64                                    u2927 0606  
                                  u2847 0114                                    u2767 0B72  
                                  u2937 066E                                    u2857 0196  
                                  u2777 0B9E                                    u2947 068E  
                                  u2867 01C6                                    u2787 0BC4  
                                  u2957 258E                                    u2877 020A  
                                  u2797 0C38                                    u2967 0CB8  
                                  u2887 023C                                    u2977 0CD2  
                                  u2897 0282                                    u2987 0EC6  
                                  u2997 2384              normalise_readings@red_read 001E  
                                  abs@a 0016                                    _dbuf 00DF  
                                  _main 0706                                    _dtoa 142C  
                                  _prec 00D5                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2816                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
      clear_read_calibration@clear_read 0083                         card_response@mL 00A9  
                       card_response@mR 00AB                  __end_of_color_read_Red 2968  
                  _response_in_progress 00D9             normalise_readings@blue_read 0022  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 233A  
                       __end_of___aodiv 1AAA                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 1EEC  
                                 STR_10 FFB5                                   STR_11 FF25  
                                 STR_12 FFF4                                   ?_stop 0017  
                       __end_of___lwdiv 27B2                         __end_of___lwmod 2816  
                                 i1l528 004C                            vfpfcnvrt@fmt 0044  
                                 _TMR0H 000FD4                                   _TMR0L 000FD3  
                          main@red_read 00BB                 __end_of_sendCharSerial4 2D0C  
            __end_of_I2C_2_Master_Start 2D2C              __end_of_I2C_2_Master_Write 2D18  
                                 _flags 00DD                                   _fputc 2270  
                                 _fputs 2AA0                                   pad@fp 0014  
        determine_card@master_closeness 0004                 ??_make_master_closeness 000A  
                                 _width 00D3                                   _putch 2D36  
          card_response@ReturnHomeCards 00AF                                   main@i 01F4  
                                 dtoa@d 0021                                   dtoa@i 0040  
                                 dtoa@n 0037                                   dtoa@p 0033  
                                 dtoa@s 003F                                   dtoa@w 0035  
                   normalise_readings@i 0032                                   tablat 000FF5  
          card_response@ReturnHomeTimes 00AD                                   plusw1 000FE3  
                                 plusw2 000FDB                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2918          card_response@normalised_values 0100  
                          main@stop_all 00B9                        card_response@buf 009C  
               __end_of_color_read_Blue 2A58                   _I2C_2_Master_RepStart 2D2C  
                       ?_color_read_Red 0008                         __initialization 2A58  
                          __end_of_main 0CA6                            __end_of_dtoa 16A8  
                          __end_of_stop 2872                                  ??_main 0056  
                                ??_dtoa 0029                                  ??_stop 001B  
                         __activetblptr 000003                           main@blue_read 01F2  
                  main@clear_read_check 00B7               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0011                                  ?_fputc 0004  
                                ?_fputs 000D                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 00B5  
          collect_avg_readings@red_read 0011                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i1l3791 0048  
                                i1l3787 0026                                  i1l3789 0036  
                                _RG6PPS 000E88                __end_of_color_click_init 2B9A  
                                _TMR0IE 00714D                                  _TMR0IF 00719D  
                make_master_closeness@i 0028                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                                  _LowISR 0018  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0054  
                             ??___aodiv 0014                               ??___aomod 0014  
                                ___wmul 2C70                      _normalise_readings 1148  
                             ??___lwdiv 000E                               ??___lwmod 0008  
                                clear_0 2A7E                                  clear_1 2A8A  
                                isa$std 000001                                  pad@buf 0016  
                                dtoa@fp 001F                     ?_normalise_readings 001A  
                                fputc@c 0004                                  fputs@c 0011  
                                fputs@i 0012                                  fputs@s 000D  
                          __mediumconst FEF2                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 0CA6  
                                putch@c 0001                        __end_of_vfprintf 28C6  
                                stop@mL 0017                                  stop@mR 0019  
                     ??_initDCmotorsPWM 0004                               ??_sprintf 0056  
                     card_response@card 00A8                              __accesstop 0060  
               __end_of__initialization 2A96                __end_of_color_read_Clear 2A08  
                       fullSpeedAhead@i 001C                __end_of_color_read_Green 29B8  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0028  
                         ___rparam_used 000001                        ?_color_read_Blue 0008  
                       _Interrupts_init 2C1E            __end_of_collect_avg_readings 1922  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 204A  
                      _reverseFullSpeed 2530                            __pidataBANK2 2CD6  
            collect_avg_readings@i_1651 001B              collect_avg_readings@i_1652 001D  
            collect_avg_readings@i_1653 001F              collect_avg_readings@i_1654 0021  
                         __end_of_fputc 233A                           __end_of_fputs 2AE4  
                         __end_of_putch 2D38                          ?_home_response 001F  
                        main@clear_read 01F5                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK0 00BF                              __pbssBANK3 0300  
                               ?_LowISR 0001                       _color_writetoaddr 2CB6  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0084  
                      motor_response@mR 0086                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 0083  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 00BD                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                    motor_response@j_1696 0096  
               __end_of_Interrupts_init 2C48          collect_avg_readings@clear_read 000F  
                color_writetoaddr@value 0006                        ??_color_read_Red 000A  
         __end_of_make_master_closeness 2270          determine_card@predicted_colour 000C  
             __end_of_color_writetoaddr 2CD6                      _I2C_2_Master_Start 2D22  
                            _initUSART4 2C96                      _I2C_2_Master_Write 2D0C  
                               __Hparam 0000                                 __Lparam 0000  
                     color_read_Red@tmp 000D  make_master_closeness@normalised_values 0006  
               sendStringSerial4@string 0005                       reverseFullSpeed@i 001C  
                               ___aodiv 1922                                 ___aomod 1D88  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 273E  
                   ?_I2C_2_Master_Write 0001                                 ___lwmod 27B2  
                             ?_vfprintf 0060                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 2A58  
                               __ramtop 0E00                                 __ptext0 0706  
                               __ptext1 2C96                                 __ptext2 25BC  
                               __ptext3 2B66                                 __ptext4 2CB6  
                               __ptext5 2BCA                                 __ptext6 204A  
                               __ptext7 1AAA                                 __ptext8 1148  
                               __ptext9 0000                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 16A8  
                               main@buf 015A                                 _sprintf 28C6  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 2A96          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                         _card_detected 00D7                       __end_of_vfpfcnvrt 204A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004A  
                            main@F14700 0300                              main@F14702 02AB  
                        home_response@i 0025                              ??_vfprintf 0054  
                       _initDCmotorsPWM 25BC                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0016       normalise_readings@expected_values 0024  
                         _card_response 1AAA                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0015                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 000F  
              __end_of_reverseFullSpeed 25BC                        fullSpeedAhead@mL 0017  
                      fullSpeedAhead@mR 0019                     main@expected_values 025A  
              color_writetoaddr@address 0007                 ??_I2C_2_Master_RepStart 0005  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0008                            _EUSART4RXbuf 00BF  
                          _EUSART4TXbuf 033C                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0008                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0004  
                            main@motorL 01F7                              main@motorR 02A2  
                    ??_color_read_Clear 000A                      ??_color_read_Green 000A  
                            _turnLeft45 23E8                          __end_of_LowISR 005C  
                        _fullSpeedAhead 2496                             vfpfcnvrt@ap 0046  
                           vfpfcnvrt@cp 0052                             vfpfcnvrt@fp 0042  
                        __end_of___wmul 2C96                         determine_card@i 000D  
                        ?_card_response 009C                     color_read_Clear@tmp 000D  
                   start_initialization 2A58                             __end_of_abs 2B66  
                           __end_of_pad 273E                           _TxBufWriteCnt 0059  
                         ??_LEDSon_init 0004          __end_of_clear_read_calibration 2164  
                   color_read_Green@tmp 000D                  motor_response@stop_all 008C  
                              ??_LowISR 0001                 __end_of_initDCmotorsPWM 2644  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 2530  
                             _TimerFlag 00DB                                ??___wmul 0008  
                           __pdataBANK2 02AB                          _determine_card 2644  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                        ___aodiv@dividend 0004  
               clear_read_calibration@i 008B                          _motor_response 0000  
                   __end_of_LEDSon_init 2C1E                        ___lwdiv@dividend 000A  
                             _dtoa$2576 0031                             ?_turnLeft45 0017  
                       motor_response@i 009A                         motor_response@j 0094  
                       motor_response@k 0098                         ?_fullSpeedAhead 0017  
                         __pmediumconst FEF2                                ?___aodiv 0004  
                              ?___aomod 0004                       motor_response@buf 0081  
                      ___aodiv@quotient 0016                  __end_of_determine_card 26C4  
                              ?___lwdiv 000A                                ?___lwmod 0004  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0056                    I2C_2_Master_Read@tmp 0007  
                     _I2C_2_Master_Idle 2C48                       _I2C_2_Master_Init 2BCA  
                     _I2C_2_Master_Read 2AE4                       _I2C_2_Master_Stop 2D18  
                          _RxBufReadCnt 00DE            normalise_readings@clear_read 001C  
                   main@ReturnHomeCards 0200            normalise_readings@difference 0030  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0013  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                   main@ReturnHomeTimes 021E                  __end_of_motor_response 0706  
                           turnLeft45@i 001D                                ?_sprintf 0066  
          clear_read_calibration@i_1640 008D                       _sendStringSerial4 2B9A  
                   ??_I2C_2_Master_Idle 0004                     ??_I2C_2_Master_Init 0004  
                   ??_I2C_2_Master_Read 0005                          ___wmul@product 0008  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0005  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                      ?_sendStringSerial4 0005  
                              _PIE4bits 000E2D                   _make_master_closeness 2164  
                              i1u186_20 0036                                i1u186_21 0032  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0004                make_master_closeness@buf 0004  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0007  
                              _SSP2STAT 000ED8                         ?_determine_card 0004  
                             _vfpfcnvrt 1EEC               __end_of_I2C_2_Master_Idle 2C70  
             __end_of_I2C_2_Master_Init 2BF4               __end_of_I2C_2_Master_Read 2B26  
                     ___wmul@multiplier 0004               __end_of_I2C_2_Master_Stop 2D22  
                          setMotorPWM@m 0011             I2C_2_Master_Write@data_byte 0005  
          normalise_readings@green_read 0020                   __end_of_home_response 1148  
                     ??_color_read_Blue 000A                            _TxBufReadCnt 0058  
                       ?_motor_response 0081                       ?_reverseFullSpeed 0017  
                             copy_data0 2A6C               __end_of_sendStringSerial4 2BCA  
                           _LEDSon_init 2BF4                      ??_reverseFullSpeed 001B  
         __end_of_I2C_2_Master_RepStart 2D36                      color_read_Blue@tmp 000D  
                   __end_of_setMotorPWM 1D88                            ??_initUSART4 0004  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0008                      reverseFullSpeed@mL 0017  
                    reverseFullSpeed@mR 0019                       home_response@card 0026  
                            ?_vfpfcnvrt 0042                         ___aodiv@divisor 000C  
                       ___aodiv@counter 0014                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                            _T0CON0bits 000FD5                              _T0CON1bits 000FD6  
                       ___lwdiv@divisor 000C                      __end_of_initUSART4 2CB6  
                       ___lwdiv@counter 000E                                __ptext10 28C6  
                              __ptext11 2872                                __ptext20 1922  
                              __ptext12 1EEC                                __ptext21 2B9A  
                              __ptext13 142C                                __ptext30 2C70  
                              __ptext22 2CF4                                __ptext14 26C4  
                              __ptext31 273E                                __ptext23 2530  
                              __ptext15 2AA0                                __ptext40 2D18  
                              __ptext32 2164                                __ptext24 0CA6  
                              __ptext16 2270                                __ptext41 2D22  
                              __ptext33 2644                                __ptext25 233A  
                              __ptext17 2D36                                __ptext42 2D2C  
                              __ptext34 16A8                                __ptext26 23E8  
                              __ptext18 2B26                                __ptext43 2AE4  
                              __ptext35 2918                                __ptext27 2816  
                              __ptext19 1D88                                __ptext44 2C48  
                              __ptext36 2968                                __ptext28 2496  
                              __ptext45 27B2                                __ptext37 29B8  
                              __ptext29 1C1C                                __ptext46 2BF4  
                              __ptext38 2A08                                __ptext47 2C1E  
                              __ptext39 2D0C           motor_response@ReturnHomeCards 008A  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
         motor_response@ReturnHomeTimes 0088                  ?_make_master_closeness 0004  
                              isa$xinst 000000                 card_response@clear_read 009E  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2872                           ??_turnRight45 001B  
                              main@card 00B4                        ___aomod@dividend 0004  
                 collect_avg_readings@i 0019                              _INTCONbits 000FF2  
                           _setMotorPWM 1C1C           collect_avg_readings@blue_read 0015  
                         turnRight45@mL 0017                           turnRight45@mR 0019  
                              intlevel1 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 142C            card_response@expected_values 00A6  
                      ___lwmod@dividend 0004                        ??_fullSpeedAhead 001B  
               card_response@green_read 00A2                            ??_turnLeft45 001B  
        determine_card@current_smallest 000A                         ___aomod@divisor 000C  
                           ??_vfpfcnvrt 0048                         ___aomod@counter 0014  
                card_response@blue_read 00A4                        _color_click_init 2B66  
                       home_response@mL 001F                         home_response@mR 0021  
         card_response@master_closeness 0148                                sprintf@f 0076  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                         ___lwmod@divisor 0006  
                   __end_of_turnRight45 23E8                         ___lwmod@counter 0008  
                    __end_of_turnLeft45 2496                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0015                         _sendCharSerial4 2CF4  
                 card_response@red_read 00A0                            ___aomod@sign 0015  
                      ??_determine_card 0006                           main@CardCount 01F0  
                          main@PWMcycle 00B3  
