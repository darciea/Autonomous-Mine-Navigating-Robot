

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 15:12:34 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71   000000                     
    72                           ; Version 2.35
    73                           ; Generated 05/05/2021 GMT
    74                           ; 
    75                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F67K40 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000000                     _TRISBbits	set	3970
   108   000000                     _TX4REG	set	3812
   109   000000                     _RC4STAbits	set	3815
   110   000000                     _SP4BRGH	set	3814
   111   000000                     _LATGbits	set	3967
   112   000000                     _TRISAbits	set	3969
   113   000000                     _TRISFbits	set	3974
   114   000000                     _TRISDbits	set	3972
   115   000000                     _TRISGbits	set	3975
   116   000000                     _SSP2CON2bits	set	3802
   117   000000                     _INT1PPS	set	3569
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _RC7PPS	set	3689
   122   000000                     _RE2PPS	set	3700
   123   000000                     _TRISCbits	set	3971
   124   000000                     _TRISEbits	set	3973
   125   000000                     _TRISHbits	set	3976
   126   000000                     _PORTFbits	set	3982
   127   000000                     _T2PR	set	4028
   128   000000                     _T2CONbits	set	4029
   129   000000                     _CCPR2H	set	4006
   130   000000                     _CCPR1H	set	4010
   131   000000                     _RE4PPS	set	3702
   132   000000                     _RG6PPS	set	3720
   133   000000                     _RD5PPS	set	3695
   134   000000                     _ANSELBbits	set	3738
   135   000000                     _ANSELDbits	set	3751
   136   000000                     _SSP2ADD	set	3798
   137   000000                     _SSP2CON1bits	set	3801
   138   000000                     _CCPR4H	set	3873
   139   000000                     _CCPR3H	set	3877
   140   000000                     _INTCONbits	set	4082
   141   000000                     _T2CLKCONbits	set	4031
   142   000000                     _T2HLTbits	set	4030
   143   000000                     _CCP1CONbits	set	4011
   144   000000                     _CCPTMRS0bits	set	4013
   145   000000                     _CCP2CONbits	set	4007
   146   000000                     _LATAbits	set	3961
   147   000000                     _LATDbits	set	3964
   148   000000                     _CCP3CONbits	set	3878
   149   000000                     _CCP4CONbits	set	3874
   150   000000                     _RC4REG	set	3811
   151   000000                     _SP4BRGL	set	3813
   152   000000                     _TX4STAbits	set	3816
   153   000000                     _BAUD4CONbits	set	3817
   154   000000                     _SSP2CON2	set	3802
   155   000000                     _SSP2STAT	set	3800
   156   000000                     _ANSELFbits	set	3764
   157   000000                     _SSP2BUF	set	3797
   158   000000                     _IPR0bits	set	3615
   159   000000                     _PIE0bits	set	3625
   160   000000                     _PIE4bits	set	3629
   161   000000                     _PIR4bits	set	3639
   162   000000                     _RC0PPS	set	3682
   163   000000                     _RD6PPS	set	3696
   164   000000                     _LATFbits	set	3966
   165   000000                     _LATHbits	set	3968
   166   000000                     _PIR0bits	set	3635
   167                           
   168                           	psect	smallconst
   169   000E00                     __psmallconst:
   170                           	callstack 0
   171   000E00  00                 	db	0
   172   000E01                     STR_1:
   173                           
   174                           ; BSR set to: 14
   175   000E01  0A                 	db	10
   176   000E02  20                 	db	32
   177   000E03  45                 	db	69	;'E'
   178   000E04  58                 	db	88	;'X'
   179   000E05  50                 	db	80	;'P'
   180   000E06  45                 	db	69	;'E'
   181   000E07  43                 	db	67	;'C'
   182   000E08  54                 	db	84	;'T'
   183   000E09  45                 	db	69	;'E'
   184   000E0A  44                 	db	68	;'D'
   185   000E0B  3A                 	db	58	;':'
   186   000E0C  20                 	db	32
   187   000E0D  52                 	db	82	;'R'
   188   000E0E  20                 	db	32
   189   000E0F  25                 	db	37
   190   000E10  64                 	db	100	;'d'
   191   000E11  2C                 	db	44
   192   000E12  20                 	db	32
   193   000E13  47                 	db	71	;'G'
   194   000E14  20                 	db	32
   195   000E15  25                 	db	37
   196   000E16  64                 	db	100	;'d'
   197   000E17  2C                 	db	44
   198   000E18  20                 	db	32
   199   000E19  42                 	db	66	;'B'
   200   000E1A  20                 	db	32
   201   000E1B  25                 	db	37
   202   000E1C  64                 	db	100	;'d'
   203   000E1D  20                 	db	32
   204   000E1E  20                 	db	32
   205   000E1F  43                 	db	67	;'C'
   206   000E20  41                 	db	65	;'A'
   207   000E21  52                 	db	82	;'R'
   208   000E22  44                 	db	68	;'D'
   209   000E23  3A                 	db	58	;':'
   210   000E24  20                 	db	32
   211   000E25  25                 	db	37
   212   000E26  64                 	db	100	;'d'
   213   000E27  20                 	db	32
   214   000E28  0A                 	db	10
   215   000E29  00                 	db	0
   216   000E2A                     STR_3:
   217                           
   218                           ; BSR set to: 14
   219   000E2A  0A                 	db	10
   220   000E2B  20                 	db	32
   221   000E2C  41                 	db	65	;'A'
   222   000E2D  56                 	db	86	;'V'
   223   000E2E  47                 	db	71	;'G'
   224   000E2F  3A                 	db	58	;':'
   225   000E30  20                 	db	32
   226   000E31  52                 	db	82	;'R'
   227   000E32  20                 	db	32
   228   000E33  25                 	db	37
   229   000E34  64                 	db	100	;'d'
   230   000E35  2C                 	db	44
   231   000E36  20                 	db	32
   232   000E37  47                 	db	71	;'G'
   233   000E38  20                 	db	32
   234   000E39  25                 	db	37
   235   000E3A  64                 	db	100	;'d'
   236   000E3B  2C                 	db	44
   237   000E3C  20                 	db	32
   238   000E3D  42                 	db	66	;'B'
   239   000E3E  20                 	db	32
   240   000E3F  25                 	db	37
   241   000E40  64                 	db	100	;'d'
   242   000E41  20                 	db	32
   243   000E42  0A                 	db	10
   244   000E43  00                 	db	0
   245   000E44                     STR_2:
   246                           
   247                           ; BSR set to: 14
   248   000E44  52                 	db	82	;'R'
   249   000E45  61                 	db	97	;'a'
   250   000E46  77                 	db	119	;'w'
   251   000E47  20                 	db	32
   252   000E48  25                 	db	37
   253   000E49  64                 	db	100	;'d'
   254   000E4A  2C                 	db	44
   255   000E4B  20                 	db	32
   256   000E4C  25                 	db	37
   257   000E4D  64                 	db	100	;'d'
   258   000E4E  2C                 	db	44
   259   000E4F  20                 	db	32
   260   000E50  25                 	db	37
   261   000E51  64                 	db	100	;'d'
   262   000E52  2C                 	db	44
   263   000E53  20                 	db	32
   264   000E54  25                 	db	37
   265   000E55  64                 	db	100	;'d'
   266   000E56  20                 	db	32
   267   000E57  0A                 	db	10
   268   000E58  00                 	db	0
   269   000E59                     STR_4:
   270                           
   271                           ; BSR set to: 14
   272   000E59  43                 	db	67	;'C'
   273   000E5A  41                 	db	65	;'A'
   274   000E5B  52                 	db	82	;'R'
   275   000E5C  44                 	db	68	;'D'
   276   000E5D  20                 	db	32
   277   000E5E  25                 	db	37
   278   000E5F  64                 	db	100	;'d'
   279   000E60  20                 	db	32
   280   000E61  0A                 	db	10
   281   000E62  00                 	db	0
   282   000E63  00                 	db	0	; dummy byte at the end
   283   000000                     
   284                           ; #config settings
   285                           
   286                           	psect	cinit
   287   002B34                     __pcinit:
   288                           	callstack 0
   289   002B34                     start_initialization:
   290                           	callstack 0
   291   002B34                     __initialization:
   292                           	callstack 0
   293                           
   294                           ; Clear objects allocated to BANK2 (92 bytes)
   295   002B34  EE02  F000         	lfsr	0,__pbssBANK2
   296   002B38  0E5C               	movlw	92
   297   002B3A                     clear_0:
   298   002B3A  6AEE               	clrf	postinc0,c
   299   002B3C  06E8               	decf	wreg,f,c
   300   002B3E  E1FD               	bnz	clear_0
   301                           
   302                           ; Clear objects allocated to BANK0 (29 bytes)
   303   002B40  EE00  F0D8         	lfsr	0,__pbssBANK0
   304   002B44  0E1D               	movlw	29
   305   002B46                     clear_1:
   306   002B46  6AEE               	clrf	postinc0,c
   307   002B48  06E8               	decf	wreg,f,c
   308   002B4A  E1FD               	bnz	clear_1
   309                           
   310                           ; Clear objects allocated to COMRAM (4 bytes)
   311   002B4C  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   312   002B4E  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   313   002B50  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   314   002B52  6A57               	clrf	__pbssCOMRAM& (0+255),c
   315   002B54                     end_of_initialization:
   316                           	callstack 0
   317   002B54                     __end_of__initialization:
   318                           	callstack 0
   319   002B54  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   320   002B56  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   321   002B58  0100               	movlb	0
   322   002B5A  EFBD  F008         	goto	_main	;jump to C main() function
   323                           
   324                           	psect	bssCOMRAM
   325   000057                     __pbssCOMRAM:
   326                           	callstack 0
   327   000057                     _TxBufReadCnt:
   328                           	callstack 0
   329   000057                     	ds	1
   330   000058                     _TxBufWriteCnt:
   331                           	callstack 0
   332   000058                     	ds	1
   333   000059                     _RxBufReadCnt:
   334                           	callstack 0
   335   000059                     	ds	1
   336   00005A                     _RxBufWriteCnt:
   337                           	callstack 0
   338   00005A                     	ds	1
   339                           
   340                           	psect	bssBANK0
   341   0000D8                     __pbssBANK0:
   342                           	callstack 0
   343   0000D8                     _EUSART4RXbuf:
   344                           	callstack 0
   345   0000D8                     	ds	20
   346   0000EC                     _width:
   347                           	callstack 0
   348   0000EC                     	ds	2
   349   0000EE                     _prec:
   350                           	callstack 0
   351   0000EE                     	ds	2
   352   0000F0                     _card_detected:
   353                           	callstack 0
   354   0000F0                     	ds	2
   355   0000F2                     _response_in_progress:
   356                           	callstack 0
   357   0000F2                     	ds	2
   358   0000F4                     _flags:
   359                           	callstack 0
   360   0000F4                     	ds	1
   361                           
   362                           	psect	bssBANK2
   363   000200                     __pbssBANK2:
   364                           	callstack 0
   365   000200                     _EUSART4TXbuf:
   366                           	callstack 0
   367   000200                     	ds	60
   368   00023C                     _dbuf:
   369                           	callstack 0
   370   00023C                     	ds	32
   371                           
   372                           	psect	cstackBANK1
   373   000100                     __pcstackBANK1:
   374                           	callstack 0
   375   000100                     main@buf:
   376                           	callstack 0
   377                           
   378                           ; 150 bytes @ 0x0
   379   000100                     	ds	150
   380   000196                     main@expected_values:
   381                           	callstack 0
   382                           
   383                           ; 54 bytes @ 0x96
   384   000196                     	ds	54
   385   0001CC                     main@clear_read:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xCC
   389   0001CC                     	ds	2
   390   0001CE                     main@PWMcycle:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0xCE
   394   0001CE                     	ds	1
   395   0001CF                     main@i:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0xCF
   399   0001CF                     	ds	1
   400   0001D0                     main@red_read:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0xD0
   404   0001D0                     	ds	2
   405   0001D2                     main@green_read:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0xD2
   409   0001D2                     	ds	2
   410   0001D4                     main@blue_read:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0xD4
   414   0001D4                     	ds	2
   415   0001D6                     main@motorL:
   416                           	callstack 0
   417                           
   418                           ; 9 bytes @ 0xD6
   419   0001D6                     	ds	9
   420   0001DF                     main@motorR:
   421                           	callstack 0
   422                           
   423                           ; 9 bytes @ 0xDF
   424   0001DF                     	ds	9
   425                           
   426                           	psect	cstackBANK0
   427   000060                     __pcstackBANK0:
   428                           	callstack 0
   429   000060                     ?_vfprintf:
   430                           	callstack 0
   431   000060                     vfprintf@fp:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x0
   435   000060                     	ds	2
   436   000062                     vfprintf@fmt:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x2
   440   000062                     	ds	2
   441   000064                     vfprintf@ap:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x4
   445   000064                     	ds	2
   446   000066                     ?_sprintf:
   447                           	callstack 0
   448   000066                     sprintf@s:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x6
   452   000066                     	ds	2
   453   000068                     sprintf@fmt:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x8
   457   000068                     	ds	10
   458   000072                     sprintf@ap:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x12
   462   000072                     	ds	2
   463   000074                     sprintf@f:
   464                           	callstack 0
   465                           
   466                           ; 11 bytes @ 0x14
   467   000074                     	ds	11
   468   00007F                     card_response@buf:
   469                           	callstack 0
   470                           
   471                           ; 2 bytes @ 0x1F
   472   00007F                     	ds	2
   473   000081                     card_response@red_read:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x21
   477   000081                     	ds	2
   478   000083                     card_response@green_read:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x23
   482   000083                     	ds	2
   483   000085                     card_response@blue_read:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x25
   487   000085                     	ds	2
   488   000087                     card_response@expected_values:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x27
   492   000087                     	ds	2
   493   000089                     card_response@mL:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x29
   497   000089                     	ds	2
   498   00008B                     card_response@mR:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x2B
   502   00008B                     	ds	2
   503   00008D                     card_response@normalised_values:
   504                           	callstack 0
   505                           
   506                           ; 54 bytes @ 0x2D
   507   00008D                     	ds	54
   508   0000C3                     card_response@master_closeness:
   509                           	callstack 0
   510                           
   511                           ; 18 bytes @ 0x63
   512   0000C3                     	ds	18
   513   0000D5                     card_response@card:
   514                           	callstack 0
   515                           
   516                           ; 1 bytes @ 0x75
   517   0000D5                     	ds	1
   518   0000D6                     ??_main:
   519                           
   520                           ; 1 bytes @ 0x76
   521   0000D6                     	ds	2
   522                           
   523                           	psect	cstackCOMRAM
   524   000001                     __pcstackCOMRAM:
   525                           	callstack 0
   526   000001                     ??i2_I2C_2_Master_Idle:
   527   000001                     
   528                           ; 1 bytes @ 0x0
   529   000001                     	ds	1
   530   000002                     i2I2C_2_Master_Write@data_byte:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x1
   534   000002                     	ds	1
   535   000003                     ??_HighISR:
   536   000003                     
   537                           ; 1 bytes @ 0x2
   538   000003                     	ds	2
   539   000005                     ??_I2C_2_Master_Idle:
   540   000005                     ?___wmul:
   541                           	callstack 0
   542   000005                     ?___aodiv:
   543                           	callstack 0
   544   000005                     ?___aomod:
   545                           	callstack 0
   546   000005                     sendCharSerial4@charToSend:
   547                           	callstack 0
   548   000005                     determine_card@master_closeness:
   549                           	callstack 0
   550   000005                     ___wmul@multiplier:
   551                           	callstack 0
   552   000005                     fputc@c:
   553                           	callstack 0
   554   000005                     ___aodiv@dividend:
   555                           	callstack 0
   556   000005                     ___aomod@dividend:
   557                           	callstack 0
   558                           
   559                           ; 8 bytes @ 0x4
   560   000005                     	ds	1
   561   000006                     ??_I2C_2_Master_Read:
   562   000006                     I2C_2_Master_Write@data_byte:
   563                           	callstack 0
   564   000006                     sendStringSerial4@string:
   565                           	callstack 0
   566                           
   567                           ; 2 bytes @ 0x5
   568   000006                     	ds	1
   569   000007                     ??_determine_card:
   570   000007                     color_writetoaddr@value:
   571                           	callstack 0
   572   000007                     I2C_2_Master_Read@ack:
   573                           	callstack 0
   574   000007                     ___wmul@multiplicand:
   575                           	callstack 0
   576   000007                     fputc@fp:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x6
   580   000007                     	ds	1
   581   000008                     color_writetoaddr@address:
   582                           	callstack 0
   583   000008                     I2C_2_Master_Read@tmp:
   584                           	callstack 0
   585                           
   586                           ; 1 bytes @ 0x7
   587   000008                     	ds	1
   588   000009                     ??_fputc:
   589   000009                     ??_color_click_init:
   590   000009                     ?_color_read_Red:
   591                           	callstack 0
   592   000009                     ?_color_read_Green:
   593                           	callstack 0
   594   000009                     ?_color_read_Blue:
   595                           	callstack 0
   596   000009                     ?_color_read_Clear:
   597                           	callstack 0
   598   000009                     set_interrupt_threshold@AILT:
   599                           	callstack 0
   600   000009                     ___wmul@product:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x8
   604   000009                     	ds	2
   605   00000B                     ??_color_read_Red:
   606   00000B                     ??_color_read_Green:
   607   00000B                     ??_color_read_Blue:
   608   00000B                     ??_color_read_Clear:
   609   00000B                     ?___lwdiv:
   610                           	callstack 0
   611   00000B                     determine_card@current_smallest:
   612                           	callstack 0
   613   00000B                     set_interrupt_threshold@AIHT:
   614                           	callstack 0
   615   00000B                     ___lwdiv@dividend:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0xA
   619   00000B                     	ds	2
   620   00000D                     determine_card@predicted_colour:
   621                           	callstack 0
   622   00000D                     set_interrupt_threshold@persistence:
   623                           	callstack 0
   624   00000D                     ___lwdiv@divisor:
   625                           	callstack 0
   626   00000D                     ___aodiv@divisor:
   627                           	callstack 0
   628   00000D                     ___aomod@divisor:
   629                           	callstack 0
   630                           
   631                           ; 8 bytes @ 0xC
   632   00000D                     	ds	1
   633   00000E                     determine_card@i:
   634                           	callstack 0
   635   00000E                     color_read_Red@tmp:
   636                           	callstack 0
   637   00000E                     color_read_Green@tmp:
   638                           	callstack 0
   639   00000E                     color_read_Blue@tmp:
   640                           	callstack 0
   641   00000E                     color_read_Clear@tmp:
   642                           	callstack 0
   643   00000E                     fputs@s:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0xD
   647   00000E                     	ds	1
   648   00000F                     _set_interrupt_threshold$2062:
   649                           	callstack 0
   650   00000F                     ___lwdiv@quotient:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0xE
   654   00000F                     	ds	1
   655   000010                     _set_interrupt_threshold$2063:
   656                           	callstack 0
   657   000010                     fputs@fp:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0xF
   661   000010                     	ds	1
   662   000011                     ___lwdiv@counter:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x10
   666   000011                     	ds	1
   667   000012                     fputs@c:
   668                           	callstack 0
   669   000012                     setMotorPWM@m:
   670                           	callstack 0
   671   000012                     collect_avg_readings@red_read:
   672                           	callstack 0
   673   000012                     make_master_closeness@buf:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x11
   677   000012                     	ds	1
   678   000013                     fputs@i:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0x12
   682   000013                     	ds	1
   683   000014                     ??_setMotorPWM:
   684   000014                     collect_avg_readings@green_read:
   685                           	callstack 0
   686   000014                     make_master_closeness@normalised_values:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x13
   690   000014                     	ds	1
   691   000015                     ___aodiv@counter:
   692                           	callstack 0
   693   000015                     ___aomod@counter:
   694                           	callstack 0
   695   000015                     pad@fp:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x14
   699   000015                     	ds	1
   700   000016                     setMotorPWM@posDuty:
   701                           	callstack 0
   702   000016                     ___aodiv@sign:
   703                           	callstack 0
   704   000016                     ___aomod@sign:
   705                           	callstack 0
   706   000016                     collect_avg_readings@blue_read:
   707                           	callstack 0
   708   000016                     make_master_closeness@master_closeness:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x15
   712   000016                     	ds	1
   713   000017                     ?_abs:
   714                           	callstack 0
   715   000017                     setMotorPWM@negDuty:
   716                           	callstack 0
   717   000017                     abs@a:
   718                           	callstack 0
   719   000017                     pad@buf:
   720                           	callstack 0
   721   000017                     ___aodiv@quotient:
   722                           	callstack 0
   723                           
   724                           ; 8 bytes @ 0x16
   725   000017                     	ds	1
   726   000018                     ??_collect_avg_readings:
   727   000018                     ??_make_master_closeness:
   728   000018                     stop@mL:
   729                           	callstack 0
   730   000018                     turnLeft45@mL:
   731                           	callstack 0
   732   000018                     turnRight45@mL:
   733                           	callstack 0
   734   000018                     reverseFullSpeed@mL:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x17
   738   000018                     	ds	1
   739   000019                     ??_abs:
   740   000019                     pad@p:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x18
   744   000019                     	ds	1
   745   00001A                     stop@mR:
   746                           	callstack 0
   747   00001A                     turnLeft45@mR:
   748                           	callstack 0
   749   00001A                     turnRight45@mR:
   750                           	callstack 0
   751   00001A                     reverseFullSpeed@mR:
   752                           	callstack 0
   753   00001A                     collect_avg_readings@i:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x19
   757   00001A                     	ds	1
   758   00001B                     ??_pad:
   759   00001B                     normalise_readings@buf:
   760                           	callstack 0
   761                           
   762                           ; 2 bytes @ 0x1A
   763   00001B                     	ds	1
   764   00001C                     ??_stop:
   765   00001C                     ??_turnLeft45:
   766   00001C                     ??_turnRight45:
   767   00001C                     ??_reverseFullSpeed:
   768   00001C                     collect_avg_readings@i_1596:
   769                           	callstack 0
   770   00001C                     pad@i:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x1B
   774   00001C                     	ds	1
   775   00001D                     reverseFullSpeed@i:
   776                           	callstack 0
   777   00001D                     normalise_readings@red_read:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x1C
   781   00001D                     	ds	1
   782   00001E                     turnLeft45@i:
   783                           	callstack 0
   784   00001E                     turnRight45@i:
   785                           	callstack 0
   786   00001E                     collect_avg_readings@i_1597:
   787                           	callstack 0
   788   00001E                     pad@w:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x1D
   792   00001E                     	ds	1
   793   00001F                     normalise_readings@green_read:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x1E
   797   00001F                     	ds	1
   798   000020                     collect_avg_readings@i_1598:
   799                           	callstack 0
   800   000020                     motor_response@mL:
   801                           	callstack 0
   802   000020                     dtoa@fp:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x1F
   806   000020                     	ds	1
   807   000021                     normalise_readings@blue_read:
   808                           	callstack 0
   809                           
   810                           ; 2 bytes @ 0x20
   811   000021                     	ds	1
   812   000022                     motor_response@mR:
   813                           	callstack 0
   814   000022                     dtoa@d:
   815                           	callstack 0
   816                           
   817                           ; 8 bytes @ 0x21
   818   000022                     	ds	1
   819   000023                     normalise_readings@expected_values:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x22
   823   000023                     	ds	1
   824   000024                     ??_motor_response:
   825                           
   826                           ; 1 bytes @ 0x23
   827   000024                     	ds	1
   828   000025                     normalise_readings@normalised_values:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x24
   832   000025                     	ds	1
   833   000026                     motor_response@card:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x25
   837   000026                     	ds	1
   838   000027                     ??_normalise_readings:
   839                           
   840                           ; 1 bytes @ 0x26
   841   000027                     	ds	3
   842   00002A                     ??_dtoa:
   843                           
   844                           ; 1 bytes @ 0x29
   845   00002A                     	ds	2
   846   00002C                     make_master_closeness@i:
   847                           	callstack 0
   848                           
   849                           ; 1 bytes @ 0x2B
   850   00002C                     	ds	3
   851   00002F                     normalise_readings@difference:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x2E
   855   00002F                     	ds	2
   856   000031                     normalise_readings@i:
   857                           	callstack 0
   858                           
   859                           ; 1 bytes @ 0x30
   860   000031                     	ds	1
   861   000032                     _dtoa$2581:
   862                           	callstack 0
   863                           
   864                           ; 2 bytes @ 0x31
   865   000032                     	ds	2
   866   000034                     dtoa@p:
   867                           	callstack 0
   868                           
   869                           ; 2 bytes @ 0x33
   870   000034                     	ds	2
   871   000036                     dtoa@w:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x35
   875   000036                     	ds	2
   876   000038                     dtoa@n:
   877                           	callstack 0
   878                           
   879                           ; 8 bytes @ 0x37
   880   000038                     	ds	8
   881   000040                     dtoa@s:
   882                           	callstack 0
   883                           
   884                           ; 1 bytes @ 0x3F
   885   000040                     	ds	1
   886   000041                     dtoa@i:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x40
   890   000041                     	ds	2
   891   000043                     vfpfcnvrt@fp:
   892                           	callstack 0
   893                           
   894                           ; 2 bytes @ 0x42
   895   000043                     	ds	2
   896   000045                     vfpfcnvrt@fmt:
   897                           	callstack 0
   898                           
   899                           ; 2 bytes @ 0x44
   900   000045                     	ds	2
   901   000047                     vfpfcnvrt@ap:
   902                           	callstack 0
   903                           
   904                           ; 2 bytes @ 0x46
   905   000047                     	ds	2
   906   000049                     ??_vfpfcnvrt:
   907                           
   908                           ; 1 bytes @ 0x48
   909   000049                     	ds	2
   910   00004B                     vfpfcnvrt@convarg:
   911                           	callstack 0
   912                           
   913                           ; 8 bytes @ 0x4A
   914   00004B                     	ds	8
   915   000053                     vfpfcnvrt@cp:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x52
   919   000053                     	ds	2
   920   000055                     vfprintf@cfmt:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x54
   924   000055                     	ds	2
   925   000057                     
   926                           ; 1 bytes @ 0x56
   927 ;;
   928 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   929 ;;
   930 ;; *************** function _main *****************
   931 ;; Defined at:
   932 ;;		line 21 in file "main.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  i               1  207[BANK1 ] enum E14569
   937 ;;  buf           150    0[BANK1 ] unsigned char [150]
   938 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   939 ;;  expected_val   54  150[BANK1 ] unsigned int [9][3]
   940 ;;  motorR          9  223[BANK1 ] struct DC_motor
   941 ;;  motorL          9  214[BANK1 ] struct DC_motor
   942 ;;  blue_read       2  212[BANK1 ] unsigned int 
   943 ;;  green_read      2  210[BANK1 ] unsigned int 
   944 ;;  red_read        2  208[BANK1 ] unsigned int 
   945 ;;  clear_read      2  204[BANK1 ] unsigned int 
   946 ;;  PWMcycle        1  206[BANK1 ] unsigned char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   957 ;;      Locals:         0       0     232       0       0       0       0       0       0       0       0       0       
      +0       0       0
   958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   959 ;;      Totals:         0       2     232       0       0       0       0       0       0       0       0       0       
      +0       0       0
   960 ;;Total ram usage:      234 bytes
   961 ;; Hardware stack levels required when called: 13
   962 ;; This function calls:
   963 ;;		_I2C_2_Master_Init
   964 ;;		_Interrupts_init
   965 ;;		_LEDSon_init
   966 ;;		_card_response
   967 ;;		_collect_avg_readings
   968 ;;		_color_click_init
   969 ;;		_color_read_Blue
   970 ;;		_color_read_Clear
   971 ;;		_color_read_Green
   972 ;;		_color_read_Red
   973 ;;		_initDCmotorsPWM
   974 ;;		_initUSART4
   975 ;;		_sendStringSerial4
   976 ;;		_setMotorPWM
   977 ;;		_sprintf
   978 ;; This function is called by:
   979 ;;		Startup code after reset
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text0
   984   00117A                     __ptext0:
   985                           	callstack 0
   986   00117A                     _main:
   987                           	callstack 18
   988   00117A                     
   989                           ;main.c: 26:     LEDSon_init();
   990   00117A  ECFF  F015         	call	_LEDSon_init	;wreg free
   991   00117E                     
   992                           ;main.c: 27:     I2C_2_Master_Init();
   993   00117E  ECAF  F015         	call	_I2C_2_Master_Init	;wreg free
   994   001182                     
   995                           ;main.c: 28:     color_click_init();
   996   001182  EC68  F015         	call	_color_click_init	;wreg free
   997   001186                     
   998                           ;main.c: 29:     initDCmotorsPWM();
   999   001186  EC81  F012         	call	_initDCmotorsPWM	;wreg free
  1000   00118A                     
  1001                           ;main.c: 30:     initUSART4();
  1002   00118A  EC10  F016         	call	_initUSART4	;wreg free
  1003   00118E                     
  1004                           ;main.c: 31:     Interrupts_init();
  1005   00118E  EC49  F015         	call	_Interrupts_init	;wreg free
  1006   001192                     
  1007                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1008   001192  8486               	bsf	134,2,c	;volatile
  1009   001194                     
  1010                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1011   001194  010E               	movlb	14	; () banked
  1012   001196  95B4               	bcf	180,2,b	;volatile
  1013   001198                     
  1014                           ; BSR set to: 14
  1015                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1016   001198  CFBC F1CE          	movff	4028,main@PWMcycle	;volatile
  1017                           
  1018                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1019   00119C  0E00               	movlw	0
  1020   00119E  0101               	movlb	1	; () banked
  1021   0011A0  6FD6               	movwf	main@motorL& (0+255),b
  1022                           
  1023                           ;main.c: 47:     motorL.direction=1;
  1024   0011A2  0E01               	movlw	1
  1025   0011A4  6FD7               	movwf	(main@motorL+1)& (0+255),b
  1026                           
  1027                           ;main.c: 48:     motorL.brakemode=1;
  1028   0011A6  0E01               	movlw	1
  1029   0011A8  6FD8               	movwf	(main@motorL+2)& (0+255),b
  1030   0011AA                     
  1031                           ; BSR set to: 1
  1032                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1033   0011AA  0EAA               	movlw	170
  1034   0011AC  6FDB               	movwf	(main@motorL+5)& (0+255),b
  1035   0011AE  0E0F               	movlw	15
  1036   0011B0  6FDC               	movwf	(main@motorL+6)& (0+255),b
  1037   0011B2                     
  1038                           ; BSR set to: 1
  1039                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1040   0011B2  0EA6               	movlw	166
  1041   0011B4  6FDD               	movwf	(main@motorL+7)& (0+255),b
  1042   0011B6  0E0F               	movlw	15
  1043   0011B8  6FDE               	movwf	(main@motorL+8)& (0+255),b
  1044   0011BA                     
  1045                           ; BSR set to: 1
  1046                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1047   0011BA  C1CE  F1D9         	movff	main@PWMcycle,main@motorL+3
  1048   0011BE  6BDA               	clrf	(main@motorL+4)& (0+255),b
  1049                           
  1050                           ;main.c: 53:     motorR.power=0;
  1051   0011C0  0E00               	movlw	0
  1052   0011C2  6FDF               	movwf	main@motorR& (0+255),b
  1053                           
  1054                           ;main.c: 54:     motorR.direction=1;
  1055   0011C4  0E01               	movlw	1
  1056   0011C6  6FE0               	movwf	(main@motorR+1)& (0+255),b
  1057                           
  1058                           ;main.c: 55:     motorR.brakemode=1;
  1059   0011C8  0E01               	movlw	1
  1060   0011CA  6FE1               	movwf	(main@motorR+2)& (0+255),b
  1061   0011CC                     
  1062                           ; BSR set to: 1
  1063                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1064   0011CC  0E25               	movlw	37
  1065   0011CE  6FE4               	movwf	(main@motorR+5)& (0+255),b
  1066   0011D0  0E0F               	movlw	15
  1067   0011D2  6FE5               	movwf	(main@motorR+6)& (0+255),b
  1068   0011D4                     
  1069                           ; BSR set to: 1
  1070                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1071   0011D4  0E21               	movlw	33
  1072   0011D6  6FE6               	movwf	(main@motorR+7)& (0+255),b
  1073   0011D8  0E0F               	movlw	15
  1074   0011DA  6FE7               	movwf	(main@motorR+8)& (0+255),b
  1075   0011DC                     
  1076                           ; BSR set to: 1
  1077                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1078   0011DC  C1CE  F1E2         	movff	main@PWMcycle,main@motorR+3
  1079   0011E0  6BE3               	clrf	(main@motorR+4)& (0+255),b
  1080   0011E2                     
  1081                           ; BSR set to: 1
  1082                           ;main.c: 60:     setMotorPWM(&motorL);
  1083   0011E2  0ED6               	movlw	low main@motorL
  1084   0011E4  6E12               	movwf	setMotorPWM@m^0,c
  1085   0011E6  0E01               	movlw	high main@motorL
  1086   0011E8  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1087   0011EA  EC14  F00E         	call	_setMotorPWM	;wreg free
  1088   0011EE                     
  1089                           ;main.c: 61:     setMotorPWM(&motorR);
  1090   0011EE  0EDF               	movlw	low main@motorR
  1091   0011F0  6E12               	movwf	setMotorPWM@m^0,c
  1092   0011F2  0E01               	movlw	high main@motorR
  1093   0011F4  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1094   0011F6  EC14  F00E         	call	_setMotorPWM	;wreg free
  1095                           
  1096                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1097   0011FA  0E00               	movlw	0
  1098   0011FC  0101               	movlb	1	; () banked
  1099   0011FE  6FD1               	movwf	(main@red_read+1)& (0+255),b
  1100   001200  0E00               	movlw	0
  1101   001202  6FD0               	movwf	main@red_read& (0+255),b
  1102                           
  1103                           ;main.c: 69:     unsigned int green_read = 0;
  1104   001204  0E00               	movlw	0
  1105   001206  6FD3               	movwf	(main@green_read+1)& (0+255),b
  1106   001208  0E00               	movlw	0
  1107   00120A  6FD2               	movwf	main@green_read& (0+255),b
  1108                           
  1109                           ;main.c: 70:     unsigned int blue_read = 0;
  1110   00120C  0E00               	movlw	0
  1111   00120E  6FD5               	movwf	(main@blue_read+1)& (0+255),b
  1112   001210  0E00               	movlw	0
  1113   001212  6FD4               	movwf	main@blue_read& (0+255),b
  1114   001214                     
  1115                           ; BSR set to: 1
  1116                           ;main.c: 73:     unsigned int expected_values[3][9];;main.c: 74:     unsigned int Return
      +                          HomeArray[2][30];;main.c: 84:     LATDbits.LATD4 = 0;
  1117   001214  987C               	bcf	124,4,c	;volatile
  1118                           
  1119                           ;main.c: 85:     for(colour i = RED; i<= BLACK; i++){
  1120   001216  0E00               	movlw	0
  1121   001218  6FCF               	movwf	main@i& (0+255),b
  1122   00121A  EF10  F009         	goto	l244
  1123   00121E                     l245:
  1124                           
  1125                           ;main.c: 87:             LATDbits.LATD4 = 1;
  1126   00121E  887C               	bsf	124,4,c	;volatile
  1127   001220                     l244:
  1128                           
  1129                           ;main.c: 86:         while(PORTFbits.RF2){
  1130   001220  B48E               	btfsc	142,2,c	;volatile
  1131   001222  EF15  F009         	goto	u1931
  1132   001226  EF17  F009         	goto	u1930
  1133   00122A                     u1931:
  1134   00122A  EF0F  F009         	goto	l245
  1135   00122E                     u1930:
  1136   00122E                     
  1137                           ;main.c: 89:         LATDbits.LATD4 = 0;
  1138   00122E  987C               	bcf	124,4,c	;volatile
  1139   001230                     
  1140                           ;main.c: 90:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1141   001230  0ED0               	movlw	low main@red_read
  1142   001232  6E12               	movwf	collect_avg_readings@red_read^0,c
  1143   001234  0E01               	movlw	high main@red_read
  1144   001236  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1145   001238  0ED2               	movlw	low main@green_read
  1146   00123A  6E14               	movwf	collect_avg_readings@green_read^0,c
  1147   00123C  0E01               	movlw	high main@green_read
  1148   00123E  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1149   001240  0ED4               	movlw	low main@blue_read
  1150   001242  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1151   001244  0E01               	movlw	high main@blue_read
  1152   001246  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1153   001248  EC5D  F00C         	call	_collect_avg_readings	;wreg free
  1154   00124C                     
  1155                           ;main.c: 91:         expected_values[RED][i] = red_read;
  1156   00124C  0101               	movlb	1	; () banked
  1157   00124E  51CF               	movf	main@i& (0+255),w,b
  1158   001250  0D02               	mullw	2
  1159   001252  0E96               	movlw	low main@expected_values
  1160   001254  24F3               	addwf	243,w,c
  1161   001256  6ED9               	movwf	fsr2l,c
  1162   001258  0E01               	movlw	high main@expected_values
  1163   00125A  20F4               	addwfc	prodh,w,c
  1164   00125C  6EDA               	movwf	fsr2h,c
  1165   00125E  C1D0  FFDE         	movff	main@red_read,postinc2
  1166   001262  C1D1  FFDD         	movff	main@red_read+1,postdec2
  1167   001266                     
  1168                           ; BSR set to: 1
  1169                           ;main.c: 92:         expected_values[GREEN][i] = green_read;
  1170   001266  51CF               	movf	main@i& (0+255),w,b
  1171   001268  0D02               	mullw	2
  1172   00126A  0E12               	movlw	18
  1173   00126C  26F3               	addwf	243,f,c
  1174   00126E  0E00               	movlw	0
  1175   001270  22F4               	addwfc	244,f,c
  1176   001272  0E96               	movlw	low main@expected_values
  1177   001274  24F3               	addwf	243,w,c
  1178   001276  6ED9               	movwf	fsr2l,c
  1179   001278  0E01               	movlw	high main@expected_values
  1180   00127A  20F4               	addwfc	prodh,w,c
  1181   00127C  6EDA               	movwf	fsr2h,c
  1182   00127E  C1D2  FFDE         	movff	main@green_read,postinc2
  1183   001282  C1D3  FFDD         	movff	main@green_read+1,postdec2
  1184   001286                     
  1185                           ; BSR set to: 1
  1186                           ;main.c: 93:         expected_values[BLUE][i] = blue_read;
  1187   001286  51CF               	movf	main@i& (0+255),w,b
  1188   001288  0D02               	mullw	2
  1189   00128A  0E24               	movlw	36
  1190   00128C  26F3               	addwf	243,f,c
  1191   00128E  0E00               	movlw	0
  1192   001290  22F4               	addwfc	244,f,c
  1193   001292  0E96               	movlw	low main@expected_values
  1194   001294  24F3               	addwf	243,w,c
  1195   001296  6ED9               	movwf	fsr2l,c
  1196   001298  0E01               	movlw	high main@expected_values
  1197   00129A  20F4               	addwfc	prodh,w,c
  1198   00129C  6EDA               	movwf	fsr2h,c
  1199   00129E  C1D4  FFDE         	movff	main@blue_read,postinc2
  1200   0012A2  C1D5  FFDD         	movff	main@blue_read+1,postdec2
  1201   0012A6                     
  1202                           ; BSR set to: 1
  1203                           ;main.c: 94:         sprintf(buf, "\n EXPECTED: R %d, G %d, B %d  CARD: %d \n", red_read
      +                          , green_read, blue_read, i);
  1204   0012A6  0E00               	movlw	low main@buf
  1205   0012A8  0100               	movlb	0	; () banked
  1206   0012AA  6F66               	movwf	sprintf@s& (0+255),b
  1207   0012AC  0E01               	movlw	high main@buf
  1208   0012AE  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1209   0012B0  0E01               	movlw	low STR_1
  1210   0012B2  6F68               	movwf	sprintf@fmt& (0+255),b
  1211   0012B4  0E0E               	movlw	high STR_1
  1212   0012B6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1213   0012B8  C1D0  F06A         	movff	main@red_read,?_sprintf+4
  1214   0012BC  C1D1  F06B         	movff	main@red_read+1,?_sprintf+5
  1215   0012C0  C1D2  F06C         	movff	main@green_read,?_sprintf+6
  1216   0012C4  C1D3  F06D         	movff	main@green_read+1,?_sprintf+7
  1217   0012C8  C1D4  F06E         	movff	main@blue_read,?_sprintf+8
  1218   0012CC  C1D5  F06F         	movff	main@blue_read+1,?_sprintf+9
  1219   0012D0  C1CF  F070         	movff	main@i,?_sprintf+10
  1220   0012D4  6B71               	clrf	(?_sprintf+11)& (0+255),b
  1221   0012D6  EC1D  F014         	call	_sprintf	;wreg free
  1222   0012DA                     
  1223                           ;main.c: 95:         sendStringSerial4(buf);
  1224   0012DA  0E00               	movlw	low main@buf
  1225   0012DC  6E06               	movwf	sendStringSerial4@string^0,c
  1226   0012DE  0E01               	movlw	high main@buf
  1227   0012E0  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1228   0012E2  EC82  F015         	call	_sendStringSerial4	;wreg free
  1229   0012E6                     
  1230                           ;main.c: 96:     }
  1231   0012E6  0101               	movlb	1	; () banked
  1232   0012E8  2BCF               	incf	main@i& (0+255),f,b
  1233   0012EA                     
  1234                           ; BSR set to: 1
  1235   0012EA  0E08               	movlw	8
  1236   0012EC  65CF               	cpfsgt	main@i& (0+255),b
  1237   0012EE  EF7B  F009         	goto	u1941
  1238   0012F2  EF7D  F009         	goto	u1940
  1239   0012F6                     u1941:
  1240   0012F6  EF10  F009         	goto	l244
  1241   0012FA                     u1940:
  1242   0012FA                     
  1243                           ; BSR set to: 1
  1244                           ;main.c: 128:     LATHbits.LATH3=0;
  1245   0012FA  9680               	bcf	128,3,c	;volatile
  1246                           
  1247                           ;main.c: 129:     TRISHbits.TRISH3=0;
  1248   0012FC  9688               	bcf	136,3,c	;volatile
  1249                           
  1250                           ;main.c: 131:     LATDbits.LATD7=0;
  1251   0012FE  9E7C               	bcf	124,7,c	;volatile
  1252                           
  1253                           ;main.c: 132:     TRISDbits.TRISD7=0;
  1254   001300  9E84               	bcf	132,7,c	;volatile
  1255   001302                     l3509:
  1256                           
  1257                           ;main.c: 137:         red_read = color_read_Red();
  1258   001302  EC6E  F014         	call	_color_read_Red	;wreg free
  1259   001306  C009  F1D0         	movff	?_color_read_Red,main@red_read
  1260   00130A  C00A  F1D1         	movff	?_color_read_Red+1,main@red_read+1
  1261                           
  1262                           ;main.c: 138:         blue_read = color_read_Blue();
  1263   00130E  ECBE  F014         	call	_color_read_Blue	;wreg free
  1264   001312  C009  F1D4         	movff	?_color_read_Blue,main@blue_read
  1265   001316  C00A  F1D5         	movff	?_color_read_Blue+1,main@blue_read+1
  1266                           
  1267                           ;main.c: 139:         green_read = color_read_Green();
  1268   00131A  EC96  F014         	call	_color_read_Green	;wreg free
  1269   00131E  C009  F1D2         	movff	?_color_read_Green,main@green_read
  1270   001322  C00A  F1D3         	movff	?_color_read_Green+1,main@green_read+1
  1271                           
  1272                           ;main.c: 140:         clear_read = color_read_Clear();
  1273   001326  EC46  F014         	call	_color_read_Clear	;wreg free
  1274   00132A  C009  F1CC         	movff	?_color_read_Clear,main@clear_read
  1275   00132E  C00A  F1CD         	movff	?_color_read_Clear+1,main@clear_read+1
  1276   001332                     
  1277                           ;main.c: 143:         sprintf(buf, "Raw %d, %d, %d, %d \n", red_read, green_read, blue_r
      +                          ead, clear_read);
  1278   001332  0E00               	movlw	low main@buf
  1279   001334  0100               	movlb	0	; () banked
  1280   001336  6F66               	movwf	sprintf@s& (0+255),b
  1281   001338  0E01               	movlw	high main@buf
  1282   00133A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1283   00133C  0E44               	movlw	low STR_2
  1284   00133E  6F68               	movwf	sprintf@fmt& (0+255),b
  1285   001340  0E0E               	movlw	high STR_2
  1286   001342  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1287   001344  C1D0  F06A         	movff	main@red_read,?_sprintf+4
  1288   001348  C1D1  F06B         	movff	main@red_read+1,?_sprintf+5
  1289   00134C  C1D2  F06C         	movff	main@green_read,?_sprintf+6
  1290   001350  C1D3  F06D         	movff	main@green_read+1,?_sprintf+7
  1291   001354  C1D4  F06E         	movff	main@blue_read,?_sprintf+8
  1292   001358  C1D5  F06F         	movff	main@blue_read+1,?_sprintf+9
  1293   00135C  C1CC  F070         	movff	main@clear_read,?_sprintf+10
  1294   001360  C1CD  F071         	movff	main@clear_read+1,?_sprintf+11
  1295   001364  EC1D  F014         	call	_sprintf	;wreg free
  1296   001368                     
  1297                           ;main.c: 144:         sendStringSerial4(buf);
  1298   001368  0E00               	movlw	low main@buf
  1299   00136A  6E06               	movwf	sendStringSerial4@string^0,c
  1300   00136C  0E01               	movlw	high main@buf
  1301   00136E  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1302   001370  EC82  F015         	call	_sendStringSerial4	;wreg free
  1303   001374                     
  1304                           ;main.c: 145:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1305   001374  0E09               	movlw	9
  1306   001376  0100               	movlb	0	; () banked
  1307   001378  6FD7               	movwf	(??_main+1)& (0+255),b
  1308   00137A  0E1E               	movlw	30
  1309   00137C  6FD6               	movwf	??_main& (0+255),b
  1310   00137E  0EE4               	movlw	228
  1311   001380                     u1987:
  1312   001380  2EE8               	decfsz	wreg,f,c
  1313   001382  D7FE               	bra	u1987
  1314   001384  2FD6               	decfsz	??_main& (0+255),f,b
  1315   001386  D7FC               	bra	u1987
  1316   001388  2FD7               	decfsz	(??_main+1)& (0+255),f,b
  1317   00138A  D7FA               	bra	u1987
  1318   00138C  F000               	nop	
  1319   00138E                     
  1320                           ;main.c: 146:         LATHbits.LATH3=!LATHbits.LATH3;
  1321   00138E  A680               	btfss	128,3,c	;volatile
  1322   001390  EFCC  F009         	goto	u1951
  1323   001394  EFD1  F009         	goto	u1950
  1324   001398                     u1951:
  1325   001398  0100               	movlb	0	; () banked
  1326   00139A  6BD6               	clrf	??_main& (0+255),b
  1327   00139C  2BD6               	incf	??_main& (0+255),f,b
  1328   00139E  EFD3  F009         	goto	u1968
  1329   0013A2                     u1950:
  1330   0013A2  0100               	movlb	0	; () banked
  1331   0013A4  6BD6               	clrf	??_main& (0+255),b
  1332   0013A6                     u1968:
  1333   0013A6  47D6               	rlncf	??_main& (0+255),f,b
  1334   0013A8  47D6               	rlncf	??_main& (0+255),f,b
  1335   0013AA  47D6               	rlncf	??_main& (0+255),f,b
  1336   0013AC  5080               	movf	128,w,c	;volatile
  1337   0013AE  19D6               	xorwf	??_main& (0+255),w,b
  1338   0013B0  0BF7               	andlw	-9
  1339   0013B2  19D6               	xorwf	??_main& (0+255),w,b
  1340   0013B4  6E80               	movwf	128,c	;volatile
  1341                           
  1342                           ;main.c: 149:         while(PORTFbits.RF2){
  1343   0013B6  EFDF  F009         	goto	l248
  1344   0013BA                     l249:
  1345                           
  1346                           ;main.c: 150:             LATDbits.LATD4 = 1;
  1347   0013BA  887C               	bsf	124,4,c	;volatile
  1348                           
  1349                           ;main.c: 151:             LATFbits.LATF0 = 1;
  1350   0013BC  807E               	bsf	126,0,c	;volatile
  1351   0013BE                     l248:
  1352                           
  1353                           ;main.c: 149:         while(PORTFbits.RF2){
  1354   0013BE  B48E               	btfsc	142,2,c	;volatile
  1355   0013C0  EFE4  F009         	goto	u1971
  1356   0013C4  EFE6  F009         	goto	u1970
  1357   0013C8                     u1971:
  1358   0013C8  EFDD  F009         	goto	l249
  1359   0013CC                     u1970:
  1360   0013CC                     
  1361                           ;main.c: 153:         LATFbits.LATF0 = 0;
  1362   0013CC  907E               	bcf	126,0,c	;volatile
  1363   0013CE                     
  1364                           ;main.c: 155:         card_response(buf, &red_read, &green_read, &blue_read, expected_va
      +                          lues, &motorL, &motorR);
  1365   0013CE  0E00               	movlw	low main@buf
  1366   0013D0  0100               	movlb	0	; () banked
  1367   0013D2  6F7F               	movwf	card_response@buf& (0+255),b
  1368   0013D4  0E01               	movlw	high main@buf
  1369   0013D6  6F80               	movwf	(card_response@buf+1)& (0+255),b
  1370   0013D8  0ED0               	movlw	low main@red_read
  1371   0013DA  6F81               	movwf	card_response@red_read& (0+255),b
  1372   0013DC  0E01               	movlw	high main@red_read
  1373   0013DE  6F82               	movwf	(card_response@red_read+1)& (0+255),b
  1374   0013E0  0ED2               	movlw	low main@green_read
  1375   0013E2  6F83               	movwf	card_response@green_read& (0+255),b
  1376   0013E4  0E01               	movlw	high main@green_read
  1377   0013E6  6F84               	movwf	(card_response@green_read+1)& (0+255),b
  1378   0013E8  0ED4               	movlw	low main@blue_read
  1379   0013EA  6F85               	movwf	card_response@blue_read& (0+255),b
  1380   0013EC  0E01               	movlw	high main@blue_read
  1381   0013EE  6F86               	movwf	(card_response@blue_read+1)& (0+255),b
  1382   0013F0  0E96               	movlw	low main@expected_values
  1383   0013F2  6F87               	movwf	card_response@expected_values& (0+255),b
  1384   0013F4  0E01               	movlw	high main@expected_values
  1385   0013F6  6F88               	movwf	(card_response@expected_values+1)& (0+255),b
  1386   0013F8  0ED6               	movlw	low main@motorL
  1387   0013FA  6F89               	movwf	card_response@mL& (0+255),b
  1388   0013FC  0E01               	movlw	high main@motorL
  1389   0013FE  6F8A               	movwf	(card_response@mL+1)& (0+255),b
  1390   001400  0EDF               	movlw	low main@motorR
  1391   001402  6F8B               	movwf	card_response@mR& (0+255),b
  1392   001404  0E01               	movlw	high main@motorR
  1393   001406  6F8C               	movwf	(card_response@mR+1)& (0+255),b
  1394   001408  EC2B  F010         	call	_card_response	;wreg free
  1395   00140C  EF81  F009         	goto	l3509
  1396   001410  EF3B  F000         	goto	start
  1397   001414                     __end_of_main:
  1398                           	callstack 0
  1399                           
  1400 ;; *************** function _initUSART4 *****************
  1401 ;; Defined at:
  1402 ;;		line 6 in file "serial.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;		None
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;Total ram usage:        0 bytes
  1421 ;; Hardware stack levels used: 1
  1422 ;; Hardware stack levels required when called: 4
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text1
  1431   002C20                     __ptext1:
  1432                           	callstack 0
  1433   002C20                     _initUSART4:
  1434                           	callstack 26
  1435   002C20                     
  1436                           ;serial.c: 10:     RC0PPS = 0x12;
  1437   002C20  0E12               	movlw	18
  1438   002C22  010E               	movlb	14	; () banked
  1439   002C24  6F62               	movwf	98,b	;volatile
  1440                           
  1441                           ;serial.c: 11:     RX4PPS = 0x11;
  1442   002C26  0E11               	movlw	17
  1443   002C28  6F15               	movwf	21,b	;volatile
  1444   002C2A                     
  1445                           ; BSR set to: 14
  1446                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1447   002C2A  8283               	bsf	131,1,c	;volatile
  1448   002C2C                     
  1449                           ; BSR set to: 14
  1450                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1451   002C2C  97E9               	bcf	233,3,b	;volatile
  1452   002C2E                     
  1453                           ; BSR set to: 14
  1454                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1455   002C2E  95E8               	bcf	232,2,b	;volatile
  1456                           
  1457                           ;serial.c: 17:     SP4BRGL = 51;
  1458   002C30  0E33               	movlw	51
  1459   002C32  6FE5               	movwf	229,b	;volatile
  1460                           
  1461                           ;serial.c: 18:     SP4BRGH = 0;
  1462   002C34  0E00               	movlw	0
  1463   002C36  6FE6               	movwf	230,b	;volatile
  1464   002C38                     
  1465                           ; BSR set to: 14
  1466                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1467   002C38  89E7               	bsf	231,4,b	;volatile
  1468   002C3A                     
  1469                           ; BSR set to: 14
  1470                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1471   002C3A  8BE8               	bsf	232,5,b	;volatile
  1472   002C3C                     
  1473                           ; BSR set to: 14
  1474                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1475   002C3C  8FE7               	bsf	231,7,b	;volatile
  1476   002C3E                     
  1477                           ; BSR set to: 14
  1478   002C3E  0012               	return		;funcret
  1479   002C40                     __end_of_initUSART4:
  1480                           	callstack 0
  1481                           
  1482 ;; *************** function _initDCmotorsPWM *****************
  1483 ;; Defined at:
  1484 ;;		line 6 in file "dc_motor.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;Total ram usage:        0 bytes
  1503 ;; Hardware stack levels used: 1
  1504 ;; Hardware stack levels required when called: 4
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text2
  1513   002502                     __ptext2:
  1514                           	callstack 0
  1515   002502                     _initDCmotorsPWM:
  1516                           	callstack 26
  1517   002502                     
  1518                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1519   002502  9485               	bcf	133,2,c	;volatile
  1520                           
  1521                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1522   002504  9885               	bcf	133,4,c	;volatile
  1523                           
  1524                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1525   002506  9E83               	bcf	131,7,c	;volatile
  1526                           
  1527                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1528   002508  9C87               	bcf	135,6,c	;volatile
  1529   00250A                     
  1530                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1531   00250A  0E05               	movlw	5
  1532   00250C  010E               	movlb	14	; () banked
  1533   00250E  6F74               	movwf	116,b	;volatile
  1534                           
  1535                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1536   002510  0E06               	movlw	6
  1537   002512  6F76               	movwf	118,b	;volatile
  1538                           
  1539                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1540   002514  0E07               	movlw	7
  1541   002516  6F69               	movwf	105,b	;volatile
  1542                           
  1543                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1544   002518  0E08               	movlw	8
  1545   00251A  6F88               	movwf	136,b	;volatile
  1546                           
  1547                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1548   00251C  50BD               	movf	189,w,c	;volatile
  1549   00251E  0B8F               	andlw	-113
  1550   002520  0940               	iorlw	64
  1551   002522  6EBD               	movwf	189,c	;volatile
  1552                           
  1553                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1554   002524  0EE0               	movlw	-32
  1555   002526  16BE               	andwf	190,f,c	;volatile
  1556                           
  1557                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1558   002528  50BF               	movf	191,w,c	;volatile
  1559   00252A  0BF0               	andlw	-16
  1560   00252C  0901               	iorlw	1
  1561   00252E  6EBF               	movwf	191,c	;volatile
  1562                           
  1563                           ;dc_motor.c: 26:     T2PR=99;
  1564   002530  0E63               	movlw	99
  1565   002532  6EBC               	movwf	188,c	;volatile
  1566   002534                     
  1567                           ; BSR set to: 14
  1568                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1569   002534  8EBD               	bsf	189,7,c	;volatile
  1570                           
  1571                           ;dc_motor.c: 31:     CCPR1H=0;
  1572   002536  0E00               	movlw	0
  1573   002538  6EAA               	movwf	170,c	;volatile
  1574                           
  1575                           ;dc_motor.c: 32:     CCPR2H=0;
  1576   00253A  0E00               	movlw	0
  1577   00253C  6EA6               	movwf	166,c	;volatile
  1578                           
  1579                           ;dc_motor.c: 33:     CCPR3H=0;
  1580   00253E  0E00               	movlw	0
  1581   002540  010F               	movlb	15	; () banked
  1582   002542  6F25               	movwf	37,b	;volatile
  1583                           
  1584                           ;dc_motor.c: 34:     CCPR4H=0;
  1585   002544  0E00               	movlw	0
  1586   002546  6F21               	movwf	33,b	;volatile
  1587                           
  1588                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1589   002548  0EFC               	movlw	-4
  1590   00254A  16AD               	andwf	173,f,c	;volatile
  1591                           
  1592                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1593   00254C  0EF3               	movlw	-13
  1594   00254E  16AD               	andwf	173,f,c	;volatile
  1595                           
  1596                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1597   002550  0ECF               	movlw	-49
  1598   002552  16AD               	andwf	173,f,c	;volatile
  1599                           
  1600                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1601   002554  0E3F               	movlw	-193
  1602   002556  16AD               	andwf	173,f,c	;volatile
  1603   002558                     
  1604                           ; BSR set to: 15
  1605                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1606   002558  88AB               	bsf	171,4,c	;volatile
  1607                           
  1608                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1609   00255A  50AB               	movf	171,w,c	;volatile
  1610   00255C  0BF0               	andlw	-16
  1611   00255E  090C               	iorlw	12
  1612   002560  6EAB               	movwf	171,c	;volatile
  1613   002562                     
  1614                           ; BSR set to: 15
  1615                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1616   002562  8EAB               	bsf	171,7,c	;volatile
  1617   002564                     
  1618                           ; BSR set to: 15
  1619                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1620   002564  88A7               	bsf	167,4,c	;volatile
  1621                           
  1622                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1623   002566  50A7               	movf	167,w,c	;volatile
  1624   002568  0BF0               	andlw	-16
  1625   00256A  090C               	iorlw	12
  1626   00256C  6EA7               	movwf	167,c	;volatile
  1627   00256E                     
  1628                           ; BSR set to: 15
  1629                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1630   00256E  8EA7               	bsf	167,7,c	;volatile
  1631   002570                     
  1632                           ; BSR set to: 15
  1633                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1634   002570  8926               	bsf	38,4,b	;volatile
  1635                           
  1636                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1637   002572  5126               	movf	38,w,b	;volatile
  1638   002574  0BF0               	andlw	-16
  1639   002576  090C               	iorlw	12
  1640   002578  6F26               	movwf	38,b	;volatile
  1641   00257A                     
  1642                           ; BSR set to: 15
  1643                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1644   00257A  8F26               	bsf	38,7,b	;volatile
  1645   00257C                     
  1646                           ; BSR set to: 15
  1647                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1648   00257C  8922               	bsf	34,4,b	;volatile
  1649                           
  1650                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1651   00257E  5122               	movf	34,w,b	;volatile
  1652   002580  0BF0               	andlw	-16
  1653   002582  090C               	iorlw	12
  1654   002584  6F22               	movwf	34,b	;volatile
  1655   002586                     
  1656                           ; BSR set to: 15
  1657                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1658   002586  8F22               	bsf	34,7,b	;volatile
  1659   002588                     
  1660                           ; BSR set to: 15
  1661   002588  0012               	return		;funcret
  1662   00258A                     __end_of_initDCmotorsPWM:
  1663                           	callstack 0
  1664                           
  1665 ;; *************** function _color_read_Clear *****************
  1666 ;; Defined at:
  1667 ;;		line 71 in file "color.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  tmp             2   13[COMRAM] unsigned int 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  2    8[COMRAM] unsigned int 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1681 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1685 ;;Total ram usage:        7 bytes
  1686 ;; Hardware stack levels used: 1
  1687 ;; Hardware stack levels required when called: 6
  1688 ;; This function calls:
  1689 ;;		_I2C_2_Master_Read
  1690 ;;		_I2C_2_Master_RepStart
  1691 ;;		_I2C_2_Master_Start
  1692 ;;		_I2C_2_Master_Stop
  1693 ;;		_I2C_2_Master_Write
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text3
  1700   00288C                     __ptext3:
  1701                           	callstack 0
  1702   00288C                     _color_read_Clear:
  1703                           	callstack 24
  1704   00288C                     
  1705                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  1706   00288C  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  1707                           
  1708                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  1709   002890  0E52               	movlw	82
  1710   002892  EC5A  F016         	call	_I2C_2_Master_Write
  1711                           
  1712                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  1713   002896  0EB4               	movlw	180
  1714   002898  EC5A  F016         	call	_I2C_2_Master_Write
  1715                           
  1716                           ;color.c: 77:  I2C_2_Master_RepStart();
  1717   00289C  EC66  F016         	call	_I2C_2_Master_RepStart	;wreg free
  1718                           
  1719                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  1720   0028A0  0E53               	movlw	83
  1721   0028A2  EC5A  F016         	call	_I2C_2_Master_Write
  1722                           
  1723                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  1724   0028A6  0E01               	movlw	1
  1725   0028A8  EC08  F015         	call	_I2C_2_Master_Read
  1726   0028AC  6E0B               	movwf	??_color_read_Clear^0,c
  1727   0028AE  500B               	movf	??_color_read_Clear^0,w,c
  1728   0028B0  6E0E               	movwf	color_read_Clear@tmp^0,c
  1729   0028B2  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  1730                           
  1731                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  1732   0028B4  0E00               	movlw	0
  1733   0028B6  EC08  F015         	call	_I2C_2_Master_Read
  1734   0028BA  6E0B               	movwf	??_color_read_Clear^0,c
  1735   0028BC  500B               	movf	??_color_read_Clear^0,w,c
  1736   0028BE  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  1737   0028C0  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  1738   0028C2  500E               	movf	color_read_Clear@tmp^0,w,c
  1739   0028C4  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  1740   0028C6  6E0E               	movwf	color_read_Clear@tmp^0,c
  1741   0028C8  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  1742   0028CA  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  1743   0028CC  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  1744                           
  1745                           ;color.c: 81:  I2C_2_Master_Stop();
  1746   0028CE  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  1747   0028D2                     
  1748                           ;color.c: 82:  return tmp;
  1749   0028D2  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  1750   0028D6  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  1751   0028DA  0012               	return		;funcret
  1752   0028DC                     __end_of_color_read_Clear:
  1753                           	callstack 0
  1754                           
  1755 ;; *************** function _color_click_init *****************
  1756 ;; Defined at:
  1757 ;;		line 5 in file "color.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1774 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;Total ram usage:        1 bytes
  1776 ;; Hardware stack levels used: 1
  1777 ;; Hardware stack levels required when called: 7
  1778 ;; This function calls:
  1779 ;;		_I2C_2_Master_Init
  1780 ;;		_color_writetoaddr
  1781 ;; This function is called by:
  1782 ;;		_main
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text4
  1787   002AD0                     __ptext4:
  1788                           	callstack 0
  1789   002AD0                     _color_click_init:
  1790                           	callstack 23
  1791   002AD0                     
  1792                           ;color.c: 8:     I2C_2_Master_Init();
  1793   002AD0  ECAF  F015         	call	_I2C_2_Master_Init	;wreg free
  1794   002AD4                     
  1795                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1796   002AD4  0E01               	movlw	1
  1797   002AD6  6E07               	movwf	color_writetoaddr@value^0,c
  1798   002AD8  0E00               	movlw	0
  1799   002ADA  EC20  F016         	call	_color_writetoaddr
  1800   002ADE                     
  1801                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1802   002ADE  0E3F               	movlw	63
  1803   002AE0  6E09               	movwf	??_color_click_init^0,c
  1804   002AE2  0E55               	movlw	85
  1805   002AE4                     u1997:
  1806   002AE4  2EE8               	decfsz	wreg,f,c
  1807   002AE6  D7FE               	bra	u1997
  1808   002AE8  2E09               	decfsz	??_color_click_init^0,f,c
  1809   002AEA  D7FC               	bra	u1997
  1810   002AEC  F000               	nop	
  1811   002AEE                     
  1812                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1813   002AEE  0E03               	movlw	3
  1814   002AF0  6E07               	movwf	color_writetoaddr@value^0,c
  1815   002AF2  0E00               	movlw	0
  1816   002AF4  EC20  F016         	call	_color_writetoaddr
  1817   002AF8                     
  1818                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1819   002AF8  0ED5               	movlw	213
  1820   002AFA  6E07               	movwf	color_writetoaddr@value^0,c
  1821   002AFC  0E01               	movlw	1
  1822   002AFE  EC20  F016         	call	_color_writetoaddr
  1823   002B02  0012               	return		;funcret
  1824   002B04                     __end_of_color_click_init:
  1825                           	callstack 0
  1826                           
  1827 ;; *************** function _I2C_2_Master_Init *****************
  1828 ;; Defined at:
  1829 ;;		line 4 in file "i2c.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used: 1
  1849 ;; Hardware stack levels required when called: 4
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_color_click_init
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text5
  1859   002B5E                     __ptext5:
  1860                           	callstack 0
  1861   002B5E                     _I2C_2_Master_Init:
  1862                           	callstack 25
  1863   002B5E                     
  1864                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1865   002B5E  010E               	movlb	14	; () banked
  1866   002B60  51D9               	movf	217,w,b	;volatile
  1867   002B62  0BF0               	andlw	-16
  1868   002B64  0908               	iorlw	8
  1869   002B66  6FD9               	movwf	217,b	;volatile
  1870   002B68                     
  1871                           ; BSR set to: 14
  1872                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1873   002B68  8BD9               	bsf	217,5,b	;volatile
  1874                           
  1875                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1876   002B6A  0E9F               	movlw	159
  1877   002B6C  6FD6               	movwf	214,b	;volatile
  1878   002B6E                     
  1879                           ; BSR set to: 14
  1880                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1881   002B6E  8A84               	bsf	132,5,c	;volatile
  1882   002B70                     
  1883                           ; BSR set to: 14
  1884                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1885   002B70  8C84               	bsf	132,6,c	;volatile
  1886   002B72                     
  1887                           ; BSR set to: 14
  1888                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1889   002B72  9BA7               	bcf	167,5,b	;volatile
  1890   002B74                     
  1891                           ; BSR set to: 14
  1892                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1893   002B74  9DA7               	bcf	167,6,b	;volatile
  1894                           
  1895                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1896   002B76  0E1D               	movlw	29
  1897   002B78  6F1D               	movwf	29,b	;volatile
  1898                           
  1899                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1900   002B7A  0E1E               	movlw	30
  1901   002B7C  6F1C               	movwf	28,b	;volatile
  1902                           
  1903                           ;i2c.c: 18:   RD5PPS=0x1C;
  1904   002B7E  0E1C               	movlw	28
  1905   002B80  6F6F               	movwf	111,b	;volatile
  1906                           
  1907                           ;i2c.c: 19:   RD6PPS=0x1B;
  1908   002B82  0E1B               	movlw	27
  1909   002B84  6F70               	movwf	112,b	;volatile
  1910   002B86                     
  1911                           ; BSR set to: 14
  1912   002B86  0012               	return		;funcret
  1913   002B88                     __end_of_I2C_2_Master_Init:
  1914                           	callstack 0
  1915                           
  1916 ;; *************** function _card_response *****************
  1917 ;; Defined at:
  1918 ;;		line 177 in file "colour_identify.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  buf             2   31[BANK0 ] PTR unsigned char 
  1921 ;;		 -> main@buf(150), 
  1922 ;;  red_read        2   33[BANK0 ] PTR unsigned int 
  1923 ;;		 -> main@red_read(2), 
  1924 ;;  green_read      2   35[BANK0 ] PTR unsigned int 
  1925 ;;		 -> main@green_read(2), 
  1926 ;;  blue_read       2   37[BANK0 ] PTR unsigned int 
  1927 ;;		 -> main@blue_read(2), 
  1928 ;;  expected_val    2   39[BANK0 ] PTR unsigned int [9]
  1929 ;;		 -> main@expected_values(54), 
  1930 ;;  mL              2   41[BANK0 ] PTR struct DC_motor
  1931 ;;		 -> main@motorL(9), 
  1932 ;;  mR              2   43[BANK0 ] PTR struct DC_motor
  1933 ;;		 -> main@motorR(9), 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  normalised_v   54   45[BANK0 ] unsigned int [9][3]
  1936 ;;  master_close   18   99[BANK0 ] unsigned int [9]
  1937 ;;  card            1  117[BANK0 ] enum E14551
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1947 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Locals:         0      73       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;Total ram usage:       87 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; Hardware stack levels required when called: 12
  1954 ;; This function calls:
  1955 ;;		_collect_avg_readings
  1956 ;;		_determine_card
  1957 ;;		_make_master_closeness
  1958 ;;		_motor_response
  1959 ;;		_normalise_readings
  1960 ;;		_sendStringSerial4
  1961 ;;		_sprintf
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text6
  1968   002056                     __ptext6:
  1969                           	callstack 0
  1970   002056                     _card_response:
  1971                           	callstack 18
  1972   002056                     
  1973                           ;colour_identify.c: 181:     unsigned int normalised_values[3][9];;colour_identify.c: 18
      +                          2:     unsigned int master_closeness[9];;colour_identify.c: 184:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  1974   002056  C081  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  1975   00205A  C082  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  1976   00205E  C083  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  1977   002062  C084  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  1978   002066  C085  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  1979   00206A  C086  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  1980   00206E  EC5D  F00C         	call	_collect_avg_readings	;wreg free
  1981   002072                     
  1982                           ;colour_identify.c: 185:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  1983   002072  C07F  F066         	movff	card_response@buf,sprintf@s
  1984   002076  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  1985   00207A  0E2A               	movlw	low STR_3
  1986   00207C  0100               	movlb	0	; () banked
  1987   00207E  6F68               	movwf	sprintf@fmt& (0+255),b
  1988   002080  0E0E               	movlw	high STR_3
  1989   002082  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1990   002084  C081  FFD9         	movff	card_response@red_read,fsr2l
  1991   002088  C082  FFDA         	movff	card_response@red_read+1,fsr2h
  1992   00208C  CFDE F06A          	movff	postinc2,?_sprintf+4
  1993   002090  CFDD F06B          	movff	postdec2,?_sprintf+5
  1994   002094  C083  FFD9         	movff	card_response@green_read,fsr2l
  1995   002098  C084  FFDA         	movff	card_response@green_read+1,fsr2h
  1996   00209C  CFDE F06C          	movff	postinc2,?_sprintf+6
  1997   0020A0  CFDD F06D          	movff	postdec2,?_sprintf+7
  1998   0020A4  C085  FFD9         	movff	card_response@blue_read,fsr2l
  1999   0020A8  C086  FFDA         	movff	card_response@blue_read+1,fsr2h
  2000   0020AC  CFDE F06E          	movff	postinc2,?_sprintf+8
  2001   0020B0  CFDD F06F          	movff	postdec2,?_sprintf+9
  2002   0020B4  EC1D  F014         	call	_sprintf	;wreg free
  2003   0020B8                     
  2004                           ;colour_identify.c: 186:     sendStringSerial4(buf);
  2005   0020B8  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2006   0020BC  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2007   0020C0  EC82  F015         	call	_sendStringSerial4	;wreg free
  2008   0020C4                     
  2009                           ;colour_identify.c: 188:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  2010   0020C4  C07F  F01B         	movff	card_response@buf,normalise_readings@buf
  2011   0020C8  C080  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2012   0020CC  C081  FFD9         	movff	card_response@red_read,fsr2l
  2013   0020D0  C082  FFDA         	movff	card_response@red_read+1,fsr2h
  2014   0020D4  CFDE F01D          	movff	postinc2,normalise_readings@red_read
  2015   0020D8  CFDD F01E          	movff	postdec2,normalise_readings@red_read+1
  2016   0020DC  C083  FFD9         	movff	card_response@green_read,fsr2l
  2017   0020E0  C084  FFDA         	movff	card_response@green_read+1,fsr2h
  2018   0020E4  CFDE F01F          	movff	postinc2,normalise_readings@green_read
  2019   0020E8  CFDD F020          	movff	postdec2,normalise_readings@green_read+1
  2020   0020EC  C085  FFD9         	movff	card_response@blue_read,fsr2l
  2021   0020F0  C086  FFDA         	movff	card_response@blue_read+1,fsr2h
  2022   0020F4  CFDE F021          	movff	postinc2,normalise_readings@blue_read
  2023   0020F8  CFDD F022          	movff	postdec2,normalise_readings@blue_read+1
  2024   0020FC  C087  F023         	movff	card_response@expected_values,normalise_readings@expected_values
  2025   002100  C088  F024         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2026   002104  0E8D               	movlw	low card_response@normalised_values
  2027   002106  6E25               	movwf	normalise_readings@normalised_values^0,c
  2028   002108  0E00               	movlw	high card_response@normalised_values
  2029   00210A  6E26               	movwf	(normalise_readings@normalised_values+1)^0,c
  2030   00210C  EC49  F00B         	call	_normalise_readings	;wreg free
  2031   002110                     
  2032                           ;colour_identify.c: 190:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  2033   002110  C07F  F012         	movff	card_response@buf,make_master_closeness@buf
  2034   002114  C080  F013         	movff	card_response@buf+1,make_master_closeness@buf+1
  2035   002118  0E8D               	movlw	low card_response@normalised_values
  2036   00211A  6E14               	movwf	make_master_closeness@normalised_values^0,c
  2037   00211C  0E00               	movlw	high card_response@normalised_values
  2038   00211E  6E15               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2039   002120  0EC3               	movlw	low card_response@master_closeness
  2040   002122  6E16               	movwf	make_master_closeness@master_closeness^0,c
  2041   002124  0E00               	movlw	high card_response@master_closeness
  2042   002126  6E17               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2043   002128  ECBE  F010         	call	_make_master_closeness	;wreg free
  2044   00212C                     
  2045                           ;colour_identify.c: 192:     card = determine_card(master_closeness);
  2046   00212C  0EC3               	movlw	low card_response@master_closeness
  2047   00212E  6E05               	movwf	determine_card@master_closeness^0,c
  2048   002130  0E00               	movlw	high card_response@master_closeness
  2049   002132  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2050   002134  EC08  F013         	call	_determine_card	;wreg free
  2051   002138  0100               	movlb	0	; () banked
  2052   00213A  6FD5               	movwf	card_response@card& (0+255),b
  2053   00213C                     
  2054                           ; BSR set to: 0
  2055                           ;colour_identify.c: 193:     sprintf(buf, "CARD %d \n", card);
  2056   00213C  C07F  F066         	movff	card_response@buf,sprintf@s
  2057   002140  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  2058   002144  0E59               	movlw	low STR_4
  2059   002146  6F68               	movwf	sprintf@fmt& (0+255),b
  2060   002148  0E0E               	movlw	high STR_4
  2061   00214A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2062   00214C  C0D5  F06A         	movff	card_response@card,?_sprintf+4
  2063   002150  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2064   002152  EC1D  F014         	call	_sprintf	;wreg free
  2065   002156                     
  2066                           ;colour_identify.c: 194:     sendStringSerial4(buf);
  2067   002156  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2068   00215A  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2069   00215E  EC82  F015         	call	_sendStringSerial4	;wreg free
  2070   002162                     
  2071                           ;colour_identify.c: 196:     motor_response(card, mL, mR);
  2072   002162  C089  F020         	movff	card_response@mL,motor_response@mL
  2073   002166  C08A  F021         	movff	card_response@mL+1,motor_response@mL+1
  2074   00216A  C08B  F022         	movff	card_response@mR,motor_response@mR
  2075   00216E  C08C  F023         	movff	card_response@mR+1,motor_response@mR+1
  2076   002172  0100               	movlb	0	; () banked
  2077   002174  51D5               	movf	card_response@card& (0+255),w,b
  2078   002176  EC32  F007         	call	_motor_response
  2079   00217A  0012               	return		;funcret
  2080   00217C                     __end_of_card_response:
  2081                           	callstack 0
  2082                           
  2083 ;; *************** function _sprintf *****************
  2084 ;; Defined at:
  2085 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2088 ;;		 -> main@buf(150), 
  2089 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2090 ;;		 -> STR_4(10), STR_3(26), STR_2(21), STR_1(41), 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2093 ;;  ap              2   18[BANK0 ] PTR void [1]
  2094 ;;		 -> ?_sprintf(2), 
  2095 ;;  ret             2    0        int 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  2    6[BANK0 ] int 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2105 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;Total ram usage:       25 bytes
  2110 ;; Hardware stack levels used: 1
  2111 ;; Hardware stack levels required when called: 11
  2112 ;; This function calls:
  2113 ;;		_vfprintf
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;;		_card_response
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text7
  2121   00283A                     __ptext7:
  2122                           	callstack 0
  2123   00283A                     _sprintf:
  2124                           	callstack 19
  2125   00283A  0E6A               	movlw	low (?_sprintf+4)
  2126   00283C  0100               	movlb	0	; () banked
  2127   00283E  6F72               	movwf	sprintf@ap& (0+255),b
  2128   002840  0E00               	movlw	high (?_sprintf+4)
  2129   002842  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2130   002844  C066  F074         	movff	sprintf@s,sprintf@f
  2131   002848  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2132   00284C                     
  2133                           ; BSR set to: 0
  2134   00284C  0E00               	movlw	0
  2135   00284E  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2136   002850  0E00               	movlw	0
  2137   002852  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2138   002854                     
  2139                           ; BSR set to: 0
  2140   002854  0E00               	movlw	0
  2141   002856  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2142   002858  0E00               	movlw	0
  2143   00285A  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2144   00285C                     
  2145                           ; BSR set to: 0
  2146   00285C  0E74               	movlw	low sprintf@f
  2147   00285E  6F60               	movwf	vfprintf@fp& (0+255),b
  2148   002860  0E00               	movlw	high sprintf@f
  2149   002862  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2150   002864  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2151   002868  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2152   00286C  0E72               	movlw	low sprintf@ap
  2153   00286E  6F64               	movwf	vfprintf@ap& (0+255),b
  2154   002870  0E00               	movlw	high sprintf@ap
  2155   002872  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2156   002874  ECF3  F013         	call	_vfprintf	;wreg free
  2157   002878  0100               	movlb	0	; () banked
  2158   00287A  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2159   00287C  2566               	addwf	sprintf@s& (0+255),w,b
  2160   00287E  6ED9               	movwf	fsr2l,c
  2161   002880  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2162   002882  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2163   002884  6EDA               	movwf	fsr2h,c
  2164   002886  0E00               	movlw	0
  2165   002888  6EDF               	movwf	indf2,c
  2166   00288A                     
  2167                           ; BSR set to: 0
  2168   00288A  0012               	return		;funcret
  2169   00288C                     __end_of_sprintf:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _vfprintf *****************
  2173 ;; Defined at:
  2174 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2177 ;;		 -> sprintf@f(11), 
  2178 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2179 ;;		 -> STR_4(10), STR_3(26), STR_2(21), STR_1(41), 
  2180 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2181 ;;		 -> sprintf@ap(2), 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2184 ;;		 -> STR_4(10), STR_3(26), STR_2(21), STR_1(41), 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2    0[BANK0 ] int 
  2187 ;; Registers used:
  2188 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2194 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2197 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2198 ;;Total ram usage:        8 bytes
  2199 ;; Hardware stack levels used: 1
  2200 ;; Hardware stack levels required when called: 10
  2201 ;; This function calls:
  2202 ;;		_vfpfcnvrt
  2203 ;; This function is called by:
  2204 ;;		_sprintf
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text8
  2209   0027E6                     __ptext8:
  2210                           	callstack 0
  2211   0027E6                     _vfprintf:
  2212                           	callstack 19
  2213   0027E6                     
  2214                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2215   0027E6  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2216   0027EA  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2217                           
  2218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2219   0027EE  EF07  F014         	goto	l3403
  2220   0027F2                     l3401:
  2221                           
  2222                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2223   0027F2  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2224   0027F6  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2225   0027FA  0E55               	movlw	low vfprintf@cfmt
  2226   0027FC  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2227   0027FE  0E00               	movlw	high vfprintf@cfmt
  2228   002800  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2229   002802  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2230   002806  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2231   00280A  EC7C  F00F         	call	_vfpfcnvrt	;wreg free
  2232   00280E                     l3403:
  2233                           
  2234                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2235   00280E  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2236   002812  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2237   002816                     	if	0	;tblptru may be non-zero
  2238   002816                     	endif
  2239   002816                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2240   002816  0E00               	movlw	low (__mediumconst shr (0+16))
  2241   002818  6EF8               	movwf	tblptru,c
  2242   00281A                     	endif
  2243   00281A  0008               	tblrd		*
  2244   00281C  50F5               	movf	tablat,w,c
  2245   00281E  0900               	iorlw	0
  2246   002820  A4D8               	btfss	status,2,c
  2247   002822  EF15  F014         	goto	u1911
  2248   002826  EF17  F014         	goto	u1910
  2249   00282A                     u1911:
  2250   00282A  EFF9  F013         	goto	l3401
  2251   00282E                     u1910:
  2252   00282E                     
  2253                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2254   00282E  0E00               	movlw	0
  2255   002830  0100               	movlb	0	; () banked
  2256   002832  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2257   002834  0E00               	movlw	0
  2258   002836  6F60               	movwf	?_vfprintf& (0+255),b
  2259   002838                     
  2260                           ; BSR set to: 0
  2261   002838  0012               	return		;funcret
  2262   00283A                     __end_of_vfprintf:
  2263                           	callstack 0
  2264                           
  2265 ;; *************** function _vfpfcnvrt *****************
  2266 ;; Defined at:
  2267 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2270 ;;		 -> sprintf@f(11), 
  2271 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2272 ;;		 -> vfprintf@cfmt(2), 
  2273 ;;  ap              2   70[COMRAM] PTR PTR void 
  2274 ;;		 -> sprintf@ap(2), 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  convarg         8   74[COMRAM] struct .
  2277 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2278 ;;		 -> STR_4(10), STR_3(26), STR_2(21), STR_1(41), 
  2279 ;;  i               2    0        int 
  2280 ;;  done            2    0        int 
  2281 ;;  c               1    0        unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2291 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;Total ram usage:       18 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; Hardware stack levels required when called: 9
  2298 ;; This function calls:
  2299 ;;		_dtoa
  2300 ;;		_fputc
  2301 ;; This function is called by:
  2302 ;;		_vfprintf
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text9
  2307   001EF8                     __ptext9:
  2308                           	callstack 0
  2309   001EF8                     _vfpfcnvrt:
  2310                           	callstack 19
  2311   001EF8                     
  2312                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2313   001EF8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2314   001EFC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2315   001F00  CFDE FFF6          	movff	postinc2,tblptrl
  2316   001F04  CFDD FFF7          	movff	postdec2,tblptrh
  2317   001F08                     	if	0	;tblptru may be non-zero
  2318   001F08                     	endif
  2319   001F08                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2320   001F08  0E00               	movlw	low (__mediumconst shr (0+16))
  2321   001F0A  6EF8               	movwf	tblptru,c
  2322   001F0C                     	endif
  2323   001F0C  0008               	tblrd		*
  2324   001F0E  50F5               	movf	tablat,w,c
  2325   001F10  0A25               	xorlw	37
  2326   001F12  A4D8               	btfss	status,2,c
  2327   001F14  EF8E  F00F         	goto	u1881
  2328   001F18  EF90  F00F         	goto	u1880
  2329   001F1C                     u1881:
  2330   001F1C  EF14  F010         	goto	l3393
  2331   001F20                     u1880:
  2332   001F20                     
  2333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2334   001F20  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2335   001F24  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2336   001F28  2ADE               	incf	postinc2,f,c
  2337   001F2A  0E00               	movlw	0
  2338   001F2C  22DD               	addwfc	postdec2,f,c
  2339   001F2E                     
  2340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2341   001F2E  0E00               	movlw	0
  2342   001F30  0100               	movlb	0	; () banked
  2343   001F32  6FED               	movwf	(_width+1)& (0+255),b
  2344   001F34  0E00               	movlw	0
  2345   001F36  6FEC               	movwf	_width& (0+255),b
  2346   001F38  C0EC  F0F4         	movff	_width,_flags
  2347   001F3C                     
  2348                           ; BSR set to: 0
  2349                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2350   001F3C  69EE               	setf	_prec& (0+255),b
  2351   001F3E  69EF               	setf	(_prec+1)& (0+255),b
  2352   001F40                     
  2353                           ; BSR set to: 0
  2354                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2355   001F40  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2356   001F44  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2357   001F48  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2358   001F4C  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2359   001F50                     
  2360                           ; BSR set to: 0
  2361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2362   001F50  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2363   001F54  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2364   001F58                     	if	0	;tblptru may be non-zero
  2365   001F58                     	endif
  2366   001F58                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2367   001F58  0E00               	movlw	low (__mediumconst shr (0+16))
  2368   001F5A  6EF8               	movwf	tblptru,c
  2369   001F5C                     	endif
  2370   001F5C  0008               	tblrd		*
  2371   001F5E  50F5               	movf	tablat,w,c
  2372   001F60  0A64               	xorlw	100
  2373   001F62  B4D8               	btfsc	status,2,c
  2374   001F64  EFB6  F00F         	goto	u1891
  2375   001F68  EFB8  F00F         	goto	u1890
  2376   001F6C                     u1891:
  2377   001F6C  EFC8  F00F         	goto	l3383
  2378   001F70                     u1890:
  2379   001F70                     
  2380                           ; BSR set to: 0
  2381   001F70  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2382   001F74  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2383   001F78                     	if	0	;tblptru may be non-zero
  2384   001F78                     	endif
  2385   001F78                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2386   001F78  0E00               	movlw	low (__mediumconst shr (0+16))
  2387   001F7A  6EF8               	movwf	tblptru,c
  2388   001F7C                     	endif
  2389   001F7C  0008               	tblrd		*
  2390   001F7E  50F5               	movf	tablat,w,c
  2391   001F80  0A69               	xorlw	105
  2392   001F82  A4D8               	btfss	status,2,c
  2393   001F84  EFC6  F00F         	goto	u1901
  2394   001F88  EFC8  F00F         	goto	u1900
  2395   001F8C                     u1901:
  2396   001F8C  EF0B  F010         	goto	l3389
  2397   001F90                     u1900:
  2398   001F90                     l3383:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2402   001F90  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2403   001F94  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2404   001F98  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2405   001F9C  0E02               	movlw	2
  2406   001F9E  26DE               	addwf	postinc2,f,c
  2407   001FA0  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2408   001FA4  0E00               	movlw	0
  2409   001FA6  22DD               	addwfc	postdec2,f,c
  2410   001FA8  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2411   001FAC  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2412   001FB0  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2413   001FB4  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2414   001FB8  0E00               	movlw	0
  2415   001FBA  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2416   001FBC  0EFF               	movlw	-1
  2417   001FBE  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2418   001FC0  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2419   001FC2  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2420   001FC4  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2421   001FC6  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2422   001FC8  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2423                           
  2424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2425   001FCA  0E01               	movlw	1
  2426   001FCC  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2427   001FCE  6E49               	movwf	??_vfpfcnvrt^0,c
  2428   001FD0  0E00               	movlw	0
  2429   001FD2  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2430   001FD4  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2431   001FD6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2432   001FDA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2433   001FDE  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2434   001FE2  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2435   001FE6                     
  2436                           ; BSR set to: 0
  2437                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2438   001FE6  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2439   001FEA  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2440   001FEE  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2441   001FF2  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2442   001FF6  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2443   001FFA  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2444   001FFE  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2445   002002  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2446   002006  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2447   00200A  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2448   00200E  EC0A  F00A         	call	_dtoa	;wreg free
  2449   002012  EF2A  F010         	goto	l1242
  2450   002016                     l3389:
  2451                           
  2452                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2453   002016  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2454   00201A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2455   00201E  2ADE               	incf	postinc2,f,c
  2456   002020  0E00               	movlw	0
  2457   002022  22DD               	addwfc	postdec2,f,c
  2458   002024  EF2A  F010         	goto	l1242
  2459   002028                     l3393:
  2460                           
  2461                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2462   002028  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2463   00202C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2464   002030  CFDE FFF6          	movff	postinc2,tblptrl
  2465   002034  CFDD FFF7          	movff	postdec2,tblptrh
  2466   002038                     	if	0	;tblptru may be non-zero
  2467   002038                     	endif
  2468   002038                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2469   002038  0E00               	movlw	low (__mediumconst shr (0+16))
  2470   00203A  6EF8               	movwf	tblptru,c
  2471   00203C                     	endif
  2472   00203C  0008               	tblrd		*
  2473   00203E  50F5               	movf	tablat,w,c
  2474   002040  6E05               	movwf	fputc@c^0,c
  2475   002042  6A06               	clrf	(fputc@c+1)^0,c
  2476   002044  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2477   002048  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2478   00204C  EC28  F011         	call	_fputc	;wreg free
  2479   002050  EF0B  F010         	goto	l3389
  2480   002054                     l1242:
  2481   002054  0012               	return		;funcret
  2482   002056                     __end_of_vfpfcnvrt:
  2483                           	callstack 0
  2484                           
  2485 ;; *************** function _dtoa *****************
  2486 ;; Defined at:
  2487 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2490 ;;		 -> sprintf@f(11), 
  2491 ;;  d               8   33[COMRAM] long long 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  n               8   55[COMRAM] long long 
  2494 ;;  i               2   64[COMRAM] int 
  2495 ;;  w               2   53[COMRAM] int 
  2496 ;;  p               2   51[COMRAM] int 
  2497 ;;  s               1   63[COMRAM] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2507 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2508 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2510 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;Total ram usage:       35 bytes
  2512 ;; Hardware stack levels used: 1
  2513 ;; Hardware stack levels required when called: 8
  2514 ;; This function calls:
  2515 ;;		___aodiv
  2516 ;;		___aomod
  2517 ;;		_abs
  2518 ;;		_pad
  2519 ;; This function is called by:
  2520 ;;		_vfpfcnvrt
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text10
  2525   001414                     __ptext10:
  2526                           	callstack 0
  2527   001414                     _dtoa:
  2528                           	callstack 19
  2529   001414                     
  2530                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2531   001414  C022  F038         	movff	dtoa@d,dtoa@n
  2532   001418  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2533   00141C  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2534   001420  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2535   001424  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2536   001428  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2537   00142C  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2538   001430  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2539   001434                     
  2540                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2541   001434  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2542   001436  EF1F  F00A         	goto	u1781
  2543   00143A  EF22  F00A         	goto	u1780
  2544   00143E                     u1781:
  2545   00143E  0E01               	movlw	1
  2546   001440  EF23  F00A         	goto	u1790
  2547   001444                     u1780:
  2548   001444  0E00               	movlw	0
  2549   001446                     u1790:
  2550   001446  6E40               	movwf	dtoa@s^0,c
  2551   001448                     
  2552                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2553   001448  5040               	movf	dtoa@s^0,w,c
  2554   00144A  B4D8               	btfsc	status,2,c
  2555   00144C  EF2A  F00A         	goto	u1801
  2556   001450  EF2C  F00A         	goto	u1800
  2557   001454                     u1801:
  2558   001454  EF3C  F00A         	goto	l3325
  2559   001458                     u1800:
  2560   001458                     
  2561                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2562   001458  1E3F               	comf	(dtoa@n+7)^0,f,c
  2563   00145A  1E3E               	comf	(dtoa@n+6)^0,f,c
  2564   00145C  1E3D               	comf	(dtoa@n+5)^0,f,c
  2565   00145E  1E3C               	comf	(dtoa@n+4)^0,f,c
  2566   001460  1E3B               	comf	(dtoa@n+3)^0,f,c
  2567   001462  1E3A               	comf	(dtoa@n+2)^0,f,c
  2568   001464  1E39               	comf	(dtoa@n+1)^0,f,c
  2569   001466  6C38               	negf	dtoa@n^0,c
  2570   001468  0E00               	movlw	0
  2571   00146A  2239               	addwfc	(dtoa@n+1)^0,f,c
  2572   00146C  223A               	addwfc	(dtoa@n+2)^0,f,c
  2573   00146E  223B               	addwfc	(dtoa@n+3)^0,f,c
  2574   001470  223C               	addwfc	(dtoa@n+4)^0,f,c
  2575   001472  223D               	addwfc	(dtoa@n+5)^0,f,c
  2576   001474  223E               	addwfc	(dtoa@n+6)^0,f,c
  2577   001476  223F               	addwfc	(dtoa@n+7)^0,f,c
  2578   001478                     l3325:
  2579                           
  2580                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2581   001478  0100               	movlb	0	; () banked
  2582   00147A  BFEF               	btfsc	(_prec+1)& (0+255),7,b
  2583   00147C  EF4A  F00A         	goto	u1810
  2584   001480  51EF               	movf	(_prec+1)& (0+255),w,b
  2585   001482  E106               	bnz	u1811
  2586   001484  05EE               	decf	_prec& (0+255),w,b
  2587   001486  B0D8               	btfsc	status,0,c
  2588   001488  EF48  F00A         	goto	u1811
  2589   00148C  EF4A  F00A         	goto	u1810
  2590   001490                     u1811:
  2591   001490  EF50  F00A         	goto	l1221
  2592   001494                     u1810:
  2593   001494                     
  2594                           ; BSR set to: 0
  2595   001494  0E00               	movlw	0
  2596   001496  6E35               	movwf	(dtoa@p+1)^0,c
  2597   001498  0E01               	movlw	1
  2598   00149A  6E34               	movwf	dtoa@p^0,c
  2599   00149C  EF54  F00A         	goto	l1223
  2600   0014A0                     l1221:
  2601                           
  2602                           ; BSR set to: 0
  2603   0014A0  C0EE  F034         	movff	_prec,dtoa@p
  2604   0014A4  C0EF  F035         	movff	_prec+1,dtoa@p+1
  2605   0014A8                     l1223:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2609   0014A8  C0EC  F036         	movff	_width,dtoa@w
  2610   0014AC  C0ED  F037         	movff	_width+1,dtoa@w+1
  2611   0014B0                     
  2612                           ; BSR set to: 0
  2613                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2614   0014B0  5040               	movf	dtoa@s^0,w,c
  2615   0014B2  B4D8               	btfsc	status,2,c
  2616   0014B4  EF5E  F00A         	goto	u1821
  2617   0014B8  EF60  F00A         	goto	u1820
  2618   0014BC                     u1821:
  2619   0014BC  EF77  F00A         	goto	l1224
  2620   0014C0                     u1820:
  2621   0014C0                     
  2622                           ; BSR set to: 0
  2623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2624   0014C0  0636               	decf	dtoa@w^0,f,c
  2625   0014C2  A0D8               	btfss	status,0,c
  2626   0014C4  0637               	decf	(dtoa@w+1)^0,f,c
  2627   0014C6                     
  2628                           ; BSR set to: 0
  2629                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2630   0014C6  5040               	movf	dtoa@s^0,w,c
  2631   0014C8  A4D8               	btfss	status,2,c
  2632   0014CA  EF69  F00A         	goto	u1831
  2633   0014CE  EF6B  F00A         	goto	u1830
  2634   0014D2                     u1831:
  2635   0014D2  EF71  F00A         	goto	l3337
  2636   0014D6                     u1830:
  2637   0014D6                     
  2638                           ; BSR set to: 0
  2639   0014D6  0E00               	movlw	0
  2640   0014D8  6E33               	movwf	(_dtoa$2581+1)^0,c
  2641   0014DA  0E2B               	movlw	43
  2642   0014DC  6E32               	movwf	_dtoa$2581^0,c
  2643   0014DE  EF75  F00A         	goto	l3339
  2644   0014E2                     l3337:
  2645                           
  2646                           ; BSR set to: 0
  2647   0014E2  0E00               	movlw	0
  2648   0014E4  6E33               	movwf	(_dtoa$2581+1)^0,c
  2649   0014E6  0E2D               	movlw	45
  2650   0014E8  6E32               	movwf	_dtoa$2581^0,c
  2651   0014EA                     l3339:
  2652                           
  2653                           ; BSR set to: 0
  2654   0014EA  C032  F040         	movff	_dtoa$2581,dtoa@s
  2655   0014EE                     l1224:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2659   0014EE  0E00               	movlw	0
  2660   0014F0  6E42               	movwf	(dtoa@i+1)^0,c
  2661   0014F2  0E1F               	movlw	31
  2662   0014F4  6E41               	movwf	dtoa@i^0,c
  2663   0014F6                     
  2664                           ; BSR set to: 0
  2665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2666   0014F6  0E00               	movlw	0
  2667   0014F8  0102               	movlb	2	; () banked
  2668   0014FA  6F5B               	movwf	(_dbuf+31)& (0+255),b
  2669                           
  2670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2671   0014FC  EFFC  F00A         	goto	l3353
  2672   001500                     l3343:
  2673                           
  2674                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2675   001500  0641               	decf	dtoa@i^0,f,c
  2676   001502  A0D8               	btfss	status,0,c
  2677   001504  0642               	decf	(dtoa@i+1)^0,f,c
  2678   001506                     
  2679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2680   001506  0E3C               	movlw	low _dbuf
  2681   001508  2441               	addwf	dtoa@i^0,w,c
  2682   00150A  6ED9               	movwf	fsr2l,c
  2683   00150C  0E02               	movlw	high _dbuf
  2684   00150E  2042               	addwfc	(dtoa@i+1)^0,w,c
  2685   001510  6EDA               	movwf	fsr2h,c
  2686   001512  C038  F005         	movff	dtoa@n,___aomod@dividend
  2687   001516  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2688   00151A  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2689   00151E  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2690   001522  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2691   001526  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2692   00152A  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2693   00152E  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2694   001532  0E0A               	movlw	10
  2695   001534  6E0D               	movwf	___aomod@divisor^0,c
  2696   001536  0E00               	movlw	0
  2697   001538  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2698   00153A  0E00               	movlw	0
  2699   00153C  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2700   00153E  0E00               	movlw	0
  2701   001540  6E10               	movwf	(___aomod@divisor+3)^0,c
  2702   001542  0E00               	movlw	0
  2703   001544  6E11               	movwf	(___aomod@divisor+4)^0,c
  2704   001546  0E00               	movlw	0
  2705   001548  6E12               	movwf	(___aomod@divisor+5)^0,c
  2706   00154A  0E00               	movlw	0
  2707   00154C  6E13               	movwf	(___aomod@divisor+6)^0,c
  2708   00154E  0E00               	movlw	0
  2709   001550  6E14               	movwf	(___aomod@divisor+7)^0,c
  2710   001552  ECCA  F00E         	call	___aomod	;wreg free
  2711   001556  C005  F02A         	movff	?___aomod,??_dtoa
  2712   00155A  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2713   00155E  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2714   001562  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2715   001566  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2716   00156A  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2717   00156E  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2718   001572  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2719   001576  C02A  F017         	movff	??_dtoa,abs@a
  2720   00157A  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2721   00157E  EC29  F015         	call	_abs	;wreg free
  2722   001582  5017               	movf	?_abs^0,w,c
  2723   001584  0F30               	addlw	48
  2724   001586  6EDF               	movwf	indf2,c
  2725   001588                     
  2726                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2727   001588  0634               	decf	dtoa@p^0,f,c
  2728   00158A  A0D8               	btfss	status,0,c
  2729   00158C  0635               	decf	(dtoa@p+1)^0,f,c
  2730   00158E                     
  2731                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2732   00158E  0636               	decf	dtoa@w^0,f,c
  2733   001590  A0D8               	btfss	status,0,c
  2734   001592  0637               	decf	(dtoa@w+1)^0,f,c
  2735   001594                     
  2736                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2737   001594  C038  F005         	movff	dtoa@n,___aodiv@dividend
  2738   001598  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  2739   00159C  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  2740   0015A0  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  2741   0015A4  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  2742   0015A8  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  2743   0015AC  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  2744   0015B0  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  2745   0015B4  0E0A               	movlw	10
  2746   0015B6  6E0D               	movwf	___aodiv@divisor^0,c
  2747   0015B8  0E00               	movlw	0
  2748   0015BA  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  2749   0015BC  0E00               	movlw	0
  2750   0015BE  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  2751   0015C0  0E00               	movlw	0
  2752   0015C2  6E10               	movwf	(___aodiv@divisor+3)^0,c
  2753   0015C4  0E00               	movlw	0
  2754   0015C6  6E11               	movwf	(___aodiv@divisor+4)^0,c
  2755   0015C8  0E00               	movlw	0
  2756   0015CA  6E12               	movwf	(___aodiv@divisor+5)^0,c
  2757   0015CC  0E00               	movlw	0
  2758   0015CE  6E13               	movwf	(___aodiv@divisor+6)^0,c
  2759   0015D0  0E00               	movlw	0
  2760   0015D2  6E14               	movwf	(___aodiv@divisor+7)^0,c
  2761   0015D4  EC50  F00D         	call	___aodiv	;wreg free
  2762   0015D8  C005  F038         	movff	?___aodiv,dtoa@n
  2763   0015DC  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  2764   0015E0  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  2765   0015E4  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  2766   0015E8  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  2767   0015EC  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  2768   0015F0  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  2769   0015F4  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  2770   0015F8                     l3353:
  2771                           
  2772                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2773   0015F8  BE42               	btfsc	(dtoa@i+1)^0,7,c
  2774   0015FA  EF07  F00B         	goto	u1841
  2775   0015FE  5042               	movf	(dtoa@i+1)^0,w,c
  2776   001600  E108               	bnz	u1840
  2777   001602  0441               	decf	dtoa@i^0,w,c
  2778   001604  A0D8               	btfss	status,0,c
  2779   001606  EF07  F00B         	goto	u1841
  2780   00160A  EF09  F00B         	goto	u1840
  2781   00160E                     u1841:
  2782   00160E  EF25  F00B         	goto	l3359
  2783   001612                     u1840:
  2784   001612  5038               	movf	dtoa@n^0,w,c
  2785   001614  1039               	iorwf	(dtoa@n+1)^0,w,c
  2786   001616  103A               	iorwf	(dtoa@n+2)^0,w,c
  2787   001618  103B               	iorwf	(dtoa@n+3)^0,w,c
  2788   00161A  103C               	iorwf	(dtoa@n+4)^0,w,c
  2789   00161C  103D               	iorwf	(dtoa@n+5)^0,w,c
  2790   00161E  103E               	iorwf	(dtoa@n+6)^0,w,c
  2791   001620  103F               	iorwf	(dtoa@n+7)^0,w,c
  2792   001622  A4D8               	btfss	status,2,c
  2793   001624  EF16  F00B         	goto	u1851
  2794   001628  EF18  F00B         	goto	u1850
  2795   00162C                     u1851:
  2796   00162C  EF80  F00A         	goto	l3343
  2797   001630                     u1850:
  2798   001630  BE35               	btfsc	(dtoa@p+1)^0,7,c
  2799   001632  EF25  F00B         	goto	u1860
  2800   001636  5035               	movf	(dtoa@p+1)^0,w,c
  2801   001638  E106               	bnz	u1861
  2802   00163A  0434               	decf	dtoa@p^0,w,c
  2803   00163C  B0D8               	btfsc	status,0,c
  2804   00163E  EF23  F00B         	goto	u1861
  2805   001642  EF25  F00B         	goto	u1860
  2806   001646                     u1861:
  2807   001646  EF80  F00A         	goto	l3343
  2808   00164A                     u1860:
  2809   00164A                     l3359:
  2810                           
  2811                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2812   00164A  5040               	movf	dtoa@s^0,w,c
  2813   00164C  B4D8               	btfsc	status,2,c
  2814   00164E  EF2B  F00B         	goto	u1871
  2815   001652  EF2D  F00B         	goto	u1870
  2816   001656                     u1871:
  2817   001656  EF38  F00B         	goto	l3365
  2818   00165A                     u1870:
  2819   00165A                     
  2820                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2821   00165A  0641               	decf	dtoa@i^0,f,c
  2822   00165C  A0D8               	btfss	status,0,c
  2823   00165E  0642               	decf	(dtoa@i+1)^0,f,c
  2824   001660                     
  2825                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2826   001660  0E3C               	movlw	low _dbuf
  2827   001662  2441               	addwf	dtoa@i^0,w,c
  2828   001664  6ED9               	movwf	fsr2l,c
  2829   001666  0E02               	movlw	high _dbuf
  2830   001668  2042               	addwfc	(dtoa@i+1)^0,w,c
  2831   00166A  6EDA               	movwf	fsr2h,c
  2832   00166C  C040  FFDF         	movff	dtoa@s,indf2
  2833   001670                     l3365:
  2834                           
  2835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2836   001670  C020  F015         	movff	dtoa@fp,pad@fp
  2837   001674  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  2838   001678  0E3C               	movlw	low _dbuf
  2839   00167A  2441               	addwf	dtoa@i^0,w,c
  2840   00167C  6E17               	movwf	pad@buf^0,c
  2841   00167E  0E02               	movlw	high _dbuf
  2842   001680  2042               	addwfc	(dtoa@i+1)^0,w,c
  2843   001682  6E18               	movwf	(pad@buf+1)^0,c
  2844   001684  C036  F019         	movff	dtoa@w,pad@p
  2845   001688  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2846   00168C  EC48  F013         	call	_pad	;wreg free
  2847   001690  0012               	return		;funcret
  2848   001692                     __end_of_dtoa:
  2849                           	callstack 0
  2850                           
  2851 ;; *************** function _pad *****************
  2852 ;; Defined at:
  2853 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2856 ;;		 -> sprintf@f(11), 
  2857 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2858 ;;		 -> dbuf(32), 
  2859 ;;  p               2   24[COMRAM] int 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  w               2   29[COMRAM] int 
  2862 ;;  i               2   27[COMRAM] int 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2872 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2873 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2875 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2876 ;;Total ram usage:       11 bytes
  2877 ;; Hardware stack levels used: 1
  2878 ;; Hardware stack levels required when called: 7
  2879 ;; This function calls:
  2880 ;;		_fputc
  2881 ;;		_fputs
  2882 ;; This function is called by:
  2883 ;;		_dtoa
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text11
  2888   002690                     __ptext11:
  2889                           	callstack 0
  2890   002690                     _pad:
  2891                           	callstack 19
  2892   002690                     
  2893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2894   002690  BE1A               	btfsc	(pad@p+1)^0,7,c
  2895   002692  EF4D  F013         	goto	u1761
  2896   002696  EF4F  F013         	goto	u1760
  2897   00269A                     u1761:
  2898   00269A  EF55  F013         	goto	l3307
  2899   00269E                     u1760:
  2900   00269E  C019  F01E         	movff	pad@p,pad@w
  2901   0026A2  C01A  F01F         	movff	pad@p+1,pad@w+1
  2902   0026A6  EF59  F013         	goto	l1212
  2903   0026AA                     l3307:
  2904   0026AA  0E00               	movlw	0
  2905   0026AC  6E1F               	movwf	(pad@w+1)^0,c
  2906   0026AE  0E00               	movlw	0
  2907   0026B0  6E1E               	movwf	pad@w^0,c
  2908   0026B2                     l1212:
  2909                           
  2910                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2911   0026B2  0E00               	movlw	0
  2912   0026B4  6E1D               	movwf	(pad@i+1)^0,c
  2913   0026B6  0E00               	movlw	0
  2914   0026B8  6E1C               	movwf	pad@i^0,c
  2915                           
  2916                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2917   0026BA  EF6B  F013         	goto	l3313
  2918   0026BE                     l3309:
  2919                           
  2920                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  2921   0026BE  0E00               	movlw	0
  2922   0026C0  6E06               	movwf	(fputc@c+1)^0,c
  2923   0026C2  0E20               	movlw	32
  2924   0026C4  6E05               	movwf	fputc@c^0,c
  2925   0026C6  C015  F007         	movff	pad@fp,fputc@fp
  2926   0026CA  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2927   0026CE  EC28  F011         	call	_fputc	;wreg free
  2928   0026D2                     
  2929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  2930   0026D2  4A1C               	infsnz	pad@i^0,f,c
  2931   0026D4  2A1D               	incf	(pad@i+1)^0,f,c
  2932   0026D6                     l3313:
  2933                           
  2934                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2935   0026D6  501E               	movf	pad@w^0,w,c
  2936   0026D8  5C1C               	subwf	pad@i^0,w,c
  2937   0026DA  501D               	movf	(pad@i+1)^0,w,c
  2938   0026DC  0A80               	xorlw	128
  2939   0026DE  6E1B               	movwf	??_pad^0,c
  2940   0026E0  501F               	movf	(pad@w+1)^0,w,c
  2941   0026E2  0A80               	xorlw	128
  2942   0026E4  581B               	subwfb	??_pad^0,w,c
  2943   0026E6  A0D8               	btfss	status,0,c
  2944   0026E8  EF78  F013         	goto	u1771
  2945   0026EC  EF7A  F013         	goto	u1770
  2946   0026F0                     u1771:
  2947   0026F0  EF5F  F013         	goto	l3309
  2948   0026F4                     u1770:
  2949   0026F4                     
  2950                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  2951   0026F4  C017  F00E         	movff	pad@buf,fputs@s
  2952   0026F8  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2953   0026FC  C015  F010         	movff	pad@fp,fputs@fp
  2954   002700  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2955   002704  ECE6  F014         	call	_fputs	;wreg free
  2956   002708  0012               	return		;funcret
  2957   00270A                     __end_of_pad:
  2958                           	callstack 0
  2959                           
  2960 ;; *************** function _fputs *****************
  2961 ;; Defined at:
  2962 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2965 ;;		 -> dbuf(32), 
  2966 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2967 ;;		 -> sprintf@f(11), 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  i               2   18[COMRAM] int 
  2970 ;;  c               1   17[COMRAM] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  2   13[COMRAM] int 
  2973 ;; Registers used:
  2974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2983 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2984 ;;Total ram usage:        7 bytes
  2985 ;; Hardware stack levels used: 1
  2986 ;; Hardware stack levels required when called: 6
  2987 ;; This function calls:
  2988 ;;		_fputc
  2989 ;; This function is called by:
  2990 ;;		_pad
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text12
  2995   0029CC                     __ptext12:
  2996                           	callstack 0
  2997   0029CC                     _fputs:
  2998                           	callstack 19
  2999   0029CC  0E00               	movlw	0
  3000   0029CE  6E14               	movwf	(fputs@i+1)^0,c
  3001   0029D0  0E00               	movlw	0
  3002   0029D2  6E13               	movwf	fputs@i^0,c
  3003   0029D4  EFF7  F014         	goto	l3217
  3004   0029D8                     l3213:
  3005   0029D8  C012  F005         	movff	fputs@c,fputc@c
  3006   0029DC  6A06               	clrf	(fputc@c+1)^0,c
  3007   0029DE  C010  F007         	movff	fputs@fp,fputc@fp
  3008   0029E2  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3009   0029E6  EC28  F011         	call	_fputc	;wreg free
  3010   0029EA  4A13               	infsnz	fputs@i^0,f,c
  3011   0029EC  2A14               	incf	(fputs@i+1)^0,f,c
  3012   0029EE                     l3217:
  3013   0029EE  5013               	movf	fputs@i^0,w,c
  3014   0029F0  240E               	addwf	fputs@s^0,w,c
  3015   0029F2  6ED9               	movwf	fsr2l,c
  3016   0029F4  5014               	movf	(fputs@i+1)^0,w,c
  3017   0029F6  200F               	addwfc	(fputs@s+1)^0,w,c
  3018   0029F8  6EDA               	movwf	fsr2h,c
  3019   0029FA  50DF               	movf	indf2,w,c
  3020   0029FC  6E12               	movwf	fputs@c^0,c
  3021   0029FE  5012               	movf	fputs@c^0,w,c
  3022   002A00  A4D8               	btfss	status,2,c
  3023   002A02  EF05  F015         	goto	u1611
  3024   002A06  EF07  F015         	goto	u1610
  3025   002A0A                     u1611:
  3026   002A0A  EFEC  F014         	goto	l3213
  3027   002A0E                     u1610:
  3028   002A0E  0012               	return		;funcret
  3029   002A10                     __end_of_fputs:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function _fputc *****************
  3033 ;; Defined at:
  3034 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  c               2    4[COMRAM] int 
  3037 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3038 ;;		 -> sprintf@f(11), 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2    4[COMRAM] int 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3053 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3054 ;;Total ram usage:        9 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 5
  3057 ;; This function calls:
  3058 ;;		_putch
  3059 ;; This function is called by:
  3060 ;;		_pad
  3061 ;;		_vfpfcnvrt
  3062 ;;		_fputs
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text13
  3067   002250                     __ptext13:
  3068                           	callstack 0
  3069   002250                     _fputc:
  3070                           	callstack 22
  3071   002250  5007               	movf	fputc@fp^0,w,c
  3072   002252  1008               	iorwf	(fputc@fp+1)^0,w,c
  3073   002254  B4D8               	btfsc	status,2,c
  3074   002256  EF2F  F011         	goto	u1571
  3075   00225A  EF31  F011         	goto	u1570
  3076   00225E                     u1571:
  3077   00225E  EF3A  F011         	goto	l3201
  3078   002262                     u1570:
  3079   002262  5007               	movf	fputc@fp^0,w,c
  3080   002264  1008               	iorwf	(fputc@fp+1)^0,w,c
  3081   002266  A4D8               	btfss	status,2,c
  3082   002268  EF38  F011         	goto	u1581
  3083   00226C  EF3A  F011         	goto	u1580
  3084   002270                     u1581:
  3085   002270  EF3F  F011         	goto	l3203
  3086   002274                     u1580:
  3087   002274                     l3201:
  3088   002274  5005               	movf	fputc@c^0,w,c
  3089   002276  EC7F  F016         	call	_putch
  3090   00227A  EF8C  F011         	goto	l1260
  3091   00227E                     l3203:
  3092   00227E  EE20 F009          	lfsr	2,9
  3093   002282  5007               	movf	fputc@fp^0,w,c
  3094   002284  26D9               	addwf	fsr2l,f,c
  3095   002286  5008               	movf	(fputc@fp+1)^0,w,c
  3096   002288  22DA               	addwfc	fsr2h,f,c
  3097   00228A  50DE               	movf	postinc2,w,c
  3098   00228C  10DE               	iorwf	postinc2,w,c
  3099   00228E  B4D8               	btfsc	status,2,c
  3100   002290  EF4C  F011         	goto	u1591
  3101   002294  EF4E  F011         	goto	u1590
  3102   002298                     u1591:
  3103   002298  EF69  F011         	goto	l3207
  3104   00229C                     u1590:
  3105   00229C  EE20 F009          	lfsr	2,9
  3106   0022A0  5007               	movf	fputc@fp^0,w,c
  3107   0022A2  26D9               	addwf	fsr2l,f,c
  3108   0022A4  5008               	movf	(fputc@fp+1)^0,w,c
  3109   0022A6  22DA               	addwfc	fsr2h,f,c
  3110   0022A8  EE10 F003          	lfsr	1,3
  3111   0022AC  5007               	movf	fputc@fp^0,w,c
  3112   0022AE  26E1               	addwf	fsr1l,f,c
  3113   0022B0  5008               	movf	(fputc@fp+1)^0,w,c
  3114   0022B2  22E2               	addwfc	fsr1h,f,c
  3115   0022B4  50DE               	movf	postinc2,w,c
  3116   0022B6  5CE6               	subwf	postinc1,w,c
  3117   0022B8  50E6               	movf	postinc1,w,c
  3118   0022BA  0A80               	xorlw	128
  3119   0022BC  6E0D               	movwf	(??_fputc+4)^0,c
  3120   0022BE  50DE               	movf	postinc2,w,c
  3121   0022C0  0A80               	xorlw	128
  3122   0022C2  580D               	subwfb	(??_fputc+4)^0,w,c
  3123   0022C4  B0D8               	btfsc	status,0,c
  3124   0022C6  EF67  F011         	goto	u1601
  3125   0022CA  EF69  F011         	goto	u1600
  3126   0022CE                     u1601:
  3127   0022CE  EF8C  F011         	goto	l1260
  3128   0022D2                     u1600:
  3129   0022D2                     l3207:
  3130   0022D2  EE20 F003          	lfsr	2,3
  3131   0022D6  5007               	movf	fputc@fp^0,w,c
  3132   0022D8  26D9               	addwf	fsr2l,f,c
  3133   0022DA  5008               	movf	(fputc@fp+1)^0,w,c
  3134   0022DC  22DA               	addwfc	fsr2h,f,c
  3135   0022DE  CFDE F009          	movff	postinc2,??_fputc
  3136   0022E2  CFDD F00A          	movff	postdec2,??_fputc+1
  3137   0022E6  C007  FFD9         	movff	fputc@fp,fsr2l
  3138   0022EA  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3139   0022EE  CFDE F00B          	movff	postinc2,??_fputc+2
  3140   0022F2  CFDD F00C          	movff	postdec2,??_fputc+3
  3141   0022F6  5009               	movf	??_fputc^0,w,c
  3142   0022F8  240B               	addwf	(??_fputc+2)^0,w,c
  3143   0022FA  6ED9               	movwf	fsr2l,c
  3144   0022FC  500A               	movf	(??_fputc+1)^0,w,c
  3145   0022FE  200C               	addwfc	(??_fputc+3)^0,w,c
  3146   002300  6EDA               	movwf	fsr2h,c
  3147   002302  C005  FFDF         	movff	fputc@c,indf2
  3148   002306  EE20 F003          	lfsr	2,3
  3149   00230A  5007               	movf	fputc@fp^0,w,c
  3150   00230C  26D9               	addwf	fsr2l,f,c
  3151   00230E  5008               	movf	(fputc@fp+1)^0,w,c
  3152   002310  22DA               	addwfc	fsr2h,f,c
  3153   002312  2ADE               	incf	postinc2,f,c
  3154   002314  0E00               	movlw	0
  3155   002316  22DD               	addwfc	postdec2,f,c
  3156   002318                     l1260:
  3157   002318  0012               	return		;funcret
  3158   00231A                     __end_of_fputc:
  3159                           	callstack 0
  3160                           
  3161 ;; *************** function _putch *****************
  3162 ;; Defined at:
  3163 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  c               1    wreg     unsigned char 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  c               1    0[COMRAM] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;Total ram usage:        0 bytes
  3182 ;; Hardware stack levels used: 1
  3183 ;; Hardware stack levels required when called: 4
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_fputc
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text14
  3192   002CFE                     __ptext14:
  3193                           	callstack 0
  3194   002CFE                     _putch:
  3195                           	callstack 22
  3196   002CFE  0012               	return		;funcret
  3197   002D00                     __end_of_putch:
  3198                           	callstack 0
  3199                           
  3200 ;; *************** function ___aomod *****************
  3201 ;; Defined at:
  3202 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  dividend        8    4[COMRAM] long long 
  3205 ;;  divisor         8   12[COMRAM] long long 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  sign            1   21[COMRAM] unsigned char 
  3208 ;;  counter         1   20[COMRAM] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  8    4[COMRAM] long long 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3218 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3221 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3222 ;;Total ram usage:       18 bytes
  3223 ;; Hardware stack levels used: 1
  3224 ;; Hardware stack levels required when called: 4
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_dtoa
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text15
  3233   001D94                     __ptext15:
  3234                           	callstack 0
  3235   001D94                     ___aomod:
  3236                           	callstack 22
  3237   001D94  0E00               	movlw	0
  3238   001D96  6E16               	movwf	___aomod@sign^0,c
  3239   001D98  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3240   001D9A  EFD3  F00E         	goto	u1700
  3241   001D9E  EFD1  F00E         	goto	u1701
  3242   001DA2                     u1701:
  3243   001DA2  EFE5  F00E         	goto	l3275
  3244   001DA6                     u1700:
  3245   001DA6  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3246   001DA8  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3247   001DAA  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3248   001DAC  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3249   001DAE  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3250   001DB0  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3251   001DB2  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3252   001DB4  6C05               	negf	___aomod@dividend^0,c
  3253   001DB6  0E00               	movlw	0
  3254   001DB8  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3255   001DBA  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3256   001DBC  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3257   001DBE  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3258   001DC0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3259   001DC2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3260   001DC4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3261   001DC6  0E01               	movlw	1
  3262   001DC8  6E16               	movwf	___aomod@sign^0,c
  3263   001DCA                     l3275:
  3264   001DCA  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3265   001DCC  EFEC  F00E         	goto	u1710
  3266   001DD0  EFEA  F00E         	goto	u1711
  3267   001DD4                     u1711:
  3268   001DD4  EFFC  F00E         	goto	l3279
  3269   001DD8                     u1710:
  3270   001DD8  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3271   001DDA  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3272   001DDC  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3273   001DDE  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3274   001DE0  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3275   001DE2  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3276   001DE4  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3277   001DE6  6C0D               	negf	___aomod@divisor^0,c
  3278   001DE8  0E00               	movlw	0
  3279   001DEA  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3280   001DEC  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3281   001DEE  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3282   001DF0  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3283   001DF2  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3284   001DF4  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3285   001DF6  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3286   001DF8                     l3279:
  3287   001DF8  500D               	movf	___aomod@divisor^0,w,c
  3288   001DFA  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3289   001DFC  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3290   001DFE  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3291   001E00  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3292   001E02  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3293   001E04  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3294   001E06  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3295   001E08  B4D8               	btfsc	status,2,c
  3296   001E0A  EF09  F00F         	goto	u1721
  3297   001E0E  EF0B  F00F         	goto	u1720
  3298   001E12                     u1721:
  3299   001E12  EF53  F00F         	goto	l3295
  3300   001E16                     u1720:
  3301   001E16  0E01               	movlw	1
  3302   001E18  6E15               	movwf	___aomod@counter^0,c
  3303   001E1A  EF19  F00F         	goto	l3285
  3304   001E1E                     l3283:
  3305   001E1E  90D8               	bcf	status,0,c
  3306   001E20  360D               	rlcf	___aomod@divisor^0,f,c
  3307   001E22  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3308   001E24  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3309   001E26  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3310   001E28  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3311   001E2A  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3312   001E2C  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3313   001E2E  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3314   001E30  2A15               	incf	___aomod@counter^0,f,c
  3315   001E32                     l3285:
  3316   001E32  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3317   001E34  EF1E  F00F         	goto	u1731
  3318   001E38  EF20  F00F         	goto	u1730
  3319   001E3C                     u1731:
  3320   001E3C  EF0F  F00F         	goto	l3283
  3321   001E40                     u1730:
  3322   001E40                     l3287:
  3323   001E40  500D               	movf	___aomod@divisor^0,w,c
  3324   001E42  5C05               	subwf	___aomod@dividend^0,w,c
  3325   001E44  500E               	movf	(___aomod@divisor+1)^0,w,c
  3326   001E46  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3327   001E48  500F               	movf	(___aomod@divisor+2)^0,w,c
  3328   001E4A  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3329   001E4C  5010               	movf	(___aomod@divisor+3)^0,w,c
  3330   001E4E  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3331   001E50  5011               	movf	(___aomod@divisor+4)^0,w,c
  3332   001E52  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3333   001E54  5012               	movf	(___aomod@divisor+5)^0,w,c
  3334   001E56  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3335   001E58  5013               	movf	(___aomod@divisor+6)^0,w,c
  3336   001E5A  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3337   001E5C  5014               	movf	(___aomod@divisor+7)^0,w,c
  3338   001E5E  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3339   001E60  A0D8               	btfss	status,0,c
  3340   001E62  EF35  F00F         	goto	u1741
  3341   001E66  EF37  F00F         	goto	u1740
  3342   001E6A                     u1741:
  3343   001E6A  EF47  F00F         	goto	l3291
  3344   001E6E                     u1740:
  3345   001E6E  500D               	movf	___aomod@divisor^0,w,c
  3346   001E70  5E05               	subwf	___aomod@dividend^0,f,c
  3347   001E72  500E               	movf	(___aomod@divisor+1)^0,w,c
  3348   001E74  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3349   001E76  500F               	movf	(___aomod@divisor+2)^0,w,c
  3350   001E78  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3351   001E7A  5010               	movf	(___aomod@divisor+3)^0,w,c
  3352   001E7C  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3353   001E7E  5011               	movf	(___aomod@divisor+4)^0,w,c
  3354   001E80  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3355   001E82  5012               	movf	(___aomod@divisor+5)^0,w,c
  3356   001E84  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3357   001E86  5013               	movf	(___aomod@divisor+6)^0,w,c
  3358   001E88  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3359   001E8A  5014               	movf	(___aomod@divisor+7)^0,w,c
  3360   001E8C  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3361   001E8E                     l3291:
  3362   001E8E  90D8               	bcf	status,0,c
  3363   001E90  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3364   001E92  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3365   001E94  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3366   001E96  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3367   001E98  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3368   001E9A  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3369   001E9C  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3370   001E9E  320D               	rrcf	___aomod@divisor^0,f,c
  3371   001EA0  2E15               	decfsz	___aomod@counter^0,f,c
  3372   001EA2  EF20  F00F         	goto	l3287
  3373   001EA6                     l3295:
  3374   001EA6  5016               	movf	___aomod@sign^0,w,c
  3375   001EA8  B4D8               	btfsc	status,2,c
  3376   001EAA  EF59  F00F         	goto	u1751
  3377   001EAE  EF5B  F00F         	goto	u1750
  3378   001EB2                     u1751:
  3379   001EB2  EF6B  F00F         	goto	l3299
  3380   001EB6                     u1750:
  3381   001EB6  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3382   001EB8  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3383   001EBA  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3384   001EBC  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3385   001EBE  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3386   001EC0  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3387   001EC2  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3388   001EC4  6C05               	negf	___aomod@dividend^0,c
  3389   001EC6  0E00               	movlw	0
  3390   001EC8  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3391   001ECA  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3392   001ECC  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3393   001ECE  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3394   001ED0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3395   001ED2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3396   001ED4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3397   001ED6                     l3299:
  3398   001ED6  C005  F005         	movff	___aomod@dividend,?___aomod
  3399   001EDA  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3400   001EDE  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3401   001EE2  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3402   001EE6  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3403   001EEA  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3404   001EEE  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3405   001EF2  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3406   001EF6  0012               	return		;funcret
  3407   001EF8                     __end_of___aomod:
  3408                           	callstack 0
  3409                           
  3410 ;; *************** function ___aodiv *****************
  3411 ;; Defined at:
  3412 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  dividend        8    4[COMRAM] long long 
  3415 ;;  divisor         8   12[COMRAM] long long 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  quotient        8   22[COMRAM] long long 
  3418 ;;  sign            1   21[COMRAM] unsigned char 
  3419 ;;  counter         1   20[COMRAM] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  8    4[COMRAM] long long 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3429 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3433 ;;Total ram usage:       26 bytes
  3434 ;; Hardware stack levels used: 1
  3435 ;; Hardware stack levels required when called: 4
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_dtoa
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text16
  3444   001AA0                     __ptext16:
  3445                           	callstack 0
  3446   001AA0                     ___aodiv:
  3447                           	callstack 22
  3448   001AA0  0E00               	movlw	0
  3449   001AA2  6E16               	movwf	___aodiv@sign^0,c
  3450   001AA4  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3451   001AA6  EF59  F00D         	goto	u1630
  3452   001AAA  EF57  F00D         	goto	u1631
  3453   001AAE                     u1631:
  3454   001AAE  EF6B  F00D         	goto	l3231
  3455   001AB2                     u1630:
  3456   001AB2  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3457   001AB4  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3458   001AB6  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3459   001AB8  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3460   001ABA  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3461   001ABC  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3462   001ABE  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3463   001AC0  6C0D               	negf	___aodiv@divisor^0,c
  3464   001AC2  0E00               	movlw	0
  3465   001AC4  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3466   001AC6  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3467   001AC8  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3468   001ACA  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3469   001ACC  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3470   001ACE  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3471   001AD0  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3472   001AD2  0E01               	movlw	1
  3473   001AD4  6E16               	movwf	___aodiv@sign^0,c
  3474   001AD6                     l3231:
  3475   001AD6  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3476   001AD8  EF72  F00D         	goto	u1640
  3477   001ADC  EF70  F00D         	goto	u1641
  3478   001AE0                     u1641:
  3479   001AE0  EF84  F00D         	goto	l3237
  3480   001AE4                     u1640:
  3481   001AE4  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3482   001AE6  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3483   001AE8  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3484   001AEA  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3485   001AEC  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3486   001AEE  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3487   001AF0  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3488   001AF2  6C05               	negf	___aodiv@dividend^0,c
  3489   001AF4  0E00               	movlw	0
  3490   001AF6  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3491   001AF8  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3492   001AFA  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3493   001AFC  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3494   001AFE  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3495   001B00  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3496   001B02  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3497   001B04  0E01               	movlw	1
  3498   001B06  1A16               	xorwf	___aodiv@sign^0,f,c
  3499   001B08                     l3237:
  3500   001B08  EE20  F017         	lfsr	2,___aodiv@quotient
  3501   001B0C  0E07               	movlw	7
  3502   001B0E                     u1651:
  3503   001B0E  6ADE               	clrf	postinc2,c
  3504   001B10  06E8               	decf	wreg,f,c
  3505   001B12  E2FD               	bc	u1651
  3506   001B14  500D               	movf	___aodiv@divisor^0,w,c
  3507   001B16  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3508   001B18  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3509   001B1A  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3510   001B1C  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3511   001B1E  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3512   001B20  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3513   001B22  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3514   001B24  B4D8               	btfsc	status,2,c
  3515   001B26  EF97  F00D         	goto	u1661
  3516   001B2A  EF99  F00D         	goto	u1660
  3517   001B2E                     u1661:
  3518   001B2E  EFEB  F00D         	goto	l3259
  3519   001B32                     u1660:
  3520   001B32  0E01               	movlw	1
  3521   001B34  6E15               	movwf	___aodiv@counter^0,c
  3522   001B36  EFA7  F00D         	goto	l3245
  3523   001B3A                     l3243:
  3524   001B3A  90D8               	bcf	status,0,c
  3525   001B3C  360D               	rlcf	___aodiv@divisor^0,f,c
  3526   001B3E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3527   001B40  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3528   001B42  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3529   001B44  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3530   001B46  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3531   001B48  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3532   001B4A  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3533   001B4C  2A15               	incf	___aodiv@counter^0,f,c
  3534   001B4E                     l3245:
  3535   001B4E  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3536   001B50  EFAC  F00D         	goto	u1671
  3537   001B54  EFAE  F00D         	goto	u1670
  3538   001B58                     u1671:
  3539   001B58  EF9D  F00D         	goto	l3243
  3540   001B5C                     u1670:
  3541   001B5C                     l3247:
  3542   001B5C  90D8               	bcf	status,0,c
  3543   001B5E  3617               	rlcf	___aodiv@quotient^0,f,c
  3544   001B60  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3545   001B62  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3546   001B64  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3547   001B66  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3548   001B68  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3549   001B6A  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3550   001B6C  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3551   001B6E  500D               	movf	___aodiv@divisor^0,w,c
  3552   001B70  5C05               	subwf	___aodiv@dividend^0,w,c
  3553   001B72  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3554   001B74  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3555   001B76  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3556   001B78  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3557   001B7A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3558   001B7C  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3559   001B7E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3560   001B80  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3561   001B82  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3562   001B84  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3563   001B86  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3564   001B88  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3565   001B8A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3566   001B8C  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3567   001B8E  A0D8               	btfss	status,0,c
  3568   001B90  EFCC  F00D         	goto	u1681
  3569   001B94  EFCE  F00D         	goto	u1680
  3570   001B98                     u1681:
  3571   001B98  EFDF  F00D         	goto	l3255
  3572   001B9C                     u1680:
  3573   001B9C  500D               	movf	___aodiv@divisor^0,w,c
  3574   001B9E  5E05               	subwf	___aodiv@dividend^0,f,c
  3575   001BA0  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3576   001BA2  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3577   001BA4  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3578   001BA6  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3579   001BA8  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3580   001BAA  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3581   001BAC  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3582   001BAE  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3583   001BB0  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3584   001BB2  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3585   001BB4  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3586   001BB6  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3587   001BB8  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3588   001BBA  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3589   001BBC  8017               	bsf	___aodiv@quotient^0,0,c
  3590   001BBE                     l3255:
  3591   001BBE  90D8               	bcf	status,0,c
  3592   001BC0  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3593   001BC2  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3594   001BC4  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3595   001BC6  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3596   001BC8  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3597   001BCA  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3598   001BCC  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3599   001BCE  320D               	rrcf	___aodiv@divisor^0,f,c
  3600   001BD0  2E15               	decfsz	___aodiv@counter^0,f,c
  3601   001BD2  EFAE  F00D         	goto	l3247
  3602   001BD6                     l3259:
  3603   001BD6  5016               	movf	___aodiv@sign^0,w,c
  3604   001BD8  B4D8               	btfsc	status,2,c
  3605   001BDA  EFF1  F00D         	goto	u1691
  3606   001BDE  EFF3  F00D         	goto	u1690
  3607   001BE2                     u1691:
  3608   001BE2  EF03  F00E         	goto	l3263
  3609   001BE6                     u1690:
  3610   001BE6  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3611   001BE8  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3612   001BEA  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3613   001BEC  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3614   001BEE  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3615   001BF0  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3616   001BF2  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3617   001BF4  6C17               	negf	___aodiv@quotient^0,c
  3618   001BF6  0E00               	movlw	0
  3619   001BF8  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3620   001BFA  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3621   001BFC  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3622   001BFE  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3623   001C00  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3624   001C02  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3625   001C04  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3626   001C06                     l3263:
  3627   001C06  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3628   001C0A  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3629   001C0E  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3630   001C12  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3631   001C16  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3632   001C1A  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3633   001C1E  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3634   001C22  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3635   001C26  0012               	return		;funcret
  3636   001C28                     __end_of___aodiv:
  3637                           	callstack 0
  3638                           
  3639 ;; *************** function _sendStringSerial4 *****************
  3640 ;; Defined at:
  3641 ;;		line 39 in file "serial.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  string          2    5[COMRAM] PTR unsigned char 
  3644 ;;		 -> main@buf(150), 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;Total ram usage:        2 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 5
  3663 ;; This function calls:
  3664 ;;		_sendCharSerial4
  3665 ;; This function is called by:
  3666 ;;		_main
  3667 ;;		_card_response
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text17
  3672   002B04                     __ptext17:
  3673                           	callstack 0
  3674   002B04                     _sendStringSerial4:
  3675                           	callstack 25
  3676   002B04                     
  3677                           ;serial.c: 40:  while(*string != 0) {
  3678   002B04  EF8D  F015         	goto	l2735
  3679   002B08                     l2731:
  3680                           
  3681                           ;serial.c: 41:         sendCharSerial4(*string++);
  3682   002B08  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3683   002B0C  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3684   002B10  50DF               	movf	indf2,w,c
  3685   002B12  EC30  F016         	call	_sendCharSerial4
  3686   002B16  4A06               	infsnz	sendStringSerial4@string^0,f,c
  3687   002B18  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  3688   002B1A                     l2735:
  3689                           
  3690                           ;serial.c: 40:  while(*string != 0) {
  3691   002B1A  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3692   002B1E  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3693   002B22  50DF               	movf	indf2,w,c
  3694   002B24  A4D8               	btfss	status,2,c
  3695   002B26  EF97  F015         	goto	u1371
  3696   002B2A  EF99  F015         	goto	u1370
  3697   002B2E                     u1371:
  3698   002B2E  EF84  F015         	goto	l2731
  3699   002B32                     u1370:
  3700   002B32  0012               	return		;funcret
  3701   002B34                     __end_of_sendStringSerial4:
  3702                           	callstack 0
  3703                           
  3704 ;; *************** function _sendCharSerial4 *****************
  3705 ;; Defined at:
  3706 ;;		line 32 in file "serial.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  charToSend      1    wreg     unsigned char 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  charToSend      1    4[COMRAM] unsigned char 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3724 ;;Total ram usage:        1 bytes
  3725 ;; Hardware stack levels used: 1
  3726 ;; Hardware stack levels required when called: 4
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_sendStringSerial4
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text18
  3735   002C60                     __ptext18:
  3736                           	callstack 0
  3737   002C60                     _sendCharSerial4:
  3738                           	callstack 25
  3739                           
  3740                           ;incstack = 0
  3741                           ;sendCharSerial4@charToSend stored from wreg
  3742   002C60  6E05               	movwf	sendCharSerial4@charToSend^0,c
  3743   002C62                     l403:
  3744   002C62  010E               	movlb	14	; () banked
  3745   002C64  A537               	btfss	55,2,b	;volatile
  3746   002C66  EF37  F016         	goto	u1291
  3747   002C6A  EF39  F016         	goto	u1290
  3748   002C6E                     u1291:
  3749   002C6E  EF31  F016         	goto	l403
  3750   002C72                     u1290:
  3751   002C72                     
  3752                           ; BSR set to: 14
  3753                           ;serial.c: 34:     TX4REG = charToSend;
  3754   002C72  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3755   002C76                     
  3756                           ; BSR set to: 14
  3757   002C76  0012               	return		;funcret
  3758   002C78                     __end_of_sendCharSerial4:
  3759                           	callstack 0
  3760                           
  3761 ;; *************** function _normalise_readings *****************
  3762 ;; Defined at:
  3763 ;;		line 42 in file "colour_identify.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  buf             2   26[COMRAM] PTR unsigned char 
  3766 ;;		 -> main@buf(150), 
  3767 ;;  red_read        2   28[COMRAM] unsigned int 
  3768 ;;  green_read      2   30[COMRAM] unsigned int 
  3769 ;;  blue_read       2   32[COMRAM] unsigned int 
  3770 ;;  expected_val    2   34[COMRAM] PTR unsigned int [9]
  3771 ;;		 -> main@expected_values(54), 
  3772 ;;  normalised_v    2   36[COMRAM] PTR unsigned int [9]
  3773 ;;		 -> card_response@normalised_values(54), 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  difference      2   46[COMRAM] unsigned int 
  3776 ;;  i               1   48[COMRAM] enum E14551
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3786 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;Total ram usage:       23 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 5
  3793 ;; This function calls:
  3794 ;;		___lwdiv
  3795 ;;		___wmul
  3796 ;;		_abs
  3797 ;; This function is called by:
  3798 ;;		_card_response
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text19
  3803   001692                     __ptext19:
  3804                           	callstack 0
  3805   001692                     _normalise_readings:
  3806                           	callstack 24
  3807   001692                     
  3808                           ;colour_identify.c: 49:     for(colour i = RED; i<= BLACK; i++){
  3809   001692  0E00               	movlw	0
  3810   001694  6E31               	movwf	normalise_readings@i^0,c
  3811   001696                     l3427:
  3812                           
  3813                           ;colour_identify.c: 53:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3814   001696  5031               	movf	normalise_readings@i^0,w,c
  3815   001698  0D02               	mullw	2
  3816   00169A  CFF3 F027          	movff	prodl,??_normalise_readings
  3817   00169E  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3818   0016A2  5027               	movf	??_normalise_readings^0,w,c
  3819   0016A4  2423               	addwf	normalise_readings@expected_values^0,w,c
  3820   0016A6  6ED9               	movwf	fsr2l,c
  3821   0016A8  5028               	movf	(??_normalise_readings+1)^0,w,c
  3822   0016AA  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3823   0016AC  6EDA               	movwf	fsr2h,c
  3824   0016AE  CFDE F029          	movff	postinc2,??_normalise_readings+2
  3825   0016B2  CFDD F02A          	movff	postdec2,??_normalise_readings+3
  3826   0016B6  5029               	movf	(??_normalise_readings+2)^0,w,c
  3827   0016B8  5C1D               	subwf	normalise_readings@red_read^0,w,c
  3828   0016BA  6E17               	movwf	abs@a^0,c
  3829   0016BC  502A               	movf	(??_normalise_readings+3)^0,w,c
  3830   0016BE  581E               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3831   0016C0  6E18               	movwf	(abs@a+1)^0,c
  3832   0016C2  EC29  F015         	call	_abs	;wreg free
  3833   0016C6  C017  F02F         	movff	?_abs,normalise_readings@difference
  3834   0016CA  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3835                           
  3836                           ;colour_identify.c: 54:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3837   0016CE  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3838   0016D2  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3839   0016D6  0E00               	movlw	0
  3840   0016D8  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3841   0016DA  0E64               	movlw	100
  3842   0016DC  6E07               	movwf	___wmul@multiplicand^0,c
  3843   0016DE  ECEC  F015         	call	___wmul	;wreg free
  3844   0016E2  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3845   0016E6  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3846   0016EA  5031               	movf	normalise_readings@i^0,w,c
  3847   0016EC  0D02               	mullw	2
  3848   0016EE  CFF3 F027          	movff	prodl,??_normalise_readings
  3849   0016F2  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3850   0016F6  5027               	movf	??_normalise_readings^0,w,c
  3851   0016F8  2423               	addwf	normalise_readings@expected_values^0,w,c
  3852   0016FA  6ED9               	movwf	fsr2l,c
  3853   0016FC  5028               	movf	(??_normalise_readings+1)^0,w,c
  3854   0016FE  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3855   001700  6EDA               	movwf	fsr2h,c
  3856   001702  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3857   001706  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3858   00170A  EC85  F013         	call	___lwdiv	;wreg free
  3859   00170E  5031               	movf	normalise_readings@i^0,w,c
  3860   001710  0D02               	mullw	2
  3861   001712  CFF3 F029          	movff	prodl,??_normalise_readings+2
  3862   001716  CFF4 F02A          	movff	prodh,??_normalise_readings+3
  3863   00171A  5029               	movf	(??_normalise_readings+2)^0,w,c
  3864   00171C  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3865   00171E  6ED9               	movwf	fsr2l,c
  3866   001720  502A               	movf	(??_normalise_readings+3)^0,w,c
  3867   001722  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3868   001724  6EDA               	movwf	fsr2h,c
  3869   001726  C00B  FFDE         	movff	?___lwdiv,postinc2
  3870   00172A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3871                           
  3872                           ;colour_identify.c: 57:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3873   00172E  5031               	movf	normalise_readings@i^0,w,c
  3874   001730  0D02               	mullw	2
  3875   001732  CFF3 F027          	movff	prodl,??_normalise_readings
  3876   001736  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3877   00173A  5027               	movf	??_normalise_readings^0,w,c
  3878   00173C  2423               	addwf	normalise_readings@expected_values^0,w,c
  3879   00173E  6E29               	movwf	(??_normalise_readings+2)^0,c
  3880   001740  5028               	movf	(??_normalise_readings+1)^0,w,c
  3881   001742  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3882   001744  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3883   001746  0E12               	movlw	18
  3884   001748  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3885   00174A  6ED9               	movwf	fsr2l,c
  3886   00174C  0E00               	movlw	0
  3887   00174E  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3888   001750  6EDA               	movwf	fsr2h,c
  3889   001752  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  3890   001756  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  3891   00175A  502B               	movf	(??_normalise_readings+4)^0,w,c
  3892   00175C  5C1F               	subwf	normalise_readings@green_read^0,w,c
  3893   00175E  6E17               	movwf	abs@a^0,c
  3894   001760  502C               	movf	(??_normalise_readings+5)^0,w,c
  3895   001762  5820               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3896   001764  6E18               	movwf	(abs@a+1)^0,c
  3897   001766  EC29  F015         	call	_abs	;wreg free
  3898   00176A  C017  F02F         	movff	?_abs,normalise_readings@difference
  3899   00176E  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3900                           
  3901                           ;colour_identify.c: 58:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3902   001772  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3903   001776  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3904   00177A  0E00               	movlw	0
  3905   00177C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3906   00177E  0E64               	movlw	100
  3907   001780  6E07               	movwf	___wmul@multiplicand^0,c
  3908   001782  ECEC  F015         	call	___wmul	;wreg free
  3909   001786  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3910   00178A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3911   00178E  5031               	movf	normalise_readings@i^0,w,c
  3912   001790  0D02               	mullw	2
  3913   001792  CFF3 F027          	movff	prodl,??_normalise_readings
  3914   001796  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3915   00179A  5027               	movf	??_normalise_readings^0,w,c
  3916   00179C  2423               	addwf	normalise_readings@expected_values^0,w,c
  3917   00179E  6E29               	movwf	(??_normalise_readings+2)^0,c
  3918   0017A0  5028               	movf	(??_normalise_readings+1)^0,w,c
  3919   0017A2  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3920   0017A4  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3921   0017A6  0E12               	movlw	18
  3922   0017A8  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3923   0017AA  6ED9               	movwf	fsr2l,c
  3924   0017AC  0E00               	movlw	0
  3925   0017AE  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3926   0017B0  6EDA               	movwf	fsr2h,c
  3927   0017B2  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3928   0017B6  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3929   0017BA  EC85  F013         	call	___lwdiv	;wreg free
  3930   0017BE  5031               	movf	normalise_readings@i^0,w,c
  3931   0017C0  0D02               	mullw	2
  3932   0017C2  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  3933   0017C6  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  3934   0017CA  502B               	movf	(??_normalise_readings+4)^0,w,c
  3935   0017CC  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3936   0017CE  6E2D               	movwf	(??_normalise_readings+6)^0,c
  3937   0017D0  502C               	movf	(??_normalise_readings+5)^0,w,c
  3938   0017D2  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3939   0017D4  6E2E               	movwf	(??_normalise_readings+7)^0,c
  3940   0017D6  0E12               	movlw	18
  3941   0017D8  242D               	addwf	(??_normalise_readings+6)^0,w,c
  3942   0017DA  6ED9               	movwf	fsr2l,c
  3943   0017DC  0E00               	movlw	0
  3944   0017DE  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  3945   0017E0  6EDA               	movwf	fsr2h,c
  3946   0017E2  C00B  FFDE         	movff	?___lwdiv,postinc2
  3947   0017E6  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3948                           
  3949                           ;colour_identify.c: 61:         difference = abs(blue_read - expected_values[BLUE][i]);
  3950   0017EA  5031               	movf	normalise_readings@i^0,w,c
  3951   0017EC  0D02               	mullw	2
  3952   0017EE  CFF3 F027          	movff	prodl,??_normalise_readings
  3953   0017F2  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3954   0017F6  5027               	movf	??_normalise_readings^0,w,c
  3955   0017F8  2423               	addwf	normalise_readings@expected_values^0,w,c
  3956   0017FA  6E29               	movwf	(??_normalise_readings+2)^0,c
  3957   0017FC  5028               	movf	(??_normalise_readings+1)^0,w,c
  3958   0017FE  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3959   001800  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3960   001802  0E24               	movlw	36
  3961   001804  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3962   001806  6ED9               	movwf	fsr2l,c
  3963   001808  0E00               	movlw	0
  3964   00180A  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3965   00180C  6EDA               	movwf	fsr2h,c
  3966   00180E  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  3967   001812  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  3968   001816  502B               	movf	(??_normalise_readings+4)^0,w,c
  3969   001818  5C21               	subwf	normalise_readings@blue_read^0,w,c
  3970   00181A  6E17               	movwf	abs@a^0,c
  3971   00181C  502C               	movf	(??_normalise_readings+5)^0,w,c
  3972   00181E  5822               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3973   001820  6E18               	movwf	(abs@a+1)^0,c
  3974   001822  EC29  F015         	call	_abs	;wreg free
  3975   001826  C017  F02F         	movff	?_abs,normalise_readings@difference
  3976   00182A  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3977                           
  3978                           ;colour_identify.c: 62:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3979   00182E  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3980   001832  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3981   001836  0E00               	movlw	0
  3982   001838  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3983   00183A  0E64               	movlw	100
  3984   00183C  6E07               	movwf	___wmul@multiplicand^0,c
  3985   00183E  ECEC  F015         	call	___wmul	;wreg free
  3986   001842  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3987   001846  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3988   00184A  5031               	movf	normalise_readings@i^0,w,c
  3989   00184C  0D02               	mullw	2
  3990   00184E  CFF3 F027          	movff	prodl,??_normalise_readings
  3991   001852  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3992   001856  5027               	movf	??_normalise_readings^0,w,c
  3993   001858  2423               	addwf	normalise_readings@expected_values^0,w,c
  3994   00185A  6E29               	movwf	(??_normalise_readings+2)^0,c
  3995   00185C  5028               	movf	(??_normalise_readings+1)^0,w,c
  3996   00185E  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3997   001860  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3998   001862  0E24               	movlw	36
  3999   001864  2429               	addwf	(??_normalise_readings+2)^0,w,c
  4000   001866  6ED9               	movwf	fsr2l,c
  4001   001868  0E00               	movlw	0
  4002   00186A  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  4003   00186C  6EDA               	movwf	fsr2h,c
  4004   00186E  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4005   001872  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4006   001876  EC85  F013         	call	___lwdiv	;wreg free
  4007   00187A  5031               	movf	normalise_readings@i^0,w,c
  4008   00187C  0D02               	mullw	2
  4009   00187E  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  4010   001882  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  4011   001886  502B               	movf	(??_normalise_readings+4)^0,w,c
  4012   001888  2425               	addwf	normalise_readings@normalised_values^0,w,c
  4013   00188A  6E2D               	movwf	(??_normalise_readings+6)^0,c
  4014   00188C  502C               	movf	(??_normalise_readings+5)^0,w,c
  4015   00188E  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4016   001890  6E2E               	movwf	(??_normalise_readings+7)^0,c
  4017   001892  0E24               	movlw	36
  4018   001894  242D               	addwf	(??_normalise_readings+6)^0,w,c
  4019   001896  6ED9               	movwf	fsr2l,c
  4020   001898  0E00               	movlw	0
  4021   00189A  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  4022   00189C  6EDA               	movwf	fsr2h,c
  4023   00189E  C00B  FFDE         	movff	?___lwdiv,postinc2
  4024   0018A2  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4025   0018A6                     
  4026                           ;colour_identify.c: 63:     }
  4027   0018A6  2A31               	incf	normalise_readings@i^0,f,c
  4028   0018A8  0E08               	movlw	8
  4029   0018AA  6431               	cpfsgt	normalise_readings@i^0,c
  4030   0018AC  EF5A  F00C         	goto	u1921
  4031   0018B0  EF5C  F00C         	goto	u1920
  4032   0018B4                     u1921:
  4033   0018B4  EF4B  F00B         	goto	l3427
  4034   0018B8                     u1920:
  4035   0018B8  0012               	return		;funcret
  4036   0018BA                     __end_of_normalise_readings:
  4037                           	callstack 0
  4038                           
  4039 ;; *************** function _abs *****************
  4040 ;; Defined at:
  4041 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  a               2   22[COMRAM] int 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  2   22[COMRAM] int 
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4055 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;Total ram usage:        4 bytes
  4060 ;; Hardware stack levels used: 1
  4061 ;; Hardware stack levels required when called: 4
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_normalise_readings
  4066 ;;		_dtoa
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text20
  4071   002A52                     __ptext20:
  4072                           	callstack 0
  4073   002A52                     _abs:
  4074                           	callstack 22
  4075   002A52  BE18               	btfsc	(abs@a+1)^0,7,c
  4076   002A54  EF36  F015         	goto	u1620
  4077   002A58  5018               	movf	(abs@a+1)^0,w,c
  4078   002A5A  E106               	bnz	u1621
  4079   002A5C  0417               	decf	abs@a^0,w,c
  4080   002A5E  B0D8               	btfsc	status,0,c
  4081   002A60  EF34  F015         	goto	u1621
  4082   002A64  EF36  F015         	goto	u1620
  4083   002A68                     u1621:
  4084   002A68  EF44  F015         	goto	l1180
  4085   002A6C                     u1620:
  4086   002A6C  C017  F019         	movff	abs@a,??_abs
  4087   002A70  C018  F01A         	movff	abs@a+1,??_abs+1
  4088   002A74  1E19               	comf	??_abs^0,f,c
  4089   002A76  1E1A               	comf	(??_abs+1)^0,f,c
  4090   002A78  4A19               	infsnz	??_abs^0,f,c
  4091   002A7A  2A1A               	incf	(??_abs+1)^0,f,c
  4092   002A7C  C019  F017         	movff	??_abs,?_abs
  4093   002A80  C01A  F018         	movff	??_abs+1,?_abs+1
  4094   002A84  EF48  F015         	goto	l1183
  4095   002A88                     l1180:
  4096   002A88  C017  F017         	movff	abs@a,?_abs
  4097   002A8C  C018  F018         	movff	abs@a+1,?_abs+1
  4098   002A90                     l1183:
  4099   002A90  0012               	return		;funcret
  4100   002A92                     __end_of_abs:
  4101                           	callstack 0
  4102                           
  4103 ;; *************** function _motor_response *****************
  4104 ;; Defined at:
  4105 ;;		line 92 in file "colour_identify.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  card            1    wreg     enum E14551
  4108 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4109 ;;		 -> main@motorL(9), 
  4110 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4111 ;;		 -> main@motorR(9), 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  card            1   37[COMRAM] enum E14551
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4123 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;Total ram usage:        7 bytes
  4128 ;; Hardware stack levels used: 1
  4129 ;; Hardware stack levels required when called: 7
  4130 ;; This function calls:
  4131 ;;		_reverseFullSpeed
  4132 ;;		_stop
  4133 ;;		_turnLeft45
  4134 ;;		_turnRight45
  4135 ;; This function is called by:
  4136 ;;		_card_response
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text21
  4141   000E64                     __ptext21:
  4142                           	callstack 0
  4143   000E64                     _motor_response:
  4144                           	callstack 22
  4145                           
  4146                           ;incstack = 0
  4147                           ;motor_response@card stored from wreg
  4148   000E64  6E26               	movwf	motor_response@card^0,c
  4149   000E66                     
  4150                           ;colour_identify.c: 94:     switch (card){
  4151   000E66  EF8B  F008         	goto	l2897
  4152   000E6A                     l2787:
  4153                           
  4154                           ;colour_identify.c: 96:             reverseFullSpeed(mL,mR);
  4155   000E6A  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4156   000E6E  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4157   000E72  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4158   000E76  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4159   000E7A  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4160   000E7E                     
  4161                           ;colour_identify.c: 97:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4162   000E7E  0E05               	movlw	5
  4163   000E80  6E25               	movwf	(??_motor_response+1)^0,c
  4164   000E82  0E0F               	movlw	15
  4165   000E84  6E24               	movwf	??_motor_response^0,c
  4166   000E86  0EF1               	movlw	241
  4167   000E88                     u2007:
  4168   000E88  2EE8               	decfsz	wreg,f,c
  4169   000E8A  D7FE               	bra	u2007
  4170   000E8C  2E24               	decfsz	??_motor_response^0,f,c
  4171   000E8E  D7FC               	bra	u2007
  4172   000E90  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4173   000E92  D7FA               	bra	u2007
  4174   000E94  F000               	nop	
  4175   000E96                     l2791:
  4176                           
  4177                           ;colour_identify.c: 98:             turnRight45(mL,mR);
  4178   000E96  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4179   000E9A  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4180   000E9E  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4181   000EA2  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4182   000EA6  EC8D  F011         	call	_turnRight45	;wreg free
  4183   000EAA                     
  4184                           ;colour_identify.c: 99:             stop(mL,mR);
  4185   000EAA  C020  F018         	movff	motor_response@mL,stop@mL
  4186   000EAE  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4187   000EB2  C022  F01A         	movff	motor_response@mR,stop@mR
  4188   000EB6  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4189   000EBA  ECC5  F012         	call	_stop	;wreg free
  4190   000EBE                     
  4191                           ;colour_identify.c: 100:             turnRight45(mL,mR);
  4192   000EBE  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4193   000EC2  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4194   000EC6  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4195   000ECA  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4196   000ECE  EC8D  F011         	call	_turnRight45	;wreg free
  4197   000ED2                     l2797:
  4198                           
  4199                           ;colour_identify.c: 101:             stop(mL,mR);
  4200   000ED2  C020  F018         	movff	motor_response@mL,stop@mL
  4201   000ED6  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4202   000EDA  C022  F01A         	movff	motor_response@mR,stop@mR
  4203   000EDE  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4204   000EE2  ECC5  F012         	call	_stop	;wreg free
  4205                           
  4206                           ;colour_identify.c: 102:             break;
  4207   000EE6  EFBC  F008         	goto	l352
  4208   000EEA                     l2799:
  4209                           
  4210                           ;colour_identify.c: 104:             reverseFullSpeed(mL,mR);
  4211   000EEA  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4212   000EEE  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4213   000EF2  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4214   000EF6  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4215   000EFA  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4216   000EFE                     
  4217                           ;colour_identify.c: 105:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4218   000EFE  0E05               	movlw	5
  4219   000F00  6E25               	movwf	(??_motor_response+1)^0,c
  4220   000F02  0E0F               	movlw	15
  4221   000F04  6E24               	movwf	??_motor_response^0,c
  4222   000F06  0EF1               	movlw	241
  4223   000F08                     u2017:
  4224   000F08  2EE8               	decfsz	wreg,f,c
  4225   000F0A  D7FE               	bra	u2017
  4226   000F0C  2E24               	decfsz	??_motor_response^0,f,c
  4227   000F0E  D7FC               	bra	u2017
  4228   000F10  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4229   000F12  D7FA               	bra	u2017
  4230   000F14  F000               	nop	
  4231   000F16                     l2803:
  4232                           
  4233                           ;colour_identify.c: 106:             turnLeft45(mL,mR);
  4234   000F16  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4235   000F1A  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4236   000F1E  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4237   000F22  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4238   000F26  ECE4  F011         	call	_turnLeft45	;wreg free
  4239   000F2A                     
  4240                           ;colour_identify.c: 107:             stop(mL,mR);
  4241   000F2A  C020  F018         	movff	motor_response@mL,stop@mL
  4242   000F2E  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4243   000F32  C022  F01A         	movff	motor_response@mR,stop@mR
  4244   000F36  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4245   000F3A  ECC5  F012         	call	_stop	;wreg free
  4246   000F3E                     
  4247                           ;colour_identify.c: 108:             turnLeft45(mL,mR);
  4248   000F3E  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4249   000F42  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4250   000F46  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4251   000F4A  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4252   000F4E  ECE4  F011         	call	_turnLeft45	;wreg free
  4253   000F52  EF69  F007         	goto	l2797
  4254   000F56                     l2811:
  4255                           
  4256                           ;colour_identify.c: 112:             reverseFullSpeed(mL,mR);
  4257   000F56  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4258   000F5A  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4259   000F5E  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4260   000F62  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4261   000F66  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4262   000F6A                     
  4263                           ;colour_identify.c: 113:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4264   000F6A  0E05               	movlw	5
  4265   000F6C  6E25               	movwf	(??_motor_response+1)^0,c
  4266   000F6E  0E0F               	movlw	15
  4267   000F70  6E24               	movwf	??_motor_response^0,c
  4268   000F72  0EF1               	movlw	241
  4269   000F74                     u2027:
  4270   000F74  2EE8               	decfsz	wreg,f,c
  4271   000F76  D7FE               	bra	u2027
  4272   000F78  2E24               	decfsz	??_motor_response^0,f,c
  4273   000F7A  D7FC               	bra	u2027
  4274   000F7C  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4275   000F7E  D7FA               	bra	u2027
  4276   000F80  F000               	nop	
  4277   000F82                     
  4278                           ;colour_identify.c: 114:             turnRight45(mL,mR);
  4279   000F82  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4280   000F86  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4281   000F8A  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4282   000F8E  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4283   000F92  EC8D  F011         	call	_turnRight45	;wreg free
  4284   000F96                     
  4285                           ;colour_identify.c: 115:             stop(mL,mR);
  4286   000F96  C020  F018         	movff	motor_response@mL,stop@mL
  4287   000F9A  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4288   000F9E  C022  F01A         	movff	motor_response@mR,stop@mR
  4289   000FA2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4290   000FA6  ECC5  F012         	call	_stop	;wreg free
  4291   000FAA                     l2819:
  4292                           
  4293                           ;colour_identify.c: 116:             turnRight45(mL,mR);
  4294   000FAA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4295   000FAE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4296   000FB2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4297   000FB6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4298   000FBA  EC8D  F011         	call	_turnRight45	;wreg free
  4299   000FBE                     l2821:
  4300                           
  4301                           ;colour_identify.c: 117:             stop(mL,mR);
  4302   000FBE  C020  F018         	movff	motor_response@mL,stop@mL
  4303   000FC2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4304   000FC6  C022  F01A         	movff	motor_response@mR,stop@mR
  4305   000FCA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4306   000FCE  ECC5  F012         	call	_stop	;wreg free
  4307   000FD2  EF4B  F007         	goto	l2791
  4308   000FD6                     l2831:
  4309                           
  4310                           ;colour_identify.c: 124:             reverseFullSpeed(mL,mR);
  4311   000FD6  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4312   000FDA  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4313   000FDE  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4314   000FE2  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4315   000FE6  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4316   000FEA                     
  4317                           ;colour_identify.c: 125:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4318   000FEA  0E05               	movlw	5
  4319   000FEC  6E25               	movwf	(??_motor_response+1)^0,c
  4320   000FEE  0E0F               	movlw	15
  4321   000FF0  6E24               	movwf	??_motor_response^0,c
  4322   000FF2  0EF1               	movlw	241
  4323   000FF4                     u2037:
  4324   000FF4  2EE8               	decfsz	wreg,f,c
  4325   000FF6  D7FE               	bra	u2037
  4326   000FF8  2E24               	decfsz	??_motor_response^0,f,c
  4327   000FFA  D7FC               	bra	u2037
  4328   000FFC  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4329   000FFE  D7FA               	bra	u2037
  4330   001000  F000               	nop	
  4331   001002                     
  4332                           ;colour_identify.c: 126:             reverseFullSpeed(mL,mR);
  4333   001002  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4334   001006  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4335   00100A  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4336   00100E  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4337   001012  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4338                           
  4339                           ;colour_identify.c: 127:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4340   001016  0E29               	movlw	41
  4341   001018  6E25               	movwf	(??_motor_response+1)^0,c
  4342   00101A  0E96               	movlw	150
  4343   00101C  6E24               	movwf	??_motor_response^0,c
  4344   00101E  0E7F               	movlw	127
  4345   001020                     u2047:
  4346   001020  2EE8               	decfsz	wreg,f,c
  4347   001022  D7FE               	bra	u2047
  4348   001024  2E24               	decfsz	??_motor_response^0,f,c
  4349   001026  D7FC               	bra	u2047
  4350   001028  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4351   00102A  D7FA               	bra	u2047
  4352   00102C  F000               	nop	
  4353   00102E  EFDF  F007         	goto	l2821
  4354   001032                     l2847:
  4355                           
  4356                           ;colour_identify.c: 135:             reverseFullSpeed(mL,mR);
  4357   001032  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4358   001036  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4359   00103A  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4360   00103E  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4361   001042  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4362   001046                     
  4363                           ;colour_identify.c: 136:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4364   001046  0E05               	movlw	5
  4365   001048  6E25               	movwf	(??_motor_response+1)^0,c
  4366   00104A  0E0F               	movlw	15
  4367   00104C  6E24               	movwf	??_motor_response^0,c
  4368   00104E  0EF1               	movlw	241
  4369   001050                     u2057:
  4370   001050  2EE8               	decfsz	wreg,f,c
  4371   001052  D7FE               	bra	u2057
  4372   001054  2E24               	decfsz	??_motor_response^0,f,c
  4373   001056  D7FC               	bra	u2057
  4374   001058  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4375   00105A  D7FA               	bra	u2057
  4376   00105C  F000               	nop	
  4377   00105E                     
  4378                           ;colour_identify.c: 137:             reverseFullSpeed(mL,mR);
  4379   00105E  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4380   001062  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4381   001066  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4382   00106A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4383   00106E  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4384                           
  4385                           ;colour_identify.c: 138:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4386   001072  0E29               	movlw	41
  4387   001074  6E25               	movwf	(??_motor_response+1)^0,c
  4388   001076  0E96               	movlw	150
  4389   001078  6E24               	movwf	??_motor_response^0,c
  4390   00107A  0E7F               	movlw	127
  4391   00107C                     u2067:
  4392   00107C  2EE8               	decfsz	wreg,f,c
  4393   00107E  D7FE               	bra	u2067
  4394   001080  2E24               	decfsz	??_motor_response^0,f,c
  4395   001082  D7FC               	bra	u2067
  4396   001084  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4397   001086  D7FA               	bra	u2067
  4398   001088  F000               	nop	
  4399   00108A                     l2853:
  4400                           
  4401                           ;colour_identify.c: 139:             stop(mL,mR);
  4402   00108A  C020  F018         	movff	motor_response@mL,stop@mL
  4403   00108E  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4404   001092  C022  F01A         	movff	motor_response@mR,stop@mR
  4405   001096  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4406   00109A  ECC5  F012         	call	_stop	;wreg free
  4407   00109E  EF8B  F007         	goto	l2803
  4408   0010A2                     l2863:
  4409                           
  4410                           ;colour_identify.c: 146:             reverseFullSpeed(mL,mR);
  4411   0010A2  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4412   0010A6  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4413   0010AA  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4414   0010AE  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4415   0010B2  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4416   0010B6                     
  4417                           ;colour_identify.c: 147:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4418   0010B6  0E05               	movlw	5
  4419   0010B8  6E25               	movwf	(??_motor_response+1)^0,c
  4420   0010BA  0E0F               	movlw	15
  4421   0010BC  6E24               	movwf	??_motor_response^0,c
  4422   0010BE  0EF1               	movlw	241
  4423   0010C0                     u2077:
  4424   0010C0  2EE8               	decfsz	wreg,f,c
  4425   0010C2  D7FE               	bra	u2077
  4426   0010C4  2E24               	decfsz	??_motor_response^0,f,c
  4427   0010C6  D7FC               	bra	u2077
  4428   0010C8  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4429   0010CA  D7FA               	bra	u2077
  4430   0010CC  F000               	nop	
  4431   0010CE  EFD5  F007         	goto	l2819
  4432   0010D2                     l2879:
  4433                           
  4434                           ;colour_identify.c: 156:             reverseFullSpeed(mL,mR);
  4435   0010D2  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4436   0010D6  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4437   0010DA  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4438   0010DE  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4439   0010E2  EC3B  F012         	call	_reverseFullSpeed	;wreg free
  4440   0010E6                     
  4441                           ;colour_identify.c: 157:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4442   0010E6  0E05               	movlw	5
  4443   0010E8  6E25               	movwf	(??_motor_response+1)^0,c
  4444   0010EA  0E0F               	movlw	15
  4445   0010EC  6E24               	movwf	??_motor_response^0,c
  4446   0010EE  0EF1               	movlw	241
  4447   0010F0                     u2087:
  4448   0010F0  2EE8               	decfsz	wreg,f,c
  4449   0010F2  D7FE               	bra	u2087
  4450   0010F4  2E24               	decfsz	??_motor_response^0,f,c
  4451   0010F6  D7FC               	bra	u2087
  4452   0010F8  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4453   0010FA  D7FA               	bra	u2087
  4454   0010FC  F000               	nop	
  4455   0010FE                     
  4456                           ;colour_identify.c: 158:             turnLeft45(mL,mR);
  4457   0010FE  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4458   001102  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4459   001106  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4460   00110A  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4461   00110E  ECE4  F011         	call	_turnLeft45	;wreg free
  4462   001112  EF45  F008         	goto	l2853
  4463   001116                     l2897:
  4464   001116  5026               	movf	motor_response@card^0,w,c
  4465   001118  6E24               	movwf	??_motor_response^0,c
  4466   00111A  6A25               	clrf	(??_motor_response+1)^0,c
  4467                           
  4468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4469                           ; Switch size 1, requested type "simple"
  4470                           ; Number of cases is 1, Range of values is 0 to 0
  4471                           ; switch strategies available:
  4472                           ; Name         Instructions Cycles
  4473                           ; simple_byte            4     3 (average)
  4474                           ;	Chosen strategy is simple_byte
  4475   00111C  5025               	movf	(??_motor_response+1)^0,w,c
  4476   00111E  0A00               	xorlw	0	; case 0
  4477   001120  B4D8               	btfsc	status,2,c
  4478   001122  EF95  F008         	goto	l3541
  4479   001126  EFBC  F008         	goto	l352
  4480   00112A                     l3541:
  4481                           
  4482                           ; Switch size 1, requested type "simple"
  4483                           ; Number of cases is 9, Range of values is 0 to 8
  4484                           ; switch strategies available:
  4485                           ; Name         Instructions Cycles
  4486                           ; simple_byte           28    15 (average)
  4487                           ;	Chosen strategy is simple_byte
  4488   00112A  5024               	movf	??_motor_response^0,w,c
  4489   00112C  0A00               	xorlw	0	; case 0
  4490   00112E  B4D8               	btfsc	status,2,c
  4491   001130  EF35  F007         	goto	l2787
  4492   001134  0A01               	xorlw	1	; case 1
  4493   001136  B4D8               	btfsc	status,2,c
  4494   001138  EF75  F007         	goto	l2799
  4495   00113C  0A03               	xorlw	3	; case 2
  4496   00113E  B4D8               	btfsc	status,2,c
  4497   001140  EFAB  F007         	goto	l2811
  4498   001144  0A01               	xorlw	1	; case 3
  4499   001146  B4D8               	btfsc	status,2,c
  4500   001148  EFEB  F007         	goto	l2831
  4501   00114C  0A07               	xorlw	7	; case 4
  4502   00114E  B4D8               	btfsc	status,2,c
  4503   001150  EF19  F008         	goto	l2847
  4504   001154  0A01               	xorlw	1	; case 5
  4505   001156  B4D8               	btfsc	status,2,c
  4506   001158  EF51  F008         	goto	l2863
  4507   00115C  0A03               	xorlw	3	; case 6
  4508   00115E  B4D8               	btfsc	status,2,c
  4509   001160  EF69  F008         	goto	l2879
  4510   001164  0A01               	xorlw	1	; case 7
  4511   001166  B4D8               	btfsc	status,2,c
  4512   001168  EFBC  F008         	goto	l352
  4513   00116C  0A0F               	xorlw	15	; case 8
  4514   00116E  B4D8               	btfsc	status,2,c
  4515   001170  EFBC  F008         	goto	l352
  4516   001174  EFBC  F008         	goto	l352
  4517   001178                     l352:
  4518   001178  0012               	return		;funcret
  4519   00117A                     __end_of_motor_response:
  4520                           	callstack 0
  4521                           
  4522 ;; *************** function _turnRight45 *****************
  4523 ;; Defined at:
  4524 ;;		line 116 in file "dc_motor.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4527 ;;		 -> main@motorL(9), 
  4528 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4529 ;;		 -> main@motorR(9), 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  i               2   29[COMRAM] int 
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4545 ;;Total ram usage:        8 bytes
  4546 ;; Hardware stack levels used: 1
  4547 ;; Hardware stack levels required when called: 6
  4548 ;; This function calls:
  4549 ;;		_setMotorPWM
  4550 ;; This function is called by:
  4551 ;;		_motor_response
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text22
  4556   00231A                     __ptext22:
  4557                           	callstack 0
  4558   00231A                     _turnRight45:
  4559                           	callstack 22
  4560   00231A                     
  4561                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  4562   00231A  EE20 F001          	lfsr	2,1
  4563   00231E  5018               	movf	turnRight45@mL^0,w,c
  4564   002320  26D9               	addwf	fsr2l,f,c
  4565   002322  5019               	movf	(turnRight45@mL+1)^0,w,c
  4566   002324  22DA               	addwfc	fsr2h,f,c
  4567   002326  0E01               	movlw	1
  4568   002328  6EDF               	movwf	indf2,c
  4569                           
  4570                           ;dc_motor.c: 119:     mR->direction=0;
  4571   00232A  EE20 F001          	lfsr	2,1
  4572   00232E  501A               	movf	turnRight45@mR^0,w,c
  4573   002330  26D9               	addwf	fsr2l,f,c
  4574   002332  501B               	movf	(turnRight45@mR+1)^0,w,c
  4575   002334  22DA               	addwfc	fsr2h,f,c
  4576   002336  0E00               	movlw	0
  4577   002338  6EDF               	movwf	indf2,c
  4578   00233A                     
  4579                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  4580   00233A  0E00               	movlw	0
  4581   00233C  6E1F               	movwf	(turnRight45@i+1)^0,c
  4582   00233E  0E00               	movlw	0
  4583   002340  6E1E               	movwf	turnRight45@i^0,c
  4584   002342                     l2591:
  4585                           
  4586                           ;dc_motor.c: 122:         mR->power=i;
  4587   002342  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  4588   002346  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  4589   00234A  C01E  FFDF         	movff	turnRight45@i,indf2
  4590                           
  4591                           ;dc_motor.c: 123:         mL->power=i;
  4592   00234E  C018  FFD9         	movff	turnRight45@mL,fsr2l
  4593   002352  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  4594   002356  C01E  FFDF         	movff	turnRight45@i,indf2
  4595   00235A                     
  4596                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4597   00235A  0E02               	movlw	2
  4598   00235C  6E1D               	movwf	(??_turnRight45+1)^0,c
  4599   00235E  0E38               	movlw	56
  4600   002360  6E1C               	movwf	??_turnRight45^0,c
  4601   002362  0EAD               	movlw	173
  4602   002364                     u2097:
  4603   002364  2EE8               	decfsz	wreg,f,c
  4604   002366  D7FE               	bra	u2097
  4605   002368  2E1C               	decfsz	??_turnRight45^0,f,c
  4606   00236A  D7FC               	bra	u2097
  4607   00236C  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  4608   00236E  D7FA               	bra	u2097
  4609   002370  F000               	nop	
  4610   002372                     
  4611                           ;dc_motor.c: 125:         setMotorPWM(mL);
  4612   002372  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  4613   002376  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  4614   00237A  EC14  F00E         	call	_setMotorPWM	;wreg free
  4615   00237E                     
  4616                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  4617   00237E  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  4618   002382  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  4619   002386  EC14  F00E         	call	_setMotorPWM	;wreg free
  4620   00238A  0E0A               	movlw	10
  4621   00238C  261E               	addwf	turnRight45@i^0,f,c
  4622   00238E  0E00               	movlw	0
  4623   002390  221F               	addwfc	(turnRight45@i+1)^0,f,c
  4624   002392  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  4625   002394  EFD5  F011         	goto	u1271
  4626   002398  501F               	movf	(turnRight45@i+1)^0,w,c
  4627   00239A  E109               	bnz	u1270
  4628   00239C  0E50               	movlw	80
  4629   00239E  5C1E               	subwf	turnRight45@i^0,w,c
  4630   0023A0  A0D8               	btfss	status,0,c
  4631   0023A2  EFD5  F011         	goto	u1271
  4632   0023A6  EFD7  F011         	goto	u1270
  4633   0023AA                     u1271:
  4634   0023AA  EFA1  F011         	goto	l2591
  4635   0023AE                     u1270:
  4636   0023AE                     
  4637                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  4638   0023AE  0E06               	movlw	6
  4639   0023B0  6E1D               	movwf	(??_turnRight45+1)^0,c
  4640   0023B2  0E47               	movlw	71
  4641   0023B4  6E1C               	movwf	??_turnRight45^0,c
  4642   0023B6  0EA0               	movlw	160
  4643   0023B8                     u2107:
  4644   0023B8  2EE8               	decfsz	wreg,f,c
  4645   0023BA  D7FE               	bra	u2107
  4646   0023BC  2E1C               	decfsz	??_turnRight45^0,f,c
  4647   0023BE  D7FC               	bra	u2107
  4648   0023C0  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  4649   0023C2  D7FA               	bra	u2107
  4650   0023C4  D000               	nop2	
  4651   0023C6  0012               	return		;funcret
  4652   0023C8                     __end_of_turnRight45:
  4653                           	callstack 0
  4654                           
  4655 ;; *************** function _turnLeft45 *****************
  4656 ;; Defined at:
  4657 ;;		line 101 in file "dc_motor.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4660 ;;		 -> main@motorL(9), 
  4661 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4662 ;;		 -> main@motorR(9), 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  i               2   29[COMRAM] int 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4678 ;;Total ram usage:        8 bytes
  4679 ;; Hardware stack levels used: 1
  4680 ;; Hardware stack levels required when called: 6
  4681 ;; This function calls:
  4682 ;;		_setMotorPWM
  4683 ;; This function is called by:
  4684 ;;		_motor_response
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text23
  4689   0023C8                     __ptext23:
  4690                           	callstack 0
  4691   0023C8                     _turnLeft45:
  4692                           	callstack 22
  4693   0023C8                     
  4694                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  4695   0023C8  EE20 F001          	lfsr	2,1
  4696   0023CC  5018               	movf	turnLeft45@mL^0,w,c
  4697   0023CE  26D9               	addwf	fsr2l,f,c
  4698   0023D0  5019               	movf	(turnLeft45@mL+1)^0,w,c
  4699   0023D2  22DA               	addwfc	fsr2h,f,c
  4700   0023D4  0E00               	movlw	0
  4701   0023D6  6EDF               	movwf	indf2,c
  4702                           
  4703                           ;dc_motor.c: 104:     mR->direction=1;
  4704   0023D8  EE20 F001          	lfsr	2,1
  4705   0023DC  501A               	movf	turnLeft45@mR^0,w,c
  4706   0023DE  26D9               	addwf	fsr2l,f,c
  4707   0023E0  501B               	movf	(turnLeft45@mR+1)^0,w,c
  4708   0023E2  22DA               	addwfc	fsr2h,f,c
  4709   0023E4  0E01               	movlw	1
  4710   0023E6  6EDF               	movwf	indf2,c
  4711   0023E8                     
  4712                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  4713   0023E8  0E00               	movlw	0
  4714   0023EA  6E1F               	movwf	(turnLeft45@i+1)^0,c
  4715   0023EC  0E00               	movlw	0
  4716   0023EE  6E1E               	movwf	turnLeft45@i^0,c
  4717   0023F0                     l2569:
  4718                           
  4719                           ;dc_motor.c: 107:         mR->power=i;
  4720   0023F0  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  4721   0023F4  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  4722   0023F8  C01E  FFDF         	movff	turnLeft45@i,indf2
  4723                           
  4724                           ;dc_motor.c: 108:         mL->power=i;
  4725   0023FC  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  4726   002400  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  4727   002404  C01E  FFDF         	movff	turnLeft45@i,indf2
  4728   002408                     
  4729                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4730   002408  0E02               	movlw	2
  4731   00240A  6E1D               	movwf	(??_turnLeft45+1)^0,c
  4732   00240C  0E38               	movlw	56
  4733   00240E  6E1C               	movwf	??_turnLeft45^0,c
  4734   002410  0EAD               	movlw	173
  4735   002412                     u2117:
  4736   002412  2EE8               	decfsz	wreg,f,c
  4737   002414  D7FE               	bra	u2117
  4738   002416  2E1C               	decfsz	??_turnLeft45^0,f,c
  4739   002418  D7FC               	bra	u2117
  4740   00241A  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  4741   00241C  D7FA               	bra	u2117
  4742   00241E  F000               	nop	
  4743   002420                     
  4744                           ;dc_motor.c: 110:         setMotorPWM(mL);
  4745   002420  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  4746   002424  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  4747   002428  EC14  F00E         	call	_setMotorPWM	;wreg free
  4748   00242C                     
  4749                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  4750   00242C  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  4751   002430  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  4752   002434  EC14  F00E         	call	_setMotorPWM	;wreg free
  4753   002438  0E0A               	movlw	10
  4754   00243A  261E               	addwf	turnLeft45@i^0,f,c
  4755   00243C  0E00               	movlw	0
  4756   00243E  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  4757   002440  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  4758   002442  EF2C  F012         	goto	u1261
  4759   002446  501F               	movf	(turnLeft45@i+1)^0,w,c
  4760   002448  E109               	bnz	u1260
  4761   00244A  0E50               	movlw	80
  4762   00244C  5C1E               	subwf	turnLeft45@i^0,w,c
  4763   00244E  A0D8               	btfss	status,0,c
  4764   002450  EF2C  F012         	goto	u1261
  4765   002454  EF2E  F012         	goto	u1260
  4766   002458                     u1261:
  4767   002458  EFF8  F011         	goto	l2569
  4768   00245C                     u1260:
  4769   00245C                     
  4770                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  4771   00245C  0E06               	movlw	6
  4772   00245E  6E1D               	movwf	(??_turnLeft45+1)^0,c
  4773   002460  0E47               	movlw	71
  4774   002462  6E1C               	movwf	??_turnLeft45^0,c
  4775   002464  0EA0               	movlw	160
  4776   002466                     u2127:
  4777   002466  2EE8               	decfsz	wreg,f,c
  4778   002468  D7FE               	bra	u2127
  4779   00246A  2E1C               	decfsz	??_turnLeft45^0,f,c
  4780   00246C  D7FC               	bra	u2127
  4781   00246E  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  4782   002470  D7FA               	bra	u2127
  4783   002472  D000               	nop2	
  4784   002474  0012               	return		;funcret
  4785   002476                     __end_of_turnLeft45:
  4786                           	callstack 0
  4787                           
  4788 ;; *************** function _stop *****************
  4789 ;; Defined at:
  4790 ;;		line 84 in file "dc_motor.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4793 ;;		 -> main@motorL(9), 
  4794 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4795 ;;		 -> main@motorR(9), 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        5 bytes
  4812 ;; Hardware stack levels used: 1
  4813 ;; Hardware stack levels required when called: 6
  4814 ;; This function calls:
  4815 ;;		_setMotorPWM
  4816 ;; This function is called by:
  4817 ;;		_motor_response
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text24
  4822   00258A                     __ptext24:
  4823                           	callstack 0
  4824   00258A                     _stop:
  4825                           	callstack 22
  4826   00258A                     
  4827                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  4828   00258A  EFDA  F012         	goto	l2551
  4829   00258E                     l2545:
  4830                           
  4831                           ;dc_motor.c: 87:         mL->power -=10;
  4832   00258E  C018  FFD9         	movff	stop@mL,fsr2l
  4833   002592  C019  FFDA         	movff	stop@mL+1,fsr2h
  4834   002596  0E0A               	movlw	10
  4835   002598  5EDF               	subwf	indf2,f,c
  4836   00259A                     
  4837                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  4838   00259A  0E2A               	movlw	42
  4839   00259C  6E1C               	movwf	??_stop^0,c
  4840   00259E  0E8E               	movlw	142
  4841   0025A0                     u2137:
  4842   0025A0  2EE8               	decfsz	wreg,f,c
  4843   0025A2  D7FE               	bra	u2137
  4844   0025A4  2E1C               	decfsz	??_stop^0,f,c
  4845   0025A6  D7FC               	bra	u2137
  4846   0025A8                     
  4847                           ;dc_motor.c: 89:         setMotorPWM(mL);
  4848   0025A8  C018  F012         	movff	stop@mL,setMotorPWM@m
  4849   0025AC  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  4850   0025B0  EC14  F00E         	call	_setMotorPWM	;wreg free
  4851   0025B4                     l2551:
  4852                           
  4853                           ;dc_motor.c: 86:     while(mL->power !=0){
  4854   0025B4  C018  FFD9         	movff	stop@mL,fsr2l
  4855   0025B8  C019  FFDA         	movff	stop@mL+1,fsr2h
  4856   0025BC  50DF               	movf	indf2,w,c
  4857   0025BE  A4D8               	btfss	status,2,c
  4858   0025C0  EFE4  F012         	goto	u1241
  4859   0025C4  EFE6  F012         	goto	u1240
  4860   0025C8                     u1241:
  4861   0025C8  EFC7  F012         	goto	l2545
  4862   0025CC                     u1240:
  4863   0025CC  EFFB  F012         	goto	l2559
  4864   0025D0                     l2553:
  4865                           
  4866                           ;dc_motor.c: 92:         mR->power -=10;
  4867   0025D0  C01A  FFD9         	movff	stop@mR,fsr2l
  4868   0025D4  C01B  FFDA         	movff	stop@mR+1,fsr2h
  4869   0025D8  0E0A               	movlw	10
  4870   0025DA  5EDF               	subwf	indf2,f,c
  4871   0025DC                     
  4872                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  4873   0025DC  0E2A               	movlw	42
  4874   0025DE  6E1C               	movwf	??_stop^0,c
  4875   0025E0  0E8E               	movlw	142
  4876   0025E2                     u2147:
  4877   0025E2  2EE8               	decfsz	wreg,f,c
  4878   0025E4  D7FE               	bra	u2147
  4879   0025E6  2E1C               	decfsz	??_stop^0,f,c
  4880   0025E8  D7FC               	bra	u2147
  4881   0025EA                     
  4882                           ;dc_motor.c: 94:         setMotorPWM(mR);
  4883   0025EA  C01A  F012         	movff	stop@mR,setMotorPWM@m
  4884   0025EE  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  4885   0025F2  EC14  F00E         	call	_setMotorPWM	;wreg free
  4886   0025F6                     l2559:
  4887                           
  4888                           ;dc_motor.c: 91:     while(mR -> power !=0){
  4889   0025F6  C01A  FFD9         	movff	stop@mR,fsr2l
  4890   0025FA  C01B  FFDA         	movff	stop@mR+1,fsr2h
  4891   0025FE  50DF               	movf	indf2,w,c
  4892   002600  A4D8               	btfss	status,2,c
  4893   002602  EF05  F013         	goto	u1251
  4894   002606  EF07  F013         	goto	u1250
  4895   00260A                     u1251:
  4896   00260A  EFE8  F012         	goto	l2553
  4897   00260E                     u1250:
  4898   00260E  0012               	return		;funcret
  4899   002610                     __end_of_stop:
  4900                           	callstack 0
  4901                           
  4902 ;; *************** function _reverseFullSpeed *****************
  4903 ;; Defined at:
  4904 ;;		line 145 in file "dc_motor.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4907 ;;		 -> main@motorL(9), 
  4908 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4909 ;;		 -> main@motorR(9), 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  i               2   28[COMRAM] int 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  1    wreg      void 
  4914 ;; Registers used:
  4915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;Total ram usage:        7 bytes
  4926 ;; Hardware stack levels used: 1
  4927 ;; Hardware stack levels required when called: 6
  4928 ;; This function calls:
  4929 ;;		_setMotorPWM
  4930 ;; This function is called by:
  4931 ;;		_motor_response
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text25
  4936   002476                     __ptext25:
  4937                           	callstack 0
  4938   002476                     _reverseFullSpeed:
  4939                           	callstack 22
  4940   002476                     
  4941                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  4942   002476  EE20 F001          	lfsr	2,1
  4943   00247A  5018               	movf	reverseFullSpeed@mL^0,w,c
  4944   00247C  26D9               	addwf	fsr2l,f,c
  4945   00247E  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  4946   002480  22DA               	addwfc	fsr2h,f,c
  4947   002482  0E00               	movlw	0
  4948   002484  6EDF               	movwf	indf2,c
  4949                           
  4950                           ;dc_motor.c: 148:     mR->direction=0;
  4951   002486  EE20 F001          	lfsr	2,1
  4952   00248A  501A               	movf	reverseFullSpeed@mR^0,w,c
  4953   00248C  26D9               	addwf	fsr2l,f,c
  4954   00248E  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  4955   002490  22DA               	addwfc	fsr2h,f,c
  4956   002492  0E00               	movlw	0
  4957   002494  6EDF               	movwf	indf2,c
  4958   002496                     
  4959                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  4960   002496  0E00               	movlw	0
  4961   002498  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  4962   00249A  0E00               	movlw	0
  4963   00249C  6E1D               	movwf	reverseFullSpeed@i^0,c
  4964   00249E                     l2613:
  4965                           
  4966                           ;dc_motor.c: 150:         mL->power=i;
  4967   00249E  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  4968   0024A2  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  4969   0024A6  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  4970                           
  4971                           ;dc_motor.c: 151:         mR->power=i;
  4972   0024AA  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  4973   0024AE  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  4974   0024B2  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  4975   0024B6                     
  4976                           ;dc_motor.c: 152:         setMotorPWM(mL);
  4977   0024B6  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  4978   0024BA  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  4979   0024BE  EC14  F00E         	call	_setMotorPWM	;wreg free
  4980   0024C2                     
  4981                           ;dc_motor.c: 153:         setMotorPWM(mR);
  4982   0024C2  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  4983   0024C6  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  4984   0024CA  EC14  F00E         	call	_setMotorPWM	;wreg free
  4985   0024CE                     
  4986                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4987   0024CE  0ED0               	movlw	208
  4988   0024D0  6E1C               	movwf	??_reverseFullSpeed^0,c
  4989   0024D2  0ECA               	movlw	202
  4990   0024D4                     u2157:
  4991   0024D4  2EE8               	decfsz	wreg,f,c
  4992   0024D6  D7FE               	bra	u2157
  4993   0024D8  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  4994   0024DA  D7FC               	bra	u2157
  4995   0024DC                     
  4996                           ;dc_motor.c: 155:     }
  4997   0024DC  0E0A               	movlw	10
  4998   0024DE  261D               	addwf	reverseFullSpeed@i^0,f,c
  4999   0024E0  0E00               	movlw	0
  5000   0024E2  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5001   0024E4  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5002   0024E6  EF7E  F012         	goto	u1281
  5003   0024EA  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5004   0024EC  E109               	bnz	u1280
  5005   0024EE  0E3C               	movlw	60
  5006   0024F0  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5007   0024F2  A0D8               	btfss	status,0,c
  5008   0024F4  EF7E  F012         	goto	u1281
  5009   0024F8  EF80  F012         	goto	u1280
  5010   0024FC                     u1281:
  5011   0024FC  EF4F  F012         	goto	l2613
  5012   002500                     u1280:
  5013   002500  0012               	return		;funcret
  5014   002502                     __end_of_reverseFullSpeed:
  5015                           	callstack 0
  5016                           
  5017 ;; *************** function _setMotorPWM *****************
  5018 ;; Defined at:
  5019 ;;		line 61 in file "dc_motor.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5022 ;;		 -> main@motorR(9), main@motorL(9), 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  negDuty         1   22[COMRAM] unsigned char 
  5025 ;;  posDuty         1   21[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5035 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5038 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5039 ;;Total ram usage:        6 bytes
  5040 ;; Hardware stack levels used: 1
  5041 ;; Hardware stack levels required when called: 5
  5042 ;; This function calls:
  5043 ;;		___lwdiv
  5044 ;;		___wmul
  5045 ;; This function is called by:
  5046 ;;		_stop
  5047 ;;		_turnLeft45
  5048 ;;		_turnRight45
  5049 ;;		_reverseFullSpeed
  5050 ;;		_main
  5051 ;;		_fullSpeedAhead
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text26
  5056   001C28                     __ptext26:
  5057                           	callstack 0
  5058   001C28                     _setMotorPWM:
  5059                           	callstack 25
  5060   001C28                     
  5061                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5062   001C28  EE20 F002          	lfsr	2,2
  5063   001C2C  5012               	movf	setMotorPWM@m^0,w,c
  5064   001C2E  26D9               	addwf	fsr2l,f,c
  5065   001C30  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5066   001C32  22DA               	addwfc	fsr2h,f,c
  5067   001C34  50DF               	movf	indf2,w,c
  5068   001C36  B4D8               	btfsc	status,2,c
  5069   001C38  EF20  F00E         	goto	u1191
  5070   001C3C  EF22  F00E         	goto	u1190
  5071   001C40                     u1191:
  5072   001C40  EF56  F00E         	goto	l2483
  5073   001C44                     u1190:
  5074   001C44                     
  5075                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5076   001C44  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5077   001C48  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5078   001C4C  50DF               	movf	indf2,w,c
  5079   001C4E  6E14               	movwf	??_setMotorPWM^0,c
  5080   001C50  5014               	movf	??_setMotorPWM^0,w,c
  5081   001C52  6E05               	movwf	___wmul@multiplier^0,c
  5082   001C54  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5083   001C56  EE20 F003          	lfsr	2,3
  5084   001C5A  5012               	movf	setMotorPWM@m^0,w,c
  5085   001C5C  26D9               	addwf	fsr2l,f,c
  5086   001C5E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5087   001C60  22DA               	addwfc	fsr2h,f,c
  5088   001C62  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5089   001C66  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5090   001C6A  ECEC  F015         	call	___wmul	;wreg free
  5091   001C6E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5092   001C72  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5093   001C76  0E00               	movlw	0
  5094   001C78  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5095   001C7A  0E64               	movlw	100
  5096   001C7C  6E0D               	movwf	___lwdiv@divisor^0,c
  5097   001C7E  EC85  F013         	call	___lwdiv	;wreg free
  5098   001C82  EE20 F003          	lfsr	2,3
  5099   001C86  5012               	movf	setMotorPWM@m^0,w,c
  5100   001C88  26D9               	addwf	fsr2l,f,c
  5101   001C8A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5102   001C8C  22DA               	addwfc	fsr2h,f,c
  5103   001C8E  50DF               	movf	indf2,w,c
  5104   001C90  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5105   001C92  500B               	movf	?___lwdiv^0,w,c
  5106   001C94  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5107   001C96  6E16               	movwf	setMotorPWM@posDuty^0,c
  5108   001C98                     
  5109                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5110   001C98  EE20 F003          	lfsr	2,3
  5111   001C9C  5012               	movf	setMotorPWM@m^0,w,c
  5112   001C9E  26D9               	addwf	fsr2l,f,c
  5113   001CA0  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5114   001CA2  22DA               	addwfc	fsr2h,f,c
  5115   001CA4  50DF               	movf	indf2,w,c
  5116   001CA6  6E17               	movwf	setMotorPWM@negDuty^0,c
  5117                           
  5118                           ;dc_motor.c: 68:     }
  5119   001CA8  EF79  F00E         	goto	l2487
  5120   001CAC                     l2483:
  5121                           
  5122                           ;dc_motor.c: 70:         posDuty=0;
  5123   001CAC  0E00               	movlw	0
  5124   001CAE  6E16               	movwf	setMotorPWM@posDuty^0,c
  5125   001CB0                     
  5126                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5127   001CB0  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5128   001CB4  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5129   001CB8  50DF               	movf	indf2,w,c
  5130   001CBA  6E14               	movwf	??_setMotorPWM^0,c
  5131   001CBC  5014               	movf	??_setMotorPWM^0,w,c
  5132   001CBE  6E05               	movwf	___wmul@multiplier^0,c
  5133   001CC0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5134   001CC2  EE20 F003          	lfsr	2,3
  5135   001CC6  5012               	movf	setMotorPWM@m^0,w,c
  5136   001CC8  26D9               	addwf	fsr2l,f,c
  5137   001CCA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5138   001CCC  22DA               	addwfc	fsr2h,f,c
  5139   001CCE  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5140   001CD2  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5141   001CD6  ECEC  F015         	call	___wmul	;wreg free
  5142   001CDA  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5143   001CDE  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5144   001CE2  0E00               	movlw	0
  5145   001CE4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5146   001CE6  0E64               	movlw	100
  5147   001CE8  6E0D               	movwf	___lwdiv@divisor^0,c
  5148   001CEA  EC85  F013         	call	___lwdiv	;wreg free
  5149   001CEE  500B               	movf	?___lwdiv^0,w,c
  5150   001CF0  6E17               	movwf	setMotorPWM@negDuty^0,c
  5151   001CF2                     l2487:
  5152                           
  5153                           ;dc_motor.c: 74:     if (m->direction) {
  5154   001CF2  EE20 F001          	lfsr	2,1
  5155   001CF6  5012               	movf	setMotorPWM@m^0,w,c
  5156   001CF8  26D9               	addwf	fsr2l,f,c
  5157   001CFA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5158   001CFC  22DA               	addwfc	fsr2h,f,c
  5159   001CFE  50DF               	movf	indf2,w,c
  5160   001D00  B4D8               	btfsc	status,2,c
  5161   001D02  EF85  F00E         	goto	u1201
  5162   001D06  EF87  F00E         	goto	u1200
  5163   001D0A                     u1201:
  5164   001D0A  EFA9  F00E         	goto	l2491
  5165   001D0E                     u1200:
  5166   001D0E                     
  5167                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5168   001D0E  EE20 F005          	lfsr	2,5
  5169   001D12  5012               	movf	setMotorPWM@m^0,w,c
  5170   001D14  26D9               	addwf	fsr2l,f,c
  5171   001D16  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5172   001D18  22DA               	addwfc	fsr2h,f,c
  5173   001D1A  CFDE F014          	movff	postinc2,??_setMotorPWM
  5174   001D1E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5175   001D22  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5176   001D26  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5177   001D2A  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5178                           
  5179                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5180   001D2E  EE20 F007          	lfsr	2,7
  5181   001D32  5012               	movf	setMotorPWM@m^0,w,c
  5182   001D34  26D9               	addwf	fsr2l,f,c
  5183   001D36  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5184   001D38  22DA               	addwfc	fsr2h,f,c
  5185   001D3A  CFDE F014          	movff	postinc2,??_setMotorPWM
  5186   001D3E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5187   001D42  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5188   001D46  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5189   001D4A  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5190                           
  5191                           ;dc_motor.c: 77:     } else {
  5192   001D4E  EFC9  F00E         	goto	l86
  5193   001D52                     l2491:
  5194                           
  5195                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5196   001D52  EE20 F005          	lfsr	2,5
  5197   001D56  5012               	movf	setMotorPWM@m^0,w,c
  5198   001D58  26D9               	addwf	fsr2l,f,c
  5199   001D5A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5200   001D5C  22DA               	addwfc	fsr2h,f,c
  5201   001D5E  CFDE F014          	movff	postinc2,??_setMotorPWM
  5202   001D62  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5203   001D66  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5204   001D6A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5205   001D6E  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5206                           
  5207                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5208   001D72  EE20 F007          	lfsr	2,7
  5209   001D76  5012               	movf	setMotorPWM@m^0,w,c
  5210   001D78  26D9               	addwf	fsr2l,f,c
  5211   001D7A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5212   001D7C  22DA               	addwfc	fsr2h,f,c
  5213   001D7E  CFDE F014          	movff	postinc2,??_setMotorPWM
  5214   001D82  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5215   001D86  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5216   001D8A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5217   001D8E  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5218   001D92                     l86:
  5219   001D92  0012               	return		;funcret
  5220   001D94                     __end_of_setMotorPWM:
  5221                           	callstack 0
  5222                           
  5223 ;; *************** function ___wmul *****************
  5224 ;; Defined at:
  5225 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  multiplier      2    4[COMRAM] unsigned int 
  5228 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  product         2    8[COMRAM] unsigned int 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  2    4[COMRAM] unsigned int 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, prodl, prodh
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;Total ram usage:        6 bytes
  5245 ;; Hardware stack levels used: 1
  5246 ;; Hardware stack levels required when called: 4
  5247 ;; This function calls:
  5248 ;;		Nothing
  5249 ;; This function is called by:
  5250 ;;		_setMotorPWM
  5251 ;;		_normalise_readings
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text27
  5256   002BD8                     __ptext27:
  5257                           	callstack 0
  5258   002BD8                     ___wmul:
  5259                           	callstack 25
  5260   002BD8  5005               	movf	___wmul@multiplier^0,w,c
  5261   002BDA  0207               	mulwf	___wmul@multiplicand^0,c
  5262   002BDC  CFF3 F009          	movff	prodl,___wmul@product
  5263   002BE0  CFF4 F00A          	movff	prodh,___wmul@product+1
  5264   002BE4  5005               	movf	___wmul@multiplier^0,w,c
  5265   002BE6  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5266   002BE8  50F3               	movf	243,w,c
  5267   002BEA  260A               	addwf	(___wmul@product+1)^0,f,c
  5268   002BEC  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5269   002BEE  0207               	mulwf	___wmul@multiplicand^0,c
  5270   002BF0  50F3               	movf	243,w,c
  5271   002BF2  260A               	addwf	(___wmul@product+1)^0,f,c
  5272   002BF4  C009  F005         	movff	___wmul@product,?___wmul
  5273   002BF8  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5274   002BFC  0012               	return		;funcret
  5275   002BFE                     __end_of___wmul:
  5276                           	callstack 0
  5277                           
  5278 ;; *************** function _make_master_closeness *****************
  5279 ;; Defined at:
  5280 ;;		line 67 in file "colour_identify.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  buf             2   17[COMRAM] PTR unsigned char 
  5283 ;;		 -> main@buf(150), 
  5284 ;;  normalised_v    2   19[COMRAM] PTR unsigned int [9]
  5285 ;;		 -> card_response@normalised_values(54), 
  5286 ;;  master_close    2   21[COMRAM] PTR unsigned int 
  5287 ;;		 -> card_response@master_closeness(18), 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  i               1   43[COMRAM] enum E14551
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5299 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5303 ;;Total ram usage:       27 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; Hardware stack levels required when called: 5
  5306 ;; This function calls:
  5307 ;;		___lwdiv
  5308 ;; This function is called by:
  5309 ;;		_card_response
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text28
  5314   00217C                     __ptext28:
  5315                           	callstack 0
  5316   00217C                     _make_master_closeness:
  5317                           	callstack 24
  5318   00217C                     
  5319                           ;colour_identify.c: 68:     for(colour i = RED; i<=BLACK; i++){
  5320   00217C  0E00               	movlw	0
  5321   00217E  6E2C               	movwf	make_master_closeness@i^0,c
  5322   002180                     l2755:
  5323                           
  5324                           ;colour_identify.c: 70:         master_closeness[i] = (normalised_values[RED][i] + norma
      +                          lised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  5325   002180  502C               	movf	make_master_closeness@i^0,w,c
  5326   002182  0D02               	mullw	2
  5327   002184  CFF3 F018          	movff	prodl,??_make_master_closeness
  5328   002188  CFF4 F019          	movff	prodh,??_make_master_closeness+1
  5329   00218C  5018               	movf	??_make_master_closeness^0,w,c
  5330   00218E  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5331   002190  6E1A               	movwf	(??_make_master_closeness+2)^0,c
  5332   002192  5019               	movf	(??_make_master_closeness+1)^0,w,c
  5333   002194  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5334   002196  6E1B               	movwf	(??_make_master_closeness+3)^0,c
  5335   002198  0E24               	movlw	36
  5336   00219A  241A               	addwf	(??_make_master_closeness+2)^0,w,c
  5337   00219C  6ED9               	movwf	fsr2l,c
  5338   00219E  0E00               	movlw	0
  5339   0021A0  201B               	addwfc	(??_make_master_closeness+3)^0,w,c
  5340   0021A2  6EDA               	movwf	fsr2h,c
  5341   0021A4  CFDE F01C          	movff	postinc2,??_make_master_closeness+4
  5342   0021A8  CFDD F01D          	movff	postdec2,??_make_master_closeness+5
  5343   0021AC  502C               	movf	make_master_closeness@i^0,w,c
  5344   0021AE  0D02               	mullw	2
  5345   0021B0  CFF3 F01E          	movff	prodl,??_make_master_closeness+6
  5346   0021B4  CFF4 F01F          	movff	prodh,??_make_master_closeness+7
  5347   0021B8  501E               	movf	(??_make_master_closeness+6)^0,w,c
  5348   0021BA  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5349   0021BC  6E20               	movwf	(??_make_master_closeness+8)^0,c
  5350   0021BE  501F               	movf	(??_make_master_closeness+7)^0,w,c
  5351   0021C0  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5352   0021C2  6E21               	movwf	(??_make_master_closeness+9)^0,c
  5353   0021C4  0E12               	movlw	18
  5354   0021C6  2420               	addwf	(??_make_master_closeness+8)^0,w,c
  5355   0021C8  6ED9               	movwf	fsr2l,c
  5356   0021CA  0E00               	movlw	0
  5357   0021CC  2021               	addwfc	(??_make_master_closeness+9)^0,w,c
  5358   0021CE  6EDA               	movwf	fsr2h,c
  5359   0021D0  CFDE F022          	movff	postinc2,??_make_master_closeness+10
  5360   0021D4  CFDD F023          	movff	postdec2,??_make_master_closeness+11
  5361   0021D8  502C               	movf	make_master_closeness@i^0,w,c
  5362   0021DA  0D02               	mullw	2
  5363   0021DC  CFF3 F024          	movff	prodl,??_make_master_closeness+12
  5364   0021E0  CFF4 F025          	movff	prodh,??_make_master_closeness+13
  5365   0021E4  5024               	movf	(??_make_master_closeness+12)^0,w,c
  5366   0021E6  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5367   0021E8  6ED9               	movwf	fsr2l,c
  5368   0021EA  5025               	movf	(??_make_master_closeness+13)^0,w,c
  5369   0021EC  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5370   0021EE  6EDA               	movwf	fsr2h,c
  5371   0021F0  CFDE F026          	movff	postinc2,??_make_master_closeness+14
  5372   0021F4  CFDD F027          	movff	postdec2,??_make_master_closeness+15
  5373   0021F8  5022               	movf	(??_make_master_closeness+10)^0,w,c
  5374   0021FA  2426               	addwf	(??_make_master_closeness+14)^0,w,c
  5375   0021FC  6E28               	movwf	(??_make_master_closeness+16)^0,c
  5376   0021FE  5023               	movf	(??_make_master_closeness+11)^0,w,c
  5377   002200  2027               	addwfc	(??_make_master_closeness+15)^0,w,c
  5378   002202  6E29               	movwf	(??_make_master_closeness+17)^0,c
  5379   002204  501C               	movf	(??_make_master_closeness+4)^0,w,c
  5380   002206  2428               	addwf	(??_make_master_closeness+16)^0,w,c
  5381   002208  6E0B               	movwf	___lwdiv@dividend^0,c
  5382   00220A  501D               	movf	(??_make_master_closeness+5)^0,w,c
  5383   00220C  2029               	addwfc	(??_make_master_closeness+17)^0,w,c
  5384   00220E  6E0C               	movwf	(___lwdiv@dividend+1)^0,c
  5385   002210  0E00               	movlw	0
  5386   002212  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5387   002214  0E03               	movlw	3
  5388   002216  6E0D               	movwf	___lwdiv@divisor^0,c
  5389   002218  EC85  F013         	call	___lwdiv	;wreg free
  5390   00221C  502C               	movf	make_master_closeness@i^0,w,c
  5391   00221E  0D02               	mullw	2
  5392   002220  CFF3 F02A          	movff	prodl,??_make_master_closeness+18
  5393   002224  CFF4 F02B          	movff	prodh,??_make_master_closeness+19
  5394   002228  502A               	movf	(??_make_master_closeness+18)^0,w,c
  5395   00222A  2416               	addwf	make_master_closeness@master_closeness^0,w,c
  5396   00222C  6ED9               	movwf	fsr2l,c
  5397   00222E  502B               	movf	(??_make_master_closeness+19)^0,w,c
  5398   002230  2017               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  5399   002232  6EDA               	movwf	fsr2h,c
  5400   002234  C00B  FFDE         	movff	?___lwdiv,postinc2
  5401   002238  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  5402   00223C                     
  5403                           ;colour_identify.c: 75:     }
  5404   00223C  2A2C               	incf	make_master_closeness@i^0,f,c
  5405   00223E  0E08               	movlw	8
  5406   002240  642C               	cpfsgt	make_master_closeness@i^0,c
  5407   002242  EF25  F011         	goto	u1391
  5408   002246  EF27  F011         	goto	u1390
  5409   00224A                     u1391:
  5410   00224A  EFC0  F010         	goto	l2755
  5411   00224E                     u1390:
  5412   00224E  0012               	return		;funcret
  5413   002250                     __end_of_make_master_closeness:
  5414                           	callstack 0
  5415                           
  5416 ;; *************** function _determine_card *****************
  5417 ;; Defined at:
  5418 ;;		line 78 in file "colour_identify.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  5421 ;;		 -> card_response@master_closeness(18), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  i               1   13[COMRAM] enum E14551
  5424 ;;  current_smal    2   10[COMRAM] unsigned int 
  5425 ;;  predicted_co    1   12[COMRAM] enum E14551
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      enum E14551
  5428 ;; Registers used:
  5429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;Total ram usage:       10 bytes
  5440 ;; Hardware stack levels used: 1
  5441 ;; Hardware stack levels required when called: 4
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_card_response
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text29
  5450   002610                     __ptext29:
  5451                           	callstack 0
  5452   002610                     _determine_card:
  5453                           	callstack 25
  5454   002610                     
  5455                           ;colour_identify.c: 80:     colour predicted_colour = RED;
  5456   002610  0E00               	movlw	0
  5457   002612  6E0D               	movwf	determine_card@predicted_colour^0,c
  5458   002614                     
  5459                           ;colour_identify.c: 81:     unsigned int current_smallest = master_closeness[RED];
  5460   002614  C005  FFD9         	movff	determine_card@master_closeness,fsr2l
  5461   002618  C006  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  5462   00261C  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  5463   002620  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  5464   002624                     
  5465                           ;colour_identify.c: 82:     for(colour i = GREEN; i<=BLACK; i++){
  5466   002624  0E01               	movlw	1
  5467   002626  6E0E               	movwf	determine_card@i^0,c
  5468   002628                     l2771:
  5469                           
  5470                           ;colour_identify.c: 83:         if(master_closeness[i] < current_smallest){
  5471   002628  500E               	movf	determine_card@i^0,w,c
  5472   00262A  0D02               	mullw	2
  5473   00262C  CFF3 F007          	movff	prodl,??_determine_card
  5474   002630  CFF4 F008          	movff	prodh,??_determine_card+1
  5475   002634  5007               	movf	??_determine_card^0,w,c
  5476   002636  2405               	addwf	determine_card@master_closeness^0,w,c
  5477   002638  6ED9               	movwf	fsr2l,c
  5478   00263A  5008               	movf	(??_determine_card+1)^0,w,c
  5479   00263C  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5480   00263E  6EDA               	movwf	fsr2h,c
  5481   002640  500B               	movf	determine_card@current_smallest^0,w,c
  5482   002642  5CDE               	subwf	postinc2,w,c
  5483   002644  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  5484   002646  58DE               	subwfb	postinc2,w,c
  5485   002648  B0D8               	btfsc	status,0,c
  5486   00264A  EF29  F013         	goto	u1401
  5487   00264E  EF2B  F013         	goto	u1400
  5488   002652                     u1401:
  5489   002652  EF3D  F013         	goto	l2777
  5490   002656                     u1400:
  5491   002656                     
  5492                           ;colour_identify.c: 84:             current_smallest = master_closeness[i];
  5493   002656  500E               	movf	determine_card@i^0,w,c
  5494   002658  0D02               	mullw	2
  5495   00265A  CFF3 F007          	movff	prodl,??_determine_card
  5496   00265E  CFF4 F008          	movff	prodh,??_determine_card+1
  5497   002662  5007               	movf	??_determine_card^0,w,c
  5498   002664  2405               	addwf	determine_card@master_closeness^0,w,c
  5499   002666  6ED9               	movwf	fsr2l,c
  5500   002668  5008               	movf	(??_determine_card+1)^0,w,c
  5501   00266A  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5502   00266C  6EDA               	movwf	fsr2h,c
  5503   00266E  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  5504   002672  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  5505   002676                     
  5506                           ;colour_identify.c: 85:             predicted_colour = i;
  5507   002676  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  5508   00267A                     l2777:
  5509                           
  5510                           ;colour_identify.c: 87:     }
  5511   00267A  2A0E               	incf	determine_card@i^0,f,c
  5512   00267C  0E08               	movlw	8
  5513   00267E  640E               	cpfsgt	determine_card@i^0,c
  5514   002680  EF44  F013         	goto	u1411
  5515   002684  EF46  F013         	goto	u1410
  5516   002688                     u1411:
  5517   002688  EF14  F013         	goto	l2771
  5518   00268C                     u1410:
  5519   00268C                     
  5520                           ;colour_identify.c: 88:     return predicted_colour;
  5521   00268C  500D               	movf	determine_card@predicted_colour^0,w,c
  5522   00268E  0012               	return		;funcret
  5523   002690                     __end_of_determine_card:
  5524                           	callstack 0
  5525                           
  5526 ;; *************** function _collect_avg_readings *****************
  5527 ;; Defined at:
  5528 ;;		line 10 in file "colour_identify.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  5531 ;;		 -> main@red_read(2), 
  5532 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  5533 ;;		 -> main@green_read(2), 
  5534 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  5535 ;;		 -> main@blue_read(2), 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  i               2   31[COMRAM] int 
  5538 ;;  i               2   29[COMRAM] int 
  5539 ;;  i               2   27[COMRAM] int 
  5540 ;;  i               2   25[COMRAM] int 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5550 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5553 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5554 ;;Total ram usage:       16 bytes
  5555 ;; Hardware stack levels used: 1
  5556 ;; Hardware stack levels required when called: 7
  5557 ;; This function calls:
  5558 ;;		___lwdiv
  5559 ;;		_color_read_Blue
  5560 ;;		_color_read_Green
  5561 ;;		_color_read_Red
  5562 ;; This function is called by:
  5563 ;;		_main
  5564 ;;		_card_response
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text30
  5569   0018BA                     __ptext30:
  5570                           	callstack 0
  5571   0018BA                     _collect_avg_readings:
  5572                           	callstack 23
  5573   0018BA                     
  5574                           ;colour_identify.c: 10: void collect_avg_readings(unsigned int *red_read, unsigned int *
      +                          green_read, unsigned int *blue_read);colour_identify.c: 11: {;colour_identify.c: 14:    
      +                           for (int i = 0; i <= 500; i++){
  5575   0018BA  0E00               	movlw	0
  5576   0018BC  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  5577   0018BE  0E00               	movlw	0
  5578   0018C0  6E1A               	movwf	collect_avg_readings@i^0,c
  5579   0018C2                     l2663:
  5580                           
  5581                           ;colour_identify.c: 15:         *red_read = color_read_Red();
  5582   0018C2  EC6E  F014         	call	_color_read_Red	;wreg free
  5583   0018C6  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5584   0018CA  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5585   0018CE  C009  FFDE         	movff	?_color_read_Red,postinc2
  5586   0018D2  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  5587                           
  5588                           ;colour_identify.c: 16:         *green_read = color_read_Green();
  5589   0018D6  EC96  F014         	call	_color_read_Green	;wreg free
  5590   0018DA  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5591   0018DE  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5592   0018E2  C009  FFDE         	movff	?_color_read_Green,postinc2
  5593   0018E6  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  5594                           
  5595                           ;colour_identify.c: 17:         *blue_read = color_read_Blue();
  5596   0018EA  ECBE  F014         	call	_color_read_Blue	;wreg free
  5597   0018EE  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5598   0018F2  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5599   0018F6  C009  FFDE         	movff	?_color_read_Blue,postinc2
  5600   0018FA  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  5601   0018FE                     
  5602                           ;colour_identify.c: 18:     }
  5603   0018FE  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  5604   001900  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  5605   001902  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  5606   001904  EF8D  F00C         	goto	u1331
  5607   001908  0EF5               	movlw	245
  5608   00190A  5C1A               	subwf	collect_avg_readings@i^0,w,c
  5609   00190C  0E01               	movlw	1
  5610   00190E  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  5611   001910  A0D8               	btfss	status,0,c
  5612   001912  EF8D  F00C         	goto	u1331
  5613   001916  EF8F  F00C         	goto	u1330
  5614   00191A                     u1331:
  5615   00191A  EF61  F00C         	goto	l2663
  5616   00191E                     u1330:
  5617   00191E                     
  5618                           ;colour_identify.c: 22:     for(int i = 0; i <= 2; i++){
  5619   00191E  0E00               	movlw	0
  5620   001920  6E1D               	movwf	(collect_avg_readings@i_1596+1)^0,c
  5621   001922  0E00               	movlw	0
  5622   001924  6E1C               	movwf	collect_avg_readings@i_1596^0,c
  5623   001926                     l2675:
  5624                           
  5625                           ;colour_identify.c: 23:         *red_read += color_read_Red();
  5626   001926  EC6E  F014         	call	_color_read_Red	;wreg free
  5627   00192A  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5628   00192E  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5629   001932  5009               	movf	?_color_read_Red^0,w,c
  5630   001934  26DE               	addwf	postinc2,f,c
  5631   001936  500A               	movf	(?_color_read_Red+1)^0,w,c
  5632   001938  22DD               	addwfc	postdec2,f,c
  5633   00193A                     
  5634                           ;colour_identify.c: 24:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5635   00193A  0E11               	movlw	17
  5636   00193C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  5637   00193E  0E3C               	movlw	60
  5638   001940  6E18               	movwf	??_collect_avg_readings^0,c
  5639   001942  0ECB               	movlw	203
  5640   001944                     u2167:
  5641   001944  2EE8               	decfsz	wreg,f,c
  5642   001946  D7FE               	bra	u2167
  5643   001948  2E18               	decfsz	??_collect_avg_readings^0,f,c
  5644   00194A  D7FC               	bra	u2167
  5645   00194C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5646   00194E  D7FA               	bra	u2167
  5647   001950  F000               	nop	
  5648   001952                     
  5649                           ;colour_identify.c: 25:     }
  5650   001952  4A1C               	infsnz	collect_avg_readings@i_1596^0,f,c
  5651   001954  2A1D               	incf	(collect_avg_readings@i_1596+1)^0,f,c
  5652   001956  BE1D               	btfsc	(collect_avg_readings@i_1596+1)^0,7,c
  5653   001958  EFB7  F00C         	goto	u1341
  5654   00195C  501D               	movf	(collect_avg_readings@i_1596+1)^0,w,c
  5655   00195E  E109               	bnz	u1340
  5656   001960  0E03               	movlw	3
  5657   001962  5C1C               	subwf	collect_avg_readings@i_1596^0,w,c
  5658   001964  A0D8               	btfss	status,0,c
  5659   001966  EFB7  F00C         	goto	u1341
  5660   00196A  EFB9  F00C         	goto	u1340
  5661   00196E                     u1341:
  5662   00196E  EF93  F00C         	goto	l2675
  5663   001972                     u1340:
  5664   001972                     
  5665                           ;colour_identify.c: 26:     *red_read = *red_read/3;
  5666   001972  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5667   001976  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5668   00197A  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  5669   00197E  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  5670   001982  0E00               	movlw	0
  5671   001984  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5672   001986  0E03               	movlw	3
  5673   001988  6E0D               	movwf	___lwdiv@divisor^0,c
  5674   00198A  EC85  F013         	call	___lwdiv	;wreg free
  5675   00198E  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5676   001992  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5677   001996  C00B  FFDE         	movff	?___lwdiv,postinc2
  5678   00199A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  5679   00199E                     
  5680                           ;colour_identify.c: 28:     for(int i = 0; i <= 2; i++){
  5681   00199E  0E00               	movlw	0
  5682   0019A0  6E1F               	movwf	(collect_avg_readings@i_1597+1)^0,c
  5683   0019A2  0E00               	movlw	0
  5684   0019A4  6E1E               	movwf	collect_avg_readings@i_1597^0,c
  5685   0019A6                     l2691:
  5686                           
  5687                           ;colour_identify.c: 29:         *green_read += color_read_Green();
  5688   0019A6  EC96  F014         	call	_color_read_Green	;wreg free
  5689   0019AA  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5690   0019AE  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5691   0019B2  5009               	movf	?_color_read_Green^0,w,c
  5692   0019B4  26DE               	addwf	postinc2,f,c
  5693   0019B6  500A               	movf	(?_color_read_Green+1)^0,w,c
  5694   0019B8  22DD               	addwfc	postdec2,f,c
  5695   0019BA                     
  5696                           ;colour_identify.c: 30:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5697   0019BA  0E11               	movlw	17
  5698   0019BC  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  5699   0019BE  0E3C               	movlw	60
  5700   0019C0  6E18               	movwf	??_collect_avg_readings^0,c
  5701   0019C2  0ECB               	movlw	203
  5702   0019C4                     u2177:
  5703   0019C4  2EE8               	decfsz	wreg,f,c
  5704   0019C6  D7FE               	bra	u2177
  5705   0019C8  2E18               	decfsz	??_collect_avg_readings^0,f,c
  5706   0019CA  D7FC               	bra	u2177
  5707   0019CC  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5708   0019CE  D7FA               	bra	u2177
  5709   0019D0  F000               	nop	
  5710   0019D2                     
  5711                           ;colour_identify.c: 31:     }
  5712   0019D2  4A1E               	infsnz	collect_avg_readings@i_1597^0,f,c
  5713   0019D4  2A1F               	incf	(collect_avg_readings@i_1597+1)^0,f,c
  5714   0019D6  BE1F               	btfsc	(collect_avg_readings@i_1597+1)^0,7,c
  5715   0019D8  EFF7  F00C         	goto	u1351
  5716   0019DC  501F               	movf	(collect_avg_readings@i_1597+1)^0,w,c
  5717   0019DE  E109               	bnz	u1350
  5718   0019E0  0E03               	movlw	3
  5719   0019E2  5C1E               	subwf	collect_avg_readings@i_1597^0,w,c
  5720   0019E4  A0D8               	btfss	status,0,c
  5721   0019E6  EFF7  F00C         	goto	u1351
  5722   0019EA  EFF9  F00C         	goto	u1350
  5723   0019EE                     u1351:
  5724   0019EE  EFD3  F00C         	goto	l2691
  5725   0019F2                     u1350:
  5726   0019F2                     
  5727                           ;colour_identify.c: 32:     *green_read = *green_read/3;
  5728   0019F2  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5729   0019F6  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5730   0019FA  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  5731   0019FE  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  5732   001A02  0E00               	movlw	0
  5733   001A04  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5734   001A06  0E03               	movlw	3
  5735   001A08  6E0D               	movwf	___lwdiv@divisor^0,c
  5736   001A0A  EC85  F013         	call	___lwdiv	;wreg free
  5737   001A0E  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5738   001A12  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5739   001A16  C00B  FFDE         	movff	?___lwdiv,postinc2
  5740   001A1A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  5741   001A1E                     
  5742                           ;colour_identify.c: 34:     for(int i = 0; i <= 2; i++){
  5743   001A1E  0E00               	movlw	0
  5744   001A20  6E21               	movwf	(collect_avg_readings@i_1598+1)^0,c
  5745   001A22  0E00               	movlw	0
  5746   001A24  6E20               	movwf	collect_avg_readings@i_1598^0,c
  5747   001A26                     l2707:
  5748                           
  5749                           ;colour_identify.c: 35:         *blue_read += color_read_Blue();
  5750   001A26  ECBE  F014         	call	_color_read_Blue	;wreg free
  5751   001A2A  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5752   001A2E  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5753   001A32  5009               	movf	?_color_read_Blue^0,w,c
  5754   001A34  26DE               	addwf	postinc2,f,c
  5755   001A36  500A               	movf	(?_color_read_Blue+1)^0,w,c
  5756   001A38  22DD               	addwfc	postdec2,f,c
  5757   001A3A                     
  5758                           ;colour_identify.c: 36:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5759   001A3A  0E11               	movlw	17
  5760   001A3C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  5761   001A3E  0E3C               	movlw	60
  5762   001A40  6E18               	movwf	??_collect_avg_readings^0,c
  5763   001A42  0ECB               	movlw	203
  5764   001A44                     u2187:
  5765   001A44  2EE8               	decfsz	wreg,f,c
  5766   001A46  D7FE               	bra	u2187
  5767   001A48  2E18               	decfsz	??_collect_avg_readings^0,f,c
  5768   001A4A  D7FC               	bra	u2187
  5769   001A4C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5770   001A4E  D7FA               	bra	u2187
  5771   001A50  F000               	nop	
  5772   001A52                     
  5773                           ;colour_identify.c: 37:     }
  5774   001A52  4A20               	infsnz	collect_avg_readings@i_1598^0,f,c
  5775   001A54  2A21               	incf	(collect_avg_readings@i_1598+1)^0,f,c
  5776   001A56  BE21               	btfsc	(collect_avg_readings@i_1598+1)^0,7,c
  5777   001A58  EF37  F00D         	goto	u1361
  5778   001A5C  5021               	movf	(collect_avg_readings@i_1598+1)^0,w,c
  5779   001A5E  E109               	bnz	u1360
  5780   001A60  0E03               	movlw	3
  5781   001A62  5C20               	subwf	collect_avg_readings@i_1598^0,w,c
  5782   001A64  A0D8               	btfss	status,0,c
  5783   001A66  EF37  F00D         	goto	u1361
  5784   001A6A  EF39  F00D         	goto	u1360
  5785   001A6E                     u1361:
  5786   001A6E  EF13  F00D         	goto	l2707
  5787   001A72                     u1360:
  5788   001A72                     
  5789                           ;colour_identify.c: 38:     *blue_read = *blue_read/3;
  5790   001A72  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5791   001A76  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5792   001A7A  CFDE F00B          	movff	postinc2,___lwdiv@dividend
  5793   001A7E  CFDD F00C          	movff	postdec2,___lwdiv@dividend+1
  5794   001A82  0E00               	movlw	0
  5795   001A84  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5796   001A86  0E03               	movlw	3
  5797   001A88  6E0D               	movwf	___lwdiv@divisor^0,c
  5798   001A8A  EC85  F013         	call	___lwdiv	;wreg free
  5799   001A8E  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5800   001A92  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5801   001A96  C00B  FFDE         	movff	?___lwdiv,postinc2
  5802   001A9A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  5803   001A9E  0012               	return		;funcret
  5804   001AA0                     __end_of_collect_avg_readings:
  5805                           	callstack 0
  5806                           
  5807 ;; *************** function _color_read_Red *****************
  5808 ;; Defined at:
  5809 ;;		line 29 in file "color.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  tmp             2   13[COMRAM] unsigned int 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  2    8[COMRAM] unsigned int 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5825 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5827 ;;Total ram usage:        7 bytes
  5828 ;; Hardware stack levels used: 1
  5829 ;; Hardware stack levels required when called: 6
  5830 ;; This function calls:
  5831 ;;		_I2C_2_Master_Read
  5832 ;;		_I2C_2_Master_RepStart
  5833 ;;		_I2C_2_Master_Start
  5834 ;;		_I2C_2_Master_Stop
  5835 ;;		_I2C_2_Master_Write
  5836 ;; This function is called by:
  5837 ;;		_main
  5838 ;;		_collect_avg_readings
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text31
  5843   0028DC                     __ptext31:
  5844                           	callstack 0
  5845   0028DC                     _color_read_Red:
  5846                           	callstack 24
  5847   0028DC                     
  5848                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  5849   0028DC  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  5850                           
  5851                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  5852   0028E0  0E52               	movlw	82
  5853   0028E2  EC5A  F016         	call	_I2C_2_Master_Write
  5854                           
  5855                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  5856   0028E6  0EB6               	movlw	182
  5857   0028E8  EC5A  F016         	call	_I2C_2_Master_Write
  5858                           
  5859                           ;color.c: 35:  I2C_2_Master_RepStart();
  5860   0028EC  EC66  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5861                           
  5862                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  5863   0028F0  0E53               	movlw	83
  5864   0028F2  EC5A  F016         	call	_I2C_2_Master_Write
  5865                           
  5866                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  5867   0028F6  0E01               	movlw	1
  5868   0028F8  EC08  F015         	call	_I2C_2_Master_Read
  5869   0028FC  6E0B               	movwf	??_color_read_Red^0,c
  5870   0028FE  500B               	movf	??_color_read_Red^0,w,c
  5871   002900  6E0E               	movwf	color_read_Red@tmp^0,c
  5872   002902  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  5873                           
  5874                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5875   002904  0E00               	movlw	0
  5876   002906  EC08  F015         	call	_I2C_2_Master_Read
  5877   00290A  6E0B               	movwf	??_color_read_Red^0,c
  5878   00290C  500B               	movf	??_color_read_Red^0,w,c
  5879   00290E  6E0D               	movwf	(??_color_read_Red+2)^0,c
  5880   002910  6A0C               	clrf	(??_color_read_Red+1)^0,c
  5881   002912  500E               	movf	color_read_Red@tmp^0,w,c
  5882   002914  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  5883   002916  6E0E               	movwf	color_read_Red@tmp^0,c
  5884   002918  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  5885   00291A  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  5886   00291C  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  5887                           
  5888                           ;color.c: 39:  I2C_2_Master_Stop();
  5889   00291E  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  5890   002922                     
  5891                           ;color.c: 40:  return tmp;
  5892   002922  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  5893   002926  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5894   00292A  0012               	return		;funcret
  5895   00292C                     __end_of_color_read_Red:
  5896                           	callstack 0
  5897                           
  5898 ;; *************** function _color_read_Green *****************
  5899 ;; Defined at:
  5900 ;;		line 43 in file "color.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  tmp             2   13[COMRAM] unsigned int 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  2    8[COMRAM] unsigned int 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;Total ram usage:        7 bytes
  5919 ;; Hardware stack levels used: 1
  5920 ;; Hardware stack levels required when called: 6
  5921 ;; This function calls:
  5922 ;;		_I2C_2_Master_Read
  5923 ;;		_I2C_2_Master_RepStart
  5924 ;;		_I2C_2_Master_Start
  5925 ;;		_I2C_2_Master_Stop
  5926 ;;		_I2C_2_Master_Write
  5927 ;; This function is called by:
  5928 ;;		_main
  5929 ;;		_collect_avg_readings
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text32
  5934   00292C                     __ptext32:
  5935                           	callstack 0
  5936   00292C                     _color_read_Green:
  5937                           	callstack 24
  5938   00292C                     
  5939                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  5940   00292C  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  5941                           
  5942                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  5943   002930  0E52               	movlw	82
  5944   002932  EC5A  F016         	call	_I2C_2_Master_Write
  5945                           
  5946                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  5947   002936  0EB8               	movlw	184
  5948   002938  EC5A  F016         	call	_I2C_2_Master_Write
  5949                           
  5950                           ;color.c: 49:  I2C_2_Master_RepStart();
  5951   00293C  EC66  F016         	call	_I2C_2_Master_RepStart	;wreg free
  5952                           
  5953                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  5954   002940  0E53               	movlw	83
  5955   002942  EC5A  F016         	call	_I2C_2_Master_Write
  5956                           
  5957                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  5958   002946  0E01               	movlw	1
  5959   002948  EC08  F015         	call	_I2C_2_Master_Read
  5960   00294C  6E0B               	movwf	??_color_read_Green^0,c
  5961   00294E  500B               	movf	??_color_read_Green^0,w,c
  5962   002950  6E0E               	movwf	color_read_Green@tmp^0,c
  5963   002952  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  5964                           
  5965                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5966   002954  0E00               	movlw	0
  5967   002956  EC08  F015         	call	_I2C_2_Master_Read
  5968   00295A  6E0B               	movwf	??_color_read_Green^0,c
  5969   00295C  500B               	movf	??_color_read_Green^0,w,c
  5970   00295E  6E0D               	movwf	(??_color_read_Green+2)^0,c
  5971   002960  6A0C               	clrf	(??_color_read_Green+1)^0,c
  5972   002962  500E               	movf	color_read_Green@tmp^0,w,c
  5973   002964  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  5974   002966  6E0E               	movwf	color_read_Green@tmp^0,c
  5975   002968  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  5976   00296A  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  5977   00296C  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  5978                           
  5979                           ;color.c: 53:  I2C_2_Master_Stop();
  5980   00296E  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  5981   002972                     
  5982                           ;color.c: 54:  return tmp;
  5983   002972  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  5984   002976  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5985   00297A  0012               	return		;funcret
  5986   00297C                     __end_of_color_read_Green:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function _color_read_Blue *****************
  5990 ;; Defined at:
  5991 ;;		line 57 in file "color.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;		None
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  tmp             2   13[COMRAM] unsigned int 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2    8[COMRAM] unsigned int 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6009 ;;Total ram usage:        7 bytes
  6010 ;; Hardware stack levels used: 1
  6011 ;; Hardware stack levels required when called: 6
  6012 ;; This function calls:
  6013 ;;		_I2C_2_Master_Read
  6014 ;;		_I2C_2_Master_RepStart
  6015 ;;		_I2C_2_Master_Start
  6016 ;;		_I2C_2_Master_Stop
  6017 ;;		_I2C_2_Master_Write
  6018 ;; This function is called by:
  6019 ;;		_main
  6020 ;;		_collect_avg_readings
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text33
  6025   00297C                     __ptext33:
  6026                           	callstack 0
  6027   00297C                     _color_read_Blue:
  6028                           	callstack 24
  6029   00297C                     
  6030                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6031   00297C  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  6032                           
  6033                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6034   002980  0E52               	movlw	82
  6035   002982  EC5A  F016         	call	_I2C_2_Master_Write
  6036                           
  6037                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6038   002986  0EBA               	movlw	186
  6039   002988  EC5A  F016         	call	_I2C_2_Master_Write
  6040                           
  6041                           ;color.c: 63:  I2C_2_Master_RepStart();
  6042   00298C  EC66  F016         	call	_I2C_2_Master_RepStart	;wreg free
  6043                           
  6044                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6045   002990  0E53               	movlw	83
  6046   002992  EC5A  F016         	call	_I2C_2_Master_Write
  6047                           
  6048                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6049   002996  0E01               	movlw	1
  6050   002998  EC08  F015         	call	_I2C_2_Master_Read
  6051   00299C  6E0B               	movwf	??_color_read_Blue^0,c
  6052   00299E  500B               	movf	??_color_read_Blue^0,w,c
  6053   0029A0  6E0E               	movwf	color_read_Blue@tmp^0,c
  6054   0029A2  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  6055                           
  6056                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6057   0029A4  0E00               	movlw	0
  6058   0029A6  EC08  F015         	call	_I2C_2_Master_Read
  6059   0029AA  6E0B               	movwf	??_color_read_Blue^0,c
  6060   0029AC  500B               	movf	??_color_read_Blue^0,w,c
  6061   0029AE  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  6062   0029B0  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  6063   0029B2  500E               	movf	color_read_Blue@tmp^0,w,c
  6064   0029B4  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  6065   0029B6  6E0E               	movwf	color_read_Blue@tmp^0,c
  6066   0029B8  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  6067   0029BA  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  6068   0029BC  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  6069                           
  6070                           ;color.c: 67:  I2C_2_Master_Stop();
  6071   0029BE  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  6072   0029C2                     
  6073                           ;color.c: 68:  return tmp;
  6074   0029C2  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  6075   0029C6  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6076   0029CA  0012               	return		;funcret
  6077   0029CC                     __end_of_color_read_Blue:
  6078                           	callstack 0
  6079                           
  6080 ;; *************** function _I2C_2_Master_RepStart *****************
  6081 ;; Defined at:
  6082 ;;		line 33 in file "i2c.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      void 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used: 1
  6102 ;; Hardware stack levels required when called: 5
  6103 ;; This function calls:
  6104 ;;		_I2C_2_Master_Idle
  6105 ;; This function is called by:
  6106 ;;		_color_read_Red
  6107 ;;		_color_read_Green
  6108 ;;		_color_read_Blue
  6109 ;;		_color_read_Clear
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text34
  6114   002CCC                     __ptext34:
  6115                           	callstack 0
  6116   002CCC                     _I2C_2_Master_RepStart:
  6117                           	callstack 24
  6118   002CCC                     
  6119                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6120   002CCC  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6121   002CD0                     
  6122                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6123   002CD0  010E               	movlb	14	; () banked
  6124   002CD2  83DA               	bsf	218,1,b	;volatile
  6125   002CD4                     
  6126                           ; BSR set to: 14
  6127   002CD4  0012               	return		;funcret
  6128   002CD6                     __end_of_I2C_2_Master_RepStart:
  6129                           	callstack 0
  6130                           
  6131 ;; *************** function _I2C_2_Master_Read *****************
  6132 ;; Defined at:
  6133 ;;		line 51 in file "i2c.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  ack             1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  ack             1    6[COMRAM] unsigned char 
  6138 ;;  tmp             1    7[COMRAM] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      unsigned char 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6152 ;;Total ram usage:        3 bytes
  6153 ;; Hardware stack levels used: 1
  6154 ;; Hardware stack levels required when called: 5
  6155 ;; This function calls:
  6156 ;;		_I2C_2_Master_Idle
  6157 ;; This function is called by:
  6158 ;;		_color_read_Red
  6159 ;;		_color_read_Green
  6160 ;;		_color_read_Blue
  6161 ;;		_color_read_Clear
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text35
  6166   002A10                     __ptext35:
  6167                           	callstack 0
  6168   002A10                     _I2C_2_Master_Read:
  6169                           	callstack 24
  6170                           
  6171                           ; BSR set to: 14
  6172                           ;incstack = 0
  6173                           ;I2C_2_Master_Read@ack stored from wreg
  6174   002A10  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6175   002A12                     
  6176                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6177   002A12  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6178   002A16                     
  6179                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6180   002A16  010E               	movlb	14	; () banked
  6181   002A18  87DA               	bsf	218,3,b	;volatile
  6182                           
  6183                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6184   002A1A  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6185   002A1E                     
  6186                           ;i2c.c: 57:   tmp = SSP2BUF;
  6187   002A1E  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6188                           
  6189                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6190   002A22  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6191   002A26                     
  6192                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6193   002A26  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  6194   002A28  B4D8               	btfsc	status,2,c
  6195   002A2A  EF19  F015         	goto	u1171
  6196   002A2E  EF1D  F015         	goto	u1170
  6197   002A32                     u1171:
  6198   002A32  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6199   002A34  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  6200   002A36  EF1E  F015         	goto	u1188
  6201   002A3A                     u1170:
  6202   002A3A  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6203   002A3C                     u1188:
  6204   002A3C  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  6205   002A3E  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  6206   002A40  010E               	movlb	14	; () banked
  6207   002A42  51DA               	movf	218,w,b	;volatile
  6208   002A44  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6209   002A46  0BDF               	andlw	-33
  6210   002A48  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6211   002A4A  6FDA               	movwf	218,b	;volatile
  6212   002A4C                     
  6213                           ; BSR set to: 14
  6214                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6215   002A4C  89DA               	bsf	218,4,b	;volatile
  6216   002A4E                     
  6217                           ; BSR set to: 14
  6218                           ;i2c.c: 61:   return tmp;
  6219   002A4E  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  6220   002A50                     
  6221                           ; BSR set to: 14
  6222   002A50  0012               	return		;funcret
  6223   002A52                     __end_of_I2C_2_Master_Read:
  6224                           	callstack 0
  6225                           
  6226 ;; *************** function ___lwdiv *****************
  6227 ;; Defined at:
  6228 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  dividend        2   10[COMRAM] unsigned int 
  6231 ;;  divisor         2   12[COMRAM] unsigned int 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  quotient        2   14[COMRAM] unsigned int 
  6234 ;;  counter         1   16[COMRAM] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  2   10[COMRAM] unsigned int 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6244 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6245 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6247 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6248 ;;Total ram usage:        7 bytes
  6249 ;; Hardware stack levels used: 1
  6250 ;; Hardware stack levels required when called: 4
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_setMotorPWM
  6255 ;;		_collect_avg_readings
  6256 ;;		_normalise_readings
  6257 ;;		_make_master_closeness
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text36
  6262   00270A                     __ptext36:
  6263                           	callstack 0
  6264   00270A                     ___lwdiv:
  6265                           	callstack 25
  6266   00270A  0E00               	movlw	0
  6267   00270C  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  6268   00270E  0E00               	movlw	0
  6269   002710  6E0F               	movwf	___lwdiv@quotient^0,c
  6270   002712  500D               	movf	___lwdiv@divisor^0,w,c
  6271   002714  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6272   002716  B4D8               	btfsc	status,2,c
  6273   002718  EF90  F013         	goto	u1041
  6274   00271C  EF92  F013         	goto	u1040
  6275   002720                     u1041:
  6276   002720  EFBA  F013         	goto	l996
  6277   002724                     u1040:
  6278   002724  0E01               	movlw	1
  6279   002726  6E11               	movwf	___lwdiv@counter^0,c
  6280   002728  EF9A  F013         	goto	l2381
  6281   00272C                     l2379:
  6282   00272C  90D8               	bcf	status,0,c
  6283   00272E  360D               	rlcf	___lwdiv@divisor^0,f,c
  6284   002730  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6285   002732  2A11               	incf	___lwdiv@counter^0,f,c
  6286   002734                     l2381:
  6287   002734  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  6288   002736  EF9F  F013         	goto	u1051
  6289   00273A  EFA1  F013         	goto	u1050
  6290   00273E                     u1051:
  6291   00273E  EF96  F013         	goto	l2379
  6292   002742                     u1050:
  6293   002742                     l2383:
  6294   002742  90D8               	bcf	status,0,c
  6295   002744  360F               	rlcf	___lwdiv@quotient^0,f,c
  6296   002746  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6297   002748  500D               	movf	___lwdiv@divisor^0,w,c
  6298   00274A  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6299   00274C  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6300   00274E  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6301   002750  A0D8               	btfss	status,0,c
  6302   002752  EFAD  F013         	goto	u1061
  6303   002756  EFAF  F013         	goto	u1060
  6304   00275A                     u1061:
  6305   00275A  EFB4  F013         	goto	l2391
  6306   00275E                     u1060:
  6307   00275E  500D               	movf	___lwdiv@divisor^0,w,c
  6308   002760  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6309   002762  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6310   002764  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6311   002766  800F               	bsf	___lwdiv@quotient^0,0,c
  6312   002768                     l2391:
  6313   002768  90D8               	bcf	status,0,c
  6314   00276A  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6315   00276C  320D               	rrcf	___lwdiv@divisor^0,f,c
  6316   00276E  2E11               	decfsz	___lwdiv@counter^0,f,c
  6317   002770  EFA1  F013         	goto	l2383
  6318   002774                     l996:
  6319   002774  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6320   002778  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6321   00277C  0012               	return		;funcret
  6322   00277E                     __end_of___lwdiv:
  6323                           	callstack 0
  6324                           
  6325 ;; *************** function _LEDSon_init *****************
  6326 ;; Defined at:
  6327 ;;		line 18 in file "LEDsOn.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;		None
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;		None
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      void 
  6334 ;; Registers used:
  6335 ;;		None
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6345 ;;Total ram usage:        0 bytes
  6346 ;; Hardware stack levels used: 1
  6347 ;; Hardware stack levels required when called: 4
  6348 ;; This function calls:
  6349 ;;		Nothing
  6350 ;; This function is called by:
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text37
  6356   002BFE                     __ptext37:
  6357                           	callstack 0
  6358   002BFE                     _LEDSon_init:
  6359                           	callstack 26
  6360   002BFE                     
  6361                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  6362   002BFE  9288               	bcf	136,1,c	;volatile
  6363                           
  6364                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  6365   002C00  9088               	bcf	136,0,c	;volatile
  6366                           
  6367                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  6368   002C02  9884               	bcf	132,4,c	;volatile
  6369                           
  6370                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  6371   002C04  9684               	bcf	132,3,c	;volatile
  6372                           
  6373                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  6374   002C06  9086               	bcf	134,0,c	;volatile
  6375                           
  6376                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  6377   002C08  9287               	bcf	135,1,c	;volatile
  6378                           
  6379                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  6380   002C0A  9E86               	bcf	134,7,c	;volatile
  6381                           
  6382                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  6383   002C0C  9881               	bcf	129,4,c	;volatile
  6384                           
  6385                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  6386   002C0E  8E7E               	bsf	126,7,c	;volatile
  6387                           
  6388                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  6389   002C10  827F               	bsf	127,1,c	;volatile
  6390                           
  6391                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  6392   002C12  8879               	bsf	121,4,c	;volatile
  6393                           
  6394                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  6395   002C14  987C               	bcf	124,4,c	;volatile
  6396                           
  6397                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  6398   002C16  9280               	bcf	128,1,c	;volatile
  6399                           
  6400                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  6401   002C18  907E               	bcf	126,0,c	;volatile
  6402                           
  6403                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  6404   002C1A  9080               	bcf	128,0,c	;volatile
  6405                           
  6406                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  6407   002C1C  967C               	bcf	124,3,c	;volatile
  6408   002C1E  0012               	return		;funcret
  6409   002C20                     __end_of_LEDSon_init:
  6410                           	callstack 0
  6411                           
  6412 ;; *************** function _Interrupts_init *****************
  6413 ;; Defined at:
  6414 ;;		line 7 in file "interrupts.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 8
  6435 ;; This function calls:
  6436 ;;		_enable_color_interrupt
  6437 ;;		_set_interrupt_threshold
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text38
  6444   002A92                     __ptext38:
  6445                           	callstack 0
  6446   002A92                     _Interrupts_init:
  6447                           	callstack 22
  6448   002A92                     
  6449                           ;interrupts.c: 9:     enable_color_interrupt();
  6450   002A92  EC52  F016         	call	_enable_color_interrupt	;wreg free
  6451                           
  6452                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  6453   002A96  0E00               	movlw	0
  6454   002A98  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  6455   002A9A  0E01               	movlw	1
  6456   002A9C  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  6457   002A9E  0E07               	movlw	7
  6458   002AA0  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  6459   002AA2  0ED0               	movlw	208
  6460   002AA4  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  6461   002AA6  0E00               	movlw	0
  6462   002AA8  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  6463   002AAA  0E04               	movlw	4
  6464   002AAC  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  6465   002AAE  ECBF  F013         	call	_set_interrupt_threshold	;wreg free
  6466   002AB2                     
  6467                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  6468   002AB2  9282               	bcf	130,1,c	;volatile
  6469   002AB4                     
  6470                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  6471   002AB4  010E               	movlb	14	; () banked
  6472   002AB6  939A               	bcf	154,1,b	;volatile
  6473   002AB8                     
  6474                           ; BSR set to: 14
  6475                           ;interrupts.c: 14:     INT1PPS=0x09;
  6476   002AB8  0E09               	movlw	9
  6477   002ABA  010D               	movlb	13	; () banked
  6478   002ABC  6FF1               	movwf	241,b	;volatile
  6479   002ABE                     
  6480                           ; BSR set to: 13
  6481                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  6482   002ABE  010E               	movlb	14	; () banked
  6483   002AC0  8329               	bsf	41,1,b	;volatile
  6484   002AC2                     
  6485                           ; BSR set to: 14
  6486                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  6487   002AC2  831F               	bsf	31,1,b	;volatile
  6488   002AC4                     
  6489                           ; BSR set to: 14
  6490                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  6491   002AC4  92F2               	bcf	242,1,c	;volatile
  6492   002AC6                     
  6493                           ; BSR set to: 14
  6494                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  6495   002AC6  8CF2               	bsf	242,6,c	;volatile
  6496   002AC8                     
  6497                           ; BSR set to: 14
  6498                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  6499   002AC8  8AF2               	bsf	242,5,c	;volatile
  6500   002ACA                     
  6501                           ; BSR set to: 14
  6502                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  6503   002ACA  8CF2               	bsf	242,6,c	;volatile
  6504   002ACC                     
  6505                           ; BSR set to: 14
  6506                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  6507   002ACC  8EF2               	bsf	242,7,c	;volatile
  6508   002ACE                     
  6509                           ; BSR set to: 14
  6510   002ACE  0012               	return		;funcret
  6511   002AD0                     __end_of_Interrupts_init:
  6512                           	callstack 0
  6513                           
  6514 ;; *************** function _set_interrupt_threshold *****************
  6515 ;; Defined at:
  6516 ;;		line 43 in file "interrupts.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  AILT            2    8[COMRAM] unsigned int 
  6519 ;;  AIHT            2   10[COMRAM] unsigned int 
  6520 ;;  persistence     2   12[COMRAM] unsigned int 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;		None
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6532 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6535 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6536 ;;Total ram usage:        8 bytes
  6537 ;; Hardware stack levels used: 1
  6538 ;; Hardware stack levels required when called: 7
  6539 ;; This function calls:
  6540 ;;		_color_writetoaddr
  6541 ;; This function is called by:
  6542 ;;		_Interrupts_init
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text39
  6547   00277E                     __ptext39:
  6548                           	callstack 0
  6549   00277E                     _set_interrupt_threshold:
  6550                           	callstack 22
  6551   00277E                     
  6552                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  6553   00277E  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  6554   002782  0E0C               	movlw	12
  6555   002784  EC20  F016         	call	_color_writetoaddr
  6556                           
  6557                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  6558   002788  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  6559   00278A  6E07               	movwf	color_writetoaddr@value^0,c
  6560   00278C  0E05               	movlw	5
  6561   00278E  EC20  F016         	call	_color_writetoaddr
  6562   002792                     
  6563                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  6564   002792  0E00               	movlw	0
  6565   002794  6E0F               	movwf	_set_interrupt_threshold$2062^0,c
  6566   002796  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  6567   002798  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  6568   00279A  B4D8               	btfsc	status,2,c
  6569   00279C  EFD2  F013         	goto	u1421
  6570   0027A0  EFD4  F013         	goto	u1420
  6571   0027A4                     u1421:
  6572   0027A4  EFD6  F013         	goto	l2913
  6573   0027A8                     u1420:
  6574   0027A8  0E01               	movlw	1
  6575   0027AA  6E0F               	movwf	_set_interrupt_threshold$2062^0,c
  6576   0027AC                     l2913:
  6577   0027AC  C00F  F007         	movff	_set_interrupt_threshold$2062,color_writetoaddr@value
  6578   0027B0  0E04               	movlw	4
  6579   0027B2  EC20  F016         	call	_color_writetoaddr
  6580   0027B6                     
  6581                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  6582   0027B6  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  6583   0027B8  6E07               	movwf	color_writetoaddr@value^0,c
  6584   0027BA  0E07               	movlw	7
  6585   0027BC  EC20  F016         	call	_color_writetoaddr
  6586                           
  6587                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  6588   0027C0  0E00               	movlw	0
  6589   0027C2  6E10               	movwf	_set_interrupt_threshold$2063^0,c
  6590   0027C4  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  6591   0027C6  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  6592   0027C8  B4D8               	btfsc	status,2,c
  6593   0027CA  EFE9  F013         	goto	u1431
  6594   0027CE  EFEB  F013         	goto	u1430
  6595   0027D2                     u1431:
  6596   0027D2  EFED  F013         	goto	l2921
  6597   0027D6                     u1430:
  6598   0027D6  0E01               	movlw	1
  6599   0027D8  6E10               	movwf	_set_interrupt_threshold$2063^0,c
  6600   0027DA                     l2921:
  6601   0027DA  C010  F007         	movff	_set_interrupt_threshold$2063,color_writetoaddr@value
  6602   0027DE  0E06               	movlw	6
  6603   0027E0  EC20  F016         	call	_color_writetoaddr
  6604   0027E4  0012               	return		;funcret
  6605   0027E6                     __end_of_set_interrupt_threshold:
  6606                           	callstack 0
  6607                           
  6608 ;; *************** function _enable_color_interrupt *****************
  6609 ;; Defined at:
  6610 ;;		line 38 in file "interrupts.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used: 1
  6630 ;; Hardware stack levels required when called: 7
  6631 ;; This function calls:
  6632 ;;		_clear_interrupt_flag
  6633 ;;		_color_writetoaddr
  6634 ;; This function is called by:
  6635 ;;		_Interrupts_init
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text40
  6640   002CA4                     __ptext40:
  6641                           	callstack 0
  6642   002CA4                     _enable_color_interrupt:
  6643                           	callstack 22
  6644   002CA4                     
  6645                           ;interrupts.c: 39:     clear_interrupt_flag();
  6646   002CA4  EC3C  F016         	call	_clear_interrupt_flag	;wreg free
  6647                           
  6648                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  6649   002CA8  0E13               	movlw	19
  6650   002CAA  6E07               	movwf	color_writetoaddr@value^0,c
  6651   002CAC  0E00               	movlw	0
  6652   002CAE  EC20  F016         	call	_color_writetoaddr
  6653   002CB2  0012               	return		;funcret
  6654   002CB4                     __end_of_enable_color_interrupt:
  6655                           	callstack 0
  6656                           
  6657 ;; *************** function _color_writetoaddr *****************
  6658 ;; Defined at:
  6659 ;;		line 21 in file "color.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  address         1    wreg     unsigned char 
  6662 ;;  value           1    6[COMRAM] unsigned char 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  address         1    7[COMRAM] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6674 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6678 ;;Total ram usage:        2 bytes
  6679 ;; Hardware stack levels used: 1
  6680 ;; Hardware stack levels required when called: 6
  6681 ;; This function calls:
  6682 ;;		_I2C_2_Master_Start
  6683 ;;		_I2C_2_Master_Stop
  6684 ;;		_I2C_2_Master_Write
  6685 ;; This function is called by:
  6686 ;;		_color_click_init
  6687 ;;		_enable_color_interrupt
  6688 ;;		_set_interrupt_threshold
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text41
  6693   002C40                     __ptext41:
  6694                           	callstack 0
  6695   002C40                     _color_writetoaddr:
  6696                           	callstack 23
  6697                           
  6698                           ;incstack = 0
  6699                           ;color_writetoaddr@address stored from wreg
  6700   002C40  6E08               	movwf	color_writetoaddr@address^0,c
  6701   002C42                     
  6702                           ;color.c: 22:     I2C_2_Master_Start();
  6703   002C42  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  6704                           
  6705                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  6706   002C46  0E52               	movlw	82
  6707   002C48  EC5A  F016         	call	_I2C_2_Master_Write
  6708                           
  6709                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  6710   002C4C  5008               	movf	color_writetoaddr@address^0,w,c
  6711   002C4E  0980               	iorlw	128
  6712   002C50  EC5A  F016         	call	_I2C_2_Master_Write
  6713                           
  6714                           ;color.c: 25:     I2C_2_Master_Write(value);
  6715   002C54  5007               	movf	color_writetoaddr@value^0,w,c
  6716   002C56  EC5A  F016         	call	_I2C_2_Master_Write
  6717                           
  6718                           ;color.c: 26:     I2C_2_Master_Stop();
  6719   002C5A  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  6720   002C5E  0012               	return		;funcret
  6721   002C60                     __end_of_color_writetoaddr:
  6722                           	callstack 0
  6723                           
  6724 ;; *************** function _clear_interrupt_flag *****************
  6725 ;; Defined at:
  6726 ;;		line 52 in file "interrupts.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used: 1
  6746 ;; Hardware stack levels required when called: 6
  6747 ;; This function calls:
  6748 ;;		_I2C_2_Master_Start
  6749 ;;		_I2C_2_Master_Stop
  6750 ;;		_I2C_2_Master_Write
  6751 ;; This function is called by:
  6752 ;;		_enable_color_interrupt
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text42
  6757   002C78                     __ptext42:
  6758                           	callstack 0
  6759   002C78                     _clear_interrupt_flag:
  6760                           	callstack 22
  6761   002C78                     
  6762                           ;interrupts.c: 53:     I2C_2_Master_Start();
  6763   002C78  EC70  F016         	call	_I2C_2_Master_Start	;wreg free
  6764                           
  6765                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  6766   002C7C  0E52               	movlw	82
  6767   002C7E  EC5A  F016         	call	_I2C_2_Master_Write
  6768                           
  6769                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  6770   002C82  0EE6               	movlw	230
  6771   002C84  EC5A  F016         	call	_I2C_2_Master_Write
  6772                           
  6773                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  6774   002C88  EC6B  F016         	call	_I2C_2_Master_Stop	;wreg free
  6775   002C8C  0012               	return		;funcret
  6776   002C8E                     __end_of_clear_interrupt_flag:
  6777                           	callstack 0
  6778                           
  6779 ;; *************** function _I2C_2_Master_Write *****************
  6780 ;; Defined at:
  6781 ;;		line 45 in file "i2c.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  data_byte       1    wreg     unsigned char 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  data_byte       1    5[COMRAM] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used: 1
  6801 ;; Hardware stack levels required when called: 5
  6802 ;; This function calls:
  6803 ;;		_I2C_2_Master_Idle
  6804 ;; This function is called by:
  6805 ;;		_color_writetoaddr
  6806 ;;		_color_read_Red
  6807 ;;		_color_read_Green
  6808 ;;		_color_read_Blue
  6809 ;;		_color_read_Clear
  6810 ;;		_clear_interrupt_flag
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text43
  6815   002CB4                     __ptext43:
  6816                           	callstack 0
  6817   002CB4                     _I2C_2_Master_Write:
  6818                           	callstack 24
  6819                           
  6820                           ;incstack = 0
  6821                           ;I2C_2_Master_Write@data_byte stored from wreg
  6822   002CB4  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  6823   002CB6                     
  6824                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6825   002CB6  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6826   002CBA                     
  6827                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6828   002CBA  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6829   002CBE  0012               	return		;funcret
  6830   002CC0                     __end_of_I2C_2_Master_Write:
  6831                           	callstack 0
  6832                           
  6833 ;; *************** function _I2C_2_Master_Stop *****************
  6834 ;; Defined at:
  6835 ;;		line 39 in file "i2c.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, status,2, status,0, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used: 1
  6855 ;; Hardware stack levels required when called: 5
  6856 ;; This function calls:
  6857 ;;		_I2C_2_Master_Idle
  6858 ;; This function is called by:
  6859 ;;		_color_writetoaddr
  6860 ;;		_color_read_Red
  6861 ;;		_color_read_Green
  6862 ;;		_color_read_Blue
  6863 ;;		_color_read_Clear
  6864 ;;		_clear_interrupt_flag
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text44
  6869   002CD6                     __ptext44:
  6870                           	callstack 0
  6871   002CD6                     _I2C_2_Master_Stop:
  6872                           	callstack 24
  6873   002CD6                     
  6874                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6875   002CD6  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6876   002CDA                     
  6877                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6878   002CDA  010E               	movlb	14	; () banked
  6879   002CDC  85DA               	bsf	218,2,b	;volatile
  6880   002CDE                     
  6881                           ; BSR set to: 14
  6882   002CDE  0012               	return		;funcret
  6883   002CE0                     __end_of_I2C_2_Master_Stop:
  6884                           	callstack 0
  6885                           
  6886 ;; *************** function _I2C_2_Master_Start *****************
  6887 ;; Defined at:
  6888 ;;		line 27 in file "i2c.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;		None
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;		None
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2, status,0, cstack
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6906 ;;Total ram usage:        0 bytes
  6907 ;; Hardware stack levels used: 1
  6908 ;; Hardware stack levels required when called: 5
  6909 ;; This function calls:
  6910 ;;		_I2C_2_Master_Idle
  6911 ;; This function is called by:
  6912 ;;		_color_writetoaddr
  6913 ;;		_color_read_Red
  6914 ;;		_color_read_Green
  6915 ;;		_color_read_Blue
  6916 ;;		_color_read_Clear
  6917 ;;		_clear_interrupt_flag
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text45
  6922   002CE0                     __ptext45:
  6923                           	callstack 0
  6924   002CE0                     _I2C_2_Master_Start:
  6925                           	callstack 24
  6926   002CE0                     
  6927                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6928   002CE0  ECC4  F015         	call	_I2C_2_Master_Idle	;wreg free
  6929   002CE4                     
  6930                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6931   002CE4  010E               	movlb	14	; () banked
  6932   002CE6  81DA               	bsf	218,0,b	;volatile
  6933   002CE8                     
  6934                           ; BSR set to: 14
  6935   002CE8  0012               	return		;funcret
  6936   002CEA                     __end_of_I2C_2_Master_Start:
  6937                           	callstack 0
  6938                           
  6939 ;; *************** function _I2C_2_Master_Idle *****************
  6940 ;; Defined at:
  6941 ;;		line 22 in file "i2c.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;		None
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      void 
  6948 ;; Registers used:
  6949 ;;		wreg, status,2, status,0
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6958 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6959 ;;Total ram usage:        1 bytes
  6960 ;; Hardware stack levels used: 1
  6961 ;; Hardware stack levels required when called: 4
  6962 ;; This function calls:
  6963 ;;		Nothing
  6964 ;; This function is called by:
  6965 ;;		_I2C_2_Master_Start
  6966 ;;		_I2C_2_Master_RepStart
  6967 ;;		_I2C_2_Master_Stop
  6968 ;;		_I2C_2_Master_Write
  6969 ;;		_I2C_2_Master_Read
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text46
  6974   002B88                     __ptext46:
  6975                           	callstack 0
  6976   002B88                     _I2C_2_Master_Idle:
  6977                           	callstack 24
  6978   002B88                     l145:
  6979   002B88  010E               	movlb	14	; () banked
  6980   002B8A  B5D8               	btfsc	216,2,b	;volatile
  6981   002B8C  EFCA  F015         	goto	u1021
  6982   002B90  EFCC  F015         	goto	u1020
  6983   002B94                     u1021:
  6984   002B94  EFC4  F015         	goto	l145
  6985   002B98                     u1020:
  6986   002B98                     
  6987                           ; BSR set to: 14
  6988   002B98  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6989   002B9C  0E1F               	movlw	31
  6990   002B9E  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  6991   002BA0  A4D8               	btfss	status,2,c
  6992   002BA2  EFD5  F015         	goto	u1031
  6993   002BA6  EFD7  F015         	goto	u1030
  6994   002BAA                     u1031:
  6995   002BAA  EFC4  F015         	goto	l145
  6996   002BAE                     u1030:
  6997   002BAE                     
  6998                           ; BSR set to: 14
  6999   002BAE  0012               	return		;funcret
  7000   002BB0                     __end_of_I2C_2_Master_Idle:
  7001                           	callstack 0
  7002                           
  7003 ;; *************** function _HighISR *****************
  7004 ;; Defined at:
  7005 ;;		line 23 in file "interrupts.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;		None
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;		None
  7010 ;; Return value:  Size  Location     Type
  7011 ;;                  1    wreg      void 
  7012 ;; Registers used:
  7013 ;;		wreg, status,2, status,0, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7021 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7023 ;;Total ram usage:        2 bytes
  7024 ;; Hardware stack levels used: 1
  7025 ;; Hardware stack levels required when called: 3
  7026 ;; This function calls:
  7027 ;;		i2_clear_interrupt_flag
  7028 ;; This function is called by:
  7029 ;;		Interrupt level 2
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	intcode
  7034   000008                     __pintcode:
  7035                           	callstack 0
  7036   000008                     _HighISR:
  7037                           	callstack 18
  7038                           
  7039                           ; BSR set to: 14
  7040                           ;incstack = 0
  7041   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7042   00000A                     
  7043                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7044   00000A  010E               	movlb	14	; () banked
  7045   00000C  A333               	btfss	51,1,b	;volatile
  7046   00000E  EF0B  F000         	goto	i2u155_41
  7047   000012  EF0D  F000         	goto	i2u155_40
  7048   000016                     i2u155_41:
  7049   000016  EF39  F000         	goto	i2l489
  7050   00001A                     i2u155_40:
  7051   00001A                     
  7052                           ; BSR set to: 14
  7053   00001A  0100               	movlb	0	; () banked
  7054   00001C  51F2               	movf	_response_in_progress& (0+255),w,b
  7055   00001E  11F3               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7056   000020  A4D8               	btfss	status,2,c
  7057   000022  EF15  F000         	goto	i2u156_41
  7058   000026  EF17  F000         	goto	i2u156_40
  7059   00002A                     i2u156_41:
  7060   00002A  EF39  F000         	goto	i2l489
  7061   00002E                     i2u156_40:
  7062   00002E                     
  7063                           ; BSR set to: 0
  7064                           ;interrupts.c: 27:         card_detected = 1;
  7065   00002E  0E00               	movlw	0
  7066   000030  6FF1               	movwf	(_card_detected+1)& (0+255),b
  7067   000032  0E01               	movlw	1
  7068   000034  6FF0               	movwf	_card_detected& (0+255),b
  7069   000036                     
  7070                           ; BSR set to: 0
  7071                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7072   000036  8E7C               	bsf	124,7,c	;volatile
  7073   000038                     
  7074                           ; BSR set to: 0
  7075                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7076   000038  0E05               	movlw	5
  7077   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7078   00003C  0E0F               	movlw	15
  7079   00003E  6E03               	movwf	??_HighISR^0,c
  7080   000040  0EF1               	movlw	241
  7081   000042                     i2u219_47:
  7082   000042  2EE8               	decfsz	wreg,f,c
  7083   000044  D7FE               	bra	i2u219_47
  7084   000046  2E03               	decfsz	??_HighISR^0,f,c
  7085   000048  D7FC               	bra	i2u219_47
  7086   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7087   00004C  D7FA               	bra	i2u219_47
  7088   00004E  F000               	nop	
  7089   000050                     
  7090                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7091   000050  9E7C               	bcf	124,7,c	;volatile
  7092   000052                     
  7093                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7094   000052  0E05               	movlw	5
  7095   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7096   000056  0E0F               	movlw	15
  7097   000058  6E03               	movwf	??_HighISR^0,c
  7098   00005A  0EF1               	movlw	241
  7099   00005C                     i2u220_47:
  7100   00005C  2EE8               	decfsz	wreg,f,c
  7101   00005E  D7FE               	bra	i2u220_47
  7102   000060  2E03               	decfsz	??_HighISR^0,f,c
  7103   000062  D7FC               	bra	i2u220_47
  7104   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7105   000066  D7FA               	bra	i2u220_47
  7106   000068  F000               	nop	
  7107   00006A                     
  7108                           ;interrupts.c: 32:         clear_interrupt_flag();
  7109   00006A  EC47  F016         	call	i2_clear_interrupt_flag	;wreg free
  7110   00006E                     
  7111                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7112   00006E  010E               	movlb	14	; () banked
  7113   000070  9333               	bcf	51,1,b	;volatile
  7114   000072                     i2l489:
  7115   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7116   000074  0011               	retfie		f
  7117   000076                     __end_of_HighISR:
  7118                           	callstack 0
  7119                           
  7120 ;; *************** function i2_clear_interrupt_flag *****************
  7121 ;; Defined at:
  7122 ;;		line 52 in file "interrupts.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used: 1
  7142 ;; Hardware stack levels required when called: 2
  7143 ;; This function calls:
  7144 ;;		i2_I2C_2_Master_Start
  7145 ;;		i2_I2C_2_Master_Stop
  7146 ;;		i2_I2C_2_Master_Write
  7147 ;; This function is called by:
  7148 ;;		_HighISR
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text48
  7153   002C8E                     __ptext48:
  7154                           	callstack 0
  7155   002C8E                     i2_clear_interrupt_flag:
  7156                           	callstack 18
  7157   002C8E                     
  7158                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7159   002C8E  EC7A  F016         	call	i2_I2C_2_Master_Start	;wreg free
  7160                           
  7161                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7162   002C92  0E52               	movlw	82
  7163   002C94  EC60  F016         	call	i2_I2C_2_Master_Write
  7164                           
  7165                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7166   002C98  0EE6               	movlw	230
  7167   002C9A  EC60  F016         	call	i2_I2C_2_Master_Write
  7168                           
  7169                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7170   002C9E  EC75  F016         	call	i2_I2C_2_Master_Stop	;wreg free
  7171   002CA2  0012               	return		;funcret
  7172   002CA4                     __end_ofi2_clear_interrupt_flag:
  7173                           	callstack 0
  7174                           
  7175 ;; *************** function i2_I2C_2_Master_Write *****************
  7176 ;; Defined at:
  7177 ;;		line 45 in file "i2c.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  data_byte       1    wreg     unsigned char 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  data_byte       1    1[COMRAM] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2, status,0, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;Total ram usage:        1 bytes
  7196 ;; Hardware stack levels used: 1
  7197 ;; Hardware stack levels required when called: 1
  7198 ;; This function calls:
  7199 ;;		i2_I2C_2_Master_Idle
  7200 ;; This function is called by:
  7201 ;;		i2_clear_interrupt_flag
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text49
  7206   002CC0                     __ptext49:
  7207                           	callstack 0
  7208   002CC0                     i2_I2C_2_Master_Write:
  7209                           	callstack 18
  7210                           
  7211                           ;incstack = 0
  7212                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7213   002CC0  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7214   002CC2                     
  7215                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7216   002CC2  ECD8  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7217   002CC6                     
  7218                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7219   002CC6  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7220   002CCA  0012               	return		;funcret
  7221   002CCC                     __end_ofi2_I2C_2_Master_Write:
  7222                           	callstack 0
  7223                           
  7224 ;; *************** function i2_I2C_2_Master_Stop *****************
  7225 ;; Defined at:
  7226 ;;		line 39 in file "i2c.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;		None
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2, status,0, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7244 ;;Total ram usage:        0 bytes
  7245 ;; Hardware stack levels used: 1
  7246 ;; Hardware stack levels required when called: 1
  7247 ;; This function calls:
  7248 ;;		i2_I2C_2_Master_Idle
  7249 ;; This function is called by:
  7250 ;;		i2_clear_interrupt_flag
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text50
  7255   002CEA                     __ptext50:
  7256                           	callstack 0
  7257   002CEA                     i2_I2C_2_Master_Stop:
  7258                           	callstack 18
  7259   002CEA                     
  7260                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7261   002CEA  ECD8  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7262   002CEE                     
  7263                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7264   002CEE  010E               	movlb	14	; () banked
  7265   002CF0  85DA               	bsf	218,2,b	;volatile
  7266   002CF2                     
  7267                           ; BSR set to: 14
  7268   002CF2  0012               	return		;funcret
  7269   002CF4                     __end_ofi2_I2C_2_Master_Stop:
  7270                           	callstack 0
  7271                           
  7272 ;; *************** function i2_I2C_2_Master_Start *****************
  7273 ;; Defined at:
  7274 ;;		line 27 in file "i2c.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      void 
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;Total ram usage:        0 bytes
  7293 ;; Hardware stack levels used: 1
  7294 ;; Hardware stack levels required when called: 1
  7295 ;; This function calls:
  7296 ;;		i2_I2C_2_Master_Idle
  7297 ;; This function is called by:
  7298 ;;		i2_clear_interrupt_flag
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           	psect	text51
  7303   002CF4                     __ptext51:
  7304                           	callstack 0
  7305   002CF4                     i2_I2C_2_Master_Start:
  7306                           	callstack 18
  7307   002CF4                     
  7308                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7309   002CF4  ECD8  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7310   002CF8                     
  7311                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7312   002CF8  010E               	movlb	14	; () banked
  7313   002CFA  81DA               	bsf	218,0,b	;volatile
  7314   002CFC                     
  7315                           ; BSR set to: 14
  7316   002CFC  0012               	return		;funcret
  7317   002CFE                     __end_ofi2_I2C_2_Master_Start:
  7318                           	callstack 0
  7319                           
  7320 ;; *************** function i2_I2C_2_Master_Idle *****************
  7321 ;; Defined at:
  7322 ;;		line 22 in file "i2c.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7340 ;;Total ram usage:        1 bytes
  7341 ;; Hardware stack levels used: 1
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		i2_I2C_2_Master_Start
  7346 ;;		i2_I2C_2_Master_Stop
  7347 ;;		i2_I2C_2_Master_Write
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text52
  7352   002BB0                     __ptext52:
  7353                           	callstack 0
  7354   002BB0                     i2_I2C_2_Master_Idle:
  7355                           	callstack 18
  7356   002BB0                     i2l145:
  7357   002BB0  010E               	movlb	14	; () banked
  7358   002BB2  B5D8               	btfsc	216,2,b	;volatile
  7359   002BB4  EFDE  F015         	goto	i2u131_41
  7360   002BB8  EFE0  F015         	goto	i2u131_40
  7361   002BBC                     i2u131_41:
  7362   002BBC  EFD8  F015         	goto	i2l145
  7363   002BC0                     i2u131_40:
  7364   002BC0                     
  7365                           ; BSR set to: 14
  7366   002BC0  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7367   002BC4  0E1F               	movlw	31
  7368   002BC6  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7369   002BC8  A4D8               	btfss	status,2,c
  7370   002BCA  EFE9  F015         	goto	i2u132_41
  7371   002BCE  EFEB  F015         	goto	i2u132_40
  7372   002BD2                     i2u132_41:
  7373   002BD2  EFD8  F015         	goto	i2l145
  7374   002BD6                     i2u132_40:
  7375   002BD6                     
  7376                           ; BSR set to: 14
  7377   002BD6  0012               	return		;funcret
  7378   002BD8                     __end_ofi2_I2C_2_Master_Idle:
  7379                           	callstack 0
  7380                           
  7381                           	psect	rparam
  7382   000000                     
  7383                           	psect	temp
  7384   00005B                     btemp:
  7385                           	callstack 0
  7386   00005B                     	ds	1
  7387   000000                     int$flags	set	btemp
  7388   000000                     wtemp8	set	btemp+1
  7389   000000                     ttemp5	set	btemp+1
  7390   000000                     ttemp6	set	btemp+4
  7391   000000                     ttemp7	set	btemp+8
  7392                           
  7393                           	psect	idloc
  7394                           
  7395                           ;Config register IDLOC0 @ 0x200000
  7396                           ;	unspecified, using default values
  7397   200000                     	org	2097152
  7398   200000  0FFF               	dw	4095
  7399                           
  7400                           ;Config register IDLOC1 @ 0x200002
  7401                           ;	unspecified, using default values
  7402   200002                     	org	2097154
  7403   200002  0FFF               	dw	4095
  7404                           
  7405                           ;Config register IDLOC2 @ 0x200004
  7406                           ;	unspecified, using default values
  7407   200004                     	org	2097156
  7408   200004  0FFF               	dw	4095
  7409                           
  7410                           ;Config register IDLOC3 @ 0x200006
  7411                           ;	unspecified, using default values
  7412   200006                     	org	2097158
  7413   200006  0FFF               	dw	4095
  7414                           
  7415                           ;Config register IDLOC4 @ 0x200008
  7416                           ;	unspecified, using default values
  7417   200008                     	org	2097160
  7418   200008  0FFF               	dw	4095
  7419                           
  7420                           ;Config register IDLOC5 @ 0x20000A
  7421                           ;	unspecified, using default values
  7422   20000A                     	org	2097162
  7423   20000A  0FFF               	dw	4095
  7424                           
  7425                           ;Config register IDLOC6 @ 0x20000C
  7426                           ;	unspecified, using default values
  7427   20000C                     	org	2097164
  7428   20000C  0FFF               	dw	4095
  7429                           
  7430                           ;Config register IDLOC7 @ 0x20000E
  7431                           ;	unspecified, using default values
  7432   20000E                     	org	2097166
  7433   20000E  0FFF               	dw	4095
  7434                           
  7435                           	psect	config
  7436                           
  7437                           ;Config register CONFIG1L @ 0x300000
  7438                           ;	External Oscillator mode Selection bits
  7439                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7440                           ;	Power-up default value for COSC bits
  7441                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7442   300000                     	org	3145728
  7443   300000  AA                 	db	170
  7444                           
  7445                           ;Config register CONFIG1H @ 0x300001
  7446                           ;	unspecified, using default values
  7447                           ;	Clock Out Enable bit
  7448                           ;	CLKOUTEN = 0x1, unprogrammed default
  7449                           ;	Clock Switch Enable bit
  7450                           ;	CSWEN = 0x1, unprogrammed default
  7451                           ;	Fail-Safe Clock Monitor Enable bit
  7452                           ;	FCMEN = 0x1, unprogrammed default
  7453   300001                     	org	3145729
  7454   300001  FF                 	db	255
  7455                           
  7456                           ;Config register CONFIG2L @ 0x300002
  7457                           ;	unspecified, using default values
  7458                           ;	Master Clear Enable bit
  7459                           ;	MCLRE = 0x1, unprogrammed default
  7460                           ;	Power-up Timer Enable bit
  7461                           ;	PWRTE = 0x1, unprogrammed default
  7462                           ;	Low-power BOR enable bit
  7463                           ;	LPBOREN = 0x1, unprogrammed default
  7464                           ;	Brown-out Reset Enable bits
  7465                           ;	BOREN = 0x3, unprogrammed default
  7466   300002                     	org	3145730
  7467   300002  FF                 	db	255
  7468                           
  7469                           ;Config register CONFIG2H @ 0x300003
  7470                           ;	unspecified, using default values
  7471                           ;	Brown Out Reset Voltage selection bits
  7472                           ;	BORV = 0x3, unprogrammed default
  7473                           ;	ZCD Disable bit
  7474                           ;	ZCD = 0x1, unprogrammed default
  7475                           ;	PPSLOCK bit One-Way Set Enable bit
  7476                           ;	PPS1WAY = 0x1, unprogrammed default
  7477                           ;	Stack Full/Underflow Reset Enable bit
  7478                           ;	STVREN = 0x1, unprogrammed default
  7479                           ;	Debugger Enable bit
  7480                           ;	DEBUG = 0x1, unprogrammed default
  7481                           ;	Extended Instruction Set Enable bit
  7482                           ;	XINST = 0x1, unprogrammed default
  7483   300003                     	org	3145731
  7484   300003  FF                 	db	255
  7485                           
  7486                           ;Config register CONFIG3L @ 0x300004
  7487                           ;	WDT Period Select bits
  7488                           ;	WDTCPS = 0x1F, unprogrammed default
  7489                           ;	WDT operating mode
  7490                           ;	WDTE = OFF, WDT Disabled
  7491   300004                     	org	3145732
  7492   300004  9F                 	db	159
  7493                           
  7494                           ;Config register CONFIG3H @ 0x300005
  7495                           ;	unspecified, using default values
  7496                           ;	WDT Window Select bits
  7497                           ;	WDTCWS = 0x7, unprogrammed default
  7498                           ;	WDT input clock selector
  7499                           ;	WDTCCS = 0x7, unprogrammed default
  7500   300005                     	org	3145733
  7501   300005  FF                 	db	255
  7502                           
  7503                           ;Config register CONFIG4L @ 0x300006
  7504                           ;	unspecified, using default values
  7505                           ;	Write Protection Block 0
  7506                           ;	WRT0 = 0x1, unprogrammed default
  7507                           ;	Write Protection Block 1
  7508                           ;	WRT1 = 0x1, unprogrammed default
  7509                           ;	Write Protection Block 2
  7510                           ;	WRT2 = 0x1, unprogrammed default
  7511                           ;	Write Protection Block 3
  7512                           ;	WRT3 = 0x1, unprogrammed default
  7513                           ;	Write Protection Block 3
  7514                           ;	WRT4 = 0x1, unprogrammed default
  7515                           ;	Write Protection Block 3
  7516                           ;	WRT5 = 0x1, unprogrammed default
  7517                           ;	Write Protection Block 3
  7518                           ;	WRT6 = 0x1, unprogrammed default
  7519                           ;	Write Protection Block 3
  7520                           ;	WRT7 = 0x1, unprogrammed default
  7521   300006                     	org	3145734
  7522   300006  FF                 	db	255
  7523                           
  7524                           ;Config register CONFIG4H @ 0x300007
  7525                           ;	unspecified, using default values
  7526                           ;	Configuration Register Write Protection bit
  7527                           ;	WRTC = 0x1, unprogrammed default
  7528                           ;	Boot Block Write Protection bit
  7529                           ;	WRTB = 0x1, unprogrammed default
  7530                           ;	Data EEPROM Write Protection bit
  7531                           ;	WRTD = 0x1, unprogrammed default
  7532                           ;	Scanner Enable bit
  7533                           ;	SCANE = 0x1, unprogrammed default
  7534                           ;	Low Voltage Programming Enable bit
  7535                           ;	LVP = 0x1, unprogrammed default
  7536   300007                     	org	3145735
  7537   300007  FF                 	db	255
  7538                           
  7539                           ;Config register CONFIG5L @ 0x300008
  7540                           ;	unspecified, using default values
  7541                           ;	UserNVM Program Memory Code Protection bit
  7542                           ;	CP = 0x1, unprogrammed default
  7543                           ;	DataNVM Memory Code Protection bit
  7544                           ;	CPD = 0x1, unprogrammed default
  7545   300008                     	org	3145736
  7546   300008  FF                 	db	255
  7547                           
  7548                           ;Config register CONFIG5H @ 0x300009
  7549                           ;	unspecified, using default values
  7550   300009                     	org	3145737
  7551   300009  FF                 	db	255
  7552                           
  7553                           ;Config register CONFIG6L @ 0x30000A
  7554                           ;	unspecified, using default values
  7555                           ;	Table Read Protection Block 0
  7556                           ;	EBTR0 = 0x1, unprogrammed default
  7557                           ;	Table Read Protection Block 1
  7558                           ;	EBTR1 = 0x1, unprogrammed default
  7559                           ;	Table Read Protection Block 2
  7560                           ;	EBTR2 = 0x1, unprogrammed default
  7561                           ;	Table Read Protection Block 3
  7562                           ;	EBTR3 = 0x1, unprogrammed default
  7563                           ;	Table Read Protection Block 4
  7564                           ;	EBTR4 = 0x1, unprogrammed default
  7565                           ;	Table Read Protection Block 5
  7566                           ;	EBTR5 = 0x1, unprogrammed default
  7567                           ;	Table Read Protection Block 6
  7568                           ;	EBTR6 = 0x1, unprogrammed default
  7569                           ;	Table Read Protection Block 7
  7570                           ;	EBTR7 = 0x1, unprogrammed default
  7571   30000A                     	org	3145738
  7572   30000A  FF                 	db	255
  7573                           
  7574                           ;Config register CONFIG6H @ 0x30000B
  7575                           ;	unspecified, using default values
  7576                           ;	Boot Block Table Read Protection bit
  7577                           ;	EBTRB = 0x1, unprogrammed default
  7578   30000B                     	org	3145739
  7579   30000B  FF                 	db	255
  7580                           tosu	equ	0xFFF
  7581                           tosh	equ	0xFFE
  7582                           tosl	equ	0xFFD
  7583                           stkptr	equ	0xFFC
  7584                           pclatu	equ	0xFFB
  7585                           pclath	equ	0xFFA
  7586                           pcl	equ	0xFF9
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           indf0	equ	0xFEF
  7594                           postinc0	equ	0xFEE
  7595                           postdec0	equ	0xFED
  7596                           preinc0	equ	0xFEC
  7597                           plusw0	equ	0xFEB
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           indf1	equ	0xFE7
  7602                           postinc1	equ	0xFE6
  7603                           postdec1	equ	0xFE5
  7604                           preinc1	equ	0xFE4
  7605                           plusw1	equ	0xFE3
  7606                           fsr1h	equ	0xFE2
  7607                           fsr1l	equ	0xFE1
  7608                           bsr	equ	0xFE0
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           preinc2	equ	0xFDC
  7613                           plusw2	equ	0xFDB
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8

Data Sizes:
    Strings     98
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    120     149
    BANK1           256    232     232
    BANK2           256      0      92
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[21]), STR_1(CODE[41]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[21]), STR_1(CODE[41]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[21]), STR_1(CODE[41]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2553$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[21]), STR_1(CODE[41]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2504$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2504$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_read_Clear->_I2C_2_Master_Read
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    _make_master_closeness->___lwdiv
    _collect_avg_readings->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               354   354      0   60675
                                            118 BANK0      2     2      0
                                              0 BANK1    232   232      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                       87    73     14   41481
                                             31 BANK0     87    73     14
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    8126
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7100
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6639
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5072
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  23    11     12    3831
                                             26 COMRAM    23    11     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     453
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   23324
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    5179
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4571
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    6457
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4875
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    3285
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     811
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    1656
                                             17 COMRAM    27    21      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    2449
                                             17 COMRAM    16    10      6
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1206
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Blue
   _color_read_Clear
     _I2C_2_Master_Read
     _I2C_2_Master_RepStart
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _color_read_Green
   _color_read_Red
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      5C       9       35.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E8      E8       7       90.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     78      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     233      64        0.0%
DATA                 0      0     233       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 15:12:34 2022

                        _color_read_Red 28DC                         _color_read_Blue 297C  
                                    l22 2C5E                                      l31 29CA  
                                    l25 292A                                      l34 28DA  
                                    l19 2B02                                      l28 297A  
                                    l86 1D92                                      l95 260E  
                                    l79 2588                     ___wmul@multiplicand 0007  
                      _color_read_Clear 288C                        _color_read_Green 292C  
                     ??_Interrupts_init 0011                                     l100 2474  
                                   l105 23C6                                     l115 2500  
                                   l142 2B86                                     l151 2CE8  
                                   l160 2CBE                                     l145 2B88  
                                   l321 1A9E                                     l154 2CD4  
                                   l250 13CC                                     l163 2A50  
                                   l331 224E                                     l403 2C62  
                                   l243 12FA                                     l148 2BAE  
                                   l412 2B32                                     l244 1220  
                                   l157 2CDE                                     l245 121E  
                                   l502 2C8C                                     l326 18B8  
                                   l406 2C76                                     l246 122E  
                                   l352 1178                                     l248 13BE  
                                   l337 268E                                     l505 2BFC  
                                   l249 13BA                                     l355 217A  
                                   l276 2C1E                                     l632 1EF6  
                                   l394 2C3E                                     l483 2ACE  
                                   l619 1C26                                     l492 2CB2  
                                   l499 27E4                                     l996 2774  
   normalise_readings@normalised_values 0025                        ??_motor_response 0024  
                                   _abs 2A52                                     _pad 2690  
                 __end_of_card_response 217C                                     prod 000FF3  
                                   wreg 000FE8                                    l1003 277C  
                                  ?_abs 0017                                    l1212 26B2  
                                  l1221 14A0                                    l1223 14A8  
                                  l1216 2708                                    l1224 14EE  
                                  l3001 2AC4                                    l1242 2054  
                                  l3003 2AC6                                    l1235 1690  
                                  l1180 2A88                                    l1260 2318  
                                  l3005 2AC8                                    l1190 288A  
                                  l3007 2ACA                                    l1183 2A90  
                                  l1271 2CFE                                    l1248 2838  
                                  l3009 2ACC                                    l3201 2274  
                                  l3203 227E                                    l3211 29CC  
                                  l1268 2A0E                                    l3221 2A6C  
                                  l3205 229C                                    l3213 29D8  
                                  l3231 1AD6                                    l3223 1AA0  
                                  l3207 22D2                                    l3215 29EA  
                                  l3311 26D2                                    l3303 2690  
                                  l2601 2392                                    l3241 1B32  
                                  l3233 1AE4                                    l3225 1AA4  
                                  l3217 29EE                                    l3313 26D6  
                                  l3305 269E                                    l3321 1448  
                                  l3401 27F2                                    l2363 2B88  
                                  l2451 2CB6                                    l2523 2C42  
                                  l2531 292C                                    l2603 23AE  
                                  l3219 2A52                                    l3251 1B9C  
                                  l3243 1B3A                                    l3235 1B04  
                                  l3227 1AB2                                    l3315 26F4  
                                  l3307 26AA                                    l3331 14C0  
                                  l3323 1458                                    l3403 280E  
                                  l3411 284C                                    l2365 2B98  
                                  l2453 2CBA                                    l2381 2734  
                                  l2373 270A                                    l2461 2CD0  
                                  l2533 2972                                    l2525 28DC  
                                  l2701 1A1E                                    l2621 24DC  
                                  l2613 249E                                    l2605 2476  
                                  l3421 1692                                    l3261 1BE6  
                                  l3253 1BBC                                    l3245 1B4E  
                                  l3237 1B08                                    l3229 1AD2  
                                  l3309 26BE                                    l3341 14F6  
                                  l3333 14C6                                    l3325 1478  
                                  l3317 1414                                    l3405 282E  
                                  l3413 2854                                    l3501 12A6  
                                  l2447 2CE0                                    l2455 2CD6  
                                  l2391 2768                                    l2383 2742  
                                  l2375 2712                                    l2471 2A4C  
                                  l2463 2A12                                    l2527 2922  
                                  l2711 1A52                                    l2367 2BD8  
                                  l2623 24E4                                    l2615 24B6  
                                  l2607 2496                                    l2551 25B4  
                                  l2543 258A                                    l3431 18A8  
                                  l3263 1C06                                    l3255 1BBE  
                                  l3247 1B5C                                    l3239 1B14  
                                  l3271 1DA6                                    l3351 1594  
                                  l3343 1500                                    l3335 14D6  
                                  l3327 1494                                    l3319 1434  
                                  l3415 285C                                    l3511 1332  
                                  l3503 12DA                                    l2449 2CE4  
                                  l2457 2CDA                                    l2393 276E  
                                  l2385 2748                                    l2377 2724  
                                  l2473 2A4E                                    l2465 2A16  
                                  l2537 297C                                    l2713 1A56  
                                  l2369 2BF4                                    l2481 1C98  
                                  l2617 24C2                                    l2553 25D0  
                                  l2545 258E                                    l2561 23C8  
                                  l2801 0EFE                                    l2625 2C62  
                                  l3257 1BD0                                    l3249 1B6E  
                                  l3281 1E16                                    l3273 1DC6  
                                  l3361 165A                                    l3345 1506  
                                  l3353 15F8                                    l3337 14E2  
                                  l3329 14B0                                    l3417 2878  
                                  l3409 283A                                    l3441 20C4  
                                  l3433 2056                                    l3513 1368  
                                  l3505 12E6                                    l2387 275E  
                                  l2379 272C                                    l2467 2A1E  
                                  l2459 2CCC                                    l2539 29C2  
                                  l2715 1A72                                    l2707 1A26  
                                  l2491 1D52                                    l2483 1CAC  
                                  l2619 24CE                                    l2555 25DC  
                                  l2547 259A                                    l2571 2408  
                                  l2563 23E8                                    l2811 0F56  
                                  l2803 0F16                                    l3427 1696  
                                  l2627 2C72                                    l2731 2B08  
                                  l3259 1BD6                                    l3291 1E8E  
                                  l3283 1E1E                                    l3275 1DCA  
                                  l3267 1D94                                    l3363 1660  
                                  l3355 1612                                    l3347 1588  
                                  l3339 14EA                                    l3371 1F20  
                                  l3451 2162                                    l3443 2110  
                                  l3435 2056                                    l2651 2B70  
                                  l3515 1374                                    l3507 12EA  
                                  l2629 2C78                                    l2389 2766  
                                  l2469 2A26                                    l2709 1A3A  
                                  l2485 1CB0                                    l2477 1C28  
                                  l2557 25EA                                    l2549 25A8  
                                  l2581 245C                                    l2573 2420  
                                  l3541 112A                                    l2821 0FBE  
                                  l2813 0F6A                                    l2805 0F2A  
                                  l3429 18A6                                    l2733 2B16  
                                  l3293 1EA0                                    l3285 1E32  
                                  l3277 1DD8                                    l3269 1D98  
                                  l3197 2250                                    l3365 1670  
                                  l3357 1630                                    l3349 158E  
                                  l3381 1F70                                    l3373 1F2E  
                                  l3445 212C                                    l3437 2072  
                                  l2653 2B72                                    l2645 2B5E  
                                  l3517 138E                                    l3509 1302  
                                  l3461 118A                                    l3453 117A  
                                  l2903 2CA4                                    l2911 27A8  
                                  l2663 18C2                                    l2487 1CF2  
                                  l2479 1C44                                    l2559 25F6  
                                  l2575 242C                                    l2591 2342  
                                  l2583 231A                                    l2831 0FD6  
                                  l2815 0F82                                    l2807 0F3E  
                                  l2735 2B1A                                    l3287 1E40  
                                  l3295 1EA6                                    l3279 1DF8  
                                  l3199 2262                                    l3359 164A  
                                  l3383 1F90                                    l3375 1F3C  
                                  l3447 213C                                    l3439 20B8  
                                  l2655 2B74                                    l2647 2B68  
                                  l3519 13CE                                    l3471 11AA  
                                  l3463 118E                                    l3455 117E  
                                  l2921 27DA                                    l2913 27AC  
                                  l2905 277E                                    l2681 1956  
                                  l2665 18FE                                    l2657 18BA  
                                  l2761 2610                                    l2489 1D0E  
                                  l2577 2438                                    l2569 23F0  
                                  l2593 235A                                    l2585 233A  
                                  l2833 0FEA                                    l2817 0F96  
                                  l2729 2B04                                    l3297 1EB6  
                                  l3289 1E6E                                    l3385 1FE6  
                                  l3377 1F40                                    l3393 2028  
                                  l3369 1EF8                                    l3449 2156  
                                  l2649 2B6E                                    l3481 11DC  
                                  l3473 11B2                                    l3465 1192  
                                  l3457 1182                                    l2915 27B6  
                                  l2907 2792                                    l2691 19A6  
                                  l2683 1972                                    l2675 1926  
                                  l2667 1902                                    l2771 2628  
                                  l2763 2614                                    l2755 2180  
                                  l2579 2440                                    l2595 2372  
                                  l2851 105E                                    l2835 1002  
                                  l2819 0FAA                                    l3299 1ED6  
                                  l3379 1F50                                    l3483 11E2  
                                  l3475 11BA                                    l3467 1194  
                                  l3459 1186                                    l2917 27C4  
                                  l2909 2796                                    l2693 19BA  
                                  l2685 199E                                    l2677 193A  
                                  l2669 191E                                    l2781 268C  
                                  l2773 2656                                    l2765 2624  
                                  l2757 223C                                    l2749 217C  
                                  l2597 237E                                    l2853 108A  
                                  l3389 2016                                    l2941 2AEE  
                                  l3493 1230                                    l3485 11EE  
                                  l3477 11CC                                    l3469 1198  
                                  ?_pad 0015                                    l2919 27D6  
                                  l2695 19D2                                    l2679 1952  
                                  l2775 2676                                    l2759 223E  
                                  l2599 238A                                    l2863 10A2  
                                  l2847 1032                                    l2791 0E96  
                                  l3399 27E6                                    l2943 2AF8  
                                  l2935 2AD0                                    l2951 2502  
                                  l3495 124C                                    l3487 1214  
                                  l3479 11D4                                    l2697 19D6  
                                  l2777 267A                                    l2881 10E6  
                                  l2865 10B6                                    l2849 1046  
                                  l2793 0EAA                                    l2785 0E66  
                                  l2937 2AD4                                    l2945 288C  
                                  l2961 2564                                    l2953 250A  
                                  l3497 1266                                    l2699 19F2  
                                  l2779 267C                                    l2883 10FE  
                                  l2795 0EBE                                    l2787 0E6A  
                                  l2939 2ADE                                    l2947 28D2  
                                  l2971 2586                                    l2963 256E  
                                  l2955 2534                                    l3499 1286  
                                  l2973 2BFE                                    l2797 0ED2  
                                  l2789 0E7E                                    l2965 2570  
                                  l2957 2558                                    l2981 2C2E  
                                  l2991 2AB2                                    l2879 10D2  
                                  l2799 0EEA                                    l2967 257A  
                                  l2959 2562                                    l2983 2C38  
                                  l2975 2C20                                    l2993 2AB4  
                                  l2897 1116                                    l2969 257C  
                                  l2985 2C3A                                    l2977 2C2A  
                                  l2995 2AB8                                    l2987 2C3C  
                                  l2979 2C2C                                    l2997 2ABE  
                                  l2989 2A92                                    l2999 2AC2  
                                  STR_1 0E01                                    STR_2 0E44  
                                  STR_3 0E2A                                    STR_4 0E59  
                                  u1020 2B98                                    u1021 2B94  
                                  u1030 2BAE                                    u1031 2BAA  
                                  u1040 2724                                    u1200 1D0E  
                                  u1041 2720                                    u1201 1D0A  
                                  u1050 2742                                    u1051 273E  
                                  u1060 275E                            ?_LEDSon_init 0001  
                                  u1061 275A                                    u2007 0E88  
                                  u1400 2656                                    u1240 25CC  
                                  u1401 2652                                    u1241 25C8  
                                  u2017 0F08                                    u1170 2A3A  
                                  u1330 191E                                    u1410 268C  
                                  u1250 260E                                    u1171 2A32  
                                  u1331 191A                                    u1411 2688  
                                  u1251 260A                                    u2107 23B8  
                                  u2027 0F74                                    u1420 27A8  
                                  u1340 1972                                    u1260 245C  
                                  u1421 27A4                                    u1341 196E  
                                  u1261 2458                                    u2117 2412  
                                  u2037 0FF4                                    u1430 27D6  
                                  u1350 19F2                                    u1190 1C44  
                                  u1270 23AE                                    u1431 27D2  
                                  u1351 19EE                                    u1191 1C40  
                                  u2127 2466                                    u1271 23AA  
                                  u2047 1020                                    u1360 1A72  
                                  u1280 2500                                    u1600 22D2  
                          _BAUD4CONbits 000EE9                                    u1361 1A6E  
                                  u1281 24FC                                    u2137 25A0  
                                  u2057 1050                                    u1601 22CE  
                                  u1290 2C72                                    u1370 2B32  
                                  u1610 2A0E                                    u2147 25E2  
                                  u2067 107C                                    u1291 2C6E  
                                  u1371 2B2E                                    u1611 2A0A  
                                  u1188 2A3C                                    u1620 2A6C  
                                  u1700 1DA6                                    u2157 24D4  
                                  u2077 10C0                                    u1621 2A68  
                                  u1701 1DA2                                    u1390 224E  
                                  u1630 1AB2                                    u1710 1DD8  
                                  u2167 1944                                    u1391 224A  
                                  u2087 10F0                                    u1631 1AAE  
                                  u1711 1DD4                                    u1640 1AE4  
                                  u1720 1E16                                    u1800 1458  
                                  u2177 19C4                                    u2097 2364  
                                  u1641 1AE0                                    u1721 1E12  
                                  u1801 1454                                    u1730 1E40  
                                  u1570 2262                                    u1810 1494  
                                  _T2PR 000FBC                                    u2187 1A44  
                                  u1651 1B0E                                    u1731 1E3C  
                                  u1571 225E                                    u1811 1490  
                                  u1660 1B32                                    u1740 1E6E  
                                  u1580 2274                                    u1820 14C0  
                                  u1900 1F90                                    u1661 1B2E  
                                  u1741 1E6A                                    u1581 2270  
                                  u1821 14BC                                    u1901 1F8C  
                                  u1670 1B5C                                    u1750 1EB6  
                                  u1590 229C                                    u1830 14D6  
                                  u1910 282E                                    u1671 1B58  
                                  u1751 1EB2                                    u1591 2298  
                                  u1831 14D2                                    u1911 282A  
                                  u1920 18B8                                    u1680 1B9C  
                                  u1760 269E                                    u1840 1612  
                                  u1921 18B4                                    u1681 1B98  
                                  u1761 269A                                    u1841 160E  
                                  u1690 1BE6                                    u1770 26F4  
                                  u1850 1630                                    u1930 122E  
                                  u1691 1BE2                                    u1771 26F0  
                                  u1851 162C                                    u1931 122A  
                                  u1860 164A                                    u1780 1444  
                                  u1940 12FA                                    u1861 1646  
                                  u1781 143E                                    u1941 12F6  
                                  u1870 165A                                    u1790 1446  
                                  u1950 13A2                                    u1871 1656  
                                  u1951 1398                                    u1880 1F20  
                                  u1881 1F1C                                    u1890 1F70  
                                  u1970 13CC                                    u1891 1F6C  
                                  u1971 13C8                                    u1968 13A6  
                                  u1987 1380                                    u1997 2AE4  
            normalise_readings@red_read 001D                                    abs@a 0017  
                                  _dbuf 023C                                    _main 117A  
                                  _dtoa 1414                                    _prec 00EE  
                                  pad@i 001C                                    pad@p 0019  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  pad@w 001E                                    fsr2l 000FD9  
                                  btemp 005B                                    _stop 258A  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0076                         card_response@mL 0089  
                       card_response@mR 008B                  __end_of_color_read_Red 292C  
                       __end_of_HighISR 0076                    _response_in_progress 00F2  
           normalise_readings@blue_read 0021                            ___param_bank 000000  
                                 ??_abs 0019                                   ??_pad 001B  
                           _turnRight45 231A                         __end_of___aodiv 1C28  
                                 ?_main 0001                                   ?_dtoa 0020  
                       __end_of___aomod 1EF8                                   ?_stop 0018  
                       __end_of___lwdiv 277E                                   i2l151 2CFC  
                                 i2l160 2CCA                                   i2l145 2BB0  
                                 i2l148 2BD6                                   i2l157 2CF2  
                                 i2l502 2CA2                                   i2l489 0072  
                          vfpfcnvrt@fmt 0045                 ?_enable_color_interrupt 0001  
                          main@red_read 01D0                 __end_of_sendCharSerial4 2C78  
            __end_of_I2C_2_Master_Start 2CEA              __end_of_I2C_2_Master_Write 2CC0  
                                 _flags 00F4                                   _fputc 2250  
                                 _fputs 29CC                                   pad@fp 0015  
        determine_card@master_closeness 0005                 ??_make_master_closeness 0018  
                                 _width 00EC                                   _putch 2CFE  
                                 main@i 01CF                                   dtoa@d 0022  
                                 dtoa@i 0041                                   dtoa@n 0038  
                                 dtoa@p 0034                                   dtoa@s 0040  
                                 dtoa@w 0036                     normalise_readings@i 0031  
                                 tablat 000FF5                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 288C          card_response@normalised_values 008D  
                      card_response@buf 007F                 __end_of_color_read_Blue 29CC  
                 _I2C_2_Master_RepStart 2CCC                         ?_color_read_Red 0009  
                       __initialization 2B34                            __end_of_main 1414  
                          __end_of_dtoa 1692                            __end_of_stop 2610  
        __end_of_enable_color_interrupt 2CB4                                  ??_main 00D6  
                                ??_dtoa 002A                                  ??_stop 001C  
                         __activetblptr 000003                           main@blue_read 01D4  
                          ?_setMotorPWM 0012                                  ?_fputc 0005  
                                ?_fputs 000E                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 0012  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i2l3039 2C8E                                  i2l3161 001A  
                                i2l3171 0052                                  i2l3163 002E  
                                i2l3173 006A                                  i2l3165 0036  
                                i2l3175 006E                                  i2l3167 0038  
                                i2l3159 000A                                  i2l2641 2BB0  
                                i2l3169 0050                                  i2l2643 2BC0  
                                i2l2923 2CF4                                  i2l2931 2CC2  
                                i2l2925 2CF8                                  i2l2933 2CC6  
                                i2l2927 2CEA                                  i2l2929 2CEE  
                                _RG6PPS 000E88                               ??_HighISR 0003  
              __end_of_color_click_init 2B04                  make_master_closeness@i 002C  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0055  
                             ??___aodiv 0015                               ??___aomod 0015  
                                ___wmul 2BD8                      _normalise_readings 1692  
                             ??___lwdiv 000F                                  clear_0 2B3A  
                                clear_1 2B46                                  isa$std 000001  
                                pad@buf 0017                                  dtoa@fp 0020  
          __end_of_clear_interrupt_flag 2C8E                     ?_normalise_readings 001B  
                                fputc@c 0005                                  fputs@c 0012  
                                fputs@i 0013                                  fputs@s 000E  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                                  putch@c 0001  
                      __end_of_vfprintf 283A                                  stop@mL 0018  
                                stop@mR 001A                       ??_initDCmotorsPWM 0005  
                             ??_sprintf 0057                 ?i2_clear_interrupt_flag 0001  
                     card_response@card 00D5                              __accesstop 0060  
               __end_of__initialization 2B54                __end_of_color_read_Clear 28DC  
              __end_of_color_read_Green 297C                  ?_I2C_2_Master_RepStart 0001  
                  ??_normalise_readings 0027                           ___rparam_used 000001  
                      ?_color_read_Blue 0009                         _Interrupts_init 2A92  
          __end_of_collect_avg_readings 1AA0                          __pcstackCOMRAM 0001  
                      _reverseFullSpeed 2476              collect_avg_readings@i_1596 001C  
            collect_avg_readings@i_1597 001E              collect_avg_readings@i_1598 0020  
               _set_interrupt_threshold 277E                           __end_of_fputc 231A  
                         __end_of_fputs 2A10                           __end_of_putch 2D00  
                        main@clear_read 01CC          __end_ofi2_clear_interrupt_flag 2CA4  
                               ??_fputc 0009                                 ??_fputs 0012  
                               ??_putch 0005                              __pbssBANK0 00D8  
                            __pbssBANK2 0200                       _color_writetoaddr 2C40  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0020  
                      motor_response@mR 0022                      ?_color_writetoaddr 0007  
                               ?___wmul 0005                      motor_response@card 0026  
                          ?_turnRight45 0018                     ??_color_writetoaddr 0008  
                               _INT1PPS 000DF1                          main@green_read 01D2  
                               _SP4BRGH 000EE6                                 _SP4BRGL 000EE5  
                               _SSP2ADD 000ED6                                 _SSP2BUF 000ED5  
           set_interrupt_threshold@AIHT 000B             set_interrupt_threshold@AILT 0009  
               __end_of_Interrupts_init 2AD0                  color_writetoaddr@value 0007  
                      ??_color_read_Red 000B           __end_of_make_master_closeness 2250  
                               _HighISR 0008          determine_card@predicted_colour 000D  
             __end_of_color_writetoaddr 2C60                    _clear_interrupt_flag 2C78  
                    _I2C_2_Master_Start 2CE0                              _initUSART4 2C20  
                   i2_I2C_2_Master_Idle 2BB0                      _I2C_2_Master_Write 2CB4  
                               __Hparam 0000                     i2_I2C_2_Master_Stop 2CEA  
                               __Lparam 0000                       color_read_Red@tmp 000E  
             ??_set_interrupt_threshold 000F  make_master_closeness@normalised_values 0014  
               sendStringSerial4@string 0006                       reverseFullSpeed@i 001D  
                               ___aodiv 1AA0                                 ___aomod 1D94  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 270A  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0018  
                          turnLeft45@mR 001A                                 __pcinit 2B34  
                               __ramtop 0E00                                 __ptext0 117A  
                               __ptext1 2C20                                 __ptext2 2502  
                               __ptext3 288C                                 __ptext4 2AD0  
                               __ptext5 2B5E                                 __ptext6 2056  
                               __ptext7 283A                                 __ptext8 27E6  
                               __ptext9 1EF8                    ?i2_I2C_2_Master_Idle 0001  
                             _T2CONbits 000FBD                    ?i2_I2C_2_Master_Stop 0001  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 005A  
                  _collect_avg_readings 18BA                                 main@buf 0100  
                               _sprintf 283A                    ??_I2C_2_Master_Start 0006  
                  ??_I2C_2_Master_Write 0006                    end_of_initialization 2B54  
        collect_avg_readings@green_read 0014                   normalise_readings@buf 001B  
                               fputc@fp 0007                                 fputs@fp 0010  
                     ?_color_click_init 0001                            turnRight45@i 001E  
                 ?_clear_interrupt_flag 0001                      ??_color_click_init 0009  
                         _card_detected 00F0                       __end_of_vfpfcnvrt 2056  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004B                              ??_vfprintf 0055  
                       _initDCmotorsPWM 2502                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0017                   ??i2_I2C_2_Master_Idle 0001  
                 ??i2_I2C_2_Master_Stop 0002       normalise_readings@expected_values 0023  
       __end_of_set_interrupt_threshold 27E6                           _card_response 2056  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0016  
                             _TRISBbits 000F82                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 0012  
              __end_of_reverseFullSpeed 2502                     main@expected_values 0196  
              color_writetoaddr@address 0008                 ??_I2C_2_Master_RepStart 0006  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0009                            _EUSART4RXbuf 00D8  
                          _EUSART4TXbuf 0200                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0009                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0005                              main@motorL 01D6  
                            main@motorR 01DF                      ??_color_read_Clear 000B  
                    ??_color_read_Green 000B                              _turnLeft45 23C8  
                           vfpfcnvrt@ap 0047                             vfpfcnvrt@cp 0053  
                           vfpfcnvrt@fp 0043                          __end_of___wmul 2BFE  
                       determine_card@i 000E                          ?_card_response 007F  
                   color_read_Clear@tmp 000E                     start_initialization 2B34  
                           __end_of_abs 2A92                             __end_of_pad 270A  
                         _TxBufWriteCnt 0058                           ??_LEDSon_init 0005  
                ??_clear_interrupt_flag 0007                     color_read_Green@tmp 000E  
               __end_of_initDCmotorsPWM 258A                             vfprintf@fmt 0062  
              ??_enable_color_interrupt 0009                                ??___wmul 0009  
         i2I2C_2_Master_Write@data_byte 0002                          _determine_card 2610  
          __end_ofi2_I2C_2_Master_Start 2CFE            __end_ofi2_I2C_2_Master_Write 2CCC  
                           __pbssCOMRAM 0057                  ??_collect_avg_readings 0018  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                      ___aodiv@dividend 0005                          _motor_response 0E64  
                              ?_HighISR 0001                     __end_of_LEDSon_init 2C20  
                      ___lwdiv@dividend 000B                               _dtoa$2581 0032  
                           ?_turnLeft45 0018                               __pintcode 0008  
                              ?___aodiv 0005                                ?___aomod 0005  
                      ___aodiv@quotient 0017                  __end_of_determine_card 2690  
                              ?___lwdiv 000B                    I2C_2_Master_Read@ack 0007  
                       ??_card_response 0057                    I2C_2_Master_Read@tmp 0008  
                           __smallconst 0E00                       _I2C_2_Master_Idle 2B88  
                     _I2C_2_Master_Init 2B5E                       _I2C_2_Master_Read 2A10  
                     _I2C_2_Master_Stop 2CD6                            _RxBufReadCnt 0059  
          normalise_readings@difference 002F                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0014                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000F                  __end_of_motor_response 117A  
                           turnLeft45@i 001E                                ?_sprintf 0066  
                     _sendStringSerial4 2B04                     ??_I2C_2_Master_Idle 0005  
                   ??_I2C_2_Master_Init 0005                     ??_I2C_2_Master_Read 0006  
    set_interrupt_threshold@persistence 000D                          ___wmul@product 0009  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0006  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                                _PIE0bits 000E29  
                    ?_sendStringSerial4 0006                                _PIE4bits 000E2D  
                 _make_master_closeness 217C                                i2u131_40 2BC0  
                              i2u131_41 2BBC                                i2u132_40 2BD6  
                              i2u132_41 2BD2                                i2u220_47 005C  
                              i2u155_40 001A                                i2u155_41 0016  
                              i2u219_47 0042                                i2u156_40 002E  
                              i2u156_41 002A                                _PIR0bits 000E33  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0005                make_master_closeness@buf 0012  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0008  
                              _SSP2STAT 000ED8                         ?_determine_card 0005  
                             _vfpfcnvrt 1EF8               __end_of_I2C_2_Master_Idle 2BB0  
             __end_of_I2C_2_Master_Init 2B88               __end_of_I2C_2_Master_Read 2A52  
                     ___wmul@multiplier 0005               __end_of_I2C_2_Master_Stop 2CE0  
              ??i2_clear_interrupt_flag 0003                            setMotorPWM@m 0012  
           I2C_2_Master_Write@data_byte 0006            normalise_readings@green_read 001F  
                     ??_color_read_Blue 000B                            _TxBufReadCnt 0057  
                       ?_motor_response 0020                       ?_reverseFullSpeed 0018  
             __end_of_sendStringSerial4 2B34                             _LEDSon_init 2BFE  
                    ??_reverseFullSpeed 001C           __end_of_I2C_2_Master_RepStart 2CD6  
                    color_read_Blue@tmp 000E                ?_set_interrupt_threshold 0009  
                   __end_of_setMotorPWM 1D94                            ??_initUSART4 0005  
                  i2_I2C_2_Master_Start 2CF4                    i2_I2C_2_Master_Write 2CC0  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0016             __end_ofi2_I2C_2_Master_Idle 2BD8  
                    reverseFullSpeed@mL 0018                      reverseFullSpeed@mR 001A  
           __end_ofi2_I2C_2_Master_Stop 2CF4                              ?_vfpfcnvrt 0043  
                       ___aodiv@divisor 000D                         ___aodiv@counter 0015  
                            _ANSELBbits 000E9A                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                       ___lwdiv@divisor 000D                      __end_of_initUSART4 2C40  
                       ___lwdiv@counter 0011                                __ptext10 1414  
                              __ptext11 2690                                __ptext20 2A52  
                              __ptext12 29CC                                __ptext21 0E64  
                              __ptext13 2250                  _enable_color_interrupt 2CA4  
                              __ptext30 18BA                                __ptext22 231A  
                              __ptext14 2CFE                                __ptext31 28DC  
                              __ptext23 23C8                                __ptext15 1D94  
                              __ptext40 2CA4                                __ptext32 292C  
                              __ptext24 258A                                __ptext16 1AA0  
                              __ptext41 2C40                                __ptext33 297C  
                              __ptext25 2476                                __ptext17 2B04  
                              __ptext50 2CEA                                __ptext42 2C78  
                              __ptext34 2CCC                                __ptext26 1C28  
                              __ptext18 2C60                                __ptext51 2CF4  
                              __ptext43 2CB4                                __ptext35 2A10  
                              __ptext27 2BD8                                __ptext19 1692  
                              __ptext52 2BB0                                __ptext44 2CD6  
                              __ptext36 270A                                __ptext28 217C  
                              __ptext45 2CE0                                __ptext37 2BFE  
                              __ptext29 2610                                __ptext46 2B88  
                              __ptext38 2A92                                __ptext39 277E  
                              __ptext48 2C8E                                __ptext49 2CC0  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0012                   ?i2_I2C_2_Master_Start 0001  
                 ?i2_I2C_2_Master_Write 0001                                isa$xinst 000000  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 27E6                           ??_turnRight45 001C  
                      ___aomod@dividend 0005                   collect_avg_readings@i 001A  
                            _INTCONbits 000FF2            _set_interrupt_threshold$2062 000F  
          _set_interrupt_threshold$2063 0010                             _setMotorPWM 1C28  
         collect_avg_readings@blue_read 0016                           turnRight45@mL 0018  
                         turnRight45@mR 001A                                intlevel2 0000  
                             sprintf@ap 0072              __end_of_normalise_readings 18BA  
          card_response@expected_values 0087                 card_response@green_read 0083  
                          ??_turnLeft45 001C          determine_card@current_smallest 000B  
                       ___aomod@divisor 000D                             ??_vfpfcnvrt 0049  
                       ___aomod@counter 0015                  card_response@blue_read 0085  
                      _color_click_init 2AD0           card_response@master_closeness 00C3  
                              sprintf@f 0074                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 23C8                      __end_of_turnLeft45 2476  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0016  
                       _sendCharSerial4 2C60                  ??i2_I2C_2_Master_Start 0002  
                ??i2_I2C_2_Master_Write 0002                  i2_clear_interrupt_flag 2C8E  
                 card_response@red_read 0081                            ___aomod@sign 0016  
                      ??_determine_card 0007                            main@PWMcycle 01CE  
