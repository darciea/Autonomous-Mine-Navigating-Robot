

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 19:34:30 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71   000000                     
    72                           ; Version 2.35
    73                           ; Generated 05/05/2021 GMT
    74                           ; 
    75                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F67K40 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000000                     _TRISBbits	set	3970
   108   000000                     _TX4REG	set	3812
   109   000000                     _RC4STAbits	set	3815
   110   000000                     _SP4BRGH	set	3814
   111   000000                     _LATGbits	set	3967
   112   000000                     _TRISAbits	set	3969
   113   000000                     _TRISFbits	set	3974
   114   000000                     _TRISDbits	set	3972
   115   000000                     _TRISGbits	set	3975
   116   000000                     _SSP2CON2bits	set	3802
   117   000000                     _INT1PPS	set	3569
   118   000000                     _RX4PPS	set	3605
   119   000000                     _SSP2CLKPPS	set	3612
   120   000000                     _SSP2DATPPS	set	3613
   121   000000                     _RC7PPS	set	3689
   122   000000                     _RE2PPS	set	3700
   123   000000                     _TRISCbits	set	3971
   124   000000                     _TRISEbits	set	3973
   125   000000                     _TRISHbits	set	3976
   126   000000                     _PORTFbits	set	3982
   127   000000                     _T2PR	set	4028
   128   000000                     _T2CONbits	set	4029
   129   000000                     _CCPR2H	set	4006
   130   000000                     _CCPR1H	set	4010
   131   000000                     _RE4PPS	set	3702
   132   000000                     _RG6PPS	set	3720
   133   000000                     _RD5PPS	set	3695
   134   000000                     _ANSELBbits	set	3738
   135   000000                     _ANSELDbits	set	3751
   136   000000                     _SSP2ADD	set	3798
   137   000000                     _SSP2CON1bits	set	3801
   138   000000                     _CCPR4H	set	3873
   139   000000                     _CCPR3H	set	3877
   140   000000                     _INTCONbits	set	4082
   141   000000                     _T2CLKCONbits	set	4031
   142   000000                     _T2HLTbits	set	4030
   143   000000                     _CCP1CONbits	set	4011
   144   000000                     _CCPTMRS0bits	set	4013
   145   000000                     _CCP2CONbits	set	4007
   146   000000                     _LATAbits	set	3961
   147   000000                     _LATDbits	set	3964
   148   000000                     _CCP3CONbits	set	3878
   149   000000                     _CCP4CONbits	set	3874
   150   000000                     _RC4REG	set	3811
   151   000000                     _SP4BRGL	set	3813
   152   000000                     _TX4STAbits	set	3816
   153   000000                     _BAUD4CONbits	set	3817
   154   000000                     _SSP2CON2	set	3802
   155   000000                     _SSP2STAT	set	3800
   156   000000                     _ANSELFbits	set	3764
   157   000000                     _SSP2BUF	set	3797
   158   000000                     _IPR0bits	set	3615
   159   000000                     _PIE0bits	set	3625
   160   000000                     _PIE4bits	set	3629
   161   000000                     _PIR4bits	set	3639
   162   000000                     _RC0PPS	set	3682
   163   000000                     _RD6PPS	set	3696
   164   000000                     _LATFbits	set	3966
   165   000000                     _LATHbits	set	3968
   166   000000                     _PIR0bits	set	3635
   167                           
   168                           	psect	smallconst
   169   000E00                     __psmallconst:
   170                           	callstack 0
   171   000E00  00                 	db	0
   172   000E01                     STR_1:
   173                           
   174                           ; BSR set to: 14
   175   000E01  0A                 	db	10
   176   000E02  20                 	db	32
   177   000E03  45                 	db	69	;'E'
   178   000E04  58                 	db	88	;'X'
   179   000E05  50                 	db	80	;'P'
   180   000E06  45                 	db	69	;'E'
   181   000E07  43                 	db	67	;'C'
   182   000E08  54                 	db	84	;'T'
   183   000E09  45                 	db	69	;'E'
   184   000E0A  44                 	db	68	;'D'
   185   000E0B  3A                 	db	58	;':'
   186   000E0C  20                 	db	32
   187   000E0D  52                 	db	82	;'R'
   188   000E0E  20                 	db	32
   189   000E0F  25                 	db	37
   190   000E10  64                 	db	100	;'d'
   191   000E11  2C                 	db	44
   192   000E12  20                 	db	32
   193   000E13  47                 	db	71	;'G'
   194   000E14  20                 	db	32
   195   000E15  25                 	db	37
   196   000E16  64                 	db	100	;'d'
   197   000E17  2C                 	db	44
   198   000E18  20                 	db	32
   199   000E19  42                 	db	66	;'B'
   200   000E1A  20                 	db	32
   201   000E1B  25                 	db	37
   202   000E1C  64                 	db	100	;'d'
   203   000E1D  20                 	db	32
   204   000E1E  20                 	db	32
   205   000E1F  43                 	db	67	;'C'
   206   000E20  41                 	db	65	;'A'
   207   000E21  52                 	db	82	;'R'
   208   000E22  44                 	db	68	;'D'
   209   000E23  3A                 	db	58	;':'
   210   000E24  20                 	db	32
   211   000E25  25                 	db	37
   212   000E26  64                 	db	100	;'d'
   213   000E27  20                 	db	32
   214   000E28  0A                 	db	10
   215   000E29  00                 	db	0
   216   000E2A                     STR_3:
   217                           
   218                           ; BSR set to: 14
   219   000E2A  0A                 	db	10
   220   000E2B  20                 	db	32
   221   000E2C  41                 	db	65	;'A'
   222   000E2D  56                 	db	86	;'V'
   223   000E2E  47                 	db	71	;'G'
   224   000E2F  3A                 	db	58	;':'
   225   000E30  20                 	db	32
   226   000E31  52                 	db	82	;'R'
   227   000E32  20                 	db	32
   228   000E33  25                 	db	37
   229   000E34  64                 	db	100	;'d'
   230   000E35  2C                 	db	44
   231   000E36  20                 	db	32
   232   000E37  47                 	db	71	;'G'
   233   000E38  20                 	db	32
   234   000E39  25                 	db	37
   235   000E3A  64                 	db	100	;'d'
   236   000E3B  2C                 	db	44
   237   000E3C  20                 	db	32
   238   000E3D  42                 	db	66	;'B'
   239   000E3E  20                 	db	32
   240   000E3F  25                 	db	37
   241   000E40  64                 	db	100	;'d'
   242   000E41  20                 	db	32
   243   000E42  0A                 	db	10
   244   000E43  00                 	db	0
   245   000E44                     STR_2:
   246                           
   247                           ; BSR set to: 14
   248   000E44  0A                 	db	10
   249   000E45  20                 	db	32
   250   000E46  45                 	db	69	;'E'
   251   000E47  78                 	db	120	;'x'
   252   000E48  70                 	db	112	;'p'
   253   000E49  65                 	db	101	;'e'
   254   000E4A  63                 	db	99	;'c'
   255   000E4B  74                 	db	116	;'t'
   256   000E4C  65                 	db	101	;'e'
   257   000E4D  64                 	db	100	;'d'
   258   000E4E  20                 	db	32
   259   000E4F  63                 	db	99	;'c'
   260   000E50  6C                 	db	108	;'l'
   261   000E51  65                 	db	101	;'e'
   262   000E52  61                 	db	97	;'a'
   263   000E53  72                 	db	114	;'r'
   264   000E54  3A                 	db	58	;':'
   265   000E55  20                 	db	32
   266   000E56  25                 	db	37
   267   000E57  64                 	db	100	;'d'
   268   000E58  20                 	db	32
   269   000E59  0A                 	db	10
   270   000E5A  00                 	db	0
   271   000E5B                     STR_4:
   272                           
   273                           ; BSR set to: 14
   274   000E5B  43                 	db	67	;'C'
   275   000E5C  41                 	db	65	;'A'
   276   000E5D  52                 	db	82	;'R'
   277   000E5E  44                 	db	68	;'D'
   278   000E5F  20                 	db	32
   279   000E60  25                 	db	37
   280   000E61  64                 	db	100	;'d'
   281   000E62  20                 	db	32
   282   000E63  0A                 	db	10
   283   000E64  00                 	db	0
   284   000E65  00                 	db	0	; dummy byte at the end
   285   000000                     
   286                           ; #config settings
   287                           
   288                           	psect	cinit
   289   002B7C                     __pcinit:
   290                           	callstack 0
   291   002B7C                     start_initialization:
   292                           	callstack 0
   293   002B7C                     __initialization:
   294                           	callstack 0
   295                           
   296                           ; Clear objects allocated to BANK2 (92 bytes)
   297   002B7C  EE02  F000         	lfsr	0,__pbssBANK2
   298   002B80  0E5C               	movlw	92
   299   002B82                     clear_0:
   300   002B82  6AEE               	clrf	postinc0,c
   301   002B84  06E8               	decf	wreg,f,c
   302   002B86  E1FD               	bnz	clear_0
   303                           
   304                           ; Clear objects allocated to BANK0 (29 bytes)
   305   002B88  EE00  F0D8         	lfsr	0,__pbssBANK0
   306   002B8C  0E1D               	movlw	29
   307   002B8E                     clear_1:
   308   002B8E  6AEE               	clrf	postinc0,c
   309   002B90  06E8               	decf	wreg,f,c
   310   002B92  E1FD               	bnz	clear_1
   311                           
   312                           ; Clear objects allocated to COMRAM (4 bytes)
   313   002B94  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   314   002B96  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   315   002B98  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   316   002B9A  6A57               	clrf	__pbssCOMRAM& (0+255),c
   317   002B9C                     end_of_initialization:
   318                           	callstack 0
   319   002B9C                     __end_of__initialization:
   320                           	callstack 0
   321   002B9C  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   322   002B9E  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   323   002BA0  0100               	movlb	0
   324   002BA2  EFBE  F008         	goto	_main	;jump to C main() function
   325                           
   326                           	psect	bssCOMRAM
   327   000057                     __pbssCOMRAM:
   328                           	callstack 0
   329   000057                     _TxBufReadCnt:
   330                           	callstack 0
   331   000057                     	ds	1
   332   000058                     _TxBufWriteCnt:
   333                           	callstack 0
   334   000058                     	ds	1
   335   000059                     _RxBufReadCnt:
   336                           	callstack 0
   337   000059                     	ds	1
   338   00005A                     _RxBufWriteCnt:
   339                           	callstack 0
   340   00005A                     	ds	1
   341                           
   342                           	psect	bssBANK0
   343   0000D8                     __pbssBANK0:
   344                           	callstack 0
   345   0000D8                     _EUSART4RXbuf:
   346                           	callstack 0
   347   0000D8                     	ds	20
   348   0000EC                     _width:
   349                           	callstack 0
   350   0000EC                     	ds	2
   351   0000EE                     _prec:
   352                           	callstack 0
   353   0000EE                     	ds	2
   354   0000F0                     _card_detected:
   355                           	callstack 0
   356   0000F0                     	ds	2
   357   0000F2                     _response_in_progress:
   358                           	callstack 0
   359   0000F2                     	ds	2
   360   0000F4                     _flags:
   361                           	callstack 0
   362   0000F4                     	ds	1
   363                           
   364                           	psect	bssBANK2
   365   000200                     __pbssBANK2:
   366                           	callstack 0
   367   000200                     _EUSART4TXbuf:
   368                           	callstack 0
   369   000200                     	ds	60
   370   00023C                     _dbuf:
   371                           	callstack 0
   372   00023C                     	ds	32
   373                           
   374                           	psect	cstackBANK1
   375   000100                     __pcstackBANK1:
   376                           	callstack 0
   377   000100                     main@buf:
   378                           	callstack 0
   379                           
   380                           ; 150 bytes @ 0x0
   381   000100                     	ds	150
   382   000196                     main@expected_values:
   383                           	callstack 0
   384                           
   385                           ; 54 bytes @ 0x96
   386   000196                     	ds	54
   387   0001CC                     main@PWMcycle:
   388                           	callstack 0
   389                           
   390                           ; 1 bytes @ 0xCC
   391   0001CC                     	ds	1
   392   0001CD                     main@i_1290:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0xCD
   396   0001CD                     	ds	2
   397   0001CF                     main@i_1292:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0xCF
   401   0001CF                     	ds	2
   402   0001D1                     main@clear_read:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0xD1
   406   0001D1                     	ds	2
   407   0001D3                     main@red_read:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0xD3
   411   0001D3                     	ds	2
   412   0001D5                     main@green_read:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0xD5
   416   0001D5                     	ds	2
   417   0001D7                     main@blue_read:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0xD7
   421   0001D7                     	ds	2
   422   0001D9                     main@i:
   423                           	callstack 0
   424                           
   425                           ; 1 bytes @ 0xD9
   426   0001D9                     	ds	1
   427   0001DA                     main@motorL:
   428                           	callstack 0
   429                           
   430                           ; 9 bytes @ 0xDA
   431   0001DA                     	ds	9
   432   0001E3                     main@motorR:
   433                           	callstack 0
   434                           
   435                           ; 9 bytes @ 0xE3
   436   0001E3                     	ds	9
   437                           
   438                           	psect	cstackBANK0
   439   000060                     __pcstackBANK0:
   440                           	callstack 0
   441   000060                     ?_vfprintf:
   442                           	callstack 0
   443   000060                     vfprintf@fp:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x0
   447   000060                     	ds	2
   448   000062                     vfprintf@fmt:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452   000062                     	ds	2
   453   000064                     vfprintf@ap:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x4
   457   000064                     	ds	2
   458   000066                     ?_sprintf:
   459                           	callstack 0
   460   000066                     sprintf@s:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x6
   464   000066                     	ds	2
   465   000068                     sprintf@fmt:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x8
   469   000068                     	ds	10
   470   000072                     sprintf@ap:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x12
   474   000072                     	ds	2
   475   000074                     sprintf@f:
   476                           	callstack 0
   477                           
   478                           ; 11 bytes @ 0x14
   479   000074                     	ds	11
   480   00007F                     card_response@buf:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x1F
   484   00007F                     	ds	2
   485   000081                     card_response@red_read:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x21
   489   000081                     	ds	2
   490   000083                     card_response@green_read:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x23
   494   000083                     	ds	2
   495   000085                     card_response@blue_read:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x25
   499   000085                     	ds	2
   500   000087                     card_response@expected_values:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x27
   504   000087                     	ds	2
   505   000089                     card_response@mL:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x29
   509   000089                     	ds	2
   510   00008B                     card_response@mR:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x2B
   514   00008B                     	ds	2
   515   00008D                     card_response@normalised_values:
   516                           	callstack 0
   517                           
   518                           ; 54 bytes @ 0x2D
   519   00008D                     	ds	54
   520   0000C3                     card_response@master_closeness:
   521                           	callstack 0
   522                           
   523                           ; 18 bytes @ 0x63
   524   0000C3                     	ds	18
   525   0000D5                     card_response@card:
   526                           	callstack 0
   527                           
   528                           ; 1 bytes @ 0x75
   529   0000D5                     	ds	1
   530   0000D6                     ??_main:
   531                           
   532                           ; 1 bytes @ 0x76
   533   0000D6                     	ds	2
   534                           
   535                           	psect	cstackCOMRAM
   536   000001                     __pcstackCOMRAM:
   537                           	callstack 0
   538   000001                     ??i2_I2C_2_Master_Idle:
   539   000001                     
   540                           ; 1 bytes @ 0x0
   541   000001                     	ds	1
   542   000002                     i2I2C_2_Master_Write@data_byte:
   543                           	callstack 0
   544                           
   545                           ; 1 bytes @ 0x1
   546   000002                     	ds	1
   547   000003                     ??_HighISR:
   548   000003                     
   549                           ; 1 bytes @ 0x2
   550   000003                     	ds	2
   551   000005                     ??_I2C_2_Master_Idle:
   552   000005                     ?___wmul:
   553                           	callstack 0
   554   000005                     ?___aodiv:
   555                           	callstack 0
   556   000005                     ?___aomod:
   557                           	callstack 0
   558   000005                     sendCharSerial4@charToSend:
   559                           	callstack 0
   560   000005                     determine_card@master_closeness:
   561                           	callstack 0
   562   000005                     ___wmul@multiplier:
   563                           	callstack 0
   564   000005                     fputc@c:
   565                           	callstack 0
   566   000005                     ___aodiv@dividend:
   567                           	callstack 0
   568   000005                     ___aomod@dividend:
   569                           	callstack 0
   570                           
   571                           ; 8 bytes @ 0x4
   572   000005                     	ds	1
   573   000006                     ??_I2C_2_Master_Read:
   574   000006                     I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576   000006                     sendStringSerial4@string:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x5
   580   000006                     	ds	1
   581   000007                     ??_determine_card:
   582   000007                     color_writetoaddr@value:
   583                           	callstack 0
   584   000007                     I2C_2_Master_Read@ack:
   585                           	callstack 0
   586   000007                     ___wmul@multiplicand:
   587                           	callstack 0
   588   000007                     fputc@fp:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x6
   592   000007                     	ds	1
   593   000008                     color_writetoaddr@address:
   594                           	callstack 0
   595   000008                     I2C_2_Master_Read@tmp:
   596                           	callstack 0
   597                           
   598                           ; 1 bytes @ 0x7
   599   000008                     	ds	1
   600   000009                     ??_fputc:
   601   000009                     ??_color_click_init:
   602   000009                     ?_color_read_Red:
   603                           	callstack 0
   604   000009                     ?_color_read_Green:
   605                           	callstack 0
   606   000009                     ?_color_read_Blue:
   607                           	callstack 0
   608   000009                     ?_color_read_Clear:
   609                           	callstack 0
   610   000009                     set_interrupt_threshold@AILT:
   611                           	callstack 0
   612   000009                     ___wmul@product:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x8
   616   000009                     	ds	2
   617   00000B                     ??_color_read_Red:
   618   00000B                     ??_color_read_Green:
   619   00000B                     ??_color_read_Blue:
   620   00000B                     ??_color_read_Clear:
   621   00000B                     ?___lwdiv:
   622                           	callstack 0
   623   00000B                     determine_card@current_smallest:
   624                           	callstack 0
   625   00000B                     set_interrupt_threshold@AIHT:
   626                           	callstack 0
   627   00000B                     ___lwdiv@dividend:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0xA
   631   00000B                     	ds	2
   632   00000D                     determine_card@predicted_colour:
   633                           	callstack 0
   634   00000D                     set_interrupt_threshold@persistence:
   635                           	callstack 0
   636   00000D                     ___lwdiv@divisor:
   637                           	callstack 0
   638   00000D                     ___aodiv@divisor:
   639                           	callstack 0
   640   00000D                     ___aomod@divisor:
   641                           	callstack 0
   642                           
   643                           ; 8 bytes @ 0xC
   644   00000D                     	ds	1
   645   00000E                     determine_card@i:
   646                           	callstack 0
   647   00000E                     color_read_Red@tmp:
   648                           	callstack 0
   649   00000E                     color_read_Green@tmp:
   650                           	callstack 0
   651   00000E                     color_read_Blue@tmp:
   652                           	callstack 0
   653   00000E                     color_read_Clear@tmp:
   654                           	callstack 0
   655   00000E                     fputs@s:
   656                           	callstack 0
   657                           
   658                           ; 2 bytes @ 0xD
   659   00000E                     	ds	1
   660   00000F                     _set_interrupt_threshold$2062:
   661                           	callstack 0
   662   00000F                     ___lwdiv@quotient:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0xE
   666   00000F                     	ds	1
   667   000010                     _set_interrupt_threshold$2063:
   668                           	callstack 0
   669   000010                     collect_avg_readings@red_read:
   670                           	callstack 0
   671   000010                     fputs@fp:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0xF
   675   000010                     	ds	1
   676   000011                     ___lwdiv@counter:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x10
   680   000011                     	ds	1
   681   000012                     fputs@c:
   682                           	callstack 0
   683   000012                     setMotorPWM@m:
   684                           	callstack 0
   685   000012                     collect_avg_readings@green_read:
   686                           	callstack 0
   687   000012                     make_master_closeness@buf:
   688                           	callstack 0
   689                           
   690                           ; 2 bytes @ 0x11
   691   000012                     	ds	1
   692   000013                     fputs@i:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x12
   696   000013                     	ds	1
   697   000014                     ??_setMotorPWM:
   698   000014                     collect_avg_readings@blue_read:
   699                           	callstack 0
   700   000014                     make_master_closeness@normalised_values:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x13
   704   000014                     	ds	1
   705   000015                     ___aodiv@counter:
   706                           	callstack 0
   707   000015                     ___aomod@counter:
   708                           	callstack 0
   709   000015                     pad@fp:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x14
   713   000015                     	ds	1
   714   000016                     ??_collect_avg_readings:
   715   000016                     setMotorPWM@posDuty:
   716                           	callstack 0
   717   000016                     ___aodiv@sign:
   718                           	callstack 0
   719   000016                     ___aomod@sign:
   720                           	callstack 0
   721   000016                     make_master_closeness@master_closeness:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x15
   725   000016                     	ds	1
   726   000017                     ?_abs:
   727                           	callstack 0
   728   000017                     setMotorPWM@negDuty:
   729                           	callstack 0
   730   000017                     abs@a:
   731                           	callstack 0
   732   000017                     pad@buf:
   733                           	callstack 0
   734   000017                     ___aodiv@quotient:
   735                           	callstack 0
   736                           
   737                           ; 8 bytes @ 0x16
   738   000017                     	ds	1
   739   000018                     ??_make_master_closeness:
   740   000018                     stop@mL:
   741                           	callstack 0
   742   000018                     turnLeft45@mL:
   743                           	callstack 0
   744   000018                     turnRight45@mL:
   745                           	callstack 0
   746   000018                     reverseFullSpeed@mL:
   747                           	callstack 0
   748   000018                     collect_avg_readings@i:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x17
   752   000018                     	ds	1
   753   000019                     ??_abs:
   754   000019                     pad@p:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x18
   758   000019                     	ds	1
   759   00001A                     stop@mR:
   760                           	callstack 0
   761   00001A                     turnLeft45@mR:
   762                           	callstack 0
   763   00001A                     turnRight45@mR:
   764                           	callstack 0
   765   00001A                     reverseFullSpeed@mR:
   766                           	callstack 0
   767   00001A                     collect_avg_readings@i_1596:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x19
   771   00001A                     	ds	1
   772   00001B                     ??_pad:
   773   00001B                     normalise_readings@buf:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x1A
   777   00001B                     	ds	1
   778   00001C                     ??_stop:
   779   00001C                     ??_turnLeft45:
   780   00001C                     ??_turnRight45:
   781   00001C                     ??_reverseFullSpeed:
   782   00001C                     collect_avg_readings@i_1597:
   783                           	callstack 0
   784   00001C                     pad@i:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x1B
   788   00001C                     	ds	1
   789   00001D                     reverseFullSpeed@i:
   790                           	callstack 0
   791   00001D                     normalise_readings@red_read:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x1C
   795   00001D                     	ds	1
   796   00001E                     turnLeft45@i:
   797                           	callstack 0
   798   00001E                     turnRight45@i:
   799                           	callstack 0
   800   00001E                     collect_avg_readings@i_1598:
   801                           	callstack 0
   802   00001E                     pad@w:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x1D
   806   00001E                     	ds	1
   807   00001F                     normalise_readings@green_read:
   808                           	callstack 0
   809                           
   810                           ; 2 bytes @ 0x1E
   811   00001F                     	ds	1
   812   000020                     motor_response@mL:
   813                           	callstack 0
   814   000020                     dtoa@fp:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x1F
   818   000020                     	ds	1
   819   000021                     normalise_readings@blue_read:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x20
   823   000021                     	ds	1
   824   000022                     motor_response@mR:
   825                           	callstack 0
   826   000022                     dtoa@d:
   827                           	callstack 0
   828                           
   829                           ; 8 bytes @ 0x21
   830   000022                     	ds	1
   831   000023                     normalise_readings@expected_values:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x22
   835   000023                     	ds	1
   836   000024                     ??_motor_response:
   837                           
   838                           ; 1 bytes @ 0x23
   839   000024                     	ds	1
   840   000025                     normalise_readings@normalised_values:
   841                           	callstack 0
   842                           
   843                           ; 2 bytes @ 0x24
   844   000025                     	ds	1
   845   000026                     motor_response@card:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x25
   849   000026                     	ds	1
   850   000027                     ??_normalise_readings:
   851                           
   852                           ; 1 bytes @ 0x26
   853   000027                     	ds	3
   854   00002A                     ??_dtoa:
   855                           
   856                           ; 1 bytes @ 0x29
   857   00002A                     	ds	2
   858   00002C                     make_master_closeness@i:
   859                           	callstack 0
   860                           
   861                           ; 1 bytes @ 0x2B
   862   00002C                     	ds	3
   863   00002F                     normalise_readings@difference:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0x2E
   867   00002F                     	ds	2
   868   000031                     normalise_readings@i:
   869                           	callstack 0
   870                           
   871                           ; 1 bytes @ 0x30
   872   000031                     	ds	1
   873   000032                     _dtoa$2581:
   874                           	callstack 0
   875                           
   876                           ; 2 bytes @ 0x31
   877   000032                     	ds	2
   878   000034                     dtoa@p:
   879                           	callstack 0
   880                           
   881                           ; 2 bytes @ 0x33
   882   000034                     	ds	2
   883   000036                     dtoa@w:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x35
   887   000036                     	ds	2
   888   000038                     dtoa@n:
   889                           	callstack 0
   890                           
   891                           ; 8 bytes @ 0x37
   892   000038                     	ds	8
   893   000040                     dtoa@s:
   894                           	callstack 0
   895                           
   896                           ; 1 bytes @ 0x3F
   897   000040                     	ds	1
   898   000041                     dtoa@i:
   899                           	callstack 0
   900                           
   901                           ; 2 bytes @ 0x40
   902   000041                     	ds	2
   903   000043                     vfpfcnvrt@fp:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0x42
   907   000043                     	ds	2
   908   000045                     vfpfcnvrt@fmt:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x44
   912   000045                     	ds	2
   913   000047                     vfpfcnvrt@ap:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x46
   917   000047                     	ds	2
   918   000049                     ??_vfpfcnvrt:
   919                           
   920                           ; 1 bytes @ 0x48
   921   000049                     	ds	2
   922   00004B                     vfpfcnvrt@convarg:
   923                           	callstack 0
   924                           
   925                           ; 8 bytes @ 0x4A
   926   00004B                     	ds	8
   927   000053                     vfpfcnvrt@cp:
   928                           	callstack 0
   929                           
   930                           ; 2 bytes @ 0x52
   931   000053                     	ds	2
   932   000055                     vfprintf@cfmt:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x54
   936   000055                     	ds	2
   937   000057                     
   938                           ; 1 bytes @ 0x56
   939 ;;
   940 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   941 ;;
   942 ;; *************** function _main *****************
   943 ;; Defined at:
   944 ;;		line 21 in file "main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  i               2  207[BANK1 ] int 
   949 ;;  i               2  205[BANK1 ] int 
   950 ;;  i               1  217[BANK1 ] enum E14569
   951 ;;  buf           150    0[BANK1 ] unsigned char [150]
   952 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   953 ;;  expected_val   54  150[BANK1 ] unsigned int [9][3]
   954 ;;  motorR          9  227[BANK1 ] struct DC_motor
   955 ;;  motorL          9  218[BANK1 ] struct DC_motor
   956 ;;  blue_read       2  215[BANK1 ] unsigned int 
   957 ;;  green_read      2  213[BANK1 ] unsigned int 
   958 ;;  red_read        2  211[BANK1 ] unsigned int 
   959 ;;  clear_read      2  209[BANK1 ] unsigned int 
   960 ;;  clear_read_c    2    0        unsigned int 
   961 ;;  PWMcycle        1  204[BANK1 ] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   972 ;;      Locals:         0       0     236       0       0       0       0       0       0       0       0       0       
      +0       0       0
   973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   974 ;;      Totals:         0       2     236       0       0       0       0       0       0       0       0       0       
      +0       0       0
   975 ;;Total ram usage:      238 bytes
   976 ;; Hardware stack levels required when called: 13
   977 ;; This function calls:
   978 ;;		_I2C_2_Master_Init
   979 ;;		_Interrupts_init
   980 ;;		_LEDSon_init
   981 ;;		_card_response
   982 ;;		_collect_avg_readings
   983 ;;		_color_click_init
   984 ;;		_color_read_Clear
   985 ;;		_initDCmotorsPWM
   986 ;;		_initUSART4
   987 ;;		_sendStringSerial4
   988 ;;		_setMotorPWM
   989 ;;		_sprintf
   990 ;; This function is called by:
   991 ;;		Startup code after reset
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text0
   996   00117C                     __ptext0:
   997                           	callstack 0
   998   00117C                     _main:
   999                           	callstack 18
  1000   00117C                     
  1001                           ;main.c: 26:     LEDSon_init();
  1002   00117C  EC23  F016         	call	_LEDSon_init	;wreg free
  1003   001180                     
  1004                           ;main.c: 27:     I2C_2_Master_Init();
  1005   001180  ECD3  F015         	call	_I2C_2_Master_Init	;wreg free
  1006   001184                     
  1007                           ;main.c: 28:     color_click_init();
  1008   001184  EC8C  F015         	call	_color_click_init	;wreg free
  1009   001188                     
  1010                           ;main.c: 29:     initDCmotorsPWM();
  1011   001188  ECA5  F012         	call	_initDCmotorsPWM	;wreg free
  1012   00118C                     
  1013                           ;main.c: 30:     initUSART4();
  1014   00118C  EC34  F016         	call	_initUSART4	;wreg free
  1015   001190                     
  1016                           ;main.c: 31:     Interrupts_init();
  1017   001190  EC6D  F015         	call	_Interrupts_init	;wreg free
  1018   001194                     
  1019                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1020   001194  8486               	bsf	134,2,c	;volatile
  1021   001196                     
  1022                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1023   001196  010E               	movlb	14	; () banked
  1024   001198  95B4               	bcf	180,2,b	;volatile
  1025   00119A                     
  1026                           ; BSR set to: 14
  1027                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1028   00119A  CFBC F1CC          	movff	4028,main@PWMcycle	;volatile
  1029                           
  1030                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1031   00119E  0E00               	movlw	0
  1032   0011A0  0101               	movlb	1	; () banked
  1033   0011A2  6FDA               	movwf	main@motorL& (0+255),b
  1034                           
  1035                           ;main.c: 47:     motorL.direction=1;
  1036   0011A4  0E01               	movlw	1
  1037   0011A6  6FDB               	movwf	(main@motorL+1)& (0+255),b
  1038                           
  1039                           ;main.c: 48:     motorL.brakemode=1;
  1040   0011A8  0E01               	movlw	1
  1041   0011AA  6FDC               	movwf	(main@motorL+2)& (0+255),b
  1042   0011AC                     
  1043                           ; BSR set to: 1
  1044                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1045   0011AC  0EAA               	movlw	170
  1046   0011AE  6FDF               	movwf	(main@motorL+5)& (0+255),b
  1047   0011B0  0E0F               	movlw	15
  1048   0011B2  6FE0               	movwf	(main@motorL+6)& (0+255),b
  1049   0011B4                     
  1050                           ; BSR set to: 1
  1051                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1052   0011B4  0EA6               	movlw	166
  1053   0011B6  6FE1               	movwf	(main@motorL+7)& (0+255),b
  1054   0011B8  0E0F               	movlw	15
  1055   0011BA  6FE2               	movwf	(main@motorL+8)& (0+255),b
  1056   0011BC                     
  1057                           ; BSR set to: 1
  1058                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1059   0011BC  C1CC  F1DD         	movff	main@PWMcycle,main@motorL+3
  1060   0011C0  6BDE               	clrf	(main@motorL+4)& (0+255),b
  1061                           
  1062                           ;main.c: 53:     motorR.power=0;
  1063   0011C2  0E00               	movlw	0
  1064   0011C4  6FE3               	movwf	main@motorR& (0+255),b
  1065                           
  1066                           ;main.c: 54:     motorR.direction=1;
  1067   0011C6  0E01               	movlw	1
  1068   0011C8  6FE4               	movwf	(main@motorR+1)& (0+255),b
  1069                           
  1070                           ;main.c: 55:     motorR.brakemode=1;
  1071   0011CA  0E01               	movlw	1
  1072   0011CC  6FE5               	movwf	(main@motorR+2)& (0+255),b
  1073   0011CE                     
  1074                           ; BSR set to: 1
  1075                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1076   0011CE  0E25               	movlw	37
  1077   0011D0  6FE8               	movwf	(main@motorR+5)& (0+255),b
  1078   0011D2  0E0F               	movlw	15
  1079   0011D4  6FE9               	movwf	(main@motorR+6)& (0+255),b
  1080   0011D6                     
  1081                           ; BSR set to: 1
  1082                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1083   0011D6  0E21               	movlw	33
  1084   0011D8  6FEA               	movwf	(main@motorR+7)& (0+255),b
  1085   0011DA  0E0F               	movlw	15
  1086   0011DC  6FEB               	movwf	(main@motorR+8)& (0+255),b
  1087   0011DE                     
  1088                           ; BSR set to: 1
  1089                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1090   0011DE  C1CC  F1E6         	movff	main@PWMcycle,main@motorR+3
  1091   0011E2  6BE7               	clrf	(main@motorR+4)& (0+255),b
  1092   0011E4                     
  1093                           ; BSR set to: 1
  1094                           ;main.c: 60:     setMotorPWM(&motorL);
  1095   0011E4  0EDA               	movlw	low main@motorL
  1096   0011E6  6E12               	movwf	setMotorPWM@m^0,c
  1097   0011E8  0E01               	movlw	high main@motorL
  1098   0011EA  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1099   0011EC  EC38  F00E         	call	_setMotorPWM	;wreg free
  1100   0011F0                     
  1101                           ;main.c: 61:     setMotorPWM(&motorR);
  1102   0011F0  0EE3               	movlw	low main@motorR
  1103   0011F2  6E12               	movwf	setMotorPWM@m^0,c
  1104   0011F4  0E01               	movlw	high main@motorR
  1105   0011F6  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1106   0011F8  EC38  F00E         	call	_setMotorPWM	;wreg free
  1107                           
  1108                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1109   0011FC  0E00               	movlw	0
  1110   0011FE  0101               	movlb	1	; () banked
  1111   001200  6FD4               	movwf	(main@red_read+1)& (0+255),b
  1112   001202  0E00               	movlw	0
  1113   001204  6FD3               	movwf	main@red_read& (0+255),b
  1114                           
  1115                           ;main.c: 69:     unsigned int green_read = 0;
  1116   001206  0E00               	movlw	0
  1117   001208  6FD6               	movwf	(main@green_read+1)& (0+255),b
  1118   00120A  0E00               	movlw	0
  1119   00120C  6FD5               	movwf	main@green_read& (0+255),b
  1120                           
  1121                           ;main.c: 70:     unsigned int blue_read = 0;
  1122   00120E  0E00               	movlw	0
  1123   001210  6FD8               	movwf	(main@blue_read+1)& (0+255),b
  1124   001212  0E00               	movlw	0
  1125   001214  6FD7               	movwf	main@blue_read& (0+255),b
  1126   001216                     
  1127                           ; BSR set to: 1
  1128                           ;main.c: 73:     unsigned int expected_values[3][9];;main.c: 74:     unsigned int Return
      +                          HomeArray[2][30];;main.c: 84:     LATDbits.LATD4 = 0;
  1129   001216  987C               	bcf	124,4,c	;volatile
  1130                           
  1131                           ;main.c: 85:     for(colour i = RED; i<= BLACK; i++){
  1132   001218  0E00               	movlw	0
  1133   00121A  6FD9               	movwf	main@i& (0+255),b
  1134   00121C  EF11  F009         	goto	l238
  1135   001220                     l239:
  1136                           
  1137                           ;main.c: 87:             LATDbits.LATD4 = 1;
  1138   001220  887C               	bsf	124,4,c	;volatile
  1139   001222                     l238:
  1140                           
  1141                           ;main.c: 86:         while(PORTFbits.RF2){
  1142   001222  B48E               	btfsc	142,2,c	;volatile
  1143   001224  EF16  F009         	goto	u1971
  1144   001228  EF18  F009         	goto	u1970
  1145   00122C                     u1971:
  1146   00122C  EF10  F009         	goto	l239
  1147   001230                     u1970:
  1148   001230                     
  1149                           ;main.c: 89:         LATDbits.LATD4 = 0;
  1150   001230  987C               	bcf	124,4,c	;volatile
  1151   001232                     
  1152                           ;main.c: 90:         collect_avg_readings(&red_read, &green_read, &blue_read);
  1153   001232  0ED3               	movlw	low main@red_read
  1154   001234  6E10               	movwf	collect_avg_readings@red_read^0,c
  1155   001236  0E01               	movlw	high main@red_read
  1156   001238  6E11               	movwf	(collect_avg_readings@red_read+1)^0,c
  1157   00123A  0ED5               	movlw	low main@green_read
  1158   00123C  6E12               	movwf	collect_avg_readings@green_read^0,c
  1159   00123E  0E01               	movlw	high main@green_read
  1160   001240  6E13               	movwf	(collect_avg_readings@green_read+1)^0,c
  1161   001242  0ED7               	movlw	low main@blue_read
  1162   001244  6E14               	movwf	collect_avg_readings@blue_read^0,c
  1163   001246  0E01               	movlw	high main@blue_read
  1164   001248  6E15               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1165   00124A  EC81  F00C         	call	_collect_avg_readings	;wreg free
  1166   00124E                     
  1167                           ;main.c: 91:         expected_values[RED][i] = red_read;
  1168   00124E  0101               	movlb	1	; () banked
  1169   001250  51D9               	movf	main@i& (0+255),w,b
  1170   001252  0D02               	mullw	2
  1171   001254  0E96               	movlw	low main@expected_values
  1172   001256  24F3               	addwf	243,w,c
  1173   001258  6ED9               	movwf	fsr2l,c
  1174   00125A  0E01               	movlw	high main@expected_values
  1175   00125C  20F4               	addwfc	prodh,w,c
  1176   00125E  6EDA               	movwf	fsr2h,c
  1177   001260  C1D3  FFDE         	movff	main@red_read,postinc2
  1178   001264  C1D4  FFDD         	movff	main@red_read+1,postdec2
  1179   001268                     
  1180                           ; BSR set to: 1
  1181                           ;main.c: 92:         expected_values[GREEN][i] = green_read;
  1182   001268  51D9               	movf	main@i& (0+255),w,b
  1183   00126A  0D02               	mullw	2
  1184   00126C  0E12               	movlw	18
  1185   00126E  26F3               	addwf	243,f,c
  1186   001270  0E00               	movlw	0
  1187   001272  22F4               	addwfc	244,f,c
  1188   001274  0E96               	movlw	low main@expected_values
  1189   001276  24F3               	addwf	243,w,c
  1190   001278  6ED9               	movwf	fsr2l,c
  1191   00127A  0E01               	movlw	high main@expected_values
  1192   00127C  20F4               	addwfc	prodh,w,c
  1193   00127E  6EDA               	movwf	fsr2h,c
  1194   001280  C1D5  FFDE         	movff	main@green_read,postinc2
  1195   001284  C1D6  FFDD         	movff	main@green_read+1,postdec2
  1196   001288                     
  1197                           ; BSR set to: 1
  1198                           ;main.c: 93:         expected_values[BLUE][i] = blue_read;
  1199   001288  51D9               	movf	main@i& (0+255),w,b
  1200   00128A  0D02               	mullw	2
  1201   00128C  0E24               	movlw	36
  1202   00128E  26F3               	addwf	243,f,c
  1203   001290  0E00               	movlw	0
  1204   001292  22F4               	addwfc	244,f,c
  1205   001294  0E96               	movlw	low main@expected_values
  1206   001296  24F3               	addwf	243,w,c
  1207   001298  6ED9               	movwf	fsr2l,c
  1208   00129A  0E01               	movlw	high main@expected_values
  1209   00129C  20F4               	addwfc	prodh,w,c
  1210   00129E  6EDA               	movwf	fsr2h,c
  1211   0012A0  C1D7  FFDE         	movff	main@blue_read,postinc2
  1212   0012A4  C1D8  FFDD         	movff	main@blue_read+1,postdec2
  1213   0012A8                     
  1214                           ; BSR set to: 1
  1215                           ;main.c: 94:         sprintf(buf, "\n EXPECTED: R %d, G %d, B %d  CARD: %d \n", red_read
      +                          , green_read, blue_read, i);
  1216   0012A8  0E00               	movlw	low main@buf
  1217   0012AA  0100               	movlb	0	; () banked
  1218   0012AC  6F66               	movwf	sprintf@s& (0+255),b
  1219   0012AE  0E01               	movlw	high main@buf
  1220   0012B0  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1221   0012B2  0E01               	movlw	low STR_1
  1222   0012B4  6F68               	movwf	sprintf@fmt& (0+255),b
  1223   0012B6  0E0E               	movlw	high STR_1
  1224   0012B8  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1225   0012BA  C1D3  F06A         	movff	main@red_read,?_sprintf+4
  1226   0012BE  C1D4  F06B         	movff	main@red_read+1,?_sprintf+5
  1227   0012C2  C1D5  F06C         	movff	main@green_read,?_sprintf+6
  1228   0012C6  C1D6  F06D         	movff	main@green_read+1,?_sprintf+7
  1229   0012CA  C1D7  F06E         	movff	main@blue_read,?_sprintf+8
  1230   0012CE  C1D8  F06F         	movff	main@blue_read+1,?_sprintf+9
  1231   0012D2  C1D9  F070         	movff	main@i,?_sprintf+10
  1232   0012D6  6B71               	clrf	(?_sprintf+11)& (0+255),b
  1233   0012D8  EC41  F014         	call	_sprintf	;wreg free
  1234   0012DC                     
  1235                           ;main.c: 95:         sendStringSerial4(buf);
  1236   0012DC  0E00               	movlw	low main@buf
  1237   0012DE  6E06               	movwf	sendStringSerial4@string^0,c
  1238   0012E0  0E01               	movlw	high main@buf
  1239   0012E2  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1240   0012E4  ECA6  F015         	call	_sendStringSerial4	;wreg free
  1241   0012E8                     
  1242                           ;main.c: 96:     }
  1243   0012E8  0101               	movlb	1	; () banked
  1244   0012EA  2BD9               	incf	main@i& (0+255),f,b
  1245   0012EC                     
  1246                           ; BSR set to: 1
  1247   0012EC  0E08               	movlw	8
  1248   0012EE  65D9               	cpfsgt	main@i& (0+255),b
  1249   0012F0  EF7C  F009         	goto	u1981
  1250   0012F4  EF7E  F009         	goto	u1980
  1251   0012F8                     u1981:
  1252   0012F8  EF11  F009         	goto	l238
  1253   0012FC                     u1980:
  1254   0012FC  EF82  F009         	goto	l241
  1255   001300                     l242:
  1256                           
  1257                           ;main.c: 99:             LATDbits.LATD4 = 1;
  1258   001300  887C               	bsf	124,4,c	;volatile
  1259                           
  1260                           ;main.c: 100:             LATHbits.LATH0 = 1;
  1261   001302  8080               	bsf	128,0,c	;volatile
  1262   001304                     l241:
  1263                           
  1264                           ;main.c: 98:     while(PORTFbits.RF2){
  1265   001304  B48E               	btfsc	142,2,c	;volatile
  1266   001306  EF87  F009         	goto	u1991
  1267   00130A  EF89  F009         	goto	u1990
  1268   00130E                     u1991:
  1269   00130E  EF80  F009         	goto	l242
  1270   001312                     u1990:
  1271   001312                     
  1272                           ;main.c: 102:     for (int i = 0; i <= 500; i++){
  1273   001312  0E00               	movlw	0
  1274   001314  0101               	movlb	1	; () banked
  1275   001316  6FCE               	movwf	(main@i_1290+1)& (0+255),b
  1276   001318  0E00               	movlw	0
  1277   00131A  6FCD               	movwf	main@i_1290& (0+255),b
  1278   00131C                     l3567:
  1279                           
  1280                           ; BSR set to: 1
  1281                           ;main.c: 103:         clear_read = color_read_Clear();
  1282   00131C  EC6A  F014         	call	_color_read_Clear	;wreg free
  1283   001320  C009  F1D1         	movff	?_color_read_Clear,main@clear_read
  1284   001324  C00A  F1D2         	movff	?_color_read_Clear+1,main@clear_read+1
  1285   001328                     
  1286                           ;main.c: 104:     }
  1287   001328  0101               	movlb	1	; () banked
  1288   00132A  4BCD               	infsnz	main@i_1290& (0+255),f,b
  1289   00132C  2BCE               	incf	(main@i_1290+1)& (0+255),f,b
  1290   00132E                     
  1291                           ; BSR set to: 1
  1292   00132E  BFCE               	btfsc	(main@i_1290+1)& (0+255),7,b
  1293   001330  EFA3  F009         	goto	u2001
  1294   001334  0EF5               	movlw	245
  1295   001336  5DCD               	subwf	main@i_1290& (0+255),w,b
  1296   001338  0E01               	movlw	1
  1297   00133A  59CE               	subwfb	(main@i_1290+1)& (0+255),w,b
  1298   00133C  A0D8               	btfss	status,0,c
  1299   00133E  EFA3  F009         	goto	u2001
  1300   001342  EFA5  F009         	goto	u2000
  1301   001346                     u2001:
  1302   001346  EF8E  F009         	goto	l3567
  1303   00134A                     u2000:
  1304   00134A                     
  1305                           ; BSR set to: 1
  1306                           ;main.c: 105:     for(int i = 0; i <= 2; i++){
  1307   00134A  0E00               	movlw	0
  1308   00134C  6FD0               	movwf	(main@i_1292+1)& (0+255),b
  1309   00134E  0E00               	movlw	0
  1310   001350  6FCF               	movwf	main@i_1292& (0+255),b
  1311   001352                     l3579:
  1312                           
  1313                           ; BSR set to: 1
  1314                           ;main.c: 106:         clear_read += color_read_Clear();
  1315   001352  EC6A  F014         	call	_color_read_Clear	;wreg free
  1316   001356  5009               	movf	?_color_read_Clear^0,w,c
  1317   001358  0101               	movlb	1	; () banked
  1318   00135A  27D1               	addwf	main@clear_read& (0+255),f,b
  1319   00135C  500A               	movf	(?_color_read_Clear+1)^0,w,c
  1320   00135E  23D2               	addwfc	(main@clear_read+1)& (0+255),f,b
  1321   001360                     
  1322                           ; BSR set to: 1
  1323                           ;main.c: 107:         _delay((unsigned long)((200)*(64000000/4000.0)));
  1324   001360  0E11               	movlw	17
  1325   001362  0100               	movlb	0	; () banked
  1326   001364  6FD7               	movwf	(??_main+1)& (0+255),b
  1327   001366  0E3C               	movlw	60
  1328   001368  6FD6               	movwf	??_main& (0+255),b
  1329   00136A  0ECB               	movlw	203
  1330   00136C                     u2047:
  1331   00136C  2EE8               	decfsz	wreg,f,c
  1332   00136E  D7FE               	bra	u2047
  1333   001370  2FD6               	decfsz	??_main& (0+255),f,b
  1334   001372  D7FC               	bra	u2047
  1335   001374  2FD7               	decfsz	(??_main+1)& (0+255),f,b
  1336   001376  D7FA               	bra	u2047
  1337   001378                     
  1338                           ;main.c: 108:     }
  1339   001378  0101               	movlb	1	; () banked
  1340   00137A  4BCF               	infsnz	main@i_1292& (0+255),f,b
  1341   00137C  2BD0               	incf	(main@i_1292+1)& (0+255),f,b
  1342   00137E                     
  1343                           ; BSR set to: 1
  1344   00137E  BFD0               	btfsc	(main@i_1292+1)& (0+255),7,b
  1345   001380  EFCB  F009         	goto	u2011
  1346   001384  51D0               	movf	(main@i_1292+1)& (0+255),w,b
  1347   001386  E109               	bnz	u2010
  1348   001388  0E03               	movlw	3
  1349   00138A  5DCF               	subwf	main@i_1292& (0+255),w,b
  1350   00138C  A0D8               	btfss	status,0,c
  1351   00138E  EFCB  F009         	goto	u2011
  1352   001392  EFCD  F009         	goto	u2010
  1353   001396                     u2011:
  1354   001396  EFA9  F009         	goto	l3579
  1355   00139A                     u2010:
  1356   00139A                     
  1357                           ; BSR set to: 1
  1358                           ;main.c: 109:     clear_read = clear_read/4;
  1359   00139A  C1D1  F0D6         	movff	main@clear_read,??_main
  1360   00139E  C1D2  F0D7         	movff	main@clear_read+1,??_main+1
  1361   0013A2  0100               	movlb	0	; () banked
  1362   0013A4  90D8               	bcf	status,0,c
  1363   0013A6  33D7               	rrcf	(??_main+1)& (0+255),f,b
  1364   0013A8  33D6               	rrcf	??_main& (0+255),f,b
  1365   0013AA  90D8               	bcf	status,0,c
  1366   0013AC  33D7               	rrcf	(??_main+1)& (0+255),f,b
  1367   0013AE  33D6               	rrcf	??_main& (0+255),f,b
  1368   0013B0  C0D6  F1D1         	movff	??_main,main@clear_read
  1369   0013B4  C0D7  F1D2         	movff	??_main+1,main@clear_read+1
  1370   0013B8                     
  1371                           ; BSR set to: 0
  1372                           ;main.c: 111:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1373   0013B8  0E00               	movlw	low main@buf
  1374   0013BA  6F66               	movwf	sprintf@s& (0+255),b
  1375   0013BC  0E01               	movlw	high main@buf
  1376   0013BE  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1377   0013C0  0E44               	movlw	low STR_2
  1378   0013C2  6F68               	movwf	sprintf@fmt& (0+255),b
  1379   0013C4  0E0E               	movlw	high STR_2
  1380   0013C6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1381   0013C8  C1D1  F06A         	movff	main@clear_read,?_sprintf+4
  1382   0013CC  C1D2  F06B         	movff	main@clear_read+1,?_sprintf+5
  1383   0013D0  EC41  F014         	call	_sprintf	;wreg free
  1384   0013D4                     
  1385                           ;main.c: 112:     sendStringSerial4(buf);
  1386   0013D4  0E00               	movlw	low main@buf
  1387   0013D6  6E06               	movwf	sendStringSerial4@string^0,c
  1388   0013D8  0E01               	movlw	high main@buf
  1389   0013DA  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1390   0013DC  ECA6  F015         	call	_sendStringSerial4	;wreg free
  1391   0013E0                     
  1392                           ;main.c: 116:     while(PORTFbits.RF2){
  1393   0013E0  EFF4  F009         	goto	l248
  1394   0013E4                     l249:
  1395                           
  1396                           ;main.c: 117:             LATDbits.LATD4 = 1;
  1397   0013E4  887C               	bsf	124,4,c	;volatile
  1398                           
  1399                           ;main.c: 118:             LATFbits.LATF0 = 1;
  1400   0013E6  807E               	bsf	126,0,c	;volatile
  1401   0013E8                     l248:
  1402                           
  1403                           ;main.c: 116:     while(PORTFbits.RF2){
  1404   0013E8  B48E               	btfsc	142,2,c	;volatile
  1405   0013EA  EFF9  F009         	goto	u2021
  1406   0013EE  EFFB  F009         	goto	u2020
  1407   0013F2                     u2021:
  1408   0013F2  EFF2  F009         	goto	l249
  1409   0013F6                     u2020:
  1410   0013F6                     
  1411                           ;main.c: 150:     LATHbits.LATH3=0;
  1412   0013F6  9680               	bcf	128,3,c	;volatile
  1413                           
  1414                           ;main.c: 151:     TRISHbits.TRISH3=0;
  1415   0013F8  9688               	bcf	136,3,c	;volatile
  1416                           
  1417                           ;main.c: 153:     LATDbits.LATD7=0;
  1418   0013FA  9E7C               	bcf	124,7,c	;volatile
  1419                           
  1420                           ;main.c: 154:     TRISDbits.TRISD7=0;
  1421   0013FC  9E84               	bcf	132,7,c	;volatile
  1422   0013FE  EF03  F00A         	goto	l252
  1423   001402                     l253:
  1424                           
  1425                           ;main.c: 172:             LATDbits.LATD4 = 1;
  1426   001402  887C               	bsf	124,4,c	;volatile
  1427                           
  1428                           ;main.c: 173:             LATFbits.LATF0 = 1;
  1429   001404  807E               	bsf	126,0,c	;volatile
  1430   001406                     l252:
  1431                           
  1432                           ;main.c: 171:         while(PORTFbits.RF2){
  1433   001406  B48E               	btfsc	142,2,c	;volatile
  1434   001408  EF08  F00A         	goto	u2031
  1435   00140C  EF0A  F00A         	goto	u2030
  1436   001410                     u2031:
  1437   001410  EF01  F00A         	goto	l253
  1438   001414                     u2030:
  1439   001414                     
  1440                           ;main.c: 175:         LATFbits.LATF0 = 0;
  1441   001414  907E               	bcf	126,0,c	;volatile
  1442   001416                     
  1443                           ;main.c: 177:         card_response(buf, &red_read, &green_read, &blue_read, expected_va
      +                          lues, &motorL, &motorR);
  1444   001416  0E00               	movlw	low main@buf
  1445   001418  0100               	movlb	0	; () banked
  1446   00141A  6F7F               	movwf	card_response@buf& (0+255),b
  1447   00141C  0E01               	movlw	high main@buf
  1448   00141E  6F80               	movwf	(card_response@buf+1)& (0+255),b
  1449   001420  0ED3               	movlw	low main@red_read
  1450   001422  6F81               	movwf	card_response@red_read& (0+255),b
  1451   001424  0E01               	movlw	high main@red_read
  1452   001426  6F82               	movwf	(card_response@red_read+1)& (0+255),b
  1453   001428  0ED5               	movlw	low main@green_read
  1454   00142A  6F83               	movwf	card_response@green_read& (0+255),b
  1455   00142C  0E01               	movlw	high main@green_read
  1456   00142E  6F84               	movwf	(card_response@green_read+1)& (0+255),b
  1457   001430  0ED7               	movlw	low main@blue_read
  1458   001432  6F85               	movwf	card_response@blue_read& (0+255),b
  1459   001434  0E01               	movlw	high main@blue_read
  1460   001436  6F86               	movwf	(card_response@blue_read+1)& (0+255),b
  1461   001438  0E96               	movlw	low main@expected_values
  1462   00143A  6F87               	movwf	card_response@expected_values& (0+255),b
  1463   00143C  0E01               	movlw	high main@expected_values
  1464   00143E  6F88               	movwf	(card_response@expected_values+1)& (0+255),b
  1465   001440  0EDA               	movlw	low main@motorL
  1466   001442  6F89               	movwf	card_response@mL& (0+255),b
  1467   001444  0E01               	movlw	high main@motorL
  1468   001446  6F8A               	movwf	(card_response@mL+1)& (0+255),b
  1469   001448  0EE3               	movlw	low main@motorR
  1470   00144A  6F8B               	movwf	card_response@mR& (0+255),b
  1471   00144C  0E01               	movlw	high main@motorR
  1472   00144E  6F8C               	movwf	(card_response@mR+1)& (0+255),b
  1473   001450  EC4F  F010         	call	_card_response	;wreg free
  1474   001454  EF03  F00A         	goto	l252
  1475   001458  EF3B  F000         	goto	start
  1476   00145C                     __end_of_main:
  1477                           	callstack 0
  1478                           
  1479 ;; *************** function _initUSART4 *****************
  1480 ;; Defined at:
  1481 ;;		line 6 in file "serial.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1499 ;;Total ram usage:        0 bytes
  1500 ;; Hardware stack levels used: 1
  1501 ;; Hardware stack levels required when called: 4
  1502 ;; This function calls:
  1503 ;;		Nothing
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text1
  1510   002C68                     __ptext1:
  1511                           	callstack 0
  1512   002C68                     _initUSART4:
  1513                           	callstack 26
  1514   002C68                     
  1515                           ;serial.c: 10:     RC0PPS = 0x12;
  1516   002C68  0E12               	movlw	18
  1517   002C6A  010E               	movlb	14	; () banked
  1518   002C6C  6F62               	movwf	98,b	;volatile
  1519                           
  1520                           ;serial.c: 11:     RX4PPS = 0x11;
  1521   002C6E  0E11               	movlw	17
  1522   002C70  6F15               	movwf	21,b	;volatile
  1523   002C72                     
  1524                           ; BSR set to: 14
  1525                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1526   002C72  8283               	bsf	131,1,c	;volatile
  1527   002C74                     
  1528                           ; BSR set to: 14
  1529                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1530   002C74  97E9               	bcf	233,3,b	;volatile
  1531   002C76                     
  1532                           ; BSR set to: 14
  1533                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1534   002C76  95E8               	bcf	232,2,b	;volatile
  1535                           
  1536                           ;serial.c: 17:     SP4BRGL = 51;
  1537   002C78  0E33               	movlw	51
  1538   002C7A  6FE5               	movwf	229,b	;volatile
  1539                           
  1540                           ;serial.c: 18:     SP4BRGH = 0;
  1541   002C7C  0E00               	movlw	0
  1542   002C7E  6FE6               	movwf	230,b	;volatile
  1543   002C80                     
  1544                           ; BSR set to: 14
  1545                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1546   002C80  89E7               	bsf	231,4,b	;volatile
  1547   002C82                     
  1548                           ; BSR set to: 14
  1549                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1550   002C82  8BE8               	bsf	232,5,b	;volatile
  1551   002C84                     
  1552                           ; BSR set to: 14
  1553                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1554   002C84  8FE7               	bsf	231,7,b	;volatile
  1555   002C86                     
  1556                           ; BSR set to: 14
  1557   002C86  0012               	return		;funcret
  1558   002C88                     __end_of_initUSART4:
  1559                           	callstack 0
  1560                           
  1561 ;; *************** function _initDCmotorsPWM *****************
  1562 ;; Defined at:
  1563 ;;		line 6 in file "dc_motor.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;		None
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, status,2
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1581 ;;Total ram usage:        0 bytes
  1582 ;; Hardware stack levels used: 1
  1583 ;; Hardware stack levels required when called: 4
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text2
  1592   00254A                     __ptext2:
  1593                           	callstack 0
  1594   00254A                     _initDCmotorsPWM:
  1595                           	callstack 26
  1596   00254A                     
  1597                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1598   00254A  9485               	bcf	133,2,c	;volatile
  1599                           
  1600                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1601   00254C  9885               	bcf	133,4,c	;volatile
  1602                           
  1603                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1604   00254E  9E83               	bcf	131,7,c	;volatile
  1605                           
  1606                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1607   002550  9C87               	bcf	135,6,c	;volatile
  1608   002552                     
  1609                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1610   002552  0E05               	movlw	5
  1611   002554  010E               	movlb	14	; () banked
  1612   002556  6F74               	movwf	116,b	;volatile
  1613                           
  1614                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1615   002558  0E06               	movlw	6
  1616   00255A  6F76               	movwf	118,b	;volatile
  1617                           
  1618                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1619   00255C  0E07               	movlw	7
  1620   00255E  6F69               	movwf	105,b	;volatile
  1621                           
  1622                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1623   002560  0E08               	movlw	8
  1624   002562  6F88               	movwf	136,b	;volatile
  1625                           
  1626                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1627   002564  50BD               	movf	189,w,c	;volatile
  1628   002566  0B8F               	andlw	-113
  1629   002568  0940               	iorlw	64
  1630   00256A  6EBD               	movwf	189,c	;volatile
  1631                           
  1632                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1633   00256C  0EE0               	movlw	-32
  1634   00256E  16BE               	andwf	190,f,c	;volatile
  1635                           
  1636                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1637   002570  50BF               	movf	191,w,c	;volatile
  1638   002572  0BF0               	andlw	-16
  1639   002574  0901               	iorlw	1
  1640   002576  6EBF               	movwf	191,c	;volatile
  1641                           
  1642                           ;dc_motor.c: 26:     T2PR=99;
  1643   002578  0E63               	movlw	99
  1644   00257A  6EBC               	movwf	188,c	;volatile
  1645   00257C                     
  1646                           ; BSR set to: 14
  1647                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1648   00257C  8EBD               	bsf	189,7,c	;volatile
  1649                           
  1650                           ;dc_motor.c: 31:     CCPR1H=0;
  1651   00257E  0E00               	movlw	0
  1652   002580  6EAA               	movwf	170,c	;volatile
  1653                           
  1654                           ;dc_motor.c: 32:     CCPR2H=0;
  1655   002582  0E00               	movlw	0
  1656   002584  6EA6               	movwf	166,c	;volatile
  1657                           
  1658                           ;dc_motor.c: 33:     CCPR3H=0;
  1659   002586  0E00               	movlw	0
  1660   002588  010F               	movlb	15	; () banked
  1661   00258A  6F25               	movwf	37,b	;volatile
  1662                           
  1663                           ;dc_motor.c: 34:     CCPR4H=0;
  1664   00258C  0E00               	movlw	0
  1665   00258E  6F21               	movwf	33,b	;volatile
  1666                           
  1667                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1668   002590  0EFC               	movlw	-4
  1669   002592  16AD               	andwf	173,f,c	;volatile
  1670                           
  1671                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1672   002594  0EF3               	movlw	-13
  1673   002596  16AD               	andwf	173,f,c	;volatile
  1674                           
  1675                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1676   002598  0ECF               	movlw	-49
  1677   00259A  16AD               	andwf	173,f,c	;volatile
  1678                           
  1679                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1680   00259C  0E3F               	movlw	-193
  1681   00259E  16AD               	andwf	173,f,c	;volatile
  1682   0025A0                     
  1683                           ; BSR set to: 15
  1684                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1685   0025A0  88AB               	bsf	171,4,c	;volatile
  1686                           
  1687                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1688   0025A2  50AB               	movf	171,w,c	;volatile
  1689   0025A4  0BF0               	andlw	-16
  1690   0025A6  090C               	iorlw	12
  1691   0025A8  6EAB               	movwf	171,c	;volatile
  1692   0025AA                     
  1693                           ; BSR set to: 15
  1694                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1695   0025AA  8EAB               	bsf	171,7,c	;volatile
  1696   0025AC                     
  1697                           ; BSR set to: 15
  1698                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1699   0025AC  88A7               	bsf	167,4,c	;volatile
  1700                           
  1701                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1702   0025AE  50A7               	movf	167,w,c	;volatile
  1703   0025B0  0BF0               	andlw	-16
  1704   0025B2  090C               	iorlw	12
  1705   0025B4  6EA7               	movwf	167,c	;volatile
  1706   0025B6                     
  1707                           ; BSR set to: 15
  1708                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1709   0025B6  8EA7               	bsf	167,7,c	;volatile
  1710   0025B8                     
  1711                           ; BSR set to: 15
  1712                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1713   0025B8  8926               	bsf	38,4,b	;volatile
  1714                           
  1715                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1716   0025BA  5126               	movf	38,w,b	;volatile
  1717   0025BC  0BF0               	andlw	-16
  1718   0025BE  090C               	iorlw	12
  1719   0025C0  6F26               	movwf	38,b	;volatile
  1720   0025C2                     
  1721                           ; BSR set to: 15
  1722                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1723   0025C2  8F26               	bsf	38,7,b	;volatile
  1724   0025C4                     
  1725                           ; BSR set to: 15
  1726                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1727   0025C4  8922               	bsf	34,4,b	;volatile
  1728                           
  1729                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1730   0025C6  5122               	movf	34,w,b	;volatile
  1731   0025C8  0BF0               	andlw	-16
  1732   0025CA  090C               	iorlw	12
  1733   0025CC  6F22               	movwf	34,b	;volatile
  1734   0025CE                     
  1735                           ; BSR set to: 15
  1736                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1737   0025CE  8F22               	bsf	34,7,b	;volatile
  1738   0025D0                     
  1739                           ; BSR set to: 15
  1740   0025D0  0012               	return		;funcret
  1741   0025D2                     __end_of_initDCmotorsPWM:
  1742                           	callstack 0
  1743                           
  1744 ;; *************** function _color_read_Clear *****************
  1745 ;; Defined at:
  1746 ;;		line 71 in file "color.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  tmp             2   13[COMRAM] unsigned int 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  2    8[COMRAM] unsigned int 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1760 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;Total ram usage:        7 bytes
  1765 ;; Hardware stack levels used: 1
  1766 ;; Hardware stack levels required when called: 6
  1767 ;; This function calls:
  1768 ;;		_I2C_2_Master_Read
  1769 ;;		_I2C_2_Master_RepStart
  1770 ;;		_I2C_2_Master_Start
  1771 ;;		_I2C_2_Master_Stop
  1772 ;;		_I2C_2_Master_Write
  1773 ;; This function is called by:
  1774 ;;		_main
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text3
  1779   0028D4                     __ptext3:
  1780                           	callstack 0
  1781   0028D4                     _color_read_Clear:
  1782                           	callstack 24
  1783   0028D4                     
  1784                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  1785   0028D4  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  1786                           
  1787                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  1788   0028D8  0E52               	movlw	82
  1789   0028DA  EC7E  F016         	call	_I2C_2_Master_Write
  1790                           
  1791                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  1792   0028DE  0EB4               	movlw	180
  1793   0028E0  EC7E  F016         	call	_I2C_2_Master_Write
  1794                           
  1795                           ;color.c: 77:  I2C_2_Master_RepStart();
  1796   0028E4  EC8A  F016         	call	_I2C_2_Master_RepStart	;wreg free
  1797                           
  1798                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  1799   0028E8  0E53               	movlw	83
  1800   0028EA  EC7E  F016         	call	_I2C_2_Master_Write
  1801                           
  1802                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  1803   0028EE  0E01               	movlw	1
  1804   0028F0  EC2C  F015         	call	_I2C_2_Master_Read
  1805   0028F4  6E0B               	movwf	??_color_read_Clear^0,c
  1806   0028F6  500B               	movf	??_color_read_Clear^0,w,c
  1807   0028F8  6E0E               	movwf	color_read_Clear@tmp^0,c
  1808   0028FA  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  1809                           
  1810                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  1811   0028FC  0E00               	movlw	0
  1812   0028FE  EC2C  F015         	call	_I2C_2_Master_Read
  1813   002902  6E0B               	movwf	??_color_read_Clear^0,c
  1814   002904  500B               	movf	??_color_read_Clear^0,w,c
  1815   002906  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  1816   002908  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  1817   00290A  500E               	movf	color_read_Clear@tmp^0,w,c
  1818   00290C  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  1819   00290E  6E0E               	movwf	color_read_Clear@tmp^0,c
  1820   002910  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  1821   002912  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  1822   002914  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  1823                           
  1824                           ;color.c: 81:  I2C_2_Master_Stop();
  1825   002916  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  1826   00291A                     
  1827                           ;color.c: 82:  return tmp;
  1828   00291A  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  1829   00291E  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  1830   002922  0012               	return		;funcret
  1831   002924                     __end_of_color_read_Clear:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function _color_click_init *****************
  1835 ;; Defined at:
  1836 ;;		line 5 in file "color.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2, status,0, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1854 ;;Total ram usage:        1 bytes
  1855 ;; Hardware stack levels used: 1
  1856 ;; Hardware stack levels required when called: 7
  1857 ;; This function calls:
  1858 ;;		_I2C_2_Master_Init
  1859 ;;		_color_writetoaddr
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text4
  1866   002B18                     __ptext4:
  1867                           	callstack 0
  1868   002B18                     _color_click_init:
  1869                           	callstack 23
  1870   002B18                     
  1871                           ;color.c: 8:     I2C_2_Master_Init();
  1872   002B18  ECD3  F015         	call	_I2C_2_Master_Init	;wreg free
  1873   002B1C                     
  1874                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1875   002B1C  0E01               	movlw	1
  1876   002B1E  6E07               	movwf	color_writetoaddr@value^0,c
  1877   002B20  0E00               	movlw	0
  1878   002B22  EC44  F016         	call	_color_writetoaddr
  1879   002B26                     
  1880                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1881   002B26  0E3F               	movlw	63
  1882   002B28  6E09               	movwf	??_color_click_init^0,c
  1883   002B2A  0E55               	movlw	85
  1884   002B2C                     u2057:
  1885   002B2C  2EE8               	decfsz	wreg,f,c
  1886   002B2E  D7FE               	bra	u2057
  1887   002B30  2E09               	decfsz	??_color_click_init^0,f,c
  1888   002B32  D7FC               	bra	u2057
  1889   002B34  F000               	nop	
  1890   002B36                     
  1891                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1892   002B36  0E03               	movlw	3
  1893   002B38  6E07               	movwf	color_writetoaddr@value^0,c
  1894   002B3A  0E00               	movlw	0
  1895   002B3C  EC44  F016         	call	_color_writetoaddr
  1896   002B40                     
  1897                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1898   002B40  0ED5               	movlw	213
  1899   002B42  6E07               	movwf	color_writetoaddr@value^0,c
  1900   002B44  0E01               	movlw	1
  1901   002B46  EC44  F016         	call	_color_writetoaddr
  1902   002B4A  0012               	return		;funcret
  1903   002B4C                     __end_of_color_click_init:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _I2C_2_Master_Init *****************
  1907 ;; Defined at:
  1908 ;;		line 4 in file "i2c.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used: 1
  1928 ;; Hardware stack levels required when called: 4
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_color_click_init
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text5
  1938   002BA6                     __ptext5:
  1939                           	callstack 0
  1940   002BA6                     _I2C_2_Master_Init:
  1941                           	callstack 25
  1942   002BA6                     
  1943                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1944   002BA6  010E               	movlb	14	; () banked
  1945   002BA8  51D9               	movf	217,w,b	;volatile
  1946   002BAA  0BF0               	andlw	-16
  1947   002BAC  0908               	iorlw	8
  1948   002BAE  6FD9               	movwf	217,b	;volatile
  1949   002BB0                     
  1950                           ; BSR set to: 14
  1951                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1952   002BB0  8BD9               	bsf	217,5,b	;volatile
  1953                           
  1954                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1955   002BB2  0E9F               	movlw	159
  1956   002BB4  6FD6               	movwf	214,b	;volatile
  1957   002BB6                     
  1958                           ; BSR set to: 14
  1959                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1960   002BB6  8A84               	bsf	132,5,c	;volatile
  1961   002BB8                     
  1962                           ; BSR set to: 14
  1963                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1964   002BB8  8C84               	bsf	132,6,c	;volatile
  1965   002BBA                     
  1966                           ; BSR set to: 14
  1967                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1968   002BBA  9BA7               	bcf	167,5,b	;volatile
  1969   002BBC                     
  1970                           ; BSR set to: 14
  1971                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1972   002BBC  9DA7               	bcf	167,6,b	;volatile
  1973                           
  1974                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1975   002BBE  0E1D               	movlw	29
  1976   002BC0  6F1D               	movwf	29,b	;volatile
  1977                           
  1978                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1979   002BC2  0E1E               	movlw	30
  1980   002BC4  6F1C               	movwf	28,b	;volatile
  1981                           
  1982                           ;i2c.c: 18:   RD5PPS=0x1C;
  1983   002BC6  0E1C               	movlw	28
  1984   002BC8  6F6F               	movwf	111,b	;volatile
  1985                           
  1986                           ;i2c.c: 19:   RD6PPS=0x1B;
  1987   002BCA  0E1B               	movlw	27
  1988   002BCC  6F70               	movwf	112,b	;volatile
  1989   002BCE                     
  1990                           ; BSR set to: 14
  1991   002BCE  0012               	return		;funcret
  1992   002BD0                     __end_of_I2C_2_Master_Init:
  1993                           	callstack 0
  1994                           
  1995 ;; *************** function _card_response *****************
  1996 ;; Defined at:
  1997 ;;		line 177 in file "colour_identify.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  buf             2   31[BANK0 ] PTR unsigned char 
  2000 ;;		 -> main@buf(150), 
  2001 ;;  red_read        2   33[BANK0 ] PTR unsigned int 
  2002 ;;		 -> main@red_read(2), 
  2003 ;;  green_read      2   35[BANK0 ] PTR unsigned int 
  2004 ;;		 -> main@green_read(2), 
  2005 ;;  blue_read       2   37[BANK0 ] PTR unsigned int 
  2006 ;;		 -> main@blue_read(2), 
  2007 ;;  expected_val    2   39[BANK0 ] PTR unsigned int [9]
  2008 ;;		 -> main@expected_values(54), 
  2009 ;;  mL              2   41[BANK0 ] PTR struct DC_motor
  2010 ;;		 -> main@motorL(9), 
  2011 ;;  mR              2   43[BANK0 ] PTR struct DC_motor
  2012 ;;		 -> main@motorR(9), 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  normalised_v   54   45[BANK0 ] unsigned int [9][3]
  2015 ;;  master_close   18   99[BANK0 ] unsigned int [9]
  2016 ;;  card            1  117[BANK0 ] enum E14551
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2026 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Locals:         0      73       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Totals:         0      87       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;Total ram usage:       87 bytes
  2031 ;; Hardware stack levels used: 1
  2032 ;; Hardware stack levels required when called: 12
  2033 ;; This function calls:
  2034 ;;		_collect_avg_readings
  2035 ;;		_determine_card
  2036 ;;		_make_master_closeness
  2037 ;;		_motor_response
  2038 ;;		_normalise_readings
  2039 ;;		_sendStringSerial4
  2040 ;;		_sprintf
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text6
  2047   00209E                     __ptext6:
  2048                           	callstack 0
  2049   00209E                     _card_response:
  2050                           	callstack 18
  2051   00209E                     
  2052                           ;colour_identify.c: 181:     unsigned int normalised_values[3][9];;colour_identify.c: 18
      +                          2:     unsigned int master_closeness[9];;colour_identify.c: 184:     collect_avg_reading
      +                          s(red_read, green_read, blue_read);
  2053   00209E  C081  F010         	movff	card_response@red_read,collect_avg_readings@red_read
  2054   0020A2  C082  F011         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2055   0020A6  C083  F012         	movff	card_response@green_read,collect_avg_readings@green_read
  2056   0020AA  C084  F013         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2057   0020AE  C085  F014         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2058   0020B2  C086  F015         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2059   0020B6  EC81  F00C         	call	_collect_avg_readings	;wreg free
  2060   0020BA                     
  2061                           ;colour_identify.c: 185:     sprintf(buf, "\n AVG: R %d, G %d, B %d \n", *red_read, *gre
      +                          en_read, *blue_read);
  2062   0020BA  C07F  F066         	movff	card_response@buf,sprintf@s
  2063   0020BE  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  2064   0020C2  0E2A               	movlw	low STR_3
  2065   0020C4  0100               	movlb	0	; () banked
  2066   0020C6  6F68               	movwf	sprintf@fmt& (0+255),b
  2067   0020C8  0E0E               	movlw	high STR_3
  2068   0020CA  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2069   0020CC  C081  FFD9         	movff	card_response@red_read,fsr2l
  2070   0020D0  C082  FFDA         	movff	card_response@red_read+1,fsr2h
  2071   0020D4  CFDE F06A          	movff	postinc2,?_sprintf+4
  2072   0020D8  CFDD F06B          	movff	postdec2,?_sprintf+5
  2073   0020DC  C083  FFD9         	movff	card_response@green_read,fsr2l
  2074   0020E0  C084  FFDA         	movff	card_response@green_read+1,fsr2h
  2075   0020E4  CFDE F06C          	movff	postinc2,?_sprintf+6
  2076   0020E8  CFDD F06D          	movff	postdec2,?_sprintf+7
  2077   0020EC  C085  FFD9         	movff	card_response@blue_read,fsr2l
  2078   0020F0  C086  FFDA         	movff	card_response@blue_read+1,fsr2h
  2079   0020F4  CFDE F06E          	movff	postinc2,?_sprintf+8
  2080   0020F8  CFDD F06F          	movff	postdec2,?_sprintf+9
  2081   0020FC  EC41  F014         	call	_sprintf	;wreg free
  2082   002100                     
  2083                           ;colour_identify.c: 186:     sendStringSerial4(buf);
  2084   002100  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2085   002104  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2086   002108  ECA6  F015         	call	_sendStringSerial4	;wreg free
  2087   00210C                     
  2088                           ;colour_identify.c: 188:     normalise_readings(buf, *red_read, *green_read, *blue_read,
      +                           expected_values, normalised_values);
  2089   00210C  C07F  F01B         	movff	card_response@buf,normalise_readings@buf
  2090   002110  C080  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2091   002114  C081  FFD9         	movff	card_response@red_read,fsr2l
  2092   002118  C082  FFDA         	movff	card_response@red_read+1,fsr2h
  2093   00211C  CFDE F01D          	movff	postinc2,normalise_readings@red_read
  2094   002120  CFDD F01E          	movff	postdec2,normalise_readings@red_read+1
  2095   002124  C083  FFD9         	movff	card_response@green_read,fsr2l
  2096   002128  C084  FFDA         	movff	card_response@green_read+1,fsr2h
  2097   00212C  CFDE F01F          	movff	postinc2,normalise_readings@green_read
  2098   002130  CFDD F020          	movff	postdec2,normalise_readings@green_read+1
  2099   002134  C085  FFD9         	movff	card_response@blue_read,fsr2l
  2100   002138  C086  FFDA         	movff	card_response@blue_read+1,fsr2h
  2101   00213C  CFDE F021          	movff	postinc2,normalise_readings@blue_read
  2102   002140  CFDD F022          	movff	postdec2,normalise_readings@blue_read+1
  2103   002144  C087  F023         	movff	card_response@expected_values,normalise_readings@expected_values
  2104   002148  C088  F024         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2105   00214C  0E8D               	movlw	low card_response@normalised_values
  2106   00214E  6E25               	movwf	normalise_readings@normalised_values^0,c
  2107   002150  0E00               	movlw	high card_response@normalised_values
  2108   002152  6E26               	movwf	(normalise_readings@normalised_values+1)^0,c
  2109   002154  EC6D  F00B         	call	_normalise_readings	;wreg free
  2110   002158                     
  2111                           ;colour_identify.c: 190:     make_master_closeness(buf, normalised_values,master_closene
      +                          ss);
  2112   002158  C07F  F012         	movff	card_response@buf,make_master_closeness@buf
  2113   00215C  C080  F013         	movff	card_response@buf+1,make_master_closeness@buf+1
  2114   002160  0E8D               	movlw	low card_response@normalised_values
  2115   002162  6E14               	movwf	make_master_closeness@normalised_values^0,c
  2116   002164  0E00               	movlw	high card_response@normalised_values
  2117   002166  6E15               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2118   002168  0EC3               	movlw	low card_response@master_closeness
  2119   00216A  6E16               	movwf	make_master_closeness@master_closeness^0,c
  2120   00216C  0E00               	movlw	high card_response@master_closeness
  2121   00216E  6E17               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2122   002170  ECE2  F010         	call	_make_master_closeness	;wreg free
  2123   002174                     
  2124                           ;colour_identify.c: 192:     card = determine_card(master_closeness);
  2125   002174  0EC3               	movlw	low card_response@master_closeness
  2126   002176  6E05               	movwf	determine_card@master_closeness^0,c
  2127   002178  0E00               	movlw	high card_response@master_closeness
  2128   00217A  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2129   00217C  EC2C  F013         	call	_determine_card	;wreg free
  2130   002180  0100               	movlb	0	; () banked
  2131   002182  6FD5               	movwf	card_response@card& (0+255),b
  2132   002184                     
  2133                           ; BSR set to: 0
  2134                           ;colour_identify.c: 193:     sprintf(buf, "CARD %d \n", card);
  2135   002184  C07F  F066         	movff	card_response@buf,sprintf@s
  2136   002188  C080  F067         	movff	card_response@buf+1,sprintf@s+1
  2137   00218C  0E5B               	movlw	low STR_4
  2138   00218E  6F68               	movwf	sprintf@fmt& (0+255),b
  2139   002190  0E0E               	movlw	high STR_4
  2140   002192  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2141   002194  C0D5  F06A         	movff	card_response@card,?_sprintf+4
  2142   002198  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2143   00219A  EC41  F014         	call	_sprintf	;wreg free
  2144   00219E                     
  2145                           ;colour_identify.c: 194:     sendStringSerial4(buf);
  2146   00219E  C07F  F006         	movff	card_response@buf,sendStringSerial4@string
  2147   0021A2  C080  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2148   0021A6  ECA6  F015         	call	_sendStringSerial4	;wreg free
  2149   0021AA                     
  2150                           ;colour_identify.c: 196:     motor_response(card, mL, mR);
  2151   0021AA  C089  F020         	movff	card_response@mL,motor_response@mL
  2152   0021AE  C08A  F021         	movff	card_response@mL+1,motor_response@mL+1
  2153   0021B2  C08B  F022         	movff	card_response@mR,motor_response@mR
  2154   0021B6  C08C  F023         	movff	card_response@mR+1,motor_response@mR+1
  2155   0021BA  0100               	movlb	0	; () banked
  2156   0021BC  51D5               	movf	card_response@card& (0+255),w,b
  2157   0021BE  EC33  F007         	call	_motor_response
  2158   0021C2  0012               	return		;funcret
  2159   0021C4                     __end_of_card_response:
  2160                           	callstack 0
  2161                           
  2162 ;; *************** function _sprintf *****************
  2163 ;; Defined at:
  2164 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2167 ;;		 -> main@buf(150), 
  2168 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2169 ;;		 -> STR_4(10), STR_3(26), STR_2(23), STR_1(41), 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2172 ;;  ap              2   18[BANK0 ] PTR void [1]
  2173 ;;		 -> ?_sprintf(2), 
  2174 ;;  ret             2    0        int 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  2    6[BANK0 ] int 
  2177 ;; Registers used:
  2178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2184 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2187 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2188 ;;Total ram usage:       25 bytes
  2189 ;; Hardware stack levels used: 1
  2190 ;; Hardware stack levels required when called: 11
  2191 ;; This function calls:
  2192 ;;		_vfprintf
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;;		_card_response
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text7
  2200   002882                     __ptext7:
  2201                           	callstack 0
  2202   002882                     _sprintf:
  2203                           	callstack 19
  2204   002882  0E6A               	movlw	low (?_sprintf+4)
  2205   002884  0100               	movlb	0	; () banked
  2206   002886  6F72               	movwf	sprintf@ap& (0+255),b
  2207   002888  0E00               	movlw	high (?_sprintf+4)
  2208   00288A  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2209   00288C  C066  F074         	movff	sprintf@s,sprintf@f
  2210   002890  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2211   002894                     
  2212                           ; BSR set to: 0
  2213   002894  0E00               	movlw	0
  2214   002896  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2215   002898  0E00               	movlw	0
  2216   00289A  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2217   00289C                     
  2218                           ; BSR set to: 0
  2219   00289C  0E00               	movlw	0
  2220   00289E  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2221   0028A0  0E00               	movlw	0
  2222   0028A2  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2223   0028A4                     
  2224                           ; BSR set to: 0
  2225   0028A4  0E74               	movlw	low sprintf@f
  2226   0028A6  6F60               	movwf	vfprintf@fp& (0+255),b
  2227   0028A8  0E00               	movlw	high sprintf@f
  2228   0028AA  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2229   0028AC  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2230   0028B0  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2231   0028B4  0E72               	movlw	low sprintf@ap
  2232   0028B6  6F64               	movwf	vfprintf@ap& (0+255),b
  2233   0028B8  0E00               	movlw	high sprintf@ap
  2234   0028BA  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2235   0028BC  EC17  F014         	call	_vfprintf	;wreg free
  2236   0028C0  0100               	movlb	0	; () banked
  2237   0028C2  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2238   0028C4  2566               	addwf	sprintf@s& (0+255),w,b
  2239   0028C6  6ED9               	movwf	fsr2l,c
  2240   0028C8  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2241   0028CA  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2242   0028CC  6EDA               	movwf	fsr2h,c
  2243   0028CE  0E00               	movlw	0
  2244   0028D0  6EDF               	movwf	indf2,c
  2245   0028D2                     
  2246                           ; BSR set to: 0
  2247   0028D2  0012               	return		;funcret
  2248   0028D4                     __end_of_sprintf:
  2249                           	callstack 0
  2250                           
  2251 ;; *************** function _vfprintf *****************
  2252 ;; Defined at:
  2253 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2256 ;;		 -> sprintf@f(11), 
  2257 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2258 ;;		 -> STR_4(10), STR_3(26), STR_2(23), STR_1(41), 
  2259 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2260 ;;		 -> sprintf@ap(2), 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2263 ;;		 -> STR_4(10), STR_3(26), STR_2(23), STR_1(41), 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  2    0[BANK0 ] int 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2273 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;Total ram usage:        8 bytes
  2278 ;; Hardware stack levels used: 1
  2279 ;; Hardware stack levels required when called: 10
  2280 ;; This function calls:
  2281 ;;		_vfpfcnvrt
  2282 ;; This function is called by:
  2283 ;;		_sprintf
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text8
  2288   00282E                     __ptext8:
  2289                           	callstack 0
  2290   00282E                     _vfprintf:
  2291                           	callstack 19
  2292   00282E                     
  2293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2294   00282E  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2295   002832  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2296                           
  2297                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2298   002836  EF2B  F014         	goto	l3455
  2299   00283A                     l3453:
  2300                           
  2301                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2302   00283A  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2303   00283E  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2304   002842  0E55               	movlw	low vfprintf@cfmt
  2305   002844  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2306   002846  0E00               	movlw	high vfprintf@cfmt
  2307   002848  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2308   00284A  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2309   00284E  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2310   002852  ECA0  F00F         	call	_vfpfcnvrt	;wreg free
  2311   002856                     l3455:
  2312                           
  2313                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2314   002856  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2315   00285A  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2316   00285E                     	if	0	;tblptru may be non-zero
  2317   00285E                     	endif
  2318   00285E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2319   00285E  0E00               	movlw	low (__mediumconst shr (0+16))
  2320   002860  6EF8               	movwf	tblptru,c
  2321   002862                     	endif
  2322   002862  0008               	tblrd		*
  2323   002864  50F5               	movf	tablat,w,c
  2324   002866  0900               	iorlw	0
  2325   002868  A4D8               	btfss	status,2,c
  2326   00286A  EF39  F014         	goto	u1951
  2327   00286E  EF3B  F014         	goto	u1950
  2328   002872                     u1951:
  2329   002872  EF1D  F014         	goto	l3453
  2330   002876                     u1950:
  2331   002876                     
  2332                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2333   002876  0E00               	movlw	0
  2334   002878  0100               	movlb	0	; () banked
  2335   00287A  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2336   00287C  0E00               	movlw	0
  2337   00287E  6F60               	movwf	?_vfprintf& (0+255),b
  2338   002880                     
  2339                           ; BSR set to: 0
  2340   002880  0012               	return		;funcret
  2341   002882                     __end_of_vfprintf:
  2342                           	callstack 0
  2343                           
  2344 ;; *************** function _vfpfcnvrt *****************
  2345 ;; Defined at:
  2346 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2349 ;;		 -> sprintf@f(11), 
  2350 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2351 ;;		 -> vfprintf@cfmt(2), 
  2352 ;;  ap              2   70[COMRAM] PTR PTR void 
  2353 ;;		 -> sprintf@ap(2), 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  convarg         8   74[COMRAM] struct .
  2356 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2357 ;;		 -> STR_4(10), STR_3(26), STR_2(23), STR_1(41), 
  2358 ;;  i               2    0        int 
  2359 ;;  done            2    0        int 
  2360 ;;  c               1    0        unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2370 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2371 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2373 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2374 ;;Total ram usage:       18 bytes
  2375 ;; Hardware stack levels used: 1
  2376 ;; Hardware stack levels required when called: 9
  2377 ;; This function calls:
  2378 ;;		_dtoa
  2379 ;;		_fputc
  2380 ;; This function is called by:
  2381 ;;		_vfprintf
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text9
  2386   001F40                     __ptext9:
  2387                           	callstack 0
  2388   001F40                     _vfpfcnvrt:
  2389                           	callstack 19
  2390   001F40                     
  2391                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2392   001F40  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2393   001F44  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2394   001F48  CFDE FFF6          	movff	postinc2,tblptrl
  2395   001F4C  CFDD FFF7          	movff	postdec2,tblptrh
  2396   001F50                     	if	0	;tblptru may be non-zero
  2397   001F50                     	endif
  2398   001F50                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2399   001F50  0E00               	movlw	low (__mediumconst shr (0+16))
  2400   001F52  6EF8               	movwf	tblptru,c
  2401   001F54                     	endif
  2402   001F54  0008               	tblrd		*
  2403   001F56  50F5               	movf	tablat,w,c
  2404   001F58  0A25               	xorlw	37
  2405   001F5A  A4D8               	btfss	status,2,c
  2406   001F5C  EFB2  F00F         	goto	u1921
  2407   001F60  EFB4  F00F         	goto	u1920
  2408   001F64                     u1921:
  2409   001F64  EF38  F010         	goto	l3445
  2410   001F68                     u1920:
  2411   001F68                     
  2412                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2413   001F68  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2414   001F6C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2415   001F70  2ADE               	incf	postinc2,f,c
  2416   001F72  0E00               	movlw	0
  2417   001F74  22DD               	addwfc	postdec2,f,c
  2418   001F76                     
  2419                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2420   001F76  0E00               	movlw	0
  2421   001F78  0100               	movlb	0	; () banked
  2422   001F7A  6FED               	movwf	(_width+1)& (0+255),b
  2423   001F7C  0E00               	movlw	0
  2424   001F7E  6FEC               	movwf	_width& (0+255),b
  2425   001F80  C0EC  F0F4         	movff	_width,_flags
  2426   001F84                     
  2427                           ; BSR set to: 0
  2428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2429   001F84  69EE               	setf	_prec& (0+255),b
  2430   001F86  69EF               	setf	(_prec+1)& (0+255),b
  2431   001F88                     
  2432                           ; BSR set to: 0
  2433                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2434   001F88  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2435   001F8C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2436   001F90  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2437   001F94  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2438   001F98                     
  2439                           ; BSR set to: 0
  2440                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2441   001F98  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2442   001F9C  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2443   001FA0                     	if	0	;tblptru may be non-zero
  2444   001FA0                     	endif
  2445   001FA0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2446   001FA0  0E00               	movlw	low (__mediumconst shr (0+16))
  2447   001FA2  6EF8               	movwf	tblptru,c
  2448   001FA4                     	endif
  2449   001FA4  0008               	tblrd		*
  2450   001FA6  50F5               	movf	tablat,w,c
  2451   001FA8  0A64               	xorlw	100
  2452   001FAA  B4D8               	btfsc	status,2,c
  2453   001FAC  EFDA  F00F         	goto	u1931
  2454   001FB0  EFDC  F00F         	goto	u1930
  2455   001FB4                     u1931:
  2456   001FB4  EFEC  F00F         	goto	l3435
  2457   001FB8                     u1930:
  2458   001FB8                     
  2459                           ; BSR set to: 0
  2460   001FB8  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2461   001FBC  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2462   001FC0                     	if	0	;tblptru may be non-zero
  2463   001FC0                     	endif
  2464   001FC0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2465   001FC0  0E00               	movlw	low (__mediumconst shr (0+16))
  2466   001FC2  6EF8               	movwf	tblptru,c
  2467   001FC4                     	endif
  2468   001FC4  0008               	tblrd		*
  2469   001FC6  50F5               	movf	tablat,w,c
  2470   001FC8  0A69               	xorlw	105
  2471   001FCA  A4D8               	btfss	status,2,c
  2472   001FCC  EFEA  F00F         	goto	u1941
  2473   001FD0  EFEC  F00F         	goto	u1940
  2474   001FD4                     u1941:
  2475   001FD4  EF2F  F010         	goto	l3441
  2476   001FD8                     u1940:
  2477   001FD8                     l3435:
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2481   001FD8  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2482   001FDC  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2483   001FE0  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2484   001FE4  0E02               	movlw	2
  2485   001FE6  26DE               	addwf	postinc2,f,c
  2486   001FE8  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2487   001FEC  0E00               	movlw	0
  2488   001FEE  22DD               	addwfc	postdec2,f,c
  2489   001FF0  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2490   001FF4  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2491   001FF8  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2492   001FFC  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2493   002000  0E00               	movlw	0
  2494   002002  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2495   002004  0EFF               	movlw	-1
  2496   002006  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2497   002008  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2498   00200A  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2499   00200C  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2500   00200E  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2501   002010  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2502                           
  2503                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2504   002012  0E01               	movlw	1
  2505   002014  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2506   002016  6E49               	movwf	??_vfpfcnvrt^0,c
  2507   002018  0E00               	movlw	0
  2508   00201A  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2509   00201C  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2510   00201E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2511   002022  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2512   002026  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2513   00202A  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2514   00202E                     
  2515                           ; BSR set to: 0
  2516                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2517   00202E  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2518   002032  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2519   002036  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2520   00203A  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2521   00203E  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2522   002042  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2523   002046  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2524   00204A  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2525   00204E  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2526   002052  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2527   002056  EC2E  F00A         	call	_dtoa	;wreg free
  2528   00205A  EF4E  F010         	goto	l1246
  2529   00205E                     l3441:
  2530                           
  2531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2532   00205E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2533   002062  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2534   002066  2ADE               	incf	postinc2,f,c
  2535   002068  0E00               	movlw	0
  2536   00206A  22DD               	addwfc	postdec2,f,c
  2537   00206C  EF4E  F010         	goto	l1246
  2538   002070                     l3445:
  2539                           
  2540                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2541   002070  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2542   002074  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2543   002078  CFDE FFF6          	movff	postinc2,tblptrl
  2544   00207C  CFDD FFF7          	movff	postdec2,tblptrh
  2545   002080                     	if	0	;tblptru may be non-zero
  2546   002080                     	endif
  2547   002080                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2548   002080  0E00               	movlw	low (__mediumconst shr (0+16))
  2549   002082  6EF8               	movwf	tblptru,c
  2550   002084                     	endif
  2551   002084  0008               	tblrd		*
  2552   002086  50F5               	movf	tablat,w,c
  2553   002088  6E05               	movwf	fputc@c^0,c
  2554   00208A  6A06               	clrf	(fputc@c+1)^0,c
  2555   00208C  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2556   002090  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2557   002094  EC4C  F011         	call	_fputc	;wreg free
  2558   002098  EF2F  F010         	goto	l3441
  2559   00209C                     l1246:
  2560   00209C  0012               	return		;funcret
  2561   00209E                     __end_of_vfpfcnvrt:
  2562                           	callstack 0
  2563                           
  2564 ;; *************** function _dtoa *****************
  2565 ;; Defined at:
  2566 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2569 ;;		 -> sprintf@f(11), 
  2570 ;;  d               8   33[COMRAM] long long 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  n               8   55[COMRAM] long long 
  2573 ;;  i               2   64[COMRAM] int 
  2574 ;;  w               2   53[COMRAM] int 
  2575 ;;  p               2   51[COMRAM] int 
  2576 ;;  s               1   63[COMRAM] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2586 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2587 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;Total ram usage:       35 bytes
  2591 ;; Hardware stack levels used: 1
  2592 ;; Hardware stack levels required when called: 8
  2593 ;; This function calls:
  2594 ;;		___aodiv
  2595 ;;		___aomod
  2596 ;;		_abs
  2597 ;;		_pad
  2598 ;; This function is called by:
  2599 ;;		_vfpfcnvrt
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text10
  2604   00145C                     __ptext10:
  2605                           	callstack 0
  2606   00145C                     _dtoa:
  2607                           	callstack 19
  2608   00145C                     
  2609                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2610   00145C  C022  F038         	movff	dtoa@d,dtoa@n
  2611   001460  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2612   001464  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2613   001468  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2614   00146C  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2615   001470  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2616   001474  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2617   001478  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2618   00147C                     
  2619                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2620   00147C  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2621   00147E  EF43  F00A         	goto	u1821
  2622   001482  EF46  F00A         	goto	u1820
  2623   001486                     u1821:
  2624   001486  0E01               	movlw	1
  2625   001488  EF47  F00A         	goto	u1830
  2626   00148C                     u1820:
  2627   00148C  0E00               	movlw	0
  2628   00148E                     u1830:
  2629   00148E  6E40               	movwf	dtoa@s^0,c
  2630   001490                     
  2631                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2632   001490  5040               	movf	dtoa@s^0,w,c
  2633   001492  B4D8               	btfsc	status,2,c
  2634   001494  EF4E  F00A         	goto	u1841
  2635   001498  EF50  F00A         	goto	u1840
  2636   00149C                     u1841:
  2637   00149C  EF60  F00A         	goto	l3377
  2638   0014A0                     u1840:
  2639   0014A0                     
  2640                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2641   0014A0  1E3F               	comf	(dtoa@n+7)^0,f,c
  2642   0014A2  1E3E               	comf	(dtoa@n+6)^0,f,c
  2643   0014A4  1E3D               	comf	(dtoa@n+5)^0,f,c
  2644   0014A6  1E3C               	comf	(dtoa@n+4)^0,f,c
  2645   0014A8  1E3B               	comf	(dtoa@n+3)^0,f,c
  2646   0014AA  1E3A               	comf	(dtoa@n+2)^0,f,c
  2647   0014AC  1E39               	comf	(dtoa@n+1)^0,f,c
  2648   0014AE  6C38               	negf	dtoa@n^0,c
  2649   0014B0  0E00               	movlw	0
  2650   0014B2  2239               	addwfc	(dtoa@n+1)^0,f,c
  2651   0014B4  223A               	addwfc	(dtoa@n+2)^0,f,c
  2652   0014B6  223B               	addwfc	(dtoa@n+3)^0,f,c
  2653   0014B8  223C               	addwfc	(dtoa@n+4)^0,f,c
  2654   0014BA  223D               	addwfc	(dtoa@n+5)^0,f,c
  2655   0014BC  223E               	addwfc	(dtoa@n+6)^0,f,c
  2656   0014BE  223F               	addwfc	(dtoa@n+7)^0,f,c
  2657   0014C0                     l3377:
  2658                           
  2659                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2660   0014C0  0100               	movlb	0	; () banked
  2661   0014C2  BFEF               	btfsc	(_prec+1)& (0+255),7,b
  2662   0014C4  EF6E  F00A         	goto	u1850
  2663   0014C8  51EF               	movf	(_prec+1)& (0+255),w,b
  2664   0014CA  E106               	bnz	u1851
  2665   0014CC  05EE               	decf	_prec& (0+255),w,b
  2666   0014CE  B0D8               	btfsc	status,0,c
  2667   0014D0  EF6C  F00A         	goto	u1851
  2668   0014D4  EF6E  F00A         	goto	u1850
  2669   0014D8                     u1851:
  2670   0014D8  EF74  F00A         	goto	l1225
  2671   0014DC                     u1850:
  2672   0014DC                     
  2673                           ; BSR set to: 0
  2674   0014DC  0E00               	movlw	0
  2675   0014DE  6E35               	movwf	(dtoa@p+1)^0,c
  2676   0014E0  0E01               	movlw	1
  2677   0014E2  6E34               	movwf	dtoa@p^0,c
  2678   0014E4  EF78  F00A         	goto	l1227
  2679   0014E8                     l1225:
  2680                           
  2681                           ; BSR set to: 0
  2682   0014E8  C0EE  F034         	movff	_prec,dtoa@p
  2683   0014EC  C0EF  F035         	movff	_prec+1,dtoa@p+1
  2684   0014F0                     l1227:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2688   0014F0  C0EC  F036         	movff	_width,dtoa@w
  2689   0014F4  C0ED  F037         	movff	_width+1,dtoa@w+1
  2690   0014F8                     
  2691                           ; BSR set to: 0
  2692                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2693   0014F8  5040               	movf	dtoa@s^0,w,c
  2694   0014FA  B4D8               	btfsc	status,2,c
  2695   0014FC  EF82  F00A         	goto	u1861
  2696   001500  EF84  F00A         	goto	u1860
  2697   001504                     u1861:
  2698   001504  EF9B  F00A         	goto	l1228
  2699   001508                     u1860:
  2700   001508                     
  2701                           ; BSR set to: 0
  2702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2703   001508  0636               	decf	dtoa@w^0,f,c
  2704   00150A  A0D8               	btfss	status,0,c
  2705   00150C  0637               	decf	(dtoa@w+1)^0,f,c
  2706   00150E                     
  2707                           ; BSR set to: 0
  2708                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2709   00150E  5040               	movf	dtoa@s^0,w,c
  2710   001510  A4D8               	btfss	status,2,c
  2711   001512  EF8D  F00A         	goto	u1871
  2712   001516  EF8F  F00A         	goto	u1870
  2713   00151A                     u1871:
  2714   00151A  EF95  F00A         	goto	l3389
  2715   00151E                     u1870:
  2716   00151E                     
  2717                           ; BSR set to: 0
  2718   00151E  0E00               	movlw	0
  2719   001520  6E33               	movwf	(_dtoa$2581+1)^0,c
  2720   001522  0E2B               	movlw	43
  2721   001524  6E32               	movwf	_dtoa$2581^0,c
  2722   001526  EF99  F00A         	goto	l3391
  2723   00152A                     l3389:
  2724                           
  2725                           ; BSR set to: 0
  2726   00152A  0E00               	movlw	0
  2727   00152C  6E33               	movwf	(_dtoa$2581+1)^0,c
  2728   00152E  0E2D               	movlw	45
  2729   001530  6E32               	movwf	_dtoa$2581^0,c
  2730   001532                     l3391:
  2731                           
  2732                           ; BSR set to: 0
  2733   001532  C032  F040         	movff	_dtoa$2581,dtoa@s
  2734   001536                     l1228:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2738   001536  0E00               	movlw	0
  2739   001538  6E42               	movwf	(dtoa@i+1)^0,c
  2740   00153A  0E1F               	movlw	31
  2741   00153C  6E41               	movwf	dtoa@i^0,c
  2742   00153E                     
  2743                           ; BSR set to: 0
  2744                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2745   00153E  0E00               	movlw	0
  2746   001540  0102               	movlb	2	; () banked
  2747   001542  6F5B               	movwf	(_dbuf+31)& (0+255),b
  2748                           
  2749                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2750   001544  EF20  F00B         	goto	l3405
  2751   001548                     l3395:
  2752                           
  2753                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2754   001548  0641               	decf	dtoa@i^0,f,c
  2755   00154A  A0D8               	btfss	status,0,c
  2756   00154C  0642               	decf	(dtoa@i+1)^0,f,c
  2757   00154E                     
  2758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2759   00154E  0E3C               	movlw	low _dbuf
  2760   001550  2441               	addwf	dtoa@i^0,w,c
  2761   001552  6ED9               	movwf	fsr2l,c
  2762   001554  0E02               	movlw	high _dbuf
  2763   001556  2042               	addwfc	(dtoa@i+1)^0,w,c
  2764   001558  6EDA               	movwf	fsr2h,c
  2765   00155A  C038  F005         	movff	dtoa@n,___aomod@dividend
  2766   00155E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2767   001562  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2768   001566  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2769   00156A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2770   00156E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2771   001572  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2772   001576  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2773   00157A  0E0A               	movlw	10
  2774   00157C  6E0D               	movwf	___aomod@divisor^0,c
  2775   00157E  0E00               	movlw	0
  2776   001580  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2777   001582  0E00               	movlw	0
  2778   001584  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2779   001586  0E00               	movlw	0
  2780   001588  6E10               	movwf	(___aomod@divisor+3)^0,c
  2781   00158A  0E00               	movlw	0
  2782   00158C  6E11               	movwf	(___aomod@divisor+4)^0,c
  2783   00158E  0E00               	movlw	0
  2784   001590  6E12               	movwf	(___aomod@divisor+5)^0,c
  2785   001592  0E00               	movlw	0
  2786   001594  6E13               	movwf	(___aomod@divisor+6)^0,c
  2787   001596  0E00               	movlw	0
  2788   001598  6E14               	movwf	(___aomod@divisor+7)^0,c
  2789   00159A  ECEE  F00E         	call	___aomod	;wreg free
  2790   00159E  C005  F02A         	movff	?___aomod,??_dtoa
  2791   0015A2  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2792   0015A6  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2793   0015AA  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2794   0015AE  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2795   0015B2  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2796   0015B6  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2797   0015BA  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2798   0015BE  C02A  F017         	movff	??_dtoa,abs@a
  2799   0015C2  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2800   0015C6  EC4D  F015         	call	_abs	;wreg free
  2801   0015CA  5017               	movf	?_abs^0,w,c
  2802   0015CC  0F30               	addlw	48
  2803   0015CE  6EDF               	movwf	indf2,c
  2804   0015D0                     
  2805                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2806   0015D0  0634               	decf	dtoa@p^0,f,c
  2807   0015D2  A0D8               	btfss	status,0,c
  2808   0015D4  0635               	decf	(dtoa@p+1)^0,f,c
  2809   0015D6                     
  2810                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2811   0015D6  0636               	decf	dtoa@w^0,f,c
  2812   0015D8  A0D8               	btfss	status,0,c
  2813   0015DA  0637               	decf	(dtoa@w+1)^0,f,c
  2814   0015DC                     
  2815                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2816   0015DC  C038  F005         	movff	dtoa@n,___aodiv@dividend
  2817   0015E0  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  2818   0015E4  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  2819   0015E8  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  2820   0015EC  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  2821   0015F0  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  2822   0015F4  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  2823   0015F8  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  2824   0015FC  0E0A               	movlw	10
  2825   0015FE  6E0D               	movwf	___aodiv@divisor^0,c
  2826   001600  0E00               	movlw	0
  2827   001602  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  2828   001604  0E00               	movlw	0
  2829   001606  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  2830   001608  0E00               	movlw	0
  2831   00160A  6E10               	movwf	(___aodiv@divisor+3)^0,c
  2832   00160C  0E00               	movlw	0
  2833   00160E  6E11               	movwf	(___aodiv@divisor+4)^0,c
  2834   001610  0E00               	movlw	0
  2835   001612  6E12               	movwf	(___aodiv@divisor+5)^0,c
  2836   001614  0E00               	movlw	0
  2837   001616  6E13               	movwf	(___aodiv@divisor+6)^0,c
  2838   001618  0E00               	movlw	0
  2839   00161A  6E14               	movwf	(___aodiv@divisor+7)^0,c
  2840   00161C  EC74  F00D         	call	___aodiv	;wreg free
  2841   001620  C005  F038         	movff	?___aodiv,dtoa@n
  2842   001624  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  2843   001628  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  2844   00162C  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  2845   001630  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  2846   001634  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  2847   001638  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  2848   00163C  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  2849   001640                     l3405:
  2850                           
  2851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2852   001640  BE42               	btfsc	(dtoa@i+1)^0,7,c
  2853   001642  EF2B  F00B         	goto	u1881
  2854   001646  5042               	movf	(dtoa@i+1)^0,w,c
  2855   001648  E108               	bnz	u1880
  2856   00164A  0441               	decf	dtoa@i^0,w,c
  2857   00164C  A0D8               	btfss	status,0,c
  2858   00164E  EF2B  F00B         	goto	u1881
  2859   001652  EF2D  F00B         	goto	u1880
  2860   001656                     u1881:
  2861   001656  EF49  F00B         	goto	l3411
  2862   00165A                     u1880:
  2863   00165A  5038               	movf	dtoa@n^0,w,c
  2864   00165C  1039               	iorwf	(dtoa@n+1)^0,w,c
  2865   00165E  103A               	iorwf	(dtoa@n+2)^0,w,c
  2866   001660  103B               	iorwf	(dtoa@n+3)^0,w,c
  2867   001662  103C               	iorwf	(dtoa@n+4)^0,w,c
  2868   001664  103D               	iorwf	(dtoa@n+5)^0,w,c
  2869   001666  103E               	iorwf	(dtoa@n+6)^0,w,c
  2870   001668  103F               	iorwf	(dtoa@n+7)^0,w,c
  2871   00166A  A4D8               	btfss	status,2,c
  2872   00166C  EF3A  F00B         	goto	u1891
  2873   001670  EF3C  F00B         	goto	u1890
  2874   001674                     u1891:
  2875   001674  EFA4  F00A         	goto	l3395
  2876   001678                     u1890:
  2877   001678  BE35               	btfsc	(dtoa@p+1)^0,7,c
  2878   00167A  EF49  F00B         	goto	u1900
  2879   00167E  5035               	movf	(dtoa@p+1)^0,w,c
  2880   001680  E106               	bnz	u1901
  2881   001682  0434               	decf	dtoa@p^0,w,c
  2882   001684  B0D8               	btfsc	status,0,c
  2883   001686  EF47  F00B         	goto	u1901
  2884   00168A  EF49  F00B         	goto	u1900
  2885   00168E                     u1901:
  2886   00168E  EFA4  F00A         	goto	l3395
  2887   001692                     u1900:
  2888   001692                     l3411:
  2889                           
  2890                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  2891   001692  5040               	movf	dtoa@s^0,w,c
  2892   001694  B4D8               	btfsc	status,2,c
  2893   001696  EF4F  F00B         	goto	u1911
  2894   00169A  EF51  F00B         	goto	u1910
  2895   00169E                     u1911:
  2896   00169E  EF5C  F00B         	goto	l3417
  2897   0016A2                     u1910:
  2898   0016A2                     
  2899                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  2900   0016A2  0641               	decf	dtoa@i^0,f,c
  2901   0016A4  A0D8               	btfss	status,0,c
  2902   0016A6  0642               	decf	(dtoa@i+1)^0,f,c
  2903   0016A8                     
  2904                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  2905   0016A8  0E3C               	movlw	low _dbuf
  2906   0016AA  2441               	addwf	dtoa@i^0,w,c
  2907   0016AC  6ED9               	movwf	fsr2l,c
  2908   0016AE  0E02               	movlw	high _dbuf
  2909   0016B0  2042               	addwfc	(dtoa@i+1)^0,w,c
  2910   0016B2  6EDA               	movwf	fsr2h,c
  2911   0016B4  C040  FFDF         	movff	dtoa@s,indf2
  2912   0016B8                     l3417:
  2913                           
  2914                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2915   0016B8  C020  F015         	movff	dtoa@fp,pad@fp
  2916   0016BC  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  2917   0016C0  0E3C               	movlw	low _dbuf
  2918   0016C2  2441               	addwf	dtoa@i^0,w,c
  2919   0016C4  6E17               	movwf	pad@buf^0,c
  2920   0016C6  0E02               	movlw	high _dbuf
  2921   0016C8  2042               	addwfc	(dtoa@i+1)^0,w,c
  2922   0016CA  6E18               	movwf	(pad@buf+1)^0,c
  2923   0016CC  C036  F019         	movff	dtoa@w,pad@p
  2924   0016D0  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2925   0016D4  EC6C  F013         	call	_pad	;wreg free
  2926   0016D8  0012               	return		;funcret
  2927   0016DA                     __end_of_dtoa:
  2928                           	callstack 0
  2929                           
  2930 ;; *************** function _pad *****************
  2931 ;; Defined at:
  2932 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2935 ;;		 -> sprintf@f(11), 
  2936 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2937 ;;		 -> dbuf(32), 
  2938 ;;  p               2   24[COMRAM] int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  w               2   29[COMRAM] int 
  2941 ;;  i               2   27[COMRAM] int 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2951 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2952 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;Total ram usage:       11 bytes
  2956 ;; Hardware stack levels used: 1
  2957 ;; Hardware stack levels required when called: 7
  2958 ;; This function calls:
  2959 ;;		_fputc
  2960 ;;		_fputs
  2961 ;; This function is called by:
  2962 ;;		_dtoa
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text11
  2967   0026D8                     __ptext11:
  2968                           	callstack 0
  2969   0026D8                     _pad:
  2970                           	callstack 19
  2971   0026D8                     
  2972                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  2973   0026D8  BE1A               	btfsc	(pad@p+1)^0,7,c
  2974   0026DA  EF71  F013         	goto	u1801
  2975   0026DE  EF73  F013         	goto	u1800
  2976   0026E2                     u1801:
  2977   0026E2  EF79  F013         	goto	l3359
  2978   0026E6                     u1800:
  2979   0026E6  C019  F01E         	movff	pad@p,pad@w
  2980   0026EA  C01A  F01F         	movff	pad@p+1,pad@w+1
  2981   0026EE  EF7D  F013         	goto	l1216
  2982   0026F2                     l3359:
  2983   0026F2  0E00               	movlw	0
  2984   0026F4  6E1F               	movwf	(pad@w+1)^0,c
  2985   0026F6  0E00               	movlw	0
  2986   0026F8  6E1E               	movwf	pad@w^0,c
  2987   0026FA                     l1216:
  2988                           
  2989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  2990   0026FA  0E00               	movlw	0
  2991   0026FC  6E1D               	movwf	(pad@i+1)^0,c
  2992   0026FE  0E00               	movlw	0
  2993   002700  6E1C               	movwf	pad@i^0,c
  2994                           
  2995                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  2996   002702  EF8F  F013         	goto	l3365
  2997   002706                     l3361:
  2998                           
  2999                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3000   002706  0E00               	movlw	0
  3001   002708  6E06               	movwf	(fputc@c+1)^0,c
  3002   00270A  0E20               	movlw	32
  3003   00270C  6E05               	movwf	fputc@c^0,c
  3004   00270E  C015  F007         	movff	pad@fp,fputc@fp
  3005   002712  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3006   002716  EC4C  F011         	call	_fputc	;wreg free
  3007   00271A                     
  3008                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3009   00271A  4A1C               	infsnz	pad@i^0,f,c
  3010   00271C  2A1D               	incf	(pad@i+1)^0,f,c
  3011   00271E                     l3365:
  3012                           
  3013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3014   00271E  501E               	movf	pad@w^0,w,c
  3015   002720  5C1C               	subwf	pad@i^0,w,c
  3016   002722  501D               	movf	(pad@i+1)^0,w,c
  3017   002724  0A80               	xorlw	128
  3018   002726  6E1B               	movwf	??_pad^0,c
  3019   002728  501F               	movf	(pad@w+1)^0,w,c
  3020   00272A  0A80               	xorlw	128
  3021   00272C  581B               	subwfb	??_pad^0,w,c
  3022   00272E  A0D8               	btfss	status,0,c
  3023   002730  EF9C  F013         	goto	u1811
  3024   002734  EF9E  F013         	goto	u1810
  3025   002738                     u1811:
  3026   002738  EF83  F013         	goto	l3361
  3027   00273C                     u1810:
  3028   00273C                     
  3029                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3030   00273C  C017  F00E         	movff	pad@buf,fputs@s
  3031   002740  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3032   002744  C015  F010         	movff	pad@fp,fputs@fp
  3033   002748  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3034   00274C  EC0A  F015         	call	_fputs	;wreg free
  3035   002750  0012               	return		;funcret
  3036   002752                     __end_of_pad:
  3037                           	callstack 0
  3038                           
  3039 ;; *************** function _fputs *****************
  3040 ;; Defined at:
  3041 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3044 ;;		 -> dbuf(32), 
  3045 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3046 ;;		 -> sprintf@f(11), 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  i               2   18[COMRAM] int 
  3049 ;;  c               1   17[COMRAM] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  2   13[COMRAM] int 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3060 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3062 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;Total ram usage:        7 bytes
  3064 ;; Hardware stack levels used: 1
  3065 ;; Hardware stack levels required when called: 6
  3066 ;; This function calls:
  3067 ;;		_fputc
  3068 ;; This function is called by:
  3069 ;;		_pad
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text12
  3074   002A14                     __ptext12:
  3075                           	callstack 0
  3076   002A14                     _fputs:
  3077                           	callstack 19
  3078   002A14  0E00               	movlw	0
  3079   002A16  6E14               	movwf	(fputs@i+1)^0,c
  3080   002A18  0E00               	movlw	0
  3081   002A1A  6E13               	movwf	fputs@i^0,c
  3082   002A1C  EF1B  F015         	goto	l3269
  3083   002A20                     l3265:
  3084   002A20  C012  F005         	movff	fputs@c,fputc@c
  3085   002A24  6A06               	clrf	(fputc@c+1)^0,c
  3086   002A26  C010  F007         	movff	fputs@fp,fputc@fp
  3087   002A2A  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3088   002A2E  EC4C  F011         	call	_fputc	;wreg free
  3089   002A32  4A13               	infsnz	fputs@i^0,f,c
  3090   002A34  2A14               	incf	(fputs@i+1)^0,f,c
  3091   002A36                     l3269:
  3092   002A36  5013               	movf	fputs@i^0,w,c
  3093   002A38  240E               	addwf	fputs@s^0,w,c
  3094   002A3A  6ED9               	movwf	fsr2l,c
  3095   002A3C  5014               	movf	(fputs@i+1)^0,w,c
  3096   002A3E  200F               	addwfc	(fputs@s+1)^0,w,c
  3097   002A40  6EDA               	movwf	fsr2h,c
  3098   002A42  50DF               	movf	indf2,w,c
  3099   002A44  6E12               	movwf	fputs@c^0,c
  3100   002A46  5012               	movf	fputs@c^0,w,c
  3101   002A48  A4D8               	btfss	status,2,c
  3102   002A4A  EF29  F015         	goto	u1651
  3103   002A4E  EF2B  F015         	goto	u1650
  3104   002A52                     u1651:
  3105   002A52  EF10  F015         	goto	l3265
  3106   002A56                     u1650:
  3107   002A56  0012               	return		;funcret
  3108   002A58                     __end_of_fputs:
  3109                           	callstack 0
  3110                           
  3111 ;; *************** function _fputc *****************
  3112 ;; Defined at:
  3113 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  c               2    4[COMRAM] int 
  3116 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3117 ;;		 -> sprintf@f(11), 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  2    4[COMRAM] int 
  3122 ;; Registers used:
  3123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3131 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3132 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3133 ;;Total ram usage:        9 bytes
  3134 ;; Hardware stack levels used: 1
  3135 ;; Hardware stack levels required when called: 5
  3136 ;; This function calls:
  3137 ;;		_putch
  3138 ;; This function is called by:
  3139 ;;		_pad
  3140 ;;		_vfpfcnvrt
  3141 ;;		_fputs
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text13
  3146   002298                     __ptext13:
  3147                           	callstack 0
  3148   002298                     _fputc:
  3149                           	callstack 22
  3150   002298  5007               	movf	fputc@fp^0,w,c
  3151   00229A  1008               	iorwf	(fputc@fp+1)^0,w,c
  3152   00229C  B4D8               	btfsc	status,2,c
  3153   00229E  EF53  F011         	goto	u1611
  3154   0022A2  EF55  F011         	goto	u1610
  3155   0022A6                     u1611:
  3156   0022A6  EF5E  F011         	goto	l3253
  3157   0022AA                     u1610:
  3158   0022AA  5007               	movf	fputc@fp^0,w,c
  3159   0022AC  1008               	iorwf	(fputc@fp+1)^0,w,c
  3160   0022AE  A4D8               	btfss	status,2,c
  3161   0022B0  EF5C  F011         	goto	u1621
  3162   0022B4  EF5E  F011         	goto	u1620
  3163   0022B8                     u1621:
  3164   0022B8  EF63  F011         	goto	l3255
  3165   0022BC                     u1620:
  3166   0022BC                     l3253:
  3167   0022BC  5005               	movf	fputc@c^0,w,c
  3168   0022BE  ECA3  F016         	call	_putch
  3169   0022C2  EFB0  F011         	goto	l1264
  3170   0022C6                     l3255:
  3171   0022C6  EE20 F009          	lfsr	2,9
  3172   0022CA  5007               	movf	fputc@fp^0,w,c
  3173   0022CC  26D9               	addwf	fsr2l,f,c
  3174   0022CE  5008               	movf	(fputc@fp+1)^0,w,c
  3175   0022D0  22DA               	addwfc	fsr2h,f,c
  3176   0022D2  50DE               	movf	postinc2,w,c
  3177   0022D4  10DE               	iorwf	postinc2,w,c
  3178   0022D6  B4D8               	btfsc	status,2,c
  3179   0022D8  EF70  F011         	goto	u1631
  3180   0022DC  EF72  F011         	goto	u1630
  3181   0022E0                     u1631:
  3182   0022E0  EF8D  F011         	goto	l3259
  3183   0022E4                     u1630:
  3184   0022E4  EE20 F009          	lfsr	2,9
  3185   0022E8  5007               	movf	fputc@fp^0,w,c
  3186   0022EA  26D9               	addwf	fsr2l,f,c
  3187   0022EC  5008               	movf	(fputc@fp+1)^0,w,c
  3188   0022EE  22DA               	addwfc	fsr2h,f,c
  3189   0022F0  EE10 F003          	lfsr	1,3
  3190   0022F4  5007               	movf	fputc@fp^0,w,c
  3191   0022F6  26E1               	addwf	fsr1l,f,c
  3192   0022F8  5008               	movf	(fputc@fp+1)^0,w,c
  3193   0022FA  22E2               	addwfc	fsr1h,f,c
  3194   0022FC  50DE               	movf	postinc2,w,c
  3195   0022FE  5CE6               	subwf	postinc1,w,c
  3196   002300  50E6               	movf	postinc1,w,c
  3197   002302  0A80               	xorlw	128
  3198   002304  6E0D               	movwf	(??_fputc+4)^0,c
  3199   002306  50DE               	movf	postinc2,w,c
  3200   002308  0A80               	xorlw	128
  3201   00230A  580D               	subwfb	(??_fputc+4)^0,w,c
  3202   00230C  B0D8               	btfsc	status,0,c
  3203   00230E  EF8B  F011         	goto	u1641
  3204   002312  EF8D  F011         	goto	u1640
  3205   002316                     u1641:
  3206   002316  EFB0  F011         	goto	l1264
  3207   00231A                     u1640:
  3208   00231A                     l3259:
  3209   00231A  EE20 F003          	lfsr	2,3
  3210   00231E  5007               	movf	fputc@fp^0,w,c
  3211   002320  26D9               	addwf	fsr2l,f,c
  3212   002322  5008               	movf	(fputc@fp+1)^0,w,c
  3213   002324  22DA               	addwfc	fsr2h,f,c
  3214   002326  CFDE F009          	movff	postinc2,??_fputc
  3215   00232A  CFDD F00A          	movff	postdec2,??_fputc+1
  3216   00232E  C007  FFD9         	movff	fputc@fp,fsr2l
  3217   002332  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3218   002336  CFDE F00B          	movff	postinc2,??_fputc+2
  3219   00233A  CFDD F00C          	movff	postdec2,??_fputc+3
  3220   00233E  5009               	movf	??_fputc^0,w,c
  3221   002340  240B               	addwf	(??_fputc+2)^0,w,c
  3222   002342  6ED9               	movwf	fsr2l,c
  3223   002344  500A               	movf	(??_fputc+1)^0,w,c
  3224   002346  200C               	addwfc	(??_fputc+3)^0,w,c
  3225   002348  6EDA               	movwf	fsr2h,c
  3226   00234A  C005  FFDF         	movff	fputc@c,indf2
  3227   00234E  EE20 F003          	lfsr	2,3
  3228   002352  5007               	movf	fputc@fp^0,w,c
  3229   002354  26D9               	addwf	fsr2l,f,c
  3230   002356  5008               	movf	(fputc@fp+1)^0,w,c
  3231   002358  22DA               	addwfc	fsr2h,f,c
  3232   00235A  2ADE               	incf	postinc2,f,c
  3233   00235C  0E00               	movlw	0
  3234   00235E  22DD               	addwfc	postdec2,f,c
  3235   002360                     l1264:
  3236   002360  0012               	return		;funcret
  3237   002362                     __end_of_fputc:
  3238                           	callstack 0
  3239                           
  3240 ;; *************** function _putch *****************
  3241 ;; Defined at:
  3242 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  c               1    wreg     unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  c               1    0[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;Total ram usage:        0 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 4
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_fputc
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text14
  3271   002D46                     __ptext14:
  3272                           	callstack 0
  3273   002D46                     _putch:
  3274                           	callstack 22
  3275   002D46  0012               	return		;funcret
  3276   002D48                     __end_of_putch:
  3277                           	callstack 0
  3278                           
  3279 ;; *************** function ___aomod *****************
  3280 ;; Defined at:
  3281 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  dividend        8    4[COMRAM] long long 
  3284 ;;  divisor         8   12[COMRAM] long long 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  sign            1   21[COMRAM] unsigned char 
  3287 ;;  counter         1   20[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  8    4[COMRAM] long long 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3297 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3300 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3301 ;;Total ram usage:       18 bytes
  3302 ;; Hardware stack levels used: 1
  3303 ;; Hardware stack levels required when called: 4
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_dtoa
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text15
  3312   001DDC                     __ptext15:
  3313                           	callstack 0
  3314   001DDC                     ___aomod:
  3315                           	callstack 22
  3316   001DDC  0E00               	movlw	0
  3317   001DDE  6E16               	movwf	___aomod@sign^0,c
  3318   001DE0  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3319   001DE2  EFF7  F00E         	goto	u1740
  3320   001DE6  EFF5  F00E         	goto	u1741
  3321   001DEA                     u1741:
  3322   001DEA  EF09  F00F         	goto	l3327
  3323   001DEE                     u1740:
  3324   001DEE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3325   001DF0  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3326   001DF2  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3327   001DF4  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3328   001DF6  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3329   001DF8  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3330   001DFA  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3331   001DFC  6C05               	negf	___aomod@dividend^0,c
  3332   001DFE  0E00               	movlw	0
  3333   001E00  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3334   001E02  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3335   001E04  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3336   001E06  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3337   001E08  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3338   001E0A  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3339   001E0C  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3340   001E0E  0E01               	movlw	1
  3341   001E10  6E16               	movwf	___aomod@sign^0,c
  3342   001E12                     l3327:
  3343   001E12  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3344   001E14  EF10  F00F         	goto	u1750
  3345   001E18  EF0E  F00F         	goto	u1751
  3346   001E1C                     u1751:
  3347   001E1C  EF20  F00F         	goto	l3331
  3348   001E20                     u1750:
  3349   001E20  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3350   001E22  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3351   001E24  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3352   001E26  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3353   001E28  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3354   001E2A  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3355   001E2C  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3356   001E2E  6C0D               	negf	___aomod@divisor^0,c
  3357   001E30  0E00               	movlw	0
  3358   001E32  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3359   001E34  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3360   001E36  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3361   001E38  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3362   001E3A  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3363   001E3C  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3364   001E3E  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3365   001E40                     l3331:
  3366   001E40  500D               	movf	___aomod@divisor^0,w,c
  3367   001E42  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3368   001E44  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3369   001E46  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3370   001E48  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3371   001E4A  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3372   001E4C  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3373   001E4E  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3374   001E50  B4D8               	btfsc	status,2,c
  3375   001E52  EF2D  F00F         	goto	u1761
  3376   001E56  EF2F  F00F         	goto	u1760
  3377   001E5A                     u1761:
  3378   001E5A  EF77  F00F         	goto	l3347
  3379   001E5E                     u1760:
  3380   001E5E  0E01               	movlw	1
  3381   001E60  6E15               	movwf	___aomod@counter^0,c
  3382   001E62  EF3D  F00F         	goto	l3337
  3383   001E66                     l3335:
  3384   001E66  90D8               	bcf	status,0,c
  3385   001E68  360D               	rlcf	___aomod@divisor^0,f,c
  3386   001E6A  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3387   001E6C  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3388   001E6E  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3389   001E70  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3390   001E72  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3391   001E74  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3392   001E76  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3393   001E78  2A15               	incf	___aomod@counter^0,f,c
  3394   001E7A                     l3337:
  3395   001E7A  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3396   001E7C  EF42  F00F         	goto	u1771
  3397   001E80  EF44  F00F         	goto	u1770
  3398   001E84                     u1771:
  3399   001E84  EF33  F00F         	goto	l3335
  3400   001E88                     u1770:
  3401   001E88                     l3339:
  3402   001E88  500D               	movf	___aomod@divisor^0,w,c
  3403   001E8A  5C05               	subwf	___aomod@dividend^0,w,c
  3404   001E8C  500E               	movf	(___aomod@divisor+1)^0,w,c
  3405   001E8E  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3406   001E90  500F               	movf	(___aomod@divisor+2)^0,w,c
  3407   001E92  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3408   001E94  5010               	movf	(___aomod@divisor+3)^0,w,c
  3409   001E96  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3410   001E98  5011               	movf	(___aomod@divisor+4)^0,w,c
  3411   001E9A  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3412   001E9C  5012               	movf	(___aomod@divisor+5)^0,w,c
  3413   001E9E  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3414   001EA0  5013               	movf	(___aomod@divisor+6)^0,w,c
  3415   001EA2  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3416   001EA4  5014               	movf	(___aomod@divisor+7)^0,w,c
  3417   001EA6  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3418   001EA8  A0D8               	btfss	status,0,c
  3419   001EAA  EF59  F00F         	goto	u1781
  3420   001EAE  EF5B  F00F         	goto	u1780
  3421   001EB2                     u1781:
  3422   001EB2  EF6B  F00F         	goto	l3343
  3423   001EB6                     u1780:
  3424   001EB6  500D               	movf	___aomod@divisor^0,w,c
  3425   001EB8  5E05               	subwf	___aomod@dividend^0,f,c
  3426   001EBA  500E               	movf	(___aomod@divisor+1)^0,w,c
  3427   001EBC  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3428   001EBE  500F               	movf	(___aomod@divisor+2)^0,w,c
  3429   001EC0  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3430   001EC2  5010               	movf	(___aomod@divisor+3)^0,w,c
  3431   001EC4  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3432   001EC6  5011               	movf	(___aomod@divisor+4)^0,w,c
  3433   001EC8  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3434   001ECA  5012               	movf	(___aomod@divisor+5)^0,w,c
  3435   001ECC  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3436   001ECE  5013               	movf	(___aomod@divisor+6)^0,w,c
  3437   001ED0  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3438   001ED2  5014               	movf	(___aomod@divisor+7)^0,w,c
  3439   001ED4  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3440   001ED6                     l3343:
  3441   001ED6  90D8               	bcf	status,0,c
  3442   001ED8  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3443   001EDA  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3444   001EDC  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3445   001EDE  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3446   001EE0  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3447   001EE2  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3448   001EE4  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3449   001EE6  320D               	rrcf	___aomod@divisor^0,f,c
  3450   001EE8  2E15               	decfsz	___aomod@counter^0,f,c
  3451   001EEA  EF44  F00F         	goto	l3339
  3452   001EEE                     l3347:
  3453   001EEE  5016               	movf	___aomod@sign^0,w,c
  3454   001EF0  B4D8               	btfsc	status,2,c
  3455   001EF2  EF7D  F00F         	goto	u1791
  3456   001EF6  EF7F  F00F         	goto	u1790
  3457   001EFA                     u1791:
  3458   001EFA  EF8F  F00F         	goto	l3351
  3459   001EFE                     u1790:
  3460   001EFE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3461   001F00  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3462   001F02  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3463   001F04  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3464   001F06  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3465   001F08  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3466   001F0A  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3467   001F0C  6C05               	negf	___aomod@dividend^0,c
  3468   001F0E  0E00               	movlw	0
  3469   001F10  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3470   001F12  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3471   001F14  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3472   001F16  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3473   001F18  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3474   001F1A  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3475   001F1C  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3476   001F1E                     l3351:
  3477   001F1E  C005  F005         	movff	___aomod@dividend,?___aomod
  3478   001F22  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3479   001F26  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3480   001F2A  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3481   001F2E  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3482   001F32  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3483   001F36  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3484   001F3A  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3485   001F3E  0012               	return		;funcret
  3486   001F40                     __end_of___aomod:
  3487                           	callstack 0
  3488                           
  3489 ;; *************** function ___aodiv *****************
  3490 ;; Defined at:
  3491 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  dividend        8    4[COMRAM] long long 
  3494 ;;  divisor         8   12[COMRAM] long long 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  quotient        8   22[COMRAM] long long 
  3497 ;;  sign            1   21[COMRAM] unsigned char 
  3498 ;;  counter         1   20[COMRAM] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  8    4[COMRAM] long long 
  3501 ;; Registers used:
  3502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3508 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3509 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3511 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3512 ;;Total ram usage:       26 bytes
  3513 ;; Hardware stack levels used: 1
  3514 ;; Hardware stack levels required when called: 4
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_dtoa
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text16
  3523   001AE8                     __ptext16:
  3524                           	callstack 0
  3525   001AE8                     ___aodiv:
  3526                           	callstack 22
  3527   001AE8  0E00               	movlw	0
  3528   001AEA  6E16               	movwf	___aodiv@sign^0,c
  3529   001AEC  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3530   001AEE  EF7D  F00D         	goto	u1670
  3531   001AF2  EF7B  F00D         	goto	u1671
  3532   001AF6                     u1671:
  3533   001AF6  EF8F  F00D         	goto	l3283
  3534   001AFA                     u1670:
  3535   001AFA  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3536   001AFC  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3537   001AFE  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3538   001B00  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3539   001B02  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3540   001B04  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3541   001B06  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3542   001B08  6C0D               	negf	___aodiv@divisor^0,c
  3543   001B0A  0E00               	movlw	0
  3544   001B0C  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3545   001B0E  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3546   001B10  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3547   001B12  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3548   001B14  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3549   001B16  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3550   001B18  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3551   001B1A  0E01               	movlw	1
  3552   001B1C  6E16               	movwf	___aodiv@sign^0,c
  3553   001B1E                     l3283:
  3554   001B1E  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3555   001B20  EF96  F00D         	goto	u1680
  3556   001B24  EF94  F00D         	goto	u1681
  3557   001B28                     u1681:
  3558   001B28  EFA8  F00D         	goto	l3289
  3559   001B2C                     u1680:
  3560   001B2C  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3561   001B2E  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3562   001B30  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3563   001B32  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3564   001B34  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3565   001B36  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3566   001B38  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3567   001B3A  6C05               	negf	___aodiv@dividend^0,c
  3568   001B3C  0E00               	movlw	0
  3569   001B3E  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3570   001B40  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3571   001B42  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3572   001B44  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3573   001B46  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3574   001B48  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3575   001B4A  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3576   001B4C  0E01               	movlw	1
  3577   001B4E  1A16               	xorwf	___aodiv@sign^0,f,c
  3578   001B50                     l3289:
  3579   001B50  EE20  F017         	lfsr	2,___aodiv@quotient
  3580   001B54  0E07               	movlw	7
  3581   001B56                     u1691:
  3582   001B56  6ADE               	clrf	postinc2,c
  3583   001B58  06E8               	decf	wreg,f,c
  3584   001B5A  E2FD               	bc	u1691
  3585   001B5C  500D               	movf	___aodiv@divisor^0,w,c
  3586   001B5E  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3587   001B60  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3588   001B62  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3589   001B64  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3590   001B66  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3591   001B68  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3592   001B6A  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3593   001B6C  B4D8               	btfsc	status,2,c
  3594   001B6E  EFBB  F00D         	goto	u1701
  3595   001B72  EFBD  F00D         	goto	u1700
  3596   001B76                     u1701:
  3597   001B76  EF0F  F00E         	goto	l3311
  3598   001B7A                     u1700:
  3599   001B7A  0E01               	movlw	1
  3600   001B7C  6E15               	movwf	___aodiv@counter^0,c
  3601   001B7E  EFCB  F00D         	goto	l3297
  3602   001B82                     l3295:
  3603   001B82  90D8               	bcf	status,0,c
  3604   001B84  360D               	rlcf	___aodiv@divisor^0,f,c
  3605   001B86  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3606   001B88  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3607   001B8A  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3608   001B8C  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3609   001B8E  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3610   001B90  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3611   001B92  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3612   001B94  2A15               	incf	___aodiv@counter^0,f,c
  3613   001B96                     l3297:
  3614   001B96  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3615   001B98  EFD0  F00D         	goto	u1711
  3616   001B9C  EFD2  F00D         	goto	u1710
  3617   001BA0                     u1711:
  3618   001BA0  EFC1  F00D         	goto	l3295
  3619   001BA4                     u1710:
  3620   001BA4                     l3299:
  3621   001BA4  90D8               	bcf	status,0,c
  3622   001BA6  3617               	rlcf	___aodiv@quotient^0,f,c
  3623   001BA8  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3624   001BAA  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3625   001BAC  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3626   001BAE  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3627   001BB0  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3628   001BB2  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3629   001BB4  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3630   001BB6  500D               	movf	___aodiv@divisor^0,w,c
  3631   001BB8  5C05               	subwf	___aodiv@dividend^0,w,c
  3632   001BBA  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3633   001BBC  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3634   001BBE  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3635   001BC0  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3636   001BC2  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3637   001BC4  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3638   001BC6  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3639   001BC8  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3640   001BCA  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3641   001BCC  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3642   001BCE  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3643   001BD0  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3644   001BD2  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3645   001BD4  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3646   001BD6  A0D8               	btfss	status,0,c
  3647   001BD8  EFF0  F00D         	goto	u1721
  3648   001BDC  EFF2  F00D         	goto	u1720
  3649   001BE0                     u1721:
  3650   001BE0  EF03  F00E         	goto	l3307
  3651   001BE4                     u1720:
  3652   001BE4  500D               	movf	___aodiv@divisor^0,w,c
  3653   001BE6  5E05               	subwf	___aodiv@dividend^0,f,c
  3654   001BE8  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3655   001BEA  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3656   001BEC  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3657   001BEE  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3658   001BF0  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3659   001BF2  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3660   001BF4  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3661   001BF6  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3662   001BF8  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3663   001BFA  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3664   001BFC  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3665   001BFE  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3666   001C00  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3667   001C02  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3668   001C04  8017               	bsf	___aodiv@quotient^0,0,c
  3669   001C06                     l3307:
  3670   001C06  90D8               	bcf	status,0,c
  3671   001C08  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3672   001C0A  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3673   001C0C  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3674   001C0E  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3675   001C10  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3676   001C12  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3677   001C14  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3678   001C16  320D               	rrcf	___aodiv@divisor^0,f,c
  3679   001C18  2E15               	decfsz	___aodiv@counter^0,f,c
  3680   001C1A  EFD2  F00D         	goto	l3299
  3681   001C1E                     l3311:
  3682   001C1E  5016               	movf	___aodiv@sign^0,w,c
  3683   001C20  B4D8               	btfsc	status,2,c
  3684   001C22  EF15  F00E         	goto	u1731
  3685   001C26  EF17  F00E         	goto	u1730
  3686   001C2A                     u1731:
  3687   001C2A  EF27  F00E         	goto	l3315
  3688   001C2E                     u1730:
  3689   001C2E  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3690   001C30  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3691   001C32  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3692   001C34  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3693   001C36  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3694   001C38  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3695   001C3A  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3696   001C3C  6C17               	negf	___aodiv@quotient^0,c
  3697   001C3E  0E00               	movlw	0
  3698   001C40  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3699   001C42  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3700   001C44  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3701   001C46  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3702   001C48  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3703   001C4A  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3704   001C4C  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3705   001C4E                     l3315:
  3706   001C4E  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3707   001C52  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3708   001C56  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3709   001C5A  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3710   001C5E  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3711   001C62  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3712   001C66  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3713   001C6A  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3714   001C6E  0012               	return		;funcret
  3715   001C70                     __end_of___aodiv:
  3716                           	callstack 0
  3717                           
  3718 ;; *************** function _sendStringSerial4 *****************
  3719 ;; Defined at:
  3720 ;;		line 39 in file "serial.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  string          2    5[COMRAM] PTR unsigned char 
  3723 ;;		 -> main@buf(150), 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3739 ;;Total ram usage:        2 bytes
  3740 ;; Hardware stack levels used: 1
  3741 ;; Hardware stack levels required when called: 5
  3742 ;; This function calls:
  3743 ;;		_sendCharSerial4
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;;		_card_response
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text17
  3751   002B4C                     __ptext17:
  3752                           	callstack 0
  3753   002B4C                     _sendStringSerial4:
  3754                           	callstack 25
  3755   002B4C                     
  3756                           ;serial.c: 40:  while(*string != 0) {
  3757   002B4C  EFB1  F015         	goto	l2763
  3758   002B50                     l2759:
  3759                           
  3760                           ;serial.c: 41:         sendCharSerial4(*string++);
  3761   002B50  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3762   002B54  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3763   002B58  50DF               	movf	indf2,w,c
  3764   002B5A  EC54  F016         	call	_sendCharSerial4
  3765   002B5E  4A06               	infsnz	sendStringSerial4@string^0,f,c
  3766   002B60  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  3767   002B62                     l2763:
  3768                           
  3769                           ;serial.c: 40:  while(*string != 0) {
  3770   002B62  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  3771   002B66  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  3772   002B6A  50DF               	movf	indf2,w,c
  3773   002B6C  A4D8               	btfss	status,2,c
  3774   002B6E  EFBB  F015         	goto	u1391
  3775   002B72  EFBD  F015         	goto	u1390
  3776   002B76                     u1391:
  3777   002B76  EFA8  F015         	goto	l2759
  3778   002B7A                     u1390:
  3779   002B7A  0012               	return		;funcret
  3780   002B7C                     __end_of_sendStringSerial4:
  3781                           	callstack 0
  3782                           
  3783 ;; *************** function _sendCharSerial4 *****************
  3784 ;; Defined at:
  3785 ;;		line 32 in file "serial.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  charToSend      1    wreg     unsigned char 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;  charToSend      1    4[COMRAM] unsigned char 
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		wreg
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3803 ;;Total ram usage:        1 bytes
  3804 ;; Hardware stack levels used: 1
  3805 ;; Hardware stack levels required when called: 4
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_sendStringSerial4
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text18
  3814   002CA8                     __ptext18:
  3815                           	callstack 0
  3816   002CA8                     _sendCharSerial4:
  3817                           	callstack 25
  3818                           
  3819                           ;incstack = 0
  3820                           ;sendCharSerial4@charToSend stored from wreg
  3821   002CA8  6E05               	movwf	sendCharSerial4@charToSend^0,c
  3822   002CAA                     l407:
  3823   002CAA  010E               	movlb	14	; () banked
  3824   002CAC  A537               	btfss	55,2,b	;volatile
  3825   002CAE  EF5B  F016         	goto	u1311
  3826   002CB2  EF5D  F016         	goto	u1310
  3827   002CB6                     u1311:
  3828   002CB6  EF55  F016         	goto	l407
  3829   002CBA                     u1310:
  3830   002CBA                     
  3831                           ; BSR set to: 14
  3832                           ;serial.c: 34:     TX4REG = charToSend;
  3833   002CBA  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3834   002CBE                     
  3835                           ; BSR set to: 14
  3836   002CBE  0012               	return		;funcret
  3837   002CC0                     __end_of_sendCharSerial4:
  3838                           	callstack 0
  3839                           
  3840 ;; *************** function _normalise_readings *****************
  3841 ;; Defined at:
  3842 ;;		line 42 in file "colour_identify.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  buf             2   26[COMRAM] PTR unsigned char 
  3845 ;;		 -> main@buf(150), 
  3846 ;;  red_read        2   28[COMRAM] unsigned int 
  3847 ;;  green_read      2   30[COMRAM] unsigned int 
  3848 ;;  blue_read       2   32[COMRAM] unsigned int 
  3849 ;;  expected_val    2   34[COMRAM] PTR unsigned int [9]
  3850 ;;		 -> main@expected_values(54), 
  3851 ;;  normalised_v    2   36[COMRAM] PTR unsigned int [9]
  3852 ;;		 -> card_response@normalised_values(54), 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  difference      2   46[COMRAM] unsigned int 
  3855 ;;  i               1   48[COMRAM] enum E14551
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3865 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3866 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;Total ram usage:       23 bytes
  3870 ;; Hardware stack levels used: 1
  3871 ;; Hardware stack levels required when called: 5
  3872 ;; This function calls:
  3873 ;;		___lwdiv
  3874 ;;		___wmul
  3875 ;;		_abs
  3876 ;; This function is called by:
  3877 ;;		_card_response
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text19
  3882   0016DA                     __ptext19:
  3883                           	callstack 0
  3884   0016DA                     _normalise_readings:
  3885                           	callstack 24
  3886   0016DA                     
  3887                           ;colour_identify.c: 49:     for(colour i = RED; i<= BLACK; i++){
  3888   0016DA  0E00               	movlw	0
  3889   0016DC  6E31               	movwf	normalise_readings@i^0,c
  3890   0016DE                     l3479:
  3891                           
  3892                           ;colour_identify.c: 53:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3893   0016DE  5031               	movf	normalise_readings@i^0,w,c
  3894   0016E0  0D02               	mullw	2
  3895   0016E2  CFF3 F027          	movff	prodl,??_normalise_readings
  3896   0016E6  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3897   0016EA  5027               	movf	??_normalise_readings^0,w,c
  3898   0016EC  2423               	addwf	normalise_readings@expected_values^0,w,c
  3899   0016EE  6ED9               	movwf	fsr2l,c
  3900   0016F0  5028               	movf	(??_normalise_readings+1)^0,w,c
  3901   0016F2  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3902   0016F4  6EDA               	movwf	fsr2h,c
  3903   0016F6  CFDE F029          	movff	postinc2,??_normalise_readings+2
  3904   0016FA  CFDD F02A          	movff	postdec2,??_normalise_readings+3
  3905   0016FE  5029               	movf	(??_normalise_readings+2)^0,w,c
  3906   001700  5C1D               	subwf	normalise_readings@red_read^0,w,c
  3907   001702  6E17               	movwf	abs@a^0,c
  3908   001704  502A               	movf	(??_normalise_readings+3)^0,w,c
  3909   001706  581E               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3910   001708  6E18               	movwf	(abs@a+1)^0,c
  3911   00170A  EC4D  F015         	call	_abs	;wreg free
  3912   00170E  C017  F02F         	movff	?_abs,normalise_readings@difference
  3913   001712  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3914                           
  3915                           ;colour_identify.c: 54:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3916   001716  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3917   00171A  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3918   00171E  0E00               	movlw	0
  3919   001720  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3920   001722  0E64               	movlw	100
  3921   001724  6E07               	movwf	___wmul@multiplicand^0,c
  3922   001726  EC10  F016         	call	___wmul	;wreg free
  3923   00172A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3924   00172E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3925   001732  5031               	movf	normalise_readings@i^0,w,c
  3926   001734  0D02               	mullw	2
  3927   001736  CFF3 F027          	movff	prodl,??_normalise_readings
  3928   00173A  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3929   00173E  5027               	movf	??_normalise_readings^0,w,c
  3930   001740  2423               	addwf	normalise_readings@expected_values^0,w,c
  3931   001742  6ED9               	movwf	fsr2l,c
  3932   001744  5028               	movf	(??_normalise_readings+1)^0,w,c
  3933   001746  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3934   001748  6EDA               	movwf	fsr2h,c
  3935   00174A  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  3936   00174E  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  3937   001752  ECA9  F013         	call	___lwdiv	;wreg free
  3938   001756  5031               	movf	normalise_readings@i^0,w,c
  3939   001758  0D02               	mullw	2
  3940   00175A  CFF3 F029          	movff	prodl,??_normalise_readings+2
  3941   00175E  CFF4 F02A          	movff	prodh,??_normalise_readings+3
  3942   001762  5029               	movf	(??_normalise_readings+2)^0,w,c
  3943   001764  2425               	addwf	normalise_readings@normalised_values^0,w,c
  3944   001766  6ED9               	movwf	fsr2l,c
  3945   001768  502A               	movf	(??_normalise_readings+3)^0,w,c
  3946   00176A  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3947   00176C  6EDA               	movwf	fsr2h,c
  3948   00176E  C00B  FFDE         	movff	?___lwdiv,postinc2
  3949   001772  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  3950                           
  3951                           ;colour_identify.c: 57:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3952   001776  5031               	movf	normalise_readings@i^0,w,c
  3953   001778  0D02               	mullw	2
  3954   00177A  CFF3 F027          	movff	prodl,??_normalise_readings
  3955   00177E  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3956   001782  5027               	movf	??_normalise_readings^0,w,c
  3957   001784  2423               	addwf	normalise_readings@expected_values^0,w,c
  3958   001786  6E29               	movwf	(??_normalise_readings+2)^0,c
  3959   001788  5028               	movf	(??_normalise_readings+1)^0,w,c
  3960   00178A  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3961   00178C  6E2A               	movwf	(??_normalise_readings+3)^0,c
  3962   00178E  0E12               	movlw	18
  3963   001790  2429               	addwf	(??_normalise_readings+2)^0,w,c
  3964   001792  6ED9               	movwf	fsr2l,c
  3965   001794  0E00               	movlw	0
  3966   001796  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  3967   001798  6EDA               	movwf	fsr2h,c
  3968   00179A  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  3969   00179E  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  3970   0017A2  502B               	movf	(??_normalise_readings+4)^0,w,c
  3971   0017A4  5C1F               	subwf	normalise_readings@green_read^0,w,c
  3972   0017A6  6E17               	movwf	abs@a^0,c
  3973   0017A8  502C               	movf	(??_normalise_readings+5)^0,w,c
  3974   0017AA  5820               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3975   0017AC  6E18               	movwf	(abs@a+1)^0,c
  3976   0017AE  EC4D  F015         	call	_abs	;wreg free
  3977   0017B2  C017  F02F         	movff	?_abs,normalise_readings@difference
  3978   0017B6  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  3979                           
  3980                           ;colour_identify.c: 58:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3981   0017BA  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  3982   0017BE  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3983   0017C2  0E00               	movlw	0
  3984   0017C4  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  3985   0017C6  0E64               	movlw	100
  3986   0017C8  6E07               	movwf	___wmul@multiplicand^0,c
  3987   0017CA  EC10  F016         	call	___wmul	;wreg free
  3988   0017CE  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3989   0017D2  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3990   0017D6  5031               	movf	normalise_readings@i^0,w,c
  3991   0017D8  0D02               	mullw	2
  3992   0017DA  CFF3 F027          	movff	prodl,??_normalise_readings
  3993   0017DE  CFF4 F028          	movff	prodh,??_normalise_readings+1
  3994   0017E2  5027               	movf	??_normalise_readings^0,w,c
  3995   0017E4  2423               	addwf	normalise_readings@expected_values^0,w,c
  3996   0017E6  6E29               	movwf	(??_normalise_readings+2)^0,c
  3997   0017E8  5028               	movf	(??_normalise_readings+1)^0,w,c
  3998   0017EA  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3999   0017EC  6E2A               	movwf	(??_normalise_readings+3)^0,c
  4000   0017EE  0E12               	movlw	18
  4001   0017F0  2429               	addwf	(??_normalise_readings+2)^0,w,c
  4002   0017F2  6ED9               	movwf	fsr2l,c
  4003   0017F4  0E00               	movlw	0
  4004   0017F6  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  4005   0017F8  6EDA               	movwf	fsr2h,c
  4006   0017FA  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4007   0017FE  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4008   001802  ECA9  F013         	call	___lwdiv	;wreg free
  4009   001806  5031               	movf	normalise_readings@i^0,w,c
  4010   001808  0D02               	mullw	2
  4011   00180A  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  4012   00180E  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  4013   001812  502B               	movf	(??_normalise_readings+4)^0,w,c
  4014   001814  2425               	addwf	normalise_readings@normalised_values^0,w,c
  4015   001816  6E2D               	movwf	(??_normalise_readings+6)^0,c
  4016   001818  502C               	movf	(??_normalise_readings+5)^0,w,c
  4017   00181A  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4018   00181C  6E2E               	movwf	(??_normalise_readings+7)^0,c
  4019   00181E  0E12               	movlw	18
  4020   001820  242D               	addwf	(??_normalise_readings+6)^0,w,c
  4021   001822  6ED9               	movwf	fsr2l,c
  4022   001824  0E00               	movlw	0
  4023   001826  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  4024   001828  6EDA               	movwf	fsr2h,c
  4025   00182A  C00B  FFDE         	movff	?___lwdiv,postinc2
  4026   00182E  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4027                           
  4028                           ;colour_identify.c: 61:         difference = abs(blue_read - expected_values[BLUE][i]);
  4029   001832  5031               	movf	normalise_readings@i^0,w,c
  4030   001834  0D02               	mullw	2
  4031   001836  CFF3 F027          	movff	prodl,??_normalise_readings
  4032   00183A  CFF4 F028          	movff	prodh,??_normalise_readings+1
  4033   00183E  5027               	movf	??_normalise_readings^0,w,c
  4034   001840  2423               	addwf	normalise_readings@expected_values^0,w,c
  4035   001842  6E29               	movwf	(??_normalise_readings+2)^0,c
  4036   001844  5028               	movf	(??_normalise_readings+1)^0,w,c
  4037   001846  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4038   001848  6E2A               	movwf	(??_normalise_readings+3)^0,c
  4039   00184A  0E24               	movlw	36
  4040   00184C  2429               	addwf	(??_normalise_readings+2)^0,w,c
  4041   00184E  6ED9               	movwf	fsr2l,c
  4042   001850  0E00               	movlw	0
  4043   001852  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  4044   001854  6EDA               	movwf	fsr2h,c
  4045   001856  CFDE F02B          	movff	postinc2,??_normalise_readings+4
  4046   00185A  CFDD F02C          	movff	postdec2,??_normalise_readings+5
  4047   00185E  502B               	movf	(??_normalise_readings+4)^0,w,c
  4048   001860  5C21               	subwf	normalise_readings@blue_read^0,w,c
  4049   001862  6E17               	movwf	abs@a^0,c
  4050   001864  502C               	movf	(??_normalise_readings+5)^0,w,c
  4051   001866  5822               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4052   001868  6E18               	movwf	(abs@a+1)^0,c
  4053   00186A  EC4D  F015         	call	_abs	;wreg free
  4054   00186E  C017  F02F         	movff	?_abs,normalise_readings@difference
  4055   001872  C018  F030         	movff	?_abs+1,normalise_readings@difference+1
  4056                           
  4057                           ;colour_identify.c: 62:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4058   001876  C02F  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4059   00187A  C030  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4060   00187E  0E00               	movlw	0
  4061   001880  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4062   001882  0E64               	movlw	100
  4063   001884  6E07               	movwf	___wmul@multiplicand^0,c
  4064   001886  EC10  F016         	call	___wmul	;wreg free
  4065   00188A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4066   00188E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4067   001892  5031               	movf	normalise_readings@i^0,w,c
  4068   001894  0D02               	mullw	2
  4069   001896  CFF3 F027          	movff	prodl,??_normalise_readings
  4070   00189A  CFF4 F028          	movff	prodh,??_normalise_readings+1
  4071   00189E  5027               	movf	??_normalise_readings^0,w,c
  4072   0018A0  2423               	addwf	normalise_readings@expected_values^0,w,c
  4073   0018A2  6E29               	movwf	(??_normalise_readings+2)^0,c
  4074   0018A4  5028               	movf	(??_normalise_readings+1)^0,w,c
  4075   0018A6  2024               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4076   0018A8  6E2A               	movwf	(??_normalise_readings+3)^0,c
  4077   0018AA  0E24               	movlw	36
  4078   0018AC  2429               	addwf	(??_normalise_readings+2)^0,w,c
  4079   0018AE  6ED9               	movwf	fsr2l,c
  4080   0018B0  0E00               	movlw	0
  4081   0018B2  202A               	addwfc	(??_normalise_readings+3)^0,w,c
  4082   0018B4  6EDA               	movwf	fsr2h,c
  4083   0018B6  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4084   0018BA  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4085   0018BE  ECA9  F013         	call	___lwdiv	;wreg free
  4086   0018C2  5031               	movf	normalise_readings@i^0,w,c
  4087   0018C4  0D02               	mullw	2
  4088   0018C6  CFF3 F02B          	movff	prodl,??_normalise_readings+4
  4089   0018CA  CFF4 F02C          	movff	prodh,??_normalise_readings+5
  4090   0018CE  502B               	movf	(??_normalise_readings+4)^0,w,c
  4091   0018D0  2425               	addwf	normalise_readings@normalised_values^0,w,c
  4092   0018D2  6E2D               	movwf	(??_normalise_readings+6)^0,c
  4093   0018D4  502C               	movf	(??_normalise_readings+5)^0,w,c
  4094   0018D6  2026               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4095   0018D8  6E2E               	movwf	(??_normalise_readings+7)^0,c
  4096   0018DA  0E24               	movlw	36
  4097   0018DC  242D               	addwf	(??_normalise_readings+6)^0,w,c
  4098   0018DE  6ED9               	movwf	fsr2l,c
  4099   0018E0  0E00               	movlw	0
  4100   0018E2  202E               	addwfc	(??_normalise_readings+7)^0,w,c
  4101   0018E4  6EDA               	movwf	fsr2h,c
  4102   0018E6  C00B  FFDE         	movff	?___lwdiv,postinc2
  4103   0018EA  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4104   0018EE                     
  4105                           ;colour_identify.c: 63:     }
  4106   0018EE  2A31               	incf	normalise_readings@i^0,f,c
  4107   0018F0  0E08               	movlw	8
  4108   0018F2  6431               	cpfsgt	normalise_readings@i^0,c
  4109   0018F4  EF7E  F00C         	goto	u1961
  4110   0018F8  EF80  F00C         	goto	u1960
  4111   0018FC                     u1961:
  4112   0018FC  EF6F  F00B         	goto	l3479
  4113   001900                     u1960:
  4114   001900  0012               	return		;funcret
  4115   001902                     __end_of_normalise_readings:
  4116                           	callstack 0
  4117                           
  4118 ;; *************** function _abs *****************
  4119 ;; Defined at:
  4120 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  a               2   22[COMRAM] int 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  2   22[COMRAM] int 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4137 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;Total ram usage:        4 bytes
  4139 ;; Hardware stack levels used: 1
  4140 ;; Hardware stack levels required when called: 4
  4141 ;; This function calls:
  4142 ;;		Nothing
  4143 ;; This function is called by:
  4144 ;;		_normalise_readings
  4145 ;;		_dtoa
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text20
  4150   002A9A                     __ptext20:
  4151                           	callstack 0
  4152   002A9A                     _abs:
  4153                           	callstack 22
  4154   002A9A  BE18               	btfsc	(abs@a+1)^0,7,c
  4155   002A9C  EF5A  F015         	goto	u1660
  4156   002AA0  5018               	movf	(abs@a+1)^0,w,c
  4157   002AA2  E106               	bnz	u1661
  4158   002AA4  0417               	decf	abs@a^0,w,c
  4159   002AA6  B0D8               	btfsc	status,0,c
  4160   002AA8  EF58  F015         	goto	u1661
  4161   002AAC  EF5A  F015         	goto	u1660
  4162   002AB0                     u1661:
  4163   002AB0  EF68  F015         	goto	l1184
  4164   002AB4                     u1660:
  4165   002AB4  C017  F019         	movff	abs@a,??_abs
  4166   002AB8  C018  F01A         	movff	abs@a+1,??_abs+1
  4167   002ABC  1E19               	comf	??_abs^0,f,c
  4168   002ABE  1E1A               	comf	(??_abs+1)^0,f,c
  4169   002AC0  4A19               	infsnz	??_abs^0,f,c
  4170   002AC2  2A1A               	incf	(??_abs+1)^0,f,c
  4171   002AC4  C019  F017         	movff	??_abs,?_abs
  4172   002AC8  C01A  F018         	movff	??_abs+1,?_abs+1
  4173   002ACC  EF6C  F015         	goto	l1187
  4174   002AD0                     l1184:
  4175   002AD0  C017  F017         	movff	abs@a,?_abs
  4176   002AD4  C018  F018         	movff	abs@a+1,?_abs+1
  4177   002AD8                     l1187:
  4178   002AD8  0012               	return		;funcret
  4179   002ADA                     __end_of_abs:
  4180                           	callstack 0
  4181                           
  4182 ;; *************** function _motor_response *****************
  4183 ;; Defined at:
  4184 ;;		line 92 in file "colour_identify.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  card            1    wreg     enum E14551
  4187 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4188 ;;		 -> main@motorL(9), 
  4189 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4190 ;;		 -> main@motorR(9), 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  card            1   37[COMRAM] enum E14551
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;Total ram usage:        7 bytes
  4207 ;; Hardware stack levels used: 1
  4208 ;; Hardware stack levels required when called: 7
  4209 ;; This function calls:
  4210 ;;		_reverseFullSpeed
  4211 ;;		_stop
  4212 ;;		_turnLeft45
  4213 ;;		_turnRight45
  4214 ;; This function is called by:
  4215 ;;		_card_response
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text21
  4220   000E66                     __ptext21:
  4221                           	callstack 0
  4222   000E66                     _motor_response:
  4223                           	callstack 22
  4224                           
  4225                           ;incstack = 0
  4226                           ;motor_response@card stored from wreg
  4227   000E66  6E26               	movwf	motor_response@card^0,c
  4228   000E68                     
  4229                           ;colour_identify.c: 94:     switch (card){
  4230   000E68  EF8C  F008         	goto	l2925
  4231   000E6C                     l2815:
  4232                           
  4233                           ;colour_identify.c: 96:             reverseFullSpeed(mL,mR);
  4234   000E6C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4235   000E70  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4236   000E74  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4237   000E78  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4238   000E7C  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4239   000E80                     
  4240                           ;colour_identify.c: 97:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4241   000E80  0E05               	movlw	5
  4242   000E82  6E25               	movwf	(??_motor_response+1)^0,c
  4243   000E84  0E0F               	movlw	15
  4244   000E86  6E24               	movwf	??_motor_response^0,c
  4245   000E88  0EF1               	movlw	241
  4246   000E8A                     u2067:
  4247   000E8A  2EE8               	decfsz	wreg,f,c
  4248   000E8C  D7FE               	bra	u2067
  4249   000E8E  2E24               	decfsz	??_motor_response^0,f,c
  4250   000E90  D7FC               	bra	u2067
  4251   000E92  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4252   000E94  D7FA               	bra	u2067
  4253   000E96  F000               	nop	
  4254   000E98                     l2819:
  4255                           
  4256                           ;colour_identify.c: 98:             turnRight45(mL,mR);
  4257   000E98  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4258   000E9C  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4259   000EA0  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4260   000EA4  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4261   000EA8  ECB1  F011         	call	_turnRight45	;wreg free
  4262   000EAC                     
  4263                           ;colour_identify.c: 99:             stop(mL,mR);
  4264   000EAC  C020  F018         	movff	motor_response@mL,stop@mL
  4265   000EB0  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4266   000EB4  C022  F01A         	movff	motor_response@mR,stop@mR
  4267   000EB8  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4268   000EBC  ECE9  F012         	call	_stop	;wreg free
  4269   000EC0                     
  4270                           ;colour_identify.c: 100:             turnRight45(mL,mR);
  4271   000EC0  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4272   000EC4  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4273   000EC8  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4274   000ECC  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4275   000ED0  ECB1  F011         	call	_turnRight45	;wreg free
  4276   000ED4                     l2825:
  4277                           
  4278                           ;colour_identify.c: 101:             stop(mL,mR);
  4279   000ED4  C020  F018         	movff	motor_response@mL,stop@mL
  4280   000ED8  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4281   000EDC  C022  F01A         	movff	motor_response@mR,stop@mR
  4282   000EE0  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4283   000EE4  ECE9  F012         	call	_stop	;wreg free
  4284                           
  4285                           ;colour_identify.c: 102:             break;
  4286   000EE8  EFBD  F008         	goto	l356
  4287   000EEC                     l2827:
  4288                           
  4289                           ;colour_identify.c: 104:             reverseFullSpeed(mL,mR);
  4290   000EEC  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4291   000EF0  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4292   000EF4  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4293   000EF8  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4294   000EFC  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4295   000F00                     
  4296                           ;colour_identify.c: 105:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4297   000F00  0E05               	movlw	5
  4298   000F02  6E25               	movwf	(??_motor_response+1)^0,c
  4299   000F04  0E0F               	movlw	15
  4300   000F06  6E24               	movwf	??_motor_response^0,c
  4301   000F08  0EF1               	movlw	241
  4302   000F0A                     u2077:
  4303   000F0A  2EE8               	decfsz	wreg,f,c
  4304   000F0C  D7FE               	bra	u2077
  4305   000F0E  2E24               	decfsz	??_motor_response^0,f,c
  4306   000F10  D7FC               	bra	u2077
  4307   000F12  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4308   000F14  D7FA               	bra	u2077
  4309   000F16  F000               	nop	
  4310   000F18                     l2831:
  4311                           
  4312                           ;colour_identify.c: 106:             turnLeft45(mL,mR);
  4313   000F18  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4314   000F1C  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4315   000F20  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4316   000F24  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4317   000F28  EC08  F012         	call	_turnLeft45	;wreg free
  4318   000F2C                     
  4319                           ;colour_identify.c: 107:             stop(mL,mR);
  4320   000F2C  C020  F018         	movff	motor_response@mL,stop@mL
  4321   000F30  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4322   000F34  C022  F01A         	movff	motor_response@mR,stop@mR
  4323   000F38  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4324   000F3C  ECE9  F012         	call	_stop	;wreg free
  4325   000F40                     
  4326                           ;colour_identify.c: 108:             turnLeft45(mL,mR);
  4327   000F40  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4328   000F44  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4329   000F48  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4330   000F4C  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4331   000F50  EC08  F012         	call	_turnLeft45	;wreg free
  4332   000F54  EF6A  F007         	goto	l2825
  4333   000F58                     l2839:
  4334                           
  4335                           ;colour_identify.c: 112:             reverseFullSpeed(mL,mR);
  4336   000F58  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4337   000F5C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4338   000F60  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4339   000F64  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4340   000F68  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4341   000F6C                     
  4342                           ;colour_identify.c: 113:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4343   000F6C  0E05               	movlw	5
  4344   000F6E  6E25               	movwf	(??_motor_response+1)^0,c
  4345   000F70  0E0F               	movlw	15
  4346   000F72  6E24               	movwf	??_motor_response^0,c
  4347   000F74  0EF1               	movlw	241
  4348   000F76                     u2087:
  4349   000F76  2EE8               	decfsz	wreg,f,c
  4350   000F78  D7FE               	bra	u2087
  4351   000F7A  2E24               	decfsz	??_motor_response^0,f,c
  4352   000F7C  D7FC               	bra	u2087
  4353   000F7E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4354   000F80  D7FA               	bra	u2087
  4355   000F82  F000               	nop	
  4356   000F84                     
  4357                           ;colour_identify.c: 114:             turnRight45(mL,mR);
  4358   000F84  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4359   000F88  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4360   000F8C  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4361   000F90  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4362   000F94  ECB1  F011         	call	_turnRight45	;wreg free
  4363   000F98                     
  4364                           ;colour_identify.c: 115:             stop(mL,mR);
  4365   000F98  C020  F018         	movff	motor_response@mL,stop@mL
  4366   000F9C  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4367   000FA0  C022  F01A         	movff	motor_response@mR,stop@mR
  4368   000FA4  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4369   000FA8  ECE9  F012         	call	_stop	;wreg free
  4370   000FAC                     l2847:
  4371                           
  4372                           ;colour_identify.c: 116:             turnRight45(mL,mR);
  4373   000FAC  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4374   000FB0  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4375   000FB4  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4376   000FB8  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4377   000FBC  ECB1  F011         	call	_turnRight45	;wreg free
  4378   000FC0                     l2849:
  4379                           
  4380                           ;colour_identify.c: 117:             stop(mL,mR);
  4381   000FC0  C020  F018         	movff	motor_response@mL,stop@mL
  4382   000FC4  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4383   000FC8  C022  F01A         	movff	motor_response@mR,stop@mR
  4384   000FCC  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4385   000FD0  ECE9  F012         	call	_stop	;wreg free
  4386   000FD4  EF4C  F007         	goto	l2819
  4387   000FD8                     l2859:
  4388                           
  4389                           ;colour_identify.c: 124:             reverseFullSpeed(mL,mR);
  4390   000FD8  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4391   000FDC  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4392   000FE0  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4393   000FE4  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4394   000FE8  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4395   000FEC                     
  4396                           ;colour_identify.c: 125:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4397   000FEC  0E05               	movlw	5
  4398   000FEE  6E25               	movwf	(??_motor_response+1)^0,c
  4399   000FF0  0E0F               	movlw	15
  4400   000FF2  6E24               	movwf	??_motor_response^0,c
  4401   000FF4  0EF1               	movlw	241
  4402   000FF6                     u2097:
  4403   000FF6  2EE8               	decfsz	wreg,f,c
  4404   000FF8  D7FE               	bra	u2097
  4405   000FFA  2E24               	decfsz	??_motor_response^0,f,c
  4406   000FFC  D7FC               	bra	u2097
  4407   000FFE  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4408   001000  D7FA               	bra	u2097
  4409   001002  F000               	nop	
  4410   001004                     
  4411                           ;colour_identify.c: 126:             reverseFullSpeed(mL,mR);
  4412   001004  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4413   001008  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4414   00100C  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4415   001010  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4416   001014  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4417                           
  4418                           ;colour_identify.c: 127:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4419   001018  0E29               	movlw	41
  4420   00101A  6E25               	movwf	(??_motor_response+1)^0,c
  4421   00101C  0E96               	movlw	150
  4422   00101E  6E24               	movwf	??_motor_response^0,c
  4423   001020  0E7F               	movlw	127
  4424   001022                     u2107:
  4425   001022  2EE8               	decfsz	wreg,f,c
  4426   001024  D7FE               	bra	u2107
  4427   001026  2E24               	decfsz	??_motor_response^0,f,c
  4428   001028  D7FC               	bra	u2107
  4429   00102A  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4430   00102C  D7FA               	bra	u2107
  4431   00102E  F000               	nop	
  4432   001030  EFE0  F007         	goto	l2849
  4433   001034                     l2875:
  4434                           
  4435                           ;colour_identify.c: 135:             reverseFullSpeed(mL,mR);
  4436   001034  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4437   001038  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4438   00103C  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4439   001040  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4440   001044  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4441   001048                     
  4442                           ;colour_identify.c: 136:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4443   001048  0E05               	movlw	5
  4444   00104A  6E25               	movwf	(??_motor_response+1)^0,c
  4445   00104C  0E0F               	movlw	15
  4446   00104E  6E24               	movwf	??_motor_response^0,c
  4447   001050  0EF1               	movlw	241
  4448   001052                     u2117:
  4449   001052  2EE8               	decfsz	wreg,f,c
  4450   001054  D7FE               	bra	u2117
  4451   001056  2E24               	decfsz	??_motor_response^0,f,c
  4452   001058  D7FC               	bra	u2117
  4453   00105A  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4454   00105C  D7FA               	bra	u2117
  4455   00105E  F000               	nop	
  4456   001060                     
  4457                           ;colour_identify.c: 137:             reverseFullSpeed(mL,mR);
  4458   001060  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4459   001064  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4460   001068  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4461   00106C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4462   001070  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4463                           
  4464                           ;colour_identify.c: 138:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4465   001074  0E29               	movlw	41
  4466   001076  6E25               	movwf	(??_motor_response+1)^0,c
  4467   001078  0E96               	movlw	150
  4468   00107A  6E24               	movwf	??_motor_response^0,c
  4469   00107C  0E7F               	movlw	127
  4470   00107E                     u2127:
  4471   00107E  2EE8               	decfsz	wreg,f,c
  4472   001080  D7FE               	bra	u2127
  4473   001082  2E24               	decfsz	??_motor_response^0,f,c
  4474   001084  D7FC               	bra	u2127
  4475   001086  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4476   001088  D7FA               	bra	u2127
  4477   00108A  F000               	nop	
  4478   00108C                     l2881:
  4479                           
  4480                           ;colour_identify.c: 139:             stop(mL,mR);
  4481   00108C  C020  F018         	movff	motor_response@mL,stop@mL
  4482   001090  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4483   001094  C022  F01A         	movff	motor_response@mR,stop@mR
  4484   001098  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4485   00109C  ECE9  F012         	call	_stop	;wreg free
  4486   0010A0  EF8C  F007         	goto	l2831
  4487   0010A4                     l2891:
  4488                           
  4489                           ;colour_identify.c: 146:             reverseFullSpeed(mL,mR);
  4490   0010A4  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4491   0010A8  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4492   0010AC  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4493   0010B0  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4494   0010B4  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4495   0010B8                     
  4496                           ;colour_identify.c: 147:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4497   0010B8  0E05               	movlw	5
  4498   0010BA  6E25               	movwf	(??_motor_response+1)^0,c
  4499   0010BC  0E0F               	movlw	15
  4500   0010BE  6E24               	movwf	??_motor_response^0,c
  4501   0010C0  0EF1               	movlw	241
  4502   0010C2                     u2137:
  4503   0010C2  2EE8               	decfsz	wreg,f,c
  4504   0010C4  D7FE               	bra	u2137
  4505   0010C6  2E24               	decfsz	??_motor_response^0,f,c
  4506   0010C8  D7FC               	bra	u2137
  4507   0010CA  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4508   0010CC  D7FA               	bra	u2137
  4509   0010CE  F000               	nop	
  4510   0010D0  EFD6  F007         	goto	l2847
  4511   0010D4                     l2907:
  4512                           
  4513                           ;colour_identify.c: 156:             reverseFullSpeed(mL,mR);
  4514   0010D4  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4515   0010D8  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4516   0010DC  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4517   0010E0  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4518   0010E4  EC5F  F012         	call	_reverseFullSpeed	;wreg free
  4519   0010E8                     
  4520                           ;colour_identify.c: 157:             _delay((unsigned long)((50)*(64000000/4000.0)));
  4521   0010E8  0E05               	movlw	5
  4522   0010EA  6E25               	movwf	(??_motor_response+1)^0,c
  4523   0010EC  0E0F               	movlw	15
  4524   0010EE  6E24               	movwf	??_motor_response^0,c
  4525   0010F0  0EF1               	movlw	241
  4526   0010F2                     u2147:
  4527   0010F2  2EE8               	decfsz	wreg,f,c
  4528   0010F4  D7FE               	bra	u2147
  4529   0010F6  2E24               	decfsz	??_motor_response^0,f,c
  4530   0010F8  D7FC               	bra	u2147
  4531   0010FA  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4532   0010FC  D7FA               	bra	u2147
  4533   0010FE  F000               	nop	
  4534   001100                     
  4535                           ;colour_identify.c: 158:             turnLeft45(mL,mR);
  4536   001100  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4537   001104  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4538   001108  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4539   00110C  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4540   001110  EC08  F012         	call	_turnLeft45	;wreg free
  4541   001114  EF46  F008         	goto	l2881
  4542   001118                     l2925:
  4543   001118  5026               	movf	motor_response@card^0,w,c
  4544   00111A  6E24               	movwf	??_motor_response^0,c
  4545   00111C  6A25               	clrf	(??_motor_response+1)^0,c
  4546                           
  4547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4548                           ; Switch size 1, requested type "simple"
  4549                           ; Number of cases is 1, Range of values is 0 to 0
  4550                           ; switch strategies available:
  4551                           ; Name         Instructions Cycles
  4552                           ; simple_byte            4     3 (average)
  4553                           ;	Chosen strategy is simple_byte
  4554   00111E  5025               	movf	(??_motor_response+1)^0,w,c
  4555   001120  0A00               	xorlw	0	; case 0
  4556   001122  B4D8               	btfsc	status,2,c
  4557   001124  EF96  F008         	goto	l3617
  4558   001128  EFBD  F008         	goto	l356
  4559   00112C                     l3617:
  4560                           
  4561                           ; Switch size 1, requested type "simple"
  4562                           ; Number of cases is 9, Range of values is 0 to 8
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte           28    15 (average)
  4566                           ;	Chosen strategy is simple_byte
  4567   00112C  5024               	movf	??_motor_response^0,w,c
  4568   00112E  0A00               	xorlw	0	; case 0
  4569   001130  B4D8               	btfsc	status,2,c
  4570   001132  EF36  F007         	goto	l2815
  4571   001136  0A01               	xorlw	1	; case 1
  4572   001138  B4D8               	btfsc	status,2,c
  4573   00113A  EF76  F007         	goto	l2827
  4574   00113E  0A03               	xorlw	3	; case 2
  4575   001140  B4D8               	btfsc	status,2,c
  4576   001142  EFAC  F007         	goto	l2839
  4577   001146  0A01               	xorlw	1	; case 3
  4578   001148  B4D8               	btfsc	status,2,c
  4579   00114A  EFEC  F007         	goto	l2859
  4580   00114E  0A07               	xorlw	7	; case 4
  4581   001150  B4D8               	btfsc	status,2,c
  4582   001152  EF1A  F008         	goto	l2875
  4583   001156  0A01               	xorlw	1	; case 5
  4584   001158  B4D8               	btfsc	status,2,c
  4585   00115A  EF52  F008         	goto	l2891
  4586   00115E  0A03               	xorlw	3	; case 6
  4587   001160  B4D8               	btfsc	status,2,c
  4588   001162  EF6A  F008         	goto	l2907
  4589   001166  0A01               	xorlw	1	; case 7
  4590   001168  B4D8               	btfsc	status,2,c
  4591   00116A  EFBD  F008         	goto	l356
  4592   00116E  0A0F               	xorlw	15	; case 8
  4593   001170  B4D8               	btfsc	status,2,c
  4594   001172  EFBD  F008         	goto	l356
  4595   001176  EFBD  F008         	goto	l356
  4596   00117A                     l356:
  4597   00117A  0012               	return		;funcret
  4598   00117C                     __end_of_motor_response:
  4599                           	callstack 0
  4600                           
  4601 ;; *************** function _turnRight45 *****************
  4602 ;; Defined at:
  4603 ;;		line 116 in file "dc_motor.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4606 ;;		 -> main@motorL(9), 
  4607 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4608 ;;		 -> main@motorR(9), 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  i               2   29[COMRAM] int 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4623 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4624 ;;Total ram usage:        8 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; Hardware stack levels required when called: 6
  4627 ;; This function calls:
  4628 ;;		_setMotorPWM
  4629 ;; This function is called by:
  4630 ;;		_motor_response
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text22
  4635   002362                     __ptext22:
  4636                           	callstack 0
  4637   002362                     _turnRight45:
  4638                           	callstack 22
  4639   002362                     
  4640                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  4641   002362  EE20 F001          	lfsr	2,1
  4642   002366  5018               	movf	turnRight45@mL^0,w,c
  4643   002368  26D9               	addwf	fsr2l,f,c
  4644   00236A  5019               	movf	(turnRight45@mL+1)^0,w,c
  4645   00236C  22DA               	addwfc	fsr2h,f,c
  4646   00236E  0E01               	movlw	1
  4647   002370  6EDF               	movwf	indf2,c
  4648                           
  4649                           ;dc_motor.c: 119:     mR->direction=0;
  4650   002372  EE20 F001          	lfsr	2,1
  4651   002376  501A               	movf	turnRight45@mR^0,w,c
  4652   002378  26D9               	addwf	fsr2l,f,c
  4653   00237A  501B               	movf	(turnRight45@mR+1)^0,w,c
  4654   00237C  22DA               	addwfc	fsr2h,f,c
  4655   00237E  0E00               	movlw	0
  4656   002380  6EDF               	movwf	indf2,c
  4657   002382                     
  4658                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  4659   002382  0E00               	movlw	0
  4660   002384  6E1F               	movwf	(turnRight45@i+1)^0,c
  4661   002386  0E00               	movlw	0
  4662   002388  6E1E               	movwf	turnRight45@i^0,c
  4663   00238A                     l2619:
  4664                           
  4665                           ;dc_motor.c: 122:         mR->power=i;
  4666   00238A  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  4667   00238E  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  4668   002392  C01E  FFDF         	movff	turnRight45@i,indf2
  4669                           
  4670                           ;dc_motor.c: 123:         mL->power=i;
  4671   002396  C018  FFD9         	movff	turnRight45@mL,fsr2l
  4672   00239A  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  4673   00239E  C01E  FFDF         	movff	turnRight45@i,indf2
  4674   0023A2                     
  4675                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4676   0023A2  0E02               	movlw	2
  4677   0023A4  6E1D               	movwf	(??_turnRight45+1)^0,c
  4678   0023A6  0E38               	movlw	56
  4679   0023A8  6E1C               	movwf	??_turnRight45^0,c
  4680   0023AA  0EAD               	movlw	173
  4681   0023AC                     u2157:
  4682   0023AC  2EE8               	decfsz	wreg,f,c
  4683   0023AE  D7FE               	bra	u2157
  4684   0023B0  2E1C               	decfsz	??_turnRight45^0,f,c
  4685   0023B2  D7FC               	bra	u2157
  4686   0023B4  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  4687   0023B6  D7FA               	bra	u2157
  4688   0023B8  F000               	nop	
  4689   0023BA                     
  4690                           ;dc_motor.c: 125:         setMotorPWM(mL);
  4691   0023BA  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  4692   0023BE  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  4693   0023C2  EC38  F00E         	call	_setMotorPWM	;wreg free
  4694   0023C6                     
  4695                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  4696   0023C6  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  4697   0023CA  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  4698   0023CE  EC38  F00E         	call	_setMotorPWM	;wreg free
  4699   0023D2  0E0A               	movlw	10
  4700   0023D4  261E               	addwf	turnRight45@i^0,f,c
  4701   0023D6  0E00               	movlw	0
  4702   0023D8  221F               	addwfc	(turnRight45@i+1)^0,f,c
  4703   0023DA  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  4704   0023DC  EFF9  F011         	goto	u1291
  4705   0023E0  501F               	movf	(turnRight45@i+1)^0,w,c
  4706   0023E2  E109               	bnz	u1290
  4707   0023E4  0E50               	movlw	80
  4708   0023E6  5C1E               	subwf	turnRight45@i^0,w,c
  4709   0023E8  A0D8               	btfss	status,0,c
  4710   0023EA  EFF9  F011         	goto	u1291
  4711   0023EE  EFFB  F011         	goto	u1290
  4712   0023F2                     u1291:
  4713   0023F2  EFC5  F011         	goto	l2619
  4714   0023F6                     u1290:
  4715   0023F6                     
  4716                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  4717   0023F6  0E06               	movlw	6
  4718   0023F8  6E1D               	movwf	(??_turnRight45+1)^0,c
  4719   0023FA  0E47               	movlw	71
  4720   0023FC  6E1C               	movwf	??_turnRight45^0,c
  4721   0023FE  0EA0               	movlw	160
  4722   002400                     u2167:
  4723   002400  2EE8               	decfsz	wreg,f,c
  4724   002402  D7FE               	bra	u2167
  4725   002404  2E1C               	decfsz	??_turnRight45^0,f,c
  4726   002406  D7FC               	bra	u2167
  4727   002408  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  4728   00240A  D7FA               	bra	u2167
  4729   00240C  D000               	nop2	
  4730   00240E  0012               	return		;funcret
  4731   002410                     __end_of_turnRight45:
  4732                           	callstack 0
  4733                           
  4734 ;; *************** function _turnLeft45 *****************
  4735 ;; Defined at:
  4736 ;;		line 101 in file "dc_motor.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4739 ;;		 -> main@motorL(9), 
  4740 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4741 ;;		 -> main@motorR(9), 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  i               2   29[COMRAM] int 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;Total ram usage:        8 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 6
  4760 ;; This function calls:
  4761 ;;		_setMotorPWM
  4762 ;; This function is called by:
  4763 ;;		_motor_response
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text23
  4768   002410                     __ptext23:
  4769                           	callstack 0
  4770   002410                     _turnLeft45:
  4771                           	callstack 22
  4772   002410                     
  4773                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  4774   002410  EE20 F001          	lfsr	2,1
  4775   002414  5018               	movf	turnLeft45@mL^0,w,c
  4776   002416  26D9               	addwf	fsr2l,f,c
  4777   002418  5019               	movf	(turnLeft45@mL+1)^0,w,c
  4778   00241A  22DA               	addwfc	fsr2h,f,c
  4779   00241C  0E00               	movlw	0
  4780   00241E  6EDF               	movwf	indf2,c
  4781                           
  4782                           ;dc_motor.c: 104:     mR->direction=1;
  4783   002420  EE20 F001          	lfsr	2,1
  4784   002424  501A               	movf	turnLeft45@mR^0,w,c
  4785   002426  26D9               	addwf	fsr2l,f,c
  4786   002428  501B               	movf	(turnLeft45@mR+1)^0,w,c
  4787   00242A  22DA               	addwfc	fsr2h,f,c
  4788   00242C  0E01               	movlw	1
  4789   00242E  6EDF               	movwf	indf2,c
  4790   002430                     
  4791                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  4792   002430  0E00               	movlw	0
  4793   002432  6E1F               	movwf	(turnLeft45@i+1)^0,c
  4794   002434  0E00               	movlw	0
  4795   002436  6E1E               	movwf	turnLeft45@i^0,c
  4796   002438                     l2597:
  4797                           
  4798                           ;dc_motor.c: 107:         mR->power=i;
  4799   002438  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  4800   00243C  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  4801   002440  C01E  FFDF         	movff	turnLeft45@i,indf2
  4802                           
  4803                           ;dc_motor.c: 108:         mL->power=i;
  4804   002444  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  4805   002448  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  4806   00244C  C01E  FFDF         	movff	turnLeft45@i,indf2
  4807   002450                     
  4808                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  4809   002450  0E02               	movlw	2
  4810   002452  6E1D               	movwf	(??_turnLeft45+1)^0,c
  4811   002454  0E38               	movlw	56
  4812   002456  6E1C               	movwf	??_turnLeft45^0,c
  4813   002458  0EAD               	movlw	173
  4814   00245A                     u2177:
  4815   00245A  2EE8               	decfsz	wreg,f,c
  4816   00245C  D7FE               	bra	u2177
  4817   00245E  2E1C               	decfsz	??_turnLeft45^0,f,c
  4818   002460  D7FC               	bra	u2177
  4819   002462  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  4820   002464  D7FA               	bra	u2177
  4821   002466  F000               	nop	
  4822   002468                     
  4823                           ;dc_motor.c: 110:         setMotorPWM(mL);
  4824   002468  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  4825   00246C  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  4826   002470  EC38  F00E         	call	_setMotorPWM	;wreg free
  4827   002474                     
  4828                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  4829   002474  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  4830   002478  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  4831   00247C  EC38  F00E         	call	_setMotorPWM	;wreg free
  4832   002480  0E0A               	movlw	10
  4833   002482  261E               	addwf	turnLeft45@i^0,f,c
  4834   002484  0E00               	movlw	0
  4835   002486  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  4836   002488  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  4837   00248A  EF50  F012         	goto	u1281
  4838   00248E  501F               	movf	(turnLeft45@i+1)^0,w,c
  4839   002490  E109               	bnz	u1280
  4840   002492  0E50               	movlw	80
  4841   002494  5C1E               	subwf	turnLeft45@i^0,w,c
  4842   002496  A0D8               	btfss	status,0,c
  4843   002498  EF50  F012         	goto	u1281
  4844   00249C  EF52  F012         	goto	u1280
  4845   0024A0                     u1281:
  4846   0024A0  EF1C  F012         	goto	l2597
  4847   0024A4                     u1280:
  4848   0024A4                     
  4849                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  4850   0024A4  0E06               	movlw	6
  4851   0024A6  6E1D               	movwf	(??_turnLeft45+1)^0,c
  4852   0024A8  0E47               	movlw	71
  4853   0024AA  6E1C               	movwf	??_turnLeft45^0,c
  4854   0024AC  0EA0               	movlw	160
  4855   0024AE                     u2187:
  4856   0024AE  2EE8               	decfsz	wreg,f,c
  4857   0024B0  D7FE               	bra	u2187
  4858   0024B2  2E1C               	decfsz	??_turnLeft45^0,f,c
  4859   0024B4  D7FC               	bra	u2187
  4860   0024B6  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  4861   0024B8  D7FA               	bra	u2187
  4862   0024BA  D000               	nop2	
  4863   0024BC  0012               	return		;funcret
  4864   0024BE                     __end_of_turnLeft45:
  4865                           	callstack 0
  4866                           
  4867 ;; *************** function _stop *****************
  4868 ;; Defined at:
  4869 ;;		line 84 in file "dc_motor.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4872 ;;		 -> main@motorL(9), 
  4873 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4874 ;;		 -> main@motorR(9), 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;Total ram usage:        5 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 6
  4893 ;; This function calls:
  4894 ;;		_setMotorPWM
  4895 ;; This function is called by:
  4896 ;;		_motor_response
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text24
  4901   0025D2                     __ptext24:
  4902                           	callstack 0
  4903   0025D2                     _stop:
  4904                           	callstack 22
  4905   0025D2                     
  4906                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  4907   0025D2  EFFE  F012         	goto	l2579
  4908   0025D6                     l2573:
  4909                           
  4910                           ;dc_motor.c: 87:         mL->power -=10;
  4911   0025D6  C018  FFD9         	movff	stop@mL,fsr2l
  4912   0025DA  C019  FFDA         	movff	stop@mL+1,fsr2h
  4913   0025DE  0E0A               	movlw	10
  4914   0025E0  5EDF               	subwf	indf2,f,c
  4915   0025E2                     
  4916                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  4917   0025E2  0E2A               	movlw	42
  4918   0025E4  6E1C               	movwf	??_stop^0,c
  4919   0025E6  0E8E               	movlw	142
  4920   0025E8                     u2197:
  4921   0025E8  2EE8               	decfsz	wreg,f,c
  4922   0025EA  D7FE               	bra	u2197
  4923   0025EC  2E1C               	decfsz	??_stop^0,f,c
  4924   0025EE  D7FC               	bra	u2197
  4925   0025F0                     
  4926                           ;dc_motor.c: 89:         setMotorPWM(mL);
  4927   0025F0  C018  F012         	movff	stop@mL,setMotorPWM@m
  4928   0025F4  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  4929   0025F8  EC38  F00E         	call	_setMotorPWM	;wreg free
  4930   0025FC                     l2579:
  4931                           
  4932                           ;dc_motor.c: 86:     while(mL->power !=0){
  4933   0025FC  C018  FFD9         	movff	stop@mL,fsr2l
  4934   002600  C019  FFDA         	movff	stop@mL+1,fsr2h
  4935   002604  50DF               	movf	indf2,w,c
  4936   002606  A4D8               	btfss	status,2,c
  4937   002608  EF08  F013         	goto	u1261
  4938   00260C  EF0A  F013         	goto	u1260
  4939   002610                     u1261:
  4940   002610  EFEB  F012         	goto	l2573
  4941   002614                     u1260:
  4942   002614  EF1F  F013         	goto	l2587
  4943   002618                     l2581:
  4944                           
  4945                           ;dc_motor.c: 92:         mR->power -=10;
  4946   002618  C01A  FFD9         	movff	stop@mR,fsr2l
  4947   00261C  C01B  FFDA         	movff	stop@mR+1,fsr2h
  4948   002620  0E0A               	movlw	10
  4949   002622  5EDF               	subwf	indf2,f,c
  4950   002624                     
  4951                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  4952   002624  0E2A               	movlw	42
  4953   002626  6E1C               	movwf	??_stop^0,c
  4954   002628  0E8E               	movlw	142
  4955   00262A                     u2207:
  4956   00262A  2EE8               	decfsz	wreg,f,c
  4957   00262C  D7FE               	bra	u2207
  4958   00262E  2E1C               	decfsz	??_stop^0,f,c
  4959   002630  D7FC               	bra	u2207
  4960   002632                     
  4961                           ;dc_motor.c: 94:         setMotorPWM(mR);
  4962   002632  C01A  F012         	movff	stop@mR,setMotorPWM@m
  4963   002636  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  4964   00263A  EC38  F00E         	call	_setMotorPWM	;wreg free
  4965   00263E                     l2587:
  4966                           
  4967                           ;dc_motor.c: 91:     while(mR -> power !=0){
  4968   00263E  C01A  FFD9         	movff	stop@mR,fsr2l
  4969   002642  C01B  FFDA         	movff	stop@mR+1,fsr2h
  4970   002646  50DF               	movf	indf2,w,c
  4971   002648  A4D8               	btfss	status,2,c
  4972   00264A  EF29  F013         	goto	u1271
  4973   00264E  EF2B  F013         	goto	u1270
  4974   002652                     u1271:
  4975   002652  EF0C  F013         	goto	l2581
  4976   002656                     u1270:
  4977   002656  0012               	return		;funcret
  4978   002658                     __end_of_stop:
  4979                           	callstack 0
  4980                           
  4981 ;; *************** function _reverseFullSpeed *****************
  4982 ;; Defined at:
  4983 ;;		line 145 in file "dc_motor.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4986 ;;		 -> main@motorL(9), 
  4987 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4988 ;;		 -> main@motorR(9), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;  i               2   28[COMRAM] int 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5004 ;;Total ram usage:        7 bytes
  5005 ;; Hardware stack levels used: 1
  5006 ;; Hardware stack levels required when called: 6
  5007 ;; This function calls:
  5008 ;;		_setMotorPWM
  5009 ;; This function is called by:
  5010 ;;		_motor_response
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text25
  5015   0024BE                     __ptext25:
  5016                           	callstack 0
  5017   0024BE                     _reverseFullSpeed:
  5018                           	callstack 22
  5019   0024BE                     
  5020                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5021   0024BE  EE20 F001          	lfsr	2,1
  5022   0024C2  5018               	movf	reverseFullSpeed@mL^0,w,c
  5023   0024C4  26D9               	addwf	fsr2l,f,c
  5024   0024C6  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5025   0024C8  22DA               	addwfc	fsr2h,f,c
  5026   0024CA  0E00               	movlw	0
  5027   0024CC  6EDF               	movwf	indf2,c
  5028                           
  5029                           ;dc_motor.c: 148:     mR->direction=0;
  5030   0024CE  EE20 F001          	lfsr	2,1
  5031   0024D2  501A               	movf	reverseFullSpeed@mR^0,w,c
  5032   0024D4  26D9               	addwf	fsr2l,f,c
  5033   0024D6  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5034   0024D8  22DA               	addwfc	fsr2h,f,c
  5035   0024DA  0E00               	movlw	0
  5036   0024DC  6EDF               	movwf	indf2,c
  5037   0024DE                     
  5038                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5039   0024DE  0E00               	movlw	0
  5040   0024E0  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  5041   0024E2  0E00               	movlw	0
  5042   0024E4  6E1D               	movwf	reverseFullSpeed@i^0,c
  5043   0024E6                     l2641:
  5044                           
  5045                           ;dc_motor.c: 150:         mL->power=i;
  5046   0024E6  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5047   0024EA  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5048   0024EE  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5049                           
  5050                           ;dc_motor.c: 151:         mR->power=i;
  5051   0024F2  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5052   0024F6  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5053   0024FA  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5054   0024FE                     
  5055                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5056   0024FE  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5057   002502  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5058   002506  EC38  F00E         	call	_setMotorPWM	;wreg free
  5059   00250A                     
  5060                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5061   00250A  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5062   00250E  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5063   002512  EC38  F00E         	call	_setMotorPWM	;wreg free
  5064   002516                     
  5065                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5066   002516  0ED0               	movlw	208
  5067   002518  6E1C               	movwf	??_reverseFullSpeed^0,c
  5068   00251A  0ECA               	movlw	202
  5069   00251C                     u2217:
  5070   00251C  2EE8               	decfsz	wreg,f,c
  5071   00251E  D7FE               	bra	u2217
  5072   002520  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  5073   002522  D7FC               	bra	u2217
  5074   002524                     
  5075                           ;dc_motor.c: 155:     }
  5076   002524  0E0A               	movlw	10
  5077   002526  261D               	addwf	reverseFullSpeed@i^0,f,c
  5078   002528  0E00               	movlw	0
  5079   00252A  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5080   00252C  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5081   00252E  EFA2  F012         	goto	u1301
  5082   002532  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5083   002534  E109               	bnz	u1300
  5084   002536  0E3C               	movlw	60
  5085   002538  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5086   00253A  A0D8               	btfss	status,0,c
  5087   00253C  EFA2  F012         	goto	u1301
  5088   002540  EFA4  F012         	goto	u1300
  5089   002544                     u1301:
  5090   002544  EF73  F012         	goto	l2641
  5091   002548                     u1300:
  5092   002548  0012               	return		;funcret
  5093   00254A                     __end_of_reverseFullSpeed:
  5094                           	callstack 0
  5095                           
  5096 ;; *************** function _setMotorPWM *****************
  5097 ;; Defined at:
  5098 ;;		line 61 in file "dc_motor.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5101 ;;		 -> main@motorR(9), main@motorL(9), 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  negDuty         1   22[COMRAM] unsigned char 
  5104 ;;  posDuty         1   21[COMRAM] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      void 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5114 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5117 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5118 ;;Total ram usage:        6 bytes
  5119 ;; Hardware stack levels used: 1
  5120 ;; Hardware stack levels required when called: 5
  5121 ;; This function calls:
  5122 ;;		___lwdiv
  5123 ;;		___wmul
  5124 ;; This function is called by:
  5125 ;;		_stop
  5126 ;;		_turnLeft45
  5127 ;;		_turnRight45
  5128 ;;		_reverseFullSpeed
  5129 ;;		_main
  5130 ;;		_fullSpeedAhead
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text26
  5135   001C70                     __ptext26:
  5136                           	callstack 0
  5137   001C70                     _setMotorPWM:
  5138                           	callstack 25
  5139   001C70                     
  5140                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5141   001C70  EE20 F002          	lfsr	2,2
  5142   001C74  5012               	movf	setMotorPWM@m^0,w,c
  5143   001C76  26D9               	addwf	fsr2l,f,c
  5144   001C78  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5145   001C7A  22DA               	addwfc	fsr2h,f,c
  5146   001C7C  50DF               	movf	indf2,w,c
  5147   001C7E  B4D8               	btfsc	status,2,c
  5148   001C80  EF44  F00E         	goto	u1211
  5149   001C84  EF46  F00E         	goto	u1210
  5150   001C88                     u1211:
  5151   001C88  EF7A  F00E         	goto	l2511
  5152   001C8C                     u1210:
  5153   001C8C                     
  5154                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5155   001C8C  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5156   001C90  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5157   001C94  50DF               	movf	indf2,w,c
  5158   001C96  6E14               	movwf	??_setMotorPWM^0,c
  5159   001C98  5014               	movf	??_setMotorPWM^0,w,c
  5160   001C9A  6E05               	movwf	___wmul@multiplier^0,c
  5161   001C9C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5162   001C9E  EE20 F003          	lfsr	2,3
  5163   001CA2  5012               	movf	setMotorPWM@m^0,w,c
  5164   001CA4  26D9               	addwf	fsr2l,f,c
  5165   001CA6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5166   001CA8  22DA               	addwfc	fsr2h,f,c
  5167   001CAA  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5168   001CAE  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5169   001CB2  EC10  F016         	call	___wmul	;wreg free
  5170   001CB6  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5171   001CBA  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5172   001CBE  0E00               	movlw	0
  5173   001CC0  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5174   001CC2  0E64               	movlw	100
  5175   001CC4  6E0D               	movwf	___lwdiv@divisor^0,c
  5176   001CC6  ECA9  F013         	call	___lwdiv	;wreg free
  5177   001CCA  EE20 F003          	lfsr	2,3
  5178   001CCE  5012               	movf	setMotorPWM@m^0,w,c
  5179   001CD0  26D9               	addwf	fsr2l,f,c
  5180   001CD2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5181   001CD4  22DA               	addwfc	fsr2h,f,c
  5182   001CD6  50DF               	movf	indf2,w,c
  5183   001CD8  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5184   001CDA  500B               	movf	?___lwdiv^0,w,c
  5185   001CDC  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5186   001CDE  6E16               	movwf	setMotorPWM@posDuty^0,c
  5187   001CE0                     
  5188                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5189   001CE0  EE20 F003          	lfsr	2,3
  5190   001CE4  5012               	movf	setMotorPWM@m^0,w,c
  5191   001CE6  26D9               	addwf	fsr2l,f,c
  5192   001CE8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5193   001CEA  22DA               	addwfc	fsr2h,f,c
  5194   001CEC  50DF               	movf	indf2,w,c
  5195   001CEE  6E17               	movwf	setMotorPWM@negDuty^0,c
  5196                           
  5197                           ;dc_motor.c: 68:     }
  5198   001CF0  EF9D  F00E         	goto	l2515
  5199   001CF4                     l2511:
  5200                           
  5201                           ;dc_motor.c: 70:         posDuty=0;
  5202   001CF4  0E00               	movlw	0
  5203   001CF6  6E16               	movwf	setMotorPWM@posDuty^0,c
  5204   001CF8                     
  5205                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5206   001CF8  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5207   001CFC  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5208   001D00  50DF               	movf	indf2,w,c
  5209   001D02  6E14               	movwf	??_setMotorPWM^0,c
  5210   001D04  5014               	movf	??_setMotorPWM^0,w,c
  5211   001D06  6E05               	movwf	___wmul@multiplier^0,c
  5212   001D08  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5213   001D0A  EE20 F003          	lfsr	2,3
  5214   001D0E  5012               	movf	setMotorPWM@m^0,w,c
  5215   001D10  26D9               	addwf	fsr2l,f,c
  5216   001D12  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5217   001D14  22DA               	addwfc	fsr2h,f,c
  5218   001D16  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5219   001D1A  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5220   001D1E  EC10  F016         	call	___wmul	;wreg free
  5221   001D22  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5222   001D26  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5223   001D2A  0E00               	movlw	0
  5224   001D2C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5225   001D2E  0E64               	movlw	100
  5226   001D30  6E0D               	movwf	___lwdiv@divisor^0,c
  5227   001D32  ECA9  F013         	call	___lwdiv	;wreg free
  5228   001D36  500B               	movf	?___lwdiv^0,w,c
  5229   001D38  6E17               	movwf	setMotorPWM@negDuty^0,c
  5230   001D3A                     l2515:
  5231                           
  5232                           ;dc_motor.c: 74:     if (m->direction) {
  5233   001D3A  EE20 F001          	lfsr	2,1
  5234   001D3E  5012               	movf	setMotorPWM@m^0,w,c
  5235   001D40  26D9               	addwf	fsr2l,f,c
  5236   001D42  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5237   001D44  22DA               	addwfc	fsr2h,f,c
  5238   001D46  50DF               	movf	indf2,w,c
  5239   001D48  B4D8               	btfsc	status,2,c
  5240   001D4A  EFA9  F00E         	goto	u1221
  5241   001D4E  EFAB  F00E         	goto	u1220
  5242   001D52                     u1221:
  5243   001D52  EFCD  F00E         	goto	l2519
  5244   001D56                     u1220:
  5245   001D56                     
  5246                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5247   001D56  EE20 F005          	lfsr	2,5
  5248   001D5A  5012               	movf	setMotorPWM@m^0,w,c
  5249   001D5C  26D9               	addwf	fsr2l,f,c
  5250   001D5E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5251   001D60  22DA               	addwfc	fsr2h,f,c
  5252   001D62  CFDE F014          	movff	postinc2,??_setMotorPWM
  5253   001D66  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5254   001D6A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5255   001D6E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5256   001D72  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5257                           
  5258                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5259   001D76  EE20 F007          	lfsr	2,7
  5260   001D7A  5012               	movf	setMotorPWM@m^0,w,c
  5261   001D7C  26D9               	addwf	fsr2l,f,c
  5262   001D7E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5263   001D80  22DA               	addwfc	fsr2h,f,c
  5264   001D82  CFDE F014          	movff	postinc2,??_setMotorPWM
  5265   001D86  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5266   001D8A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5267   001D8E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5268   001D92  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5269                           
  5270                           ;dc_motor.c: 77:     } else {
  5271   001D96  EFED  F00E         	goto	l86
  5272   001D9A                     l2519:
  5273                           
  5274                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5275   001D9A  EE20 F005          	lfsr	2,5
  5276   001D9E  5012               	movf	setMotorPWM@m^0,w,c
  5277   001DA0  26D9               	addwf	fsr2l,f,c
  5278   001DA2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5279   001DA4  22DA               	addwfc	fsr2h,f,c
  5280   001DA6  CFDE F014          	movff	postinc2,??_setMotorPWM
  5281   001DAA  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5282   001DAE  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5283   001DB2  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5284   001DB6  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5285                           
  5286                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5287   001DBA  EE20 F007          	lfsr	2,7
  5288   001DBE  5012               	movf	setMotorPWM@m^0,w,c
  5289   001DC0  26D9               	addwf	fsr2l,f,c
  5290   001DC2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5291   001DC4  22DA               	addwfc	fsr2h,f,c
  5292   001DC6  CFDE F014          	movff	postinc2,??_setMotorPWM
  5293   001DCA  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5294   001DCE  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5295   001DD2  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5296   001DD6  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5297   001DDA                     l86:
  5298   001DDA  0012               	return		;funcret
  5299   001DDC                     __end_of_setMotorPWM:
  5300                           	callstack 0
  5301                           
  5302 ;; *************** function ___wmul *****************
  5303 ;; Defined at:
  5304 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  multiplier      2    4[COMRAM] unsigned int 
  5307 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  product         2    8[COMRAM] unsigned int 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  2    4[COMRAM] unsigned int 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0, prodl, prodh
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5323 ;;Total ram usage:        6 bytes
  5324 ;; Hardware stack levels used: 1
  5325 ;; Hardware stack levels required when called: 4
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_setMotorPWM
  5330 ;;		_normalise_readings
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text27
  5335   002C20                     __ptext27:
  5336                           	callstack 0
  5337   002C20                     ___wmul:
  5338                           	callstack 25
  5339   002C20  5005               	movf	___wmul@multiplier^0,w,c
  5340   002C22  0207               	mulwf	___wmul@multiplicand^0,c
  5341   002C24  CFF3 F009          	movff	prodl,___wmul@product
  5342   002C28  CFF4 F00A          	movff	prodh,___wmul@product+1
  5343   002C2C  5005               	movf	___wmul@multiplier^0,w,c
  5344   002C2E  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5345   002C30  50F3               	movf	243,w,c
  5346   002C32  260A               	addwf	(___wmul@product+1)^0,f,c
  5347   002C34  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5348   002C36  0207               	mulwf	___wmul@multiplicand^0,c
  5349   002C38  50F3               	movf	243,w,c
  5350   002C3A  260A               	addwf	(___wmul@product+1)^0,f,c
  5351   002C3C  C009  F005         	movff	___wmul@product,?___wmul
  5352   002C40  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5353   002C44  0012               	return		;funcret
  5354   002C46                     __end_of___wmul:
  5355                           	callstack 0
  5356                           
  5357 ;; *************** function _make_master_closeness *****************
  5358 ;; Defined at:
  5359 ;;		line 67 in file "colour_identify.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  buf             2   17[COMRAM] PTR unsigned char 
  5362 ;;		 -> main@buf(150), 
  5363 ;;  normalised_v    2   19[COMRAM] PTR unsigned int [9]
  5364 ;;		 -> card_response@normalised_values(54), 
  5365 ;;  master_close    2   21[COMRAM] PTR unsigned int 
  5366 ;;		 -> card_response@master_closeness(18), 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  i               1   43[COMRAM] enum E14551
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5378 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5380 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5381 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5382 ;;Total ram usage:       27 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; Hardware stack levels required when called: 5
  5385 ;; This function calls:
  5386 ;;		___lwdiv
  5387 ;; This function is called by:
  5388 ;;		_card_response
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text28
  5393   0021C4                     __ptext28:
  5394                           	callstack 0
  5395   0021C4                     _make_master_closeness:
  5396                           	callstack 24
  5397   0021C4                     
  5398                           ;colour_identify.c: 68:     for(colour i = RED; i<=BLACK; i++){
  5399   0021C4  0E00               	movlw	0
  5400   0021C6  6E2C               	movwf	make_master_closeness@i^0,c
  5401   0021C8                     l2783:
  5402                           
  5403                           ;colour_identify.c: 70:         master_closeness[i] = (normalised_values[RED][i] + norma
      +                          lised_values[GREEN][i] + normalised_values[BLUE][i])/3;
  5404   0021C8  502C               	movf	make_master_closeness@i^0,w,c
  5405   0021CA  0D02               	mullw	2
  5406   0021CC  CFF3 F018          	movff	prodl,??_make_master_closeness
  5407   0021D0  CFF4 F019          	movff	prodh,??_make_master_closeness+1
  5408   0021D4  5018               	movf	??_make_master_closeness^0,w,c
  5409   0021D6  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5410   0021D8  6E1A               	movwf	(??_make_master_closeness+2)^0,c
  5411   0021DA  5019               	movf	(??_make_master_closeness+1)^0,w,c
  5412   0021DC  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5413   0021DE  6E1B               	movwf	(??_make_master_closeness+3)^0,c
  5414   0021E0  0E24               	movlw	36
  5415   0021E2  241A               	addwf	(??_make_master_closeness+2)^0,w,c
  5416   0021E4  6ED9               	movwf	fsr2l,c
  5417   0021E6  0E00               	movlw	0
  5418   0021E8  201B               	addwfc	(??_make_master_closeness+3)^0,w,c
  5419   0021EA  6EDA               	movwf	fsr2h,c
  5420   0021EC  CFDE F01C          	movff	postinc2,??_make_master_closeness+4
  5421   0021F0  CFDD F01D          	movff	postdec2,??_make_master_closeness+5
  5422   0021F4  502C               	movf	make_master_closeness@i^0,w,c
  5423   0021F6  0D02               	mullw	2
  5424   0021F8  CFF3 F01E          	movff	prodl,??_make_master_closeness+6
  5425   0021FC  CFF4 F01F          	movff	prodh,??_make_master_closeness+7
  5426   002200  501E               	movf	(??_make_master_closeness+6)^0,w,c
  5427   002202  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5428   002204  6E20               	movwf	(??_make_master_closeness+8)^0,c
  5429   002206  501F               	movf	(??_make_master_closeness+7)^0,w,c
  5430   002208  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5431   00220A  6E21               	movwf	(??_make_master_closeness+9)^0,c
  5432   00220C  0E12               	movlw	18
  5433   00220E  2420               	addwf	(??_make_master_closeness+8)^0,w,c
  5434   002210  6ED9               	movwf	fsr2l,c
  5435   002212  0E00               	movlw	0
  5436   002214  2021               	addwfc	(??_make_master_closeness+9)^0,w,c
  5437   002216  6EDA               	movwf	fsr2h,c
  5438   002218  CFDE F022          	movff	postinc2,??_make_master_closeness+10
  5439   00221C  CFDD F023          	movff	postdec2,??_make_master_closeness+11
  5440   002220  502C               	movf	make_master_closeness@i^0,w,c
  5441   002222  0D02               	mullw	2
  5442   002224  CFF3 F024          	movff	prodl,??_make_master_closeness+12
  5443   002228  CFF4 F025          	movff	prodh,??_make_master_closeness+13
  5444   00222C  5024               	movf	(??_make_master_closeness+12)^0,w,c
  5445   00222E  2414               	addwf	make_master_closeness@normalised_values^0,w,c
  5446   002230  6ED9               	movwf	fsr2l,c
  5447   002232  5025               	movf	(??_make_master_closeness+13)^0,w,c
  5448   002234  2015               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5449   002236  6EDA               	movwf	fsr2h,c
  5450   002238  CFDE F026          	movff	postinc2,??_make_master_closeness+14
  5451   00223C  CFDD F027          	movff	postdec2,??_make_master_closeness+15
  5452   002240  5022               	movf	(??_make_master_closeness+10)^0,w,c
  5453   002242  2426               	addwf	(??_make_master_closeness+14)^0,w,c
  5454   002244  6E28               	movwf	(??_make_master_closeness+16)^0,c
  5455   002246  5023               	movf	(??_make_master_closeness+11)^0,w,c
  5456   002248  2027               	addwfc	(??_make_master_closeness+15)^0,w,c
  5457   00224A  6E29               	movwf	(??_make_master_closeness+17)^0,c
  5458   00224C  501C               	movf	(??_make_master_closeness+4)^0,w,c
  5459   00224E  2428               	addwf	(??_make_master_closeness+16)^0,w,c
  5460   002250  6E0B               	movwf	___lwdiv@dividend^0,c
  5461   002252  501D               	movf	(??_make_master_closeness+5)^0,w,c
  5462   002254  2029               	addwfc	(??_make_master_closeness+17)^0,w,c
  5463   002256  6E0C               	movwf	(___lwdiv@dividend+1)^0,c
  5464   002258  0E00               	movlw	0
  5465   00225A  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5466   00225C  0E03               	movlw	3
  5467   00225E  6E0D               	movwf	___lwdiv@divisor^0,c
  5468   002260  ECA9  F013         	call	___lwdiv	;wreg free
  5469   002264  502C               	movf	make_master_closeness@i^0,w,c
  5470   002266  0D02               	mullw	2
  5471   002268  CFF3 F02A          	movff	prodl,??_make_master_closeness+18
  5472   00226C  CFF4 F02B          	movff	prodh,??_make_master_closeness+19
  5473   002270  502A               	movf	(??_make_master_closeness+18)^0,w,c
  5474   002272  2416               	addwf	make_master_closeness@master_closeness^0,w,c
  5475   002274  6ED9               	movwf	fsr2l,c
  5476   002276  502B               	movf	(??_make_master_closeness+19)^0,w,c
  5477   002278  2017               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  5478   00227A  6EDA               	movwf	fsr2h,c
  5479   00227C  C00B  FFDE         	movff	?___lwdiv,postinc2
  5480   002280  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  5481   002284                     
  5482                           ;colour_identify.c: 75:     }
  5483   002284  2A2C               	incf	make_master_closeness@i^0,f,c
  5484   002286  0E08               	movlw	8
  5485   002288  642C               	cpfsgt	make_master_closeness@i^0,c
  5486   00228A  EF49  F011         	goto	u1411
  5487   00228E  EF4B  F011         	goto	u1410
  5488   002292                     u1411:
  5489   002292  EFE4  F010         	goto	l2783
  5490   002296                     u1410:
  5491   002296  0012               	return		;funcret
  5492   002298                     __end_of_make_master_closeness:
  5493                           	callstack 0
  5494                           
  5495 ;; *************** function ___lwdiv *****************
  5496 ;; Defined at:
  5497 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  dividend        2   10[COMRAM] unsigned int 
  5500 ;;  divisor         2   12[COMRAM] unsigned int 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  quotient        2   14[COMRAM] unsigned int 
  5503 ;;  counter         1   16[COMRAM] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2   10[COMRAM] unsigned int 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;Total ram usage:        7 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; Hardware stack levels required when called: 4
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_setMotorPWM
  5524 ;;		_normalise_readings
  5525 ;;		_make_master_closeness
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text29
  5530   002752                     __ptext29:
  5531                           	callstack 0
  5532   002752                     ___lwdiv:
  5533                           	callstack 25
  5534   002752  0E00               	movlw	0
  5535   002754  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5536   002756  0E00               	movlw	0
  5537   002758  6E0F               	movwf	___lwdiv@quotient^0,c
  5538   00275A  500D               	movf	___lwdiv@divisor^0,w,c
  5539   00275C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5540   00275E  B4D8               	btfsc	status,2,c
  5541   002760  EFB4  F013         	goto	u1061
  5542   002764  EFB6  F013         	goto	u1060
  5543   002768                     u1061:
  5544   002768  EFDE  F013         	goto	l1000
  5545   00276C                     u1060:
  5546   00276C  0E01               	movlw	1
  5547   00276E  6E11               	movwf	___lwdiv@counter^0,c
  5548   002770  EFBE  F013         	goto	l2409
  5549   002774                     l2407:
  5550   002774  90D8               	bcf	status,0,c
  5551   002776  360D               	rlcf	___lwdiv@divisor^0,f,c
  5552   002778  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5553   00277A  2A11               	incf	___lwdiv@counter^0,f,c
  5554   00277C                     l2409:
  5555   00277C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5556   00277E  EFC3  F013         	goto	u1071
  5557   002782  EFC5  F013         	goto	u1070
  5558   002786                     u1071:
  5559   002786  EFBA  F013         	goto	l2407
  5560   00278A                     u1070:
  5561   00278A                     l2411:
  5562   00278A  90D8               	bcf	status,0,c
  5563   00278C  360F               	rlcf	___lwdiv@quotient^0,f,c
  5564   00278E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5565   002790  500D               	movf	___lwdiv@divisor^0,w,c
  5566   002792  5C0B               	subwf	___lwdiv@dividend^0,w,c
  5567   002794  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5568   002796  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5569   002798  A0D8               	btfss	status,0,c
  5570   00279A  EFD1  F013         	goto	u1081
  5571   00279E  EFD3  F013         	goto	u1080
  5572   0027A2                     u1081:
  5573   0027A2  EFD8  F013         	goto	l2419
  5574   0027A6                     u1080:
  5575   0027A6  500D               	movf	___lwdiv@divisor^0,w,c
  5576   0027A8  5E0B               	subwf	___lwdiv@dividend^0,f,c
  5577   0027AA  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5578   0027AC  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5579   0027AE  800F               	bsf	___lwdiv@quotient^0,0,c
  5580   0027B0                     l2419:
  5581   0027B0  90D8               	bcf	status,0,c
  5582   0027B2  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5583   0027B4  320D               	rrcf	___lwdiv@divisor^0,f,c
  5584   0027B6  2E11               	decfsz	___lwdiv@counter^0,f,c
  5585   0027B8  EFC5  F013         	goto	l2411
  5586   0027BC                     l1000:
  5587   0027BC  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5588   0027C0  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5589   0027C4  0012               	return		;funcret
  5590   0027C6                     __end_of___lwdiv:
  5591                           	callstack 0
  5592                           
  5593 ;; *************** function _determine_card *****************
  5594 ;; Defined at:
  5595 ;;		line 78 in file "colour_identify.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  5598 ;;		 -> card_response@master_closeness(18), 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  i               1   13[COMRAM] enum E14551
  5601 ;;  current_smal    2   10[COMRAM] unsigned int 
  5602 ;;  predicted_co    1   12[COMRAM] enum E14551
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  1    wreg      enum E14551
  5605 ;; Registers used:
  5606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5613 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5614 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;Total ram usage:       10 bytes
  5617 ;; Hardware stack levels used: 1
  5618 ;; Hardware stack levels required when called: 4
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_card_response
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           	psect	text30
  5627   002658                     __ptext30:
  5628                           	callstack 0
  5629   002658                     _determine_card:
  5630                           	callstack 25
  5631   002658                     
  5632                           ;colour_identify.c: 80:     colour predicted_colour = RED;
  5633   002658  0E00               	movlw	0
  5634   00265A  6E0D               	movwf	determine_card@predicted_colour^0,c
  5635   00265C                     
  5636                           ;colour_identify.c: 81:     unsigned int current_smallest = master_closeness[RED];
  5637   00265C  C005  FFD9         	movff	determine_card@master_closeness,fsr2l
  5638   002660  C006  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  5639   002664  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  5640   002668  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  5641   00266C                     
  5642                           ;colour_identify.c: 82:     for(colour i = GREEN; i<=BLACK; i++){
  5643   00266C  0E01               	movlw	1
  5644   00266E  6E0E               	movwf	determine_card@i^0,c
  5645   002670                     l2799:
  5646                           
  5647                           ;colour_identify.c: 83:         if(master_closeness[i] < current_smallest){
  5648   002670  500E               	movf	determine_card@i^0,w,c
  5649   002672  0D02               	mullw	2
  5650   002674  CFF3 F007          	movff	prodl,??_determine_card
  5651   002678  CFF4 F008          	movff	prodh,??_determine_card+1
  5652   00267C  5007               	movf	??_determine_card^0,w,c
  5653   00267E  2405               	addwf	determine_card@master_closeness^0,w,c
  5654   002680  6ED9               	movwf	fsr2l,c
  5655   002682  5008               	movf	(??_determine_card+1)^0,w,c
  5656   002684  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5657   002686  6EDA               	movwf	fsr2h,c
  5658   002688  500B               	movf	determine_card@current_smallest^0,w,c
  5659   00268A  5CDE               	subwf	postinc2,w,c
  5660   00268C  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  5661   00268E  58DE               	subwfb	postinc2,w,c
  5662   002690  B0D8               	btfsc	status,0,c
  5663   002692  EF4D  F013         	goto	u1421
  5664   002696  EF4F  F013         	goto	u1420
  5665   00269A                     u1421:
  5666   00269A  EF61  F013         	goto	l2805
  5667   00269E                     u1420:
  5668   00269E                     
  5669                           ;colour_identify.c: 84:             current_smallest = master_closeness[i];
  5670   00269E  500E               	movf	determine_card@i^0,w,c
  5671   0026A0  0D02               	mullw	2
  5672   0026A2  CFF3 F007          	movff	prodl,??_determine_card
  5673   0026A6  CFF4 F008          	movff	prodh,??_determine_card+1
  5674   0026AA  5007               	movf	??_determine_card^0,w,c
  5675   0026AC  2405               	addwf	determine_card@master_closeness^0,w,c
  5676   0026AE  6ED9               	movwf	fsr2l,c
  5677   0026B0  5008               	movf	(??_determine_card+1)^0,w,c
  5678   0026B2  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  5679   0026B4  6EDA               	movwf	fsr2h,c
  5680   0026B6  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  5681   0026BA  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  5682   0026BE                     
  5683                           ;colour_identify.c: 85:             predicted_colour = i;
  5684   0026BE  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  5685   0026C2                     l2805:
  5686                           
  5687                           ;colour_identify.c: 87:     }
  5688   0026C2  2A0E               	incf	determine_card@i^0,f,c
  5689   0026C4  0E08               	movlw	8
  5690   0026C6  640E               	cpfsgt	determine_card@i^0,c
  5691   0026C8  EF68  F013         	goto	u1431
  5692   0026CC  EF6A  F013         	goto	u1430
  5693   0026D0                     u1431:
  5694   0026D0  EF38  F013         	goto	l2799
  5695   0026D4                     u1430:
  5696   0026D4                     
  5697                           ;colour_identify.c: 88:     return predicted_colour;
  5698   0026D4  500D               	movf	determine_card@predicted_colour^0,w,c
  5699   0026D6  0012               	return		;funcret
  5700   0026D8                     __end_of_determine_card:
  5701                           	callstack 0
  5702                           
  5703 ;; *************** function _collect_avg_readings *****************
  5704 ;; Defined at:
  5705 ;;		line 10 in file "colour_identify.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  red_read        2   15[COMRAM] PTR unsigned int 
  5708 ;;		 -> main@red_read(2), 
  5709 ;;  green_read      2   17[COMRAM] PTR unsigned int 
  5710 ;;		 -> main@green_read(2), 
  5711 ;;  blue_read       2   19[COMRAM] PTR unsigned int 
  5712 ;;		 -> main@blue_read(2), 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  i               2   29[COMRAM] int 
  5715 ;;  i               2   27[COMRAM] int 
  5716 ;;  i               2   25[COMRAM] int 
  5717 ;;  i               2   23[COMRAM] int 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  1    wreg      void 
  5720 ;; Registers used:
  5721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5727 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5728 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5730 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5731 ;;Total ram usage:       16 bytes
  5732 ;; Hardware stack levels used: 1
  5733 ;; Hardware stack levels required when called: 7
  5734 ;; This function calls:
  5735 ;;		_color_read_Blue
  5736 ;;		_color_read_Green
  5737 ;;		_color_read_Red
  5738 ;; This function is called by:
  5739 ;;		_main
  5740 ;;		_card_response
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           	psect	text31
  5745   001902                     __ptext31:
  5746                           	callstack 0
  5747   001902                     _collect_avg_readings:
  5748                           	callstack 23
  5749   001902                     
  5750                           ;colour_identify.c: 10: void collect_avg_readings(unsigned int *red_read, unsigned int *
      +                          green_read, unsigned int *blue_read);colour_identify.c: 11: {;colour_identify.c: 14:    
      +                           for (int i = 0; i <= 500; i++){
  5751   001902  0E00               	movlw	0
  5752   001904  6E19               	movwf	(collect_avg_readings@i+1)^0,c
  5753   001906  0E00               	movlw	0
  5754   001908  6E18               	movwf	collect_avg_readings@i^0,c
  5755   00190A                     l2691:
  5756                           
  5757                           ;colour_identify.c: 15:         *red_read = color_read_Red();
  5758   00190A  EC92  F014         	call	_color_read_Red	;wreg free
  5759   00190E  C010  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5760   001912  C011  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5761   001916  C009  FFDE         	movff	?_color_read_Red,postinc2
  5762   00191A  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  5763                           
  5764                           ;colour_identify.c: 16:         *green_read = color_read_Green();
  5765   00191E  ECBA  F014         	call	_color_read_Green	;wreg free
  5766   001922  C012  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5767   001926  C013  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5768   00192A  C009  FFDE         	movff	?_color_read_Green,postinc2
  5769   00192E  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  5770                           
  5771                           ;colour_identify.c: 17:         *blue_read = color_read_Blue();
  5772   001932  ECE2  F014         	call	_color_read_Blue	;wreg free
  5773   001936  C014  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5774   00193A  C015  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5775   00193E  C009  FFDE         	movff	?_color_read_Blue,postinc2
  5776   001942  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  5777   001946                     
  5778                           ;colour_identify.c: 18:     }
  5779   001946  4A18               	infsnz	collect_avg_readings@i^0,f,c
  5780   001948  2A19               	incf	(collect_avg_readings@i+1)^0,f,c
  5781   00194A  BE19               	btfsc	(collect_avg_readings@i+1)^0,7,c
  5782   00194C  EFB1  F00C         	goto	u1351
  5783   001950  0EF5               	movlw	245
  5784   001952  5C18               	subwf	collect_avg_readings@i^0,w,c
  5785   001954  0E01               	movlw	1
  5786   001956  5819               	subwfb	(collect_avg_readings@i+1)^0,w,c
  5787   001958  A0D8               	btfss	status,0,c
  5788   00195A  EFB1  F00C         	goto	u1351
  5789   00195E  EFB3  F00C         	goto	u1350
  5790   001962                     u1351:
  5791   001962  EF85  F00C         	goto	l2691
  5792   001966                     u1350:
  5793   001966                     
  5794                           ;colour_identify.c: 22:     for(int i = 0; i <= 2; i++){
  5795   001966  0E00               	movlw	0
  5796   001968  6E1B               	movwf	(collect_avg_readings@i_1596+1)^0,c
  5797   00196A  0E00               	movlw	0
  5798   00196C  6E1A               	movwf	collect_avg_readings@i_1596^0,c
  5799   00196E                     l2703:
  5800                           
  5801                           ;colour_identify.c: 23:         *red_read += color_read_Red();
  5802   00196E  EC92  F014         	call	_color_read_Red	;wreg free
  5803   001972  C010  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5804   001976  C011  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5805   00197A  5009               	movf	?_color_read_Red^0,w,c
  5806   00197C  26DE               	addwf	postinc2,f,c
  5807   00197E  500A               	movf	(?_color_read_Red+1)^0,w,c
  5808   001980  22DD               	addwfc	postdec2,f,c
  5809   001982                     
  5810                           ;colour_identify.c: 24:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5811   001982  0E11               	movlw	17
  5812   001984  6E17               	movwf	(??_collect_avg_readings+1)^0,c
  5813   001986  0E3C               	movlw	60
  5814   001988  6E16               	movwf	??_collect_avg_readings^0,c
  5815   00198A  0ECB               	movlw	203
  5816   00198C                     u2227:
  5817   00198C  2EE8               	decfsz	wreg,f,c
  5818   00198E  D7FE               	bra	u2227
  5819   001990  2E16               	decfsz	??_collect_avg_readings^0,f,c
  5820   001992  D7FC               	bra	u2227
  5821   001994  2E17               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5822   001996  D7FA               	bra	u2227
  5823   001998  F000               	nop	
  5824   00199A                     
  5825                           ;colour_identify.c: 25:     }
  5826   00199A  4A1A               	infsnz	collect_avg_readings@i_1596^0,f,c
  5827   00199C  2A1B               	incf	(collect_avg_readings@i_1596+1)^0,f,c
  5828   00199E  BE1B               	btfsc	(collect_avg_readings@i_1596+1)^0,7,c
  5829   0019A0  EFDB  F00C         	goto	u1361
  5830   0019A4  501B               	movf	(collect_avg_readings@i_1596+1)^0,w,c
  5831   0019A6  E109               	bnz	u1360
  5832   0019A8  0E03               	movlw	3
  5833   0019AA  5C1A               	subwf	collect_avg_readings@i_1596^0,w,c
  5834   0019AC  A0D8               	btfss	status,0,c
  5835   0019AE  EFDB  F00C         	goto	u1361
  5836   0019B2  EFDD  F00C         	goto	u1360
  5837   0019B6                     u1361:
  5838   0019B6  EFB7  F00C         	goto	l2703
  5839   0019BA                     u1360:
  5840   0019BA                     
  5841                           ;colour_identify.c: 26:     *red_read = *red_read/4;
  5842   0019BA  C010  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5843   0019BE  C011  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5844   0019C2  CFDE F016          	movff	postinc2,??_collect_avg_readings
  5845   0019C6  CFDD F017          	movff	postdec2,??_collect_avg_readings+1
  5846   0019CA  90D8               	bcf	status,0,c
  5847   0019CC  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5848   0019CE  3216               	rrcf	??_collect_avg_readings^0,f,c
  5849   0019D0  90D8               	bcf	status,0,c
  5850   0019D2  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5851   0019D4  3216               	rrcf	??_collect_avg_readings^0,f,c
  5852   0019D6  C010  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  5853   0019DA  C011  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  5854   0019DE  C016  FFDE         	movff	??_collect_avg_readings,postinc2
  5855   0019E2  C017  FFDD         	movff	??_collect_avg_readings+1,postdec2
  5856   0019E6                     
  5857                           ;colour_identify.c: 28:     for(int i = 0; i <= 2; i++){
  5858   0019E6  0E00               	movlw	0
  5859   0019E8  6E1D               	movwf	(collect_avg_readings@i_1597+1)^0,c
  5860   0019EA  0E00               	movlw	0
  5861   0019EC  6E1C               	movwf	collect_avg_readings@i_1597^0,c
  5862   0019EE                     l2719:
  5863                           
  5864                           ;colour_identify.c: 29:         *green_read += color_read_Green();
  5865   0019EE  ECBA  F014         	call	_color_read_Green	;wreg free
  5866   0019F2  C012  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5867   0019F6  C013  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5868   0019FA  5009               	movf	?_color_read_Green^0,w,c
  5869   0019FC  26DE               	addwf	postinc2,f,c
  5870   0019FE  500A               	movf	(?_color_read_Green+1)^0,w,c
  5871   001A00  22DD               	addwfc	postdec2,f,c
  5872   001A02                     
  5873                           ;colour_identify.c: 30:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5874   001A02  0E11               	movlw	17
  5875   001A04  6E17               	movwf	(??_collect_avg_readings+1)^0,c
  5876   001A06  0E3C               	movlw	60
  5877   001A08  6E16               	movwf	??_collect_avg_readings^0,c
  5878   001A0A  0ECB               	movlw	203
  5879   001A0C                     u2237:
  5880   001A0C  2EE8               	decfsz	wreg,f,c
  5881   001A0E  D7FE               	bra	u2237
  5882   001A10  2E16               	decfsz	??_collect_avg_readings^0,f,c
  5883   001A12  D7FC               	bra	u2237
  5884   001A14  2E17               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5885   001A16  D7FA               	bra	u2237
  5886   001A18  F000               	nop	
  5887   001A1A                     
  5888                           ;colour_identify.c: 31:     }
  5889   001A1A  4A1C               	infsnz	collect_avg_readings@i_1597^0,f,c
  5890   001A1C  2A1D               	incf	(collect_avg_readings@i_1597+1)^0,f,c
  5891   001A1E  BE1D               	btfsc	(collect_avg_readings@i_1597+1)^0,7,c
  5892   001A20  EF1B  F00D         	goto	u1371
  5893   001A24  501D               	movf	(collect_avg_readings@i_1597+1)^0,w,c
  5894   001A26  E109               	bnz	u1370
  5895   001A28  0E03               	movlw	3
  5896   001A2A  5C1C               	subwf	collect_avg_readings@i_1597^0,w,c
  5897   001A2C  A0D8               	btfss	status,0,c
  5898   001A2E  EF1B  F00D         	goto	u1371
  5899   001A32  EF1D  F00D         	goto	u1370
  5900   001A36                     u1371:
  5901   001A36  EFF7  F00C         	goto	l2719
  5902   001A3A                     u1370:
  5903   001A3A                     
  5904                           ;colour_identify.c: 32:     *green_read = *green_read/4;
  5905   001A3A  C012  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5906   001A3E  C013  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5907   001A42  CFDE F016          	movff	postinc2,??_collect_avg_readings
  5908   001A46  CFDD F017          	movff	postdec2,??_collect_avg_readings+1
  5909   001A4A  90D8               	bcf	status,0,c
  5910   001A4C  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5911   001A4E  3216               	rrcf	??_collect_avg_readings^0,f,c
  5912   001A50  90D8               	bcf	status,0,c
  5913   001A52  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5914   001A54  3216               	rrcf	??_collect_avg_readings^0,f,c
  5915   001A56  C012  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  5916   001A5A  C013  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  5917   001A5E  C016  FFDE         	movff	??_collect_avg_readings,postinc2
  5918   001A62  C017  FFDD         	movff	??_collect_avg_readings+1,postdec2
  5919   001A66                     
  5920                           ;colour_identify.c: 34:     for(int i = 0; i <= 2; i++){
  5921   001A66  0E00               	movlw	0
  5922   001A68  6E1F               	movwf	(collect_avg_readings@i_1598+1)^0,c
  5923   001A6A  0E00               	movlw	0
  5924   001A6C  6E1E               	movwf	collect_avg_readings@i_1598^0,c
  5925   001A6E                     l2735:
  5926                           
  5927                           ;colour_identify.c: 35:         *blue_read += color_read_Blue();
  5928   001A6E  ECE2  F014         	call	_color_read_Blue	;wreg free
  5929   001A72  C014  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5930   001A76  C015  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5931   001A7A  5009               	movf	?_color_read_Blue^0,w,c
  5932   001A7C  26DE               	addwf	postinc2,f,c
  5933   001A7E  500A               	movf	(?_color_read_Blue+1)^0,w,c
  5934   001A80  22DD               	addwfc	postdec2,f,c
  5935   001A82                     
  5936                           ;colour_identify.c: 36:         _delay((unsigned long)((200)*(64000000/4000.0)));
  5937   001A82  0E11               	movlw	17
  5938   001A84  6E17               	movwf	(??_collect_avg_readings+1)^0,c
  5939   001A86  0E3C               	movlw	60
  5940   001A88  6E16               	movwf	??_collect_avg_readings^0,c
  5941   001A8A  0ECB               	movlw	203
  5942   001A8C                     u2247:
  5943   001A8C  2EE8               	decfsz	wreg,f,c
  5944   001A8E  D7FE               	bra	u2247
  5945   001A90  2E16               	decfsz	??_collect_avg_readings^0,f,c
  5946   001A92  D7FC               	bra	u2247
  5947   001A94  2E17               	decfsz	(??_collect_avg_readings+1)^0,f,c
  5948   001A96  D7FA               	bra	u2247
  5949   001A98  F000               	nop	
  5950   001A9A                     
  5951                           ;colour_identify.c: 37:     }
  5952   001A9A  4A1E               	infsnz	collect_avg_readings@i_1598^0,f,c
  5953   001A9C  2A1F               	incf	(collect_avg_readings@i_1598+1)^0,f,c
  5954   001A9E  BE1F               	btfsc	(collect_avg_readings@i_1598+1)^0,7,c
  5955   001AA0  EF5B  F00D         	goto	u1381
  5956   001AA4  501F               	movf	(collect_avg_readings@i_1598+1)^0,w,c
  5957   001AA6  E109               	bnz	u1380
  5958   001AA8  0E03               	movlw	3
  5959   001AAA  5C1E               	subwf	collect_avg_readings@i_1598^0,w,c
  5960   001AAC  A0D8               	btfss	status,0,c
  5961   001AAE  EF5B  F00D         	goto	u1381
  5962   001AB2  EF5D  F00D         	goto	u1380
  5963   001AB6                     u1381:
  5964   001AB6  EF37  F00D         	goto	l2735
  5965   001ABA                     u1380:
  5966   001ABA                     
  5967                           ;colour_identify.c: 38:     *blue_read = *blue_read/4;
  5968   001ABA  C014  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5969   001ABE  C015  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5970   001AC2  CFDE F016          	movff	postinc2,??_collect_avg_readings
  5971   001AC6  CFDD F017          	movff	postdec2,??_collect_avg_readings+1
  5972   001ACA  90D8               	bcf	status,0,c
  5973   001ACC  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5974   001ACE  3216               	rrcf	??_collect_avg_readings^0,f,c
  5975   001AD0  90D8               	bcf	status,0,c
  5976   001AD2  3217               	rrcf	(??_collect_avg_readings+1)^0,f,c
  5977   001AD4  3216               	rrcf	??_collect_avg_readings^0,f,c
  5978   001AD6  C014  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  5979   001ADA  C015  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  5980   001ADE  C016  FFDE         	movff	??_collect_avg_readings,postinc2
  5981   001AE2  C017  FFDD         	movff	??_collect_avg_readings+1,postdec2
  5982   001AE6  0012               	return		;funcret
  5983   001AE8                     __end_of_collect_avg_readings:
  5984                           	callstack 0
  5985                           
  5986 ;; *************** function _color_read_Red *****************
  5987 ;; Defined at:
  5988 ;;		line 29 in file "color.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  tmp             2   13[COMRAM] unsigned int 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  2    8[COMRAM] unsigned int 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6004 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6005 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;Total ram usage:        7 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 6
  6009 ;; This function calls:
  6010 ;;		_I2C_2_Master_Read
  6011 ;;		_I2C_2_Master_RepStart
  6012 ;;		_I2C_2_Master_Start
  6013 ;;		_I2C_2_Master_Stop
  6014 ;;		_I2C_2_Master_Write
  6015 ;; This function is called by:
  6016 ;;		_collect_avg_readings
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text32
  6021   002924                     __ptext32:
  6022                           	callstack 0
  6023   002924                     _color_read_Red:
  6024                           	callstack 23
  6025   002924                     
  6026                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6027   002924  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  6028                           
  6029                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6030   002928  0E52               	movlw	82
  6031   00292A  EC7E  F016         	call	_I2C_2_Master_Write
  6032                           
  6033                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6034   00292E  0EB6               	movlw	182
  6035   002930  EC7E  F016         	call	_I2C_2_Master_Write
  6036                           
  6037                           ;color.c: 35:  I2C_2_Master_RepStart();
  6038   002934  EC8A  F016         	call	_I2C_2_Master_RepStart	;wreg free
  6039                           
  6040                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6041   002938  0E53               	movlw	83
  6042   00293A  EC7E  F016         	call	_I2C_2_Master_Write
  6043                           
  6044                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6045   00293E  0E01               	movlw	1
  6046   002940  EC2C  F015         	call	_I2C_2_Master_Read
  6047   002944  6E0B               	movwf	??_color_read_Red^0,c
  6048   002946  500B               	movf	??_color_read_Red^0,w,c
  6049   002948  6E0E               	movwf	color_read_Red@tmp^0,c
  6050   00294A  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6051                           
  6052                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6053   00294C  0E00               	movlw	0
  6054   00294E  EC2C  F015         	call	_I2C_2_Master_Read
  6055   002952  6E0B               	movwf	??_color_read_Red^0,c
  6056   002954  500B               	movf	??_color_read_Red^0,w,c
  6057   002956  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6058   002958  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6059   00295A  500E               	movf	color_read_Red@tmp^0,w,c
  6060   00295C  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6061   00295E  6E0E               	movwf	color_read_Red@tmp^0,c
  6062   002960  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6063   002962  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6064   002964  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6065                           
  6066                           ;color.c: 39:  I2C_2_Master_Stop();
  6067   002966  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  6068   00296A                     
  6069                           ;color.c: 40:  return tmp;
  6070   00296A  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6071   00296E  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6072   002972  0012               	return		;funcret
  6073   002974                     __end_of_color_read_Red:
  6074                           	callstack 0
  6075                           
  6076 ;; *************** function _color_read_Green *****************
  6077 ;; Defined at:
  6078 ;;		line 43 in file "color.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  tmp             2   13[COMRAM] unsigned int 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  2    8[COMRAM] unsigned int 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6095 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6096 ;;Total ram usage:        7 bytes
  6097 ;; Hardware stack levels used: 1
  6098 ;; Hardware stack levels required when called: 6
  6099 ;; This function calls:
  6100 ;;		_I2C_2_Master_Read
  6101 ;;		_I2C_2_Master_RepStart
  6102 ;;		_I2C_2_Master_Start
  6103 ;;		_I2C_2_Master_Stop
  6104 ;;		_I2C_2_Master_Write
  6105 ;; This function is called by:
  6106 ;;		_collect_avg_readings
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text33
  6111   002974                     __ptext33:
  6112                           	callstack 0
  6113   002974                     _color_read_Green:
  6114                           	callstack 23
  6115   002974                     
  6116                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6117   002974  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  6118                           
  6119                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6120   002978  0E52               	movlw	82
  6121   00297A  EC7E  F016         	call	_I2C_2_Master_Write
  6122                           
  6123                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6124   00297E  0EB8               	movlw	184
  6125   002980  EC7E  F016         	call	_I2C_2_Master_Write
  6126                           
  6127                           ;color.c: 49:  I2C_2_Master_RepStart();
  6128   002984  EC8A  F016         	call	_I2C_2_Master_RepStart	;wreg free
  6129                           
  6130                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6131   002988  0E53               	movlw	83
  6132   00298A  EC7E  F016         	call	_I2C_2_Master_Write
  6133                           
  6134                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6135   00298E  0E01               	movlw	1
  6136   002990  EC2C  F015         	call	_I2C_2_Master_Read
  6137   002994  6E0B               	movwf	??_color_read_Green^0,c
  6138   002996  500B               	movf	??_color_read_Green^0,w,c
  6139   002998  6E0E               	movwf	color_read_Green@tmp^0,c
  6140   00299A  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6141                           
  6142                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6143   00299C  0E00               	movlw	0
  6144   00299E  EC2C  F015         	call	_I2C_2_Master_Read
  6145   0029A2  6E0B               	movwf	??_color_read_Green^0,c
  6146   0029A4  500B               	movf	??_color_read_Green^0,w,c
  6147   0029A6  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6148   0029A8  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6149   0029AA  500E               	movf	color_read_Green@tmp^0,w,c
  6150   0029AC  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6151   0029AE  6E0E               	movwf	color_read_Green@tmp^0,c
  6152   0029B0  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6153   0029B2  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6154   0029B4  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6155                           
  6156                           ;color.c: 53:  I2C_2_Master_Stop();
  6157   0029B6  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  6158   0029BA                     
  6159                           ;color.c: 54:  return tmp;
  6160   0029BA  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6161   0029BE  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6162   0029C2  0012               	return		;funcret
  6163   0029C4                     __end_of_color_read_Green:
  6164                           	callstack 0
  6165                           
  6166 ;; *************** function _color_read_Blue *****************
  6167 ;; Defined at:
  6168 ;;		line 57 in file "color.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  tmp             2   13[COMRAM] unsigned int 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  2    8[COMRAM] unsigned int 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6186 ;;Total ram usage:        7 bytes
  6187 ;; Hardware stack levels used: 1
  6188 ;; Hardware stack levels required when called: 6
  6189 ;; This function calls:
  6190 ;;		_I2C_2_Master_Read
  6191 ;;		_I2C_2_Master_RepStart
  6192 ;;		_I2C_2_Master_Start
  6193 ;;		_I2C_2_Master_Stop
  6194 ;;		_I2C_2_Master_Write
  6195 ;; This function is called by:
  6196 ;;		_collect_avg_readings
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text34
  6201   0029C4                     __ptext34:
  6202                           	callstack 0
  6203   0029C4                     _color_read_Blue:
  6204                           	callstack 23
  6205   0029C4                     
  6206                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6207   0029C4  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  6208                           
  6209                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6210   0029C8  0E52               	movlw	82
  6211   0029CA  EC7E  F016         	call	_I2C_2_Master_Write
  6212                           
  6213                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6214   0029CE  0EBA               	movlw	186
  6215   0029D0  EC7E  F016         	call	_I2C_2_Master_Write
  6216                           
  6217                           ;color.c: 63:  I2C_2_Master_RepStart();
  6218   0029D4  EC8A  F016         	call	_I2C_2_Master_RepStart	;wreg free
  6219                           
  6220                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6221   0029D8  0E53               	movlw	83
  6222   0029DA  EC7E  F016         	call	_I2C_2_Master_Write
  6223                           
  6224                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6225   0029DE  0E01               	movlw	1
  6226   0029E0  EC2C  F015         	call	_I2C_2_Master_Read
  6227   0029E4  6E0B               	movwf	??_color_read_Blue^0,c
  6228   0029E6  500B               	movf	??_color_read_Blue^0,w,c
  6229   0029E8  6E0E               	movwf	color_read_Blue@tmp^0,c
  6230   0029EA  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  6231                           
  6232                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6233   0029EC  0E00               	movlw	0
  6234   0029EE  EC2C  F015         	call	_I2C_2_Master_Read
  6235   0029F2  6E0B               	movwf	??_color_read_Blue^0,c
  6236   0029F4  500B               	movf	??_color_read_Blue^0,w,c
  6237   0029F6  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  6238   0029F8  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  6239   0029FA  500E               	movf	color_read_Blue@tmp^0,w,c
  6240   0029FC  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  6241   0029FE  6E0E               	movwf	color_read_Blue@tmp^0,c
  6242   002A00  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  6243   002A02  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  6244   002A04  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  6245                           
  6246                           ;color.c: 67:  I2C_2_Master_Stop();
  6247   002A06  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  6248   002A0A                     
  6249                           ;color.c: 68:  return tmp;
  6250   002A0A  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  6251   002A0E  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6252   002A12  0012               	return		;funcret
  6253   002A14                     __end_of_color_read_Blue:
  6254                           	callstack 0
  6255                           
  6256 ;; *************** function _I2C_2_Master_RepStart *****************
  6257 ;; Defined at:
  6258 ;;		line 33 in file "i2c.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;		None
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;Total ram usage:        0 bytes
  6277 ;; Hardware stack levels used: 1
  6278 ;; Hardware stack levels required when called: 5
  6279 ;; This function calls:
  6280 ;;		_I2C_2_Master_Idle
  6281 ;; This function is called by:
  6282 ;;		_color_read_Red
  6283 ;;		_color_read_Green
  6284 ;;		_color_read_Blue
  6285 ;;		_color_read_Clear
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text35
  6290   002D14                     __ptext35:
  6291                           	callstack 0
  6292   002D14                     _I2C_2_Master_RepStart:
  6293                           	callstack 24
  6294   002D14                     
  6295                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6296   002D14  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6297   002D18                     
  6298                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6299   002D18  010E               	movlb	14	; () banked
  6300   002D1A  83DA               	bsf	218,1,b	;volatile
  6301   002D1C                     
  6302                           ; BSR set to: 14
  6303   002D1C  0012               	return		;funcret
  6304   002D1E                     __end_of_I2C_2_Master_RepStart:
  6305                           	callstack 0
  6306                           
  6307 ;; *************** function _I2C_2_Master_Read *****************
  6308 ;; Defined at:
  6309 ;;		line 51 in file "i2c.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  ack             1    wreg     unsigned char 
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  ack             1    6[COMRAM] unsigned char 
  6314 ;;  tmp             1    7[COMRAM] unsigned char 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      unsigned char 
  6317 ;; Registers used:
  6318 ;;		wreg, status,2, status,0, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6327 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6328 ;;Total ram usage:        3 bytes
  6329 ;; Hardware stack levels used: 1
  6330 ;; Hardware stack levels required when called: 5
  6331 ;; This function calls:
  6332 ;;		_I2C_2_Master_Idle
  6333 ;; This function is called by:
  6334 ;;		_color_read_Red
  6335 ;;		_color_read_Green
  6336 ;;		_color_read_Blue
  6337 ;;		_color_read_Clear
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text36
  6342   002A58                     __ptext36:
  6343                           	callstack 0
  6344   002A58                     _I2C_2_Master_Read:
  6345                           	callstack 24
  6346                           
  6347                           ; BSR set to: 14
  6348                           ;incstack = 0
  6349                           ;I2C_2_Master_Read@ack stored from wreg
  6350   002A58  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6351   002A5A                     
  6352                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6353   002A5A  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6354   002A5E                     
  6355                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6356   002A5E  010E               	movlb	14	; () banked
  6357   002A60  87DA               	bsf	218,3,b	;volatile
  6358                           
  6359                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6360   002A62  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6361   002A66                     
  6362                           ;i2c.c: 57:   tmp = SSP2BUF;
  6363   002A66  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6364                           
  6365                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6366   002A6A  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6367   002A6E                     
  6368                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6369   002A6E  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  6370   002A70  B4D8               	btfsc	status,2,c
  6371   002A72  EF3D  F015         	goto	u1191
  6372   002A76  EF41  F015         	goto	u1190
  6373   002A7A                     u1191:
  6374   002A7A  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6375   002A7C  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  6376   002A7E  EF42  F015         	goto	u1208
  6377   002A82                     u1190:
  6378   002A82  6A06               	clrf	??_I2C_2_Master_Read^0,c
  6379   002A84                     u1208:
  6380   002A84  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  6381   002A86  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  6382   002A88  010E               	movlb	14	; () banked
  6383   002A8A  51DA               	movf	218,w,b	;volatile
  6384   002A8C  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6385   002A8E  0BDF               	andlw	-33
  6386   002A90  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  6387   002A92  6FDA               	movwf	218,b	;volatile
  6388   002A94                     
  6389                           ; BSR set to: 14
  6390                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6391   002A94  89DA               	bsf	218,4,b	;volatile
  6392   002A96                     
  6393                           ; BSR set to: 14
  6394                           ;i2c.c: 61:   return tmp;
  6395   002A96  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  6396   002A98                     
  6397                           ; BSR set to: 14
  6398   002A98  0012               	return		;funcret
  6399   002A9A                     __end_of_I2C_2_Master_Read:
  6400                           	callstack 0
  6401                           
  6402 ;; *************** function _LEDSon_init *****************
  6403 ;; Defined at:
  6404 ;;		line 18 in file "LEDsOn.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		None
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6422 ;;Total ram usage:        0 bytes
  6423 ;; Hardware stack levels used: 1
  6424 ;; Hardware stack levels required when called: 4
  6425 ;; This function calls:
  6426 ;;		Nothing
  6427 ;; This function is called by:
  6428 ;;		_main
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text37
  6433   002C46                     __ptext37:
  6434                           	callstack 0
  6435   002C46                     _LEDSon_init:
  6436                           	callstack 26
  6437   002C46                     
  6438                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  6439   002C46  9288               	bcf	136,1,c	;volatile
  6440                           
  6441                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  6442   002C48  9088               	bcf	136,0,c	;volatile
  6443                           
  6444                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  6445   002C4A  9884               	bcf	132,4,c	;volatile
  6446                           
  6447                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  6448   002C4C  9684               	bcf	132,3,c	;volatile
  6449                           
  6450                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  6451   002C4E  9086               	bcf	134,0,c	;volatile
  6452                           
  6453                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  6454   002C50  9287               	bcf	135,1,c	;volatile
  6455                           
  6456                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  6457   002C52  9E86               	bcf	134,7,c	;volatile
  6458                           
  6459                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  6460   002C54  9881               	bcf	129,4,c	;volatile
  6461                           
  6462                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  6463   002C56  8E7E               	bsf	126,7,c	;volatile
  6464                           
  6465                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  6466   002C58  827F               	bsf	127,1,c	;volatile
  6467                           
  6468                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  6469   002C5A  8879               	bsf	121,4,c	;volatile
  6470                           
  6471                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  6472   002C5C  987C               	bcf	124,4,c	;volatile
  6473                           
  6474                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  6475   002C5E  9280               	bcf	128,1,c	;volatile
  6476                           
  6477                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  6478   002C60  907E               	bcf	126,0,c	;volatile
  6479                           
  6480                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  6481   002C62  9080               	bcf	128,0,c	;volatile
  6482                           
  6483                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  6484   002C64  967C               	bcf	124,3,c	;volatile
  6485   002C66  0012               	return		;funcret
  6486   002C68                     __end_of_LEDSon_init:
  6487                           	callstack 0
  6488                           
  6489 ;; *************** function _Interrupts_init *****************
  6490 ;; Defined at:
  6491 ;;		line 7 in file "interrupts.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      void 
  6498 ;; Registers used:
  6499 ;;		wreg, status,2, status,0, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6509 ;;Total ram usage:        0 bytes
  6510 ;; Hardware stack levels used: 1
  6511 ;; Hardware stack levels required when called: 8
  6512 ;; This function calls:
  6513 ;;		_enable_color_interrupt
  6514 ;;		_set_interrupt_threshold
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text38
  6521   002ADA                     __ptext38:
  6522                           	callstack 0
  6523   002ADA                     _Interrupts_init:
  6524                           	callstack 22
  6525   002ADA                     
  6526                           ;interrupts.c: 9:     enable_color_interrupt();
  6527   002ADA  EC76  F016         	call	_enable_color_interrupt	;wreg free
  6528                           
  6529                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  6530   002ADE  0E00               	movlw	0
  6531   002AE0  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  6532   002AE2  0E01               	movlw	1
  6533   002AE4  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  6534   002AE6  0E07               	movlw	7
  6535   002AE8  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  6536   002AEA  0ED0               	movlw	208
  6537   002AEC  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  6538   002AEE  0E00               	movlw	0
  6539   002AF0  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  6540   002AF2  0E04               	movlw	4
  6541   002AF4  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  6542   002AF6  ECE3  F013         	call	_set_interrupt_threshold	;wreg free
  6543   002AFA                     
  6544                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  6545   002AFA  9282               	bcf	130,1,c	;volatile
  6546   002AFC                     
  6547                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  6548   002AFC  010E               	movlb	14	; () banked
  6549   002AFE  939A               	bcf	154,1,b	;volatile
  6550   002B00                     
  6551                           ; BSR set to: 14
  6552                           ;interrupts.c: 14:     INT1PPS=0x09;
  6553   002B00  0E09               	movlw	9
  6554   002B02  010D               	movlb	13	; () banked
  6555   002B04  6FF1               	movwf	241,b	;volatile
  6556   002B06                     
  6557                           ; BSR set to: 13
  6558                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  6559   002B06  010E               	movlb	14	; () banked
  6560   002B08  8329               	bsf	41,1,b	;volatile
  6561   002B0A                     
  6562                           ; BSR set to: 14
  6563                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  6564   002B0A  831F               	bsf	31,1,b	;volatile
  6565   002B0C                     
  6566                           ; BSR set to: 14
  6567                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  6568   002B0C  92F2               	bcf	242,1,c	;volatile
  6569   002B0E                     
  6570                           ; BSR set to: 14
  6571                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  6572   002B0E  8CF2               	bsf	242,6,c	;volatile
  6573   002B10                     
  6574                           ; BSR set to: 14
  6575                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  6576   002B10  8AF2               	bsf	242,5,c	;volatile
  6577   002B12                     
  6578                           ; BSR set to: 14
  6579                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  6580   002B12  8CF2               	bsf	242,6,c	;volatile
  6581   002B14                     
  6582                           ; BSR set to: 14
  6583                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  6584   002B14  8EF2               	bsf	242,7,c	;volatile
  6585   002B16                     
  6586                           ; BSR set to: 14
  6587   002B16  0012               	return		;funcret
  6588   002B18                     __end_of_Interrupts_init:
  6589                           	callstack 0
  6590                           
  6591 ;; *************** function _set_interrupt_threshold *****************
  6592 ;; Defined at:
  6593 ;;		line 43 in file "interrupts.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  AILT            2    8[COMRAM] unsigned int 
  6596 ;;  AIHT            2   10[COMRAM] unsigned int 
  6597 ;;  persistence     2   12[COMRAM] unsigned int 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6609 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6612 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6613 ;;Total ram usage:        8 bytes
  6614 ;; Hardware stack levels used: 1
  6615 ;; Hardware stack levels required when called: 7
  6616 ;; This function calls:
  6617 ;;		_color_writetoaddr
  6618 ;; This function is called by:
  6619 ;;		_Interrupts_init
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text39
  6624   0027C6                     __ptext39:
  6625                           	callstack 0
  6626   0027C6                     _set_interrupt_threshold:
  6627                           	callstack 22
  6628   0027C6                     
  6629                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  6630   0027C6  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  6631   0027CA  0E0C               	movlw	12
  6632   0027CC  EC44  F016         	call	_color_writetoaddr
  6633                           
  6634                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  6635   0027D0  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  6636   0027D2  6E07               	movwf	color_writetoaddr@value^0,c
  6637   0027D4  0E05               	movlw	5
  6638   0027D6  EC44  F016         	call	_color_writetoaddr
  6639   0027DA                     
  6640                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  6641   0027DA  0E00               	movlw	0
  6642   0027DC  6E0F               	movwf	_set_interrupt_threshold$2062^0,c
  6643   0027DE  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  6644   0027E0  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  6645   0027E2  B4D8               	btfsc	status,2,c
  6646   0027E4  EFF6  F013         	goto	u1441
  6647   0027E8  EFF8  F013         	goto	u1440
  6648   0027EC                     u1441:
  6649   0027EC  EFFA  F013         	goto	l2941
  6650   0027F0                     u1440:
  6651   0027F0  0E01               	movlw	1
  6652   0027F2  6E0F               	movwf	_set_interrupt_threshold$2062^0,c
  6653   0027F4                     l2941:
  6654   0027F4  C00F  F007         	movff	_set_interrupt_threshold$2062,color_writetoaddr@value
  6655   0027F8  0E04               	movlw	4
  6656   0027FA  EC44  F016         	call	_color_writetoaddr
  6657   0027FE                     
  6658                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  6659   0027FE  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  6660   002800  6E07               	movwf	color_writetoaddr@value^0,c
  6661   002802  0E07               	movlw	7
  6662   002804  EC44  F016         	call	_color_writetoaddr
  6663                           
  6664                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  6665   002808  0E00               	movlw	0
  6666   00280A  6E10               	movwf	_set_interrupt_threshold$2063^0,c
  6667   00280C  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  6668   00280E  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  6669   002810  B4D8               	btfsc	status,2,c
  6670   002812  EF0D  F014         	goto	u1451
  6671   002816  EF0F  F014         	goto	u1450
  6672   00281A                     u1451:
  6673   00281A  EF11  F014         	goto	l2949
  6674   00281E                     u1450:
  6675   00281E  0E01               	movlw	1
  6676   002820  6E10               	movwf	_set_interrupt_threshold$2063^0,c
  6677   002822                     l2949:
  6678   002822  C010  F007         	movff	_set_interrupt_threshold$2063,color_writetoaddr@value
  6679   002826  0E06               	movlw	6
  6680   002828  EC44  F016         	call	_color_writetoaddr
  6681   00282C  0012               	return		;funcret
  6682   00282E                     __end_of_set_interrupt_threshold:
  6683                           	callstack 0
  6684                           
  6685 ;; *************** function _enable_color_interrupt *****************
  6686 ;; Defined at:
  6687 ;;		line 38 in file "interrupts.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;		None
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      void 
  6694 ;; Registers used:
  6695 ;;		wreg, status,2, status,0, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;Total ram usage:        0 bytes
  6706 ;; Hardware stack levels used: 1
  6707 ;; Hardware stack levels required when called: 7
  6708 ;; This function calls:
  6709 ;;		_clear_interrupt_flag
  6710 ;;		_color_writetoaddr
  6711 ;; This function is called by:
  6712 ;;		_Interrupts_init
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text40
  6717   002CEC                     __ptext40:
  6718                           	callstack 0
  6719   002CEC                     _enable_color_interrupt:
  6720                           	callstack 22
  6721   002CEC                     
  6722                           ;interrupts.c: 39:     clear_interrupt_flag();
  6723   002CEC  EC60  F016         	call	_clear_interrupt_flag	;wreg free
  6724                           
  6725                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  6726   002CF0  0E13               	movlw	19
  6727   002CF2  6E07               	movwf	color_writetoaddr@value^0,c
  6728   002CF4  0E00               	movlw	0
  6729   002CF6  EC44  F016         	call	_color_writetoaddr
  6730   002CFA  0012               	return		;funcret
  6731   002CFC                     __end_of_enable_color_interrupt:
  6732                           	callstack 0
  6733                           
  6734 ;; *************** function _color_writetoaddr *****************
  6735 ;; Defined at:
  6736 ;;		line 21 in file "color.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  address         1    wreg     unsigned char 
  6739 ;;  value           1    6[COMRAM] unsigned char 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  address         1    7[COMRAM] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6751 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;Total ram usage:        2 bytes
  6756 ;; Hardware stack levels used: 1
  6757 ;; Hardware stack levels required when called: 6
  6758 ;; This function calls:
  6759 ;;		_I2C_2_Master_Start
  6760 ;;		_I2C_2_Master_Stop
  6761 ;;		_I2C_2_Master_Write
  6762 ;; This function is called by:
  6763 ;;		_color_click_init
  6764 ;;		_enable_color_interrupt
  6765 ;;		_set_interrupt_threshold
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text41
  6770   002C88                     __ptext41:
  6771                           	callstack 0
  6772   002C88                     _color_writetoaddr:
  6773                           	callstack 23
  6774                           
  6775                           ;incstack = 0
  6776                           ;color_writetoaddr@address stored from wreg
  6777   002C88  6E08               	movwf	color_writetoaddr@address^0,c
  6778   002C8A                     
  6779                           ;color.c: 22:     I2C_2_Master_Start();
  6780   002C8A  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  6781                           
  6782                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  6783   002C8E  0E52               	movlw	82
  6784   002C90  EC7E  F016         	call	_I2C_2_Master_Write
  6785                           
  6786                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  6787   002C94  5008               	movf	color_writetoaddr@address^0,w,c
  6788   002C96  0980               	iorlw	128
  6789   002C98  EC7E  F016         	call	_I2C_2_Master_Write
  6790                           
  6791                           ;color.c: 25:     I2C_2_Master_Write(value);
  6792   002C9C  5007               	movf	color_writetoaddr@value^0,w,c
  6793   002C9E  EC7E  F016         	call	_I2C_2_Master_Write
  6794                           
  6795                           ;color.c: 26:     I2C_2_Master_Stop();
  6796   002CA2  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  6797   002CA6  0012               	return		;funcret
  6798   002CA8                     __end_of_color_writetoaddr:
  6799                           	callstack 0
  6800                           
  6801 ;; *************** function _clear_interrupt_flag *****************
  6802 ;; Defined at:
  6803 ;;		line 52 in file "interrupts.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;		None
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      void 
  6810 ;; Registers used:
  6811 ;;		wreg, status,2, status,0, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6821 ;;Total ram usage:        0 bytes
  6822 ;; Hardware stack levels used: 1
  6823 ;; Hardware stack levels required when called: 6
  6824 ;; This function calls:
  6825 ;;		_I2C_2_Master_Start
  6826 ;;		_I2C_2_Master_Stop
  6827 ;;		_I2C_2_Master_Write
  6828 ;; This function is called by:
  6829 ;;		_enable_color_interrupt
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           	psect	text42
  6834   002CC0                     __ptext42:
  6835                           	callstack 0
  6836   002CC0                     _clear_interrupt_flag:
  6837                           	callstack 22
  6838   002CC0                     
  6839                           ;interrupts.c: 53:     I2C_2_Master_Start();
  6840   002CC0  EC94  F016         	call	_I2C_2_Master_Start	;wreg free
  6841                           
  6842                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  6843   002CC4  0E52               	movlw	82
  6844   002CC6  EC7E  F016         	call	_I2C_2_Master_Write
  6845                           
  6846                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  6847   002CCA  0EE6               	movlw	230
  6848   002CCC  EC7E  F016         	call	_I2C_2_Master_Write
  6849                           
  6850                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  6851   002CD0  EC8F  F016         	call	_I2C_2_Master_Stop	;wreg free
  6852   002CD4  0012               	return		;funcret
  6853   002CD6                     __end_of_clear_interrupt_flag:
  6854                           	callstack 0
  6855                           
  6856 ;; *************** function _I2C_2_Master_Write *****************
  6857 ;; Defined at:
  6858 ;;		line 45 in file "i2c.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  data_byte       1    wreg     unsigned char 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  data_byte       1    5[COMRAM] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      void 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6873 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6875 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6876 ;;Total ram usage:        1 bytes
  6877 ;; Hardware stack levels used: 1
  6878 ;; Hardware stack levels required when called: 5
  6879 ;; This function calls:
  6880 ;;		_I2C_2_Master_Idle
  6881 ;; This function is called by:
  6882 ;;		_color_writetoaddr
  6883 ;;		_color_read_Red
  6884 ;;		_color_read_Green
  6885 ;;		_color_read_Blue
  6886 ;;		_color_read_Clear
  6887 ;;		_clear_interrupt_flag
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           	psect	text43
  6892   002CFC                     __ptext43:
  6893                           	callstack 0
  6894   002CFC                     _I2C_2_Master_Write:
  6895                           	callstack 24
  6896                           
  6897                           ;incstack = 0
  6898                           ;I2C_2_Master_Write@data_byte stored from wreg
  6899   002CFC  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  6900   002CFE                     
  6901                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6902   002CFE  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6903   002D02                     
  6904                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6905   002D02  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6906   002D06  0012               	return		;funcret
  6907   002D08                     __end_of_I2C_2_Master_Write:
  6908                           	callstack 0
  6909                           
  6910 ;; *************** function _I2C_2_Master_Stop *****************
  6911 ;; Defined at:
  6912 ;;		line 39 in file "i2c.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6930 ;;Total ram usage:        0 bytes
  6931 ;; Hardware stack levels used: 1
  6932 ;; Hardware stack levels required when called: 5
  6933 ;; This function calls:
  6934 ;;		_I2C_2_Master_Idle
  6935 ;; This function is called by:
  6936 ;;		_color_writetoaddr
  6937 ;;		_color_read_Red
  6938 ;;		_color_read_Green
  6939 ;;		_color_read_Blue
  6940 ;;		_color_read_Clear
  6941 ;;		_clear_interrupt_flag
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text44
  6946   002D1E                     __ptext44:
  6947                           	callstack 0
  6948   002D1E                     _I2C_2_Master_Stop:
  6949                           	callstack 24
  6950   002D1E                     
  6951                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6952   002D1E  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  6953   002D22                     
  6954                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6955   002D22  010E               	movlb	14	; () banked
  6956   002D24  85DA               	bsf	218,2,b	;volatile
  6957   002D26                     
  6958                           ; BSR set to: 14
  6959   002D26  0012               	return		;funcret
  6960   002D28                     __end_of_I2C_2_Master_Stop:
  6961                           	callstack 0
  6962                           
  6963 ;; *************** function _I2C_2_Master_Start *****************
  6964 ;; Defined at:
  6965 ;;		line 27 in file "i2c.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6983 ;;Total ram usage:        0 bytes
  6984 ;; Hardware stack levels used: 1
  6985 ;; Hardware stack levels required when called: 5
  6986 ;; This function calls:
  6987 ;;		_I2C_2_Master_Idle
  6988 ;; This function is called by:
  6989 ;;		_color_writetoaddr
  6990 ;;		_color_read_Red
  6991 ;;		_color_read_Green
  6992 ;;		_color_read_Blue
  6993 ;;		_color_read_Clear
  6994 ;;		_clear_interrupt_flag
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text45
  6999   002D28                     __ptext45:
  7000                           	callstack 0
  7001   002D28                     _I2C_2_Master_Start:
  7002                           	callstack 24
  7003   002D28                     
  7004                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7005   002D28  ECE8  F015         	call	_I2C_2_Master_Idle	;wreg free
  7006   002D2C                     
  7007                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7008   002D2C  010E               	movlb	14	; () banked
  7009   002D2E  81DA               	bsf	218,0,b	;volatile
  7010   002D30                     
  7011                           ; BSR set to: 14
  7012   002D30  0012               	return		;funcret
  7013   002D32                     __end_of_I2C_2_Master_Start:
  7014                           	callstack 0
  7015                           
  7016 ;; *************** function _I2C_2_Master_Idle *****************
  7017 ;; Defined at:
  7018 ;;		line 22 in file "i2c.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7036 ;;Total ram usage:        1 bytes
  7037 ;; Hardware stack levels used: 1
  7038 ;; Hardware stack levels required when called: 4
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_I2C_2_Master_Start
  7043 ;;		_I2C_2_Master_RepStart
  7044 ;;		_I2C_2_Master_Stop
  7045 ;;		_I2C_2_Master_Write
  7046 ;;		_I2C_2_Master_Read
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text46
  7051   002BD0                     __ptext46:
  7052                           	callstack 0
  7053   002BD0                     _I2C_2_Master_Idle:
  7054                           	callstack 24
  7055   002BD0                     l145:
  7056   002BD0  010E               	movlb	14	; () banked
  7057   002BD2  B5D8               	btfsc	216,2,b	;volatile
  7058   002BD4  EFEE  F015         	goto	u1041
  7059   002BD8  EFF0  F015         	goto	u1040
  7060   002BDC                     u1041:
  7061   002BDC  EFE8  F015         	goto	l145
  7062   002BE0                     u1040:
  7063   002BE0                     
  7064                           ; BSR set to: 14
  7065   002BE0  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7066   002BE4  0E1F               	movlw	31
  7067   002BE6  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7068   002BE8  A4D8               	btfss	status,2,c
  7069   002BEA  EFF9  F015         	goto	u1051
  7070   002BEE  EFFB  F015         	goto	u1050
  7071   002BF2                     u1051:
  7072   002BF2  EFE8  F015         	goto	l145
  7073   002BF6                     u1050:
  7074   002BF6                     
  7075                           ; BSR set to: 14
  7076   002BF6  0012               	return		;funcret
  7077   002BF8                     __end_of_I2C_2_Master_Idle:
  7078                           	callstack 0
  7079                           
  7080 ;; *************** function _HighISR *****************
  7081 ;; Defined at:
  7082 ;;		line 23 in file "interrupts.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7099 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7100 ;;Total ram usage:        2 bytes
  7101 ;; Hardware stack levels used: 1
  7102 ;; Hardware stack levels required when called: 3
  7103 ;; This function calls:
  7104 ;;		i2_clear_interrupt_flag
  7105 ;; This function is called by:
  7106 ;;		Interrupt level 2
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	intcode
  7111   000008                     __pintcode:
  7112                           	callstack 0
  7113   000008                     _HighISR:
  7114                           	callstack 18
  7115                           
  7116                           ; BSR set to: 14
  7117                           ;incstack = 0
  7118   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7119   00000A                     
  7120                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7121   00000A  010E               	movlb	14	; () banked
  7122   00000C  A333               	btfss	51,1,b	;volatile
  7123   00000E  EF0B  F000         	goto	i2u159_41
  7124   000012  EF0D  F000         	goto	i2u159_40
  7125   000016                     i2u159_41:
  7126   000016  EF39  F000         	goto	i2l493
  7127   00001A                     i2u159_40:
  7128   00001A                     
  7129                           ; BSR set to: 14
  7130   00001A  0100               	movlb	0	; () banked
  7131   00001C  51F2               	movf	_response_in_progress& (0+255),w,b
  7132   00001E  11F3               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7133   000020  A4D8               	btfss	status,2,c
  7134   000022  EF15  F000         	goto	i2u160_41
  7135   000026  EF17  F000         	goto	i2u160_40
  7136   00002A                     i2u160_41:
  7137   00002A  EF39  F000         	goto	i2l493
  7138   00002E                     i2u160_40:
  7139   00002E                     
  7140                           ; BSR set to: 0
  7141                           ;interrupts.c: 27:         card_detected = 1;
  7142   00002E  0E00               	movlw	0
  7143   000030  6FF1               	movwf	(_card_detected+1)& (0+255),b
  7144   000032  0E01               	movlw	1
  7145   000034  6FF0               	movwf	_card_detected& (0+255),b
  7146   000036                     
  7147                           ; BSR set to: 0
  7148                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7149   000036  8E7C               	bsf	124,7,c	;volatile
  7150   000038                     
  7151                           ; BSR set to: 0
  7152                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7153   000038  0E05               	movlw	5
  7154   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7155   00003C  0E0F               	movlw	15
  7156   00003E  6E03               	movwf	??_HighISR^0,c
  7157   000040  0EF1               	movlw	241
  7158   000042                     i2u225_47:
  7159   000042  2EE8               	decfsz	wreg,f,c
  7160   000044  D7FE               	bra	i2u225_47
  7161   000046  2E03               	decfsz	??_HighISR^0,f,c
  7162   000048  D7FC               	bra	i2u225_47
  7163   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7164   00004C  D7FA               	bra	i2u225_47
  7165   00004E  F000               	nop	
  7166   000050                     
  7167                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7168   000050  9E7C               	bcf	124,7,c	;volatile
  7169   000052                     
  7170                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7171   000052  0E05               	movlw	5
  7172   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7173   000056  0E0F               	movlw	15
  7174   000058  6E03               	movwf	??_HighISR^0,c
  7175   00005A  0EF1               	movlw	241
  7176   00005C                     i2u226_47:
  7177   00005C  2EE8               	decfsz	wreg,f,c
  7178   00005E  D7FE               	bra	i2u226_47
  7179   000060  2E03               	decfsz	??_HighISR^0,f,c
  7180   000062  D7FC               	bra	i2u226_47
  7181   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7182   000066  D7FA               	bra	i2u226_47
  7183   000068  F000               	nop	
  7184   00006A                     
  7185                           ;interrupts.c: 32:         clear_interrupt_flag();
  7186   00006A  EC6B  F016         	call	i2_clear_interrupt_flag	;wreg free
  7187   00006E                     
  7188                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7189   00006E  010E               	movlb	14	; () banked
  7190   000070  9333               	bcf	51,1,b	;volatile
  7191   000072                     i2l493:
  7192   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7193   000074  0011               	retfie		f
  7194   000076                     __end_of_HighISR:
  7195                           	callstack 0
  7196                           
  7197 ;; *************** function i2_clear_interrupt_flag *****************
  7198 ;; Defined at:
  7199 ;;		line 52 in file "interrupts.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used: 1
  7219 ;; Hardware stack levels required when called: 2
  7220 ;; This function calls:
  7221 ;;		i2_I2C_2_Master_Start
  7222 ;;		i2_I2C_2_Master_Stop
  7223 ;;		i2_I2C_2_Master_Write
  7224 ;; This function is called by:
  7225 ;;		_HighISR
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text48
  7230   002CD6                     __ptext48:
  7231                           	callstack 0
  7232   002CD6                     i2_clear_interrupt_flag:
  7233                           	callstack 18
  7234   002CD6                     
  7235                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7236   002CD6  EC9E  F016         	call	i2_I2C_2_Master_Start	;wreg free
  7237                           
  7238                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7239   002CDA  0E52               	movlw	82
  7240   002CDC  EC84  F016         	call	i2_I2C_2_Master_Write
  7241                           
  7242                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7243   002CE0  0EE6               	movlw	230
  7244   002CE2  EC84  F016         	call	i2_I2C_2_Master_Write
  7245                           
  7246                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7247   002CE6  EC99  F016         	call	i2_I2C_2_Master_Stop	;wreg free
  7248   002CEA  0012               	return		;funcret
  7249   002CEC                     __end_ofi2_clear_interrupt_flag:
  7250                           	callstack 0
  7251                           
  7252 ;; *************** function i2_I2C_2_Master_Write *****************
  7253 ;; Defined at:
  7254 ;;		line 45 in file "i2c.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  data_byte       1    wreg     unsigned char 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  data_byte       1    1[COMRAM] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      void 
  7261 ;; Registers used:
  7262 ;;		wreg, status,2, status,0, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7272 ;;Total ram usage:        1 bytes
  7273 ;; Hardware stack levels used: 1
  7274 ;; Hardware stack levels required when called: 1
  7275 ;; This function calls:
  7276 ;;		i2_I2C_2_Master_Idle
  7277 ;; This function is called by:
  7278 ;;		i2_clear_interrupt_flag
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text49
  7283   002D08                     __ptext49:
  7284                           	callstack 0
  7285   002D08                     i2_I2C_2_Master_Write:
  7286                           	callstack 18
  7287                           
  7288                           ;incstack = 0
  7289                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7290   002D08  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7291   002D0A                     
  7292                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7293   002D0A  ECFC  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7294   002D0E                     
  7295                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7296   002D0E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7297   002D12  0012               	return		;funcret
  7298   002D14                     __end_ofi2_I2C_2_Master_Write:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function i2_I2C_2_Master_Stop *****************
  7302 ;; Defined at:
  7303 ;;		line 39 in file "i2c.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used: 1
  7323 ;; Hardware stack levels required when called: 1
  7324 ;; This function calls:
  7325 ;;		i2_I2C_2_Master_Idle
  7326 ;; This function is called by:
  7327 ;;		i2_clear_interrupt_flag
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text50
  7332   002D32                     __ptext50:
  7333                           	callstack 0
  7334   002D32                     i2_I2C_2_Master_Stop:
  7335                           	callstack 18
  7336   002D32                     
  7337                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7338   002D32  ECFC  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7339   002D36                     
  7340                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7341   002D36  010E               	movlb	14	; () banked
  7342   002D38  85DA               	bsf	218,2,b	;volatile
  7343   002D3A                     
  7344                           ; BSR set to: 14
  7345   002D3A  0012               	return		;funcret
  7346   002D3C                     __end_ofi2_I2C_2_Master_Stop:
  7347                           	callstack 0
  7348                           
  7349 ;; *************** function i2_I2C_2_Master_Start *****************
  7350 ;; Defined at:
  7351 ;;		line 27 in file "i2c.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  1    wreg      void 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;Total ram usage:        0 bytes
  7370 ;; Hardware stack levels used: 1
  7371 ;; Hardware stack levels required when called: 1
  7372 ;; This function calls:
  7373 ;;		i2_I2C_2_Master_Idle
  7374 ;; This function is called by:
  7375 ;;		i2_clear_interrupt_flag
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           	psect	text51
  7380   002D3C                     __ptext51:
  7381                           	callstack 0
  7382   002D3C                     i2_I2C_2_Master_Start:
  7383                           	callstack 18
  7384   002D3C                     
  7385                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7386   002D3C  ECFC  F015         	call	i2_I2C_2_Master_Idle	;wreg free
  7387   002D40                     
  7388                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7389   002D40  010E               	movlb	14	; () banked
  7390   002D42  81DA               	bsf	218,0,b	;volatile
  7391   002D44                     
  7392                           ; BSR set to: 14
  7393   002D44  0012               	return		;funcret
  7394   002D46                     __end_ofi2_I2C_2_Master_Start:
  7395                           	callstack 0
  7396                           
  7397 ;; *************** function i2_I2C_2_Master_Idle *****************
  7398 ;; Defined at:
  7399 ;;		line 22 in file "i2c.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;		None
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;		None
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      void 
  7406 ;; Registers used:
  7407 ;;		wreg, status,2, status,0
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7417 ;;Total ram usage:        1 bytes
  7418 ;; Hardware stack levels used: 1
  7419 ;; This function calls:
  7420 ;;		Nothing
  7421 ;; This function is called by:
  7422 ;;		i2_I2C_2_Master_Start
  7423 ;;		i2_I2C_2_Master_Stop
  7424 ;;		i2_I2C_2_Master_Write
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text52
  7429   002BF8                     __ptext52:
  7430                           	callstack 0
  7431   002BF8                     i2_I2C_2_Master_Idle:
  7432                           	callstack 18
  7433   002BF8                     i2l145:
  7434   002BF8  010E               	movlb	14	; () banked
  7435   002BFA  B5D8               	btfsc	216,2,b	;volatile
  7436   002BFC  EF02  F016         	goto	i2u133_41
  7437   002C00  EF04  F016         	goto	i2u133_40
  7438   002C04                     i2u133_41:
  7439   002C04  EFFC  F015         	goto	i2l145
  7440   002C08                     i2u133_40:
  7441   002C08                     
  7442                           ; BSR set to: 14
  7443   002C08  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7444   002C0C  0E1F               	movlw	31
  7445   002C0E  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7446   002C10  A4D8               	btfss	status,2,c
  7447   002C12  EF0D  F016         	goto	i2u134_41
  7448   002C16  EF0F  F016         	goto	i2u134_40
  7449   002C1A                     i2u134_41:
  7450   002C1A  EFFC  F015         	goto	i2l145
  7451   002C1E                     i2u134_40:
  7452   002C1E                     
  7453                           ; BSR set to: 14
  7454   002C1E  0012               	return		;funcret
  7455   002C20                     __end_ofi2_I2C_2_Master_Idle:
  7456                           	callstack 0
  7457                           
  7458                           	psect	rparam
  7459   000000                     
  7460                           	psect	temp
  7461   00005B                     btemp:
  7462                           	callstack 0
  7463   00005B                     	ds	1
  7464   000000                     int$flags	set	btemp
  7465   000000                     wtemp8	set	btemp+1
  7466   000000                     ttemp5	set	btemp+1
  7467   000000                     ttemp6	set	btemp+4
  7468   000000                     ttemp7	set	btemp+8
  7469                           
  7470                           	psect	idloc
  7471                           
  7472                           ;Config register IDLOC0 @ 0x200000
  7473                           ;	unspecified, using default values
  7474   200000                     	org	2097152
  7475   200000  0FFF               	dw	4095
  7476                           
  7477                           ;Config register IDLOC1 @ 0x200002
  7478                           ;	unspecified, using default values
  7479   200002                     	org	2097154
  7480   200002  0FFF               	dw	4095
  7481                           
  7482                           ;Config register IDLOC2 @ 0x200004
  7483                           ;	unspecified, using default values
  7484   200004                     	org	2097156
  7485   200004  0FFF               	dw	4095
  7486                           
  7487                           ;Config register IDLOC3 @ 0x200006
  7488                           ;	unspecified, using default values
  7489   200006                     	org	2097158
  7490   200006  0FFF               	dw	4095
  7491                           
  7492                           ;Config register IDLOC4 @ 0x200008
  7493                           ;	unspecified, using default values
  7494   200008                     	org	2097160
  7495   200008  0FFF               	dw	4095
  7496                           
  7497                           ;Config register IDLOC5 @ 0x20000A
  7498                           ;	unspecified, using default values
  7499   20000A                     	org	2097162
  7500   20000A  0FFF               	dw	4095
  7501                           
  7502                           ;Config register IDLOC6 @ 0x20000C
  7503                           ;	unspecified, using default values
  7504   20000C                     	org	2097164
  7505   20000C  0FFF               	dw	4095
  7506                           
  7507                           ;Config register IDLOC7 @ 0x20000E
  7508                           ;	unspecified, using default values
  7509   20000E                     	org	2097166
  7510   20000E  0FFF               	dw	4095
  7511                           
  7512                           	psect	config
  7513                           
  7514                           ;Config register CONFIG1L @ 0x300000
  7515                           ;	External Oscillator mode Selection bits
  7516                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7517                           ;	Power-up default value for COSC bits
  7518                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7519   300000                     	org	3145728
  7520   300000  AA                 	db	170
  7521                           
  7522                           ;Config register CONFIG1H @ 0x300001
  7523                           ;	unspecified, using default values
  7524                           ;	Clock Out Enable bit
  7525                           ;	CLKOUTEN = 0x1, unprogrammed default
  7526                           ;	Clock Switch Enable bit
  7527                           ;	CSWEN = 0x1, unprogrammed default
  7528                           ;	Fail-Safe Clock Monitor Enable bit
  7529                           ;	FCMEN = 0x1, unprogrammed default
  7530   300001                     	org	3145729
  7531   300001  FF                 	db	255
  7532                           
  7533                           ;Config register CONFIG2L @ 0x300002
  7534                           ;	unspecified, using default values
  7535                           ;	Master Clear Enable bit
  7536                           ;	MCLRE = 0x1, unprogrammed default
  7537                           ;	Power-up Timer Enable bit
  7538                           ;	PWRTE = 0x1, unprogrammed default
  7539                           ;	Low-power BOR enable bit
  7540                           ;	LPBOREN = 0x1, unprogrammed default
  7541                           ;	Brown-out Reset Enable bits
  7542                           ;	BOREN = 0x3, unprogrammed default
  7543   300002                     	org	3145730
  7544   300002  FF                 	db	255
  7545                           
  7546                           ;Config register CONFIG2H @ 0x300003
  7547                           ;	unspecified, using default values
  7548                           ;	Brown Out Reset Voltage selection bits
  7549                           ;	BORV = 0x3, unprogrammed default
  7550                           ;	ZCD Disable bit
  7551                           ;	ZCD = 0x1, unprogrammed default
  7552                           ;	PPSLOCK bit One-Way Set Enable bit
  7553                           ;	PPS1WAY = 0x1, unprogrammed default
  7554                           ;	Stack Full/Underflow Reset Enable bit
  7555                           ;	STVREN = 0x1, unprogrammed default
  7556                           ;	Debugger Enable bit
  7557                           ;	DEBUG = 0x1, unprogrammed default
  7558                           ;	Extended Instruction Set Enable bit
  7559                           ;	XINST = 0x1, unprogrammed default
  7560   300003                     	org	3145731
  7561   300003  FF                 	db	255
  7562                           
  7563                           ;Config register CONFIG3L @ 0x300004
  7564                           ;	WDT Period Select bits
  7565                           ;	WDTCPS = 0x1F, unprogrammed default
  7566                           ;	WDT operating mode
  7567                           ;	WDTE = OFF, WDT Disabled
  7568   300004                     	org	3145732
  7569   300004  9F                 	db	159
  7570                           
  7571                           ;Config register CONFIG3H @ 0x300005
  7572                           ;	unspecified, using default values
  7573                           ;	WDT Window Select bits
  7574                           ;	WDTCWS = 0x7, unprogrammed default
  7575                           ;	WDT input clock selector
  7576                           ;	WDTCCS = 0x7, unprogrammed default
  7577   300005                     	org	3145733
  7578   300005  FF                 	db	255
  7579                           
  7580                           ;Config register CONFIG4L @ 0x300006
  7581                           ;	unspecified, using default values
  7582                           ;	Write Protection Block 0
  7583                           ;	WRT0 = 0x1, unprogrammed default
  7584                           ;	Write Protection Block 1
  7585                           ;	WRT1 = 0x1, unprogrammed default
  7586                           ;	Write Protection Block 2
  7587                           ;	WRT2 = 0x1, unprogrammed default
  7588                           ;	Write Protection Block 3
  7589                           ;	WRT3 = 0x1, unprogrammed default
  7590                           ;	Write Protection Block 3
  7591                           ;	WRT4 = 0x1, unprogrammed default
  7592                           ;	Write Protection Block 3
  7593                           ;	WRT5 = 0x1, unprogrammed default
  7594                           ;	Write Protection Block 3
  7595                           ;	WRT6 = 0x1, unprogrammed default
  7596                           ;	Write Protection Block 3
  7597                           ;	WRT7 = 0x1, unprogrammed default
  7598   300006                     	org	3145734
  7599   300006  FF                 	db	255
  7600                           
  7601                           ;Config register CONFIG4H @ 0x300007
  7602                           ;	unspecified, using default values
  7603                           ;	Configuration Register Write Protection bit
  7604                           ;	WRTC = 0x1, unprogrammed default
  7605                           ;	Boot Block Write Protection bit
  7606                           ;	WRTB = 0x1, unprogrammed default
  7607                           ;	Data EEPROM Write Protection bit
  7608                           ;	WRTD = 0x1, unprogrammed default
  7609                           ;	Scanner Enable bit
  7610                           ;	SCANE = 0x1, unprogrammed default
  7611                           ;	Low Voltage Programming Enable bit
  7612                           ;	LVP = 0x1, unprogrammed default
  7613   300007                     	org	3145735
  7614   300007  FF                 	db	255
  7615                           
  7616                           ;Config register CONFIG5L @ 0x300008
  7617                           ;	unspecified, using default values
  7618                           ;	UserNVM Program Memory Code Protection bit
  7619                           ;	CP = 0x1, unprogrammed default
  7620                           ;	DataNVM Memory Code Protection bit
  7621                           ;	CPD = 0x1, unprogrammed default
  7622   300008                     	org	3145736
  7623   300008  FF                 	db	255
  7624                           
  7625                           ;Config register CONFIG5H @ 0x300009
  7626                           ;	unspecified, using default values
  7627   300009                     	org	3145737
  7628   300009  FF                 	db	255
  7629                           
  7630                           ;Config register CONFIG6L @ 0x30000A
  7631                           ;	unspecified, using default values
  7632                           ;	Table Read Protection Block 0
  7633                           ;	EBTR0 = 0x1, unprogrammed default
  7634                           ;	Table Read Protection Block 1
  7635                           ;	EBTR1 = 0x1, unprogrammed default
  7636                           ;	Table Read Protection Block 2
  7637                           ;	EBTR2 = 0x1, unprogrammed default
  7638                           ;	Table Read Protection Block 3
  7639                           ;	EBTR3 = 0x1, unprogrammed default
  7640                           ;	Table Read Protection Block 4
  7641                           ;	EBTR4 = 0x1, unprogrammed default
  7642                           ;	Table Read Protection Block 5
  7643                           ;	EBTR5 = 0x1, unprogrammed default
  7644                           ;	Table Read Protection Block 6
  7645                           ;	EBTR6 = 0x1, unprogrammed default
  7646                           ;	Table Read Protection Block 7
  7647                           ;	EBTR7 = 0x1, unprogrammed default
  7648   30000A                     	org	3145738
  7649   30000A  FF                 	db	255
  7650                           
  7651                           ;Config register CONFIG6H @ 0x30000B
  7652                           ;	unspecified, using default values
  7653                           ;	Boot Block Table Read Protection bit
  7654                           ;	EBTRB = 0x1, unprogrammed default
  7655   30000B                     	org	3145739
  7656   30000B  FF                 	db	255
  7657                           tosu	equ	0xFFF
  7658                           tosh	equ	0xFFE
  7659                           tosl	equ	0xFFD
  7660                           stkptr	equ	0xFFC
  7661                           pclatu	equ	0xFFB
  7662                           pclath	equ	0xFFA
  7663                           pcl	equ	0xFF9
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           indf0	equ	0xFEF
  7671                           postinc0	equ	0xFEE
  7672                           postdec0	equ	0xFED
  7673                           preinc0	equ	0xFEC
  7674                           plusw0	equ	0xFEB
  7675                           fsr0h	equ	0xFEA
  7676                           fsr0l	equ	0xFE9
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postinc1	equ	0xFE6
  7680                           postdec1	equ	0xFE5
  7681                           preinc1	equ	0xFE4
  7682                           plusw1	equ	0xFE3
  7683                           fsr1h	equ	0xFE2
  7684                           fsr1l	equ	0xFE1
  7685                           bsr	equ	0xFE0
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           preinc2	equ	0xFDC
  7690                           plusw2	equ	0xFDB
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8

Data Sizes:
    Strings     100
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    120     149
    BANK1           256    236     236
    BANK2           256      0      92
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[23]), STR_1(CODE[41]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[23]), STR_1(CODE[41]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[23]), STR_1(CODE[41]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2553$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_4(CODE[10]), STR_3(CODE[26]), STR_2(CODE[23]), STR_1(CODE[41]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2504$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2504$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> card_response@normalised_values(BANK0[54]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 54
		 -> main@expected_values(BANK1[54]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _color_read_Clear->_I2C_2_Master_Read
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    _make_master_closeness->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               360   360      0   54837
                                            118 BANK0      2     2      0
                                              0 BANK1    236   236      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                    _initDCmotorsPWM
                         _initUSART4
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _card_response                                       87    73     14   37539
                                             31 BANK0     87    73     14
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12    8126
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7100
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6639
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5072
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  23    11     12    3375
                                             26 COMRAM    23    11     12
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     453
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   21500
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    4723
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4115
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    6001
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverseFullSpeed                                     7     3      4    4419
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    2829
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     811
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               27    21      6    1200
                                             17 COMRAM    27    21      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     750
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                16    10      6    1243
                                             15 COMRAM    16    10      6
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
       ___lwdiv
         ___wmul (ARG)
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Clear
     _I2C_2_Master_Read
     _I2C_2_Master_RepStart
     _I2C_2_Master_Start
     _I2C_2_Master_Stop
     _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _sendStringSerial4
   _setMotorPWM
   _sprintf

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      5C       9       35.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EC      EC       7       92.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     78      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     237      64        0.0%
DATA                 0      0     237       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 19:34:30 2022

                        _color_read_Red 2924                         _color_read_Blue 29C4  
                                    l22 2CA6                                      l31 2A12  
                                    l25 2972                                      l34 2922  
                                    l19 2B4A                                      l28 29C2  
                                    l86 1DDA                                      l95 2656  
                                    l79 25D0                     ___wmul@multiplicand 0007  
                      _color_read_Clear 28D4                        _color_read_Green 2974  
                     ??_Interrupts_init 0011                                     l100 24BC  
                                   l105 240E                                     l115 2548  
                                   l142 2BCE                                     l151 2D30  
                                   l160 2D06                                     l240 1230  
                                   l145 2BD0                                     l241 1304  
                                   l154 2D1C                                     l330 1900  
                                   l410 2CBE                                     l250 13F6  
                                   l242 1300                                     l163 2A98  
                                   l148 2BF6                                     l252 1406  
                                   l157 2D26                                     l325 1AE6  
                                   l341 26D6                                     l253 1402  
                                   l254 1414                                     l238 1222  
                                   l503 282C                                     l335 2296  
                                   l407 2CAA                                     l239 1220  
                                   l280 2C66                                     l416 2B7A  
                                   l248 13E8                                     l249 13E4  
                                   l506 2CD4                                     l356 117A  
                                   l509 2C44                                     l623 1C6E  
                                   l359 21C2                                     l636 1F3E  
                                   l398 2C86                                     l487 2B16  
                                   l496 2CFA     normalise_readings@normalised_values 0025  
                      ??_motor_response 0024                                     _abs 2A9A  
                                   _pad 26D8                   __end_of_card_response 21C4  
                                   prod 000FF3                                     wreg 000FE8  
                                  l1000 27BC                                    l1007 27C4  
                                  ?_abs 0017                                    l1220 2750  
                                  l1216 26FA                                    l3001 2C46  
                                  l1225 14E8                                    l1227 14F0  
                                  l3011 2C80                                    l3003 2C68  
                                  l1228 1536                                    l1252 2880  
                                  l3021 2AFC                                    l3013 2C82  
                                  l3005 2C72                                    l1246 209C  
                                  l3031 2B0E                                    l3023 2B00  
                                  l1239 16D8                                    l3015 2C84  
                                  l3007 2C74                                    l1184 2AD0  
                                  l1264 2360                                    l1272 2A56  
                                  l3033 2B10                                    l3025 2B06  
                                  l3017 2ADA                                    l2401 2752  
                                  l3009 2C76                                    l1194 28D2  
                                  l3035 2B12                                    l3027 2B0A  
                                  l3019 2AFA                                    l2411 278A  
                                  l2403 275A                                    l1187 2AD8  
                                  l1275 2D46                                    l3037 2B14  
                                  l3029 2B0C                                    l2501 2A96  
                                  l2421 27B6                                    l2413 2790  
                                  l2405 276C                                    l3301 1BB6  
                                  l2415 27A6                                    l2407 2774  
                                  l2511 1CF4                                    l3303 1BE4  
                                  l3311 1C1E                                    l2417 27AE  
                                  l2409 277C                                    l2513 1CF8  
                                  l2505 1C70                                    l2601 2468  
                                  l3313 1C2E                                    l3305 1C04  
                                  l3321 1DE0                                    l3401 15D6  
                                  l2419 27B0                                    l2515 1D3A  
                                  l2507 1C8C                                    l2603 2474  
                                  l2611 2362                                    l3315 1C4E  
                                  l3307 1C06                                    l3331 1E40  
                                  l3323 1DEE                                    l3251 22AA  
                                  l3411 1692                                    l3403 15DC  
                                  l2517 1D56                                    l2509 1CE0  
                                  l2605 2480                                    l2621 23A2  
                                  l2613 2382                                    l3309 1C18  
                                  l3341 1EB6                                    l3333 1E5E  
                                  l3325 1E0E                                    l3253 22BC  
                                  l3413 16A2                                    l3405 1640  
                                  l3421 1F40                                    l3501 219E  
                                  l2391 2BD0                                    l2551 2C8A  
                                  l2711 19BA                                    l2703 196E  
                                  l2519 1D9A                                    l2607 2488  
                                  l2631 23F6                                    l2623 23BA  
                                  l3271 2A9A                                    l3351 1F1E  
                                  l3343 1ED6                                    l3335 1E66  
                                  l3327 1E12                                    l3319 1DDC  
                                  l3255 22C6                                    l3263 2A14  
                                  l3415 16A8                                    l3407 165A  
                                  l3431 1F98                                    l3423 1F68  
                                  l3503 21AA                                    l3511 1188  
                                  l2393 2BE0                                    l2481 2D02  
                                  l2561 29BA                                    l2553 2924  
                                  l2721 1A02                                    l2713 19E6  
                                  l2705 1982                                    l2801 269E  
                                  l2641 24E6                                    l2633 24BE  
                                  l2609 24A4                                    l2625 23C6  
                                  l3273 2AB4                                    l3281 1B1A  
                                  l3345 1EE8                                    l3337 1E7A  
                                  l3329 1E20                                    l3257 22E4  
                                  l3249 2298                                    l3265 2A20  
                                  l3361 2706                                    l3417 16B8  
                                  l3409 1678                                    l3441 205E  
                                  l3433 1FB8                                    l3425 1F76  
                                  l3521 119A                                    l3513 118C  
                                  l3505 117C                                    l2475 2D28  
                                  l2483 2D1E                                    l2491 2A5A  
                                  l2555 296A                                    l2723 1A1A  
                                  l2707 199A                                    l2803 26BE  
                                  l2395 2C20                                    l2651 252C  
                                  l2643 24FE                                    l2635 24DE  
                                  l2571 25D2                                    l2627 23D2  
                                  l2619 238A                                    l3291 1B5C  
                                  l3283 1B1E                                    l3275 1AE8  
                                  l3339 1E88                                    l3347 1EEE  
                                  l3259 231A                                    l3267 2A32  
                                  l3363 271A                                    l3355 26D8  
                                  l3371 147C                                    l3435 1FD8  
                                  l3427 1F84                                    l3451 282E  
                                  l3531 11D6                                    l3523 11AC  
                                  l3515 1190                                    l3507 1180  
                                  l2477 2D2C                                    l2485 2D22  
                                  l2493 2A5E                                    l2565 29C4  
                                  l2741 1A9E                                    l2725 1A1E  
                                  l2709 199E                                    l2805 26C2  
                                  l2397 2C3C                                    l2645 250A  
                                  l2581 2618                                    l2573 25D6  
                                  l2629 23DA                                    l2821 0EAC  
                                  l2813 0E68                                    l2653 2CAA  
                                  l3293 1B7A                                    l3285 1B2C  
                                  l3277 1AEC                                    l3349 1EFE  
                                  l3269 2A36                                    l3365 271E  
                                  l3357 26E6                                    l3381 14F8  
                                  l3373 1490                                    l3437 202E  
                                  l3429 1F88                                    l3445 2070  
                                  l3453 283A                                    l3461 2882  
                                  l3533 11DE                                    l3525 11B4  
                                  l3517 1194                                    l3509 1184  
                                  l2479 2CFE                                    l2495 2A66  
                                  l2487 2D14                                    l2567 2A0A  
                                  l2559 2974                                    l2743 1ABA  
                                  l2735 1A6E                                    l2727 1A3A  
                                  l2719 19EE                                    l2807 26C4  
                                  l2647 2516                                    l2583 2624  
                                  l2575 25E2                                    l2591 2430  
                                  l2911 1100                                    l2831 0F18  
                                  l2823 0EC0                                    l2815 0E6C  
                                  l2655 2CBA                                    l3295 1B82  
                                  l3287 1B4C                                    l3279 1AFA  
                                  l3367 273C                                    l3359 26F2  
                                  l3391 1532                                    l3383 1508  
                                  l3375 14A0                                    l3455 2856  
                                  l3463 2894                                    l3551 1288  
                                  l3535 11E4                                    l3527 11BC  
                                  l3519 1196                                    l2657 2CC0  
                                  l2497 2A6E                                    l2489 2D18  
                                  l2737 1A82                                    l2729 1A66  
                                  l2809 26D4                                    l2649 2524  
                                  l2585 2632                                    l2577 25F0  
                                  l3617 112C                                    l2841 0F6C  
                                  l2833 0F2C                                    l2825 0ED4  
                                  l2817 0E80                                    l3481 18EE  
                                  l3473 16DA                                    l2761 2B5E  
                                  l3297 1B96                                    l3289 1B50  
                                  l3393 153E                                    l3385 150E  
                                  l3377 14C0                                    l3369 145C  
                                  l3457 2876                                    l3465 289C  
                                  l2681 2BBA                                    l2673 2BA6  
                                  l3561 1312                                    l3553 12A8  
                                  l3545 1232                                    l3537 11F0  
                                  l3529 11CE                                    l2931 2CEC  
                                  l2499 2A94                                    l2739 1A9A  
                                  l2691 190A                                    l2587 263E  
                                  l2579 25FC                                    l2907 10D4  
                                  l2843 0F84                                    l2835 0F40  
                                  l2827 0EEC                                    l2819 0E98  
                                  l3483 18F0                                    l2763 2B62  
                                  l3299 1BA4                                    l3395 1548  
                                  l3387 151E                                    l3379 14DC  
                                  l3467 28A4                                    l3491 2100  
                                  l2683 2BBC                                    l2675 2BB0  
                                  l3571 132E                                    l3555 12DC  
                                  l3547 124E                                    l3539 1216  
                                  l2941 27F4                                    l2933 27C6  
                                  l2693 1946                                    l2685 1902  
                                  l2597 2438                                    l2589 2410  
                                  l2909 10E8                                    l2861 0FEC  
                                  l2845 0F98                                    l2829 0F00  
                                  l2925 1118                                    l2757 2B4C  
                                  l3397 154E                                    l3389 152A  
                                  l3469 28C0                                    l3493 210C  
                                  l3485 209E                                    l2677 2BB6  
                                  l3581 1360                                    l3573 134A  
                                  l3557 12E8                                    l3549 1268  
                                  ?_pad 0015                                    l2943 27FE  
                                  l2935 27DA                                    l2695 194A  
                                  l2791 265C                                    l2783 21C8  
                                  l2599 2450                                    l2863 1004  
                                  l2847 0FAC                                    l2839 0F58  
                                  l3479 16DE                                    l2759 2B50  
                                  l3399 15D0                                    l3495 2158  
                                  l3487 209E                                    l2679 2BB8  
                                  l3591 13D4                                    l3583 1378  
                                  l3567 131C                                    l3559 12EC  
                                  l2945 280C                                    l2937 27DE  
                                  l2697 1966                                    l2793 266C  
                                  l2785 2284                                    l2777 21C4  
                                  l2881 108C                                    l2849 0FC0  
                                  l3497 2174                                    l3489 20BA  
                                  l3593 13E0                                    l3585 137E  
                                  l3569 1328                                    l2947 281E  
                                  l2939 27F0                                    l2787 2286  
                                  l2891 10A4                                    l2875 1034  
                                  l2859 0FD8                                    l3499 2184  
                                  l2971 2B40                                    l2963 2B18  
                                  l3595 1416                                    l3587 139A  
                                  l3579 1352                                    l2949 2822  
                                  l2789 2658                                    l2893 10B8  
                                  l2877 1048                                    l2965 2B1C  
                                  l2973 28D4                                    l2981 2552  
                                  l3589 13B8                                    l2799 2670  
                                  l2879 1060                                    l2967 2B26  
                                  l2975 291A                                    l2991 25B6  
                                  l2983 257C                                    l2969 2B36  
                                  l2993 25B8                                    l2985 25A0  
                                  l2995 25C2                                    l2987 25AA  
                                  l2979 254A                                    l2997 25C4  
                                  l2989 25AC                                    l2999 25CE  
                                  STR_1 0E01                                    STR_2 0E44  
                                  STR_3 0E2A                                    STR_4 0E5B  
                                  u1040 2BE0                                    u2000 134A  
                                  u1041 2BDC                                    u2001 1346  
                                  u1050 2BF6                                    u1210 1C8C  
                                  u2010 139A                                    u1051 2BF2  
                                  u1211 1C88                                    u2011 1396  
                                  u1060 276C                                    u1220 1D56  
                                  u1300 2548                                    u2020 13F6  
                          ?_LEDSon_init 0001                                    u1061 2768  
                                  u1221 1D52                                    u1301 2544  
                                  u2021 13F2                                    u1070 278A  
                                  u1310 2CBA                                    u2030 1414  
                                  u1071 2786                                    u1311 2CB6  
                                  u2031 1410                                    u1208 2A84  
                                  u1080 27A6                                    u1081 27A2  
                                  u1410 2296                                    u1411 2292  
                                  u2107 1022                                    u1420 269E  
                                  u1260 2614                                    u1421 269A  
                                  u1261 2610                                    u2117 1052  
                                  u1190 2A82                                    u1350 1966  
                                  u1430 26D4                                    u1270 2656  
                                  u1191 2A7A                                    u1351 1962  
                                  u1431 26D0                                    u1271 2652  
                                  u2207 262A                                    u2127 107E  
                                  u2047 136C                                    u1440 27F0  
                                  u1360 19BA                                    u1280 24A4  
                          _BAUD4CONbits 000EE9                                    u1441 27EC  
                                  u1361 19B6                                    u2217 251C  
                                  u1281 24A0                                    u2137 10C2  
                                  u2057 2B2C                                    u1450 281E  
                                  u1370 1A3A                                    u1290 23F6  
                                  u1610 22AA                                    u1451 281A  
                                  u1371 1A36                                    u2227 198C  
                                  u1291 23F2                                    u2147 10F2  
                                  u2067 0E8A                                    u1611 22A6  
                                  u1380 1ABA                                    u1700 1B7A  
                                  u1620 22BC                                    u1381 1AB6  
                                  u2237 1A0C                                    u2157 23AC  
                                  u2077 0F0A                                    u1701 1B76  
                                  u1621 22B8                                    u1390 2B7A  
                                  u1710 1BA4                                    u1630 22E4  
                                  u2247 1A8C                                    u2167 2400  
                                  u2087 0F76                                    u1391 2B76  
                                  u1711 1BA0                                    u1631 22E0  
                                  u1720 1BE4                                    u1640 231A  
                                  u1800 26E6                                    u2177 245A  
                                  u2097 0FF6                                    u1721 1BE0  
                                  u1641 2316                                    u1801 26E2  
                                  u1730 1C2E                                    u1650 2A56  
                                  u1810 273C                                    _T2PR 000FBC  
                                  u2187 24AE                                    u1731 1C2A  
                                  u1651 2A52                                    u1811 2738  
                                  u1660 2AB4                                    u1740 1DEE  
                                  u1900 1692                                    u1820 148C  
                                  u2197 25E8                                    u1661 2AB0  
                                  u1741 1DEA                                    u1901 168E  
                                  u1821 1486                                    u1670 1AFA  
                                  u1750 1E20                                    u1910 16A2  
                                  u1830 148E                                    u1671 1AF6  
                                  u1751 1E1C                                    u1911 169E  
                                  u1680 1B2C                                    u1760 1E5E  
                                  u1840 14A0                                    u1920 1F68  
                                  u1681 1B28                                    u1761 1E5A  
                                  u1841 149C                                    u1921 1F64  
                                  u1770 1E88                                    u1850 14DC  
                                  u1930 1FB8                                    u1691 1B56  
                                  u1771 1E84                                    u1851 14D8  
                                  u1931 1FB4                                    u1780 1EB6  
                                  u1860 1508                                    u1940 1FD8  
                                  u1781 1EB2                                    u1861 1504  
                                  u1941 1FD4                                    u1790 1EFE  
                                  u1870 151E                                    u1950 2876  
                                  u1791 1EFA                                    u1871 151A  
                                  u1951 2872                                    u1960 1900  
                                  u1880 165A                                    u1961 18FC  
                                  u1881 1656                                    u1890 1678  
                                  u1970 1230                                    u1891 1674  
                                  u1971 122C                                    u1980 12FC  
                                  u1981 12F8                                    u1990 1312  
                                  u1991 130E              normalise_readings@red_read 001D  
                                  abs@a 0017                                    _dbuf 023C  
                                  _main 117C                                    _dtoa 145C  
                                  _prec 00EE                                    pad@i 001C  
                                  pad@p 0019                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001E  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 25D2                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0076  
                       card_response@mL 0089                         card_response@mR 008B  
                __end_of_color_read_Red 2974                         __end_of_HighISR 0076  
                  _response_in_progress 00F2             normalise_readings@blue_read 0021  
                          ___param_bank 000000                                   ??_abs 0019  
                                 ??_pad 001B                             _turnRight45 2362  
                       __end_of___aodiv 1C70                                   ?_main 0001  
                                 ?_dtoa 0020                         __end_of___aomod 1F40  
                                 ?_stop 0018                         __end_of___lwdiv 27C6  
                                 i2l151 2D44                                   i2l160 2D12  
                                 i2l145 2BF8                                   i2l148 2C1E  
                                 i2l157 2D3A                                   i2l506 2CEA  
                                 i2l493 0072                            vfpfcnvrt@fmt 0045  
               ?_enable_color_interrupt 0001                            main@red_read 01D3  
               __end_of_sendCharSerial4 2CC0              __end_of_I2C_2_Master_Start 2D32  
            __end_of_I2C_2_Master_Write 2D08                                   _flags 00F4  
                                 _fputc 2298                                   _fputs 2A14  
                                 pad@fp 0015          determine_card@master_closeness 0005  
               ??_make_master_closeness 0018                                   _width 00EC  
                                 _putch 2D46                                   main@i 01D9  
                                 dtoa@d 0022                                   dtoa@i 0041  
                                 dtoa@n 0038                                   dtoa@p 0034  
                                 dtoa@s 0040                                   dtoa@w 0036  
                   normalise_readings@i 0031                                   tablat 000FF5  
                                 ttemp5 005C                                   ttemp6 005F  
                                 ttemp7 0063                                   status 000FD8  
                                 wtemp8 005C                         __end_of_sprintf 28D4  
        card_response@normalised_values 008D                        card_response@buf 007F  
               __end_of_color_read_Blue 2A14                   _I2C_2_Master_RepStart 2D14  
                       ?_color_read_Red 0009                         __initialization 2B7C  
                          __end_of_main 145C                            __end_of_dtoa 16DA  
                          __end_of_stop 2658          __end_of_enable_color_interrupt 2CFC  
                                ??_main 00D6                                  ??_dtoa 002A  
                                ??_stop 001C                           __activetblptr 000003  
                         main@blue_read 01D7                            ?_setMotorPWM 0012  
                                ?_fputc 0005                                  ?_fputs 000E  
                                _CCPR1H 000FAA                                  _CCPR2H 000FA6  
                                _CCPR3H 000F25                                  _CCPR4H 000F21  
          collect_avg_readings@red_read 0010                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i2l3211 000A  
                                i2l3221 0050                                  i2l3213 001A  
                                i2l3223 0052                                  i2l3215 002E  
                                i2l3225 006A                                  i2l3217 0036  
                                i2l3067 2CD6                                  i2l3227 006E  
                                i2l3219 0038                                  i2l2671 2C08  
                                i2l2669 2BF8                                  i2l2951 2D3C  
                                i2l2953 2D40                                  i2l2961 2D0E  
                                i2l2955 2D32                                  _RG6PPS 000E88  
                                i2l2957 2D36                                  i2l2959 2D0A  
                             ??_HighISR 0003                __end_of_color_click_init 2B4C  
                make_master_closeness@i 002C                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0055                               ??___aodiv 0015  
                             ??___aomod 0015                                  ___wmul 2C20  
                    _normalise_readings 16DA                               ??___lwdiv 000F  
                                clear_0 2B82                                  clear_1 2B8E  
                                isa$std 000001                                  pad@buf 0017  
                                dtoa@fp 0020            __end_of_clear_interrupt_flag 2CD6  
                   ?_normalise_readings 001B                                  fputc@c 0005  
                                fputs@c 0012                                  fputs@i 0013  
                                fputs@s 000E                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                                putch@c 0001                        __end_of_vfprintf 2882  
                                stop@mL 0018                                  stop@mR 001A  
                     ??_initDCmotorsPWM 0005                               ??_sprintf 0057  
               ?i2_clear_interrupt_flag 0001                       card_response@card 00D5  
                            __accesstop 0060                 __end_of__initialization 2B9C  
              __end_of_color_read_Clear 2924                __end_of_color_read_Green 29C4  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0027  
                         ___rparam_used 000001                        ?_color_read_Blue 0009  
                       _Interrupts_init 2ADA            __end_of_collect_avg_readings 1AE8  
                        __pcstackCOMRAM 0001                        _reverseFullSpeed 24BE  
            collect_avg_readings@i_1596 001A              collect_avg_readings@i_1597 001C  
            collect_avg_readings@i_1598 001E                 _set_interrupt_threshold 27C6  
                         __end_of_fputc 2362                           __end_of_fputs 2A58  
                         __end_of_putch 2D48                          main@clear_read 01D1  
        __end_ofi2_clear_interrupt_flag 2CEC                                 ??_fputc 0009  
                               ??_fputs 0012                                 ??_putch 0005  
                            __pbssBANK0 00D8                              __pbssBANK2 0200  
                     _color_writetoaddr 2C88                            _T2CLKCONbits 000FBF  
                      motor_response@mL 0020                        motor_response@mR 0022  
                    ?_color_writetoaddr 0007                                 ?___wmul 0005  
                    motor_response@card 0026                            ?_turnRight45 0018  
                   ??_color_writetoaddr 0008                                 _INT1PPS 000DF1  
                        main@green_read 01D5                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5             set_interrupt_threshold@AIHT 000B  
           set_interrupt_threshold@AILT 0009                 __end_of_Interrupts_init 2B18  
                color_writetoaddr@value 0007                        ??_color_read_Red 000B  
         __end_of_make_master_closeness 2298                                 _HighISR 0008  
        determine_card@predicted_colour 000D               __end_of_color_writetoaddr 2CA8  
                  _clear_interrupt_flag 2CC0                      _I2C_2_Master_Start 2D28  
                            _initUSART4 2C68                     i2_I2C_2_Master_Idle 2BF8  
                    _I2C_2_Master_Write 2CFC                                 __Hparam 0000  
                   i2_I2C_2_Master_Stop 2D32                                 __Lparam 0000  
                     color_read_Red@tmp 000E               ??_set_interrupt_threshold 000F  
make_master_closeness@normalised_values 0014                 sendStringSerial4@string 0006  
                     reverseFullSpeed@i 001D                                 ___aodiv 1AE8  
                               ___aomod 1DDC                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 2752                     ?_I2C_2_Master_Write 0001  
                             ?_vfprintf 0060                            __psmallconst 0E00  
                          turnLeft45@mL 0018                            turnLeft45@mR 001A  
                               __pcinit 2B7C                                 __ramtop 0E00  
                               __ptext0 117C                                 __ptext1 2C68  
                               __ptext2 254A                                 __ptext3 28D4  
                               __ptext4 2B18                                 __ptext5 2BA6  
                               __ptext6 209E                                 __ptext7 2882  
                               __ptext8 282E                                 __ptext9 1F40  
                  ?i2_I2C_2_Master_Idle 0001                               _T2CONbits 000FBD  
                  ?i2_I2C_2_Master_Stop 0001                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 1902  
                               main@buf 0100                                 _sprintf 2882  
                  ??_I2C_2_Master_Start 0006                    ??_I2C_2_Master_Write 0006  
                  end_of_initialization 2B9C          collect_avg_readings@green_read 0012  
                 normalise_readings@buf 001B                                 fputc@fp 0007  
                               fputs@fp 0010                       ?_color_click_init 0001  
                          turnRight45@i 001E                   ?_clear_interrupt_flag 0001  
                    ??_color_click_init 0009                           _card_detected 00F0  
                     __end_of_vfpfcnvrt 209E                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004B  
                            ??_vfprintf 0055                         _initDCmotorsPWM 254A  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0017  
                 ??i2_I2C_2_Master_Idle 0001                   ??i2_I2C_2_Master_Stop 0002  
     normalise_readings@expected_values 0023         __end_of_set_interrupt_threshold 282E  
                         _card_response 209E                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0016                               _TRISBbits 000F82  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 0010                __end_of_reverseFullSpeed 254A  
                            main@i_1290 01CD                              main@i_1292 01CF  
                   main@expected_values 0196                color_writetoaddr@address 0008  
               ??_I2C_2_Master_RepStart 0006                        ?_Interrupts_init 0001  
                           _CCP1CONbits 000FAB                       ?_color_read_Clear 0009  
                          _EUSART4RXbuf 00D8                            _EUSART4TXbuf 0200  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0009  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0005  
                            main@motorL 01DA                              main@motorR 01E3  
                    ??_color_read_Clear 000B                      ??_color_read_Green 000B  
                            _turnLeft45 2410                             vfpfcnvrt@ap 0047  
                           vfpfcnvrt@cp 0053                             vfpfcnvrt@fp 0043  
                        __end_of___wmul 2C46                         determine_card@i 000E  
                        ?_card_response 007F                     color_read_Clear@tmp 000E  
                   start_initialization 2B7C                             __end_of_abs 2ADA  
                           __end_of_pad 2752                           _TxBufWriteCnt 0058  
                         ??_LEDSon_init 0005                  ??_clear_interrupt_flag 0007  
                   color_read_Green@tmp 000E                 __end_of_initDCmotorsPWM 25D2  
                           vfprintf@fmt 0062                ??_enable_color_interrupt 0009  
                              ??___wmul 0009           i2I2C_2_Master_Write@data_byte 0002  
                        _determine_card 2658            __end_ofi2_I2C_2_Master_Start 2D46  
          __end_ofi2_I2C_2_Master_Write 2D14                             __pbssCOMRAM 0057  
                ??_collect_avg_readings 0016                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                        ___aodiv@dividend 0005  
                        _motor_response 0E66                                ?_HighISR 0001  
                   __end_of_LEDSon_init 2C68                        ___lwdiv@dividend 000B  
                             _dtoa$2581 0032                             ?_turnLeft45 0018  
                             __pintcode 0008                                ?___aodiv 0005  
                              ?___aomod 0005                        ___aodiv@quotient 0017  
                __end_of_determine_card 26D8                                ?___lwdiv 000B  
                  I2C_2_Master_Read@ack 0007                         ??_card_response 0057  
                  I2C_2_Master_Read@tmp 0008                             __smallconst 0E00  
                     _I2C_2_Master_Idle 2BD0                       _I2C_2_Master_Init 2BA6  
                     _I2C_2_Master_Read 2A58                       _I2C_2_Master_Stop 2D1E  
                          _RxBufReadCnt 0059            normalise_readings@difference 002F  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0014  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                __end_of_motor_response 117C                             turnLeft45@i 001E  
                              ?_sprintf 0066                       _sendStringSerial4 2B4C  
                   ??_I2C_2_Master_Idle 0005                     ??_I2C_2_Master_Init 0005  
                   ??_I2C_2_Master_Read 0006      set_interrupt_threshold@persistence 000D  
                        ___wmul@product 0009                                _LATAbits 000F79  
                   ??_I2C_2_Master_Stop 0006                                _LATDbits 000F7C  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                                _IPR0bits 000E1F  
                              _PIE0bits 000E29                      ?_sendStringSerial4 0006  
                              _PIE4bits 000E2D                   _make_master_closeness 21C4  
                              i2u133_40 2C08                                i2u133_41 2C04  
                              i2u134_40 2C1E                                i2u134_41 2C1A  
                              i2u160_40 002E                                i2u160_41 002A  
                              i2u225_47 0042                                i2u226_47 005C  
                              i2u159_40 001A                                i2u159_41 0016  
                              _PIR0bits 000E33                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0005  
              make_master_closeness@buf 0012                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0008                                _SSP2STAT 000ED8  
                       ?_determine_card 0005                               _vfpfcnvrt 1F40  
             __end_of_I2C_2_Master_Idle 2BF8               __end_of_I2C_2_Master_Init 2BD0  
             __end_of_I2C_2_Master_Read 2A9A                       ___wmul@multiplier 0005  
             __end_of_I2C_2_Master_Stop 2D28                ??i2_clear_interrupt_flag 0003  
                          setMotorPWM@m 0012             I2C_2_Master_Write@data_byte 0006  
          normalise_readings@green_read 001F                       ??_color_read_Blue 000B  
                          _TxBufReadCnt 0057                         ?_motor_response 0020  
                     ?_reverseFullSpeed 0018               __end_of_sendStringSerial4 2B7C  
                           _LEDSon_init 2C46                      ??_reverseFullSpeed 001C  
         __end_of_I2C_2_Master_RepStart 2D1E                      color_read_Blue@tmp 000E  
              ?_set_interrupt_threshold 0009                     __end_of_setMotorPWM 1DDC  
                          ??_initUSART4 0005                    i2_I2C_2_Master_Start 2D3C  
                  i2_I2C_2_Master_Write 2D08                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0016  
           __end_ofi2_I2C_2_Master_Idle 2C20                      reverseFullSpeed@mL 0018  
                    reverseFullSpeed@mR 001A             __end_ofi2_I2C_2_Master_Stop 2D3C  
                            ?_vfpfcnvrt 0043                         ___aodiv@divisor 000D  
                       ___aodiv@counter 0015                              _ANSELBbits 000E9A  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0068                         ___lwdiv@divisor 000D  
                    __end_of_initUSART4 2C88                         ___lwdiv@counter 0011  
                              __ptext10 145C                                __ptext11 26D8  
                              __ptext20 2A9A                                __ptext12 2A14  
                              __ptext21 0E66                                __ptext13 2298  
                _enable_color_interrupt 2CEC                                __ptext30 2658  
                              __ptext22 2362                                __ptext14 2D46  
                              __ptext31 1902                                __ptext23 2410  
                              __ptext15 1DDC                                __ptext40 2CEC  
                              __ptext32 2924                                __ptext24 25D2  
                              __ptext16 1AE8                                __ptext41 2C88  
                              __ptext33 2974                                __ptext25 24BE  
                              __ptext17 2B4C                                __ptext50 2D32  
                              __ptext42 2CC0                                __ptext34 29C4  
                              __ptext26 1C70                                __ptext18 2CA8  
                              __ptext51 2D3C                                __ptext43 2CFC  
                              __ptext35 2D14                                __ptext27 2C20  
                              __ptext19 16DA                                __ptext52 2BF8  
                              __ptext44 2D1E                                __ptext36 2A58  
                              __ptext28 21C4                                __ptext45 2D28  
                              __ptext37 2C46                                __ptext29 2752  
                              __ptext46 2BD0                                __ptext38 2ADA  
                              __ptext39 27C6                                __ptext48 2CD6  
                              __ptext49 2D08                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0012  
                 ?i2_I2C_2_Master_Start 0001                   ?i2_I2C_2_Master_Write 0001  
                              isa$xinst 000000                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 282E  
                         ??_turnRight45 001C                        ___aomod@dividend 0005  
                 collect_avg_readings@i 0018                              _INTCONbits 000FF2  
          _set_interrupt_threshold$2062 000F            _set_interrupt_threshold$2063 0010  
                           _setMotorPWM 1C70           collect_avg_readings@blue_read 0014  
                         turnRight45@mL 0018                           turnRight45@mR 001A  
                              intlevel2 0000                               sprintf@ap 0072  
            __end_of_normalise_readings 1902            card_response@expected_values 0087  
               card_response@green_read 0083                            ??_turnLeft45 001C  
        determine_card@current_smallest 000B                         ___aomod@divisor 000D  
                           ??_vfpfcnvrt 0049                         ___aomod@counter 0015  
                card_response@blue_read 0085                        _color_click_init 2B18  
         card_response@master_closeness 00C3                                sprintf@f 0074  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                     __end_of_turnRight45 2410  
                    __end_of_turnLeft45 24BE                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0016                         _sendCharSerial4 2CA8  
                ??i2_I2C_2_Master_Start 0002                  ??i2_I2C_2_Master_Write 0002  
                i2_clear_interrupt_flag 2CD6                   card_response@red_read 0081  
                          ___aomod@sign 0016                        ??_determine_card 0007  
                          main@PWMcycle 01CC  
