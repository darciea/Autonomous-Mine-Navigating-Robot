

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 30 00:48:17 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	text15,global,reloc=2,class=CODE,delta=1
    23                           	psect	text16,global,reloc=2,class=CODE,delta=1
    24                           	psect	text17,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29   000000                     
    30                           ; Version 2.35
    31                           ; Generated 05/05/2021 GMT
    32                           ; 
    33                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F67K40 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65   000000                     _LATHbits	set	3968
    66   000000                     _LATGbits	set	3967
    67   000000                     _TRISAbits	set	3969
    68   000000                     _TRISFbits	set	3974
    69   000000                     _TRISDbits	set	3972
    70   000000                     _TRISGbits	set	3975
    71   000000                     _SSP2CON2bits	set	3802
    72   000000                     _SSP2CLKPPS	set	3612
    73   000000                     _SSP2DATPPS	set	3613
    74   000000                     _RC7PPS	set	3689
    75   000000                     _RE2PPS	set	3700
    76   000000                     _TRISCbits	set	3971
    77   000000                     _TRISEbits	set	3973
    78   000000                     _TRISHbits	set	3976
    79   000000                     _T2PR	set	4028
    80   000000                     _T2CONbits	set	4029
    81   000000                     _CCPR2H	set	4006
    82   000000                     _CCPR1H	set	4010
    83   000000                     _RE4PPS	set	3702
    84   000000                     _RG6PPS	set	3720
    85   000000                     _RD5PPS	set	3695
    86   000000                     _ANSELDbits	set	3751
    87   000000                     _SSP2ADD	set	3798
    88   000000                     _SSP2CON1bits	set	3801
    89   000000                     _CCPR4H	set	3873
    90   000000                     _CCPR3H	set	3877
    91   000000                     _T2CLKCONbits	set	4031
    92   000000                     _T2HLTbits	set	4030
    93   000000                     _CCP1CONbits	set	4011
    94   000000                     _CCPTMRS0bits	set	4013
    95   000000                     _CCP2CONbits	set	4007
    96   000000                     _LATAbits	set	3961
    97   000000                     _LATDbits	set	3964
    98   000000                     _CCP3CONbits	set	3878
    99   000000                     _CCP4CONbits	set	3874
   100   000000                     _SSP2CON2	set	3802
   101   000000                     _SSP2STAT	set	3800
   102   000000                     _SSP2BUF	set	3797
   103   000000                     _RD6PPS	set	3696
   104   000000                     _LATFbits	set	3966
   105                           
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109   01F724                     __pcinit:
   110                           	callstack 0
   111   01F724                     start_initialization:
   112                           	callstack 0
   113   01F724                     __initialization:
   114                           	callstack 0
   115   01F724                     end_of_initialization:
   116                           	callstack 0
   117   01F724                     __end_of__initialization:
   118                           	callstack 0
   119   01F724  0100               	movlb	0
   120   01F726  EFE8  F0FD         	goto	_main	;jump to C main() function
   121                           
   122                           	psect	cstackCOMRAM
   123   000001                     __pcstackCOMRAM:
   124                           	callstack 0
   125   000001                     ??_I2C_2_Master_Idle:
   126   000001                     ?___wmul:
   127                           	callstack 0
   128   000001                     ___wmul@multiplier:
   129                           	callstack 0
   130                           
   131                           ; 2 bytes @ 0x0
   132   000001                     	ds	1
   133   000002                     I2C_2_Master_Write@data_byte:
   134                           	callstack 0
   135                           
   136                           ; 1 bytes @ 0x1
   137   000002                     	ds	1
   138   000003                     color_writetoaddr@value:
   139                           	callstack 0
   140   000003                     ___wmul@multiplicand:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x2
   144   000003                     	ds	1
   145   000004                     color_writetoaddr@address:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x3
   149   000004                     	ds	1
   150   000005                     ??_color_click_init:
   151   000005                     ___wmul@product:
   152                           	callstack 0
   153                           
   154                           ; 2 bytes @ 0x4
   155   000005                     	ds	2
   156   000007                     ?___lwdiv:
   157                           	callstack 0
   158   000007                     ___lwdiv@dividend:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0x6
   162   000007                     	ds	2
   163   000009                     ___lwdiv@divisor:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x8
   167   000009                     	ds	2
   168   00000B                     ___lwdiv@quotient:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0xA
   172   00000B                     	ds	2
   173   00000D                     ___lwdiv@counter:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0xC
   177   00000D                     	ds	1
   178   00000E                     setMotorPWM@m:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0xD
   182   00000E                     	ds	2
   183   000010                     ??_setMotorPWM:
   184                           
   185                           ; 1 bytes @ 0xF
   186   000010                     	ds	2
   187   000012                     setMotorPWM@posDuty:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x11
   191   000012                     	ds	1
   192   000013                     setMotorPWM@negDuty:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0x12
   196   000013                     	ds	1
   197   000014                     stop@mL:
   198                           	callstack 0
   199   000014                     turnLeft45@mL:
   200                           	callstack 0
   201   000014                     turnRight45@mL:
   202                           	callstack 0
   203                           
   204                           ; 2 bytes @ 0x13
   205   000014                     	ds	2
   206   000016                     stop@mR:
   207                           	callstack 0
   208   000016                     turnLeft45@mR:
   209                           	callstack 0
   210   000016                     turnRight45@mR:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x15
   214   000016                     	ds	2
   215   000018                     ??_stop:
   216   000018                     ??_turnLeft45:
   217   000018                     ??_turnRight45:
   218                           
   219                           ; 1 bytes @ 0x17
   220   000018                     	ds	1
   221   000019                     reverseOneSquare@mL:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0x18
   225   000019                     	ds	1
   226   00001A                     turnLeft45@i:
   227                           	callstack 0
   228   00001A                     turnRight45@i:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x19
   232   00001A                     	ds	1
   233   00001B                     reverseOneSquare@mR:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0x1A
   237   00001B                     	ds	2
   238   00001D                     ??_reverseOneSquare:
   239                           
   240                           ; 1 bytes @ 0x1C
   241   00001D                     	ds	2
   242   00001F                     reverseOneSquare@i:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x1E
   246   00001F                     	ds	2
   247   000021                     respond_to_card@mL:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0x20
   251   000021                     	ds	2
   252   000023                     respond_to_card@mR:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x22
   256   000023                     	ds	2
   257   000025                     ??_respond_to_card:
   258                           
   259                           ; 1 bytes @ 0x24
   260   000025                     	ds	2
   261   000027                     respond_to_card@card:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x26
   265   000027                     	ds	1
   266   000028                     ??_main:
   267                           
   268                           ; 1 bytes @ 0x27
   269   000028                     	ds	2
   270   00002A                     main@card:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x29
   274   00002A                     	ds	1
   275   00002B                     main@PWMcycle:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x2A
   279   00002B                     	ds	1
   280   00002C                     main@motorL:
   281                           	callstack 0
   282                           
   283                           ; 9 bytes @ 0x2B
   284   00002C                     	ds	9
   285   000035                     main@motorR:
   286                           	callstack 0
   287                           
   288                           ; 9 bytes @ 0x34
   289   000035                     	ds	9
   290                           
   291 ;;
   292 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   293 ;;
   294 ;; *************** function _main *****************
   295 ;; Defined at:
   296 ;;		line 18 in file "main.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;  normalised_v   24    0        unsigned char [3][8]
   301 ;;  expected_val   24    0        unsigned char [3][8]
   302 ;;  motorR          9   52[COMRAM] struct DC_motor
   303 ;;  motorL          9   43[COMRAM] struct DC_motor
   304 ;;  master_close    8    0        unsigned char [8]
   305 ;;  PWMcycle        1   42[COMRAM] unsigned char 
   306 ;;  card            1   41[COMRAM] enum E14250
   307 ;;  blue_read       1    0        unsigned char 
   308 ;;  green_read      1    0        unsigned char 
   309 ;;  red_read        1    0        unsigned char 
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   320 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   322 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   323 ;;Total ram usage:       22 bytes
   324 ;; Hardware stack levels required when called: 5
   325 ;; This function calls:
   326 ;;		_I2C_2_Master_Init
   327 ;;		_LEDSon_init
   328 ;;		_color_click_init
   329 ;;		_initDCmotorsPWM
   330 ;;		_respond_to_card
   331 ;;		_reverseOneSquare
   332 ;;		_setMotorPWM
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           	psect	text0
   339   01FBD0                     __ptext0:
   340                           	callstack 0
   341   01FBD0                     _main:
   342                           	callstack 26
   343   01FBD0                     
   344                           ;main.c: 23:     LEDSon_init();
   345   01FBD0  ECB5  F0FB         	call	_LEDSon_init	;wreg free
   346   01FBD4                     
   347                           ;main.c: 24:     I2C_2_Master_Init();
   348   01FBD4  ECED  F0FB         	call	_I2C_2_Master_Init	;wreg free
   349   01FBD8                     
   350                           ;main.c: 25:     color_click_init();
   351   01FBD8  EC02  F0FC         	call	_color_click_init	;wreg free
   352   01FBDC                     
   353                           ;main.c: 26:     initDCmotorsPWM();
   354   01FBDC  EC56  F0FC         	call	_initDCmotorsPWM	;wreg free
   355   01FBE0                     
   356                           ;main.c: 34:     unsigned char PWMcycle = T2PR;
   357   01FBE0  CFBC F02B          	movff	4028,main@PWMcycle	;volatile
   358   01FBE4                     
   359                           ;main.c: 36:     struct DC_motor motorL, motorR;;main.c: 38:     motorL.power=0;
   360   01FBE4  0E00               	movlw	0
   361   01FBE6  6E2C               	movwf	main@motorL^0,c
   362   01FBE8                     
   363                           ;main.c: 39:     motorL.direction=1;
   364   01FBE8  0E01               	movlw	1
   365   01FBEA  6E2D               	movwf	(main@motorL+1)^0,c
   366   01FBEC                     
   367                           ;main.c: 40:     motorL.brakemode=1;
   368   01FBEC  0E01               	movlw	1
   369   01FBEE  6E2E               	movwf	(main@motorL+2)^0,c
   370   01FBF0                     
   371                           ;main.c: 41:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   372   01FBF0  0EAA               	movlw	170
   373   01FBF2  6E31               	movwf	(main@motorL+5)^0,c
   374   01FBF4  0E0F               	movlw	15
   375   01FBF6  6E32               	movwf	(main@motorL+6)^0,c
   376   01FBF8                     
   377                           ;main.c: 42:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   378   01FBF8  0EA6               	movlw	166
   379   01FBFA  6E33               	movwf	(main@motorL+7)^0,c
   380   01FBFC  0E0F               	movlw	15
   381   01FBFE  6E34               	movwf	(main@motorL+8)^0,c
   382   01FC00                     
   383                           ;main.c: 43:     motorL.PWMperiod=PWMcycle;
   384   01FC00  C02B  F02F         	movff	main@PWMcycle,main@motorL+3
   385   01FC04  6A30               	clrf	(main@motorL+4)^0,c
   386   01FC06                     
   387                           ;main.c: 45:     motorR.power=0;
   388   01FC06  0E00               	movlw	0
   389   01FC08  6E35               	movwf	main@motorR^0,c
   390   01FC0A                     
   391                           ;main.c: 46:     motorR.direction=1;
   392   01FC0A  0E01               	movlw	1
   393   01FC0C  6E36               	movwf	(main@motorR+1)^0,c
   394   01FC0E                     
   395                           ;main.c: 47:     motorR.brakemode=1;
   396   01FC0E  0E01               	movlw	1
   397   01FC10  6E37               	movwf	(main@motorR+2)^0,c
   398                           
   399                           ;main.c: 48:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   400   01FC12  0E25               	movlw	37
   401   01FC14  6E3A               	movwf	(main@motorR+5)^0,c
   402   01FC16  0E0F               	movlw	15
   403   01FC18  6E3B               	movwf	(main@motorR+6)^0,c
   404                           
   405                           ;main.c: 49:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   406   01FC1A  0E21               	movlw	33
   407   01FC1C  6E3C               	movwf	(main@motorR+7)^0,c
   408   01FC1E  0E0F               	movlw	15
   409   01FC20  6E3D               	movwf	(main@motorR+8)^0,c
   410   01FC22                     
   411                           ;main.c: 50:     motorR.PWMperiod=PWMcycle;
   412   01FC22  C02B  F038         	movff	main@PWMcycle,main@motorR+3
   413   01FC26  6A39               	clrf	(main@motorR+4)^0,c
   414   01FC28                     
   415                           ;main.c: 52:     setMotorPWM(&motorL);
   416   01FC28  0E2C               	movlw	low main@motorL
   417   01FC2A  6E0E               	movwf	setMotorPWM@m^0,c
   418   01FC2C  0E00               	movlw	high main@motorL
   419   01FC2E  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   420   01FC30  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   421   01FC34                     
   422                           ;main.c: 53:     setMotorPWM(&motorR);
   423   01FC34  0E35               	movlw	low main@motorR
   424   01FC36  6E0E               	movwf	setMotorPWM@m^0,c
   425   01FC38  0E00               	movlw	high main@motorR
   426   01FC3A  6E0F               	movwf	(setMotorPWM@m+1)^0,c
   427   01FC3C  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   428   01FC40                     
   429                           ;main.c: 103:     card = GREEN;
   430   01FC40  0E01               	movlw	1
   431   01FC42  6E2A               	movwf	main@card^0,c
   432   01FC44                     
   433                           ;main.c: 110:     LATDbits.LATD7=1;
   434   01FC44  8E7C               	bsf	124,7,c	;volatile
   435   01FC46                     
   436                           ;main.c: 111:     TRISDbits.TRISD7=0;
   437   01FC46  9E84               	bcf	132,7,c	;volatile
   438   01FC48                     l1500:
   439                           
   440                           ;main.c: 114:         LATDbits.LATD4 = 1;
   441   01FC48  887C               	bsf	124,4,c	;volatile
   442   01FC4A                     
   443                           ;main.c: 115:         respond_to_card(card, &motorL, &motorR);
   444   01FC4A  0E2C               	movlw	low main@motorL
   445   01FC4C  6E21               	movwf	respond_to_card@mL^0,c
   446   01FC4E  0E00               	movlw	high main@motorL
   447   01FC50  6E22               	movwf	(respond_to_card@mL+1)^0,c
   448   01FC52  0E35               	movlw	low main@motorR
   449   01FC54  6E23               	movwf	respond_to_card@mR^0,c
   450   01FC56  0E00               	movlw	high main@motorR
   451   01FC58  6E24               	movwf	(respond_to_card@mR+1)^0,c
   452   01FC5A  502A               	movf	main@card^0,w,c
   453   01FC5C  EC01  F0FF         	call	_respond_to_card
   454   01FC60                     
   455                           ;main.c: 116:         reverseOneSquare(&motorL, &motorR);
   456   01FC60  0E2C               	movlw	low main@motorL
   457   01FC62  6E19               	movwf	reverseOneSquare@mL^0,c
   458   01FC64  0E00               	movlw	high main@motorL
   459   01FC66  6E1A               	movwf	(reverseOneSquare@mL+1)^0,c
   460   01FC68  0E35               	movlw	low main@motorR
   461   01FC6A  6E1B               	movwf	reverseOneSquare@mR^0,c
   462   01FC6C  0E00               	movlw	high main@motorR
   463   01FC6E  6E1C               	movwf	(reverseOneSquare@mR+1)^0,c
   464   01FC70  EC8C  F0FD         	call	_reverseOneSquare	;wreg free
   465   01FC74                     
   466                           ;main.c: 119:         _delay((unsigned long)((3000)*(64000000/4000.0)));
   467   01FC74  0EF4               	movlw	244
   468   01FC76  6E29               	movwf	(??_main+1)^0,c
   469   01FC78  0E82               	movlw	130
   470   01FC7A  6E28               	movwf	??_main^0,c
   471   01FC7C  0E05               	movlw	5
   472   01FC7E                     u277:
   473   01FC7E  2EE8               	decfsz	wreg,f,c
   474   01FC80  D7FE               	bra	u277
   475   01FC82  2E28               	decfsz	??_main^0,f,c
   476   01FC84  D7FC               	bra	u277
   477   01FC86  2E29               	decfsz	(??_main+1)^0,f,c
   478   01FC88  D7FA               	bra	u277
   479   01FC8A  F000               	nop	
   480   01FC8C                     
   481                           ;main.c: 120:         LATFbits.LATF0 = 1;
   482   01FC8C  807E               	bsf	126,0,c	;volatile
   483   01FC8E  EF24  F0FE         	goto	l1500
   484   01FC92  EF00  F000         	goto	start
   485   01FC96                     __end_of_main:
   486                           	callstack 0
   487                           
   488 ;; *************** function _respond_to_card *****************
   489 ;; Defined at:
   490 ;;		line 70 in file "colour_identify.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;  card            1    wreg     enum E14551
   493 ;;  mL              2   32[COMRAM] PTR struct DC_motor
   494 ;;		 -> main@motorL(9), 
   495 ;;  mR              2   34[COMRAM] PTR struct DC_motor
   496 ;;		 -> main@motorR(9), 
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  card            1   38[COMRAM] enum E14551
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   511 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   512 ;;Total ram usage:        7 bytes
   513 ;; Hardware stack levels used: 1
   514 ;; Hardware stack levels required when called: 4
   515 ;; This function calls:
   516 ;;		_reverseOneSquare
   517 ;;		_stop
   518 ;;		_turnLeft45
   519 ;;		_turnRight45
   520 ;; This function is called by:
   521 ;;		_main
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text1
   526   01FE02                     __ptext1:
   527                           	callstack 0
   528   01FE02                     _respond_to_card:
   529                           	callstack 26
   530                           
   531                           ;incstack = 0
   532                           ;respond_to_card@card stored from wreg
   533   01FE02  6E27               	movwf	respond_to_card@card^0,c
   534   01FE04                     
   535                           ;colour_identify.c: 72:     switch (card){
   536   01FE04  EFCE  F0FF         	goto	l1430
   537   01FE08                     l1414:
   538                           
   539                           ;colour_identify.c: 74:             turnRight45(mL,mR);
   540   01FE08  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   541   01FE0C  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   542   01FE10  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   543   01FE14  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   544   01FE18  ECDF  F0FC         	call	_turnRight45	;wreg free
   545                           
   546                           ;colour_identify.c: 75:             stop(mL,mR);
   547   01FE1C  C021  F014         	movff	respond_to_card@mL,stop@mL
   548   01FE20  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   549   01FE24  C023  F016         	movff	respond_to_card@mR,stop@mR
   550   01FE28  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   551   01FE2C  EC9A  F0FC         	call	_stop	;wreg free
   552                           
   553                           ;colour_identify.c: 76:             break;
   554   01FE30  EFFF  F0FF         	goto	l246
   555   01FE34                     l1416:
   556                           
   557                           ;colour_identify.c: 78:             turnLeft45(mL,mR);
   558   01FE34  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   559   01FE38  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   560   01FE3C  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   561   01FE40  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   562   01FE44  EC35  F0FD         	call	_turnLeft45	;wreg free
   563                           
   564                           ;colour_identify.c: 79:             turnLeft45(mL,mR);
   565   01FE48  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   566   01FE4C  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   567   01FE50  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   568   01FE54  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   569   01FE58  EC35  F0FD         	call	_turnLeft45	;wreg free
   570                           
   571                           ;colour_identify.c: 80:             stop(mL,mR);
   572   01FE5C  C021  F014         	movff	respond_to_card@mL,stop@mL
   573   01FE60  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   574   01FE64  C023  F016         	movff	respond_to_card@mR,stop@mR
   575   01FE68  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   576   01FE6C  EC9A  F0FC         	call	_stop	;wreg free
   577                           
   578                           ;colour_identify.c: 81:             break;
   579   01FE70  EFFF  F0FF         	goto	l246
   580   01FE74                     l1418:
   581                           
   582                           ;colour_identify.c: 83:             turnRight45(mL,mR);
   583   01FE74  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   584   01FE78  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   585   01FE7C  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   586   01FE80  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   587   01FE84  ECDF  F0FC         	call	_turnRight45	;wreg free
   588                           
   589                           ;colour_identify.c: 84:             turnRight45(mL,mR);
   590   01FE88  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   591   01FE8C  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   592   01FE90  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   593   01FE94  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   594   01FE98  ECDF  F0FC         	call	_turnRight45	;wreg free
   595                           
   596                           ;colour_identify.c: 85:             stop(mL,mR);
   597   01FE9C  C021  F014         	movff	respond_to_card@mL,stop@mL
   598   01FEA0  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   599   01FEA4  C023  F016         	movff	respond_to_card@mR,stop@mR
   600   01FEA8  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   601   01FEAC  EC9A  F0FC         	call	_stop	;wreg free
   602                           
   603                           ;colour_identify.c: 86:             break;
   604   01FEB0  EFFF  F0FF         	goto	l246
   605   01FEB4                     l1422:
   606                           
   607                           ;colour_identify.c: 94:             reverseOneSquare(mL,mR);
   608   01FEB4  C021  F019         	movff	respond_to_card@mL,reverseOneSquare@mL
   609   01FEB8  C022  F01A         	movff	respond_to_card@mL+1,reverseOneSquare@mL+1
   610   01FEBC  C023  F01B         	movff	respond_to_card@mR,reverseOneSquare@mR
   611   01FEC0  C024  F01C         	movff	respond_to_card@mR+1,reverseOneSquare@mR+1
   612   01FEC4  EC8C  F0FD         	call	_reverseOneSquare	;wreg free
   613                           
   614                           ;colour_identify.c: 95:             turnLeft45(mL,mR);
   615   01FEC8  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   616   01FECC  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   617   01FED0  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   618   01FED4  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   619   01FED8  EC35  F0FD         	call	_turnLeft45	;wreg free
   620                           
   621                           ;colour_identify.c: 96:             stop(mL,mR);
   622   01FEDC  C021  F014         	movff	respond_to_card@mL,stop@mL
   623   01FEE0  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   624   01FEE4  C023  F016         	movff	respond_to_card@mR,stop@mR
   625   01FEE8  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   626   01FEEC  EC9A  F0FC         	call	_stop	;wreg free
   627                           
   628                           ;colour_identify.c: 97:             break;
   629   01FEF0  EFFF  F0FF         	goto	l246
   630   01FEF4                     l1424:
   631                           
   632                           ;colour_identify.c: 99:             turnRight45(mL,mR);
   633   01FEF4  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   634   01FEF8  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   635   01FEFC  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   636   01FF00  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   637   01FF04  ECDF  F0FC         	call	_turnRight45	;wreg free
   638                           
   639                           ;colour_identify.c: 100:             turnRight45(mL,mR);
   640   01FF08  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   641   01FF0C  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   642   01FF10  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   643   01FF14  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   644   01FF18  ECDF  F0FC         	call	_turnRight45	;wreg free
   645                           
   646                           ;colour_identify.c: 101:             turnRight45(mL,mR);
   647   01FF1C  C021  F014         	movff	respond_to_card@mL,turnRight45@mL
   648   01FF20  C022  F015         	movff	respond_to_card@mL+1,turnRight45@mL+1
   649   01FF24  C023  F016         	movff	respond_to_card@mR,turnRight45@mR
   650   01FF28  C024  F017         	movff	respond_to_card@mR+1,turnRight45@mR+1
   651   01FF2C  ECDF  F0FC         	call	_turnRight45	;wreg free
   652                           
   653                           ;colour_identify.c: 102:             stop(mL,mR);
   654   01FF30  C021  F014         	movff	respond_to_card@mL,stop@mL
   655   01FF34  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   656   01FF38  C023  F016         	movff	respond_to_card@mR,stop@mR
   657   01FF3C  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   658   01FF40  EC9A  F0FC         	call	_stop	;wreg free
   659                           
   660                           ;colour_identify.c: 103:             break;
   661   01FF44  EFFF  F0FF         	goto	l246
   662   01FF48                     l1426:
   663                           
   664                           ;colour_identify.c: 105:             turnLeft45(mL,mR);
   665   01FF48  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   666   01FF4C  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   667   01FF50  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   668   01FF54  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   669   01FF58  EC35  F0FD         	call	_turnLeft45	;wreg free
   670                           
   671                           ;colour_identify.c: 106:             turnLeft45(mL,mR);
   672   01FF5C  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   673   01FF60  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   674   01FF64  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   675   01FF68  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   676   01FF6C  EC35  F0FD         	call	_turnLeft45	;wreg free
   677                           
   678                           ;colour_identify.c: 107:             turnLeft45(mL,mR);
   679   01FF70  C021  F014         	movff	respond_to_card@mL,turnLeft45@mL
   680   01FF74  C022  F015         	movff	respond_to_card@mL+1,turnLeft45@mL+1
   681   01FF78  C023  F016         	movff	respond_to_card@mR,turnLeft45@mR
   682   01FF7C  C024  F017         	movff	respond_to_card@mR+1,turnLeft45@mR+1
   683   01FF80  EC35  F0FD         	call	_turnLeft45	;wreg free
   684                           
   685                           ;colour_identify.c: 108:             stop(mL,mR);
   686   01FF84  C021  F014         	movff	respond_to_card@mL,stop@mL
   687   01FF88  C022  F015         	movff	respond_to_card@mL+1,stop@mL+1
   688   01FF8C  C023  F016         	movff	respond_to_card@mR,stop@mR
   689   01FF90  C024  F017         	movff	respond_to_card@mR+1,stop@mR+1
   690   01FF94  EC9A  F0FC         	call	_stop	;wreg free
   691                           
   692                           ;colour_identify.c: 109:             break;
   693   01FF98  EFFF  F0FF         	goto	l246
   694   01FF9C                     l1430:
   695   01FF9C  5027               	movf	respond_to_card@card^0,w,c
   696   01FF9E  6E25               	movwf	??_respond_to_card^0,c
   697   01FFA0  6A26               	clrf	(??_respond_to_card+1)^0,c
   698                           
   699                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   700                           ; Switch size 1, requested type "simple"
   701                           ; Number of cases is 1, Range of values is 0 to 0
   702                           ; switch strategies available:
   703                           ; Name         Instructions Cycles
   704                           ; simple_byte            4     3 (average)
   705                           ;	Chosen strategy is simple_byte
   706   01FFA2  5026               	movf	(??_respond_to_card+1)^0,w,c
   707   01FFA4  0A00               	xorlw	0	; case 0
   708   01FFA6  B4D8               	btfsc	status,2,c
   709   01FFA8  EFD8  F0FF         	goto	l1530
   710   01FFAC  EFFF  F0FF         	goto	l246
   711   01FFB0                     l1530:
   712                           
   713                           ; Switch size 1, requested type "simple"
   714                           ; Number of cases is 9, Range of values is 0 to 8
   715                           ; switch strategies available:
   716                           ; Name         Instructions Cycles
   717                           ; simple_byte           28    15 (average)
   718                           ;	Chosen strategy is simple_byte
   719   01FFB0  5025               	movf	??_respond_to_card^0,w,c
   720   01FFB2  0A00               	xorlw	0	; case 0
   721   01FFB4  B4D8               	btfsc	status,2,c
   722   01FFB6  EF04  F0FF         	goto	l1414
   723   01FFBA  0A01               	xorlw	1	; case 1
   724   01FFBC  B4D8               	btfsc	status,2,c
   725   01FFBE  EF1A  F0FF         	goto	l1416
   726   01FFC2  0A03               	xorlw	3	; case 2
   727   01FFC4  B4D8               	btfsc	status,2,c
   728   01FFC6  EF3A  F0FF         	goto	l1418
   729   01FFCA  0A01               	xorlw	1	; case 3
   730   01FFCC  B4D8               	btfsc	status,2,c
   731   01FFCE  EF04  F0FF         	goto	l1414
   732   01FFD2  0A07               	xorlw	7	; case 4
   733   01FFD4  B4D8               	btfsc	status,2,c
   734   01FFD6  EF5A  F0FF         	goto	l1422
   735   01FFDA  0A01               	xorlw	1	; case 5
   736   01FFDC  B4D8               	btfsc	status,2,c
   737   01FFDE  EF7A  F0FF         	goto	l1424
   738   01FFE2  0A03               	xorlw	3	; case 6
   739   01FFE4  B4D8               	btfsc	status,2,c
   740   01FFE6  EFA4  F0FF         	goto	l1426
   741   01FFEA  0A01               	xorlw	1	; case 7
   742   01FFEC  B4D8               	btfsc	status,2,c
   743   01FFEE  EFFF  F0FF         	goto	l246
   744   01FFF2  0A0F               	xorlw	15	; case 8
   745   01FFF4  B4D8               	btfsc	status,2,c
   746   01FFF6  EFFF  F0FF         	goto	l246
   747   01FFFA  EFFF  F0FF         	goto	l246
   748   01FFFE                     l246:
   749   01FFFE  0012               	return		;funcret
   750   020000                     __end_of_respond_to_card:
   751                           	callstack 0
   752                           
   753 ;; *************** function _turnRight45 *****************
   754 ;; Defined at:
   755 ;;		line 116 in file "dc_motor.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   758 ;;		 -> main@motorL(9), 
   759 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   760 ;;		 -> main@motorR(9), 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;  i               2   25[COMRAM] int 
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   776 ;;Total ram usage:        8 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 2
   779 ;; This function calls:
   780 ;;		_setMotorPWM
   781 ;; This function is called by:
   782 ;;		_respond_to_card
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text2
   787   01F9BE                     __ptext2:
   788                           	callstack 0
   789   01F9BE                     _turnRight45:
   790                           	callstack 27
   791   01F9BE                     
   792                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
   793   01F9BE  EE20 F001          	lfsr	2,1
   794   01F9C2  5014               	movf	turnRight45@mL^0,w,c
   795   01F9C4  26D9               	addwf	fsr2l,f,c
   796   01F9C6  5015               	movf	(turnRight45@mL+1)^0,w,c
   797   01F9C8  22DA               	addwfc	fsr2h,f,c
   798   01F9CA  0E01               	movlw	1
   799   01F9CC  6EDF               	movwf	indf2,c
   800                           
   801                           ;dc_motor.c: 119:     mR->direction=0;
   802   01F9CE  EE20 F001          	lfsr	2,1
   803   01F9D2  5016               	movf	turnRight45@mR^0,w,c
   804   01F9D4  26D9               	addwf	fsr2l,f,c
   805   01F9D6  5017               	movf	(turnRight45@mR+1)^0,w,c
   806   01F9D8  22DA               	addwfc	fsr2h,f,c
   807   01F9DA  0E00               	movlw	0
   808   01F9DC  6EDF               	movwf	indf2,c
   809   01F9DE                     
   810                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
   811   01F9DE  0E00               	movlw	0
   812   01F9E0  6E1B               	movwf	(turnRight45@i+1)^0,c
   813   01F9E2  0E00               	movlw	0
   814   01F9E4  6E1A               	movwf	turnRight45@i^0,c
   815   01F9E6                     l1364:
   816                           
   817                           ;dc_motor.c: 122:         mR->power=i;
   818   01F9E6  C016  FFD9         	movff	turnRight45@mR,fsr2l
   819   01F9EA  C017  FFDA         	movff	turnRight45@mR+1,fsr2h
   820   01F9EE  C01A  FFDF         	movff	turnRight45@i,indf2
   821                           
   822                           ;dc_motor.c: 123:         mL->power=i;
   823   01F9F2  C014  FFD9         	movff	turnRight45@mL,fsr2l
   824   01F9F6  C015  FFDA         	movff	turnRight45@mL+1,fsr2h
   825   01F9FA  C01A  FFDF         	movff	turnRight45@i,indf2
   826   01F9FE                     
   827                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
   828   01F9FE  0E02               	movlw	2
   829   01FA00  6E19               	movwf	(??_turnRight45+1)^0,c
   830   01FA02  0E38               	movlw	56
   831   01FA04  6E18               	movwf	??_turnRight45^0,c
   832   01FA06  0EAD               	movlw	173
   833   01FA08                     u287:
   834   01FA08  2EE8               	decfsz	wreg,f,c
   835   01FA0A  D7FE               	bra	u287
   836   01FA0C  2E18               	decfsz	??_turnRight45^0,f,c
   837   01FA0E  D7FC               	bra	u287
   838   01FA10  2E19               	decfsz	(??_turnRight45+1)^0,f,c
   839   01FA12  D7FA               	bra	u287
   840   01FA14  F000               	nop	
   841   01FA16                     
   842                           ;dc_motor.c: 125:         setMotorPWM(mL);
   843   01FA16  C014  F00E         	movff	turnRight45@mL,setMotorPWM@m
   844   01FA1A  C015  F00F         	movff	turnRight45@mL+1,setMotorPWM@m+1
   845   01FA1E  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   846   01FA22                     
   847                           ;dc_motor.c: 126:         setMotorPWM(mR);}
   848   01FA22  C016  F00E         	movff	turnRight45@mR,setMotorPWM@m
   849   01FA26  C017  F00F         	movff	turnRight45@mR+1,setMotorPWM@m+1
   850   01FA2A  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   851   01FA2E  0E0A               	movlw	10
   852   01FA30  261A               	addwf	turnRight45@i^0,f,c
   853   01FA32  0E00               	movlw	0
   854   01FA34  221B               	addwfc	(turnRight45@i+1)^0,f,c
   855   01FA36  BE1B               	btfsc	(turnRight45@i+1)^0,7,c
   856   01FA38  EF27  F0FD         	goto	u241
   857   01FA3C  501B               	movf	(turnRight45@i+1)^0,w,c
   858   01FA3E  E109               	bnz	u240
   859   01FA40  0E50               	movlw	80
   860   01FA42  5C1A               	subwf	turnRight45@i^0,w,c
   861   01FA44  A0D8               	btfss	status,0,c
   862   01FA46  EF27  F0FD         	goto	u241
   863   01FA4A  EF29  F0FD         	goto	u240
   864   01FA4E                     u241:
   865   01FA4E  EFF3  F0FC         	goto	l1364
   866   01FA52                     u240:
   867   01FA52                     
   868                           ;dc_motor.c: 127:     _delay((unsigned long)((45)*(64000000/4000.0)));
   869   01FA52  0E04               	movlw	4
   870   01FA54  6E19               	movwf	(??_turnRight45+1)^0,c
   871   01FA56  0EA8               	movlw	168
   872   01FA58  6E18               	movwf	??_turnRight45^0,c
   873   01FA5A  0E0C               	movlw	12
   874   01FA5C                     u297:
   875   01FA5C  2EE8               	decfsz	wreg,f,c
   876   01FA5E  D7FE               	bra	u297
   877   01FA60  2E18               	decfsz	??_turnRight45^0,f,c
   878   01FA62  D7FC               	bra	u297
   879   01FA64  2E19               	decfsz	(??_turnRight45+1)^0,f,c
   880   01FA66  D7FA               	bra	u297
   881   01FA68  0012               	return		;funcret
   882   01FA6A                     __end_of_turnRight45:
   883                           	callstack 0
   884                           
   885 ;; *************** function _turnLeft45 *****************
   886 ;; Defined at:
   887 ;;		line 101 in file "dc_motor.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   890 ;;		 -> main@motorL(9), 
   891 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   892 ;;		 -> main@motorR(9), 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  i               2   25[COMRAM] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   907 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   908 ;;Total ram usage:        8 bytes
   909 ;; Hardware stack levels used: 1
   910 ;; Hardware stack levels required when called: 2
   911 ;; This function calls:
   912 ;;		_setMotorPWM
   913 ;; This function is called by:
   914 ;;		_respond_to_card
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text3
   919   01FA6A                     __ptext3:
   920                           	callstack 0
   921   01FA6A                     _turnLeft45:
   922                           	callstack 27
   923   01FA6A                     
   924                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
   925   01FA6A  EE20 F001          	lfsr	2,1
   926   01FA6E  5014               	movf	turnLeft45@mL^0,w,c
   927   01FA70  26D9               	addwf	fsr2l,f,c
   928   01FA72  5015               	movf	(turnLeft45@mL+1)^0,w,c
   929   01FA74  22DA               	addwfc	fsr2h,f,c
   930   01FA76  0E00               	movlw	0
   931   01FA78  6EDF               	movwf	indf2,c
   932                           
   933                           ;dc_motor.c: 104:     mR->direction=1;
   934   01FA7A  EE20 F001          	lfsr	2,1
   935   01FA7E  5016               	movf	turnLeft45@mR^0,w,c
   936   01FA80  26D9               	addwf	fsr2l,f,c
   937   01FA82  5017               	movf	(turnLeft45@mR+1)^0,w,c
   938   01FA84  22DA               	addwfc	fsr2h,f,c
   939   01FA86  0E01               	movlw	1
   940   01FA88  6EDF               	movwf	indf2,c
   941   01FA8A                     
   942                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
   943   01FA8A  0E00               	movlw	0
   944   01FA8C  6E1B               	movwf	(turnLeft45@i+1)^0,c
   945   01FA8E  0E00               	movlw	0
   946   01FA90  6E1A               	movwf	turnLeft45@i^0,c
   947   01FA92                     l1342:
   948                           
   949                           ;dc_motor.c: 107:         mR->power=i;
   950   01FA92  C016  FFD9         	movff	turnLeft45@mR,fsr2l
   951   01FA96  C017  FFDA         	movff	turnLeft45@mR+1,fsr2h
   952   01FA9A  C01A  FFDF         	movff	turnLeft45@i,indf2
   953                           
   954                           ;dc_motor.c: 108:         mL->power=i;
   955   01FA9E  C014  FFD9         	movff	turnLeft45@mL,fsr2l
   956   01FAA2  C015  FFDA         	movff	turnLeft45@mL+1,fsr2h
   957   01FAA6  C01A  FFDF         	movff	turnLeft45@i,indf2
   958   01FAAA                     
   959                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
   960   01FAAA  0E02               	movlw	2
   961   01FAAC  6E19               	movwf	(??_turnLeft45+1)^0,c
   962   01FAAE  0E38               	movlw	56
   963   01FAB0  6E18               	movwf	??_turnLeft45^0,c
   964   01FAB2  0EAD               	movlw	173
   965   01FAB4                     u307:
   966   01FAB4  2EE8               	decfsz	wreg,f,c
   967   01FAB6  D7FE               	bra	u307
   968   01FAB8  2E18               	decfsz	??_turnLeft45^0,f,c
   969   01FABA  D7FC               	bra	u307
   970   01FABC  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
   971   01FABE  D7FA               	bra	u307
   972   01FAC0  F000               	nop	
   973   01FAC2                     
   974                           ;dc_motor.c: 110:         setMotorPWM(mL);
   975   01FAC2  C014  F00E         	movff	turnLeft45@mL,setMotorPWM@m
   976   01FAC6  C015  F00F         	movff	turnLeft45@mL+1,setMotorPWM@m+1
   977   01FACA  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   978   01FACE                     
   979                           ;dc_motor.c: 111:         setMotorPWM(mR);}
   980   01FACE  C016  F00E         	movff	turnLeft45@mR,setMotorPWM@m
   981   01FAD2  C017  F00F         	movff	turnLeft45@mR+1,setMotorPWM@m+1
   982   01FAD6  EC4B  F0FE         	call	_setMotorPWM	;wreg free
   983   01FADA  0E0A               	movlw	10
   984   01FADC  261A               	addwf	turnLeft45@i^0,f,c
   985   01FADE  0E00               	movlw	0
   986   01FAE0  221B               	addwfc	(turnLeft45@i+1)^0,f,c
   987   01FAE2  BE1B               	btfsc	(turnLeft45@i+1)^0,7,c
   988   01FAE4  EF7D  F0FD         	goto	u231
   989   01FAE8  501B               	movf	(turnLeft45@i+1)^0,w,c
   990   01FAEA  E109               	bnz	u230
   991   01FAEC  0E50               	movlw	80
   992   01FAEE  5C1A               	subwf	turnLeft45@i^0,w,c
   993   01FAF0  A0D8               	btfss	status,0,c
   994   01FAF2  EF7D  F0FD         	goto	u231
   995   01FAF6  EF7F  F0FD         	goto	u230
   996   01FAFA                     u231:
   997   01FAFA  EF49  F0FD         	goto	l1342
   998   01FAFE                     u230:
   999   01FAFE                     
  1000                           ;dc_motor.c: 112:     _delay((unsigned long)((40)*(64000000/4000.0)));
  1001   01FAFE  0E04               	movlw	4
  1002   01FB00  6E19               	movwf	(??_turnLeft45+1)^0,c
  1003   01FB02  0E40               	movlw	64
  1004   01FB04  6E18               	movwf	??_turnLeft45^0,c
  1005   01FB06  0E26               	movlw	38
  1006   01FB08                     u317:
  1007   01FB08  2EE8               	decfsz	wreg,f,c
  1008   01FB0A  D7FE               	bra	u317
  1009   01FB0C  2E18               	decfsz	??_turnLeft45^0,f,c
  1010   01FB0E  D7FC               	bra	u317
  1011   01FB10  2E19               	decfsz	(??_turnLeft45+1)^0,f,c
  1012   01FB12  D7FA               	bra	u317
  1013   01FB14  D000               	nop2	
  1014   01FB16  0012               	return		;funcret
  1015   01FB18                     __end_of_turnLeft45:
  1016                           	callstack 0
  1017                           
  1018 ;; *************** function _reverseOneSquare *****************
  1019 ;; Defined at:
  1020 ;;		line 146 in file "dc_motor.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1023 ;;		 -> main@motorL(9), 
  1024 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1025 ;;		 -> main@motorR(9), 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  i               2   30[COMRAM] int 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        8 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 3
  1044 ;; This function calls:
  1045 ;;		_setMotorPWM
  1046 ;;		_stop
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;;		_respond_to_card
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text4
  1054   01FB18                     __ptext4:
  1055                           	callstack 0
  1056   01FB18                     _reverseOneSquare:
  1057                           	callstack 27
  1058   01FB18                     
  1059                           ;dc_motor.c: 146: void reverseOneSquare(DC_motor *mL, DC_motor *mR);dc_motor.c: 147: {;d
      +                          c_motor.c: 148:     mL->direction=0;
  1060   01FB18  EE20 F001          	lfsr	2,1
  1061   01FB1C  5019               	movf	reverseOneSquare@mL^0,w,c
  1062   01FB1E  26D9               	addwf	fsr2l,f,c
  1063   01FB20  501A               	movf	(reverseOneSquare@mL+1)^0,w,c
  1064   01FB22  22DA               	addwfc	fsr2h,f,c
  1065   01FB24  0E00               	movlw	0
  1066   01FB26  6EDF               	movwf	indf2,c
  1067                           
  1068                           ;dc_motor.c: 149:     mR->direction=0;
  1069   01FB28  EE20 F001          	lfsr	2,1
  1070   01FB2C  501B               	movf	reverseOneSquare@mR^0,w,c
  1071   01FB2E  26D9               	addwf	fsr2l,f,c
  1072   01FB30  501C               	movf	(reverseOneSquare@mR+1)^0,w,c
  1073   01FB32  22DA               	addwfc	fsr2h,f,c
  1074   01FB34  0E00               	movlw	0
  1075   01FB36  6EDF               	movwf	indf2,c
  1076   01FB38                     
  1077                           ;dc_motor.c: 150:     for(int i=0;i<60;i+=10){
  1078   01FB38  0E00               	movlw	0
  1079   01FB3A  6E20               	movwf	(reverseOneSquare@i+1)^0,c
  1080   01FB3C  0E00               	movlw	0
  1081   01FB3E  6E1F               	movwf	reverseOneSquare@i^0,c
  1082   01FB40                     l1386:
  1083                           
  1084                           ;dc_motor.c: 151:         mL->power=i;
  1085   01FB40  C019  FFD9         	movff	reverseOneSquare@mL,fsr2l
  1086   01FB44  C01A  FFDA         	movff	reverseOneSquare@mL+1,fsr2h
  1087   01FB48  C01F  FFDF         	movff	reverseOneSquare@i,indf2
  1088                           
  1089                           ;dc_motor.c: 152:         mR->power=i;
  1090   01FB4C  C01B  FFD9         	movff	reverseOneSquare@mR,fsr2l
  1091   01FB50  C01C  FFDA         	movff	reverseOneSquare@mR+1,fsr2h
  1092   01FB54  C01F  FFDF         	movff	reverseOneSquare@i,indf2
  1093   01FB58                     
  1094                           ;dc_motor.c: 153:         setMotorPWM(mL);
  1095   01FB58  C019  F00E         	movff	reverseOneSquare@mL,setMotorPWM@m
  1096   01FB5C  C01A  F00F         	movff	reverseOneSquare@mL+1,setMotorPWM@m+1
  1097   01FB60  EC4B  F0FE         	call	_setMotorPWM	;wreg free
  1098   01FB64                     
  1099                           ;dc_motor.c: 154:         setMotorPWM(mR);
  1100   01FB64  C01B  F00E         	movff	reverseOneSquare@mR,setMotorPWM@m
  1101   01FB68  C01C  F00F         	movff	reverseOneSquare@mR+1,setMotorPWM@m+1
  1102   01FB6C  EC4B  F0FE         	call	_setMotorPWM	;wreg free
  1103   01FB70                     
  1104                           ;dc_motor.c: 155:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1105   01FB70  0ED0               	movlw	208
  1106   01FB72  6E1D               	movwf	??_reverseOneSquare^0,c
  1107   01FB74  0ECA               	movlw	202
  1108   01FB76                     u327:
  1109   01FB76  2EE8               	decfsz	wreg,f,c
  1110   01FB78  D7FE               	bra	u327
  1111   01FB7A  2E1D               	decfsz	??_reverseOneSquare^0,f,c
  1112   01FB7C  D7FC               	bra	u327
  1113   01FB7E                     
  1114                           ;dc_motor.c: 156:     }
  1115   01FB7E  0E0A               	movlw	10
  1116   01FB80  261F               	addwf	reverseOneSquare@i^0,f,c
  1117   01FB82  0E00               	movlw	0
  1118   01FB84  2220               	addwfc	(reverseOneSquare@i+1)^0,f,c
  1119   01FB86  BE20               	btfsc	(reverseOneSquare@i+1)^0,7,c
  1120   01FB88  EFCF  F0FD         	goto	u251
  1121   01FB8C  5020               	movf	(reverseOneSquare@i+1)^0,w,c
  1122   01FB8E  E109               	bnz	u250
  1123   01FB90  0E3C               	movlw	60
  1124   01FB92  5C1F               	subwf	reverseOneSquare@i^0,w,c
  1125   01FB94  A0D8               	btfss	status,0,c
  1126   01FB96  EFCF  F0FD         	goto	u251
  1127   01FB9A  EFD1  F0FD         	goto	u250
  1128   01FB9E                     u251:
  1129   01FB9E  EFA0  F0FD         	goto	l1386
  1130   01FBA2                     u250:
  1131   01FBA2                     
  1132                           ;dc_motor.c: 157:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1133   01FBA2  0E52               	movlw	82
  1134   01FBA4  6E1E               	movwf	(??_reverseOneSquare+1)^0,c
  1135   01FBA6  0E2B               	movlw	43
  1136   01FBA8  6E1D               	movwf	??_reverseOneSquare^0,c
  1137   01FBAA  0E00               	movlw	0
  1138   01FBAC                     u337:
  1139   01FBAC  2EE8               	decfsz	wreg,f,c
  1140   01FBAE  D7FE               	bra	u337
  1141   01FBB0  2E1D               	decfsz	??_reverseOneSquare^0,f,c
  1142   01FBB2  D7FC               	bra	u337
  1143   01FBB4  2E1E               	decfsz	(??_reverseOneSquare+1)^0,f,c
  1144   01FBB6  D7FA               	bra	u337
  1145   01FBB8  D000               	nop2	
  1146   01FBBA                     
  1147                           ;dc_motor.c: 158:     stop(mL, mR);
  1148   01FBBA  C019  F014         	movff	reverseOneSquare@mL,stop@mL
  1149   01FBBE  C01A  F015         	movff	reverseOneSquare@mL+1,stop@mL+1
  1150   01FBC2  C01B  F016         	movff	reverseOneSquare@mR,stop@mR
  1151   01FBC6  C01C  F017         	movff	reverseOneSquare@mR+1,stop@mR+1
  1152   01FBCA  EC9A  F0FC         	call	_stop	;wreg free
  1153   01FBCE  0012               	return		;funcret
  1154   01FBD0                     __end_of_reverseOneSquare:
  1155                           	callstack 0
  1156                           
  1157 ;; *************** function _stop *****************
  1158 ;; Defined at:
  1159 ;;		line 84 in file "dc_motor.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1162 ;;		 -> main@motorL(9), 
  1163 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1164 ;;		 -> main@motorR(9), 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;Total ram usage:        5 bytes
  1181 ;; Hardware stack levels used: 1
  1182 ;; Hardware stack levels required when called: 2
  1183 ;; This function calls:
  1184 ;;		_setMotorPWM
  1185 ;; This function is called by:
  1186 ;;		_reverseOneSquare
  1187 ;;		_respond_to_card
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text5
  1192   01F934                     __ptext5:
  1193                           	callstack 0
  1194   01F934                     _stop:
  1195                           	callstack 27
  1196   01F934                     
  1197                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  1198   01F934  EFB0  F0FC         	goto	l1322
  1199   01F938                     l1316:
  1200                           
  1201                           ;dc_motor.c: 87:         mL->power -=10;
  1202   01F938  C014  FFD9         	movff	stop@mL,fsr2l
  1203   01F93C  C015  FFDA         	movff	stop@mL+1,fsr2h
  1204   01F940  0E0A               	movlw	10
  1205   01F942  5EDF               	subwf	indf2,f,c
  1206   01F944                     
  1207                           ;dc_motor.c: 88:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1208   01F944  0E68               	movlw	104
  1209   01F946  6E18               	movwf	??_stop^0,c
  1210   01F948  0EE4               	movlw	228
  1211   01F94A                     u347:
  1212   01F94A  2EE8               	decfsz	wreg,f,c
  1213   01F94C  D7FE               	bra	u347
  1214   01F94E  2E18               	decfsz	??_stop^0,f,c
  1215   01F950  D7FC               	bra	u347
  1216   01F952  D000               	nop2	
  1217   01F954                     
  1218                           ;dc_motor.c: 89:         setMotorPWM(mL);
  1219   01F954  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1220   01F958  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1221   01F95C  EC4B  F0FE         	call	_setMotorPWM	;wreg free
  1222   01F960                     l1322:
  1223                           
  1224                           ;dc_motor.c: 86:     while(mL->power !=0){
  1225   01F960  C014  FFD9         	movff	stop@mL,fsr2l
  1226   01F964  C015  FFDA         	movff	stop@mL+1,fsr2h
  1227   01F968  50DF               	movf	indf2,w,c
  1228   01F96A  A4D8               	btfss	status,2,c
  1229   01F96C  EFBA  F0FC         	goto	u211
  1230   01F970  EFBC  F0FC         	goto	u210
  1231   01F974                     u211:
  1232   01F974  EF9C  F0FC         	goto	l1316
  1233   01F978                     u210:
  1234   01F978  EFD2  F0FC         	goto	l1330
  1235   01F97C                     l1324:
  1236                           
  1237                           ;dc_motor.c: 92:         mR->power -=10;
  1238   01F97C  C016  FFD9         	movff	stop@mR,fsr2l
  1239   01F980  C017  FFDA         	movff	stop@mR+1,fsr2h
  1240   01F984  0E0A               	movlw	10
  1241   01F986  5EDF               	subwf	indf2,f,c
  1242   01F988                     
  1243                           ;dc_motor.c: 93:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1244   01F988  0E68               	movlw	104
  1245   01F98A  6E18               	movwf	??_stop^0,c
  1246   01F98C  0EE4               	movlw	228
  1247   01F98E                     u357:
  1248   01F98E  2EE8               	decfsz	wreg,f,c
  1249   01F990  D7FE               	bra	u357
  1250   01F992  2E18               	decfsz	??_stop^0,f,c
  1251   01F994  D7FC               	bra	u357
  1252   01F996  D000               	nop2	
  1253   01F998                     
  1254                           ;dc_motor.c: 94:         setMotorPWM(mR);
  1255   01F998  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1256   01F99C  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1257   01F9A0  EC4B  F0FE         	call	_setMotorPWM	;wreg free
  1258   01F9A4                     l1330:
  1259                           
  1260                           ;dc_motor.c: 91:     while(mR -> power !=0){
  1261   01F9A4  C016  FFD9         	movff	stop@mR,fsr2l
  1262   01F9A8  C017  FFDA         	movff	stop@mR+1,fsr2h
  1263   01F9AC  50DF               	movf	indf2,w,c
  1264   01F9AE  A4D8               	btfss	status,2,c
  1265   01F9B0  EFDC  F0FC         	goto	u221
  1266   01F9B4  EFDE  F0FC         	goto	u220
  1267   01F9B8                     u221:
  1268   01F9B8  EFBE  F0FC         	goto	l1324
  1269   01F9BC                     u220:
  1270   01F9BC  0012               	return		;funcret
  1271   01F9BE                     __end_of_stop:
  1272                           	callstack 0
  1273                           
  1274 ;; *************** function _setMotorPWM *****************
  1275 ;; Defined at:
  1276 ;;		line 61 in file "dc_motor.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  m               2   13[COMRAM] PTR struct DC_motor
  1279 ;;		 -> main@motorR(9), main@motorL(9), 
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  negDuty         1   18[COMRAM] unsigned char 
  1282 ;;  posDuty         1   17[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1295 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;Total ram usage:        6 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 1
  1299 ;; This function calls:
  1300 ;;		___lwdiv
  1301 ;;		___wmul
  1302 ;; This function is called by:
  1303 ;;		_stop
  1304 ;;		_turnLeft45
  1305 ;;		_turnRight45
  1306 ;;		_reverseOneSquare
  1307 ;;		_main
  1308 ;;		_fullSpeedAhead
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text6
  1313   01FC96                     __ptext6:
  1314                           	callstack 0
  1315   01FC96                     _setMotorPWM:
  1316                           	callstack 29
  1317   01FC96                     
  1318                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  1319   01FC96  EE20 F002          	lfsr	2,2
  1320   01FC9A  500E               	movf	setMotorPWM@m^0,w,c
  1321   01FC9C  26D9               	addwf	fsr2l,f,c
  1322   01FC9E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1323   01FCA0  22DA               	addwfc	fsr2h,f,c
  1324   01FCA2  50DF               	movf	indf2,w,c
  1325   01FCA4  B4D8               	btfsc	status,2,c
  1326   01FCA6  EF57  F0FE         	goto	u191
  1327   01FCAA  EF59  F0FE         	goto	u190
  1328   01FCAE                     u191:
  1329   01FCAE  EF8D  F0FE         	goto	l1304
  1330   01FCB2                     u190:
  1331   01FCB2                     
  1332                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1333   01FCB2  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1334   01FCB6  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1335   01FCBA  50DF               	movf	indf2,w,c
  1336   01FCBC  6E10               	movwf	??_setMotorPWM^0,c
  1337   01FCBE  5010               	movf	??_setMotorPWM^0,w,c
  1338   01FCC0  6E01               	movwf	___wmul@multiplier^0,c
  1339   01FCC2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1340   01FCC4  EE20 F003          	lfsr	2,3
  1341   01FCC8  500E               	movf	setMotorPWM@m^0,w,c
  1342   01FCCA  26D9               	addwf	fsr2l,f,c
  1343   01FCCC  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1344   01FCCE  22DA               	addwfc	fsr2h,f,c
  1345   01FCD0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1346   01FCD4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1347   01FCD8  ECC6  F0FB         	call	___wmul	;wreg free
  1348   01FCDC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1349   01FCE0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1350   01FCE4  0E00               	movlw	0
  1351   01FCE6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1352   01FCE8  0E64               	movlw	100
  1353   01FCEA  6E09               	movwf	___lwdiv@divisor^0,c
  1354   01FCEC  EC1C  F0FC         	call	___lwdiv	;wreg free
  1355   01FCF0  EE20 F003          	lfsr	2,3
  1356   01FCF4  500E               	movf	setMotorPWM@m^0,w,c
  1357   01FCF6  26D9               	addwf	fsr2l,f,c
  1358   01FCF8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1359   01FCFA  22DA               	addwfc	fsr2h,f,c
  1360   01FCFC  50DF               	movf	indf2,w,c
  1361   01FCFE  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1362   01FD00  5007               	movf	?___lwdiv^0,w,c
  1363   01FD02  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1364   01FD04  6E12               	movwf	setMotorPWM@posDuty^0,c
  1365   01FD06                     
  1366                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  1367   01FD06  EE20 F003          	lfsr	2,3
  1368   01FD0A  500E               	movf	setMotorPWM@m^0,w,c
  1369   01FD0C  26D9               	addwf	fsr2l,f,c
  1370   01FD0E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1371   01FD10  22DA               	addwfc	fsr2h,f,c
  1372   01FD12  50DF               	movf	indf2,w,c
  1373   01FD14  6E13               	movwf	setMotorPWM@negDuty^0,c
  1374                           
  1375                           ;dc_motor.c: 68:     }
  1376   01FD16  EFB0  F0FE         	goto	l1308
  1377   01FD1A                     l1304:
  1378                           
  1379                           ;dc_motor.c: 70:         posDuty=0;
  1380   01FD1A  0E00               	movlw	0
  1381   01FD1C  6E12               	movwf	setMotorPWM@posDuty^0,c
  1382   01FD1E                     
  1383                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1384   01FD1E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1385   01FD22  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1386   01FD26  50DF               	movf	indf2,w,c
  1387   01FD28  6E10               	movwf	??_setMotorPWM^0,c
  1388   01FD2A  5010               	movf	??_setMotorPWM^0,w,c
  1389   01FD2C  6E01               	movwf	___wmul@multiplier^0,c
  1390   01FD2E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1391   01FD30  EE20 F003          	lfsr	2,3
  1392   01FD34  500E               	movf	setMotorPWM@m^0,w,c
  1393   01FD36  26D9               	addwf	fsr2l,f,c
  1394   01FD38  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1395   01FD3A  22DA               	addwfc	fsr2h,f,c
  1396   01FD3C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1397   01FD40  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1398   01FD44  ECC6  F0FB         	call	___wmul	;wreg free
  1399   01FD48  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1400   01FD4C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1401   01FD50  0E00               	movlw	0
  1402   01FD52  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1403   01FD54  0E64               	movlw	100
  1404   01FD56  6E09               	movwf	___lwdiv@divisor^0,c
  1405   01FD58  EC1C  F0FC         	call	___lwdiv	;wreg free
  1406   01FD5C  5007               	movf	?___lwdiv^0,w,c
  1407   01FD5E  6E13               	movwf	setMotorPWM@negDuty^0,c
  1408   01FD60                     l1308:
  1409                           
  1410                           ;dc_motor.c: 74:     if (m->direction) {
  1411   01FD60  EE20 F001          	lfsr	2,1
  1412   01FD64  500E               	movf	setMotorPWM@m^0,w,c
  1413   01FD66  26D9               	addwf	fsr2l,f,c
  1414   01FD68  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1415   01FD6A  22DA               	addwfc	fsr2h,f,c
  1416   01FD6C  50DF               	movf	indf2,w,c
  1417   01FD6E  B4D8               	btfsc	status,2,c
  1418   01FD70  EFBC  F0FE         	goto	u201
  1419   01FD74  EFBE  F0FE         	goto	u200
  1420   01FD78                     u201:
  1421   01FD78  EFE0  F0FE         	goto	l1312
  1422   01FD7C                     u200:
  1423   01FD7C                     
  1424                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  1425   01FD7C  EE20 F005          	lfsr	2,5
  1426   01FD80  500E               	movf	setMotorPWM@m^0,w,c
  1427   01FD82  26D9               	addwf	fsr2l,f,c
  1428   01FD84  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1429   01FD86  22DA               	addwfc	fsr2h,f,c
  1430   01FD88  CFDE F010          	movff	postinc2,??_setMotorPWM
  1431   01FD8C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1432   01FD90  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1433   01FD94  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1434   01FD98  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1435                           
  1436                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  1437   01FD9C  EE20 F007          	lfsr	2,7
  1438   01FDA0  500E               	movf	setMotorPWM@m^0,w,c
  1439   01FDA2  26D9               	addwf	fsr2l,f,c
  1440   01FDA4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1441   01FDA6  22DA               	addwfc	fsr2h,f,c
  1442   01FDA8  CFDE F010          	movff	postinc2,??_setMotorPWM
  1443   01FDAC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1444   01FDB0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1445   01FDB4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1446   01FDB8  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1447                           
  1448                           ;dc_motor.c: 77:     } else {
  1449   01FDBC  EF00  F0FF         	goto	l83
  1450   01FDC0                     l1312:
  1451                           
  1452                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  1453   01FDC0  EE20 F005          	lfsr	2,5
  1454   01FDC4  500E               	movf	setMotorPWM@m^0,w,c
  1455   01FDC6  26D9               	addwf	fsr2l,f,c
  1456   01FDC8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1457   01FDCA  22DA               	addwfc	fsr2h,f,c
  1458   01FDCC  CFDE F010          	movff	postinc2,??_setMotorPWM
  1459   01FDD0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1460   01FDD4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1461   01FDD8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1462   01FDDC  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1463                           
  1464                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  1465   01FDE0  EE20 F007          	lfsr	2,7
  1466   01FDE4  500E               	movf	setMotorPWM@m^0,w,c
  1467   01FDE6  26D9               	addwf	fsr2l,f,c
  1468   01FDE8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1469   01FDEA  22DA               	addwfc	fsr2h,f,c
  1470   01FDEC  CFDE F010          	movff	postinc2,??_setMotorPWM
  1471   01FDF0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1472   01FDF4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1473   01FDF8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1474   01FDFC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1475   01FE00                     l83:
  1476   01FE00  0012               	return		;funcret
  1477   01FE02                     __end_of_setMotorPWM:
  1478                           	callstack 0
  1479                           
  1480 ;; *************** function ___wmul *****************
  1481 ;; Defined at:
  1482 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  multiplier      2    0[COMRAM] unsigned int 
  1485 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  product         2    4[COMRAM] unsigned int 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  2    0[COMRAM] unsigned int 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, prodl, prodh
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;Total ram usage:        6 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_setMotorPWM
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text7
  1511   01F78C                     __ptext7:
  1512                           	callstack 0
  1513   01F78C                     ___wmul:
  1514                           	callstack 29
  1515   01F78C  5001               	movf	___wmul@multiplier^0,w,c
  1516   01F78E  0203               	mulwf	___wmul@multiplicand^0,c
  1517   01F790  CFF3 F005          	movff	prodl,___wmul@product
  1518   01F794  CFF4 F006          	movff	prodh,___wmul@product+1
  1519   01F798  5001               	movf	___wmul@multiplier^0,w,c
  1520   01F79A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1521   01F79C  50F3               	movf	243,w,c
  1522   01F79E  2606               	addwf	(___wmul@product+1)^0,f,c
  1523   01F7A0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1524   01F7A2  0203               	mulwf	___wmul@multiplicand^0,c
  1525   01F7A4  50F3               	movf	243,w,c
  1526   01F7A6  2606               	addwf	(___wmul@product+1)^0,f,c
  1527   01F7A8  C005  F001         	movff	___wmul@product,?___wmul
  1528   01F7AC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1529   01F7B0  0012               	return		;funcret
  1530   01F7B2                     __end_of___wmul:
  1531                           	callstack 0
  1532                           
  1533 ;; *************** function ___lwdiv *****************
  1534 ;; Defined at:
  1535 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  dividend        2    6[COMRAM] unsigned int 
  1538 ;;  divisor         2    8[COMRAM] unsigned int 
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  quotient        2   10[COMRAM] unsigned int 
  1541 ;;  counter         1   12[COMRAM] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  2    6[COMRAM] unsigned int 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1552 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1554 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1555 ;;Total ram usage:        7 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_setMotorPWM
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text8
  1565   01F838                     __ptext8:
  1566                           	callstack 0
  1567   01F838                     ___lwdiv:
  1568                           	callstack 29
  1569   01F838  0E00               	movlw	0
  1570   01F83A  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1571   01F83C  0E00               	movlw	0
  1572   01F83E  6E0B               	movwf	___lwdiv@quotient^0,c
  1573   01F840  5009               	movf	___lwdiv@divisor^0,w,c
  1574   01F842  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1575   01F844  B4D8               	btfsc	status,2,c
  1576   01F846  EF27  F0FC         	goto	u161
  1577   01F84A  EF29  F0FC         	goto	u160
  1578   01F84E                     u161:
  1579   01F84E  EF51  F0FC         	goto	l740
  1580   01F852                     u160:
  1581   01F852  0E01               	movlw	1
  1582   01F854  6E0D               	movwf	___lwdiv@counter^0,c
  1583   01F856  EF31  F0FC         	goto	l1284
  1584   01F85A                     l1282:
  1585   01F85A  90D8               	bcf	status,0,c
  1586   01F85C  3609               	rlcf	___lwdiv@divisor^0,f,c
  1587   01F85E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1588   01F860  2A0D               	incf	___lwdiv@counter^0,f,c
  1589   01F862                     l1284:
  1590   01F862  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1591   01F864  EF36  F0FC         	goto	u171
  1592   01F868  EF38  F0FC         	goto	u170
  1593   01F86C                     u171:
  1594   01F86C  EF2D  F0FC         	goto	l1282
  1595   01F870                     u170:
  1596   01F870                     l1286:
  1597   01F870  90D8               	bcf	status,0,c
  1598   01F872  360B               	rlcf	___lwdiv@quotient^0,f,c
  1599   01F874  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1600   01F876  5009               	movf	___lwdiv@divisor^0,w,c
  1601   01F878  5C07               	subwf	___lwdiv@dividend^0,w,c
  1602   01F87A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1603   01F87C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1604   01F87E  A0D8               	btfss	status,0,c
  1605   01F880  EF44  F0FC         	goto	u181
  1606   01F884  EF46  F0FC         	goto	u180
  1607   01F888                     u181:
  1608   01F888  EF4B  F0FC         	goto	l1294
  1609   01F88C                     u180:
  1610   01F88C  5009               	movf	___lwdiv@divisor^0,w,c
  1611   01F88E  5E07               	subwf	___lwdiv@dividend^0,f,c
  1612   01F890  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1613   01F892  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1614   01F894  800B               	bsf	___lwdiv@quotient^0,0,c
  1615   01F896                     l1294:
  1616   01F896  90D8               	bcf	status,0,c
  1617   01F898  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1618   01F89A  3209               	rrcf	___lwdiv@divisor^0,f,c
  1619   01F89C  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1620   01F89E  EF38  F0FC         	goto	l1286
  1621   01F8A2                     l740:
  1622   01F8A2  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1623   01F8A6  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1624   01F8AA  0012               	return		;funcret
  1625   01F8AC                     __end_of___lwdiv:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _initDCmotorsPWM *****************
  1629 ;; Defined at:
  1630 ;;		line 6 in file "dc_motor.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;		None
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;		None
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;Total ram usage:        0 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; This function calls:
  1651 ;;		Nothing
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text9
  1658   01F8AC                     __ptext9:
  1659                           	callstack 0
  1660   01F8AC                     _initDCmotorsPWM:
  1661                           	callstack 30
  1662   01F8AC                     
  1663                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1664   01F8AC  9485               	bcf	133,2,c	;volatile
  1665                           
  1666                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1667   01F8AE  9885               	bcf	133,4,c	;volatile
  1668                           
  1669                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1670   01F8B0  9E83               	bcf	131,7,c	;volatile
  1671                           
  1672                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1673   01F8B2  9C87               	bcf	135,6,c	;volatile
  1674   01F8B4                     
  1675                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1676   01F8B4  0E05               	movlw	5
  1677   01F8B6  010E               	movlb	14	; () banked
  1678   01F8B8  6F74               	movwf	116,b	;volatile
  1679                           
  1680                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1681   01F8BA  0E06               	movlw	6
  1682   01F8BC  6F76               	movwf	118,b	;volatile
  1683                           
  1684                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1685   01F8BE  0E07               	movlw	7
  1686   01F8C0  6F69               	movwf	105,b	;volatile
  1687                           
  1688                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1689   01F8C2  0E08               	movlw	8
  1690   01F8C4  6F88               	movwf	136,b	;volatile
  1691                           
  1692                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1693   01F8C6  50BD               	movf	189,w,c	;volatile
  1694   01F8C8  0B8F               	andlw	-113
  1695   01F8CA  0940               	iorlw	64
  1696   01F8CC  6EBD               	movwf	189,c	;volatile
  1697                           
  1698                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1699   01F8CE  0EE0               	movlw	-32
  1700   01F8D0  16BE               	andwf	190,f,c	;volatile
  1701                           
  1702                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1703   01F8D2  50BF               	movf	191,w,c	;volatile
  1704   01F8D4  0BF0               	andlw	-16
  1705   01F8D6  0901               	iorlw	1
  1706   01F8D8  6EBF               	movwf	191,c	;volatile
  1707                           
  1708                           ;dc_motor.c: 26:     T2PR=99;
  1709   01F8DA  0E63               	movlw	99
  1710   01F8DC  6EBC               	movwf	188,c	;volatile
  1711   01F8DE                     
  1712                           ; BSR set to: 14
  1713                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1714   01F8DE  8EBD               	bsf	189,7,c	;volatile
  1715                           
  1716                           ;dc_motor.c: 31:     CCPR1H=0;
  1717   01F8E0  0E00               	movlw	0
  1718   01F8E2  6EAA               	movwf	170,c	;volatile
  1719                           
  1720                           ;dc_motor.c: 32:     CCPR2H=0;
  1721   01F8E4  0E00               	movlw	0
  1722   01F8E6  6EA6               	movwf	166,c	;volatile
  1723                           
  1724                           ;dc_motor.c: 33:     CCPR3H=0;
  1725   01F8E8  0E00               	movlw	0
  1726   01F8EA  010F               	movlb	15	; () banked
  1727   01F8EC  6F25               	movwf	37,b	;volatile
  1728                           
  1729                           ;dc_motor.c: 34:     CCPR4H=0;
  1730   01F8EE  0E00               	movlw	0
  1731   01F8F0  6F21               	movwf	33,b	;volatile
  1732                           
  1733                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1734   01F8F2  0EFC               	movlw	-4
  1735   01F8F4  16AD               	andwf	173,f,c	;volatile
  1736                           
  1737                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1738   01F8F6  0EF3               	movlw	-13
  1739   01F8F8  16AD               	andwf	173,f,c	;volatile
  1740                           
  1741                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1742   01F8FA  0ECF               	movlw	-49
  1743   01F8FC  16AD               	andwf	173,f,c	;volatile
  1744                           
  1745                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1746   01F8FE  0E3F               	movlw	-193
  1747   01F900  16AD               	andwf	173,f,c	;volatile
  1748   01F902                     
  1749                           ; BSR set to: 15
  1750                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1751   01F902  88AB               	bsf	171,4,c	;volatile
  1752                           
  1753                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1754   01F904  50AB               	movf	171,w,c	;volatile
  1755   01F906  0BF0               	andlw	-16
  1756   01F908  090C               	iorlw	12
  1757   01F90A  6EAB               	movwf	171,c	;volatile
  1758   01F90C                     
  1759                           ; BSR set to: 15
  1760                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1761   01F90C  8EAB               	bsf	171,7,c	;volatile
  1762   01F90E                     
  1763                           ; BSR set to: 15
  1764                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1765   01F90E  88A7               	bsf	167,4,c	;volatile
  1766                           
  1767                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1768   01F910  50A7               	movf	167,w,c	;volatile
  1769   01F912  0BF0               	andlw	-16
  1770   01F914  090C               	iorlw	12
  1771   01F916  6EA7               	movwf	167,c	;volatile
  1772   01F918                     
  1773                           ; BSR set to: 15
  1774                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1775   01F918  8EA7               	bsf	167,7,c	;volatile
  1776   01F91A                     
  1777                           ; BSR set to: 15
  1778                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1779   01F91A  8926               	bsf	38,4,b	;volatile
  1780                           
  1781                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1782   01F91C  5126               	movf	38,w,b	;volatile
  1783   01F91E  0BF0               	andlw	-16
  1784   01F920  090C               	iorlw	12
  1785   01F922  6F26               	movwf	38,b	;volatile
  1786   01F924                     
  1787                           ; BSR set to: 15
  1788                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1789   01F924  8F26               	bsf	38,7,b	;volatile
  1790   01F926                     
  1791                           ; BSR set to: 15
  1792                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1793   01F926  8922               	bsf	34,4,b	;volatile
  1794                           
  1795                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1796   01F928  5122               	movf	34,w,b	;volatile
  1797   01F92A  0BF0               	andlw	-16
  1798   01F92C  090C               	iorlw	12
  1799   01F92E  6F22               	movwf	34,b	;volatile
  1800   01F930                     
  1801                           ; BSR set to: 15
  1802                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1803   01F930  8F22               	bsf	34,7,b	;volatile
  1804   01F932                     
  1805                           ; BSR set to: 15
  1806   01F932  0012               	return		;funcret
  1807   01F934                     __end_of_initDCmotorsPWM:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _color_click_init *****************
  1811 ;; Defined at:
  1812 ;;		line 5 in file "color.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;Total ram usage:        1 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 3
  1833 ;; This function calls:
  1834 ;;		_I2C_2_Master_Init
  1835 ;;		_color_writetoaddr
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text10
  1842   01F804                     __ptext10:
  1843                           	callstack 0
  1844   01F804                     _color_click_init:
  1845                           	callstack 27
  1846   01F804                     
  1847                           ;color.c: 8:     I2C_2_Master_Init();
  1848   01F804  ECED  F0FB         	call	_I2C_2_Master_Init	;wreg free
  1849   01F808                     
  1850                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1851   01F808  0E01               	movlw	1
  1852   01F80A  6E03               	movwf	color_writetoaddr@value^0,c
  1853   01F80C  0E00               	movlw	0
  1854   01F80E  ECA5  F0FB         	call	_color_writetoaddr
  1855   01F812                     
  1856                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1857   01F812  0E3F               	movlw	63
  1858   01F814  6E05               	movwf	??_color_click_init^0,c
  1859   01F816  0E55               	movlw	85
  1860   01F818                     u367:
  1861   01F818  2EE8               	decfsz	wreg,f,c
  1862   01F81A  D7FE               	bra	u367
  1863   01F81C  2E05               	decfsz	??_color_click_init^0,f,c
  1864   01F81E  D7FC               	bra	u367
  1865   01F820  F000               	nop	
  1866   01F822                     
  1867                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1868   01F822  0E03               	movlw	3
  1869   01F824  6E03               	movwf	color_writetoaddr@value^0,c
  1870   01F826  0E00               	movlw	0
  1871   01F828  ECA5  F0FB         	call	_color_writetoaddr
  1872   01F82C                     
  1873                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1874   01F82C  0ED5               	movlw	213
  1875   01F82E  6E03               	movwf	color_writetoaddr@value^0,c
  1876   01F830  0E01               	movlw	1
  1877   01F832  ECA5  F0FB         	call	_color_writetoaddr
  1878   01F836  0012               	return		;funcret
  1879   01F838                     __end_of_color_click_init:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _color_writetoaddr *****************
  1883 ;; Defined at:
  1884 ;;		line 21 in file "color.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  address         1    wreg     unsigned char 
  1887 ;;  value           1    2[COMRAM] unsigned char 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  address         1    3[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; Hardware stack levels required when called: 2
  1906 ;; This function calls:
  1907 ;;		_I2C_2_Master_Start
  1908 ;;		_I2C_2_Master_Stop
  1909 ;;		_I2C_2_Master_Write
  1910 ;; This function is called by:
  1911 ;;		_color_click_init
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text11
  1916   01F74A                     __ptext11:
  1917                           	callstack 0
  1918   01F74A                     _color_writetoaddr:
  1919                           	callstack 27
  1920                           
  1921                           ;incstack = 0
  1922                           ;color_writetoaddr@address stored from wreg
  1923   01F74A  6E04               	movwf	color_writetoaddr@address^0,c
  1924   01F74C                     
  1925                           ;color.c: 22:     I2C_2_Master_Start();
  1926   01F74C  EC95  F0FB         	call	_I2C_2_Master_Start	;wreg free
  1927                           
  1928                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1929   01F750  0E52               	movlw	82
  1930   01F752  EC9F  F0FB         	call	_I2C_2_Master_Write
  1931                           
  1932                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1933   01F756  5004               	movf	color_writetoaddr@address^0,w,c
  1934   01F758  0980               	iorlw	128
  1935   01F75A  EC9F  F0FB         	call	_I2C_2_Master_Write
  1936                           
  1937                           ;color.c: 25:     I2C_2_Master_Write(value);
  1938   01F75E  5003               	movf	color_writetoaddr@value^0,w,c
  1939   01F760  EC9F  F0FB         	call	_I2C_2_Master_Write
  1940                           
  1941                           ;color.c: 26:     I2C_2_Master_Stop();
  1942   01F764  EC9A  F0FB         	call	_I2C_2_Master_Stop	;wreg free
  1943   01F768  0012               	return		;funcret
  1944   01F76A                     __end_of_color_writetoaddr:
  1945                           	callstack 0
  1946                           
  1947 ;; *************** function _I2C_2_Master_Write *****************
  1948 ;; Defined at:
  1949 ;;		line 45 in file "i2c.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  data_byte       1    wreg     unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  data_byte       1    1[COMRAM] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, status,0, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1967 ;;Total ram usage:        1 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; Hardware stack levels required when called: 1
  1970 ;; This function calls:
  1971 ;;		_I2C_2_Master_Idle
  1972 ;; This function is called by:
  1973 ;;		_color_writetoaddr
  1974 ;;		_color_read_Red
  1975 ;;		_color_read_Green
  1976 ;;		_color_read_Blue
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text12
  1981   01F73E                     __ptext12:
  1982                           	callstack 0
  1983   01F73E                     _I2C_2_Master_Write:
  1984                           	callstack 27
  1985                           
  1986                           ;incstack = 0
  1987                           ;I2C_2_Master_Write@data_byte stored from wreg
  1988   01F73E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1989   01F740                     
  1990                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1991   01F740  ECD9  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  1992   01F744                     
  1993                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1994   01F744  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1995   01F748  0012               	return		;funcret
  1996   01F74A                     __end_of_I2C_2_Master_Write:
  1997                           	callstack 0
  1998                           
  1999 ;; *************** function _I2C_2_Master_Stop *****************
  2000 ;; Defined at:
  2001 ;;		line 39 in file "i2c.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;		None
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      void 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2, status,0, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2019 ;;Total ram usage:        0 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; Hardware stack levels required when called: 1
  2022 ;; This function calls:
  2023 ;;		_I2C_2_Master_Idle
  2024 ;; This function is called by:
  2025 ;;		_color_writetoaddr
  2026 ;;		_color_read_Red
  2027 ;;		_color_read_Green
  2028 ;;		_color_read_Blue
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text13
  2033   01F734                     __ptext13:
  2034                           	callstack 0
  2035   01F734                     _I2C_2_Master_Stop:
  2036                           	callstack 27
  2037   01F734                     
  2038                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2039   01F734  ECD9  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2040   01F738                     
  2041                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2042   01F738  010E               	movlb	14	; () banked
  2043   01F73A  85DA               	bsf	218,2,b	;volatile
  2044   01F73C                     
  2045                           ; BSR set to: 14
  2046   01F73C  0012               	return		;funcret
  2047   01F73E                     __end_of_I2C_2_Master_Stop:
  2048                           	callstack 0
  2049                           
  2050 ;; *************** function _I2C_2_Master_Start *****************
  2051 ;; Defined at:
  2052 ;;		line 27 in file "i2c.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels used: 1
  2072 ;; Hardware stack levels required when called: 1
  2073 ;; This function calls:
  2074 ;;		_I2C_2_Master_Idle
  2075 ;; This function is called by:
  2076 ;;		_color_writetoaddr
  2077 ;;		_color_read_Red
  2078 ;;		_color_read_Green
  2079 ;;		_color_read_Blue
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text14
  2084   01F72A                     __ptext14:
  2085                           	callstack 0
  2086   01F72A                     _I2C_2_Master_Start:
  2087                           	callstack 27
  2088   01F72A                     
  2089                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2090   01F72A  ECD9  F0FB         	call	_I2C_2_Master_Idle	;wreg free
  2091   01F72E                     
  2092                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2093   01F72E  010E               	movlb	14	; () banked
  2094   01F730  81DA               	bsf	218,0,b	;volatile
  2095   01F732                     
  2096                           ; BSR set to: 14
  2097   01F732  0012               	return		;funcret
  2098   01F734                     __end_of_I2C_2_Master_Start:
  2099                           	callstack 0
  2100                           
  2101 ;; *************** function _I2C_2_Master_Idle *****************
  2102 ;; Defined at:
  2103 ;;		line 22 in file "i2c.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used: 1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_I2C_2_Master_Start
  2127 ;;		_I2C_2_Master_Stop
  2128 ;;		_I2C_2_Master_Write
  2129 ;;		_I2C_2_Master_RepStart
  2130 ;;		_I2C_2_Master_Read
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text15
  2135   01F7B2                     __ptext15:
  2136                           	callstack 0
  2137   01F7B2                     _I2C_2_Master_Idle:
  2138                           	callstack 27
  2139   01F7B2                     l142:
  2140   01F7B2  010E               	movlb	14	; () banked
  2141   01F7B4  B5D8               	btfsc	216,2,b	;volatile
  2142   01F7B6  EFDF  F0FB         	goto	u61
  2143   01F7BA  EFE1  F0FB         	goto	u60
  2144   01F7BE                     u61:
  2145   01F7BE  EFD9  F0FB         	goto	l142
  2146   01F7C2                     u60:
  2147   01F7C2                     
  2148                           ; BSR set to: 14
  2149   01F7C2  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2150   01F7C6  0E1F               	movlw	31
  2151   01F7C8  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2152   01F7CA  A4D8               	btfss	status,2,c
  2153   01F7CC  EFEA  F0FB         	goto	u71
  2154   01F7D0  EFEC  F0FB         	goto	u70
  2155   01F7D4                     u71:
  2156   01F7D4  EFD9  F0FB         	goto	l142
  2157   01F7D8                     u70:
  2158   01F7D8                     
  2159                           ; BSR set to: 14
  2160   01F7D8  0012               	return		;funcret
  2161   01F7DA                     __end_of_I2C_2_Master_Idle:
  2162                           	callstack 0
  2163                           
  2164 ;; *************** function _I2C_2_Master_Init *****************
  2165 ;; Defined at:
  2166 ;;		line 4 in file "i2c.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;		None
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;Total ram usage:        0 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_color_click_init
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text16
  2195   01F7DA                     __ptext16:
  2196                           	callstack 0
  2197   01F7DA                     _I2C_2_Master_Init:
  2198                           	callstack 29
  2199   01F7DA                     
  2200                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2201   01F7DA  010E               	movlb	14	; () banked
  2202   01F7DC  51D9               	movf	217,w,b	;volatile
  2203   01F7DE  0BF0               	andlw	-16
  2204   01F7E0  0908               	iorlw	8
  2205   01F7E2  6FD9               	movwf	217,b	;volatile
  2206   01F7E4                     
  2207                           ; BSR set to: 14
  2208                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2209   01F7E4  8BD9               	bsf	217,5,b	;volatile
  2210                           
  2211                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2212   01F7E6  0E9F               	movlw	159
  2213   01F7E8  6FD6               	movwf	214,b	;volatile
  2214   01F7EA                     
  2215                           ; BSR set to: 14
  2216                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2217   01F7EA  8A84               	bsf	132,5,c	;volatile
  2218   01F7EC                     
  2219                           ; BSR set to: 14
  2220                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2221   01F7EC  8C84               	bsf	132,6,c	;volatile
  2222   01F7EE                     
  2223                           ; BSR set to: 14
  2224                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2225   01F7EE  9BA7               	bcf	167,5,b	;volatile
  2226   01F7F0                     
  2227                           ; BSR set to: 14
  2228                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2229   01F7F0  9DA7               	bcf	167,6,b	;volatile
  2230                           
  2231                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2232   01F7F2  0E1D               	movlw	29
  2233   01F7F4  6F1D               	movwf	29,b	;volatile
  2234                           
  2235                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2236   01F7F6  0E1E               	movlw	30
  2237   01F7F8  6F1C               	movwf	28,b	;volatile
  2238                           
  2239                           ;i2c.c: 18:   RD5PPS=0x1C;
  2240   01F7FA  0E1C               	movlw	28
  2241   01F7FC  6F6F               	movwf	111,b	;volatile
  2242                           
  2243                           ;i2c.c: 19:   RD6PPS=0x1B;
  2244   01F7FE  0E1B               	movlw	27
  2245   01F800  6F70               	movwf	112,b	;volatile
  2246   01F802                     
  2247                           ; BSR set to: 14
  2248   01F802  0012               	return		;funcret
  2249   01F804                     __end_of_I2C_2_Master_Init:
  2250                           	callstack 0
  2251                           
  2252 ;; *************** function _LEDSon_init *****************
  2253 ;; Defined at:
  2254 ;;		line 18 in file "LEDsOn.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		None
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;Total ram usage:        0 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text17
  2282   01F76A                     __ptext17:
  2283                           	callstack 0
  2284   01F76A                     _LEDSon_init:
  2285                           	callstack 30
  2286   01F76A                     
  2287                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  2288   01F76A  9288               	bcf	136,1,c	;volatile
  2289                           
  2290                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  2291   01F76C  9088               	bcf	136,0,c	;volatile
  2292                           
  2293                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  2294   01F76E  9884               	bcf	132,4,c	;volatile
  2295                           
  2296                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  2297   01F770  9684               	bcf	132,3,c	;volatile
  2298                           
  2299                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  2300   01F772  9086               	bcf	134,0,c	;volatile
  2301                           
  2302                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  2303   01F774  9287               	bcf	135,1,c	;volatile
  2304                           
  2305                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  2306   01F776  9E86               	bcf	134,7,c	;volatile
  2307                           
  2308                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  2309   01F778  9881               	bcf	129,4,c	;volatile
  2310                           
  2311                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  2312   01F77A  8E7E               	bsf	126,7,c	;volatile
  2313                           
  2314                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  2315   01F77C  827F               	bsf	127,1,c	;volatile
  2316                           
  2317                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  2318   01F77E  8879               	bsf	121,4,c	;volatile
  2319                           
  2320                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  2321   01F780  987C               	bcf	124,4,c	;volatile
  2322                           
  2323                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  2324   01F782  9280               	bcf	128,1,c	;volatile
  2325                           
  2326                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  2327   01F784  907E               	bcf	126,0,c	;volatile
  2328                           
  2329                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  2330   01F786  9080               	bcf	128,0,c	;volatile
  2331                           
  2332                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  2333   01F788  967C               	bcf	124,3,c	;volatile
  2334   01F78A  0012               	return		;funcret
  2335   01F78C                     __end_of_LEDSon_init:
  2336                           	callstack 0
  2337   000000                     
  2338                           	psect	rparam
  2339   000000                     
  2340                           	psect	idloc
  2341                           
  2342                           ;Config register IDLOC0 @ 0x200000
  2343                           ;	unspecified, using default values
  2344   200000                     	org	2097152
  2345   200000  0FFF               	dw	4095
  2346                           
  2347                           ;Config register IDLOC1 @ 0x200002
  2348                           ;	unspecified, using default values
  2349   200002                     	org	2097154
  2350   200002  0FFF               	dw	4095
  2351                           
  2352                           ;Config register IDLOC2 @ 0x200004
  2353                           ;	unspecified, using default values
  2354   200004                     	org	2097156
  2355   200004  0FFF               	dw	4095
  2356                           
  2357                           ;Config register IDLOC3 @ 0x200006
  2358                           ;	unspecified, using default values
  2359   200006                     	org	2097158
  2360   200006  0FFF               	dw	4095
  2361                           
  2362                           ;Config register IDLOC4 @ 0x200008
  2363                           ;	unspecified, using default values
  2364   200008                     	org	2097160
  2365   200008  0FFF               	dw	4095
  2366                           
  2367                           ;Config register IDLOC5 @ 0x20000A
  2368                           ;	unspecified, using default values
  2369   20000A                     	org	2097162
  2370   20000A  0FFF               	dw	4095
  2371                           
  2372                           ;Config register IDLOC6 @ 0x20000C
  2373                           ;	unspecified, using default values
  2374   20000C                     	org	2097164
  2375   20000C  0FFF               	dw	4095
  2376                           
  2377                           ;Config register IDLOC7 @ 0x20000E
  2378                           ;	unspecified, using default values
  2379   20000E                     	org	2097166
  2380   20000E  0FFF               	dw	4095
  2381                           
  2382                           	psect	config
  2383                           
  2384                           ;Config register CONFIG1L @ 0x300000
  2385                           ;	External Oscillator mode Selection bits
  2386                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2387                           ;	Power-up default value for COSC bits
  2388                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2389   300000                     	org	3145728
  2390   300000  AA                 	db	170
  2391                           
  2392                           ;Config register CONFIG1H @ 0x300001
  2393                           ;	unspecified, using default values
  2394                           ;	Clock Out Enable bit
  2395                           ;	CLKOUTEN = 0x1, unprogrammed default
  2396                           ;	Clock Switch Enable bit
  2397                           ;	CSWEN = 0x1, unprogrammed default
  2398                           ;	Fail-Safe Clock Monitor Enable bit
  2399                           ;	FCMEN = 0x1, unprogrammed default
  2400   300001                     	org	3145729
  2401   300001  FF                 	db	255
  2402                           
  2403                           ;Config register CONFIG2L @ 0x300002
  2404                           ;	unspecified, using default values
  2405                           ;	Master Clear Enable bit
  2406                           ;	MCLRE = 0x1, unprogrammed default
  2407                           ;	Power-up Timer Enable bit
  2408                           ;	PWRTE = 0x1, unprogrammed default
  2409                           ;	Low-power BOR enable bit
  2410                           ;	LPBOREN = 0x1, unprogrammed default
  2411                           ;	Brown-out Reset Enable bits
  2412                           ;	BOREN = 0x3, unprogrammed default
  2413   300002                     	org	3145730
  2414   300002  FF                 	db	255
  2415                           
  2416                           ;Config register CONFIG2H @ 0x300003
  2417                           ;	unspecified, using default values
  2418                           ;	Brown Out Reset Voltage selection bits
  2419                           ;	BORV = 0x3, unprogrammed default
  2420                           ;	ZCD Disable bit
  2421                           ;	ZCD = 0x1, unprogrammed default
  2422                           ;	PPSLOCK bit One-Way Set Enable bit
  2423                           ;	PPS1WAY = 0x1, unprogrammed default
  2424                           ;	Stack Full/Underflow Reset Enable bit
  2425                           ;	STVREN = 0x1, unprogrammed default
  2426                           ;	Debugger Enable bit
  2427                           ;	DEBUG = 0x1, unprogrammed default
  2428                           ;	Extended Instruction Set Enable bit
  2429                           ;	XINST = 0x1, unprogrammed default
  2430   300003                     	org	3145731
  2431   300003  FF                 	db	255
  2432                           
  2433                           ;Config register CONFIG3L @ 0x300004
  2434                           ;	WDT Period Select bits
  2435                           ;	WDTCPS = 0x1F, unprogrammed default
  2436                           ;	WDT operating mode
  2437                           ;	WDTE = OFF, WDT Disabled
  2438   300004                     	org	3145732
  2439   300004  9F                 	db	159
  2440                           
  2441                           ;Config register CONFIG3H @ 0x300005
  2442                           ;	unspecified, using default values
  2443                           ;	WDT Window Select bits
  2444                           ;	WDTCWS = 0x7, unprogrammed default
  2445                           ;	WDT input clock selector
  2446                           ;	WDTCCS = 0x7, unprogrammed default
  2447   300005                     	org	3145733
  2448   300005  FF                 	db	255
  2449                           
  2450                           ;Config register CONFIG4L @ 0x300006
  2451                           ;	unspecified, using default values
  2452                           ;	Write Protection Block 0
  2453                           ;	WRT0 = 0x1, unprogrammed default
  2454                           ;	Write Protection Block 1
  2455                           ;	WRT1 = 0x1, unprogrammed default
  2456                           ;	Write Protection Block 2
  2457                           ;	WRT2 = 0x1, unprogrammed default
  2458                           ;	Write Protection Block 3
  2459                           ;	WRT3 = 0x1, unprogrammed default
  2460                           ;	Write Protection Block 3
  2461                           ;	WRT4 = 0x1, unprogrammed default
  2462                           ;	Write Protection Block 3
  2463                           ;	WRT5 = 0x1, unprogrammed default
  2464                           ;	Write Protection Block 3
  2465                           ;	WRT6 = 0x1, unprogrammed default
  2466                           ;	Write Protection Block 3
  2467                           ;	WRT7 = 0x1, unprogrammed default
  2468   300006                     	org	3145734
  2469   300006  FF                 	db	255
  2470                           
  2471                           ;Config register CONFIG4H @ 0x300007
  2472                           ;	unspecified, using default values
  2473                           ;	Configuration Register Write Protection bit
  2474                           ;	WRTC = 0x1, unprogrammed default
  2475                           ;	Boot Block Write Protection bit
  2476                           ;	WRTB = 0x1, unprogrammed default
  2477                           ;	Data EEPROM Write Protection bit
  2478                           ;	WRTD = 0x1, unprogrammed default
  2479                           ;	Scanner Enable bit
  2480                           ;	SCANE = 0x1, unprogrammed default
  2481                           ;	Low Voltage Programming Enable bit
  2482                           ;	LVP = 0x1, unprogrammed default
  2483   300007                     	org	3145735
  2484   300007  FF                 	db	255
  2485                           
  2486                           ;Config register CONFIG5L @ 0x300008
  2487                           ;	unspecified, using default values
  2488                           ;	UserNVM Program Memory Code Protection bit
  2489                           ;	CP = 0x1, unprogrammed default
  2490                           ;	DataNVM Memory Code Protection bit
  2491                           ;	CPD = 0x1, unprogrammed default
  2492   300008                     	org	3145736
  2493   300008  FF                 	db	255
  2494                           
  2495                           ;Config register CONFIG5H @ 0x300009
  2496                           ;	unspecified, using default values
  2497   300009                     	org	3145737
  2498   300009  FF                 	db	255
  2499                           
  2500                           ;Config register CONFIG6L @ 0x30000A
  2501                           ;	unspecified, using default values
  2502                           ;	Table Read Protection Block 0
  2503                           ;	EBTR0 = 0x1, unprogrammed default
  2504                           ;	Table Read Protection Block 1
  2505                           ;	EBTR1 = 0x1, unprogrammed default
  2506                           ;	Table Read Protection Block 2
  2507                           ;	EBTR2 = 0x1, unprogrammed default
  2508                           ;	Table Read Protection Block 3
  2509                           ;	EBTR3 = 0x1, unprogrammed default
  2510                           ;	Table Read Protection Block 4
  2511                           ;	EBTR4 = 0x1, unprogrammed default
  2512                           ;	Table Read Protection Block 5
  2513                           ;	EBTR5 = 0x1, unprogrammed default
  2514                           ;	Table Read Protection Block 6
  2515                           ;	EBTR6 = 0x1, unprogrammed default
  2516                           ;	Table Read Protection Block 7
  2517                           ;	EBTR7 = 0x1, unprogrammed default
  2518   30000A                     	org	3145738
  2519   30000A  FF                 	db	255
  2520                           
  2521                           ;Config register CONFIG6H @ 0x30000B
  2522                           ;	unspecified, using default values
  2523                           ;	Boot Block Table Read Protection bit
  2524                           ;	EBTRB = 0x1, unprogrammed default
  2525   30000B                     	org	3145739
  2526   30000B  FF                 	db	255
  2527                           tosu	equ	0xFFF
  2528                           tosh	equ	0xFFE
  2529                           tosl	equ	0xFFD
  2530                           stkptr	equ	0xFFC
  2531                           pclatu	equ	0xFFB
  2532                           pclath	equ	0xFFA
  2533                           pcl	equ	0xFF9
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           indf0	equ	0xFEF
  2541                           postinc0	equ	0xFEE
  2542                           postdec0	equ	0xFED
  2543                           preinc0	equ	0xFEC
  2544                           plusw0	equ	0xFEB
  2545                           fsr0h	equ	0xFEA
  2546                           fsr0l	equ	0xFE9
  2547                           wreg	equ	0xFE8
  2548                           indf1	equ	0xFE7
  2549                           postinc1	equ	0xFE6
  2550                           postdec1	equ	0xFE5
  2551                           preinc1	equ	0xFE4
  2552                           plusw1	equ	0xFE3
  2553                           fsr1h	equ	0xFE2
  2554                           fsr1l	equ	0xFE1
  2555                           bsr	equ	0xFE0
  2556                           indf2	equ	0xFDF
  2557                           postinc2	equ	0xFDE
  2558                           postdec2	equ	0xFDD
  2559                           preinc2	equ	0xFDC
  2560                           plusw2	equ	0xFDB
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     61      61
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    respond_to_card@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    respond_to_card@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    reverseOneSquare@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    reverseOneSquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S523DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S523DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_respond_to_card
    _respond_to_card->_reverseOneSquare
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _reverseOneSquare->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0   25337
                                             39 COMRAM    22    22      0
                  _I2C_2_Master_Init
                        _LEDSon_init
                   _color_click_init
                    _initDCmotorsPWM
                    _respond_to_card
                   _reverseOneSquare
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _respond_to_card                                      7     3      4   16689
                                             32 COMRAM     7     3      4
                   _reverseOneSquare
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (2) _turnRight45                                          8     4      4    3267
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft45                                           8     4      4    3115
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseOneSquare                                     8     4      4    5880
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    3329
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setMotorPWM                                          6     4      2    1981
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LEDSon_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _respond_to_card
     _reverseOneSquare
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _stop
     _turnLeft45
       _setMotorPWM
     _turnRight45
       _setMotorPWM
   _reverseOneSquare
   _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     3D      3D       1       64.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRhhh        40      0       0      32        0.0%
BITBIGSFRhhlhh       E      0       0      33        0.0%
BITBIGSFRhhlhl       1      0       0      34        0.0%
BITBIGSFRhhllh       2      0       0      35        0.0%
BITBIGSFRhhlll      1D      0       0      36        0.0%
BITBIGSFRllhhhh      1      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      38        0.0%
BITBIGSFRllhhhh      2      0       0      39        0.0%
BITBIGSFRllhhhh     52      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      41        0.0%
BITBIGSFRllhhhl     46      0       0      42        0.0%
BITBIGSFRllhhhl      1      0       0      43        0.0%
BITBIGSFRllhhhl     2D      0       0      44        0.0%
BITBIGSFRllhhhl     1E      0       0      45        0.0%
BITBIGSFRllhhl      11      0       0      46        0.0%
BITBIGSFRllhl        1      0       0      47        0.0%
BITBIGSFRlllhh       3      0       0      48        0.0%
BITBIGSFRlllhl       5      0       0      49        0.0%
BITBIGSFRllllh      4B      0       0      50        0.0%
BITBIGSFRlllll      2D      0       0      51        0.0%
ABS                  0      0       0      52        0.0%
BIGRAM             DE9      0       0      53        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 30 00:48:17 2022

                         l22 F768                           l19 F836                           l83 FE00  
                         l76 F932                           l92 F9BC                           l97 FB16  
                         u60 F7C2                           u61 F7BE                           u70 F7D8  
                         u71 F7D4          ___wmul@multiplicand 0003            ??_respond_to_card 0025  
                        l102 FA68                          l112 FBCE                          l142 F7B2  
                        l223 F78A                          l145 F7D8                          l154 F73C  
                        l139 F802                          l148 F732                          l157 F748  
                        l246 FFFE                          l249 F7B0                          l740 F8A2  
                        l747 F8AA                          l970 F72A                          l972 F72E  
                        l980 F738                          l966 F7B2                          l974 F740  
                        l968 F7C2                          l976 F744                          l978 F734  
                        u200 FD7C                          u201 FD78                          u210 F978  
                        u211 F974                          u220 F9BC                          u221 F9B8  
                        u230 FAFE                          u231 FAFA                          u160 F852  
                        u240 FA52                          u161 F84E                          u241 FA4E  
                        u170 F870                          u250 FBA2                          u171 F86C  
                        u251 FB9E                          u307 FAB4                          u180 F88C  
                        u181 F888                          u317 FB08                          u190 FCB2  
                        u191 FCAE                          u327 FB76                          u337 FBAC  
                        u347 F94A                          u357 F98E                          u277 FC7E  
                        u367 F818                          u287 FA08                          u297 FA5C  
                        wreg 000FE8                         l1000 F7DA                         l1010 F7F0  
                       l1002 F7E4                         l1004 F7EA                         l1100 F90C  
                       l1006 F7EC                         l1110 F926                         l1102 F90E  
                       l1008 F7EE                         l1112 F930                         l1104 F918  
                       l1114 F76A                         l1106 F91A                         l1108 F924  
                       l1300 FCB2                         l1310 FD7C                         l1302 FD06  
                       l1312 FDC0                         l1304 FD1A                         l1320 F954  
                       l1400 FBBA                         l1410 F82C                         l1402 F804  
                       l1306 FD1E                         l1330 F9A4                         l1322 F960  
                       l1314 F934                         l1332 F74C                         l1404 F808  
                       l1092 F8AC                         l1308 FD60                         l1324 F97C  
                       l1316 F938                         l1412 FE04                         l1500 FC48  
                       l1406 F812                         l1094 F8B4                         l1270 F78C  
                       l1326 F988                         l1318 F944                         l1350 FADA  
                       l1342 FA92                         l1334 FA6A                         l1422 FEB4  
                       l1414 FE08                         l1430 FF9C                         l1502 FC4A  
                       l1408 F822                         l1096 F8DE                         l1280 F852  
                       l1272 F7A8                         l1328 F998                         l1352 FAE2  
                       l1344 FAAA                         l1336 FA8A                         l1424 FEF4  
                       l1416 FE34                         l1504 FC60                         l1098 F902  
                       l1290 F88C                         l1282 F85A                         l1354 FAFE  
                       l1346 FAC2                         l1370 FA22                         l1530 FFB0  
                       l1426 FF48                         l1418 FE74                         l1506 FC74  
                       l1292 F894                         l1284 F862                         l1276 F838  
                       l1380 FB38                         l1348 FACE                         l1372 FA2E  
                       l1364 F9E6                         l1356 F9BE                         l1508 FC8C  
                       l1460 FBE0                         l1452 FBD0                         l1294 F896  
                       l1286 F870                         l1278 F840                         l1390 FB64  
                       l1374 FA36                         l1366 F9FE                         l1358 F9DE  
                       l1470 FBF8                         l1462 FBE4                         l1454 FBD4  
                       l1296 F89C                         l1288 F876                         l1392 FB70  
                       l1376 FA52                         l1368 FA16                         l1480 FC22  
                       l1472 FC00                         l1464 FBE8                         l1456 FBD8  
                       l1298 FC96                         l1394 FB7E                         l1386 FB40  
                       l1378 FB18                         l1490 FC40                         l1482 FC28  
                       l1474 FC06                         l1466 FBEC                         l1458 FBDC  
                       l1396 FB86                         l1388 FB58                         l1492 FC40  
                       l1484 FC34                         l1476 FC0A                         l1468 FBF0  
                       l1398 FBA2                         l1494 FC40                         l1486 FC40  
                       l1478 FC0E                         l1496 FC44                         l1488 FC40  
                       l1498 FC46                 ?_LEDSon_init 0001                         _T2PR 000FBC  
                       _main FBD0                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9                         _stop F934                         prodh 000FF4  
                       prodl 000FF3                         start 0000                 ___param_bank 000000  
                _turnRight45 F9BE                        ?_main 0001                        ?_stop 0014  
            __end_of___lwdiv F8AC   __end_of_I2C_2_Master_Start F734   __end_of_I2C_2_Master_Write F74A  
                      status 000FD8              __initialization F724                 __end_of_main FC96  
               __end_of_stop F9BE                       ??_main 0028                       ??_stop 0018  
              __activetblptr 000003                 ?_setMotorPWM 000E                       _CCPR1H 000FAA  
                     _CCPR2H 000FA6                       _CCPR3H 000F25                       _CCPR4H 000F21  
                     _RE2PPS 000E74                       _RD5PPS 000E6F                       _RC7PPS 000E69  
                     _RD6PPS 000E70                       _RE4PPS 000E76                       _RG6PPS 000E88  
   __end_of_color_click_init F838                 _CCPTMRS0bits 000FAD                       ___wmul F78C  
                  ??___lwdiv 000B                       isa$std 000001                       stop@mL 0014  
                     stop@mR 0016            ??_initDCmotorsPWM 0001                   __accesstop 0060  
    __end_of__initialization F724                ___rparam_used 000001              _respond_to_card FE02  
             __pcstackCOMRAM 0001             _reverseOneSquare FB18            _color_writetoaddr F74A  
               _T2CLKCONbits 000FBF           ?_color_writetoaddr 0003                      ?___wmul 0001  
               ?_turnRight45 0014          ??_color_writetoaddr 0004                      _SSP2ADD 000ED6  
                    _SSP2BUF 000ED5      __end_of_respond_to_card 0000       color_writetoaddr@value 0003  
  __end_of_color_writetoaddr F76A            respond_to_card@mL 0021            respond_to_card@mR 0023  
         _I2C_2_Master_Start F72A           _I2C_2_Master_Write F73E                      __Hparam 0000  
                    __Lparam 0000          ?_I2C_2_Master_Start 0001                      ___lwdiv F838  
        ?_I2C_2_Master_Write 0001                 turnLeft45@mL 0014                 turnLeft45@mR 0016  
                    __pcinit F724                      __ramtop 0E00                      __ptext0 FBD0  
                    __ptext1 FE02                      __ptext2 F9BE                      __ptext3 FA6A  
                    __ptext4 FB18                      __ptext5 F934                      __ptext6 FC96  
                    __ptext7 F78C                      __ptext8 F838                      __ptext9 F8AC  
                  _T2CONbits 000FBD                    _T2HLTbits 000FBE         ??_I2C_2_Master_Start 0002  
       ??_I2C_2_Master_Write 0002         end_of_initialization F724            reverseOneSquare@i 001F  
          ?_color_click_init 0001                 turnRight45@i 001A           ??_color_click_init 0005  
                    postdec2 000FDD                      postinc2 000FDE              _initDCmotorsPWM F8AC  
         setMotorPWM@negDuty 0013                    _TRISAbits 000F81           setMotorPWM@posDuty 0012  
                  _TRISCbits 000F83                    _TRISDbits 000F84                    _TRISEbits 000F85  
                  _TRISFbits 000F86                    _TRISGbits 000F87                    _TRISHbits 000F88  
   color_writetoaddr@address 0004             ?_respond_to_card 0021     __end_of_reverseOneSquare FBD0  
                _CCP1CONbits 000FAB                  _CCP2CONbits 000FA7                  _CCP3CONbits 000F26  
                _CCP4CONbits 000F22                   main@motorL 002C                   main@motorR 0035  
                 _turnLeft45 FA6A               __end_of___wmul F7B2          start_initialization F724  
        respond_to_card@card 0027                ??_LEDSon_init 0001      __end_of_initDCmotorsPWM F934  
                   ??___wmul 0005          __end_of_LEDSon_init F78C             ___lwdiv@dividend 0007  
                ?_turnLeft45 0014                     ?___lwdiv 0007            _I2C_2_Master_Idle F7B2  
          _I2C_2_Master_Init F7DA            _I2C_2_Master_Stop F734           ?_I2C_2_Master_Idle 0001  
         ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0010           ?_I2C_2_Master_Stop 0001  
           ___lwdiv@quotient 000B                  turnLeft45@i 001A          ??_I2C_2_Master_Idle 0001  
        ??_I2C_2_Master_Init 0001               ___wmul@product 0005                     _LATAbits 000F79  
        ??_I2C_2_Master_Stop 0002                     _LATDbits 000F7C                     _LATFbits 000F7E  
                   _LATGbits 000F7F                     _LATHbits 000F80             ?_initDCmotorsPWM 0001  
                   _SSP2CON2 000EDA                     _SSP2STAT 000ED8    __end_of_I2C_2_Master_Idle F7DA  
  __end_of_I2C_2_Master_Init F804            ___wmul@multiplier 0001    __end_of_I2C_2_Master_Stop F73E  
               setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002                  _LEDSon_init F76A  
          ?_reverseOneSquare 0019          __end_of_setMotorPWM FE02           ??_reverseOneSquare 001D  
                   __Hrparam 0000                     __Lrparam 0000                   _ANSELDbits 000EA7  
            ___lwdiv@divisor 0009              ___lwdiv@counter 000D                     __ptext10 F804  
                   __ptext11 F74A                     __ptext12 F73E                     __ptext13 F734  
                   __ptext14 F72A                     __ptext15 F7B2                     __ptext16 F7DA  
                   __ptext17 F76A                 _SSP2CON1bits 000ED9                 _SSP2CON2bits 000EDA  
                   isa$xinst 000000                ??_turnRight45 0018                     main@card 002A  
         reverseOneSquare@mL 0019           reverseOneSquare@mR 001B                  _setMotorPWM FC96  
              turnRight45@mL 0014                turnRight45@mR 0016                 ??_turnLeft45 0018  
           _color_click_init F804                   _SSP2DATPPS 000E1D                   _SSP2CLKPPS 000E1C  
        __end_of_turnRight45 FA6A           __end_of_turnLeft45 FB18                 main@PWMcycle 002B  
