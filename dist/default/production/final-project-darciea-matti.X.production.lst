

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Dec 12 22:25:54 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Version 2.35
    75                           ; Generated 05/05/2021 GMT
    76                           ; 
    77                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F67K40 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000000                     _TRISBbits	set	3970
   110   000000                     _TX4REG	set	3812
   111   000000                     _RC4STAbits	set	3815
   112   000000                     _SP4BRGH	set	3814
   113   000000                     _LATHbits	set	3968
   114   000000                     _LATGbits	set	3967
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISDbits	set	3972
   117   000000                     _TRISGbits	set	3975
   118   000000                     _SSP2CON2bits	set	3802
   119   000000                     _INT1PPS	set	3569
   120   000000                     _RX4PPS	set	3605
   121   000000                     _SSP2CLKPPS	set	3612
   122   000000                     _SSP2DATPPS	set	3613
   123   000000                     _RC7PPS	set	3689
   124   000000                     _RE2PPS	set	3700
   125   000000                     _TRISCbits	set	3971
   126   000000                     _TRISEbits	set	3973
   127   000000                     _TRISHbits	set	3976
   128   000000                     _PORTFbits	set	3982
   129   000000                     _T2PR	set	4028
   130   000000                     _T2CONbits	set	4029
   131   000000                     _CCPR2H	set	4006
   132   000000                     _CCPR1H	set	4010
   133   000000                     _RE4PPS	set	3702
   134   000000                     _RG6PPS	set	3720
   135   000000                     _RD5PPS	set	3695
   136   000000                     _ANSELBbits	set	3738
   137   000000                     _ANSELDbits	set	3751
   138   000000                     _SSP2ADD	set	3798
   139   000000                     _SSP2CON1bits	set	3801
   140   000000                     _CCPR4H	set	3873
   141   000000                     _CCPR3H	set	3877
   142   000000                     _INTCONbits	set	4082
   143   000000                     _T2CLKCONbits	set	4031
   144   000000                     _T2HLTbits	set	4030
   145   000000                     _CCP1CONbits	set	4011
   146   000000                     _CCPTMRS0bits	set	4013
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _LATAbits	set	3961
   149   000000                     _LATDbits	set	3964
   150   000000                     _CCP3CONbits	set	3878
   151   000000                     _CCP4CONbits	set	3874
   152   000000                     _RC4REG	set	3811
   153   000000                     _SP4BRGL	set	3813
   154   000000                     _TX4STAbits	set	3816
   155   000000                     _BAUD4CONbits	set	3817
   156   000000                     _SSP2CON2	set	3802
   157   000000                     _SSP2STAT	set	3800
   158   000000                     _ANSELFbits	set	3764
   159   000000                     _SSP2BUF	set	3797
   160   000000                     _IPR0bits	set	3615
   161   000000                     _PIE0bits	set	3625
   162   000000                     _PIE4bits	set	3629
   163   000000                     _PIR4bits	set	3639
   164   000000                     _RC0PPS	set	3682
   165   000000                     _RD6PPS	set	3696
   166   000000                     _LATFbits	set	3966
   167   000000                     _TRISAbits	set	3969
   168   000000                     _PIR0bits	set	3635
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01                     STR_1:
   175                           
   176                           ; BSR set to: 14
   177   000E01  0A                 	db	10
   178   000E02  20                 	db	32
   179   000E03  45                 	db	69	;'E'
   180   000E04  58                 	db	88	;'X'
   181   000E05  50                 	db	80	;'P'
   182   000E06  45                 	db	69	;'E'
   183   000E07  43                 	db	67	;'C'
   184   000E08  54                 	db	84	;'T'
   185   000E09  45                 	db	69	;'E'
   186   000E0A  44                 	db	68	;'D'
   187   000E0B  3A                 	db	58	;':'
   188   000E0C  20                 	db	32
   189   000E0D  43                 	db	67	;'C'
   190   000E0E  6C                 	db	108	;'l'
   191   000E0F  65                 	db	101	;'e'
   192   000E10  61                 	db	97	;'a'
   193   000E11  72                 	db	114	;'r'
   194   000E12  20                 	db	32
   195   000E13  25                 	db	37
   196   000E14  64                 	db	100	;'d'
   197   000E15  2C                 	db	44
   198   000E16  52                 	db	82	;'R'
   199   000E17  20                 	db	32
   200   000E18  25                 	db	37
   201   000E19  64                 	db	100	;'d'
   202   000E1A  2C                 	db	44
   203   000E1B  20                 	db	32
   204   000E1C  47                 	db	71	;'G'
   205   000E1D  20                 	db	32
   206   000E1E  25                 	db	37
   207   000E1F  64                 	db	100	;'d'
   208   000E20  2C                 	db	44
   209   000E21  20                 	db	32
   210   000E22  42                 	db	66	;'B'
   211   000E23  20                 	db	32
   212   000E24  25                 	db	37
   213   000E25  64                 	db	100	;'d'
   214   000E26  20                 	db	32
   215   000E27  20                 	db	32
   216   000E28  43                 	db	67	;'C'
   217   000E29  41                 	db	65	;'A'
   218   000E2A  52                 	db	82	;'R'
   219   000E2B  44                 	db	68	;'D'
   220   000E2C  3A                 	db	58	;':'
   221   000E2D  20                 	db	32
   222   000E2E  25                 	db	37
   223   000E2F  64                 	db	100	;'d'
   224   000E30  20                 	db	32
   225   000E31  0A                 	db	10
   226   000E32  00                 	db	0
   227   000E33                     STR_3:
   228                           
   229                           ; BSR set to: 14
   230   000E33  0A                 	db	10
   231   000E34  20                 	db	32
   232   000E35  41                 	db	65	;'A'
   233   000E36  56                 	db	86	;'V'
   234   000E37  47                 	db	71	;'G'
   235   000E38  3A                 	db	58	;':'
   236   000E39  20                 	db	32
   237   000E3A  43                 	db	67	;'C'
   238   000E3B  6C                 	db	108	;'l'
   239   000E3C  65                 	db	101	;'e'
   240   000E3D  61                 	db	97	;'a'
   241   000E3E  72                 	db	114	;'r'
   242   000E3F  20                 	db	32
   243   000E40  25                 	db	37
   244   000E41  64                 	db	100	;'d'
   245   000E42  2C                 	db	44
   246   000E43  20                 	db	32
   247   000E44  52                 	db	82	;'R'
   248   000E45  20                 	db	32
   249   000E46  25                 	db	37
   250   000E47  64                 	db	100	;'d'
   251   000E48  2C                 	db	44
   252   000E49  20                 	db	32
   253   000E4A  47                 	db	71	;'G'
   254   000E4B  20                 	db	32
   255   000E4C  25                 	db	37
   256   000E4D  64                 	db	100	;'d'
   257   000E4E  2C                 	db	44
   258   000E4F  20                 	db	32
   259   000E50  42                 	db	66	;'B'
   260   000E51  20                 	db	32
   261   000E52  25                 	db	37
   262   000E53  64                 	db	100	;'d'
   263   000E54  20                 	db	32
   264   000E55  0A                 	db	10
   265   000E56  00                 	db	0
   266   000E57                     STR_2:
   267                           
   268                           ; BSR set to: 14
   269   000E57  0A                 	db	10
   270   000E58  20                 	db	32
   271   000E59  45                 	db	69	;'E'
   272   000E5A  78                 	db	120	;'x'
   273   000E5B  70                 	db	112	;'p'
   274   000E5C  65                 	db	101	;'e'
   275   000E5D  63                 	db	99	;'c'
   276   000E5E  74                 	db	116	;'t'
   277   000E5F  65                 	db	101	;'e'
   278   000E60  64                 	db	100	;'d'
   279   000E61  20                 	db	32
   280   000E62  63                 	db	99	;'c'
   281   000E63  6C                 	db	108	;'l'
   282   000E64  65                 	db	101	;'e'
   283   000E65  61                 	db	97	;'a'
   284   000E66  72                 	db	114	;'r'
   285   000E67  3A                 	db	58	;':'
   286   000E68  20                 	db	32
   287   000E69  25                 	db	37
   288   000E6A  64                 	db	100	;'d'
   289   000E6B  20                 	db	32
   290   000E6C  0A                 	db	10
   291   000E6D  00                 	db	0
   292   000E6E                     STR_4:
   293                           
   294                           ; BSR set to: 14
   295   000E6E  43                 	db	67	;'C'
   296   000E6F  41                 	db	65	;'A'
   297   000E70  52                 	db	82	;'R'
   298   000E71  44                 	db	68	;'D'
   299   000E72  20                 	db	32
   300   000E73  25                 	db	37
   301   000E74  64                 	db	100	;'d'
   302   000E75  20                 	db	32
   303   000E76  0A                 	db	10
   304   000E77  00                 	db	0
   305   000E78  00                 	db	0	; dummy byte at the end
   306   000000                     
   307                           ; #config settings
   308                           
   309                           	psect	cinit
   310   002F9E                     __pcinit:
   311                           	callstack 0
   312   002F9E                     start_initialization:
   313                           	callstack 0
   314   002F9E                     __initialization:
   315                           	callstack 0
   316                           
   317                           ; Clear objects allocated to BANK2 (112 bytes)
   318   002F9E  EE02  F000         	lfsr	0,__pbssBANK2
   319   002FA2  0E70               	movlw	112
   320   002FA4                     clear_0:
   321   002FA4  6AEE               	clrf	postinc0,c
   322   002FA6  06E8               	decf	wreg,f,c
   323   002FA8  E1FD               	bnz	clear_0
   324                           
   325                           ; Clear objects allocated to BANK0 (9 bytes)
   326   002FAA  EE00  F0EE         	lfsr	0,__pbssBANK0
   327   002FAE  0E09               	movlw	9
   328   002FB0                     clear_1:
   329   002FB0  6AEE               	clrf	postinc0,c
   330   002FB2  06E8               	decf	wreg,f,c
   331   002FB4  E1FD               	bnz	clear_1
   332                           
   333                           ; Clear objects allocated to COMRAM (4 bytes)
   334   002FB6  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   335   002FB8  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   336   002FBA  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   337   002FBC  6A57               	clrf	__pbssCOMRAM& (0+255),c
   338   002FBE                     end_of_initialization:
   339                           	callstack 0
   340   002FBE                     __end_of__initialization:
   341                           	callstack 0
   342   002FBE  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   343   002FC0  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   344   002FC2  0100               	movlb	0
   345   002FC4  EFF8  F008         	goto	_main	;jump to C main() function
   346                           
   347                           	psect	bssCOMRAM
   348   000057                     __pbssCOMRAM:
   349                           	callstack 0
   350   000057                     _TxBufReadCnt:
   351                           	callstack 0
   352   000057                     	ds	1
   353   000058                     _TxBufWriteCnt:
   354                           	callstack 0
   355   000058                     	ds	1
   356   000059                     _RxBufReadCnt:
   357                           	callstack 0
   358   000059                     	ds	1
   359   00005A                     _RxBufWriteCnt:
   360                           	callstack 0
   361   00005A                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364   0000EE                     __pbssBANK0:
   365                           	callstack 0
   366   0000EE                     _width:
   367                           	callstack 0
   368   0000EE                     	ds	2
   369   0000F0                     _prec:
   370                           	callstack 0
   371   0000F0                     	ds	2
   372   0000F2                     _card_detected:
   373                           	callstack 0
   374   0000F2                     	ds	2
   375   0000F4                     _response_in_progress:
   376                           	callstack 0
   377   0000F4                     	ds	2
   378   0000F6                     _flags:
   379                           	callstack 0
   380   0000F6                     	ds	1
   381                           
   382                           	psect	bssBANK2
   383   000200                     __pbssBANK2:
   384                           	callstack 0
   385   000200                     _EUSART4TXbuf:
   386                           	callstack 0
   387   000200                     	ds	60
   388   00023C                     _EUSART4RXbuf:
   389                           	callstack 0
   390   00023C                     	ds	20
   391   000250                     _dbuf:
   392                           	callstack 0
   393   000250                     	ds	32
   394                           
   395                           	psect	cstackBANK1
   396   000100                     __pcstackBANK1:
   397                           	callstack 0
   398   000100                     main@buf:
   399                           	callstack 0
   400                           
   401                           ; 150 bytes @ 0x0
   402   000100                     	ds	150
   403   000196                     main@expected_values:
   404                           	callstack 0
   405                           
   406                           ; 72 bytes @ 0x96
   407   000196                     	ds	72
   408   0001DE                     main@PWMcycle:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xDE
   412   0001DE                     	ds	1
   413   0001DF                     main@clear_read_check:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0xDF
   417   0001DF                     	ds	2
   418   0001E1                     main@red_read:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0xE1
   422   0001E1                     	ds	2
   423   0001E3                     main@green_read:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xE3
   427   0001E3                     	ds	2
   428   0001E5                     main@blue_read:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xE5
   432   0001E5                     	ds	2
   433   0001E7                     main@i:
   434                           	callstack 0
   435                           
   436                           ; 1 bytes @ 0xE7
   437   0001E7                     	ds	1
   438   0001E8                     main@clear_read:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0xE8
   442   0001E8                     	ds	2
   443   0001EA                     main@motorL:
   444                           	callstack 0
   445                           
   446                           ; 9 bytes @ 0xEA
   447   0001EA                     	ds	9
   448   0001F3                     main@motorR:
   449                           	callstack 0
   450                           
   451                           ; 9 bytes @ 0xF3
   452   0001F3                     	ds	9
   453                           
   454                           	psect	cstackBANK0
   455   000060                     __pcstackBANK0:
   456                           	callstack 0
   457   000060                     ?_vfprintf:
   458                           	callstack 0
   459   000060                     vfprintf@fp:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463   000060                     	ds	2
   464   000062                     vfprintf@fmt:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x2
   468   000062                     	ds	2
   469   000064                     vfprintf@ap:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473   000064                     	ds	2
   474   000066                     ?_sprintf:
   475                           	callstack 0
   476   000066                     sprintf@s:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x6
   480   000066                     	ds	2
   481   000068                     sprintf@fmt:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x8
   485   000068                     	ds	12
   486   000074                     sprintf@ap:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x14
   490   000074                     	ds	2
   491   000076                     sprintf@f:
   492                           	callstack 0
   493                           
   494                           ; 11 bytes @ 0x16
   495   000076                     	ds	11
   496   000081                     clear_read_calibration@buf:
   497                           	callstack 0
   498   000081                     card_response@buf:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x21
   502   000081                     	ds	2
   503   000083                     clear_read_calibration@clear_read:
   504                           	callstack 0
   505   000083                     card_response@clear_read:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x23
   509   000083                     	ds	2
   510   000085                     clear_read_calibration@clear_read_check:
   511                           	callstack 0
   512   000085                     card_response@red_read:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x25
   516   000085                     	ds	2
   517   000087                     ??_clear_read_calibration:
   518   000087                     card_response@green_read:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x27
   522   000087                     	ds	2
   523   000089                     card_response@blue_read:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x29
   527   000089                     	ds	2
   528   00008B                     clear_read_calibration@i:
   529                           	callstack 0
   530   00008B                     card_response@expected_values:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x2B
   534   00008B                     	ds	2
   535   00008D                     clear_read_calibration@i_1588:
   536                           	callstack 0
   537   00008D                     card_response@mL:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x2D
   541   00008D                     	ds	2
   542   00008F                     card_response@mR:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x2F
   546   00008F                     	ds	2
   547   000091                     card_response@normalised_values:
   548                           	callstack 0
   549                           
   550                           ; 72 bytes @ 0x31
   551   000091                     	ds	72
   552   0000D9                     card_response@master_closeness:
   553                           	callstack 0
   554                           
   555                           ; 18 bytes @ 0x79
   556   0000D9                     	ds	18
   557   0000EB                     card_response@card:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x8B
   561   0000EB                     	ds	1
   562   0000EC                     ??_main:
   563                           
   564                           ; 1 bytes @ 0x8C
   565   0000EC                     	ds	2
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     
   572                           ; 1 bytes @ 0x0
   573   000001                     	ds	1
   574   000002                     i2I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576                           
   577                           ; 1 bytes @ 0x1
   578   000002                     	ds	1
   579   000003                     ??_HighISR:
   580   000003                     
   581                           ; 1 bytes @ 0x2
   582   000003                     	ds	2
   583   000005                     ??_I2C_2_Master_Idle:
   584   000005                     ?___wmul:
   585                           	callstack 0
   586   000005                     ?___aodiv:
   587                           	callstack 0
   588   000005                     ?___aomod:
   589                           	callstack 0
   590   000005                     sendCharSerial4@charToSend:
   591                           	callstack 0
   592   000005                     make_master_closeness@buf:
   593                           	callstack 0
   594   000005                     determine_card@master_closeness:
   595                           	callstack 0
   596   000005                     ___wmul@multiplier:
   597                           	callstack 0
   598   000005                     fputc@c:
   599                           	callstack 0
   600   000005                     ___aodiv@dividend:
   601                           	callstack 0
   602   000005                     ___aomod@dividend:
   603                           	callstack 0
   604                           
   605                           ; 8 bytes @ 0x4
   606   000005                     	ds	1
   607   000006                     ??_I2C_2_Master_Read:
   608   000006                     I2C_2_Master_Write@data_byte:
   609                           	callstack 0
   610   000006                     sendStringSerial4@string:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x5
   614   000006                     	ds	1
   615   000007                     ??_determine_card:
   616   000007                     color_writetoaddr@value:
   617                           	callstack 0
   618   000007                     I2C_2_Master_Read@ack:
   619                           	callstack 0
   620   000007                     make_master_closeness@normalised_values:
   621                           	callstack 0
   622   000007                     ___wmul@multiplicand:
   623                           	callstack 0
   624   000007                     fputc@fp:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x6
   628   000007                     	ds	1
   629   000008                     color_writetoaddr@address:
   630                           	callstack 0
   631   000008                     I2C_2_Master_Read@tmp:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x7
   635   000008                     	ds	1
   636   000009                     ??_fputc:
   637   000009                     ??_color_click_init:
   638   000009                     ?_color_read_Red:
   639                           	callstack 0
   640   000009                     ?_color_read_Green:
   641                           	callstack 0
   642   000009                     ?_color_read_Blue:
   643                           	callstack 0
   644   000009                     ?_color_read_Clear:
   645                           	callstack 0
   646   000009                     make_master_closeness@master_closeness:
   647                           	callstack 0
   648   000009                     set_interrupt_threshold@AILT:
   649                           	callstack 0
   650   000009                     ___wmul@product:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654   000009                     	ds	2
   655   00000B                     ??_color_read_Red:
   656   00000B                     ??_color_read_Green:
   657   00000B                     ??_color_read_Blue:
   658   00000B                     ??_color_read_Clear:
   659   00000B                     ??_make_master_closeness:
   660   00000B                     ?___lwdiv:
   661                           	callstack 0
   662   00000B                     determine_card@current_smallest:
   663                           	callstack 0
   664   00000B                     set_interrupt_threshold@AIHT:
   665                           	callstack 0
   666   00000B                     ___lwdiv@dividend:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0xA
   670   00000B                     	ds	2
   671   00000D                     determine_card@predicted_colour:
   672                           	callstack 0
   673   00000D                     set_interrupt_threshold@persistence:
   674                           	callstack 0
   675   00000D                     ___lwdiv@divisor:
   676                           	callstack 0
   677   00000D                     ___aodiv@divisor:
   678                           	callstack 0
   679   00000D                     ___aomod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 8 bytes @ 0xC
   683   00000D                     	ds	1
   684   00000E                     determine_card@i:
   685                           	callstack 0
   686   00000E                     color_read_Red@tmp:
   687                           	callstack 0
   688   00000E                     color_read_Green@tmp:
   689                           	callstack 0
   690   00000E                     color_read_Blue@tmp:
   691                           	callstack 0
   692   00000E                     color_read_Clear@tmp:
   693                           	callstack 0
   694   00000E                     fputs@s:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0xD
   698   00000E                     	ds	1
   699   00000F                     _set_interrupt_threshold$2066:
   700                           	callstack 0
   701   00000F                     ___lwdiv@quotient:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0xE
   705   00000F                     	ds	1
   706   000010                     _set_interrupt_threshold$2067:
   707                           	callstack 0
   708   000010                     collect_avg_readings@clear_read:
   709                           	callstack 0
   710   000010                     fputs@fp:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0xF
   714   000010                     	ds	1
   715   000011                     ___lwdiv@counter:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x10
   719   000011                     	ds	1
   720   000012                     fputs@c:
   721                           	callstack 0
   722   000012                     setMotorPWM@m:
   723                           	callstack 0
   724   000012                     collect_avg_readings@red_read:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x11
   728   000012                     	ds	1
   729   000013                     fputs@i:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x12
   733   000013                     	ds	1
   734   000014                     ??_setMotorPWM:
   735   000014                     collect_avg_readings@green_read:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x13
   739   000014                     	ds	1
   740   000015                     ___aodiv@counter:
   741                           	callstack 0
   742   000015                     ___aomod@counter:
   743                           	callstack 0
   744   000015                     pad@fp:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x14
   748   000015                     	ds	1
   749   000016                     setMotorPWM@posDuty:
   750                           	callstack 0
   751   000016                     ___aodiv@sign:
   752                           	callstack 0
   753   000016                     ___aomod@sign:
   754                           	callstack 0
   755   000016                     collect_avg_readings@blue_read:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x15
   759   000016                     	ds	1
   760   000017                     ?_abs:
   761                           	callstack 0
   762   000017                     setMotorPWM@negDuty:
   763                           	callstack 0
   764   000017                     abs@a:
   765                           	callstack 0
   766   000017                     pad@buf:
   767                           	callstack 0
   768   000017                     ___aodiv@quotient:
   769                           	callstack 0
   770                           
   771                           ; 8 bytes @ 0x16
   772   000017                     	ds	1
   773   000018                     ??_collect_avg_readings:
   774   000018                     stop@mL:
   775                           	callstack 0
   776   000018                     turnLeft45@mL:
   777                           	callstack 0
   778   000018                     turnRight45@mL:
   779                           	callstack 0
   780   000018                     fullSpeedAhead@mL:
   781                           	callstack 0
   782   000018                     reverseFullSpeed@mL:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x17
   786   000018                     	ds	1
   787   000019                     ??_abs:
   788   000019                     pad@p:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x18
   792   000019                     	ds	1
   793   00001A                     stop@mR:
   794                           	callstack 0
   795   00001A                     turnLeft45@mR:
   796                           	callstack 0
   797   00001A                     turnRight45@mR:
   798                           	callstack 0
   799   00001A                     fullSpeedAhead@mR:
   800                           	callstack 0
   801   00001A                     reverseFullSpeed@mR:
   802                           	callstack 0
   803   00001A                     collect_avg_readings@i:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x19
   807   00001A                     	ds	1
   808   00001B                     ??_pad:
   809   00001B                     normalise_readings@buf:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x1A
   813   00001B                     	ds	1
   814   00001C                     ??_stop:
   815   00001C                     ??_turnLeft45:
   816   00001C                     ??_turnRight45:
   817   00001C                     ??_fullSpeedAhead:
   818   00001C                     ??_reverseFullSpeed:
   819   00001C                     collect_avg_readings@i_1599:
   820                           	callstack 0
   821   00001C                     pad@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x1B
   825   00001C                     	ds	1
   826   00001D                     fullSpeedAhead@i:
   827                           	callstack 0
   828   00001D                     reverseFullSpeed@i:
   829                           	callstack 0
   830   00001D                     normalise_readings@clear_read:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x1C
   834   00001D                     	ds	1
   835   00001E                     turnLeft45@i:
   836                           	callstack 0
   837   00001E                     turnRight45@i:
   838                           	callstack 0
   839   00001E                     collect_avg_readings@i_1600:
   840                           	callstack 0
   841   00001E                     pad@w:
   842                           	callstack 0
   843                           
   844                           ; 2 bytes @ 0x1D
   845   00001E                     	ds	1
   846   00001F                     normalise_readings@red_read:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x1E
   850   00001F                     	ds	1
   851   000020                     collect_avg_readings@i_1601:
   852                           	callstack 0
   853   000020                     motor_response@mL:
   854                           	callstack 0
   855   000020                     dtoa@fp:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x1F
   859   000020                     	ds	1
   860   000021                     normalise_readings@green_read:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x20
   864   000021                     	ds	1
   865   000022                     collect_avg_readings@i_1602:
   866                           	callstack 0
   867   000022                     motor_response@mR:
   868                           	callstack 0
   869   000022                     dtoa@d:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x21
   873   000022                     	ds	1
   874   000023                     normalise_readings@blue_read:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x22
   878   000023                     	ds	1
   879   000024                     ??_motor_response:
   880                           
   881                           ; 1 bytes @ 0x23
   882   000024                     	ds	1
   883   000025                     normalise_readings@expected_values:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x24
   887   000025                     	ds	1
   888   000026                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x25
   892   000026                     	ds	1
   893   000027                     normalise_readings@normalised_values:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ??_normalise_readings:
   899   000029                     make_master_closeness@i:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x28
   903   000029                     	ds	1
   904   00002A                     ??_dtoa:
   905                           
   906                           ; 1 bytes @ 0x29
   907   00002A                     	ds	7
   908   000031                     normalise_readings@difference:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x30
   912   000031                     	ds	1
   913   000032                     _dtoa$2585:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x31
   917   000032                     	ds	1
   918   000033                     normalise_readings@i:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x32
   922   000033                     	ds	1
   923   000034                     dtoa@p:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x33
   927   000034                     	ds	2
   928   000036                     dtoa@w:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x35
   932   000036                     	ds	2
   933   000038                     dtoa@n:
   934                           	callstack 0
   935                           
   936                           ; 8 bytes @ 0x37
   937   000038                     	ds	8
   938   000040                     dtoa@s:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x3F
   942   000040                     	ds	1
   943   000041                     dtoa@i:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x40
   947   000041                     	ds	2
   948   000043                     vfpfcnvrt@fp:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x42
   952   000043                     	ds	2
   953   000045                     vfpfcnvrt@fmt:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x44
   957   000045                     	ds	2
   958   000047                     vfpfcnvrt@ap:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x46
   962   000047                     	ds	2
   963   000049                     ??_vfpfcnvrt:
   964                           
   965                           ; 1 bytes @ 0x48
   966   000049                     	ds	2
   967   00004B                     vfpfcnvrt@convarg:
   968                           	callstack 0
   969                           
   970                           ; 8 bytes @ 0x4A
   971   00004B                     	ds	8
   972   000053                     vfpfcnvrt@cp:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x52
   976   000053                     	ds	2
   977   000055                     vfprintf@cfmt:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x54
   981   000055                     	ds	2
   982   000057                     
   983                           ; 1 bytes @ 0x56
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 21 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  i               1  231[BANK1 ] enum E14569
   994 ;;  buf           150    0[BANK1 ] unsigned char [150]
   995 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   996 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   997 ;;  motorR          9  243[BANK1 ] struct DC_motor
   998 ;;  motorL          9  234[BANK1 ] struct DC_motor
   999 ;;  clear_read      2  232[BANK1 ] unsigned int 
  1000 ;;  blue_read       2  229[BANK1 ] unsigned int 
  1001 ;;  green_read      2  227[BANK1 ] unsigned int 
  1002 ;;  red_read        2  225[BANK1 ] unsigned int 
  1003 ;;  clear_read_c    2  223[BANK1 ] unsigned int 
  1004 ;;  PWMcycle        1  222[BANK1 ] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      void 
  1007 ;; Registers used:
  1008 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1015 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Totals:         0       2     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;Total ram usage:      254 bytes
  1019 ;; Hardware stack levels required when called: 13
  1020 ;; This function calls:
  1021 ;;		_I2C_2_Master_Init
  1022 ;;		_Interrupts_init
  1023 ;;		_LEDSon_init
  1024 ;;		_card_response
  1025 ;;		_clear_read_calibration
  1026 ;;		_collect_avg_readings
  1027 ;;		_color_click_init
  1028 ;;		_color_read_Clear
  1029 ;;		_fullSpeedAhead
  1030 ;;		_initDCmotorsPWM
  1031 ;;		_initUSART4
  1032 ;;		_reverseFullSpeed
  1033 ;;		_sendStringSerial4
  1034 ;;		_setMotorPWM
  1035 ;;		_sprintf
  1036 ;;		_stop
  1037 ;; This function is called by:
  1038 ;;		Startup code after reset
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text0
  1043   0011F0                     __ptext0:
  1044                           	callstack 0
  1045   0011F0                     _main:
  1046                           	callstack 18
  1047   0011F0                     
  1048                           ;main.c: 26:     LEDSon_init();
  1049   0011F0  EC34  F018         	call	_LEDSon_init	;wreg free
  1050   0011F4                     
  1051                           ;main.c: 27:     I2C_2_Master_Init();
  1052   0011F4  ECE4  F017         	call	_I2C_2_Master_Init	;wreg free
  1053   0011F8                     
  1054                           ;main.c: 28:     color_click_init();
  1055   0011F8  EC9D  F017         	call	_color_click_init	;wreg free
  1056   0011FC                     
  1057                           ;main.c: 29:     initDCmotorsPWM();
  1058   0011FC  ECB4  F014         	call	_initDCmotorsPWM	;wreg free
  1059   001200                     
  1060                           ;main.c: 30:     initUSART4();
  1061   001200  EC45  F018         	call	_initUSART4	;wreg free
  1062   001204                     
  1063                           ;main.c: 31:     Interrupts_init();
  1064   001204  EC7E  F017         	call	_Interrupts_init	;wreg free
  1065   001208                     
  1066                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1067   001208  8486               	bsf	134,2,c	;volatile
  1068   00120A                     
  1069                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1070   00120A  010E               	movlb	14	; () banked
  1071   00120C  95B4               	bcf	180,2,b	;volatile
  1072   00120E                     
  1073                           ; BSR set to: 14
  1074                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1075   00120E  CFBC F1DE          	movff	4028,main@PWMcycle	;volatile
  1076                           
  1077                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1078   001212  0E00               	movlw	0
  1079   001214  0101               	movlb	1	; () banked
  1080   001216  6FEA               	movwf	main@motorL& (0+255),b
  1081                           
  1082                           ;main.c: 47:     motorL.direction=1;
  1083   001218  0E01               	movlw	1
  1084   00121A  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1085                           
  1086                           ;main.c: 48:     motorL.brakemode=1;
  1087   00121C  0E01               	movlw	1
  1088   00121E  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1089   001220                     
  1090                           ; BSR set to: 1
  1091                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1092   001220  0EAA               	movlw	170
  1093   001222  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1094   001224  0E0F               	movlw	15
  1095   001226  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1096   001228                     
  1097                           ; BSR set to: 1
  1098                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1099   001228  0EA6               	movlw	166
  1100   00122A  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1101   00122C  0E0F               	movlw	15
  1102   00122E  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1103   001230                     
  1104                           ; BSR set to: 1
  1105                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1106   001230  C1DE  F1ED         	movff	main@PWMcycle,main@motorL+3
  1107   001234  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1108                           
  1109                           ;main.c: 53:     motorR.power=0;
  1110   001236  0E00               	movlw	0
  1111   001238  6FF3               	movwf	main@motorR& (0+255),b
  1112                           
  1113                           ;main.c: 54:     motorR.direction=1;
  1114   00123A  0E01               	movlw	1
  1115   00123C  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1116                           
  1117                           ;main.c: 55:     motorR.brakemode=1;
  1118   00123E  0E01               	movlw	1
  1119   001240  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1120   001242                     
  1121                           ; BSR set to: 1
  1122                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1123   001242  0E25               	movlw	37
  1124   001244  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1125   001246  0E0F               	movlw	15
  1126   001248  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1127   00124A                     
  1128                           ; BSR set to: 1
  1129                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1130   00124A  0E21               	movlw	33
  1131   00124C  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1132   00124E  0E0F               	movlw	15
  1133   001250  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1134   001252                     
  1135                           ; BSR set to: 1
  1136                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1137   001252  C1DE  F1F6         	movff	main@PWMcycle,main@motorR+3
  1138   001256  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1139   001258                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 60:     setMotorPWM(&motorL);
  1142   001258  0EEA               	movlw	low main@motorL
  1143   00125A  6E12               	movwf	setMotorPWM@m^0,c
  1144   00125C  0E01               	movlw	high main@motorL
  1145   00125E  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1146   001260  EC44  F00F         	call	_setMotorPWM	;wreg free
  1147   001264                     
  1148                           ;main.c: 61:     setMotorPWM(&motorR);
  1149   001264  0EF3               	movlw	low main@motorR
  1150   001266  6E12               	movwf	setMotorPWM@m^0,c
  1151   001268  0E01               	movlw	high main@motorR
  1152   00126A  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1153   00126C  EC44  F00F         	call	_setMotorPWM	;wreg free
  1154                           
  1155                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1156   001270  0E00               	movlw	0
  1157   001272  0101               	movlb	1	; () banked
  1158   001274  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1159   001276  0E00               	movlw	0
  1160   001278  6FE1               	movwf	main@red_read& (0+255),b
  1161                           
  1162                           ;main.c: 69:     unsigned int green_read = 0;
  1163   00127A  0E00               	movlw	0
  1164   00127C  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1165   00127E  0E00               	movlw	0
  1166   001280  6FE3               	movwf	main@green_read& (0+255),b
  1167                           
  1168                           ;main.c: 70:     unsigned int blue_read = 0;
  1169   001282  0E00               	movlw	0
  1170   001284  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1171   001286  0E00               	movlw	0
  1172   001288  6FE5               	movwf	main@blue_read& (0+255),b
  1173                           
  1174                           ;main.c: 71:     unsigned int clear_read = 0;
  1175   00128A  0E00               	movlw	0
  1176   00128C  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1177   00128E  0E00               	movlw	0
  1178   001290  6FE8               	movwf	main@clear_read& (0+255),b
  1179                           
  1180                           ;main.c: 72:     unsigned int clear_read_check = 0;
  1181   001292  0E00               	movlw	0
  1182   001294  6FE0               	movwf	(main@clear_read_check+1)& (0+255),b
  1183   001296  0E00               	movlw	0
  1184   001298  6FDF               	movwf	main@clear_read_check& (0+255),b
  1185   00129A                     
  1186                           ; BSR set to: 1
  1187                           ;main.c: 73:     unsigned int expected_values[4][9];;main.c: 74:     unsigned int Return
      +                          HomeArray[2][30];;main.c: 84:     LATDbits.LATD4 = 0;
  1188   00129A  987C               	bcf	124,4,c	;volatile
  1189                           
  1190                           ;main.c: 85:     for(colour i = RED; i<= BLACK; i++){
  1191   00129C  0E01               	movlw	1
  1192   00129E  6FE7               	movwf	main@i& (0+255),b
  1193   0012A0  EF53  F009         	goto	l238
  1194   0012A4                     l239:
  1195                           
  1196                           ;main.c: 87:             LATDbits.LATD4 = 1;
  1197   0012A4  887C               	bsf	124,4,c	;volatile
  1198   0012A6                     l238:
  1199                           
  1200                           ;main.c: 86:         while(PORTFbits.RF2){
  1201   0012A6  B48E               	btfsc	142,2,c	;volatile
  1202   0012A8  EF58  F009         	goto	u2011
  1203   0012AC  EF5A  F009         	goto	u2010
  1204   0012B0                     u2011:
  1205   0012B0  EF52  F009         	goto	l239
  1206   0012B4                     u2010:
  1207   0012B4                     
  1208                           ;main.c: 89:         LATDbits.LATD4 = 0;
  1209   0012B4  987C               	bcf	124,4,c	;volatile
  1210   0012B6                     
  1211                           ;main.c: 90:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1212   0012B6  0E29               	movlw	41
  1213   0012B8  0100               	movlb	0	; () banked
  1214   0012BA  6FED               	movwf	(??_main+1)& (0+255),b
  1215   0012BC  0E96               	movlw	150
  1216   0012BE  6FEC               	movwf	??_main& (0+255),b
  1217   0012C0  0E7F               	movlw	127
  1218   0012C2                     u2067:
  1219   0012C2  2EE8               	decfsz	wreg,f,c
  1220   0012C4  D7FE               	bra	u2067
  1221   0012C6  2FEC               	decfsz	??_main& (0+255),f,b
  1222   0012C8  D7FC               	bra	u2067
  1223   0012CA  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1224   0012CC  D7FA               	bra	u2067
  1225   0012CE                     
  1226                           ;main.c: 91:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1227   0012CE  0EE8               	movlw	low main@clear_read
  1228   0012D0  6E10               	movwf	collect_avg_readings@clear_read^0,c
  1229   0012D2  0E01               	movlw	high main@clear_read
  1230   0012D4  6E11               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1231   0012D6  0EE1               	movlw	low main@red_read
  1232   0012D8  6E12               	movwf	collect_avg_readings@red_read^0,c
  1233   0012DA  0E01               	movlw	high main@red_read
  1234   0012DC  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1235   0012DE  0EE3               	movlw	low main@green_read
  1236   0012E0  6E14               	movwf	collect_avg_readings@green_read^0,c
  1237   0012E2  0E01               	movlw	high main@green_read
  1238   0012E4  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1239   0012E6  0EE5               	movlw	low main@blue_read
  1240   0012E8  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1241   0012EA  0E01               	movlw	high main@blue_read
  1242   0012EC  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1243   0012EE  EC43  F00D         	call	_collect_avg_readings	;wreg free
  1244   0012F2                     
  1245                           ;main.c: 92:         expected_values[CLEAR][i] = clear_read;
  1246   0012F2  0101               	movlb	1	; () banked
  1247   0012F4  51E7               	movf	main@i& (0+255),w,b
  1248   0012F6  0D02               	mullw	2
  1249   0012F8  0E96               	movlw	low main@expected_values
  1250   0012FA  24F3               	addwf	243,w,c
  1251   0012FC  6ED9               	movwf	fsr2l,c
  1252   0012FE  0E01               	movlw	high main@expected_values
  1253   001300  20F4               	addwfc	prodh,w,c
  1254   001302  6EDA               	movwf	fsr2h,c
  1255   001304  C1E8  FFDE         	movff	main@clear_read,postinc2
  1256   001308  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1257   00130C                     
  1258                           ; BSR set to: 1
  1259                           ;main.c: 93:         expected_values[RED][i] = red_read;
  1260   00130C  51E7               	movf	main@i& (0+255),w,b
  1261   00130E  0D02               	mullw	2
  1262   001310  0E12               	movlw	18
  1263   001312  26F3               	addwf	243,f,c
  1264   001314  0E00               	movlw	0
  1265   001316  22F4               	addwfc	244,f,c
  1266   001318  0E96               	movlw	low main@expected_values
  1267   00131A  24F3               	addwf	243,w,c
  1268   00131C  6ED9               	movwf	fsr2l,c
  1269   00131E  0E01               	movlw	high main@expected_values
  1270   001320  20F4               	addwfc	prodh,w,c
  1271   001322  6EDA               	movwf	fsr2h,c
  1272   001324  C1E1  FFDE         	movff	main@red_read,postinc2
  1273   001328  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1274   00132C                     
  1275                           ; BSR set to: 1
  1276                           ;main.c: 94:         expected_values[GREEN][i] = green_read;
  1277   00132C  51E7               	movf	main@i& (0+255),w,b
  1278   00132E  0D02               	mullw	2
  1279   001330  0E24               	movlw	36
  1280   001332  26F3               	addwf	243,f,c
  1281   001334  0E00               	movlw	0
  1282   001336  22F4               	addwfc	244,f,c
  1283   001338  0E96               	movlw	low main@expected_values
  1284   00133A  24F3               	addwf	243,w,c
  1285   00133C  6ED9               	movwf	fsr2l,c
  1286   00133E  0E01               	movlw	high main@expected_values
  1287   001340  20F4               	addwfc	prodh,w,c
  1288   001342  6EDA               	movwf	fsr2h,c
  1289   001344  C1E3  FFDE         	movff	main@green_read,postinc2
  1290   001348  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1291   00134C                     
  1292                           ; BSR set to: 1
  1293                           ;main.c: 95:         expected_values[BLUE][i] = blue_read;
  1294   00134C  51E7               	movf	main@i& (0+255),w,b
  1295   00134E  0D02               	mullw	2
  1296   001350  0E36               	movlw	54
  1297   001352  26F3               	addwf	243,f,c
  1298   001354  0E00               	movlw	0
  1299   001356  22F4               	addwfc	244,f,c
  1300   001358  0E96               	movlw	low main@expected_values
  1301   00135A  24F3               	addwf	243,w,c
  1302   00135C  6ED9               	movwf	fsr2l,c
  1303   00135E  0E01               	movlw	high main@expected_values
  1304   001360  20F4               	addwfc	prodh,w,c
  1305   001362  6EDA               	movwf	fsr2h,c
  1306   001364  C1E5  FFDE         	movff	main@blue_read,postinc2
  1307   001368  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1308   00136C                     
  1309                           ; BSR set to: 1
  1310                           ;main.c: 96:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n",
      +                           clear_read, red_read, green_read, blue_read, i);
  1311   00136C  0E00               	movlw	low main@buf
  1312   00136E  0100               	movlb	0	; () banked
  1313   001370  6F66               	movwf	sprintf@s& (0+255),b
  1314   001372  0E01               	movlw	high main@buf
  1315   001374  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1316   001376  0E01               	movlw	low STR_1
  1317   001378  6F68               	movwf	sprintf@fmt& (0+255),b
  1318   00137A  0E0E               	movlw	high STR_1
  1319   00137C  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1320   00137E  C1E8  F06A         	movff	main@clear_read,?_sprintf+4
  1321   001382  C1E9  F06B         	movff	main@clear_read+1,?_sprintf+5
  1322   001386  C1E1  F06C         	movff	main@red_read,?_sprintf+6
  1323   00138A  C1E2  F06D         	movff	main@red_read+1,?_sprintf+7
  1324   00138E  C1E3  F06E         	movff	main@green_read,?_sprintf+8
  1325   001392  C1E4  F06F         	movff	main@green_read+1,?_sprintf+9
  1326   001396  C1E5  F070         	movff	main@blue_read,?_sprintf+10
  1327   00139A  C1E6  F071         	movff	main@blue_read+1,?_sprintf+11
  1328   00139E  C1E7  F072         	movff	main@i,?_sprintf+12
  1329   0013A2  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1330   0013A4  EC52  F016         	call	_sprintf	;wreg free
  1331   0013A8                     
  1332                           ;main.c: 97:         sendStringSerial4(buf);
  1333   0013A8  0E00               	movlw	low main@buf
  1334   0013AA  6E06               	movwf	sendStringSerial4@string^0,c
  1335   0013AC  0E01               	movlw	high main@buf
  1336   0013AE  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1337   0013B0  ECB7  F017         	call	_sendStringSerial4	;wreg free
  1338   0013B4                     
  1339                           ;main.c: 98:     }
  1340   0013B4  0101               	movlb	1	; () banked
  1341   0013B6  2BE7               	incf	main@i& (0+255),f,b
  1342   0013B8                     
  1343                           ; BSR set to: 1
  1344   0013B8  0E09               	movlw	9
  1345   0013BA  65E7               	cpfsgt	main@i& (0+255),b
  1346   0013BC  EFE2  F009         	goto	u2021
  1347   0013C0  EFE4  F009         	goto	u2020
  1348   0013C4                     u2021:
  1349   0013C4  EF53  F009         	goto	l238
  1350   0013C8                     u2020:
  1351   0013C8                     
  1352                           ; BSR set to: 1
  1353                           ;main.c: 99:     LATDbits.LATD4 = 1;
  1354   0013C8  887C               	bsf	124,4,c	;volatile
  1355                           
  1356                           ;main.c: 100:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1357   0013CA  EFE8  F009         	goto	l241
  1358   0013CE                     l242:
  1359   0013CE  987C               	bcf	124,4,c	;volatile
  1360   0013D0                     l241:
  1361   0013D0  B48E               	btfsc	142,2,c	;volatile
  1362   0013D2  EFED  F009         	goto	u2031
  1363   0013D6  EFEF  F009         	goto	u2030
  1364   0013DA                     u2031:
  1365   0013DA  EFE7  F009         	goto	l242
  1366   0013DE                     u2030:
  1367   0013DE                     
  1368                           ;main.c: 101:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1369   0013DE  0E00               	movlw	low main@buf
  1370   0013E0  0100               	movlb	0	; () banked
  1371   0013E2  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1372   0013E4  0E01               	movlw	high main@buf
  1373   0013E6  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1374   0013E8  0EE8               	movlw	low main@clear_read
  1375   0013EA  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1376   0013EC  0E01               	movlw	high main@clear_read
  1377   0013EE  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1378   0013F0  0EDF               	movlw	low main@clear_read_check
  1379   0013F2  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1380   0013F4  0E01               	movlw	high main@clear_read_check
  1381   0013F6  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1382   0013F8  EC02  F012         	call	_clear_read_calibration	;wreg free
  1383   0013FC                     l244:
  1384   0013FC  B48E               	btfsc	142,2,c	;volatile
  1385   0013FE  EF03  F00A         	goto	u2041
  1386   001402  EF05  F00A         	goto	u2040
  1387   001406                     u2041:
  1388   001406  EFFE  F009         	goto	l244
  1389   00140A                     u2040:
  1390   00140A                     l3730:
  1391                           
  1392                           ;main.c: 121:     fullSpeedAhead(&motorL, &motorR);
  1393   00140A  0EEA               	movlw	low main@motorL
  1394   00140C  6E18               	movwf	fullSpeedAhead@mL^0,c
  1395   00140E  0E01               	movlw	high main@motorL
  1396   001410  6E19               	movwf	(fullSpeedAhead@mL+1)^0,c
  1397   001412  0EF3               	movlw	low main@motorR
  1398   001414  6E1A               	movwf	fullSpeedAhead@mR^0,c
  1399   001416  0E01               	movlw	high main@motorR
  1400   001418  6E1B               	movwf	(fullSpeedAhead@mR+1)^0,c
  1401   00141A  EC28  F014         	call	_fullSpeedAhead	;wreg free
  1402   00141E                     l3732:
  1403                           
  1404                           ;main.c: 124:         clear_read = color_read_Clear();
  1405   00141E  ECCB  F016         	call	_color_read_Clear	;wreg free
  1406   001422  C009  F1E8         	movff	?_color_read_Clear,main@clear_read
  1407   001426  C00A  F1E9         	movff	?_color_read_Clear+1,main@clear_read+1
  1408   00142A                     
  1409                           ;main.c: 125:         if (clear_read > clear_read_check){
  1410   00142A  0101               	movlb	1	; () banked
  1411   00142C  51E8               	movf	main@clear_read& (0+255),w,b
  1412   00142E  5DDF               	subwf	main@clear_read_check& (0+255),w,b
  1413   001430  51E9               	movf	(main@clear_read+1)& (0+255),w,b
  1414   001432  59E0               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1415   001434  B0D8               	btfsc	status,0,c
  1416   001436  EF1F  F00A         	goto	u2051
  1417   00143A  EF21  F00A         	goto	u2050
  1418   00143E                     u2051:
  1419   00143E  EF0F  F00A         	goto	l3732
  1420   001442                     u2050:
  1421   001442                     
  1422                           ; BSR set to: 1
  1423                           ;main.c: 126:             stop(&motorL, &motorR);
  1424   001442  0EEA               	movlw	low main@motorL
  1425   001444  6E18               	movwf	stop@mL^0,c
  1426   001446  0E01               	movlw	high main@motorL
  1427   001448  6E19               	movwf	(stop@mL+1)^0,c
  1428   00144A  0EF3               	movlw	low main@motorR
  1429   00144C  6E1A               	movwf	stop@mR^0,c
  1430   00144E  0E01               	movlw	high main@motorR
  1431   001450  6E1B               	movwf	(stop@mR+1)^0,c
  1432   001452  ECF8  F014         	call	_stop	;wreg free
  1433   001456                     
  1434                           ;main.c: 127:             _delay((unsigned long)((20)*(64000000/4000.0)));
  1435   001456  0E02               	movlw	2
  1436   001458  0100               	movlb	0	; () banked
  1437   00145A  6FED               	movwf	(??_main+1)& (0+255),b
  1438   00145C  0EA0               	movlw	160
  1439   00145E  6FEC               	movwf	??_main& (0+255),b
  1440   001460  0E92               	movlw	146
  1441   001462                     u2077:
  1442   001462  2EE8               	decfsz	wreg,f,c
  1443   001464  D7FE               	bra	u2077
  1444   001466  2FEC               	decfsz	??_main& (0+255),f,b
  1445   001468  D7FC               	bra	u2077
  1446   00146A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1447   00146C  D7FA               	bra	u2077
  1448   00146E  F000               	nop	
  1449   001470                     
  1450                           ;main.c: 128:             reverseFullSpeed(&motorL, &motorR);
  1451   001470  0EEA               	movlw	low main@motorL
  1452   001472  6E18               	movwf	reverseFullSpeed@mL^0,c
  1453   001474  0E01               	movlw	high main@motorL
  1454   001476  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1455   001478  0EF3               	movlw	low main@motorR
  1456   00147A  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1457   00147C  0E01               	movlw	high main@motorR
  1458   00147E  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1459   001480  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  1460                           
  1461                           ;main.c: 129:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1462   001484  0E09               	movlw	9
  1463   001486  0100               	movlb	0	; () banked
  1464   001488  6FED               	movwf	(??_main+1)& (0+255),b
  1465   00148A  0E1E               	movlw	30
  1466   00148C  6FEC               	movwf	??_main& (0+255),b
  1467   00148E  0EE4               	movlw	228
  1468   001490                     u2087:
  1469   001490  2EE8               	decfsz	wreg,f,c
  1470   001492  D7FE               	bra	u2087
  1471   001494  2FEC               	decfsz	??_main& (0+255),f,b
  1472   001496  D7FC               	bra	u2087
  1473   001498  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1474   00149A  D7FA               	bra	u2087
  1475   00149C  F000               	nop	
  1476   00149E                     
  1477                           ;main.c: 130:             stop(&motorL, &motorR);
  1478   00149E  0EEA               	movlw	low main@motorL
  1479   0014A0  6E18               	movwf	stop@mL^0,c
  1480   0014A2  0E01               	movlw	high main@motorL
  1481   0014A4  6E19               	movwf	(stop@mL+1)^0,c
  1482   0014A6  0EF3               	movlw	low main@motorR
  1483   0014A8  6E1A               	movwf	stop@mR^0,c
  1484   0014AA  0E01               	movlw	high main@motorR
  1485   0014AC  6E1B               	movwf	(stop@mR+1)^0,c
  1486   0014AE  ECF8  F014         	call	_stop	;wreg free
  1487   0014B2                     
  1488                           ;main.c: 131:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1489   0014B2  0E2A               	movlw	42
  1490   0014B4  0100               	movlb	0	; () banked
  1491   0014B6  6FEC               	movwf	??_main& (0+255),b
  1492   0014B8  0E8D               	movlw	141
  1493   0014BA                     u2097:
  1494   0014BA  2EE8               	decfsz	wreg,f,c
  1495   0014BC  D7FE               	bra	u2097
  1496   0014BE  2FEC               	decfsz	??_main& (0+255),f,b
  1497   0014C0  D7FC               	bra	u2097
  1498   0014C2  D000               	nop2	
  1499   0014C4                     
  1500                           ;main.c: 132:             card_response(buf, &clear_read, &red_read, &green_read, &blue_
      +                          read, expected_values, &motorL, &motorR);
  1501   0014C4  0E00               	movlw	low main@buf
  1502   0014C6  0100               	movlb	0	; () banked
  1503   0014C8  6F81               	movwf	card_response@buf& (0+255),b
  1504   0014CA  0E01               	movlw	high main@buf
  1505   0014CC  6F82               	movwf	(card_response@buf+1)& (0+255),b
  1506   0014CE  0EE8               	movlw	low main@clear_read
  1507   0014D0  6F83               	movwf	card_response@clear_read& (0+255),b
  1508   0014D2  0E01               	movlw	high main@clear_read
  1509   0014D4  6F84               	movwf	(card_response@clear_read+1)& (0+255),b
  1510   0014D6  0EE1               	movlw	low main@red_read
  1511   0014D8  6F85               	movwf	card_response@red_read& (0+255),b
  1512   0014DA  0E01               	movlw	high main@red_read
  1513   0014DC  6F86               	movwf	(card_response@red_read+1)& (0+255),b
  1514   0014DE  0EE3               	movlw	low main@green_read
  1515   0014E0  6F87               	movwf	card_response@green_read& (0+255),b
  1516   0014E2  0E01               	movlw	high main@green_read
  1517   0014E4  6F88               	movwf	(card_response@green_read+1)& (0+255),b
  1518   0014E6  0EE5               	movlw	low main@blue_read
  1519   0014E8  6F89               	movwf	card_response@blue_read& (0+255),b
  1520   0014EA  0E01               	movlw	high main@blue_read
  1521   0014EC  6F8A               	movwf	(card_response@blue_read+1)& (0+255),b
  1522   0014EE  0E96               	movlw	low main@expected_values
  1523   0014F0  6F8B               	movwf	card_response@expected_values& (0+255),b
  1524   0014F2  0E01               	movlw	high main@expected_values
  1525   0014F4  6F8C               	movwf	(card_response@expected_values+1)& (0+255),b
  1526   0014F6  0EEA               	movlw	low main@motorL
  1527   0014F8  6F8D               	movwf	card_response@mL& (0+255),b
  1528   0014FA  0E01               	movlw	high main@motorL
  1529   0014FC  6F8E               	movwf	(card_response@mL+1)& (0+255),b
  1530   0014FE  0EF3               	movlw	low main@motorR
  1531   001500  6F8F               	movwf	card_response@mR& (0+255),b
  1532   001502  0E01               	movlw	high main@motorR
  1533   001504  6F90               	movwf	(card_response@mR+1)& (0+255),b
  1534   001506  EC5B  F011         	call	_card_response	;wreg free
  1535   00150A                     
  1536                           ;main.c: 133:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1537   00150A  0E2A               	movlw	42
  1538   00150C  0100               	movlb	0	; () banked
  1539   00150E  6FEC               	movwf	??_main& (0+255),b
  1540   001510  0E8D               	movlw	141
  1541   001512                     u2107:
  1542   001512  2EE8               	decfsz	wreg,f,c
  1543   001514  D7FE               	bra	u2107
  1544   001516  2FEC               	decfsz	??_main& (0+255),f,b
  1545   001518  D7FC               	bra	u2107
  1546   00151A  D000               	nop2	
  1547   00151C  EF05  F00A         	goto	l3730
  1548   001520  EF3B  F000         	goto	start
  1549   001524                     __end_of_main:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function _initUSART4 *****************
  1553 ;; Defined at:
  1554 ;;		line 6 in file "serial.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;		None
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;Total ram usage:        0 bytes
  1573 ;; Hardware stack levels used: 1
  1574 ;; Hardware stack levels required when called: 4
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_main
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text1
  1583   00308A                     __ptext1:
  1584                           	callstack 0
  1585   00308A                     _initUSART4:
  1586                           	callstack 26
  1587   00308A                     
  1588                           ;serial.c: 10:     RC0PPS = 0x12;
  1589   00308A  0E12               	movlw	18
  1590   00308C  010E               	movlb	14	; () banked
  1591   00308E  6F62               	movwf	98,b	;volatile
  1592                           
  1593                           ;serial.c: 11:     RX4PPS = 0x11;
  1594   003090  0E11               	movlw	17
  1595   003092  6F15               	movwf	21,b	;volatile
  1596   003094                     
  1597                           ; BSR set to: 14
  1598                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1599   003094  8283               	bsf	131,1,c	;volatile
  1600   003096                     
  1601                           ; BSR set to: 14
  1602                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1603   003096  97E9               	bcf	233,3,b	;volatile
  1604   003098                     
  1605                           ; BSR set to: 14
  1606                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1607   003098  95E8               	bcf	232,2,b	;volatile
  1608                           
  1609                           ;serial.c: 17:     SP4BRGL = 51;
  1610   00309A  0E33               	movlw	51
  1611   00309C  6FE5               	movwf	229,b	;volatile
  1612                           
  1613                           ;serial.c: 18:     SP4BRGH = 0;
  1614   00309E  0E00               	movlw	0
  1615   0030A0  6FE6               	movwf	230,b	;volatile
  1616   0030A2                     
  1617                           ; BSR set to: 14
  1618                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1619   0030A2  89E7               	bsf	231,4,b	;volatile
  1620   0030A4                     
  1621                           ; BSR set to: 14
  1622                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1623   0030A4  8BE8               	bsf	232,5,b	;volatile
  1624   0030A6                     
  1625                           ; BSR set to: 14
  1626                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1627   0030A6  8FE7               	bsf	231,7,b	;volatile
  1628   0030A8                     
  1629                           ; BSR set to: 14
  1630   0030A8  0012               	return		;funcret
  1631   0030AA                     __end_of_initUSART4:
  1632                           	callstack 0
  1633                           
  1634 ;; *************** function _initDCmotorsPWM *****************
  1635 ;; Defined at:
  1636 ;;		line 6 in file "dc_motor.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 4
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text2
  1665   002968                     __ptext2:
  1666                           	callstack 0
  1667   002968                     _initDCmotorsPWM:
  1668                           	callstack 26
  1669   002968                     
  1670                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1671   002968  9485               	bcf	133,2,c	;volatile
  1672                           
  1673                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1674   00296A  9885               	bcf	133,4,c	;volatile
  1675                           
  1676                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1677   00296C  9E83               	bcf	131,7,c	;volatile
  1678                           
  1679                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1680   00296E  9C87               	bcf	135,6,c	;volatile
  1681   002970                     
  1682                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1683   002970  0E05               	movlw	5
  1684   002972  010E               	movlb	14	; () banked
  1685   002974  6F74               	movwf	116,b	;volatile
  1686                           
  1687                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1688   002976  0E06               	movlw	6
  1689   002978  6F76               	movwf	118,b	;volatile
  1690                           
  1691                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1692   00297A  0E07               	movlw	7
  1693   00297C  6F69               	movwf	105,b	;volatile
  1694                           
  1695                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1696   00297E  0E08               	movlw	8
  1697   002980  6F88               	movwf	136,b	;volatile
  1698                           
  1699                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1700   002982  50BD               	movf	189,w,c	;volatile
  1701   002984  0B8F               	andlw	-113
  1702   002986  0940               	iorlw	64
  1703   002988  6EBD               	movwf	189,c	;volatile
  1704                           
  1705                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1706   00298A  0EE0               	movlw	-32
  1707   00298C  16BE               	andwf	190,f,c	;volatile
  1708                           
  1709                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1710   00298E  50BF               	movf	191,w,c	;volatile
  1711   002990  0BF0               	andlw	-16
  1712   002992  0901               	iorlw	1
  1713   002994  6EBF               	movwf	191,c	;volatile
  1714                           
  1715                           ;dc_motor.c: 26:     T2PR=99;
  1716   002996  0E63               	movlw	99
  1717   002998  6EBC               	movwf	188,c	;volatile
  1718   00299A                     
  1719                           ; BSR set to: 14
  1720                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1721   00299A  8EBD               	bsf	189,7,c	;volatile
  1722                           
  1723                           ;dc_motor.c: 31:     CCPR1H=0;
  1724   00299C  0E00               	movlw	0
  1725   00299E  6EAA               	movwf	170,c	;volatile
  1726                           
  1727                           ;dc_motor.c: 32:     CCPR2H=0;
  1728   0029A0  0E00               	movlw	0
  1729   0029A2  6EA6               	movwf	166,c	;volatile
  1730                           
  1731                           ;dc_motor.c: 33:     CCPR3H=0;
  1732   0029A4  0E00               	movlw	0
  1733   0029A6  010F               	movlb	15	; () banked
  1734   0029A8  6F25               	movwf	37,b	;volatile
  1735                           
  1736                           ;dc_motor.c: 34:     CCPR4H=0;
  1737   0029AA  0E00               	movlw	0
  1738   0029AC  6F21               	movwf	33,b	;volatile
  1739                           
  1740                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1741   0029AE  0EFC               	movlw	-4
  1742   0029B0  16AD               	andwf	173,f,c	;volatile
  1743                           
  1744                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1745   0029B2  0EF3               	movlw	-13
  1746   0029B4  16AD               	andwf	173,f,c	;volatile
  1747                           
  1748                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1749   0029B6  0ECF               	movlw	-49
  1750   0029B8  16AD               	andwf	173,f,c	;volatile
  1751                           
  1752                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1753   0029BA  0E3F               	movlw	-193
  1754   0029BC  16AD               	andwf	173,f,c	;volatile
  1755   0029BE                     
  1756                           ; BSR set to: 15
  1757                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1758   0029BE  88AB               	bsf	171,4,c	;volatile
  1759                           
  1760                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1761   0029C0  50AB               	movf	171,w,c	;volatile
  1762   0029C2  0BF0               	andlw	-16
  1763   0029C4  090C               	iorlw	12
  1764   0029C6  6EAB               	movwf	171,c	;volatile
  1765   0029C8                     
  1766                           ; BSR set to: 15
  1767                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1768   0029C8  8EAB               	bsf	171,7,c	;volatile
  1769   0029CA                     
  1770                           ; BSR set to: 15
  1771                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1772   0029CA  88A7               	bsf	167,4,c	;volatile
  1773                           
  1774                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1775   0029CC  50A7               	movf	167,w,c	;volatile
  1776   0029CE  0BF0               	andlw	-16
  1777   0029D0  090C               	iorlw	12
  1778   0029D2  6EA7               	movwf	167,c	;volatile
  1779   0029D4                     
  1780                           ; BSR set to: 15
  1781                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1782   0029D4  8EA7               	bsf	167,7,c	;volatile
  1783   0029D6                     
  1784                           ; BSR set to: 15
  1785                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1786   0029D6  8926               	bsf	38,4,b	;volatile
  1787                           
  1788                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1789   0029D8  5126               	movf	38,w,b	;volatile
  1790   0029DA  0BF0               	andlw	-16
  1791   0029DC  090C               	iorlw	12
  1792   0029DE  6F26               	movwf	38,b	;volatile
  1793   0029E0                     
  1794                           ; BSR set to: 15
  1795                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1796   0029E0  8F26               	bsf	38,7,b	;volatile
  1797   0029E2                     
  1798                           ; BSR set to: 15
  1799                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1800   0029E2  8922               	bsf	34,4,b	;volatile
  1801                           
  1802                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1803   0029E4  5122               	movf	34,w,b	;volatile
  1804   0029E6  0BF0               	andlw	-16
  1805   0029E8  090C               	iorlw	12
  1806   0029EA  6F22               	movwf	34,b	;volatile
  1807   0029EC                     
  1808                           ; BSR set to: 15
  1809                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1810   0029EC  8F22               	bsf	34,7,b	;volatile
  1811   0029EE                     
  1812                           ; BSR set to: 15
  1813   0029EE  0012               	return		;funcret
  1814   0029F0                     __end_of_initDCmotorsPWM:
  1815                           	callstack 0
  1816                           
  1817 ;; *************** function _fullSpeedAhead *****************
  1818 ;; Defined at:
  1819 ;;		line 131 in file "dc_motor.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1822 ;;		 -> main@motorL(9), 
  1823 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1824 ;;		 -> main@motorR(9), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  i               2   28[COMRAM] int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;Total ram usage:        7 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; Hardware stack levels required when called: 6
  1843 ;; This function calls:
  1844 ;;		_setMotorPWM
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text3
  1851   002850                     __ptext3:
  1852                           	callstack 0
  1853   002850                     _fullSpeedAhead:
  1854                           	callstack 24
  1855   002850                     
  1856                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  1857   002850  EE20 F001          	lfsr	2,1
  1858   002854  5018               	movf	fullSpeedAhead@mL^0,w,c
  1859   002856  26D9               	addwf	fsr2l,f,c
  1860   002858  5019               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1861   00285A  22DA               	addwfc	fsr2h,f,c
  1862   00285C  0E01               	movlw	1
  1863   00285E  6EDF               	movwf	indf2,c
  1864                           
  1865                           ;dc_motor.c: 134:     mR->direction=1;
  1866   002860  EE20 F001          	lfsr	2,1
  1867   002864  501A               	movf	fullSpeedAhead@mR^0,w,c
  1868   002866  26D9               	addwf	fsr2l,f,c
  1869   002868  501B               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1870   00286A  22DA               	addwfc	fsr2h,f,c
  1871   00286C  0E01               	movlw	1
  1872   00286E  6EDF               	movwf	indf2,c
  1873   002870                     
  1874                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  1875   002870  0E00               	movlw	0
  1876   002872  6E1E               	movwf	(fullSpeedAhead@i+1)^0,c
  1877   002874  0E00               	movlw	0
  1878   002876  6E1D               	movwf	fullSpeedAhead@i^0,c
  1879   002878                     l3106:
  1880                           
  1881                           ;dc_motor.c: 136:         mL->power=i;
  1882   002878  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1883   00287C  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1884   002880  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1885                           
  1886                           ;dc_motor.c: 137:         mR->power=i;
  1887   002884  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1888   002888  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1889   00288C  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1890   002890                     
  1891                           ;dc_motor.c: 138:         setMotorPWM(mL);
  1892   002890  C018  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1893   002894  C019  F013         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1894   002898  EC44  F00F         	call	_setMotorPWM	;wreg free
  1895   00289C                     
  1896                           ;dc_motor.c: 139:         setMotorPWM(mR);
  1897   00289C  C01A  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1898   0028A0  C01B  F013         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1899   0028A4  EC44  F00F         	call	_setMotorPWM	;wreg free
  1900   0028A8                     
  1901                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1902   0028A8  0ED0               	movlw	208
  1903   0028AA  6E1C               	movwf	??_fullSpeedAhead^0,c
  1904   0028AC  0ECA               	movlw	202
  1905   0028AE                     u2117:
  1906   0028AE  2EE8               	decfsz	wreg,f,c
  1907   0028B0  D7FE               	bra	u2117
  1908   0028B2  2E1C               	decfsz	??_fullSpeedAhead^0,f,c
  1909   0028B4  D7FC               	bra	u2117
  1910   0028B6                     
  1911                           ;dc_motor.c: 141:     }
  1912   0028B6  0E0A               	movlw	10
  1913   0028B8  261D               	addwf	fullSpeedAhead@i^0,f,c
  1914   0028BA  0E00               	movlw	0
  1915   0028BC  221E               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  1916   0028BE  BE1E               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  1917   0028C0  EF6B  F014         	goto	u1481
  1918   0028C4  501E               	movf	(fullSpeedAhead@i+1)^0,w,c
  1919   0028C6  E109               	bnz	u1480
  1920   0028C8  0E3C               	movlw	60
  1921   0028CA  5C1D               	subwf	fullSpeedAhead@i^0,w,c
  1922   0028CC  A0D8               	btfss	status,0,c
  1923   0028CE  EF6B  F014         	goto	u1481
  1924   0028D2  EF6D  F014         	goto	u1480
  1925   0028D6                     u1481:
  1926   0028D6  EF3C  F014         	goto	l3106
  1927   0028DA                     u1480:
  1928   0028DA  0012               	return		;funcret
  1929   0028DC                     __end_of_fullSpeedAhead:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _color_click_init *****************
  1933 ;; Defined at:
  1934 ;;		line 5 in file "color.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;Total ram usage:        1 bytes
  1953 ;; Hardware stack levels used: 1
  1954 ;; Hardware stack levels required when called: 7
  1955 ;; This function calls:
  1956 ;;		_I2C_2_Master_Init
  1957 ;;		_color_writetoaddr
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text4
  1964   002F3A                     __ptext4:
  1965                           	callstack 0
  1966   002F3A                     _color_click_init:
  1967                           	callstack 23
  1968   002F3A                     
  1969                           ;color.c: 8:     I2C_2_Master_Init();
  1970   002F3A  ECE4  F017         	call	_I2C_2_Master_Init	;wreg free
  1971   002F3E                     
  1972                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  1973   002F3E  0E01               	movlw	1
  1974   002F40  6E07               	movwf	color_writetoaddr@value^0,c
  1975   002F42  0E00               	movlw	0
  1976   002F44  EC55  F018         	call	_color_writetoaddr
  1977   002F48                     
  1978                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1979   002F48  0E3F               	movlw	63
  1980   002F4A  6E09               	movwf	??_color_click_init^0,c
  1981   002F4C  0E55               	movlw	85
  1982   002F4E                     u2127:
  1983   002F4E  2EE8               	decfsz	wreg,f,c
  1984   002F50  D7FE               	bra	u2127
  1985   002F52  2E09               	decfsz	??_color_click_init^0,f,c
  1986   002F54  D7FC               	bra	u2127
  1987   002F56  F000               	nop	
  1988   002F58                     
  1989                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  1990   002F58  0E03               	movlw	3
  1991   002F5A  6E07               	movwf	color_writetoaddr@value^0,c
  1992   002F5C  0E00               	movlw	0
  1993   002F5E  EC55  F018         	call	_color_writetoaddr
  1994   002F62                     
  1995                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1996   002F62  0ED5               	movlw	213
  1997   002F64  6E07               	movwf	color_writetoaddr@value^0,c
  1998   002F66  0E01               	movlw	1
  1999   002F68  EC55  F018         	call	_color_writetoaddr
  2000   002F6C  0012               	return		;funcret
  2001   002F6E                     __end_of_color_click_init:
  2002                           	callstack 0
  2003                           
  2004 ;; *************** function _I2C_2_Master_Init *****************
  2005 ;; Defined at:
  2006 ;;		line 4 in file "i2c.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2024 ;;Total ram usage:        0 bytes
  2025 ;; Hardware stack levels used: 1
  2026 ;; Hardware stack levels required when called: 4
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_color_click_init
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text5
  2036   002FC8                     __ptext5:
  2037                           	callstack 0
  2038   002FC8                     _I2C_2_Master_Init:
  2039                           	callstack 25
  2040   002FC8                     
  2041                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2042   002FC8  010E               	movlb	14	; () banked
  2043   002FCA  51D9               	movf	217,w,b	;volatile
  2044   002FCC  0BF0               	andlw	-16
  2045   002FCE  0908               	iorlw	8
  2046   002FD0  6FD9               	movwf	217,b	;volatile
  2047   002FD2                     
  2048                           ; BSR set to: 14
  2049                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2050   002FD2  8BD9               	bsf	217,5,b	;volatile
  2051                           
  2052                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2053   002FD4  0E9F               	movlw	159
  2054   002FD6  6FD6               	movwf	214,b	;volatile
  2055   002FD8                     
  2056                           ; BSR set to: 14
  2057                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2058   002FD8  8A84               	bsf	132,5,c	;volatile
  2059   002FDA                     
  2060                           ; BSR set to: 14
  2061                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2062   002FDA  8C84               	bsf	132,6,c	;volatile
  2063   002FDC                     
  2064                           ; BSR set to: 14
  2065                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2066   002FDC  9BA7               	bcf	167,5,b	;volatile
  2067   002FDE                     
  2068                           ; BSR set to: 14
  2069                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2070   002FDE  9DA7               	bcf	167,6,b	;volatile
  2071                           
  2072                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2073   002FE0  0E1D               	movlw	29
  2074   002FE2  6F1D               	movwf	29,b	;volatile
  2075                           
  2076                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2077   002FE4  0E1E               	movlw	30
  2078   002FE6  6F1C               	movwf	28,b	;volatile
  2079                           
  2080                           ;i2c.c: 18:   RD5PPS=0x1C;
  2081   002FE8  0E1C               	movlw	28
  2082   002FEA  6F6F               	movwf	111,b	;volatile
  2083                           
  2084                           ;i2c.c: 19:   RD6PPS=0x1B;
  2085   002FEC  0E1B               	movlw	27
  2086   002FEE  6F70               	movwf	112,b	;volatile
  2087   002FF0                     
  2088                           ; BSR set to: 14
  2089   002FF0  0012               	return		;funcret
  2090   002FF2                     __end_of_I2C_2_Master_Init:
  2091                           	callstack 0
  2092                           
  2093 ;; *************** function _clear_read_calibration *****************
  2094 ;; Defined at:
  2095 ;;		line 11 in file "colour_identify.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2098 ;;		 -> main@buf(150), 
  2099 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2100 ;;		 -> main@clear_read(2), 
  2101 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2102 ;;		 -> main@clear_read_check(2), 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  i               2   45[BANK0 ] int 
  2105 ;;  i               2   43[BANK0 ] int 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2115 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2117 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2118 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;Total ram usage:       14 bytes
  2120 ;; Hardware stack levels used: 1
  2121 ;; Hardware stack levels required when called: 12
  2122 ;; This function calls:
  2123 ;;		_color_read_Clear
  2124 ;;		_sendStringSerial4
  2125 ;;		_sprintf
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text6
  2132   002404                     __ptext6:
  2133                           	callstack 0
  2134   002404                     _clear_read_calibration:
  2135                           	callstack 18
  2136   002404                     
  2137                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2138   002404  0E00               	movlw	0
  2139   002406  0100               	movlb	0	; () banked
  2140   002408  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2141   00240A  0E00               	movlw	0
  2142   00240C  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2143   00240E                     l3620:
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2147   00240E  ECCB  F016         	call	_color_read_Clear	;wreg free
  2148   002412  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2149   002416  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2150   00241A  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2151   00241E  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2152   002422                     
  2153                           ;colour_identify.c: 15:     }
  2154   002422  0100               	movlb	0	; () banked
  2155   002424  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2156   002426  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2157   002428                     
  2158                           ; BSR set to: 0
  2159   002428  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2160   00242A  EF20  F012         	goto	u1991
  2161   00242E  0EF5               	movlw	245
  2162   002430  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2163   002432  0E01               	movlw	1
  2164   002434  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2165   002436  A0D8               	btfss	status,0,c
  2166   002438  EF20  F012         	goto	u1991
  2167   00243C  EF22  F012         	goto	u1990
  2168   002440                     u1991:
  2169   002440  EF07  F012         	goto	l3620
  2170   002444                     u1990:
  2171   002444                     
  2172                           ; BSR set to: 0
  2173                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2174   002444  0E00               	movlw	0
  2175   002446  6F8E               	movwf	(clear_read_calibration@i_1588+1)& (0+255),b
  2176   002448  0E00               	movlw	0
  2177   00244A  6F8D               	movwf	clear_read_calibration@i_1588& (0+255),b
  2178   00244C                     l3632:
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2182   00244C  ECCB  F016         	call	_color_read_Clear	;wreg free
  2183   002450  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2184   002454  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2185   002458  5009               	movf	?_color_read_Clear^0,w,c
  2186   00245A  26DE               	addwf	postinc2,f,c
  2187   00245C  500A               	movf	(?_color_read_Clear+1)^0,w,c
  2188   00245E  22DD               	addwfc	postdec2,f,c
  2189   002460                     
  2190                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2191   002460  0E11               	movlw	17
  2192   002462  0100               	movlb	0	; () banked
  2193   002464  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2194   002466  0E3C               	movlw	60
  2195   002468  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2196   00246A  0ECB               	movlw	203
  2197   00246C                     u2137:
  2198   00246C  2EE8               	decfsz	wreg,f,c
  2199   00246E  D7FE               	bra	u2137
  2200   002470  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2201   002472  D7FC               	bra	u2137
  2202   002474  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2203   002476  D7FA               	bra	u2137
  2204   002478                     
  2205                           ;colour_identify.c: 20:     }
  2206   002478  0100               	movlb	0	; () banked
  2207   00247A  4B8D               	infsnz	clear_read_calibration@i_1588& (0+255),f,b
  2208   00247C  2B8E               	incf	(clear_read_calibration@i_1588+1)& (0+255),f,b
  2209   00247E                     
  2210                           ; BSR set to: 0
  2211   00247E  BF8E               	btfsc	(clear_read_calibration@i_1588+1)& (0+255),7,b
  2212   002480  EF4B  F012         	goto	u2001
  2213   002484  518E               	movf	(clear_read_calibration@i_1588+1)& (0+255),w,b
  2214   002486  E109               	bnz	u2000
  2215   002488  0E03               	movlw	3
  2216   00248A  5D8D               	subwf	clear_read_calibration@i_1588& (0+255),w,b
  2217   00248C  A0D8               	btfss	status,0,c
  2218   00248E  EF4B  F012         	goto	u2001
  2219   002492  EF4D  F012         	goto	u2000
  2220   002496                     u2001:
  2221   002496  EF26  F012         	goto	l3632
  2222   00249A                     u2000:
  2223   00249A                     
  2224                           ; BSR set to: 0
  2225                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2226   00249A  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2227   00249E  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2228   0024A2  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2229   0024A6  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2230   0024AA  90D8               	bcf	status,0,c
  2231   0024AC  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2232   0024AE  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2233   0024B0  90D8               	bcf	status,0,c
  2234   0024B2  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2235   0024B4  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2236   0024B6  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2237   0024BA  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2238   0024BE  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2239   0024C2  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2240   0024C6                     
  2241                           ; BSR set to: 0
  2242                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2243   0024C6  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2244   0024CA  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2245   0024CE  0E57               	movlw	low STR_2
  2246   0024D0  6F68               	movwf	sprintf@fmt& (0+255),b
  2247   0024D2  0E0E               	movlw	high STR_2
  2248   0024D4  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2249   0024D6  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2250   0024DA  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2251   0024DE  EC52  F016         	call	_sprintf	;wreg free
  2252   0024E2                     
  2253                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2254   0024E2  C081  F006         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2255   0024E6  C082  F007         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2256   0024EA  ECB7  F017         	call	_sendStringSerial4	;wreg free
  2257   0024EE                     
  2258                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2259   0024EE  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2260   0024F2  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2261   0024F6  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2262   0024FA  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2263   0024FE  0E20               	movlw	32
  2264   002500  0100               	movlb	0	; () banked
  2265   002502  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2266   002504  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2267   002506  0E03               	movlw	3
  2268   002508  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2269   00250A  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2270   00250C  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2271   002510  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2272   002514  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2273   002518  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2274   00251C                     
  2275                           ; BSR set to: 0
  2276   00251C  0012               	return		;funcret
  2277   00251E                     __end_of_clear_read_calibration:
  2278                           	callstack 0
  2279                           
  2280 ;; *************** function _card_response *****************
  2281 ;; Defined at:
  2282 ;;		line 218 in file "colour_identify.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2285 ;;		 -> main@buf(150), 
  2286 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2287 ;;		 -> main@clear_read(2), 
  2288 ;;  red_read        2   37[BANK0 ] PTR unsigned int 
  2289 ;;		 -> main@red_read(2), 
  2290 ;;  green_read      2   39[BANK0 ] PTR unsigned int 
  2291 ;;		 -> main@green_read(2), 
  2292 ;;  blue_read       2   41[BANK0 ] PTR unsigned int 
  2293 ;;		 -> main@blue_read(2), 
  2294 ;;  expected_val    2   43[BANK0 ] PTR unsigned int [9]
  2295 ;;		 -> main@expected_values(72), 
  2296 ;;  mL              2   45[BANK0 ] PTR struct DC_motor
  2297 ;;		 -> main@motorL(9), 
  2298 ;;  mR              2   47[BANK0 ] PTR struct DC_motor
  2299 ;;		 -> main@motorR(9), 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  normalised_v   72   49[BANK0 ] unsigned int [9][4]
  2302 ;;  master_close   18  121[BANK0 ] unsigned int [9]
  2303 ;;  card            1  139[BANK0 ] enum E14551
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2313 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2314 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;Total ram usage:      107 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; Hardware stack levels required when called: 12
  2320 ;; This function calls:
  2321 ;;		_collect_avg_readings
  2322 ;;		_determine_card
  2323 ;;		_make_master_closeness
  2324 ;;		_motor_response
  2325 ;;		_normalise_readings
  2326 ;;		_sendStringSerial4
  2327 ;;		_sprintf
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text7
  2334   0022B6                     __ptext7:
  2335                           	callstack 0
  2336   0022B6                     _card_response:
  2337                           	callstack 18
  2338   0022B6                     
  2339                           ;colour_identify.c: 222:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          3:     unsigned int master_closeness[9];;colour_identify.c: 225:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2340   0022B6  C083  F010         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2341   0022BA  C084  F011         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2342   0022BE  C085  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  2343   0022C2  C086  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2344   0022C6  C087  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  2345   0022CA  C088  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2346   0022CE  C089  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2347   0022D2  C08A  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2348   0022D6  EC43  F00D         	call	_collect_avg_readings	;wreg free
  2349   0022DA                     
  2350                           ;colour_identify.c: 226:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2351   0022DA  C081  F066         	movff	card_response@buf,sprintf@s
  2352   0022DE  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2353   0022E2  0E33               	movlw	low STR_3
  2354   0022E4  0100               	movlb	0	; () banked
  2355   0022E6  6F68               	movwf	sprintf@fmt& (0+255),b
  2356   0022E8  0E0E               	movlw	high STR_3
  2357   0022EA  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2358   0022EC  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2359   0022F0  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2360   0022F4  CFDE F06A          	movff	postinc2,?_sprintf+4
  2361   0022F8  CFDD F06B          	movff	postdec2,?_sprintf+5
  2362   0022FC  C085  FFD9         	movff	card_response@red_read,fsr2l
  2363   002300  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2364   002304  CFDE F06C          	movff	postinc2,?_sprintf+6
  2365   002308  CFDD F06D          	movff	postdec2,?_sprintf+7
  2366   00230C  C087  FFD9         	movff	card_response@green_read,fsr2l
  2367   002310  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2368   002314  CFDE F06E          	movff	postinc2,?_sprintf+8
  2369   002318  CFDD F06F          	movff	postdec2,?_sprintf+9
  2370   00231C  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2371   002320  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2372   002324  CFDE F070          	movff	postinc2,?_sprintf+10
  2373   002328  CFDD F071          	movff	postdec2,?_sprintf+11
  2374   00232C  EC52  F016         	call	_sprintf	;wreg free
  2375   002330                     
  2376                           ;colour_identify.c: 227:     sendStringSerial4(buf);
  2377   002330  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2378   002334  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2379   002338  ECB7  F017         	call	_sendStringSerial4	;wreg free
  2380   00233C                     
  2381                           ;colour_identify.c: 229:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2382   00233C  C081  F01B         	movff	card_response@buf,normalise_readings@buf
  2383   002340  C082  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2384   002344  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2385   002348  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2386   00234C  CFDE F01D          	movff	postinc2,normalise_readings@clear_read
  2387   002350  CFDD F01E          	movff	postdec2,normalise_readings@clear_read+1
  2388   002354  C085  FFD9         	movff	card_response@red_read,fsr2l
  2389   002358  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2390   00235C  CFDE F01F          	movff	postinc2,normalise_readings@red_read
  2391   002360  CFDD F020          	movff	postdec2,normalise_readings@red_read+1
  2392   002364  C087  FFD9         	movff	card_response@green_read,fsr2l
  2393   002368  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2394   00236C  CFDE F021          	movff	postinc2,normalise_readings@green_read
  2395   002370  CFDD F022          	movff	postdec2,normalise_readings@green_read+1
  2396   002374  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2397   002378  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2398   00237C  CFDE F023          	movff	postinc2,normalise_readings@blue_read
  2399   002380  CFDD F024          	movff	postdec2,normalise_readings@blue_read+1
  2400   002384  C08B  F025         	movff	card_response@expected_values,normalise_readings@expected_values
  2401   002388  C08C  F026         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2402   00238C  0E91               	movlw	low card_response@normalised_values
  2403   00238E  6E27               	movwf	normalise_readings@normalised_values^0,c
  2404   002390  0E00               	movlw	high card_response@normalised_values
  2405   002392  6E28               	movwf	(normalise_readings@normalised_values+1)^0,c
  2406   002394  EC92  F00A         	call	_normalise_readings	;wreg free
  2407   002398                     
  2408                           ;colour_identify.c: 231:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2409   002398  C081  F005         	movff	card_response@buf,make_master_closeness@buf
  2410   00239C  C082  F006         	movff	card_response@buf+1,make_master_closeness@buf+1
  2411   0023A0  0E91               	movlw	low card_response@normalised_values
  2412   0023A2  6E07               	movwf	make_master_closeness@normalised_values^0,c
  2413   0023A4  0E00               	movlw	high card_response@normalised_values
  2414   0023A6  6E08               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2415   0023A8  0ED9               	movlw	low card_response@master_closeness
  2416   0023AA  6E09               	movwf	make_master_closeness@master_closeness^0,c
  2417   0023AC  0E00               	movlw	high card_response@master_closeness
  2418   0023AE  6E0A               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2419   0023B0  EC8F  F012         	call	_make_master_closeness	;wreg free
  2420   0023B4                     
  2421                           ;colour_identify.c: 233:     card = determine_card(master_closeness);
  2422   0023B4  0ED9               	movlw	low card_response@master_closeness
  2423   0023B6  6E05               	movwf	determine_card@master_closeness^0,c
  2424   0023B8  0E00               	movlw	high card_response@master_closeness
  2425   0023BA  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2426   0023BC  EC3B  F015         	call	_determine_card	;wreg free
  2427   0023C0  0100               	movlb	0	; () banked
  2428   0023C2  6FEB               	movwf	card_response@card& (0+255),b
  2429   0023C4                     
  2430                           ; BSR set to: 0
  2431                           ;colour_identify.c: 234:     sprintf(buf, "CARD %d \n", card);
  2432   0023C4  C081  F066         	movff	card_response@buf,sprintf@s
  2433   0023C8  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2434   0023CC  0E6E               	movlw	low STR_4
  2435   0023CE  6F68               	movwf	sprintf@fmt& (0+255),b
  2436   0023D0  0E0E               	movlw	high STR_4
  2437   0023D2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2438   0023D4  C0EB  F06A         	movff	card_response@card,?_sprintf+4
  2439   0023D8  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2440   0023DA  EC52  F016         	call	_sprintf	;wreg free
  2441   0023DE                     
  2442                           ;colour_identify.c: 235:     sendStringSerial4(buf);
  2443   0023DE  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2444   0023E2  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2445   0023E6  ECB7  F017         	call	_sendStringSerial4	;wreg free
  2446   0023EA                     
  2447                           ;colour_identify.c: 237:     motor_response(card, mL, mR);
  2448   0023EA  C08D  F020         	movff	card_response@mL,motor_response@mL
  2449   0023EE  C08E  F021         	movff	card_response@mL+1,motor_response@mL+1
  2450   0023F2  C08F  F022         	movff	card_response@mR,motor_response@mR
  2451   0023F6  C090  F023         	movff	card_response@mR+1,motor_response@mR+1
  2452   0023FA  0100               	movlb	0	; () banked
  2453   0023FC  51EB               	movf	card_response@card& (0+255),w,b
  2454   0023FE  EC3D  F007         	call	_motor_response
  2455   002402  0012               	return		;funcret
  2456   002404                     __end_of_card_response:
  2457                           	callstack 0
  2458                           
  2459 ;; *************** function _sprintf *****************
  2460 ;; Defined at:
  2461 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2464 ;;		 -> main@buf(150), 
  2465 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2466 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  f              11   22[BANK0 ] struct _IO_FILE
  2469 ;;  ap              2   20[BANK0 ] PTR void [1]
  2470 ;;		 -> ?_sprintf(2), 
  2471 ;;  ret             2    0        int 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2    6[BANK0 ] int 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2481 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;Total ram usage:       27 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 11
  2488 ;; This function calls:
  2489 ;;		_vfprintf
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;;		_clear_read_calibration
  2493 ;;		_card_response
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text8
  2498   002CA4                     __ptext8:
  2499                           	callstack 0
  2500   002CA4                     _sprintf:
  2501                           	callstack 19
  2502   002CA4  0E6A               	movlw	low (?_sprintf+4)
  2503   002CA6  0100               	movlb	0	; () banked
  2504   002CA8  6F74               	movwf	sprintf@ap& (0+255),b
  2505   002CAA  0E00               	movlw	high (?_sprintf+4)
  2506   002CAC  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  2507   002CAE  C066  F076         	movff	sprintf@s,sprintf@f
  2508   002CB2  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  2509   002CB6                     
  2510                           ; BSR set to: 0
  2511   002CB6  0E00               	movlw	0
  2512   002CB8  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  2513   002CBA  0E00               	movlw	0
  2514   002CBC  6F79               	movwf	(sprintf@f+3)& (0+255),b
  2515   002CBE                     
  2516                           ; BSR set to: 0
  2517   002CBE  0E00               	movlw	0
  2518   002CC0  6F80               	movwf	(sprintf@f+10)& (0+255),b
  2519   002CC2  0E00               	movlw	0
  2520   002CC4  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  2521   002CC6                     
  2522                           ; BSR set to: 0
  2523   002CC6  0E76               	movlw	low sprintf@f
  2524   002CC8  6F60               	movwf	vfprintf@fp& (0+255),b
  2525   002CCA  0E00               	movlw	high sprintf@f
  2526   002CCC  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2527   002CCE  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2528   002CD2  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2529   002CD6  0E74               	movlw	low sprintf@ap
  2530   002CD8  6F64               	movwf	vfprintf@ap& (0+255),b
  2531   002CDA  0E00               	movlw	high sprintf@ap
  2532   002CDC  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2533   002CDE  EC28  F016         	call	_vfprintf	;wreg free
  2534   002CE2  0100               	movlb	0	; () banked
  2535   002CE4  5179               	movf	(sprintf@f+3)& (0+255),w,b
  2536   002CE6  2566               	addwf	sprintf@s& (0+255),w,b
  2537   002CE8  6ED9               	movwf	fsr2l,c
  2538   002CEA  517A               	movf	(sprintf@f+4)& (0+255),w,b
  2539   002CEC  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2540   002CEE  6EDA               	movwf	fsr2h,c
  2541   002CF0  0E00               	movlw	0
  2542   002CF2  6EDF               	movwf	indf2,c
  2543   002CF4                     
  2544                           ; BSR set to: 0
  2545   002CF4  0012               	return		;funcret
  2546   002CF6                     __end_of_sprintf:
  2547                           	callstack 0
  2548                           
  2549 ;; *************** function _vfprintf *****************
  2550 ;; Defined at:
  2551 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2554 ;;		 -> sprintf@f(11), 
  2555 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2556 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2557 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2558 ;;		 -> sprintf@ap(2), 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2561 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  2    0[BANK0 ] int 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2571 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;Total ram usage:        8 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; Hardware stack levels required when called: 10
  2578 ;; This function calls:
  2579 ;;		_vfpfcnvrt
  2580 ;; This function is called by:
  2581 ;;		_sprintf
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text9
  2586   002C50                     __ptext9:
  2587                           	callstack 0
  2588   002C50                     _vfprintf:
  2589                           	callstack 19
  2590   002C50                     
  2591                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2592   002C50  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2593   002C54  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2594                           
  2595                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2596   002C58  EF3C  F016         	goto	l3584
  2597   002C5C                     l3582:
  2598                           
  2599                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2600   002C5C  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2601   002C60  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2602   002C64  0E55               	movlw	low vfprintf@cfmt
  2603   002C66  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2604   002C68  0E00               	movlw	high vfprintf@cfmt
  2605   002C6A  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2606   002C6C  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2607   002C70  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2608   002C74  ECAC  F010         	call	_vfpfcnvrt	;wreg free
  2609   002C78                     l3584:
  2610                           
  2611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2612   002C78  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2613   002C7C  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2614   002C80                     	if	0	;tblptru may be non-zero
  2615   002C80                     	endif
  2616   002C80                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2617   002C80  0E00               	movlw	low (__mediumconst shr (0+16))
  2618   002C82  6EF8               	movwf	tblptru,c
  2619   002C84                     	endif
  2620   002C84  0008               	tblrd		*
  2621   002C86  50F5               	movf	tablat,w,c
  2622   002C88  0900               	iorlw	0
  2623   002C8A  A4D8               	btfss	status,2,c
  2624   002C8C  EF4A  F016         	goto	u1971
  2625   002C90  EF4C  F016         	goto	u1970
  2626   002C94                     u1971:
  2627   002C94  EF2E  F016         	goto	l3582
  2628   002C98                     u1970:
  2629   002C98                     
  2630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2631   002C98  0E00               	movlw	0
  2632   002C9A  0100               	movlb	0	; () banked
  2633   002C9C  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2634   002C9E  0E00               	movlw	0
  2635   002CA0  6F60               	movwf	?_vfprintf& (0+255),b
  2636   002CA2                     
  2637                           ; BSR set to: 0
  2638   002CA2  0012               	return		;funcret
  2639   002CA4                     __end_of_vfprintf:
  2640                           	callstack 0
  2641                           
  2642 ;; *************** function _vfpfcnvrt *****************
  2643 ;; Defined at:
  2644 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2647 ;;		 -> sprintf@f(11), 
  2648 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2649 ;;		 -> vfprintf@cfmt(2), 
  2650 ;;  ap              2   70[COMRAM] PTR PTR void 
  2651 ;;		 -> sprintf@ap(2), 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  convarg         8   74[COMRAM] struct .
  2654 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2655 ;;		 -> STR_4(10), STR_3(36), STR_2(23), STR_1(50), 
  2656 ;;  i               2    0        int 
  2657 ;;  done            2    0        int 
  2658 ;;  c               1    0        unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2668 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2669 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2671 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2672 ;;Total ram usage:       18 bytes
  2673 ;; Hardware stack levels used: 1
  2674 ;; Hardware stack levels required when called: 9
  2675 ;; This function calls:
  2676 ;;		_dtoa
  2677 ;;		_fputc
  2678 ;; This function is called by:
  2679 ;;		_vfprintf
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text10
  2684   002158                     __ptext10:
  2685                           	callstack 0
  2686   002158                     _vfpfcnvrt:
  2687                           	callstack 19
  2688   002158                     
  2689                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2690   002158  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2691   00215C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2692   002160  CFDE FFF6          	movff	postinc2,tblptrl
  2693   002164  CFDD FFF7          	movff	postdec2,tblptrh
  2694   002168                     	if	0	;tblptru may be non-zero
  2695   002168                     	endif
  2696   002168                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2697   002168  0E00               	movlw	low (__mediumconst shr (0+16))
  2698   00216A  6EF8               	movwf	tblptru,c
  2699   00216C                     	endif
  2700   00216C  0008               	tblrd		*
  2701   00216E  50F5               	movf	tablat,w,c
  2702   002170  0A25               	xorlw	37
  2703   002172  A4D8               	btfss	status,2,c
  2704   002174  EFBE  F010         	goto	u1941
  2705   002178  EFC0  F010         	goto	u1940
  2706   00217C                     u1941:
  2707   00217C  EF44  F011         	goto	l3574
  2708   002180                     u1940:
  2709   002180                     
  2710                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2711   002180  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2712   002184  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2713   002188  2ADE               	incf	postinc2,f,c
  2714   00218A  0E00               	movlw	0
  2715   00218C  22DD               	addwfc	postdec2,f,c
  2716   00218E                     
  2717                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2718   00218E  0E00               	movlw	0
  2719   002190  0100               	movlb	0	; () banked
  2720   002192  6FEF               	movwf	(_width+1)& (0+255),b
  2721   002194  0E00               	movlw	0
  2722   002196  6FEE               	movwf	_width& (0+255),b
  2723   002198  C0EE  F0F6         	movff	_width,_flags
  2724   00219C                     
  2725                           ; BSR set to: 0
  2726                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2727   00219C  69F0               	setf	_prec& (0+255),b
  2728   00219E  69F1               	setf	(_prec+1)& (0+255),b
  2729   0021A0                     
  2730                           ; BSR set to: 0
  2731                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2732   0021A0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2733   0021A4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2734   0021A8  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2735   0021AC  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2736   0021B0                     
  2737                           ; BSR set to: 0
  2738                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2739   0021B0  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2740   0021B4  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2741   0021B8                     	if	0	;tblptru may be non-zero
  2742   0021B8                     	endif
  2743   0021B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2744   0021B8  0E00               	movlw	low (__mediumconst shr (0+16))
  2745   0021BA  6EF8               	movwf	tblptru,c
  2746   0021BC                     	endif
  2747   0021BC  0008               	tblrd		*
  2748   0021BE  50F5               	movf	tablat,w,c
  2749   0021C0  0A64               	xorlw	100
  2750   0021C2  B4D8               	btfsc	status,2,c
  2751   0021C4  EFE6  F010         	goto	u1951
  2752   0021C8  EFE8  F010         	goto	u1950
  2753   0021CC                     u1951:
  2754   0021CC  EFF8  F010         	goto	l3564
  2755   0021D0                     u1950:
  2756   0021D0                     
  2757                           ; BSR set to: 0
  2758   0021D0  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2759   0021D4  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2760   0021D8                     	if	0	;tblptru may be non-zero
  2761   0021D8                     	endif
  2762   0021D8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2763   0021D8  0E00               	movlw	low (__mediumconst shr (0+16))
  2764   0021DA  6EF8               	movwf	tblptru,c
  2765   0021DC                     	endif
  2766   0021DC  0008               	tblrd		*
  2767   0021DE  50F5               	movf	tablat,w,c
  2768   0021E0  0A69               	xorlw	105
  2769   0021E2  A4D8               	btfss	status,2,c
  2770   0021E4  EFF6  F010         	goto	u1961
  2771   0021E8  EFF8  F010         	goto	u1960
  2772   0021EC                     u1961:
  2773   0021EC  EF3B  F011         	goto	l3570
  2774   0021F0                     u1960:
  2775   0021F0                     l3564:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2779   0021F0  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2780   0021F4  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2781   0021F8  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2782   0021FC  0E02               	movlw	2
  2783   0021FE  26DE               	addwf	postinc2,f,c
  2784   002200  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2785   002204  0E00               	movlw	0
  2786   002206  22DD               	addwfc	postdec2,f,c
  2787   002208  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2788   00220C  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2789   002210  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2790   002214  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2791   002218  0E00               	movlw	0
  2792   00221A  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2793   00221C  0EFF               	movlw	-1
  2794   00221E  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2795   002220  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2796   002222  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2797   002224  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2798   002226  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2799   002228  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2800                           
  2801                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2802   00222A  0E01               	movlw	1
  2803   00222C  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2804   00222E  6E49               	movwf	??_vfpfcnvrt^0,c
  2805   002230  0E00               	movlw	0
  2806   002232  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2807   002234  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2808   002236  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2809   00223A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2810   00223E  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2811   002242  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2812   002246                     
  2813                           ; BSR set to: 0
  2814                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2815   002246  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2816   00224A  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2817   00224E  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2818   002252  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2819   002256  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2820   00225A  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2821   00225E  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2822   002262  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2823   002266  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2824   00226A  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2825   00226E  EC04  F00C         	call	_dtoa	;wreg free
  2826   002272  EF5A  F011         	goto	l1255
  2827   002276                     l3570:
  2828                           
  2829                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2830   002276  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2831   00227A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2832   00227E  2ADE               	incf	postinc2,f,c
  2833   002280  0E00               	movlw	0
  2834   002282  22DD               	addwfc	postdec2,f,c
  2835   002284  EF5A  F011         	goto	l1255
  2836   002288                     l3574:
  2837                           
  2838                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2839   002288  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2840   00228C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2841   002290  CFDE FFF6          	movff	postinc2,tblptrl
  2842   002294  CFDD FFF7          	movff	postdec2,tblptrh
  2843   002298                     	if	0	;tblptru may be non-zero
  2844   002298                     	endif
  2845   002298                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2846   002298  0E00               	movlw	low (__mediumconst shr (0+16))
  2847   00229A  6EF8               	movwf	tblptru,c
  2848   00229C                     	endif
  2849   00229C  0008               	tblrd		*
  2850   00229E  50F5               	movf	tablat,w,c
  2851   0022A0  6E05               	movwf	fputc@c^0,c
  2852   0022A2  6A06               	clrf	(fputc@c+1)^0,c
  2853   0022A4  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2854   0022A8  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2855   0022AC  EC15  F013         	call	_fputc	;wreg free
  2856   0022B0  EF3B  F011         	goto	l3570
  2857   0022B4                     l1255:
  2858   0022B4  0012               	return		;funcret
  2859   0022B6                     __end_of_vfpfcnvrt:
  2860                           	callstack 0
  2861                           
  2862 ;; *************** function _dtoa *****************
  2863 ;; Defined at:
  2864 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2867 ;;		 -> sprintf@f(11), 
  2868 ;;  d               8   33[COMRAM] long long 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  n               8   55[COMRAM] long long 
  2871 ;;  i               2   64[COMRAM] int 
  2872 ;;  w               2   53[COMRAM] int 
  2873 ;;  p               2   51[COMRAM] int 
  2874 ;;  s               1   63[COMRAM] unsigned char 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2884 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2885 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2886 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;Total ram usage:       35 bytes
  2889 ;; Hardware stack levels used: 1
  2890 ;; Hardware stack levels required when called: 8
  2891 ;; This function calls:
  2892 ;;		___aodiv
  2893 ;;		___aomod
  2894 ;;		_abs
  2895 ;;		_pad
  2896 ;; This function is called by:
  2897 ;;		_vfpfcnvrt
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text11
  2902   001808                     __ptext11:
  2903                           	callstack 0
  2904   001808                     _dtoa:
  2905                           	callstack 19
  2906   001808                     
  2907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2908   001808  C022  F038         	movff	dtoa@d,dtoa@n
  2909   00180C  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2910   001810  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2911   001814  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2912   001818  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2913   00181C  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2914   001820  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2915   001824  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2916   001828                     
  2917                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2918   001828  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2919   00182A  EF19  F00C         	goto	u1841
  2920   00182E  EF1C  F00C         	goto	u1840
  2921   001832                     u1841:
  2922   001832  0E01               	movlw	1
  2923   001834  EF1D  F00C         	goto	u1850
  2924   001838                     u1840:
  2925   001838  0E00               	movlw	0
  2926   00183A                     u1850:
  2927   00183A  6E40               	movwf	dtoa@s^0,c
  2928   00183C                     
  2929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2930   00183C  5040               	movf	dtoa@s^0,w,c
  2931   00183E  B4D8               	btfsc	status,2,c
  2932   001840  EF24  F00C         	goto	u1861
  2933   001844  EF26  F00C         	goto	u1860
  2934   001848                     u1861:
  2935   001848  EF36  F00C         	goto	l3506
  2936   00184C                     u1860:
  2937   00184C                     
  2938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2939   00184C  1E3F               	comf	(dtoa@n+7)^0,f,c
  2940   00184E  1E3E               	comf	(dtoa@n+6)^0,f,c
  2941   001850  1E3D               	comf	(dtoa@n+5)^0,f,c
  2942   001852  1E3C               	comf	(dtoa@n+4)^0,f,c
  2943   001854  1E3B               	comf	(dtoa@n+3)^0,f,c
  2944   001856  1E3A               	comf	(dtoa@n+2)^0,f,c
  2945   001858  1E39               	comf	(dtoa@n+1)^0,f,c
  2946   00185A  6C38               	negf	dtoa@n^0,c
  2947   00185C  0E00               	movlw	0
  2948   00185E  2239               	addwfc	(dtoa@n+1)^0,f,c
  2949   001860  223A               	addwfc	(dtoa@n+2)^0,f,c
  2950   001862  223B               	addwfc	(dtoa@n+3)^0,f,c
  2951   001864  223C               	addwfc	(dtoa@n+4)^0,f,c
  2952   001866  223D               	addwfc	(dtoa@n+5)^0,f,c
  2953   001868  223E               	addwfc	(dtoa@n+6)^0,f,c
  2954   00186A  223F               	addwfc	(dtoa@n+7)^0,f,c
  2955   00186C                     l3506:
  2956                           
  2957                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2958   00186C  0100               	movlb	0	; () banked
  2959   00186E  BFF1               	btfsc	(_prec+1)& (0+255),7,b
  2960   001870  EF44  F00C         	goto	u1870
  2961   001874  51F1               	movf	(_prec+1)& (0+255),w,b
  2962   001876  E106               	bnz	u1871
  2963   001878  05F0               	decf	_prec& (0+255),w,b
  2964   00187A  B0D8               	btfsc	status,0,c
  2965   00187C  EF42  F00C         	goto	u1871
  2966   001880  EF44  F00C         	goto	u1870
  2967   001884                     u1871:
  2968   001884  EF4A  F00C         	goto	l1234
  2969   001888                     u1870:
  2970   001888                     
  2971                           ; BSR set to: 0
  2972   001888  0E00               	movlw	0
  2973   00188A  6E35               	movwf	(dtoa@p+1)^0,c
  2974   00188C  0E01               	movlw	1
  2975   00188E  6E34               	movwf	dtoa@p^0,c
  2976   001890  EF4E  F00C         	goto	l1236
  2977   001894                     l1234:
  2978                           
  2979                           ; BSR set to: 0
  2980   001894  C0F0  F034         	movff	_prec,dtoa@p
  2981   001898  C0F1  F035         	movff	_prec+1,dtoa@p+1
  2982   00189C                     l1236:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2986   00189C  C0EE  F036         	movff	_width,dtoa@w
  2987   0018A0  C0EF  F037         	movff	_width+1,dtoa@w+1
  2988   0018A4                     
  2989                           ; BSR set to: 0
  2990                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2991   0018A4  5040               	movf	dtoa@s^0,w,c
  2992   0018A6  B4D8               	btfsc	status,2,c
  2993   0018A8  EF58  F00C         	goto	u1881
  2994   0018AC  EF5A  F00C         	goto	u1880
  2995   0018B0                     u1881:
  2996   0018B0  EF71  F00C         	goto	l1237
  2997   0018B4                     u1880:
  2998   0018B4                     
  2999                           ; BSR set to: 0
  3000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3001   0018B4  0636               	decf	dtoa@w^0,f,c
  3002   0018B6  A0D8               	btfss	status,0,c
  3003   0018B8  0637               	decf	(dtoa@w+1)^0,f,c
  3004   0018BA                     
  3005                           ; BSR set to: 0
  3006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3007   0018BA  5040               	movf	dtoa@s^0,w,c
  3008   0018BC  A4D8               	btfss	status,2,c
  3009   0018BE  EF63  F00C         	goto	u1891
  3010   0018C2  EF65  F00C         	goto	u1890
  3011   0018C6                     u1891:
  3012   0018C6  EF6B  F00C         	goto	l3518
  3013   0018CA                     u1890:
  3014   0018CA                     
  3015                           ; BSR set to: 0
  3016   0018CA  0E00               	movlw	0
  3017   0018CC  6E33               	movwf	(_dtoa$2585+1)^0,c
  3018   0018CE  0E2B               	movlw	43
  3019   0018D0  6E32               	movwf	_dtoa$2585^0,c
  3020   0018D2  EF6F  F00C         	goto	l3520
  3021   0018D6                     l3518:
  3022                           
  3023                           ; BSR set to: 0
  3024   0018D6  0E00               	movlw	0
  3025   0018D8  6E33               	movwf	(_dtoa$2585+1)^0,c
  3026   0018DA  0E2D               	movlw	45
  3027   0018DC  6E32               	movwf	_dtoa$2585^0,c
  3028   0018DE                     l3520:
  3029                           
  3030                           ; BSR set to: 0
  3031   0018DE  C032  F040         	movff	_dtoa$2585,dtoa@s
  3032   0018E2                     l1237:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3036   0018E2  0E00               	movlw	0
  3037   0018E4  6E42               	movwf	(dtoa@i+1)^0,c
  3038   0018E6  0E1F               	movlw	31
  3039   0018E8  6E41               	movwf	dtoa@i^0,c
  3040   0018EA                     
  3041                           ; BSR set to: 0
  3042                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3043   0018EA  0E00               	movlw	0
  3044   0018EC  0102               	movlb	2	; () banked
  3045   0018EE  6F6F               	movwf	(_dbuf+31)& (0+255),b
  3046                           
  3047                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3048   0018F0  EFF6  F00C         	goto	l3534
  3049   0018F4                     l3524:
  3050                           
  3051                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3052   0018F4  0641               	decf	dtoa@i^0,f,c
  3053   0018F6  A0D8               	btfss	status,0,c
  3054   0018F8  0642               	decf	(dtoa@i+1)^0,f,c
  3055   0018FA                     
  3056                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3057   0018FA  0E50               	movlw	low _dbuf
  3058   0018FC  2441               	addwf	dtoa@i^0,w,c
  3059   0018FE  6ED9               	movwf	fsr2l,c
  3060   001900  0E02               	movlw	high _dbuf
  3061   001902  2042               	addwfc	(dtoa@i+1)^0,w,c
  3062   001904  6EDA               	movwf	fsr2h,c
  3063   001906  C038  F005         	movff	dtoa@n,___aomod@dividend
  3064   00190A  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  3065   00190E  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  3066   001912  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  3067   001916  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  3068   00191A  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  3069   00191E  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  3070   001922  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  3071   001926  0E0A               	movlw	10
  3072   001928  6E0D               	movwf	___aomod@divisor^0,c
  3073   00192A  0E00               	movlw	0
  3074   00192C  6E0E               	movwf	(___aomod@divisor+1)^0,c
  3075   00192E  0E00               	movlw	0
  3076   001930  6E0F               	movwf	(___aomod@divisor+2)^0,c
  3077   001932  0E00               	movlw	0
  3078   001934  6E10               	movwf	(___aomod@divisor+3)^0,c
  3079   001936  0E00               	movlw	0
  3080   001938  6E11               	movwf	(___aomod@divisor+4)^0,c
  3081   00193A  0E00               	movlw	0
  3082   00193C  6E12               	movwf	(___aomod@divisor+5)^0,c
  3083   00193E  0E00               	movlw	0
  3084   001940  6E13               	movwf	(___aomod@divisor+6)^0,c
  3085   001942  0E00               	movlw	0
  3086   001944  6E14               	movwf	(___aomod@divisor+7)^0,c
  3087   001946  ECFA  F00F         	call	___aomod	;wreg free
  3088   00194A  C005  F02A         	movff	?___aomod,??_dtoa
  3089   00194E  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  3090   001952  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  3091   001956  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  3092   00195A  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  3093   00195E  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  3094   001962  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  3095   001966  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  3096   00196A  C02A  F017         	movff	??_dtoa,abs@a
  3097   00196E  C02B  F018         	movff	??_dtoa+1,abs@a+1
  3098   001972  EC5E  F017         	call	_abs	;wreg free
  3099   001976  5017               	movf	?_abs^0,w,c
  3100   001978  0F30               	addlw	48
  3101   00197A  6EDF               	movwf	indf2,c
  3102   00197C                     
  3103                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3104   00197C  0634               	decf	dtoa@p^0,f,c
  3105   00197E  A0D8               	btfss	status,0,c
  3106   001980  0635               	decf	(dtoa@p+1)^0,f,c
  3107   001982                     
  3108                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3109   001982  0636               	decf	dtoa@w^0,f,c
  3110   001984  A0D8               	btfss	status,0,c
  3111   001986  0637               	decf	(dtoa@w+1)^0,f,c
  3112   001988                     
  3113                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3114   001988  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3115   00198C  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3116   001990  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3117   001994  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3118   001998  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3119   00199C  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3120   0019A0  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3121   0019A4  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3122   0019A8  0E0A               	movlw	10
  3123   0019AA  6E0D               	movwf	___aodiv@divisor^0,c
  3124   0019AC  0E00               	movlw	0
  3125   0019AE  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3126   0019B0  0E00               	movlw	0
  3127   0019B2  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3128   0019B4  0E00               	movlw	0
  3129   0019B6  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3130   0019B8  0E00               	movlw	0
  3131   0019BA  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3132   0019BC  0E00               	movlw	0
  3133   0019BE  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3134   0019C0  0E00               	movlw	0
  3135   0019C2  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3136   0019C4  0E00               	movlw	0
  3137   0019C6  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3138   0019C8  EC80  F00E         	call	___aodiv	;wreg free
  3139   0019CC  C005  F038         	movff	?___aodiv,dtoa@n
  3140   0019D0  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3141   0019D4  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3142   0019D8  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3143   0019DC  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3144   0019E0  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3145   0019E4  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3146   0019E8  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3147   0019EC                     l3534:
  3148                           
  3149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3150   0019EC  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3151   0019EE  EF01  F00D         	goto	u1901
  3152   0019F2  5042               	movf	(dtoa@i+1)^0,w,c
  3153   0019F4  E108               	bnz	u1900
  3154   0019F6  0441               	decf	dtoa@i^0,w,c
  3155   0019F8  A0D8               	btfss	status,0,c
  3156   0019FA  EF01  F00D         	goto	u1901
  3157   0019FE  EF03  F00D         	goto	u1900
  3158   001A02                     u1901:
  3159   001A02  EF1F  F00D         	goto	l3540
  3160   001A06                     u1900:
  3161   001A06  5038               	movf	dtoa@n^0,w,c
  3162   001A08  1039               	iorwf	(dtoa@n+1)^0,w,c
  3163   001A0A  103A               	iorwf	(dtoa@n+2)^0,w,c
  3164   001A0C  103B               	iorwf	(dtoa@n+3)^0,w,c
  3165   001A0E  103C               	iorwf	(dtoa@n+4)^0,w,c
  3166   001A10  103D               	iorwf	(dtoa@n+5)^0,w,c
  3167   001A12  103E               	iorwf	(dtoa@n+6)^0,w,c
  3168   001A14  103F               	iorwf	(dtoa@n+7)^0,w,c
  3169   001A16  A4D8               	btfss	status,2,c
  3170   001A18  EF10  F00D         	goto	u1911
  3171   001A1C  EF12  F00D         	goto	u1910
  3172   001A20                     u1911:
  3173   001A20  EF7A  F00C         	goto	l3524
  3174   001A24                     u1910:
  3175   001A24  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3176   001A26  EF1F  F00D         	goto	u1920
  3177   001A2A  5035               	movf	(dtoa@p+1)^0,w,c
  3178   001A2C  E106               	bnz	u1921
  3179   001A2E  0434               	decf	dtoa@p^0,w,c
  3180   001A30  B0D8               	btfsc	status,0,c
  3181   001A32  EF1D  F00D         	goto	u1921
  3182   001A36  EF1F  F00D         	goto	u1920
  3183   001A3A                     u1921:
  3184   001A3A  EF7A  F00C         	goto	l3524
  3185   001A3E                     u1920:
  3186   001A3E                     l3540:
  3187                           
  3188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3189   001A3E  5040               	movf	dtoa@s^0,w,c
  3190   001A40  B4D8               	btfsc	status,2,c
  3191   001A42  EF25  F00D         	goto	u1931
  3192   001A46  EF27  F00D         	goto	u1930
  3193   001A4A                     u1931:
  3194   001A4A  EF32  F00D         	goto	l3546
  3195   001A4E                     u1930:
  3196   001A4E                     
  3197                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3198   001A4E  0641               	decf	dtoa@i^0,f,c
  3199   001A50  A0D8               	btfss	status,0,c
  3200   001A52  0642               	decf	(dtoa@i+1)^0,f,c
  3201   001A54                     
  3202                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3203   001A54  0E50               	movlw	low _dbuf
  3204   001A56  2441               	addwf	dtoa@i^0,w,c
  3205   001A58  6ED9               	movwf	fsr2l,c
  3206   001A5A  0E02               	movlw	high _dbuf
  3207   001A5C  2042               	addwfc	(dtoa@i+1)^0,w,c
  3208   001A5E  6EDA               	movwf	fsr2h,c
  3209   001A60  C040  FFDF         	movff	dtoa@s,indf2
  3210   001A64                     l3546:
  3211                           
  3212                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3213   001A64  C020  F015         	movff	dtoa@fp,pad@fp
  3214   001A68  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3215   001A6C  0E50               	movlw	low _dbuf
  3216   001A6E  2441               	addwf	dtoa@i^0,w,c
  3217   001A70  6E17               	movwf	pad@buf^0,c
  3218   001A72  0E02               	movlw	high _dbuf
  3219   001A74  2042               	addwfc	(dtoa@i+1)^0,w,c
  3220   001A76  6E18               	movwf	(pad@buf+1)^0,c
  3221   001A78  C036  F019         	movff	dtoa@w,pad@p
  3222   001A7C  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3223   001A80  EC7D  F015         	call	_pad	;wreg free
  3224   001A84  0012               	return		;funcret
  3225   001A86                     __end_of_dtoa:
  3226                           	callstack 0
  3227                           
  3228 ;; *************** function _pad *****************
  3229 ;; Defined at:
  3230 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3233 ;;		 -> sprintf@f(11), 
  3234 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3235 ;;		 -> dbuf(32), 
  3236 ;;  p               2   24[COMRAM] int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  w               2   29[COMRAM] int 
  3239 ;;  i               2   27[COMRAM] int 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3249 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3250 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3252 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3253 ;;Total ram usage:       11 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 7
  3256 ;; This function calls:
  3257 ;;		_fputc
  3258 ;;		_fputs
  3259 ;; This function is called by:
  3260 ;;		_dtoa
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text12
  3265   002AFA                     __ptext12:
  3266                           	callstack 0
  3267   002AFA                     _pad:
  3268                           	callstack 19
  3269   002AFA                     
  3270                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3271   002AFA  BE1A               	btfsc	(pad@p+1)^0,7,c
  3272   002AFC  EF82  F015         	goto	u1821
  3273   002B00  EF84  F015         	goto	u1820
  3274   002B04                     u1821:
  3275   002B04  EF8A  F015         	goto	l3488
  3276   002B08                     u1820:
  3277   002B08  C019  F01E         	movff	pad@p,pad@w
  3278   002B0C  C01A  F01F         	movff	pad@p+1,pad@w+1
  3279   002B10  EF8E  F015         	goto	l1225
  3280   002B14                     l3488:
  3281   002B14  0E00               	movlw	0
  3282   002B16  6E1F               	movwf	(pad@w+1)^0,c
  3283   002B18  0E00               	movlw	0
  3284   002B1A  6E1E               	movwf	pad@w^0,c
  3285   002B1C                     l1225:
  3286                           
  3287                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3288   002B1C  0E00               	movlw	0
  3289   002B1E  6E1D               	movwf	(pad@i+1)^0,c
  3290   002B20  0E00               	movlw	0
  3291   002B22  6E1C               	movwf	pad@i^0,c
  3292                           
  3293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3294   002B24  EFA0  F015         	goto	l3494
  3295   002B28                     l3490:
  3296                           
  3297                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3298   002B28  0E00               	movlw	0
  3299   002B2A  6E06               	movwf	(fputc@c+1)^0,c
  3300   002B2C  0E20               	movlw	32
  3301   002B2E  6E05               	movwf	fputc@c^0,c
  3302   002B30  C015  F007         	movff	pad@fp,fputc@fp
  3303   002B34  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3304   002B38  EC15  F013         	call	_fputc	;wreg free
  3305   002B3C                     
  3306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3307   002B3C  4A1C               	infsnz	pad@i^0,f,c
  3308   002B3E  2A1D               	incf	(pad@i+1)^0,f,c
  3309   002B40                     l3494:
  3310                           
  3311                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3312   002B40  501E               	movf	pad@w^0,w,c
  3313   002B42  5C1C               	subwf	pad@i^0,w,c
  3314   002B44  501D               	movf	(pad@i+1)^0,w,c
  3315   002B46  0A80               	xorlw	128
  3316   002B48  6E1B               	movwf	??_pad^0,c
  3317   002B4A  501F               	movf	(pad@w+1)^0,w,c
  3318   002B4C  0A80               	xorlw	128
  3319   002B4E  581B               	subwfb	??_pad^0,w,c
  3320   002B50  A0D8               	btfss	status,0,c
  3321   002B52  EFAD  F015         	goto	u1831
  3322   002B56  EFAF  F015         	goto	u1830
  3323   002B5A                     u1831:
  3324   002B5A  EF94  F015         	goto	l3490
  3325   002B5E                     u1830:
  3326   002B5E                     
  3327                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3328   002B5E  C017  F00E         	movff	pad@buf,fputs@s
  3329   002B62  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3330   002B66  C015  F010         	movff	pad@fp,fputs@fp
  3331   002B6A  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3332   002B6E  EC1B  F017         	call	_fputs	;wreg free
  3333   002B72  0012               	return		;funcret
  3334   002B74                     __end_of_pad:
  3335                           	callstack 0
  3336                           
  3337 ;; *************** function _fputs *****************
  3338 ;; Defined at:
  3339 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3342 ;;		 -> dbuf(32), 
  3343 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3344 ;;		 -> sprintf@f(11), 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  i               2   18[COMRAM] int 
  3347 ;;  c               1   17[COMRAM] unsigned char 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  2   13[COMRAM] int 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3358 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3360 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;Total ram usage:        7 bytes
  3362 ;; Hardware stack levels used: 1
  3363 ;; Hardware stack levels required when called: 6
  3364 ;; This function calls:
  3365 ;;		_fputc
  3366 ;; This function is called by:
  3367 ;;		_pad
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text13
  3372   002E36                     __ptext13:
  3373                           	callstack 0
  3374   002E36                     _fputs:
  3375                           	callstack 19
  3376   002E36  0E00               	movlw	0
  3377   002E38  6E14               	movwf	(fputs@i+1)^0,c
  3378   002E3A  0E00               	movlw	0
  3379   002E3C  6E13               	movwf	fputs@i^0,c
  3380   002E3E  EF2C  F017         	goto	l3398
  3381   002E42                     l3394:
  3382   002E42  C012  F005         	movff	fputs@c,fputc@c
  3383   002E46  6A06               	clrf	(fputc@c+1)^0,c
  3384   002E48  C010  F007         	movff	fputs@fp,fputc@fp
  3385   002E4C  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3386   002E50  EC15  F013         	call	_fputc	;wreg free
  3387   002E54  4A13               	infsnz	fputs@i^0,f,c
  3388   002E56  2A14               	incf	(fputs@i+1)^0,f,c
  3389   002E58                     l3398:
  3390   002E58  5013               	movf	fputs@i^0,w,c
  3391   002E5A  240E               	addwf	fputs@s^0,w,c
  3392   002E5C  6ED9               	movwf	fsr2l,c
  3393   002E5E  5014               	movf	(fputs@i+1)^0,w,c
  3394   002E60  200F               	addwfc	(fputs@s+1)^0,w,c
  3395   002E62  6EDA               	movwf	fsr2h,c
  3396   002E64  50DF               	movf	indf2,w,c
  3397   002E66  6E12               	movwf	fputs@c^0,c
  3398   002E68  5012               	movf	fputs@c^0,w,c
  3399   002E6A  A4D8               	btfss	status,2,c
  3400   002E6C  EF3A  F017         	goto	u1671
  3401   002E70  EF3C  F017         	goto	u1670
  3402   002E74                     u1671:
  3403   002E74  EF21  F017         	goto	l3394
  3404   002E78                     u1670:
  3405   002E78  0012               	return		;funcret
  3406   002E7A                     __end_of_fputs:
  3407                           	callstack 0
  3408                           
  3409 ;; *************** function _fputc *****************
  3410 ;; Defined at:
  3411 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  c               2    4[COMRAM] int 
  3414 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3415 ;;		 -> sprintf@f(11), 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2    4[COMRAM] int 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;Total ram usage:        9 bytes
  3432 ;; Hardware stack levels used: 1
  3433 ;; Hardware stack levels required when called: 5
  3434 ;; This function calls:
  3435 ;;		_putch
  3436 ;; This function is called by:
  3437 ;;		_pad
  3438 ;;		_vfpfcnvrt
  3439 ;;		_fputs
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text14
  3444   00262A                     __ptext14:
  3445                           	callstack 0
  3446   00262A                     _fputc:
  3447                           	callstack 22
  3448   00262A  5007               	movf	fputc@fp^0,w,c
  3449   00262C  1008               	iorwf	(fputc@fp+1)^0,w,c
  3450   00262E  B4D8               	btfsc	status,2,c
  3451   002630  EF1C  F013         	goto	u1631
  3452   002634  EF1E  F013         	goto	u1630
  3453   002638                     u1631:
  3454   002638  EF27  F013         	goto	l3382
  3455   00263C                     u1630:
  3456   00263C  5007               	movf	fputc@fp^0,w,c
  3457   00263E  1008               	iorwf	(fputc@fp+1)^0,w,c
  3458   002640  A4D8               	btfss	status,2,c
  3459   002642  EF25  F013         	goto	u1641
  3460   002646  EF27  F013         	goto	u1640
  3461   00264A                     u1641:
  3462   00264A  EF2C  F013         	goto	l3384
  3463   00264E                     u1640:
  3464   00264E                     l3382:
  3465   00264E  5005               	movf	fputc@c^0,w,c
  3466   002650  ECB4  F018         	call	_putch
  3467   002654  EF79  F013         	goto	l1273
  3468   002658                     l3384:
  3469   002658  EE20 F009          	lfsr	2,9
  3470   00265C  5007               	movf	fputc@fp^0,w,c
  3471   00265E  26D9               	addwf	fsr2l,f,c
  3472   002660  5008               	movf	(fputc@fp+1)^0,w,c
  3473   002662  22DA               	addwfc	fsr2h,f,c
  3474   002664  50DE               	movf	postinc2,w,c
  3475   002666  10DE               	iorwf	postinc2,w,c
  3476   002668  B4D8               	btfsc	status,2,c
  3477   00266A  EF39  F013         	goto	u1651
  3478   00266E  EF3B  F013         	goto	u1650
  3479   002672                     u1651:
  3480   002672  EF56  F013         	goto	l3388
  3481   002676                     u1650:
  3482   002676  EE20 F009          	lfsr	2,9
  3483   00267A  5007               	movf	fputc@fp^0,w,c
  3484   00267C  26D9               	addwf	fsr2l,f,c
  3485   00267E  5008               	movf	(fputc@fp+1)^0,w,c
  3486   002680  22DA               	addwfc	fsr2h,f,c
  3487   002682  EE10 F003          	lfsr	1,3
  3488   002686  5007               	movf	fputc@fp^0,w,c
  3489   002688  26E1               	addwf	fsr1l,f,c
  3490   00268A  5008               	movf	(fputc@fp+1)^0,w,c
  3491   00268C  22E2               	addwfc	fsr1h,f,c
  3492   00268E  50DE               	movf	postinc2,w,c
  3493   002690  5CE6               	subwf	postinc1,w,c
  3494   002692  50E6               	movf	postinc1,w,c
  3495   002694  0A80               	xorlw	128
  3496   002696  6E0D               	movwf	(??_fputc+4)^0,c
  3497   002698  50DE               	movf	postinc2,w,c
  3498   00269A  0A80               	xorlw	128
  3499   00269C  580D               	subwfb	(??_fputc+4)^0,w,c
  3500   00269E  B0D8               	btfsc	status,0,c
  3501   0026A0  EF54  F013         	goto	u1661
  3502   0026A4  EF56  F013         	goto	u1660
  3503   0026A8                     u1661:
  3504   0026A8  EF79  F013         	goto	l1273
  3505   0026AC                     u1660:
  3506   0026AC                     l3388:
  3507   0026AC  EE20 F003          	lfsr	2,3
  3508   0026B0  5007               	movf	fputc@fp^0,w,c
  3509   0026B2  26D9               	addwf	fsr2l,f,c
  3510   0026B4  5008               	movf	(fputc@fp+1)^0,w,c
  3511   0026B6  22DA               	addwfc	fsr2h,f,c
  3512   0026B8  CFDE F009          	movff	postinc2,??_fputc
  3513   0026BC  CFDD F00A          	movff	postdec2,??_fputc+1
  3514   0026C0  C007  FFD9         	movff	fputc@fp,fsr2l
  3515   0026C4  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3516   0026C8  CFDE F00B          	movff	postinc2,??_fputc+2
  3517   0026CC  CFDD F00C          	movff	postdec2,??_fputc+3
  3518   0026D0  5009               	movf	??_fputc^0,w,c
  3519   0026D2  240B               	addwf	(??_fputc+2)^0,w,c
  3520   0026D4  6ED9               	movwf	fsr2l,c
  3521   0026D6  500A               	movf	(??_fputc+1)^0,w,c
  3522   0026D8  200C               	addwfc	(??_fputc+3)^0,w,c
  3523   0026DA  6EDA               	movwf	fsr2h,c
  3524   0026DC  C005  FFDF         	movff	fputc@c,indf2
  3525   0026E0  EE20 F003          	lfsr	2,3
  3526   0026E4  5007               	movf	fputc@fp^0,w,c
  3527   0026E6  26D9               	addwf	fsr2l,f,c
  3528   0026E8  5008               	movf	(fputc@fp+1)^0,w,c
  3529   0026EA  22DA               	addwfc	fsr2h,f,c
  3530   0026EC  2ADE               	incf	postinc2,f,c
  3531   0026EE  0E00               	movlw	0
  3532   0026F0  22DD               	addwfc	postdec2,f,c
  3533   0026F2                     l1273:
  3534   0026F2  0012               	return		;funcret
  3535   0026F4                     __end_of_fputc:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _putch *****************
  3539 ;; Defined at:
  3540 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  c               1    wreg     unsigned char 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  c               1    0[COMRAM] unsigned char 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; Hardware stack levels required when called: 4
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_fputc
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text15
  3569   003168                     __ptext15:
  3570                           	callstack 0
  3571   003168                     _putch:
  3572                           	callstack 22
  3573   003168  0012               	return		;funcret
  3574   00316A                     __end_of_putch:
  3575                           	callstack 0
  3576                           
  3577 ;; *************** function ___aomod *****************
  3578 ;; Defined at:
  3579 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  dividend        8    4[COMRAM] long long 
  3582 ;;  divisor         8   12[COMRAM] long long 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  sign            1   21[COMRAM] unsigned char 
  3585 ;;  counter         1   20[COMRAM] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  8    4[COMRAM] long long 
  3588 ;; Registers used:
  3589 ;;		wreg, status,2, status,0
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3595 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3598 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3599 ;;Total ram usage:       18 bytes
  3600 ;; Hardware stack levels used: 1
  3601 ;; Hardware stack levels required when called: 4
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_dtoa
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text16
  3610   001FF4                     __ptext16:
  3611                           	callstack 0
  3612   001FF4                     ___aomod:
  3613                           	callstack 22
  3614   001FF4  0E00               	movlw	0
  3615   001FF6  6E16               	movwf	___aomod@sign^0,c
  3616   001FF8  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3617   001FFA  EF03  F010         	goto	u1760
  3618   001FFE  EF01  F010         	goto	u1761
  3619   002002                     u1761:
  3620   002002  EF15  F010         	goto	l3456
  3621   002006                     u1760:
  3622   002006  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3623   002008  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3624   00200A  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3625   00200C  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3626   00200E  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3627   002010  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3628   002012  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3629   002014  6C05               	negf	___aomod@dividend^0,c
  3630   002016  0E00               	movlw	0
  3631   002018  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3632   00201A  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3633   00201C  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3634   00201E  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3635   002020  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3636   002022  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3637   002024  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3638   002026  0E01               	movlw	1
  3639   002028  6E16               	movwf	___aomod@sign^0,c
  3640   00202A                     l3456:
  3641   00202A  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3642   00202C  EF1C  F010         	goto	u1770
  3643   002030  EF1A  F010         	goto	u1771
  3644   002034                     u1771:
  3645   002034  EF2C  F010         	goto	l3460
  3646   002038                     u1770:
  3647   002038  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3648   00203A  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3649   00203C  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3650   00203E  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3651   002040  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3652   002042  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3653   002044  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3654   002046  6C0D               	negf	___aomod@divisor^0,c
  3655   002048  0E00               	movlw	0
  3656   00204A  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3657   00204C  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3658   00204E  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3659   002050  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3660   002052  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3661   002054  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3662   002056  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3663   002058                     l3460:
  3664   002058  500D               	movf	___aomod@divisor^0,w,c
  3665   00205A  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3666   00205C  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3667   00205E  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3668   002060  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3669   002062  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3670   002064  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3671   002066  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3672   002068  B4D8               	btfsc	status,2,c
  3673   00206A  EF39  F010         	goto	u1781
  3674   00206E  EF3B  F010         	goto	u1780
  3675   002072                     u1781:
  3676   002072  EF83  F010         	goto	l3476
  3677   002076                     u1780:
  3678   002076  0E01               	movlw	1
  3679   002078  6E15               	movwf	___aomod@counter^0,c
  3680   00207A  EF49  F010         	goto	l3466
  3681   00207E                     l3464:
  3682   00207E  90D8               	bcf	status,0,c
  3683   002080  360D               	rlcf	___aomod@divisor^0,f,c
  3684   002082  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3685   002084  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3686   002086  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3687   002088  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3688   00208A  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3689   00208C  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3690   00208E  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3691   002090  2A15               	incf	___aomod@counter^0,f,c
  3692   002092                     l3466:
  3693   002092  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3694   002094  EF4E  F010         	goto	u1791
  3695   002098  EF50  F010         	goto	u1790
  3696   00209C                     u1791:
  3697   00209C  EF3F  F010         	goto	l3464
  3698   0020A0                     u1790:
  3699   0020A0                     l3468:
  3700   0020A0  500D               	movf	___aomod@divisor^0,w,c
  3701   0020A2  5C05               	subwf	___aomod@dividend^0,w,c
  3702   0020A4  500E               	movf	(___aomod@divisor+1)^0,w,c
  3703   0020A6  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3704   0020A8  500F               	movf	(___aomod@divisor+2)^0,w,c
  3705   0020AA  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3706   0020AC  5010               	movf	(___aomod@divisor+3)^0,w,c
  3707   0020AE  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3708   0020B0  5011               	movf	(___aomod@divisor+4)^0,w,c
  3709   0020B2  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3710   0020B4  5012               	movf	(___aomod@divisor+5)^0,w,c
  3711   0020B6  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3712   0020B8  5013               	movf	(___aomod@divisor+6)^0,w,c
  3713   0020BA  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3714   0020BC  5014               	movf	(___aomod@divisor+7)^0,w,c
  3715   0020BE  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3716   0020C0  A0D8               	btfss	status,0,c
  3717   0020C2  EF65  F010         	goto	u1801
  3718   0020C6  EF67  F010         	goto	u1800
  3719   0020CA                     u1801:
  3720   0020CA  EF77  F010         	goto	l3472
  3721   0020CE                     u1800:
  3722   0020CE  500D               	movf	___aomod@divisor^0,w,c
  3723   0020D0  5E05               	subwf	___aomod@dividend^0,f,c
  3724   0020D2  500E               	movf	(___aomod@divisor+1)^0,w,c
  3725   0020D4  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3726   0020D6  500F               	movf	(___aomod@divisor+2)^0,w,c
  3727   0020D8  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3728   0020DA  5010               	movf	(___aomod@divisor+3)^0,w,c
  3729   0020DC  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3730   0020DE  5011               	movf	(___aomod@divisor+4)^0,w,c
  3731   0020E0  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3732   0020E2  5012               	movf	(___aomod@divisor+5)^0,w,c
  3733   0020E4  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3734   0020E6  5013               	movf	(___aomod@divisor+6)^0,w,c
  3735   0020E8  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3736   0020EA  5014               	movf	(___aomod@divisor+7)^0,w,c
  3737   0020EC  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3738   0020EE                     l3472:
  3739   0020EE  90D8               	bcf	status,0,c
  3740   0020F0  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3741   0020F2  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3742   0020F4  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3743   0020F6  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3744   0020F8  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3745   0020FA  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3746   0020FC  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3747   0020FE  320D               	rrcf	___aomod@divisor^0,f,c
  3748   002100  2E15               	decfsz	___aomod@counter^0,f,c
  3749   002102  EF50  F010         	goto	l3468
  3750   002106                     l3476:
  3751   002106  5016               	movf	___aomod@sign^0,w,c
  3752   002108  B4D8               	btfsc	status,2,c
  3753   00210A  EF89  F010         	goto	u1811
  3754   00210E  EF8B  F010         	goto	u1810
  3755   002112                     u1811:
  3756   002112  EF9B  F010         	goto	l3480
  3757   002116                     u1810:
  3758   002116  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3759   002118  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3760   00211A  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3761   00211C  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3762   00211E  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3763   002120  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3764   002122  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3765   002124  6C05               	negf	___aomod@dividend^0,c
  3766   002126  0E00               	movlw	0
  3767   002128  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3768   00212A  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3769   00212C  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3770   00212E  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3771   002130  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3772   002132  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3773   002134  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3774   002136                     l3480:
  3775   002136  C005  F005         	movff	___aomod@dividend,?___aomod
  3776   00213A  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3777   00213E  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3778   002142  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3779   002146  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3780   00214A  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3781   00214E  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3782   002152  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3783   002156  0012               	return		;funcret
  3784   002158                     __end_of___aomod:
  3785                           	callstack 0
  3786                           
  3787 ;; *************** function ___aodiv *****************
  3788 ;; Defined at:
  3789 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  dividend        8    4[COMRAM] long long 
  3792 ;;  divisor         8   12[COMRAM] long long 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  quotient        8   22[COMRAM] long long 
  3795 ;;  sign            1   21[COMRAM] unsigned char 
  3796 ;;  counter         1   20[COMRAM] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  8    4[COMRAM] long long 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3806 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3809 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3810 ;;Total ram usage:       26 bytes
  3811 ;; Hardware stack levels used: 1
  3812 ;; Hardware stack levels required when called: 4
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_dtoa
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text17
  3821   001D00                     __ptext17:
  3822                           	callstack 0
  3823   001D00                     ___aodiv:
  3824                           	callstack 22
  3825   001D00  0E00               	movlw	0
  3826   001D02  6E16               	movwf	___aodiv@sign^0,c
  3827   001D04  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3828   001D06  EF89  F00E         	goto	u1690
  3829   001D0A  EF87  F00E         	goto	u1691
  3830   001D0E                     u1691:
  3831   001D0E  EF9B  F00E         	goto	l3412
  3832   001D12                     u1690:
  3833   001D12  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3834   001D14  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3835   001D16  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3836   001D18  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3837   001D1A  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3838   001D1C  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3839   001D1E  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3840   001D20  6C0D               	negf	___aodiv@divisor^0,c
  3841   001D22  0E00               	movlw	0
  3842   001D24  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3843   001D26  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3844   001D28  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3845   001D2A  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3846   001D2C  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3847   001D2E  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3848   001D30  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3849   001D32  0E01               	movlw	1
  3850   001D34  6E16               	movwf	___aodiv@sign^0,c
  3851   001D36                     l3412:
  3852   001D36  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3853   001D38  EFA2  F00E         	goto	u1700
  3854   001D3C  EFA0  F00E         	goto	u1701
  3855   001D40                     u1701:
  3856   001D40  EFB4  F00E         	goto	l3418
  3857   001D44                     u1700:
  3858   001D44  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3859   001D46  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3860   001D48  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3861   001D4A  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3862   001D4C  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3863   001D4E  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3864   001D50  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3865   001D52  6C05               	negf	___aodiv@dividend^0,c
  3866   001D54  0E00               	movlw	0
  3867   001D56  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3868   001D58  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3869   001D5A  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3870   001D5C  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3871   001D5E  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3872   001D60  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3873   001D62  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3874   001D64  0E01               	movlw	1
  3875   001D66  1A16               	xorwf	___aodiv@sign^0,f,c
  3876   001D68                     l3418:
  3877   001D68  EE20  F017         	lfsr	2,___aodiv@quotient
  3878   001D6C  0E07               	movlw	7
  3879   001D6E                     u1711:
  3880   001D6E  6ADE               	clrf	postinc2,c
  3881   001D70  06E8               	decf	wreg,f,c
  3882   001D72  E2FD               	bc	u1711
  3883   001D74  500D               	movf	___aodiv@divisor^0,w,c
  3884   001D76  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3885   001D78  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3886   001D7A  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3887   001D7C  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3888   001D7E  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3889   001D80  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3890   001D82  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3891   001D84  B4D8               	btfsc	status,2,c
  3892   001D86  EFC7  F00E         	goto	u1721
  3893   001D8A  EFC9  F00E         	goto	u1720
  3894   001D8E                     u1721:
  3895   001D8E  EF1B  F00F         	goto	l3440
  3896   001D92                     u1720:
  3897   001D92  0E01               	movlw	1
  3898   001D94  6E15               	movwf	___aodiv@counter^0,c
  3899   001D96  EFD7  F00E         	goto	l3426
  3900   001D9A                     l3424:
  3901   001D9A  90D8               	bcf	status,0,c
  3902   001D9C  360D               	rlcf	___aodiv@divisor^0,f,c
  3903   001D9E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3904   001DA0  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3905   001DA2  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3906   001DA4  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3907   001DA6  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3908   001DA8  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3909   001DAA  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3910   001DAC  2A15               	incf	___aodiv@counter^0,f,c
  3911   001DAE                     l3426:
  3912   001DAE  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3913   001DB0  EFDC  F00E         	goto	u1731
  3914   001DB4  EFDE  F00E         	goto	u1730
  3915   001DB8                     u1731:
  3916   001DB8  EFCD  F00E         	goto	l3424
  3917   001DBC                     u1730:
  3918   001DBC                     l3428:
  3919   001DBC  90D8               	bcf	status,0,c
  3920   001DBE  3617               	rlcf	___aodiv@quotient^0,f,c
  3921   001DC0  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3922   001DC2  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3923   001DC4  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3924   001DC6  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3925   001DC8  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3926   001DCA  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3927   001DCC  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3928   001DCE  500D               	movf	___aodiv@divisor^0,w,c
  3929   001DD0  5C05               	subwf	___aodiv@dividend^0,w,c
  3930   001DD2  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3931   001DD4  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3932   001DD6  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3933   001DD8  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3934   001DDA  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3935   001DDC  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3936   001DDE  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3937   001DE0  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3938   001DE2  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3939   001DE4  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3940   001DE6  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3941   001DE8  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3942   001DEA  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3943   001DEC  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3944   001DEE  A0D8               	btfss	status,0,c
  3945   001DF0  EFFC  F00E         	goto	u1741
  3946   001DF4  EFFE  F00E         	goto	u1740
  3947   001DF8                     u1741:
  3948   001DF8  EF0F  F00F         	goto	l3436
  3949   001DFC                     u1740:
  3950   001DFC  500D               	movf	___aodiv@divisor^0,w,c
  3951   001DFE  5E05               	subwf	___aodiv@dividend^0,f,c
  3952   001E00  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3953   001E02  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3954   001E04  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3955   001E06  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3956   001E08  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3957   001E0A  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3958   001E0C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3959   001E0E  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3960   001E10  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3961   001E12  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3962   001E14  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3963   001E16  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3964   001E18  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3965   001E1A  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3966   001E1C  8017               	bsf	___aodiv@quotient^0,0,c
  3967   001E1E                     l3436:
  3968   001E1E  90D8               	bcf	status,0,c
  3969   001E20  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3970   001E22  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3971   001E24  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3972   001E26  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3973   001E28  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3974   001E2A  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3975   001E2C  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3976   001E2E  320D               	rrcf	___aodiv@divisor^0,f,c
  3977   001E30  2E15               	decfsz	___aodiv@counter^0,f,c
  3978   001E32  EFDE  F00E         	goto	l3428
  3979   001E36                     l3440:
  3980   001E36  5016               	movf	___aodiv@sign^0,w,c
  3981   001E38  B4D8               	btfsc	status,2,c
  3982   001E3A  EF21  F00F         	goto	u1751
  3983   001E3E  EF23  F00F         	goto	u1750
  3984   001E42                     u1751:
  3985   001E42  EF33  F00F         	goto	l3444
  3986   001E46                     u1750:
  3987   001E46  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3988   001E48  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3989   001E4A  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3990   001E4C  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3991   001E4E  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3992   001E50  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3993   001E52  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3994   001E54  6C17               	negf	___aodiv@quotient^0,c
  3995   001E56  0E00               	movlw	0
  3996   001E58  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3997   001E5A  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3998   001E5C  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3999   001E5E  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  4000   001E60  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  4001   001E62  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  4002   001E64  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  4003   001E66                     l3444:
  4004   001E66  C017  F005         	movff	___aodiv@quotient,?___aodiv
  4005   001E6A  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  4006   001E6E  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  4007   001E72  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  4008   001E76  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  4009   001E7A  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  4010   001E7E  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  4011   001E82  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  4012   001E86  0012               	return		;funcret
  4013   001E88                     __end_of___aodiv:
  4014                           	callstack 0
  4015                           
  4016 ;; *************** function _sendStringSerial4 *****************
  4017 ;; Defined at:
  4018 ;;		line 39 in file "serial.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  string          2    5[COMRAM] PTR unsigned char 
  4021 ;;		 -> main@buf(150), 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;Total ram usage:        2 bytes
  4038 ;; Hardware stack levels used: 1
  4039 ;; Hardware stack levels required when called: 5
  4040 ;; This function calls:
  4041 ;;		_sendCharSerial4
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;;		_clear_read_calibration
  4045 ;;		_card_response
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text18
  4050   002F6E                     __ptext18:
  4051                           	callstack 0
  4052   002F6E                     _sendStringSerial4:
  4053                           	callstack 25
  4054   002F6E                     
  4055                           ;serial.c: 40:  while(*string != 0) {
  4056   002F6E  EFC2  F017         	goto	l2854
  4057   002F72                     l2850:
  4058                           
  4059                           ;serial.c: 41:         sendCharSerial4(*string++);
  4060   002F72  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4061   002F76  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4062   002F7A  50DF               	movf	indf2,w,c
  4063   002F7C  EC65  F018         	call	_sendCharSerial4
  4064   002F80  4A06               	infsnz	sendStringSerial4@string^0,f,c
  4065   002F82  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  4066   002F84                     l2854:
  4067                           
  4068                           ;serial.c: 40:  while(*string != 0) {
  4069   002F84  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4070   002F88  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4071   002F8C  50DF               	movf	indf2,w,c
  4072   002F8E  A4D8               	btfss	status,2,c
  4073   002F90  EFCC  F017         	goto	u1411
  4074   002F94  EFCE  F017         	goto	u1410
  4075   002F98                     u1411:
  4076   002F98  EFB9  F017         	goto	l2850
  4077   002F9C                     u1410:
  4078   002F9C  0012               	return		;funcret
  4079   002F9E                     __end_of_sendStringSerial4:
  4080                           	callstack 0
  4081                           
  4082 ;; *************** function _sendCharSerial4 *****************
  4083 ;; Defined at:
  4084 ;;		line 32 in file "serial.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  charToSend      1    wreg     unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  charToSend      1    4[COMRAM] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4099 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4102 ;;Total ram usage:        1 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; Hardware stack levels required when called: 4
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_sendStringSerial4
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text19
  4113   0030CA                     __ptext19:
  4114                           	callstack 0
  4115   0030CA                     _sendCharSerial4:
  4116                           	callstack 25
  4117                           
  4118                           ;incstack = 0
  4119                           ;sendCharSerial4@charToSend stored from wreg
  4120   0030CA  6E05               	movwf	sendCharSerial4@charToSend^0,c
  4121   0030CC                     l416:
  4122   0030CC  010E               	movlb	14	; () banked
  4123   0030CE  A537               	btfss	55,2,b	;volatile
  4124   0030D0  EF6C  F018         	goto	u1321
  4125   0030D4  EF6E  F018         	goto	u1320
  4126   0030D8                     u1321:
  4127   0030D8  EF66  F018         	goto	l416
  4128   0030DC                     u1320:
  4129   0030DC                     
  4130                           ; BSR set to: 14
  4131                           ;serial.c: 34:     TX4REG = charToSend;
  4132   0030DC  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4133   0030E0                     
  4134                           ; BSR set to: 14
  4135   0030E0  0012               	return		;funcret
  4136   0030E2                     __end_of_sendCharSerial4:
  4137                           	callstack 0
  4138                           
  4139 ;; *************** function _normalise_readings *****************
  4140 ;; Defined at:
  4141 ;;		line 70 in file "colour_identify.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  buf             2   26[COMRAM] PTR unsigned char 
  4144 ;;		 -> main@buf(150), 
  4145 ;;  clear_read      2   28[COMRAM] unsigned int 
  4146 ;;  red_read        2   30[COMRAM] unsigned int 
  4147 ;;  green_read      2   32[COMRAM] unsigned int 
  4148 ;;  blue_read       2   34[COMRAM] unsigned int 
  4149 ;;  expected_val    2   36[COMRAM] PTR unsigned int [9]
  4150 ;;		 -> main@expected_values(72), 
  4151 ;;  normalised_v    2   38[COMRAM] PTR unsigned int [9]
  4152 ;;		 -> card_response@normalised_values(72), 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  difference      2   48[COMRAM] unsigned int 
  4155 ;;  i               1   50[COMRAM] enum E14551
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4165 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4167 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4168 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4169 ;;Total ram usage:       25 bytes
  4170 ;; Hardware stack levels used: 1
  4171 ;; Hardware stack levels required when called: 5
  4172 ;; This function calls:
  4173 ;;		___lwdiv
  4174 ;;		___wmul
  4175 ;;		_abs
  4176 ;; This function is called by:
  4177 ;;		_card_response
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text20
  4182   001524                     __ptext20:
  4183                           	callstack 0
  4184   001524                     _normalise_readings:
  4185                           	callstack 24
  4186   001524                     
  4187                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  4188   001524  0E01               	movlw	1
  4189   001526  6E33               	movwf	normalise_readings@i^0,c
  4190   001528                     l3608:
  4191                           
  4192                           ;colour_identify.c: 81:         unsigned int difference = abs(clear_read - expected_valu
      +                          es[CLEAR][i]);
  4193   001528  5033               	movf	normalise_readings@i^0,w,c
  4194   00152A  0D02               	mullw	2
  4195   00152C  CFF3 F029          	movff	prodl,??_normalise_readings
  4196   001530  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4197   001534  5029               	movf	??_normalise_readings^0,w,c
  4198   001536  2425               	addwf	normalise_readings@expected_values^0,w,c
  4199   001538  6ED9               	movwf	fsr2l,c
  4200   00153A  502A               	movf	(??_normalise_readings+1)^0,w,c
  4201   00153C  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4202   00153E  6EDA               	movwf	fsr2h,c
  4203   001540  CFDE F02B          	movff	postinc2,??_normalise_readings+2
  4204   001544  CFDD F02C          	movff	postdec2,??_normalise_readings+3
  4205   001548  502B               	movf	(??_normalise_readings+2)^0,w,c
  4206   00154A  5C1D               	subwf	normalise_readings@clear_read^0,w,c
  4207   00154C  6E17               	movwf	abs@a^0,c
  4208   00154E  502C               	movf	(??_normalise_readings+3)^0,w,c
  4209   001550  581E               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  4210   001552  6E18               	movwf	(abs@a+1)^0,c
  4211   001554  EC5E  F017         	call	_abs	;wreg free
  4212   001558  C017  F031         	movff	?_abs,normalise_readings@difference
  4213   00155C  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4214                           
  4215                           ;colour_identify.c: 82:         normalised_values[CLEAR][i] = (difference*100) / expecte
      +                          d_values[CLEAR][i];
  4216   001560  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4217   001564  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4218   001568  0E00               	movlw	0
  4219   00156A  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4220   00156C  0E64               	movlw	100
  4221   00156E  6E07               	movwf	___wmul@multiplicand^0,c
  4222   001570  EC21  F018         	call	___wmul	;wreg free
  4223   001574  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4224   001578  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4225   00157C  5033               	movf	normalise_readings@i^0,w,c
  4226   00157E  0D02               	mullw	2
  4227   001580  CFF3 F029          	movff	prodl,??_normalise_readings
  4228   001584  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4229   001588  5029               	movf	??_normalise_readings^0,w,c
  4230   00158A  2425               	addwf	normalise_readings@expected_values^0,w,c
  4231   00158C  6ED9               	movwf	fsr2l,c
  4232   00158E  502A               	movf	(??_normalise_readings+1)^0,w,c
  4233   001590  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4234   001592  6EDA               	movwf	fsr2h,c
  4235   001594  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4236   001598  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4237   00159C  ECBA  F015         	call	___lwdiv	;wreg free
  4238   0015A0  5033               	movf	normalise_readings@i^0,w,c
  4239   0015A2  0D02               	mullw	2
  4240   0015A4  CFF3 F02B          	movff	prodl,??_normalise_readings+2
  4241   0015A8  CFF4 F02C          	movff	prodh,??_normalise_readings+3
  4242   0015AC  502B               	movf	(??_normalise_readings+2)^0,w,c
  4243   0015AE  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4244   0015B0  6ED9               	movwf	fsr2l,c
  4245   0015B2  502C               	movf	(??_normalise_readings+3)^0,w,c
  4246   0015B4  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4247   0015B6  6EDA               	movwf	fsr2h,c
  4248   0015B8  C00B  FFDE         	movff	?___lwdiv,postinc2
  4249   0015BC  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4250                           
  4251                           ;colour_identify.c: 85:         difference = abs(red_read - expected_values[RED][i]);
  4252   0015C0  5033               	movf	normalise_readings@i^0,w,c
  4253   0015C2  0D02               	mullw	2
  4254   0015C4  CFF3 F029          	movff	prodl,??_normalise_readings
  4255   0015C8  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4256   0015CC  5029               	movf	??_normalise_readings^0,w,c
  4257   0015CE  2425               	addwf	normalise_readings@expected_values^0,w,c
  4258   0015D0  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4259   0015D2  502A               	movf	(??_normalise_readings+1)^0,w,c
  4260   0015D4  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4261   0015D6  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4262   0015D8  0E12               	movlw	18
  4263   0015DA  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4264   0015DC  6ED9               	movwf	fsr2l,c
  4265   0015DE  0E00               	movlw	0
  4266   0015E0  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4267   0015E2  6EDA               	movwf	fsr2h,c
  4268   0015E4  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4269   0015E8  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4270   0015EC  502D               	movf	(??_normalise_readings+4)^0,w,c
  4271   0015EE  5C1F               	subwf	normalise_readings@red_read^0,w,c
  4272   0015F0  6E17               	movwf	abs@a^0,c
  4273   0015F2  502E               	movf	(??_normalise_readings+5)^0,w,c
  4274   0015F4  5820               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4275   0015F6  6E18               	movwf	(abs@a+1)^0,c
  4276   0015F8  EC5E  F017         	call	_abs	;wreg free
  4277   0015FC  C017  F031         	movff	?_abs,normalise_readings@difference
  4278   001600  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4279                           
  4280                           ;colour_identify.c: 86:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4281   001604  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4282   001608  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4283   00160C  0E00               	movlw	0
  4284   00160E  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4285   001610  0E64               	movlw	100
  4286   001612  6E07               	movwf	___wmul@multiplicand^0,c
  4287   001614  EC21  F018         	call	___wmul	;wreg free
  4288   001618  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4289   00161C  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4290   001620  5033               	movf	normalise_readings@i^0,w,c
  4291   001622  0D02               	mullw	2
  4292   001624  CFF3 F029          	movff	prodl,??_normalise_readings
  4293   001628  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4294   00162C  5029               	movf	??_normalise_readings^0,w,c
  4295   00162E  2425               	addwf	normalise_readings@expected_values^0,w,c
  4296   001630  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4297   001632  502A               	movf	(??_normalise_readings+1)^0,w,c
  4298   001634  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4299   001636  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4300   001638  0E12               	movlw	18
  4301   00163A  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4302   00163C  6ED9               	movwf	fsr2l,c
  4303   00163E  0E00               	movlw	0
  4304   001640  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4305   001642  6EDA               	movwf	fsr2h,c
  4306   001644  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4307   001648  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4308   00164C  ECBA  F015         	call	___lwdiv	;wreg free
  4309   001650  5033               	movf	normalise_readings@i^0,w,c
  4310   001652  0D02               	mullw	2
  4311   001654  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4312   001658  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4313   00165C  502D               	movf	(??_normalise_readings+4)^0,w,c
  4314   00165E  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4315   001660  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4316   001662  502E               	movf	(??_normalise_readings+5)^0,w,c
  4317   001664  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4318   001666  6E30               	movwf	(??_normalise_readings+7)^0,c
  4319   001668  0E12               	movlw	18
  4320   00166A  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4321   00166C  6ED9               	movwf	fsr2l,c
  4322   00166E  0E00               	movlw	0
  4323   001670  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4324   001672  6EDA               	movwf	fsr2h,c
  4325   001674  C00B  FFDE         	movff	?___lwdiv,postinc2
  4326   001678  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4327                           
  4328                           ;colour_identify.c: 89:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4329   00167C  5033               	movf	normalise_readings@i^0,w,c
  4330   00167E  0D02               	mullw	2
  4331   001680  CFF3 F029          	movff	prodl,??_normalise_readings
  4332   001684  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4333   001688  5029               	movf	??_normalise_readings^0,w,c
  4334   00168A  2425               	addwf	normalise_readings@expected_values^0,w,c
  4335   00168C  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4336   00168E  502A               	movf	(??_normalise_readings+1)^0,w,c
  4337   001690  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4338   001692  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4339   001694  0E24               	movlw	36
  4340   001696  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4341   001698  6ED9               	movwf	fsr2l,c
  4342   00169A  0E00               	movlw	0
  4343   00169C  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4344   00169E  6EDA               	movwf	fsr2h,c
  4345   0016A0  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4346   0016A4  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4347   0016A8  502D               	movf	(??_normalise_readings+4)^0,w,c
  4348   0016AA  5C21               	subwf	normalise_readings@green_read^0,w,c
  4349   0016AC  6E17               	movwf	abs@a^0,c
  4350   0016AE  502E               	movf	(??_normalise_readings+5)^0,w,c
  4351   0016B0  5822               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4352   0016B2  6E18               	movwf	(abs@a+1)^0,c
  4353   0016B4  EC5E  F017         	call	_abs	;wreg free
  4354   0016B8  C017  F031         	movff	?_abs,normalise_readings@difference
  4355   0016BC  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4356                           
  4357                           ;colour_identify.c: 90:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4358   0016C0  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4359   0016C4  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4360   0016C8  0E00               	movlw	0
  4361   0016CA  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4362   0016CC  0E64               	movlw	100
  4363   0016CE  6E07               	movwf	___wmul@multiplicand^0,c
  4364   0016D0  EC21  F018         	call	___wmul	;wreg free
  4365   0016D4  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4366   0016D8  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4367   0016DC  5033               	movf	normalise_readings@i^0,w,c
  4368   0016DE  0D02               	mullw	2
  4369   0016E0  CFF3 F029          	movff	prodl,??_normalise_readings
  4370   0016E4  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4371   0016E8  5029               	movf	??_normalise_readings^0,w,c
  4372   0016EA  2425               	addwf	normalise_readings@expected_values^0,w,c
  4373   0016EC  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4374   0016EE  502A               	movf	(??_normalise_readings+1)^0,w,c
  4375   0016F0  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4376   0016F2  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4377   0016F4  0E24               	movlw	36
  4378   0016F6  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4379   0016F8  6ED9               	movwf	fsr2l,c
  4380   0016FA  0E00               	movlw	0
  4381   0016FC  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4382   0016FE  6EDA               	movwf	fsr2h,c
  4383   001700  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4384   001704  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4385   001708  ECBA  F015         	call	___lwdiv	;wreg free
  4386   00170C  5033               	movf	normalise_readings@i^0,w,c
  4387   00170E  0D02               	mullw	2
  4388   001710  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4389   001714  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4390   001718  502D               	movf	(??_normalise_readings+4)^0,w,c
  4391   00171A  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4392   00171C  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4393   00171E  502E               	movf	(??_normalise_readings+5)^0,w,c
  4394   001720  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4395   001722  6E30               	movwf	(??_normalise_readings+7)^0,c
  4396   001724  0E24               	movlw	36
  4397   001726  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4398   001728  6ED9               	movwf	fsr2l,c
  4399   00172A  0E00               	movlw	0
  4400   00172C  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4401   00172E  6EDA               	movwf	fsr2h,c
  4402   001730  C00B  FFDE         	movff	?___lwdiv,postinc2
  4403   001734  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4404                           
  4405                           ;colour_identify.c: 93:         difference = abs(blue_read - expected_values[BLUE][i]);
  4406   001738  5033               	movf	normalise_readings@i^0,w,c
  4407   00173A  0D02               	mullw	2
  4408   00173C  CFF3 F029          	movff	prodl,??_normalise_readings
  4409   001740  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4410   001744  5029               	movf	??_normalise_readings^0,w,c
  4411   001746  2425               	addwf	normalise_readings@expected_values^0,w,c
  4412   001748  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4413   00174A  502A               	movf	(??_normalise_readings+1)^0,w,c
  4414   00174C  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4415   00174E  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4416   001750  0E36               	movlw	54
  4417   001752  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4418   001754  6ED9               	movwf	fsr2l,c
  4419   001756  0E00               	movlw	0
  4420   001758  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4421   00175A  6EDA               	movwf	fsr2h,c
  4422   00175C  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4423   001760  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4424   001764  502D               	movf	(??_normalise_readings+4)^0,w,c
  4425   001766  5C23               	subwf	normalise_readings@blue_read^0,w,c
  4426   001768  6E17               	movwf	abs@a^0,c
  4427   00176A  502E               	movf	(??_normalise_readings+5)^0,w,c
  4428   00176C  5824               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4429   00176E  6E18               	movwf	(abs@a+1)^0,c
  4430   001770  EC5E  F017         	call	_abs	;wreg free
  4431   001774  C017  F031         	movff	?_abs,normalise_readings@difference
  4432   001778  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4433                           
  4434                           ;colour_identify.c: 94:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4435   00177C  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4436   001780  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4437   001784  0E00               	movlw	0
  4438   001786  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4439   001788  0E64               	movlw	100
  4440   00178A  6E07               	movwf	___wmul@multiplicand^0,c
  4441   00178C  EC21  F018         	call	___wmul	;wreg free
  4442   001790  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4443   001794  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4444   001798  5033               	movf	normalise_readings@i^0,w,c
  4445   00179A  0D02               	mullw	2
  4446   00179C  CFF3 F029          	movff	prodl,??_normalise_readings
  4447   0017A0  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4448   0017A4  5029               	movf	??_normalise_readings^0,w,c
  4449   0017A6  2425               	addwf	normalise_readings@expected_values^0,w,c
  4450   0017A8  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4451   0017AA  502A               	movf	(??_normalise_readings+1)^0,w,c
  4452   0017AC  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4453   0017AE  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4454   0017B0  0E36               	movlw	54
  4455   0017B2  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4456   0017B4  6ED9               	movwf	fsr2l,c
  4457   0017B6  0E00               	movlw	0
  4458   0017B8  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4459   0017BA  6EDA               	movwf	fsr2h,c
  4460   0017BC  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4461   0017C0  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4462   0017C4  ECBA  F015         	call	___lwdiv	;wreg free
  4463   0017C8  5033               	movf	normalise_readings@i^0,w,c
  4464   0017CA  0D02               	mullw	2
  4465   0017CC  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4466   0017D0  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4467   0017D4  502D               	movf	(??_normalise_readings+4)^0,w,c
  4468   0017D6  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4469   0017D8  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4470   0017DA  502E               	movf	(??_normalise_readings+5)^0,w,c
  4471   0017DC  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4472   0017DE  6E30               	movwf	(??_normalise_readings+7)^0,c
  4473   0017E0  0E36               	movlw	54
  4474   0017E2  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4475   0017E4  6ED9               	movwf	fsr2l,c
  4476   0017E6  0E00               	movlw	0
  4477   0017E8  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4478   0017EA  6EDA               	movwf	fsr2h,c
  4479   0017EC  C00B  FFDE         	movff	?___lwdiv,postinc2
  4480   0017F0  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4481   0017F4                     
  4482                           ;colour_identify.c: 95:     }
  4483   0017F4  2A33               	incf	normalise_readings@i^0,f,c
  4484   0017F6  0E09               	movlw	9
  4485   0017F8  6433               	cpfsgt	normalise_readings@i^0,c
  4486   0017FA  EF01  F00C         	goto	u1981
  4487   0017FE  EF03  F00C         	goto	u1980
  4488   001802                     u1981:
  4489   001802  EF94  F00A         	goto	l3608
  4490   001806                     u1980:
  4491   001806  0012               	return		;funcret
  4492   001808                     __end_of_normalise_readings:
  4493                           	callstack 0
  4494                           
  4495 ;; *************** function _abs *****************
  4496 ;; Defined at:
  4497 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  a               2   22[COMRAM] int 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  2   22[COMRAM] int 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4515 ;;Total ram usage:        4 bytes
  4516 ;; Hardware stack levels used: 1
  4517 ;; Hardware stack levels required when called: 4
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_normalise_readings
  4522 ;;		_dtoa
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text21
  4527   002EBC                     __ptext21:
  4528                           	callstack 0
  4529   002EBC                     _abs:
  4530                           	callstack 22
  4531   002EBC  BE18               	btfsc	(abs@a+1)^0,7,c
  4532   002EBE  EF6B  F017         	goto	u1680
  4533   002EC2  5018               	movf	(abs@a+1)^0,w,c
  4534   002EC4  E106               	bnz	u1681
  4535   002EC6  0417               	decf	abs@a^0,w,c
  4536   002EC8  B0D8               	btfsc	status,0,c
  4537   002ECA  EF69  F017         	goto	u1681
  4538   002ECE  EF6B  F017         	goto	u1680
  4539   002ED2                     u1681:
  4540   002ED2  EF79  F017         	goto	l1193
  4541   002ED6                     u1680:
  4542   002ED6  C017  F019         	movff	abs@a,??_abs
  4543   002EDA  C018  F01A         	movff	abs@a+1,??_abs+1
  4544   002EDE  1E19               	comf	??_abs^0,f,c
  4545   002EE0  1E1A               	comf	(??_abs+1)^0,f,c
  4546   002EE2  4A19               	infsnz	??_abs^0,f,c
  4547   002EE4  2A1A               	incf	(??_abs+1)^0,f,c
  4548   002EE6  C019  F017         	movff	??_abs,?_abs
  4549   002EEA  C01A  F018         	movff	??_abs+1,?_abs+1
  4550   002EEE  EF7D  F017         	goto	l1196
  4551   002EF2                     l1193:
  4552   002EF2  C017  F017         	movff	abs@a,?_abs
  4553   002EF6  C018  F018         	movff	abs@a+1,?_abs+1
  4554   002EFA                     l1196:
  4555   002EFA  0012               	return		;funcret
  4556   002EFC                     __end_of_abs:
  4557                           	callstack 0
  4558                           
  4559 ;; *************** function _motor_response *****************
  4560 ;; Defined at:
  4561 ;;		line 124 in file "colour_identify.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  card            1    wreg     enum E14551
  4564 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4565 ;;		 -> main@motorL(9), 
  4566 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4567 ;;		 -> main@motorR(9), 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  card            1   37[COMRAM] enum E14551
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  1    wreg      void 
  4572 ;; Registers used:
  4573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4581 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4582 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4583 ;;Total ram usage:        7 bytes
  4584 ;; Hardware stack levels used: 1
  4585 ;; Hardware stack levels required when called: 7
  4586 ;; This function calls:
  4587 ;;		_reverseFullSpeed
  4588 ;;		_stop
  4589 ;;		_turnLeft45
  4590 ;;		_turnRight45
  4591 ;; This function is called by:
  4592 ;;		_card_response
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           	psect	text22
  4597   000E7A                     __ptext22:
  4598                           	callstack 0
  4599   000E7A                     _motor_response:
  4600                           	callstack 22
  4601                           
  4602                           ;incstack = 0
  4603                           ;motor_response@card stored from wreg
  4604   000E7A  6E26               	movwf	motor_response@card^0,c
  4605   000E7C                     
  4606                           ;colour_identify.c: 126:     switch (card){
  4607   000E7C  EFC6  F008         	goto	l3028
  4608   000E80                     l2906:
  4609                           
  4610                           ;colour_identify.c: 128:             reverseFullSpeed(mL,mR);
  4611   000E80  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4612   000E84  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4613   000E88  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4614   000E8C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4615   000E90  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4616   000E94                     
  4617                           ;colour_identify.c: 129:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4618   000E94  0E11               	movlw	17
  4619   000E96  6E25               	movwf	(??_motor_response+1)^0,c
  4620   000E98  0E3C               	movlw	60
  4621   000E9A  6E24               	movwf	??_motor_response^0,c
  4622   000E9C  0ECB               	movlw	203
  4623   000E9E                     u2147:
  4624   000E9E  2EE8               	decfsz	wreg,f,c
  4625   000EA0  D7FE               	bra	u2147
  4626   000EA2  2E24               	decfsz	??_motor_response^0,f,c
  4627   000EA4  D7FC               	bra	u2147
  4628   000EA6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4629   000EA8  D7FA               	bra	u2147
  4630   000EAA  F000               	nop	
  4631   000EAC                     l2910:
  4632                           
  4633                           ;colour_identify.c: 130:             turnRight45(mL,mR);
  4634   000EAC  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4635   000EB0  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4636   000EB4  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4637   000EB8  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4638   000EBC  EC7A  F013         	call	_turnRight45	;wreg free
  4639   000EC0                     
  4640                           ;colour_identify.c: 131:             stop(mL,mR);
  4641   000EC0  C020  F018         	movff	motor_response@mL,stop@mL
  4642   000EC4  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4643   000EC8  C022  F01A         	movff	motor_response@mR,stop@mR
  4644   000ECC  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4645   000ED0  ECF8  F014         	call	_stop	;wreg free
  4646   000ED4                     
  4647                           ;colour_identify.c: 132:             turnRight45(mL,mR);
  4648   000ED4  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4649   000ED8  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4650   000EDC  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4651   000EE0  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4652   000EE4  EC7A  F013         	call	_turnRight45	;wreg free
  4653   000EE8                     l2916:
  4654                           
  4655                           ;colour_identify.c: 133:             stop(mL,mR);
  4656   000EE8  C020  F018         	movff	motor_response@mL,stop@mL
  4657   000EEC  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4658   000EF0  C022  F01A         	movff	motor_response@mR,stop@mR
  4659   000EF4  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4660   000EF8  ECF8  F014         	call	_stop	;wreg free
  4661                           
  4662                           ;colour_identify.c: 134:             break;
  4663   000EFC  EFF7  F008         	goto	l365
  4664   000F00                     l2918:
  4665                           
  4666                           ;colour_identify.c: 136:             reverseFullSpeed(mL,mR);
  4667   000F00  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4668   000F04  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4669   000F08  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4670   000F0C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4671   000F10  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4672   000F14                     
  4673                           ;colour_identify.c: 137:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4674   000F14  0E11               	movlw	17
  4675   000F16  6E25               	movwf	(??_motor_response+1)^0,c
  4676   000F18  0E3C               	movlw	60
  4677   000F1A  6E24               	movwf	??_motor_response^0,c
  4678   000F1C  0ECB               	movlw	203
  4679   000F1E                     u2157:
  4680   000F1E  2EE8               	decfsz	wreg,f,c
  4681   000F20  D7FE               	bra	u2157
  4682   000F22  2E24               	decfsz	??_motor_response^0,f,c
  4683   000F24  D7FC               	bra	u2157
  4684   000F26  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4685   000F28  D7FA               	bra	u2157
  4686   000F2A  F000               	nop	
  4687   000F2C                     l2922:
  4688                           
  4689                           ;colour_identify.c: 138:             turnLeft45(mL,mR);
  4690   000F2C  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4691   000F30  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4692   000F34  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4693   000F38  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4694   000F3C  ECD1  F013         	call	_turnLeft45	;wreg free
  4695   000F40                     
  4696                           ;colour_identify.c: 139:             stop(mL,mR);
  4697   000F40  C020  F018         	movff	motor_response@mL,stop@mL
  4698   000F44  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4699   000F48  C022  F01A         	movff	motor_response@mR,stop@mR
  4700   000F4C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4701   000F50  ECF8  F014         	call	_stop	;wreg free
  4702   000F54                     
  4703                           ;colour_identify.c: 140:             turnLeft45(mL,mR);
  4704   000F54  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4705   000F58  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4706   000F5C  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4707   000F60  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4708   000F64  ECD1  F013         	call	_turnLeft45	;wreg free
  4709   000F68  EF74  F007         	goto	l2916
  4710   000F6C                     l2930:
  4711                           
  4712                           ;colour_identify.c: 144:             reverseFullSpeed(mL,mR);
  4713   000F6C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4714   000F70  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4715   000F74  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4716   000F78  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4717   000F7C  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4718   000F80                     
  4719                           ;colour_identify.c: 145:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4720   000F80  0E11               	movlw	17
  4721   000F82  6E25               	movwf	(??_motor_response+1)^0,c
  4722   000F84  0E3C               	movlw	60
  4723   000F86  6E24               	movwf	??_motor_response^0,c
  4724   000F88  0ECB               	movlw	203
  4725   000F8A                     u2167:
  4726   000F8A  2EE8               	decfsz	wreg,f,c
  4727   000F8C  D7FE               	bra	u2167
  4728   000F8E  2E24               	decfsz	??_motor_response^0,f,c
  4729   000F90  D7FC               	bra	u2167
  4730   000F92  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4731   000F94  D7FA               	bra	u2167
  4732   000F96  F000               	nop	
  4733   000F98                     
  4734                           ;colour_identify.c: 146:             turnRight45(mL,mR);
  4735   000F98  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4736   000F9C  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4737   000FA0  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4738   000FA4  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4739   000FA8  EC7A  F013         	call	_turnRight45	;wreg free
  4740   000FAC                     
  4741                           ;colour_identify.c: 147:             stop(mL,mR);
  4742   000FAC  C020  F018         	movff	motor_response@mL,stop@mL
  4743   000FB0  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4744   000FB4  C022  F01A         	movff	motor_response@mR,stop@mR
  4745   000FB8  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4746   000FBC  ECF8  F014         	call	_stop	;wreg free
  4747   000FC0                     l2938:
  4748                           
  4749                           ;colour_identify.c: 148:             turnRight45(mL,mR);
  4750   000FC0  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4751   000FC4  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4752   000FC8  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4753   000FCC  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4754   000FD0  EC7A  F013         	call	_turnRight45	;wreg free
  4755   000FD4                     l2940:
  4756                           
  4757                           ;colour_identify.c: 149:             stop(mL,mR);
  4758   000FD4  C020  F018         	movff	motor_response@mL,stop@mL
  4759   000FD8  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4760   000FDC  C022  F01A         	movff	motor_response@mR,stop@mR
  4761   000FE0  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4762   000FE4  ECF8  F014         	call	_stop	;wreg free
  4763   000FE8  EF56  F007         	goto	l2910
  4764   000FEC                     l2950:
  4765                           
  4766                           ;colour_identify.c: 156:             reverseFullSpeed(mL,mR);
  4767   000FEC  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4768   000FF0  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4769   000FF4  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4770   000FF8  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4771   000FFC  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4772   001000                     
  4773                           ;colour_identify.c: 157:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4774   001000  0E11               	movlw	17
  4775   001002  6E25               	movwf	(??_motor_response+1)^0,c
  4776   001004  0E3C               	movlw	60
  4777   001006  6E24               	movwf	??_motor_response^0,c
  4778   001008  0ECB               	movlw	203
  4779   00100A                     u2177:
  4780   00100A  2EE8               	decfsz	wreg,f,c
  4781   00100C  D7FE               	bra	u2177
  4782   00100E  2E24               	decfsz	??_motor_response^0,f,c
  4783   001010  D7FC               	bra	u2177
  4784   001012  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4785   001014  D7FA               	bra	u2177
  4786   001016  F000               	nop	
  4787   001018                     
  4788                           ;colour_identify.c: 158:             reverseFullSpeed(mL,mR);
  4789   001018  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4790   00101C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4791   001020  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4792   001024  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4793   001028  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4794                           
  4795                           ;colour_identify.c: 159:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4796   00102C  0E29               	movlw	41
  4797   00102E  6E25               	movwf	(??_motor_response+1)^0,c
  4798   001030  0E96               	movlw	150
  4799   001032  6E24               	movwf	??_motor_response^0,c
  4800   001034  0E7F               	movlw	127
  4801   001036                     u2187:
  4802   001036  2EE8               	decfsz	wreg,f,c
  4803   001038  D7FE               	bra	u2187
  4804   00103A  2E24               	decfsz	??_motor_response^0,f,c
  4805   00103C  D7FC               	bra	u2187
  4806   00103E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4807   001040  D7FA               	bra	u2187
  4808   001042  F000               	nop	
  4809   001044  EFEA  F007         	goto	l2940
  4810   001048                     l2966:
  4811                           
  4812                           ;colour_identify.c: 167:             reverseFullSpeed(mL,mR);
  4813   001048  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4814   00104C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4815   001050  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4816   001054  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4817   001058  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4818   00105C                     
  4819                           ;colour_identify.c: 168:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4820   00105C  0E11               	movlw	17
  4821   00105E  6E25               	movwf	(??_motor_response+1)^0,c
  4822   001060  0E3C               	movlw	60
  4823   001062  6E24               	movwf	??_motor_response^0,c
  4824   001064  0ECB               	movlw	203
  4825   001066                     u2197:
  4826   001066  2EE8               	decfsz	wreg,f,c
  4827   001068  D7FE               	bra	u2197
  4828   00106A  2E24               	decfsz	??_motor_response^0,f,c
  4829   00106C  D7FC               	bra	u2197
  4830   00106E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4831   001070  D7FA               	bra	u2197
  4832   001072  F000               	nop	
  4833   001074                     
  4834                           ;colour_identify.c: 169:             reverseFullSpeed(mL,mR);
  4835   001074  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4836   001078  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4837   00107C  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4838   001080  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4839   001084  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4840                           
  4841                           ;colour_identify.c: 170:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4842   001088  0E29               	movlw	41
  4843   00108A  6E25               	movwf	(??_motor_response+1)^0,c
  4844   00108C  0E96               	movlw	150
  4845   00108E  6E24               	movwf	??_motor_response^0,c
  4846   001090  0E7F               	movlw	127
  4847   001092                     u2207:
  4848   001092  2EE8               	decfsz	wreg,f,c
  4849   001094  D7FE               	bra	u2207
  4850   001096  2E24               	decfsz	??_motor_response^0,f,c
  4851   001098  D7FC               	bra	u2207
  4852   00109A  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4853   00109C  D7FA               	bra	u2207
  4854   00109E  F000               	nop	
  4855   0010A0                     l2972:
  4856                           
  4857                           ;colour_identify.c: 171:             stop(mL,mR);
  4858   0010A0  C020  F018         	movff	motor_response@mL,stop@mL
  4859   0010A4  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4860   0010A8  C022  F01A         	movff	motor_response@mR,stop@mR
  4861   0010AC  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4862   0010B0  ECF8  F014         	call	_stop	;wreg free
  4863   0010B4  EF96  F007         	goto	l2922
  4864   0010B8                     l2982:
  4865                           
  4866                           ;colour_identify.c: 178:             reverseFullSpeed(mL,mR);
  4867   0010B8  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4868   0010BC  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4869   0010C0  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4870   0010C4  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4871   0010C8  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4872   0010CC                     
  4873                           ;colour_identify.c: 179:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4874   0010CC  0E11               	movlw	17
  4875   0010CE  6E25               	movwf	(??_motor_response+1)^0,c
  4876   0010D0  0E3C               	movlw	60
  4877   0010D2  6E24               	movwf	??_motor_response^0,c
  4878   0010D4  0ECB               	movlw	203
  4879   0010D6                     u2217:
  4880   0010D6  2EE8               	decfsz	wreg,f,c
  4881   0010D8  D7FE               	bra	u2217
  4882   0010DA  2E24               	decfsz	??_motor_response^0,f,c
  4883   0010DC  D7FC               	bra	u2217
  4884   0010DE  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4885   0010E0  D7FA               	bra	u2217
  4886   0010E2  F000               	nop	
  4887   0010E4  EFE0  F007         	goto	l2938
  4888   0010E8                     l2998:
  4889                           
  4890                           ;colour_identify.c: 188:             reverseFullSpeed(mL,mR);
  4891   0010E8  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4892   0010EC  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4893   0010F0  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4894   0010F4  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4895   0010F8  EC6E  F014         	call	_reverseFullSpeed	;wreg free
  4896   0010FC                     
  4897                           ;colour_identify.c: 189:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4898   0010FC  0E11               	movlw	17
  4899   0010FE  6E25               	movwf	(??_motor_response+1)^0,c
  4900   001100  0E3C               	movlw	60
  4901   001102  6E24               	movwf	??_motor_response^0,c
  4902   001104  0ECB               	movlw	203
  4903   001106                     u2227:
  4904   001106  2EE8               	decfsz	wreg,f,c
  4905   001108  D7FE               	bra	u2227
  4906   00110A  2E24               	decfsz	??_motor_response^0,f,c
  4907   00110C  D7FC               	bra	u2227
  4908   00110E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4909   001110  D7FA               	bra	u2227
  4910   001112  F000               	nop	
  4911   001114                     
  4912                           ;colour_identify.c: 190:             turnLeft45(mL,mR);
  4913   001114  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4914   001118  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4915   00111C  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4916   001120  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4917   001124  ECD1  F013         	call	_turnLeft45	;wreg free
  4918   001128  EF50  F008         	goto	l2972
  4919   00112C                     l362:
  4920                           
  4921                           ;colour_identify.c: 199:             LATDbits.LATD7=1;
  4922   00112C  8E7C               	bsf	124,7,c	;volatile
  4923   00112E                     
  4924                           ;colour_identify.c: 200:             _delay((unsigned long)((100)*(64000000/4000.0)));
  4925   00112E  0E09               	movlw	9
  4926   001130  6E25               	movwf	(??_motor_response+1)^0,c
  4927   001132  0E1E               	movlw	30
  4928   001134  6E24               	movwf	??_motor_response^0,c
  4929   001136  0EE4               	movlw	228
  4930   001138                     u2237:
  4931   001138  2EE8               	decfsz	wreg,f,c
  4932   00113A  D7FE               	bra	u2237
  4933   00113C  2E24               	decfsz	??_motor_response^0,f,c
  4934   00113E  D7FC               	bra	u2237
  4935   001140  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4936   001142  D7FA               	bra	u2237
  4937   001144  D000               	nop2	
  4938   001146                     
  4939                           ;colour_identify.c: 201:             LATDbits.LATD7=0;
  4940   001146  9E7C               	bcf	124,7,c	;volatile
  4941                           
  4942                           ;colour_identify.c: 202:             break;
  4943   001148  EFF7  F008         	goto	l365
  4944   00114C                     l363:
  4945                           
  4946                           ;colour_identify.c: 205:             LATHbits.LATH3=1;
  4947   00114C  8680               	bsf	128,3,c	;volatile
  4948   00114E                     
  4949                           ;colour_identify.c: 206:             _delay((unsigned long)((100)*(64000000/4000.0)));
  4950   00114E  0E09               	movlw	9
  4951   001150  6E25               	movwf	(??_motor_response+1)^0,c
  4952   001152  0E1E               	movlw	30
  4953   001154  6E24               	movwf	??_motor_response^0,c
  4954   001156  0EE4               	movlw	228
  4955   001158                     u2247:
  4956   001158  2EE8               	decfsz	wreg,f,c
  4957   00115A  D7FE               	bra	u2247
  4958   00115C  2E24               	decfsz	??_motor_response^0,f,c
  4959   00115E  D7FC               	bra	u2247
  4960   001160  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4961   001162  D7FA               	bra	u2247
  4962   001164  D000               	nop2	
  4963   001166                     
  4964                           ;colour_identify.c: 207:             LATHbits.LATH3=0;
  4965   001166  9680               	bcf	128,3,c	;volatile
  4966                           
  4967                           ;colour_identify.c: 208:             break;
  4968   001168  EFF7  F008         	goto	l365
  4969   00116C                     l364:
  4970                           
  4971                           ;colour_identify.c: 210:             LATHbits.LATH1 = 1;
  4972   00116C  8280               	bsf	128,1,c	;volatile
  4973   00116E                     
  4974                           ;colour_identify.c: 211:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4975   00116E  0E29               	movlw	41
  4976   001170  6E25               	movwf	(??_motor_response+1)^0,c
  4977   001172  0E96               	movlw	150
  4978   001174  6E24               	movwf	??_motor_response^0,c
  4979   001176  0E7F               	movlw	127
  4980   001178                     u2257:
  4981   001178  2EE8               	decfsz	wreg,f,c
  4982   00117A  D7FE               	bra	u2257
  4983   00117C  2E24               	decfsz	??_motor_response^0,f,c
  4984   00117E  D7FC               	bra	u2257
  4985   001180  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4986   001182  D7FA               	bra	u2257
  4987   001184  F000               	nop	
  4988   001186                     
  4989                           ;colour_identify.c: 212:             LATHbits.LATH1 = 0;
  4990   001186  9280               	bcf	128,1,c	;volatile
  4991                           
  4992                           ;colour_identify.c: 213:             break;
  4993   001188  EFF7  F008         	goto	l365
  4994   00118C                     l3028:
  4995   00118C  5026               	movf	motor_response@card^0,w,c
  4996   00118E  6E24               	movwf	??_motor_response^0,c
  4997   001190  6A25               	clrf	(??_motor_response+1)^0,c
  4998                           
  4999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5000                           ; Switch size 1, requested type "simple"
  5001                           ; Number of cases is 1, Range of values is 0 to 0
  5002                           ; switch strategies available:
  5003                           ; Name         Instructions Cycles
  5004                           ; simple_byte            4     3 (average)
  5005                           ;	Chosen strategy is simple_byte
  5006   001192  5025               	movf	(??_motor_response+1)^0,w,c
  5007   001194  0A00               	xorlw	0	; case 0
  5008   001196  B4D8               	btfsc	status,2,c
  5009   001198  EFD0  F008         	goto	l3772
  5010   00119C  EFB6  F008         	goto	l364
  5011   0011A0                     l3772:
  5012                           
  5013                           ; Switch size 1, requested type "simple"
  5014                           ; Number of cases is 9, Range of values is 1 to 9
  5015                           ; switch strategies available:
  5016                           ; Name         Instructions Cycles
  5017                           ; simple_byte           28    15 (average)
  5018                           ;	Chosen strategy is simple_byte
  5019   0011A0  5024               	movf	??_motor_response^0,w,c
  5020   0011A2  0A01               	xorlw	1	; case 1
  5021   0011A4  B4D8               	btfsc	status,2,c
  5022   0011A6  EF40  F007         	goto	l2906
  5023   0011AA  0A03               	xorlw	3	; case 2
  5024   0011AC  B4D8               	btfsc	status,2,c
  5025   0011AE  EF80  F007         	goto	l2918
  5026   0011B2  0A01               	xorlw	1	; case 3
  5027   0011B4  B4D8               	btfsc	status,2,c
  5028   0011B6  EFB6  F007         	goto	l2930
  5029   0011BA  0A07               	xorlw	7	; case 4
  5030   0011BC  B4D8               	btfsc	status,2,c
  5031   0011BE  EFF6  F007         	goto	l2950
  5032   0011C2  0A01               	xorlw	1	; case 5
  5033   0011C4  B4D8               	btfsc	status,2,c
  5034   0011C6  EF24  F008         	goto	l2966
  5035   0011CA  0A03               	xorlw	3	; case 6
  5036   0011CC  B4D8               	btfsc	status,2,c
  5037   0011CE  EF5C  F008         	goto	l2982
  5038   0011D2  0A01               	xorlw	1	; case 7
  5039   0011D4  B4D8               	btfsc	status,2,c
  5040   0011D6  EF74  F008         	goto	l2998
  5041   0011DA  0A0F               	xorlw	15	; case 8
  5042   0011DC  B4D8               	btfsc	status,2,c
  5043   0011DE  EF96  F008         	goto	l362
  5044   0011E2  0A01               	xorlw	1	; case 9
  5045   0011E4  B4D8               	btfsc	status,2,c
  5046   0011E6  EFA6  F008         	goto	l363
  5047   0011EA  EFB6  F008         	goto	l364
  5048   0011EE                     l365:
  5049   0011EE  0012               	return		;funcret
  5050   0011F0                     __end_of_motor_response:
  5051                           	callstack 0
  5052                           
  5053 ;; *************** function _turnRight45 *****************
  5054 ;; Defined at:
  5055 ;;		line 116 in file "dc_motor.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5058 ;;		 -> main@motorL(9), 
  5059 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5060 ;;		 -> main@motorR(9), 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  i               2   29[COMRAM] int 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5075 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5076 ;;Total ram usage:        8 bytes
  5077 ;; Hardware stack levels used: 1
  5078 ;; Hardware stack levels required when called: 6
  5079 ;; This function calls:
  5080 ;;		_setMotorPWM
  5081 ;; This function is called by:
  5082 ;;		_motor_response
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text23
  5087   0026F4                     __ptext23:
  5088                           	callstack 0
  5089   0026F4                     _turnRight45:
  5090                           	callstack 22
  5091   0026F4                     
  5092                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5093   0026F4  EE20 F001          	lfsr	2,1
  5094   0026F8  5018               	movf	turnRight45@mL^0,w,c
  5095   0026FA  26D9               	addwf	fsr2l,f,c
  5096   0026FC  5019               	movf	(turnRight45@mL+1)^0,w,c
  5097   0026FE  22DA               	addwfc	fsr2h,f,c
  5098   002700  0E01               	movlw	1
  5099   002702  6EDF               	movwf	indf2,c
  5100                           
  5101                           ;dc_motor.c: 119:     mR->direction=0;
  5102   002704  EE20 F001          	lfsr	2,1
  5103   002708  501A               	movf	turnRight45@mR^0,w,c
  5104   00270A  26D9               	addwf	fsr2l,f,c
  5105   00270C  501B               	movf	(turnRight45@mR+1)^0,w,c
  5106   00270E  22DA               	addwfc	fsr2h,f,c
  5107   002710  0E00               	movlw	0
  5108   002712  6EDF               	movwf	indf2,c
  5109   002714                     
  5110                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5111   002714  0E00               	movlw	0
  5112   002716  6E1F               	movwf	(turnRight45@i+1)^0,c
  5113   002718  0E00               	movlw	0
  5114   00271A  6E1E               	movwf	turnRight45@i^0,c
  5115   00271C                     l2694:
  5116                           
  5117                           ;dc_motor.c: 122:         mR->power=i;
  5118   00271C  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  5119   002720  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  5120   002724  C01E  FFDF         	movff	turnRight45@i,indf2
  5121                           
  5122                           ;dc_motor.c: 123:         mL->power=i;
  5123   002728  C018  FFD9         	movff	turnRight45@mL,fsr2l
  5124   00272C  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  5125   002730  C01E  FFDF         	movff	turnRight45@i,indf2
  5126   002734                     
  5127                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5128   002734  0E02               	movlw	2
  5129   002736  6E1D               	movwf	(??_turnRight45+1)^0,c
  5130   002738  0E38               	movlw	56
  5131   00273A  6E1C               	movwf	??_turnRight45^0,c
  5132   00273C  0EAD               	movlw	173
  5133   00273E                     u2267:
  5134   00273E  2EE8               	decfsz	wreg,f,c
  5135   002740  D7FE               	bra	u2267
  5136   002742  2E1C               	decfsz	??_turnRight45^0,f,c
  5137   002744  D7FC               	bra	u2267
  5138   002746  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5139   002748  D7FA               	bra	u2267
  5140   00274A  F000               	nop	
  5141   00274C                     
  5142                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5143   00274C  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  5144   002750  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5145   002754  EC44  F00F         	call	_setMotorPWM	;wreg free
  5146   002758                     
  5147                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5148   002758  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  5149   00275C  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5150   002760  EC44  F00F         	call	_setMotorPWM	;wreg free
  5151   002764  0E0A               	movlw	10
  5152   002766  261E               	addwf	turnRight45@i^0,f,c
  5153   002768  0E00               	movlw	0
  5154   00276A  221F               	addwfc	(turnRight45@i+1)^0,f,c
  5155   00276C  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  5156   00276E  EFC2  F013         	goto	u1301
  5157   002772  501F               	movf	(turnRight45@i+1)^0,w,c
  5158   002774  E109               	bnz	u1300
  5159   002776  0E50               	movlw	80
  5160   002778  5C1E               	subwf	turnRight45@i^0,w,c
  5161   00277A  A0D8               	btfss	status,0,c
  5162   00277C  EFC2  F013         	goto	u1301
  5163   002780  EFC4  F013         	goto	u1300
  5164   002784                     u1301:
  5165   002784  EF8E  F013         	goto	l2694
  5166   002788                     u1300:
  5167   002788                     
  5168                           ;dc_motor.c: 127:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5169   002788  0E06               	movlw	6
  5170   00278A  6E1D               	movwf	(??_turnRight45+1)^0,c
  5171   00278C  0E47               	movlw	71
  5172   00278E  6E1C               	movwf	??_turnRight45^0,c
  5173   002790  0EA0               	movlw	160
  5174   002792                     u2277:
  5175   002792  2EE8               	decfsz	wreg,f,c
  5176   002794  D7FE               	bra	u2277
  5177   002796  2E1C               	decfsz	??_turnRight45^0,f,c
  5178   002798  D7FC               	bra	u2277
  5179   00279A  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5180   00279C  D7FA               	bra	u2277
  5181   00279E  D000               	nop2	
  5182   0027A0  0012               	return		;funcret
  5183   0027A2                     __end_of_turnRight45:
  5184                           	callstack 0
  5185                           
  5186 ;; *************** function _turnLeft45 *****************
  5187 ;; Defined at:
  5188 ;;		line 101 in file "dc_motor.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5191 ;;		 -> main@motorL(9), 
  5192 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5193 ;;		 -> main@motorR(9), 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  i               2   29[COMRAM] int 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5205 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5208 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5209 ;;Total ram usage:        8 bytes
  5210 ;; Hardware stack levels used: 1
  5211 ;; Hardware stack levels required when called: 6
  5212 ;; This function calls:
  5213 ;;		_setMotorPWM
  5214 ;; This function is called by:
  5215 ;;		_motor_response
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text24
  5220   0027A2                     __ptext24:
  5221                           	callstack 0
  5222   0027A2                     _turnLeft45:
  5223                           	callstack 22
  5224   0027A2                     
  5225                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5226   0027A2  EE20 F001          	lfsr	2,1
  5227   0027A6  5018               	movf	turnLeft45@mL^0,w,c
  5228   0027A8  26D9               	addwf	fsr2l,f,c
  5229   0027AA  5019               	movf	(turnLeft45@mL+1)^0,w,c
  5230   0027AC  22DA               	addwfc	fsr2h,f,c
  5231   0027AE  0E00               	movlw	0
  5232   0027B0  6EDF               	movwf	indf2,c
  5233                           
  5234                           ;dc_motor.c: 104:     mR->direction=1;
  5235   0027B2  EE20 F001          	lfsr	2,1
  5236   0027B6  501A               	movf	turnLeft45@mR^0,w,c
  5237   0027B8  26D9               	addwf	fsr2l,f,c
  5238   0027BA  501B               	movf	(turnLeft45@mR+1)^0,w,c
  5239   0027BC  22DA               	addwfc	fsr2h,f,c
  5240   0027BE  0E01               	movlw	1
  5241   0027C0  6EDF               	movwf	indf2,c
  5242   0027C2                     
  5243                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5244   0027C2  0E00               	movlw	0
  5245   0027C4  6E1F               	movwf	(turnLeft45@i+1)^0,c
  5246   0027C6  0E00               	movlw	0
  5247   0027C8  6E1E               	movwf	turnLeft45@i^0,c
  5248   0027CA                     l2672:
  5249                           
  5250                           ;dc_motor.c: 107:         mR->power=i;
  5251   0027CA  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  5252   0027CE  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5253   0027D2  C01E  FFDF         	movff	turnLeft45@i,indf2
  5254                           
  5255                           ;dc_motor.c: 108:         mL->power=i;
  5256   0027D6  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  5257   0027DA  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5258   0027DE  C01E  FFDF         	movff	turnLeft45@i,indf2
  5259   0027E2                     
  5260                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5261   0027E2  0E02               	movlw	2
  5262   0027E4  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5263   0027E6  0E38               	movlw	56
  5264   0027E8  6E1C               	movwf	??_turnLeft45^0,c
  5265   0027EA  0EAD               	movlw	173
  5266   0027EC                     u2287:
  5267   0027EC  2EE8               	decfsz	wreg,f,c
  5268   0027EE  D7FE               	bra	u2287
  5269   0027F0  2E1C               	decfsz	??_turnLeft45^0,f,c
  5270   0027F2  D7FC               	bra	u2287
  5271   0027F4  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5272   0027F6  D7FA               	bra	u2287
  5273   0027F8  F000               	nop	
  5274   0027FA                     
  5275                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5276   0027FA  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  5277   0027FE  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5278   002802  EC44  F00F         	call	_setMotorPWM	;wreg free
  5279   002806                     
  5280                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5281   002806  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  5282   00280A  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5283   00280E  EC44  F00F         	call	_setMotorPWM	;wreg free
  5284   002812  0E0A               	movlw	10
  5285   002814  261E               	addwf	turnLeft45@i^0,f,c
  5286   002816  0E00               	movlw	0
  5287   002818  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  5288   00281A  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  5289   00281C  EF19  F014         	goto	u1291
  5290   002820  501F               	movf	(turnLeft45@i+1)^0,w,c
  5291   002822  E109               	bnz	u1290
  5292   002824  0E50               	movlw	80
  5293   002826  5C1E               	subwf	turnLeft45@i^0,w,c
  5294   002828  A0D8               	btfss	status,0,c
  5295   00282A  EF19  F014         	goto	u1291
  5296   00282E  EF1B  F014         	goto	u1290
  5297   002832                     u1291:
  5298   002832  EFE5  F013         	goto	l2672
  5299   002836                     u1290:
  5300   002836                     
  5301                           ;dc_motor.c: 112:     _delay((unsigned long)((65)*(64000000/4000.0)));
  5302   002836  0E06               	movlw	6
  5303   002838  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5304   00283A  0E47               	movlw	71
  5305   00283C  6E1C               	movwf	??_turnLeft45^0,c
  5306   00283E  0EA0               	movlw	160
  5307   002840                     u2297:
  5308   002840  2EE8               	decfsz	wreg,f,c
  5309   002842  D7FE               	bra	u2297
  5310   002844  2E1C               	decfsz	??_turnLeft45^0,f,c
  5311   002846  D7FC               	bra	u2297
  5312   002848  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5313   00284A  D7FA               	bra	u2297
  5314   00284C  D000               	nop2	
  5315   00284E  0012               	return		;funcret
  5316   002850                     __end_of_turnLeft45:
  5317                           	callstack 0
  5318                           
  5319 ;; *************** function _stop *****************
  5320 ;; Defined at:
  5321 ;;		line 84 in file "dc_motor.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5324 ;;		 -> main@motorL(9), 
  5325 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5326 ;;		 -> main@motorR(9), 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5342 ;;Total ram usage:        5 bytes
  5343 ;; Hardware stack levels used: 1
  5344 ;; Hardware stack levels required when called: 6
  5345 ;; This function calls:
  5346 ;;		_setMotorPWM
  5347 ;; This function is called by:
  5348 ;;		_main
  5349 ;;		_motor_response
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text25
  5354   0029F0                     __ptext25:
  5355                           	callstack 0
  5356   0029F0                     _stop:
  5357                           	callstack 24
  5358   0029F0                     
  5359                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5360   0029F0  EF0D  F015         	goto	l2654
  5361   0029F4                     l2648:
  5362                           
  5363                           ;dc_motor.c: 87:         mL->power -=10;
  5364   0029F4  C018  FFD9         	movff	stop@mL,fsr2l
  5365   0029F8  C019  FFDA         	movff	stop@mL+1,fsr2h
  5366   0029FC  0E0A               	movlw	10
  5367   0029FE  5EDF               	subwf	indf2,f,c
  5368   002A00                     
  5369                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5370   002A00  0E2A               	movlw	42
  5371   002A02  6E1C               	movwf	??_stop^0,c
  5372   002A04  0E8E               	movlw	142
  5373   002A06                     u2307:
  5374   002A06  2EE8               	decfsz	wreg,f,c
  5375   002A08  D7FE               	bra	u2307
  5376   002A0A  2E1C               	decfsz	??_stop^0,f,c
  5377   002A0C  D7FC               	bra	u2307
  5378   002A0E                     
  5379                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5380   002A0E  C018  F012         	movff	stop@mL,setMotorPWM@m
  5381   002A12  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5382   002A16  EC44  F00F         	call	_setMotorPWM	;wreg free
  5383   002A1A                     l2654:
  5384                           
  5385                           ;dc_motor.c: 86:     while(mL->power !=0){
  5386   002A1A  C018  FFD9         	movff	stop@mL,fsr2l
  5387   002A1E  C019  FFDA         	movff	stop@mL+1,fsr2h
  5388   002A22  50DF               	movf	indf2,w,c
  5389   002A24  A4D8               	btfss	status,2,c
  5390   002A26  EF17  F015         	goto	u1271
  5391   002A2A  EF19  F015         	goto	u1270
  5392   002A2E                     u1271:
  5393   002A2E  EFFA  F014         	goto	l2648
  5394   002A32                     u1270:
  5395   002A32  EF2E  F015         	goto	l2662
  5396   002A36                     l2656:
  5397                           
  5398                           ;dc_motor.c: 92:         mR->power -=10;
  5399   002A36  C01A  FFD9         	movff	stop@mR,fsr2l
  5400   002A3A  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5401   002A3E  0E0A               	movlw	10
  5402   002A40  5EDF               	subwf	indf2,f,c
  5403   002A42                     
  5404                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5405   002A42  0E2A               	movlw	42
  5406   002A44  6E1C               	movwf	??_stop^0,c
  5407   002A46  0E8E               	movlw	142
  5408   002A48                     u2317:
  5409   002A48  2EE8               	decfsz	wreg,f,c
  5410   002A4A  D7FE               	bra	u2317
  5411   002A4C  2E1C               	decfsz	??_stop^0,f,c
  5412   002A4E  D7FC               	bra	u2317
  5413   002A50                     
  5414                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5415   002A50  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5416   002A54  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5417   002A58  EC44  F00F         	call	_setMotorPWM	;wreg free
  5418   002A5C                     l2662:
  5419                           
  5420                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5421   002A5C  C01A  FFD9         	movff	stop@mR,fsr2l
  5422   002A60  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5423   002A64  50DF               	movf	indf2,w,c
  5424   002A66  A4D8               	btfss	status,2,c
  5425   002A68  EF38  F015         	goto	u1281
  5426   002A6C  EF3A  F015         	goto	u1280
  5427   002A70                     u1281:
  5428   002A70  EF1B  F015         	goto	l2656
  5429   002A74                     u1280:
  5430   002A74  0012               	return		;funcret
  5431   002A76                     __end_of_stop:
  5432                           	callstack 0
  5433                           
  5434 ;; *************** function _reverseFullSpeed *****************
  5435 ;; Defined at:
  5436 ;;		line 145 in file "dc_motor.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5439 ;;		 -> main@motorL(9), 
  5440 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5441 ;;		 -> main@motorR(9), 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  i               2   28[COMRAM] int 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5456 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5457 ;;Total ram usage:        7 bytes
  5458 ;; Hardware stack levels used: 1
  5459 ;; Hardware stack levels required when called: 6
  5460 ;; This function calls:
  5461 ;;		_setMotorPWM
  5462 ;; This function is called by:
  5463 ;;		_main
  5464 ;;		_motor_response
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text26
  5469   0028DC                     __ptext26:
  5470                           	callstack 0
  5471   0028DC                     _reverseFullSpeed:
  5472                           	callstack 24
  5473   0028DC                     
  5474                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5475   0028DC  EE20 F001          	lfsr	2,1
  5476   0028E0  5018               	movf	reverseFullSpeed@mL^0,w,c
  5477   0028E2  26D9               	addwf	fsr2l,f,c
  5478   0028E4  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5479   0028E6  22DA               	addwfc	fsr2h,f,c
  5480   0028E8  0E00               	movlw	0
  5481   0028EA  6EDF               	movwf	indf2,c
  5482                           
  5483                           ;dc_motor.c: 148:     mR->direction=0;
  5484   0028EC  EE20 F001          	lfsr	2,1
  5485   0028F0  501A               	movf	reverseFullSpeed@mR^0,w,c
  5486   0028F2  26D9               	addwf	fsr2l,f,c
  5487   0028F4  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5488   0028F6  22DA               	addwfc	fsr2h,f,c
  5489   0028F8  0E00               	movlw	0
  5490   0028FA  6EDF               	movwf	indf2,c
  5491   0028FC                     
  5492                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5493   0028FC  0E00               	movlw	0
  5494   0028FE  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  5495   002900  0E00               	movlw	0
  5496   002902  6E1D               	movwf	reverseFullSpeed@i^0,c
  5497   002904                     l2716:
  5498                           
  5499                           ;dc_motor.c: 150:         mL->power=i;
  5500   002904  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5501   002908  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5502   00290C  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5503                           
  5504                           ;dc_motor.c: 151:         mR->power=i;
  5505   002910  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5506   002914  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5507   002918  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5508   00291C                     
  5509                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5510   00291C  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5511   002920  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5512   002924  EC44  F00F         	call	_setMotorPWM	;wreg free
  5513   002928                     
  5514                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5515   002928  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5516   00292C  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5517   002930  EC44  F00F         	call	_setMotorPWM	;wreg free
  5518   002934                     
  5519                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5520   002934  0ED0               	movlw	208
  5521   002936  6E1C               	movwf	??_reverseFullSpeed^0,c
  5522   002938  0ECA               	movlw	202
  5523   00293A                     u2327:
  5524   00293A  2EE8               	decfsz	wreg,f,c
  5525   00293C  D7FE               	bra	u2327
  5526   00293E  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  5527   002940  D7FC               	bra	u2327
  5528   002942                     
  5529                           ;dc_motor.c: 155:     }
  5530   002942  0E0A               	movlw	10
  5531   002944  261D               	addwf	reverseFullSpeed@i^0,f,c
  5532   002946  0E00               	movlw	0
  5533   002948  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5534   00294A  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5535   00294C  EFB1  F014         	goto	u1311
  5536   002950  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5537   002952  E109               	bnz	u1310
  5538   002954  0E3C               	movlw	60
  5539   002956  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5540   002958  A0D8               	btfss	status,0,c
  5541   00295A  EFB1  F014         	goto	u1311
  5542   00295E  EFB3  F014         	goto	u1310
  5543   002962                     u1311:
  5544   002962  EF82  F014         	goto	l2716
  5545   002966                     u1310:
  5546   002966  0012               	return		;funcret
  5547   002968                     __end_of_reverseFullSpeed:
  5548                           	callstack 0
  5549                           
  5550 ;; *************** function _setMotorPWM *****************
  5551 ;; Defined at:
  5552 ;;		line 61 in file "dc_motor.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5555 ;;		 -> main@motorR(9), main@motorL(9), 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  negDuty         1   22[COMRAM] unsigned char 
  5558 ;;  posDuty         1   21[COMRAM] unsigned char 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  1    wreg      void 
  5561 ;; Registers used:
  5562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5563 ;; Tracked objects:
  5564 ;;		On entry : 0/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5568 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5570 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5571 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5572 ;;Total ram usage:        6 bytes
  5573 ;; Hardware stack levels used: 1
  5574 ;; Hardware stack levels required when called: 5
  5575 ;; This function calls:
  5576 ;;		___lwdiv
  5577 ;;		___wmul
  5578 ;; This function is called by:
  5579 ;;		_stop
  5580 ;;		_turnLeft45
  5581 ;;		_turnRight45
  5582 ;;		_fullSpeedAhead
  5583 ;;		_reverseFullSpeed
  5584 ;;		_main
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text27
  5589   001E88                     __ptext27:
  5590                           	callstack 0
  5591   001E88                     _setMotorPWM:
  5592                           	callstack 24
  5593   001E88                     
  5594                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5595   001E88  EE20 F002          	lfsr	2,2
  5596   001E8C  5012               	movf	setMotorPWM@m^0,w,c
  5597   001E8E  26D9               	addwf	fsr2l,f,c
  5598   001E90  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5599   001E92  22DA               	addwfc	fsr2h,f,c
  5600   001E94  50DF               	movf	indf2,w,c
  5601   001E96  B4D8               	btfsc	status,2,c
  5602   001E98  EF50  F00F         	goto	u1221
  5603   001E9C  EF52  F00F         	goto	u1220
  5604   001EA0                     u1221:
  5605   001EA0  EF86  F00F         	goto	l2580
  5606   001EA4                     u1220:
  5607   001EA4                     
  5608                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5609   001EA4  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5610   001EA8  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5611   001EAC  50DF               	movf	indf2,w,c
  5612   001EAE  6E14               	movwf	??_setMotorPWM^0,c
  5613   001EB0  5014               	movf	??_setMotorPWM^0,w,c
  5614   001EB2  6E05               	movwf	___wmul@multiplier^0,c
  5615   001EB4  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5616   001EB6  EE20 F003          	lfsr	2,3
  5617   001EBA  5012               	movf	setMotorPWM@m^0,w,c
  5618   001EBC  26D9               	addwf	fsr2l,f,c
  5619   001EBE  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5620   001EC0  22DA               	addwfc	fsr2h,f,c
  5621   001EC2  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5622   001EC6  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5623   001ECA  EC21  F018         	call	___wmul	;wreg free
  5624   001ECE  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5625   001ED2  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5626   001ED6  0E00               	movlw	0
  5627   001ED8  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5628   001EDA  0E64               	movlw	100
  5629   001EDC  6E0D               	movwf	___lwdiv@divisor^0,c
  5630   001EDE  ECBA  F015         	call	___lwdiv	;wreg free
  5631   001EE2  EE20 F003          	lfsr	2,3
  5632   001EE6  5012               	movf	setMotorPWM@m^0,w,c
  5633   001EE8  26D9               	addwf	fsr2l,f,c
  5634   001EEA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5635   001EEC  22DA               	addwfc	fsr2h,f,c
  5636   001EEE  50DF               	movf	indf2,w,c
  5637   001EF0  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5638   001EF2  500B               	movf	?___lwdiv^0,w,c
  5639   001EF4  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5640   001EF6  6E16               	movwf	setMotorPWM@posDuty^0,c
  5641   001EF8                     
  5642                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5643   001EF8  EE20 F003          	lfsr	2,3
  5644   001EFC  5012               	movf	setMotorPWM@m^0,w,c
  5645   001EFE  26D9               	addwf	fsr2l,f,c
  5646   001F00  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5647   001F02  22DA               	addwfc	fsr2h,f,c
  5648   001F04  50DF               	movf	indf2,w,c
  5649   001F06  6E17               	movwf	setMotorPWM@negDuty^0,c
  5650                           
  5651                           ;dc_motor.c: 68:     }
  5652   001F08  EFA9  F00F         	goto	l2584
  5653   001F0C                     l2580:
  5654                           
  5655                           ;dc_motor.c: 70:         posDuty=0;
  5656   001F0C  0E00               	movlw	0
  5657   001F0E  6E16               	movwf	setMotorPWM@posDuty^0,c
  5658   001F10                     
  5659                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5660   001F10  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5661   001F14  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5662   001F18  50DF               	movf	indf2,w,c
  5663   001F1A  6E14               	movwf	??_setMotorPWM^0,c
  5664   001F1C  5014               	movf	??_setMotorPWM^0,w,c
  5665   001F1E  6E05               	movwf	___wmul@multiplier^0,c
  5666   001F20  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5667   001F22  EE20 F003          	lfsr	2,3
  5668   001F26  5012               	movf	setMotorPWM@m^0,w,c
  5669   001F28  26D9               	addwf	fsr2l,f,c
  5670   001F2A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5671   001F2C  22DA               	addwfc	fsr2h,f,c
  5672   001F2E  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5673   001F32  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5674   001F36  EC21  F018         	call	___wmul	;wreg free
  5675   001F3A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5676   001F3E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5677   001F42  0E00               	movlw	0
  5678   001F44  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5679   001F46  0E64               	movlw	100
  5680   001F48  6E0D               	movwf	___lwdiv@divisor^0,c
  5681   001F4A  ECBA  F015         	call	___lwdiv	;wreg free
  5682   001F4E  500B               	movf	?___lwdiv^0,w,c
  5683   001F50  6E17               	movwf	setMotorPWM@negDuty^0,c
  5684   001F52                     l2584:
  5685                           
  5686                           ;dc_motor.c: 74:     if (m->direction) {
  5687   001F52  EE20 F001          	lfsr	2,1
  5688   001F56  5012               	movf	setMotorPWM@m^0,w,c
  5689   001F58  26D9               	addwf	fsr2l,f,c
  5690   001F5A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5691   001F5C  22DA               	addwfc	fsr2h,f,c
  5692   001F5E  50DF               	movf	indf2,w,c
  5693   001F60  B4D8               	btfsc	status,2,c
  5694   001F62  EFB5  F00F         	goto	u1231
  5695   001F66  EFB7  F00F         	goto	u1230
  5696   001F6A                     u1231:
  5697   001F6A  EFD9  F00F         	goto	l2588
  5698   001F6E                     u1230:
  5699   001F6E                     
  5700                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5701   001F6E  EE20 F005          	lfsr	2,5
  5702   001F72  5012               	movf	setMotorPWM@m^0,w,c
  5703   001F74  26D9               	addwf	fsr2l,f,c
  5704   001F76  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5705   001F78  22DA               	addwfc	fsr2h,f,c
  5706   001F7A  CFDE F014          	movff	postinc2,??_setMotorPWM
  5707   001F7E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5708   001F82  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5709   001F86  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5710   001F8A  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5711                           
  5712                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5713   001F8E  EE20 F007          	lfsr	2,7
  5714   001F92  5012               	movf	setMotorPWM@m^0,w,c
  5715   001F94  26D9               	addwf	fsr2l,f,c
  5716   001F96  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5717   001F98  22DA               	addwfc	fsr2h,f,c
  5718   001F9A  CFDE F014          	movff	postinc2,??_setMotorPWM
  5719   001F9E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5720   001FA2  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5721   001FA6  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5722   001FAA  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5723                           
  5724                           ;dc_motor.c: 77:     } else {
  5725   001FAE  EFF9  F00F         	goto	l86
  5726   001FB2                     l2588:
  5727                           
  5728                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5729   001FB2  EE20 F005          	lfsr	2,5
  5730   001FB6  5012               	movf	setMotorPWM@m^0,w,c
  5731   001FB8  26D9               	addwf	fsr2l,f,c
  5732   001FBA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5733   001FBC  22DA               	addwfc	fsr2h,f,c
  5734   001FBE  CFDE F014          	movff	postinc2,??_setMotorPWM
  5735   001FC2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5736   001FC6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5737   001FCA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5738   001FCE  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5739                           
  5740                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5741   001FD2  EE20 F007          	lfsr	2,7
  5742   001FD6  5012               	movf	setMotorPWM@m^0,w,c
  5743   001FD8  26D9               	addwf	fsr2l,f,c
  5744   001FDA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5745   001FDC  22DA               	addwfc	fsr2h,f,c
  5746   001FDE  CFDE F014          	movff	postinc2,??_setMotorPWM
  5747   001FE2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5748   001FE6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5749   001FEA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5750   001FEE  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5751   001FF2                     l86:
  5752   001FF2  0012               	return		;funcret
  5753   001FF4                     __end_of_setMotorPWM:
  5754                           	callstack 0
  5755                           
  5756 ;; *************** function ___wmul *****************
  5757 ;; Defined at:
  5758 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  multiplier      2    4[COMRAM] unsigned int 
  5761 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  product         2    8[COMRAM] unsigned int 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  2    4[COMRAM] unsigned int 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, prodl, prodh
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;Total ram usage:        6 bytes
  5778 ;; Hardware stack levels used: 1
  5779 ;; Hardware stack levels required when called: 4
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_setMotorPWM
  5784 ;;		_normalise_readings
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text28
  5789   003042                     __ptext28:
  5790                           	callstack 0
  5791   003042                     ___wmul:
  5792                           	callstack 24
  5793   003042  5005               	movf	___wmul@multiplier^0,w,c
  5794   003044  0207               	mulwf	___wmul@multiplicand^0,c
  5795   003046  CFF3 F009          	movff	prodl,___wmul@product
  5796   00304A  CFF4 F00A          	movff	prodh,___wmul@product+1
  5797   00304E  5005               	movf	___wmul@multiplier^0,w,c
  5798   003050  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5799   003052  50F3               	movf	243,w,c
  5800   003054  260A               	addwf	(___wmul@product+1)^0,f,c
  5801   003056  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5802   003058  0207               	mulwf	___wmul@multiplicand^0,c
  5803   00305A  50F3               	movf	243,w,c
  5804   00305C  260A               	addwf	(___wmul@product+1)^0,f,c
  5805   00305E  C009  F005         	movff	___wmul@product,?___wmul
  5806   003062  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5807   003066  0012               	return		;funcret
  5808   003068                     __end_of___wmul:
  5809                           	callstack 0
  5810                           
  5811 ;; *************** function ___lwdiv *****************
  5812 ;; Defined at:
  5813 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  dividend        2   10[COMRAM] unsigned int 
  5816 ;;  divisor         2   12[COMRAM] unsigned int 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  quotient        2   14[COMRAM] unsigned int 
  5819 ;;  counter         1   16[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  2   10[COMRAM] unsigned int 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5830 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5832 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5833 ;;Total ram usage:        7 bytes
  5834 ;; Hardware stack levels used: 1
  5835 ;; Hardware stack levels required when called: 4
  5836 ;; This function calls:
  5837 ;;		Nothing
  5838 ;; This function is called by:
  5839 ;;		_setMotorPWM
  5840 ;;		_normalise_readings
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text29
  5845   002B74                     __ptext29:
  5846                           	callstack 0
  5847   002B74                     ___lwdiv:
  5848                           	callstack 24
  5849   002B74  0E00               	movlw	0
  5850   002B76  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5851   002B78  0E00               	movlw	0
  5852   002B7A  6E0F               	movwf	___lwdiv@quotient^0,c
  5853   002B7C  500D               	movf	___lwdiv@divisor^0,w,c
  5854   002B7E  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5855   002B80  B4D8               	btfsc	status,2,c
  5856   002B82  EFC5  F015         	goto	u1071
  5857   002B86  EFC7  F015         	goto	u1070
  5858   002B8A                     u1071:
  5859   002B8A  EFEF  F015         	goto	l1009
  5860   002B8E                     u1070:
  5861   002B8E  0E01               	movlw	1
  5862   002B90  6E11               	movwf	___lwdiv@counter^0,c
  5863   002B92  EFCF  F015         	goto	l2478
  5864   002B96                     l2476:
  5865   002B96  90D8               	bcf	status,0,c
  5866   002B98  360D               	rlcf	___lwdiv@divisor^0,f,c
  5867   002B9A  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5868   002B9C  2A11               	incf	___lwdiv@counter^0,f,c
  5869   002B9E                     l2478:
  5870   002B9E  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5871   002BA0  EFD4  F015         	goto	u1081
  5872   002BA4  EFD6  F015         	goto	u1080
  5873   002BA8                     u1081:
  5874   002BA8  EFCB  F015         	goto	l2476
  5875   002BAC                     u1080:
  5876   002BAC                     l2480:
  5877   002BAC  90D8               	bcf	status,0,c
  5878   002BAE  360F               	rlcf	___lwdiv@quotient^0,f,c
  5879   002BB0  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5880   002BB2  500D               	movf	___lwdiv@divisor^0,w,c
  5881   002BB4  5C0B               	subwf	___lwdiv@dividend^0,w,c
  5882   002BB6  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5883   002BB8  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5884   002BBA  A0D8               	btfss	status,0,c
  5885   002BBC  EFE2  F015         	goto	u1091
  5886   002BC0  EFE4  F015         	goto	u1090
  5887   002BC4                     u1091:
  5888   002BC4  EFE9  F015         	goto	l2488
  5889   002BC8                     u1090:
  5890   002BC8  500D               	movf	___lwdiv@divisor^0,w,c
  5891   002BCA  5E0B               	subwf	___lwdiv@dividend^0,f,c
  5892   002BCC  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5893   002BCE  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5894   002BD0  800F               	bsf	___lwdiv@quotient^0,0,c
  5895   002BD2                     l2488:
  5896   002BD2  90D8               	bcf	status,0,c
  5897   002BD4  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5898   002BD6  320D               	rrcf	___lwdiv@divisor^0,f,c
  5899   002BD8  2E11               	decfsz	___lwdiv@counter^0,f,c
  5900   002BDA  EFD6  F015         	goto	l2480
  5901   002BDE                     l1009:
  5902   002BDE  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5903   002BE2  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5904   002BE6  0012               	return		;funcret
  5905   002BE8                     __end_of___lwdiv:
  5906                           	callstack 0
  5907                           
  5908 ;; *************** function _make_master_closeness *****************
  5909 ;; Defined at:
  5910 ;;		line 99 in file "colour_identify.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  buf             2    4[COMRAM] PTR unsigned char 
  5913 ;;		 -> main@buf(150), 
  5914 ;;  normalised_v    2    6[COMRAM] PTR unsigned int [9]
  5915 ;;		 -> card_response@normalised_values(72), 
  5916 ;;  master_close    2    8[COMRAM] PTR unsigned int 
  5917 ;;		 -> card_response@master_closeness(18), 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  i               1   40[COMRAM] enum E14551
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5929 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5933 ;;Total ram usage:       37 bytes
  5934 ;; Hardware stack levels used: 1
  5935 ;; Hardware stack levels required when called: 4
  5936 ;; This function calls:
  5937 ;;		Nothing
  5938 ;; This function is called by:
  5939 ;;		_card_response
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text30
  5944   00251E                     __ptext30:
  5945                           	callstack 0
  5946   00251E                     _make_master_closeness:
  5947                           	callstack 25
  5948   00251E                     
  5949                           ;colour_identify.c: 100:     for(colour i = RED; i<=BLACK; i++){
  5950   00251E  0E01               	movlw	1
  5951   002520  6E29               	movwf	make_master_closeness@i^0,c
  5952   002522                     l2874:
  5953                           
  5954                           ;colour_identify.c: 102:         master_closeness[i] = (normalised_values[CLEAR][i] + no
      +                          rmalised_values[RED][i] + normalised_values[GREEN][i] + normalised_values[BLUE][i])/4;
  5955   002522  5029               	movf	make_master_closeness@i^0,w,c
  5956   002524  0D02               	mullw	2
  5957   002526  CFF3 F00B          	movff	prodl,??_make_master_closeness
  5958   00252A  CFF4 F00C          	movff	prodh,??_make_master_closeness+1
  5959   00252E  500B               	movf	??_make_master_closeness^0,w,c
  5960   002530  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  5961   002532  6E0D               	movwf	(??_make_master_closeness+2)^0,c
  5962   002534  500C               	movf	(??_make_master_closeness+1)^0,w,c
  5963   002536  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5964   002538  6E0E               	movwf	(??_make_master_closeness+3)^0,c
  5965   00253A  0E36               	movlw	54
  5966   00253C  240D               	addwf	(??_make_master_closeness+2)^0,w,c
  5967   00253E  6ED9               	movwf	fsr2l,c
  5968   002540  0E00               	movlw	0
  5969   002542  200E               	addwfc	(??_make_master_closeness+3)^0,w,c
  5970   002544  6EDA               	movwf	fsr2h,c
  5971   002546  CFDE F00F          	movff	postinc2,??_make_master_closeness+4
  5972   00254A  CFDD F010          	movff	postdec2,??_make_master_closeness+5
  5973   00254E  5029               	movf	make_master_closeness@i^0,w,c
  5974   002550  0D02               	mullw	2
  5975   002552  CFF3 F011          	movff	prodl,??_make_master_closeness+6
  5976   002556  CFF4 F012          	movff	prodh,??_make_master_closeness+7
  5977   00255A  5011               	movf	(??_make_master_closeness+6)^0,w,c
  5978   00255C  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  5979   00255E  6E13               	movwf	(??_make_master_closeness+8)^0,c
  5980   002560  5012               	movf	(??_make_master_closeness+7)^0,w,c
  5981   002562  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  5982   002564  6E14               	movwf	(??_make_master_closeness+9)^0,c
  5983   002566  0E24               	movlw	36
  5984   002568  2413               	addwf	(??_make_master_closeness+8)^0,w,c
  5985   00256A  6ED9               	movwf	fsr2l,c
  5986   00256C  0E00               	movlw	0
  5987   00256E  2014               	addwfc	(??_make_master_closeness+9)^0,w,c
  5988   002570  6EDA               	movwf	fsr2h,c
  5989   002572  CFDE F015          	movff	postinc2,??_make_master_closeness+10
  5990   002576  CFDD F016          	movff	postdec2,??_make_master_closeness+11
  5991   00257A  5029               	movf	make_master_closeness@i^0,w,c
  5992   00257C  0D02               	mullw	2
  5993   00257E  CFF3 F017          	movff	prodl,??_make_master_closeness+12
  5994   002582  CFF4 F018          	movff	prodh,??_make_master_closeness+13
  5995   002586  5017               	movf	(??_make_master_closeness+12)^0,w,c
  5996   002588  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  5997   00258A  6E19               	movwf	(??_make_master_closeness+14)^0,c
  5998   00258C  5018               	movf	(??_make_master_closeness+13)^0,w,c
  5999   00258E  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6000   002590  6E1A               	movwf	(??_make_master_closeness+15)^0,c
  6001   002592  0E12               	movlw	18
  6002   002594  2419               	addwf	(??_make_master_closeness+14)^0,w,c
  6003   002596  6ED9               	movwf	fsr2l,c
  6004   002598  0E00               	movlw	0
  6005   00259A  201A               	addwfc	(??_make_master_closeness+15)^0,w,c
  6006   00259C  6EDA               	movwf	fsr2h,c
  6007   00259E  CFDE F01B          	movff	postinc2,??_make_master_closeness+16
  6008   0025A2  CFDD F01C          	movff	postdec2,??_make_master_closeness+17
  6009   0025A6  5029               	movf	make_master_closeness@i^0,w,c
  6010   0025A8  0D02               	mullw	2
  6011   0025AA  CFF3 F01D          	movff	prodl,??_make_master_closeness+18
  6012   0025AE  CFF4 F01E          	movff	prodh,??_make_master_closeness+19
  6013   0025B2  501D               	movf	(??_make_master_closeness+18)^0,w,c
  6014   0025B4  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6015   0025B6  6ED9               	movwf	fsr2l,c
  6016   0025B8  501E               	movf	(??_make_master_closeness+19)^0,w,c
  6017   0025BA  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6018   0025BC  6EDA               	movwf	fsr2h,c
  6019   0025BE  CFDE F01F          	movff	postinc2,??_make_master_closeness+20
  6020   0025C2  CFDD F020          	movff	postdec2,??_make_master_closeness+21
  6021   0025C6  501B               	movf	(??_make_master_closeness+16)^0,w,c
  6022   0025C8  241F               	addwf	(??_make_master_closeness+20)^0,w,c
  6023   0025CA  6E21               	movwf	(??_make_master_closeness+22)^0,c
  6024   0025CC  501C               	movf	(??_make_master_closeness+17)^0,w,c
  6025   0025CE  2020               	addwfc	(??_make_master_closeness+21)^0,w,c
  6026   0025D0  6E22               	movwf	(??_make_master_closeness+23)^0,c
  6027   0025D2  5015               	movf	(??_make_master_closeness+10)^0,w,c
  6028   0025D4  2421               	addwf	(??_make_master_closeness+22)^0,w,c
  6029   0025D6  6E23               	movwf	(??_make_master_closeness+24)^0,c
  6030   0025D8  5016               	movf	(??_make_master_closeness+11)^0,w,c
  6031   0025DA  2022               	addwfc	(??_make_master_closeness+23)^0,w,c
  6032   0025DC  6E24               	movwf	(??_make_master_closeness+25)^0,c
  6033   0025DE  500F               	movf	(??_make_master_closeness+4)^0,w,c
  6034   0025E0  2423               	addwf	(??_make_master_closeness+24)^0,w,c
  6035   0025E2  6E25               	movwf	(??_make_master_closeness+26)^0,c
  6036   0025E4  5010               	movf	(??_make_master_closeness+5)^0,w,c
  6037   0025E6  2024               	addwfc	(??_make_master_closeness+25)^0,w,c
  6038   0025E8  6E26               	movwf	(??_make_master_closeness+27)^0,c
  6039   0025EA  90D8               	bcf	status,0,c
  6040   0025EC  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6041   0025EE  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6042   0025F0  90D8               	bcf	status,0,c
  6043   0025F2  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6044   0025F4  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6045   0025F6  5029               	movf	make_master_closeness@i^0,w,c
  6046   0025F8  0D02               	mullw	2
  6047   0025FA  CFF3 F027          	movff	prodl,??_make_master_closeness+28
  6048   0025FE  CFF4 F028          	movff	prodh,??_make_master_closeness+29
  6049   002602  5027               	movf	(??_make_master_closeness+28)^0,w,c
  6050   002604  2409               	addwf	make_master_closeness@master_closeness^0,w,c
  6051   002606  6ED9               	movwf	fsr2l,c
  6052   002608  5028               	movf	(??_make_master_closeness+29)^0,w,c
  6053   00260A  200A               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6054   00260C  6EDA               	movwf	fsr2h,c
  6055   00260E  C025  FFDE         	movff	??_make_master_closeness+26,postinc2
  6056   002612  C026  FFDD         	movff	??_make_master_closeness+27,postdec2
  6057   002616                     
  6058                           ;colour_identify.c: 107:     }
  6059   002616  2A29               	incf	make_master_closeness@i^0,f,c
  6060   002618  0E09               	movlw	9
  6061   00261A  6429               	cpfsgt	make_master_closeness@i^0,c
  6062   00261C  EF12  F013         	goto	u1431
  6063   002620  EF14  F013         	goto	u1430
  6064   002624                     u1431:
  6065   002624  EF91  F012         	goto	l2874
  6066   002628                     u1430:
  6067   002628  0012               	return		;funcret
  6068   00262A                     __end_of_make_master_closeness:
  6069                           	callstack 0
  6070                           
  6071 ;; *************** function _determine_card *****************
  6072 ;; Defined at:
  6073 ;;		line 110 in file "colour_identify.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  6076 ;;		 -> card_response@master_closeness(18), 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  i               1   13[COMRAM] enum E14551
  6079 ;;  current_smal    2   10[COMRAM] unsigned int 
  6080 ;;  predicted_co    1   12[COMRAM] enum E14551
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      enum E14551
  6083 ;; Registers used:
  6084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6091 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6092 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6093 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;Total ram usage:       10 bytes
  6095 ;; Hardware stack levels used: 1
  6096 ;; Hardware stack levels required when called: 4
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_card_response
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text31
  6105   002A76                     __ptext31:
  6106                           	callstack 0
  6107   002A76                     _determine_card:
  6108                           	callstack 25
  6109   002A76                     
  6110                           ;colour_identify.c: 112:     colour predicted_colour = RED;
  6111   002A76  0E01               	movlw	1
  6112   002A78  6E0D               	movwf	determine_card@predicted_colour^0,c
  6113   002A7A                     
  6114                           ;colour_identify.c: 113:     unsigned int current_smallest = master_closeness[RED];
  6115   002A7A  EE20 F002          	lfsr	2,2
  6116   002A7E  5005               	movf	determine_card@master_closeness^0,w,c
  6117   002A80  26D9               	addwf	fsr2l,f,c
  6118   002A82  5006               	movf	(determine_card@master_closeness+1)^0,w,c
  6119   002A84  22DA               	addwfc	fsr2h,f,c
  6120   002A86  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6121   002A8A  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6122   002A8E                     
  6123                           ;colour_identify.c: 114:     for(colour i = GREEN; i<=BLACK; i++){
  6124   002A8E  0E02               	movlw	2
  6125   002A90  6E0E               	movwf	determine_card@i^0,c
  6126   002A92                     l2890:
  6127                           
  6128                           ;colour_identify.c: 115:         if(master_closeness[i] < current_smallest){
  6129   002A92  500E               	movf	determine_card@i^0,w,c
  6130   002A94  0D02               	mullw	2
  6131   002A96  CFF3 F007          	movff	prodl,??_determine_card
  6132   002A9A  CFF4 F008          	movff	prodh,??_determine_card+1
  6133   002A9E  5007               	movf	??_determine_card^0,w,c
  6134   002AA0  2405               	addwf	determine_card@master_closeness^0,w,c
  6135   002AA2  6ED9               	movwf	fsr2l,c
  6136   002AA4  5008               	movf	(??_determine_card+1)^0,w,c
  6137   002AA6  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6138   002AA8  6EDA               	movwf	fsr2h,c
  6139   002AAA  500B               	movf	determine_card@current_smallest^0,w,c
  6140   002AAC  5CDE               	subwf	postinc2,w,c
  6141   002AAE  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  6142   002AB0  58DE               	subwfb	postinc2,w,c
  6143   002AB2  B0D8               	btfsc	status,0,c
  6144   002AB4  EF5E  F015         	goto	u1441
  6145   002AB8  EF60  F015         	goto	u1440
  6146   002ABC                     u1441:
  6147   002ABC  EF72  F015         	goto	l2896
  6148   002AC0                     u1440:
  6149   002AC0                     
  6150                           ;colour_identify.c: 116:             current_smallest = master_closeness[i];
  6151   002AC0  500E               	movf	determine_card@i^0,w,c
  6152   002AC2  0D02               	mullw	2
  6153   002AC4  CFF3 F007          	movff	prodl,??_determine_card
  6154   002AC8  CFF4 F008          	movff	prodh,??_determine_card+1
  6155   002ACC  5007               	movf	??_determine_card^0,w,c
  6156   002ACE  2405               	addwf	determine_card@master_closeness^0,w,c
  6157   002AD0  6ED9               	movwf	fsr2l,c
  6158   002AD2  5008               	movf	(??_determine_card+1)^0,w,c
  6159   002AD4  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6160   002AD6  6EDA               	movwf	fsr2h,c
  6161   002AD8  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6162   002ADC  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6163   002AE0                     
  6164                           ;colour_identify.c: 117:             predicted_colour = i;
  6165   002AE0  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  6166   002AE4                     l2896:
  6167                           
  6168                           ;colour_identify.c: 119:     }
  6169   002AE4  2A0E               	incf	determine_card@i^0,f,c
  6170   002AE6  0E09               	movlw	9
  6171   002AE8  640E               	cpfsgt	determine_card@i^0,c
  6172   002AEA  EF79  F015         	goto	u1451
  6173   002AEE  EF7B  F015         	goto	u1450
  6174   002AF2                     u1451:
  6175   002AF2  EF49  F015         	goto	l2890
  6176   002AF6                     u1450:
  6177   002AF6                     
  6178                           ;colour_identify.c: 120:     return predicted_colour;
  6179   002AF6  500D               	movf	determine_card@predicted_colour^0,w,c
  6180   002AF8  0012               	return		;funcret
  6181   002AFA                     __end_of_determine_card:
  6182                           	callstack 0
  6183                           
  6184 ;; *************** function _collect_avg_readings *****************
  6185 ;; Defined at:
  6186 ;;		line 31 in file "colour_identify.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  clear_read      2   15[COMRAM] PTR unsigned int 
  6189 ;;		 -> main@clear_read(2), 
  6190 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  6191 ;;		 -> main@red_read(2), 
  6192 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  6193 ;;		 -> main@green_read(2), 
  6194 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  6195 ;;		 -> main@blue_read(2), 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  i               2   33[COMRAM] int 
  6198 ;;  i               2   31[COMRAM] int 
  6199 ;;  i               2   29[COMRAM] int 
  6200 ;;  i               2   27[COMRAM] int 
  6201 ;;  i               2   25[COMRAM] int 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      void 
  6204 ;; Registers used:
  6205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6211 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6212 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6214 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6215 ;;Total ram usage:       20 bytes
  6216 ;; Hardware stack levels used: 1
  6217 ;; Hardware stack levels required when called: 7
  6218 ;; This function calls:
  6219 ;;		_color_read_Blue
  6220 ;;		_color_read_Clear
  6221 ;;		_color_read_Green
  6222 ;;		_color_read_Red
  6223 ;; This function is called by:
  6224 ;;		_main
  6225 ;;		_card_response
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text32
  6230   001A86                     __ptext32:
  6231                           	callstack 0
  6232   001A86                     _collect_avg_readings:
  6233                           	callstack 23
  6234   001A86                     
  6235                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  6236   001A86  0E00               	movlw	0
  6237   001A88  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  6238   001A8A  0E00               	movlw	0
  6239   001A8C  6E1A               	movwf	collect_avg_readings@i^0,c
  6240   001A8E                     l2766:
  6241                           
  6242                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  6243   001A8E  ECCB  F016         	call	_color_read_Clear	;wreg free
  6244   001A92  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6245   001A96  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6246   001A9A  C009  FFDE         	movff	?_color_read_Clear,postinc2
  6247   001A9E  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  6248                           
  6249                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  6250   001AA2  EC7B  F016         	call	_color_read_Red	;wreg free
  6251   001AA6  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6252   001AAA  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6253   001AAE  C009  FFDE         	movff	?_color_read_Red,postinc2
  6254   001AB2  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  6255                           
  6256                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  6257   001AB6  ECA3  F016         	call	_color_read_Green	;wreg free
  6258   001ABA  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6259   001ABE  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6260   001AC2  C009  FFDE         	movff	?_color_read_Green,postinc2
  6261   001AC6  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  6262                           
  6263                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  6264   001ACA  ECF3  F016         	call	_color_read_Blue	;wreg free
  6265   001ACE  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6266   001AD2  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6267   001AD6  C009  FFDE         	movff	?_color_read_Blue,postinc2
  6268   001ADA  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  6269   001ADE                     
  6270                           ;colour_identify.c: 40:     }
  6271   001ADE  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  6272   001AE0  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  6273   001AE2  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6274   001AE4  EF7D  F00D         	goto	u1361
  6275   001AE8  0EF5               	movlw	245
  6276   001AEA  5C1A               	subwf	collect_avg_readings@i^0,w,c
  6277   001AEC  0E01               	movlw	1
  6278   001AEE  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6279   001AF0  A0D8               	btfss	status,0,c
  6280   001AF2  EF7D  F00D         	goto	u1361
  6281   001AF6  EF7F  F00D         	goto	u1360
  6282   001AFA                     u1361:
  6283   001AFA  EF47  F00D         	goto	l2766
  6284   001AFE                     u1360:
  6285   001AFE                     
  6286                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  6287   001AFE  0E00               	movlw	0
  6288   001B00  6E1D               	movwf	(collect_avg_readings@i_1599+1)^0,c
  6289   001B02  0E00               	movlw	0
  6290   001B04  6E1C               	movwf	collect_avg_readings@i_1599^0,c
  6291   001B06                     l2778:
  6292                           
  6293                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  6294   001B06  ECCB  F016         	call	_color_read_Clear	;wreg free
  6295   001B0A  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6296   001B0E  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6297   001B12  5009               	movf	?_color_read_Clear^0,w,c
  6298   001B14  26DE               	addwf	postinc2,f,c
  6299   001B16  500A               	movf	(?_color_read_Clear+1)^0,w,c
  6300   001B18  22DD               	addwfc	postdec2,f,c
  6301   001B1A                     
  6302                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6303   001B1A  0E11               	movlw	17
  6304   001B1C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6305   001B1E  0E3C               	movlw	60
  6306   001B20  6E18               	movwf	??_collect_avg_readings^0,c
  6307   001B22  0ECB               	movlw	203
  6308   001B24                     u2337:
  6309   001B24  2EE8               	decfsz	wreg,f,c
  6310   001B26  D7FE               	bra	u2337
  6311   001B28  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6312   001B2A  D7FC               	bra	u2337
  6313   001B2C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6314   001B2E  D7FA               	bra	u2337
  6315   001B30  F000               	nop	
  6316   001B32                     
  6317                           ;colour_identify.c: 47:     }
  6318   001B32  4A1C               	infsnz	collect_avg_readings@i_1599^0,f,c
  6319   001B34  2A1D               	incf	(collect_avg_readings@i_1599+1)^0,f,c
  6320   001B36  BE1D               	btfsc	(collect_avg_readings@i_1599+1)^0,7,c
  6321   001B38  EFA7  F00D         	goto	u1371
  6322   001B3C  501D               	movf	(collect_avg_readings@i_1599+1)^0,w,c
  6323   001B3E  E109               	bnz	u1370
  6324   001B40  0E03               	movlw	3
  6325   001B42  5C1C               	subwf	collect_avg_readings@i_1599^0,w,c
  6326   001B44  A0D8               	btfss	status,0,c
  6327   001B46  EFA7  F00D         	goto	u1371
  6328   001B4A  EFA9  F00D         	goto	u1370
  6329   001B4E                     u1371:
  6330   001B4E  EF83  F00D         	goto	l2778
  6331   001B52                     u1370:
  6332   001B52                     
  6333                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  6334   001B52  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6335   001B56  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6336   001B5A  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6337   001B5E  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6338   001B62  90D8               	bcf	status,0,c
  6339   001B64  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6340   001B66  3218               	rrcf	??_collect_avg_readings^0,f,c
  6341   001B68  90D8               	bcf	status,0,c
  6342   001B6A  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6343   001B6C  3218               	rrcf	??_collect_avg_readings^0,f,c
  6344   001B6E  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6345   001B72  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6346   001B76  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6347   001B7A  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6348   001B7E                     
  6349                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  6350   001B7E  0E00               	movlw	0
  6351   001B80  6E1F               	movwf	(collect_avg_readings@i_1600+1)^0,c
  6352   001B82  0E00               	movlw	0
  6353   001B84  6E1E               	movwf	collect_avg_readings@i_1600^0,c
  6354   001B86                     l2794:
  6355                           
  6356                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  6357   001B86  EC7B  F016         	call	_color_read_Red	;wreg free
  6358   001B8A  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6359   001B8E  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6360   001B92  5009               	movf	?_color_read_Red^0,w,c
  6361   001B94  26DE               	addwf	postinc2,f,c
  6362   001B96  500A               	movf	(?_color_read_Red+1)^0,w,c
  6363   001B98  22DD               	addwfc	postdec2,f,c
  6364   001B9A                     
  6365                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6366   001B9A  0E11               	movlw	17
  6367   001B9C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6368   001B9E  0E3C               	movlw	60
  6369   001BA0  6E18               	movwf	??_collect_avg_readings^0,c
  6370   001BA2  0ECB               	movlw	203
  6371   001BA4                     u2347:
  6372   001BA4  2EE8               	decfsz	wreg,f,c
  6373   001BA6  D7FE               	bra	u2347
  6374   001BA8  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6375   001BAA  D7FC               	bra	u2347
  6376   001BAC  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6377   001BAE  D7FA               	bra	u2347
  6378   001BB0  F000               	nop	
  6379   001BB2                     
  6380                           ;colour_identify.c: 53:     }
  6381   001BB2  4A1E               	infsnz	collect_avg_readings@i_1600^0,f,c
  6382   001BB4  2A1F               	incf	(collect_avg_readings@i_1600+1)^0,f,c
  6383   001BB6  BE1F               	btfsc	(collect_avg_readings@i_1600+1)^0,7,c
  6384   001BB8  EFE7  F00D         	goto	u1381
  6385   001BBC  501F               	movf	(collect_avg_readings@i_1600+1)^0,w,c
  6386   001BBE  E109               	bnz	u1380
  6387   001BC0  0E03               	movlw	3
  6388   001BC2  5C1E               	subwf	collect_avg_readings@i_1600^0,w,c
  6389   001BC4  A0D8               	btfss	status,0,c
  6390   001BC6  EFE7  F00D         	goto	u1381
  6391   001BCA  EFE9  F00D         	goto	u1380
  6392   001BCE                     u1381:
  6393   001BCE  EFC3  F00D         	goto	l2794
  6394   001BD2                     u1380:
  6395   001BD2                     
  6396                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  6397   001BD2  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6398   001BD6  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6399   001BDA  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6400   001BDE  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6401   001BE2  90D8               	bcf	status,0,c
  6402   001BE4  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6403   001BE6  3218               	rrcf	??_collect_avg_readings^0,f,c
  6404   001BE8  90D8               	bcf	status,0,c
  6405   001BEA  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6406   001BEC  3218               	rrcf	??_collect_avg_readings^0,f,c
  6407   001BEE  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6408   001BF2  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6409   001BF6  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6410   001BFA  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6411   001BFE                     
  6412                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  6413   001BFE  0E00               	movlw	0
  6414   001C00  6E21               	movwf	(collect_avg_readings@i_1601+1)^0,c
  6415   001C02  0E00               	movlw	0
  6416   001C04  6E20               	movwf	collect_avg_readings@i_1601^0,c
  6417   001C06                     l2810:
  6418                           
  6419                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  6420   001C06  ECA3  F016         	call	_color_read_Green	;wreg free
  6421   001C0A  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6422   001C0E  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6423   001C12  5009               	movf	?_color_read_Green^0,w,c
  6424   001C14  26DE               	addwf	postinc2,f,c
  6425   001C16  500A               	movf	(?_color_read_Green+1)^0,w,c
  6426   001C18  22DD               	addwfc	postdec2,f,c
  6427   001C1A                     
  6428                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6429   001C1A  0E11               	movlw	17
  6430   001C1C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6431   001C1E  0E3C               	movlw	60
  6432   001C20  6E18               	movwf	??_collect_avg_readings^0,c
  6433   001C22  0ECB               	movlw	203
  6434   001C24                     u2357:
  6435   001C24  2EE8               	decfsz	wreg,f,c
  6436   001C26  D7FE               	bra	u2357
  6437   001C28  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6438   001C2A  D7FC               	bra	u2357
  6439   001C2C  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6440   001C2E  D7FA               	bra	u2357
  6441   001C30  F000               	nop	
  6442   001C32                     
  6443                           ;colour_identify.c: 59:     }
  6444   001C32  4A20               	infsnz	collect_avg_readings@i_1601^0,f,c
  6445   001C34  2A21               	incf	(collect_avg_readings@i_1601+1)^0,f,c
  6446   001C36  BE21               	btfsc	(collect_avg_readings@i_1601+1)^0,7,c
  6447   001C38  EF27  F00E         	goto	u1391
  6448   001C3C  5021               	movf	(collect_avg_readings@i_1601+1)^0,w,c
  6449   001C3E  E109               	bnz	u1390
  6450   001C40  0E03               	movlw	3
  6451   001C42  5C20               	subwf	collect_avg_readings@i_1601^0,w,c
  6452   001C44  A0D8               	btfss	status,0,c
  6453   001C46  EF27  F00E         	goto	u1391
  6454   001C4A  EF29  F00E         	goto	u1390
  6455   001C4E                     u1391:
  6456   001C4E  EF03  F00E         	goto	l2810
  6457   001C52                     u1390:
  6458   001C52                     
  6459                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  6460   001C52  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6461   001C56  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6462   001C5A  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6463   001C5E  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6464   001C62  90D8               	bcf	status,0,c
  6465   001C64  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6466   001C66  3218               	rrcf	??_collect_avg_readings^0,f,c
  6467   001C68  90D8               	bcf	status,0,c
  6468   001C6A  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6469   001C6C  3218               	rrcf	??_collect_avg_readings^0,f,c
  6470   001C6E  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6471   001C72  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6472   001C76  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6473   001C7A  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6474   001C7E                     
  6475                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  6476   001C7E  0E00               	movlw	0
  6477   001C80  6E23               	movwf	(collect_avg_readings@i_1602+1)^0,c
  6478   001C82  0E00               	movlw	0
  6479   001C84  6E22               	movwf	collect_avg_readings@i_1602^0,c
  6480   001C86                     l2826:
  6481                           
  6482                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  6483   001C86  ECF3  F016         	call	_color_read_Blue	;wreg free
  6484   001C8A  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6485   001C8E  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6486   001C92  5009               	movf	?_color_read_Blue^0,w,c
  6487   001C94  26DE               	addwf	postinc2,f,c
  6488   001C96  500A               	movf	(?_color_read_Blue+1)^0,w,c
  6489   001C98  22DD               	addwfc	postdec2,f,c
  6490   001C9A                     
  6491                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6492   001C9A  0E11               	movlw	17
  6493   001C9C  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6494   001C9E  0E3C               	movlw	60
  6495   001CA0  6E18               	movwf	??_collect_avg_readings^0,c
  6496   001CA2  0ECB               	movlw	203
  6497   001CA4                     u2367:
  6498   001CA4  2EE8               	decfsz	wreg,f,c
  6499   001CA6  D7FE               	bra	u2367
  6500   001CA8  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6501   001CAA  D7FC               	bra	u2367
  6502   001CAC  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6503   001CAE  D7FA               	bra	u2367
  6504   001CB0  F000               	nop	
  6505   001CB2                     
  6506                           ;colour_identify.c: 65:     }
  6507   001CB2  4A22               	infsnz	collect_avg_readings@i_1602^0,f,c
  6508   001CB4  2A23               	incf	(collect_avg_readings@i_1602+1)^0,f,c
  6509   001CB6  BE23               	btfsc	(collect_avg_readings@i_1602+1)^0,7,c
  6510   001CB8  EF67  F00E         	goto	u1401
  6511   001CBC  5023               	movf	(collect_avg_readings@i_1602+1)^0,w,c
  6512   001CBE  E109               	bnz	u1400
  6513   001CC0  0E03               	movlw	3
  6514   001CC2  5C22               	subwf	collect_avg_readings@i_1602^0,w,c
  6515   001CC4  A0D8               	btfss	status,0,c
  6516   001CC6  EF67  F00E         	goto	u1401
  6517   001CCA  EF69  F00E         	goto	u1400
  6518   001CCE                     u1401:
  6519   001CCE  EF43  F00E         	goto	l2826
  6520   001CD2                     u1400:
  6521   001CD2                     
  6522                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  6523   001CD2  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6524   001CD6  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6525   001CDA  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6526   001CDE  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6527   001CE2  90D8               	bcf	status,0,c
  6528   001CE4  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6529   001CE6  3218               	rrcf	??_collect_avg_readings^0,f,c
  6530   001CE8  90D8               	bcf	status,0,c
  6531   001CEA  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6532   001CEC  3218               	rrcf	??_collect_avg_readings^0,f,c
  6533   001CEE  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6534   001CF2  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6535   001CF6  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6536   001CFA  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6537   001CFE  0012               	return		;funcret
  6538   001D00                     __end_of_collect_avg_readings:
  6539                           	callstack 0
  6540                           
  6541 ;; *************** function _color_read_Red *****************
  6542 ;; Defined at:
  6543 ;;		line 29 in file "color.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  tmp             2   13[COMRAM] unsigned int 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  2    8[COMRAM] unsigned int 
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6558 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6559 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6560 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6561 ;;Total ram usage:        7 bytes
  6562 ;; Hardware stack levels used: 1
  6563 ;; Hardware stack levels required when called: 6
  6564 ;; This function calls:
  6565 ;;		_I2C_2_Master_Read
  6566 ;;		_I2C_2_Master_RepStart
  6567 ;;		_I2C_2_Master_Start
  6568 ;;		_I2C_2_Master_Stop
  6569 ;;		_I2C_2_Master_Write
  6570 ;; This function is called by:
  6571 ;;		_collect_avg_readings
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text33
  6576   002CF6                     __ptext33:
  6577                           	callstack 0
  6578   002CF6                     _color_read_Red:
  6579                           	callstack 23
  6580   002CF6                     
  6581                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6582   002CF6  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  6583                           
  6584                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6585   002CFA  0E52               	movlw	82
  6586   002CFC  EC8F  F018         	call	_I2C_2_Master_Write
  6587                           
  6588                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6589   002D00  0EB6               	movlw	182
  6590   002D02  EC8F  F018         	call	_I2C_2_Master_Write
  6591                           
  6592                           ;color.c: 35:  I2C_2_Master_RepStart();
  6593   002D06  EC9B  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6594                           
  6595                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6596   002D0A  0E53               	movlw	83
  6597   002D0C  EC8F  F018         	call	_I2C_2_Master_Write
  6598                           
  6599                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6600   002D10  0E01               	movlw	1
  6601   002D12  EC3D  F017         	call	_I2C_2_Master_Read
  6602   002D16  6E0B               	movwf	??_color_read_Red^0,c
  6603   002D18  500B               	movf	??_color_read_Red^0,w,c
  6604   002D1A  6E0E               	movwf	color_read_Red@tmp^0,c
  6605   002D1C  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6606                           
  6607                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6608   002D1E  0E00               	movlw	0
  6609   002D20  EC3D  F017         	call	_I2C_2_Master_Read
  6610   002D24  6E0B               	movwf	??_color_read_Red^0,c
  6611   002D26  500B               	movf	??_color_read_Red^0,w,c
  6612   002D28  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6613   002D2A  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6614   002D2C  500E               	movf	color_read_Red@tmp^0,w,c
  6615   002D2E  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6616   002D30  6E0E               	movwf	color_read_Red@tmp^0,c
  6617   002D32  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6618   002D34  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6619   002D36  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6620                           
  6621                           ;color.c: 39:  I2C_2_Master_Stop();
  6622   002D38  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  6623   002D3C                     
  6624                           ;color.c: 40:  return tmp;
  6625   002D3C  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6626   002D40  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6627   002D44  0012               	return		;funcret
  6628   002D46                     __end_of_color_read_Red:
  6629                           	callstack 0
  6630                           
  6631 ;; *************** function _color_read_Green *****************
  6632 ;; Defined at:
  6633 ;;		line 43 in file "color.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  tmp             2   13[COMRAM] unsigned int 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  2    8[COMRAM] unsigned int 
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6649 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6650 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6651 ;;Total ram usage:        7 bytes
  6652 ;; Hardware stack levels used: 1
  6653 ;; Hardware stack levels required when called: 6
  6654 ;; This function calls:
  6655 ;;		_I2C_2_Master_Read
  6656 ;;		_I2C_2_Master_RepStart
  6657 ;;		_I2C_2_Master_Start
  6658 ;;		_I2C_2_Master_Stop
  6659 ;;		_I2C_2_Master_Write
  6660 ;; This function is called by:
  6661 ;;		_collect_avg_readings
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text34
  6666   002D46                     __ptext34:
  6667                           	callstack 0
  6668   002D46                     _color_read_Green:
  6669                           	callstack 23
  6670   002D46                     
  6671                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6672   002D46  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  6673                           
  6674                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6675   002D4A  0E52               	movlw	82
  6676   002D4C  EC8F  F018         	call	_I2C_2_Master_Write
  6677                           
  6678                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6679   002D50  0EB8               	movlw	184
  6680   002D52  EC8F  F018         	call	_I2C_2_Master_Write
  6681                           
  6682                           ;color.c: 49:  I2C_2_Master_RepStart();
  6683   002D56  EC9B  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6684                           
  6685                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6686   002D5A  0E53               	movlw	83
  6687   002D5C  EC8F  F018         	call	_I2C_2_Master_Write
  6688                           
  6689                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6690   002D60  0E01               	movlw	1
  6691   002D62  EC3D  F017         	call	_I2C_2_Master_Read
  6692   002D66  6E0B               	movwf	??_color_read_Green^0,c
  6693   002D68  500B               	movf	??_color_read_Green^0,w,c
  6694   002D6A  6E0E               	movwf	color_read_Green@tmp^0,c
  6695   002D6C  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6696                           
  6697                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6698   002D6E  0E00               	movlw	0
  6699   002D70  EC3D  F017         	call	_I2C_2_Master_Read
  6700   002D74  6E0B               	movwf	??_color_read_Green^0,c
  6701   002D76  500B               	movf	??_color_read_Green^0,w,c
  6702   002D78  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6703   002D7A  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6704   002D7C  500E               	movf	color_read_Green@tmp^0,w,c
  6705   002D7E  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6706   002D80  6E0E               	movwf	color_read_Green@tmp^0,c
  6707   002D82  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6708   002D84  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6709   002D86  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6710                           
  6711                           ;color.c: 53:  I2C_2_Master_Stop();
  6712   002D88  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  6713   002D8C                     
  6714                           ;color.c: 54:  return tmp;
  6715   002D8C  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6716   002D90  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6717   002D94  0012               	return		;funcret
  6718   002D96                     __end_of_color_read_Green:
  6719                           	callstack 0
  6720                           
  6721 ;; *************** function _color_read_Clear *****************
  6722 ;; Defined at:
  6723 ;;		line 71 in file "color.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  tmp             2   13[COMRAM] unsigned int 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  2    8[COMRAM] unsigned int 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6739 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6740 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6741 ;;Total ram usage:        7 bytes
  6742 ;; Hardware stack levels used: 1
  6743 ;; Hardware stack levels required when called: 6
  6744 ;; This function calls:
  6745 ;;		_I2C_2_Master_Read
  6746 ;;		_I2C_2_Master_RepStart
  6747 ;;		_I2C_2_Master_Start
  6748 ;;		_I2C_2_Master_Stop
  6749 ;;		_I2C_2_Master_Write
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;;		_clear_read_calibration
  6753 ;;		_collect_avg_readings
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text35
  6758   002D96                     __ptext35:
  6759                           	callstack 0
  6760   002D96                     _color_read_Clear:
  6761                           	callstack 24
  6762   002D96                     
  6763                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6764   002D96  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  6765                           
  6766                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6767   002D9A  0E52               	movlw	82
  6768   002D9C  EC8F  F018         	call	_I2C_2_Master_Write
  6769                           
  6770                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6771   002DA0  0EB4               	movlw	180
  6772   002DA2  EC8F  F018         	call	_I2C_2_Master_Write
  6773                           
  6774                           ;color.c: 77:  I2C_2_Master_RepStart();
  6775   002DA6  EC9B  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6776                           
  6777                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6778   002DAA  0E53               	movlw	83
  6779   002DAC  EC8F  F018         	call	_I2C_2_Master_Write
  6780                           
  6781                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6782   002DB0  0E01               	movlw	1
  6783   002DB2  EC3D  F017         	call	_I2C_2_Master_Read
  6784   002DB6  6E0B               	movwf	??_color_read_Clear^0,c
  6785   002DB8  500B               	movf	??_color_read_Clear^0,w,c
  6786   002DBA  6E0E               	movwf	color_read_Clear@tmp^0,c
  6787   002DBC  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  6788                           
  6789                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6790   002DBE  0E00               	movlw	0
  6791   002DC0  EC3D  F017         	call	_I2C_2_Master_Read
  6792   002DC4  6E0B               	movwf	??_color_read_Clear^0,c
  6793   002DC6  500B               	movf	??_color_read_Clear^0,w,c
  6794   002DC8  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  6795   002DCA  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  6796   002DCC  500E               	movf	color_read_Clear@tmp^0,w,c
  6797   002DCE  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  6798   002DD0  6E0E               	movwf	color_read_Clear@tmp^0,c
  6799   002DD2  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  6800   002DD4  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  6801   002DD6  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  6802                           
  6803                           ;color.c: 81:  I2C_2_Master_Stop();
  6804   002DD8  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  6805   002DDC                     
  6806                           ;color.c: 82:  return tmp;
  6807   002DDC  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  6808   002DE0  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6809   002DE4  0012               	return		;funcret
  6810   002DE6                     __end_of_color_read_Clear:
  6811                           	callstack 0
  6812                           
  6813 ;; *************** function _color_read_Blue *****************
  6814 ;; Defined at:
  6815 ;;		line 57 in file "color.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;		None
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;  tmp             2   13[COMRAM] unsigned int 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  2    8[COMRAM] unsigned int 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0, cstack
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6831 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6832 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6833 ;;Total ram usage:        7 bytes
  6834 ;; Hardware stack levels used: 1
  6835 ;; Hardware stack levels required when called: 6
  6836 ;; This function calls:
  6837 ;;		_I2C_2_Master_Read
  6838 ;;		_I2C_2_Master_RepStart
  6839 ;;		_I2C_2_Master_Start
  6840 ;;		_I2C_2_Master_Stop
  6841 ;;		_I2C_2_Master_Write
  6842 ;; This function is called by:
  6843 ;;		_collect_avg_readings
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text36
  6848   002DE6                     __ptext36:
  6849                           	callstack 0
  6850   002DE6                     _color_read_Blue:
  6851                           	callstack 23
  6852   002DE6                     
  6853                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6854   002DE6  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  6855                           
  6856                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6857   002DEA  0E52               	movlw	82
  6858   002DEC  EC8F  F018         	call	_I2C_2_Master_Write
  6859                           
  6860                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6861   002DF0  0EBA               	movlw	186
  6862   002DF2  EC8F  F018         	call	_I2C_2_Master_Write
  6863                           
  6864                           ;color.c: 63:  I2C_2_Master_RepStart();
  6865   002DF6  EC9B  F018         	call	_I2C_2_Master_RepStart	;wreg free
  6866                           
  6867                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6868   002DFA  0E53               	movlw	83
  6869   002DFC  EC8F  F018         	call	_I2C_2_Master_Write
  6870                           
  6871                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  6872   002E00  0E01               	movlw	1
  6873   002E02  EC3D  F017         	call	_I2C_2_Master_Read
  6874   002E06  6E0B               	movwf	??_color_read_Blue^0,c
  6875   002E08  500B               	movf	??_color_read_Blue^0,w,c
  6876   002E0A  6E0E               	movwf	color_read_Blue@tmp^0,c
  6877   002E0C  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  6878                           
  6879                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6880   002E0E  0E00               	movlw	0
  6881   002E10  EC3D  F017         	call	_I2C_2_Master_Read
  6882   002E14  6E0B               	movwf	??_color_read_Blue^0,c
  6883   002E16  500B               	movf	??_color_read_Blue^0,w,c
  6884   002E18  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  6885   002E1A  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  6886   002E1C  500E               	movf	color_read_Blue@tmp^0,w,c
  6887   002E1E  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  6888   002E20  6E0E               	movwf	color_read_Blue@tmp^0,c
  6889   002E22  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  6890   002E24  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  6891   002E26  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  6892                           
  6893                           ;color.c: 67:  I2C_2_Master_Stop();
  6894   002E28  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  6895   002E2C                     
  6896                           ;color.c: 68:  return tmp;
  6897   002E2C  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  6898   002E30  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6899   002E34  0012               	return		;funcret
  6900   002E36                     __end_of_color_read_Blue:
  6901                           	callstack 0
  6902                           
  6903 ;; *************** function _I2C_2_Master_RepStart *****************
  6904 ;; Defined at:
  6905 ;;		line 33 in file "i2c.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6923 ;;Total ram usage:        0 bytes
  6924 ;; Hardware stack levels used: 1
  6925 ;; Hardware stack levels required when called: 5
  6926 ;; This function calls:
  6927 ;;		_I2C_2_Master_Idle
  6928 ;; This function is called by:
  6929 ;;		_color_read_Red
  6930 ;;		_color_read_Green
  6931 ;;		_color_read_Blue
  6932 ;;		_color_read_Clear
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           	psect	text37
  6937   003136                     __ptext37:
  6938                           	callstack 0
  6939   003136                     _I2C_2_Master_RepStart:
  6940                           	callstack 24
  6941   003136                     
  6942                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6943   003136  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  6944   00313A                     
  6945                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6946   00313A  010E               	movlb	14	; () banked
  6947   00313C  83DA               	bsf	218,1,b	;volatile
  6948   00313E                     
  6949                           ; BSR set to: 14
  6950   00313E  0012               	return		;funcret
  6951   003140                     __end_of_I2C_2_Master_RepStart:
  6952                           	callstack 0
  6953                           
  6954 ;; *************** function _I2C_2_Master_Read *****************
  6955 ;; Defined at:
  6956 ;;		line 51 in file "i2c.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  ack             1    wreg     unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  ack             1    6[COMRAM] unsigned char 
  6961 ;;  tmp             1    7[COMRAM] unsigned char 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      unsigned char 
  6964 ;; Registers used:
  6965 ;;		wreg, status,2, status,0, cstack
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6975 ;;Total ram usage:        3 bytes
  6976 ;; Hardware stack levels used: 1
  6977 ;; Hardware stack levels required when called: 5
  6978 ;; This function calls:
  6979 ;;		_I2C_2_Master_Idle
  6980 ;; This function is called by:
  6981 ;;		_color_read_Red
  6982 ;;		_color_read_Green
  6983 ;;		_color_read_Blue
  6984 ;;		_color_read_Clear
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text38
  6989   002E7A                     __ptext38:
  6990                           	callstack 0
  6991   002E7A                     _I2C_2_Master_Read:
  6992                           	callstack 24
  6993                           
  6994                           ; BSR set to: 14
  6995                           ;incstack = 0
  6996                           ;I2C_2_Master_Read@ack stored from wreg
  6997   002E7A  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  6998   002E7C                     
  6999                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7000   002E7C  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7001   002E80                     
  7002                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7003   002E80  010E               	movlb	14	; () banked
  7004   002E82  87DA               	bsf	218,3,b	;volatile
  7005                           
  7006                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7007   002E84  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7008   002E88                     
  7009                           ;i2c.c: 57:   tmp = SSP2BUF;
  7010   002E88  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7011                           
  7012                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7013   002E8C  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7014   002E90                     
  7015                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7016   002E90  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  7017   002E92  B4D8               	btfsc	status,2,c
  7018   002E94  EF4E  F017         	goto	u1201
  7019   002E98  EF52  F017         	goto	u1200
  7020   002E9C                     u1201:
  7021   002E9C  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7022   002E9E  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  7023   002EA0  EF53  F017         	goto	u1218
  7024   002EA4                     u1200:
  7025   002EA4  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7026   002EA6                     u1218:
  7027   002EA6  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  7028   002EA8  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  7029   002EAA  010E               	movlb	14	; () banked
  7030   002EAC  51DA               	movf	218,w,b	;volatile
  7031   002EAE  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7032   002EB0  0BDF               	andlw	-33
  7033   002EB2  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7034   002EB4  6FDA               	movwf	218,b	;volatile
  7035   002EB6                     
  7036                           ; BSR set to: 14
  7037                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7038   002EB6  89DA               	bsf	218,4,b	;volatile
  7039   002EB8                     
  7040                           ; BSR set to: 14
  7041                           ;i2c.c: 61:   return tmp;
  7042   002EB8  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  7043   002EBA                     
  7044                           ; BSR set to: 14
  7045   002EBA  0012               	return		;funcret
  7046   002EBC                     __end_of_I2C_2_Master_Read:
  7047                           	callstack 0
  7048                           
  7049 ;; *************** function _LEDSon_init *****************
  7050 ;; Defined at:
  7051 ;;		line 18 in file "LEDsOn.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		None
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used: 1
  7071 ;; Hardware stack levels required when called: 4
  7072 ;; This function calls:
  7073 ;;		Nothing
  7074 ;; This function is called by:
  7075 ;;		_main
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text39
  7080   003068                     __ptext39:
  7081                           	callstack 0
  7082   003068                     _LEDSon_init:
  7083                           	callstack 26
  7084   003068                     
  7085                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7086   003068  9288               	bcf	136,1,c	;volatile
  7087                           
  7088                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7089   00306A  9088               	bcf	136,0,c	;volatile
  7090                           
  7091                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7092   00306C  9884               	bcf	132,4,c	;volatile
  7093                           
  7094                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7095   00306E  9684               	bcf	132,3,c	;volatile
  7096                           
  7097                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7098   003070  9086               	bcf	134,0,c	;volatile
  7099                           
  7100                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7101   003072  9287               	bcf	135,1,c	;volatile
  7102                           
  7103                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7104   003074  9E86               	bcf	134,7,c	;volatile
  7105                           
  7106                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7107   003076  9881               	bcf	129,4,c	;volatile
  7108                           
  7109                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7110   003078  8E7E               	bsf	126,7,c	;volatile
  7111                           
  7112                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7113   00307A  827F               	bsf	127,1,c	;volatile
  7114                           
  7115                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7116   00307C  8879               	bsf	121,4,c	;volatile
  7117                           
  7118                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7119   00307E  987C               	bcf	124,4,c	;volatile
  7120                           
  7121                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7122   003080  9280               	bcf	128,1,c	;volatile
  7123                           
  7124                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7125   003082  907E               	bcf	126,0,c	;volatile
  7126                           
  7127                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7128   003084  9080               	bcf	128,0,c	;volatile
  7129                           
  7130                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7131   003086  967C               	bcf	124,3,c	;volatile
  7132   003088  0012               	return		;funcret
  7133   00308A                     __end_of_LEDSon_init:
  7134                           	callstack 0
  7135                           
  7136 ;; *************** function _Interrupts_init *****************
  7137 ;; Defined at:
  7138 ;;		line 7 in file "interrupts.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7156 ;;Total ram usage:        0 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 8
  7159 ;; This function calls:
  7160 ;;		_enable_color_interrupt
  7161 ;;		_set_interrupt_threshold
  7162 ;; This function is called by:
  7163 ;;		_main
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text40
  7168   002EFC                     __ptext40:
  7169                           	callstack 0
  7170   002EFC                     _Interrupts_init:
  7171                           	callstack 22
  7172   002EFC                     
  7173                           ;interrupts.c: 9:     enable_color_interrupt();
  7174   002EFC  EC87  F018         	call	_enable_color_interrupt	;wreg free
  7175                           
  7176                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  7177   002F00  0E00               	movlw	0
  7178   002F02  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  7179   002F04  0E01               	movlw	1
  7180   002F06  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  7181   002F08  0E07               	movlw	7
  7182   002F0A  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  7183   002F0C  0ED0               	movlw	208
  7184   002F0E  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  7185   002F10  0E00               	movlw	0
  7186   002F12  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  7187   002F14  0E04               	movlw	4
  7188   002F16  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  7189   002F18  ECF4  F015         	call	_set_interrupt_threshold	;wreg free
  7190   002F1C                     
  7191                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  7192   002F1C  9282               	bcf	130,1,c	;volatile
  7193   002F1E                     
  7194                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  7195   002F1E  010E               	movlb	14	; () banked
  7196   002F20  939A               	bcf	154,1,b	;volatile
  7197   002F22                     
  7198                           ; BSR set to: 14
  7199                           ;interrupts.c: 14:     INT1PPS=0x09;
  7200   002F22  0E09               	movlw	9
  7201   002F24  010D               	movlb	13	; () banked
  7202   002F26  6FF1               	movwf	241,b	;volatile
  7203   002F28                     
  7204                           ; BSR set to: 13
  7205                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  7206   002F28  010E               	movlb	14	; () banked
  7207   002F2A  8329               	bsf	41,1,b	;volatile
  7208   002F2C                     
  7209                           ; BSR set to: 14
  7210                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  7211   002F2C  831F               	bsf	31,1,b	;volatile
  7212   002F2E                     
  7213                           ; BSR set to: 14
  7214                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  7215   002F2E  92F2               	bcf	242,1,c	;volatile
  7216   002F30                     
  7217                           ; BSR set to: 14
  7218                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  7219   002F30  8CF2               	bsf	242,6,c	;volatile
  7220   002F32                     
  7221                           ; BSR set to: 14
  7222                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  7223   002F32  8AF2               	bsf	242,5,c	;volatile
  7224   002F34                     
  7225                           ; BSR set to: 14
  7226                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7227   002F34  8CF2               	bsf	242,6,c	;volatile
  7228   002F36                     
  7229                           ; BSR set to: 14
  7230                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7231   002F36  8EF2               	bsf	242,7,c	;volatile
  7232   002F38                     
  7233                           ; BSR set to: 14
  7234   002F38  0012               	return		;funcret
  7235   002F3A                     __end_of_Interrupts_init:
  7236                           	callstack 0
  7237                           
  7238 ;; *************** function _set_interrupt_threshold *****************
  7239 ;; Defined at:
  7240 ;;		line 43 in file "interrupts.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;  AILT            2    8[COMRAM] unsigned int 
  7243 ;;  AIHT            2   10[COMRAM] unsigned int 
  7244 ;;  persistence     2   12[COMRAM] unsigned int 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7256 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7259 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7260 ;;Total ram usage:        8 bytes
  7261 ;; Hardware stack levels used: 1
  7262 ;; Hardware stack levels required when called: 7
  7263 ;; This function calls:
  7264 ;;		_color_writetoaddr
  7265 ;; This function is called by:
  7266 ;;		_Interrupts_init
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text41
  7271   002BE8                     __ptext41:
  7272                           	callstack 0
  7273   002BE8                     _set_interrupt_threshold:
  7274                           	callstack 22
  7275   002BE8                     
  7276                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  7277   002BE8  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  7278   002BEC  0E0C               	movlw	12
  7279   002BEE  EC55  F018         	call	_color_writetoaddr
  7280                           
  7281                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  7282   002BF2  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  7283   002BF4  6E07               	movwf	color_writetoaddr@value^0,c
  7284   002BF6  0E05               	movlw	5
  7285   002BF8  EC55  F018         	call	_color_writetoaddr
  7286   002BFC                     
  7287                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  7288   002BFC  0E00               	movlw	0
  7289   002BFE  6E0F               	movwf	_set_interrupt_threshold$2066^0,c
  7290   002C00  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  7291   002C02  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  7292   002C04  B4D8               	btfsc	status,2,c
  7293   002C06  EF07  F016         	goto	u1461
  7294   002C0A  EF09  F016         	goto	u1460
  7295   002C0E                     u1461:
  7296   002C0E  EF0B  F016         	goto	l3044
  7297   002C12                     u1460:
  7298   002C12  0E01               	movlw	1
  7299   002C14  6E0F               	movwf	_set_interrupt_threshold$2066^0,c
  7300   002C16                     l3044:
  7301   002C16  C00F  F007         	movff	_set_interrupt_threshold$2066,color_writetoaddr@value
  7302   002C1A  0E04               	movlw	4
  7303   002C1C  EC55  F018         	call	_color_writetoaddr
  7304   002C20                     
  7305                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  7306   002C20  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7307   002C22  6E07               	movwf	color_writetoaddr@value^0,c
  7308   002C24  0E07               	movlw	7
  7309   002C26  EC55  F018         	call	_color_writetoaddr
  7310                           
  7311                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  7312   002C2A  0E00               	movlw	0
  7313   002C2C  6E10               	movwf	_set_interrupt_threshold$2067^0,c
  7314   002C2E  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  7315   002C30  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7316   002C32  B4D8               	btfsc	status,2,c
  7317   002C34  EF1E  F016         	goto	u1471
  7318   002C38  EF20  F016         	goto	u1470
  7319   002C3C                     u1471:
  7320   002C3C  EF22  F016         	goto	l3052
  7321   002C40                     u1470:
  7322   002C40  0E01               	movlw	1
  7323   002C42  6E10               	movwf	_set_interrupt_threshold$2067^0,c
  7324   002C44                     l3052:
  7325   002C44  C010  F007         	movff	_set_interrupt_threshold$2067,color_writetoaddr@value
  7326   002C48  0E06               	movlw	6
  7327   002C4A  EC55  F018         	call	_color_writetoaddr
  7328   002C4E  0012               	return		;funcret
  7329   002C50                     __end_of_set_interrupt_threshold:
  7330                           	callstack 0
  7331                           
  7332 ;; *************** function _enable_color_interrupt *****************
  7333 ;; Defined at:
  7334 ;;		line 38 in file "interrupts.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2, status,0, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7352 ;;Total ram usage:        0 bytes
  7353 ;; Hardware stack levels used: 1
  7354 ;; Hardware stack levels required when called: 7
  7355 ;; This function calls:
  7356 ;;		_clear_interrupt_flag
  7357 ;;		_color_writetoaddr
  7358 ;; This function is called by:
  7359 ;;		_Interrupts_init
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text42
  7364   00310E                     __ptext42:
  7365                           	callstack 0
  7366   00310E                     _enable_color_interrupt:
  7367                           	callstack 22
  7368   00310E                     
  7369                           ;interrupts.c: 39:     clear_interrupt_flag();
  7370   00310E  EC71  F018         	call	_clear_interrupt_flag	;wreg free
  7371                           
  7372                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  7373   003112  0E13               	movlw	19
  7374   003114  6E07               	movwf	color_writetoaddr@value^0,c
  7375   003116  0E00               	movlw	0
  7376   003118  EC55  F018         	call	_color_writetoaddr
  7377   00311C  0012               	return		;funcret
  7378   00311E                     __end_of_enable_color_interrupt:
  7379                           	callstack 0
  7380                           
  7381 ;; *************** function _color_writetoaddr *****************
  7382 ;; Defined at:
  7383 ;;		line 21 in file "color.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  address         1    wreg     unsigned char 
  7386 ;;  value           1    6[COMRAM] unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  address         1    7[COMRAM] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      void 
  7391 ;; Registers used:
  7392 ;;		wreg, status,2, status,0, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7398 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7402 ;;Total ram usage:        2 bytes
  7403 ;; Hardware stack levels used: 1
  7404 ;; Hardware stack levels required when called: 6
  7405 ;; This function calls:
  7406 ;;		_I2C_2_Master_Start
  7407 ;;		_I2C_2_Master_Stop
  7408 ;;		_I2C_2_Master_Write
  7409 ;; This function is called by:
  7410 ;;		_color_click_init
  7411 ;;		_enable_color_interrupt
  7412 ;;		_set_interrupt_threshold
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text43
  7417   0030AA                     __ptext43:
  7418                           	callstack 0
  7419   0030AA                     _color_writetoaddr:
  7420                           	callstack 23
  7421                           
  7422                           ;incstack = 0
  7423                           ;color_writetoaddr@address stored from wreg
  7424   0030AA  6E08               	movwf	color_writetoaddr@address^0,c
  7425   0030AC                     
  7426                           ;color.c: 22:     I2C_2_Master_Start();
  7427   0030AC  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  7428                           
  7429                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  7430   0030B0  0E52               	movlw	82
  7431   0030B2  EC8F  F018         	call	_I2C_2_Master_Write
  7432                           
  7433                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  7434   0030B6  5008               	movf	color_writetoaddr@address^0,w,c
  7435   0030B8  0980               	iorlw	128
  7436   0030BA  EC8F  F018         	call	_I2C_2_Master_Write
  7437                           
  7438                           ;color.c: 25:     I2C_2_Master_Write(value);
  7439   0030BE  5007               	movf	color_writetoaddr@value^0,w,c
  7440   0030C0  EC8F  F018         	call	_I2C_2_Master_Write
  7441                           
  7442                           ;color.c: 26:     I2C_2_Master_Stop();
  7443   0030C4  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  7444   0030C8  0012               	return		;funcret
  7445   0030CA                     __end_of_color_writetoaddr:
  7446                           	callstack 0
  7447                           
  7448 ;; *************** function _clear_interrupt_flag *****************
  7449 ;; Defined at:
  7450 ;;		line 52 in file "interrupts.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;		None
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;		None
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;Total ram usage:        0 bytes
  7469 ;; Hardware stack levels used: 1
  7470 ;; Hardware stack levels required when called: 6
  7471 ;; This function calls:
  7472 ;;		_I2C_2_Master_Start
  7473 ;;		_I2C_2_Master_Stop
  7474 ;;		_I2C_2_Master_Write
  7475 ;; This function is called by:
  7476 ;;		_enable_color_interrupt
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text44
  7481   0030E2                     __ptext44:
  7482                           	callstack 0
  7483   0030E2                     _clear_interrupt_flag:
  7484                           	callstack 22
  7485   0030E2                     
  7486                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7487   0030E2  ECA5  F018         	call	_I2C_2_Master_Start	;wreg free
  7488                           
  7489                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7490   0030E6  0E52               	movlw	82
  7491   0030E8  EC8F  F018         	call	_I2C_2_Master_Write
  7492                           
  7493                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7494   0030EC  0EE6               	movlw	230
  7495   0030EE  EC8F  F018         	call	_I2C_2_Master_Write
  7496                           
  7497                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7498   0030F2  ECA0  F018         	call	_I2C_2_Master_Stop	;wreg free
  7499   0030F6  0012               	return		;funcret
  7500   0030F8                     __end_of_clear_interrupt_flag:
  7501                           	callstack 0
  7502                           
  7503 ;; *************** function _I2C_2_Master_Write *****************
  7504 ;; Defined at:
  7505 ;;		line 45 in file "i2c.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  data_byte       1    wreg     unsigned char 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;  data_byte       1    5[COMRAM] unsigned char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      void 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7522 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7523 ;;Total ram usage:        1 bytes
  7524 ;; Hardware stack levels used: 1
  7525 ;; Hardware stack levels required when called: 5
  7526 ;; This function calls:
  7527 ;;		_I2C_2_Master_Idle
  7528 ;; This function is called by:
  7529 ;;		_color_writetoaddr
  7530 ;;		_color_read_Red
  7531 ;;		_color_read_Green
  7532 ;;		_color_read_Blue
  7533 ;;		_color_read_Clear
  7534 ;;		_clear_interrupt_flag
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text45
  7539   00311E                     __ptext45:
  7540                           	callstack 0
  7541   00311E                     _I2C_2_Master_Write:
  7542                           	callstack 24
  7543                           
  7544                           ;incstack = 0
  7545                           ;I2C_2_Master_Write@data_byte stored from wreg
  7546   00311E  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  7547   003120                     
  7548                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7549   003120  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7550   003124                     
  7551                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7552   003124  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7553   003128  0012               	return		;funcret
  7554   00312A                     __end_of_I2C_2_Master_Write:
  7555                           	callstack 0
  7556                           
  7557 ;; *************** function _I2C_2_Master_Stop *****************
  7558 ;; Defined at:
  7559 ;;		line 39 in file "i2c.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7577 ;;Total ram usage:        0 bytes
  7578 ;; Hardware stack levels used: 1
  7579 ;; Hardware stack levels required when called: 5
  7580 ;; This function calls:
  7581 ;;		_I2C_2_Master_Idle
  7582 ;; This function is called by:
  7583 ;;		_color_writetoaddr
  7584 ;;		_color_read_Red
  7585 ;;		_color_read_Green
  7586 ;;		_color_read_Blue
  7587 ;;		_color_read_Clear
  7588 ;;		_clear_interrupt_flag
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text46
  7593   003140                     __ptext46:
  7594                           	callstack 0
  7595   003140                     _I2C_2_Master_Stop:
  7596                           	callstack 24
  7597   003140                     
  7598                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7599   003140  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7600   003144                     
  7601                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7602   003144  010E               	movlb	14	; () banked
  7603   003146  85DA               	bsf	218,2,b	;volatile
  7604   003148                     
  7605                           ; BSR set to: 14
  7606   003148  0012               	return		;funcret
  7607   00314A                     __end_of_I2C_2_Master_Stop:
  7608                           	callstack 0
  7609                           
  7610 ;; *************** function _I2C_2_Master_Start *****************
  7611 ;; Defined at:
  7612 ;;		line 27 in file "i2c.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;Total ram usage:        0 bytes
  7631 ;; Hardware stack levels used: 1
  7632 ;; Hardware stack levels required when called: 5
  7633 ;; This function calls:
  7634 ;;		_I2C_2_Master_Idle
  7635 ;; This function is called by:
  7636 ;;		_color_writetoaddr
  7637 ;;		_color_read_Red
  7638 ;;		_color_read_Green
  7639 ;;		_color_read_Blue
  7640 ;;		_color_read_Clear
  7641 ;;		_clear_interrupt_flag
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text47
  7646   00314A                     __ptext47:
  7647                           	callstack 0
  7648   00314A                     _I2C_2_Master_Start:
  7649                           	callstack 24
  7650   00314A                     
  7651                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7652   00314A  ECF9  F017         	call	_I2C_2_Master_Idle	;wreg free
  7653   00314E                     
  7654                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7655   00314E  010E               	movlb	14	; () banked
  7656   003150  81DA               	bsf	218,0,b	;volatile
  7657   003152                     
  7658                           ; BSR set to: 14
  7659   003152  0012               	return		;funcret
  7660   003154                     __end_of_I2C_2_Master_Start:
  7661                           	callstack 0
  7662                           
  7663 ;; *************** function _I2C_2_Master_Idle *****************
  7664 ;; Defined at:
  7665 ;;		line 22 in file "i2c.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      void 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7683 ;;Total ram usage:        1 bytes
  7684 ;; Hardware stack levels used: 1
  7685 ;; Hardware stack levels required when called: 4
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_I2C_2_Master_Start
  7690 ;;		_I2C_2_Master_RepStart
  7691 ;;		_I2C_2_Master_Stop
  7692 ;;		_I2C_2_Master_Write
  7693 ;;		_I2C_2_Master_Read
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text48
  7698   002FF2                     __ptext48:
  7699                           	callstack 0
  7700   002FF2                     _I2C_2_Master_Idle:
  7701                           	callstack 24
  7702   002FF2                     l145:
  7703   002FF2  010E               	movlb	14	; () banked
  7704   002FF4  B5D8               	btfsc	216,2,b	;volatile
  7705   002FF6  EFFF  F017         	goto	u1051
  7706   002FFA  EF01  F018         	goto	u1050
  7707   002FFE                     u1051:
  7708   002FFE  EFF9  F017         	goto	l145
  7709   003002                     u1050:
  7710   003002                     
  7711                           ; BSR set to: 14
  7712   003002  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7713   003006  0E1F               	movlw	31
  7714   003008  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7715   00300A  A4D8               	btfss	status,2,c
  7716   00300C  EF0A  F018         	goto	u1061
  7717   003010  EF0C  F018         	goto	u1060
  7718   003014                     u1061:
  7719   003014  EFF9  F017         	goto	l145
  7720   003018                     u1060:
  7721   003018                     
  7722                           ; BSR set to: 14
  7723   003018  0012               	return		;funcret
  7724   00301A                     __end_of_I2C_2_Master_Idle:
  7725                           	callstack 0
  7726                           
  7727 ;; *************** function _HighISR *****************
  7728 ;; Defined at:
  7729 ;;		line 23 in file "interrupts.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;		None
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;		None
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      void 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;Total ram usage:        2 bytes
  7748 ;; Hardware stack levels used: 1
  7749 ;; Hardware stack levels required when called: 3
  7750 ;; This function calls:
  7751 ;;		i2_clear_interrupt_flag
  7752 ;; This function is called by:
  7753 ;;		Interrupt level 2
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           	psect	intcode
  7758   000008                     __pintcode:
  7759                           	callstack 0
  7760   000008                     _HighISR:
  7761                           	callstack 18
  7762                           
  7763                           ; BSR set to: 14
  7764                           ;incstack = 0
  7765   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7766   00000A                     
  7767                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7768   00000A  010E               	movlb	14	; () banked
  7769   00000C  A333               	btfss	51,1,b	;volatile
  7770   00000E  EF0B  F000         	goto	i2u161_41
  7771   000012  EF0D  F000         	goto	i2u161_40
  7772   000016                     i2u161_41:
  7773   000016  EF39  F000         	goto	i2l502
  7774   00001A                     i2u161_40:
  7775   00001A                     
  7776                           ; BSR set to: 14
  7777   00001A  0100               	movlb	0	; () banked
  7778   00001C  51F4               	movf	_response_in_progress& (0+255),w,b
  7779   00001E  11F5               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7780   000020  A4D8               	btfss	status,2,c
  7781   000022  EF15  F000         	goto	i2u162_41
  7782   000026  EF17  F000         	goto	i2u162_40
  7783   00002A                     i2u162_41:
  7784   00002A  EF39  F000         	goto	i2l502
  7785   00002E                     i2u162_40:
  7786   00002E                     
  7787                           ; BSR set to: 0
  7788                           ;interrupts.c: 27:         card_detected = 1;
  7789   00002E  0E00               	movlw	0
  7790   000030  6FF3               	movwf	(_card_detected+1)& (0+255),b
  7791   000032  0E01               	movlw	1
  7792   000034  6FF2               	movwf	_card_detected& (0+255),b
  7793   000036                     
  7794                           ; BSR set to: 0
  7795                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7796   000036  8E7C               	bsf	124,7,c	;volatile
  7797   000038                     
  7798                           ; BSR set to: 0
  7799                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7800   000038  0E05               	movlw	5
  7801   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7802   00003C  0E0F               	movlw	15
  7803   00003E  6E03               	movwf	??_HighISR^0,c
  7804   000040  0EF1               	movlw	241
  7805   000042                     i2u237_47:
  7806   000042  2EE8               	decfsz	wreg,f,c
  7807   000044  D7FE               	bra	i2u237_47
  7808   000046  2E03               	decfsz	??_HighISR^0,f,c
  7809   000048  D7FC               	bra	i2u237_47
  7810   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7811   00004C  D7FA               	bra	i2u237_47
  7812   00004E  F000               	nop	
  7813   000050                     
  7814                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7815   000050  9E7C               	bcf	124,7,c	;volatile
  7816   000052                     
  7817                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7818   000052  0E05               	movlw	5
  7819   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7820   000056  0E0F               	movlw	15
  7821   000058  6E03               	movwf	??_HighISR^0,c
  7822   00005A  0EF1               	movlw	241
  7823   00005C                     i2u238_47:
  7824   00005C  2EE8               	decfsz	wreg,f,c
  7825   00005E  D7FE               	bra	i2u238_47
  7826   000060  2E03               	decfsz	??_HighISR^0,f,c
  7827   000062  D7FC               	bra	i2u238_47
  7828   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7829   000066  D7FA               	bra	i2u238_47
  7830   000068  F000               	nop	
  7831   00006A                     
  7832                           ;interrupts.c: 32:         clear_interrupt_flag();
  7833   00006A  EC7C  F018         	call	i2_clear_interrupt_flag	;wreg free
  7834   00006E                     
  7835                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7836   00006E  010E               	movlb	14	; () banked
  7837   000070  9333               	bcf	51,1,b	;volatile
  7838   000072                     i2l502:
  7839   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7840   000074  0011               	retfie		f
  7841   000076                     __end_of_HighISR:
  7842                           	callstack 0
  7843                           
  7844 ;; *************** function i2_clear_interrupt_flag *****************
  7845 ;; Defined at:
  7846 ;;		line 52 in file "interrupts.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      void 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7864 ;;Total ram usage:        0 bytes
  7865 ;; Hardware stack levels used: 1
  7866 ;; Hardware stack levels required when called: 2
  7867 ;; This function calls:
  7868 ;;		i2_I2C_2_Master_Start
  7869 ;;		i2_I2C_2_Master_Stop
  7870 ;;		i2_I2C_2_Master_Write
  7871 ;; This function is called by:
  7872 ;;		_HighISR
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text50
  7877   0030F8                     __ptext50:
  7878                           	callstack 0
  7879   0030F8                     i2_clear_interrupt_flag:
  7880                           	callstack 18
  7881   0030F8                     
  7882                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7883   0030F8  ECAF  F018         	call	i2_I2C_2_Master_Start	;wreg free
  7884                           
  7885                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7886   0030FC  0E52               	movlw	82
  7887   0030FE  EC95  F018         	call	i2_I2C_2_Master_Write
  7888                           
  7889                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7890   003102  0EE6               	movlw	230
  7891   003104  EC95  F018         	call	i2_I2C_2_Master_Write
  7892                           
  7893                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7894   003108  ECAA  F018         	call	i2_I2C_2_Master_Stop	;wreg free
  7895   00310C  0012               	return		;funcret
  7896   00310E                     __end_ofi2_clear_interrupt_flag:
  7897                           	callstack 0
  7898                           
  7899 ;; *************** function i2_I2C_2_Master_Write *****************
  7900 ;; Defined at:
  7901 ;;		line 45 in file "i2c.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  data_byte       1    wreg     unsigned char 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  data_byte       1    1[COMRAM] unsigned char 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, status,2, status,0, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7918 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7919 ;;Total ram usage:        1 bytes
  7920 ;; Hardware stack levels used: 1
  7921 ;; Hardware stack levels required when called: 1
  7922 ;; This function calls:
  7923 ;;		i2_I2C_2_Master_Idle
  7924 ;; This function is called by:
  7925 ;;		i2_clear_interrupt_flag
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text51
  7930   00312A                     __ptext51:
  7931                           	callstack 0
  7932   00312A                     i2_I2C_2_Master_Write:
  7933                           	callstack 18
  7934                           
  7935                           ;incstack = 0
  7936                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7937   00312A  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7938   00312C                     
  7939                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7940   00312C  EC0D  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  7941   003130                     
  7942                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7943   003130  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7944   003134  0012               	return		;funcret
  7945   003136                     __end_ofi2_I2C_2_Master_Write:
  7946                           	callstack 0
  7947                           
  7948 ;; *************** function i2_I2C_2_Master_Stop *****************
  7949 ;; Defined at:
  7950 ;;		line 39 in file "i2c.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;		None
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      void 
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, status,0, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7968 ;;Total ram usage:        0 bytes
  7969 ;; Hardware stack levels used: 1
  7970 ;; Hardware stack levels required when called: 1
  7971 ;; This function calls:
  7972 ;;		i2_I2C_2_Master_Idle
  7973 ;; This function is called by:
  7974 ;;		i2_clear_interrupt_flag
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text52
  7979   003154                     __ptext52:
  7980                           	callstack 0
  7981   003154                     i2_I2C_2_Master_Stop:
  7982                           	callstack 18
  7983   003154                     
  7984                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7985   003154  EC0D  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  7986   003158                     
  7987                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7988   003158  010E               	movlb	14	; () banked
  7989   00315A  85DA               	bsf	218,2,b	;volatile
  7990   00315C                     
  7991                           ; BSR set to: 14
  7992   00315C  0012               	return		;funcret
  7993   00315E                     __end_ofi2_I2C_2_Master_Stop:
  7994                           	callstack 0
  7995                           
  7996 ;; *************** function i2_I2C_2_Master_Start *****************
  7997 ;; Defined at:
  7998 ;;		line 27 in file "i2c.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      void 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used: 1
  8018 ;; Hardware stack levels required when called: 1
  8019 ;; This function calls:
  8020 ;;		i2_I2C_2_Master_Idle
  8021 ;; This function is called by:
  8022 ;;		i2_clear_interrupt_flag
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text53
  8027   00315E                     __ptext53:
  8028                           	callstack 0
  8029   00315E                     i2_I2C_2_Master_Start:
  8030                           	callstack 18
  8031   00315E                     
  8032                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8033   00315E  EC0D  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8034   003162                     
  8035                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8036   003162  010E               	movlb	14	; () banked
  8037   003164  81DA               	bsf	218,0,b	;volatile
  8038   003166                     
  8039                           ; BSR set to: 14
  8040   003166  0012               	return		;funcret
  8041   003168                     __end_ofi2_I2C_2_Master_Start:
  8042                           	callstack 0
  8043                           
  8044 ;; *************** function i2_I2C_2_Master_Idle *****************
  8045 ;; Defined at:
  8046 ;;		line 22 in file "i2c.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;Total ram usage:        1 bytes
  8065 ;; Hardware stack levels used: 1
  8066 ;; This function calls:
  8067 ;;		Nothing
  8068 ;; This function is called by:
  8069 ;;		i2_I2C_2_Master_Start
  8070 ;;		i2_I2C_2_Master_Stop
  8071 ;;		i2_I2C_2_Master_Write
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text54
  8076   00301A                     __ptext54:
  8077                           	callstack 0
  8078   00301A                     i2_I2C_2_Master_Idle:
  8079                           	callstack 18
  8080   00301A                     i2l145:
  8081   00301A  010E               	movlb	14	; () banked
  8082   00301C  B5D8               	btfsc	216,2,b	;volatile
  8083   00301E  EF13  F018         	goto	i2u134_41
  8084   003022  EF15  F018         	goto	i2u134_40
  8085   003026                     i2u134_41:
  8086   003026  EF0D  F018         	goto	i2l145
  8087   00302A                     i2u134_40:
  8088   00302A                     
  8089                           ; BSR set to: 14
  8090   00302A  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8091   00302E  0E1F               	movlw	31
  8092   003030  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8093   003032  A4D8               	btfss	status,2,c
  8094   003034  EF1E  F018         	goto	i2u135_41
  8095   003038  EF20  F018         	goto	i2u135_40
  8096   00303C                     i2u135_41:
  8097   00303C  EF0D  F018         	goto	i2l145
  8098   003040                     i2u135_40:
  8099   003040                     
  8100                           ; BSR set to: 14
  8101   003040  0012               	return		;funcret
  8102   003042                     __end_ofi2_I2C_2_Master_Idle:
  8103                           	callstack 0
  8104                           
  8105                           	psect	rparam
  8106   000000                     
  8107                           	psect	temp
  8108   00005B                     btemp:
  8109                           	callstack 0
  8110   00005B                     	ds	1
  8111   000000                     int$flags	set	btemp
  8112   000000                     wtemp8	set	btemp+1
  8113   000000                     ttemp5	set	btemp+1
  8114   000000                     ttemp6	set	btemp+4
  8115   000000                     ttemp7	set	btemp+8
  8116                           
  8117                           	psect	idloc
  8118                           
  8119                           ;Config register IDLOC0 @ 0x200000
  8120                           ;	unspecified, using default values
  8121   200000                     	org	2097152
  8122   200000  0FFF               	dw	4095
  8123                           
  8124                           ;Config register IDLOC1 @ 0x200002
  8125                           ;	unspecified, using default values
  8126   200002                     	org	2097154
  8127   200002  0FFF               	dw	4095
  8128                           
  8129                           ;Config register IDLOC2 @ 0x200004
  8130                           ;	unspecified, using default values
  8131   200004                     	org	2097156
  8132   200004  0FFF               	dw	4095
  8133                           
  8134                           ;Config register IDLOC3 @ 0x200006
  8135                           ;	unspecified, using default values
  8136   200006                     	org	2097158
  8137   200006  0FFF               	dw	4095
  8138                           
  8139                           ;Config register IDLOC4 @ 0x200008
  8140                           ;	unspecified, using default values
  8141   200008                     	org	2097160
  8142   200008  0FFF               	dw	4095
  8143                           
  8144                           ;Config register IDLOC5 @ 0x20000A
  8145                           ;	unspecified, using default values
  8146   20000A                     	org	2097162
  8147   20000A  0FFF               	dw	4095
  8148                           
  8149                           ;Config register IDLOC6 @ 0x20000C
  8150                           ;	unspecified, using default values
  8151   20000C                     	org	2097164
  8152   20000C  0FFF               	dw	4095
  8153                           
  8154                           ;Config register IDLOC7 @ 0x20000E
  8155                           ;	unspecified, using default values
  8156   20000E                     	org	2097166
  8157   20000E  0FFF               	dw	4095
  8158                           
  8159                           	psect	config
  8160                           
  8161                           ;Config register CONFIG1L @ 0x300000
  8162                           ;	External Oscillator mode Selection bits
  8163                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8164                           ;	Power-up default value for COSC bits
  8165                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8166   300000                     	org	3145728
  8167   300000  AA                 	db	170
  8168                           
  8169                           ;Config register CONFIG1H @ 0x300001
  8170                           ;	unspecified, using default values
  8171                           ;	Clock Out Enable bit
  8172                           ;	CLKOUTEN = 0x1, unprogrammed default
  8173                           ;	Clock Switch Enable bit
  8174                           ;	CSWEN = 0x1, unprogrammed default
  8175                           ;	Fail-Safe Clock Monitor Enable bit
  8176                           ;	FCMEN = 0x1, unprogrammed default
  8177   300001                     	org	3145729
  8178   300001  FF                 	db	255
  8179                           
  8180                           ;Config register CONFIG2L @ 0x300002
  8181                           ;	unspecified, using default values
  8182                           ;	Master Clear Enable bit
  8183                           ;	MCLRE = 0x1, unprogrammed default
  8184                           ;	Power-up Timer Enable bit
  8185                           ;	PWRTE = 0x1, unprogrammed default
  8186                           ;	Low-power BOR enable bit
  8187                           ;	LPBOREN = 0x1, unprogrammed default
  8188                           ;	Brown-out Reset Enable bits
  8189                           ;	BOREN = 0x3, unprogrammed default
  8190   300002                     	org	3145730
  8191   300002  FF                 	db	255
  8192                           
  8193                           ;Config register CONFIG2H @ 0x300003
  8194                           ;	unspecified, using default values
  8195                           ;	Brown Out Reset Voltage selection bits
  8196                           ;	BORV = 0x3, unprogrammed default
  8197                           ;	ZCD Disable bit
  8198                           ;	ZCD = 0x1, unprogrammed default
  8199                           ;	PPSLOCK bit One-Way Set Enable bit
  8200                           ;	PPS1WAY = 0x1, unprogrammed default
  8201                           ;	Stack Full/Underflow Reset Enable bit
  8202                           ;	STVREN = 0x1, unprogrammed default
  8203                           ;	Debugger Enable bit
  8204                           ;	DEBUG = 0x1, unprogrammed default
  8205                           ;	Extended Instruction Set Enable bit
  8206                           ;	XINST = 0x1, unprogrammed default
  8207   300003                     	org	3145731
  8208   300003  FF                 	db	255
  8209                           
  8210                           ;Config register CONFIG3L @ 0x300004
  8211                           ;	WDT Period Select bits
  8212                           ;	WDTCPS = 0x1F, unprogrammed default
  8213                           ;	WDT operating mode
  8214                           ;	WDTE = OFF, WDT Disabled
  8215   300004                     	org	3145732
  8216   300004  9F                 	db	159
  8217                           
  8218                           ;Config register CONFIG3H @ 0x300005
  8219                           ;	unspecified, using default values
  8220                           ;	WDT Window Select bits
  8221                           ;	WDTCWS = 0x7, unprogrammed default
  8222                           ;	WDT input clock selector
  8223                           ;	WDTCCS = 0x7, unprogrammed default
  8224   300005                     	org	3145733
  8225   300005  FF                 	db	255
  8226                           
  8227                           ;Config register CONFIG4L @ 0x300006
  8228                           ;	unspecified, using default values
  8229                           ;	Write Protection Block 0
  8230                           ;	WRT0 = 0x1, unprogrammed default
  8231                           ;	Write Protection Block 1
  8232                           ;	WRT1 = 0x1, unprogrammed default
  8233                           ;	Write Protection Block 2
  8234                           ;	WRT2 = 0x1, unprogrammed default
  8235                           ;	Write Protection Block 3
  8236                           ;	WRT3 = 0x1, unprogrammed default
  8237                           ;	Write Protection Block 3
  8238                           ;	WRT4 = 0x1, unprogrammed default
  8239                           ;	Write Protection Block 3
  8240                           ;	WRT5 = 0x1, unprogrammed default
  8241                           ;	Write Protection Block 3
  8242                           ;	WRT6 = 0x1, unprogrammed default
  8243                           ;	Write Protection Block 3
  8244                           ;	WRT7 = 0x1, unprogrammed default
  8245   300006                     	org	3145734
  8246   300006  FF                 	db	255
  8247                           
  8248                           ;Config register CONFIG4H @ 0x300007
  8249                           ;	unspecified, using default values
  8250                           ;	Configuration Register Write Protection bit
  8251                           ;	WRTC = 0x1, unprogrammed default
  8252                           ;	Boot Block Write Protection bit
  8253                           ;	WRTB = 0x1, unprogrammed default
  8254                           ;	Data EEPROM Write Protection bit
  8255                           ;	WRTD = 0x1, unprogrammed default
  8256                           ;	Scanner Enable bit
  8257                           ;	SCANE = 0x1, unprogrammed default
  8258                           ;	Low Voltage Programming Enable bit
  8259                           ;	LVP = 0x1, unprogrammed default
  8260   300007                     	org	3145735
  8261   300007  FF                 	db	255
  8262                           
  8263                           ;Config register CONFIG5L @ 0x300008
  8264                           ;	unspecified, using default values
  8265                           ;	UserNVM Program Memory Code Protection bit
  8266                           ;	CP = 0x1, unprogrammed default
  8267                           ;	DataNVM Memory Code Protection bit
  8268                           ;	CPD = 0x1, unprogrammed default
  8269   300008                     	org	3145736
  8270   300008  FF                 	db	255
  8271                           
  8272                           ;Config register CONFIG5H @ 0x300009
  8273                           ;	unspecified, using default values
  8274   300009                     	org	3145737
  8275   300009  FF                 	db	255
  8276                           
  8277                           ;Config register CONFIG6L @ 0x30000A
  8278                           ;	unspecified, using default values
  8279                           ;	Table Read Protection Block 0
  8280                           ;	EBTR0 = 0x1, unprogrammed default
  8281                           ;	Table Read Protection Block 1
  8282                           ;	EBTR1 = 0x1, unprogrammed default
  8283                           ;	Table Read Protection Block 2
  8284                           ;	EBTR2 = 0x1, unprogrammed default
  8285                           ;	Table Read Protection Block 3
  8286                           ;	EBTR3 = 0x1, unprogrammed default
  8287                           ;	Table Read Protection Block 4
  8288                           ;	EBTR4 = 0x1, unprogrammed default
  8289                           ;	Table Read Protection Block 5
  8290                           ;	EBTR5 = 0x1, unprogrammed default
  8291                           ;	Table Read Protection Block 6
  8292                           ;	EBTR6 = 0x1, unprogrammed default
  8293                           ;	Table Read Protection Block 7
  8294                           ;	EBTR7 = 0x1, unprogrammed default
  8295   30000A                     	org	3145738
  8296   30000A  FF                 	db	255
  8297                           
  8298                           ;Config register CONFIG6H @ 0x30000B
  8299                           ;	unspecified, using default values
  8300                           ;	Boot Block Table Read Protection bit
  8301                           ;	EBTRB = 0x1, unprogrammed default
  8302   30000B                     	org	3145739
  8303   30000B  FF                 	db	255
  8304                           tosu	equ	0xFFF
  8305                           tosh	equ	0xFFE
  8306                           tosl	equ	0xFFD
  8307                           stkptr	equ	0xFFC
  8308                           pclatu	equ	0xFFB
  8309                           pclath	equ	0xFFA
  8310                           pcl	equ	0xFF9
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           indf0	equ	0xFEF
  8318                           postinc0	equ	0xFEE
  8319                           postdec0	equ	0xFED
  8320                           preinc0	equ	0xFEC
  8321                           plusw0	equ	0xFEB
  8322                           fsr0h	equ	0xFEA
  8323                           fsr0l	equ	0xFE9
  8324                           wreg	equ	0xFE8
  8325                           indf1	equ	0xFE7
  8326                           postinc1	equ	0xFE6
  8327                           postdec1	equ	0xFE5
  8328                           preinc1	equ	0xFE4
  8329                           plusw1	equ	0xFE3
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           bsr	equ	0xFE0
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           postdec2	equ	0xFDD
  8336                           preinc2	equ	0xFDC
  8337                           plusw2	equ	0xFDB
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    142     151
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2557$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_4(CODE[10]), STR_3(CODE[36]), STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2508$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2508$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               374   374      0   81619
                                            140 BANK0      2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    3507
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    9385
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   39161
                                             33 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    8216
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    3958
                                             26 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   22564
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    4875
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4267
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    6457
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    4723
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2981
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     963
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     750
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     494
                                              4 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     302
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1642
                                             15 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Clear
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      64        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Dec 12 22:25:54 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2CF6  
                       _color_read_Blue 2DE6                                      l22 30C8  
                                    l31 2E34                                      l25 2D44  
                                    l34 2DE4                                      l19 2F6C  
                                    l28 2D94                                      l86 1FF2  
                                    l95 2A74                                      l79 29EE  
                   ___wmul@multiplicand 0007                        _color_read_Clear 2D96  
                      _color_read_Green 2D46                       ??_Interrupts_init 0011  
                                   l100 284E                                     l110 28DA  
                                   l105 27A0                                     l115 2966  
                                   l142 2FF0                                     l151 3152  
                                   l160 3128                                     l240 12B4  
                                   l145 2FF2                                     l321 251C  
                                   l241 13D0                                     l154 313E  
                                   l242 13CE                                     l163 2EBA  
                                   l148 3018                                     l244 13FC  
                                   l157 3148                                     l237 13C8  
                                   l334 1CFE                                     l350 2AF8  
                                   l238 12A6                                     l407 30A8  
                                   l239 12A4                                     l512 2C4E  
                                   l344 2628                                     l416 30CC  
                                   l505 311C                                     l425 2F9C  
                                   l274 3088                                     l362 112C  
                                   l515 30F6                                     l363 114C  
                                   l339 1806                                     l419 30E0  
                                   l364 116C                                     l365 11EE  
                                   l518 3066                                     l632 1E86  
                                   l368 2402                                     l645 2156  
                                   l496 2F38     normalise_readings@normalised_values 0027  
                      ??_motor_response 0024                                     _abs 2EBC  
                                   _pad 2AFA                   __end_of_card_response 2404  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1016 2BE6  
                                  l1009 2BDE                                    l1203 2CF4  
                                  ?_abs 0017                                    l3000 10FC  
                                  l1225 2B1C                                    l3002 1114  
                                  l1234 1894                                    l3020 1166  
                                  l1236 189C                                    l3100 2870  
                                  l1229 2B72                                    l1237 18E2  
                                  l1261 2CA2                                    l3022 116E  
                                  l3014 112E                                    l3110 289C  
                                  l1255 22B4                                    l3040 2C00  
                                  l3024 1186                                    l3016 1146  
                                  l1248 1A84                                    l3112 28A8  
                                  l3120 308A                                    l1193 2EF2  
                                  l1273 26F2                                    l1281 2E78  
                                  l3034 310E                                    l3050 2C40  
                                  l3042 2C12                                    l3018 114E  
                                  l3114 28B6                                    l3106 2878  
                                  l3130 30A4                                    l3122 3094  
                                  l3052 2C44                                    l3044 2C16  
                                  l3036 2BE8                                    l3140 2F22  
                                  l3028 118C                                    l1196 2EFA  
                                  l1284 3168                                    l3116 28BE  
                                  l3108 2890                                    l3132 30A6  
                                  l3124 3096                                    l3046 2C20  
                                  l3038 2BFC                                    l3150 2F32  
                                  l3142 2F28                                    l3134 2EFC  
                                  l3118 3068                                    l3070 2F48  
                                  l3126 3098                                    l3048 2C2E  
                                  l3152 2F34                                    l3144 2F2C  
                                  l3136 2F1C                                    l3400 2EBC  
                                  l3072 2F58                                    l3080 299A  
                                  l3128 30A2                                    l3154 2F36  
                                  l3146 2F2E                                    l3138 2F1E  
                                  l3402 2ED6                                    l3410 1D32  
                                  l3074 2F62                                    l3066 2F3A  
                                  l3090 29D6                                    l3082 29BE  
                                  l2460 2FF2                                    l2620 30AC  
                                  l3148 2F30                                    l2700 2758  
                                  l3420 1D74                                    l3412 1D36  
                                  l3404 1D00                                    l3500 1828  
                                  l3068 2F3E                                    l3092 29E0  
                                  l3084 29C8                                    l3076 2968  
                                  l2462 3002                                    l2550 3124  
                                  l2630 2D8C                                    l2622 2CF6  
                                  l2470 2B74                                    l2710 28FC  
                                  l2702 2764                                    l3430 1DCE  
                                  l3422 1D92                                    l3414 1D44  
                                  l3406 1D04                                    l3510 18A4  
                                  l3502 183C                                    l3094 29E2  
                                  l3086 29CA                                    l3078 2970  
                                  l2544 314A                                    l2552 3140  
                                  l2560 2E7C                                    l2640 2D96  
                                  l2624 2D3C                                    l2800 1BB6  
                                  l2480 2BAC                                    l2472 2B7C  
                                  l2464 3042                                    l2720 2928  
                                  l2704 276C                                    l3432 1DFC  
                                  l3424 1D9A                                    l3440 1E36  
                                  l3416 1D64                                    l3408 1D12  
                                  l3520 18DE                                    l3512 18B4  
                                  l3504 184C                                    l3096 29EC  
                                  l3088 29D4                                    l2546 314E  
                                  l2554 3144                                    l2570 2EB8  
                                  l2562 2E80                                    l2634 2DE6  
                                  l2642 2DDC                                    l2810 1C06  
                                  l2802 1BD2                                    l2490 2BD8  
                                  l2482 2BB2                                    l2474 2B8E  
                                  l2466 305E                                    l2722 2934  
                                  l2650 2A00                                    l2706 2788  
                                  l3610 17F4                                    l3602 1524  
                                  l2730 30DC                                    l3442 1E46  
                                  l3434 1E1C                                    l3426 1DAE  
                                  l3418 1D68                                    l3450 1FF8  
                                  l3530 1982                                    l3522 18EA  
                                  l3514 18BA                                    l3506 186C  
                                  l3098 2850                                    l2548 3120  
                                  l2732 30E2                                    l2564 2E88  
                                  l2556 3136                                    l2636 2E2C  
                                  l2628 2D46                                    l2820 1C7E  
                                  l2812 1C1A                                    l2804 1BFE  
                                  l2900 2AF6                                    l2484 2BC8  
                                  l2476 2B96                                    l2580 1F0C  
                                  l2724 2942                                    l2716 2904  
                                  l2708 28DC                                    l2660 2A50  
                                  l2652 2A0E                                    l3612 17F6  
                                  l3444 1E66                                    l3436 1E1E  
                                  l3428 1DBC                                    l3460 2058  
                                  l3452 2006                                    l3380 263C  
                                  l3540 1A3E                                    l3532 1988  
                                  l3524 18F4                                    l3516 18CA  
                                  l3508 1888                                    l3620 240E  
                                  l3700 1264                                    l2566 2E90  
                                  l2558 313A                                    l2830 1CB2  
                                  l2814 1C32                                    l2486 2BD0  
                                  l2478 2B9E                                    l2582 1F10  
                                  l2574 1E88                                    l2726 294A  
                                  l2718 291C                                    l2662 2A5C  
                                  l2654 2A1A                                    l2646 29F0  
                                  l2910 0EAC                                    l3438 1E30  
                                  l3470 20CE                                    l3462 2076  
                                  l3454 2026                                    l3382 264E  
                                  l3542 1A4E                                    l3526 18FA  
                                  l3534 19EC                                    l3518 18D6  
                                  l3550 2158                                    l3622 2422  
                                  l3614 2404                                    l2750 2FD2  
                                  l3710 12CE                                    l3702 129A  
                                  l2568 2EB6                                    l2832 1CB6  
                                  l2816 1C36                                    l2760 1A86  
                                  l2488 2BD2                                    l2584 1F52  
                                  l2576 1EA4                                    l2656 2A36  
                                  l2648 29F4                                    l2680 2812  
                                  l2672 27CA                                    l2664 27A2  
                                  l2920 0F14                                    l2912 0EC0  
                                  l2904 0E7C                                    l3608 1528  
                                  l2728 30CC                                    l3480 2136  
                                  l3472 20EE                                    l3464 207E  
                                  l3456 202A                                    l3448 1FF4  
                                  l3384 2658                                    l3392 2E36  
                                  l3544 1A54                                    l3536 1A06  
                                  l3528 197C                                    l3560 21B0  
                                  l3552 2180                                    l3640 249A  
                                  l3632 244C                                    l3624 2428  
                                  l2752 2FD8                                    l3720 136C  
                                  l3712 12F2                                    l2834 1CD2  
                                  l2826 1C86                                    l2818 1C52  
                                  l2770 1AE2                                    l2586 1F6E  
                                  l2578 1EF8                                    l2658 2A42  
                                  l2682 281A                                    l2674 27E2  
                                  l2666 27C2                                    l2930 0F6C  
                                  l2922 0F2C                                    l2914 0ED4  
                                  l2906 0E80                                    l2850 2F72  
                                  l3474 2100                                    l3466 2092  
                                  l3458 2038                                    l3386 2676  
                                  l3378 262A                                    l3394 2E42  
                                  l3490 2B28                                    l3546 1A64  
                                  l3538 1A24                                    l3570 2276  
                                  l3562 21D0                                    l3554 218E  
                                  l3650 22B6                                    l3642 24C6  
                                  l3634 2460                                    l3626 2444  
                                  l2754 2FDA                                    l3730 140A  
                                  l3722 13A8                                    l3714 130C  
                                  l2828 1C9A                                    l2780 1B1A  
                                  l2772 1AFE                                    l2588 1FB2  
                                  l2684 2836                                    l2676 27FA  
                                  l2940 0FD4                                    l2932 0F80  
                                  l2924 0F40                                    l2916 0EE8  
                                  l2908 0E94                                    l2852 2F80  
                                  l3468 20A0                                    l3476 2106  
                                  l3388 26AC                                    l3396 2E54  
                                  l3492 2B3C                                    l3484 2AFA  
                                  l3564 21F0                                    l3556 219C  
                                  l3580 2C50                                    l3660 23B4  
                                  l3652 22DA                                    l3644 24E2  
                                  l3636 2478                                    l2756 2FDC  
                                  l2748 2FC8                                    l3740 1470  
                                  l3732 141E                                    l3724 13B4  
                                  l3716 132C                                    l3708 12B6  
                                  l2782 1B32                                    l2766 1A8E  
                                  l2678 2806                                    l2694 271C  
                                  l2686 26F4                                    l2950 0FEC  
                                  l2934 0F98                                    l2926 0F54  
                                  l2918 0F00                                    l2854 2F84  
                                  l3478 2116                                    l3398 2E58  
                                  l3494 2B40                                    l3486 2B08  
                                  l3566 2246                                    l3558 21A0  
                                  l3574 2288                                    l3582 2C5C  
                                  l3590 2CA4                                    l3662 23C4  
                                  l3654 2330                                    l3646 24EE  
                                  l3638 247E                                    l2758 2FDE  
                                  l3742 149E                                    l3734 142A  
                                  l3726 13B8                                    l3718 134C  
                                  l3670 11F4                                    ?_pad 0015  
                                  l2784 1B36                                    l2768 1ADE  
                                  l2880 2A76                                    l2696 2734  
                                  l2688 2714                                    l2952 1000  
                                  l2936 0FAC                                    l2848 2F6E  
                                  l3496 2B5E                                    l3488 2B14  
                                  l3584 2C78                                    l3592 2CB6  
                                  l3664 23DE                                    l3656 233C  
                                  l3648 22B6                                    l3744 14B2  
                                  l3736 1442                                    l3728 13DE  
                                  l3680 1208                                    l3672 11F8  
                                  l2794 1B86                                    l2786 1B52  
                                  l2778 1B06                                    l2890 2A92  
                                  l2882 2A7A                                    l2874 2522  
                                  l2698 274C                                    l2970 1074  
                                  l2954 1018                                    l2938 0FC0  
                                  l3498 1808                                    l3586 2C98  
                                  l3594 2CBE                                    l3666 23EA  
                                  l3658 2398                                    l3746 14C4  
                                  l3738 1456                                    l3690 1230  
                                  l3682 120A                                    l3674 11FC  
                                  l2796 1B9A                                    l2788 1B7E  
                                  l2892 2AC0                                    l2884 2A8E  
                                  l2876 2616                                    l2868 251E  
                                  l3772 11A0                                    l2972 10A0  
                                  l3596 2CC6                                    l3748 150A  
                                  l3692 1242                                    l3684 120E  
                                  l3676 1200                                    l3668 11F0  
                                  l2798 1BB2                                    l2894 2AE0  
                                  l2878 2618                                    l2982 10B8  
                                  l2966 1048                                    l3598 2CE2  
                                  l3694 124A                                    l3686 1220  
                                  l3678 1204                                    l2896 2AE4  
                                  l2984 10CC                                    l2968 105C  
                                  l3696 1252                                    l3688 1228  
                                  l2898 2AE6                                    l3698 1258  
                                  l2998 10E8                                    STR_1 0E01  
                                  STR_2 0E57                                    STR_3 0E33  
                                  STR_4 0E6E                                    u1200 2EA4  
                                  u2000 249A                                    u1201 2E9C  
                                  u2001 2496                                    u1050 3002  
                                  u2010 12B4                                    u1051 2FFE  
                                  u2011 12B0                                    u1060 3018  
                                  u1220 1EA4                                    u1300 2788  
                                  u2020 13C8                            ?_LEDSon_init 0001  
                                  u1061 3014                                    u1221 1EA0  
                                  u1301 2784                                    u2021 13C4  
                                  u1070 2B8E                                    u1230 1F6E  
                                  u1310 2966                                    u2030 13DE  
                                  u1071 2B8A                                    u1231 1F6A  
                                  u1311 2962                                    u2031 13DA  
                                  u1400 1CD2                                    u1080 2BAC  
                                  u1320 30DC                                    u2040 140A  
                                  u1401 1CCE                                    u1081 2BA8  
                                  u1321 30D8                                    u2041 1406  
                                  u1218 2EA6                                    u1090 2BC8  
                                  u1410 2F9C                                    u2050 1442  
                                  u1091 2BC4                                    u1411 2F98  
                                  u2107 1512                                    u2051 143E  
                                  u2117 28AE                                    u1430 2628  
                                  u1270 2A32                                    u1431 2624  
                                  u1271 2A2E                                    u2207 1092  
                                  u2127 2F4E                                    u1360 1AFE  
                                  u1440 2AC0                                    u1280 2A74  
                          _BAUD4CONbits 000EE9                                    u1361 1AFA  
                                  u1441 2ABC                                    u1281 2A70  
                                  u2217 10D6                                    u2137 246C  
                                  u1370 1B52                                    u1450 2AF6  
                                  u1290 2836                                    u1371 1B4E  
                                  u1451 2AF2                                    u2307 2A06  
                                  u1291 2832                                    u2227 1106  
                                  u2147 0E9E                                    u2067 12C2  
                                  u1460 2C12                                    u1380 1BD2  
                                  u1700 1D44                                    u1461 2C0E  
                                  u1381 1BCE                                    u2317 2A48  
                                  u2237 1138                                    u2157 0F1E  
                                  u1701 1D40                                    u2077 1462  
                                  u1470 2C40                                    u1390 1C52  
                                  u1630 263C                                    u1471 2C3C  
                                  u1391 1C4E                                    u2327 293A  
                                  u2247 1158                                    u2167 0F8A  
                                  u1711 1D6E                                    u1631 2638  
                                  u2087 1490                                    u1720 1D92  
                                  u1800 20CE                                    u1640 264E  
                                  u1480 28DA                                    u2337 1B24  
                                  u2257 1178                                    u2177 100A  
                                  u1721 1D8E                                    u1801 20CA  
                                  u1641 264A                                    u1481 28D6  
                                  u2097 14BA                                    u1730 1DBC  
                                  u1810 2116                                    u1650 2676  
                                  _T2PR 000FBC                                    u2347 1BA4  
                                  u2267 273E                                    u2187 1036  
                                  u1731 1DB8                                    u1811 2112  
                                  u1651 2672                                    u1740 1DFC  
                                  u1660 26AC                                    u1820 2B08  
                                  u1900 1A06                                    u2357 1C24  
                                  u2277 2792                                    u2197 1066  
                                  u1741 1DF8                                    u1661 26A8  
                                  u1821 2B04                                    u1901 1A02  
                                  u1750 1E46                                    u1670 2E78  
                                  u1830 2B5E                                    u1910 1A24  
                                  u2367 1CA4                                    u2287 27EC  
                                  u1751 1E42                                    u1671 2E74  
                                  u1831 2B5A                                    u1911 1A20  
                                  u1680 2ED6                                    u1760 2006  
                                  u1920 1A3E                                    u1840 1838  
                                  u2297 2840                                    u1681 2ED2  
                                  u1761 2002                                    u1921 1A3A  
                                  u1841 1832                                    u1690 1D12  
                                  u1770 2038                                    u1930 1A4E  
                                  u1850 183A                                    u1691 1D0E  
                                  u1771 2034                                    u1931 1A4A  
                                  u1780 2076                                    u1860 184C  
                                  u1940 2180                                    u1781 2072  
                                  u1861 1848                                    u1941 217C  
                                  u1790 20A0                                    u1870 1888  
                                  u1950 21D0                                    u1791 209C  
                                  u1871 1884                                    u1951 21CC  
                                  u1880 18B4                                    u1960 21F0  
                                  u1881 18B0                                    u1961 21EC  
                                  u1890 18CA                                    u1970 2C98  
                                  u1891 18C6                                    u1971 2C94  
                                  u1980 1806                                    u1981 1802  
                                  u1990 2444                                    u1991 2440  
            normalise_readings@red_read 001F                                    abs@a 0017  
                                  _dbuf 0250                                    _main 11F0  
                                  _dtoa 1808                                    _prec 00F0  
                                  pad@i 001C                                    pad@p 0019  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  pad@w 001E                                    fsr2l 000FD9  
                                  btemp 005B                                    _stop 29F0  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0076        clear_read_calibration@clear_read 0083  
                       card_response@mL 008D                         card_response@mR 008F  
                __end_of_color_read_Red 2D46                         __end_of_HighISR 0076  
                  _response_in_progress 00F4             normalise_readings@blue_read 0023  
                          ___param_bank 000000                                   ??_abs 0019  
                                 ??_pad 001B                             _turnRight45 26F4  
                       __end_of___aodiv 1E88                                   ?_main 0001  
                                 ?_dtoa 0020                         __end_of___aomod 2158  
                                 ?_stop 0018                         __end_of___lwdiv 2BE8  
                                 i2l151 3166                                   i2l160 3134  
                                 i2l145 301A                                   i2l148 3040  
                                 i2l157 315C                                   i2l502 0072  
                                 i2l515 310C                            vfpfcnvrt@fmt 0045  
               ?_enable_color_interrupt 0001                            main@red_read 01E1  
               __end_of_sendCharSerial4 30E2              __end_of_I2C_2_Master_Start 3154  
            __end_of_I2C_2_Master_Write 312A                                   _flags 00F6  
                                 _fputc 262A                                   _fputs 2E36  
                                 pad@fp 0015          determine_card@master_closeness 0005  
               ??_make_master_closeness 000B                                   _width 00EE  
                                 _putch 3168                                   main@i 01E7  
                                 dtoa@d 0022                                   dtoa@i 0041  
                                 dtoa@n 0038                                   dtoa@p 0034  
                                 dtoa@s 0040                                   dtoa@w 0036  
                   normalise_readings@i 0033                                   tablat 000FF5  
                                 ttemp5 005C                                   ttemp6 005F  
                                 ttemp7 0063                                   status 000FD8  
                                 wtemp8 005C                         __end_of_sprintf 2CF6  
        card_response@normalised_values 0091                        card_response@buf 0081  
               __end_of_color_read_Blue 2E36                   _I2C_2_Master_RepStart 3136  
                       ?_color_read_Red 0009                         __initialization 2F9E  
                          __end_of_main 1524                            __end_of_dtoa 1A86  
                          __end_of_stop 2A76          __end_of_enable_color_interrupt 311E  
                                ??_main 00EC                                  ??_dtoa 002A  
                                ??_stop 001C                           __activetblptr 000003  
                         main@blue_read 01E5                    main@clear_read_check 01DF  
             clear_read_calibration@buf 0081                            ?_setMotorPWM 0012  
                                ?_fputc 0005                                  ?_fputs 000E  
                                _CCPR1H 000FAA                                  _CCPR2H 000FA6  
                                _CCPR3H 000F25                                  _CCPR4H 000F21  
          collect_avg_readings@red_read 0012                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i2l3060 3158  
                                i2l3054 315E                                  i2l3062 312C  
                                i2l3056 3162                                  i2l3064 3130  
                                i2l3058 3154                                  i2l3218 30F8  
                                i2l3340 000A                                  i2l3350 0050  
                                i2l3342 001A                                  i2l3352 0052  
                                i2l3344 002E                                  i2l3354 006A  
                                i2l3346 0036                                  i2l3356 006E  
                                i2l3348 0038                                  i2l2744 301A  
                                i2l2746 302A                                  _RG6PPS 000E88  
                             ??_HighISR 0003                __end_of_color_click_init 2F6E  
                make_master_closeness@i 0029                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                            _CCPTMRS0bits 000FAD  
                          vfprintf@cfmt 0055                               ??___aodiv 0015  
                             ??___aomod 0015                                  ___wmul 3042  
                    _normalise_readings 1524                               ??___lwdiv 000F  
                                clear_0 2FA4                                  clear_1 2FB0  
                                isa$std 000001                                  pad@buf 0017  
                                dtoa@fp 0020            __end_of_clear_interrupt_flag 30F8  
                   ?_normalise_readings 001B                                  fputc@c 0005  
                                fputs@c 0012                                  fputs@i 0013  
                                fputs@s 000E                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                        ?_sendCharSerial4 0001  
                                putch@c 0001                        __end_of_vfprintf 2CA4  
                                stop@mL 0018                                  stop@mR 001A  
                     ??_initDCmotorsPWM 0005                               ??_sprintf 0057  
               ?i2_clear_interrupt_flag 0001                       card_response@card 00EB  
                            __accesstop 0060                 __end_of__initialization 2FBE  
              __end_of_color_read_Clear 2DE6                         fullSpeedAhead@i 001D  
              __end_of_color_read_Green 2D96                  ?_I2C_2_Master_RepStart 0001  
                  ??_normalise_readings 0029                           ___rparam_used 000001  
                      ?_color_read_Blue 0009                         _Interrupts_init 2EFC  
          __end_of_collect_avg_readings 1D00                          __pcstackCOMRAM 0001  
                _clear_read_calibration 2404                        _reverseFullSpeed 28DC  
            collect_avg_readings@i_1600 001E              collect_avg_readings@i_1601 0020  
            collect_avg_readings@i_1602 0022              collect_avg_readings@i_1599 001C  
               _set_interrupt_threshold 2BE8                           __end_of_fputc 26F4  
                         __end_of_fputs 2E7A                           __end_of_putch 316A  
                        main@clear_read 01E8          __end_ofi2_clear_interrupt_flag 310E  
                               ??_fputc 0009                                 ??_fputs 0012  
                               ??_putch 0005                              __pbssBANK0 00EE  
                            __pbssBANK2 0200                       _color_writetoaddr 30AA  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0020  
                      motor_response@mR 0022                      ?_color_writetoaddr 0007  
                               ?___wmul 0005                      motor_response@card 0026  
                          ?_turnRight45 0018                     ??_color_writetoaddr 0008  
                               _INT1PPS 000DF1                          main@green_read 01E3  
                               _SP4BRGH 000EE6                                 _SP4BRGL 000EE5  
                               _SSP2ADD 000ED6                                 _SSP2BUF 000ED5  
           set_interrupt_threshold@AIHT 000B             set_interrupt_threshold@AILT 0009  
               __end_of_Interrupts_init 2F3A          collect_avg_readings@clear_read 0010  
                color_writetoaddr@value 0007                        ??_color_read_Red 000B  
         __end_of_make_master_closeness 262A                                 _HighISR 0008  
        determine_card@predicted_colour 000D               __end_of_color_writetoaddr 30CA  
                  _clear_interrupt_flag 30E2                      _I2C_2_Master_Start 314A  
                            _initUSART4 308A                     i2_I2C_2_Master_Idle 301A  
                    _I2C_2_Master_Write 311E                                 __Hparam 0000  
                   i2_I2C_2_Master_Stop 3154                                 __Lparam 0000  
                     color_read_Red@tmp 000E               ??_set_interrupt_threshold 000F  
make_master_closeness@normalised_values 0007                 sendStringSerial4@string 0006  
                     reverseFullSpeed@i 001D                                 ___aodiv 1D00  
                               ___aomod 1FF4                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 2B74                     ?_I2C_2_Master_Write 0001  
                             ?_vfprintf 0060                            __psmallconst 0E00  
                          turnLeft45@mL 0018                            turnLeft45@mR 001A  
                               __pcinit 2F9E                                 __ramtop 0E00  
                               __ptext0 11F0                                 __ptext1 308A  
                               __ptext2 2968                                 __ptext3 2850  
                               __ptext4 2F3A                                 __ptext5 2FC8  
                               __ptext6 2404                                 __ptext7 22B6  
                               __ptext8 2CA4                                 __ptext9 2C50  
                  ?i2_I2C_2_Master_Idle 0001                               _T2CONbits 000FBD  
                  ?i2_I2C_2_Master_Stop 0001                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 1A86  
                               main@buf 0100                                 _sprintf 2CA4  
                  ??_I2C_2_Master_Start 0006                    ??_I2C_2_Master_Write 0006  
                  end_of_initialization 2FBE          collect_avg_readings@green_read 0014  
                 normalise_readings@buf 001B                                 fputc@fp 0007  
                               fputs@fp 0010                       ?_color_click_init 0001  
                          turnRight45@i 001E                   ?_clear_interrupt_flag 0001  
                    ??_color_click_init 0009                           _card_detected 00F2  
                     __end_of_vfpfcnvrt 22B6                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004B  
                            ??_vfprintf 0055                         _initDCmotorsPWM 2968  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0017  
                 ??i2_I2C_2_Master_Idle 0001                   ??i2_I2C_2_Master_Stop 0002  
     normalise_readings@expected_values 0025         __end_of_set_interrupt_threshold 2C50  
                         _card_response 22B6                               _TRISAbits 000F81  
                    setMotorPWM@posDuty 0016                               _TRISBbits 000F82  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 0010                __end_of_reverseFullSpeed 2968  
                      fullSpeedAhead@mL 0018                        fullSpeedAhead@mR 001A  
                   main@expected_values 0196                color_writetoaddr@address 0008  
               ??_I2C_2_Master_RepStart 0006                        ?_Interrupts_init 0001  
                           _CCP1CONbits 000FAB                       ?_color_read_Clear 0009  
                          _EUSART4RXbuf 023C                            _EUSART4TXbuf 0200  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0009  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
               ?_clear_read_calibration 0081                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0005                              main@motorL 01EA  
                            main@motorR 01F3                      ??_color_read_Clear 000B  
                    ??_color_read_Green 000B                              _turnLeft45 27A2  
                        _fullSpeedAhead 2850                             vfpfcnvrt@ap 0047  
                           vfpfcnvrt@cp 0053                             vfpfcnvrt@fp 0043  
                        __end_of___wmul 3068                         determine_card@i 000E  
                        ?_card_response 0081                     color_read_Clear@tmp 000E  
                   start_initialization 2F9E                             __end_of_abs 2EFC  
                           __end_of_pad 2B74                           _TxBufWriteCnt 0058  
                         ??_LEDSon_init 0005                  ??_clear_interrupt_flag 0007  
        __end_of_clear_read_calibration 251E                     color_read_Green@tmp 000E  
               __end_of_initDCmotorsPWM 29F0                             vfprintf@fmt 0062  
                __end_of_fullSpeedAhead 28DC                ??_enable_color_interrupt 0009  
                              ??___wmul 0009           i2I2C_2_Master_Write@data_byte 0002  
                        _determine_card 2A76            __end_ofi2_I2C_2_Master_Start 3168  
          __end_ofi2_I2C_2_Master_Write 3136                             __pbssCOMRAM 0057  
                ??_collect_avg_readings 0018                           __pcstackBANK0 0060  
                         __pcstackBANK1 0100                        ___aodiv@dividend 0005  
               clear_read_calibration@i 008B                          _motor_response 0E7A  
                              ?_HighISR 0001                     __end_of_LEDSon_init 308A  
                      ___lwdiv@dividend 000B                               _dtoa$2585 0032  
                           ?_turnLeft45 0018                         ?_fullSpeedAhead 0018  
                             __pintcode 0008                                ?___aodiv 0005  
                              ?___aomod 0005                        ___aodiv@quotient 0017  
                __end_of_determine_card 2AFA                                ?___lwdiv 000B  
                  I2C_2_Master_Read@ack 0007                         ??_card_response 0057  
                  I2C_2_Master_Read@tmp 0008                             __smallconst 0E00  
                     _I2C_2_Master_Idle 2FF2                       _I2C_2_Master_Init 2FC8  
                     _I2C_2_Master_Read 2E7A                       _I2C_2_Master_Stop 3140  
                          _RxBufReadCnt 0059            normalise_readings@clear_read 001D  
          normalise_readings@difference 0031                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0014                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000F                  __end_of_motor_response 11F0  
                           turnLeft45@i 001E                                ?_sprintf 0066  
          clear_read_calibration@i_1588 008D                       _sendStringSerial4 2F6E  
                   ??_I2C_2_Master_Idle 0005                     ??_I2C_2_Master_Init 0005  
                   ??_I2C_2_Master_Read 0006      set_interrupt_threshold@persistence 000D  
                        ___wmul@product 0009                                _LATAbits 000F79  
                   ??_I2C_2_Master_Stop 0006                                _LATDbits 000F7C  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                                _IPR0bits 000E1F  
                              _PIE0bits 000E29                      ?_sendStringSerial4 0006  
                              _PIE4bits 000E2D                   _make_master_closeness 251E  
                              i2u134_40 302A                                i2u134_41 3026  
                              i2u135_40 3040                                i2u135_41 303C  
                              i2u161_40 001A                                i2u161_41 0016  
                              i2u162_40 002E                                i2u162_41 002A  
                              i2u237_47 0042                                i2u238_47 005C  
                              _PIR0bits 000E33                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0005  
              make_master_closeness@buf 0005                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0008                                _SSP2STAT 000ED8  
                       ?_determine_card 0005                               _vfpfcnvrt 2158  
             __end_of_I2C_2_Master_Idle 301A               __end_of_I2C_2_Master_Init 2FF2  
             __end_of_I2C_2_Master_Read 2EBC                       ___wmul@multiplier 0005  
             __end_of_I2C_2_Master_Stop 314A                ??i2_clear_interrupt_flag 0003  
                          setMotorPWM@m 0012             I2C_2_Master_Write@data_byte 0006  
          normalise_readings@green_read 0021                       ??_color_read_Blue 000B  
                          _TxBufReadCnt 0057                         ?_motor_response 0020  
                     ?_reverseFullSpeed 0018               __end_of_sendStringSerial4 2F9E  
                           _LEDSon_init 3068                      ??_reverseFullSpeed 001C  
         __end_of_I2C_2_Master_RepStart 3140                      color_read_Blue@tmp 000E  
              ?_set_interrupt_threshold 0009                     __end_of_setMotorPWM 1FF4  
                          ??_initUSART4 0005                    i2_I2C_2_Master_Start 315E  
                  i2_I2C_2_Master_Write 312A                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0009  
           __end_ofi2_I2C_2_Master_Idle 3042                      reverseFullSpeed@mL 0018  
                    reverseFullSpeed@mR 001A             __end_ofi2_I2C_2_Master_Stop 315E  
                            ?_vfpfcnvrt 0043                         ___aodiv@divisor 000D  
                       ___aodiv@counter 0015                              _ANSELBbits 000E9A  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0068                         ___lwdiv@divisor 000D  
                    __end_of_initUSART4 30AA                         ___lwdiv@counter 0011  
                              __ptext10 2158                                __ptext11 1808  
                              __ptext20 1524                                __ptext12 2AFA  
                              __ptext21 2EBC                                __ptext13 2E36  
                _enable_color_interrupt 310E                                __ptext30 251E  
                              __ptext22 0E7A                                __ptext14 262A  
                              __ptext31 2A76                                __ptext23 26F4  
                              __ptext15 3168                                __ptext40 2EFC  
                              __ptext32 1A86                                __ptext24 27A2  
                              __ptext16 1FF4                                __ptext41 2BE8  
                              __ptext33 2CF6                                __ptext25 29F0  
                              __ptext17 1D00                                __ptext50 30F8  
                              __ptext42 310E                                __ptext34 2D46  
                              __ptext26 28DC                                __ptext18 2F6E  
                              __ptext51 312A                                __ptext43 30AA  
                              __ptext35 2D96                                __ptext27 1E88  
                              __ptext19 30CA                                __ptext52 3154  
                              __ptext44 30E2                                __ptext36 2DE6  
                              __ptext28 3042                                __ptext53 315E  
                              __ptext45 311E                                __ptext37 3136  
                              __ptext29 2B74                                __ptext54 301A  
                              __ptext46 3140                                __ptext38 2E7A  
                              __ptext47 314A                                __ptext39 3068  
                              __ptext48 2FF2                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA                  ?_make_master_closeness 0005  
                 ?i2_I2C_2_Master_Start 0001                   ?i2_I2C_2_Master_Write 0001  
                              isa$xinst 000000                 card_response@clear_read 0083  
                            _RC4STAbits 000EE7                                int$flags 005B  
                              _vfprintf 2C50                           ??_turnRight45 001C  
                      ___aomod@dividend 0005                   collect_avg_readings@i 001A  
                            _INTCONbits 000FF2            _set_interrupt_threshold$2066 000F  
          _set_interrupt_threshold$2067 0010                             _setMotorPWM 1E88  
         collect_avg_readings@blue_read 0016                           turnRight45@mL 0018  
                         turnRight45@mR 001A                                intlevel2 0000  
                             sprintf@ap 0074              __end_of_normalise_readings 1808  
          card_response@expected_values 008B                        ??_fullSpeedAhead 001C  
               card_response@green_read 0087                            ??_turnLeft45 001C  
        determine_card@current_smallest 000B                         ___aomod@divisor 000D  
                           ??_vfpfcnvrt 0049                         ___aomod@counter 0015  
                card_response@blue_read 0089                        _color_click_init 2F3A  
         card_response@master_closeness 00D9                                sprintf@f 0076  
                              sprintf@s 0066                              _SSP2DATPPS 000E1D  
                            _SSP2CLKPPS 000E1C                     __end_of_turnRight45 27A2  
                    __end_of_turnLeft45 2850                              _TX4STAbits 000EE8  
                          ___aodiv@sign 0016                         _sendCharSerial4 30CA  
                ??i2_I2C_2_Master_Start 0002                  ??i2_I2C_2_Master_Write 0002  
                i2_clear_interrupt_flag 30F8                   card_response@red_read 0085  
                          ___aomod@sign 0016                        ??_determine_card 0007  
                          main@PWMcycle 01DE  
