

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 11:45:22 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71   000000                     
    72                           ; Version 2.35
    73                           ; Generated 05/05/2021 GMT
    74                           ; 
    75                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F67K40 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107   000000                     
   108                           	psect	idataBANK2
   109   003A3E                     __pidataBANK2:
   110                           	callstack 0
   111                           
   112                           ;initializer for main@F14700
   113   003A3E  08                 	db	8
   114   003A3F  00                 	db	0
   115   003A40  00                 	db	0
   116   003A41  00                 	db	0
   117   003A42  00                 	db	0
   118   003A43  00                 	db	0
   119   003A44  00                 	db	0
   120   003A45  00                 	db	0
   121   003A46  00                 	db	0
   122   003A47  00                 	db	0
   123   003A48  00                 	db	0
   124   003A49  00                 	db	0
   125   003A4A  00                 	db	0
   126   003A4B  00                 	db	0
   127   003A4C  00                 	db	0
   128   003A4D  00                 	db	0
   129   003A4E  00                 	db	0
   130   003A4F  00                 	db	0
   131   003A50  00                 	db	0
   132   003A51  00                 	db	0
   133   003A52  00                 	db	0
   134   003A53  00                 	db	0
   135   003A54  00                 	db	0
   136   003A55  00                 	db	0
   137   003A56  00                 	db	0
   138   003A57  00                 	db	0
   139   003A58  00                 	db	0
   140   003A59  00                 	db	0
   141   003A5A  00                 	db	0
   142   003A5B  00                 	db	0
   143   000000                     _TX4REG	set	3812
   144   000000                     _RC4STAbits	set	3815
   145   000000                     _SP4BRGH	set	3814
   146   000000                     _LATGbits	set	3967
   147   000000                     _TRISFbits	set	3974
   148   000000                     _TRISDbits	set	3972
   149   000000                     _TRISGbits	set	3975
   150   000000                     _SSP2CON2bits	set	3802
   151   000000                     _RX4PPS	set	3605
   152   000000                     _SSP2CLKPPS	set	3612
   153   000000                     _SSP2DATPPS	set	3613
   154   000000                     _RC7PPS	set	3689
   155   000000                     _RE2PPS	set	3700
   156   000000                     _TRISCbits	set	3971
   157   000000                     _TRISEbits	set	3973
   158   000000                     _TRISHbits	set	3976
   159   000000                     _PORTFbits	set	3982
   160   000000                     _T2PR	set	4028
   161   000000                     _T2CONbits	set	4029
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _RD5PPS	set	3695
   167   000000                     _ANSELDbits	set	3751
   168   000000                     _SSP2ADD	set	3798
   169   000000                     _SSP2CON1bits	set	3801
   170   000000                     _CCPR4H	set	3873
   171   000000                     _CCPR3H	set	3877
   172   000000                     _TMR0L	set	4051
   173   000000                     _TMR0H	set	4052
   174   000000                     _T0CON0bits	set	4053
   175   000000                     _T0CON1bits	set	4054
   176   000000                     _T2CLKCONbits	set	4031
   177   000000                     _T2HLTbits	set	4030
   178   000000                     _CCP1CONbits	set	4011
   179   000000                     _CCPTMRS0bits	set	4013
   180   000000                     _CCP2CONbits	set	4007
   181   000000                     _LATAbits	set	3961
   182   000000                     _LATDbits	set	3964
   183   000000                     _CCP3CONbits	set	3878
   184   000000                     _CCP4CONbits	set	3874
   185   000000                     _RC4REG	set	3811
   186   000000                     _SP4BRGL	set	3813
   187   000000                     _TX4STAbits	set	3816
   188   000000                     _BAUD4CONbits	set	3817
   189   000000                     _SSP2CON2	set	3802
   190   000000                     _SSP2STAT	set	3800
   191   000000                     _ANSELFbits	set	3764
   192   000000                     _SSP2BUF	set	3797
   193   000000                     _IPR0bits	set	3615
   194   000000                     _PIE4bits	set	3629
   195   000000                     _PIR4bits	set	3639
   196   000000                     _RC0PPS	set	3682
   197   000000                     _TMR0IE	set	29005
   198   000000                     _RD6PPS	set	3696
   199   000000                     _LATFbits	set	3966
   200   000000                     _LATHbits	set	3968
   201   000000                     _TRISAbits	set	3969
   202   000000                     _TMR0IF	set	29085
   203   000000                     _INTCONbits	set	4082
   204                           
   205                           	psect	smallconst
   206   000E00                     __psmallconst:
   207                           	callstack 0
   208   000E00  00                 	db	0
   209   000E01                     STR_1:
   210                           
   211                           ; BSR set to: 14
   212   000E01  0A                 	db	10
   213   000E02  20                 	db	32
   214   000E03  45                 	db	69	;'E'
   215   000E04  58                 	db	88	;'X'
   216   000E05  50                 	db	80	;'P'
   217   000E06  45                 	db	69	;'E'
   218   000E07  43                 	db	67	;'C'
   219   000E08  54                 	db	84	;'T'
   220   000E09  45                 	db	69	;'E'
   221   000E0A  44                 	db	68	;'D'
   222   000E0B  3A                 	db	58	;':'
   223   000E0C  20                 	db	32
   224   000E0D  43                 	db	67	;'C'
   225   000E0E  6C                 	db	108	;'l'
   226   000E0F  65                 	db	101	;'e'
   227   000E10  61                 	db	97	;'a'
   228   000E11  72                 	db	114	;'r'
   229   000E12  20                 	db	32
   230   000E13  25                 	db	37
   231   000E14  64                 	db	100	;'d'
   232   000E15  2C                 	db	44
   233   000E16  52                 	db	82	;'R'
   234   000E17  20                 	db	32
   235   000E18  25                 	db	37
   236   000E19  64                 	db	100	;'d'
   237   000E1A  2C                 	db	44
   238   000E1B  20                 	db	32
   239   000E1C  47                 	db	71	;'G'
   240   000E1D  20                 	db	32
   241   000E1E  25                 	db	37
   242   000E1F  64                 	db	100	;'d'
   243   000E20  2C                 	db	44
   244   000E21  20                 	db	32
   245   000E22  42                 	db	66	;'B'
   246   000E23  20                 	db	32
   247   000E24  25                 	db	37
   248   000E25  64                 	db	100	;'d'
   249   000E26  20                 	db	32
   250   000E27  20                 	db	32
   251   000E28  43                 	db	67	;'C'
   252   000E29  41                 	db	65	;'A'
   253   000E2A  52                 	db	82	;'R'
   254   000E2B  44                 	db	68	;'D'
   255   000E2C  3A                 	db	58	;':'
   256   000E2D  20                 	db	32
   257   000E2E  25                 	db	37
   258   000E2F  64                 	db	100	;'d'
   259   000E30  20                 	db	32
   260   000E31  0A                 	db	10
   261   000E32  00                 	db	0
   262   000E33                     STR_10:
   263                           
   264                           ; BSR set to: 14
   265   000E33  0A                 	db	10
   266   000E34  20                 	db	32
   267   000E35  41                 	db	65	;'A'
   268   000E36  56                 	db	86	;'V'
   269   000E37  47                 	db	71	;'G'
   270   000E38  3A                 	db	58	;':'
   271   000E39  20                 	db	32
   272   000E3A  43                 	db	67	;'C'
   273   000E3B  6C                 	db	108	;'l'
   274   000E3C  65                 	db	101	;'e'
   275   000E3D  61                 	db	97	;'a'
   276   000E3E  72                 	db	114	;'r'
   277   000E3F  20                 	db	32
   278   000E40  25                 	db	37
   279   000E41  64                 	db	100	;'d'
   280   000E42  2C                 	db	44
   281   000E43  20                 	db	32
   282   000E44  52                 	db	82	;'R'
   283   000E45  20                 	db	32
   284   000E46  25                 	db	37
   285   000E47  64                 	db	100	;'d'
   286   000E48  2C                 	db	44
   287   000E49  20                 	db	32
   288   000E4A  47                 	db	71	;'G'
   289   000E4B  20                 	db	32
   290   000E4C  25                 	db	37
   291   000E4D  64                 	db	100	;'d'
   292   000E4E  2C                 	db	44
   293   000E4F  20                 	db	32
   294   000E50  42                 	db	66	;'B'
   295   000E51  20                 	db	32
   296   000E52  25                 	db	37
   297   000E53  64                 	db	100	;'d'
   298   000E54  20                 	db	32
   299   000E55  0A                 	db	10
   300   000E56  00                 	db	0
   301   000E57                     STR_4:
   302                           
   303                           ; BSR set to: 14
   304   000E57  54                 	db	84	;'T'
   305   000E58  69                 	db	105	;'i'
   306   000E59  6D                 	db	109	;'m'
   307   000E5A  65                 	db	101	;'e'
   308   000E5B  72                 	db	114	;'r'
   309   000E5C  63                 	db	99	;'c'
   310   000E5D  6F                 	db	111	;'o'
   311   000E5E  75                 	db	117	;'u'
   312   000E5F  6E                 	db	110	;'n'
   313   000E60  74                 	db	116	;'t'
   314   000E61  20                 	db	32
   315   000E62  61                 	db	97	;'a'
   316   000E63  72                 	db	114	;'r'
   317   000E64  72                 	db	114	;'r'
   318   000E65  61                 	db	97	;'a'
   319   000E66  79                 	db	121	;'y'
   320   000E67  20                 	db	32
   321   000E68  72                 	db	114	;'r'
   322   000E69  65                 	db	101	;'e'
   323   000E6A  61                 	db	97	;'a'
   324   000E6B  64                 	db	100	;'d'
   325   000E6C  69                 	db	105	;'i'
   326   000E6D  6E                 	db	110	;'n'
   327   000E6E  67                 	db	103	;'g'
   328   000E6F  20                 	db	32
   329   000E70  25                 	db	37
   330   000E71  64                 	db	100	;'d'
   331   000E72  20                 	db	32
   332   000E73  0A                 	db	10
   333   000E74  00                 	db	0
   334   000E75                     STR_9:
   335                           
   336                           ; BSR set to: 14
   337   000E75  43                 	db	67	;'C'
   338   000E76  61                 	db	97	;'a'
   339   000E77  72                 	db	114	;'r'
   340   000E78  64                 	db	100	;'d'
   341   000E79  20                 	db	32
   342   000E7A  67                 	db	103	;'g'
   343   000E7B  6F                 	db	111	;'o'
   344   000E7C  6E                 	db	110	;'n'
   345   000E7D  6E                 	db	110	;'n'
   346   000E7E  61                 	db	97	;'a'
   347   000E7F  20                 	db	32
   348   000E80  72                 	db	114	;'r'
   349   000E81  65                 	db	101	;'e'
   350   000E82  73                 	db	115	;'s'
   351   000E83  70                 	db	112	;'p'
   352   000E84  6F                 	db	111	;'o'
   353   000E85  6E                 	db	110	;'n'
   354   000E86  64                 	db	100	;'d'
   355   000E87  20                 	db	32
   356   000E88  74                 	db	116	;'t'
   357   000E89  6F                 	db	111	;'o'
   358   000E8A  20                 	db	32
   359   000E8B  25                 	db	37
   360   000E8C  64                 	db	100	;'d'
   361   000E8D  20                 	db	32
   362   000E8E  0A                 	db	10
   363   000E8F  00                 	db	0
   364   000E90                     STR_8:
   365                           
   366                           ; BSR set to: 14
   367   000E90  43                 	db	67	;'C'
   368   000E91  61                 	db	97	;'a'
   369   000E92  72                 	db	114	;'r'
   370   000E93  64                 	db	100	;'d'
   371   000E94  63                 	db	99	;'c'
   372   000E95  6F                 	db	111	;'o'
   373   000E96  75                 	db	117	;'u'
   374   000E97  6E                 	db	110	;'n'
   375   000E98  74                 	db	116	;'t'
   376   000E99  20                 	db	32
   377   000E9A  25                 	db	37
   378   000E9B  64                 	db	100	;'d'
   379   000E9C  2C                 	db	44
   380   000E9D  20                 	db	32
   381   000E9E  63                 	db	99	;'c'
   382   000E9F  61                 	db	97	;'a'
   383   000EA0  72                 	db	114	;'r'
   384   000EA1  64                 	db	100	;'d'
   385   000EA2  20                 	db	32
   386   000EA3  25                 	db	37
   387   000EA4  64                 	db	100	;'d'
   388   000EA5  20                 	db	32
   389   000EA6  20                 	db	32
   390   000EA7  0A                 	db	10
   391   000EA8  00                 	db	0
   392   000EA9                     STR_7:
   393                           
   394                           ; BSR set to: 14
   395   000EA9  54                 	db	84	;'T'
   396   000EAA  69                 	db	105	;'i'
   397   000EAB  6D                 	db	109	;'m'
   398   000EAC  65                 	db	101	;'e'
   399   000EAD  20                 	db	32
   400   000EAE  67                 	db	103	;'g'
   401   000EAF  6F                 	db	111	;'o'
   402   000EB0  6E                 	db	110	;'n'
   403   000EB1  6E                 	db	110	;'n'
   404   000EB2  61                 	db	97	;'a'
   405   000EB3  20                 	db	32
   406   000EB4  6D                 	db	109	;'m'
   407   000EB5  6F                 	db	111	;'o'
   408   000EB6  76                 	db	118	;'v'
   409   000EB7  65                 	db	101	;'e'
   410   000EB8  20                 	db	32
   411   000EB9  66                 	db	102	;'f'
   412   000EBA  6F                 	db	111	;'o'
   413   000EBB  72                 	db	114	;'r'
   414   000EBC  20                 	db	32
   415   000EBD  25                 	db	37
   416   000EBE  64                 	db	100	;'d'
   417   000EBF  20                 	db	32
   418   000EC0  0A                 	db	10
   419   000EC1  00                 	db	0
   420   000EC2                     STR_2:
   421                           
   422                           ; BSR set to: 14
   423   000EC2  0A                 	db	10
   424   000EC3  20                 	db	32
   425   000EC4  45                 	db	69	;'E'
   426   000EC5  78                 	db	120	;'x'
   427   000EC6  70                 	db	112	;'p'
   428   000EC7  65                 	db	101	;'e'
   429   000EC8  63                 	db	99	;'c'
   430   000EC9  74                 	db	116	;'t'
   431   000ECA  65                 	db	101	;'e'
   432   000ECB  64                 	db	100	;'d'
   433   000ECC  20                 	db	32
   434   000ECD  63                 	db	99	;'c'
   435   000ECE  6C                 	db	108	;'l'
   436   000ECF  65                 	db	101	;'e'
   437   000ED0  61                 	db	97	;'a'
   438   000ED1  72                 	db	114	;'r'
   439   000ED2  3A                 	db	58	;':'
   440   000ED3  20                 	db	32
   441   000ED4  25                 	db	37
   442   000ED5  64                 	db	100	;'d'
   443   000ED6  20                 	db	32
   444   000ED7  0A                 	db	10
   445   000ED8  00                 	db	0
   446   000ED9                     STR_3:
   447                           
   448                           ; BSR set to: 14
   449   000ED9  43                 	db	67	;'C'
   450   000EDA  61                 	db	97	;'a'
   451   000EDB  72                 	db	114	;'r'
   452   000EDC  64                 	db	100	;'d'
   453   000EDD  63                 	db	99	;'c'
   454   000EDE  6F                 	db	111	;'o'
   455   000EDF  75                 	db	117	;'u'
   456   000EE0  6E                 	db	110	;'n'
   457   000EE1  74                 	db	116	;'t'
   458   000EE2  20                 	db	32
   459   000EE3  25                 	db	37
   460   000EE4  64                 	db	100	;'d'
   461   000EE5  20                 	db	32
   462   000EE6  0A                 	db	10
   463   000EE7  00                 	db	0
   464   000EE8                     STR_11:
   465                           
   466                           ; BSR set to: 14
   467   000EE8  43                 	db	67	;'C'
   468   000EE9  41                 	db	65	;'A'
   469   000EEA  52                 	db	82	;'R'
   470   000EEB  44                 	db	68	;'D'
   471   000EEC  20                 	db	32
   472   000EED  25                 	db	37
   473   000EEE  64                 	db	100	;'d'
   474   000EEF  20                 	db	32
   475   000EF0  0A                 	db	10
   476   000EF1  00                 	db	0
   477   000EF2                     STR_5:
   478                           
   479                           ; BSR set to: 14
   480   000EF2  43                 	db	67	;'C'
   481   000EF3  61                 	db	97	;'a'
   482   000EF4  72                 	db	114	;'r'
   483   000EF5  64                 	db	100	;'d'
   484   000EF6  20                 	db	32
   485   000EF7  25                 	db	37
   486   000EF8  64                 	db	100	;'d'
   487   000EF9  20                 	db	32
   488   000EFA  0A                 	db	10
   489   000EFB  00                 	db	0
   490   000EFC  00                 	db	0	; dummy byte at the end
   491   000000                     
   492                           ; #config settings
   493                           
   494                           	psect	cinit
   495   0037C0                     __pcinit:
   496                           	callstack 0
   497   0037C0                     start_initialization:
   498                           	callstack 0
   499   0037C0                     __initialization:
   500                           	callstack 0
   501                           
   502                           ; Initialize objects allocated to BANK2 (30 bytes)
   503                           ; load TBLPTR registers with __pidataBANK2
   504   0037C0  0E3E               	movlw	low __pidataBANK2
   505   0037C2  6EF6               	movwf	tblptrl,c
   506   0037C4  0E3A               	movlw	high __pidataBANK2
   507   0037C6  6EF7               	movwf	tblptrh,c
   508   0037C8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   509   0037CA  6EF8               	movwf	tblptru,c
   510   0037CC  EE02  F0DF         	lfsr	0,__pdataBANK2
   511   0037D0  EE10 F01E          	lfsr	1,30
   512   0037D4                     copy_data0:
   513   0037D4  0009               	tblrd		*+
   514   0037D6  CFF5 FFEE          	movff	tablat,postinc0
   515   0037DA  50E5               	movf	postdec1,w,c
   516   0037DC  50E1               	movf	fsr1l,w,c
   517   0037DE  E1FA               	bnz	copy_data0
   518                           
   519                           ; Clear objects allocated to BANK3 (60 bytes)
   520   0037E0  EE03  F051         	lfsr	0,__pbssBANK3
   521   0037E4  0E3C               	movlw	60
   522   0037E6                     clear_0:
   523   0037E6  6AEE               	clrf	postinc0,c
   524   0037E8  06E8               	decf	wreg,f,c
   525   0037EA  E1FD               	bnz	clear_0
   526                           
   527                           ; Clear objects allocated to BANK2 (124 bytes)
   528   0037EC  EE02  F000         	lfsr	0,__pbssBANK2
   529   0037F0  0E7C               	movlw	124
   530   0037F2                     clear_1:
   531   0037F2  6AEE               	clrf	postinc0,c
   532   0037F4  06E8               	decf	wreg,f,c
   533   0037F6  E1FD               	bnz	clear_1
   534                           
   535                           ; Clear objects allocated to COMRAM (3 bytes)
   536   0037F8  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   537   0037FA  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   538   0037FC  6A58               	clrf	__pbssCOMRAM& (0+255),c
   539   0037FE                     end_of_initialization:
   540                           	callstack 0
   541   0037FE                     __end_of__initialization:
   542                           	callstack 0
   543   0037FE  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   544   003800  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   545   003802  0100               	movlb	0
   546   003804  EFAB  F00A         	goto	_main	;jump to C main() function
   547                           
   548                           	psect	bssCOMRAM
   549   000058                     __pbssCOMRAM:
   550                           	callstack 0
   551   000058                     _TxBufReadCnt:
   552                           	callstack 0
   553   000058                     	ds	1
   554   000059                     _TxBufWriteCnt:
   555                           	callstack 0
   556   000059                     	ds	1
   557   00005A                     _RxBufWriteCnt:
   558                           	callstack 0
   559   00005A                     	ds	1
   560                           
   561                           	psect	bssBANK2
   562   000200                     __pbssBANK2:
   563                           	callstack 0
   564   000200                     _EUSART4TXbuf:
   565                           	callstack 0
   566   000200                     	ds	60
   567   00023C                     _EUSART4RXbuf:
   568                           	callstack 0
   569   00023C                     	ds	20
   570   000250                     _width:
   571                           	callstack 0
   572   000250                     	ds	2
   573   000252                     _prec:
   574                           	callstack 0
   575   000252                     	ds	2
   576   000254                     _card_detected:
   577                           	callstack 0
   578   000254                     	ds	2
   579   000256                     _response_in_progress:
   580                           	callstack 0
   581   000256                     	ds	2
   582   000258                     _TimerFlag:
   583                           	callstack 0
   584   000258                     	ds	2
   585   00025A                     _flags:
   586                           	callstack 0
   587   00025A                     	ds	1
   588   00025B                     _RxBufReadCnt:
   589                           	callstack 0
   590   00025B                     	ds	1
   591   00025C                     _dbuf:
   592                           	callstack 0
   593   00025C                     	ds	32
   594                           
   595                           	psect	dataBANK2
   596   0002DF                     __pdataBANK2:
   597                           	callstack 0
   598   0002DF                     main@F14700:
   599                           	callstack 0
   600   0002DF                     	ds	30
   601                           
   602                           	psect	bssBANK3
   603   000351                     __pbssBANK3:
   604                           	callstack 0
   605   000351                     	ds	60
   606                           
   607                           	psect	cstackBANK3
   608   000300                     __pcstackBANK3:
   609                           	callstack 0
   610   000300                     main@expected_values:
   611                           	callstack 0
   612                           
   613                           ; 72 bytes @ 0x0
   614   000300                     	ds	72
   615   000348                     main@motorR:
   616                           	callstack 0
   617                           
   618                           ; 9 bytes @ 0x48
   619   000348                     	ds	9
   620                           
   621                           	psect	cstackBANK2
   622   00027C                     __pcstackBANK2:
   623                           	callstack 0
   624   00027C                     main@ReturnHomeTimes:
   625                           	callstack 0
   626                           
   627                           ; 60 bytes @ 0x0
   628   00027C                     	ds	60
   629   0002B8                     main@ReturnHomeCards:
   630                           	callstack 0
   631                           
   632                           ; 30 bytes @ 0x3C
   633   0002B8                     	ds	30
   634   0002D6                     main@motorL:
   635                           	callstack 0
   636                           
   637                           ; 9 bytes @ 0x5A
   638   0002D6                     	ds	9
   639                           
   640                           	psect	cstackBANK1
   641   000100                     __pcstackBANK1:
   642                           	callstack 0
   643   000100                     card_response@normalised_values:
   644                           	callstack 0
   645                           
   646                           ; 72 bytes @ 0x0
   647   000100                     	ds	72
   648   000148                     card_response@master_closeness:
   649                           	callstack 0
   650                           
   651                           ; 18 bytes @ 0x48
   652   000148                     	ds	18
   653   00015A                     main@buf:
   654                           	callstack 0
   655                           
   656                           ; 150 bytes @ 0x5A
   657   00015A                     	ds	150
   658   0001F0                     main@card:
   659                           	callstack 0
   660                           
   661                           ; 1 bytes @ 0xF0
   662   0001F0                     	ds	1
   663   0001F1                     main@TimerCount:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0xF1
   667   0001F1                     	ds	2
   668   0001F3                     main@clear_read_check:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0xF3
   672   0001F3                     	ds	2
   673   0001F5                     main@CardCount:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0xF5
   677   0001F5                     	ds	2
   678   0001F7                     main@red_read:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0xF7
   682   0001F7                     	ds	2
   683   0001F9                     main@green_read:
   684                           	callstack 0
   685                           
   686                           ; 2 bytes @ 0xF9
   687   0001F9                     	ds	2
   688   0001FB                     main@blue_read:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0xFB
   692   0001FB                     	ds	2
   693   0001FD                     main@i:
   694                           	callstack 0
   695                           
   696                           ; 1 bytes @ 0xFD
   697   0001FD                     	ds	1
   698   0001FE                     main@clear_read:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0xFE
   702   0001FE                     	ds	2
   703                           
   704                           	psect	cstackBANK0
   705   000060                     __pcstackBANK0:
   706                           	callstack 0
   707   000060                     ?_vfprintf:
   708                           	callstack 0
   709   000060                     vfprintf@fp:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x0
   713   000060                     	ds	2
   714   000062                     vfprintf@fmt:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x2
   718   000062                     	ds	2
   719   000064                     vfprintf@ap:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x4
   723   000064                     	ds	2
   724   000066                     ?_sprintf:
   725                           	callstack 0
   726   000066                     sprintf@s:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x6
   730   000066                     	ds	2
   731   000068                     sprintf@fmt:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x8
   735   000068                     	ds	12
   736   000074                     sprintf@ap:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x14
   740   000074                     	ds	2
   741   000076                     sprintf@f:
   742                           	callstack 0
   743                           
   744                           ; 11 bytes @ 0x16
   745   000076                     	ds	11
   746   000081                     clear_read_calibration@buf:
   747                           	callstack 0
   748   000081                     motor_response@buf:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x21
   752   000081                     	ds	2
   753   000083                     motor_response@card:
   754                           	callstack 0
   755   000083                     clear_read_calibration@clear_read:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x23
   759   000083                     	ds	1
   760   000084                     motor_response@mL:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x24
   764   000084                     	ds	1
   765   000085                     clear_read_calibration@clear_read_check:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x25
   769   000085                     	ds	1
   770   000086                     motor_response@mR:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x26
   774   000086                     	ds	1
   775   000087                     ??_clear_read_calibration:
   776                           
   777                           ; 1 bytes @ 0x27
   778   000087                     	ds	1
   779   000088                     motor_response@ReturnHomeTimes:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x28
   783   000088                     	ds	2
   784   00008A                     motor_response@ReturnHomeCards:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x2A
   788   00008A                     	ds	1
   789   00008B                     clear_read_calibration@i:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x2B
   793   00008B                     	ds	1
   794   00008C                     motor_response@j:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x2C
   798   00008C                     	ds	1
   799   00008D                     clear_read_calibration@i_1640:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x2D
   803   00008D                     	ds	1
   804   00008E                     motor_response@k:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x2E
   808   00008E                     	ds	2
   809   000090                     motor_response@i:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x30
   813   000090                     	ds	2
   814   000092                     card_response@buf:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x32
   818   000092                     	ds	2
   819   000094                     card_response@clear_read:
   820                           	callstack 0
   821                           
   822                           ; 2 bytes @ 0x34
   823   000094                     	ds	2
   824   000096                     card_response@red_read:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x36
   828   000096                     	ds	2
   829   000098                     card_response@green_read:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x38
   833   000098                     	ds	2
   834   00009A                     card_response@blue_read:
   835                           	callstack 0
   836                           
   837                           ; 2 bytes @ 0x3A
   838   00009A                     	ds	2
   839   00009C                     card_response@expected_values:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x3C
   843   00009C                     	ds	2
   844   00009E                     card_response@card:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0x3E
   848   00009E                     	ds	1
   849   00009F                     card_response@mL:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x3F
   853   00009F                     	ds	2
   854   0000A1                     card_response@mR:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x41
   858   0000A1                     	ds	2
   859   0000A3                     card_response@ReturnHomeTimes:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x43
   863   0000A3                     	ds	2
   864   0000A5                     card_response@ReturnHomeCards:
   865                           	callstack 0
   866                           
   867                           ; 2 bytes @ 0x45
   868   0000A5                     	ds	2
   869   0000A7                     ??_main:
   870                           
   871                           ; 1 bytes @ 0x47
   872   0000A7                     	ds	2
   873   0000A9                     main@PWMcycle:
   874                           	callstack 0
   875                           
   876                           ; 1 bytes @ 0x49
   877   0000A9                     	ds	1
   878                           
   879                           	psect	cstackCOMRAM
   880   000001                     __pcstackCOMRAM:
   881                           	callstack 0
   882   000001                     ??_LowISR:
   883   000001                     
   884                           ; 1 bytes @ 0x0
   885   000001                     	ds	3
   886   000004                     ??_I2C_2_Master_Idle:
   887   000004                     ?___wmul:
   888                           	callstack 0
   889   000004                     ?___lwmod:
   890                           	callstack 0
   891   000004                     ?___aodiv:
   892                           	callstack 0
   893   000004                     ?___aomod:
   894                           	callstack 0
   895   000004                     sendCharSerial4@charToSend:
   896                           	callstack 0
   897   000004                     make_master_closeness@buf:
   898                           	callstack 0
   899   000004                     determine_card@master_closeness:
   900                           	callstack 0
   901   000004                     ___wmul@multiplier:
   902                           	callstack 0
   903   000004                     ___lwmod@dividend:
   904                           	callstack 0
   905   000004                     fputc@c:
   906                           	callstack 0
   907   000004                     ___aodiv@dividend:
   908                           	callstack 0
   909   000004                     ___aomod@dividend:
   910                           	callstack 0
   911                           
   912                           ; 8 bytes @ 0x3
   913   000004                     	ds	1
   914   000005                     ??_I2C_2_Master_Read:
   915   000005                     I2C_2_Master_Write@data_byte:
   916                           	callstack 0
   917   000005                     sendStringSerial4@string:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0x4
   921   000005                     	ds	1
   922   000006                     ??_determine_card:
   923   000006                     color_writetoaddr@value:
   924                           	callstack 0
   925   000006                     I2C_2_Master_Read@ack:
   926                           	callstack 0
   927   000006                     make_master_closeness@normalised_values:
   928                           	callstack 0
   929   000006                     ___wmul@multiplicand:
   930                           	callstack 0
   931   000006                     ___lwmod@divisor:
   932                           	callstack 0
   933   000006                     fputc@fp:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x5
   937   000006                     	ds	1
   938   000007                     color_writetoaddr@address:
   939                           	callstack 0
   940   000007                     I2C_2_Master_Read@tmp:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x6
   944   000007                     	ds	1
   945   000008                     ??_fputc:
   946   000008                     ??_color_click_init:
   947   000008                     ?_color_read_Red:
   948                           	callstack 0
   949   000008                     ?_color_read_Green:
   950                           	callstack 0
   951   000008                     ?_color_read_Blue:
   952                           	callstack 0
   953   000008                     ?_color_read_Clear:
   954                           	callstack 0
   955   000008                     ___lwmod@counter:
   956                           	callstack 0
   957   000008                     make_master_closeness@master_closeness:
   958                           	callstack 0
   959   000008                     ___wmul@product:
   960                           	callstack 0
   961                           
   962                           ; 2 bytes @ 0x7
   963   000008                     	ds	2
   964   00000A                     ??_color_read_Red:
   965   00000A                     ??_color_read_Green:
   966   00000A                     ??_color_read_Blue:
   967   00000A                     ??_color_read_Clear:
   968   00000A                     ??_make_master_closeness:
   969   00000A                     ?___lwdiv:
   970                           	callstack 0
   971   00000A                     determine_card@current_smallest:
   972                           	callstack 0
   973   00000A                     ___lwdiv@dividend:
   974                           	callstack 0
   975                           
   976                           ; 2 bytes @ 0x9
   977   00000A                     	ds	2
   978   00000C                     determine_card@predicted_colour:
   979                           	callstack 0
   980   00000C                     ___lwdiv@divisor:
   981                           	callstack 0
   982   00000C                     ___aodiv@divisor:
   983                           	callstack 0
   984   00000C                     ___aomod@divisor:
   985                           	callstack 0
   986                           
   987                           ; 8 bytes @ 0xB
   988   00000C                     	ds	1
   989   00000D                     determine_card@i:
   990                           	callstack 0
   991   00000D                     color_read_Red@tmp:
   992                           	callstack 0
   993   00000D                     color_read_Green@tmp:
   994                           	callstack 0
   995   00000D                     color_read_Blue@tmp:
   996                           	callstack 0
   997   00000D                     color_read_Clear@tmp:
   998                           	callstack 0
   999   00000D                     fputs@s:
  1000                           	callstack 0
  1001                           
  1002                           ; 2 bytes @ 0xC
  1003   00000D                     	ds	1
  1004   00000E                     ___lwdiv@counter:
  1005                           	callstack 0
  1006                           
  1007                           ; 1 bytes @ 0xD
  1008   00000E                     	ds	1
  1009   00000F                     collect_avg_readings@clear_read:
  1010                           	callstack 0
  1011   00000F                     ___lwdiv@quotient:
  1012                           	callstack 0
  1013   00000F                     fputs@fp:
  1014                           	callstack 0
  1015                           
  1016                           ; 2 bytes @ 0xE
  1017   00000F                     	ds	2
  1018   000011                     fputs@c:
  1019                           	callstack 0
  1020   000011                     setMotorPWM@m:
  1021                           	callstack 0
  1022   000011                     collect_avg_readings@red_read:
  1023                           	callstack 0
  1024                           
  1025                           ; 2 bytes @ 0x10
  1026   000011                     	ds	1
  1027   000012                     fputs@i:
  1028                           	callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x11
  1031   000012                     	ds	1
  1032   000013                     ??_setMotorPWM:
  1033   000013                     collect_avg_readings@green_read:
  1034                           	callstack 0
  1035                           
  1036                           ; 2 bytes @ 0x12
  1037   000013                     	ds	1
  1038   000014                     ___aodiv@counter:
  1039                           	callstack 0
  1040   000014                     ___aomod@counter:
  1041                           	callstack 0
  1042   000014                     pad@fp:
  1043                           	callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x13
  1046   000014                     	ds	1
  1047   000015                     setMotorPWM@posDuty:
  1048                           	callstack 0
  1049   000015                     ___aodiv@sign:
  1050                           	callstack 0
  1051   000015                     ___aomod@sign:
  1052                           	callstack 0
  1053   000015                     collect_avg_readings@blue_read:
  1054                           	callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x14
  1057   000015                     	ds	1
  1058   000016                     ?_abs:
  1059                           	callstack 0
  1060   000016                     setMotorPWM@negDuty:
  1061                           	callstack 0
  1062   000016                     abs@a:
  1063                           	callstack 0
  1064   000016                     pad@buf:
  1065                           	callstack 0
  1066   000016                     ___aodiv@quotient:
  1067                           	callstack 0
  1068                           
  1069                           ; 8 bytes @ 0x15
  1070   000016                     	ds	1
  1071   000017                     ??_collect_avg_readings:
  1072   000017                     stop@mL:
  1073                           	callstack 0
  1074   000017                     turnLeft45@mL:
  1075                           	callstack 0
  1076   000017                     turnRight45@mL:
  1077                           	callstack 0
  1078   000017                     fullSpeedAhead@mL:
  1079                           	callstack 0
  1080   000017                     reverseFullSpeed@mL:
  1081                           	callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x16
  1084   000017                     	ds	1
  1085   000018                     ??_abs:
  1086   000018                     pad@p:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x17
  1090   000018                     	ds	1
  1091   000019                     stop@mR:
  1092                           	callstack 0
  1093   000019                     turnLeft45@mR:
  1094                           	callstack 0
  1095   000019                     turnRight45@mR:
  1096                           	callstack 0
  1097   000019                     fullSpeedAhead@mR:
  1098                           	callstack 0
  1099   000019                     reverseFullSpeed@mR:
  1100                           	callstack 0
  1101   000019                     collect_avg_readings@i:
  1102                           	callstack 0
  1103                           
  1104                           ; 2 bytes @ 0x18
  1105   000019                     	ds	1
  1106   00001A                     ??_pad:
  1107   00001A                     normalise_readings@buf:
  1108                           	callstack 0
  1109                           
  1110                           ; 2 bytes @ 0x19
  1111   00001A                     	ds	1
  1112   00001B                     ??_stop:
  1113   00001B                     ??_turnLeft45:
  1114   00001B                     ??_turnRight45:
  1115   00001B                     ??_fullSpeedAhead:
  1116   00001B                     ??_reverseFullSpeed:
  1117   00001B                     collect_avg_readings@i_1651:
  1118                           	callstack 0
  1119   00001B                     pad@i:
  1120                           	callstack 0
  1121                           
  1122                           ; 2 bytes @ 0x1A
  1123   00001B                     	ds	1
  1124   00001C                     fullSpeedAhead@i:
  1125                           	callstack 0
  1126   00001C                     reverseFullSpeed@i:
  1127                           	callstack 0
  1128   00001C                     normalise_readings@clear_read:
  1129                           	callstack 0
  1130                           
  1131                           ; 2 bytes @ 0x1B
  1132   00001C                     	ds	1
  1133   00001D                     turnLeft45@i:
  1134                           	callstack 0
  1135   00001D                     turnRight45@i:
  1136                           	callstack 0
  1137   00001D                     collect_avg_readings@i_1652:
  1138                           	callstack 0
  1139   00001D                     pad@w:
  1140                           	callstack 0
  1141                           
  1142                           ; 2 bytes @ 0x1C
  1143   00001D                     	ds	1
  1144   00001E                     normalise_readings@red_read:
  1145                           	callstack 0
  1146                           
  1147                           ; 2 bytes @ 0x1D
  1148   00001E                     	ds	1
  1149   00001F                     collect_avg_readings@i_1653:
  1150                           	callstack 0
  1151   00001F                     home_response@mL:
  1152                           	callstack 0
  1153   00001F                     dtoa@fp:
  1154                           	callstack 0
  1155                           
  1156                           ; 2 bytes @ 0x1E
  1157   00001F                     	ds	1
  1158   000020                     normalise_readings@green_read:
  1159                           	callstack 0
  1160                           
  1161                           ; 2 bytes @ 0x1F
  1162   000020                     	ds	1
  1163   000021                     collect_avg_readings@i_1654:
  1164                           	callstack 0
  1165   000021                     home_response@mR:
  1166                           	callstack 0
  1167   000021                     dtoa@d:
  1168                           	callstack 0
  1169                           
  1170                           ; 8 bytes @ 0x20
  1171   000021                     	ds	1
  1172   000022                     normalise_readings@blue_read:
  1173                           	callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x21
  1176   000022                     	ds	1
  1177   000023                     ??_home_response:
  1178                           
  1179                           ; 1 bytes @ 0x22
  1180   000023                     	ds	1
  1181   000024                     normalise_readings@expected_values:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x23
  1185   000024                     	ds	1
  1186   000025                     home_response@card:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x24
  1190   000025                     	ds	1
  1191   000026                     normalise_readings@normalised_values:
  1192                           	callstack 0
  1193                           
  1194                           ; 2 bytes @ 0x25
  1195   000026                     	ds	2
  1196   000028                     ??_normalise_readings:
  1197   000028                     make_master_closeness@i:
  1198                           	callstack 0
  1199                           
  1200                           ; 1 bytes @ 0x27
  1201   000028                     	ds	1
  1202   000029                     ??_dtoa:
  1203                           
  1204                           ; 1 bytes @ 0x28
  1205   000029                     	ds	7
  1206   000030                     normalise_readings@difference:
  1207                           	callstack 0
  1208                           
  1209                           ; 2 bytes @ 0x2F
  1210   000030                     	ds	1
  1211   000031                     _dtoa$2594:
  1212                           	callstack 0
  1213                           
  1214                           ; 2 bytes @ 0x30
  1215   000031                     	ds	1
  1216   000032                     normalise_readings@i:
  1217                           	callstack 0
  1218                           
  1219                           ; 1 bytes @ 0x31
  1220   000032                     	ds	1
  1221   000033                     dtoa@p:
  1222                           	callstack 0
  1223                           
  1224                           ; 2 bytes @ 0x32
  1225   000033                     	ds	2
  1226   000035                     dtoa@w:
  1227                           	callstack 0
  1228                           
  1229                           ; 2 bytes @ 0x34
  1230   000035                     	ds	2
  1231   000037                     dtoa@n:
  1232                           	callstack 0
  1233                           
  1234                           ; 8 bytes @ 0x36
  1235   000037                     	ds	8
  1236   00003F                     dtoa@s:
  1237                           	callstack 0
  1238                           
  1239                           ; 1 bytes @ 0x3E
  1240   00003F                     	ds	1
  1241   000040                     dtoa@i:
  1242                           	callstack 0
  1243                           
  1244                           ; 2 bytes @ 0x3F
  1245   000040                     	ds	2
  1246   000042                     vfpfcnvrt@fp:
  1247                           	callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x41
  1250   000042                     	ds	2
  1251   000044                     vfpfcnvrt@fmt:
  1252                           	callstack 0
  1253                           
  1254                           ; 2 bytes @ 0x43
  1255   000044                     	ds	2
  1256   000046                     vfpfcnvrt@ap:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x45
  1260   000046                     	ds	2
  1261   000048                     ??_vfpfcnvrt:
  1262                           
  1263                           ; 1 bytes @ 0x47
  1264   000048                     	ds	2
  1265   00004A                     vfpfcnvrt@convarg:
  1266                           	callstack 0
  1267                           
  1268                           ; 8 bytes @ 0x49
  1269   00004A                     	ds	8
  1270   000052                     vfpfcnvrt@cp:
  1271                           	callstack 0
  1272                           
  1273                           ; 2 bytes @ 0x51
  1274   000052                     	ds	2
  1275   000054                     vfprintf@cfmt:
  1276                           	callstack 0
  1277                           
  1278                           ; 2 bytes @ 0x53
  1279   000054                     	ds	2
  1280   000056                     ??_motor_response:
  1281                           
  1282                           ; 1 bytes @ 0x55
  1283   000056                     	ds	2
  1284   000058                     
  1285                           ; 1 bytes @ 0x57
  1286 ;;
  1287 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1288 ;;
  1289 ;; *************** function _main *****************
  1290 ;; Defined at:
  1291 ;;		line 21 in file "main.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  i               1  253[BANK1 ] enum E14569
  1296 ;;  buf           150   90[BANK1 ] unsigned char [150]
  1297 ;;  expected_val   72    0[BANK3 ] unsigned int [9][4]
  1298 ;;  ReturnHomeTi   60    0[BANK2 ] unsigned int [30]
  1299 ;;  expected_val   40    0        unsigned int [5][4]
  1300 ;;  ReturnHomeCa   30   60[BANK2 ] enum E14569[30]
  1301 ;;  motorR          9   72[BANK3 ] struct DC_motor
  1302 ;;  motorL          9   90[BANK2 ] struct DC_motor
  1303 ;;  clear_read      2  254[BANK1 ] unsigned int 
  1304 ;;  blue_read       2  251[BANK1 ] unsigned int 
  1305 ;;  green_read      2  249[BANK1 ] unsigned int 
  1306 ;;  red_read        2  247[BANK1 ] unsigned int 
  1307 ;;  CardCount       2  245[BANK1 ] unsigned int 
  1308 ;;  clear_read_c    2  243[BANK1 ] unsigned int 
  1309 ;;  TimerCount      2  241[BANK1 ] unsigned int 
  1310 ;;  card            1  240[BANK1 ] enum E14569
  1311 ;;  PWMcycle        1   73[BANK0 ] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;      Locals:         0       1     166      99      81       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1324 ;;      Totals:         0       3     166      99      81       0       0       0       0       0       0       0       
      +0       0       0
  1325 ;;Total ram usage:      349 bytes
  1326 ;; Hardware stack levels required when called: 11
  1327 ;; This function calls:
  1328 ;;		_I2C_2_Master_Init
  1329 ;;		_Interrupts_init
  1330 ;;		_LEDSon_init
  1331 ;;		___lwmod
  1332 ;;		_card_response
  1333 ;;		_clear_read_calibration
  1334 ;;		_collect_avg_readings
  1335 ;;		_color_click_init
  1336 ;;		_color_read_Clear
  1337 ;;		_fullSpeedAhead
  1338 ;;		_initDCmotorsPWM
  1339 ;;		_initUSART4
  1340 ;;		_reverseFullSpeed
  1341 ;;		_sendStringSerial4
  1342 ;;		_setMotorPWM
  1343 ;;		_sprintf
  1344 ;;		_stop
  1345 ;; This function is called by:
  1346 ;;		Startup code after reset
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text0
  1351   001556                     __ptext0:
  1352                           	callstack 0
  1353   001556                     _main:
  1354                           	callstack 20
  1355   001556                     
  1356                           ;main.c: 26:     LEDSon_init();
  1357   001556  ECAE  F01C         	call	_LEDSon_init	;wreg free
  1358   00155A                     
  1359                           ;main.c: 27:     I2C_2_Master_Init();
  1360   00155A  EC99  F01C         	call	_I2C_2_Master_Init	;wreg free
  1361   00155E                     
  1362                           ;main.c: 28:     color_click_init();
  1363   00155E  EC67  F01C         	call	_color_click_init	;wreg free
  1364   001562                     
  1365                           ;main.c: 29:     initDCmotorsPWM();
  1366   001562  EC7D  F019         	call	_initDCmotorsPWM	;wreg free
  1367   001566                     
  1368                           ;main.c: 30:     initUSART4();
  1369   001566  ECFF  F01C         	call	_initUSART4	;wreg free
  1370   00156A                     
  1371                           ;main.c: 31:     Interrupts_init();
  1372   00156A  ECC3  F01C         	call	_Interrupts_init	;wreg free
  1373   00156E                     
  1374                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1375   00156E  8486               	bsf	134,2,c	;volatile
  1376   001570                     
  1377                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1378   001570  010E               	movlb	14	; () banked
  1379   001572  95B4               	bcf	180,2,b	;volatile
  1380   001574                     
  1381                           ; BSR set to: 14
  1382                           ;main.c: 40:     unsigned char PWMcycle = T2PR;
  1383   001574  CFBC F0A9          	movff	4028,main@PWMcycle	;volatile
  1384   001578                     
  1385                           ; BSR set to: 14
  1386                           ;main.c: 42:     struct DC_motor motorL, motorR;;main.c: 44:     motorL.power=0;
  1387   001578  0E00               	movlw	0
  1388   00157A  0102               	movlb	2	; () banked
  1389   00157C  6FD6               	movwf	main@motorL& (0+255),b
  1390   00157E                     
  1391                           ; BSR set to: 2
  1392                           ;main.c: 45:     motorL.direction=1;
  1393   00157E  0E01               	movlw	1
  1394   001580  6FD7               	movwf	(main@motorL+1)& (0+255),b
  1395   001582                     
  1396                           ; BSR set to: 2
  1397                           ;main.c: 46:     motorL.brakemode=1;
  1398   001582  0E01               	movlw	1
  1399   001584  6FD8               	movwf	(main@motorL+2)& (0+255),b
  1400   001586                     
  1401                           ; BSR set to: 2
  1402                           ;main.c: 47:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1403   001586  0EAA               	movlw	170
  1404   001588  6FDB               	movwf	(main@motorL+5)& (0+255),b
  1405   00158A  0E0F               	movlw	15
  1406   00158C  6FDC               	movwf	(main@motorL+6)& (0+255),b
  1407   00158E                     
  1408                           ; BSR set to: 2
  1409                           ;main.c: 48:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1410   00158E  0EA6               	movlw	166
  1411   001590  6FDD               	movwf	(main@motorL+7)& (0+255),b
  1412   001592  0E0F               	movlw	15
  1413   001594  6FDE               	movwf	(main@motorL+8)& (0+255),b
  1414   001596                     
  1415                           ; BSR set to: 2
  1416                           ;main.c: 49:     motorL.PWMperiod=PWMcycle;
  1417   001596  C0A9  F2D9         	movff	main@PWMcycle,main@motorL+3
  1418   00159A  6BDA               	clrf	(main@motorL+4)& (0+255),b
  1419   00159C                     
  1420                           ; BSR set to: 2
  1421                           ;main.c: 51:     motorR.power=0;
  1422   00159C  0E00               	movlw	0
  1423   00159E  0103               	movlb	3	; () banked
  1424   0015A0  6F48               	movwf	main@motorR& (0+255),b
  1425   0015A2                     
  1426                           ; BSR set to: 3
  1427                           ;main.c: 52:     motorR.direction=1;
  1428   0015A2  0E01               	movlw	1
  1429   0015A4  6F49               	movwf	(main@motorR+1)& (0+255),b
  1430   0015A6                     
  1431                           ; BSR set to: 3
  1432                           ;main.c: 53:     motorR.brakemode=1;
  1433   0015A6  0E01               	movlw	1
  1434   0015A8  6F4A               	movwf	(main@motorR+2)& (0+255),b
  1435                           
  1436                           ;main.c: 54:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1437   0015AA  0E25               	movlw	37
  1438   0015AC  6F4D               	movwf	(main@motorR+5)& (0+255),b
  1439   0015AE  0E0F               	movlw	15
  1440   0015B0  6F4E               	movwf	(main@motorR+6)& (0+255),b
  1441                           
  1442                           ;main.c: 55:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1443   0015B2  0E21               	movlw	33
  1444   0015B4  6F4F               	movwf	(main@motorR+7)& (0+255),b
  1445   0015B6  0E0F               	movlw	15
  1446   0015B8  6F50               	movwf	(main@motorR+8)& (0+255),b
  1447   0015BA                     
  1448                           ; BSR set to: 3
  1449                           ;main.c: 56:     motorR.PWMperiod=PWMcycle;
  1450   0015BA  C0A9  F34B         	movff	main@PWMcycle,main@motorR+3
  1451   0015BE  6B4C               	clrf	(main@motorR+4)& (0+255),b
  1452   0015C0                     
  1453                           ; BSR set to: 3
  1454                           ;main.c: 58:     setMotorPWM(&motorL);
  1455   0015C0  0ED6               	movlw	low main@motorL
  1456   0015C2  6E11               	movwf	setMotorPWM@m^0,c
  1457   0015C4  0E02               	movlw	high main@motorL
  1458   0015C6  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1459   0015C8  EC01  F014         	call	_setMotorPWM	;wreg free
  1460   0015CC                     
  1461                           ;main.c: 59:     setMotorPWM(&motorR);
  1462   0015CC  0E48               	movlw	low main@motorR
  1463   0015CE  6E11               	movwf	setMotorPWM@m^0,c
  1464   0015D0  0E03               	movlw	high main@motorR
  1465   0015D2  6E12               	movwf	(setMotorPWM@m+1)^0,c
  1466   0015D4  EC01  F014         	call	_setMotorPWM	;wreg free
  1467   0015D8                     
  1468                           ;main.c: 65:     colour card;;main.c: 66:     char buf[150];;main.c: 69:     unsigned in
      +                          t red_read = 0;
  1469   0015D8  0E00               	movlw	0
  1470   0015DA  0101               	movlb	1	; () banked
  1471   0015DC  6FF8               	movwf	(main@red_read+1)& (0+255),b
  1472   0015DE  0E00               	movlw	0
  1473   0015E0  6FF7               	movwf	main@red_read& (0+255),b
  1474   0015E2                     
  1475                           ; BSR set to: 1
  1476                           ;main.c: 70:     unsigned int green_read = 0;
  1477   0015E2  0E00               	movlw	0
  1478   0015E4  6FFA               	movwf	(main@green_read+1)& (0+255),b
  1479   0015E6  0E00               	movlw	0
  1480   0015E8  6FF9               	movwf	main@green_read& (0+255),b
  1481   0015EA                     
  1482                           ; BSR set to: 1
  1483                           ;main.c: 71:     unsigned int blue_read = 0;
  1484   0015EA  0E00               	movlw	0
  1485   0015EC  6FFC               	movwf	(main@blue_read+1)& (0+255),b
  1486   0015EE  0E00               	movlw	0
  1487   0015F0  6FFB               	movwf	main@blue_read& (0+255),b
  1488   0015F2                     
  1489                           ; BSR set to: 1
  1490                           ;main.c: 72:     unsigned int clear_read = 0;
  1491   0015F2  0E00               	movlw	0
  1492   0015F4  6FFF               	movwf	(main@clear_read+1)& (0+255),b
  1493   0015F6  0E00               	movlw	0
  1494   0015F8  6FFE               	movwf	main@clear_read& (0+255),b
  1495   0015FA                     
  1496                           ; BSR set to: 1
  1497                           ;main.c: 74:     unsigned int TimerCount = 0;
  1498   0015FA  0E00               	movlw	0
  1499   0015FC  6FF2               	movwf	(main@TimerCount+1)& (0+255),b
  1500   0015FE  0E00               	movlw	0
  1501   001600  6FF1               	movwf	main@TimerCount& (0+255),b
  1502   001602                     
  1503                           ; BSR set to: 1
  1504                           ;main.c: 75:     unsigned int CardCount = 0;
  1505   001602  0E00               	movlw	0
  1506   001604  6FF6               	movwf	(main@CardCount+1)& (0+255),b
  1507   001606  0E00               	movlw	0
  1508   001608  6FF5               	movwf	main@CardCount& (0+255),b
  1509   00160A                     
  1510                           ; BSR set to: 1
  1511                           ;main.c: 76:     unsigned int clear_read_check = 0;
  1512   00160A  0E00               	movlw	0
  1513   00160C  6FF4               	movwf	(main@clear_read_check+1)& (0+255),b
  1514   00160E  0E00               	movlw	0
  1515   001610  6FF3               	movwf	main@clear_read_check& (0+255),b
  1516   001612                     
  1517                           ; BSR set to: 1
  1518                           ;main.c: 78:     unsigned int expected_values[4][9];;main.c: 79:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 81:     unsigned int ReturnHomeTimes[30] = {0};
  1519   001612  EE22  F07C         	lfsr	2,main@ReturnHomeTimes
  1520   001616  0E3B               	movlw	59
  1521   001618                     u2491:
  1522   001618  6ADE               	clrf	postinc2,c
  1523   00161A  06E8               	decf	wreg,f,c
  1524   00161C  E2FD               	bc	u2491
  1525   00161E                     
  1526                           ; BSR set to: 1
  1527                           ;main.c: 82:     colour ReturnHomeCards[30] = {BLACK};
  1528   00161E  EE22  F0DF         	lfsr	2,main@F14700
  1529   001622  EE12  F0B8         	lfsr	1,main@ReturnHomeCards
  1530   001626  0E1D               	movlw	29
  1531   001628                     u2501:
  1532   001628  CFDB FFE3          	movff	plusw2,plusw1
  1533   00162C  06E8               	decf	wreg,f,c
  1534   00162E  E2FC               	bc	u2501
  1535   001630                     
  1536                           ; BSR set to: 1
  1537                           ;main.c: 93:     LATDbits.LATD4 = 0;
  1538   001630  987C               	bcf	124,4,c	;volatile
  1539   001632                     
  1540                           ; BSR set to: 1
  1541                           ;main.c: 94:     for(colour i = RED; i<= BLACK; i++){
  1542   001632  0E00               	movlw	0
  1543   001634  6FFD               	movwf	main@i& (0+255),b
  1544   001636  EF1E  F00B         	goto	l246
  1545   00163A                     l247:
  1546                           
  1547                           ;main.c: 96:             LATDbits.LATD4 = 1;
  1548   00163A  887C               	bsf	124,4,c	;volatile
  1549   00163C                     l246:
  1550                           
  1551                           ;main.c: 95:         while(PORTFbits.RF2){
  1552   00163C  B48E               	btfsc	142,2,c	;volatile
  1553   00163E  EF23  F00B         	goto	u2511
  1554   001642  EF25  F00B         	goto	u2510
  1555   001646                     u2511:
  1556   001646  EF1D  F00B         	goto	l247
  1557   00164A                     u2510:
  1558   00164A                     
  1559                           ;main.c: 98:         LATDbits.LATD4 = 0;
  1560   00164A  987C               	bcf	124,4,c	;volatile
  1561   00164C                     
  1562                           ;main.c: 99:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1563   00164C  0E09               	movlw	9
  1564   00164E  0100               	movlb	0	; () banked
  1565   001650  6FA8               	movwf	(??_main+1)& (0+255),b
  1566   001652  0E1E               	movlw	30
  1567   001654  6FA7               	movwf	??_main& (0+255),b
  1568   001656  0EE4               	movlw	228
  1569   001658                     u2607:
  1570   001658  2EE8               	decfsz	wreg,f,c
  1571   00165A  D7FE               	bra	u2607
  1572   00165C  2FA7               	decfsz	??_main& (0+255),f,b
  1573   00165E  D7FC               	bra	u2607
  1574   001660  2FA8               	decfsz	(??_main+1)& (0+255),f,b
  1575   001662  D7FA               	bra	u2607
  1576   001664  F000               	nop	
  1577   001666                     
  1578                           ;main.c: 100:         stop(&motorL, &motorR);
  1579   001666  0ED6               	movlw	low main@motorL
  1580   001668  6E17               	movwf	stop@mL^0,c
  1581   00166A  0E02               	movlw	high main@motorL
  1582   00166C  6E18               	movwf	(stop@mL+1)^0,c
  1583   00166E  0E48               	movlw	low main@motorR
  1584   001670  6E19               	movwf	stop@mR^0,c
  1585   001672  0E03               	movlw	high main@motorR
  1586   001674  6E1A               	movwf	(stop@mR+1)^0,c
  1587   001676  ECC1  F019         	call	_stop	;wreg free
  1588   00167A                     
  1589                           ;main.c: 101:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1590   00167A  0E02               	movlw	2
  1591   00167C  0100               	movlb	0	; () banked
  1592   00167E  6FA8               	movwf	(??_main+1)& (0+255),b
  1593   001680  0EA0               	movlw	160
  1594   001682  6FA7               	movwf	??_main& (0+255),b
  1595   001684  0E92               	movlw	146
  1596   001686                     u2617:
  1597   001686  2EE8               	decfsz	wreg,f,c
  1598   001688  D7FE               	bra	u2617
  1599   00168A  2FA7               	decfsz	??_main& (0+255),f,b
  1600   00168C  D7FC               	bra	u2617
  1601   00168E  2FA8               	decfsz	(??_main+1)& (0+255),f,b
  1602   001690  D7FA               	bra	u2617
  1603   001692  F000               	nop	
  1604                           
  1605                           ;main.c: 102:         reverseFullSpeed(&motorL, &motorR);
  1606   001694  0ED6               	movlw	low main@motorL
  1607   001696  6E17               	movwf	reverseFullSpeed@mL^0,c
  1608   001698  0E02               	movlw	high main@motorL
  1609   00169A  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  1610   00169C  0E48               	movlw	low main@motorR
  1611   00169E  6E19               	movwf	reverseFullSpeed@mR^0,c
  1612   0016A0  0E03               	movlw	high main@motorR
  1613   0016A2  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  1614   0016A4  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  1615   0016A8                     
  1616                           ;main.c: 103:         _delay((unsigned long)((150)*(64000000/4000.0)));
  1617   0016A8  0E0D               	movlw	13
  1618   0016AA  0100               	movlb	0	; () banked
  1619   0016AC  6FA8               	movwf	(??_main+1)& (0+255),b
  1620   0016AE  0E2D               	movlw	45
  1621   0016B0  6FA7               	movwf	??_main& (0+255),b
  1622   0016B2  0ED7               	movlw	215
  1623   0016B4                     u2627:
  1624   0016B4  2EE8               	decfsz	wreg,f,c
  1625   0016B6  D7FE               	bra	u2627
  1626   0016B8  2FA7               	decfsz	??_main& (0+255),f,b
  1627   0016BA  D7FC               	bra	u2627
  1628   0016BC  2FA8               	decfsz	(??_main+1)& (0+255),f,b
  1629   0016BE  D7FA               	bra	u2627
  1630   0016C0  D000               	nop2	
  1631   0016C2                     
  1632                           ;main.c: 104:         stop(&motorL, &motorR);
  1633   0016C2  0ED6               	movlw	low main@motorL
  1634   0016C4  6E17               	movwf	stop@mL^0,c
  1635   0016C6  0E02               	movlw	high main@motorL
  1636   0016C8  6E18               	movwf	(stop@mL+1)^0,c
  1637   0016CA  0E48               	movlw	low main@motorR
  1638   0016CC  6E19               	movwf	stop@mR^0,c
  1639   0016CE  0E03               	movlw	high main@motorR
  1640   0016D0  6E1A               	movwf	(stop@mR+1)^0,c
  1641   0016D2  ECC1  F019         	call	_stop	;wreg free
  1642   0016D6                     
  1643                           ;main.c: 105:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_re
      +                          ad);
  1644   0016D6  0EFE               	movlw	low main@clear_read
  1645   0016D8  6E0F               	movwf	collect_avg_readings@clear_read^0,c
  1646   0016DA  0E01               	movlw	high main@clear_read
  1647   0016DC  6E10               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1648   0016DE  0EF7               	movlw	low main@red_read
  1649   0016E0  6E11               	movwf	collect_avg_readings@red_read^0,c
  1650   0016E2  0E01               	movlw	high main@red_read
  1651   0016E4  6E12               	movwf	(collect_avg_readings@red_read+1)^0,c
  1652   0016E6  0EF9               	movlw	low main@green_read
  1653   0016E8  6E13               	movwf	collect_avg_readings@green_read^0,c
  1654   0016EA  0E01               	movlw	high main@green_read
  1655   0016EC  6E14               	movwf	(collect_avg_readings@green_read+1)^0,c
  1656   0016EE  0EFB               	movlw	low main@blue_read
  1657   0016F0  6E15               	movwf	collect_avg_readings@blue_read^0,c
  1658   0016F2  0E01               	movlw	high main@blue_read
  1659   0016F4  6E16               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1660   0016F6  EC00  F012         	call	_collect_avg_readings	;wreg free
  1661   0016FA                     
  1662                           ;main.c: 106:         expected_values[RED][i] = red_read;
  1663   0016FA  0101               	movlb	1	; () banked
  1664   0016FC  51FD               	movf	main@i& (0+255),w,b
  1665   0016FE  0D02               	mullw	2
  1666   001700  0E00               	movlw	low main@expected_values
  1667   001702  24F3               	addwf	243,w,c
  1668   001704  6ED9               	movwf	fsr2l,c
  1669   001706  0E03               	movlw	high main@expected_values
  1670   001708  20F4               	addwfc	prodh,w,c
  1671   00170A  6EDA               	movwf	fsr2h,c
  1672   00170C  C1F7  FFDE         	movff	main@red_read,postinc2
  1673   001710  C1F8  FFDD         	movff	main@red_read+1,postdec2
  1674   001714                     
  1675                           ; BSR set to: 1
  1676                           ;main.c: 107:         expected_values[GREEN][i] = green_read;
  1677   001714  51FD               	movf	main@i& (0+255),w,b
  1678   001716  0D02               	mullw	2
  1679   001718  0E12               	movlw	18
  1680   00171A  26F3               	addwf	243,f,c
  1681   00171C  0E00               	movlw	0
  1682   00171E  22F4               	addwfc	244,f,c
  1683   001720  0E00               	movlw	low main@expected_values
  1684   001722  24F3               	addwf	243,w,c
  1685   001724  6ED9               	movwf	fsr2l,c
  1686   001726  0E03               	movlw	high main@expected_values
  1687   001728  20F4               	addwfc	prodh,w,c
  1688   00172A  6EDA               	movwf	fsr2h,c
  1689   00172C  C1F9  FFDE         	movff	main@green_read,postinc2
  1690   001730  C1FA  FFDD         	movff	main@green_read+1,postdec2
  1691   001734                     
  1692                           ; BSR set to: 1
  1693                           ;main.c: 108:         expected_values[BLUE][i] = blue_read;
  1694   001734  51FD               	movf	main@i& (0+255),w,b
  1695   001736  0D02               	mullw	2
  1696   001738  0E24               	movlw	36
  1697   00173A  26F3               	addwf	243,f,c
  1698   00173C  0E00               	movlw	0
  1699   00173E  22F4               	addwfc	244,f,c
  1700   001740  0E00               	movlw	low main@expected_values
  1701   001742  24F3               	addwf	243,w,c
  1702   001744  6ED9               	movwf	fsr2l,c
  1703   001746  0E03               	movlw	high main@expected_values
  1704   001748  20F4               	addwfc	prodh,w,c
  1705   00174A  6EDA               	movwf	fsr2h,c
  1706   00174C  C1FB  FFDE         	movff	main@blue_read,postinc2
  1707   001750  C1FC  FFDD         	movff	main@blue_read+1,postdec2
  1708   001754                     
  1709                           ; BSR set to: 1
  1710                           ;main.c: 109:         expected_values[3][i] = clear_read;
  1711   001754  51FD               	movf	main@i& (0+255),w,b
  1712   001756  0D02               	mullw	2
  1713   001758  0E36               	movlw	54
  1714   00175A  26F3               	addwf	243,f,c
  1715   00175C  0E00               	movlw	0
  1716   00175E  22F4               	addwfc	244,f,c
  1717   001760  0E00               	movlw	low main@expected_values
  1718   001762  24F3               	addwf	243,w,c
  1719   001764  6ED9               	movwf	fsr2l,c
  1720   001766  0E03               	movlw	high main@expected_values
  1721   001768  20F4               	addwfc	prodh,w,c
  1722   00176A  6EDA               	movwf	fsr2h,c
  1723   00176C  C1FE  FFDE         	movff	main@clear_read,postinc2
  1724   001770  C1FF  FFDD         	movff	main@clear_read+1,postdec2
  1725   001774                     
  1726                           ; BSR set to: 1
  1727                           ;main.c: 110:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i );
  1728   001774  0E5A               	movlw	low main@buf
  1729   001776  0100               	movlb	0	; () banked
  1730   001778  6F66               	movwf	sprintf@s& (0+255),b
  1731   00177A  0E01               	movlw	high main@buf
  1732   00177C  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1733   00177E  0E01               	movlw	low STR_1
  1734   001780  6F68               	movwf	sprintf@fmt& (0+255),b
  1735   001782  0E0E               	movlw	high STR_1
  1736   001784  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1737   001786  C1FE  F06A         	movff	main@clear_read,?_sprintf+4
  1738   00178A  C1FF  F06B         	movff	main@clear_read+1,?_sprintf+5
  1739   00178E  C1F7  F06C         	movff	main@red_read,?_sprintf+6
  1740   001792  C1F8  F06D         	movff	main@red_read+1,?_sprintf+7
  1741   001796  C1F9  F06E         	movff	main@green_read,?_sprintf+8
  1742   00179A  C1FA  F06F         	movff	main@green_read+1,?_sprintf+9
  1743   00179E  C1FB  F070         	movff	main@blue_read,?_sprintf+10
  1744   0017A2  C1FC  F071         	movff	main@blue_read+1,?_sprintf+11
  1745   0017A6  C1FD  F072         	movff	main@i,?_sprintf+12
  1746   0017AA  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1747   0017AC  EC17  F01B         	call	_sprintf	;wreg free
  1748   0017B0                     
  1749                           ;main.c: 111:         sendStringSerial4(buf);
  1750   0017B0  0E5A               	movlw	low main@buf
  1751   0017B2  6E05               	movwf	sendStringSerial4@string^0,c
  1752   0017B4  0E01               	movlw	high main@buf
  1753   0017B6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1754   0017B8  EC81  F01C         	call	_sendStringSerial4	;wreg free
  1755   0017BC                     
  1756                           ;main.c: 112:     }
  1757   0017BC  0101               	movlb	1	; () banked
  1758   0017BE  2BFD               	incf	main@i& (0+255),f,b
  1759   0017C0                     
  1760                           ; BSR set to: 1
  1761   0017C0  0E08               	movlw	8
  1762   0017C2  65FD               	cpfsgt	main@i& (0+255),b
  1763   0017C4  EFE6  F00B         	goto	u2521
  1764   0017C8  EFE8  F00B         	goto	u2520
  1765   0017CC                     u2521:
  1766   0017CC  EF1E  F00B         	goto	l246
  1767   0017D0                     u2520:
  1768   0017D0                     
  1769                           ; BSR set to: 1
  1770                           ;main.c: 113:     LATDbits.LATD4 = 1;
  1771   0017D0  887C               	bsf	124,4,c	;volatile
  1772                           
  1773                           ;main.c: 114:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1774   0017D2  EFEC  F00B         	goto	l249
  1775   0017D6                     l250:
  1776   0017D6  987C               	bcf	124,4,c	;volatile
  1777   0017D8                     l249:
  1778   0017D8  B48E               	btfsc	142,2,c	;volatile
  1779   0017DA  EFF1  F00B         	goto	u2531
  1780   0017DE  EFF3  F00B         	goto	u2530
  1781   0017E2                     u2531:
  1782   0017E2  EFEB  F00B         	goto	l250
  1783   0017E6                     u2530:
  1784   0017E6                     
  1785                           ;main.c: 115:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1786   0017E6  0E5A               	movlw	low main@buf
  1787   0017E8  0100               	movlb	0	; () banked
  1788   0017EA  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1789   0017EC  0E01               	movlw	high main@buf
  1790   0017EE  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1791   0017F0  0EFE               	movlw	low main@clear_read
  1792   0017F2  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1793   0017F4  0E01               	movlw	high main@clear_read
  1794   0017F6  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1795   0017F8  0EF3               	movlw	low main@clear_read_check
  1796   0017FA  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1797   0017FC  0E01               	movlw	high main@clear_read_check
  1798   0017FE  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1799   001800  ECCD  F016         	call	_clear_read_calibration	;wreg free
  1800                           
  1801                           ;main.c: 117:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  1802   001804  0E5A               	movlw	low main@buf
  1803   001806  0100               	movlb	0	; () banked
  1804   001808  6F66               	movwf	sprintf@s& (0+255),b
  1805   00180A  0E01               	movlw	high main@buf
  1806   00180C  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1807   00180E  0EC2               	movlw	low STR_2
  1808   001810  6F68               	movwf	sprintf@fmt& (0+255),b
  1809   001812  0E0E               	movlw	high STR_2
  1810   001814  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1811   001816  C1FE  F06A         	movff	main@clear_read,?_sprintf+4
  1812   00181A  C1FF  F06B         	movff	main@clear_read+1,?_sprintf+5
  1813   00181E  EC17  F01B         	call	_sprintf	;wreg free
  1814   001822                     
  1815                           ;main.c: 118:     sendStringSerial4(buf);
  1816   001822  0E5A               	movlw	low main@buf
  1817   001824  6E05               	movwf	sendStringSerial4@string^0,c
  1818   001826  0E01               	movlw	high main@buf
  1819   001828  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1820   00182A  EC81  F01C         	call	_sendStringSerial4	;wreg free
  1821   00182E                     l252:
  1822   00182E  B48E               	btfsc	142,2,c	;volatile
  1823   001830  EF1C  F00C         	goto	u2541
  1824   001834  EF1E  F00C         	goto	u2540
  1825   001838                     u2541:
  1826   001838  EF17  F00C         	goto	l252
  1827   00183C                     u2540:
  1828   00183C                     l4935:
  1829                           
  1830                           ;main.c: 125:     fullSpeedAhead(&motorL, &motorR);
  1831   00183C  0ED6               	movlw	low main@motorL
  1832   00183E  6E17               	movwf	fullSpeedAhead@mL^0,c
  1833   001840  0E02               	movlw	high main@motorL
  1834   001842  6E18               	movwf	(fullSpeedAhead@mL+1)^0,c
  1835   001844  0E48               	movlw	low main@motorR
  1836   001846  6E19               	movwf	fullSpeedAhead@mR^0,c
  1837   001848  0E03               	movlw	high main@motorR
  1838   00184A  6E1A               	movwf	(fullSpeedAhead@mR+1)^0,c
  1839   00184C  EC37  F019         	call	_fullSpeedAhead	;wreg free
  1840   001850                     l4937:
  1841                           
  1842                           ;main.c: 128:         if (TimerFlag == 1){
  1843   001850  0102               	movlb	2	; () banked
  1844   001852  0558               	decf	_TimerFlag& (0+255),w,b
  1845   001854  1159               	iorwf	(_TimerFlag+1)& (0+255),w,b
  1846   001856  A4D8               	btfss	status,2,c
  1847   001858  EF30  F00C         	goto	u2551
  1848   00185C  EF32  F00C         	goto	u2550
  1849   001860                     u2551:
  1850   001860  EF61  F00C         	goto	l4947
  1851   001864                     u2550:
  1852   001864                     
  1853                           ; BSR set to: 2
  1854                           ;main.c: 129:             TimerCount += 1;
  1855   001864  0101               	movlb	1	; () banked
  1856   001866  4BF1               	infsnz	main@TimerCount& (0+255),f,b
  1857   001868  2BF2               	incf	(main@TimerCount+1)& (0+255),f,b
  1858   00186A                     
  1859                           ; BSR set to: 1
  1860                           ;main.c: 130:             if (TimerCount % 10 == 0){LATHbits.LATH3=!LATHbits.LATH3;}
  1861   00186A  C1F1  F004         	movff	main@TimerCount,___lwmod@dividend
  1862   00186E  C1F2  F005         	movff	main@TimerCount+1,___lwmod@dividend+1
  1863   001872  0E00               	movlw	0
  1864   001874  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1865   001876  0E0A               	movlw	10
  1866   001878  6E06               	movwf	___lwmod@divisor^0,c
  1867   00187A  ECBB  F01A         	call	___lwmod	;wreg free
  1868   00187E  5004               	movf	?___lwmod^0,w,c
  1869   001880  1005               	iorwf	(?___lwmod+1)^0,w,c
  1870   001882  A4D8               	btfss	status,2,c
  1871   001884  EF46  F00C         	goto	u2561
  1872   001888  EF48  F00C         	goto	u2560
  1873   00188C                     u2561:
  1874   00188C  EF5C  F00C         	goto	l4945
  1875   001890                     u2560:
  1876   001890  A680               	btfss	128,3,c	;volatile
  1877   001892  EF4D  F00C         	goto	u2571
  1878   001896  EF52  F00C         	goto	u2570
  1879   00189A                     u2571:
  1880   00189A  0100               	movlb	0	; () banked
  1881   00189C  6BA7               	clrf	??_main& (0+255),b
  1882   00189E  2BA7               	incf	??_main& (0+255),f,b
  1883   0018A0  EF54  F00C         	goto	u2588
  1884   0018A4                     u2570:
  1885   0018A4  0100               	movlb	0	; () banked
  1886   0018A6  6BA7               	clrf	??_main& (0+255),b
  1887   0018A8                     u2588:
  1888   0018A8  47A7               	rlncf	??_main& (0+255),f,b
  1889   0018AA  47A7               	rlncf	??_main& (0+255),f,b
  1890   0018AC  47A7               	rlncf	??_main& (0+255),f,b
  1891   0018AE  5080               	movf	128,w,c	;volatile
  1892   0018B0  19A7               	xorwf	??_main& (0+255),w,b
  1893   0018B2  0BF7               	andlw	-9
  1894   0018B4  19A7               	xorwf	??_main& (0+255),w,b
  1895   0018B6  6E80               	movwf	128,c	;volatile
  1896   0018B8                     l4945:
  1897                           
  1898                           ;main.c: 131:             TimerFlag = 0;
  1899   0018B8  0E00               	movlw	0
  1900   0018BA  0102               	movlb	2	; () banked
  1901   0018BC  6F59               	movwf	(_TimerFlag+1)& (0+255),b
  1902   0018BE  0E00               	movlw	0
  1903   0018C0  6F58               	movwf	_TimerFlag& (0+255),b
  1904   0018C2                     l4947:
  1905                           
  1906                           ; BSR set to: 2
  1907                           ;main.c: 133:         clear_read = color_read_Clear();
  1908   0018C2  EC90  F01B         	call	_color_read_Clear	;wreg free
  1909   0018C6  C008  F1FE         	movff	?_color_read_Clear,main@clear_read
  1910   0018CA  C009  F1FF         	movff	?_color_read_Clear+1,main@clear_read+1
  1911   0018CE                     
  1912                           ;main.c: 134:         if (clear_read > clear_read_check){
  1913   0018CE  0101               	movlb	1	; () banked
  1914   0018D0  51FE               	movf	main@clear_read& (0+255),w,b
  1915   0018D2  5DF3               	subwf	main@clear_read_check& (0+255),w,b
  1916   0018D4  51FF               	movf	(main@clear_read+1)& (0+255),w,b
  1917   0018D6  59F4               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1918   0018D8  B0D8               	btfsc	status,0,c
  1919   0018DA  EF71  F00C         	goto	u2591
  1920   0018DE  EF73  F00C         	goto	u2590
  1921   0018E2                     u2591:
  1922   0018E2  EF28  F00C         	goto	l4937
  1923   0018E6                     u2590:
  1924   0018E6                     
  1925                           ; BSR set to: 1
  1926                           ;main.c: 136:             sprintf(buf, "Cardcount %d \n", CardCount);
  1927   0018E6  0E5A               	movlw	low main@buf
  1928   0018E8  0100               	movlb	0	; () banked
  1929   0018EA  6F66               	movwf	sprintf@s& (0+255),b
  1930   0018EC  0E01               	movlw	high main@buf
  1931   0018EE  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1932   0018F0  0ED9               	movlw	low STR_3
  1933   0018F2  6F68               	movwf	sprintf@fmt& (0+255),b
  1934   0018F4  0E0E               	movlw	high STR_3
  1935   0018F6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1936   0018F8  C1F5  F06A         	movff	main@CardCount,?_sprintf+4
  1937   0018FC  C1F6  F06B         	movff	main@CardCount+1,?_sprintf+5
  1938   001900  EC17  F01B         	call	_sprintf	;wreg free
  1939   001904                     
  1940                           ;main.c: 137:             sendStringSerial4(buf);
  1941   001904  0E5A               	movlw	low main@buf
  1942   001906  6E05               	movwf	sendStringSerial4@string^0,c
  1943   001908  0E01               	movlw	high main@buf
  1944   00190A  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1945   00190C  EC81  F01C         	call	_sendStringSerial4	;wreg free
  1946   001910                     
  1947                           ;main.c: 139:             ReturnHomeTimes[CardCount] = TimerCount;
  1948   001910  90D8               	bcf	status,0,c
  1949   001912  0101               	movlb	1	; () banked
  1950   001914  35F5               	rlcf	main@CardCount& (0+255),w,b
  1951   001916  6ED9               	movwf	fsr2l,c
  1952   001918  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1953   00191A  6EDA               	movwf	fsr2h,c
  1954   00191C  0E7C               	movlw	low main@ReturnHomeTimes
  1955   00191E  26D9               	addwf	fsr2l,f,c
  1956   001920  0E02               	movlw	high main@ReturnHomeTimes
  1957   001922  22DA               	addwfc	fsr2h,f,c
  1958   001924  C1F1  FFDE         	movff	main@TimerCount,postinc2
  1959   001928  C1F2  FFDD         	movff	main@TimerCount+1,postdec2
  1960   00192C                     
  1961                           ; BSR set to: 1
  1962                           ;main.c: 141:             sprintf(buf, "Timercount array reading %d \n", ReturnHomeTimes
      +                          [CardCount]);
  1963   00192C  0E5A               	movlw	low main@buf
  1964   00192E  0100               	movlb	0	; () banked
  1965   001930  6F66               	movwf	sprintf@s& (0+255),b
  1966   001932  0E01               	movlw	high main@buf
  1967   001934  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1968   001936  0E57               	movlw	low STR_4
  1969   001938  6F68               	movwf	sprintf@fmt& (0+255),b
  1970   00193A  0E0E               	movlw	high STR_4
  1971   00193C  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1972   00193E  90D8               	bcf	status,0,c
  1973   001940  0101               	movlb	1	; () banked
  1974   001942  35F5               	rlcf	main@CardCount& (0+255),w,b
  1975   001944  6ED9               	movwf	fsr2l,c
  1976   001946  35F6               	rlcf	(main@CardCount+1)& (0+255),w,b
  1977   001948  6EDA               	movwf	fsr2h,c
  1978   00194A  0E7C               	movlw	low main@ReturnHomeTimes
  1979   00194C  26D9               	addwf	fsr2l,f,c
  1980   00194E  0E02               	movlw	high main@ReturnHomeTimes
  1981   001950  22DA               	addwfc	fsr2h,f,c
  1982   001952  CFDE F06A          	movff	postinc2,?_sprintf+4
  1983   001956  CFDD F06B          	movff	postdec2,?_sprintf+5
  1984   00195A  EC17  F01B         	call	_sprintf	;wreg free
  1985   00195E                     
  1986                           ;main.c: 142:             sendStringSerial4(buf);
  1987   00195E  0E5A               	movlw	low main@buf
  1988   001960  6E05               	movwf	sendStringSerial4@string^0,c
  1989   001962  0E01               	movlw	high main@buf
  1990   001964  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  1991   001966  EC81  F01C         	call	_sendStringSerial4	;wreg free
  1992   00196A                     
  1993                           ;main.c: 144:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1994   00196A  0E2A               	movlw	42
  1995   00196C  0100               	movlb	0	; () banked
  1996   00196E  6FA7               	movwf	??_main& (0+255),b
  1997   001970  0E8D               	movlw	141
  1998   001972                     u2637:
  1999   001972  2EE8               	decfsz	wreg,f,c
  2000   001974  D7FE               	bra	u2637
  2001   001976  2FA7               	decfsz	??_main& (0+255),f,b
  2002   001978  D7FC               	bra	u2637
  2003   00197A  D000               	nop2	
  2004   00197C                     
  2005                           ;main.c: 145:             stop(&motorL, &motorR);
  2006   00197C  0ED6               	movlw	low main@motorL
  2007   00197E  6E17               	movwf	stop@mL^0,c
  2008   001980  0E02               	movlw	high main@motorL
  2009   001982  6E18               	movwf	(stop@mL+1)^0,c
  2010   001984  0E48               	movlw	low main@motorR
  2011   001986  6E19               	movwf	stop@mR^0,c
  2012   001988  0E03               	movlw	high main@motorR
  2013   00198A  6E1A               	movwf	(stop@mR+1)^0,c
  2014   00198C  ECC1  F019         	call	_stop	;wreg free
  2015   001990                     
  2016                           ;main.c: 146:             _delay((unsigned long)((20)*(64000000/4000.0)));
  2017   001990  0E02               	movlw	2
  2018   001992  0100               	movlb	0	; () banked
  2019   001994  6FA8               	movwf	(??_main+1)& (0+255),b
  2020   001996  0EA0               	movlw	160
  2021   001998  6FA7               	movwf	??_main& (0+255),b
  2022   00199A  0E92               	movlw	146
  2023   00199C                     u2647:
  2024   00199C  2EE8               	decfsz	wreg,f,c
  2025   00199E  D7FE               	bra	u2647
  2026   0019A0  2FA7               	decfsz	??_main& (0+255),f,b
  2027   0019A2  D7FC               	bra	u2647
  2028   0019A4  2FA8               	decfsz	(??_main+1)& (0+255),f,b
  2029   0019A6  D7FA               	bra	u2647
  2030   0019A8  F000               	nop	
  2031   0019AA                     
  2032                           ;main.c: 147:             reverseFullSpeed(&motorL, &motorR);
  2033   0019AA  0ED6               	movlw	low main@motorL
  2034   0019AC  6E17               	movwf	reverseFullSpeed@mL^0,c
  2035   0019AE  0E02               	movlw	high main@motorL
  2036   0019B0  6E18               	movwf	(reverseFullSpeed@mL+1)^0,c
  2037   0019B2  0E48               	movlw	low main@motorR
  2038   0019B4  6E19               	movwf	reverseFullSpeed@mR^0,c
  2039   0019B6  0E03               	movlw	high main@motorR
  2040   0019B8  6E1A               	movwf	(reverseFullSpeed@mR+1)^0,c
  2041   0019BA  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  2042   0019BE                     
  2043                           ;main.c: 148:             _delay((unsigned long)((150)*(64000000/4000.0)));
  2044   0019BE  0E0D               	movlw	13
  2045   0019C0  0100               	movlb	0	; () banked
  2046   0019C2  6FA8               	movwf	(??_main+1)& (0+255),b
  2047   0019C4  0E2D               	movlw	45
  2048   0019C6  6FA7               	movwf	??_main& (0+255),b
  2049   0019C8  0ED7               	movlw	215
  2050   0019CA                     u2657:
  2051   0019CA  2EE8               	decfsz	wreg,f,c
  2052   0019CC  D7FE               	bra	u2657
  2053   0019CE  2FA7               	decfsz	??_main& (0+255),f,b
  2054   0019D0  D7FC               	bra	u2657
  2055   0019D2  2FA8               	decfsz	(??_main+1)& (0+255),f,b
  2056   0019D4  D7FA               	bra	u2657
  2057   0019D6  D000               	nop2	
  2058   0019D8                     
  2059                           ;main.c: 149:             stop(&motorL, &motorR);
  2060   0019D8  0ED6               	movlw	low main@motorL
  2061   0019DA  6E17               	movwf	stop@mL^0,c
  2062   0019DC  0E02               	movlw	high main@motorL
  2063   0019DE  6E18               	movwf	(stop@mL+1)^0,c
  2064   0019E0  0E48               	movlw	low main@motorR
  2065   0019E2  6E19               	movwf	stop@mR^0,c
  2066   0019E4  0E03               	movlw	high main@motorR
  2067   0019E6  6E1A               	movwf	(stop@mR+1)^0,c
  2068   0019E8  ECC1  F019         	call	_stop	;wreg free
  2069   0019EC                     
  2070                           ;main.c: 150:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2071   0019EC  0E2A               	movlw	42
  2072   0019EE  0100               	movlb	0	; () banked
  2073   0019F0  6FA7               	movwf	??_main& (0+255),b
  2074   0019F2  0E8D               	movlw	141
  2075   0019F4                     u2667:
  2076   0019F4  2EE8               	decfsz	wreg,f,c
  2077   0019F6  D7FE               	bra	u2667
  2078   0019F8  2FA7               	decfsz	??_main& (0+255),f,b
  2079   0019FA  D7FC               	bra	u2667
  2080   0019FC  D000               	nop2	
  2081   0019FE                     
  2082                           ;main.c: 153:             card = card_response(buf, &clear_read, &red_read, &green_read,
      +                           &blue_read, expected_values, card, &motorL, &motorR, ReturnHomeTimes, ReturnHomeCards);
  2083   0019FE  0E5A               	movlw	low main@buf
  2084   001A00  0100               	movlb	0	; () banked
  2085   001A02  6F92               	movwf	card_response@buf& (0+255),b
  2086   001A04  0E01               	movlw	high main@buf
  2087   001A06  6F93               	movwf	(card_response@buf+1)& (0+255),b
  2088   001A08  0EFE               	movlw	low main@clear_read
  2089   001A0A  6F94               	movwf	card_response@clear_read& (0+255),b
  2090   001A0C  0E01               	movlw	high main@clear_read
  2091   001A0E  6F95               	movwf	(card_response@clear_read+1)& (0+255),b
  2092   001A10  0EF7               	movlw	low main@red_read
  2093   001A12  6F96               	movwf	card_response@red_read& (0+255),b
  2094   001A14  0E01               	movlw	high main@red_read
  2095   001A16  6F97               	movwf	(card_response@red_read+1)& (0+255),b
  2096   001A18  0EF9               	movlw	low main@green_read
  2097   001A1A  6F98               	movwf	card_response@green_read& (0+255),b
  2098   001A1C  0E01               	movlw	high main@green_read
  2099   001A1E  6F99               	movwf	(card_response@green_read+1)& (0+255),b
  2100   001A20  0EFB               	movlw	low main@blue_read
  2101   001A22  6F9A               	movwf	card_response@blue_read& (0+255),b
  2102   001A24  0E01               	movlw	high main@blue_read
  2103   001A26  6F9B               	movwf	(card_response@blue_read+1)& (0+255),b
  2104   001A28  0E00               	movlw	low main@expected_values
  2105   001A2A  6F9C               	movwf	card_response@expected_values& (0+255),b
  2106   001A2C  0E03               	movlw	high main@expected_values
  2107   001A2E  6F9D               	movwf	(card_response@expected_values+1)& (0+255),b
  2108   001A30  C1F0  F09E         	movff	main@card,card_response@card
  2109   001A34  0ED6               	movlw	low main@motorL
  2110   001A36  6F9F               	movwf	card_response@mL& (0+255),b
  2111   001A38  0E02               	movlw	high main@motorL
  2112   001A3A  6FA0               	movwf	(card_response@mL+1)& (0+255),b
  2113   001A3C  0E48               	movlw	low main@motorR
  2114   001A3E  6FA1               	movwf	card_response@mR& (0+255),b
  2115   001A40  0E03               	movlw	high main@motorR
  2116   001A42  6FA2               	movwf	(card_response@mR+1)& (0+255),b
  2117   001A44  0E7C               	movlw	low main@ReturnHomeTimes
  2118   001A46  6FA3               	movwf	card_response@ReturnHomeTimes& (0+255),b
  2119   001A48  0E02               	movlw	high main@ReturnHomeTimes
  2120   001A4A  6FA4               	movwf	(card_response@ReturnHomeTimes+1)& (0+255),b
  2121   001A4C  0EB8               	movlw	low main@ReturnHomeCards
  2122   001A4E  6FA5               	movwf	card_response@ReturnHomeCards& (0+255),b
  2123   001A50  0E02               	movlw	high main@ReturnHomeCards
  2124   001A52  6FA6               	movwf	(card_response@ReturnHomeCards+1)& (0+255),b
  2125   001A54  ECB7  F014         	call	_card_response	;wreg free
  2126   001A58  0101               	movlb	1	; () banked
  2127   001A5A  6FF0               	movwf	main@card& (0+255),b
  2128   001A5C                     
  2129                           ; BSR set to: 1
  2130                           ;main.c: 154:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2131   001A5C  0E2A               	movlw	42
  2132   001A5E  0100               	movlb	0	; () banked
  2133   001A60  6FA7               	movwf	??_main& (0+255),b
  2134   001A62  0E8D               	movlw	141
  2135   001A64                     u2677:
  2136   001A64  2EE8               	decfsz	wreg,f,c
  2137   001A66  D7FE               	bra	u2677
  2138   001A68  2FA7               	decfsz	??_main& (0+255),f,b
  2139   001A6A  D7FC               	bra	u2677
  2140   001A6C  D000               	nop2	
  2141   001A6E                     
  2142                           ;main.c: 155:             ReturnHomeCards[CardCount] = card;
  2143   001A6E  0EB8               	movlw	low main@ReturnHomeCards
  2144   001A70  0101               	movlb	1	; () banked
  2145   001A72  25F5               	addwf	main@CardCount& (0+255),w,b
  2146   001A74  6ED9               	movwf	fsr2l,c
  2147   001A76  0E02               	movlw	high main@ReturnHomeCards
  2148   001A78  21F6               	addwfc	(main@CardCount+1)& (0+255),w,b
  2149   001A7A  6EDA               	movwf	fsr2h,c
  2150   001A7C  C1F0  FFDF         	movff	main@card,indf2
  2151   001A80                     
  2152                           ; BSR set to: 1
  2153                           ;main.c: 156:             sprintf(buf, "Card %d \n", ReturnHomeCards[CardCount]);
  2154   001A80  0E5A               	movlw	low main@buf
  2155   001A82  0100               	movlb	0	; () banked
  2156   001A84  6F66               	movwf	sprintf@s& (0+255),b
  2157   001A86  0E01               	movlw	high main@buf
  2158   001A88  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2159   001A8A  0EF2               	movlw	low STR_5
  2160   001A8C  6F68               	movwf	sprintf@fmt& (0+255),b
  2161   001A8E  0E0E               	movlw	high STR_5
  2162   001A90  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2163   001A92  0EB8               	movlw	low main@ReturnHomeCards
  2164   001A94  0101               	movlb	1	; () banked
  2165   001A96  25F5               	addwf	main@CardCount& (0+255),w,b
  2166   001A98  6ED9               	movwf	fsr2l,c
  2167   001A9A  0E02               	movlw	high main@ReturnHomeCards
  2168   001A9C  21F6               	addwfc	(main@CardCount+1)& (0+255),w,b
  2169   001A9E  6EDA               	movwf	fsr2h,c
  2170   001AA0  50DF               	movf	indf2,w,c
  2171   001AA2  0100               	movlb	0	; () banked
  2172   001AA4  6FA7               	movwf	??_main& (0+255),b
  2173   001AA6  51A7               	movf	??_main& (0+255),w,b
  2174   001AA8  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  2175   001AAA  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2176   001AAC  EC17  F01B         	call	_sprintf	;wreg free
  2177   001AB0                     
  2178                           ;main.c: 157:             sendStringSerial4(buf);
  2179   001AB0  0E5A               	movlw	low main@buf
  2180   001AB2  6E05               	movwf	sendStringSerial4@string^0,c
  2181   001AB4  0E01               	movlw	high main@buf
  2182   001AB6  6E06               	movwf	(sendStringSerial4@string+1)^0,c
  2183   001AB8  EC81  F01C         	call	_sendStringSerial4	;wreg free
  2184   001ABC                     
  2185                           ;main.c: 159:             CardCount += 1;
  2186   001ABC  0101               	movlb	1	; () banked
  2187   001ABE  4BF5               	infsnz	main@CardCount& (0+255),f,b
  2188   001AC0  2BF6               	incf	(main@CardCount+1)& (0+255),f,b
  2189   001AC2                     
  2190                           ; BSR set to: 1
  2191                           ;main.c: 161:             TimerCount = 0;
  2192   001AC2  0E00               	movlw	0
  2193   001AC4  6FF2               	movwf	(main@TimerCount+1)& (0+255),b
  2194   001AC6  0E00               	movlw	0
  2195   001AC8  6FF1               	movwf	main@TimerCount& (0+255),b
  2196   001ACA  EF1E  F00C         	goto	l4935
  2197   001ACE  EF2E  F000         	goto	start
  2198   001AD2                     __end_of_main:
  2199                           	callstack 0
  2200                           
  2201 ;; *************** function _initUSART4 *****************
  2202 ;; Defined at:
  2203 ;;		line 6 in file "serial.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, status,2
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; Hardware stack levels required when called: 1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text1
  2232   0039FE                     __ptext1:
  2233                           	callstack 0
  2234   0039FE                     _initUSART4:
  2235                           	callstack 29
  2236   0039FE                     
  2237                           ;serial.c: 10:     RC0PPS = 0x12;
  2238   0039FE  0E12               	movlw	18
  2239   003A00  010E               	movlb	14	; () banked
  2240   003A02  6F62               	movwf	98,b	;volatile
  2241                           
  2242                           ;serial.c: 11:     RX4PPS = 0x11;
  2243   003A04  0E11               	movlw	17
  2244   003A06  6F15               	movwf	21,b	;volatile
  2245   003A08                     
  2246                           ; BSR set to: 14
  2247                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  2248   003A08  8283               	bsf	131,1,c	;volatile
  2249   003A0A                     
  2250                           ; BSR set to: 14
  2251                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  2252   003A0A  97E9               	bcf	233,3,b	;volatile
  2253   003A0C                     
  2254                           ; BSR set to: 14
  2255                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  2256   003A0C  95E8               	bcf	232,2,b	;volatile
  2257                           
  2258                           ;serial.c: 17:     SP4BRGL = 51;
  2259   003A0E  0E33               	movlw	51
  2260   003A10  6FE5               	movwf	229,b	;volatile
  2261                           
  2262                           ;serial.c: 18:     SP4BRGH = 0;
  2263   003A12  0E00               	movlw	0
  2264   003A14  6FE6               	movwf	230,b	;volatile
  2265   003A16                     
  2266                           ; BSR set to: 14
  2267                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  2268   003A16  89E7               	bsf	231,4,b	;volatile
  2269   003A18                     
  2270                           ; BSR set to: 14
  2271                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  2272   003A18  8BE8               	bsf	232,5,b	;volatile
  2273   003A1A                     
  2274                           ; BSR set to: 14
  2275                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  2276   003A1A  8FE7               	bsf	231,7,b	;volatile
  2277   003A1C                     
  2278                           ; BSR set to: 14
  2279   003A1C  0012               	return		;funcret
  2280   003A1E                     __end_of_initUSART4:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _initDCmotorsPWM *****************
  2284 ;; Defined at:
  2285 ;;		line 6 in file "dc_motor.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used: 1
  2305 ;; Hardware stack levels required when called: 1
  2306 ;; This function calls:
  2307 ;;		Nothing
  2308 ;; This function is called by:
  2309 ;;		_main
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text2
  2314   0032FA                     __ptext2:
  2315                           	callstack 0
  2316   0032FA                     _initDCmotorsPWM:
  2317                           	callstack 29
  2318   0032FA                     
  2319                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  2320   0032FA  9485               	bcf	133,2,c	;volatile
  2321                           
  2322                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  2323   0032FC  9885               	bcf	133,4,c	;volatile
  2324                           
  2325                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  2326   0032FE  9E83               	bcf	131,7,c	;volatile
  2327                           
  2328                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  2329   003300  9C87               	bcf	135,6,c	;volatile
  2330   003302                     
  2331                           ;dc_motor.c: 14:     RE2PPS=0x05;
  2332   003302  0E05               	movlw	5
  2333   003304  010E               	movlb	14	; () banked
  2334   003306  6F74               	movwf	116,b	;volatile
  2335                           
  2336                           ;dc_motor.c: 15:     RE4PPS=0x06;
  2337   003308  0E06               	movlw	6
  2338   00330A  6F76               	movwf	118,b	;volatile
  2339                           
  2340                           ;dc_motor.c: 16:     RC7PPS=0x07;
  2341   00330C  0E07               	movlw	7
  2342   00330E  6F69               	movwf	105,b	;volatile
  2343                           
  2344                           ;dc_motor.c: 17:     RG6PPS=0x08;
  2345   003310  0E08               	movlw	8
  2346   003312  6F88               	movwf	136,b	;volatile
  2347                           
  2348                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  2349   003314  50BD               	movf	189,w,c	;volatile
  2350   003316  0B8F               	andlw	-113
  2351   003318  0940               	iorlw	64
  2352   00331A  6EBD               	movwf	189,c	;volatile
  2353                           
  2354                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  2355   00331C  0EE0               	movlw	-32
  2356   00331E  16BE               	andwf	190,f,c	;volatile
  2357                           
  2358                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  2359   003320  50BF               	movf	191,w,c	;volatile
  2360   003322  0BF0               	andlw	-16
  2361   003324  0901               	iorlw	1
  2362   003326  6EBF               	movwf	191,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 26:     T2PR=99;
  2365   003328  0E63               	movlw	99
  2366   00332A  6EBC               	movwf	188,c	;volatile
  2367   00332C                     
  2368                           ; BSR set to: 14
  2369                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  2370   00332C  8EBD               	bsf	189,7,c	;volatile
  2371                           
  2372                           ;dc_motor.c: 31:     CCPR1H=0;
  2373   00332E  0E00               	movlw	0
  2374   003330  6EAA               	movwf	170,c	;volatile
  2375                           
  2376                           ;dc_motor.c: 32:     CCPR2H=0;
  2377   003332  0E00               	movlw	0
  2378   003334  6EA6               	movwf	166,c	;volatile
  2379                           
  2380                           ;dc_motor.c: 33:     CCPR3H=0;
  2381   003336  0E00               	movlw	0
  2382   003338  010F               	movlb	15	; () banked
  2383   00333A  6F25               	movwf	37,b	;volatile
  2384                           
  2385                           ;dc_motor.c: 34:     CCPR4H=0;
  2386   00333C  0E00               	movlw	0
  2387   00333E  6F21               	movwf	33,b	;volatile
  2388                           
  2389                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  2390   003340  0EFC               	movlw	-4
  2391   003342  16AD               	andwf	173,f,c	;volatile
  2392                           
  2393                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  2394   003344  0EF3               	movlw	-13
  2395   003346  16AD               	andwf	173,f,c	;volatile
  2396                           
  2397                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  2398   003348  0ECF               	movlw	-49
  2399   00334A  16AD               	andwf	173,f,c	;volatile
  2400                           
  2401                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  2402   00334C  0E3F               	movlw	-193
  2403   00334E  16AD               	andwf	173,f,c	;volatile
  2404   003350                     
  2405                           ; BSR set to: 15
  2406                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  2407   003350  88AB               	bsf	171,4,c	;volatile
  2408                           
  2409                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  2410   003352  50AB               	movf	171,w,c	;volatile
  2411   003354  0BF0               	andlw	-16
  2412   003356  090C               	iorlw	12
  2413   003358  6EAB               	movwf	171,c	;volatile
  2414   00335A                     
  2415                           ; BSR set to: 15
  2416                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  2417   00335A  8EAB               	bsf	171,7,c	;volatile
  2418   00335C                     
  2419                           ; BSR set to: 15
  2420                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  2421   00335C  88A7               	bsf	167,4,c	;volatile
  2422                           
  2423                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  2424   00335E  50A7               	movf	167,w,c	;volatile
  2425   003360  0BF0               	andlw	-16
  2426   003362  090C               	iorlw	12
  2427   003364  6EA7               	movwf	167,c	;volatile
  2428   003366                     
  2429                           ; BSR set to: 15
  2430                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  2431   003366  8EA7               	bsf	167,7,c	;volatile
  2432   003368                     
  2433                           ; BSR set to: 15
  2434                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  2435   003368  8926               	bsf	38,4,b	;volatile
  2436                           
  2437                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  2438   00336A  5126               	movf	38,w,b	;volatile
  2439   00336C  0BF0               	andlw	-16
  2440   00336E  090C               	iorlw	12
  2441   003370  6F26               	movwf	38,b	;volatile
  2442   003372                     
  2443                           ; BSR set to: 15
  2444                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  2445   003372  8F26               	bsf	38,7,b	;volatile
  2446   003374                     
  2447                           ; BSR set to: 15
  2448                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  2449   003374  8922               	bsf	34,4,b	;volatile
  2450                           
  2451                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  2452   003376  5122               	movf	34,w,b	;volatile
  2453   003378  0BF0               	andlw	-16
  2454   00337A  090C               	iorlw	12
  2455   00337C  6F22               	movwf	34,b	;volatile
  2456   00337E                     
  2457                           ; BSR set to: 15
  2458                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  2459   00337E  8F22               	bsf	34,7,b	;volatile
  2460   003380                     
  2461                           ; BSR set to: 15
  2462   003380  0012               	return		;funcret
  2463   003382                     __end_of_initDCmotorsPWM:
  2464                           	callstack 0
  2465                           
  2466 ;; *************** function _color_click_init *****************
  2467 ;; Defined at:
  2468 ;;		line 5 in file "color.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;Total ram usage:        1 bytes
  2487 ;; Hardware stack levels used: 1
  2488 ;; Hardware stack levels required when called: 4
  2489 ;; This function calls:
  2490 ;;		_I2C_2_Master_Init
  2491 ;;		_color_writetoaddr
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text3
  2498   0038CE                     __ptext3:
  2499                           	callstack 0
  2500   0038CE                     _color_click_init:
  2501                           	callstack 26
  2502   0038CE                     
  2503                           ;color.c: 8:     I2C_2_Master_Init();
  2504   0038CE  EC99  F01C         	call	_I2C_2_Master_Init	;wreg free
  2505   0038D2                     
  2506                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2507   0038D2  0E01               	movlw	1
  2508   0038D4  6E06               	movwf	color_writetoaddr@value^0,c
  2509   0038D6  0E00               	movlw	0
  2510   0038D8  EC0F  F01D         	call	_color_writetoaddr
  2511   0038DC                     
  2512                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2513   0038DC  0E3F               	movlw	63
  2514   0038DE  6E08               	movwf	??_color_click_init^0,c
  2515   0038E0  0E55               	movlw	85
  2516   0038E2                     u2687:
  2517   0038E2  2EE8               	decfsz	wreg,f,c
  2518   0038E4  D7FE               	bra	u2687
  2519   0038E6  2E08               	decfsz	??_color_click_init^0,f,c
  2520   0038E8  D7FC               	bra	u2687
  2521   0038EA  F000               	nop	
  2522   0038EC                     
  2523                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2524   0038EC  0E03               	movlw	3
  2525   0038EE  6E06               	movwf	color_writetoaddr@value^0,c
  2526   0038F0  0E00               	movlw	0
  2527   0038F2  EC0F  F01D         	call	_color_writetoaddr
  2528   0038F6                     
  2529                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2530   0038F6  0ED5               	movlw	213
  2531   0038F8  6E06               	movwf	color_writetoaddr@value^0,c
  2532   0038FA  0E01               	movlw	1
  2533   0038FC  EC0F  F01D         	call	_color_writetoaddr
  2534   003900  0012               	return		;funcret
  2535   003902                     __end_of_color_click_init:
  2536                           	callstack 0
  2537                           
  2538 ;; *************** function _color_writetoaddr *****************
  2539 ;; Defined at:
  2540 ;;		line 21 in file "color.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  address         1    wreg     unsigned char 
  2543 ;;  value           1    5[COMRAM] unsigned char 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  address         1    6[COMRAM] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2555 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2559 ;;Total ram usage:        2 bytes
  2560 ;; Hardware stack levels used: 1
  2561 ;; Hardware stack levels required when called: 3
  2562 ;; This function calls:
  2563 ;;		_I2C_2_Master_Start
  2564 ;;		_I2C_2_Master_Stop
  2565 ;;		_I2C_2_Master_Write
  2566 ;; This function is called by:
  2567 ;;		_color_click_init
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text4
  2572   003A1E                     __ptext4:
  2573                           	callstack 0
  2574   003A1E                     _color_writetoaddr:
  2575                           	callstack 26
  2576                           
  2577                           ;incstack = 0
  2578                           ;color_writetoaddr@address stored from wreg
  2579   003A1E  6E07               	movwf	color_writetoaddr@address^0,c
  2580   003A20                     
  2581                           ;color.c: 22:     I2C_2_Master_Start();
  2582   003A20  EC45  F01D         	call	_I2C_2_Master_Start	;wreg free
  2583                           
  2584                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2585   003A24  0E52               	movlw	82
  2586   003A26  EC3A  F01D         	call	_I2C_2_Master_Write
  2587                           
  2588                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2589   003A2A  5007               	movf	color_writetoaddr@address^0,w,c
  2590   003A2C  0980               	iorlw	128
  2591   003A2E  EC3A  F01D         	call	_I2C_2_Master_Write
  2592                           
  2593                           ;color.c: 25:     I2C_2_Master_Write(value);
  2594   003A32  5006               	movf	color_writetoaddr@value^0,w,c
  2595   003A34  EC3A  F01D         	call	_I2C_2_Master_Write
  2596                           
  2597                           ;color.c: 26:     I2C_2_Master_Stop();
  2598   003A38  EC40  F01D         	call	_I2C_2_Master_Stop	;wreg free
  2599   003A3C  0012               	return		;funcret
  2600   003A3E                     __end_of_color_writetoaddr:
  2601                           	callstack 0
  2602                           
  2603 ;; *************** function _I2C_2_Master_Init *****************
  2604 ;; Defined at:
  2605 ;;		line 4 in file "i2c.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_color_click_init
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text5
  2635   003932                     __ptext5:
  2636                           	callstack 0
  2637   003932                     _I2C_2_Master_Init:
  2638                           	callstack 28
  2639   003932                     
  2640                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2641   003932  010E               	movlb	14	; () banked
  2642   003934  51D9               	movf	217,w,b	;volatile
  2643   003936  0BF0               	andlw	-16
  2644   003938  0908               	iorlw	8
  2645   00393A  6FD9               	movwf	217,b	;volatile
  2646   00393C                     
  2647                           ; BSR set to: 14
  2648                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2649   00393C  8BD9               	bsf	217,5,b	;volatile
  2650                           
  2651                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2652   00393E  0E9F               	movlw	159
  2653   003940  6FD6               	movwf	214,b	;volatile
  2654   003942                     
  2655                           ; BSR set to: 14
  2656                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2657   003942  8A84               	bsf	132,5,c	;volatile
  2658   003944                     
  2659                           ; BSR set to: 14
  2660                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2661   003944  8C84               	bsf	132,6,c	;volatile
  2662   003946                     
  2663                           ; BSR set to: 14
  2664                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2665   003946  9BA7               	bcf	167,5,b	;volatile
  2666   003948                     
  2667                           ; BSR set to: 14
  2668                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2669   003948  9DA7               	bcf	167,6,b	;volatile
  2670                           
  2671                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2672   00394A  0E1D               	movlw	29
  2673   00394C  6F1D               	movwf	29,b	;volatile
  2674                           
  2675                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2676   00394E  0E1E               	movlw	30
  2677   003950  6F1C               	movwf	28,b	;volatile
  2678                           
  2679                           ;i2c.c: 18:   RD5PPS=0x1C;
  2680   003952  0E1C               	movlw	28
  2681   003954  6F6F               	movwf	111,b	;volatile
  2682                           
  2683                           ;i2c.c: 19:   RD6PPS=0x1B;
  2684   003956  0E1B               	movlw	27
  2685   003958  6F70               	movwf	112,b	;volatile
  2686   00395A                     
  2687                           ; BSR set to: 14
  2688   00395A  0012               	return		;funcret
  2689   00395C                     __end_of_I2C_2_Master_Init:
  2690                           	callstack 0
  2691                           
  2692 ;; *************** function _clear_read_calibration *****************
  2693 ;; Defined at:
  2694 ;;		line 11 in file "colour_identify.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2697 ;;		 -> main@buf(150), 
  2698 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2699 ;;		 -> main@clear_read(2), 
  2700 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2701 ;;		 -> main@clear_read_check(2), 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  i               2   45[BANK0 ] int 
  2704 ;;  i               2   43[BANK0 ] int 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2714 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2715 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2717 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;Total ram usage:       14 bytes
  2719 ;; Hardware stack levels used: 1
  2720 ;; Hardware stack levels required when called: 9
  2721 ;; This function calls:
  2722 ;;		_color_read_Clear
  2723 ;;		_sendStringSerial4
  2724 ;;		_sprintf
  2725 ;; This function is called by:
  2726 ;;		_main
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text6
  2731   002D9A                     __ptext6:
  2732                           	callstack 0
  2733   002D9A                     _clear_read_calibration:
  2734                           	callstack 21
  2735   002D9A                     
  2736                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2737   002D9A  0E00               	movlw	0
  2738   002D9C  0100               	movlb	0	; () banked
  2739   002D9E  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2740   002DA0  0E00               	movlw	0
  2741   002DA2  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2742   002DA4                     l4701:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2746   002DA4  EC90  F01B         	call	_color_read_Clear	;wreg free
  2747   002DA8  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2748   002DAC  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2749   002DB0  C008  FFDE         	movff	?_color_read_Clear,postinc2
  2750   002DB4  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  2751   002DB8                     
  2752                           ;colour_identify.c: 15:     }
  2753   002DB8  0100               	movlb	0	; () banked
  2754   002DBA  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2755   002DBC  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2756   002DBE                     
  2757                           ; BSR set to: 0
  2758   002DBE  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2759   002DC0  EFEB  F016         	goto	u2441
  2760   002DC4  0EF5               	movlw	245
  2761   002DC6  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2762   002DC8  0E01               	movlw	1
  2763   002DCA  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2764   002DCC  A0D8               	btfss	status,0,c
  2765   002DCE  EFEB  F016         	goto	u2441
  2766   002DD2  EFED  F016         	goto	u2440
  2767   002DD6                     u2441:
  2768   002DD6  EFD2  F016         	goto	l4701
  2769   002DDA                     u2440:
  2770   002DDA                     
  2771                           ; BSR set to: 0
  2772                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2773   002DDA  0E00               	movlw	0
  2774   002DDC  6F8E               	movwf	(clear_read_calibration@i_1640+1)& (0+255),b
  2775   002DDE  0E00               	movlw	0
  2776   002DE0  6F8D               	movwf	clear_read_calibration@i_1640& (0+255),b
  2777   002DE2                     l4713:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2781   002DE2  EC90  F01B         	call	_color_read_Clear	;wreg free
  2782   002DE6  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2783   002DEA  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2784   002DEE  5008               	movf	?_color_read_Clear^0,w,c
  2785   002DF0  26DE               	addwf	postinc2,f,c
  2786   002DF2  5009               	movf	(?_color_read_Clear+1)^0,w,c
  2787   002DF4  22DD               	addwfc	postdec2,f,c
  2788   002DF6                     
  2789                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2790   002DF6  0E11               	movlw	17
  2791   002DF8  0100               	movlb	0	; () banked
  2792   002DFA  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2793   002DFC  0E3C               	movlw	60
  2794   002DFE  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2795   002E00  0ECB               	movlw	203
  2796   002E02                     u2697:
  2797   002E02  2EE8               	decfsz	wreg,f,c
  2798   002E04  D7FE               	bra	u2697
  2799   002E06  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2800   002E08  D7FC               	bra	u2697
  2801   002E0A  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2802   002E0C  D7FA               	bra	u2697
  2803   002E0E                     
  2804                           ;colour_identify.c: 20:     }
  2805   002E0E  0100               	movlb	0	; () banked
  2806   002E10  4B8D               	infsnz	clear_read_calibration@i_1640& (0+255),f,b
  2807   002E12  2B8E               	incf	(clear_read_calibration@i_1640+1)& (0+255),f,b
  2808   002E14                     
  2809                           ; BSR set to: 0
  2810   002E14  BF8E               	btfsc	(clear_read_calibration@i_1640+1)& (0+255),7,b
  2811   002E16  EF16  F017         	goto	u2451
  2812   002E1A  518E               	movf	(clear_read_calibration@i_1640+1)& (0+255),w,b
  2813   002E1C  E109               	bnz	u2450
  2814   002E1E  0E03               	movlw	3
  2815   002E20  5D8D               	subwf	clear_read_calibration@i_1640& (0+255),w,b
  2816   002E22  A0D8               	btfss	status,0,c
  2817   002E24  EF16  F017         	goto	u2451
  2818   002E28  EF18  F017         	goto	u2450
  2819   002E2C                     u2451:
  2820   002E2C  EFF1  F016         	goto	l4713
  2821   002E30                     u2450:
  2822   002E30                     
  2823                           ; BSR set to: 0
  2824                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2825   002E30  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2826   002E34  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2827   002E38  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2828   002E3C  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2829   002E40  90D8               	bcf	status,0,c
  2830   002E42  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2831   002E44  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2832   002E46  90D8               	bcf	status,0,c
  2833   002E48  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2834   002E4A  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2835   002E4C  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2836   002E50  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2837   002E54  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2838   002E58  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2839   002E5C                     
  2840                           ; BSR set to: 0
  2841                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2842   002E5C  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2843   002E60  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2844   002E64  0EC2               	movlw	low STR_2
  2845   002E66  6F68               	movwf	sprintf@fmt& (0+255),b
  2846   002E68  0E0E               	movlw	high STR_2
  2847   002E6A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2848   002E6C  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2849   002E70  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2850   002E74  EC17  F01B         	call	_sprintf	;wreg free
  2851   002E78                     
  2852                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2853   002E78  C081  F005         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2854   002E7C  C082  F006         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2855   002E80  EC81  F01C         	call	_sendStringSerial4	;wreg free
  2856   002E84                     
  2857                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2858   002E84  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2859   002E88  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2860   002E8C  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2861   002E90  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2862   002E94  0E20               	movlw	32
  2863   002E96  0100               	movlb	0	; () banked
  2864   002E98  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2865   002E9A  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2866   002E9C  0E03               	movlw	3
  2867   002E9E  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2868   002EA0  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2869   002EA2  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2870   002EA6  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2871   002EAA  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2872   002EAE  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2873   002EB2                     
  2874                           ; BSR set to: 0
  2875   002EB2  0012               	return		;funcret
  2876   002EB4                     __end_of_clear_read_calibration:
  2877                           	callstack 0
  2878                           
  2879 ;; *************** function _card_response *****************
  2880 ;; Defined at:
  2881 ;;		line 315 in file "colour_identify.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  buf             2   50[BANK0 ] PTR unsigned char 
  2884 ;;		 -> main@buf(150), 
  2885 ;;  clear_read      2   52[BANK0 ] PTR unsigned int 
  2886 ;;		 -> main@clear_read(2), 
  2887 ;;  red_read        2   54[BANK0 ] PTR unsigned int 
  2888 ;;		 -> main@red_read(2), 
  2889 ;;  green_read      2   56[BANK0 ] PTR unsigned int 
  2890 ;;		 -> main@green_read(2), 
  2891 ;;  blue_read       2   58[BANK0 ] PTR unsigned int 
  2892 ;;		 -> main@blue_read(2), 
  2893 ;;  expected_val    2   60[BANK0 ] PTR unsigned int [9]
  2894 ;;		 -> main@expected_values(72), 
  2895 ;;  card            1   62[BANK0 ] enum E14551
  2896 ;;  mL              2   63[BANK0 ] PTR struct DC_motor
  2897 ;;		 -> main@motorL(9), 
  2898 ;;  mR              2   65[BANK0 ] PTR struct DC_motor
  2899 ;;		 -> main@motorR(9), 
  2900 ;;  ReturnHomeTi    2   67[BANK0 ] PTR unsigned int 
  2901 ;;		 -> main@ReturnHomeTimes(60), 
  2902 ;;  ReturnHomeCa    2   69[BANK0 ] PTR enum E14551
  2903 ;;		 -> main@ReturnHomeCards(30), 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  normalised_v   72    0[BANK1 ] unsigned int [9][4]
  2906 ;;  master_close   18   72[BANK1 ] unsigned int [9]
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      enum E14569
  2909 ;; Registers used:
  2910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2916 ;;      Params:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2917 ;;      Locals:         0       0      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2919 ;;      Totals:         0      21      90       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;Total ram usage:      111 bytes
  2921 ;; Hardware stack levels used: 1
  2922 ;; Hardware stack levels required when called: 10
  2923 ;; This function calls:
  2924 ;;		_collect_avg_readings
  2925 ;;		_determine_card
  2926 ;;		_make_master_closeness
  2927 ;;		_motor_response
  2928 ;;		_normalise_readings
  2929 ;;		_sendStringSerial4
  2930 ;;		_sprintf
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text7
  2937   00296E                     __ptext7:
  2938                           	callstack 0
  2939   00296E                     _card_response:
  2940                           	callstack 20
  2941   00296E                     
  2942                           ;colour_identify.c: 319:     unsigned int normalised_values[4][9];;colour_identify.c: 32
      +                          0:     unsigned int master_closeness[9];;colour_identify.c: 322:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2943   00296E  C094  F00F         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2944   002972  C095  F010         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2945   002976  C096  F011         	movff	card_response@red_read,collect_avg_readings@red_read
  2946   00297A  C097  F012         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2947   00297E  C098  F013         	movff	card_response@green_read,collect_avg_readings@green_read
  2948   002982  C099  F014         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2949   002986  C09A  F015         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2950   00298A  C09B  F016         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2951   00298E  EC00  F012         	call	_collect_avg_readings	;wreg free
  2952   002992                     
  2953                           ;colour_identify.c: 323:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2954   002992  C092  F066         	movff	card_response@buf,sprintf@s
  2955   002996  C093  F067         	movff	card_response@buf+1,sprintf@s+1
  2956   00299A  0E33               	movlw	low STR_10
  2957   00299C  0100               	movlb	0	; () banked
  2958   00299E  6F68               	movwf	sprintf@fmt& (0+255),b
  2959   0029A0  0E0E               	movlw	high STR_10
  2960   0029A2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2961   0029A4  C094  FFD9         	movff	card_response@clear_read,fsr2l
  2962   0029A8  C095  FFDA         	movff	card_response@clear_read+1,fsr2h
  2963   0029AC  CFDE F06A          	movff	postinc2,?_sprintf+4
  2964   0029B0  CFDD F06B          	movff	postdec2,?_sprintf+5
  2965   0029B4  C096  FFD9         	movff	card_response@red_read,fsr2l
  2966   0029B8  C097  FFDA         	movff	card_response@red_read+1,fsr2h
  2967   0029BC  CFDE F06C          	movff	postinc2,?_sprintf+6
  2968   0029C0  CFDD F06D          	movff	postdec2,?_sprintf+7
  2969   0029C4  C098  FFD9         	movff	card_response@green_read,fsr2l
  2970   0029C8  C099  FFDA         	movff	card_response@green_read+1,fsr2h
  2971   0029CC  CFDE F06E          	movff	postinc2,?_sprintf+8
  2972   0029D0  CFDD F06F          	movff	postdec2,?_sprintf+9
  2973   0029D4  C09A  FFD9         	movff	card_response@blue_read,fsr2l
  2974   0029D8  C09B  FFDA         	movff	card_response@blue_read+1,fsr2h
  2975   0029DC  CFDE F070          	movff	postinc2,?_sprintf+10
  2976   0029E0  CFDD F071          	movff	postdec2,?_sprintf+11
  2977   0029E4  EC17  F01B         	call	_sprintf	;wreg free
  2978   0029E8                     
  2979                           ;colour_identify.c: 324:     sendStringSerial4(buf);
  2980   0029E8  C092  F005         	movff	card_response@buf,sendStringSerial4@string
  2981   0029EC  C093  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  2982   0029F0  EC81  F01C         	call	_sendStringSerial4	;wreg free
  2983   0029F4                     
  2984                           ;colour_identify.c: 326:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2985   0029F4  C092  F01A         	movff	card_response@buf,normalise_readings@buf
  2986   0029F8  C093  F01B         	movff	card_response@buf+1,normalise_readings@buf+1
  2987   0029FC  C094  FFD9         	movff	card_response@clear_read,fsr2l
  2988   002A00  C095  FFDA         	movff	card_response@clear_read+1,fsr2h
  2989   002A04  CFDE F01C          	movff	postinc2,normalise_readings@clear_read
  2990   002A08  CFDD F01D          	movff	postdec2,normalise_readings@clear_read+1
  2991   002A0C  C096  FFD9         	movff	card_response@red_read,fsr2l
  2992   002A10  C097  FFDA         	movff	card_response@red_read+1,fsr2h
  2993   002A14  CFDE F01E          	movff	postinc2,normalise_readings@red_read
  2994   002A18  CFDD F01F          	movff	postdec2,normalise_readings@red_read+1
  2995   002A1C  C098  FFD9         	movff	card_response@green_read,fsr2l
  2996   002A20  C099  FFDA         	movff	card_response@green_read+1,fsr2h
  2997   002A24  CFDE F020          	movff	postinc2,normalise_readings@green_read
  2998   002A28  CFDD F021          	movff	postdec2,normalise_readings@green_read+1
  2999   002A2C  C09A  FFD9         	movff	card_response@blue_read,fsr2l
  3000   002A30  C09B  FFDA         	movff	card_response@blue_read+1,fsr2h
  3001   002A34  CFDE F022          	movff	postinc2,normalise_readings@blue_read
  3002   002A38  CFDD F023          	movff	postdec2,normalise_readings@blue_read+1
  3003   002A3C  C09C  F024         	movff	card_response@expected_values,normalise_readings@expected_values
  3004   002A40  C09D  F025         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  3005   002A44  0E00               	movlw	low card_response@normalised_values
  3006   002A46  6E26               	movwf	normalise_readings@normalised_values^0,c
  3007   002A48  0E01               	movlw	high card_response@normalised_values
  3008   002A4A  6E27               	movwf	(normalise_readings@normalised_values+1)^0,c
  3009   002A4C  EC50  F00F         	call	_normalise_readings	;wreg free
  3010   002A50                     
  3011                           ;colour_identify.c: 328:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  3012   002A50  C092  F004         	movff	card_response@buf,make_master_closeness@buf
  3013   002A54  C093  F005         	movff	card_response@buf+1,make_master_closeness@buf+1
  3014   002A58  0E00               	movlw	low card_response@normalised_values
  3015   002A5A  6E06               	movwf	make_master_closeness@normalised_values^0,c
  3016   002A5C  0E01               	movlw	high card_response@normalised_values
  3017   002A5E  6E07               	movwf	(make_master_closeness@normalised_values+1)^0,c
  3018   002A60  0E48               	movlw	low card_response@master_closeness
  3019   002A62  6E08               	movwf	make_master_closeness@master_closeness^0,c
  3020   002A64  0E01               	movlw	high card_response@master_closeness
  3021   002A66  6E09               	movwf	(make_master_closeness@master_closeness+1)^0,c
  3022   002A68  EC5A  F017         	call	_make_master_closeness	;wreg free
  3023   002A6C                     
  3024                           ;colour_identify.c: 330:     card = determine_card(master_closeness);
  3025   002A6C  0E48               	movlw	low card_response@master_closeness
  3026   002A6E  6E04               	movwf	determine_card@master_closeness^0,c
  3027   002A70  0E01               	movlw	high card_response@master_closeness
  3028   002A72  6E05               	movwf	(determine_card@master_closeness+1)^0,c
  3029   002A74  EC04  F01A         	call	_determine_card	;wreg free
  3030   002A78  0100               	movlb	0	; () banked
  3031   002A7A  6F9E               	movwf	card_response@card& (0+255),b
  3032   002A7C                     
  3033                           ; BSR set to: 0
  3034                           ;colour_identify.c: 331:     sprintf(buf, "CARD %d \n", card);
  3035   002A7C  C092  F066         	movff	card_response@buf,sprintf@s
  3036   002A80  C093  F067         	movff	card_response@buf+1,sprintf@s+1
  3037   002A84  0EE8               	movlw	low STR_11
  3038   002A86  6F68               	movwf	sprintf@fmt& (0+255),b
  3039   002A88  0E0E               	movlw	high STR_11
  3040   002A8A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3041   002A8C  C09E  F06A         	movff	card_response@card,?_sprintf+4
  3042   002A90  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  3043   002A92  EC17  F01B         	call	_sprintf	;wreg free
  3044   002A96                     
  3045                           ;colour_identify.c: 332:     sendStringSerial4(buf);
  3046   002A96  C092  F005         	movff	card_response@buf,sendStringSerial4@string
  3047   002A9A  C093  F006         	movff	card_response@buf+1,sendStringSerial4@string+1
  3048   002A9E  EC81  F01C         	call	_sendStringSerial4	;wreg free
  3049   002AA2                     
  3050                           ;colour_identify.c: 334:     motor_response(buf, card, mL, mR, ReturnHomeTimes, ReturnHo
      +                          meCards);
  3051   002AA2  C092  F081         	movff	card_response@buf,motor_response@buf
  3052   002AA6  C093  F082         	movff	card_response@buf+1,motor_response@buf+1
  3053   002AAA  C09E  F083         	movff	card_response@card,motor_response@card
  3054   002AAE  C09F  F084         	movff	card_response@mL,motor_response@mL
  3055   002AB2  C0A0  F085         	movff	card_response@mL+1,motor_response@mL+1
  3056   002AB6  C0A1  F086         	movff	card_response@mR,motor_response@mR
  3057   002ABA  C0A2  F087         	movff	card_response@mR+1,motor_response@mR+1
  3058   002ABE  C0A3  F088         	movff	card_response@ReturnHomeTimes,motor_response@ReturnHomeTimes
  3059   002AC2  C0A4  F089         	movff	card_response@ReturnHomeTimes+1,motor_response@ReturnHomeTimes+1
  3060   002AC6  C0A5  F08A         	movff	card_response@ReturnHomeCards,motor_response@ReturnHomeCards
  3061   002ACA  C0A6  F08B         	movff	card_response@ReturnHomeCards+1,motor_response@ReturnHomeCards+1
  3062   002ACE  EC7F  F007         	call	_motor_response	;wreg free
  3063   002AD2                     
  3064                           ;colour_identify.c: 336:     return card;
  3065   002AD2  0100               	movlb	0	; () banked
  3066   002AD4  519E               	movf	card_response@card& (0+255),w,b
  3067   002AD6                     
  3068                           ; BSR set to: 0
  3069   002AD6  0012               	return		;funcret
  3070   002AD8                     __end_of_card_response:
  3071                           	callstack 0
  3072                           
  3073 ;; *************** function _normalise_readings *****************
  3074 ;; Defined at:
  3075 ;;		line 70 in file "colour_identify.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  buf             2   25[COMRAM] PTR unsigned char 
  3078 ;;		 -> main@buf(150), 
  3079 ;;  clear_read      2   27[COMRAM] unsigned int 
  3080 ;;  red_read        2   29[COMRAM] unsigned int 
  3081 ;;  green_read      2   31[COMRAM] unsigned int 
  3082 ;;  blue_read       2   33[COMRAM] unsigned int 
  3083 ;;  expected_val    2   35[COMRAM] PTR unsigned int [9]
  3084 ;;		 -> main@expected_values(72), 
  3085 ;;  normalised_v    2   37[COMRAM] PTR unsigned int [9]
  3086 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  difference      2   47[COMRAM] unsigned int 
  3089 ;;  i               1   49[COMRAM] enum E14551
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3099 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3100 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3101 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;Total ram usage:       25 bytes
  3104 ;; Hardware stack levels used: 1
  3105 ;; Hardware stack levels required when called: 2
  3106 ;; This function calls:
  3107 ;;		___lwdiv
  3108 ;;		___wmul
  3109 ;;		_abs
  3110 ;; This function is called by:
  3111 ;;		_card_response
  3112 ;;		_card_response_easy
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text8
  3117   001EA0                     __ptext8:
  3118                           	callstack 0
  3119   001EA0                     _normalise_readings:
  3120                           	callstack 27
  3121   001EA0                     
  3122                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  3123   001EA0  0E00               	movlw	0
  3124   001EA2  6E32               	movwf	normalise_readings@i^0,c
  3125   001EA4                     l4415:
  3126                           
  3127                           ;colour_identify.c: 82:         unsigned int difference = abs(red_read - expected_values
      +                          [RED][i]);
  3128   001EA4  5032               	movf	normalise_readings@i^0,w,c
  3129   001EA6  0D02               	mullw	2
  3130   001EA8  CFF3 F028          	movff	prodl,??_normalise_readings
  3131   001EAC  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3132   001EB0  5028               	movf	??_normalise_readings^0,w,c
  3133   001EB2  2424               	addwf	normalise_readings@expected_values^0,w,c
  3134   001EB4  6ED9               	movwf	fsr2l,c
  3135   001EB6  5029               	movf	(??_normalise_readings+1)^0,w,c
  3136   001EB8  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3137   001EBA  6EDA               	movwf	fsr2h,c
  3138   001EBC  CFDE F02A          	movff	postinc2,??_normalise_readings+2
  3139   001EC0  CFDD F02B          	movff	postdec2,??_normalise_readings+3
  3140   001EC4  502A               	movf	(??_normalise_readings+2)^0,w,c
  3141   001EC6  5C1E               	subwf	normalise_readings@red_read^0,w,c
  3142   001EC8  6E16               	movwf	abs@a^0,c
  3143   001ECA  502B               	movf	(??_normalise_readings+3)^0,w,c
  3144   001ECC  581F               	subwfb	(normalise_readings@red_read+1)^0,w,c
  3145   001ECE  6E17               	movwf	(abs@a+1)^0,c
  3146   001ED0  EC47  F01C         	call	_abs	;wreg free
  3147   001ED4  C016  F030         	movff	?_abs,normalise_readings@difference
  3148   001ED8  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3149                           
  3150                           ;colour_identify.c: 83:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  3151   001EDC  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3152   001EE0  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3153   001EE4  0E00               	movlw	0
  3154   001EE6  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3155   001EE8  0E64               	movlw	100
  3156   001EEA  6E06               	movwf	___wmul@multiplicand^0,c
  3157   001EEC  ECEC  F01C         	call	___wmul	;wreg free
  3158   001EF0  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3159   001EF4  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3160   001EF8  5032               	movf	normalise_readings@i^0,w,c
  3161   001EFA  0D02               	mullw	2
  3162   001EFC  CFF3 F028          	movff	prodl,??_normalise_readings
  3163   001F00  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3164   001F04  5028               	movf	??_normalise_readings^0,w,c
  3165   001F06  2424               	addwf	normalise_readings@expected_values^0,w,c
  3166   001F08  6ED9               	movwf	fsr2l,c
  3167   001F0A  5029               	movf	(??_normalise_readings+1)^0,w,c
  3168   001F0C  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3169   001F0E  6EDA               	movwf	fsr2h,c
  3170   001F10  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3171   001F14  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3172   001F18  EC81  F01A         	call	___lwdiv	;wreg free
  3173   001F1C  5032               	movf	normalise_readings@i^0,w,c
  3174   001F1E  0D02               	mullw	2
  3175   001F20  CFF3 F02A          	movff	prodl,??_normalise_readings+2
  3176   001F24  CFF4 F02B          	movff	prodh,??_normalise_readings+3
  3177   001F28  502A               	movf	(??_normalise_readings+2)^0,w,c
  3178   001F2A  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3179   001F2C  6ED9               	movwf	fsr2l,c
  3180   001F2E  502B               	movf	(??_normalise_readings+3)^0,w,c
  3181   001F30  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3182   001F32  6EDA               	movwf	fsr2h,c
  3183   001F34  C00A  FFDE         	movff	?___lwdiv,postinc2
  3184   001F38  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3185                           
  3186                           ;colour_identify.c: 86:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  3187   001F3C  5032               	movf	normalise_readings@i^0,w,c
  3188   001F3E  0D02               	mullw	2
  3189   001F40  CFF3 F028          	movff	prodl,??_normalise_readings
  3190   001F44  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3191   001F48  5028               	movf	??_normalise_readings^0,w,c
  3192   001F4A  2424               	addwf	normalise_readings@expected_values^0,w,c
  3193   001F4C  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3194   001F4E  5029               	movf	(??_normalise_readings+1)^0,w,c
  3195   001F50  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3196   001F52  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3197   001F54  0E12               	movlw	18
  3198   001F56  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3199   001F58  6ED9               	movwf	fsr2l,c
  3200   001F5A  0E00               	movlw	0
  3201   001F5C  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3202   001F5E  6EDA               	movwf	fsr2h,c
  3203   001F60  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3204   001F64  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3205   001F68  502C               	movf	(??_normalise_readings+4)^0,w,c
  3206   001F6A  5C20               	subwf	normalise_readings@green_read^0,w,c
  3207   001F6C  6E16               	movwf	abs@a^0,c
  3208   001F6E  502D               	movf	(??_normalise_readings+5)^0,w,c
  3209   001F70  5821               	subwfb	(normalise_readings@green_read+1)^0,w,c
  3210   001F72  6E17               	movwf	(abs@a+1)^0,c
  3211   001F74  EC47  F01C         	call	_abs	;wreg free
  3212   001F78  C016  F030         	movff	?_abs,normalise_readings@difference
  3213   001F7C  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3214                           
  3215                           ;colour_identify.c: 87:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  3216   001F80  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3217   001F84  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3218   001F88  0E00               	movlw	0
  3219   001F8A  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3220   001F8C  0E64               	movlw	100
  3221   001F8E  6E06               	movwf	___wmul@multiplicand^0,c
  3222   001F90  ECEC  F01C         	call	___wmul	;wreg free
  3223   001F94  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3224   001F98  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3225   001F9C  5032               	movf	normalise_readings@i^0,w,c
  3226   001F9E  0D02               	mullw	2
  3227   001FA0  CFF3 F028          	movff	prodl,??_normalise_readings
  3228   001FA4  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3229   001FA8  5028               	movf	??_normalise_readings^0,w,c
  3230   001FAA  2424               	addwf	normalise_readings@expected_values^0,w,c
  3231   001FAC  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3232   001FAE  5029               	movf	(??_normalise_readings+1)^0,w,c
  3233   001FB0  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3234   001FB2  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3235   001FB4  0E12               	movlw	18
  3236   001FB6  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3237   001FB8  6ED9               	movwf	fsr2l,c
  3238   001FBA  0E00               	movlw	0
  3239   001FBC  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3240   001FBE  6EDA               	movwf	fsr2h,c
  3241   001FC0  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3242   001FC4  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3243   001FC8  EC81  F01A         	call	___lwdiv	;wreg free
  3244   001FCC  5032               	movf	normalise_readings@i^0,w,c
  3245   001FCE  0D02               	mullw	2
  3246   001FD0  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3247   001FD4  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3248   001FD8  502C               	movf	(??_normalise_readings+4)^0,w,c
  3249   001FDA  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3250   001FDC  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3251   001FDE  502D               	movf	(??_normalise_readings+5)^0,w,c
  3252   001FE0  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3253   001FE2  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3254   001FE4  0E12               	movlw	18
  3255   001FE6  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3256   001FE8  6ED9               	movwf	fsr2l,c
  3257   001FEA  0E00               	movlw	0
  3258   001FEC  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3259   001FEE  6EDA               	movwf	fsr2h,c
  3260   001FF0  C00A  FFDE         	movff	?___lwdiv,postinc2
  3261   001FF4  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3262                           
  3263                           ;colour_identify.c: 90:         difference = abs(blue_read - expected_values[BLUE][i]);
  3264   001FF8  5032               	movf	normalise_readings@i^0,w,c
  3265   001FFA  0D02               	mullw	2
  3266   001FFC  CFF3 F028          	movff	prodl,??_normalise_readings
  3267   002000  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3268   002004  5028               	movf	??_normalise_readings^0,w,c
  3269   002006  2424               	addwf	normalise_readings@expected_values^0,w,c
  3270   002008  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3271   00200A  5029               	movf	(??_normalise_readings+1)^0,w,c
  3272   00200C  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3273   00200E  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3274   002010  0E24               	movlw	36
  3275   002012  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3276   002014  6ED9               	movwf	fsr2l,c
  3277   002016  0E00               	movlw	0
  3278   002018  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3279   00201A  6EDA               	movwf	fsr2h,c
  3280   00201C  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3281   002020  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3282   002024  502C               	movf	(??_normalise_readings+4)^0,w,c
  3283   002026  5C22               	subwf	normalise_readings@blue_read^0,w,c
  3284   002028  6E16               	movwf	abs@a^0,c
  3285   00202A  502D               	movf	(??_normalise_readings+5)^0,w,c
  3286   00202C  5823               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  3287   00202E  6E17               	movwf	(abs@a+1)^0,c
  3288   002030  EC47  F01C         	call	_abs	;wreg free
  3289   002034  C016  F030         	movff	?_abs,normalise_readings@difference
  3290   002038  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3291                           
  3292                           ;colour_identify.c: 91:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  3293   00203C  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3294   002040  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3295   002044  0E00               	movlw	0
  3296   002046  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3297   002048  0E64               	movlw	100
  3298   00204A  6E06               	movwf	___wmul@multiplicand^0,c
  3299   00204C  ECEC  F01C         	call	___wmul	;wreg free
  3300   002050  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3301   002054  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3302   002058  5032               	movf	normalise_readings@i^0,w,c
  3303   00205A  0D02               	mullw	2
  3304   00205C  CFF3 F028          	movff	prodl,??_normalise_readings
  3305   002060  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3306   002064  5028               	movf	??_normalise_readings^0,w,c
  3307   002066  2424               	addwf	normalise_readings@expected_values^0,w,c
  3308   002068  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3309   00206A  5029               	movf	(??_normalise_readings+1)^0,w,c
  3310   00206C  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3311   00206E  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3312   002070  0E24               	movlw	36
  3313   002072  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3314   002074  6ED9               	movwf	fsr2l,c
  3315   002076  0E00               	movlw	0
  3316   002078  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3317   00207A  6EDA               	movwf	fsr2h,c
  3318   00207C  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3319   002080  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3320   002084  EC81  F01A         	call	___lwdiv	;wreg free
  3321   002088  5032               	movf	normalise_readings@i^0,w,c
  3322   00208A  0D02               	mullw	2
  3323   00208C  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3324   002090  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3325   002094  502C               	movf	(??_normalise_readings+4)^0,w,c
  3326   002096  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3327   002098  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3328   00209A  502D               	movf	(??_normalise_readings+5)^0,w,c
  3329   00209C  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3330   00209E  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3331   0020A0  0E24               	movlw	36
  3332   0020A2  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3333   0020A4  6ED9               	movwf	fsr2l,c
  3334   0020A6  0E00               	movlw	0
  3335   0020A8  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3336   0020AA  6EDA               	movwf	fsr2h,c
  3337   0020AC  C00A  FFDE         	movff	?___lwdiv,postinc2
  3338   0020B0  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3339                           
  3340                           ;colour_identify.c: 94:         difference = abs(clear_read - expected_values[3][i]);
  3341   0020B4  5032               	movf	normalise_readings@i^0,w,c
  3342   0020B6  0D02               	mullw	2
  3343   0020B8  CFF3 F028          	movff	prodl,??_normalise_readings
  3344   0020BC  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3345   0020C0  5028               	movf	??_normalise_readings^0,w,c
  3346   0020C2  2424               	addwf	normalise_readings@expected_values^0,w,c
  3347   0020C4  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3348   0020C6  5029               	movf	(??_normalise_readings+1)^0,w,c
  3349   0020C8  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3350   0020CA  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3351   0020CC  0E36               	movlw	54
  3352   0020CE  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3353   0020D0  6ED9               	movwf	fsr2l,c
  3354   0020D2  0E00               	movlw	0
  3355   0020D4  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3356   0020D6  6EDA               	movwf	fsr2h,c
  3357   0020D8  CFDE F02C          	movff	postinc2,??_normalise_readings+4
  3358   0020DC  CFDD F02D          	movff	postdec2,??_normalise_readings+5
  3359   0020E0  502C               	movf	(??_normalise_readings+4)^0,w,c
  3360   0020E2  5C1C               	subwf	normalise_readings@clear_read^0,w,c
  3361   0020E4  6E16               	movwf	abs@a^0,c
  3362   0020E6  502D               	movf	(??_normalise_readings+5)^0,w,c
  3363   0020E8  581D               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  3364   0020EA  6E17               	movwf	(abs@a+1)^0,c
  3365   0020EC  EC47  F01C         	call	_abs	;wreg free
  3366   0020F0  C016  F030         	movff	?_abs,normalise_readings@difference
  3367   0020F4  C017  F031         	movff	?_abs+1,normalise_readings@difference+1
  3368                           
  3369                           ;colour_identify.c: 95:         normalised_values[3][i] = (difference*100) / expected_va
      +                          lues[3][i];
  3370   0020F8  C030  F004         	movff	normalise_readings@difference,___wmul@multiplier
  3371   0020FC  C031  F005         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  3372   002100  0E00               	movlw	0
  3373   002102  6E07               	movwf	(___wmul@multiplicand+1)^0,c
  3374   002104  0E64               	movlw	100
  3375   002106  6E06               	movwf	___wmul@multiplicand^0,c
  3376   002108  ECEC  F01C         	call	___wmul	;wreg free
  3377   00210C  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  3378   002110  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  3379   002114  5032               	movf	normalise_readings@i^0,w,c
  3380   002116  0D02               	mullw	2
  3381   002118  CFF3 F028          	movff	prodl,??_normalise_readings
  3382   00211C  CFF4 F029          	movff	prodh,??_normalise_readings+1
  3383   002120  5028               	movf	??_normalise_readings^0,w,c
  3384   002122  2424               	addwf	normalise_readings@expected_values^0,w,c
  3385   002124  6E2A               	movwf	(??_normalise_readings+2)^0,c
  3386   002126  5029               	movf	(??_normalise_readings+1)^0,w,c
  3387   002128  2025               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  3388   00212A  6E2B               	movwf	(??_normalise_readings+3)^0,c
  3389   00212C  0E36               	movlw	54
  3390   00212E  242A               	addwf	(??_normalise_readings+2)^0,w,c
  3391   002130  6ED9               	movwf	fsr2l,c
  3392   002132  0E00               	movlw	0
  3393   002134  202B               	addwfc	(??_normalise_readings+3)^0,w,c
  3394   002136  6EDA               	movwf	fsr2h,c
  3395   002138  CFDE F00C          	movff	postinc2,___lwdiv@divisor
  3396   00213C  CFDD F00D          	movff	postdec2,___lwdiv@divisor+1
  3397   002140  EC81  F01A         	call	___lwdiv	;wreg free
  3398   002144  5032               	movf	normalise_readings@i^0,w,c
  3399   002146  0D02               	mullw	2
  3400   002148  CFF3 F02C          	movff	prodl,??_normalise_readings+4
  3401   00214C  CFF4 F02D          	movff	prodh,??_normalise_readings+5
  3402   002150  502C               	movf	(??_normalise_readings+4)^0,w,c
  3403   002152  2426               	addwf	normalise_readings@normalised_values^0,w,c
  3404   002154  6E2E               	movwf	(??_normalise_readings+6)^0,c
  3405   002156  502D               	movf	(??_normalise_readings+5)^0,w,c
  3406   002158  2027               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  3407   00215A  6E2F               	movwf	(??_normalise_readings+7)^0,c
  3408   00215C  0E36               	movlw	54
  3409   00215E  242E               	addwf	(??_normalise_readings+6)^0,w,c
  3410   002160  6ED9               	movwf	fsr2l,c
  3411   002162  0E00               	movlw	0
  3412   002164  202F               	addwfc	(??_normalise_readings+7)^0,w,c
  3413   002166  6EDA               	movwf	fsr2h,c
  3414   002168  C00A  FFDE         	movff	?___lwdiv,postinc2
  3415   00216C  C00B  FFDD         	movff	?___lwdiv+1,postdec2
  3416   002170                     
  3417                           ;colour_identify.c: 97:     }
  3418   002170  2A32               	incf	normalise_readings@i^0,f,c
  3419   002172  0E08               	movlw	8
  3420   002174  6432               	cpfsgt	normalise_readings@i^0,c
  3421   002176  EFBF  F010         	goto	u2361
  3422   00217A  EFC1  F010         	goto	u2360
  3423   00217E                     u2361:
  3424   00217E  EF52  F00F         	goto	l4415
  3425   002182                     u2360:
  3426   002182  0012               	return		;funcret
  3427   002184                     __end_of_normalise_readings:
  3428                           	callstack 0
  3429                           
  3430 ;; *************** function _motor_response *****************
  3431 ;; Defined at:
  3432 ;;		line 125 in file "colour_identify.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  3435 ;;		 -> main@buf(150), 
  3436 ;;  card            1   35[BANK0 ] enum E14551
  3437 ;;  mL              2   36[BANK0 ] PTR struct DC_motor
  3438 ;;		 -> main@motorL(9), 
  3439 ;;  mR              2   38[BANK0 ] PTR struct DC_motor
  3440 ;;		 -> main@motorR(9), 
  3441 ;;  ReturnHomeTi    2   40[BANK0 ] PTR unsigned int 
  3442 ;;		 -> main@ReturnHomeTimes(60), 
  3443 ;;  ReturnHomeCa    2   42[BANK0 ] PTR enum E14551
  3444 ;;		 -> main@ReturnHomeCards(30), 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  k               2   46[BANK0 ] int 
  3447 ;;  j               2   44[BANK0 ] int 
  3448 ;;  i               2   48[BANK0 ] int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3458 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3459 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3461 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3462 ;;Total ram usage:       19 bytes
  3463 ;; Hardware stack levels used: 1
  3464 ;; Hardware stack levels required when called: 9
  3465 ;; This function calls:
  3466 ;;		_fullSpeedAhead
  3467 ;;		_home_response
  3468 ;;		_reverseFullSpeed
  3469 ;;		_sendStringSerial4
  3470 ;;		_sprintf
  3471 ;;		_stop
  3472 ;;		_turnLeft45
  3473 ;;		_turnRight45
  3474 ;; This function is called by:
  3475 ;;		_card_response
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text9
  3480   000EFE                     __ptext9:
  3481                           	callstack 0
  3482   000EFE                     _motor_response:
  3483                           	callstack 20
  3484   000EFE                     
  3485                           ;colour_identify.c: 130:     switch (card){
  3486   000EFE  EF78  F00A         	goto	l4623
  3487   000F02                     l4459:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;colour_identify.c: 132:             reverseFullSpeed(mL,mR);
  3491   000F02  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3492   000F06  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3493   000F0A  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3494   000F0E  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3495   000F12  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3496   000F16                     
  3497                           ;colour_identify.c: 133:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3498   000F16  0E0D               	movlw	13
  3499   000F18  6E57               	movwf	(??_motor_response+1)^0,c
  3500   000F1A  0E2D               	movlw	45
  3501   000F1C  6E56               	movwf	??_motor_response^0,c
  3502   000F1E  0ED8               	movlw	216
  3503   000F20                     u2707:
  3504   000F20  2EE8               	decfsz	wreg,f,c
  3505   000F22  D7FE               	bra	u2707
  3506   000F24  2E56               	decfsz	??_motor_response^0,f,c
  3507   000F26  D7FC               	bra	u2707
  3508   000F28  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3509   000F2A  D7FA               	bra	u2707
  3510   000F2C                     l4463:
  3511                           
  3512                           ;colour_identify.c: 134:             turnRight45(mL,mR);
  3513   000F2C  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3514   000F30  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3515   000F34  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3516   000F38  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3517   000F3C  EC45  F018         	call	_turnRight45	;wreg free
  3518   000F40                     
  3519                           ;colour_identify.c: 135:             stop(mL,mR);
  3520   000F40  C084  F017         	movff	motor_response@mL,stop@mL
  3521   000F44  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3522   000F48  C086  F019         	movff	motor_response@mR,stop@mR
  3523   000F4C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3524   000F50  ECC1  F019         	call	_stop	;wreg free
  3525   000F54                     
  3526                           ;colour_identify.c: 136:             turnRight45(mL,mR);
  3527   000F54  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3528   000F58  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3529   000F5C  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3530   000F60  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3531   000F64  EC45  F018         	call	_turnRight45	;wreg free
  3532   000F68                     l4469:
  3533                           
  3534                           ;colour_identify.c: 137:             stop(mL,mR);
  3535   000F68  C084  F017         	movff	motor_response@mL,stop@mL
  3536   000F6C  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3537   000F70  C086  F019         	movff	motor_response@mR,stop@mR
  3538   000F74  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3539   000F78  ECC1  F019         	call	_stop	;wreg free
  3540                           
  3541                           ;colour_identify.c: 138:             break;
  3542   000F7C  EFAA  F00A         	goto	l387
  3543   000F80                     l4471:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;colour_identify.c: 140:             reverseFullSpeed(mL,mR);
  3547   000F80  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3548   000F84  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3549   000F88  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3550   000F8C  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3551   000F90  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3552   000F94                     
  3553                           ;colour_identify.c: 141:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3554   000F94  0E0D               	movlw	13
  3555   000F96  6E57               	movwf	(??_motor_response+1)^0,c
  3556   000F98  0E2D               	movlw	45
  3557   000F9A  6E56               	movwf	??_motor_response^0,c
  3558   000F9C  0ED8               	movlw	216
  3559   000F9E                     u2717:
  3560   000F9E  2EE8               	decfsz	wreg,f,c
  3561   000FA0  D7FE               	bra	u2717
  3562   000FA2  2E56               	decfsz	??_motor_response^0,f,c
  3563   000FA4  D7FC               	bra	u2717
  3564   000FA6  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3565   000FA8  D7FA               	bra	u2717
  3566   000FAA                     l4475:
  3567                           
  3568                           ;colour_identify.c: 142:             turnLeft45(mL,mR);
  3569   000FAA  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3570   000FAE  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3571   000FB2  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3572   000FB6  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3573   000FBA  EC9B  F018         	call	_turnLeft45	;wreg free
  3574   000FBE                     
  3575                           ;colour_identify.c: 143:             stop(mL,mR);
  3576   000FBE  C084  F017         	movff	motor_response@mL,stop@mL
  3577   000FC2  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3578   000FC6  C086  F019         	movff	motor_response@mR,stop@mR
  3579   000FCA  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3580   000FCE  ECC1  F019         	call	_stop	;wreg free
  3581   000FD2                     
  3582                           ;colour_identify.c: 144:             turnLeft45(mL,mR);
  3583   000FD2  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3584   000FD6  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3585   000FDA  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3586   000FDE  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3587   000FE2  EC9B  F018         	call	_turnLeft45	;wreg free
  3588   000FE6  EFB4  F007         	goto	l4469
  3589   000FEA                     l4483:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;colour_identify.c: 148:             reverseFullSpeed(mL,mR);
  3593   000FEA  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3594   000FEE  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3595   000FF2  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3596   000FF6  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3597   000FFA  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3598   000FFE                     
  3599                           ;colour_identify.c: 149:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3600   000FFE  0E0D               	movlw	13
  3601   001000  6E57               	movwf	(??_motor_response+1)^0,c
  3602   001002  0E2D               	movlw	45
  3603   001004  6E56               	movwf	??_motor_response^0,c
  3604   001006  0ED8               	movlw	216
  3605   001008                     u2727:
  3606   001008  2EE8               	decfsz	wreg,f,c
  3607   00100A  D7FE               	bra	u2727
  3608   00100C  2E56               	decfsz	??_motor_response^0,f,c
  3609   00100E  D7FC               	bra	u2727
  3610   001010  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3611   001012  D7FA               	bra	u2727
  3612   001014                     
  3613                           ;colour_identify.c: 150:             turnRight45(mL,mR);
  3614   001014  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3615   001018  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3616   00101C  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3617   001020  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3618   001024  EC45  F018         	call	_turnRight45	;wreg free
  3619   001028                     
  3620                           ;colour_identify.c: 151:             stop(mL,mR);
  3621   001028  C084  F017         	movff	motor_response@mL,stop@mL
  3622   00102C  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3623   001030  C086  F019         	movff	motor_response@mR,stop@mR
  3624   001034  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3625   001038  ECC1  F019         	call	_stop	;wreg free
  3626   00103C                     l4491:
  3627                           
  3628                           ;colour_identify.c: 152:             turnRight45(mL,mR);
  3629   00103C  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3630   001040  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3631   001044  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3632   001048  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3633   00104C  EC45  F018         	call	_turnRight45	;wreg free
  3634   001050                     
  3635                           ;colour_identify.c: 153:             stop(mL,mR);
  3636   001050  C084  F017         	movff	motor_response@mL,stop@mL
  3637   001054  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3638   001058  C086  F019         	movff	motor_response@mR,stop@mR
  3639   00105C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3640   001060  ECC1  F019         	call	_stop	;wreg free
  3641   001064  EF96  F007         	goto	l4463
  3642   001068                     l4503:
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  3646   001068  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3647   00106C  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3648   001070  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3649   001074  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3650   001078  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3651   00107C                     
  3652                           ;colour_identify.c: 161:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3653   00107C  0E0D               	movlw	13
  3654   00107E  6E57               	movwf	(??_motor_response+1)^0,c
  3655   001080  0E2D               	movlw	45
  3656   001082  6E56               	movwf	??_motor_response^0,c
  3657   001084  0ED8               	movlw	216
  3658   001086                     u2737:
  3659   001086  2EE8               	decfsz	wreg,f,c
  3660   001088  D7FE               	bra	u2737
  3661   00108A  2E56               	decfsz	??_motor_response^0,f,c
  3662   00108C  D7FC               	bra	u2737
  3663   00108E  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3664   001090  D7FA               	bra	u2737
  3665   001092                     
  3666                           ;colour_identify.c: 162:             stop(mL,mR);
  3667   001092  C084  F017         	movff	motor_response@mL,stop@mL
  3668   001096  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3669   00109A  C086  F019         	movff	motor_response@mR,stop@mR
  3670   00109E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3671   0010A2  ECC1  F019         	call	_stop	;wreg free
  3672                           
  3673                           ;colour_identify.c: 163:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3674   0010A6  0E11               	movlw	17
  3675   0010A8  6E57               	movwf	(??_motor_response+1)^0,c
  3676   0010AA  0E3C               	movlw	60
  3677   0010AC  6E56               	movwf	??_motor_response^0,c
  3678   0010AE  0ECB               	movlw	203
  3679   0010B0                     u2747:
  3680   0010B0  2EE8               	decfsz	wreg,f,c
  3681   0010B2  D7FE               	bra	u2747
  3682   0010B4  2E56               	decfsz	??_motor_response^0,f,c
  3683   0010B6  D7FC               	bra	u2747
  3684   0010B8  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3685   0010BA  D7FA               	bra	u2747
  3686   0010BC  F000               	nop	
  3687   0010BE                     
  3688                           ;colour_identify.c: 164:             reverseFullSpeed(mL,mR);
  3689   0010BE  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3690   0010C2  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3691   0010C6  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3692   0010CA  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3693   0010CE  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3694   0010D2                     
  3695                           ;colour_identify.c: 165:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3696   0010D2  0E29               	movlw	41
  3697   0010D4  6E57               	movwf	(??_motor_response+1)^0,c
  3698   0010D6  0E96               	movlw	150
  3699   0010D8  6E56               	movwf	??_motor_response^0,c
  3700   0010DA  0E7F               	movlw	127
  3701   0010DC                     u2757:
  3702   0010DC  2EE8               	decfsz	wreg,f,c
  3703   0010DE  D7FE               	bra	u2757
  3704   0010E0  2E56               	decfsz	??_motor_response^0,f,c
  3705   0010E2  D7FC               	bra	u2757
  3706   0010E4  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3707   0010E6  D7FA               	bra	u2757
  3708   0010E8  F000               	nop	
  3709                           
  3710                           ;colour_identify.c: 166:             stop(mL,mR);
  3711   0010EA  C084  F017         	movff	motor_response@mL,stop@mL
  3712   0010EE  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3713   0010F2  C086  F019         	movff	motor_response@mR,stop@mR
  3714   0010F6  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3715   0010FA  ECC1  F019         	call	_stop	;wreg free
  3716                           
  3717                           ;colour_identify.c: 167:             turnRight45(mL,mR);
  3718   0010FE  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3719   001102  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3720   001106  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3721   00110A  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3722   00110E  EC45  F018         	call	_turnRight45	;wreg free
  3723                           
  3724                           ;colour_identify.c: 168:             stop(mL,mR);
  3725   001112  C084  F017         	movff	motor_response@mL,stop@mL
  3726   001116  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3727   00111A  C086  F019         	movff	motor_response@mR,stop@mR
  3728   00111E  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3729   001122  ECC1  F019         	call	_stop	;wreg free
  3730                           
  3731                           ;colour_identify.c: 169:             turnRight45(mL,mR);
  3732   001126  C084  F017         	movff	motor_response@mL,turnRight45@mL
  3733   00112A  C085  F018         	movff	motor_response@mL+1,turnRight45@mL+1
  3734   00112E  C086  F019         	movff	motor_response@mR,turnRight45@mR
  3735   001132  C087  F01A         	movff	motor_response@mR+1,turnRight45@mR+1
  3736   001136  EC45  F018         	call	_turnRight45	;wreg free
  3737                           
  3738                           ;colour_identify.c: 170:             stop(mL,mR);
  3739   00113A  C084  F017         	movff	motor_response@mL,stop@mL
  3740   00113E  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3741   001142  C086  F019         	movff	motor_response@mR,stop@mR
  3742   001146  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3743   00114A  ECC1  F019         	call	_stop	;wreg free
  3744                           
  3745                           ;colour_identify.c: 171:             break;
  3746   00114E  EFAA  F00A         	goto	l387
  3747   001152                     l4513:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;colour_identify.c: 173:             reverseFullSpeed(mL,mR);
  3751   001152  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3752   001156  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3753   00115A  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3754   00115E  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3755   001162  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3756   001166                     
  3757                           ;colour_identify.c: 174:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3758   001166  0E0D               	movlw	13
  3759   001168  6E57               	movwf	(??_motor_response+1)^0,c
  3760   00116A  0E2D               	movlw	45
  3761   00116C  6E56               	movwf	??_motor_response^0,c
  3762   00116E  0ED8               	movlw	216
  3763   001170                     u2767:
  3764   001170  2EE8               	decfsz	wreg,f,c
  3765   001172  D7FE               	bra	u2767
  3766   001174  2E56               	decfsz	??_motor_response^0,f,c
  3767   001176  D7FC               	bra	u2767
  3768   001178  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3769   00117A  D7FA               	bra	u2767
  3770   00117C                     
  3771                           ;colour_identify.c: 175:             reverseFullSpeed(mL,mR);
  3772   00117C  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3773   001180  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3774   001184  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3775   001188  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3776   00118C  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3777                           
  3778                           ;colour_identify.c: 176:             _delay((unsigned long)((500)*(64000000/4000.0)));
  3779   001190  0E29               	movlw	41
  3780   001192  6E57               	movwf	(??_motor_response+1)^0,c
  3781   001194  0E96               	movlw	150
  3782   001196  6E56               	movwf	??_motor_response^0,c
  3783   001198  0E7F               	movlw	127
  3784   00119A                     u2777:
  3785   00119A  2EE8               	decfsz	wreg,f,c
  3786   00119C  D7FE               	bra	u2777
  3787   00119E  2E56               	decfsz	??_motor_response^0,f,c
  3788   0011A0  D7FC               	bra	u2777
  3789   0011A2  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3790   0011A4  D7FA               	bra	u2777
  3791   0011A6  F000               	nop	
  3792   0011A8                     l4519:
  3793                           
  3794                           ;colour_identify.c: 177:             stop(mL,mR);
  3795   0011A8  C084  F017         	movff	motor_response@mL,stop@mL
  3796   0011AC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3797   0011B0  C086  F019         	movff	motor_response@mR,stop@mR
  3798   0011B4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3799   0011B8  ECC1  F019         	call	_stop	;wreg free
  3800   0011BC  EFD5  F007         	goto	l4475
  3801   0011C0                     l4529:
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;colour_identify.c: 184:             reverseFullSpeed(mL,mR);
  3805   0011C0  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3806   0011C4  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3807   0011C8  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3808   0011CC  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3809   0011D0  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3810   0011D4                     
  3811                           ;colour_identify.c: 185:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3812   0011D4  0E0D               	movlw	13
  3813   0011D6  6E57               	movwf	(??_motor_response+1)^0,c
  3814   0011D8  0E2D               	movlw	45
  3815   0011DA  6E56               	movwf	??_motor_response^0,c
  3816   0011DC  0ED8               	movlw	216
  3817   0011DE                     u2787:
  3818   0011DE  2EE8               	decfsz	wreg,f,c
  3819   0011E0  D7FE               	bra	u2787
  3820   0011E2  2E56               	decfsz	??_motor_response^0,f,c
  3821   0011E4  D7FC               	bra	u2787
  3822   0011E6  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3823   0011E8  D7FA               	bra	u2787
  3824   0011EA  EF1E  F008         	goto	l4491
  3825   0011EE                     l4545:
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;colour_identify.c: 194:             reverseFullSpeed(mL,mR);
  3829   0011EE  C084  F017         	movff	motor_response@mL,reverseFullSpeed@mL
  3830   0011F2  C085  F018         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  3831   0011F6  C086  F019         	movff	motor_response@mR,reverseFullSpeed@mR
  3832   0011FA  C087  F01A         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  3833   0011FE  ECF1  F018         	call	_reverseFullSpeed	;wreg free
  3834   001202                     
  3835                           ;colour_identify.c: 195:             _delay((unsigned long)((150)*(64000000/4000.0)));
  3836   001202  0E0D               	movlw	13
  3837   001204  6E57               	movwf	(??_motor_response+1)^0,c
  3838   001206  0E2D               	movlw	45
  3839   001208  6E56               	movwf	??_motor_response^0,c
  3840   00120A  0ED8               	movlw	216
  3841   00120C                     u2797:
  3842   00120C  2EE8               	decfsz	wreg,f,c
  3843   00120E  D7FE               	bra	u2797
  3844   001210  2E56               	decfsz	??_motor_response^0,f,c
  3845   001212  D7FC               	bra	u2797
  3846   001214  2E57               	decfsz	(??_motor_response+1)^0,f,c
  3847   001216  D7FA               	bra	u2797
  3848   001218                     
  3849                           ;colour_identify.c: 196:             turnLeft45(mL,mR);
  3850   001218  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3851   00121C  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3852   001220  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3853   001224  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3854   001228  EC9B  F018         	call	_turnLeft45	;wreg free
  3855   00122C  EFD4  F008         	goto	l4519
  3856   001230                     l4561:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;colour_identify.c: 205:             stop(mL,mR);
  3860   001230  C084  F017         	movff	motor_response@mL,stop@mL
  3861   001234  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3862   001238  C086  F019         	movff	motor_response@mR,stop@mR
  3863   00123C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3864   001240  ECC1  F019         	call	_stop	;wreg free
  3865                           
  3866                           ;colour_identify.c: 206:             turnLeft45(mL,mR);
  3867   001244  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3868   001248  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3869   00124C  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3870   001250  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3871   001254  EC9B  F018         	call	_turnLeft45	;wreg free
  3872                           
  3873                           ;colour_identify.c: 207:             stop(mL,mR);
  3874   001258  C084  F017         	movff	motor_response@mL,stop@mL
  3875   00125C  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3876   001260  C086  F019         	movff	motor_response@mR,stop@mR
  3877   001264  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3878   001268  ECC1  F019         	call	_stop	;wreg free
  3879                           
  3880                           ;colour_identify.c: 208:             turnLeft45(mL,mR);
  3881   00126C  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3882   001270  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3883   001274  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3884   001278  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3885   00127C  EC9B  F018         	call	_turnLeft45	;wreg free
  3886                           
  3887                           ;colour_identify.c: 209:             stop(mL,mR);
  3888   001280  C084  F017         	movff	motor_response@mL,stop@mL
  3889   001284  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3890   001288  C086  F019         	movff	motor_response@mR,stop@mR
  3891   00128C  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3892   001290  ECC1  F019         	call	_stop	;wreg free
  3893                           
  3894                           ;colour_identify.c: 210:             turnLeft45(mL,mR);
  3895   001294  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3896   001298  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3897   00129C  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3898   0012A0  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3899   0012A4  EC9B  F018         	call	_turnLeft45	;wreg free
  3900                           
  3901                           ;colour_identify.c: 211:             stop(mL,mR);
  3902   0012A8  C084  F017         	movff	motor_response@mL,stop@mL
  3903   0012AC  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3904   0012B0  C086  F019         	movff	motor_response@mR,stop@mR
  3905   0012B4  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3906   0012B8  ECC1  F019         	call	_stop	;wreg free
  3907                           
  3908                           ;colour_identify.c: 212:             turnLeft45(mL,mR);
  3909   0012BC  C084  F017         	movff	motor_response@mL,turnLeft45@mL
  3910   0012C0  C085  F018         	movff	motor_response@mL+1,turnLeft45@mL+1
  3911   0012C4  C086  F019         	movff	motor_response@mR,turnLeft45@mR
  3912   0012C8  C087  F01A         	movff	motor_response@mR+1,turnLeft45@mR+1
  3913   0012CC  EC9B  F018         	call	_turnLeft45	;wreg free
  3914                           
  3915                           ;colour_identify.c: 213:             stop(mL,mR);
  3916   0012D0  C084  F017         	movff	motor_response@mL,stop@mL
  3917   0012D4  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  3918   0012D8  C086  F019         	movff	motor_response@mR,stop@mR
  3919   0012DC  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  3920   0012E0  ECC1  F019         	call	_stop	;wreg free
  3921   0012E4                     
  3922                           ;colour_identify.c: 214:             for(int i = 29; i >= 0; i--){
  3923   0012E4  0E00               	movlw	0
  3924   0012E6  0100               	movlb	0	; () banked
  3925   0012E8  6F91               	movwf	(motor_response@i+1)& (0+255),b
  3926   0012EA  0E1D               	movlw	29
  3927   0012EC  6F90               	movwf	motor_response@i& (0+255),b
  3928   0012EE                     l4569:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;colour_identify.c: 215:                 if (ReturnHomeTimes[i] != 0){
  3932   0012EE  90D8               	bcf	status,0,c
  3933   0012F0  3590               	rlcf	motor_response@i& (0+255),w,b
  3934   0012F2  6ED9               	movwf	fsr2l,c
  3935   0012F4  3591               	rlcf	(motor_response@i+1)& (0+255),w,b
  3936   0012F6  6EDA               	movwf	fsr2h,c
  3937   0012F8  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  3938   0012FA  26D9               	addwf	fsr2l,f,c
  3939   0012FC  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  3940   0012FE  22DA               	addwfc	fsr2h,f,c
  3941   001300  50DE               	movf	postinc2,w,c
  3942   001302  10DE               	iorwf	postinc2,w,c
  3943   001304  B4D8               	btfsc	status,2,c
  3944   001306  EF87  F009         	goto	u2401
  3945   00130A  EF89  F009         	goto	u2400
  3946   00130E                     u2401:
  3947   00130E  EF4B  F00A         	goto	l4607
  3948   001312                     u2400:
  3949   001312                     
  3950                           ; BSR set to: 0
  3951                           ;colour_identify.c: 216:                     fullSpeedAhead(mL,mR);
  3952   001312  C084  F017         	movff	motor_response@mL,fullSpeedAhead@mL
  3953   001316  C085  F018         	movff	motor_response@mL+1,fullSpeedAhead@mL+1
  3954   00131A  C086  F019         	movff	motor_response@mR,fullSpeedAhead@mR
  3955   00131E  C087  F01A         	movff	motor_response@mR+1,fullSpeedAhead@mR+1
  3956   001322  EC37  F019         	call	_fullSpeedAhead	;wreg free
  3957   001326                     
  3958                           ;colour_identify.c: 217:                     sprintf(buf, "Time gonna move for %d \n", R
      +                          eturnHomeTimes[i]);
  3959   001326  C081  F066         	movff	motor_response@buf,sprintf@s
  3960   00132A  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  3961   00132E  0EA9               	movlw	low STR_7
  3962   001330  0100               	movlb	0	; () banked
  3963   001332  6F68               	movwf	sprintf@fmt& (0+255),b
  3964   001334  0E0E               	movlw	high STR_7
  3965   001336  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3966   001338  90D8               	bcf	status,0,c
  3967   00133A  3590               	rlcf	motor_response@i& (0+255),w,b
  3968   00133C  6ED9               	movwf	fsr2l,c
  3969   00133E  3591               	rlcf	(motor_response@i+1)& (0+255),w,b
  3970   001340  6EDA               	movwf	fsr2h,c
  3971   001342  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  3972   001344  26D9               	addwf	fsr2l,f,c
  3973   001346  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  3974   001348  22DA               	addwfc	fsr2h,f,c
  3975   00134A  CFDE F06A          	movff	postinc2,?_sprintf+4
  3976   00134E  CFDD F06B          	movff	postdec2,?_sprintf+5
  3977   001352  EC17  F01B         	call	_sprintf	;wreg free
  3978   001356                     
  3979                           ;colour_identify.c: 218:                     sendStringSerial4(buf);
  3980   001356  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  3981   00135A  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  3982   00135E  EC81  F01C         	call	_sendStringSerial4	;wreg free
  3983   001362                     
  3984                           ;colour_identify.c: 219:                     for (int j=0; j<= ReturnHomeTimes[i]; j++){
  3985   001362  0E00               	movlw	0
  3986   001364  0100               	movlb	0	; () banked
  3987   001366  6F8D               	movwf	(motor_response@j+1)& (0+255),b
  3988   001368  0E00               	movlw	0
  3989   00136A  6F8C               	movwf	motor_response@j& (0+255),b
  3990   00136C  EFC7  F009         	goto	l4583
  3991   001370                     l4579:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;colour_identify.c: 220:                         _delay((unsigned long)((100)*(64000000/
      +                          4000.0)));
  3995   001370  0E09               	movlw	9
  3996   001372  6E57               	movwf	(??_motor_response+1)^0,c
  3997   001374  0E1E               	movlw	30
  3998   001376  6E56               	movwf	??_motor_response^0,c
  3999   001378  0EE4               	movlw	228
  4000   00137A                     u2807:
  4001   00137A  2EE8               	decfsz	wreg,f,c
  4002   00137C  D7FE               	bra	u2807
  4003   00137E  2E56               	decfsz	??_motor_response^0,f,c
  4004   001380  D7FC               	bra	u2807
  4005   001382  2E57               	decfsz	(??_motor_response+1)^0,f,c
  4006   001384  D7FA               	bra	u2807
  4007   001386  D000               	nop2	
  4008   001388                     
  4009                           ;colour_identify.c: 221:                     }
  4010   001388  0100               	movlb	0	; () banked
  4011   00138A  4B8C               	infsnz	motor_response@j& (0+255),f,b
  4012   00138C  2B8D               	incf	(motor_response@j+1)& (0+255),f,b
  4013   00138E                     l4583:
  4014                           
  4015                           ; BSR set to: 0
  4016   00138E  90D8               	bcf	status,0,c
  4017   001390  3590               	rlcf	motor_response@i& (0+255),w,b
  4018   001392  6ED9               	movwf	fsr2l,c
  4019   001394  3591               	rlcf	(motor_response@i+1)& (0+255),w,b
  4020   001396  6EDA               	movwf	fsr2h,c
  4021   001398  5188               	movf	motor_response@ReturnHomeTimes& (0+255),w,b
  4022   00139A  26D9               	addwf	fsr2l,f,c
  4023   00139C  5189               	movf	(motor_response@ReturnHomeTimes+1)& (0+255),w,b
  4024   00139E  22DA               	addwfc	fsr2h,f,c
  4025   0013A0  518C               	movf	motor_response@j& (0+255),w,b
  4026   0013A2  5CDE               	subwf	postinc2,w,c
  4027   0013A4  518D               	movf	(motor_response@j+1)& (0+255),w,b
  4028   0013A6  58DE               	subwfb	postinc2,w,c
  4029   0013A8  B0D8               	btfsc	status,0,c
  4030   0013AA  EFD9  F009         	goto	u2411
  4031   0013AE  EFDB  F009         	goto	u2410
  4032   0013B2                     u2411:
  4033   0013B2  EFB8  F009         	goto	l4579
  4034   0013B6                     u2410:
  4035   0013B6                     
  4036                           ; BSR set to: 0
  4037                           ;colour_identify.c: 222:                     stop(mL,mR);
  4038   0013B6  C084  F017         	movff	motor_response@mL,stop@mL
  4039   0013BA  C085  F018         	movff	motor_response@mL+1,stop@mL+1
  4040   0013BE  C086  F019         	movff	motor_response@mR,stop@mR
  4041   0013C2  C087  F01A         	movff	motor_response@mR+1,stop@mR+1
  4042   0013C6  ECC1  F019         	call	_stop	;wreg free
  4043   0013CA                     
  4044                           ;colour_identify.c: 223:                     for(int k = 0; k<= 5; k++){
  4045   0013CA  0E00               	movlw	0
  4046   0013CC  0100               	movlb	0	; () banked
  4047   0013CE  6F8F               	movwf	(motor_response@k+1)& (0+255),b
  4048   0013D0  0E00               	movlw	0
  4049   0013D2  6F8E               	movwf	motor_response@k& (0+255),b
  4050   0013D4                     l4589:
  4051                           
  4052                           ; BSR set to: 0
  4053   0013D4  BF8F               	btfsc	(motor_response@k+1)& (0+255),7,b
  4054   0013D6  EFF6  F009         	goto	u2421
  4055   0013DA  518F               	movf	(motor_response@k+1)& (0+255),w,b
  4056   0013DC  E109               	bnz	u2420
  4057   0013DE  0E06               	movlw	6
  4058   0013E0  5D8E               	subwf	motor_response@k& (0+255),w,b
  4059   0013E2  A0D8               	btfss	status,0,c
  4060   0013E4  EFF6  F009         	goto	u2421
  4061   0013E8  EFF8  F009         	goto	u2420
  4062   0013EC                     u2421:
  4063   0013EC  EFFA  F009         	goto	l4593
  4064   0013F0                     u2420:
  4065   0013F0  EF1E  F00A         	goto	l4601
  4066   0013F4                     l4593:
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;colour_identify.c: 224:                         sprintf(buf, "Cardcount %d, card %d  \n
      +                          ", k, ReturnHomeCards[k]);
  4070   0013F4  C081  F066         	movff	motor_response@buf,sprintf@s
  4071   0013F8  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4072   0013FC  0E90               	movlw	low STR_8
  4073   0013FE  6F68               	movwf	sprintf@fmt& (0+255),b
  4074   001400  0E0E               	movlw	high STR_8
  4075   001402  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4076   001404  C08E  F06A         	movff	motor_response@k,?_sprintf+4
  4077   001408  C08F  F06B         	movff	motor_response@k+1,?_sprintf+5
  4078   00140C  518E               	movf	motor_response@k& (0+255),w,b
  4079   00140E  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4080   001410  6ED9               	movwf	fsr2l,c
  4081   001412  518F               	movf	(motor_response@k+1)& (0+255),w,b
  4082   001414  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4083   001416  6EDA               	movwf	fsr2h,c
  4084   001418  50DF               	movf	indf2,w,c
  4085   00141A  6E56               	movwf	??_motor_response^0,c
  4086   00141C  5056               	movf	??_motor_response^0,w,c
  4087   00141E  6F6C               	movwf	(?_sprintf+6)& (0+255),b
  4088   001420  6B6D               	clrf	(?_sprintf+7)& (0+255),b
  4089   001422  EC17  F01B         	call	_sprintf	;wreg free
  4090   001426                     
  4091                           ;colour_identify.c: 225:                         sendStringSerial4(buf);
  4092   001426  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4093   00142A  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4094   00142E  EC81  F01C         	call	_sendStringSerial4	;wreg free
  4095   001432                     
  4096                           ;colour_identify.c: 226:                     }
  4097   001432  0100               	movlb	0	; () banked
  4098   001434  4B8E               	infsnz	motor_response@k& (0+255),f,b
  4099   001436  2B8F               	incf	(motor_response@k+1)& (0+255),f,b
  4100   001438  EFEA  F009         	goto	l4589
  4101   00143C                     l4601:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;colour_identify.c: 227:                     sprintf(buf, "Card gonna respond to %d \n",
      +                           ReturnHomeCards[i]);
  4105   00143C  C081  F066         	movff	motor_response@buf,sprintf@s
  4106   001440  C082  F067         	movff	motor_response@buf+1,sprintf@s+1
  4107   001444  0E75               	movlw	low STR_9
  4108   001446  6F68               	movwf	sprintf@fmt& (0+255),b
  4109   001448  0E0E               	movlw	high STR_9
  4110   00144A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  4111   00144C  5190               	movf	motor_response@i& (0+255),w,b
  4112   00144E  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4113   001450  6ED9               	movwf	fsr2l,c
  4114   001452  5191               	movf	(motor_response@i+1)& (0+255),w,b
  4115   001454  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4116   001456  6EDA               	movwf	fsr2h,c
  4117   001458  50DF               	movf	indf2,w,c
  4118   00145A  6E56               	movwf	??_motor_response^0,c
  4119   00145C  5056               	movf	??_motor_response^0,w,c
  4120   00145E  6F6A               	movwf	(?_sprintf+4)& (0+255),b
  4121   001460  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  4122   001462  EC17  F01B         	call	_sprintf	;wreg free
  4123   001466                     
  4124                           ;colour_identify.c: 228:                     sendStringSerial4(buf);
  4125   001466  C081  F005         	movff	motor_response@buf,sendStringSerial4@string
  4126   00146A  C082  F006         	movff	motor_response@buf+1,sendStringSerial4@string+1
  4127   00146E  EC81  F01C         	call	_sendStringSerial4	;wreg free
  4128   001472                     
  4129                           ;colour_identify.c: 229:                     home_response(ReturnHomeCards[i], mL, mR);
  4130   001472  C084  F01F         	movff	motor_response@mL,home_response@mL
  4131   001476  C085  F020         	movff	motor_response@mL+1,home_response@mL+1
  4132   00147A  C086  F021         	movff	motor_response@mR,home_response@mR
  4133   00147E  C087  F022         	movff	motor_response@mR+1,home_response@mR+1
  4134   001482  0100               	movlb	0	; () banked
  4135   001484  5190               	movf	motor_response@i& (0+255),w,b
  4136   001486  258A               	addwf	motor_response@ReturnHomeCards& (0+255),w,b
  4137   001488  6ED9               	movwf	fsr2l,c
  4138   00148A  5191               	movf	(motor_response@i+1)& (0+255),w,b
  4139   00148C  218B               	addwfc	(motor_response@ReturnHomeCards+1)& (0+255),w,b
  4140   00148E  6EDA               	movwf	fsr2h,c
  4141   001490  50DF               	movf	indf2,w,c
  4142   001492  EC69  F00D         	call	_home_response
  4143   001496                     l4607:
  4144                           
  4145                           ;colour_identify.c: 231:             }
  4146   001496  0100               	movlb	0	; () banked
  4147   001498  0790               	decf	motor_response@i& (0+255),f,b
  4148   00149A  A0D8               	btfss	status,0,c
  4149   00149C  0791               	decf	(motor_response@i+1)& (0+255),f,b
  4150   00149E                     
  4151                           ; BSR set to: 0
  4152   00149E  BF91               	btfsc	(motor_response@i+1)& (0+255),7,b
  4153   0014A0  EF56  F00A         	goto	u2430
  4154   0014A4  EF54  F00A         	goto	u2431
  4155   0014A8                     u2431:
  4156   0014A8  EF77  F009         	goto	l4569
  4157   0014AC                     u2430:
  4158   0014AC  EFB4  F007         	goto	l4469
  4159   0014B0                     l385:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;colour_identify.c: 236:             LATHbits.LATH3=1;
  4163   0014B0  8680               	bsf	128,3,c	;volatile
  4164   0014B2                     
  4165                           ; BSR set to: 0
  4166                           ;colour_identify.c: 237:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4167   0014B2  0E11               	movlw	17
  4168   0014B4  6E57               	movwf	(??_motor_response+1)^0,c
  4169   0014B6  0E3C               	movlw	60
  4170   0014B8  6E56               	movwf	??_motor_response^0,c
  4171   0014BA  0ECB               	movlw	203
  4172   0014BC                     u2817:
  4173   0014BC  2EE8               	decfsz	wreg,f,c
  4174   0014BE  D7FE               	bra	u2817
  4175   0014C0  2E56               	decfsz	??_motor_response^0,f,c
  4176   0014C2  D7FC               	bra	u2817
  4177   0014C4  2E57               	decfsz	(??_motor_response+1)^0,f,c
  4178   0014C6  D7FA               	bra	u2817
  4179   0014C8  F000               	nop	
  4180   0014CA                     
  4181                           ;colour_identify.c: 238:             LATHbits.LATH3=0;
  4182   0014CA  9680               	bcf	128,3,c	;volatile
  4183                           
  4184                           ;colour_identify.c: 239:             break;
  4185   0014CC  EFAA  F00A         	goto	l387
  4186   0014D0                     l386:
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;colour_identify.c: 241:             LATHbits.LATH1 = 1;
  4190   0014D0  8280               	bsf	128,1,c	;volatile
  4191   0014D2                     
  4192                           ; BSR set to: 0
  4193                           ;colour_identify.c: 242:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4194   0014D2  0E29               	movlw	41
  4195   0014D4  6E57               	movwf	(??_motor_response+1)^0,c
  4196   0014D6  0E96               	movlw	150
  4197   0014D8  6E56               	movwf	??_motor_response^0,c
  4198   0014DA  0E7F               	movlw	127
  4199   0014DC                     u2827:
  4200   0014DC  2EE8               	decfsz	wreg,f,c
  4201   0014DE  D7FE               	bra	u2827
  4202   0014E0  2E56               	decfsz	??_motor_response^0,f,c
  4203   0014E2  D7FC               	bra	u2827
  4204   0014E4  2E57               	decfsz	(??_motor_response+1)^0,f,c
  4205   0014E6  D7FA               	bra	u2827
  4206   0014E8  F000               	nop	
  4207   0014EA                     
  4208                           ;colour_identify.c: 243:             LATHbits.LATH1 = 0;
  4209   0014EA  9280               	bcf	128,1,c	;volatile
  4210                           
  4211                           ;colour_identify.c: 244:             break;
  4212   0014EC  EFAA  F00A         	goto	l387
  4213   0014F0                     l4623:
  4214   0014F0  0100               	movlb	0	; () banked
  4215   0014F2  5183               	movf	motor_response@card& (0+255),w,b
  4216   0014F4  6E56               	movwf	??_motor_response^0,c
  4217   0014F6  6A57               	clrf	(??_motor_response+1)^0,c
  4218                           
  4219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4220                           ; Switch size 1, requested type "simple"
  4221                           ; Number of cases is 1, Range of values is 0 to 0
  4222                           ; switch strategies available:
  4223                           ; Name         Instructions Cycles
  4224                           ; simple_byte            4     3 (average)
  4225                           ;	Chosen strategy is simple_byte
  4226   0014F8  5057               	movf	(??_motor_response+1)^0,w,c
  4227   0014FA  0A00               	xorlw	0	; case 0
  4228   0014FC  B4D8               	btfsc	status,2,c
  4229   0014FE  EF83  F00A         	goto	l5061
  4230   001502  EF68  F00A         	goto	l386
  4231   001506                     l5061:
  4232                           
  4233                           ; BSR set to: 0
  4234                           ; Switch size 1, requested type "simple"
  4235                           ; Number of cases is 9, Range of values is 0 to 8
  4236                           ; switch strategies available:
  4237                           ; Name         Instructions Cycles
  4238                           ; simple_byte           28    15 (average)
  4239                           ;	Chosen strategy is simple_byte
  4240   001506  5056               	movf	??_motor_response^0,w,c
  4241   001508  0A00               	xorlw	0	; case 0
  4242   00150A  B4D8               	btfsc	status,2,c
  4243   00150C  EF81  F007         	goto	l4459
  4244   001510  0A01               	xorlw	1	; case 1
  4245   001512  B4D8               	btfsc	status,2,c
  4246   001514  EFC0  F007         	goto	l4471
  4247   001518  0A03               	xorlw	3	; case 2
  4248   00151A  B4D8               	btfsc	status,2,c
  4249   00151C  EFF5  F007         	goto	l4483
  4250   001520  0A01               	xorlw	1	; case 3
  4251   001522  B4D8               	btfsc	status,2,c
  4252   001524  EF34  F008         	goto	l4503
  4253   001528  0A07               	xorlw	7	; case 4
  4254   00152A  B4D8               	btfsc	status,2,c
  4255   00152C  EFA9  F008         	goto	l4513
  4256   001530  0A01               	xorlw	1	; case 5
  4257   001532  B4D8               	btfsc	status,2,c
  4258   001534  EFE0  F008         	goto	l4529
  4259   001538  0A03               	xorlw	3	; case 6
  4260   00153A  B4D8               	btfsc	status,2,c
  4261   00153C  EFF7  F008         	goto	l4545
  4262   001540  0A01               	xorlw	1	; case 7
  4263   001542  B4D8               	btfsc	status,2,c
  4264   001544  EF18  F009         	goto	l4561
  4265   001548  0A0F               	xorlw	15	; case 8
  4266   00154A  B4D8               	btfsc	status,2,c
  4267   00154C  EF58  F00A         	goto	l385
  4268   001550  EF68  F00A         	goto	l386
  4269   001554                     l387:
  4270   001554  0012               	return		;funcret
  4271   001556                     __end_of_motor_response:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function _sprintf *****************
  4275 ;; Defined at:
  4276 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  s               2    6[BANK0 ] PTR unsigned char 
  4279 ;;		 -> main@buf(150), 
  4280 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  4281 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4282 ;;		 -> STR_9(27), STR_8(25), STR_7(25), STR_6(23), 
  4283 ;;		 -> STR_5(10), STR_4(30), STR_3(15), STR_2(23), 
  4284 ;;		 -> STR_1(50), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  f              11   22[BANK0 ] struct _IO_FILE
  4287 ;;  ap              2   20[BANK0 ] PTR void [1]
  4288 ;;		 -> ?_sprintf(2), 
  4289 ;;  ret             2    0        int 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  2    6[BANK0 ] int 
  4292 ;; Registers used:
  4293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4299 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4302 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4303 ;;Total ram usage:       27 bytes
  4304 ;; Hardware stack levels used: 1
  4305 ;; Hardware stack levels required when called: 8
  4306 ;; This function calls:
  4307 ;;		_vfprintf
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;;		_clear_read_calibration
  4311 ;;		_motor_response
  4312 ;;		_card_response
  4313 ;;		_card_response_easy
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text10
  4318   00362E                     __ptext10:
  4319                           	callstack 0
  4320   00362E                     _sprintf:
  4321                           	callstack 22
  4322   00362E  0E6A               	movlw	low (?_sprintf+4)
  4323   003630  0100               	movlb	0	; () banked
  4324   003632  6F74               	movwf	sprintf@ap& (0+255),b
  4325   003634  0E00               	movlw	high (?_sprintf+4)
  4326   003636  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4327   003638  C066  F076         	movff	sprintf@s,sprintf@f
  4328   00363C  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  4329   003640                     
  4330                           ; BSR set to: 0
  4331   003640  0E00               	movlw	0
  4332   003642  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  4333   003644  0E00               	movlw	0
  4334   003646  6F79               	movwf	(sprintf@f+3)& (0+255),b
  4335   003648                     
  4336                           ; BSR set to: 0
  4337   003648  0E00               	movlw	0
  4338   00364A  6F80               	movwf	(sprintf@f+10)& (0+255),b
  4339   00364C  0E00               	movlw	0
  4340   00364E  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  4341   003650                     
  4342                           ; BSR set to: 0
  4343   003650  0E76               	movlw	low sprintf@f
  4344   003652  6F60               	movwf	vfprintf@fp& (0+255),b
  4345   003654  0E00               	movlw	high sprintf@f
  4346   003656  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4347   003658  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4348   00365C  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4349   003660  0E74               	movlw	low sprintf@ap
  4350   003662  6F64               	movwf	vfprintf@ap& (0+255),b
  4351   003664  0E00               	movlw	high sprintf@ap
  4352   003666  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4353   003668  ECED  F01A         	call	_vfprintf	;wreg free
  4354   00366C  0100               	movlb	0	; () banked
  4355   00366E  5179               	movf	(sprintf@f+3)& (0+255),w,b
  4356   003670  2566               	addwf	sprintf@s& (0+255),w,b
  4357   003672  6ED9               	movwf	fsr2l,c
  4358   003674  517A               	movf	(sprintf@f+4)& (0+255),w,b
  4359   003676  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4360   003678  6EDA               	movwf	fsr2h,c
  4361   00367A  0E00               	movlw	0
  4362   00367C  6EDF               	movwf	indf2,c
  4363   00367E                     
  4364                           ; BSR set to: 0
  4365   00367E  0012               	return		;funcret
  4366   003680                     __end_of_sprintf:
  4367                           	callstack 0
  4368                           
  4369 ;; *************** function _vfprintf *****************
  4370 ;; Defined at:
  4371 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4374 ;;		 -> sprintf@f(11), 
  4375 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4376 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4377 ;;		 -> STR_9(27), STR_8(25), STR_7(25), STR_6(23), 
  4378 ;;		 -> STR_5(10), STR_4(30), STR_3(15), STR_2(23), 
  4379 ;;		 -> STR_1(50), 
  4380 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4381 ;;		 -> sprintf@ap(2), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  4384 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4385 ;;		 -> STR_9(27), STR_8(25), STR_7(25), STR_6(23), 
  4386 ;;		 -> STR_5(10), STR_4(30), STR_3(15), STR_2(23), 
  4387 ;;		 -> STR_1(50), 
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  2    0[BANK0 ] int 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4397 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4400 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4401 ;;Total ram usage:        8 bytes
  4402 ;; Hardware stack levels used: 1
  4403 ;; Hardware stack levels required when called: 7
  4404 ;; This function calls:
  4405 ;;		_vfpfcnvrt
  4406 ;; This function is called by:
  4407 ;;		_sprintf
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text11
  4412   0035DA                     __ptext11:
  4413                           	callstack 0
  4414   0035DA                     _vfprintf:
  4415                           	callstack 22
  4416   0035DA                     
  4417                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4418   0035DA  C062  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  4419   0035DE  C063  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4420                           
  4421                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4422   0035E2  EF01  F01B         	goto	l4219
  4423   0035E6                     l4217:
  4424                           
  4425                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4426   0035E6  C060  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
  4427   0035EA  C061  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4428   0035EE  0E54               	movlw	low vfprintf@cfmt
  4429   0035F0  6E44               	movwf	vfpfcnvrt@fmt^0,c
  4430   0035F2  0E00               	movlw	high vfprintf@cfmt
  4431   0035F4  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4432   0035F6  C064  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
  4433   0035FA  C065  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4434   0035FE  EC1E  F016         	call	_vfpfcnvrt	;wreg free
  4435   003602                     l4219:
  4436                           
  4437                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4438   003602  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  4439   003606  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4440   00360A                     	if	0	;tblptru may be non-zero
  4441   00360A                     	endif
  4442   00360A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4443   00360A  0E00               	movlw	low (__mediumconst shr (0+16))
  4444   00360C  6EF8               	movwf	tblptru,c
  4445   00360E                     	endif
  4446   00360E  0008               	tblrd		*
  4447   003610  50F5               	movf	tablat,w,c
  4448   003612  0900               	iorlw	0
  4449   003614  A4D8               	btfss	status,2,c
  4450   003616  EF0F  F01B         	goto	u2281
  4451   00361A  EF11  F01B         	goto	u2280
  4452   00361E                     u2281:
  4453   00361E  EFF3  F01A         	goto	l4217
  4454   003622                     u2280:
  4455   003622                     
  4456                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4457   003622  0E00               	movlw	0
  4458   003624  0100               	movlb	0	; () banked
  4459   003626  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4460   003628  0E00               	movlw	0
  4461   00362A  6F60               	movwf	?_vfprintf& (0+255),b
  4462   00362C                     
  4463                           ; BSR set to: 0
  4464   00362C  0012               	return		;funcret
  4465   00362E                     __end_of_vfprintf:
  4466                           	callstack 0
  4467                           
  4468 ;; *************** function _vfpfcnvrt *****************
  4469 ;; Defined at:
  4470 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
  4473 ;;		 -> sprintf@f(11), 
  4474 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
  4475 ;;		 -> vfprintf@cfmt(2), 
  4476 ;;  ap              2   69[COMRAM] PTR PTR void 
  4477 ;;		 -> sprintf@ap(2), 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  convarg         8   73[COMRAM] struct .
  4480 ;;  cp              2   81[COMRAM] PTR unsigned char 
  4481 ;;		 -> STR_13(10), STR_12(36), STR_11(10), STR_10(36), 
  4482 ;;		 -> STR_9(27), STR_8(25), STR_7(25), STR_6(23), 
  4483 ;;		 -> STR_5(10), STR_4(30), STR_3(15), STR_2(23), 
  4484 ;;		 -> STR_1(50), 
  4485 ;;  i               2    0        int 
  4486 ;;  done            2    0        int 
  4487 ;;  c               1    0        unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4497 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4498 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;Total ram usage:       18 bytes
  4502 ;; Hardware stack levels used: 1
  4503 ;; Hardware stack levels required when called: 6
  4504 ;; This function calls:
  4505 ;;		_dtoa
  4506 ;;		_fputc
  4507 ;; This function is called by:
  4508 ;;		_vfprintf
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text12
  4513   002C3C                     __ptext12:
  4514                           	callstack 0
  4515   002C3C                     _vfpfcnvrt:
  4516                           	callstack 22
  4517   002C3C                     
  4518                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4519   002C3C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4520   002C40  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4521   002C44  CFDE FFF6          	movff	postinc2,tblptrl
  4522   002C48  CFDD FFF7          	movff	postdec2,tblptrh
  4523   002C4C                     	if	0	;tblptru may be non-zero
  4524   002C4C                     	endif
  4525   002C4C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4526   002C4C  0E00               	movlw	low (__mediumconst shr (0+16))
  4527   002C4E  6EF8               	movwf	tblptru,c
  4528   002C50                     	endif
  4529   002C50  0008               	tblrd		*
  4530   002C52  50F5               	movf	tablat,w,c
  4531   002C54  0A25               	xorlw	37
  4532   002C56  A4D8               	btfss	status,2,c
  4533   002C58  EF30  F016         	goto	u2171
  4534   002C5C  EF32  F016         	goto	u2170
  4535   002C60                     u2171:
  4536   002C60  EFB6  F016         	goto	l4093
  4537   002C64                     u2170:
  4538   002C64                     
  4539                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4540   002C64  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4541   002C68  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4542   002C6C  2ADE               	incf	postinc2,f,c
  4543   002C6E  0E00               	movlw	0
  4544   002C70  22DD               	addwfc	postdec2,f,c
  4545   002C72                     
  4546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4547   002C72  0E00               	movlw	0
  4548   002C74  0102               	movlb	2	; () banked
  4549   002C76  6F51               	movwf	(_width+1)& (0+255),b
  4550   002C78  0E00               	movlw	0
  4551   002C7A  6F50               	movwf	_width& (0+255),b
  4552   002C7C  C250  F25A         	movff	_width,_flags
  4553   002C80                     
  4554                           ; BSR set to: 2
  4555                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4556   002C80  6952               	setf	_prec& (0+255),b
  4557   002C82  6953               	setf	(_prec+1)& (0+255),b
  4558   002C84                     
  4559                           ; BSR set to: 2
  4560                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4561   002C84  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4562   002C88  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4563   002C8C  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  4564   002C90  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  4565   002C94                     
  4566                           ; BSR set to: 2
  4567                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4568   002C94  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4569   002C98  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4570   002C9C                     	if	0	;tblptru may be non-zero
  4571   002C9C                     	endif
  4572   002C9C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4573   002C9C  0E00               	movlw	low (__mediumconst shr (0+16))
  4574   002C9E  6EF8               	movwf	tblptru,c
  4575   002CA0                     	endif
  4576   002CA0  0008               	tblrd		*
  4577   002CA2  50F5               	movf	tablat,w,c
  4578   002CA4  0A64               	xorlw	100
  4579   002CA6  B4D8               	btfsc	status,2,c
  4580   002CA8  EF58  F016         	goto	u2181
  4581   002CAC  EF5A  F016         	goto	u2180
  4582   002CB0                     u2181:
  4583   002CB0  EF6A  F016         	goto	l4083
  4584   002CB4                     u2180:
  4585   002CB4                     
  4586                           ; BSR set to: 2
  4587   002CB4  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4588   002CB8  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4589   002CBC                     	if	0	;tblptru may be non-zero
  4590   002CBC                     	endif
  4591   002CBC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4592   002CBC  0E00               	movlw	low (__mediumconst shr (0+16))
  4593   002CBE  6EF8               	movwf	tblptru,c
  4594   002CC0                     	endif
  4595   002CC0  0008               	tblrd		*
  4596   002CC2  50F5               	movf	tablat,w,c
  4597   002CC4  0A69               	xorlw	105
  4598   002CC6  A4D8               	btfss	status,2,c
  4599   002CC8  EF68  F016         	goto	u2191
  4600   002CCC  EF6A  F016         	goto	u2190
  4601   002CD0                     u2191:
  4602   002CD0  EFAD  F016         	goto	l4089
  4603   002CD4                     u2190:
  4604   002CD4                     l4083:
  4605                           
  4606                           ; BSR set to: 2
  4607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4608   002CD4  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4609   002CD8  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4610   002CDC  CFDF F048          	movff	indf2,??_vfpfcnvrt
  4611   002CE0  0E02               	movlw	2
  4612   002CE2  26DE               	addwf	postinc2,f,c
  4613   002CE4  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  4614   002CE8  0E00               	movlw	0
  4615   002CEA  22DD               	addwfc	postdec2,f,c
  4616   002CEC  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4617   002CF0  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4618   002CF4  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  4619   002CF8  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  4620   002CFC  0E00               	movlw	0
  4621   002CFE  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4622   002D00  0EFF               	movlw	-1
  4623   002D02  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4624   002D04  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4625   002D06  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4626   002D08  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4627   002D0A  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4628   002D0C  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4629                           
  4630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4631   002D0E  0E01               	movlw	1
  4632   002D10  2452               	addwf	vfpfcnvrt@cp^0,w,c
  4633   002D12  6E48               	movwf	??_vfpfcnvrt^0,c
  4634   002D14  0E00               	movlw	0
  4635   002D16  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4636   002D18  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  4637   002D1A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4638   002D1E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4639   002D22  C048  FFDE         	movff	??_vfpfcnvrt,postinc2
  4640   002D26  C049  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4641   002D2A                     
  4642                           ; BSR set to: 2
  4643                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4644   002D2A  C042  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  4645   002D2E  C043  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4646   002D32  C04A  F021         	movff	vfpfcnvrt@convarg,dtoa@d
  4647   002D36  C04B  F022         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4648   002D3A  C04C  F023         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4649   002D3E  C04D  F024         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4650   002D42  C04E  F025         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4651   002D46  C04F  F026         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4652   002D4A  C050  F027         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4653   002D4E  C051  F028         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4654   002D52  ECC2  F010         	call	_dtoa	;wreg free
  4655   002D56  EFCC  F016         	goto	l1278
  4656   002D5A                     l4089:
  4657                           
  4658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4659   002D5A  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4660   002D5E  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4661   002D62  2ADE               	incf	postinc2,f,c
  4662   002D64  0E00               	movlw	0
  4663   002D66  22DD               	addwfc	postdec2,f,c
  4664   002D68  EFCC  F016         	goto	l1278
  4665   002D6C                     l4093:
  4666                           
  4667                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4668   002D6C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4669   002D70  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4670   002D74  CFDE FFF6          	movff	postinc2,tblptrl
  4671   002D78  CFDD FFF7          	movff	postdec2,tblptrh
  4672   002D7C                     	if	0	;tblptru may be non-zero
  4673   002D7C                     	endif
  4674   002D7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4675   002D7C  0E00               	movlw	low (__mediumconst shr (0+16))
  4676   002D7E  6EF8               	movwf	tblptru,c
  4677   002D80                     	endif
  4678   002D80  0008               	tblrd		*
  4679   002D82  50F5               	movf	tablat,w,c
  4680   002D84  6E04               	movwf	fputc@c^0,c
  4681   002D86  6A05               	clrf	(fputc@c+1)^0,c
  4682   002D88  C042  F006         	movff	vfpfcnvrt@fp,fputc@fp
  4683   002D8C  C043  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4684   002D90  ECE0  F017         	call	_fputc	;wreg free
  4685   002D94  EFAD  F016         	goto	l4089
  4686   002D98                     l1278:
  4687   002D98  0012               	return		;funcret
  4688   002D9A                     __end_of_vfpfcnvrt:
  4689                           	callstack 0
  4690                           
  4691 ;; *************** function _dtoa *****************
  4692 ;; Defined at:
  4693 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  4696 ;;		 -> sprintf@f(11), 
  4697 ;;  d               8   32[COMRAM] long long 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  n               8   54[COMRAM] long long 
  4700 ;;  i               2   63[COMRAM] int 
  4701 ;;  w               2   52[COMRAM] int 
  4702 ;;  p               2   50[COMRAM] int 
  4703 ;;  s               1   62[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4713 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4714 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;Total ram usage:       35 bytes
  4718 ;; Hardware stack levels used: 1
  4719 ;; Hardware stack levels required when called: 5
  4720 ;; This function calls:
  4721 ;;		___aodiv
  4722 ;;		___aomod
  4723 ;;		_abs
  4724 ;;		_pad
  4725 ;; This function is called by:
  4726 ;;		_vfpfcnvrt
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text13
  4731   002184                     __ptext13:
  4732                           	callstack 0
  4733   002184                     _dtoa:
  4734                           	callstack 22
  4735   002184                     
  4736                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4737   002184  C021  F037         	movff	dtoa@d,dtoa@n
  4738   002188  C022  F038         	movff	dtoa@d+1,dtoa@n+1
  4739   00218C  C023  F039         	movff	dtoa@d+2,dtoa@n+2
  4740   002190  C024  F03A         	movff	dtoa@d+3,dtoa@n+3
  4741   002194  C025  F03B         	movff	dtoa@d+4,dtoa@n+4
  4742   002198  C026  F03C         	movff	dtoa@d+5,dtoa@n+5
  4743   00219C  C027  F03D         	movff	dtoa@d+6,dtoa@n+6
  4744   0021A0  C028  F03E         	movff	dtoa@d+7,dtoa@n+7
  4745   0021A4                     
  4746                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4747   0021A4  BE3E               	btfsc	(dtoa@n+7)^0,7,c
  4748   0021A6  EFD7  F010         	goto	u2031
  4749   0021AA  EFDA  F010         	goto	u2030
  4750   0021AE                     u2031:
  4751   0021AE  0E01               	movlw	1
  4752   0021B0  EFDB  F010         	goto	u2040
  4753   0021B4                     u2030:
  4754   0021B4  0E00               	movlw	0
  4755   0021B6                     u2040:
  4756   0021B6  6E3F               	movwf	dtoa@s^0,c
  4757   0021B8                     
  4758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4759   0021B8  503F               	movf	dtoa@s^0,w,c
  4760   0021BA  B4D8               	btfsc	status,2,c
  4761   0021BC  EFE2  F010         	goto	u2051
  4762   0021C0  EFE4  F010         	goto	u2050
  4763   0021C4                     u2051:
  4764   0021C4  EFF4  F010         	goto	l4005
  4765   0021C8                     u2050:
  4766   0021C8                     
  4767                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4768   0021C8  1E3E               	comf	(dtoa@n+7)^0,f,c
  4769   0021CA  1E3D               	comf	(dtoa@n+6)^0,f,c
  4770   0021CC  1E3C               	comf	(dtoa@n+5)^0,f,c
  4771   0021CE  1E3B               	comf	(dtoa@n+4)^0,f,c
  4772   0021D0  1E3A               	comf	(dtoa@n+3)^0,f,c
  4773   0021D2  1E39               	comf	(dtoa@n+2)^0,f,c
  4774   0021D4  1E38               	comf	(dtoa@n+1)^0,f,c
  4775   0021D6  6C37               	negf	dtoa@n^0,c
  4776   0021D8  0E00               	movlw	0
  4777   0021DA  2238               	addwfc	(dtoa@n+1)^0,f,c
  4778   0021DC  2239               	addwfc	(dtoa@n+2)^0,f,c
  4779   0021DE  223A               	addwfc	(dtoa@n+3)^0,f,c
  4780   0021E0  223B               	addwfc	(dtoa@n+4)^0,f,c
  4781   0021E2  223C               	addwfc	(dtoa@n+5)^0,f,c
  4782   0021E4  223D               	addwfc	(dtoa@n+6)^0,f,c
  4783   0021E6  223E               	addwfc	(dtoa@n+7)^0,f,c
  4784   0021E8                     l4005:
  4785                           
  4786                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4787   0021E8  0102               	movlb	2	; () banked
  4788   0021EA  BF53               	btfsc	(_prec+1)& (0+255),7,b
  4789   0021EC  EF02  F011         	goto	u2060
  4790   0021F0  5153               	movf	(_prec+1)& (0+255),w,b
  4791   0021F2  E106               	bnz	u2061
  4792   0021F4  0552               	decf	_prec& (0+255),w,b
  4793   0021F6  B0D8               	btfsc	status,0,c
  4794   0021F8  EF00  F011         	goto	u2061
  4795   0021FC  EF02  F011         	goto	u2060
  4796   002200                     u2061:
  4797   002200  EF08  F011         	goto	l1257
  4798   002204                     u2060:
  4799   002204                     
  4800                           ; BSR set to: 2
  4801   002204  0E00               	movlw	0
  4802   002206  6E34               	movwf	(dtoa@p+1)^0,c
  4803   002208  0E01               	movlw	1
  4804   00220A  6E33               	movwf	dtoa@p^0,c
  4805   00220C  EF0C  F011         	goto	l1259
  4806   002210                     l1257:
  4807                           
  4808                           ; BSR set to: 2
  4809   002210  C252  F033         	movff	_prec,dtoa@p
  4810   002214  C253  F034         	movff	_prec+1,dtoa@p+1
  4811   002218                     l1259:
  4812                           
  4813                           ; BSR set to: 2
  4814                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4815   002218  C250  F035         	movff	_width,dtoa@w
  4816   00221C  C251  F036         	movff	_width+1,dtoa@w+1
  4817   002220                     
  4818                           ; BSR set to: 2
  4819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4820   002220  503F               	movf	dtoa@s^0,w,c
  4821   002222  B4D8               	btfsc	status,2,c
  4822   002224  EF16  F011         	goto	u2071
  4823   002228  EF18  F011         	goto	u2070
  4824   00222C                     u2071:
  4825   00222C  EF2F  F011         	goto	l1260
  4826   002230                     u2070:
  4827   002230                     
  4828                           ; BSR set to: 2
  4829                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4830   002230  0635               	decf	dtoa@w^0,f,c
  4831   002232  A0D8               	btfss	status,0,c
  4832   002234  0636               	decf	(dtoa@w+1)^0,f,c
  4833   002236                     
  4834                           ; BSR set to: 2
  4835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4836   002236  503F               	movf	dtoa@s^0,w,c
  4837   002238  A4D8               	btfss	status,2,c
  4838   00223A  EF21  F011         	goto	u2081
  4839   00223E  EF23  F011         	goto	u2080
  4840   002242                     u2081:
  4841   002242  EF29  F011         	goto	l4017
  4842   002246                     u2080:
  4843   002246                     
  4844                           ; BSR set to: 2
  4845   002246  0E00               	movlw	0
  4846   002248  6E32               	movwf	(_dtoa$2594+1)^0,c
  4847   00224A  0E2B               	movlw	43
  4848   00224C  6E31               	movwf	_dtoa$2594^0,c
  4849   00224E  EF2D  F011         	goto	l4019
  4850   002252                     l4017:
  4851                           
  4852                           ; BSR set to: 2
  4853   002252  0E00               	movlw	0
  4854   002254  6E32               	movwf	(_dtoa$2594+1)^0,c
  4855   002256  0E2D               	movlw	45
  4856   002258  6E31               	movwf	_dtoa$2594^0,c
  4857   00225A                     l4019:
  4858                           
  4859                           ; BSR set to: 2
  4860   00225A  C031  F03F         	movff	_dtoa$2594,dtoa@s
  4861   00225E                     l1260:
  4862                           
  4863                           ; BSR set to: 2
  4864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  4865   00225E  0E00               	movlw	0
  4866   002260  6E41               	movwf	(dtoa@i+1)^0,c
  4867   002262  0E1F               	movlw	31
  4868   002264  6E40               	movwf	dtoa@i^0,c
  4869   002266                     
  4870                           ; BSR set to: 2
  4871                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  4872   002266  0E00               	movlw	0
  4873   002268  6F7B               	movwf	(_dbuf+31)& (0+255),b
  4874                           
  4875                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4876   00226A  EFB3  F011         	goto	l4033
  4877   00226E                     l4023:
  4878                           
  4879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  4880   00226E  0640               	decf	dtoa@i^0,f,c
  4881   002270  A0D8               	btfss	status,0,c
  4882   002272  0641               	decf	(dtoa@i+1)^0,f,c
  4883   002274                     
  4884                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4885   002274  0E5C               	movlw	low _dbuf
  4886   002276  2440               	addwf	dtoa@i^0,w,c
  4887   002278  6ED9               	movwf	fsr2l,c
  4888   00227A  0E02               	movlw	high _dbuf
  4889   00227C  2041               	addwfc	(dtoa@i+1)^0,w,c
  4890   00227E  6EDA               	movwf	fsr2h,c
  4891   002280  C037  F004         	movff	dtoa@n,___aomod@dividend
  4892   002284  C038  F005         	movff	dtoa@n+1,___aomod@dividend+1
  4893   002288  C039  F006         	movff	dtoa@n+2,___aomod@dividend+2
  4894   00228C  C03A  F007         	movff	dtoa@n+3,___aomod@dividend+3
  4895   002290  C03B  F008         	movff	dtoa@n+4,___aomod@dividend+4
  4896   002294  C03C  F009         	movff	dtoa@n+5,___aomod@dividend+5
  4897   002298  C03D  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  4898   00229C  C03E  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  4899   0022A0  0E0A               	movlw	10
  4900   0022A2  6E0C               	movwf	___aomod@divisor^0,c
  4901   0022A4  0E00               	movlw	0
  4902   0022A6  6E0D               	movwf	(___aomod@divisor+1)^0,c
  4903   0022A8  0E00               	movlw	0
  4904   0022AA  6E0E               	movwf	(___aomod@divisor+2)^0,c
  4905   0022AC  0E00               	movlw	0
  4906   0022AE  6E0F               	movwf	(___aomod@divisor+3)^0,c
  4907   0022B0  0E00               	movlw	0
  4908   0022B2  6E10               	movwf	(___aomod@divisor+4)^0,c
  4909   0022B4  0E00               	movlw	0
  4910   0022B6  6E11               	movwf	(___aomod@divisor+5)^0,c
  4911   0022B8  0E00               	movlw	0
  4912   0022BA  6E12               	movwf	(___aomod@divisor+6)^0,c
  4913   0022BC  0E00               	movlw	0
  4914   0022BE  6E13               	movwf	(___aomod@divisor+7)^0,c
  4915   0022C0  EC6C  F015         	call	___aomod	;wreg free
  4916   0022C4  C004  F029         	movff	?___aomod,??_dtoa
  4917   0022C8  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  4918   0022CC  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  4919   0022D0  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  4920   0022D4  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  4921   0022D8  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  4922   0022DC  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  4923   0022E0  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  4924   0022E4  C029  F016         	movff	??_dtoa,abs@a
  4925   0022E8  C02A  F017         	movff	??_dtoa+1,abs@a+1
  4926   0022EC  EC47  F01C         	call	_abs	;wreg free
  4927   0022F0  5016               	movf	?_abs^0,w,c
  4928   0022F2  0F30               	addlw	48
  4929   0022F4  6EDF               	movwf	indf2,c
  4930   0022F6                     
  4931                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  4932   0022F6  0633               	decf	dtoa@p^0,f,c
  4933   0022F8  A0D8               	btfss	status,0,c
  4934   0022FA  0634               	decf	(dtoa@p+1)^0,f,c
  4935   0022FC                     
  4936                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  4937   0022FC  0635               	decf	dtoa@w^0,f,c
  4938   0022FE  A0D8               	btfss	status,0,c
  4939   002300  0636               	decf	(dtoa@w+1)^0,f,c
  4940   002302                     
  4941                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  4942   002302  C037  F004         	movff	dtoa@n,___aodiv@dividend
  4943   002306  C038  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  4944   00230A  C039  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  4945   00230E  C03A  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  4946   002312  C03B  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  4947   002316  C03C  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  4948   00231A  C03D  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  4949   00231E  C03E  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  4950   002322  0E0A               	movlw	10
  4951   002324  6E0C               	movwf	___aodiv@divisor^0,c
  4952   002326  0E00               	movlw	0
  4953   002328  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  4954   00232A  0E00               	movlw	0
  4955   00232C  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  4956   00232E  0E00               	movlw	0
  4957   002330  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  4958   002332  0E00               	movlw	0
  4959   002334  6E10               	movwf	(___aodiv@divisor+4)^0,c
  4960   002336  0E00               	movlw	0
  4961   002338  6E11               	movwf	(___aodiv@divisor+5)^0,c
  4962   00233A  0E00               	movlw	0
  4963   00233C  6E12               	movwf	(___aodiv@divisor+6)^0,c
  4964   00233E  0E00               	movlw	0
  4965   002340  6E13               	movwf	(___aodiv@divisor+7)^0,c
  4966   002342  EC3D  F013         	call	___aodiv	;wreg free
  4967   002346  C004  F037         	movff	?___aodiv,dtoa@n
  4968   00234A  C005  F038         	movff	?___aodiv+1,dtoa@n+1
  4969   00234E  C006  F039         	movff	?___aodiv+2,dtoa@n+2
  4970   002352  C007  F03A         	movff	?___aodiv+3,dtoa@n+3
  4971   002356  C008  F03B         	movff	?___aodiv+4,dtoa@n+4
  4972   00235A  C009  F03C         	movff	?___aodiv+5,dtoa@n+5
  4973   00235E  C00A  F03D         	movff	?___aodiv+6,dtoa@n+6
  4974   002362  C00B  F03E         	movff	?___aodiv+7,dtoa@n+7
  4975   002366                     l4033:
  4976                           
  4977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4978   002366  BE41               	btfsc	(dtoa@i+1)^0,7,c
  4979   002368  EFBE  F011         	goto	u2091
  4980   00236C  5041               	movf	(dtoa@i+1)^0,w,c
  4981   00236E  E108               	bnz	u2090
  4982   002370  0440               	decf	dtoa@i^0,w,c
  4983   002372  A0D8               	btfss	status,0,c
  4984   002374  EFBE  F011         	goto	u2091
  4985   002378  EFC0  F011         	goto	u2090
  4986   00237C                     u2091:
  4987   00237C  EFDC  F011         	goto	l4039
  4988   002380                     u2090:
  4989   002380  5037               	movf	dtoa@n^0,w,c
  4990   002382  1038               	iorwf	(dtoa@n+1)^0,w,c
  4991   002384  1039               	iorwf	(dtoa@n+2)^0,w,c
  4992   002386  103A               	iorwf	(dtoa@n+3)^0,w,c
  4993   002388  103B               	iorwf	(dtoa@n+4)^0,w,c
  4994   00238A  103C               	iorwf	(dtoa@n+5)^0,w,c
  4995   00238C  103D               	iorwf	(dtoa@n+6)^0,w,c
  4996   00238E  103E               	iorwf	(dtoa@n+7)^0,w,c
  4997   002390  A4D8               	btfss	status,2,c
  4998   002392  EFCD  F011         	goto	u2101
  4999   002396  EFCF  F011         	goto	u2100
  5000   00239A                     u2101:
  5001   00239A  EF37  F011         	goto	l4023
  5002   00239E                     u2100:
  5003   00239E  BE34               	btfsc	(dtoa@p+1)^0,7,c
  5004   0023A0  EFDC  F011         	goto	u2110
  5005   0023A4  5034               	movf	(dtoa@p+1)^0,w,c
  5006   0023A6  E106               	bnz	u2111
  5007   0023A8  0433               	decf	dtoa@p^0,w,c
  5008   0023AA  B0D8               	btfsc	status,0,c
  5009   0023AC  EFDA  F011         	goto	u2111
  5010   0023B0  EFDC  F011         	goto	u2110
  5011   0023B4                     u2111:
  5012   0023B4  EF37  F011         	goto	l4023
  5013   0023B8                     u2110:
  5014   0023B8                     l4039:
  5015                           
  5016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5017   0023B8  503F               	movf	dtoa@s^0,w,c
  5018   0023BA  B4D8               	btfsc	status,2,c
  5019   0023BC  EFE2  F011         	goto	u2121
  5020   0023C0  EFE4  F011         	goto	u2120
  5021   0023C4                     u2121:
  5022   0023C4  EFEF  F011         	goto	l4045
  5023   0023C8                     u2120:
  5024   0023C8                     
  5025                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5026   0023C8  0640               	decf	dtoa@i^0,f,c
  5027   0023CA  A0D8               	btfss	status,0,c
  5028   0023CC  0641               	decf	(dtoa@i+1)^0,f,c
  5029   0023CE                     
  5030                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5031   0023CE  0E5C               	movlw	low _dbuf
  5032   0023D0  2440               	addwf	dtoa@i^0,w,c
  5033   0023D2  6ED9               	movwf	fsr2l,c
  5034   0023D4  0E02               	movlw	high _dbuf
  5035   0023D6  2041               	addwfc	(dtoa@i+1)^0,w,c
  5036   0023D8  6EDA               	movwf	fsr2h,c
  5037   0023DA  C03F  FFDF         	movff	dtoa@s,indf2
  5038   0023DE                     l4045:
  5039                           
  5040                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5041   0023DE  C01F  F014         	movff	dtoa@fp,pad@fp
  5042   0023E2  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  5043   0023E6  0E5C               	movlw	low _dbuf
  5044   0023E8  2440               	addwf	dtoa@i^0,w,c
  5045   0023EA  6E16               	movwf	pad@buf^0,c
  5046   0023EC  0E02               	movlw	high _dbuf
  5047   0023EE  2041               	addwfc	(dtoa@i+1)^0,w,c
  5048   0023F0  6E17               	movwf	(pad@buf+1)^0,c
  5049   0023F2  C035  F018         	movff	dtoa@w,pad@p
  5050   0023F6  C036  F019         	movff	dtoa@w+1,pad@p+1
  5051   0023FA  EC44  F01A         	call	_pad	;wreg free
  5052   0023FE  0012               	return		;funcret
  5053   002400                     __end_of_dtoa:
  5054                           	callstack 0
  5055                           
  5056 ;; *************** function _pad *****************
  5057 ;; Defined at:
  5058 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  5061 ;;		 -> sprintf@f(11), 
  5062 ;;  buf             2   21[COMRAM] PTR unsigned char 
  5063 ;;		 -> dbuf(32), 
  5064 ;;  p               2   23[COMRAM] int 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  w               2   28[COMRAM] int 
  5067 ;;  i               2   26[COMRAM] int 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5077 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5080 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5081 ;;Total ram usage:       11 bytes
  5082 ;; Hardware stack levels used: 1
  5083 ;; Hardware stack levels required when called: 4
  5084 ;; This function calls:
  5085 ;;		_fputc
  5086 ;;		_fputs
  5087 ;; This function is called by:
  5088 ;;		_dtoa
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text14
  5093   003488                     __ptext14:
  5094                           	callstack 0
  5095   003488                     _pad:
  5096                           	callstack 22
  5097   003488                     
  5098                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5099   003488  BE19               	btfsc	(pad@p+1)^0,7,c
  5100   00348A  EF49  F01A         	goto	u1981
  5101   00348E  EF4B  F01A         	goto	u1980
  5102   003492                     u1981:
  5103   003492  EF51  F01A         	goto	l3959
  5104   003496                     u1980:
  5105   003496  C018  F01D         	movff	pad@p,pad@w
  5106   00349A  C019  F01E         	movff	pad@p+1,pad@w+1
  5107   00349E  EF55  F01A         	goto	l1248
  5108   0034A2                     l3959:
  5109   0034A2  0E00               	movlw	0
  5110   0034A4  6E1E               	movwf	(pad@w+1)^0,c
  5111   0034A6  0E00               	movlw	0
  5112   0034A8  6E1D               	movwf	pad@w^0,c
  5113   0034AA                     l1248:
  5114                           
  5115                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5116   0034AA  0E00               	movlw	0
  5117   0034AC  6E1C               	movwf	(pad@i+1)^0,c
  5118   0034AE  0E00               	movlw	0
  5119   0034B0  6E1B               	movwf	pad@i^0,c
  5120                           
  5121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5122   0034B2  EF67  F01A         	goto	l3965
  5123   0034B6                     l3961:
  5124                           
  5125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5126   0034B6  0E00               	movlw	0
  5127   0034B8  6E05               	movwf	(fputc@c+1)^0,c
  5128   0034BA  0E20               	movlw	32
  5129   0034BC  6E04               	movwf	fputc@c^0,c
  5130   0034BE  C014  F006         	movff	pad@fp,fputc@fp
  5131   0034C2  C015  F007         	movff	pad@fp+1,fputc@fp+1
  5132   0034C6  ECE0  F017         	call	_fputc	;wreg free
  5133   0034CA                     
  5134                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5135   0034CA  4A1B               	infsnz	pad@i^0,f,c
  5136   0034CC  2A1C               	incf	(pad@i+1)^0,f,c
  5137   0034CE                     l3965:
  5138                           
  5139                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5140   0034CE  501D               	movf	pad@w^0,w,c
  5141   0034D0  5C1B               	subwf	pad@i^0,w,c
  5142   0034D2  501C               	movf	(pad@i+1)^0,w,c
  5143   0034D4  0A80               	xorlw	128
  5144   0034D6  6E1A               	movwf	??_pad^0,c
  5145   0034D8  501E               	movf	(pad@w+1)^0,w,c
  5146   0034DA  0A80               	xorlw	128
  5147   0034DC  581A               	subwfb	??_pad^0,w,c
  5148   0034DE  A0D8               	btfss	status,0,c
  5149   0034E0  EF74  F01A         	goto	u1991
  5150   0034E4  EF76  F01A         	goto	u1990
  5151   0034E8                     u1991:
  5152   0034E8  EF5B  F01A         	goto	l3961
  5153   0034EC                     u1990:
  5154   0034EC                     
  5155                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5156   0034EC  C016  F00D         	movff	pad@buf,fputs@s
  5157   0034F0  C017  F00E         	movff	pad@buf+1,fputs@s+1
  5158   0034F4  C014  F00F         	movff	pad@fp,fputs@fp
  5159   0034F8  C015  F010         	movff	pad@fp+1,fputs@fp+1
  5160   0034FC  EC04  F01C         	call	_fputs	;wreg free
  5161   003500  0012               	return		;funcret
  5162   003502                     __end_of_pad:
  5163                           	callstack 0
  5164                           
  5165 ;; *************** function _fputs *****************
  5166 ;; Defined at:
  5167 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  s               2   12[COMRAM] PTR const unsigned char 
  5170 ;;		 -> dbuf(32), 
  5171 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  5172 ;;		 -> sprintf@f(11), 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  i               2   17[COMRAM] int 
  5175 ;;  c               1   16[COMRAM] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  2   12[COMRAM] int 
  5178 ;; Registers used:
  5179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5185 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5186 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5188 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5189 ;;Total ram usage:        7 bytes
  5190 ;; Hardware stack levels used: 1
  5191 ;; Hardware stack levels required when called: 3
  5192 ;; This function calls:
  5193 ;;		_fputc
  5194 ;; This function is called by:
  5195 ;;		_pad
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text15
  5200   003808                     __ptext15:
  5201                           	callstack 0
  5202   003808                     _fputs:
  5203                           	callstack 22
  5204   003808  0E00               	movlw	0
  5205   00380A  6E13               	movwf	(fputs@i+1)^0,c
  5206   00380C  0E00               	movlw	0
  5207   00380E  6E12               	movwf	fputs@i^0,c
  5208   003810  EF15  F01C         	goto	l3869
  5209   003814                     l3865:
  5210   003814  C011  F004         	movff	fputs@c,fputc@c
  5211   003818  6A05               	clrf	(fputc@c+1)^0,c
  5212   00381A  C00F  F006         	movff	fputs@fp,fputc@fp
  5213   00381E  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  5214   003822  ECE0  F017         	call	_fputc	;wreg free
  5215   003826  4A12               	infsnz	fputs@i^0,f,c
  5216   003828  2A13               	incf	(fputs@i+1)^0,f,c
  5217   00382A                     l3869:
  5218   00382A  5012               	movf	fputs@i^0,w,c
  5219   00382C  240D               	addwf	fputs@s^0,w,c
  5220   00382E  6ED9               	movwf	fsr2l,c
  5221   003830  5013               	movf	(fputs@i+1)^0,w,c
  5222   003832  200E               	addwfc	(fputs@s+1)^0,w,c
  5223   003834  6EDA               	movwf	fsr2h,c
  5224   003836  50DF               	movf	indf2,w,c
  5225   003838  6E11               	movwf	fputs@c^0,c
  5226   00383A  5011               	movf	fputs@c^0,w,c
  5227   00383C  A4D8               	btfss	status,2,c
  5228   00383E  EF23  F01C         	goto	u1831
  5229   003842  EF25  F01C         	goto	u1830
  5230   003846                     u1831:
  5231   003846  EF0A  F01C         	goto	l3865
  5232   00384A                     u1830:
  5233   00384A  0012               	return		;funcret
  5234   00384C                     __end_of_fputs:
  5235                           	callstack 0
  5236                           
  5237 ;; *************** function _fputc *****************
  5238 ;; Defined at:
  5239 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  c               2    3[COMRAM] int 
  5242 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  5243 ;;		 -> sprintf@f(11), 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  2    3[COMRAM] int 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5257 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;Total ram usage:        9 bytes
  5260 ;; Hardware stack levels used: 1
  5261 ;; Hardware stack levels required when called: 2
  5262 ;; This function calls:
  5263 ;;		_putch
  5264 ;; This function is called by:
  5265 ;;		_pad
  5266 ;;		_vfpfcnvrt
  5267 ;;		_fputs
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text16
  5272   002FC0                     __ptext16:
  5273                           	callstack 0
  5274   002FC0                     _fputc:
  5275                           	callstack 25
  5276   002FC0  5006               	movf	fputc@fp^0,w,c
  5277   002FC2  1007               	iorwf	(fputc@fp+1)^0,w,c
  5278   002FC4  B4D8               	btfsc	status,2,c
  5279   002FC6  EFE7  F017         	goto	u1791
  5280   002FCA  EFE9  F017         	goto	u1790
  5281   002FCE                     u1791:
  5282   002FCE  EFF2  F017         	goto	l3853
  5283   002FD2                     u1790:
  5284   002FD2  5006               	movf	fputc@fp^0,w,c
  5285   002FD4  1007               	iorwf	(fputc@fp+1)^0,w,c
  5286   002FD6  A4D8               	btfss	status,2,c
  5287   002FD8  EFF0  F017         	goto	u1801
  5288   002FDC  EFF2  F017         	goto	u1800
  5289   002FE0                     u1801:
  5290   002FE0  EFF7  F017         	goto	l3855
  5291   002FE4                     u1800:
  5292   002FE4                     l3853:
  5293   002FE4  5004               	movf	fputc@c^0,w,c
  5294   002FE6  EC4F  F01D         	call	_putch
  5295   002FEA  EF44  F018         	goto	l1296
  5296   002FEE                     l3855:
  5297   002FEE  EE20 F009          	lfsr	2,9
  5298   002FF2  5006               	movf	fputc@fp^0,w,c
  5299   002FF4  26D9               	addwf	fsr2l,f,c
  5300   002FF6  5007               	movf	(fputc@fp+1)^0,w,c
  5301   002FF8  22DA               	addwfc	fsr2h,f,c
  5302   002FFA  50DE               	movf	postinc2,w,c
  5303   002FFC  10DE               	iorwf	postinc2,w,c
  5304   002FFE  B4D8               	btfsc	status,2,c
  5305   003000  EF04  F018         	goto	u1811
  5306   003004  EF06  F018         	goto	u1810
  5307   003008                     u1811:
  5308   003008  EF21  F018         	goto	l3859
  5309   00300C                     u1810:
  5310   00300C  EE20 F009          	lfsr	2,9
  5311   003010  5006               	movf	fputc@fp^0,w,c
  5312   003012  26D9               	addwf	fsr2l,f,c
  5313   003014  5007               	movf	(fputc@fp+1)^0,w,c
  5314   003016  22DA               	addwfc	fsr2h,f,c
  5315   003018  EE10 F003          	lfsr	1,3
  5316   00301C  5006               	movf	fputc@fp^0,w,c
  5317   00301E  26E1               	addwf	fsr1l,f,c
  5318   003020  5007               	movf	(fputc@fp+1)^0,w,c
  5319   003022  22E2               	addwfc	fsr1h,f,c
  5320   003024  50DE               	movf	postinc2,w,c
  5321   003026  5CE6               	subwf	postinc1,w,c
  5322   003028  50E6               	movf	postinc1,w,c
  5323   00302A  0A80               	xorlw	128
  5324   00302C  6E0C               	movwf	(??_fputc+4)^0,c
  5325   00302E  50DE               	movf	postinc2,w,c
  5326   003030  0A80               	xorlw	128
  5327   003032  580C               	subwfb	(??_fputc+4)^0,w,c
  5328   003034  B0D8               	btfsc	status,0,c
  5329   003036  EF1F  F018         	goto	u1821
  5330   00303A  EF21  F018         	goto	u1820
  5331   00303E                     u1821:
  5332   00303E  EF44  F018         	goto	l1296
  5333   003042                     u1820:
  5334   003042                     l3859:
  5335   003042  EE20 F003          	lfsr	2,3
  5336   003046  5006               	movf	fputc@fp^0,w,c
  5337   003048  26D9               	addwf	fsr2l,f,c
  5338   00304A  5007               	movf	(fputc@fp+1)^0,w,c
  5339   00304C  22DA               	addwfc	fsr2h,f,c
  5340   00304E  CFDE F008          	movff	postinc2,??_fputc
  5341   003052  CFDD F009          	movff	postdec2,??_fputc+1
  5342   003056  C006  FFD9         	movff	fputc@fp,fsr2l
  5343   00305A  C007  FFDA         	movff	fputc@fp+1,fsr2h
  5344   00305E  CFDE F00A          	movff	postinc2,??_fputc+2
  5345   003062  CFDD F00B          	movff	postdec2,??_fputc+3
  5346   003066  5008               	movf	??_fputc^0,w,c
  5347   003068  240A               	addwf	(??_fputc+2)^0,w,c
  5348   00306A  6ED9               	movwf	fsr2l,c
  5349   00306C  5009               	movf	(??_fputc+1)^0,w,c
  5350   00306E  200B               	addwfc	(??_fputc+3)^0,w,c
  5351   003070  6EDA               	movwf	fsr2h,c
  5352   003072  C004  FFDF         	movff	fputc@c,indf2
  5353   003076  EE20 F003          	lfsr	2,3
  5354   00307A  5006               	movf	fputc@fp^0,w,c
  5355   00307C  26D9               	addwf	fsr2l,f,c
  5356   00307E  5007               	movf	(fputc@fp+1)^0,w,c
  5357   003080  22DA               	addwfc	fsr2h,f,c
  5358   003082  2ADE               	incf	postinc2,f,c
  5359   003084  0E00               	movlw	0
  5360   003086  22DD               	addwfc	postdec2,f,c
  5361   003088                     l1296:
  5362   003088  0012               	return		;funcret
  5363   00308A                     __end_of_fputc:
  5364                           	callstack 0
  5365                           
  5366 ;; *************** function _putch *****************
  5367 ;; Defined at:
  5368 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;  c               1    wreg     unsigned char 
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  c               1    0[COMRAM] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5386 ;;Total ram usage:        0 bytes
  5387 ;; Hardware stack levels used: 1
  5388 ;; Hardware stack levels required when called: 1
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_fputc
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text17
  5397   003A9E                     __ptext17:
  5398                           	callstack 0
  5399   003A9E                     _putch:
  5400                           	callstack 25
  5401   003A9E  0012               	return		;funcret
  5402   003AA0                     __end_of_putch:
  5403                           	callstack 0
  5404                           
  5405 ;; *************** function _abs *****************
  5406 ;; Defined at:
  5407 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  a               2   21[COMRAM] int 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  2   21[COMRAM] int 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5424 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5425 ;;Total ram usage:        4 bytes
  5426 ;; Hardware stack levels used: 1
  5427 ;; Hardware stack levels required when called: 1
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_normalise_readings
  5432 ;;		_dtoa
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text18
  5437   00388E                     __ptext18:
  5438                           	callstack 0
  5439   00388E                     _abs:
  5440                           	callstack 25
  5441   00388E  BE17               	btfsc	(abs@a+1)^0,7,c
  5442   003890  EF54  F01C         	goto	u1840
  5443   003894  5017               	movf	(abs@a+1)^0,w,c
  5444   003896  E106               	bnz	u1841
  5445   003898  0416               	decf	abs@a^0,w,c
  5446   00389A  B0D8               	btfsc	status,0,c
  5447   00389C  EF52  F01C         	goto	u1841
  5448   0038A0  EF54  F01C         	goto	u1840
  5449   0038A4                     u1841:
  5450   0038A4  EF62  F01C         	goto	l1216
  5451   0038A8                     u1840:
  5452   0038A8  C016  F018         	movff	abs@a,??_abs
  5453   0038AC  C017  F019         	movff	abs@a+1,??_abs+1
  5454   0038B0  1E18               	comf	??_abs^0,f,c
  5455   0038B2  1E19               	comf	(??_abs+1)^0,f,c
  5456   0038B4  4A18               	infsnz	??_abs^0,f,c
  5457   0038B6  2A19               	incf	(??_abs+1)^0,f,c
  5458   0038B8  C018  F016         	movff	??_abs,?_abs
  5459   0038BC  C019  F017         	movff	??_abs+1,?_abs+1
  5460   0038C0  EF66  F01C         	goto	l1219
  5461   0038C4                     l1216:
  5462   0038C4  C016  F016         	movff	abs@a,?_abs
  5463   0038C8  C017  F017         	movff	abs@a+1,?_abs+1
  5464   0038CC                     l1219:
  5465   0038CC  0012               	return		;funcret
  5466   0038CE                     __end_of_abs:
  5467                           	callstack 0
  5468                           
  5469 ;; *************** function ___aomod *****************
  5470 ;; Defined at:
  5471 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  dividend        8    3[COMRAM] long long 
  5474 ;;  divisor         8   11[COMRAM] long long 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  sign            1   20[COMRAM] unsigned char 
  5477 ;;  counter         1   19[COMRAM] unsigned char 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  8    3[COMRAM] long long 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5487 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;Total ram usage:       18 bytes
  5492 ;; Hardware stack levels used: 1
  5493 ;; Hardware stack levels required when called: 1
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_dtoa
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text19
  5502   002AD8                     __ptext19:
  5503                           	callstack 0
  5504   002AD8                     ___aomod:
  5505                           	callstack 25
  5506   002AD8  0E00               	movlw	0
  5507   002ADA  6E15               	movwf	___aomod@sign^0,c
  5508   002ADC  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  5509   002ADE  EF75  F015         	goto	u1920
  5510   002AE2  EF73  F015         	goto	u1921
  5511   002AE6                     u1921:
  5512   002AE6  EF87  F015         	goto	l3927
  5513   002AEA                     u1920:
  5514   002AEA  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5515   002AEC  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5516   002AEE  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5517   002AF0  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5518   002AF2  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5519   002AF4  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5520   002AF6  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5521   002AF8  6C04               	negf	___aomod@dividend^0,c
  5522   002AFA  0E00               	movlw	0
  5523   002AFC  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5524   002AFE  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5525   002B00  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5526   002B02  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5527   002B04  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5528   002B06  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5529   002B08  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5530   002B0A  0E01               	movlw	1
  5531   002B0C  6E15               	movwf	___aomod@sign^0,c
  5532   002B0E                     l3927:
  5533   002B0E  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  5534   002B10  EF8E  F015         	goto	u1930
  5535   002B14  EF8C  F015         	goto	u1931
  5536   002B18                     u1931:
  5537   002B18  EF9E  F015         	goto	l3931
  5538   002B1C                     u1930:
  5539   002B1C  1E13               	comf	(___aomod@divisor+7)^0,f,c
  5540   002B1E  1E12               	comf	(___aomod@divisor+6)^0,f,c
  5541   002B20  1E11               	comf	(___aomod@divisor+5)^0,f,c
  5542   002B22  1E10               	comf	(___aomod@divisor+4)^0,f,c
  5543   002B24  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  5544   002B26  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  5545   002B28  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  5546   002B2A  6C0C               	negf	___aomod@divisor^0,c
  5547   002B2C  0E00               	movlw	0
  5548   002B2E  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  5549   002B30  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  5550   002B32  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  5551   002B34  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  5552   002B36  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  5553   002B38  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  5554   002B3A  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  5555   002B3C                     l3931:
  5556   002B3C  500C               	movf	___aomod@divisor^0,w,c
  5557   002B3E  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  5558   002B40  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  5559   002B42  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  5560   002B44  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  5561   002B46  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  5562   002B48  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  5563   002B4A  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  5564   002B4C  B4D8               	btfsc	status,2,c
  5565   002B4E  EFAB  F015         	goto	u1941
  5566   002B52  EFAD  F015         	goto	u1940
  5567   002B56                     u1941:
  5568   002B56  EFF5  F015         	goto	l3947
  5569   002B5A                     u1940:
  5570   002B5A  0E01               	movlw	1
  5571   002B5C  6E14               	movwf	___aomod@counter^0,c
  5572   002B5E  EFBB  F015         	goto	l3937
  5573   002B62                     l3935:
  5574   002B62  90D8               	bcf	status,0,c
  5575   002B64  360C               	rlcf	___aomod@divisor^0,f,c
  5576   002B66  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  5577   002B68  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  5578   002B6A  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  5579   002B6C  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  5580   002B6E  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  5581   002B70  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  5582   002B72  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  5583   002B74  2A14               	incf	___aomod@counter^0,f,c
  5584   002B76                     l3937:
  5585   002B76  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  5586   002B78  EFC0  F015         	goto	u1951
  5587   002B7C  EFC2  F015         	goto	u1950
  5588   002B80                     u1951:
  5589   002B80  EFB1  F015         	goto	l3935
  5590   002B84                     u1950:
  5591   002B84                     l3939:
  5592   002B84  500C               	movf	___aomod@divisor^0,w,c
  5593   002B86  5C04               	subwf	___aomod@dividend^0,w,c
  5594   002B88  500D               	movf	(___aomod@divisor+1)^0,w,c
  5595   002B8A  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  5596   002B8C  500E               	movf	(___aomod@divisor+2)^0,w,c
  5597   002B8E  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  5598   002B90  500F               	movf	(___aomod@divisor+3)^0,w,c
  5599   002B92  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  5600   002B94  5010               	movf	(___aomod@divisor+4)^0,w,c
  5601   002B96  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  5602   002B98  5011               	movf	(___aomod@divisor+5)^0,w,c
  5603   002B9A  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  5604   002B9C  5012               	movf	(___aomod@divisor+6)^0,w,c
  5605   002B9E  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  5606   002BA0  5013               	movf	(___aomod@divisor+7)^0,w,c
  5607   002BA2  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  5608   002BA4  A0D8               	btfss	status,0,c
  5609   002BA6  EFD7  F015         	goto	u1961
  5610   002BAA  EFD9  F015         	goto	u1960
  5611   002BAE                     u1961:
  5612   002BAE  EFE9  F015         	goto	l3943
  5613   002BB2                     u1960:
  5614   002BB2  500C               	movf	___aomod@divisor^0,w,c
  5615   002BB4  5E04               	subwf	___aomod@dividend^0,f,c
  5616   002BB6  500D               	movf	(___aomod@divisor+1)^0,w,c
  5617   002BB8  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  5618   002BBA  500E               	movf	(___aomod@divisor+2)^0,w,c
  5619   002BBC  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  5620   002BBE  500F               	movf	(___aomod@divisor+3)^0,w,c
  5621   002BC0  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  5622   002BC2  5010               	movf	(___aomod@divisor+4)^0,w,c
  5623   002BC4  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  5624   002BC6  5011               	movf	(___aomod@divisor+5)^0,w,c
  5625   002BC8  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  5626   002BCA  5012               	movf	(___aomod@divisor+6)^0,w,c
  5627   002BCC  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  5628   002BCE  5013               	movf	(___aomod@divisor+7)^0,w,c
  5629   002BD0  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  5630   002BD2                     l3943:
  5631   002BD2  90D8               	bcf	status,0,c
  5632   002BD4  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  5633   002BD6  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  5634   002BD8  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  5635   002BDA  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  5636   002BDC  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  5637   002BDE  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  5638   002BE0  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  5639   002BE2  320C               	rrcf	___aomod@divisor^0,f,c
  5640   002BE4  2E14               	decfsz	___aomod@counter^0,f,c
  5641   002BE6  EFC2  F015         	goto	l3939
  5642   002BEA                     l3947:
  5643   002BEA  5015               	movf	___aomod@sign^0,w,c
  5644   002BEC  B4D8               	btfsc	status,2,c
  5645   002BEE  EFFB  F015         	goto	u1971
  5646   002BF2  EFFD  F015         	goto	u1970
  5647   002BF6                     u1971:
  5648   002BF6  EF0D  F016         	goto	l3951
  5649   002BFA                     u1970:
  5650   002BFA  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  5651   002BFC  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  5652   002BFE  1E09               	comf	(___aomod@dividend+5)^0,f,c
  5653   002C00  1E08               	comf	(___aomod@dividend+4)^0,f,c
  5654   002C02  1E07               	comf	(___aomod@dividend+3)^0,f,c
  5655   002C04  1E06               	comf	(___aomod@dividend+2)^0,f,c
  5656   002C06  1E05               	comf	(___aomod@dividend+1)^0,f,c
  5657   002C08  6C04               	negf	___aomod@dividend^0,c
  5658   002C0A  0E00               	movlw	0
  5659   002C0C  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  5660   002C0E  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  5661   002C10  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  5662   002C12  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  5663   002C14  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  5664   002C16  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  5665   002C18  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  5666   002C1A                     l3951:
  5667   002C1A  C004  F004         	movff	___aomod@dividend,?___aomod
  5668   002C1E  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  5669   002C22  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  5670   002C26  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  5671   002C2A  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  5672   002C2E  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  5673   002C32  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  5674   002C36  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  5675   002C3A  0012               	return		;funcret
  5676   002C3C                     __end_of___aomod:
  5677                           	callstack 0
  5678                           
  5679 ;; *************** function ___aodiv *****************
  5680 ;; Defined at:
  5681 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  dividend        8    3[COMRAM] long long 
  5684 ;;  divisor         8   11[COMRAM] long long 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  quotient        8   21[COMRAM] long long 
  5687 ;;  sign            1   20[COMRAM] unsigned char 
  5688 ;;  counter         1   19[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  8    3[COMRAM] long long 
  5691 ;; Registers used:
  5692 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5698 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5699 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5701 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;Total ram usage:       26 bytes
  5703 ;; Hardware stack levels used: 1
  5704 ;; Hardware stack levels required when called: 1
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_dtoa
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text20
  5713   00267A                     __ptext20:
  5714                           	callstack 0
  5715   00267A                     ___aodiv:
  5716                           	callstack 25
  5717   00267A  0E00               	movlw	0
  5718   00267C  6E15               	movwf	___aodiv@sign^0,c
  5719   00267E  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  5720   002680  EF46  F013         	goto	u1850
  5721   002684  EF44  F013         	goto	u1851
  5722   002688                     u1851:
  5723   002688  EF58  F013         	goto	l3883
  5724   00268C                     u1850:
  5725   00268C  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  5726   00268E  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  5727   002690  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  5728   002692  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  5729   002694  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  5730   002696  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  5731   002698  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  5732   00269A  6C0C               	negf	___aodiv@divisor^0,c
  5733   00269C  0E00               	movlw	0
  5734   00269E  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  5735   0026A0  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  5736   0026A2  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  5737   0026A4  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  5738   0026A6  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  5739   0026A8  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  5740   0026AA  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  5741   0026AC  0E01               	movlw	1
  5742   0026AE  6E15               	movwf	___aodiv@sign^0,c
  5743   0026B0                     l3883:
  5744   0026B0  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  5745   0026B2  EF5F  F013         	goto	u1860
  5746   0026B6  EF5D  F013         	goto	u1861
  5747   0026BA                     u1861:
  5748   0026BA  EF71  F013         	goto	l3889
  5749   0026BE                     u1860:
  5750   0026BE  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  5751   0026C0  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  5752   0026C2  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  5753   0026C4  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  5754   0026C6  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  5755   0026C8  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  5756   0026CA  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  5757   0026CC  6C04               	negf	___aodiv@dividend^0,c
  5758   0026CE  0E00               	movlw	0
  5759   0026D0  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  5760   0026D2  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  5761   0026D4  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  5762   0026D6  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  5763   0026D8  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  5764   0026DA  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  5765   0026DC  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  5766   0026DE  0E01               	movlw	1
  5767   0026E0  1A15               	xorwf	___aodiv@sign^0,f,c
  5768   0026E2                     l3889:
  5769   0026E2  EE20  F016         	lfsr	2,___aodiv@quotient
  5770   0026E6  0E07               	movlw	7
  5771   0026E8                     u1871:
  5772   0026E8  6ADE               	clrf	postinc2,c
  5773   0026EA  06E8               	decf	wreg,f,c
  5774   0026EC  E2FD               	bc	u1871
  5775   0026EE  500C               	movf	___aodiv@divisor^0,w,c
  5776   0026F0  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  5777   0026F2  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  5778   0026F4  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  5779   0026F6  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  5780   0026F8  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  5781   0026FA  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  5782   0026FC  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  5783   0026FE  B4D8               	btfsc	status,2,c
  5784   002700  EF84  F013         	goto	u1881
  5785   002704  EF86  F013         	goto	u1880
  5786   002708                     u1881:
  5787   002708  EFD8  F013         	goto	l3911
  5788   00270C                     u1880:
  5789   00270C  0E01               	movlw	1
  5790   00270E  6E14               	movwf	___aodiv@counter^0,c
  5791   002710  EF94  F013         	goto	l3897
  5792   002714                     l3895:
  5793   002714  90D8               	bcf	status,0,c
  5794   002716  360C               	rlcf	___aodiv@divisor^0,f,c
  5795   002718  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  5796   00271A  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  5797   00271C  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  5798   00271E  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  5799   002720  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  5800   002722  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  5801   002724  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  5802   002726  2A14               	incf	___aodiv@counter^0,f,c
  5803   002728                     l3897:
  5804   002728  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  5805   00272A  EF99  F013         	goto	u1891
  5806   00272E  EF9B  F013         	goto	u1890
  5807   002732                     u1891:
  5808   002732  EF8A  F013         	goto	l3895
  5809   002736                     u1890:
  5810   002736                     l3899:
  5811   002736  90D8               	bcf	status,0,c
  5812   002738  3616               	rlcf	___aodiv@quotient^0,f,c
  5813   00273A  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  5814   00273C  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  5815   00273E  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  5816   002740  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  5817   002742  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  5818   002744  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  5819   002746  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  5820   002748  500C               	movf	___aodiv@divisor^0,w,c
  5821   00274A  5C04               	subwf	___aodiv@dividend^0,w,c
  5822   00274C  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5823   00274E  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  5824   002750  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5825   002752  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  5826   002754  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5827   002756  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  5828   002758  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5829   00275A  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  5830   00275C  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5831   00275E  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  5832   002760  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5833   002762  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  5834   002764  5013               	movf	(___aodiv@divisor+7)^0,w,c
  5835   002766  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  5836   002768  A0D8               	btfss	status,0,c
  5837   00276A  EFB9  F013         	goto	u1901
  5838   00276E  EFBB  F013         	goto	u1900
  5839   002772                     u1901:
  5840   002772  EFCC  F013         	goto	l3907
  5841   002776                     u1900:
  5842   002776  500C               	movf	___aodiv@divisor^0,w,c
  5843   002778  5E04               	subwf	___aodiv@dividend^0,f,c
  5844   00277A  500D               	movf	(___aodiv@divisor+1)^0,w,c
  5845   00277C  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  5846   00277E  500E               	movf	(___aodiv@divisor+2)^0,w,c
  5847   002780  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  5848   002782  500F               	movf	(___aodiv@divisor+3)^0,w,c
  5849   002784  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  5850   002786  5010               	movf	(___aodiv@divisor+4)^0,w,c
  5851   002788  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  5852   00278A  5011               	movf	(___aodiv@divisor+5)^0,w,c
  5853   00278C  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  5854   00278E  5012               	movf	(___aodiv@divisor+6)^0,w,c
  5855   002790  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  5856   002792  5013               	movf	(___aodiv@divisor+7)^0,w,c
  5857   002794  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  5858   002796  8016               	bsf	___aodiv@quotient^0,0,c
  5859   002798                     l3907:
  5860   002798  90D8               	bcf	status,0,c
  5861   00279A  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  5862   00279C  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  5863   00279E  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  5864   0027A0  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  5865   0027A2  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  5866   0027A4  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  5867   0027A6  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  5868   0027A8  320C               	rrcf	___aodiv@divisor^0,f,c
  5869   0027AA  2E14               	decfsz	___aodiv@counter^0,f,c
  5870   0027AC  EF9B  F013         	goto	l3899
  5871   0027B0                     l3911:
  5872   0027B0  5015               	movf	___aodiv@sign^0,w,c
  5873   0027B2  B4D8               	btfsc	status,2,c
  5874   0027B4  EFDE  F013         	goto	u1911
  5875   0027B8  EFE0  F013         	goto	u1910
  5876   0027BC                     u1911:
  5877   0027BC  EFF0  F013         	goto	l3915
  5878   0027C0                     u1910:
  5879   0027C0  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  5880   0027C2  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  5881   0027C4  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  5882   0027C6  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  5883   0027C8  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  5884   0027CA  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  5885   0027CC  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  5886   0027CE  6C16               	negf	___aodiv@quotient^0,c
  5887   0027D0  0E00               	movlw	0
  5888   0027D2  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  5889   0027D4  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  5890   0027D6  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  5891   0027D8  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  5892   0027DA  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  5893   0027DC  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  5894   0027DE  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  5895   0027E0                     l3915:
  5896   0027E0  C016  F004         	movff	___aodiv@quotient,?___aodiv
  5897   0027E4  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  5898   0027E8  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  5899   0027EC  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  5900   0027F0  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  5901   0027F4  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  5902   0027F8  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  5903   0027FC  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  5904   002800  0012               	return		;funcret
  5905   002802                     __end_of___aodiv:
  5906                           	callstack 0
  5907                           
  5908 ;; *************** function _sendStringSerial4 *****************
  5909 ;; Defined at:
  5910 ;;		line 39 in file "serial.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  string          2    4[COMRAM] PTR unsigned char 
  5913 ;;		 -> main@buf(150), 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;Total ram usage:        2 bytes
  5930 ;; Hardware stack levels used: 1
  5931 ;; Hardware stack levels required when called: 2
  5932 ;; This function calls:
  5933 ;;		_sendCharSerial4
  5934 ;; This function is called by:
  5935 ;;		_main
  5936 ;;		_clear_read_calibration
  5937 ;;		_motor_response
  5938 ;;		_card_response
  5939 ;;		_card_response_easy
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text21
  5944   003902                     __ptext21:
  5945                           	callstack 0
  5946   003902                     _sendStringSerial4:
  5947                           	callstack 28
  5948   003902                     
  5949                           ;serial.c: 40:  while(*string != 0) {
  5950   003902  EF8C  F01C         	goto	l4287
  5951   003906                     l4283:
  5952                           
  5953                           ;serial.c: 41:         sendCharSerial4(*string++);
  5954   003906  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  5955   00390A  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5956   00390E  50DF               	movf	indf2,w,c
  5957   003910  EC2E  F01D         	call	_sendCharSerial4
  5958   003914  4A05               	infsnz	sendStringSerial4@string^0,f,c
  5959   003916  2A06               	incf	(sendStringSerial4@string+1)^0,f,c
  5960   003918                     l4287:
  5961                           
  5962                           ;serial.c: 40:  while(*string != 0) {
  5963   003918  C005  FFD9         	movff	sendStringSerial4@string,fsr2l
  5964   00391C  C006  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  5965   003920  50DF               	movf	indf2,w,c
  5966   003922  A4D8               	btfss	status,2,c
  5967   003924  EF96  F01C         	goto	u2301
  5968   003928  EF98  F01C         	goto	u2300
  5969   00392C                     u2301:
  5970   00392C  EF83  F01C         	goto	l4283
  5971   003930                     u2300:
  5972   003930  0012               	return		;funcret
  5973   003932                     __end_of_sendStringSerial4:
  5974                           	callstack 0
  5975                           
  5976 ;; *************** function _sendCharSerial4 *****************
  5977 ;; Defined at:
  5978 ;;		line 32 in file "serial.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  charToSend      1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  charToSend      1    3[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;Total ram usage:        1 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; Hardware stack levels required when called: 1
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_sendStringSerial4
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text22
  6007   003A5C                     __ptext22:
  6008                           	callstack 0
  6009   003A5C                     _sendCharSerial4:
  6010                           	callstack 28
  6011                           
  6012                           ;incstack = 0
  6013                           ;sendCharSerial4@charToSend stored from wreg
  6014   003A5C  6E04               	movwf	sendCharSerial4@charToSend^0,c
  6015   003A5E                     l466:
  6016   003A5E  010E               	movlb	14	; () banked
  6017   003A60  A537               	btfss	55,2,b	;volatile
  6018   003A62  EF35  F01D         	goto	u2271
  6019   003A66  EF37  F01D         	goto	u2270
  6020   003A6A                     u2271:
  6021   003A6A  EF2F  F01D         	goto	l466
  6022   003A6E                     u2270:
  6023   003A6E                     
  6024                           ; BSR set to: 14
  6025                           ;serial.c: 34:     TX4REG = charToSend;
  6026   003A6E  C004  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  6027   003A72                     
  6028                           ; BSR set to: 14
  6029   003A72  0012               	return		;funcret
  6030   003A74                     __end_of_sendCharSerial4:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _reverseFullSpeed *****************
  6034 ;; Defined at:
  6035 ;;		line 145 in file "dc_motor.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6038 ;;		 -> main@motorL(9), 
  6039 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6040 ;;		 -> main@motorR(9), 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  i               2   27[COMRAM] int 
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6055 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;Total ram usage:        7 bytes
  6057 ;; Hardware stack levels used: 1
  6058 ;; Hardware stack levels required when called: 3
  6059 ;; This function calls:
  6060 ;;		_setMotorPWM
  6061 ;; This function is called by:
  6062 ;;		_main
  6063 ;;		_motor_response
  6064 ;;		_motor_response_easy
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text23
  6069   0031E2                     __ptext23:
  6070                           	callstack 0
  6071   0031E2                     _reverseFullSpeed:
  6072                           	callstack 27
  6073   0031E2                     
  6074                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  6075   0031E2  EE20 F001          	lfsr	2,1
  6076   0031E6  5017               	movf	reverseFullSpeed@mL^0,w,c
  6077   0031E8  26D9               	addwf	fsr2l,f,c
  6078   0031EA  5018               	movf	(reverseFullSpeed@mL+1)^0,w,c
  6079   0031EC  22DA               	addwfc	fsr2h,f,c
  6080   0031EE  0E00               	movlw	0
  6081   0031F0  6EDF               	movwf	indf2,c
  6082                           
  6083                           ;dc_motor.c: 148:     mR->direction=0;
  6084   0031F2  EE20 F001          	lfsr	2,1
  6085   0031F6  5019               	movf	reverseFullSpeed@mR^0,w,c
  6086   0031F8  26D9               	addwf	fsr2l,f,c
  6087   0031FA  501A               	movf	(reverseFullSpeed@mR+1)^0,w,c
  6088   0031FC  22DA               	addwfc	fsr2h,f,c
  6089   0031FE  0E00               	movlw	0
  6090   003200  6EDF               	movwf	indf2,c
  6091   003202                     
  6092                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  6093   003202  0E00               	movlw	0
  6094   003204  6E1D               	movwf	(reverseFullSpeed@i+1)^0,c
  6095   003206  0E00               	movlw	0
  6096   003208  6E1C               	movwf	reverseFullSpeed@i^0,c
  6097   00320A                     l4257:
  6098                           
  6099                           ;dc_motor.c: 150:         mL->power=i;
  6100   00320A  C017  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  6101   00320E  C018  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  6102   003212  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6103                           
  6104                           ;dc_motor.c: 151:         mR->power=i;
  6105   003216  C019  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  6106   00321A  C01A  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  6107   00321E  C01C  FFDF         	movff	reverseFullSpeed@i,indf2
  6108   003222                     
  6109                           ;dc_motor.c: 152:         setMotorPWM(mL);
  6110   003222  C017  F011         	movff	reverseFullSpeed@mL,setMotorPWM@m
  6111   003226  C018  F012         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  6112   00322A  EC01  F014         	call	_setMotorPWM	;wreg free
  6113   00322E                     
  6114                           ;dc_motor.c: 153:         setMotorPWM(mR);
  6115   00322E  C019  F011         	movff	reverseFullSpeed@mR,setMotorPWM@m
  6116   003232  C01A  F012         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  6117   003236  EC01  F014         	call	_setMotorPWM	;wreg free
  6118   00323A                     
  6119                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  6120   00323A  0ED0               	movlw	208
  6121   00323C  6E1B               	movwf	??_reverseFullSpeed^0,c
  6122   00323E  0ECA               	movlw	202
  6123   003240                     u2837:
  6124   003240  2EE8               	decfsz	wreg,f,c
  6125   003242  D7FE               	bra	u2837
  6126   003244  2E1B               	decfsz	??_reverseFullSpeed^0,f,c
  6127   003246  D7FC               	bra	u2837
  6128   003248                     
  6129                           ;dc_motor.c: 155:     }
  6130   003248  0E0A               	movlw	10
  6131   00324A  261C               	addwf	reverseFullSpeed@i^0,f,c
  6132   00324C  0E00               	movlw	0
  6133   00324E  221D               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  6134   003250  BE1D               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  6135   003252  EF34  F019         	goto	u2291
  6136   003256  501D               	movf	(reverseFullSpeed@i+1)^0,w,c
  6137   003258  E109               	bnz	u2290
  6138   00325A  0E3C               	movlw	60
  6139   00325C  5C1C               	subwf	reverseFullSpeed@i^0,w,c
  6140   00325E  A0D8               	btfss	status,0,c
  6141   003260  EF34  F019         	goto	u2291
  6142   003264  EF36  F019         	goto	u2290
  6143   003268                     u2291:
  6144   003268  EF05  F019         	goto	l4257
  6145   00326C                     u2290:
  6146   00326C  0012               	return		;funcret
  6147   00326E                     __end_of_reverseFullSpeed:
  6148                           	callstack 0
  6149                           
  6150 ;; *************** function _home_response *****************
  6151 ;; Defined at:
  6152 ;;		line 249 in file "colour_identify.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  card            1    wreg     enum E14551
  6155 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  6156 ;;		 -> main@motorL(9), 
  6157 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  6158 ;;		 -> main@motorR(9), 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  card            1   36[COMRAM] enum E14551
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6173 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6174 ;;Total ram usage:        7 bytes
  6175 ;; Hardware stack levels used: 1
  6176 ;; Hardware stack levels required when called: 4
  6177 ;; This function calls:
  6178 ;;		_fullSpeedAhead
  6179 ;;		_stop
  6180 ;;		_turnLeft45
  6181 ;;		_turnRight45
  6182 ;; This function is called by:
  6183 ;;		_motor_response
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text24
  6188   001AD2                     __ptext24:
  6189                           	callstack 0
  6190   001AD2                     _home_response:
  6191                           	callstack 24
  6192                           
  6193                           ;incstack = 0
  6194                           ;home_response@card stored from wreg
  6195   001AD2  6E25               	movwf	home_response@card^0,c
  6196   001AD4                     
  6197                           ;colour_identify.c: 250:     switch(card){
  6198   001AD4  EF22  F00F         	goto	l4313
  6199   001AD8                     l4291:
  6200                           
  6201                           ;colour_identify.c: 252:             turnLeft45(mL,mR);
  6202   001AD8  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6203   001ADC  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6204   001AE0  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6205   001AE4  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6206   001AE8  EC9B  F018         	call	_turnLeft45	;wreg free
  6207                           
  6208                           ;colour_identify.c: 253:             stop(mL,mR);
  6209   001AEC  C01F  F017         	movff	home_response@mL,stop@mL
  6210   001AF0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6211   001AF4  C021  F019         	movff	home_response@mR,stop@mR
  6212   001AF8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6213   001AFC  ECC1  F019         	call	_stop	;wreg free
  6214                           
  6215                           ;colour_identify.c: 254:             turnLeft45(mL,mR);
  6216   001B00  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6217   001B04  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6218   001B08  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6219   001B0C  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6220   001B10  EC9B  F018         	call	_turnLeft45	;wreg free
  6221                           
  6222                           ;colour_identify.c: 255:             stop(mL,mR);
  6223   001B14  C01F  F017         	movff	home_response@mL,stop@mL
  6224   001B18  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6225   001B1C  C021  F019         	movff	home_response@mR,stop@mR
  6226   001B20  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6227   001B24  ECC1  F019         	call	_stop	;wreg free
  6228                           
  6229                           ;colour_identify.c: 256:             break;
  6230   001B28  EF4F  F00F         	goto	l401
  6231   001B2C                     l4293:
  6232                           
  6233                           ;colour_identify.c: 258:             turnRight45(mL,mR);
  6234   001B2C  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6235   001B30  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6236   001B34  C021  F019         	movff	home_response@mR,turnRight45@mR
  6237   001B38  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6238   001B3C  EC45  F018         	call	_turnRight45	;wreg free
  6239                           
  6240                           ;colour_identify.c: 259:             stop(mL,mR);
  6241   001B40  C01F  F017         	movff	home_response@mL,stop@mL
  6242   001B44  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6243   001B48  C021  F019         	movff	home_response@mR,stop@mR
  6244   001B4C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6245   001B50  ECC1  F019         	call	_stop	;wreg free
  6246                           
  6247                           ;colour_identify.c: 260:             turnRight45(mL,mR);
  6248   001B54  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6249   001B58  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6250   001B5C  C021  F019         	movff	home_response@mR,turnRight45@mR
  6251   001B60  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6252   001B64  EC45  F018         	call	_turnRight45	;wreg free
  6253                           
  6254                           ;colour_identify.c: 261:             stop(mL,mR);
  6255   001B68  C01F  F017         	movff	home_response@mL,stop@mL
  6256   001B6C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6257   001B70  C021  F019         	movff	home_response@mR,stop@mR
  6258   001B74  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6259   001B78  ECC1  F019         	call	_stop	;wreg free
  6260                           
  6261                           ;colour_identify.c: 262:             break;
  6262   001B7C  EF4F  F00F         	goto	l401
  6263   001B80                     l4295:
  6264                           
  6265                           ;colour_identify.c: 264:             turnRight45(mL,mR);
  6266   001B80  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6267   001B84  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6268   001B88  C021  F019         	movff	home_response@mR,turnRight45@mR
  6269   001B8C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6270   001B90  EC45  F018         	call	_turnRight45	;wreg free
  6271                           
  6272                           ;colour_identify.c: 265:             stop(mL,mR);
  6273   001B94  C01F  F017         	movff	home_response@mL,stop@mL
  6274   001B98  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6275   001B9C  C021  F019         	movff	home_response@mR,stop@mR
  6276   001BA0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6277   001BA4  ECC1  F019         	call	_stop	;wreg free
  6278                           
  6279                           ;colour_identify.c: 266:             turnRight45(mL,mR);
  6280   001BA8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6281   001BAC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6282   001BB0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6283   001BB4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6284   001BB8  EC45  F018         	call	_turnRight45	;wreg free
  6285                           
  6286                           ;colour_identify.c: 267:             stop(mL,mR);
  6287   001BBC  C01F  F017         	movff	home_response@mL,stop@mL
  6288   001BC0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6289   001BC4  C021  F019         	movff	home_response@mR,stop@mR
  6290   001BC8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6291   001BCC  ECC1  F019         	call	_stop	;wreg free
  6292                           
  6293                           ;colour_identify.c: 268:             turnRight45(mL,mR);
  6294   001BD0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6295   001BD4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6296   001BD8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6297   001BDC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6298   001BE0  EC45  F018         	call	_turnRight45	;wreg free
  6299                           
  6300                           ;colour_identify.c: 269:             stop(mL,mR);
  6301   001BE4  C01F  F017         	movff	home_response@mL,stop@mL
  6302   001BE8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6303   001BEC  C021  F019         	movff	home_response@mR,stop@mR
  6304   001BF0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6305   001BF4  ECC1  F019         	call	_stop	;wreg free
  6306                           
  6307                           ;colour_identify.c: 270:             turnRight45(mL,mR);
  6308   001BF8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6309   001BFC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6310   001C00  C021  F019         	movff	home_response@mR,turnRight45@mR
  6311   001C04  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6312   001C08  EC45  F018         	call	_turnRight45	;wreg free
  6313                           
  6314                           ;colour_identify.c: 271:             stop(mL,mR);
  6315   001C0C  C01F  F017         	movff	home_response@mL,stop@mL
  6316   001C10  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6317   001C14  C021  F019         	movff	home_response@mR,stop@mR
  6318   001C18  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6319   001C1C  ECC1  F019         	call	_stop	;wreg free
  6320                           
  6321                           ;colour_identify.c: 272:             break;
  6322   001C20  EF4F  F00F         	goto	l401
  6323   001C24                     l4297:
  6324                           
  6325                           ;colour_identify.c: 274:             stop(mL,mR);
  6326   001C24  C01F  F017         	movff	home_response@mL,stop@mL
  6327   001C28  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6328   001C2C  C021  F019         	movff	home_response@mR,stop@mR
  6329   001C30  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6330   001C34  ECC1  F019         	call	_stop	;wreg free
  6331                           
  6332                           ;colour_identify.c: 275:             turnLeft45(mL,mR);
  6333   001C38  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6334   001C3C  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6335   001C40  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6336   001C44  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6337   001C48  EC9B  F018         	call	_turnLeft45	;wreg free
  6338                           
  6339                           ;colour_identify.c: 276:             stop(mL,mR);
  6340   001C4C  C01F  F017         	movff	home_response@mL,stop@mL
  6341   001C50  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6342   001C54  C021  F019         	movff	home_response@mR,stop@mR
  6343   001C58  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6344   001C5C  ECC1  F019         	call	_stop	;wreg free
  6345                           
  6346                           ;colour_identify.c: 277:             turnLeft45(mL,mR);
  6347   001C60  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6348   001C64  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6349   001C68  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6350   001C6C  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6351   001C70  EC9B  F018         	call	_turnLeft45	;wreg free
  6352                           
  6353                           ;colour_identify.c: 278:             stop(mL,mR);
  6354   001C74  C01F  F017         	movff	home_response@mL,stop@mL
  6355   001C78  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6356   001C7C  C021  F019         	movff	home_response@mR,stop@mR
  6357   001C80  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6358   001C84  ECC1  F019         	call	_stop	;wreg free
  6359                           
  6360                           ;colour_identify.c: 279:             fullSpeedAhead(mL,mR);
  6361   001C88  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6362   001C8C  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6363   001C90  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6364   001C94  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6365   001C98  EC37  F019         	call	_fullSpeedAhead	;wreg free
  6366   001C9C                     l4299:
  6367                           
  6368                           ;colour_identify.c: 280:             _delay((unsigned long)((500)*(64000000/4000.0)));
  6369   001C9C  0E29               	movlw	41
  6370   001C9E  6E24               	movwf	(??_home_response+1)^0,c
  6371   001CA0  0E96               	movlw	150
  6372   001CA2  6E23               	movwf	??_home_response^0,c
  6373   001CA4  0E7F               	movlw	127
  6374   001CA6                     u2847:
  6375   001CA6  2EE8               	decfsz	wreg,f,c
  6376   001CA8  D7FE               	bra	u2847
  6377   001CAA  2E23               	decfsz	??_home_response^0,f,c
  6378   001CAC  D7FC               	bra	u2847
  6379   001CAE  2E24               	decfsz	(??_home_response+1)^0,f,c
  6380   001CB0  D7FA               	bra	u2847
  6381   001CB2  F000               	nop	
  6382                           
  6383                           ;colour_identify.c: 281:             break;
  6384   001CB4  EF4F  F00F         	goto	l401
  6385   001CB8                     l4301:
  6386                           
  6387                           ;colour_identify.c: 283:             stop(mL,mR);
  6388   001CB8  C01F  F017         	movff	home_response@mL,stop@mL
  6389   001CBC  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6390   001CC0  C021  F019         	movff	home_response@mR,stop@mR
  6391   001CC4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6392   001CC8  ECC1  F019         	call	_stop	;wreg free
  6393                           
  6394                           ;colour_identify.c: 284:             turnRight45(mL,mR);
  6395   001CCC  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6396   001CD0  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6397   001CD4  C021  F019         	movff	home_response@mR,turnRight45@mR
  6398   001CD8  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6399   001CDC  EC45  F018         	call	_turnRight45	;wreg free
  6400                           
  6401                           ;colour_identify.c: 285:             stop(mL,mR);
  6402   001CE0  C01F  F017         	movff	home_response@mL,stop@mL
  6403   001CE4  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6404   001CE8  C021  F019         	movff	home_response@mR,stop@mR
  6405   001CEC  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6406   001CF0  ECC1  F019         	call	_stop	;wreg free
  6407                           
  6408                           ;colour_identify.c: 286:             turnRight45(mL,mR);
  6409   001CF4  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6410   001CF8  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6411   001CFC  C021  F019         	movff	home_response@mR,turnRight45@mR
  6412   001D00  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6413   001D04  EC45  F018         	call	_turnRight45	;wreg free
  6414                           
  6415                           ;colour_identify.c: 287:             stop(mL,mR);
  6416   001D08  C01F  F017         	movff	home_response@mL,stop@mL
  6417   001D0C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6418   001D10  C021  F019         	movff	home_response@mR,stop@mR
  6419   001D14  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6420   001D18  ECC1  F019         	call	_stop	;wreg free
  6421                           
  6422                           ;colour_identify.c: 288:             fullSpeedAhead(mL,mR);
  6423   001D1C  C01F  F017         	movff	home_response@mL,fullSpeedAhead@mL
  6424   001D20  C020  F018         	movff	home_response@mL+1,fullSpeedAhead@mL+1
  6425   001D24  C021  F019         	movff	home_response@mR,fullSpeedAhead@mR
  6426   001D28  C022  F01A         	movff	home_response@mR+1,fullSpeedAhead@mR+1
  6427   001D2C  EC37  F019         	call	_fullSpeedAhead	;wreg free
  6428   001D30  EF4E  F00E         	goto	l4299
  6429   001D34                     l4305:
  6430                           
  6431                           ;colour_identify.c: 292:             turnLeft45(mL,mR);
  6432   001D34  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6433   001D38  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6434   001D3C  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6435   001D40  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6436   001D44  EC9B  F018         	call	_turnLeft45	;wreg free
  6437                           
  6438                           ;colour_identify.c: 293:             stop(mL,mR);
  6439   001D48  C01F  F017         	movff	home_response@mL,stop@mL
  6440   001D4C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6441   001D50  C021  F019         	movff	home_response@mR,stop@mR
  6442   001D54  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6443   001D58  ECC1  F019         	call	_stop	;wreg free
  6444                           
  6445                           ;colour_identify.c: 294:             turnLeft45(mL,mR);
  6446   001D5C  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6447   001D60  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6448   001D64  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6449   001D68  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6450   001D6C  EC9B  F018         	call	_turnLeft45	;wreg free
  6451                           
  6452                           ;colour_identify.c: 295:             stop(mL,mR);
  6453   001D70  C01F  F017         	movff	home_response@mL,stop@mL
  6454   001D74  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6455   001D78  C021  F019         	movff	home_response@mR,stop@mR
  6456   001D7C  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6457   001D80  ECC1  F019         	call	_stop	;wreg free
  6458                           
  6459                           ;colour_identify.c: 296:             turnLeft45(mL,mR);
  6460   001D84  C01F  F017         	movff	home_response@mL,turnLeft45@mL
  6461   001D88  C020  F018         	movff	home_response@mL+1,turnLeft45@mL+1
  6462   001D8C  C021  F019         	movff	home_response@mR,turnLeft45@mR
  6463   001D90  C022  F01A         	movff	home_response@mR+1,turnLeft45@mR+1
  6464   001D94  EC9B  F018         	call	_turnLeft45	;wreg free
  6465                           
  6466                           ;colour_identify.c: 297:             stop(mL,mR);
  6467   001D98  C01F  F017         	movff	home_response@mL,stop@mL
  6468   001D9C  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6469   001DA0  C021  F019         	movff	home_response@mR,stop@mR
  6470   001DA4  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6471   001DA8  ECC1  F019         	call	_stop	;wreg free
  6472                           
  6473                           ;colour_identify.c: 298:             break;
  6474   001DAC  EF4F  F00F         	goto	l401
  6475   001DB0                     l4307:
  6476                           
  6477                           ;colour_identify.c: 300:             turnRight45(mL,mR);
  6478   001DB0  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6479   001DB4  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6480   001DB8  C021  F019         	movff	home_response@mR,turnRight45@mR
  6481   001DBC  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6482   001DC0  EC45  F018         	call	_turnRight45	;wreg free
  6483                           
  6484                           ;colour_identify.c: 301:             stop(mL,mR);
  6485   001DC4  C01F  F017         	movff	home_response@mL,stop@mL
  6486   001DC8  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6487   001DCC  C021  F019         	movff	home_response@mR,stop@mR
  6488   001DD0  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6489   001DD4  ECC1  F019         	call	_stop	;wreg free
  6490                           
  6491                           ;colour_identify.c: 302:             turnRight45(mL,mR);
  6492   001DD8  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6493   001DDC  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6494   001DE0  C021  F019         	movff	home_response@mR,turnRight45@mR
  6495   001DE4  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6496   001DE8  EC45  F018         	call	_turnRight45	;wreg free
  6497                           
  6498                           ;colour_identify.c: 303:             stop(mL,mR);
  6499   001DEC  C01F  F017         	movff	home_response@mL,stop@mL
  6500   001DF0  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6501   001DF4  C021  F019         	movff	home_response@mR,stop@mR
  6502   001DF8  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6503   001DFC  ECC1  F019         	call	_stop	;wreg free
  6504                           
  6505                           ;colour_identify.c: 304:             turnRight45(mL,mR);
  6506   001E00  C01F  F017         	movff	home_response@mL,turnRight45@mL
  6507   001E04  C020  F018         	movff	home_response@mL+1,turnRight45@mL+1
  6508   001E08  C021  F019         	movff	home_response@mR,turnRight45@mR
  6509   001E0C  C022  F01A         	movff	home_response@mR+1,turnRight45@mR+1
  6510   001E10  EC45  F018         	call	_turnRight45	;wreg free
  6511                           
  6512                           ;colour_identify.c: 305:             stop(mL,mR);
  6513   001E14  C01F  F017         	movff	home_response@mL,stop@mL
  6514   001E18  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6515   001E1C  C021  F019         	movff	home_response@mR,stop@mR
  6516   001E20  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6517   001E24  ECC1  F019         	call	_stop	;wreg free
  6518                           
  6519                           ;colour_identify.c: 306:             break;
  6520   001E28  EF4F  F00F         	goto	l401
  6521   001E2C                     l4309:
  6522                           
  6523                           ;colour_identify.c: 308:             stop(mL,mR);
  6524   001E2C  C01F  F017         	movff	home_response@mL,stop@mL
  6525   001E30  C020  F018         	movff	home_response@mL+1,stop@mL+1
  6526   001E34  C021  F019         	movff	home_response@mR,stop@mR
  6527   001E38  C022  F01A         	movff	home_response@mR+1,stop@mR+1
  6528   001E3C  ECC1  F019         	call	_stop	;wreg free
  6529   001E40  EF4F  F00F         	goto	l401
  6530   001E44                     l4313:
  6531   001E44  5025               	movf	home_response@card^0,w,c
  6532   001E46  6E23               	movwf	??_home_response^0,c
  6533   001E48  6A24               	clrf	(??_home_response+1)^0,c
  6534                           
  6535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6536                           ; Switch size 1, requested type "simple"
  6537                           ; Number of cases is 1, Range of values is 0 to 0
  6538                           ; switch strategies available:
  6539                           ; Name         Instructions Cycles
  6540                           ; simple_byte            4     3 (average)
  6541                           ;	Chosen strategy is simple_byte
  6542   001E4A  5024               	movf	(??_home_response+1)^0,w,c
  6543   001E4C  0A00               	xorlw	0	; case 0
  6544   001E4E  B4D8               	btfsc	status,2,c
  6545   001E50  EF2C  F00F         	goto	l5063
  6546   001E54  EF4F  F00F         	goto	l401
  6547   001E58                     l5063:
  6548                           
  6549                           ; Switch size 1, requested type "simple"
  6550                           ; Number of cases is 8, Range of values is 0 to 7
  6551                           ; switch strategies available:
  6552                           ; Name         Instructions Cycles
  6553                           ; simple_byte           25    13 (average)
  6554                           ;	Chosen strategy is simple_byte
  6555   001E58  5023               	movf	??_home_response^0,w,c
  6556   001E5A  0A00               	xorlw	0	; case 0
  6557   001E5C  B4D8               	btfsc	status,2,c
  6558   001E5E  EF6C  F00D         	goto	l4291
  6559   001E62  0A01               	xorlw	1	; case 1
  6560   001E64  B4D8               	btfsc	status,2,c
  6561   001E66  EF96  F00D         	goto	l4293
  6562   001E6A  0A03               	xorlw	3	; case 2
  6563   001E6C  B4D8               	btfsc	status,2,c
  6564   001E6E  EFC0  F00D         	goto	l4295
  6565   001E72  0A01               	xorlw	1	; case 3
  6566   001E74  B4D8               	btfsc	status,2,c
  6567   001E76  EF12  F00E         	goto	l4297
  6568   001E7A  0A07               	xorlw	7	; case 4
  6569   001E7C  B4D8               	btfsc	status,2,c
  6570   001E7E  EF5C  F00E         	goto	l4301
  6571   001E82  0A01               	xorlw	1	; case 5
  6572   001E84  B4D8               	btfsc	status,2,c
  6573   001E86  EF9A  F00E         	goto	l4305
  6574   001E8A  0A03               	xorlw	3	; case 6
  6575   001E8C  B4D8               	btfsc	status,2,c
  6576   001E8E  EFD8  F00E         	goto	l4307
  6577   001E92  0A01               	xorlw	1	; case 7
  6578   001E94  B4D8               	btfsc	status,2,c
  6579   001E96  EF16  F00F         	goto	l4309
  6580   001E9A  EF4F  F00F         	goto	l401
  6581   001E9E                     l401:
  6582   001E9E  0012               	return		;funcret
  6583   001EA0                     __end_of_home_response:
  6584                           	callstack 0
  6585                           
  6586 ;; *************** function _turnRight45 *****************
  6587 ;; Defined at:
  6588 ;;		line 116 in file "dc_motor.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6591 ;;		 -> main@motorL(9), 
  6592 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6593 ;;		 -> main@motorR(9), 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  i               2   28[COMRAM] int 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6608 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6609 ;;Total ram usage:        8 bytes
  6610 ;; Hardware stack levels used: 1
  6611 ;; Hardware stack levels required when called: 3
  6612 ;; This function calls:
  6613 ;;		_setMotorPWM
  6614 ;; This function is called by:
  6615 ;;		_motor_response
  6616 ;;		_home_response
  6617 ;;		_motor_response_easy
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text25
  6622   00308A                     __ptext25:
  6623                           	callstack 0
  6624   00308A                     _turnRight45:
  6625                           	callstack 25
  6626   00308A                     
  6627                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  6628   00308A  EE20 F001          	lfsr	2,1
  6629   00308E  5017               	movf	turnRight45@mL^0,w,c
  6630   003090  26D9               	addwf	fsr2l,f,c
  6631   003092  5018               	movf	(turnRight45@mL+1)^0,w,c
  6632   003094  22DA               	addwfc	fsr2h,f,c
  6633   003096  0E01               	movlw	1
  6634   003098  6EDF               	movwf	indf2,c
  6635                           
  6636                           ;dc_motor.c: 119:     mR->direction=0;
  6637   00309A  EE20 F001          	lfsr	2,1
  6638   00309E  5019               	movf	turnRight45@mR^0,w,c
  6639   0030A0  26D9               	addwf	fsr2l,f,c
  6640   0030A2  501A               	movf	(turnRight45@mR+1)^0,w,c
  6641   0030A4  22DA               	addwfc	fsr2h,f,c
  6642   0030A6  0E00               	movlw	0
  6643   0030A8  6EDF               	movwf	indf2,c
  6644   0030AA                     
  6645                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  6646   0030AA  0E00               	movlw	0
  6647   0030AC  6E1E               	movwf	(turnRight45@i+1)^0,c
  6648   0030AE  0E00               	movlw	0
  6649   0030B0  6E1D               	movwf	turnRight45@i^0,c
  6650   0030B2                     l4177:
  6651                           
  6652                           ;dc_motor.c: 122:         mR->power=i;
  6653   0030B2  C019  FFD9         	movff	turnRight45@mR,fsr2l
  6654   0030B6  C01A  FFDA         	movff	turnRight45@mR+1,fsr2h
  6655   0030BA  C01D  FFDF         	movff	turnRight45@i,indf2
  6656                           
  6657                           ;dc_motor.c: 123:         mL->power=i;
  6658   0030BE  C017  FFD9         	movff	turnRight45@mL,fsr2l
  6659   0030C2  C018  FFDA         	movff	turnRight45@mL+1,fsr2h
  6660   0030C6  C01D  FFDF         	movff	turnRight45@i,indf2
  6661   0030CA                     
  6662                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6663   0030CA  0E02               	movlw	2
  6664   0030CC  6E1C               	movwf	(??_turnRight45+1)^0,c
  6665   0030CE  0E38               	movlw	56
  6666   0030D0  6E1B               	movwf	??_turnRight45^0,c
  6667   0030D2  0EAD               	movlw	173
  6668   0030D4                     u2857:
  6669   0030D4  2EE8               	decfsz	wreg,f,c
  6670   0030D6  D7FE               	bra	u2857
  6671   0030D8  2E1B               	decfsz	??_turnRight45^0,f,c
  6672   0030DA  D7FC               	bra	u2857
  6673   0030DC  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6674   0030DE  D7FA               	bra	u2857
  6675   0030E0  F000               	nop	
  6676   0030E2                     
  6677                           ;dc_motor.c: 125:         setMotorPWM(mL);
  6678   0030E2  C017  F011         	movff	turnRight45@mL,setMotorPWM@m
  6679   0030E6  C018  F012         	movff	turnRight45@mL+1,setMotorPWM@m+1
  6680   0030EA  EC01  F014         	call	_setMotorPWM	;wreg free
  6681   0030EE                     
  6682                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  6683   0030EE  C019  F011         	movff	turnRight45@mR,setMotorPWM@m
  6684   0030F2  C01A  F012         	movff	turnRight45@mR+1,setMotorPWM@m+1
  6685   0030F6  EC01  F014         	call	_setMotorPWM	;wreg free
  6686   0030FA  0E0A               	movlw	10
  6687   0030FC  261D               	addwf	turnRight45@i^0,f,c
  6688   0030FE  0E00               	movlw	0
  6689   003100  221E               	addwfc	(turnRight45@i+1)^0,f,c
  6690   003102  BE1E               	btfsc	(turnRight45@i+1)^0,7,c
  6691   003104  EF8D  F018         	goto	u2251
  6692   003108  501E               	movf	(turnRight45@i+1)^0,w,c
  6693   00310A  E109               	bnz	u2250
  6694   00310C  0E50               	movlw	80
  6695   00310E  5C1D               	subwf	turnRight45@i^0,w,c
  6696   003110  A0D8               	btfss	status,0,c
  6697   003112  EF8D  F018         	goto	u2251
  6698   003116  EF8F  F018         	goto	u2250
  6699   00311A                     u2251:
  6700   00311A  EF59  F018         	goto	l4177
  6701   00311E                     u2250:
  6702   00311E                     
  6703                           ;dc_motor.c: 127:     _delay((unsigned long)((90)*(64000000/4000.0)));
  6704   00311E  0E08               	movlw	8
  6705   003120  6E1C               	movwf	(??_turnRight45+1)^0,c
  6706   003122  0E4F               	movlw	79
  6707   003124  6E1B               	movwf	??_turnRight45^0,c
  6708   003126  0E1A               	movlw	26
  6709   003128                     u2867:
  6710   003128  2EE8               	decfsz	wreg,f,c
  6711   00312A  D7FE               	bra	u2867
  6712   00312C  2E1B               	decfsz	??_turnRight45^0,f,c
  6713   00312E  D7FC               	bra	u2867
  6714   003130  2E1C               	decfsz	(??_turnRight45+1)^0,f,c
  6715   003132  D7FA               	bra	u2867
  6716   003134  0012               	return		;funcret
  6717   003136                     __end_of_turnRight45:
  6718                           	callstack 0
  6719                           
  6720 ;; *************** function _turnLeft45 *****************
  6721 ;; Defined at:
  6722 ;;		line 101 in file "dc_motor.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6725 ;;		 -> main@motorL(9), 
  6726 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6727 ;;		 -> main@motorR(9), 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  i               2   28[COMRAM] int 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6742 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6743 ;;Total ram usage:        8 bytes
  6744 ;; Hardware stack levels used: 1
  6745 ;; Hardware stack levels required when called: 3
  6746 ;; This function calls:
  6747 ;;		_setMotorPWM
  6748 ;; This function is called by:
  6749 ;;		_motor_response
  6750 ;;		_home_response
  6751 ;;		_motor_response_easy
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text26
  6756   003136                     __ptext26:
  6757                           	callstack 0
  6758   003136                     _turnLeft45:
  6759                           	callstack 25
  6760   003136                     
  6761                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  6762   003136  EE20 F001          	lfsr	2,1
  6763   00313A  5017               	movf	turnLeft45@mL^0,w,c
  6764   00313C  26D9               	addwf	fsr2l,f,c
  6765   00313E  5018               	movf	(turnLeft45@mL+1)^0,w,c
  6766   003140  22DA               	addwfc	fsr2h,f,c
  6767   003142  0E00               	movlw	0
  6768   003144  6EDF               	movwf	indf2,c
  6769                           
  6770                           ;dc_motor.c: 104:     mR->direction=1;
  6771   003146  EE20 F001          	lfsr	2,1
  6772   00314A  5019               	movf	turnLeft45@mR^0,w,c
  6773   00314C  26D9               	addwf	fsr2l,f,c
  6774   00314E  501A               	movf	(turnLeft45@mR+1)^0,w,c
  6775   003150  22DA               	addwfc	fsr2h,f,c
  6776   003152  0E01               	movlw	1
  6777   003154  6EDF               	movwf	indf2,c
  6778   003156                     
  6779                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  6780   003156  0E00               	movlw	0
  6781   003158  6E1E               	movwf	(turnLeft45@i+1)^0,c
  6782   00315A  0E00               	movlw	0
  6783   00315C  6E1D               	movwf	turnLeft45@i^0,c
  6784   00315E                     l4155:
  6785                           
  6786                           ;dc_motor.c: 107:         mR->power=i;
  6787   00315E  C019  FFD9         	movff	turnLeft45@mR,fsr2l
  6788   003162  C01A  FFDA         	movff	turnLeft45@mR+1,fsr2h
  6789   003166  C01D  FFDF         	movff	turnLeft45@i,indf2
  6790                           
  6791                           ;dc_motor.c: 108:         mL->power=i;
  6792   00316A  C017  FFD9         	movff	turnLeft45@mL,fsr2l
  6793   00316E  C018  FFDA         	movff	turnLeft45@mL+1,fsr2h
  6794   003172  C01D  FFDF         	movff	turnLeft45@i,indf2
  6795   003176                     
  6796                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  6797   003176  0E02               	movlw	2
  6798   003178  6E1C               	movwf	(??_turnLeft45+1)^0,c
  6799   00317A  0E38               	movlw	56
  6800   00317C  6E1B               	movwf	??_turnLeft45^0,c
  6801   00317E  0EAD               	movlw	173
  6802   003180                     u2877:
  6803   003180  2EE8               	decfsz	wreg,f,c
  6804   003182  D7FE               	bra	u2877
  6805   003184  2E1B               	decfsz	??_turnLeft45^0,f,c
  6806   003186  D7FC               	bra	u2877
  6807   003188  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  6808   00318A  D7FA               	bra	u2877
  6809   00318C  F000               	nop	
  6810   00318E                     
  6811                           ;dc_motor.c: 110:         setMotorPWM(mL);
  6812   00318E  C017  F011         	movff	turnLeft45@mL,setMotorPWM@m
  6813   003192  C018  F012         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  6814   003196  EC01  F014         	call	_setMotorPWM	;wreg free
  6815   00319A                     
  6816                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  6817   00319A  C019  F011         	movff	turnLeft45@mR,setMotorPWM@m
  6818   00319E  C01A  F012         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  6819   0031A2  EC01  F014         	call	_setMotorPWM	;wreg free
  6820   0031A6  0E0A               	movlw	10
  6821   0031A8  261D               	addwf	turnLeft45@i^0,f,c
  6822   0031AA  0E00               	movlw	0
  6823   0031AC  221E               	addwfc	(turnLeft45@i+1)^0,f,c
  6824   0031AE  BE1E               	btfsc	(turnLeft45@i+1)^0,7,c
  6825   0031B0  EFE3  F018         	goto	u2241
  6826   0031B4  501E               	movf	(turnLeft45@i+1)^0,w,c
  6827   0031B6  E109               	bnz	u2240
  6828   0031B8  0E50               	movlw	80
  6829   0031BA  5C1D               	subwf	turnLeft45@i^0,w,c
  6830   0031BC  A0D8               	btfss	status,0,c
  6831   0031BE  EFE3  F018         	goto	u2241
  6832   0031C2  EFE5  F018         	goto	u2240
  6833   0031C6                     u2241:
  6834   0031C6  EFAF  F018         	goto	l4155
  6835   0031CA                     u2240:
  6836   0031CA                     
  6837                           ;dc_motor.c: 112:     _delay((unsigned long)((90)*(64000000/4000.0)));
  6838   0031CA  0E08               	movlw	8
  6839   0031CC  6E1C               	movwf	(??_turnLeft45+1)^0,c
  6840   0031CE  0E4F               	movlw	79
  6841   0031D0  6E1B               	movwf	??_turnLeft45^0,c
  6842   0031D2  0E1A               	movlw	26
  6843   0031D4                     u2887:
  6844   0031D4  2EE8               	decfsz	wreg,f,c
  6845   0031D6  D7FE               	bra	u2887
  6846   0031D8  2E1B               	decfsz	??_turnLeft45^0,f,c
  6847   0031DA  D7FC               	bra	u2887
  6848   0031DC  2E1C               	decfsz	(??_turnLeft45+1)^0,f,c
  6849   0031DE  D7FA               	bra	u2887
  6850   0031E0  0012               	return		;funcret
  6851   0031E2                     __end_of_turnLeft45:
  6852                           	callstack 0
  6853                           
  6854 ;; *************** function _stop *****************
  6855 ;; Defined at:
  6856 ;;		line 84 in file "dc_motor.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6859 ;;		 -> main@motorL(9), 
  6860 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6861 ;;		 -> main@motorR(9), 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6876 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6877 ;;Total ram usage:        5 bytes
  6878 ;; Hardware stack levels used: 1
  6879 ;; Hardware stack levels required when called: 3
  6880 ;; This function calls:
  6881 ;;		_setMotorPWM
  6882 ;; This function is called by:
  6883 ;;		_main
  6884 ;;		_motor_response
  6885 ;;		_home_response
  6886 ;;		_motor_response_easy
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text27
  6891   003382                     __ptext27:
  6892                           	callstack 0
  6893   003382                     _stop:
  6894                           	callstack 27
  6895   003382                     
  6896                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  6897   003382  EFD6  F019         	goto	l4137
  6898   003386                     l4131:
  6899                           
  6900                           ;dc_motor.c: 87:         mL->power -=10;
  6901   003386  C017  FFD9         	movff	stop@mL,fsr2l
  6902   00338A  C018  FFDA         	movff	stop@mL+1,fsr2h
  6903   00338E  0E0A               	movlw	10
  6904   003390  5EDF               	subwf	indf2,f,c
  6905   003392                     
  6906                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6907   003392  0E2A               	movlw	42
  6908   003394  6E1B               	movwf	??_stop^0,c
  6909   003396  0E8E               	movlw	142
  6910   003398                     u2897:
  6911   003398  2EE8               	decfsz	wreg,f,c
  6912   00339A  D7FE               	bra	u2897
  6913   00339C  2E1B               	decfsz	??_stop^0,f,c
  6914   00339E  D7FC               	bra	u2897
  6915   0033A0                     
  6916                           ;dc_motor.c: 89:         setMotorPWM(mL);
  6917   0033A0  C017  F011         	movff	stop@mL,setMotorPWM@m
  6918   0033A4  C018  F012         	movff	stop@mL+1,setMotorPWM@m+1
  6919   0033A8  EC01  F014         	call	_setMotorPWM	;wreg free
  6920   0033AC                     l4137:
  6921                           
  6922                           ;dc_motor.c: 86:     while(mL->power !=0){
  6923   0033AC  C017  FFD9         	movff	stop@mL,fsr2l
  6924   0033B0  C018  FFDA         	movff	stop@mL+1,fsr2h
  6925   0033B4  50DF               	movf	indf2,w,c
  6926   0033B6  A4D8               	btfss	status,2,c
  6927   0033B8  EFE0  F019         	goto	u2221
  6928   0033BC  EFE2  F019         	goto	u2220
  6929   0033C0                     u2221:
  6930   0033C0  EFC3  F019         	goto	l4131
  6931   0033C4                     u2220:
  6932   0033C4  EFF7  F019         	goto	l4145
  6933   0033C8                     l4139:
  6934                           
  6935                           ;dc_motor.c: 92:         mR->power -=10;
  6936   0033C8  C019  FFD9         	movff	stop@mR,fsr2l
  6937   0033CC  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6938   0033D0  0E0A               	movlw	10
  6939   0033D2  5EDF               	subwf	indf2,f,c
  6940   0033D4                     
  6941                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6942   0033D4  0E2A               	movlw	42
  6943   0033D6  6E1B               	movwf	??_stop^0,c
  6944   0033D8  0E8E               	movlw	142
  6945   0033DA                     u2907:
  6946   0033DA  2EE8               	decfsz	wreg,f,c
  6947   0033DC  D7FE               	bra	u2907
  6948   0033DE  2E1B               	decfsz	??_stop^0,f,c
  6949   0033E0  D7FC               	bra	u2907
  6950   0033E2                     
  6951                           ;dc_motor.c: 94:         setMotorPWM(mR);
  6952   0033E2  C019  F011         	movff	stop@mR,setMotorPWM@m
  6953   0033E6  C01A  F012         	movff	stop@mR+1,setMotorPWM@m+1
  6954   0033EA  EC01  F014         	call	_setMotorPWM	;wreg free
  6955   0033EE                     l4145:
  6956                           
  6957                           ;dc_motor.c: 91:     while(mR -> power !=0){
  6958   0033EE  C019  FFD9         	movff	stop@mR,fsr2l
  6959   0033F2  C01A  FFDA         	movff	stop@mR+1,fsr2h
  6960   0033F6  50DF               	movf	indf2,w,c
  6961   0033F8  A4D8               	btfss	status,2,c
  6962   0033FA  EF01  F01A         	goto	u2231
  6963   0033FE  EF03  F01A         	goto	u2230
  6964   003402                     u2231:
  6965   003402  EFE4  F019         	goto	l4139
  6966   003406                     u2230:
  6967   003406  0012               	return		;funcret
  6968   003408                     __end_of_stop:
  6969                           	callstack 0
  6970                           
  6971 ;; *************** function _fullSpeedAhead *****************
  6972 ;; Defined at:
  6973 ;;		line 131 in file "dc_motor.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  mL              2   22[COMRAM] PTR struct DC_motor
  6976 ;;		 -> main@motorL(9), 
  6977 ;;  mR              2   24[COMRAM] PTR struct DC_motor
  6978 ;;		 -> main@motorR(9), 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  i               2   27[COMRAM] int 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      void 
  6983 ;; Registers used:
  6984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6993 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6994 ;;Total ram usage:        7 bytes
  6995 ;; Hardware stack levels used: 1
  6996 ;; Hardware stack levels required when called: 3
  6997 ;; This function calls:
  6998 ;;		_setMotorPWM
  6999 ;; This function is called by:
  7000 ;;		_main
  7001 ;;		_motor_response
  7002 ;;		_home_response
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           	psect	text28
  7007   00326E                     __ptext28:
  7008                           	callstack 0
  7009   00326E                     _fullSpeedAhead:
  7010                           	callstack 27
  7011   00326E                     
  7012                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  7013   00326E  EE20 F001          	lfsr	2,1
  7014   003272  5017               	movf	fullSpeedAhead@mL^0,w,c
  7015   003274  26D9               	addwf	fsr2l,f,c
  7016   003276  5018               	movf	(fullSpeedAhead@mL+1)^0,w,c
  7017   003278  22DA               	addwfc	fsr2h,f,c
  7018   00327A  0E01               	movlw	1
  7019   00327C  6EDF               	movwf	indf2,c
  7020                           
  7021                           ;dc_motor.c: 134:     mR->direction=1;
  7022   00327E  EE20 F001          	lfsr	2,1
  7023   003282  5019               	movf	fullSpeedAhead@mR^0,w,c
  7024   003284  26D9               	addwf	fsr2l,f,c
  7025   003286  501A               	movf	(fullSpeedAhead@mR+1)^0,w,c
  7026   003288  22DA               	addwfc	fsr2h,f,c
  7027   00328A  0E01               	movlw	1
  7028   00328C  6EDF               	movwf	indf2,c
  7029   00328E                     
  7030                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  7031   00328E  0E00               	movlw	0
  7032   003290  6E1D               	movwf	(fullSpeedAhead@i+1)^0,c
  7033   003292  0E00               	movlw	0
  7034   003294  6E1C               	movwf	fullSpeedAhead@i^0,c
  7035   003296                     l4199:
  7036                           
  7037                           ;dc_motor.c: 136:         mL->power=i;
  7038   003296  C017  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  7039   00329A  C018  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  7040   00329E  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7041                           
  7042                           ;dc_motor.c: 137:         mR->power=i;
  7043   0032A2  C019  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  7044   0032A6  C01A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  7045   0032AA  C01C  FFDF         	movff	fullSpeedAhead@i,indf2
  7046   0032AE                     
  7047                           ;dc_motor.c: 138:         setMotorPWM(mL);
  7048   0032AE  C017  F011         	movff	fullSpeedAhead@mL,setMotorPWM@m
  7049   0032B2  C018  F012         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  7050   0032B6  EC01  F014         	call	_setMotorPWM	;wreg free
  7051   0032BA                     
  7052                           ;dc_motor.c: 139:         setMotorPWM(mR);
  7053   0032BA  C019  F011         	movff	fullSpeedAhead@mR,setMotorPWM@m
  7054   0032BE  C01A  F012         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  7055   0032C2  EC01  F014         	call	_setMotorPWM	;wreg free
  7056   0032C6                     
  7057                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  7058   0032C6  0ED0               	movlw	208
  7059   0032C8  6E1B               	movwf	??_fullSpeedAhead^0,c
  7060   0032CA  0ECA               	movlw	202
  7061   0032CC                     u2917:
  7062   0032CC  2EE8               	decfsz	wreg,f,c
  7063   0032CE  D7FE               	bra	u2917
  7064   0032D0  2E1B               	decfsz	??_fullSpeedAhead^0,f,c
  7065   0032D2  D7FC               	bra	u2917
  7066   0032D4                     
  7067                           ;dc_motor.c: 141:     }
  7068   0032D4  0E0A               	movlw	10
  7069   0032D6  261C               	addwf	fullSpeedAhead@i^0,f,c
  7070   0032D8  0E00               	movlw	0
  7071   0032DA  221D               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  7072   0032DC  BE1D               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  7073   0032DE  EF7A  F019         	goto	u2261
  7074   0032E2  501D               	movf	(fullSpeedAhead@i+1)^0,w,c
  7075   0032E4  E109               	bnz	u2260
  7076   0032E6  0E3C               	movlw	60
  7077   0032E8  5C1C               	subwf	fullSpeedAhead@i^0,w,c
  7078   0032EA  A0D8               	btfss	status,0,c
  7079   0032EC  EF7A  F019         	goto	u2261
  7080   0032F0  EF7C  F019         	goto	u2260
  7081   0032F4                     u2261:
  7082   0032F4  EF4B  F019         	goto	l4199
  7083   0032F8                     u2260:
  7084   0032F8  0012               	return		;funcret
  7085   0032FA                     __end_of_fullSpeedAhead:
  7086                           	callstack 0
  7087                           
  7088 ;; *************** function _setMotorPWM *****************
  7089 ;; Defined at:
  7090 ;;		line 61 in file "dc_motor.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  m               2   16[COMRAM] PTR struct DC_motor
  7093 ;;		 -> main@motorR(9), main@motorL(9), 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  negDuty         1   21[COMRAM] unsigned char 
  7096 ;;  posDuty         1   20[COMRAM] unsigned char 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7108 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7109 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7110 ;;Total ram usage:        6 bytes
  7111 ;; Hardware stack levels used: 1
  7112 ;; Hardware stack levels required when called: 2
  7113 ;; This function calls:
  7114 ;;		___lwdiv
  7115 ;;		___wmul
  7116 ;; This function is called by:
  7117 ;;		_stop
  7118 ;;		_turnLeft45
  7119 ;;		_turnRight45
  7120 ;;		_fullSpeedAhead
  7121 ;;		_reverseFullSpeed
  7122 ;;		_main
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text29
  7127   002802                     __ptext29:
  7128                           	callstack 0
  7129   002802                     _setMotorPWM:
  7130                           	callstack 27
  7131   002802                     
  7132                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  7133   002802  EE20 F002          	lfsr	2,2
  7134   002806  5011               	movf	setMotorPWM@m^0,w,c
  7135   002808  26D9               	addwf	fsr2l,f,c
  7136   00280A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7137   00280C  22DA               	addwfc	fsr2h,f,c
  7138   00280E  50DF               	movf	indf2,w,c
  7139   002810  B4D8               	btfsc	status,2,c
  7140   002812  EF0D  F014         	goto	u2131
  7141   002816  EF0F  F014         	goto	u2130
  7142   00281A                     u2131:
  7143   00281A  EF43  F014         	goto	l4055
  7144   00281E                     u2130:
  7145   00281E                     
  7146                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  7147   00281E  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7148   002822  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7149   002826  50DF               	movf	indf2,w,c
  7150   002828  6E13               	movwf	??_setMotorPWM^0,c
  7151   00282A  5013               	movf	??_setMotorPWM^0,w,c
  7152   00282C  6E04               	movwf	___wmul@multiplier^0,c
  7153   00282E  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7154   002830  EE20 F003          	lfsr	2,3
  7155   002834  5011               	movf	setMotorPWM@m^0,w,c
  7156   002836  26D9               	addwf	fsr2l,f,c
  7157   002838  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7158   00283A  22DA               	addwfc	fsr2h,f,c
  7159   00283C  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7160   002840  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7161   002844  ECEC  F01C         	call	___wmul	;wreg free
  7162   002848  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7163   00284C  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7164   002850  0E00               	movlw	0
  7165   002852  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7166   002854  0E64               	movlw	100
  7167   002856  6E0C               	movwf	___lwdiv@divisor^0,c
  7168   002858  EC81  F01A         	call	___lwdiv	;wreg free
  7169   00285C  EE20 F003          	lfsr	2,3
  7170   002860  5011               	movf	setMotorPWM@m^0,w,c
  7171   002862  26D9               	addwf	fsr2l,f,c
  7172   002864  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7173   002866  22DA               	addwfc	fsr2h,f,c
  7174   002868  50DF               	movf	indf2,w,c
  7175   00286A  6E14               	movwf	(??_setMotorPWM+1)^0,c
  7176   00286C  500A               	movf	?___lwdiv^0,w,c
  7177   00286E  5C14               	subwf	(??_setMotorPWM+1)^0,w,c
  7178   002870  6E15               	movwf	setMotorPWM@posDuty^0,c
  7179   002872                     
  7180                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  7181   002872  EE20 F003          	lfsr	2,3
  7182   002876  5011               	movf	setMotorPWM@m^0,w,c
  7183   002878  26D9               	addwf	fsr2l,f,c
  7184   00287A  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7185   00287C  22DA               	addwfc	fsr2h,f,c
  7186   00287E  50DF               	movf	indf2,w,c
  7187   002880  6E16               	movwf	setMotorPWM@negDuty^0,c
  7188                           
  7189                           ;dc_motor.c: 68:     }
  7190   002882  EF66  F014         	goto	l4059
  7191   002886                     l4055:
  7192                           
  7193                           ;dc_motor.c: 70:         posDuty=0;
  7194   002886  0E00               	movlw	0
  7195   002888  6E15               	movwf	setMotorPWM@posDuty^0,c
  7196   00288A                     
  7197                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7198   00288A  C011  FFD9         	movff	setMotorPWM@m,fsr2l
  7199   00288E  C012  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7200   002892  50DF               	movf	indf2,w,c
  7201   002894  6E13               	movwf	??_setMotorPWM^0,c
  7202   002896  5013               	movf	??_setMotorPWM^0,w,c
  7203   002898  6E04               	movwf	___wmul@multiplier^0,c
  7204   00289A  6A05               	clrf	(___wmul@multiplier+1)^0,c
  7205   00289C  EE20 F003          	lfsr	2,3
  7206   0028A0  5011               	movf	setMotorPWM@m^0,w,c
  7207   0028A2  26D9               	addwf	fsr2l,f,c
  7208   0028A4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7209   0028A6  22DA               	addwfc	fsr2h,f,c
  7210   0028A8  CFDE F006          	movff	postinc2,___wmul@multiplicand
  7211   0028AC  CFDD F007          	movff	postdec2,___wmul@multiplicand+1
  7212   0028B0  ECEC  F01C         	call	___wmul	;wreg free
  7213   0028B4  C004  F00A         	movff	?___wmul,___lwdiv@dividend
  7214   0028B8  C005  F00B         	movff	?___wmul+1,___lwdiv@dividend+1
  7215   0028BC  0E00               	movlw	0
  7216   0028BE  6E0D               	movwf	(___lwdiv@divisor+1)^0,c
  7217   0028C0  0E64               	movlw	100
  7218   0028C2  6E0C               	movwf	___lwdiv@divisor^0,c
  7219   0028C4  EC81  F01A         	call	___lwdiv	;wreg free
  7220   0028C8  500A               	movf	?___lwdiv^0,w,c
  7221   0028CA  6E16               	movwf	setMotorPWM@negDuty^0,c
  7222   0028CC                     l4059:
  7223                           
  7224                           ;dc_motor.c: 74:     if (m->direction) {
  7225   0028CC  EE20 F001          	lfsr	2,1
  7226   0028D0  5011               	movf	setMotorPWM@m^0,w,c
  7227   0028D2  26D9               	addwf	fsr2l,f,c
  7228   0028D4  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7229   0028D6  22DA               	addwfc	fsr2h,f,c
  7230   0028D8  50DF               	movf	indf2,w,c
  7231   0028DA  B4D8               	btfsc	status,2,c
  7232   0028DC  EF72  F014         	goto	u2141
  7233   0028E0  EF74  F014         	goto	u2140
  7234   0028E4                     u2141:
  7235   0028E4  EF96  F014         	goto	l4063
  7236   0028E8                     u2140:
  7237   0028E8                     
  7238                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  7239   0028E8  EE20 F005          	lfsr	2,5
  7240   0028EC  5011               	movf	setMotorPWM@m^0,w,c
  7241   0028EE  26D9               	addwf	fsr2l,f,c
  7242   0028F0  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7243   0028F2  22DA               	addwfc	fsr2h,f,c
  7244   0028F4  CFDE F013          	movff	postinc2,??_setMotorPWM
  7245   0028F8  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7246   0028FC  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7247   002900  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7248   002904  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7249                           
  7250                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  7251   002908  EE20 F007          	lfsr	2,7
  7252   00290C  5011               	movf	setMotorPWM@m^0,w,c
  7253   00290E  26D9               	addwf	fsr2l,f,c
  7254   002910  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7255   002912  22DA               	addwfc	fsr2h,f,c
  7256   002914  CFDE F013          	movff	postinc2,??_setMotorPWM
  7257   002918  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7258   00291C  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7259   002920  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7260   002924  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7261                           
  7262                           ;dc_motor.c: 77:     } else {
  7263   002928  EFB6  F014         	goto	l86
  7264   00292C                     l4063:
  7265                           
  7266                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  7267   00292C  EE20 F005          	lfsr	2,5
  7268   002930  5011               	movf	setMotorPWM@m^0,w,c
  7269   002932  26D9               	addwf	fsr2l,f,c
  7270   002934  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7271   002936  22DA               	addwfc	fsr2h,f,c
  7272   002938  CFDE F013          	movff	postinc2,??_setMotorPWM
  7273   00293C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7274   002940  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7275   002944  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7276   002948  C016  FFDF         	movff	setMotorPWM@negDuty,indf2
  7277                           
  7278                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  7279   00294C  EE20 F007          	lfsr	2,7
  7280   002950  5011               	movf	setMotorPWM@m^0,w,c
  7281   002952  26D9               	addwf	fsr2l,f,c
  7282   002954  5012               	movf	(setMotorPWM@m+1)^0,w,c
  7283   002956  22DA               	addwfc	fsr2h,f,c
  7284   002958  CFDE F013          	movff	postinc2,??_setMotorPWM
  7285   00295C  CFDD F014          	movff	postdec2,??_setMotorPWM+1
  7286   002960  C013  FFD9         	movff	??_setMotorPWM,fsr2l
  7287   002964  C014  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7288   002968  C015  FFDF         	movff	setMotorPWM@posDuty,indf2
  7289   00296C                     l86:
  7290   00296C  0012               	return		;funcret
  7291   00296E                     __end_of_setMotorPWM:
  7292                           	callstack 0
  7293                           
  7294 ;; *************** function ___wmul *****************
  7295 ;; Defined at:
  7296 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  multiplier      2    3[COMRAM] unsigned int 
  7299 ;;  multiplicand    2    5[COMRAM] unsigned int 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  product         2    7[COMRAM] unsigned int 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  2    3[COMRAM] unsigned int 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, prodl, prodh
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7315 ;;Total ram usage:        6 bytes
  7316 ;; Hardware stack levels used: 1
  7317 ;; Hardware stack levels required when called: 1
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_setMotorPWM
  7322 ;;		_normalise_readings
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text30
  7327   0039D8                     __ptext30:
  7328                           	callstack 0
  7329   0039D8                     ___wmul:
  7330                           	callstack 27
  7331   0039D8  5004               	movf	___wmul@multiplier^0,w,c
  7332   0039DA  0206               	mulwf	___wmul@multiplicand^0,c
  7333   0039DC  CFF3 F008          	movff	prodl,___wmul@product
  7334   0039E0  CFF4 F009          	movff	prodh,___wmul@product+1
  7335   0039E4  5004               	movf	___wmul@multiplier^0,w,c
  7336   0039E6  0207               	mulwf	(___wmul@multiplicand+1)^0,c
  7337   0039E8  50F3               	movf	243,w,c
  7338   0039EA  2609               	addwf	(___wmul@product+1)^0,f,c
  7339   0039EC  5005               	movf	(___wmul@multiplier+1)^0,w,c
  7340   0039EE  0206               	mulwf	___wmul@multiplicand^0,c
  7341   0039F0  50F3               	movf	243,w,c
  7342   0039F2  2609               	addwf	(___wmul@product+1)^0,f,c
  7343   0039F4  C008  F004         	movff	___wmul@product,?___wmul
  7344   0039F8  C009  F005         	movff	___wmul@product+1,?___wmul+1
  7345   0039FC  0012               	return		;funcret
  7346   0039FE                     __end_of___wmul:
  7347                           	callstack 0
  7348                           
  7349 ;; *************** function ___lwdiv *****************
  7350 ;; Defined at:
  7351 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  dividend        2    9[COMRAM] unsigned int 
  7354 ;;  divisor         2   11[COMRAM] unsigned int 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  quotient        2   14[COMRAM] unsigned int 
  7357 ;;  counter         1   13[COMRAM] unsigned char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  2    9[COMRAM] unsigned int 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7371 ;;Total ram usage:        7 bytes
  7372 ;; Hardware stack levels used: 1
  7373 ;; Hardware stack levels required when called: 1
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_setMotorPWM
  7378 ;;		_normalise_readings
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text31
  7383   003502                     __ptext31:
  7384                           	callstack 0
  7385   003502                     ___lwdiv:
  7386                           	callstack 27
  7387   003502  0E00               	movlw	0
  7388   003504  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7389   003506  0E00               	movlw	0
  7390   003508  6E0F               	movwf	___lwdiv@quotient^0,c
  7391   00350A  500C               	movf	___lwdiv@divisor^0,w,c
  7392   00350C  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7393   00350E  B4D8               	btfsc	status,2,c
  7394   003510  EF8C  F01A         	goto	u2001
  7395   003514  EF8E  F01A         	goto	u2000
  7396   003518                     u2001:
  7397   003518  EFB6  F01A         	goto	l1032
  7398   00351C                     u2000:
  7399   00351C  0E01               	movlw	1
  7400   00351E  6E0E               	movwf	___lwdiv@counter^0,c
  7401   003520  EF96  F01A         	goto	l3983
  7402   003524                     l3981:
  7403   003524  90D8               	bcf	status,0,c
  7404   003526  360C               	rlcf	___lwdiv@divisor^0,f,c
  7405   003528  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7406   00352A  2A0E               	incf	___lwdiv@counter^0,f,c
  7407   00352C                     l3983:
  7408   00352C  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7409   00352E  EF9B  F01A         	goto	u2011
  7410   003532  EF9D  F01A         	goto	u2010
  7411   003536                     u2011:
  7412   003536  EF92  F01A         	goto	l3981
  7413   00353A                     u2010:
  7414   00353A                     l3985:
  7415   00353A  90D8               	bcf	status,0,c
  7416   00353C  360F               	rlcf	___lwdiv@quotient^0,f,c
  7417   00353E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7418   003540  500C               	movf	___lwdiv@divisor^0,w,c
  7419   003542  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7420   003544  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7421   003546  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7422   003548  A0D8               	btfss	status,0,c
  7423   00354A  EFA9  F01A         	goto	u2021
  7424   00354E  EFAB  F01A         	goto	u2020
  7425   003552                     u2021:
  7426   003552  EFB0  F01A         	goto	l3993
  7427   003556                     u2020:
  7428   003556  500C               	movf	___lwdiv@divisor^0,w,c
  7429   003558  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7430   00355A  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7431   00355C  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7432   00355E  800F               	bsf	___lwdiv@quotient^0,0,c
  7433   003560                     l3993:
  7434   003560  90D8               	bcf	status,0,c
  7435   003562  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7436   003564  320C               	rrcf	___lwdiv@divisor^0,f,c
  7437   003566  2E0E               	decfsz	___lwdiv@counter^0,f,c
  7438   003568  EF9D  F01A         	goto	l3985
  7439   00356C                     l1032:
  7440   00356C  C00F  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7441   003570  C010  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7442   003574  0012               	return		;funcret
  7443   003576                     __end_of___lwdiv:
  7444                           	callstack 0
  7445                           
  7446 ;; *************** function _make_master_closeness *****************
  7447 ;; Defined at:
  7448 ;;		line 101 in file "colour_identify.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  buf             2    3[COMRAM] PTR unsigned char 
  7451 ;;		 -> main@buf(150), 
  7452 ;;  normalised_v    2    5[COMRAM] PTR unsigned int [9]
  7453 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  7454 ;;  master_close    2    7[COMRAM] PTR unsigned int 
  7455 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  i               1   39[COMRAM] enum E14551
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7467 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;Total ram usage:       37 bytes
  7472 ;; Hardware stack levels used: 1
  7473 ;; Hardware stack levels required when called: 1
  7474 ;; This function calls:
  7475 ;;		Nothing
  7476 ;; This function is called by:
  7477 ;;		_card_response
  7478 ;;		_card_response_easy
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text32
  7483   002EB4                     __ptext32:
  7484                           	callstack 0
  7485   002EB4                     _make_master_closeness:
  7486                           	callstack 28
  7487   002EB4                     
  7488                           ;colour_identify.c: 102:     for(colour i = RED; i<=BLACK; i++){
  7489   002EB4  0E00               	movlw	0
  7490   002EB6  6E28               	movwf	make_master_closeness@i^0,c
  7491   002EB8                     l4427:
  7492                           
  7493                           ;colour_identify.c: 104:         master_closeness[i] = (normalised_values[RED][i] + norm
      +                          alised_values[GREEN][i] + normalised_values[BLUE][i] + normalised_values[3][i])/4;
  7494   002EB8  5028               	movf	make_master_closeness@i^0,w,c
  7495   002EBA  0D02               	mullw	2
  7496   002EBC  CFF3 F00A          	movff	prodl,??_make_master_closeness
  7497   002EC0  CFF4 F00B          	movff	prodh,??_make_master_closeness+1
  7498   002EC4  500A               	movf	??_make_master_closeness^0,w,c
  7499   002EC6  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7500   002EC8  6E0C               	movwf	(??_make_master_closeness+2)^0,c
  7501   002ECA  500B               	movf	(??_make_master_closeness+1)^0,w,c
  7502   002ECC  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7503   002ECE  6E0D               	movwf	(??_make_master_closeness+3)^0,c
  7504   002ED0  0E36               	movlw	54
  7505   002ED2  240C               	addwf	(??_make_master_closeness+2)^0,w,c
  7506   002ED4  6ED9               	movwf	fsr2l,c
  7507   002ED6  0E00               	movlw	0
  7508   002ED8  200D               	addwfc	(??_make_master_closeness+3)^0,w,c
  7509   002EDA  6EDA               	movwf	fsr2h,c
  7510   002EDC  CFDE F00E          	movff	postinc2,??_make_master_closeness+4
  7511   002EE0  CFDD F00F          	movff	postdec2,??_make_master_closeness+5
  7512   002EE4  5028               	movf	make_master_closeness@i^0,w,c
  7513   002EE6  0D02               	mullw	2
  7514   002EE8  CFF3 F010          	movff	prodl,??_make_master_closeness+6
  7515   002EEC  CFF4 F011          	movff	prodh,??_make_master_closeness+7
  7516   002EF0  5010               	movf	(??_make_master_closeness+6)^0,w,c
  7517   002EF2  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7518   002EF4  6E12               	movwf	(??_make_master_closeness+8)^0,c
  7519   002EF6  5011               	movf	(??_make_master_closeness+7)^0,w,c
  7520   002EF8  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7521   002EFA  6E13               	movwf	(??_make_master_closeness+9)^0,c
  7522   002EFC  0E24               	movlw	36
  7523   002EFE  2412               	addwf	(??_make_master_closeness+8)^0,w,c
  7524   002F00  6ED9               	movwf	fsr2l,c
  7525   002F02  0E00               	movlw	0
  7526   002F04  2013               	addwfc	(??_make_master_closeness+9)^0,w,c
  7527   002F06  6EDA               	movwf	fsr2h,c
  7528   002F08  CFDE F014          	movff	postinc2,??_make_master_closeness+10
  7529   002F0C  CFDD F015          	movff	postdec2,??_make_master_closeness+11
  7530   002F10  5028               	movf	make_master_closeness@i^0,w,c
  7531   002F12  0D02               	mullw	2
  7532   002F14  CFF3 F016          	movff	prodl,??_make_master_closeness+12
  7533   002F18  CFF4 F017          	movff	prodh,??_make_master_closeness+13
  7534   002F1C  5016               	movf	(??_make_master_closeness+12)^0,w,c
  7535   002F1E  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7536   002F20  6E18               	movwf	(??_make_master_closeness+14)^0,c
  7537   002F22  5017               	movf	(??_make_master_closeness+13)^0,w,c
  7538   002F24  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7539   002F26  6E19               	movwf	(??_make_master_closeness+15)^0,c
  7540   002F28  0E12               	movlw	18
  7541   002F2A  2418               	addwf	(??_make_master_closeness+14)^0,w,c
  7542   002F2C  6ED9               	movwf	fsr2l,c
  7543   002F2E  0E00               	movlw	0
  7544   002F30  2019               	addwfc	(??_make_master_closeness+15)^0,w,c
  7545   002F32  6EDA               	movwf	fsr2h,c
  7546   002F34  CFDE F01A          	movff	postinc2,??_make_master_closeness+16
  7547   002F38  CFDD F01B          	movff	postdec2,??_make_master_closeness+17
  7548   002F3C  5028               	movf	make_master_closeness@i^0,w,c
  7549   002F3E  0D02               	mullw	2
  7550   002F40  CFF3 F01C          	movff	prodl,??_make_master_closeness+18
  7551   002F44  CFF4 F01D          	movff	prodh,??_make_master_closeness+19
  7552   002F48  501C               	movf	(??_make_master_closeness+18)^0,w,c
  7553   002F4A  2406               	addwf	make_master_closeness@normalised_values^0,w,c
  7554   002F4C  6ED9               	movwf	fsr2l,c
  7555   002F4E  501D               	movf	(??_make_master_closeness+19)^0,w,c
  7556   002F50  2007               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  7557   002F52  6EDA               	movwf	fsr2h,c
  7558   002F54  CFDE F01E          	movff	postinc2,??_make_master_closeness+20
  7559   002F58  CFDD F01F          	movff	postdec2,??_make_master_closeness+21
  7560   002F5C  501A               	movf	(??_make_master_closeness+16)^0,w,c
  7561   002F5E  241E               	addwf	(??_make_master_closeness+20)^0,w,c
  7562   002F60  6E20               	movwf	(??_make_master_closeness+22)^0,c
  7563   002F62  501B               	movf	(??_make_master_closeness+17)^0,w,c
  7564   002F64  201F               	addwfc	(??_make_master_closeness+21)^0,w,c
  7565   002F66  6E21               	movwf	(??_make_master_closeness+23)^0,c
  7566   002F68  5014               	movf	(??_make_master_closeness+10)^0,w,c
  7567   002F6A  2420               	addwf	(??_make_master_closeness+22)^0,w,c
  7568   002F6C  6E22               	movwf	(??_make_master_closeness+24)^0,c
  7569   002F6E  5015               	movf	(??_make_master_closeness+11)^0,w,c
  7570   002F70  2021               	addwfc	(??_make_master_closeness+23)^0,w,c
  7571   002F72  6E23               	movwf	(??_make_master_closeness+25)^0,c
  7572   002F74  500E               	movf	(??_make_master_closeness+4)^0,w,c
  7573   002F76  2422               	addwf	(??_make_master_closeness+24)^0,w,c
  7574   002F78  6E24               	movwf	(??_make_master_closeness+26)^0,c
  7575   002F7A  500F               	movf	(??_make_master_closeness+5)^0,w,c
  7576   002F7C  2023               	addwfc	(??_make_master_closeness+25)^0,w,c
  7577   002F7E  6E25               	movwf	(??_make_master_closeness+27)^0,c
  7578   002F80  90D8               	bcf	status,0,c
  7579   002F82  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7580   002F84  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7581   002F86  90D8               	bcf	status,0,c
  7582   002F88  3225               	rrcf	(??_make_master_closeness+27)^0,f,c
  7583   002F8A  3224               	rrcf	(??_make_master_closeness+26)^0,f,c
  7584   002F8C  5028               	movf	make_master_closeness@i^0,w,c
  7585   002F8E  0D02               	mullw	2
  7586   002F90  CFF3 F026          	movff	prodl,??_make_master_closeness+28
  7587   002F94  CFF4 F027          	movff	prodh,??_make_master_closeness+29
  7588   002F98  5026               	movf	(??_make_master_closeness+28)^0,w,c
  7589   002F9A  2408               	addwf	make_master_closeness@master_closeness^0,w,c
  7590   002F9C  6ED9               	movwf	fsr2l,c
  7591   002F9E  5027               	movf	(??_make_master_closeness+29)^0,w,c
  7592   002FA0  2009               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  7593   002FA2  6EDA               	movwf	fsr2h,c
  7594   002FA4  C024  FFDE         	movff	??_make_master_closeness+26,postinc2
  7595   002FA8  C025  FFDD         	movff	??_make_master_closeness+27,postdec2
  7596   002FAC                     
  7597                           ;colour_identify.c: 109:     }
  7598   002FAC  2A28               	incf	make_master_closeness@i^0,f,c
  7599   002FAE  0E08               	movlw	8
  7600   002FB0  6428               	cpfsgt	make_master_closeness@i^0,c
  7601   002FB2  EFDD  F017         	goto	u2371
  7602   002FB6  EFDF  F017         	goto	u2370
  7603   002FBA                     u2371:
  7604   002FBA  EF5C  F017         	goto	l4427
  7605   002FBE                     u2370:
  7606   002FBE  0012               	return		;funcret
  7607   002FC0                     __end_of_make_master_closeness:
  7608                           	callstack 0
  7609                           
  7610 ;; *************** function _determine_card *****************
  7611 ;; Defined at:
  7612 ;;		line 112 in file "colour_identify.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  master_close    2    3[COMRAM] PTR unsigned int 
  7615 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  i               1   12[COMRAM] enum E14551
  7618 ;;  current_smal    2    9[COMRAM] unsigned int 
  7619 ;;  predicted_co    1   11[COMRAM] enum E14551
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  1    wreg      enum E14551
  7622 ;; Registers used:
  7623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7631 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7632 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7633 ;;Total ram usage:       10 bytes
  7634 ;; Hardware stack levels used: 1
  7635 ;; Hardware stack levels required when called: 1
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		_card_response
  7640 ;;		_card_response_easy
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text33
  7645   003408                     __ptext33:
  7646                           	callstack 0
  7647   003408                     _determine_card:
  7648                           	callstack 28
  7649   003408                     
  7650                           ;colour_identify.c: 114:     colour predicted_colour = RED;
  7651   003408  0E00               	movlw	0
  7652   00340A  6E0C               	movwf	determine_card@predicted_colour^0,c
  7653   00340C                     
  7654                           ;colour_identify.c: 115:     unsigned int current_smallest = master_closeness[RED];
  7655   00340C  C004  FFD9         	movff	determine_card@master_closeness,fsr2l
  7656   003410  C005  FFDA         	movff	determine_card@master_closeness+1,fsr2h
  7657   003414  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7658   003418  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7659   00341C                     
  7660                           ;colour_identify.c: 116:     for(colour i = GREEN; i<=BLACK; i++){
  7661   00341C  0E01               	movlw	1
  7662   00341E  6E0D               	movwf	determine_card@i^0,c
  7663   003420                     l4443:
  7664                           
  7665                           ;colour_identify.c: 117:         if(master_closeness[i] < current_smallest){
  7666   003420  500D               	movf	determine_card@i^0,w,c
  7667   003422  0D02               	mullw	2
  7668   003424  CFF3 F006          	movff	prodl,??_determine_card
  7669   003428  CFF4 F007          	movff	prodh,??_determine_card+1
  7670   00342C  5006               	movf	??_determine_card^0,w,c
  7671   00342E  2404               	addwf	determine_card@master_closeness^0,w,c
  7672   003430  6ED9               	movwf	fsr2l,c
  7673   003432  5007               	movf	(??_determine_card+1)^0,w,c
  7674   003434  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7675   003436  6EDA               	movwf	fsr2h,c
  7676   003438  500A               	movf	determine_card@current_smallest^0,w,c
  7677   00343A  5CDE               	subwf	postinc2,w,c
  7678   00343C  500B               	movf	(determine_card@current_smallest+1)^0,w,c
  7679   00343E  58DE               	subwfb	postinc2,w,c
  7680   003440  B0D8               	btfsc	status,0,c
  7681   003442  EF25  F01A         	goto	u2381
  7682   003446  EF27  F01A         	goto	u2380
  7683   00344A                     u2381:
  7684   00344A  EF39  F01A         	goto	l4449
  7685   00344E                     u2380:
  7686   00344E                     
  7687                           ;colour_identify.c: 118:             current_smallest = master_closeness[i];
  7688   00344E  500D               	movf	determine_card@i^0,w,c
  7689   003450  0D02               	mullw	2
  7690   003452  CFF3 F006          	movff	prodl,??_determine_card
  7691   003456  CFF4 F007          	movff	prodh,??_determine_card+1
  7692   00345A  5006               	movf	??_determine_card^0,w,c
  7693   00345C  2404               	addwf	determine_card@master_closeness^0,w,c
  7694   00345E  6ED9               	movwf	fsr2l,c
  7695   003460  5007               	movf	(??_determine_card+1)^0,w,c
  7696   003462  2005               	addwfc	(determine_card@master_closeness+1)^0,w,c
  7697   003464  6EDA               	movwf	fsr2h,c
  7698   003466  CFDE F00A          	movff	postinc2,determine_card@current_smallest
  7699   00346A  CFDD F00B          	movff	postdec2,determine_card@current_smallest+1
  7700   00346E                     
  7701                           ;colour_identify.c: 119:             predicted_colour = i;
  7702   00346E  C00D  F00C         	movff	determine_card@i,determine_card@predicted_colour
  7703   003472                     l4449:
  7704                           
  7705                           ;colour_identify.c: 121:     }
  7706   003472  2A0D               	incf	determine_card@i^0,f,c
  7707   003474  0E08               	movlw	8
  7708   003476  640D               	cpfsgt	determine_card@i^0,c
  7709   003478  EF40  F01A         	goto	u2391
  7710   00347C  EF42  F01A         	goto	u2390
  7711   003480                     u2391:
  7712   003480  EF10  F01A         	goto	l4443
  7713   003484                     u2390:
  7714   003484                     
  7715                           ;colour_identify.c: 122:     return predicted_colour;
  7716   003484  500C               	movf	determine_card@predicted_colour^0,w,c
  7717   003486  0012               	return		;funcret
  7718   003488                     __end_of_determine_card:
  7719                           	callstack 0
  7720                           
  7721 ;; *************** function _collect_avg_readings *****************
  7722 ;; Defined at:
  7723 ;;		line 31 in file "colour_identify.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  clear_read      2   14[COMRAM] PTR unsigned int 
  7726 ;;		 -> main@clear_read(2), 
  7727 ;;  red_read        2   16[COMRAM] PTR unsigned int 
  7728 ;;		 -> main@red_read(2), 
  7729 ;;  green_read      2   18[COMRAM] PTR unsigned int 
  7730 ;;		 -> main@green_read(2), 
  7731 ;;  blue_read       2   20[COMRAM] PTR unsigned int 
  7732 ;;		 -> main@blue_read(2), 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  i               2   32[COMRAM] int 
  7735 ;;  i               2   30[COMRAM] int 
  7736 ;;  i               2   28[COMRAM] int 
  7737 ;;  i               2   26[COMRAM] int 
  7738 ;;  i               2   24[COMRAM] int 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7748 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7752 ;;Total ram usage:       20 bytes
  7753 ;; Hardware stack levels used: 1
  7754 ;; Hardware stack levels required when called: 4
  7755 ;; This function calls:
  7756 ;;		_color_read_Blue
  7757 ;;		_color_read_Clear
  7758 ;;		_color_read_Green
  7759 ;;		_color_read_Red
  7760 ;; This function is called by:
  7761 ;;		_main
  7762 ;;		_card_response
  7763 ;;		_card_response_easy
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text34
  7768   002400                     __ptext34:
  7769                           	callstack 0
  7770   002400                     _collect_avg_readings:
  7771                           	callstack 26
  7772   002400                     
  7773                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  7774   002400  0E00               	movlw	0
  7775   002402  6E1A               	movwf	(collect_avg_readings@i+1)^0,c
  7776   002404  0E00               	movlw	0
  7777   002406  6E19               	movwf	collect_avg_readings@i^0,c
  7778   002408                     l4339:
  7779                           
  7780                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  7781   002408  EC90  F01B         	call	_color_read_Clear	;wreg free
  7782   00240C  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7783   002410  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7784   002414  C008  FFDE         	movff	?_color_read_Clear,postinc2
  7785   002418  C009  FFDD         	movff	?_color_read_Clear+1,postdec2
  7786                           
  7787                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  7788   00241C  EC40  F01B         	call	_color_read_Red	;wreg free
  7789   002420  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7790   002424  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7791   002428  C008  FFDE         	movff	?_color_read_Red,postinc2
  7792   00242C  C009  FFDD         	movff	?_color_read_Red+1,postdec2
  7793                           
  7794                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  7795   002430  EC68  F01B         	call	_color_read_Green	;wreg free
  7796   002434  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7797   002438  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7798   00243C  C008  FFDE         	movff	?_color_read_Green,postinc2
  7799   002440  C009  FFDD         	movff	?_color_read_Green+1,postdec2
  7800                           
  7801                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  7802   002444  ECB8  F01B         	call	_color_read_Blue	;wreg free
  7803   002448  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  7804   00244C  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  7805   002450  C008  FFDE         	movff	?_color_read_Blue,postinc2
  7806   002454  C009  FFDD         	movff	?_color_read_Blue+1,postdec2
  7807   002458                     
  7808                           ;colour_identify.c: 40:     }
  7809   002458  4A19               	infsnz	collect_avg_readings@i^0,f,c
  7810   00245A  2A1A               	incf	(collect_avg_readings@i+1)^0,f,c
  7811   00245C  BE1A               	btfsc	(collect_avg_readings@i+1)^0,7,c
  7812   00245E  EF3A  F012         	goto	u2311
  7813   002462  0EF5               	movlw	245
  7814   002464  5C19               	subwf	collect_avg_readings@i^0,w,c
  7815   002466  0E01               	movlw	1
  7816   002468  581A               	subwfb	(collect_avg_readings@i+1)^0,w,c
  7817   00246A  A0D8               	btfss	status,0,c
  7818   00246C  EF3A  F012         	goto	u2311
  7819   002470  EF3C  F012         	goto	u2310
  7820   002474                     u2311:
  7821   002474  EF04  F012         	goto	l4339
  7822   002478                     u2310:
  7823   002478                     
  7824                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  7825   002478  0E00               	movlw	0
  7826   00247A  6E1C               	movwf	(collect_avg_readings@i_1651+1)^0,c
  7827   00247C  0E00               	movlw	0
  7828   00247E  6E1B               	movwf	collect_avg_readings@i_1651^0,c
  7829   002480                     l4351:
  7830                           
  7831                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  7832   002480  EC90  F01B         	call	_color_read_Clear	;wreg free
  7833   002484  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7834   002488  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7835   00248C  5008               	movf	?_color_read_Clear^0,w,c
  7836   00248E  26DE               	addwf	postinc2,f,c
  7837   002490  5009               	movf	(?_color_read_Clear+1)^0,w,c
  7838   002492  22DD               	addwfc	postdec2,f,c
  7839   002494                     
  7840                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7841   002494  0E11               	movlw	17
  7842   002496  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7843   002498  0E3C               	movlw	60
  7844   00249A  6E17               	movwf	??_collect_avg_readings^0,c
  7845   00249C  0ECB               	movlw	203
  7846   00249E                     u2927:
  7847   00249E  2EE8               	decfsz	wreg,f,c
  7848   0024A0  D7FE               	bra	u2927
  7849   0024A2  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7850   0024A4  D7FC               	bra	u2927
  7851   0024A6  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7852   0024A8  D7FA               	bra	u2927
  7853   0024AA  F000               	nop	
  7854   0024AC                     
  7855                           ;colour_identify.c: 47:     }
  7856   0024AC  4A1B               	infsnz	collect_avg_readings@i_1651^0,f,c
  7857   0024AE  2A1C               	incf	(collect_avg_readings@i_1651+1)^0,f,c
  7858   0024B0  BE1C               	btfsc	(collect_avg_readings@i_1651+1)^0,7,c
  7859   0024B2  EF64  F012         	goto	u2321
  7860   0024B6  501C               	movf	(collect_avg_readings@i_1651+1)^0,w,c
  7861   0024B8  E109               	bnz	u2320
  7862   0024BA  0E03               	movlw	3
  7863   0024BC  5C1B               	subwf	collect_avg_readings@i_1651^0,w,c
  7864   0024BE  A0D8               	btfss	status,0,c
  7865   0024C0  EF64  F012         	goto	u2321
  7866   0024C4  EF66  F012         	goto	u2320
  7867   0024C8                     u2321:
  7868   0024C8  EF40  F012         	goto	l4351
  7869   0024CC                     u2320:
  7870   0024CC                     
  7871                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  7872   0024CC  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7873   0024D0  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7874   0024D4  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7875   0024D8  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7876   0024DC  90D8               	bcf	status,0,c
  7877   0024DE  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7878   0024E0  3217               	rrcf	??_collect_avg_readings^0,f,c
  7879   0024E2  90D8               	bcf	status,0,c
  7880   0024E4  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7881   0024E6  3217               	rrcf	??_collect_avg_readings^0,f,c
  7882   0024E8  C00F  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  7883   0024EC  C010  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  7884   0024F0  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7885   0024F4  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7886   0024F8                     
  7887                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  7888   0024F8  0E00               	movlw	0
  7889   0024FA  6E1E               	movwf	(collect_avg_readings@i_1652+1)^0,c
  7890   0024FC  0E00               	movlw	0
  7891   0024FE  6E1D               	movwf	collect_avg_readings@i_1652^0,c
  7892   002500                     l4367:
  7893                           
  7894                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  7895   002500  EC40  F01B         	call	_color_read_Red	;wreg free
  7896   002504  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7897   002508  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7898   00250C  5008               	movf	?_color_read_Red^0,w,c
  7899   00250E  26DE               	addwf	postinc2,f,c
  7900   002510  5009               	movf	(?_color_read_Red+1)^0,w,c
  7901   002512  22DD               	addwfc	postdec2,f,c
  7902   002514                     
  7903                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7904   002514  0E11               	movlw	17
  7905   002516  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7906   002518  0E3C               	movlw	60
  7907   00251A  6E17               	movwf	??_collect_avg_readings^0,c
  7908   00251C  0ECB               	movlw	203
  7909   00251E                     u2937:
  7910   00251E  2EE8               	decfsz	wreg,f,c
  7911   002520  D7FE               	bra	u2937
  7912   002522  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7913   002524  D7FC               	bra	u2937
  7914   002526  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7915   002528  D7FA               	bra	u2937
  7916   00252A  F000               	nop	
  7917   00252C                     
  7918                           ;colour_identify.c: 53:     }
  7919   00252C  4A1D               	infsnz	collect_avg_readings@i_1652^0,f,c
  7920   00252E  2A1E               	incf	(collect_avg_readings@i_1652+1)^0,f,c
  7921   002530  BE1E               	btfsc	(collect_avg_readings@i_1652+1)^0,7,c
  7922   002532  EFA4  F012         	goto	u2331
  7923   002536  501E               	movf	(collect_avg_readings@i_1652+1)^0,w,c
  7924   002538  E109               	bnz	u2330
  7925   00253A  0E03               	movlw	3
  7926   00253C  5C1D               	subwf	collect_avg_readings@i_1652^0,w,c
  7927   00253E  A0D8               	btfss	status,0,c
  7928   002540  EFA4  F012         	goto	u2331
  7929   002544  EFA6  F012         	goto	u2330
  7930   002548                     u2331:
  7931   002548  EF80  F012         	goto	l4367
  7932   00254C                     u2330:
  7933   00254C                     
  7934                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  7935   00254C  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7936   002550  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7937   002554  CFDE F017          	movff	postinc2,??_collect_avg_readings
  7938   002558  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  7939   00255C  90D8               	bcf	status,0,c
  7940   00255E  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7941   002560  3217               	rrcf	??_collect_avg_readings^0,f,c
  7942   002562  90D8               	bcf	status,0,c
  7943   002564  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  7944   002566  3217               	rrcf	??_collect_avg_readings^0,f,c
  7945   002568  C011  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  7946   00256C  C012  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  7947   002570  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  7948   002574  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  7949   002578                     
  7950                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  7951   002578  0E00               	movlw	0
  7952   00257A  6E20               	movwf	(collect_avg_readings@i_1653+1)^0,c
  7953   00257C  0E00               	movlw	0
  7954   00257E  6E1F               	movwf	collect_avg_readings@i_1653^0,c
  7955   002580                     l4383:
  7956                           
  7957                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  7958   002580  EC68  F01B         	call	_color_read_Green	;wreg free
  7959   002584  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7960   002588  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  7961   00258C  5008               	movf	?_color_read_Green^0,w,c
  7962   00258E  26DE               	addwf	postinc2,f,c
  7963   002590  5009               	movf	(?_color_read_Green+1)^0,w,c
  7964   002592  22DD               	addwfc	postdec2,f,c
  7965   002594                     
  7966                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  7967   002594  0E11               	movlw	17
  7968   002596  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  7969   002598  0E3C               	movlw	60
  7970   00259A  6E17               	movwf	??_collect_avg_readings^0,c
  7971   00259C  0ECB               	movlw	203
  7972   00259E                     u2947:
  7973   00259E  2EE8               	decfsz	wreg,f,c
  7974   0025A0  D7FE               	bra	u2947
  7975   0025A2  2E17               	decfsz	??_collect_avg_readings^0,f,c
  7976   0025A4  D7FC               	bra	u2947
  7977   0025A6  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  7978   0025A8  D7FA               	bra	u2947
  7979   0025AA  F000               	nop	
  7980   0025AC                     
  7981                           ;colour_identify.c: 59:     }
  7982   0025AC  4A1F               	infsnz	collect_avg_readings@i_1653^0,f,c
  7983   0025AE  2A20               	incf	(collect_avg_readings@i_1653+1)^0,f,c
  7984   0025B0  BE20               	btfsc	(collect_avg_readings@i_1653+1)^0,7,c
  7985   0025B2  EFE4  F012         	goto	u2341
  7986   0025B6  5020               	movf	(collect_avg_readings@i_1653+1)^0,w,c
  7987   0025B8  E109               	bnz	u2340
  7988   0025BA  0E03               	movlw	3
  7989   0025BC  5C1F               	subwf	collect_avg_readings@i_1653^0,w,c
  7990   0025BE  A0D8               	btfss	status,0,c
  7991   0025C0  EFE4  F012         	goto	u2341
  7992   0025C4  EFE6  F012         	goto	u2340
  7993   0025C8                     u2341:
  7994   0025C8  EFC0  F012         	goto	l4383
  7995   0025CC                     u2340:
  7996   0025CC                     
  7997                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  7998   0025CC  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  7999   0025D0  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8000   0025D4  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8001   0025D8  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8002   0025DC  90D8               	bcf	status,0,c
  8003   0025DE  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8004   0025E0  3217               	rrcf	??_collect_avg_readings^0,f,c
  8005   0025E2  90D8               	bcf	status,0,c
  8006   0025E4  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8007   0025E6  3217               	rrcf	??_collect_avg_readings^0,f,c
  8008   0025E8  C013  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  8009   0025EC  C014  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  8010   0025F0  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8011   0025F4  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8012   0025F8                     
  8013                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  8014   0025F8  0E00               	movlw	0
  8015   0025FA  6E22               	movwf	(collect_avg_readings@i_1654+1)^0,c
  8016   0025FC  0E00               	movlw	0
  8017   0025FE  6E21               	movwf	collect_avg_readings@i_1654^0,c
  8018   002600                     l4399:
  8019                           
  8020                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  8021   002600  ECB8  F01B         	call	_color_read_Blue	;wreg free
  8022   002604  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8023   002608  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8024   00260C  5008               	movf	?_color_read_Blue^0,w,c
  8025   00260E  26DE               	addwf	postinc2,f,c
  8026   002610  5009               	movf	(?_color_read_Blue+1)^0,w,c
  8027   002612  22DD               	addwfc	postdec2,f,c
  8028   002614                     
  8029                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  8030   002614  0E11               	movlw	17
  8031   002616  6E18               	movwf	(??_collect_avg_readings+1)^0,c
  8032   002618  0E3C               	movlw	60
  8033   00261A  6E17               	movwf	??_collect_avg_readings^0,c
  8034   00261C  0ECB               	movlw	203
  8035   00261E                     u2957:
  8036   00261E  2EE8               	decfsz	wreg,f,c
  8037   002620  D7FE               	bra	u2957
  8038   002622  2E17               	decfsz	??_collect_avg_readings^0,f,c
  8039   002624  D7FC               	bra	u2957
  8040   002626  2E18               	decfsz	(??_collect_avg_readings+1)^0,f,c
  8041   002628  D7FA               	bra	u2957
  8042   00262A  F000               	nop	
  8043   00262C                     
  8044                           ;colour_identify.c: 65:     }
  8045   00262C  4A21               	infsnz	collect_avg_readings@i_1654^0,f,c
  8046   00262E  2A22               	incf	(collect_avg_readings@i_1654+1)^0,f,c
  8047   002630  BE22               	btfsc	(collect_avg_readings@i_1654+1)^0,7,c
  8048   002632  EF24  F013         	goto	u2351
  8049   002636  5022               	movf	(collect_avg_readings@i_1654+1)^0,w,c
  8050   002638  E109               	bnz	u2350
  8051   00263A  0E03               	movlw	3
  8052   00263C  5C21               	subwf	collect_avg_readings@i_1654^0,w,c
  8053   00263E  A0D8               	btfss	status,0,c
  8054   002640  EF24  F013         	goto	u2351
  8055   002644  EF26  F013         	goto	u2350
  8056   002648                     u2351:
  8057   002648  EF00  F013         	goto	l4399
  8058   00264C                     u2350:
  8059   00264C                     
  8060                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  8061   00264C  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8062   002650  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8063   002654  CFDE F017          	movff	postinc2,??_collect_avg_readings
  8064   002658  CFDD F018          	movff	postdec2,??_collect_avg_readings+1
  8065   00265C  90D8               	bcf	status,0,c
  8066   00265E  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8067   002660  3217               	rrcf	??_collect_avg_readings^0,f,c
  8068   002662  90D8               	bcf	status,0,c
  8069   002664  3218               	rrcf	(??_collect_avg_readings+1)^0,f,c
  8070   002666  3217               	rrcf	??_collect_avg_readings^0,f,c
  8071   002668  C015  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  8072   00266C  C016  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  8073   002670  C017  FFDE         	movff	??_collect_avg_readings,postinc2
  8074   002674  C018  FFDD         	movff	??_collect_avg_readings+1,postdec2
  8075   002678  0012               	return		;funcret
  8076   00267A                     __end_of_collect_avg_readings:
  8077                           	callstack 0
  8078                           
  8079 ;; *************** function _color_read_Red *****************
  8080 ;; Defined at:
  8081 ;;		line 29 in file "color.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;  tmp             2   12[COMRAM] unsigned int 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  2    7[COMRAM] unsigned int 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8097 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8098 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8099 ;;Total ram usage:        7 bytes
  8100 ;; Hardware stack levels used: 1
  8101 ;; Hardware stack levels required when called: 3
  8102 ;; This function calls:
  8103 ;;		_I2C_2_Master_Read
  8104 ;;		_I2C_2_Master_RepStart
  8105 ;;		_I2C_2_Master_Start
  8106 ;;		_I2C_2_Master_Stop
  8107 ;;		_I2C_2_Master_Write
  8108 ;; This function is called by:
  8109 ;;		_collect_avg_readings
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           	psect	text35
  8114   003680                     __ptext35:
  8115                           	callstack 0
  8116   003680                     _color_read_Red:
  8117                           	callstack 26
  8118   003680                     
  8119                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  8120   003680  EC45  F01D         	call	_I2C_2_Master_Start	;wreg free
  8121                           
  8122                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  8123   003684  0E52               	movlw	82
  8124   003686  EC3A  F01D         	call	_I2C_2_Master_Write
  8125                           
  8126                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  8127   00368A  0EB6               	movlw	182
  8128   00368C  EC3A  F01D         	call	_I2C_2_Master_Write
  8129                           
  8130                           ;color.c: 35:  I2C_2_Master_RepStart();
  8131   003690  EC4A  F01D         	call	_I2C_2_Master_RepStart	;wreg free
  8132                           
  8133                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  8134   003694  0E53               	movlw	83
  8135   003696  EC3A  F01D         	call	_I2C_2_Master_Write
  8136                           
  8137                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  8138   00369A  0E01               	movlw	1
  8139   00369C  EC26  F01C         	call	_I2C_2_Master_Read
  8140   0036A0  6E0A               	movwf	??_color_read_Red^0,c
  8141   0036A2  500A               	movf	??_color_read_Red^0,w,c
  8142   0036A4  6E0D               	movwf	color_read_Red@tmp^0,c
  8143   0036A6  6A0E               	clrf	(color_read_Red@tmp+1)^0,c
  8144                           
  8145                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8146   0036A8  0E00               	movlw	0
  8147   0036AA  EC26  F01C         	call	_I2C_2_Master_Read
  8148   0036AE  6E0A               	movwf	??_color_read_Red^0,c
  8149   0036B0  500A               	movf	??_color_read_Red^0,w,c
  8150   0036B2  6E0C               	movwf	(??_color_read_Red+2)^0,c
  8151   0036B4  6A0B               	clrf	(??_color_read_Red+1)^0,c
  8152   0036B6  500D               	movf	color_read_Red@tmp^0,w,c
  8153   0036B8  100B               	iorwf	(??_color_read_Red+1)^0,w,c
  8154   0036BA  6E0D               	movwf	color_read_Red@tmp^0,c
  8155   0036BC  500E               	movf	(color_read_Red@tmp+1)^0,w,c
  8156   0036BE  100C               	iorwf	(??_color_read_Red+2)^0,w,c
  8157   0036C0  6E0E               	movwf	(color_read_Red@tmp+1)^0,c
  8158                           
  8159                           ;color.c: 39:  I2C_2_Master_Stop();
  8160   0036C2  EC40  F01D         	call	_I2C_2_Master_Stop	;wreg free
  8161   0036C6                     
  8162                           ;color.c: 40:  return tmp;
  8163   0036C6  C00D  F008         	movff	color_read_Red@tmp,?_color_read_Red
  8164   0036CA  C00E  F009         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8165   0036CE  0012               	return		;funcret
  8166   0036D0                     __end_of_color_read_Red:
  8167                           	callstack 0
  8168                           
  8169 ;; *************** function _color_read_Green *****************
  8170 ;; Defined at:
  8171 ;;		line 43 in file "color.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;  tmp             2   12[COMRAM] unsigned int 
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  2    7[COMRAM] unsigned int 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8185 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8187 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8188 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8189 ;;Total ram usage:        7 bytes
  8190 ;; Hardware stack levels used: 1
  8191 ;; Hardware stack levels required when called: 3
  8192 ;; This function calls:
  8193 ;;		_I2C_2_Master_Read
  8194 ;;		_I2C_2_Master_RepStart
  8195 ;;		_I2C_2_Master_Start
  8196 ;;		_I2C_2_Master_Stop
  8197 ;;		_I2C_2_Master_Write
  8198 ;; This function is called by:
  8199 ;;		_collect_avg_readings
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           	psect	text36
  8204   0036D0                     __ptext36:
  8205                           	callstack 0
  8206   0036D0                     _color_read_Green:
  8207                           	callstack 26
  8208   0036D0                     
  8209                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  8210   0036D0  EC45  F01D         	call	_I2C_2_Master_Start	;wreg free
  8211                           
  8212                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  8213   0036D4  0E52               	movlw	82
  8214   0036D6  EC3A  F01D         	call	_I2C_2_Master_Write
  8215                           
  8216                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  8217   0036DA  0EB8               	movlw	184
  8218   0036DC  EC3A  F01D         	call	_I2C_2_Master_Write
  8219                           
  8220                           ;color.c: 49:  I2C_2_Master_RepStart();
  8221   0036E0  EC4A  F01D         	call	_I2C_2_Master_RepStart	;wreg free
  8222                           
  8223                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  8224   0036E4  0E53               	movlw	83
  8225   0036E6  EC3A  F01D         	call	_I2C_2_Master_Write
  8226                           
  8227                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  8228   0036EA  0E01               	movlw	1
  8229   0036EC  EC26  F01C         	call	_I2C_2_Master_Read
  8230   0036F0  6E0A               	movwf	??_color_read_Green^0,c
  8231   0036F2  500A               	movf	??_color_read_Green^0,w,c
  8232   0036F4  6E0D               	movwf	color_read_Green@tmp^0,c
  8233   0036F6  6A0E               	clrf	(color_read_Green@tmp+1)^0,c
  8234                           
  8235                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8236   0036F8  0E00               	movlw	0
  8237   0036FA  EC26  F01C         	call	_I2C_2_Master_Read
  8238   0036FE  6E0A               	movwf	??_color_read_Green^0,c
  8239   003700  500A               	movf	??_color_read_Green^0,w,c
  8240   003702  6E0C               	movwf	(??_color_read_Green+2)^0,c
  8241   003704  6A0B               	clrf	(??_color_read_Green+1)^0,c
  8242   003706  500D               	movf	color_read_Green@tmp^0,w,c
  8243   003708  100B               	iorwf	(??_color_read_Green+1)^0,w,c
  8244   00370A  6E0D               	movwf	color_read_Green@tmp^0,c
  8245   00370C  500E               	movf	(color_read_Green@tmp+1)^0,w,c
  8246   00370E  100C               	iorwf	(??_color_read_Green+2)^0,w,c
  8247   003710  6E0E               	movwf	(color_read_Green@tmp+1)^0,c
  8248                           
  8249                           ;color.c: 53:  I2C_2_Master_Stop();
  8250   003712  EC40  F01D         	call	_I2C_2_Master_Stop	;wreg free
  8251   003716                     
  8252                           ;color.c: 54:  return tmp;
  8253   003716  C00D  F008         	movff	color_read_Green@tmp,?_color_read_Green
  8254   00371A  C00E  F009         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8255   00371E  0012               	return		;funcret
  8256   003720                     __end_of_color_read_Green:
  8257                           	callstack 0
  8258                           
  8259 ;; *************** function _color_read_Clear *****************
  8260 ;; Defined at:
  8261 ;;		line 71 in file "color.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;  tmp             2   12[COMRAM] unsigned int 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  2    7[COMRAM] unsigned int 
  8268 ;; Registers used:
  8269 ;;		wreg, status,2, status,0, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8276 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8277 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8278 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8279 ;;Total ram usage:        7 bytes
  8280 ;; Hardware stack levels used: 1
  8281 ;; Hardware stack levels required when called: 3
  8282 ;; This function calls:
  8283 ;;		_I2C_2_Master_Read
  8284 ;;		_I2C_2_Master_RepStart
  8285 ;;		_I2C_2_Master_Start
  8286 ;;		_I2C_2_Master_Stop
  8287 ;;		_I2C_2_Master_Write
  8288 ;; This function is called by:
  8289 ;;		_main
  8290 ;;		_clear_read_calibration
  8291 ;;		_collect_avg_readings
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text37
  8296   003720                     __ptext37:
  8297                           	callstack 0
  8298   003720                     _color_read_Clear:
  8299                           	callstack 27
  8300   003720                     
  8301                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  8302   003720  EC45  F01D         	call	_I2C_2_Master_Start	;wreg free
  8303                           
  8304                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  8305   003724  0E52               	movlw	82
  8306   003726  EC3A  F01D         	call	_I2C_2_Master_Write
  8307                           
  8308                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  8309   00372A  0EB4               	movlw	180
  8310   00372C  EC3A  F01D         	call	_I2C_2_Master_Write
  8311                           
  8312                           ;color.c: 77:  I2C_2_Master_RepStart();
  8313   003730  EC4A  F01D         	call	_I2C_2_Master_RepStart	;wreg free
  8314                           
  8315                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  8316   003734  0E53               	movlw	83
  8317   003736  EC3A  F01D         	call	_I2C_2_Master_Write
  8318                           
  8319                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  8320   00373A  0E01               	movlw	1
  8321   00373C  EC26  F01C         	call	_I2C_2_Master_Read
  8322   003740  6E0A               	movwf	??_color_read_Clear^0,c
  8323   003742  500A               	movf	??_color_read_Clear^0,w,c
  8324   003744  6E0D               	movwf	color_read_Clear@tmp^0,c
  8325   003746  6A0E               	clrf	(color_read_Clear@tmp+1)^0,c
  8326                           
  8327                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8328   003748  0E00               	movlw	0
  8329   00374A  EC26  F01C         	call	_I2C_2_Master_Read
  8330   00374E  6E0A               	movwf	??_color_read_Clear^0,c
  8331   003750  500A               	movf	??_color_read_Clear^0,w,c
  8332   003752  6E0C               	movwf	(??_color_read_Clear+2)^0,c
  8333   003754  6A0B               	clrf	(??_color_read_Clear+1)^0,c
  8334   003756  500D               	movf	color_read_Clear@tmp^0,w,c
  8335   003758  100B               	iorwf	(??_color_read_Clear+1)^0,w,c
  8336   00375A  6E0D               	movwf	color_read_Clear@tmp^0,c
  8337   00375C  500E               	movf	(color_read_Clear@tmp+1)^0,w,c
  8338   00375E  100C               	iorwf	(??_color_read_Clear+2)^0,w,c
  8339   003760  6E0E               	movwf	(color_read_Clear@tmp+1)^0,c
  8340                           
  8341                           ;color.c: 81:  I2C_2_Master_Stop();
  8342   003762  EC40  F01D         	call	_I2C_2_Master_Stop	;wreg free
  8343   003766                     
  8344                           ;color.c: 82:  return tmp;
  8345   003766  C00D  F008         	movff	color_read_Clear@tmp,?_color_read_Clear
  8346   00376A  C00E  F009         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8347   00376E  0012               	return		;funcret
  8348   003770                     __end_of_color_read_Clear:
  8349                           	callstack 0
  8350                           
  8351 ;; *************** function _color_read_Blue *****************
  8352 ;; Defined at:
  8353 ;;		line 57 in file "color.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;		None
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  tmp             2   12[COMRAM] unsigned int 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  2    7[COMRAM] unsigned int 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8369 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8370 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8371 ;;Total ram usage:        7 bytes
  8372 ;; Hardware stack levels used: 1
  8373 ;; Hardware stack levels required when called: 3
  8374 ;; This function calls:
  8375 ;;		_I2C_2_Master_Read
  8376 ;;		_I2C_2_Master_RepStart
  8377 ;;		_I2C_2_Master_Start
  8378 ;;		_I2C_2_Master_Stop
  8379 ;;		_I2C_2_Master_Write
  8380 ;; This function is called by:
  8381 ;;		_collect_avg_readings
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text38
  8386   003770                     __ptext38:
  8387                           	callstack 0
  8388   003770                     _color_read_Blue:
  8389                           	callstack 26
  8390   003770                     
  8391                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  8392   003770  EC45  F01D         	call	_I2C_2_Master_Start	;wreg free
  8393                           
  8394                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  8395   003774  0E52               	movlw	82
  8396   003776  EC3A  F01D         	call	_I2C_2_Master_Write
  8397                           
  8398                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  8399   00377A  0EBA               	movlw	186
  8400   00377C  EC3A  F01D         	call	_I2C_2_Master_Write
  8401                           
  8402                           ;color.c: 63:  I2C_2_Master_RepStart();
  8403   003780  EC4A  F01D         	call	_I2C_2_Master_RepStart	;wreg free
  8404                           
  8405                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  8406   003784  0E53               	movlw	83
  8407   003786  EC3A  F01D         	call	_I2C_2_Master_Write
  8408                           
  8409                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  8410   00378A  0E01               	movlw	1
  8411   00378C  EC26  F01C         	call	_I2C_2_Master_Read
  8412   003790  6E0A               	movwf	??_color_read_Blue^0,c
  8413   003792  500A               	movf	??_color_read_Blue^0,w,c
  8414   003794  6E0D               	movwf	color_read_Blue@tmp^0,c
  8415   003796  6A0E               	clrf	(color_read_Blue@tmp+1)^0,c
  8416                           
  8417                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8418   003798  0E00               	movlw	0
  8419   00379A  EC26  F01C         	call	_I2C_2_Master_Read
  8420   00379E  6E0A               	movwf	??_color_read_Blue^0,c
  8421   0037A0  500A               	movf	??_color_read_Blue^0,w,c
  8422   0037A2  6E0C               	movwf	(??_color_read_Blue+2)^0,c
  8423   0037A4  6A0B               	clrf	(??_color_read_Blue+1)^0,c
  8424   0037A6  500D               	movf	color_read_Blue@tmp^0,w,c
  8425   0037A8  100B               	iorwf	(??_color_read_Blue+1)^0,w,c
  8426   0037AA  6E0D               	movwf	color_read_Blue@tmp^0,c
  8427   0037AC  500E               	movf	(color_read_Blue@tmp+1)^0,w,c
  8428   0037AE  100C               	iorwf	(??_color_read_Blue+2)^0,w,c
  8429   0037B0  6E0E               	movwf	(color_read_Blue@tmp+1)^0,c
  8430                           
  8431                           ;color.c: 67:  I2C_2_Master_Stop();
  8432   0037B2  EC40  F01D         	call	_I2C_2_Master_Stop	;wreg free
  8433   0037B6                     
  8434                           ;color.c: 68:  return tmp;
  8435   0037B6  C00D  F008         	movff	color_read_Blue@tmp,?_color_read_Blue
  8436   0037BA  C00E  F009         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8437   0037BE  0012               	return		;funcret
  8438   0037C0                     __end_of_color_read_Blue:
  8439                           	callstack 0
  8440                           
  8441 ;; *************** function _I2C_2_Master_Write *****************
  8442 ;; Defined at:
  8443 ;;		line 45 in file "i2c.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  data_byte       1    wreg     unsigned char 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;  data_byte       1    4[COMRAM] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8461 ;;Total ram usage:        1 bytes
  8462 ;; Hardware stack levels used: 1
  8463 ;; Hardware stack levels required when called: 2
  8464 ;; This function calls:
  8465 ;;		_I2C_2_Master_Idle
  8466 ;; This function is called by:
  8467 ;;		_color_writetoaddr
  8468 ;;		_color_read_Red
  8469 ;;		_color_read_Green
  8470 ;;		_color_read_Blue
  8471 ;;		_color_read_Clear
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           	psect	text39
  8476   003A74                     __ptext39:
  8477                           	callstack 0
  8478   003A74                     _I2C_2_Master_Write:
  8479                           	callstack 27
  8480                           
  8481                           ;incstack = 0
  8482                           ;I2C_2_Master_Write@data_byte stored from wreg
  8483   003A74  6E05               	movwf	I2C_2_Master_Write@data_byte^0,c
  8484   003A76                     
  8485                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8486   003A76  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8487   003A7A                     
  8488                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8489   003A7A  C005  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8490   003A7E  0012               	return		;funcret
  8491   003A80                     __end_of_I2C_2_Master_Write:
  8492                           	callstack 0
  8493                           
  8494 ;; *************** function _I2C_2_Master_Stop *****************
  8495 ;; Defined at:
  8496 ;;		line 39 in file "i2c.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used: 1
  8516 ;; Hardware stack levels required when called: 2
  8517 ;; This function calls:
  8518 ;;		_I2C_2_Master_Idle
  8519 ;; This function is called by:
  8520 ;;		_color_writetoaddr
  8521 ;;		_color_read_Red
  8522 ;;		_color_read_Green
  8523 ;;		_color_read_Blue
  8524 ;;		_color_read_Clear
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text40
  8529   003A80                     __ptext40:
  8530                           	callstack 0
  8531   003A80                     _I2C_2_Master_Stop:
  8532                           	callstack 27
  8533   003A80                     
  8534                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8535   003A80  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8536   003A84                     
  8537                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8538   003A84  010E               	movlb	14	; () banked
  8539   003A86  85DA               	bsf	218,2,b	;volatile
  8540   003A88                     
  8541                           ; BSR set to: 14
  8542   003A88  0012               	return		;funcret
  8543   003A8A                     __end_of_I2C_2_Master_Stop:
  8544                           	callstack 0
  8545                           
  8546 ;; *************** function _I2C_2_Master_Start *****************
  8547 ;; Defined at:
  8548 ;;		line 27 in file "i2c.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;		None
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;		None
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      void 
  8555 ;; Registers used:
  8556 ;;		wreg, status,2, status,0, cstack
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8566 ;;Total ram usage:        0 bytes
  8567 ;; Hardware stack levels used: 1
  8568 ;; Hardware stack levels required when called: 2
  8569 ;; This function calls:
  8570 ;;		_I2C_2_Master_Idle
  8571 ;; This function is called by:
  8572 ;;		_color_writetoaddr
  8573 ;;		_color_read_Red
  8574 ;;		_color_read_Green
  8575 ;;		_color_read_Blue
  8576 ;;		_color_read_Clear
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           	psect	text41
  8581   003A8A                     __ptext41:
  8582                           	callstack 0
  8583   003A8A                     _I2C_2_Master_Start:
  8584                           	callstack 27
  8585   003A8A                     
  8586                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8587   003A8A  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8588   003A8E                     
  8589                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8590   003A8E  010E               	movlb	14	; () banked
  8591   003A90  81DA               	bsf	218,0,b	;volatile
  8592   003A92                     
  8593                           ; BSR set to: 14
  8594   003A92  0012               	return		;funcret
  8595   003A94                     __end_of_I2C_2_Master_Start:
  8596                           	callstack 0
  8597                           
  8598 ;; *************** function _I2C_2_Master_RepStart *****************
  8599 ;; Defined at:
  8600 ;;		line 33 in file "i2c.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      void 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0, cstack
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used: 1
  8620 ;; Hardware stack levels required when called: 2
  8621 ;; This function calls:
  8622 ;;		_I2C_2_Master_Idle
  8623 ;; This function is called by:
  8624 ;;		_color_read_Red
  8625 ;;		_color_read_Green
  8626 ;;		_color_read_Blue
  8627 ;;		_color_read_Clear
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           	psect	text42
  8632   003A94                     __ptext42:
  8633                           	callstack 0
  8634   003A94                     _I2C_2_Master_RepStart:
  8635                           	callstack 27
  8636   003A94                     
  8637                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8638   003A94  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8639   003A98                     
  8640                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8641   003A98  010E               	movlb	14	; () banked
  8642   003A9A  83DA               	bsf	218,1,b	;volatile
  8643   003A9C                     
  8644                           ; BSR set to: 14
  8645   003A9C  0012               	return		;funcret
  8646   003A9E                     __end_of_I2C_2_Master_RepStart:
  8647                           	callstack 0
  8648                           
  8649 ;; *************** function _I2C_2_Master_Read *****************
  8650 ;; Defined at:
  8651 ;;		line 51 in file "i2c.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  ack             1    wreg     unsigned char 
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  ack             1    5[COMRAM] unsigned char 
  8656 ;;  tmp             1    6[COMRAM] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      unsigned char 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8669 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8670 ;;Total ram usage:        3 bytes
  8671 ;; Hardware stack levels used: 1
  8672 ;; Hardware stack levels required when called: 2
  8673 ;; This function calls:
  8674 ;;		_I2C_2_Master_Idle
  8675 ;; This function is called by:
  8676 ;;		_color_read_Red
  8677 ;;		_color_read_Green
  8678 ;;		_color_read_Blue
  8679 ;;		_color_read_Clear
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text43
  8684   00384C                     __ptext43:
  8685                           	callstack 0
  8686   00384C                     _I2C_2_Master_Read:
  8687                           	callstack 27
  8688                           
  8689                           ; BSR set to: 14
  8690                           ;incstack = 0
  8691                           ;I2C_2_Master_Read@ack stored from wreg
  8692   00384C  6E06               	movwf	I2C_2_Master_Read@ack^0,c
  8693   00384E                     
  8694                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8695   00384E  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8696   003852                     
  8697                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8698   003852  010E               	movlb	14	; () banked
  8699   003854  87DA               	bsf	218,3,b	;volatile
  8700                           
  8701                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8702   003856  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8703   00385A                     
  8704                           ;i2c.c: 57:   tmp = SSP2BUF;
  8705   00385A  CED5 F007          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8706                           
  8707                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8708   00385E  ECD8  F01C         	call	_I2C_2_Master_Idle	;wreg free
  8709   003862                     
  8710                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8711   003862  5006               	movf	I2C_2_Master_Read@ack^0,w,c
  8712   003864  B4D8               	btfsc	status,2,c
  8713   003866  EF37  F01C         	goto	u2201
  8714   00386A  EF3B  F01C         	goto	u2200
  8715   00386E                     u2201:
  8716   00386E  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8717   003870  2A05               	incf	??_I2C_2_Master_Read^0,f,c
  8718   003872  EF3C  F01C         	goto	u2218
  8719   003876                     u2200:
  8720   003876  6A05               	clrf	??_I2C_2_Master_Read^0,c
  8721   003878                     u2218:
  8722   003878  3A05               	swapf	??_I2C_2_Master_Read^0,f,c
  8723   00387A  4605               	rlncf	??_I2C_2_Master_Read^0,f,c
  8724   00387C  010E               	movlb	14	; () banked
  8725   00387E  51DA               	movf	218,w,b	;volatile
  8726   003880  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8727   003882  0BDF               	andlw	-33
  8728   003884  1805               	xorwf	??_I2C_2_Master_Read^0,w,c
  8729   003886  6FDA               	movwf	218,b	;volatile
  8730   003888                     
  8731                           ; BSR set to: 14
  8732                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8733   003888  89DA               	bsf	218,4,b	;volatile
  8734   00388A                     
  8735                           ; BSR set to: 14
  8736                           ;i2c.c: 61:   return tmp;
  8737   00388A  5007               	movf	I2C_2_Master_Read@tmp^0,w,c
  8738   00388C                     
  8739                           ; BSR set to: 14
  8740   00388C  0012               	return		;funcret
  8741   00388E                     __end_of_I2C_2_Master_Read:
  8742                           	callstack 0
  8743                           
  8744 ;; *************** function _I2C_2_Master_Idle *****************
  8745 ;; Defined at:
  8746 ;;		line 22 in file "i2c.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;		None
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;		None
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, status,2, status,0
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8764 ;;Total ram usage:        1 bytes
  8765 ;; Hardware stack levels used: 1
  8766 ;; Hardware stack levels required when called: 1
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		_I2C_2_Master_Start
  8771 ;;		_I2C_2_Master_RepStart
  8772 ;;		_I2C_2_Master_Stop
  8773 ;;		_I2C_2_Master_Write
  8774 ;;		_I2C_2_Master_Read
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text44
  8779   0039B0                     __ptext44:
  8780                           	callstack 0
  8781   0039B0                     _I2C_2_Master_Idle:
  8782                           	callstack 27
  8783   0039B0                     l145:
  8784   0039B0  010E               	movlb	14	; () banked
  8785   0039B2  B5D8               	btfsc	216,2,b	;volatile
  8786   0039B4  EFDE  F01C         	goto	u2151
  8787   0039B8  EFE0  F01C         	goto	u2150
  8788   0039BC                     u2151:
  8789   0039BC  EFD8  F01C         	goto	l145
  8790   0039C0                     u2150:
  8791   0039C0                     
  8792                           ; BSR set to: 14
  8793   0039C0  CEDA F004          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8794   0039C4  0E1F               	movlw	31
  8795   0039C6  1604               	andwf	??_I2C_2_Master_Idle^0,f,c
  8796   0039C8  A4D8               	btfss	status,2,c
  8797   0039CA  EFE9  F01C         	goto	u2161
  8798   0039CE  EFEB  F01C         	goto	u2160
  8799   0039D2                     u2161:
  8800   0039D2  EFD8  F01C         	goto	l145
  8801   0039D6                     u2160:
  8802   0039D6                     
  8803                           ; BSR set to: 14
  8804   0039D6  0012               	return		;funcret
  8805   0039D8                     __end_of_I2C_2_Master_Idle:
  8806                           	callstack 0
  8807                           
  8808 ;; *************** function ___lwmod *****************
  8809 ;; Defined at:
  8810 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  dividend        2    3[COMRAM] unsigned int 
  8813 ;;  divisor         2    5[COMRAM] unsigned int 
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  counter         1    7[COMRAM] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  2    3[COMRAM] unsigned int 
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8828 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8829 ;;Total ram usage:        5 bytes
  8830 ;; Hardware stack levels used: 1
  8831 ;; Hardware stack levels required when called: 1
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_main
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text45
  8840   003576                     __ptext45:
  8841                           	callstack 0
  8842   003576                     ___lwmod:
  8843                           	callstack 29
  8844   003576  5006               	movf	___lwmod@divisor^0,w,c
  8845   003578  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  8846   00357A  B4D8               	btfsc	status,2,c
  8847   00357C  EFC2  F01A         	goto	u2461
  8848   003580  EFC4  F01A         	goto	u2460
  8849   003584                     u2461:
  8850   003584  EFE8  F01A         	goto	l1042
  8851   003588                     u2460:
  8852   003588  0E01               	movlw	1
  8853   00358A  6E08               	movwf	___lwmod@counter^0,c
  8854   00358C  EFCC  F01A         	goto	l4825
  8855   003590                     l4823:
  8856   003590  90D8               	bcf	status,0,c
  8857   003592  3606               	rlcf	___lwmod@divisor^0,f,c
  8858   003594  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  8859   003596  2A08               	incf	___lwmod@counter^0,f,c
  8860   003598                     l4825:
  8861   003598  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  8862   00359A  EFD1  F01A         	goto	u2471
  8863   00359E  EFD3  F01A         	goto	u2470
  8864   0035A2                     u2471:
  8865   0035A2  EFC8  F01A         	goto	l4823
  8866   0035A6                     u2470:
  8867   0035A6                     l4827:
  8868   0035A6  5006               	movf	___lwmod@divisor^0,w,c
  8869   0035A8  5C04               	subwf	___lwmod@dividend^0,w,c
  8870   0035AA  5007               	movf	(___lwmod@divisor+1)^0,w,c
  8871   0035AC  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  8872   0035AE  A0D8               	btfss	status,0,c
  8873   0035B0  EFDC  F01A         	goto	u2481
  8874   0035B4  EFDE  F01A         	goto	u2480
  8875   0035B8                     u2481:
  8876   0035B8  EFE2  F01A         	goto	l4831
  8877   0035BC                     u2480:
  8878   0035BC  5006               	movf	___lwmod@divisor^0,w,c
  8879   0035BE  5E04               	subwf	___lwmod@dividend^0,f,c
  8880   0035C0  5007               	movf	(___lwmod@divisor+1)^0,w,c
  8881   0035C2  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  8882   0035C4                     l4831:
  8883   0035C4  90D8               	bcf	status,0,c
  8884   0035C6  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  8885   0035C8  3206               	rrcf	___lwmod@divisor^0,f,c
  8886   0035CA  2E08               	decfsz	___lwmod@counter^0,f,c
  8887   0035CC  EFD3  F01A         	goto	l4827
  8888   0035D0                     l1042:
  8889   0035D0  C004  F004         	movff	___lwmod@dividend,?___lwmod
  8890   0035D4  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  8891   0035D8  0012               	return		;funcret
  8892   0035DA                     __end_of___lwmod:
  8893                           	callstack 0
  8894                           
  8895 ;; *************** function _LEDSon_init *****************
  8896 ;; Defined at:
  8897 ;;		line 18 in file "LEDsOn.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      void 
  8904 ;; Registers used:
  8905 ;;		None
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8915 ;;Total ram usage:        0 bytes
  8916 ;; Hardware stack levels used: 1
  8917 ;; Hardware stack levels required when called: 1
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_main
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text46
  8926   00395C                     __ptext46:
  8927                           	callstack 0
  8928   00395C                     _LEDSon_init:
  8929                           	callstack 29
  8930   00395C                     
  8931                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  8932   00395C  9288               	bcf	136,1,c	;volatile
  8933                           
  8934                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  8935   00395E  9088               	bcf	136,0,c	;volatile
  8936                           
  8937                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  8938   003960  9884               	bcf	132,4,c	;volatile
  8939                           
  8940                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  8941   003962  9684               	bcf	132,3,c	;volatile
  8942                           
  8943                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  8944   003964  9086               	bcf	134,0,c	;volatile
  8945                           
  8946                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  8947   003966  9287               	bcf	135,1,c	;volatile
  8948                           
  8949                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  8950   003968  9E86               	bcf	134,7,c	;volatile
  8951                           
  8952                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  8953   00396A  9881               	bcf	129,4,c	;volatile
  8954                           
  8955                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  8956   00396C  8E7E               	bsf	126,7,c	;volatile
  8957                           
  8958                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  8959   00396E  827F               	bsf	127,1,c	;volatile
  8960                           
  8961                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  8962   003970  8879               	bsf	121,4,c	;volatile
  8963                           
  8964                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  8965   003972  987C               	bcf	124,4,c	;volatile
  8966                           
  8967                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  8968   003974  9280               	bcf	128,1,c	;volatile
  8969                           
  8970                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  8971   003976  907E               	bcf	126,0,c	;volatile
  8972                           
  8973                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  8974   003978  9080               	bcf	128,0,c	;volatile
  8975                           
  8976                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  8977   00397A  967C               	bcf	124,3,c	;volatile
  8978                           
  8979                           ;LEDsOn.c: 44:     TRISHbits.TRISH3 = 0;
  8980   00397C  9688               	bcf	136,3,c	;volatile
  8981                           
  8982                           ;LEDsOn.c: 45:     LATHbits.LATH3=0;
  8983   00397E  9680               	bcf	128,3,c	;volatile
  8984                           
  8985                           ;LEDsOn.c: 46:     TRISDbits.TRISD7 = 0;
  8986   003980  9E84               	bcf	132,7,c	;volatile
  8987                           
  8988                           ;LEDsOn.c: 47:     LATDbits.LATD7=0;
  8989   003982  9E7C               	bcf	124,7,c	;volatile
  8990   003984  0012               	return		;funcret
  8991   003986                     __end_of_LEDSon_init:
  8992                           	callstack 0
  8993                           
  8994 ;; *************** function _Interrupts_init *****************
  8995 ;; Defined at:
  8996 ;;		line 7 in file "interrupts.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;		None
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;		None
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, status,2
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9014 ;;Total ram usage:        0 bytes
  9015 ;; Hardware stack levels used: 1
  9016 ;; Hardware stack levels required when called: 1
  9017 ;; This function calls:
  9018 ;;		Nothing
  9019 ;; This function is called by:
  9020 ;;		_main
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           	psect	text47
  9025   003986                     __ptext47:
  9026                           	callstack 0
  9027   003986                     _Interrupts_init:
  9028                           	callstack 29
  9029   003986                     
  9030                           ;interrupts.c: 10:     TMR0IE=1;
  9031   003986  010E               	movlb	14	; () banked
  9032   003988  8B29               	bsf	41,5,b	;volatile
  9033   00398A                     
  9034                           ; BSR set to: 14
  9035                           ;interrupts.c: 11:     T0CON1bits.T0CS=0b010;
  9036   00398A  50D6               	movf	214,w,c	;volatile
  9037   00398C  0B1F               	andlw	-225
  9038   00398E  0940               	iorlw	64
  9039   003990  6ED6               	movwf	214,c	;volatile
  9040   003992                     
  9041                           ; BSR set to: 14
  9042                           ;interrupts.c: 12:     T0CON1bits.T0ASYNC=1;
  9043   003992  88D6               	bsf	214,4,c	;volatile
  9044                           
  9045                           ;interrupts.c: 13:     T0CON1bits.T0CKPS=0b0101;
  9046   003994  50D6               	movf	214,w,c	;volatile
  9047   003996  0BF0               	andlw	-16
  9048   003998  0905               	iorlw	5
  9049   00399A  6ED6               	movwf	214,c	;volatile
  9050   00399C                     
  9051                           ; BSR set to: 14
  9052                           ;interrupts.c: 14:     T0CON0bits.T016BIT=1;
  9053   00399C  88D5               	bsf	213,4,c	;volatile
  9054   00399E                     
  9055                           ; BSR set to: 14
  9056                           ;interrupts.c: 15:     IPR0bits.TMR0IP = 0;
  9057   00399E  9B1F               	bcf	31,5,b	;volatile
  9058                           
  9059                           ;interrupts.c: 16:     TMR0H=0b00111100;
  9060   0039A0  0E3C               	movlw	60
  9061   0039A2  6ED4               	movwf	212,c	;volatile
  9062                           
  9063                           ;interrupts.c: 17:     TMR0L=0b10101111;
  9064   0039A4  0EAF               	movlw	175
  9065   0039A6  6ED3               	movwf	211,c	;volatile
  9066   0039A8                     
  9067                           ; BSR set to: 14
  9068                           ;interrupts.c: 18:     T0CON0bits.T0EN=1;
  9069   0039A8  8ED5               	bsf	213,7,c	;volatile
  9070   0039AA                     
  9071                           ; BSR set to: 14
  9072                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  9073   0039AA  8CF2               	bsf	242,6,c	;volatile
  9074   0039AC                     
  9075                           ; BSR set to: 14
  9076                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  9077   0039AC  8EF2               	bsf	242,7,c	;volatile
  9078   0039AE                     
  9079                           ; BSR set to: 14
  9080   0039AE  0012               	return		;funcret
  9081   0039B0                     __end_of_Interrupts_init:
  9082                           	callstack 0
  9083                           
  9084 ;; *************** function _LowISR *****************
  9085 ;; Defined at:
  9086 ;;		line 24 in file "interrupts.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      void 
  9093 ;; Registers used:
  9094 ;;		wreg, status,2
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9102 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9103 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9104 ;;Total ram usage:        3 bytes
  9105 ;; Hardware stack levels used: 1
  9106 ;; This function calls:
  9107 ;;		Nothing
  9108 ;; This function is called by:
  9109 ;;		Interrupt level 1
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	intcodelo
  9114   000018                     __pintcodelo:
  9115                           	callstack 0
  9116   000018                     _LowISR:
  9117                           	callstack 20
  9118                           
  9119                           ; BSR set to: 14
  9120                           ;incstack = 0
  9121   000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  9122   00001A  CFD8 F001          	movff	status,??_LowISR
  9123   00001E  CFE8 F002          	movff	wreg,??_LowISR+1
  9124   000022  CFE0 F003          	movff	bsr,??_LowISR+2
  9125   000026                     
  9126                           ;interrupts.c: 27:     if(TMR0IF){
  9127   000026  010E               	movlb	14	; () banked
  9128   000028  AB33               	btfss	51,5,b	;volatile
  9129   00002A  EF19  F000         	goto	i1u178_21
  9130   00002E  EF1B  F000         	goto	i1u178_20
  9131   000032                     i1u178_21:
  9132   000032  EF26  F000         	goto	i1l538
  9133   000036                     i1u178_20:
  9134   000036                     
  9135                           ; BSR set to: 14
  9136                           ;interrupts.c: 28:     TMR0H=0b00111100;
  9137   000036  0E3C               	movlw	60
  9138   000038  6ED4               	movwf	212,c	;volatile
  9139                           
  9140                           ;interrupts.c: 29:     TMR0L=0b10101111;
  9141   00003A  0EAF               	movlw	175
  9142   00003C  6ED3               	movwf	211,c	;volatile
  9143                           
  9144                           ;interrupts.c: 34:         TimerFlag=1;
  9145   00003E  0E00               	movlw	0
  9146   000040  0102               	movlb	2	; () banked
  9147   000042  6F59               	movwf	(_TimerFlag+1)& (0+255),b
  9148   000044  0E01               	movlw	1
  9149   000046  6F58               	movwf	_TimerFlag& (0+255),b
  9150   000048                     
  9151                           ; BSR set to: 2
  9152                           ;interrupts.c: 36:        TMR0IF=0;
  9153   000048  010E               	movlb	14	; () banked
  9154   00004A  9B33               	bcf	51,5,b	;volatile
  9155   00004C                     i1l538:
  9156                           
  9157                           ; BSR set to: 14
  9158   00004C  C003  FFE0         	movff	??_LowISR+2,bsr
  9159   000050  C002  FFE8         	movff	??_LowISR+1,wreg
  9160   000054  C001  FFD8         	movff	??_LowISR,status
  9161   000058  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  9162   00005A  0010               	retfie	
  9163   00005C                     __end_of_LowISR:
  9164                           	callstack 0
  9165                           
  9166                           	psect	rparam
  9167   000000                     
  9168                           	psect	temp
  9169   00005B                     btemp:
  9170                           	callstack 0
  9171   00005B                     	ds	1
  9172   000000                     int$flags	set	btemp
  9173   000000                     wtemp8	set	btemp+1
  9174   000000                     ttemp5	set	btemp+1
  9175   000000                     ttemp6	set	btemp+4
  9176   000000                     ttemp7	set	btemp+8
  9177                           
  9178                           	psect	idloc
  9179                           
  9180                           ;Config register IDLOC0 @ 0x200000
  9181                           ;	unspecified, using default values
  9182   200000                     	org	2097152
  9183   200000  0FFF               	dw	4095
  9184                           
  9185                           ;Config register IDLOC1 @ 0x200002
  9186                           ;	unspecified, using default values
  9187   200002                     	org	2097154
  9188   200002  0FFF               	dw	4095
  9189                           
  9190                           ;Config register IDLOC2 @ 0x200004
  9191                           ;	unspecified, using default values
  9192   200004                     	org	2097156
  9193   200004  0FFF               	dw	4095
  9194                           
  9195                           ;Config register IDLOC3 @ 0x200006
  9196                           ;	unspecified, using default values
  9197   200006                     	org	2097158
  9198   200006  0FFF               	dw	4095
  9199                           
  9200                           ;Config register IDLOC4 @ 0x200008
  9201                           ;	unspecified, using default values
  9202   200008                     	org	2097160
  9203   200008  0FFF               	dw	4095
  9204                           
  9205                           ;Config register IDLOC5 @ 0x20000A
  9206                           ;	unspecified, using default values
  9207   20000A                     	org	2097162
  9208   20000A  0FFF               	dw	4095
  9209                           
  9210                           ;Config register IDLOC6 @ 0x20000C
  9211                           ;	unspecified, using default values
  9212   20000C                     	org	2097164
  9213   20000C  0FFF               	dw	4095
  9214                           
  9215                           ;Config register IDLOC7 @ 0x20000E
  9216                           ;	unspecified, using default values
  9217   20000E                     	org	2097166
  9218   20000E  0FFF               	dw	4095
  9219                           
  9220                           	psect	config
  9221                           
  9222                           ;Config register CONFIG1L @ 0x300000
  9223                           ;	External Oscillator mode Selection bits
  9224                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9225                           ;	Power-up default value for COSC bits
  9226                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9227   300000                     	org	3145728
  9228   300000  AA                 	db	170
  9229                           
  9230                           ;Config register CONFIG1H @ 0x300001
  9231                           ;	unspecified, using default values
  9232                           ;	Clock Out Enable bit
  9233                           ;	CLKOUTEN = 0x1, unprogrammed default
  9234                           ;	Clock Switch Enable bit
  9235                           ;	CSWEN = 0x1, unprogrammed default
  9236                           ;	Fail-Safe Clock Monitor Enable bit
  9237                           ;	FCMEN = 0x1, unprogrammed default
  9238   300001                     	org	3145729
  9239   300001  FF                 	db	255
  9240                           
  9241                           ;Config register CONFIG2L @ 0x300002
  9242                           ;	unspecified, using default values
  9243                           ;	Master Clear Enable bit
  9244                           ;	MCLRE = 0x1, unprogrammed default
  9245                           ;	Power-up Timer Enable bit
  9246                           ;	PWRTE = 0x1, unprogrammed default
  9247                           ;	Low-power BOR enable bit
  9248                           ;	LPBOREN = 0x1, unprogrammed default
  9249                           ;	Brown-out Reset Enable bits
  9250                           ;	BOREN = 0x3, unprogrammed default
  9251   300002                     	org	3145730
  9252   300002  FF                 	db	255
  9253                           
  9254                           ;Config register CONFIG2H @ 0x300003
  9255                           ;	unspecified, using default values
  9256                           ;	Brown Out Reset Voltage selection bits
  9257                           ;	BORV = 0x3, unprogrammed default
  9258                           ;	ZCD Disable bit
  9259                           ;	ZCD = 0x1, unprogrammed default
  9260                           ;	PPSLOCK bit One-Way Set Enable bit
  9261                           ;	PPS1WAY = 0x1, unprogrammed default
  9262                           ;	Stack Full/Underflow Reset Enable bit
  9263                           ;	STVREN = 0x1, unprogrammed default
  9264                           ;	Debugger Enable bit
  9265                           ;	DEBUG = 0x1, unprogrammed default
  9266                           ;	Extended Instruction Set Enable bit
  9267                           ;	XINST = 0x1, unprogrammed default
  9268   300003                     	org	3145731
  9269   300003  FF                 	db	255
  9270                           
  9271                           ;Config register CONFIG3L @ 0x300004
  9272                           ;	WDT Period Select bits
  9273                           ;	WDTCPS = 0x1F, unprogrammed default
  9274                           ;	WDT operating mode
  9275                           ;	WDTE = OFF, WDT Disabled
  9276   300004                     	org	3145732
  9277   300004  9F                 	db	159
  9278                           
  9279                           ;Config register CONFIG3H @ 0x300005
  9280                           ;	unspecified, using default values
  9281                           ;	WDT Window Select bits
  9282                           ;	WDTCWS = 0x7, unprogrammed default
  9283                           ;	WDT input clock selector
  9284                           ;	WDTCCS = 0x7, unprogrammed default
  9285   300005                     	org	3145733
  9286   300005  FF                 	db	255
  9287                           
  9288                           ;Config register CONFIG4L @ 0x300006
  9289                           ;	unspecified, using default values
  9290                           ;	Write Protection Block 0
  9291                           ;	WRT0 = 0x1, unprogrammed default
  9292                           ;	Write Protection Block 1
  9293                           ;	WRT1 = 0x1, unprogrammed default
  9294                           ;	Write Protection Block 2
  9295                           ;	WRT2 = 0x1, unprogrammed default
  9296                           ;	Write Protection Block 3
  9297                           ;	WRT3 = 0x1, unprogrammed default
  9298                           ;	Write Protection Block 3
  9299                           ;	WRT4 = 0x1, unprogrammed default
  9300                           ;	Write Protection Block 3
  9301                           ;	WRT5 = 0x1, unprogrammed default
  9302                           ;	Write Protection Block 3
  9303                           ;	WRT6 = 0x1, unprogrammed default
  9304                           ;	Write Protection Block 3
  9305                           ;	WRT7 = 0x1, unprogrammed default
  9306   300006                     	org	3145734
  9307   300006  FF                 	db	255
  9308                           
  9309                           ;Config register CONFIG4H @ 0x300007
  9310                           ;	unspecified, using default values
  9311                           ;	Configuration Register Write Protection bit
  9312                           ;	WRTC = 0x1, unprogrammed default
  9313                           ;	Boot Block Write Protection bit
  9314                           ;	WRTB = 0x1, unprogrammed default
  9315                           ;	Data EEPROM Write Protection bit
  9316                           ;	WRTD = 0x1, unprogrammed default
  9317                           ;	Scanner Enable bit
  9318                           ;	SCANE = 0x1, unprogrammed default
  9319                           ;	Low Voltage Programming Enable bit
  9320                           ;	LVP = 0x1, unprogrammed default
  9321   300007                     	org	3145735
  9322   300007  FF                 	db	255
  9323                           
  9324                           ;Config register CONFIG5L @ 0x300008
  9325                           ;	unspecified, using default values
  9326                           ;	UserNVM Program Memory Code Protection bit
  9327                           ;	CP = 0x1, unprogrammed default
  9328                           ;	DataNVM Memory Code Protection bit
  9329                           ;	CPD = 0x1, unprogrammed default
  9330   300008                     	org	3145736
  9331   300008  FF                 	db	255
  9332                           
  9333                           ;Config register CONFIG5H @ 0x300009
  9334                           ;	unspecified, using default values
  9335   300009                     	org	3145737
  9336   300009  FF                 	db	255
  9337                           
  9338                           ;Config register CONFIG6L @ 0x30000A
  9339                           ;	unspecified, using default values
  9340                           ;	Table Read Protection Block 0
  9341                           ;	EBTR0 = 0x1, unprogrammed default
  9342                           ;	Table Read Protection Block 1
  9343                           ;	EBTR1 = 0x1, unprogrammed default
  9344                           ;	Table Read Protection Block 2
  9345                           ;	EBTR2 = 0x1, unprogrammed default
  9346                           ;	Table Read Protection Block 3
  9347                           ;	EBTR3 = 0x1, unprogrammed default
  9348                           ;	Table Read Protection Block 4
  9349                           ;	EBTR4 = 0x1, unprogrammed default
  9350                           ;	Table Read Protection Block 5
  9351                           ;	EBTR5 = 0x1, unprogrammed default
  9352                           ;	Table Read Protection Block 6
  9353                           ;	EBTR6 = 0x1, unprogrammed default
  9354                           ;	Table Read Protection Block 7
  9355                           ;	EBTR7 = 0x1, unprogrammed default
  9356   30000A                     	org	3145738
  9357   30000A  FF                 	db	255
  9358                           
  9359                           ;Config register CONFIG6H @ 0x30000B
  9360                           ;	unspecified, using default values
  9361                           ;	Boot Block Table Read Protection bit
  9362                           ;	EBTRB = 0x1, unprogrammed default
  9363   30000B                     	org	3145739
  9364   30000B  FF                 	db	255
  9365                           tosu	equ	0xFFF
  9366                           tosh	equ	0xFFE
  9367                           tosl	equ	0xFFD
  9368                           stkptr	equ	0xFFC
  9369                           pclatu	equ	0xFFB
  9370                           pclath	equ	0xFFA
  9371                           pcl	equ	0xFF9
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           indf0	equ	0xFEF
  9379                           postinc0	equ	0xFEE
  9380                           postdec0	equ	0xFED
  9381                           preinc0	equ	0xFEC
  9382                           plusw0	equ	0xFEB
  9383                           fsr0h	equ	0xFEA
  9384                           fsr0l	equ	0xFE9
  9385                           wreg	equ	0xFE8
  9386                           indf1	equ	0xFE7
  9387                           postinc1	equ	0xFE6
  9388                           postdec1	equ	0xFE5
  9389                           preinc1	equ	0xFE4
  9390                           plusw1	equ	0xFE3
  9391                           fsr1h	equ	0xFE2
  9392                           fsr1l	equ	0xFE1
  9393                           bsr	equ	0xFE0
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           postdec2	equ	0xFDD
  9397                           preinc2	equ	0xFDC
  9398                           plusw2	equ	0xFDB
  9399                           fsr2h	equ	0xFDA
  9400                           fsr2l	equ	0xFD9
  9401                           status	equ	0xFD8

Data Sizes:
    Strings     251
    Constant    0
    Data        30
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      90
    BANK0           160     74      74
    BANK1           256    256     256
    BANK2           256     99     253
    BANK3           256     81     141
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[23]), 
		 -> STR_5(CODE[10]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[23]), 
		 -> STR_5(CODE[10]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[23]), 
		 -> STR_5(CODE[10]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2566$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_13(CODE[10]), STR_12(CODE[36]), STR_11(CODE[10]), STR_10(CODE[36]), 
		 -> STR_9(CODE[27]), STR_8(CODE[25]), STR_7(CODE[25]), STR_6(CODE[23]), 
		 -> STR_5(CODE[10]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[23]), 
		 -> STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2517$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2517$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    card_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK3[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    home_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    home_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    motor_response@ReturnHomeCards	PTR enum E14551 size(2) Largest target is 30
		 -> main@ReturnHomeCards(BANK2[30]), 

    motor_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    motor_response@ReturnHomeTimes	PTR unsigned int  size(2) Largest target is 60
		 -> main@ReturnHomeTimes(BANK2[60]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK1[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK1[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK3[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhlllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhlllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK3[9]), main@motorL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _card_response->_motor_response
    _normalise_readings->_abs
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _reverseFullSpeed->_setMotorPWM
    _home_response->_turnLeft45
    _home_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_motor_response
    _motor_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_card_response

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               389   389      0  181060
                                             71 BANK0      3     3      0
                                             90 BANK1    166   166      0
                                              0 BANK2     99    99      0
                                              0 BANK3     81    81      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                            ___lwmod
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              7 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              5 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6   11951
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      111    90     21  120919
                                             50 BANK0     21     0     21
                                              0 BANK1     90    90      0
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    5028
                                             25 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _motor_response                                      19     8     11   98783
                                             85 COMRAM     2     2      0
                                             33 BANK0     17     6     11
                     _fullSpeedAhead
                      _home_response
                   _reverseFullSpeed
                  _sendStringSerial4
                            _sprintf
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    9836
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             65 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             30 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2    1266
                                              4 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    6577
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _home_response                                        7     3      4   39371
                                             30 COMRAM     7     3      4
                     _fullSpeedAhead
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    9097
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    7657
                                             22 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4   14907
                                             22 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    4957
                                             22 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3741
                                             16 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1192
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     961
                                              9 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     918
                                              3 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     508
                                              3 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    2572
                                             14 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                              7 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      31
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      65
                                              4 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     412
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LowISR                                              3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LEDSon_init
   ___lwmod
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _fullSpeedAhead
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _home_response
         _fullSpeedAhead
         _stop
           _setMotorPWM
         _turnLeft45
           _setMotorPWM
         _turnRight45
           _setMotorPWM
       _reverseFullSpeed
         _setMotorPWM
       _sendStringSerial4
         _sendCharSerial4
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
             _fputc
       _stop
       _turnLeft45
       _turnRight45
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
     _sendStringSerial4
     _sprintf
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _fullSpeedAhead
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     51      8D      11       55.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100     63      FD       9       98.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4A      4A       5       46.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      43        0.0%
BITBIGSFRllhhhl     37      0       0      45        0.0%
BITBIGSFRllllhl     2A      0       0      56        0.0%
BITBIGSFRllllll     26      0       0      63        0.0%
BITBIGSFRllhhhl     20      0       0      48        0.0%
BITBIGSFRllhhhl     1E      0       0      50        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRllhhl      11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      49        0.0%
BITBIGSFRllllhl      9      0       0      60        0.0%
BITBIGSFRllhhhl      8      0       0      46        0.0%
BITBIGSFRlllllh      6      0       0      62        0.0%
BITBIGSFRllllhh      6      0       0      55        0.0%
BITBIGSFRllllhl      5      0       0      58        0.0%
BITBIGSFRlllhl       5      0       0      54        0.0%
BITBIGSFRhhllll      5      0       0      39        0.0%
BITBIGSFRllllhl      3      0       0      57        0.0%
BITBIGSFRllllhl      3      0       0      59        0.0%
BITBIGSFRlllhh       3      0       0      53        0.0%
BITBIGSFRllhhhh      2      0       0      42        0.0%
BITBIGSFRllhhhl      2      0       0      44        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRllhhhh      1      0       0      40        0.0%
BITBIGSFRllhhhh      1      0       0      41        0.0%
BITBIGSFRllllhl      1      0       0      61        0.0%
BITBIGSFRllhhhl      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRllhl        1      0       0      52        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     32E      64        0.0%
DATA                 0      0     32E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 11:45:22 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 3680  
                       _color_read_Blue 3770                                      l22 3A3C  
                                    l31 37BE                                      l25 36CE  
                                    l34 376E                                      l19 3900  
                                    l28 371E                                      l86 296C  
                                    l95 3406                                      l79 3380  
                                    bsr 000FE0                     ___wmul@multiplicand 0006  
                      _color_read_Clear 3720                        _color_read_Green 36D0  
                     ??_Interrupts_init 0004                                     l100 31E0  
                                   l110 32F8                                     l105 3134  
                                   l115 326C                                     l142 395A  
                                   l151 3A92                                     l160 3A7E  
                                   l145 39B0                                     l401 1E9E  
                                   l154 3A9C                                     l250 17D6  
                                   l163 388C                                     l148 39D6  
                                   l404 2AD6                                     l252 182E  
                                   l157 3A88                                     l245 17D0  
                                   l246 163C                                     l335 2EB2  
                                   l247 163A                                     l248 164A  
                                   l353 2182                                     l249 17D8  
                                   l532 39AE                                     l284 3984  
                                   l348 2678                                     l364 3486  
                                   l541 39FC                                     l358 2FBE  
                                   l385 14B0                                     l457 3A1C  
                                   l466 3A5E                                     l386 14D0  
                                   l475 3930                                     l387 1554  
                                   l469 3A72                                     l655 2800  
                                   l668 2C3A     normalise_readings@normalised_values 0026  
                      ??_motor_response 0056                                     _abs 388E  
                                   _pad 3488                   __end_of_card_response 2AD8  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1032 356C  
                                  l1042 35D0                                    ?_abs 0016  
                                  l1039 3574                                    l1216 38C4  
                                  l1304 384A                                    l1049 35D8  
                                  l1226 367E                                    l1219 38CC  
                                  l1307 3A9E                                    l1252 3500  
                                  l1260 225E                                    l1271 23FE  
                                  l1248 34AA                                    l1257 2210  
                                  l4001 21B8                                    l4011 2230  
                                  l1259 2218                                    l4003 21C8  
                                  l1284 362C                                    l4101 3A8E  
                                  l4021 2266                                    l4013 2236  
                                  l4005 21E8                                    l1278 2D98  
                                  l4111 3A94                                    l4103 3A76  
                                  l4031 2302                                    l4023 226E  
                                  l4015 2246                                    l4007 2204  
                                  l1296 3088                                    l4121 3862  
                                  l4113 3A98                                    l4105 3A7A  
                                  l4201 32AE                                    l4041 23C8  
                                  l4025 2274                                    l4033 2366  
                                  l4017 2252                                    l4009 2220  
                                  l4123 3888                                    l4115 384E  
                                  l4107 3A80                                    l4051 281E  
                                  l4203 32BA                                    l4131 3386  
                                  l4211 3A5E                                    l4043 23CE  
                                  l4035 2380                                    l4027 22F6  
                                  l4019 225A                                    l4125 388A  
                                  l4117 3852                                    l4109 3A84  
                                  l4061 28E8                                    l4053 2872  
                                  l4205 32C6                                    l4141 33D4  
                                  l4133 3392                                    l4301 1CB8  
                                  l4213 3A6E                                    l4045 23DE  
                                  l4037 239E                                    l4029 22FC  
                                  l4221 3622                                    l4119 385A  
                                  l4231 36D0                                    l4063 292C  
                                  l4055 2886                                    l4207 32D4  
                                  l4143 33E2                                    l4135 33A0  
                                  l4039 23B8                                    l4071 2C64  
                                  l4215 35DA                                    l4065 39B0  
                                  l4233 3716                                    l4225 3680  
                                  l4401 2614                                    l4057 288A  
                                  l4049 2802                                    l4209 32DC  
                                  l4145 33EE                                    l4137 33AC  
                                  l4129 3382                                    l4161 319A  
                                  l4305 1D34                                    l4313 1E44  
                                  l4081 2CB4                                    l4073 2C72  
                                  l4217 35E6                                    l4321 393C  
                                  l4067 39C0                                    l4243 3720  
                                  l4227 36C6                                    l4403 262C  
                                  l4059 28CC                                    l4139 33C8  
                                  l4163 31A6                                    l4155 315E  
                                  l4147 3136                                    l4171 30AA  
                                  l4307 1DB0                                    l4251 3202  
                                  l4083 2CD4                                    l4075 2C80  
                                  l4219 3602                                    l4323 3942  
                                  l4331 3A20                                    l4237 3770  
                                  l4245 3766                                    l4405 2630  
                                  l4341 2458                                    l4333 2400  
                                  l4421 2EB4                                    l4165 31AE  
                                  l4157 3176                                    l4149 3156  
                                  l4181 30E2                                    l4309 1E2C  
                                  l4261 322E                                    l4085 2D2A  
                                  l4077 2C84                                    l4093 2D6C  
                                  l4069 2C3C                                    l5061 1506  
                                  l4325 3944                                    l4239 37B6  
                                  l4407 264C                                    l4351 2480  
                                  l4343 245C                                    l4431 2FAE  
                                  l4191 326E                                    l4167 31CA  
                                  l4159 318E                                    l4183 30EE  
                                  l5063 1E58                                    l4263 323A  
                                  l4079 2C94                                    l4271 3640  
                                  l4511 10D2                                    l4503 1068  
                                  l4415 1EA4                                    l4327 3946  
                                  l4319 3932                                    l4361 24F8  
                                  l4353 2494                                    l4345 2478  
                                  l4433 3408                                    l4193 328E  
                                  l4185 30FA                                    l4177 30B2  
                                  l4169 308A                                    l4265 3248  
                                  l4257 320A                                    l4249 31E2  
                                  l4281 3902                                    l4089 2D5A  
                                  l4273 3648                                    l4601 143C  
                                  l4513 1152                                    l4505 107C  
                                  l4417 2170                                    l4409 1EA0  
                                  l4329 3948                                    l4099 3A8A  
                                  l4371 252C                                    l4355 24AC  
                                  l4339 2408                                    l4451 3474  
                                  l4443 3420                                    l4435 340C  
                                  l4427 2EB8                                    l4187 3102  
                                  l4179 30CA                                    l4291 1AD8  
                                  l4267 3250                                    l4259 3222  
                                  l4283 3906                                    l4275 3650  
                                  l4603 1466                                    l4531 11D4  
                                  l4515 1166                                    l4507 1092  
                                  l4419 2172                                    l4373 2530  
                                  l4357 24B0                                    l4453 3484  
                                  l4445 344E                                    l4437 341C  
                                  l4429 2FAC                                    l4189 311E  
                                  l4293 1B2C                                    l4285 3914  
                                  l3901 2748                                    l4277 366C  
                                  l4269 362E                                    l4613 14B2  
                                  l4605 1472                                    l4517 117C  
                                  l4509 10BE                                    l4461 0F16  
                                  l4701 2DA4                                    ?_pad 0014  
                                  l4391 25CC                                    l4383 2580  
                                  l4375 254C                                    l4367 2500  
                                  l4359 24CC                                    l4447 346E  
                                  l4199 3296                                    l4295 1B80  
                                  l4287 3918                                    l3903 2776  
                                  l3911 27B0                                    l4615 14CA  
                                  l4607 1496                                    l4519 11A8  
                                  l4471 0F80                                    l4463 0F2C  
                                  l4623 14F0                                    l4703 2DB8  
                                  l4631 38CE                                    l4393 25F8  
                                  l4385 2594                                    l4377 2578  
                                  l4369 2514                                    l4449 3472  
                                  l4297 1C24                                    l4289 1AD4  
                                  l3913 27C0                                    l3905 2796  
                                  l3921 2ADC                                    l4617 14D2  
                                  l4609 149E                                    l4561 1230  
                                  l4545 11EE                                    l4529 11C0  
                                  l4473 0F94                                    l4465 0F40  
                                  l4457 0EFE                                    l4721 2E30  
                                  l4713 2DE2                                    l4705 2DBE  
                                  l4633 38D2                                    l4641 32FA  
                                  l4387 25AC                                    l4299 1C9C  
                                  l3915 27E0                                    l3907 2798  
                                  l3931 2B3C                                    l3923 2AEA  
                                  l3851 2FD2                                    l4619 14EA  
                                  l4571 1312                                    l4563 12E4  
                                  l4547 1202                                    l4491 103C  
                                  l4483 0FEA                                    l4475 0FAA  
                                  l4467 0F54                                    l4459 0F02  
                                  l4731 296E                                    l4723 2E5C  
                                  l4715 2DF6                                    l4707 2DDA  
                                  l4635 38DC                                    l4651 335C  
                                  l4643 3302                                    l4821 3588  
                                  l4389 25B0                                    l3909 27AA  
                                  l3941 2BB2                                    l3933 2B5A  
                                  l3925 2B0A                                    l3853 2FE4  
                                  l4581 1388                                    l4573 1326  
                                  l4549 1218                                    l4493 1050  
                                  l4485 0FFE                                    l4477 0FBE  
                                  l4469 0F68                                    l4741 2A6C  
                                  l4733 2992                                    l4725 2E78  
                                  l4717 2E0E                                    l4637 38EC  
                                  l4661 337E                                    l4653 3366  
                                  l4645 332C                                    l4663 395C  
                                  l4831 35C4                                    l4823 3590  
                                  l4399 2600                                    l3951 2C1A  
                                  l3943 2BD2                                    l3935 2B62  
                                  l3927 2B0E                                    l3919 2AD8  
                                  l3871 388E                                    l3855 2FEE  
                                  l3863 3808                                    l4583 138E  
                                  l4575 1356                                    l4487 1014  
                                  l4479 0FD2                                    l4743 2A7C  
                                  l4735 29E8                                    l4727 2E84  
                                  l4719 2E14                                    l4639 38F6  
                                  l4655 3368                                    l4647 3350  
                                  l4671 3A0C                                    l4911 16C2  
                                  l4903 164C                                    l4681 398A  
                                  l4833 35CA                                    l4825 3598  
                                  l3881 26AC                                    l3945 2BE4  
                                  l3937 2B76                                    l3929 2B1C  
                                  l3873 38A8                                    l3857 300C  
                                  l3849 2FC0                                    l3865 3814  
                                  l3961 34B6                                    l4593 13F4  
                                  l4585 13B6                                    l4577 1362  
                                  l4569 12EE                                    l4489 1028  
                                  l4745 2A96                                    l4737 29F4  
                                  l4729 296E                                    l4657 3372  
                                  l4649 335A                                    l4673 3A16  
                                  l4665 39FE                                    l4921 1754  
                                  l4913 16D6                                    l4905 1666  
                                  l4841 1562                                    l4691 39AA  
                                  l4683 3992                                    l4827 35A6  
                                  l4819 3576                                    l3971 39F4  
                                  l3891 26EE                                    l3883 26B0  
                                  l3875 267A                                    l3939 2B84  
                                  l3947 2BEA                                    l3859 3042  
                                  l3867 3826                                    l3963 34CA  
                                  l3955 3488                                    l4595 1426  
                                  l4587 13CA                                    l4579 1370  
                                  l4747 2AA2                                    l4739 2A50  
                                  l4659 3374                                    l4675 3A18  
                                  l4667 3A08                                    l4931 17E6  
                                  l4923 1774                                    l4915 16FA  
                                  l4907 167A                                    l4851 1574  
                                  l4843 1566                                    l4835 1556  
                                  l4693 39AC                                    l4685 399C  
                                  l4829 35BC                                    l3981 3524  
                                  l3893 270C                                    l3885 26BE  
                                  l3877 267E                                    l3949 2BFA  
                                  l3869 382A                                    l3965 34CE  
                                  l3957 3496                                    l4597 1432  
                                  l4589 13D4                                    l4749 2AD2  
                                  l4677 3A1A                                    l4669 3A0A  
                                  l4941 186A                                    l4933 1822  
                                  l4925 17B0                                    l4917 1714  
                                  l4909 16A8                                    l4861 158E  
                                  l4853 1578                                    l4845 156A  
                                  l4837 155A                                    l4687 399E  
                                  l4679 3986                                    l3991 355E  
                                  l3983 352C                                    l3975 3502  
                                  l3895 2714                                    l3887 26DE  
                                  l3879 268C                                    l3967 34EC  
                                  l3959 34A2                                    l4695 2D9A  
                                  l4951 18E6                                    l4943 1890  
                                  l4935 183C                                    l4927 17BC  
                                  l4919 1734                                    l4871 15BA  
                                  l4863 1596                                    l4855 157E  
                                  l4847 156E                                    l4839 155E  
                                  l4689 39A8                                    l3993 3560  
                                  l3985 353A                                    l3977 350A  
                                  l3969 39D8                                    l3897 2728  
                                  l3889 26E2                                    l4961 196A  
                                  l4953 1904                                    l4945 18B8  
                                  l4937 1850                                    l4929 17C0  
                                  l4881 15EA                                    l4873 15C0  
                                  l4865 159C                                    l4857 1582  
                                  l4849 1570                                    l3995 3566  
                                  l3987 3540                                    l3979 351C  
                                  l3899 2736                                    l4971 19D8  
                                  l4963 197C                                    l4955 1910  
                                  l4939 1864                                    l4947 18C2  
                                  l4891 1612                                    l4883 15F2  
                                  l4875 15CC                                    l4867 15A2  
                                  l4859 1586                                    l3989 3556  
                                  l3997 2184                                    l4981 1A80  
                                  l4973 19EC                                    l4965 1990  
                                  l4957 192C                                    l4949 18CE  
                                  l4893 161E                                    l4885 15FA  
                                  l4877 15D8                                    l4869 15A6  
                                  l3999 21A4                                    l4983 1AB0  
                                  l4975 19FE                                    l4967 19AA  
                                  l4959 195E                                    l4895 1630  
                                  l4887 1602                                    l4879 15E2  
                                  l4985 1ABC                                    l4977 1A5C  
                                  l4969 19BE                                    l4897 1632  
                                  l4889 160A                                    l4987 1AC2  
                                  l4979 1A6E                                    STR_1 0E01  
                                  STR_2 0EC2                                    STR_3 0ED9  
                                  STR_4 0E57                                    STR_5 0EF2  
                                  STR_6 0EC2                                    STR_7 0EA9  
                                  STR_8 0E90                                    STR_9 0E75  
                                  u2000 351C                                    u2001 3518  
                                  u2010 353A                                    u2011 3536  
                                  u2020 3556                                    u2100 239E  
                          ?_LEDSon_init 0001                                    u2021 3552  
                                  u2101 239A                                    u2110 23B8  
                                  u2030 21B4                                    u2111 23B4  
                                  u2031 21AE                                    u2200 3876  
                                  u2120 23C8                                    u2040 21B6  
                                  u2201 386E                                    u2121 23C4  
                                  u2130 281E                                    u2050 21C8  
                                  u2131 281A                                    u2051 21C4  
                                  u2140 28E8                                    u2220 33C4  
                                  u2300 3930                                    u2060 2204  
                                  u2141 28E4                                    u2221 33C0  
                                  u2301 392C                                    u2061 2200  
                                  u2150 39C0                                    u2310 2478  
                                  u2230 3406                                    u2070 2230  
                                  u2151 39BC                                    u2311 2474  
                                  u2231 3402                                    u2071 222C  
                                  u2160 39D6                                    u2320 24CC  
                                  u2240 31CA                                    u2080 2246  
                                  u2400 1312                            _BAUD4CONbits 000EE9  
                                  u2161 39D2                                    u2321 24C8  
                                  u2241 31C6                                    u2081 2242  
                                  u2401 130E                                    u2218 3878  
                                  u2330 254C                                    u2250 311E  
                                  u2090 2380                                    u2170 2C64  
                                  u2410 13B6                                    u2331 2548  
                                  u2251 311A                                    u2091 237C  
                                  u2171 2C60                                    u2411 13B2  
                                  u2340 25CC                                    u2260 32F8  
                                  u2180 2CB4                                    u2420 13F0  
                                  u2341 25C8                                    u2261 32F4  
                                  u2181 2CB0                                    u2421 13EC  
                                  u2501 1628                                    u2350 264C  
                                  u2270 3A6E                                    u2190 2CD4  
                                  u2430 14AC                                    u2510 164A  
                                  u2351 2648                                    u2271 3A6A  
                                  u2191 2CD0                                    u2431 14A8  
                                  u2511 1646                                    u1800 2FE4  
                                  u2280 3622                                    u2360 2182  
                                  u2440 2DDA                                    u2520 17D0  
                                  u1801 2FE0                                    u2281 361E  
                                  u2361 217E                                    u2441 2DD6  
                                  u2521 17CC                                    u2370 2FBE  
                                  u2290 326C                                    u1810 300C  
                                  u2450 2E30                                    u2530 17E6  
                                  _T2PR 000FBC                                    u2371 2FBA  
                                  u2291 3268                                    u1811 3008  
                                  u2451 2E2C                                    u2531 17E2  
                                  u2460 3588                                    u2380 344E  
                                  u1900 2776                                    u1820 3042  
                                  u2540 183C                                    u2461 3584  
                                  u2381 344A                                    u1901 2772  
                                  u1821 303E                                    u2541 1838  
                                  u2470 35A6                                    u2390 3484  
                                  u1910 27C0                                    u1830 384A  
                                  u2550 1864                                    u2471 35A2  
                                  u2391 3480                                    u1911 27BC  
                                  u1831 3846                                    u2551 1860  
                                  u2607 1658                                    u2480 35BC  
                                  u1920 2AEA                                    u1840 38A8  
                                  u2560 1890                                    u2481 35B8  
                                  u1921 2AE6                                    u1841 38A4  
                                  u2561 188C                                    u2617 1686  
                                  u1850 268C                                    u1930 2B1C  
                                  u2570 18A4                                    u1851 2688  
                                  u1931 2B18                                    u2707 0F20  
                                  u2571 189A                                    u2627 16B4  
                                  u2491 1618                                    u1860 26BE  
                                  u1940 2B5A                                    u1861 26BA  
                                  u1941 2B56                                    u2717 0F9E  
                                  u2637 1972                                    u1950 2B84  
                                  u1790 2FD2                                    u2590 18E6  
                                  u1871 26E8                                    u1951 2B80  
                                  u1791 2FCE                                    u2807 137A  
                                  u2727 1008                                    u2647 199C  
                                  u2591 18E2                                    u1880 270C  
                                  u1960 2BB2                                    u1881 2708  
                                  u1961 2BAE                                    u2817 14BC  
                                  u2737 1086                                    u2657 19CA  
                                  u1890 2736                                    u1970 2BFA  
                                  u2907 33DA                                    u1891 2732  
                                  u1971 2BF6                                    u2827 14DC  
                                  u2747 10B0                                    u2667 19F4  
                                  u1980 3496                                    u2588 18A8  
                                  u2917 32CC                                    u2837 3240  
                                  u1981 3492                                    u2757 10DC  
                                  u2677 1A64                                    u1990 34EC  
                                  u2927 249E                                    u2847 1CA6  
                                  u1991 34E8                                    u2767 1170  
                                  u2687 38E2                                    u2937 251E  
                                  u2857 30D4                                    u2777 119A  
                                  u2697 2E02                                    u2947 259E  
                                  u2867 3128                                    u2787 11DE  
                                  u2957 261E                                    u2877 3180  
                                  u2797 120C                                    u2887 31D4  
                                  u2897 3398              normalise_readings@red_read 001E  
                                  abs@a 0016                                    _dbuf 025C  
                                  _main 1556                                    _dtoa 2184  
                                  _prec 0252                                    pad@i 001B  
                                  pad@p 0018                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001D  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 3382                                    prodh 000FF4  
                                  prodl 000FF3                                    start 005C  
      clear_read_calibration@clear_read 0083                         card_response@mL 009F  
                       card_response@mR 00A1                  __end_of_color_read_Red 36D0  
                  _response_in_progress 0256             normalise_readings@blue_read 0022  
                          ___param_bank 000000                                   ??_abs 0018  
                                 ??_pad 001A                             _turnRight45 308A  
                       __end_of___aodiv 2802                                   ?_main 0001  
                                 ?_dtoa 001F                         __end_of___aomod 2C3C  
                                 STR_10 0E33                                   STR_11 0EE8  
                                 ?_stop 0017                         __end_of___lwdiv 3576  
                       __end_of___lwmod 35DA                                   i1l538 004C  
                          vfpfcnvrt@fmt 0044                                   _TMR0H 000FD4  
                                 _TMR0L 000FD3                            main@red_read 01F7  
               __end_of_sendCharSerial4 3A74              __end_of_I2C_2_Master_Start 3A94  
            __end_of_I2C_2_Master_Write 3A80                                   _flags 025A  
                                 _fputc 2FC0                                   _fputs 3808  
                                 pad@fp 0014          determine_card@master_closeness 0004  
               ??_make_master_closeness 000A                                   _width 0250  
                                 _putch 3A9E            card_response@ReturnHomeCards 00A5  
                                 main@i 01FD                                   dtoa@d 0021  
                                 dtoa@i 0040                                   dtoa@n 0037  
                                 dtoa@p 0033                                   dtoa@s 003F  
                                 dtoa@w 0035                     normalise_readings@i 0032  
                                 tablat 000FF5            card_response@ReturnHomeTimes 00A3  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 ttemp5 005C                                   ttemp6 005F  
                                 ttemp7 0063                                   status 000FD8  
                                 wtemp8 005C                         __end_of_sprintf 3680  
        card_response@normalised_values 0100                        card_response@buf 0092  
               __end_of_color_read_Blue 37C0                   _I2C_2_Master_RepStart 3A94  
                       ?_color_read_Red 0008                         __initialization 37C0  
                          __end_of_main 1AD2                            __end_of_dtoa 2400  
                          __end_of_stop 3408                                  ??_main 00A7  
                                ??_dtoa 0029                                  ??_stop 001B  
                         __activetblptr 000003                           main@blue_read 01FB  
                  main@clear_read_check 01F3               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0011                                  ?_fputc 0004  
                                ?_fputs 000D                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21                          main@TimerCount 01F1  
          collect_avg_readings@red_read 0011                                  ?_putch 0001  
                                _RC0PPS 000E62                                  _RC4REG 000EE3  
                                _RE2PPS 000E74                                  _RD5PPS 000E6F  
                                _RC7PPS 000E69                                  _RD6PPS 000E70  
                                _RE4PPS 000E76                                  i1l3793 0026  
                                i1l3795 0036                                  i1l3797 0048  
                                _RG6PPS 000E88                __end_of_color_click_init 3902  
                                _TMR0IE 00714D                                  _TMR0IF 00719D  
                make_master_closeness@i 0028                                  _RX4PPS 000E15  
                                _TX4REG 000EE4                                  _LowISR 0018  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0054  
                             ??___aodiv 0014                               ??___aomod 0014  
                                ___wmul 39D8                      _normalise_readings 1EA0  
                             ??___lwdiv 000E                               ??___lwmod 0008  
                                clear_0 37E6                                  clear_1 37F2  
                                isa$std 000001                                  pad@buf 0016  
                                dtoa@fp 001F                     ?_normalise_readings 001A  
                                fputc@c 0004                                  fputs@c 0011  
                                fputs@i 0012                                  fputs@s 000D  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                           _home_response 1AD2  
                                putch@c 0001                        __end_of_vfprintf 362E  
                                stop@mL 0017                                  stop@mR 0019  
                     ??_initDCmotorsPWM 0004                               ??_sprintf 0056  
                     card_response@card 009E                              __accesstop 0060  
               __end_of__initialization 37FE                __end_of_color_read_Clear 3770  
                       fullSpeedAhead@i 001C                __end_of_color_read_Green 3720  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0028  
                         ___rparam_used 000001                        ?_color_read_Blue 0008  
                       _Interrupts_init 3986            __end_of_collect_avg_readings 267A  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 2D9A  
                      _reverseFullSpeed 31E2                            __pidataBANK2 3A3E  
            collect_avg_readings@i_1651 001B              collect_avg_readings@i_1652 001D  
            collect_avg_readings@i_1653 001F              collect_avg_readings@i_1654 0021  
                         __end_of_fputc 308A                           __end_of_fputs 384C  
                         __end_of_putch 3AA0                          ?_home_response 001F  
                        main@clear_read 01FE                                 ??_fputc 0008  
                               ??_fputs 0011                                 ??_putch 0004  
                            __pbssBANK2 0200                              __pbssBANK3 0351  
                               ?_LowISR 0001                       _color_writetoaddr 3A1E  
                          _T2CLKCONbits 000FBF                        motor_response@mL 0084  
                      motor_response@mR 0086                      ?_color_writetoaddr 0006  
                               ?___wmul 0004                      motor_response@card 0083  
                          ?_turnRight45 0017                     ??_color_writetoaddr 0007  
                        main@green_read 01F9                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5                 __end_of_Interrupts_init 39B0  
        collect_avg_readings@clear_read 000F                  color_writetoaddr@value 0006  
                      ??_color_read_Red 000A           __end_of_make_master_closeness 2FC0  
        determine_card@predicted_colour 000C               __end_of_color_writetoaddr 3A3E  
                    _I2C_2_Master_Start 3A8A                              _initUSART4 39FE  
                    _I2C_2_Master_Write 3A74                                 __Hparam 0000  
                               __Lparam 0000                       color_read_Red@tmp 000D  
make_master_closeness@normalised_values 0006                 sendStringSerial4@string 0005  
                     reverseFullSpeed@i 001C                                 ___aodiv 267A  
                               ___aomod 2AD8                     ?_I2C_2_Master_Start 0001  
                               ___lwdiv 3502                     ?_I2C_2_Master_Write 0001  
                               ___lwmod 3576                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0017  
                          turnLeft45@mR 0019                                 __pcinit 37C0  
                               __ramtop 0E00                                 __ptext0 1556  
                               __ptext1 39FE                                 __ptext2 32FA  
                               __ptext3 38CE                                 __ptext4 3A1E  
                               __ptext5 3932                                 __ptext6 2D9A  
                               __ptext7 296E                                 __ptext8 1EA0  
                               __ptext9 0EFE                         ??_home_response 0023  
                             _T2CONbits 000FBD                               _T2HLTbits 000FBE  
                         _RxBufWriteCnt 005A                    _collect_avg_readings 2400  
                               main@buf 015A                                 _sprintf 362E  
                  ??_I2C_2_Master_Start 0005                    ??_I2C_2_Master_Write 0005  
                  end_of_initialization 37FE          collect_avg_readings@green_read 0013  
                 normalise_readings@buf 001A                                 fputc@fp 0006  
                               fputs@fp 000F                       ?_color_click_init 0001  
                          turnRight45@i 001D                      ??_color_click_init 0008  
                         _card_detected 0254                       __end_of_vfpfcnvrt 2D9A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                        vfpfcnvrt@convarg 004A  
                            main@F14700 02DF                              main@F14698 0351  
                            ??_vfprintf 0054                         _initDCmotorsPWM 32FA  
                             _PORTFbits 000F8E                      setMotorPWM@negDuty 0016  
     normalise_readings@expected_values 0024                           _card_response 296E  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0015  
                             _TRISCbits 000F83                               _TRISDbits 000F84  
                             _TRISEbits 000F85                               _TRISFbits 000F86  
                             _TRISGbits 000F87                               _TRISHbits 000F88  
                 ?_collect_avg_readings 000F                __end_of_reverseFullSpeed 326E  
                      fullSpeedAhead@mL 0017                        fullSpeedAhead@mR 0019  
                   main@expected_values 0300                color_writetoaddr@address 0007  
               ??_I2C_2_Master_RepStart 0005                        ?_Interrupts_init 0001  
                           _CCP1CONbits 000FAB                       ?_color_read_Clear 0008  
                          _EUSART4RXbuf 023C                            _EUSART4TXbuf 0200  
                           _CCP2CONbits 000FA7                       ?_color_read_Green 0008  
                           _CCP3CONbits 000F26                             ?_initUSART4 0001  
               ?_clear_read_calibration 0081                             _CCP4CONbits 000F22  
             sendCharSerial4@charToSend 0004                              main@motorL 02D6  
                            main@motorR 0348                      ??_color_read_Clear 000A  
                    ??_color_read_Green 000A                              _turnLeft45 3136  
                        __end_of_LowISR 005C                          _fullSpeedAhead 326E  
                           vfpfcnvrt@ap 0046                             vfpfcnvrt@cp 0052  
                           vfpfcnvrt@fp 0042                          __end_of___wmul 39FE  
                       determine_card@i 000D                          ?_card_response 0092  
                   color_read_Clear@tmp 000D                     start_initialization 37C0  
                           __end_of_abs 38CE                             __end_of_pad 3502  
                         _TxBufWriteCnt 0059                           ??_LEDSon_init 0004  
        __end_of_clear_read_calibration 2EB4                     color_read_Green@tmp 000D  
                              ??_LowISR 0001                 __end_of_initDCmotorsPWM 3382  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 32FA  
                             _TimerFlag 0258                                ??___wmul 0008  
                           __pdataBANK2 02DF                          _determine_card 3408  
                           __pbssCOMRAM 0058                  ??_collect_avg_readings 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                         __pcstackBANK2 027C                           __pcstackBANK3 0300  
                      ___aodiv@dividend 0004                 clear_read_calibration@i 008B  
                        _motor_response 0EFE                     __end_of_LEDSon_init 3986  
                      ___lwdiv@dividend 000A                               _dtoa$2594 0031  
                           ?_turnLeft45 0017                         motor_response@i 0090  
                       motor_response@j 008C                         motor_response@k 008E  
                       ?_fullSpeedAhead 0017                                ?___aodiv 0004  
                              ?___aomod 0004                       motor_response@buf 0081  
                      ___aodiv@quotient 0016                  __end_of_determine_card 3488  
                              ?___lwdiv 000A                                ?___lwmod 0004  
                           __pintcodelo 0018                    I2C_2_Master_Read@ack 0006  
                       ??_card_response 0058                    I2C_2_Master_Read@tmp 0007  
                           __smallconst 0E00                       _I2C_2_Master_Idle 39B0  
                     _I2C_2_Master_Init 3932                       _I2C_2_Master_Read 384C  
                     _I2C_2_Master_Stop 3A80                            _RxBufReadCnt 025B  
          normalise_readings@clear_read 001C                     main@ReturnHomeCards 02B8  
          normalise_readings@difference 0030                      ?_I2C_2_Master_Idle 0001  
                    ?_I2C_2_Master_Init 0001                      ?_I2C_2_Master_Read 0001  
                         ??_setMotorPWM 0013                      ?_I2C_2_Master_Stop 0001  
                      ___lwdiv@quotient 000F                     main@ReturnHomeTimes 027C  
                __end_of_motor_response 1556                             turnLeft45@i 001D  
                              ?_sprintf 0066            clear_read_calibration@i_1640 008D  
                     _sendStringSerial4 3902                     ??_I2C_2_Master_Idle 0004  
                   ??_I2C_2_Master_Init 0004                     ??_I2C_2_Master_Read 0005  
                        ___wmul@product 0008                                _LATAbits 000F79  
                   ??_I2C_2_Master_Stop 0005                                _LATDbits 000F7C  
                              _LATFbits 000F7E                                _LATGbits 000F7F  
                              _LATHbits 000F80                                _IPR0bits 000E1F  
                    ?_sendStringSerial4 0005                                _PIE4bits 000E2D  
                 _make_master_closeness 2EB4                                i1u178_20 0036  
                              i1u178_21 0032                                _PIR4bits 000E37  
                      ?_initDCmotorsPWM 0001                       ??_sendCharSerial4 0004  
              make_master_closeness@buf 0004                                _SSP2CON2 000EDA  
                   ??_sendStringSerial4 0007                                _SSP2STAT 000ED8  
                       ?_determine_card 0004                               _vfpfcnvrt 2C3C  
             __end_of_I2C_2_Master_Idle 39D8               __end_of_I2C_2_Master_Init 395C  
             __end_of_I2C_2_Master_Read 388E                       ___wmul@multiplier 0004  
             __end_of_I2C_2_Master_Stop 3A8A                            setMotorPWM@m 0011  
           I2C_2_Master_Write@data_byte 0005            normalise_readings@green_read 0020  
                 __end_of_home_response 1EA0                       ??_color_read_Blue 000A  
                          _TxBufReadCnt 0058                         ?_motor_response 0081  
                     ?_reverseFullSpeed 0017                               copy_data0 37D4  
             __end_of_sendStringSerial4 3932                             _LEDSon_init 395C  
                    ??_reverseFullSpeed 001B           __end_of_I2C_2_Master_RepStart 3A9E  
                    color_read_Blue@tmp 000D                     __end_of_setMotorPWM 296E  
                          ??_initUSART4 0004                                __Hrparam 0000  
                            vfprintf@ap 0064                                __Lrparam 0000  
                            vfprintf@fp 0060   make_master_closeness@master_closeness 0008  
                    reverseFullSpeed@mL 0017                      reverseFullSpeed@mR 0019  
                     home_response@card 0025                              ?_vfpfcnvrt 0042  
                       ___aodiv@divisor 000C                         ___aodiv@counter 0014  
                            _ANSELDbits 000EA7                              _ANSELFbits 000EB4  
                            sprintf@fmt 0068                              _T0CON0bits 000FD5  
                            _T0CON1bits 000FD6                         ___lwdiv@divisor 000C  
                    __end_of_initUSART4 3A1E                         ___lwdiv@counter 000E  
                              __ptext10 362E                                __ptext11 35DA  
                              __ptext20 267A                                __ptext12 2C3C  
                              __ptext21 3902                                __ptext13 2184  
                              __ptext30 39D8                                __ptext22 3A5C  
                              __ptext14 3488                                __ptext31 3502  
                              __ptext23 31E2                                __ptext15 3808  
                              __ptext40 3A80                                __ptext32 2EB4  
                              __ptext24 1AD2                                __ptext16 2FC0  
                              __ptext41 3A8A                                __ptext33 3408  
                              __ptext25 308A                                __ptext17 3A9E  
                              __ptext42 3A94                                __ptext34 2400  
                              __ptext26 3136                                __ptext18 388E  
                              __ptext43 384C                                __ptext35 3680  
                              __ptext27 3382                                __ptext19 2AD8  
                              __ptext44 39B0                                __ptext36 36D0  
                              __ptext28 326E                                __ptext45 3576  
                              __ptext37 3720                                __ptext29 2802  
                              __ptext46 395C                                __ptext38 3770  
                              __ptext47 3986                                __ptext39 3A74  
         motor_response@ReturnHomeCards 008A                            _SSP2CON1bits 000ED9  
                          _SSP2CON2bits 000EDA           motor_response@ReturnHomeTimes 0088  
                ?_make_master_closeness 0004                                isa$xinst 000000  
               card_response@clear_read 0094                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 35DA  
                         ??_turnRight45 001B                                main@card 01F0  
                      ___aomod@dividend 0004                   collect_avg_readings@i 0019  
                            _INTCONbits 000FF2                             _setMotorPWM 2802  
         collect_avg_readings@blue_read 0015                           turnRight45@mL 0017  
                         turnRight45@mR 0019                                intlevel1 0000  
                             sprintf@ap 0074              __end_of_normalise_readings 2184  
          card_response@expected_values 009C                        ___lwmod@dividend 0004  
                      ??_fullSpeedAhead 001B                 card_response@green_read 0098  
                          ??_turnLeft45 001B          determine_card@current_smallest 000A  
                       ___aomod@divisor 000C                             ??_vfpfcnvrt 0048  
                       ___aomod@counter 0014                  card_response@blue_read 009A  
                      _color_click_init 38CE                         home_response@mL 001F  
                       home_response@mR 0021           card_response@master_closeness 0148  
                              sprintf@f 0076                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                       ___lwmod@divisor 0006                     __end_of_turnRight45 3136  
                       ___lwmod@counter 0008                      __end_of_turnLeft45 31E2  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0015  
                       _sendCharSerial4 3A5C                   card_response@red_read 0096  
                          ___aomod@sign 0015                        ??_determine_card 0006  
                         main@CardCount 01F5                            main@PWMcycle 00A9  
