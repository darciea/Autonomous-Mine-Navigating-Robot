

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 11:10:16 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73   000000                     
    74                           ; Version 2.35
    75                           ; Generated 05/05/2021 GMT
    76                           ; 
    77                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F67K40 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000000                     _TRISBbits	set	3970
   110   000000                     _TX4REG	set	3812
   111   000000                     _RC4STAbits	set	3815
   112   000000                     _SP4BRGH	set	3814
   113   000000                     _LATHbits	set	3968
   114   000000                     _LATGbits	set	3967
   115   000000                     _TRISFbits	set	3974
   116   000000                     _TRISDbits	set	3972
   117   000000                     _TRISGbits	set	3975
   118   000000                     _SSP2CON2bits	set	3802
   119   000000                     _INT1PPS	set	3569
   120   000000                     _RX4PPS	set	3605
   121   000000                     _SSP2CLKPPS	set	3612
   122   000000                     _SSP2DATPPS	set	3613
   123   000000                     _RC7PPS	set	3689
   124   000000                     _RE2PPS	set	3700
   125   000000                     _TRISCbits	set	3971
   126   000000                     _TRISEbits	set	3973
   127   000000                     _TRISHbits	set	3976
   128   000000                     _PORTFbits	set	3982
   129   000000                     _T2PR	set	4028
   130   000000                     _T2CONbits	set	4029
   131   000000                     _CCPR2H	set	4006
   132   000000                     _CCPR1H	set	4010
   133   000000                     _RE4PPS	set	3702
   134   000000                     _RG6PPS	set	3720
   135   000000                     _RD5PPS	set	3695
   136   000000                     _ANSELBbits	set	3738
   137   000000                     _ANSELDbits	set	3751
   138   000000                     _SSP2ADD	set	3798
   139   000000                     _SSP2CON1bits	set	3801
   140   000000                     _CCPR4H	set	3873
   141   000000                     _CCPR3H	set	3877
   142   000000                     _INTCONbits	set	4082
   143   000000                     _T2CLKCONbits	set	4031
   144   000000                     _T2HLTbits	set	4030
   145   000000                     _CCP1CONbits	set	4011
   146   000000                     _CCPTMRS0bits	set	4013
   147   000000                     _CCP2CONbits	set	4007
   148   000000                     _LATAbits	set	3961
   149   000000                     _LATDbits	set	3964
   150   000000                     _CCP3CONbits	set	3878
   151   000000                     _CCP4CONbits	set	3874
   152   000000                     _RC4REG	set	3811
   153   000000                     _SP4BRGL	set	3813
   154   000000                     _TX4STAbits	set	3816
   155   000000                     _BAUD4CONbits	set	3817
   156   000000                     _SSP2CON2	set	3802
   157   000000                     _SSP2STAT	set	3800
   158   000000                     _ANSELFbits	set	3764
   159   000000                     _SSP2BUF	set	3797
   160   000000                     _IPR0bits	set	3615
   161   000000                     _PIE0bits	set	3625
   162   000000                     _PIE4bits	set	3629
   163   000000                     _PIR4bits	set	3639
   164   000000                     _RC0PPS	set	3682
   165   000000                     _RD6PPS	set	3696
   166   000000                     _LATFbits	set	3966
   167   000000                     _TRISAbits	set	3969
   168   000000                     _PIR0bits	set	3635
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01                     STR_1:
   175                           
   176                           ; BSR set to: 14
   177   000E01  0A                 	db	10
   178   000E02  20                 	db	32
   179   000E03  45                 	db	69	;'E'
   180   000E04  58                 	db	88	;'X'
   181   000E05  50                 	db	80	;'P'
   182   000E06  45                 	db	69	;'E'
   183   000E07  43                 	db	67	;'C'
   184   000E08  54                 	db	84	;'T'
   185   000E09  45                 	db	69	;'E'
   186   000E0A  44                 	db	68	;'D'
   187   000E0B  3A                 	db	58	;':'
   188   000E0C  20                 	db	32
   189   000E0D  43                 	db	67	;'C'
   190   000E0E  6C                 	db	108	;'l'
   191   000E0F  65                 	db	101	;'e'
   192   000E10  61                 	db	97	;'a'
   193   000E11  72                 	db	114	;'r'
   194   000E12  20                 	db	32
   195   000E13  25                 	db	37
   196   000E14  64                 	db	100	;'d'
   197   000E15  2C                 	db	44
   198   000E16  52                 	db	82	;'R'
   199   000E17  20                 	db	32
   200   000E18  25                 	db	37
   201   000E19  64                 	db	100	;'d'
   202   000E1A  2C                 	db	44
   203   000E1B  20                 	db	32
   204   000E1C  47                 	db	71	;'G'
   205   000E1D  20                 	db	32
   206   000E1E  25                 	db	37
   207   000E1F  64                 	db	100	;'d'
   208   000E20  2C                 	db	44
   209   000E21  20                 	db	32
   210   000E22  42                 	db	66	;'B'
   211   000E23  20                 	db	32
   212   000E24  25                 	db	37
   213   000E25  64                 	db	100	;'d'
   214   000E26  20                 	db	32
   215   000E27  20                 	db	32
   216   000E28  43                 	db	67	;'C'
   217   000E29  41                 	db	65	;'A'
   218   000E2A  52                 	db	82	;'R'
   219   000E2B  44                 	db	68	;'D'
   220   000E2C  3A                 	db	58	;':'
   221   000E2D  20                 	db	32
   222   000E2E  25                 	db	37
   223   000E2F  64                 	db	100	;'d'
   224   000E30  20                 	db	32
   225   000E31  0A                 	db	10
   226   000E32  00                 	db	0
   227   000E33                     STR_3:
   228                           
   229                           ; BSR set to: 14
   230   000E33  0A                 	db	10
   231   000E34  20                 	db	32
   232   000E35  41                 	db	65	;'A'
   233   000E36  56                 	db	86	;'V'
   234   000E37  47                 	db	71	;'G'
   235   000E38  3A                 	db	58	;':'
   236   000E39  20                 	db	32
   237   000E3A  43                 	db	67	;'C'
   238   000E3B  6C                 	db	108	;'l'
   239   000E3C  65                 	db	101	;'e'
   240   000E3D  61                 	db	97	;'a'
   241   000E3E  72                 	db	114	;'r'
   242   000E3F  20                 	db	32
   243   000E40  25                 	db	37
   244   000E41  64                 	db	100	;'d'
   245   000E42  2C                 	db	44
   246   000E43  20                 	db	32
   247   000E44  52                 	db	82	;'R'
   248   000E45  20                 	db	32
   249   000E46  25                 	db	37
   250   000E47  64                 	db	100	;'d'
   251   000E48  2C                 	db	44
   252   000E49  20                 	db	32
   253   000E4A  47                 	db	71	;'G'
   254   000E4B  20                 	db	32
   255   000E4C  25                 	db	37
   256   000E4D  64                 	db	100	;'d'
   257   000E4E  2C                 	db	44
   258   000E4F  20                 	db	32
   259   000E50  42                 	db	66	;'B'
   260   000E51  20                 	db	32
   261   000E52  25                 	db	37
   262   000E53  64                 	db	100	;'d'
   263   000E54  20                 	db	32
   264   000E55  0A                 	db	10
   265   000E56  00                 	db	0
   266   000E57                     STR_2:
   267                           
   268                           ; BSR set to: 14
   269   000E57  0A                 	db	10
   270   000E58  20                 	db	32
   271   000E59  45                 	db	69	;'E'
   272   000E5A  78                 	db	120	;'x'
   273   000E5B  70                 	db	112	;'p'
   274   000E5C  65                 	db	101	;'e'
   275   000E5D  63                 	db	99	;'c'
   276   000E5E  74                 	db	116	;'t'
   277   000E5F  65                 	db	101	;'e'
   278   000E60  64                 	db	100	;'d'
   279   000E61  20                 	db	32
   280   000E62  63                 	db	99	;'c'
   281   000E63  6C                 	db	108	;'l'
   282   000E64  65                 	db	101	;'e'
   283   000E65  61                 	db	97	;'a'
   284   000E66  72                 	db	114	;'r'
   285   000E67  3A                 	db	58	;':'
   286   000E68  20                 	db	32
   287   000E69  25                 	db	37
   288   000E6A  64                 	db	100	;'d'
   289   000E6B  20                 	db	32
   290   000E6C  0A                 	db	10
   291   000E6D  00                 	db	0
   292   000E6E                     STR_4:
   293                           
   294                           ; BSR set to: 14
   295   000E6E  43                 	db	67	;'C'
   296   000E6F  41                 	db	65	;'A'
   297   000E70  52                 	db	82	;'R'
   298   000E71  44                 	db	68	;'D'
   299   000E72  20                 	db	32
   300   000E73  25                 	db	37
   301   000E74  64                 	db	100	;'d'
   302   000E75  20                 	db	32
   303   000E76  0A                 	db	10
   304   000E77  00                 	db	0
   305   000E78  00                 	db	0	; dummy byte at the end
   306   000000                     
   307                           ; #config settings
   308                           
   309                           	psect	cinit
   310   00308C                     __pcinit:
   311                           	callstack 0
   312   00308C                     start_initialization:
   313                           	callstack 0
   314   00308C                     __initialization:
   315                           	callstack 0
   316                           
   317                           ; Clear objects allocated to BANK2 (112 bytes)
   318   00308C  EE02  F000         	lfsr	0,__pbssBANK2
   319   003090  0E70               	movlw	112
   320   003092                     clear_0:
   321   003092  6AEE               	clrf	postinc0,c
   322   003094  06E8               	decf	wreg,f,c
   323   003096  E1FD               	bnz	clear_0
   324                           
   325                           ; Clear objects allocated to BANK0 (9 bytes)
   326   003098  EE00  F0EE         	lfsr	0,__pbssBANK0
   327   00309C  0E09               	movlw	9
   328   00309E                     clear_1:
   329   00309E  6AEE               	clrf	postinc0,c
   330   0030A0  06E8               	decf	wreg,f,c
   331   0030A2  E1FD               	bnz	clear_1
   332                           
   333                           ; Clear objects allocated to COMRAM (4 bytes)
   334   0030A4  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   335   0030A6  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   336   0030A8  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   337   0030AA  6A57               	clrf	__pbssCOMRAM& (0+255),c
   338   0030AC                     end_of_initialization:
   339                           	callstack 0
   340   0030AC                     __end_of__initialization:
   341                           	callstack 0
   342   0030AC  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   343   0030AE  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   344   0030B0  0100               	movlb	0
   345   0030B2  EF39  F009         	goto	_main	;jump to C main() function
   346                           
   347                           	psect	bssCOMRAM
   348   000057                     __pbssCOMRAM:
   349                           	callstack 0
   350   000057                     _TxBufReadCnt:
   351                           	callstack 0
   352   000057                     	ds	1
   353   000058                     _TxBufWriteCnt:
   354                           	callstack 0
   355   000058                     	ds	1
   356   000059                     _RxBufReadCnt:
   357                           	callstack 0
   358   000059                     	ds	1
   359   00005A                     _RxBufWriteCnt:
   360                           	callstack 0
   361   00005A                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364   0000EE                     __pbssBANK0:
   365                           	callstack 0
   366   0000EE                     _width:
   367                           	callstack 0
   368   0000EE                     	ds	2
   369   0000F0                     _prec:
   370                           	callstack 0
   371   0000F0                     	ds	2
   372   0000F2                     _card_detected:
   373                           	callstack 0
   374   0000F2                     	ds	2
   375   0000F4                     _response_in_progress:
   376                           	callstack 0
   377   0000F4                     	ds	2
   378   0000F6                     _flags:
   379                           	callstack 0
   380   0000F6                     	ds	1
   381                           
   382                           	psect	bssBANK2
   383   000200                     __pbssBANK2:
   384                           	callstack 0
   385   000200                     _EUSART4TXbuf:
   386                           	callstack 0
   387   000200                     	ds	60
   388   00023C                     _EUSART4RXbuf:
   389                           	callstack 0
   390   00023C                     	ds	20
   391   000250                     _dbuf:
   392                           	callstack 0
   393   000250                     	ds	32
   394                           
   395                           	psect	cstackBANK1
   396   000100                     __pcstackBANK1:
   397                           	callstack 0
   398   000100                     main@buf:
   399                           	callstack 0
   400                           
   401                           ; 150 bytes @ 0x0
   402   000100                     	ds	150
   403   000196                     main@expected_values:
   404                           	callstack 0
   405                           
   406                           ; 72 bytes @ 0x96
   407   000196                     	ds	72
   408   0001DE                     main@PWMcycle:
   409                           	callstack 0
   410                           
   411                           ; 1 bytes @ 0xDE
   412   0001DE                     	ds	1
   413   0001DF                     main@clear_read_check:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0xDF
   417   0001DF                     	ds	2
   418   0001E1                     main@red_read:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0xE1
   422   0001E1                     	ds	2
   423   0001E3                     main@green_read:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xE3
   427   0001E3                     	ds	2
   428   0001E5                     main@blue_read:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xE5
   432   0001E5                     	ds	2
   433   0001E7                     main@i:
   434                           	callstack 0
   435                           
   436                           ; 1 bytes @ 0xE7
   437   0001E7                     	ds	1
   438   0001E8                     main@clear_read:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0xE8
   442   0001E8                     	ds	2
   443   0001EA                     main@motorL:
   444                           	callstack 0
   445                           
   446                           ; 9 bytes @ 0xEA
   447   0001EA                     	ds	9
   448   0001F3                     main@motorR:
   449                           	callstack 0
   450                           
   451                           ; 9 bytes @ 0xF3
   452   0001F3                     	ds	9
   453                           
   454                           	psect	cstackBANK0
   455   000060                     __pcstackBANK0:
   456                           	callstack 0
   457   000060                     ?_vfprintf:
   458                           	callstack 0
   459   000060                     vfprintf@fp:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463   000060                     	ds	2
   464   000062                     vfprintf@fmt:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x2
   468   000062                     	ds	2
   469   000064                     vfprintf@ap:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473   000064                     	ds	2
   474   000066                     ?_sprintf:
   475                           	callstack 0
   476   000066                     sprintf@s:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x6
   480   000066                     	ds	2
   481   000068                     sprintf@fmt:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x8
   485   000068                     	ds	12
   486   000074                     sprintf@ap:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x14
   490   000074                     	ds	2
   491   000076                     sprintf@f:
   492                           	callstack 0
   493                           
   494                           ; 11 bytes @ 0x16
   495   000076                     	ds	11
   496   000081                     clear_read_calibration@buf:
   497                           	callstack 0
   498   000081                     card_response@buf:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x21
   502   000081                     	ds	2
   503   000083                     clear_read_calibration@clear_read:
   504                           	callstack 0
   505   000083                     card_response@clear_read:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x23
   509   000083                     	ds	2
   510   000085                     clear_read_calibration@clear_read_check:
   511                           	callstack 0
   512   000085                     card_response@red_read:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x25
   516   000085                     	ds	2
   517   000087                     ??_clear_read_calibration:
   518   000087                     card_response@green_read:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x27
   522   000087                     	ds	2
   523   000089                     card_response@blue_read:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x29
   527   000089                     	ds	2
   528   00008B                     clear_read_calibration@i:
   529                           	callstack 0
   530   00008B                     card_response@expected_values:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x2B
   534   00008B                     	ds	2
   535   00008D                     clear_read_calibration@i_1591:
   536                           	callstack 0
   537   00008D                     card_response@mL:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x2D
   541   00008D                     	ds	2
   542   00008F                     card_response@mR:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x2F
   546   00008F                     	ds	2
   547   000091                     card_response@normalised_values:
   548                           	callstack 0
   549                           
   550                           ; 72 bytes @ 0x31
   551   000091                     	ds	72
   552   0000D9                     card_response@master_closeness:
   553                           	callstack 0
   554                           
   555                           ; 18 bytes @ 0x79
   556   0000D9                     	ds	18
   557   0000EB                     card_response@card:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x8B
   561   0000EB                     	ds	1
   562   0000EC                     ??_main:
   563                           
   564                           ; 1 bytes @ 0x8C
   565   0000EC                     	ds	2
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     
   572                           ; 1 bytes @ 0x0
   573   000001                     	ds	1
   574   000002                     i2I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576                           
   577                           ; 1 bytes @ 0x1
   578   000002                     	ds	1
   579   000003                     ??_HighISR:
   580   000003                     
   581                           ; 1 bytes @ 0x2
   582   000003                     	ds	2
   583   000005                     ??_I2C_2_Master_Idle:
   584   000005                     ?___wmul:
   585                           	callstack 0
   586   000005                     ?___aodiv:
   587                           	callstack 0
   588   000005                     ?___aomod:
   589                           	callstack 0
   590   000005                     sendCharSerial4@charToSend:
   591                           	callstack 0
   592   000005                     make_master_closeness@buf:
   593                           	callstack 0
   594   000005                     determine_card@master_closeness:
   595                           	callstack 0
   596   000005                     ___wmul@multiplier:
   597                           	callstack 0
   598   000005                     fputc@c:
   599                           	callstack 0
   600   000005                     ___aodiv@dividend:
   601                           	callstack 0
   602   000005                     ___aomod@dividend:
   603                           	callstack 0
   604                           
   605                           ; 8 bytes @ 0x4
   606   000005                     	ds	1
   607   000006                     ??_I2C_2_Master_Read:
   608   000006                     I2C_2_Master_Write@data_byte:
   609                           	callstack 0
   610   000006                     sendStringSerial4@string:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x5
   614   000006                     	ds	1
   615   000007                     ??_determine_card:
   616   000007                     color_writetoaddr@value:
   617                           	callstack 0
   618   000007                     I2C_2_Master_Read@ack:
   619                           	callstack 0
   620   000007                     make_master_closeness@normalised_values:
   621                           	callstack 0
   622   000007                     ___wmul@multiplicand:
   623                           	callstack 0
   624   000007                     fputc@fp:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x6
   628   000007                     	ds	1
   629   000008                     color_writetoaddr@address:
   630                           	callstack 0
   631   000008                     I2C_2_Master_Read@tmp:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x7
   635   000008                     	ds	1
   636   000009                     ??_fputc:
   637   000009                     ??_color_click_init:
   638   000009                     ?_color_read_Red:
   639                           	callstack 0
   640   000009                     ?_color_read_Green:
   641                           	callstack 0
   642   000009                     ?_color_read_Blue:
   643                           	callstack 0
   644   000009                     ?_color_read_Clear:
   645                           	callstack 0
   646   000009                     make_master_closeness@master_closeness:
   647                           	callstack 0
   648   000009                     set_interrupt_threshold@AILT:
   649                           	callstack 0
   650   000009                     ___wmul@product:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654   000009                     	ds	2
   655   00000B                     ??_color_read_Red:
   656   00000B                     ??_color_read_Green:
   657   00000B                     ??_color_read_Blue:
   658   00000B                     ??_color_read_Clear:
   659   00000B                     ??_make_master_closeness:
   660   00000B                     ?___lwdiv:
   661                           	callstack 0
   662   00000B                     determine_card@current_smallest:
   663                           	callstack 0
   664   00000B                     set_interrupt_threshold@AIHT:
   665                           	callstack 0
   666   00000B                     ___lwdiv@dividend:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0xA
   670   00000B                     	ds	2
   671   00000D                     determine_card@predicted_colour:
   672                           	callstack 0
   673   00000D                     set_interrupt_threshold@persistence:
   674                           	callstack 0
   675   00000D                     ___lwdiv@divisor:
   676                           	callstack 0
   677   00000D                     ___aodiv@divisor:
   678                           	callstack 0
   679   00000D                     ___aomod@divisor:
   680                           	callstack 0
   681                           
   682                           ; 8 bytes @ 0xC
   683   00000D                     	ds	1
   684   00000E                     determine_card@i:
   685                           	callstack 0
   686   00000E                     color_read_Red@tmp:
   687                           	callstack 0
   688   00000E                     color_read_Green@tmp:
   689                           	callstack 0
   690   00000E                     color_read_Blue@tmp:
   691                           	callstack 0
   692   00000E                     color_read_Clear@tmp:
   693                           	callstack 0
   694   00000E                     fputs@s:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0xD
   698   00000E                     	ds	1
   699   00000F                     _set_interrupt_threshold$2093:
   700                           	callstack 0
   701   00000F                     ___lwdiv@quotient:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0xE
   705   00000F                     	ds	1
   706   000010                     _set_interrupt_threshold$2094:
   707                           	callstack 0
   708   000010                     collect_avg_readings@clear_read:
   709                           	callstack 0
   710   000010                     fputs@fp:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0xF
   714   000010                     	ds	1
   715   000011                     ___lwdiv@counter:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x10
   719   000011                     	ds	1
   720   000012                     fputs@c:
   721                           	callstack 0
   722   000012                     setMotorPWM@m:
   723                           	callstack 0
   724   000012                     collect_avg_readings@red_read:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x11
   728   000012                     	ds	1
   729   000013                     fputs@i:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x12
   733   000013                     	ds	1
   734   000014                     ??_setMotorPWM:
   735   000014                     collect_avg_readings@green_read:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x13
   739   000014                     	ds	1
   740   000015                     ___aodiv@counter:
   741                           	callstack 0
   742   000015                     ___aomod@counter:
   743                           	callstack 0
   744   000015                     pad@fp:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x14
   748   000015                     	ds	1
   749   000016                     setMotorPWM@posDuty:
   750                           	callstack 0
   751   000016                     ___aodiv@sign:
   752                           	callstack 0
   753   000016                     ___aomod@sign:
   754                           	callstack 0
   755   000016                     collect_avg_readings@blue_read:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x15
   759   000016                     	ds	1
   760   000017                     ?_abs:
   761                           	callstack 0
   762   000017                     setMotorPWM@negDuty:
   763                           	callstack 0
   764   000017                     abs@a:
   765                           	callstack 0
   766   000017                     pad@buf:
   767                           	callstack 0
   768   000017                     ___aodiv@quotient:
   769                           	callstack 0
   770                           
   771                           ; 8 bytes @ 0x16
   772   000017                     	ds	1
   773   000018                     ??_collect_avg_readings:
   774   000018                     stop@mL:
   775                           	callstack 0
   776   000018                     turnLeft45@mL:
   777                           	callstack 0
   778   000018                     turnRight45@mL:
   779                           	callstack 0
   780   000018                     fullSpeedAhead@mL:
   781                           	callstack 0
   782   000018                     reverseFullSpeed@mL:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x17
   786   000018                     	ds	1
   787   000019                     ??_abs:
   788   000019                     pad@p:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x18
   792   000019                     	ds	1
   793   00001A                     stop@mR:
   794                           	callstack 0
   795   00001A                     turnLeft45@mR:
   796                           	callstack 0
   797   00001A                     turnRight45@mR:
   798                           	callstack 0
   799   00001A                     fullSpeedAhead@mR:
   800                           	callstack 0
   801   00001A                     reverseFullSpeed@mR:
   802                           	callstack 0
   803   00001A                     collect_avg_readings@i:
   804                           	callstack 0
   805                           
   806                           ; 2 bytes @ 0x19
   807   00001A                     	ds	1
   808   00001B                     ??_pad:
   809   00001B                     normalise_readings@buf:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x1A
   813   00001B                     	ds	1
   814   00001C                     ??_stop:
   815   00001C                     ??_turnLeft45:
   816   00001C                     ??_turnRight45:
   817   00001C                     ??_fullSpeedAhead:
   818   00001C                     ??_reverseFullSpeed:
   819   00001C                     collect_avg_readings@i_1602:
   820                           	callstack 0
   821   00001C                     pad@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x1B
   825   00001C                     	ds	1
   826   00001D                     fullSpeedAhead@i:
   827                           	callstack 0
   828   00001D                     reverseFullSpeed@i:
   829                           	callstack 0
   830   00001D                     normalise_readings@clear_read:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x1C
   834   00001D                     	ds	1
   835   00001E                     turnLeft45@i:
   836                           	callstack 0
   837   00001E                     turnRight45@i:
   838                           	callstack 0
   839   00001E                     collect_avg_readings@i_1603:
   840                           	callstack 0
   841   00001E                     pad@w:
   842                           	callstack 0
   843                           
   844                           ; 2 bytes @ 0x1D
   845   00001E                     	ds	1
   846   00001F                     normalise_readings@red_read:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x1E
   850   00001F                     	ds	1
   851   000020                     collect_avg_readings@i_1604:
   852                           	callstack 0
   853   000020                     motor_response@mL:
   854                           	callstack 0
   855   000020                     dtoa@fp:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x1F
   859   000020                     	ds	1
   860   000021                     normalise_readings@green_read:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x20
   864   000021                     	ds	1
   865   000022                     collect_avg_readings@i_1605:
   866                           	callstack 0
   867   000022                     motor_response@mR:
   868                           	callstack 0
   869   000022                     dtoa@d:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x21
   873   000022                     	ds	1
   874   000023                     normalise_readings@blue_read:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x22
   878   000023                     	ds	1
   879   000024                     ??_motor_response:
   880                           
   881                           ; 1 bytes @ 0x23
   882   000024                     	ds	1
   883   000025                     normalise_readings@expected_values:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x24
   887   000025                     	ds	1
   888   000026                     motor_response@card:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x25
   892   000026                     	ds	1
   893   000027                     normalise_readings@normalised_values:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0x26
   897   000027                     	ds	2
   898   000029                     ??_normalise_readings:
   899   000029                     make_master_closeness@i:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x28
   903   000029                     	ds	1
   904   00002A                     ??_dtoa:
   905                           
   906                           ; 1 bytes @ 0x29
   907   00002A                     	ds	7
   908   000031                     normalise_readings@difference:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x30
   912   000031                     	ds	1
   913   000032                     _dtoa$2612:
   914                           	callstack 0
   915                           
   916                           ; 2 bytes @ 0x31
   917   000032                     	ds	1
   918   000033                     normalise_readings@i:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x32
   922   000033                     	ds	1
   923   000034                     dtoa@p:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x33
   927   000034                     	ds	2
   928   000036                     dtoa@w:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x35
   932   000036                     	ds	2
   933   000038                     dtoa@n:
   934                           	callstack 0
   935                           
   936                           ; 8 bytes @ 0x37
   937   000038                     	ds	8
   938   000040                     dtoa@s:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x3F
   942   000040                     	ds	1
   943   000041                     dtoa@i:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x40
   947   000041                     	ds	2
   948   000043                     vfpfcnvrt@fp:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x42
   952   000043                     	ds	2
   953   000045                     vfpfcnvrt@fmt:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x44
   957   000045                     	ds	2
   958   000047                     vfpfcnvrt@ap:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x46
   962   000047                     	ds	2
   963   000049                     ??_vfpfcnvrt:
   964                           
   965                           ; 1 bytes @ 0x48
   966   000049                     	ds	2
   967   00004B                     vfpfcnvrt@convarg:
   968                           	callstack 0
   969                           
   970                           ; 8 bytes @ 0x4A
   971   00004B                     	ds	8
   972   000053                     vfpfcnvrt@cp:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x52
   976   000053                     	ds	2
   977   000055                     vfprintf@cfmt:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x54
   981   000055                     	ds	2
   982   000057                     
   983                           ; 1 bytes @ 0x56
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 21 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  i               1  231[BANK1 ] enum E14569
   994 ;;  buf           150    0[BANK1 ] unsigned char [150]
   995 ;;  ReturnHomeAr  120    0        unsigned int [30][2]
   996 ;;  expected_val   72  150[BANK1 ] unsigned int [9][4]
   997 ;;  expected_val   40    0        unsigned int [5][4]
   998 ;;  motorR          9  243[BANK1 ] struct DC_motor
   999 ;;  motorL          9  234[BANK1 ] struct DC_motor
  1000 ;;  clear_read      2  232[BANK1 ] unsigned int 
  1001 ;;  blue_read       2  229[BANK1 ] unsigned int 
  1002 ;;  green_read      2  227[BANK1 ] unsigned int 
  1003 ;;  red_read        2  225[BANK1 ] unsigned int 
  1004 ;;  clear_read_c    2  223[BANK1 ] unsigned int 
  1005 ;;  PWMcycle        1  222[BANK1 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1016 ;;      Locals:         0       0     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;      Totals:         0       2     252       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1019 ;;Total ram usage:      254 bytes
  1020 ;; Hardware stack levels required when called: 13
  1021 ;; This function calls:
  1022 ;;		_I2C_2_Master_Init
  1023 ;;		_Interrupts_init
  1024 ;;		_LEDSon_init
  1025 ;;		_card_response
  1026 ;;		_clear_read_calibration
  1027 ;;		_collect_avg_readings
  1028 ;;		_color_click_init
  1029 ;;		_color_read_Clear
  1030 ;;		_fullSpeedAhead
  1031 ;;		_initDCmotorsPWM
  1032 ;;		_initUSART4
  1033 ;;		_reverseFullSpeed
  1034 ;;		_sendStringSerial4
  1035 ;;		_setMotorPWM
  1036 ;;		_sprintf
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		Startup code after reset
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text0
  1044   001272                     __ptext0:
  1045                           	callstack 0
  1046   001272                     _main:
  1047                           	callstack 18
  1048   001272                     
  1049                           ;main.c: 26:     LEDSon_init();
  1050   001272  ECAB  F018         	call	_LEDSon_init	;wreg free
  1051   001276                     
  1052                           ;main.c: 27:     I2C_2_Master_Init();
  1053   001276  EC5B  F018         	call	_I2C_2_Master_Init	;wreg free
  1054   00127A                     
  1055                           ;main.c: 28:     color_click_init();
  1056   00127A  EC14  F018         	call	_color_click_init	;wreg free
  1057   00127E                     
  1058                           ;main.c: 29:     initDCmotorsPWM();
  1059   00127E  EC2B  F015         	call	_initDCmotorsPWM	;wreg free
  1060   001282                     
  1061                           ;main.c: 30:     initUSART4();
  1062   001282  ECBC  F018         	call	_initUSART4	;wreg free
  1063   001286                     
  1064                           ;main.c: 31:     Interrupts_init();
  1065   001286  ECF5  F017         	call	_Interrupts_init	;wreg free
  1066   00128A                     
  1067                           ;main.c: 33:     TRISFbits.TRISF2=1;
  1068   00128A  8486               	bsf	134,2,c	;volatile
  1069   00128C                     
  1070                           ;main.c: 34:     ANSELFbits.ANSELF2=0;
  1071   00128C  010E               	movlb	14	; () banked
  1072   00128E  95B4               	bcf	180,2,b	;volatile
  1073   001290                     
  1074                           ; BSR set to: 14
  1075                           ;main.c: 42:     unsigned char PWMcycle = T2PR;
  1076   001290  CFBC F1DE          	movff	4028,main@PWMcycle	;volatile
  1077                           
  1078                           ;main.c: 44:     struct DC_motor motorL, motorR;;main.c: 46:     motorL.power=0;
  1079   001294  0E00               	movlw	0
  1080   001296  0101               	movlb	1	; () banked
  1081   001298  6FEA               	movwf	main@motorL& (0+255),b
  1082                           
  1083                           ;main.c: 47:     motorL.direction=1;
  1084   00129A  0E01               	movlw	1
  1085   00129C  6FEB               	movwf	(main@motorL+1)& (0+255),b
  1086                           
  1087                           ;main.c: 48:     motorL.brakemode=1;
  1088   00129E  0E01               	movlw	1
  1089   0012A0  6FEC               	movwf	(main@motorL+2)& (0+255),b
  1090   0012A2                     
  1091                           ; BSR set to: 1
  1092                           ;main.c: 49:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1093   0012A2  0EAA               	movlw	170
  1094   0012A4  6FEF               	movwf	(main@motorL+5)& (0+255),b
  1095   0012A6  0E0F               	movlw	15
  1096   0012A8  6FF0               	movwf	(main@motorL+6)& (0+255),b
  1097   0012AA                     
  1098                           ; BSR set to: 1
  1099                           ;main.c: 50:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1100   0012AA  0EA6               	movlw	166
  1101   0012AC  6FF1               	movwf	(main@motorL+7)& (0+255),b
  1102   0012AE  0E0F               	movlw	15
  1103   0012B0  6FF2               	movwf	(main@motorL+8)& (0+255),b
  1104   0012B2                     
  1105                           ; BSR set to: 1
  1106                           ;main.c: 51:     motorL.PWMperiod=PWMcycle;
  1107   0012B2  C1DE  F1ED         	movff	main@PWMcycle,main@motorL+3
  1108   0012B6  6BEE               	clrf	(main@motorL+4)& (0+255),b
  1109                           
  1110                           ;main.c: 53:     motorR.power=0;
  1111   0012B8  0E00               	movlw	0
  1112   0012BA  6FF3               	movwf	main@motorR& (0+255),b
  1113                           
  1114                           ;main.c: 54:     motorR.direction=1;
  1115   0012BC  0E01               	movlw	1
  1116   0012BE  6FF4               	movwf	(main@motorR+1)& (0+255),b
  1117                           
  1118                           ;main.c: 55:     motorR.brakemode=1;
  1119   0012C0  0E01               	movlw	1
  1120   0012C2  6FF5               	movwf	(main@motorR+2)& (0+255),b
  1121   0012C4                     
  1122                           ; BSR set to: 1
  1123                           ;main.c: 56:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1124   0012C4  0E25               	movlw	37
  1125   0012C6  6FF8               	movwf	(main@motorR+5)& (0+255),b
  1126   0012C8  0E0F               	movlw	15
  1127   0012CA  6FF9               	movwf	(main@motorR+6)& (0+255),b
  1128   0012CC                     
  1129                           ; BSR set to: 1
  1130                           ;main.c: 57:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1131   0012CC  0E21               	movlw	33
  1132   0012CE  6FFA               	movwf	(main@motorR+7)& (0+255),b
  1133   0012D0  0E0F               	movlw	15
  1134   0012D2  6FFB               	movwf	(main@motorR+8)& (0+255),b
  1135   0012D4                     
  1136                           ; BSR set to: 1
  1137                           ;main.c: 58:     motorR.PWMperiod=PWMcycle;
  1138   0012D4  C1DE  F1F6         	movff	main@PWMcycle,main@motorR+3
  1139   0012D8  6BF7               	clrf	(main@motorR+4)& (0+255),b
  1140   0012DA                     
  1141                           ; BSR set to: 1
  1142                           ;main.c: 60:     setMotorPWM(&motorL);
  1143   0012DA  0EEA               	movlw	low main@motorL
  1144   0012DC  6E12               	movwf	setMotorPWM@m^0,c
  1145   0012DE  0E01               	movlw	high main@motorL
  1146   0012E0  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1147   0012E2  ECBD  F00F         	call	_setMotorPWM	;wreg free
  1148   0012E6                     
  1149                           ;main.c: 61:     setMotorPWM(&motorR);
  1150   0012E6  0EF3               	movlw	low main@motorR
  1151   0012E8  6E12               	movwf	setMotorPWM@m^0,c
  1152   0012EA  0E01               	movlw	high main@motorR
  1153   0012EC  6E13               	movwf	(setMotorPWM@m+1)^0,c
  1154   0012EE  ECBD  F00F         	call	_setMotorPWM	;wreg free
  1155                           
  1156                           ;main.c: 66:     char buf[150];;main.c: 68:     unsigned int red_read = 0;
  1157   0012F2  0E00               	movlw	0
  1158   0012F4  0101               	movlb	1	; () banked
  1159   0012F6  6FE2               	movwf	(main@red_read+1)& (0+255),b
  1160   0012F8  0E00               	movlw	0
  1161   0012FA  6FE1               	movwf	main@red_read& (0+255),b
  1162                           
  1163                           ;main.c: 69:     unsigned int green_read = 0;
  1164   0012FC  0E00               	movlw	0
  1165   0012FE  6FE4               	movwf	(main@green_read+1)& (0+255),b
  1166   001300  0E00               	movlw	0
  1167   001302  6FE3               	movwf	main@green_read& (0+255),b
  1168                           
  1169                           ;main.c: 70:     unsigned int blue_read = 0;
  1170   001304  0E00               	movlw	0
  1171   001306  6FE6               	movwf	(main@blue_read+1)& (0+255),b
  1172   001308  0E00               	movlw	0
  1173   00130A  6FE5               	movwf	main@blue_read& (0+255),b
  1174                           
  1175                           ;main.c: 71:     unsigned int clear_read = 0;
  1176   00130C  0E00               	movlw	0
  1177   00130E  6FE9               	movwf	(main@clear_read+1)& (0+255),b
  1178   001310  0E00               	movlw	0
  1179   001312  6FE8               	movwf	main@clear_read& (0+255),b
  1180                           
  1181                           ;main.c: 72:     unsigned int clear_read_check = 0;
  1182   001314  0E00               	movlw	0
  1183   001316  6FE0               	movwf	(main@clear_read_check+1)& (0+255),b
  1184   001318  0E00               	movlw	0
  1185   00131A  6FDF               	movwf	main@clear_read_check& (0+255),b
  1186   00131C                     
  1187                           ; BSR set to: 1
  1188                           ;main.c: 73:     unsigned int expected_values[4][9];;main.c: 74:     unsigned int expect
      +                          ed_values_easy[4][5];;main.c: 75:     unsigned int ReturnHomeArray[2][30];;main.c: 85:  
      +                             LATDbits.LATD4 = 0;
  1189   00131C  987C               	bcf	124,4,c	;volatile
  1190                           
  1191                           ;main.c: 86:     for(colour i = RED; i<= BLACK; i++){
  1192   00131E  0E01               	movlw	1
  1193   001320  6FE7               	movwf	main@i& (0+255),b
  1194   001322  EF94  F009         	goto	l238
  1195   001326                     l239:
  1196                           
  1197                           ;main.c: 88:             LATDbits.LATD4 = 1;
  1198   001326  887C               	bsf	124,4,c	;volatile
  1199   001328                     l238:
  1200                           
  1201                           ;main.c: 87:         while(PORTFbits.RF2){
  1202   001328  B48E               	btfsc	142,2,c	;volatile
  1203   00132A  EF99  F009         	goto	u2011
  1204   00132E  EF9B  F009         	goto	u2010
  1205   001332                     u2011:
  1206   001332  EF93  F009         	goto	l239
  1207   001336                     u2010:
  1208   001336                     
  1209                           ;main.c: 90:         LATDbits.LATD4 = 0;
  1210   001336  987C               	bcf	124,4,c	;volatile
  1211   001338                     
  1212                           ;main.c: 91:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1213   001338  0E29               	movlw	41
  1214   00133A  0100               	movlb	0	; () banked
  1215   00133C  6FED               	movwf	(??_main+1)& (0+255),b
  1216   00133E  0E96               	movlw	150
  1217   001340  6FEC               	movwf	??_main& (0+255),b
  1218   001342  0E7F               	movlw	127
  1219   001344                     u2067:
  1220   001344  2EE8               	decfsz	wreg,f,c
  1221   001346  D7FE               	bra	u2067
  1222   001348  2FEC               	decfsz	??_main& (0+255),f,b
  1223   00134A  D7FC               	bra	u2067
  1224   00134C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1225   00134E  D7FA               	bra	u2067
  1226   001350                     
  1227                           ;main.c: 92:         stop(&motorL, &motorR);
  1228   001350  0EEA               	movlw	low main@motorL
  1229   001352  6E18               	movwf	stop@mL^0,c
  1230   001354  0E01               	movlw	high main@motorL
  1231   001356  6E19               	movwf	(stop@mL+1)^0,c
  1232   001358  0EF3               	movlw	low main@motorR
  1233   00135A  6E1A               	movwf	stop@mR^0,c
  1234   00135C  0E01               	movlw	high main@motorR
  1235   00135E  6E1B               	movwf	(stop@mR+1)^0,c
  1236   001360  EC6F  F015         	call	_stop	;wreg free
  1237   001364                     
  1238                           ;main.c: 93:         _delay((unsigned long)((20)*(64000000/4000.0)));
  1239   001364  0E02               	movlw	2
  1240   001366  0100               	movlb	0	; () banked
  1241   001368  6FED               	movwf	(??_main+1)& (0+255),b
  1242   00136A  0EA0               	movlw	160
  1243   00136C  6FEC               	movwf	??_main& (0+255),b
  1244   00136E  0E92               	movlw	146
  1245   001370                     u2077:
  1246   001370  2EE8               	decfsz	wreg,f,c
  1247   001372  D7FE               	bra	u2077
  1248   001374  2FEC               	decfsz	??_main& (0+255),f,b
  1249   001376  D7FC               	bra	u2077
  1250   001378  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1251   00137A  D7FA               	bra	u2077
  1252   00137C  F000               	nop	
  1253                           
  1254                           ;main.c: 94:         reverseFullSpeed(&motorL, &motorR);
  1255   00137E  0EEA               	movlw	low main@motorL
  1256   001380  6E18               	movwf	reverseFullSpeed@mL^0,c
  1257   001382  0E01               	movlw	high main@motorL
  1258   001384  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1259   001386  0EF3               	movlw	low main@motorR
  1260   001388  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1261   00138A  0E01               	movlw	high main@motorR
  1262   00138C  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1263   00138E  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  1264   001392                     
  1265                           ;main.c: 95:         _delay((unsigned long)((150)*(64000000/4000.0)));
  1266   001392  0E0D               	movlw	13
  1267   001394  0100               	movlb	0	; () banked
  1268   001396  6FED               	movwf	(??_main+1)& (0+255),b
  1269   001398  0E2D               	movlw	45
  1270   00139A  6FEC               	movwf	??_main& (0+255),b
  1271   00139C  0ED7               	movlw	215
  1272   00139E                     u2087:
  1273   00139E  2EE8               	decfsz	wreg,f,c
  1274   0013A0  D7FE               	bra	u2087
  1275   0013A2  2FEC               	decfsz	??_main& (0+255),f,b
  1276   0013A4  D7FC               	bra	u2087
  1277   0013A6  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1278   0013A8  D7FA               	bra	u2087
  1279   0013AA  D000               	nop2	
  1280   0013AC                     
  1281                           ;main.c: 96:         stop(&motorL, &motorR);
  1282   0013AC  0EEA               	movlw	low main@motorL
  1283   0013AE  6E18               	movwf	stop@mL^0,c
  1284   0013B0  0E01               	movlw	high main@motorL
  1285   0013B2  6E19               	movwf	(stop@mL+1)^0,c
  1286   0013B4  0EF3               	movlw	low main@motorR
  1287   0013B6  6E1A               	movwf	stop@mR^0,c
  1288   0013B8  0E01               	movlw	high main@motorR
  1289   0013BA  6E1B               	movwf	(stop@mR+1)^0,c
  1290   0013BC  EC6F  F015         	call	_stop	;wreg free
  1291   0013C0                     
  1292                           ;main.c: 97:         collect_avg_readings(&clear_read, &red_read, &green_read, &blue_rea
      +                          d);
  1293   0013C0  0EE8               	movlw	low main@clear_read
  1294   0013C2  6E10               	movwf	collect_avg_readings@clear_read^0,c
  1295   0013C4  0E01               	movlw	high main@clear_read
  1296   0013C6  6E11               	movwf	(collect_avg_readings@clear_read+1)^0,c
  1297   0013C8  0EE1               	movlw	low main@red_read
  1298   0013CA  6E12               	movwf	collect_avg_readings@red_read^0,c
  1299   0013CC  0E01               	movlw	high main@red_read
  1300   0013CE  6E13               	movwf	(collect_avg_readings@red_read+1)^0,c
  1301   0013D0  0EE3               	movlw	low main@green_read
  1302   0013D2  6E14               	movwf	collect_avg_readings@green_read^0,c
  1303   0013D4  0E01               	movlw	high main@green_read
  1304   0013D6  6E15               	movwf	(collect_avg_readings@green_read+1)^0,c
  1305   0013D8  0EE5               	movlw	low main@blue_read
  1306   0013DA  6E16               	movwf	collect_avg_readings@blue_read^0,c
  1307   0013DC  0E01               	movlw	high main@blue_read
  1308   0013DE  6E17               	movwf	(collect_avg_readings@blue_read+1)^0,c
  1309   0013E0  ECBC  F00D         	call	_collect_avg_readings	;wreg free
  1310   0013E4                     
  1311                           ;main.c: 98:         expected_values[CLEAR][i] = clear_read;
  1312   0013E4  0101               	movlb	1	; () banked
  1313   0013E6  51E7               	movf	main@i& (0+255),w,b
  1314   0013E8  0D02               	mullw	2
  1315   0013EA  0E96               	movlw	low main@expected_values
  1316   0013EC  24F3               	addwf	243,w,c
  1317   0013EE  6ED9               	movwf	fsr2l,c
  1318   0013F0  0E01               	movlw	high main@expected_values
  1319   0013F2  20F4               	addwfc	prodh,w,c
  1320   0013F4  6EDA               	movwf	fsr2h,c
  1321   0013F6  C1E8  FFDE         	movff	main@clear_read,postinc2
  1322   0013FA  C1E9  FFDD         	movff	main@clear_read+1,postdec2
  1323   0013FE                     
  1324                           ; BSR set to: 1
  1325                           ;main.c: 99:         expected_values[RED][i] = red_read;
  1326   0013FE  51E7               	movf	main@i& (0+255),w,b
  1327   001400  0D02               	mullw	2
  1328   001402  0E12               	movlw	18
  1329   001404  26F3               	addwf	243,f,c
  1330   001406  0E00               	movlw	0
  1331   001408  22F4               	addwfc	244,f,c
  1332   00140A  0E96               	movlw	low main@expected_values
  1333   00140C  24F3               	addwf	243,w,c
  1334   00140E  6ED9               	movwf	fsr2l,c
  1335   001410  0E01               	movlw	high main@expected_values
  1336   001412  20F4               	addwfc	prodh,w,c
  1337   001414  6EDA               	movwf	fsr2h,c
  1338   001416  C1E1  FFDE         	movff	main@red_read,postinc2
  1339   00141A  C1E2  FFDD         	movff	main@red_read+1,postdec2
  1340   00141E                     
  1341                           ; BSR set to: 1
  1342                           ;main.c: 100:         expected_values[GREEN][i] = green_read;
  1343   00141E  51E7               	movf	main@i& (0+255),w,b
  1344   001420  0D02               	mullw	2
  1345   001422  0E24               	movlw	36
  1346   001424  26F3               	addwf	243,f,c
  1347   001426  0E00               	movlw	0
  1348   001428  22F4               	addwfc	244,f,c
  1349   00142A  0E96               	movlw	low main@expected_values
  1350   00142C  24F3               	addwf	243,w,c
  1351   00142E  6ED9               	movwf	fsr2l,c
  1352   001430  0E01               	movlw	high main@expected_values
  1353   001432  20F4               	addwfc	prodh,w,c
  1354   001434  6EDA               	movwf	fsr2h,c
  1355   001436  C1E3  FFDE         	movff	main@green_read,postinc2
  1356   00143A  C1E4  FFDD         	movff	main@green_read+1,postdec2
  1357   00143E                     
  1358                           ; BSR set to: 1
  1359                           ;main.c: 101:         expected_values[BLUE][i] = blue_read;
  1360   00143E  51E7               	movf	main@i& (0+255),w,b
  1361   001440  0D02               	mullw	2
  1362   001442  0E36               	movlw	54
  1363   001444  26F3               	addwf	243,f,c
  1364   001446  0E00               	movlw	0
  1365   001448  22F4               	addwfc	244,f,c
  1366   00144A  0E96               	movlw	low main@expected_values
  1367   00144C  24F3               	addwf	243,w,c
  1368   00144E  6ED9               	movwf	fsr2l,c
  1369   001450  0E01               	movlw	high main@expected_values
  1370   001452  20F4               	addwfc	prodh,w,c
  1371   001454  6EDA               	movwf	fsr2h,c
  1372   001456  C1E5  FFDE         	movff	main@blue_read,postinc2
  1373   00145A  C1E6  FFDD         	movff	main@blue_read+1,postdec2
  1374   00145E                     
  1375                           ; BSR set to: 1
  1376                           ;main.c: 102:         sprintf(buf, "\n EXPECTED: Clear %d,R %d, G %d, B %d  CARD: %d \n"
      +                          , clear_read, red_read, green_read, blue_read, i);
  1377   00145E  0E00               	movlw	low main@buf
  1378   001460  0100               	movlb	0	; () banked
  1379   001462  6F66               	movwf	sprintf@s& (0+255),b
  1380   001464  0E01               	movlw	high main@buf
  1381   001466  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1382   001468  0E01               	movlw	low STR_1
  1383   00146A  6F68               	movwf	sprintf@fmt& (0+255),b
  1384   00146C  0E0E               	movlw	high STR_1
  1385   00146E  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1386   001470  C1E8  F06A         	movff	main@clear_read,?_sprintf+4
  1387   001474  C1E9  F06B         	movff	main@clear_read+1,?_sprintf+5
  1388   001478  C1E1  F06C         	movff	main@red_read,?_sprintf+6
  1389   00147C  C1E2  F06D         	movff	main@red_read+1,?_sprintf+7
  1390   001480  C1E3  F06E         	movff	main@green_read,?_sprintf+8
  1391   001484  C1E4  F06F         	movff	main@green_read+1,?_sprintf+9
  1392   001488  C1E5  F070         	movff	main@blue_read,?_sprintf+10
  1393   00148C  C1E6  F071         	movff	main@blue_read+1,?_sprintf+11
  1394   001490  C1E7  F072         	movff	main@i,?_sprintf+12
  1395   001494  6B73               	clrf	(?_sprintf+13)& (0+255),b
  1396   001496  ECC9  F016         	call	_sprintf	;wreg free
  1397   00149A                     
  1398                           ;main.c: 103:         sendStringSerial4(buf);
  1399   00149A  0E00               	movlw	low main@buf
  1400   00149C  6E06               	movwf	sendStringSerial4@string^0,c
  1401   00149E  0E01               	movlw	high main@buf
  1402   0014A0  6E07               	movwf	(sendStringSerial4@string+1)^0,c
  1403   0014A2  EC2E  F018         	call	_sendStringSerial4	;wreg free
  1404   0014A6                     
  1405                           ;main.c: 104:     }
  1406   0014A6  0101               	movlb	1	; () banked
  1407   0014A8  2BE7               	incf	main@i& (0+255),f,b
  1408   0014AA                     
  1409                           ; BSR set to: 1
  1410   0014AA  0E09               	movlw	9
  1411   0014AC  65E7               	cpfsgt	main@i& (0+255),b
  1412   0014AE  EF5B  F00A         	goto	u2021
  1413   0014B2  EF5D  F00A         	goto	u2020
  1414   0014B6                     u2021:
  1415   0014B6  EF94  F009         	goto	l238
  1416   0014BA                     u2020:
  1417   0014BA                     
  1418                           ; BSR set to: 1
  1419                           ;main.c: 105:     LATDbits.LATD4 = 1;
  1420   0014BA  887C               	bsf	124,4,c	;volatile
  1421                           
  1422                           ;main.c: 106:     while(PORTFbits.RF2){LATDbits.LATD4 = 0;}
  1423   0014BC  EF61  F00A         	goto	l241
  1424   0014C0                     l242:
  1425   0014C0  987C               	bcf	124,4,c	;volatile
  1426   0014C2                     l241:
  1427   0014C2  B48E               	btfsc	142,2,c	;volatile
  1428   0014C4  EF66  F00A         	goto	u2031
  1429   0014C8  EF68  F00A         	goto	u2030
  1430   0014CC                     u2031:
  1431   0014CC  EF60  F00A         	goto	l242
  1432   0014D0                     u2030:
  1433   0014D0                     
  1434                           ;main.c: 107:     clear_read_calibration(buf, &clear_read, &clear_read_check);
  1435   0014D0  0E00               	movlw	low main@buf
  1436   0014D2  0100               	movlb	0	; () banked
  1437   0014D4  6F81               	movwf	clear_read_calibration@buf& (0+255),b
  1438   0014D6  0E01               	movlw	high main@buf
  1439   0014D8  6F82               	movwf	(clear_read_calibration@buf+1)& (0+255),b
  1440   0014DA  0EE8               	movlw	low main@clear_read
  1441   0014DC  6F83               	movwf	clear_read_calibration@clear_read& (0+255),b
  1442   0014DE  0E01               	movlw	high main@clear_read
  1443   0014E0  6F84               	movwf	(clear_read_calibration@clear_read+1)& (0+255),b
  1444   0014E2  0EDF               	movlw	low main@clear_read_check
  1445   0014E4  6F85               	movwf	clear_read_calibration@clear_read_check& (0+255),b
  1446   0014E6  0E01               	movlw	high main@clear_read_check
  1447   0014E8  6F86               	movwf	(clear_read_calibration@clear_read_check+1)& (0+255),b
  1448   0014EA  EC7B  F012         	call	_clear_read_calibration	;wreg free
  1449   0014EE                     l244:
  1450   0014EE  B48E               	btfsc	142,2,c	;volatile
  1451   0014F0  EF7C  F00A         	goto	u2041
  1452   0014F4  EF7E  F00A         	goto	u2040
  1453   0014F8                     u2041:
  1454   0014F8  EF77  F00A         	goto	l244
  1455   0014FC                     u2040:
  1456   0014FC                     l3928:
  1457                           
  1458                           ;main.c: 127:     fullSpeedAhead(&motorL, &motorR);
  1459   0014FC  0EEA               	movlw	low main@motorL
  1460   0014FE  6E18               	movwf	fullSpeedAhead@mL^0,c
  1461   001500  0E01               	movlw	high main@motorL
  1462   001502  6E19               	movwf	(fullSpeedAhead@mL+1)^0,c
  1463   001504  0EF3               	movlw	low main@motorR
  1464   001506  6E1A               	movwf	fullSpeedAhead@mR^0,c
  1465   001508  0E01               	movlw	high main@motorR
  1466   00150A  6E1B               	movwf	(fullSpeedAhead@mR+1)^0,c
  1467   00150C  EC9F  F014         	call	_fullSpeedAhead	;wreg free
  1468   001510                     l3930:
  1469                           
  1470                           ;main.c: 130:         clear_read = color_read_Clear();
  1471   001510  EC42  F017         	call	_color_read_Clear	;wreg free
  1472   001514  C009  F1E8         	movff	?_color_read_Clear,main@clear_read
  1473   001518  C00A  F1E9         	movff	?_color_read_Clear+1,main@clear_read+1
  1474   00151C                     
  1475                           ;main.c: 131:         if (clear_read > clear_read_check){
  1476   00151C  0101               	movlb	1	; () banked
  1477   00151E  51E8               	movf	main@clear_read& (0+255),w,b
  1478   001520  5DDF               	subwf	main@clear_read_check& (0+255),w,b
  1479   001522  51E9               	movf	(main@clear_read+1)& (0+255),w,b
  1480   001524  59E0               	subwfb	(main@clear_read_check+1)& (0+255),w,b
  1481   001526  B0D8               	btfsc	status,0,c
  1482   001528  EF98  F00A         	goto	u2051
  1483   00152C  EF9A  F00A         	goto	u2050
  1484   001530                     u2051:
  1485   001530  EF88  F00A         	goto	l3930
  1486   001534                     u2050:
  1487   001534                     
  1488                           ; BSR set to: 1
  1489                           ;main.c: 132:             stop(&motorL, &motorR);
  1490   001534  0EEA               	movlw	low main@motorL
  1491   001536  6E18               	movwf	stop@mL^0,c
  1492   001538  0E01               	movlw	high main@motorL
  1493   00153A  6E19               	movwf	(stop@mL+1)^0,c
  1494   00153C  0EF3               	movlw	low main@motorR
  1495   00153E  6E1A               	movwf	stop@mR^0,c
  1496   001540  0E01               	movlw	high main@motorR
  1497   001542  6E1B               	movwf	(stop@mR+1)^0,c
  1498   001544  EC6F  F015         	call	_stop	;wreg free
  1499   001548                     
  1500                           ;main.c: 133:             _delay((unsigned long)((20)*(64000000/4000.0)));
  1501   001548  0E02               	movlw	2
  1502   00154A  0100               	movlb	0	; () banked
  1503   00154C  6FED               	movwf	(??_main+1)& (0+255),b
  1504   00154E  0EA0               	movlw	160
  1505   001550  6FEC               	movwf	??_main& (0+255),b
  1506   001552  0E92               	movlw	146
  1507   001554                     u2097:
  1508   001554  2EE8               	decfsz	wreg,f,c
  1509   001556  D7FE               	bra	u2097
  1510   001558  2FEC               	decfsz	??_main& (0+255),f,b
  1511   00155A  D7FC               	bra	u2097
  1512   00155C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1513   00155E  D7FA               	bra	u2097
  1514   001560  F000               	nop	
  1515   001562                     
  1516                           ;main.c: 134:             reverseFullSpeed(&motorL, &motorR);
  1517   001562  0EEA               	movlw	low main@motorL
  1518   001564  6E18               	movwf	reverseFullSpeed@mL^0,c
  1519   001566  0E01               	movlw	high main@motorL
  1520   001568  6E19               	movwf	(reverseFullSpeed@mL+1)^0,c
  1521   00156A  0EF3               	movlw	low main@motorR
  1522   00156C  6E1A               	movwf	reverseFullSpeed@mR^0,c
  1523   00156E  0E01               	movlw	high main@motorR
  1524   001570  6E1B               	movwf	(reverseFullSpeed@mR+1)^0,c
  1525   001572  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  1526                           
  1527                           ;main.c: 135:             _delay((unsigned long)((150)*(64000000/4000.0)));
  1528   001576  0E0D               	movlw	13
  1529   001578  0100               	movlb	0	; () banked
  1530   00157A  6FED               	movwf	(??_main+1)& (0+255),b
  1531   00157C  0E2D               	movlw	45
  1532   00157E  6FEC               	movwf	??_main& (0+255),b
  1533   001580  0ED7               	movlw	215
  1534   001582                     u2107:
  1535   001582  2EE8               	decfsz	wreg,f,c
  1536   001584  D7FE               	bra	u2107
  1537   001586  2FEC               	decfsz	??_main& (0+255),f,b
  1538   001588  D7FC               	bra	u2107
  1539   00158A  2FED               	decfsz	(??_main+1)& (0+255),f,b
  1540   00158C  D7FA               	bra	u2107
  1541   00158E  D000               	nop2	
  1542   001590                     
  1543                           ;main.c: 136:             stop(&motorL, &motorR);
  1544   001590  0EEA               	movlw	low main@motorL
  1545   001592  6E18               	movwf	stop@mL^0,c
  1546   001594  0E01               	movlw	high main@motorL
  1547   001596  6E19               	movwf	(stop@mL+1)^0,c
  1548   001598  0EF3               	movlw	low main@motorR
  1549   00159A  6E1A               	movwf	stop@mR^0,c
  1550   00159C  0E01               	movlw	high main@motorR
  1551   00159E  6E1B               	movwf	(stop@mR+1)^0,c
  1552   0015A0  EC6F  F015         	call	_stop	;wreg free
  1553   0015A4                     
  1554                           ;main.c: 137:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1555   0015A4  0E2A               	movlw	42
  1556   0015A6  0100               	movlb	0	; () banked
  1557   0015A8  6FEC               	movwf	??_main& (0+255),b
  1558   0015AA  0E8D               	movlw	141
  1559   0015AC                     u2117:
  1560   0015AC  2EE8               	decfsz	wreg,f,c
  1561   0015AE  D7FE               	bra	u2117
  1562   0015B0  2FEC               	decfsz	??_main& (0+255),f,b
  1563   0015B2  D7FC               	bra	u2117
  1564   0015B4  D000               	nop2	
  1565   0015B6                     
  1566                           ;main.c: 138:             card_response(buf, &clear_read, &red_read, &green_read, &blue_
      +                          read, expected_values, &motorL, &motorR);
  1567   0015B6  0E00               	movlw	low main@buf
  1568   0015B8  0100               	movlb	0	; () banked
  1569   0015BA  6F81               	movwf	card_response@buf& (0+255),b
  1570   0015BC  0E01               	movlw	high main@buf
  1571   0015BE  6F82               	movwf	(card_response@buf+1)& (0+255),b
  1572   0015C0  0EE8               	movlw	low main@clear_read
  1573   0015C2  6F83               	movwf	card_response@clear_read& (0+255),b
  1574   0015C4  0E01               	movlw	high main@clear_read
  1575   0015C6  6F84               	movwf	(card_response@clear_read+1)& (0+255),b
  1576   0015C8  0EE1               	movlw	low main@red_read
  1577   0015CA  6F85               	movwf	card_response@red_read& (0+255),b
  1578   0015CC  0E01               	movlw	high main@red_read
  1579   0015CE  6F86               	movwf	(card_response@red_read+1)& (0+255),b
  1580   0015D0  0EE3               	movlw	low main@green_read
  1581   0015D2  6F87               	movwf	card_response@green_read& (0+255),b
  1582   0015D4  0E01               	movlw	high main@green_read
  1583   0015D6  6F88               	movwf	(card_response@green_read+1)& (0+255),b
  1584   0015D8  0EE5               	movlw	low main@blue_read
  1585   0015DA  6F89               	movwf	card_response@blue_read& (0+255),b
  1586   0015DC  0E01               	movlw	high main@blue_read
  1587   0015DE  6F8A               	movwf	(card_response@blue_read+1)& (0+255),b
  1588   0015E0  0E96               	movlw	low main@expected_values
  1589   0015E2  6F8B               	movwf	card_response@expected_values& (0+255),b
  1590   0015E4  0E01               	movlw	high main@expected_values
  1591   0015E6  6F8C               	movwf	(card_response@expected_values+1)& (0+255),b
  1592   0015E8  0EEA               	movlw	low main@motorL
  1593   0015EA  6F8D               	movwf	card_response@mL& (0+255),b
  1594   0015EC  0E01               	movlw	high main@motorL
  1595   0015EE  6F8E               	movwf	(card_response@mL+1)& (0+255),b
  1596   0015F0  0EF3               	movlw	low main@motorR
  1597   0015F2  6F8F               	movwf	card_response@mR& (0+255),b
  1598   0015F4  0E01               	movlw	high main@motorR
  1599   0015F6  6F90               	movwf	(card_response@mR+1)& (0+255),b
  1600   0015F8  ECD4  F011         	call	_card_response	;wreg free
  1601   0015FC                     
  1602                           ;main.c: 139:             _delay((unsigned long)((2)*(64000000/4000.0)));
  1603   0015FC  0E2A               	movlw	42
  1604   0015FE  0100               	movlb	0	; () banked
  1605   001600  6FEC               	movwf	??_main& (0+255),b
  1606   001602  0E8D               	movlw	141
  1607   001604                     u2127:
  1608   001604  2EE8               	decfsz	wreg,f,c
  1609   001606  D7FE               	bra	u2127
  1610   001608  2FEC               	decfsz	??_main& (0+255),f,b
  1611   00160A  D7FC               	bra	u2127
  1612   00160C  D000               	nop2	
  1613   00160E  EF7E  F00A         	goto	l3928
  1614   001612  EF3B  F000         	goto	start
  1615   001616                     __end_of_main:
  1616                           	callstack 0
  1617                           
  1618 ;; *************** function _initUSART4 *****************
  1619 ;; Defined at:
  1620 ;;		line 6 in file "serial.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used: 1
  1640 ;; Hardware stack levels required when called: 4
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text1
  1649   003178                     __ptext1:
  1650                           	callstack 0
  1651   003178                     _initUSART4:
  1652                           	callstack 26
  1653   003178                     
  1654                           ;serial.c: 10:     RC0PPS = 0x12;
  1655   003178  0E12               	movlw	18
  1656   00317A  010E               	movlb	14	; () banked
  1657   00317C  6F62               	movwf	98,b	;volatile
  1658                           
  1659                           ;serial.c: 11:     RX4PPS = 0x11;
  1660   00317E  0E11               	movlw	17
  1661   003180  6F15               	movwf	21,b	;volatile
  1662   003182                     
  1663                           ; BSR set to: 14
  1664                           ;serial.c: 12:     TRISCbits.TRISC1 = 1;
  1665   003182  8283               	bsf	131,1,c	;volatile
  1666   003184                     
  1667                           ; BSR set to: 14
  1668                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1669   003184  97E9               	bcf	233,3,b	;volatile
  1670   003186                     
  1671                           ; BSR set to: 14
  1672                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1673   003186  95E8               	bcf	232,2,b	;volatile
  1674                           
  1675                           ;serial.c: 17:     SP4BRGL = 51;
  1676   003188  0E33               	movlw	51
  1677   00318A  6FE5               	movwf	229,b	;volatile
  1678                           
  1679                           ;serial.c: 18:     SP4BRGH = 0;
  1680   00318C  0E00               	movlw	0
  1681   00318E  6FE6               	movwf	230,b	;volatile
  1682   003190                     
  1683                           ; BSR set to: 14
  1684                           ;serial.c: 20:     RC4STAbits.CREN = 1;
  1685   003190  89E7               	bsf	231,4,b	;volatile
  1686   003192                     
  1687                           ; BSR set to: 14
  1688                           ;serial.c: 21:     TX4STAbits.TXEN = 1;
  1689   003192  8BE8               	bsf	232,5,b	;volatile
  1690   003194                     
  1691                           ; BSR set to: 14
  1692                           ;serial.c: 22:     RC4STAbits.SPEN = 1;
  1693   003194  8FE7               	bsf	231,7,b	;volatile
  1694   003196                     
  1695                           ; BSR set to: 14
  1696   003196  0012               	return		;funcret
  1697   003198                     __end_of_initUSART4:
  1698                           	callstack 0
  1699                           
  1700 ;; *************** function _initDCmotorsPWM *****************
  1701 ;; Defined at:
  1702 ;;		line 6 in file "dc_motor.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used: 1
  1722 ;; Hardware stack levels required when called: 4
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text2
  1731   002A56                     __ptext2:
  1732                           	callstack 0
  1733   002A56                     _initDCmotorsPWM:
  1734                           	callstack 26
  1735   002A56                     
  1736                           ;dc_motor.c: 8:     TRISEbits.TRISE2=0;
  1737   002A56  9485               	bcf	133,2,c	;volatile
  1738                           
  1739                           ;dc_motor.c: 9:     TRISEbits.TRISE4=0;
  1740   002A58  9885               	bcf	133,4,c	;volatile
  1741                           
  1742                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
  1743   002A5A  9E83               	bcf	131,7,c	;volatile
  1744                           
  1745                           ;dc_motor.c: 11:     TRISGbits.TRISG6=0;
  1746   002A5C  9C87               	bcf	135,6,c	;volatile
  1747   002A5E                     
  1748                           ;dc_motor.c: 14:     RE2PPS=0x05;
  1749   002A5E  0E05               	movlw	5
  1750   002A60  010E               	movlb	14	; () banked
  1751   002A62  6F74               	movwf	116,b	;volatile
  1752                           
  1753                           ;dc_motor.c: 15:     RE4PPS=0x06;
  1754   002A64  0E06               	movlw	6
  1755   002A66  6F76               	movwf	118,b	;volatile
  1756                           
  1757                           ;dc_motor.c: 16:     RC7PPS=0x07;
  1758   002A68  0E07               	movlw	7
  1759   002A6A  6F69               	movwf	105,b	;volatile
  1760                           
  1761                           ;dc_motor.c: 17:     RG6PPS=0x08;
  1762   002A6C  0E08               	movlw	8
  1763   002A6E  6F88               	movwf	136,b	;volatile
  1764                           
  1765                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b100;
  1766   002A70  50BD               	movf	189,w,c	;volatile
  1767   002A72  0B8F               	andlw	-113
  1768   002A74  0940               	iorlw	64
  1769   002A76  6EBD               	movwf	189,c	;volatile
  1770                           
  1771                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1772   002A78  0EE0               	movlw	-32
  1773   002A7A  16BE               	andwf	190,f,c	;volatile
  1774                           
  1775                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1776   002A7C  50BF               	movf	191,w,c	;volatile
  1777   002A7E  0BF0               	andlw	-16
  1778   002A80  0901               	iorlw	1
  1779   002A82  6EBF               	movwf	191,c	;volatile
  1780                           
  1781                           ;dc_motor.c: 26:     T2PR=99;
  1782   002A84  0E63               	movlw	99
  1783   002A86  6EBC               	movwf	188,c	;volatile
  1784   002A88                     
  1785                           ; BSR set to: 14
  1786                           ;dc_motor.c: 27:     T2CONbits.ON=1;
  1787   002A88  8EBD               	bsf	189,7,c	;volatile
  1788                           
  1789                           ;dc_motor.c: 31:     CCPR1H=0;
  1790   002A8A  0E00               	movlw	0
  1791   002A8C  6EAA               	movwf	170,c	;volatile
  1792                           
  1793                           ;dc_motor.c: 32:     CCPR2H=0;
  1794   002A8E  0E00               	movlw	0
  1795   002A90  6EA6               	movwf	166,c	;volatile
  1796                           
  1797                           ;dc_motor.c: 33:     CCPR3H=0;
  1798   002A92  0E00               	movlw	0
  1799   002A94  010F               	movlb	15	; () banked
  1800   002A96  6F25               	movwf	37,b	;volatile
  1801                           
  1802                           ;dc_motor.c: 34:     CCPR4H=0;
  1803   002A98  0E00               	movlw	0
  1804   002A9A  6F21               	movwf	33,b	;volatile
  1805                           
  1806                           ;dc_motor.c: 37:     CCPTMRS0bits.C1TSEL=0;
  1807   002A9C  0EFC               	movlw	-4
  1808   002A9E  16AD               	andwf	173,f,c	;volatile
  1809                           
  1810                           ;dc_motor.c: 38:     CCPTMRS0bits.C2TSEL=0;
  1811   002AA0  0EF3               	movlw	-13
  1812   002AA2  16AD               	andwf	173,f,c	;volatile
  1813                           
  1814                           ;dc_motor.c: 39:     CCPTMRS0bits.C3TSEL=0;
  1815   002AA4  0ECF               	movlw	-49
  1816   002AA6  16AD               	andwf	173,f,c	;volatile
  1817                           
  1818                           ;dc_motor.c: 40:     CCPTMRS0bits.C4TSEL=0;
  1819   002AA8  0E3F               	movlw	-193
  1820   002AAA  16AD               	andwf	173,f,c	;volatile
  1821   002AAC                     
  1822                           ; BSR set to: 15
  1823                           ;dc_motor.c: 43:     CCP1CONbits.FMT=1;
  1824   002AAC  88AB               	bsf	171,4,c	;volatile
  1825                           
  1826                           ;dc_motor.c: 44:     CCP1CONbits.CCP1MODE=0b1100;
  1827   002AAE  50AB               	movf	171,w,c	;volatile
  1828   002AB0  0BF0               	andlw	-16
  1829   002AB2  090C               	iorlw	12
  1830   002AB4  6EAB               	movwf	171,c	;volatile
  1831   002AB6                     
  1832                           ; BSR set to: 15
  1833                           ;dc_motor.c: 45:     CCP1CONbits.EN=1;
  1834   002AB6  8EAB               	bsf	171,7,c	;volatile
  1835   002AB8                     
  1836                           ; BSR set to: 15
  1837                           ;dc_motor.c: 47:     CCP2CONbits.FMT=1;
  1838   002AB8  88A7               	bsf	167,4,c	;volatile
  1839                           
  1840                           ;dc_motor.c: 48:     CCP2CONbits.CCP2MODE=0b1100;
  1841   002ABA  50A7               	movf	167,w,c	;volatile
  1842   002ABC  0BF0               	andlw	-16
  1843   002ABE  090C               	iorlw	12
  1844   002AC0  6EA7               	movwf	167,c	;volatile
  1845   002AC2                     
  1846                           ; BSR set to: 15
  1847                           ;dc_motor.c: 49:     CCP2CONbits.EN=1;
  1848   002AC2  8EA7               	bsf	167,7,c	;volatile
  1849   002AC4                     
  1850                           ; BSR set to: 15
  1851                           ;dc_motor.c: 51:     CCP3CONbits.FMT=1;
  1852   002AC4  8926               	bsf	38,4,b	;volatile
  1853                           
  1854                           ;dc_motor.c: 52:     CCP3CONbits.CCP3MODE=0b1100;
  1855   002AC6  5126               	movf	38,w,b	;volatile
  1856   002AC8  0BF0               	andlw	-16
  1857   002ACA  090C               	iorlw	12
  1858   002ACC  6F26               	movwf	38,b	;volatile
  1859   002ACE                     
  1860                           ; BSR set to: 15
  1861                           ;dc_motor.c: 53:     CCP3CONbits.EN=1;
  1862   002ACE  8F26               	bsf	38,7,b	;volatile
  1863   002AD0                     
  1864                           ; BSR set to: 15
  1865                           ;dc_motor.c: 55:     CCP4CONbits.FMT=1;
  1866   002AD0  8922               	bsf	34,4,b	;volatile
  1867                           
  1868                           ;dc_motor.c: 56:     CCP4CONbits.CCP4MODE=0b1100;
  1869   002AD2  5122               	movf	34,w,b	;volatile
  1870   002AD4  0BF0               	andlw	-16
  1871   002AD6  090C               	iorlw	12
  1872   002AD8  6F22               	movwf	34,b	;volatile
  1873   002ADA                     
  1874                           ; BSR set to: 15
  1875                           ;dc_motor.c: 57:     CCP4CONbits.EN=1;
  1876   002ADA  8F22               	bsf	34,7,b	;volatile
  1877   002ADC                     
  1878                           ; BSR set to: 15
  1879   002ADC  0012               	return		;funcret
  1880   002ADE                     __end_of_initDCmotorsPWM:
  1881                           	callstack 0
  1882                           
  1883 ;; *************** function _fullSpeedAhead *****************
  1884 ;; Defined at:
  1885 ;;		line 131 in file "dc_motor.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1888 ;;		 -> main@motorL(9), 
  1889 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1890 ;;		 -> main@motorR(9), 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  i               2   28[COMRAM] int 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;Total ram usage:        7 bytes
  1907 ;; Hardware stack levels used: 1
  1908 ;; Hardware stack levels required when called: 6
  1909 ;; This function calls:
  1910 ;;		_setMotorPWM
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text3
  1917   00293E                     __ptext3:
  1918                           	callstack 0
  1919   00293E                     _fullSpeedAhead:
  1920                           	callstack 24
  1921   00293E                     
  1922                           ;dc_motor.c: 131: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_
      +                          motor.c: 133:     mL->direction=1;
  1923   00293E  EE20 F001          	lfsr	2,1
  1924   002942  5018               	movf	fullSpeedAhead@mL^0,w,c
  1925   002944  26D9               	addwf	fsr2l,f,c
  1926   002946  5019               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1927   002948  22DA               	addwfc	fsr2h,f,c
  1928   00294A  0E01               	movlw	1
  1929   00294C  6EDF               	movwf	indf2,c
  1930                           
  1931                           ;dc_motor.c: 134:     mR->direction=1;
  1932   00294E  EE20 F001          	lfsr	2,1
  1933   002952  501A               	movf	fullSpeedAhead@mR^0,w,c
  1934   002954  26D9               	addwf	fsr2l,f,c
  1935   002956  501B               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1936   002958  22DA               	addwfc	fsr2h,f,c
  1937   00295A  0E01               	movlw	1
  1938   00295C  6EDF               	movwf	indf2,c
  1939   00295E                     
  1940                           ;dc_motor.c: 135:     for(int i=0;i<60;i+=10){
  1941   00295E  0E00               	movlw	0
  1942   002960  6E1E               	movwf	(fullSpeedAhead@i+1)^0,c
  1943   002962  0E00               	movlw	0
  1944   002964  6E1D               	movwf	fullSpeedAhead@i^0,c
  1945   002966                     l3202:
  1946                           
  1947                           ;dc_motor.c: 136:         mL->power=i;
  1948   002966  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1949   00296A  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1950   00296E  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1951                           
  1952                           ;dc_motor.c: 137:         mR->power=i;
  1953   002972  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1954   002976  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1955   00297A  C01D  FFDF         	movff	fullSpeedAhead@i,indf2
  1956   00297E                     
  1957                           ;dc_motor.c: 138:         setMotorPWM(mL);
  1958   00297E  C018  F012         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1959   002982  C019  F013         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1960   002986  ECBD  F00F         	call	_setMotorPWM	;wreg free
  1961   00298A                     
  1962                           ;dc_motor.c: 139:         setMotorPWM(mR);
  1963   00298A  C01A  F012         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1964   00298E  C01B  F013         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1965   002992  ECBD  F00F         	call	_setMotorPWM	;wreg free
  1966   002996                     
  1967                           ;dc_motor.c: 140:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1968   002996  0ED0               	movlw	208
  1969   002998  6E1C               	movwf	??_fullSpeedAhead^0,c
  1970   00299A  0ECA               	movlw	202
  1971   00299C                     u2137:
  1972   00299C  2EE8               	decfsz	wreg,f,c
  1973   00299E  D7FE               	bra	u2137
  1974   0029A0  2E1C               	decfsz	??_fullSpeedAhead^0,f,c
  1975   0029A2  D7FC               	bra	u2137
  1976   0029A4                     
  1977                           ;dc_motor.c: 141:     }
  1978   0029A4  0E0A               	movlw	10
  1979   0029A6  261D               	addwf	fullSpeedAhead@i^0,f,c
  1980   0029A8  0E00               	movlw	0
  1981   0029AA  221E               	addwfc	(fullSpeedAhead@i+1)^0,f,c
  1982   0029AC  BE1E               	btfsc	(fullSpeedAhead@i+1)^0,7,c
  1983   0029AE  EFE2  F014         	goto	u1481
  1984   0029B2  501E               	movf	(fullSpeedAhead@i+1)^0,w,c
  1985   0029B4  E109               	bnz	u1480
  1986   0029B6  0E3C               	movlw	60
  1987   0029B8  5C1D               	subwf	fullSpeedAhead@i^0,w,c
  1988   0029BA  A0D8               	btfss	status,0,c
  1989   0029BC  EFE2  F014         	goto	u1481
  1990   0029C0  EFE4  F014         	goto	u1480
  1991   0029C4                     u1481:
  1992   0029C4  EFB3  F014         	goto	l3202
  1993   0029C8                     u1480:
  1994   0029C8  0012               	return		;funcret
  1995   0029CA                     __end_of_fullSpeedAhead:
  1996                           	callstack 0
  1997                           
  1998 ;; *************** function _color_click_init *****************
  1999 ;; Defined at:
  2000 ;;		line 5 in file "color.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2018 ;;Total ram usage:        1 bytes
  2019 ;; Hardware stack levels used: 1
  2020 ;; Hardware stack levels required when called: 7
  2021 ;; This function calls:
  2022 ;;		_I2C_2_Master_Init
  2023 ;;		_color_writetoaddr
  2024 ;; This function is called by:
  2025 ;;		_main
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text4
  2030   003028                     __ptext4:
  2031                           	callstack 0
  2032   003028                     _color_click_init:
  2033                           	callstack 23
  2034   003028                     
  2035                           ;color.c: 8:     I2C_2_Master_Init();
  2036   003028  EC5B  F018         	call	_I2C_2_Master_Init	;wreg free
  2037   00302C                     
  2038                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2039   00302C  0E01               	movlw	1
  2040   00302E  6E07               	movwf	color_writetoaddr@value^0,c
  2041   003030  0E00               	movlw	0
  2042   003032  ECCC  F018         	call	_color_writetoaddr
  2043   003036                     
  2044                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2045   003036  0E3F               	movlw	63
  2046   003038  6E09               	movwf	??_color_click_init^0,c
  2047   00303A  0E55               	movlw	85
  2048   00303C                     u2147:
  2049   00303C  2EE8               	decfsz	wreg,f,c
  2050   00303E  D7FE               	bra	u2147
  2051   003040  2E09               	decfsz	??_color_click_init^0,f,c
  2052   003042  D7FC               	bra	u2147
  2053   003044  F000               	nop	
  2054   003046                     
  2055                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2056   003046  0E03               	movlw	3
  2057   003048  6E07               	movwf	color_writetoaddr@value^0,c
  2058   00304A  0E00               	movlw	0
  2059   00304C  ECCC  F018         	call	_color_writetoaddr
  2060   003050                     
  2061                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2062   003050  0ED5               	movlw	213
  2063   003052  6E07               	movwf	color_writetoaddr@value^0,c
  2064   003054  0E01               	movlw	1
  2065   003056  ECCC  F018         	call	_color_writetoaddr
  2066   00305A  0012               	return		;funcret
  2067   00305C                     __end_of_color_click_init:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _I2C_2_Master_Init *****************
  2071 ;; Defined at:
  2072 ;;		line 4 in file "i2c.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 4
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_color_click_init
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text5
  2102   0030B6                     __ptext5:
  2103                           	callstack 0
  2104   0030B6                     _I2C_2_Master_Init:
  2105                           	callstack 25
  2106   0030B6                     
  2107                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2108   0030B6  010E               	movlb	14	; () banked
  2109   0030B8  51D9               	movf	217,w,b	;volatile
  2110   0030BA  0BF0               	andlw	-16
  2111   0030BC  0908               	iorlw	8
  2112   0030BE  6FD9               	movwf	217,b	;volatile
  2113   0030C0                     
  2114                           ; BSR set to: 14
  2115                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2116   0030C0  8BD9               	bsf	217,5,b	;volatile
  2117                           
  2118                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2119   0030C2  0E9F               	movlw	159
  2120   0030C4  6FD6               	movwf	214,b	;volatile
  2121   0030C6                     
  2122                           ; BSR set to: 14
  2123                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2124   0030C6  8A84               	bsf	132,5,c	;volatile
  2125   0030C8                     
  2126                           ; BSR set to: 14
  2127                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2128   0030C8  8C84               	bsf	132,6,c	;volatile
  2129   0030CA                     
  2130                           ; BSR set to: 14
  2131                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2132   0030CA  9BA7               	bcf	167,5,b	;volatile
  2133   0030CC                     
  2134                           ; BSR set to: 14
  2135                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2136   0030CC  9DA7               	bcf	167,6,b	;volatile
  2137                           
  2138                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2139   0030CE  0E1D               	movlw	29
  2140   0030D0  6F1D               	movwf	29,b	;volatile
  2141                           
  2142                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2143   0030D2  0E1E               	movlw	30
  2144   0030D4  6F1C               	movwf	28,b	;volatile
  2145                           
  2146                           ;i2c.c: 18:   RD5PPS=0x1C;
  2147   0030D6  0E1C               	movlw	28
  2148   0030D8  6F6F               	movwf	111,b	;volatile
  2149                           
  2150                           ;i2c.c: 19:   RD6PPS=0x1B;
  2151   0030DA  0E1B               	movlw	27
  2152   0030DC  6F70               	movwf	112,b	;volatile
  2153   0030DE                     
  2154                           ; BSR set to: 14
  2155   0030DE  0012               	return		;funcret
  2156   0030E0                     __end_of_I2C_2_Master_Init:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _clear_read_calibration *****************
  2160 ;; Defined at:
  2161 ;;		line 11 in file "colour_identify.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2164 ;;		 -> main@buf(150), 
  2165 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2166 ;;		 -> main@clear_read(2), 
  2167 ;;  clear_read_c    2   37[BANK0 ] PTR unsigned int 
  2168 ;;		 -> main@clear_read_check(2), 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  i               2   45[BANK0 ] int 
  2171 ;;  i               2   43[BANK0 ] int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2181 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;Total ram usage:       14 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 12
  2188 ;; This function calls:
  2189 ;;		_color_read_Clear
  2190 ;;		_sendStringSerial4
  2191 ;;		_sprintf
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text6
  2198   0024F6                     __ptext6:
  2199                           	callstack 0
  2200   0024F6                     _clear_read_calibration:
  2201                           	callstack 18
  2202   0024F6                     
  2203                           ;colour_identify.c: 13:     for (int i = 0; i <= 500; i++){
  2204   0024F6  0E00               	movlw	0
  2205   0024F8  0100               	movlb	0	; () banked
  2206   0024FA  6F8C               	movwf	(clear_read_calibration@i+1)& (0+255),b
  2207   0024FC  0E00               	movlw	0
  2208   0024FE  6F8B               	movwf	clear_read_calibration@i& (0+255),b
  2209   002500                     l3810:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;colour_identify.c: 14:         *clear_read = color_read_Clear();
  2213   002500  EC42  F017         	call	_color_read_Clear	;wreg free
  2214   002504  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2215   002508  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2216   00250C  C009  FFDE         	movff	?_color_read_Clear,postinc2
  2217   002510  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  2218   002514                     
  2219                           ;colour_identify.c: 15:     }
  2220   002514  0100               	movlb	0	; () banked
  2221   002516  4B8B               	infsnz	clear_read_calibration@i& (0+255),f,b
  2222   002518  2B8C               	incf	(clear_read_calibration@i+1)& (0+255),f,b
  2223   00251A                     
  2224                           ; BSR set to: 0
  2225   00251A  BF8C               	btfsc	(clear_read_calibration@i+1)& (0+255),7,b
  2226   00251C  EF99  F012         	goto	u1991
  2227   002520  0EF5               	movlw	245
  2228   002522  5D8B               	subwf	clear_read_calibration@i& (0+255),w,b
  2229   002524  0E01               	movlw	1
  2230   002526  598C               	subwfb	(clear_read_calibration@i+1)& (0+255),w,b
  2231   002528  A0D8               	btfss	status,0,c
  2232   00252A  EF99  F012         	goto	u1991
  2233   00252E  EF9B  F012         	goto	u1990
  2234   002532                     u1991:
  2235   002532  EF80  F012         	goto	l3810
  2236   002536                     u1990:
  2237   002536                     
  2238                           ; BSR set to: 0
  2239                           ;colour_identify.c: 17:     for(int i = 0; i <= 2; i++){
  2240   002536  0E00               	movlw	0
  2241   002538  6F8E               	movwf	(clear_read_calibration@i_1591+1)& (0+255),b
  2242   00253A  0E00               	movlw	0
  2243   00253C  6F8D               	movwf	clear_read_calibration@i_1591& (0+255),b
  2244   00253E                     l3822:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;colour_identify.c: 18:         *clear_read += color_read_Clear();
  2248   00253E  EC42  F017         	call	_color_read_Clear	;wreg free
  2249   002542  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2250   002546  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2251   00254A  5009               	movf	?_color_read_Clear^0,w,c
  2252   00254C  26DE               	addwf	postinc2,f,c
  2253   00254E  500A               	movf	(?_color_read_Clear+1)^0,w,c
  2254   002550  22DD               	addwfc	postdec2,f,c
  2255   002552                     
  2256                           ;colour_identify.c: 19:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2257   002552  0E11               	movlw	17
  2258   002554  0100               	movlb	0	; () banked
  2259   002556  6F88               	movwf	(??_clear_read_calibration+1)& (0+255),b
  2260   002558  0E3C               	movlw	60
  2261   00255A  6F87               	movwf	??_clear_read_calibration& (0+255),b
  2262   00255C  0ECB               	movlw	203
  2263   00255E                     u2157:
  2264   00255E  2EE8               	decfsz	wreg,f,c
  2265   002560  D7FE               	bra	u2157
  2266   002562  2F87               	decfsz	??_clear_read_calibration& (0+255),f,b
  2267   002564  D7FC               	bra	u2157
  2268   002566  2F88               	decfsz	(??_clear_read_calibration+1)& (0+255),f,b
  2269   002568  D7FA               	bra	u2157
  2270   00256A                     
  2271                           ;colour_identify.c: 20:     }
  2272   00256A  0100               	movlb	0	; () banked
  2273   00256C  4B8D               	infsnz	clear_read_calibration@i_1591& (0+255),f,b
  2274   00256E  2B8E               	incf	(clear_read_calibration@i_1591+1)& (0+255),f,b
  2275   002570                     
  2276                           ; BSR set to: 0
  2277   002570  BF8E               	btfsc	(clear_read_calibration@i_1591+1)& (0+255),7,b
  2278   002572  EFC4  F012         	goto	u2001
  2279   002576  518E               	movf	(clear_read_calibration@i_1591+1)& (0+255),w,b
  2280   002578  E109               	bnz	u2000
  2281   00257A  0E03               	movlw	3
  2282   00257C  5D8D               	subwf	clear_read_calibration@i_1591& (0+255),w,b
  2283   00257E  A0D8               	btfss	status,0,c
  2284   002580  EFC4  F012         	goto	u2001
  2285   002584  EFC6  F012         	goto	u2000
  2286   002588                     u2001:
  2287   002588  EF9F  F012         	goto	l3822
  2288   00258C                     u2000:
  2289   00258C                     
  2290                           ; BSR set to: 0
  2291                           ;colour_identify.c: 22:     *clear_read = *clear_read/4;
  2292   00258C  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2293   002590  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2294   002594  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2295   002598  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2296   00259C  90D8               	bcf	status,0,c
  2297   00259E  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2298   0025A0  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2299   0025A2  90D8               	bcf	status,0,c
  2300   0025A4  3388               	rrcf	(??_clear_read_calibration+1)& (0+255),f,b
  2301   0025A6  3387               	rrcf	??_clear_read_calibration& (0+255),f,b
  2302   0025A8  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2303   0025AC  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2304   0025B0  C087  FFDE         	movff	??_clear_read_calibration,postinc2
  2305   0025B4  C088  FFDD         	movff	??_clear_read_calibration+1,postdec2
  2306   0025B8                     
  2307                           ; BSR set to: 0
  2308                           ;colour_identify.c: 24:     sprintf(buf, "\n Expected clear: %d \n", clear_read);
  2309   0025B8  C081  F066         	movff	clear_read_calibration@buf,sprintf@s
  2310   0025BC  C082  F067         	movff	clear_read_calibration@buf+1,sprintf@s+1
  2311   0025C0  0E57               	movlw	low STR_2
  2312   0025C2  6F68               	movwf	sprintf@fmt& (0+255),b
  2313   0025C4  0E0E               	movlw	high STR_2
  2314   0025C6  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2315   0025C8  C083  F06A         	movff	clear_read_calibration@clear_read,?_sprintf+4
  2316   0025CC  C084  F06B         	movff	clear_read_calibration@clear_read+1,?_sprintf+5
  2317   0025D0  ECC9  F016         	call	_sprintf	;wreg free
  2318   0025D4                     
  2319                           ;colour_identify.c: 25:     sendStringSerial4(buf);
  2320   0025D4  C081  F006         	movff	clear_read_calibration@buf,sendStringSerial4@string
  2321   0025D8  C082  F007         	movff	clear_read_calibration@buf+1,sendStringSerial4@string+1
  2322   0025DC  EC2E  F018         	call	_sendStringSerial4	;wreg free
  2323   0025E0                     
  2324                           ;colour_identify.c: 27:     *clear_read_check = *clear_read + 800;
  2325   0025E0  C083  FFD9         	movff	clear_read_calibration@clear_read,fsr2l
  2326   0025E4  C084  FFDA         	movff	clear_read_calibration@clear_read+1,fsr2h
  2327   0025E8  CFDE F087          	movff	postinc2,??_clear_read_calibration
  2328   0025EC  CFDD F088          	movff	postdec2,??_clear_read_calibration+1
  2329   0025F0  0E20               	movlw	32
  2330   0025F2  0100               	movlb	0	; () banked
  2331   0025F4  2587               	addwf	??_clear_read_calibration& (0+255),w,b
  2332   0025F6  6F89               	movwf	(??_clear_read_calibration+2)& (0+255),b
  2333   0025F8  0E03               	movlw	3
  2334   0025FA  2188               	addwfc	(??_clear_read_calibration+1)& (0+255),w,b
  2335   0025FC  6F8A               	movwf	(??_clear_read_calibration+3)& (0+255),b
  2336   0025FE  C085  FFD9         	movff	clear_read_calibration@clear_read_check,fsr2l
  2337   002602  C086  FFDA         	movff	clear_read_calibration@clear_read_check+1,fsr2h
  2338   002606  C089  FFDE         	movff	??_clear_read_calibration+2,postinc2
  2339   00260A  C08A  FFDD         	movff	??_clear_read_calibration+3,postdec2
  2340   00260E                     
  2341                           ; BSR set to: 0
  2342   00260E  0012               	return		;funcret
  2343   002610                     __end_of_clear_read_calibration:
  2344                           	callstack 0
  2345                           
  2346 ;; *************** function _card_response *****************
  2347 ;; Defined at:
  2348 ;;		line 220 in file "colour_identify.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  buf             2   33[BANK0 ] PTR unsigned char 
  2351 ;;		 -> main@buf(150), 
  2352 ;;  clear_read      2   35[BANK0 ] PTR unsigned int 
  2353 ;;		 -> main@clear_read(2), 
  2354 ;;  red_read        2   37[BANK0 ] PTR unsigned int 
  2355 ;;		 -> main@red_read(2), 
  2356 ;;  green_read      2   39[BANK0 ] PTR unsigned int 
  2357 ;;		 -> main@green_read(2), 
  2358 ;;  blue_read       2   41[BANK0 ] PTR unsigned int 
  2359 ;;		 -> main@blue_read(2), 
  2360 ;;  expected_val    2   43[BANK0 ] PTR unsigned int [9]
  2361 ;;		 -> main@expected_values(72), 
  2362 ;;  mL              2   45[BANK0 ] PTR struct DC_motor
  2363 ;;		 -> main@motorL(9), 
  2364 ;;  mR              2   47[BANK0 ] PTR struct DC_motor
  2365 ;;		 -> main@motorR(9), 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  normalised_v   72   49[BANK0 ] unsigned int [9][4]
  2368 ;;  master_close   18  121[BANK0 ] unsigned int [9]
  2369 ;;  card            1  139[BANK0 ] enum E14551
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2379 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2380 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2382 ;;      Totals:         0     107       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2383 ;;Total ram usage:      107 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; Hardware stack levels required when called: 12
  2386 ;; This function calls:
  2387 ;;		_collect_avg_readings
  2388 ;;		_determine_card
  2389 ;;		_make_master_closeness
  2390 ;;		_motor_response
  2391 ;;		_normalise_readings
  2392 ;;		_sendStringSerial4
  2393 ;;		_sprintf
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text7
  2400   0023A8                     __ptext7:
  2401                           	callstack 0
  2402   0023A8                     _card_response:
  2403                           	callstack 18
  2404   0023A8                     
  2405                           ;colour_identify.c: 224:     unsigned int normalised_values[4][9];;colour_identify.c: 22
      +                          5:     unsigned int master_closeness[9];;colour_identify.c: 227:     collect_avg_reading
      +                          s(clear_read, red_read, green_read, blue_read);
  2406   0023A8  C083  F010         	movff	card_response@clear_read,collect_avg_readings@clear_read
  2407   0023AC  C084  F011         	movff	card_response@clear_read+1,collect_avg_readings@clear_read+1
  2408   0023B0  C085  F012         	movff	card_response@red_read,collect_avg_readings@red_read
  2409   0023B4  C086  F013         	movff	card_response@red_read+1,collect_avg_readings@red_read+1
  2410   0023B8  C087  F014         	movff	card_response@green_read,collect_avg_readings@green_read
  2411   0023BC  C088  F015         	movff	card_response@green_read+1,collect_avg_readings@green_read+1
  2412   0023C0  C089  F016         	movff	card_response@blue_read,collect_avg_readings@blue_read
  2413   0023C4  C08A  F017         	movff	card_response@blue_read+1,collect_avg_readings@blue_read+1
  2414   0023C8  ECBC  F00D         	call	_collect_avg_readings	;wreg free
  2415   0023CC                     
  2416                           ;colour_identify.c: 228:     sprintf(buf, "\n AVG: Clear %d, R %d, G %d, B %d \n", *clea
      +                          r_read, *red_read, *green_read, *blue_read);
  2417   0023CC  C081  F066         	movff	card_response@buf,sprintf@s
  2418   0023D0  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2419   0023D4  0E33               	movlw	low STR_3
  2420   0023D6  0100               	movlb	0	; () banked
  2421   0023D8  6F68               	movwf	sprintf@fmt& (0+255),b
  2422   0023DA  0E0E               	movlw	high STR_3
  2423   0023DC  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2424   0023DE  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2425   0023E2  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2426   0023E6  CFDE F06A          	movff	postinc2,?_sprintf+4
  2427   0023EA  CFDD F06B          	movff	postdec2,?_sprintf+5
  2428   0023EE  C085  FFD9         	movff	card_response@red_read,fsr2l
  2429   0023F2  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2430   0023F6  CFDE F06C          	movff	postinc2,?_sprintf+6
  2431   0023FA  CFDD F06D          	movff	postdec2,?_sprintf+7
  2432   0023FE  C087  FFD9         	movff	card_response@green_read,fsr2l
  2433   002402  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2434   002406  CFDE F06E          	movff	postinc2,?_sprintf+8
  2435   00240A  CFDD F06F          	movff	postdec2,?_sprintf+9
  2436   00240E  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2437   002412  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2438   002416  CFDE F070          	movff	postinc2,?_sprintf+10
  2439   00241A  CFDD F071          	movff	postdec2,?_sprintf+11
  2440   00241E  ECC9  F016         	call	_sprintf	;wreg free
  2441   002422                     
  2442                           ;colour_identify.c: 229:     sendStringSerial4(buf);
  2443   002422  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2444   002426  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2445   00242A  EC2E  F018         	call	_sendStringSerial4	;wreg free
  2446   00242E                     
  2447                           ;colour_identify.c: 231:     normalise_readings(buf, *clear_read, *red_read, *green_read
      +                          , *blue_read, expected_values, normalised_values);
  2448   00242E  C081  F01B         	movff	card_response@buf,normalise_readings@buf
  2449   002432  C082  F01C         	movff	card_response@buf+1,normalise_readings@buf+1
  2450   002436  C083  FFD9         	movff	card_response@clear_read,fsr2l
  2451   00243A  C084  FFDA         	movff	card_response@clear_read+1,fsr2h
  2452   00243E  CFDE F01D          	movff	postinc2,normalise_readings@clear_read
  2453   002442  CFDD F01E          	movff	postdec2,normalise_readings@clear_read+1
  2454   002446  C085  FFD9         	movff	card_response@red_read,fsr2l
  2455   00244A  C086  FFDA         	movff	card_response@red_read+1,fsr2h
  2456   00244E  CFDE F01F          	movff	postinc2,normalise_readings@red_read
  2457   002452  CFDD F020          	movff	postdec2,normalise_readings@red_read+1
  2458   002456  C087  FFD9         	movff	card_response@green_read,fsr2l
  2459   00245A  C088  FFDA         	movff	card_response@green_read+1,fsr2h
  2460   00245E  CFDE F021          	movff	postinc2,normalise_readings@green_read
  2461   002462  CFDD F022          	movff	postdec2,normalise_readings@green_read+1
  2462   002466  C089  FFD9         	movff	card_response@blue_read,fsr2l
  2463   00246A  C08A  FFDA         	movff	card_response@blue_read+1,fsr2h
  2464   00246E  CFDE F023          	movff	postinc2,normalise_readings@blue_read
  2465   002472  CFDD F024          	movff	postdec2,normalise_readings@blue_read+1
  2466   002476  C08B  F025         	movff	card_response@expected_values,normalise_readings@expected_values
  2467   00247A  C08C  F026         	movff	card_response@expected_values+1,normalise_readings@expected_values+1
  2468   00247E  0E91               	movlw	low card_response@normalised_values
  2469   002480  6E27               	movwf	normalise_readings@normalised_values^0,c
  2470   002482  0E00               	movlw	high card_response@normalised_values
  2471   002484  6E28               	movwf	(normalise_readings@normalised_values+1)^0,c
  2472   002486  EC0B  F00B         	call	_normalise_readings	;wreg free
  2473   00248A                     
  2474                           ;colour_identify.c: 233:     make_master_closeness(buf, normalised_values, master_closen
      +                          ess);
  2475   00248A  C081  F005         	movff	card_response@buf,make_master_closeness@buf
  2476   00248E  C082  F006         	movff	card_response@buf+1,make_master_closeness@buf+1
  2477   002492  0E91               	movlw	low card_response@normalised_values
  2478   002494  6E07               	movwf	make_master_closeness@normalised_values^0,c
  2479   002496  0E00               	movlw	high card_response@normalised_values
  2480   002498  6E08               	movwf	(make_master_closeness@normalised_values+1)^0,c
  2481   00249A  0ED9               	movlw	low card_response@master_closeness
  2482   00249C  6E09               	movwf	make_master_closeness@master_closeness^0,c
  2483   00249E  0E00               	movlw	high card_response@master_closeness
  2484   0024A0  6E0A               	movwf	(make_master_closeness@master_closeness+1)^0,c
  2485   0024A2  EC08  F013         	call	_make_master_closeness	;wreg free
  2486   0024A6                     
  2487                           ;colour_identify.c: 235:     card = determine_card(master_closeness);
  2488   0024A6  0ED9               	movlw	low card_response@master_closeness
  2489   0024A8  6E05               	movwf	determine_card@master_closeness^0,c
  2490   0024AA  0E00               	movlw	high card_response@master_closeness
  2491   0024AC  6E06               	movwf	(determine_card@master_closeness+1)^0,c
  2492   0024AE  ECB2  F015         	call	_determine_card	;wreg free
  2493   0024B2  0100               	movlb	0	; () banked
  2494   0024B4  6FEB               	movwf	card_response@card& (0+255),b
  2495   0024B6                     
  2496                           ; BSR set to: 0
  2497                           ;colour_identify.c: 236:     sprintf(buf, "CARD %d \n", card);
  2498   0024B6  C081  F066         	movff	card_response@buf,sprintf@s
  2499   0024BA  C082  F067         	movff	card_response@buf+1,sprintf@s+1
  2500   0024BE  0E6E               	movlw	low STR_4
  2501   0024C0  6F68               	movwf	sprintf@fmt& (0+255),b
  2502   0024C2  0E0E               	movlw	high STR_4
  2503   0024C4  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2504   0024C6  C0EB  F06A         	movff	card_response@card,?_sprintf+4
  2505   0024CA  6B6B               	clrf	(?_sprintf+5)& (0+255),b
  2506   0024CC  ECC9  F016         	call	_sprintf	;wreg free
  2507   0024D0                     
  2508                           ;colour_identify.c: 237:     sendStringSerial4(buf);
  2509   0024D0  C081  F006         	movff	card_response@buf,sendStringSerial4@string
  2510   0024D4  C082  F007         	movff	card_response@buf+1,sendStringSerial4@string+1
  2511   0024D8  EC2E  F018         	call	_sendStringSerial4	;wreg free
  2512   0024DC                     
  2513                           ;colour_identify.c: 239:     motor_response(card, mL, mR);
  2514   0024DC  C08D  F020         	movff	card_response@mL,motor_response@mL
  2515   0024E0  C08E  F021         	movff	card_response@mL+1,motor_response@mL+1
  2516   0024E4  C08F  F022         	movff	card_response@mR,motor_response@mR
  2517   0024E8  C090  F023         	movff	card_response@mR+1,motor_response@mR+1
  2518   0024EC  0100               	movlb	0	; () banked
  2519   0024EE  51EB               	movf	card_response@card& (0+255),w,b
  2520   0024F0  EC3D  F007         	call	_motor_response
  2521   0024F4  0012               	return		;funcret
  2522   0024F6                     __end_of_card_response:
  2523                           	callstack 0
  2524                           
  2525 ;; *************** function _sprintf *****************
  2526 ;; Defined at:
  2527 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2530 ;;		 -> main@buf(150), 
  2531 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2532 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2533 ;;		 -> STR_2(23), STR_1(50), 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  f              11   22[BANK0 ] struct _IO_FILE
  2536 ;;  ap              2   20[BANK0 ] PTR void [1]
  2537 ;;		 -> ?_sprintf(2), 
  2538 ;;  ret             2    0        int 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  2    6[BANK0 ] int 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2548 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;Total ram usage:       27 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 11
  2555 ;; This function calls:
  2556 ;;		_vfprintf
  2557 ;; This function is called by:
  2558 ;;		_main
  2559 ;;		_clear_read_calibration
  2560 ;;		_card_response
  2561 ;;		_card_response_easy
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text8
  2566   002D92                     __ptext8:
  2567                           	callstack 0
  2568   002D92                     _sprintf:
  2569                           	callstack 19
  2570   002D92  0E6A               	movlw	low (?_sprintf+4)
  2571   002D94  0100               	movlb	0	; () banked
  2572   002D96  6F74               	movwf	sprintf@ap& (0+255),b
  2573   002D98  0E00               	movlw	high (?_sprintf+4)
  2574   002D9A  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  2575   002D9C  C066  F076         	movff	sprintf@s,sprintf@f
  2576   002DA0  C067  F077         	movff	sprintf@s+1,sprintf@f+1
  2577   002DA4                     
  2578                           ; BSR set to: 0
  2579   002DA4  0E00               	movlw	0
  2580   002DA6  6F7A               	movwf	(sprintf@f+4)& (0+255),b
  2581   002DA8  0E00               	movlw	0
  2582   002DAA  6F79               	movwf	(sprintf@f+3)& (0+255),b
  2583   002DAC                     
  2584                           ; BSR set to: 0
  2585   002DAC  0E00               	movlw	0
  2586   002DAE  6F80               	movwf	(sprintf@f+10)& (0+255),b
  2587   002DB0  0E00               	movlw	0
  2588   002DB2  6F7F               	movwf	(sprintf@f+9)& (0+255),b
  2589   002DB4                     
  2590                           ; BSR set to: 0
  2591   002DB4  0E76               	movlw	low sprintf@f
  2592   002DB6  6F60               	movwf	vfprintf@fp& (0+255),b
  2593   002DB8  0E00               	movlw	high sprintf@f
  2594   002DBA  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2595   002DBC  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2596   002DC0  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2597   002DC4  0E74               	movlw	low sprintf@ap
  2598   002DC6  6F64               	movwf	vfprintf@ap& (0+255),b
  2599   002DC8  0E00               	movlw	high sprintf@ap
  2600   002DCA  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2601   002DCC  EC9F  F016         	call	_vfprintf	;wreg free
  2602   002DD0  0100               	movlb	0	; () banked
  2603   002DD2  5179               	movf	(sprintf@f+3)& (0+255),w,b
  2604   002DD4  2566               	addwf	sprintf@s& (0+255),w,b
  2605   002DD6  6ED9               	movwf	fsr2l,c
  2606   002DD8  517A               	movf	(sprintf@f+4)& (0+255),w,b
  2607   002DDA  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2608   002DDC  6EDA               	movwf	fsr2h,c
  2609   002DDE  0E00               	movlw	0
  2610   002DE0  6EDF               	movwf	indf2,c
  2611   002DE2                     
  2612                           ; BSR set to: 0
  2613   002DE2  0012               	return		;funcret
  2614   002DE4                     __end_of_sprintf:
  2615                           	callstack 0
  2616                           
  2617 ;; *************** function _vfprintf *****************
  2618 ;; Defined at:
  2619 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2622 ;;		 -> sprintf@f(11), 
  2623 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2624 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2625 ;;		 -> STR_2(23), STR_1(50), 
  2626 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2627 ;;		 -> sprintf@ap(2), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2630 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2631 ;;		 -> STR_2(23), STR_1(50), 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  2    0[BANK0 ] int 
  2634 ;; Registers used:
  2635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;Total ram usage:        8 bytes
  2646 ;; Hardware stack levels used: 1
  2647 ;; Hardware stack levels required when called: 10
  2648 ;; This function calls:
  2649 ;;		_vfpfcnvrt
  2650 ;; This function is called by:
  2651 ;;		_sprintf
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text9
  2656   002D3E                     __ptext9:
  2657                           	callstack 0
  2658   002D3E                     _vfprintf:
  2659                           	callstack 19
  2660   002D3E                     
  2661                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2662   002D3E  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2663   002D42  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2664                           
  2665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2666   002D46  EFB3  F016         	goto	l3774
  2667   002D4A                     l3772:
  2668                           
  2669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2670   002D4A  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2671   002D4E  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2672   002D52  0E55               	movlw	low vfprintf@cfmt
  2673   002D54  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2674   002D56  0E00               	movlw	high vfprintf@cfmt
  2675   002D58  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2676   002D5A  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2677   002D5E  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2678   002D62  EC25  F011         	call	_vfpfcnvrt	;wreg free
  2679   002D66                     l3774:
  2680                           
  2681                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2682   002D66  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2683   002D6A  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2684   002D6E                     	if	0	;tblptru may be non-zero
  2685   002D6E                     	endif
  2686   002D6E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2687   002D6E  0E00               	movlw	low (__mediumconst shr (0+16))
  2688   002D70  6EF8               	movwf	tblptru,c
  2689   002D72                     	endif
  2690   002D72  0008               	tblrd		*
  2691   002D74  50F5               	movf	tablat,w,c
  2692   002D76  0900               	iorlw	0
  2693   002D78  A4D8               	btfss	status,2,c
  2694   002D7A  EFC1  F016         	goto	u1971
  2695   002D7E  EFC3  F016         	goto	u1970
  2696   002D82                     u1971:
  2697   002D82  EFA5  F016         	goto	l3772
  2698   002D86                     u1970:
  2699   002D86                     
  2700                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2701   002D86  0E00               	movlw	0
  2702   002D88  0100               	movlb	0	; () banked
  2703   002D8A  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2704   002D8C  0E00               	movlw	0
  2705   002D8E  6F60               	movwf	?_vfprintf& (0+255),b
  2706   002D90                     
  2707                           ; BSR set to: 0
  2708   002D90  0012               	return		;funcret
  2709   002D92                     __end_of_vfprintf:
  2710                           	callstack 0
  2711                           
  2712 ;; *************** function _vfpfcnvrt *****************
  2713 ;; Defined at:
  2714 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2717 ;;		 -> sprintf@f(11), 
  2718 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2719 ;;		 -> vfprintf@cfmt(2), 
  2720 ;;  ap              2   70[COMRAM] PTR PTR void 
  2721 ;;		 -> sprintf@ap(2), 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  convarg         8   74[COMRAM] struct .
  2724 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2725 ;;		 -> STR_6(10), STR_5(36), STR_4(10), STR_3(36), 
  2726 ;;		 -> STR_2(23), STR_1(50), 
  2727 ;;  i               2    0        int 
  2728 ;;  done            2    0        int 
  2729 ;;  c               1    0        unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2739 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2742 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2743 ;;Total ram usage:       18 bytes
  2744 ;; Hardware stack levels used: 1
  2745 ;; Hardware stack levels required when called: 9
  2746 ;; This function calls:
  2747 ;;		_dtoa
  2748 ;;		_fputc
  2749 ;; This function is called by:
  2750 ;;		_vfprintf
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text10
  2755   00224A                     __ptext10:
  2756                           	callstack 0
  2757   00224A                     _vfpfcnvrt:
  2758                           	callstack 19
  2759   00224A                     
  2760                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2761   00224A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2762   00224E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2763   002252  CFDE FFF6          	movff	postinc2,tblptrl
  2764   002256  CFDD FFF7          	movff	postdec2,tblptrh
  2765   00225A                     	if	0	;tblptru may be non-zero
  2766   00225A                     	endif
  2767   00225A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2768   00225A  0E00               	movlw	low (__mediumconst shr (0+16))
  2769   00225C  6EF8               	movwf	tblptru,c
  2770   00225E                     	endif
  2771   00225E  0008               	tblrd		*
  2772   002260  50F5               	movf	tablat,w,c
  2773   002262  0A25               	xorlw	37
  2774   002264  A4D8               	btfss	status,2,c
  2775   002266  EF37  F011         	goto	u1941
  2776   00226A  EF39  F011         	goto	u1940
  2777   00226E                     u1941:
  2778   00226E  EFBD  F011         	goto	l3764
  2779   002272                     u1940:
  2780   002272                     
  2781                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2782   002272  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2783   002276  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2784   00227A  2ADE               	incf	postinc2,f,c
  2785   00227C  0E00               	movlw	0
  2786   00227E  22DD               	addwfc	postdec2,f,c
  2787   002280                     
  2788                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2789   002280  0E00               	movlw	0
  2790   002282  0100               	movlb	0	; () banked
  2791   002284  6FEF               	movwf	(_width+1)& (0+255),b
  2792   002286  0E00               	movlw	0
  2793   002288  6FEE               	movwf	_width& (0+255),b
  2794   00228A  C0EE  F0F6         	movff	_width,_flags
  2795   00228E                     
  2796                           ; BSR set to: 0
  2797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2798   00228E  69F0               	setf	_prec& (0+255),b
  2799   002290  69F1               	setf	(_prec+1)& (0+255),b
  2800   002292                     
  2801                           ; BSR set to: 0
  2802                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2803   002292  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2804   002296  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2805   00229A  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2806   00229E  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2807   0022A2                     
  2808                           ; BSR set to: 0
  2809                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2810   0022A2  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2811   0022A6  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2812   0022AA                     	if	0	;tblptru may be non-zero
  2813   0022AA                     	endif
  2814   0022AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2815   0022AA  0E00               	movlw	low (__mediumconst shr (0+16))
  2816   0022AC  6EF8               	movwf	tblptru,c
  2817   0022AE                     	endif
  2818   0022AE  0008               	tblrd		*
  2819   0022B0  50F5               	movf	tablat,w,c
  2820   0022B2  0A64               	xorlw	100
  2821   0022B4  B4D8               	btfsc	status,2,c
  2822   0022B6  EF5F  F011         	goto	u1951
  2823   0022BA  EF61  F011         	goto	u1950
  2824   0022BE                     u1951:
  2825   0022BE  EF71  F011         	goto	l3754
  2826   0022C2                     u1950:
  2827   0022C2                     
  2828                           ; BSR set to: 0
  2829   0022C2  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2830   0022C6  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2831   0022CA                     	if	0	;tblptru may be non-zero
  2832   0022CA                     	endif
  2833   0022CA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2834   0022CA  0E00               	movlw	low (__mediumconst shr (0+16))
  2835   0022CC  6EF8               	movwf	tblptru,c
  2836   0022CE                     	endif
  2837   0022CE  0008               	tblrd		*
  2838   0022D0  50F5               	movf	tablat,w,c
  2839   0022D2  0A69               	xorlw	105
  2840   0022D4  A4D8               	btfss	status,2,c
  2841   0022D6  EF6F  F011         	goto	u1961
  2842   0022DA  EF71  F011         	goto	u1960
  2843   0022DE                     u1961:
  2844   0022DE  EFB4  F011         	goto	l3760
  2845   0022E2                     u1960:
  2846   0022E2                     l3754:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2850   0022E2  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2851   0022E6  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2852   0022EA  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2853   0022EE  0E02               	movlw	2
  2854   0022F0  26DE               	addwf	postinc2,f,c
  2855   0022F2  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2856   0022F6  0E00               	movlw	0
  2857   0022F8  22DD               	addwfc	postdec2,f,c
  2858   0022FA  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2859   0022FE  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2860   002302  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2861   002306  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2862   00230A  0E00               	movlw	0
  2863   00230C  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2864   00230E  0EFF               	movlw	-1
  2865   002310  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2866   002312  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2867   002314  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2868   002316  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2869   002318  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2870   00231A  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2871                           
  2872                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2873   00231C  0E01               	movlw	1
  2874   00231E  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2875   002320  6E49               	movwf	??_vfpfcnvrt^0,c
  2876   002322  0E00               	movlw	0
  2877   002324  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2878   002326  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2879   002328  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2880   00232C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2881   002330  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2882   002334  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2883   002338                     
  2884                           ; BSR set to: 0
  2885                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2886   002338  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2887   00233C  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2888   002340  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2889   002344  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2890   002348  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2891   00234C  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2892   002350  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2893   002354  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2894   002358  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2895   00235C  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2896   002360  EC7D  F00C         	call	_dtoa	;wreg free
  2897   002364  EFD3  F011         	goto	l1269
  2898   002368                     l3760:
  2899                           
  2900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2901   002368  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2902   00236C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2903   002370  2ADE               	incf	postinc2,f,c
  2904   002372  0E00               	movlw	0
  2905   002374  22DD               	addwfc	postdec2,f,c
  2906   002376  EFD3  F011         	goto	l1269
  2907   00237A                     l3764:
  2908                           
  2909                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2910   00237A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2911   00237E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2912   002382  CFDE FFF6          	movff	postinc2,tblptrl
  2913   002386  CFDD FFF7          	movff	postdec2,tblptrh
  2914   00238A                     	if	0	;tblptru may be non-zero
  2915   00238A                     	endif
  2916   00238A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2917   00238A  0E00               	movlw	low (__mediumconst shr (0+16))
  2918   00238C  6EF8               	movwf	tblptru,c
  2919   00238E                     	endif
  2920   00238E  0008               	tblrd		*
  2921   002390  50F5               	movf	tablat,w,c
  2922   002392  6E05               	movwf	fputc@c^0,c
  2923   002394  6A06               	clrf	(fputc@c+1)^0,c
  2924   002396  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2925   00239A  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2926   00239E  EC8E  F013         	call	_fputc	;wreg free
  2927   0023A2  EFB4  F011         	goto	l3760
  2928   0023A6                     l1269:
  2929   0023A6  0012               	return		;funcret
  2930   0023A8                     __end_of_vfpfcnvrt:
  2931                           	callstack 0
  2932                           
  2933 ;; *************** function _dtoa *****************
  2934 ;; Defined at:
  2935 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2938 ;;		 -> sprintf@f(11), 
  2939 ;;  d               8   33[COMRAM] long long 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  n               8   55[COMRAM] long long 
  2942 ;;  i               2   64[COMRAM] int 
  2943 ;;  w               2   53[COMRAM] int 
  2944 ;;  p               2   51[COMRAM] int 
  2945 ;;  s               1   63[COMRAM] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2955 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2956 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2957 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2958 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2959 ;;Total ram usage:       35 bytes
  2960 ;; Hardware stack levels used: 1
  2961 ;; Hardware stack levels required when called: 8
  2962 ;; This function calls:
  2963 ;;		___aodiv
  2964 ;;		___aomod
  2965 ;;		_abs
  2966 ;;		_pad
  2967 ;; This function is called by:
  2968 ;;		_vfpfcnvrt
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           	psect	text11
  2973   0018FA                     __ptext11:
  2974                           	callstack 0
  2975   0018FA                     _dtoa:
  2976                           	callstack 19
  2977   0018FA                     
  2978                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2979   0018FA  C022  F038         	movff	dtoa@d,dtoa@n
  2980   0018FE  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2981   001902  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2982   001906  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2983   00190A  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2984   00190E  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2985   001912  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2986   001916  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2987   00191A                     
  2988                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2989   00191A  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2990   00191C  EF92  F00C         	goto	u1841
  2991   001920  EF95  F00C         	goto	u1840
  2992   001924                     u1841:
  2993   001924  0E01               	movlw	1
  2994   001926  EF96  F00C         	goto	u1850
  2995   00192A                     u1840:
  2996   00192A  0E00               	movlw	0
  2997   00192C                     u1850:
  2998   00192C  6E40               	movwf	dtoa@s^0,c
  2999   00192E                     
  3000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  3001   00192E  5040               	movf	dtoa@s^0,w,c
  3002   001930  B4D8               	btfsc	status,2,c
  3003   001932  EF9D  F00C         	goto	u1861
  3004   001936  EF9F  F00C         	goto	u1860
  3005   00193A                     u1861:
  3006   00193A  EFAF  F00C         	goto	l3696
  3007   00193E                     u1860:
  3008   00193E                     
  3009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  3010   00193E  1E3F               	comf	(dtoa@n+7)^0,f,c
  3011   001940  1E3E               	comf	(dtoa@n+6)^0,f,c
  3012   001942  1E3D               	comf	(dtoa@n+5)^0,f,c
  3013   001944  1E3C               	comf	(dtoa@n+4)^0,f,c
  3014   001946  1E3B               	comf	(dtoa@n+3)^0,f,c
  3015   001948  1E3A               	comf	(dtoa@n+2)^0,f,c
  3016   00194A  1E39               	comf	(dtoa@n+1)^0,f,c
  3017   00194C  6C38               	negf	dtoa@n^0,c
  3018   00194E  0E00               	movlw	0
  3019   001950  2239               	addwfc	(dtoa@n+1)^0,f,c
  3020   001952  223A               	addwfc	(dtoa@n+2)^0,f,c
  3021   001954  223B               	addwfc	(dtoa@n+3)^0,f,c
  3022   001956  223C               	addwfc	(dtoa@n+4)^0,f,c
  3023   001958  223D               	addwfc	(dtoa@n+5)^0,f,c
  3024   00195A  223E               	addwfc	(dtoa@n+6)^0,f,c
  3025   00195C  223F               	addwfc	(dtoa@n+7)^0,f,c
  3026   00195E                     l3696:
  3027                           
  3028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  3029   00195E  0100               	movlb	0	; () banked
  3030   001960  BFF1               	btfsc	(_prec+1)& (0+255),7,b
  3031   001962  EFBD  F00C         	goto	u1870
  3032   001966  51F1               	movf	(_prec+1)& (0+255),w,b
  3033   001968  E106               	bnz	u1871
  3034   00196A  05F0               	decf	_prec& (0+255),w,b
  3035   00196C  B0D8               	btfsc	status,0,c
  3036   00196E  EFBB  F00C         	goto	u1871
  3037   001972  EFBD  F00C         	goto	u1870
  3038   001976                     u1871:
  3039   001976  EFC3  F00C         	goto	l1248
  3040   00197A                     u1870:
  3041   00197A                     
  3042                           ; BSR set to: 0
  3043   00197A  0E00               	movlw	0
  3044   00197C  6E35               	movwf	(dtoa@p+1)^0,c
  3045   00197E  0E01               	movlw	1
  3046   001980  6E34               	movwf	dtoa@p^0,c
  3047   001982  EFC7  F00C         	goto	l1250
  3048   001986                     l1248:
  3049                           
  3050                           ; BSR set to: 0
  3051   001986  C0F0  F034         	movff	_prec,dtoa@p
  3052   00198A  C0F1  F035         	movff	_prec+1,dtoa@p+1
  3053   00198E                     l1250:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  3057   00198E  C0EE  F036         	movff	_width,dtoa@w
  3058   001992  C0EF  F037         	movff	_width+1,dtoa@w+1
  3059   001996                     
  3060                           ; BSR set to: 0
  3061                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  3062   001996  5040               	movf	dtoa@s^0,w,c
  3063   001998  B4D8               	btfsc	status,2,c
  3064   00199A  EFD1  F00C         	goto	u1881
  3065   00199E  EFD3  F00C         	goto	u1880
  3066   0019A2                     u1881:
  3067   0019A2  EFEA  F00C         	goto	l1251
  3068   0019A6                     u1880:
  3069   0019A6                     
  3070                           ; BSR set to: 0
  3071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  3072   0019A6  0636               	decf	dtoa@w^0,f,c
  3073   0019A8  A0D8               	btfss	status,0,c
  3074   0019AA  0637               	decf	(dtoa@w+1)^0,f,c
  3075   0019AC                     
  3076                           ; BSR set to: 0
  3077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  3078   0019AC  5040               	movf	dtoa@s^0,w,c
  3079   0019AE  A4D8               	btfss	status,2,c
  3080   0019B0  EFDC  F00C         	goto	u1891
  3081   0019B4  EFDE  F00C         	goto	u1890
  3082   0019B8                     u1891:
  3083   0019B8  EFE4  F00C         	goto	l3708
  3084   0019BC                     u1890:
  3085   0019BC                     
  3086                           ; BSR set to: 0
  3087   0019BC  0E00               	movlw	0
  3088   0019BE  6E33               	movwf	(_dtoa$2612+1)^0,c
  3089   0019C0  0E2B               	movlw	43
  3090   0019C2  6E32               	movwf	_dtoa$2612^0,c
  3091   0019C4  EFE8  F00C         	goto	l3710
  3092   0019C8                     l3708:
  3093                           
  3094                           ; BSR set to: 0
  3095   0019C8  0E00               	movlw	0
  3096   0019CA  6E33               	movwf	(_dtoa$2612+1)^0,c
  3097   0019CC  0E2D               	movlw	45
  3098   0019CE  6E32               	movwf	_dtoa$2612^0,c
  3099   0019D0                     l3710:
  3100                           
  3101                           ; BSR set to: 0
  3102   0019D0  C032  F040         	movff	_dtoa$2612,dtoa@s
  3103   0019D4                     l1251:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  3107   0019D4  0E00               	movlw	0
  3108   0019D6  6E42               	movwf	(dtoa@i+1)^0,c
  3109   0019D8  0E1F               	movlw	31
  3110   0019DA  6E41               	movwf	dtoa@i^0,c
  3111   0019DC                     
  3112                           ; BSR set to: 0
  3113                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  3114   0019DC  0E00               	movlw	0
  3115   0019DE  0102               	movlb	2	; () banked
  3116   0019E0  6F6F               	movwf	(_dbuf+31)& (0+255),b
  3117                           
  3118                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3119   0019E2  EF6F  F00D         	goto	l3724
  3120   0019E6                     l3714:
  3121                           
  3122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3123   0019E6  0641               	decf	dtoa@i^0,f,c
  3124   0019E8  A0D8               	btfss	status,0,c
  3125   0019EA  0642               	decf	(dtoa@i+1)^0,f,c
  3126   0019EC                     
  3127                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3128   0019EC  0E50               	movlw	low _dbuf
  3129   0019EE  2441               	addwf	dtoa@i^0,w,c
  3130   0019F0  6ED9               	movwf	fsr2l,c
  3131   0019F2  0E02               	movlw	high _dbuf
  3132   0019F4  2042               	addwfc	(dtoa@i+1)^0,w,c
  3133   0019F6  6EDA               	movwf	fsr2h,c
  3134   0019F8  C038  F005         	movff	dtoa@n,___aomod@dividend
  3135   0019FC  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  3136   001A00  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  3137   001A04  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  3138   001A08  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  3139   001A0C  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  3140   001A10  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  3141   001A14  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  3142   001A18  0E0A               	movlw	10
  3143   001A1A  6E0D               	movwf	___aomod@divisor^0,c
  3144   001A1C  0E00               	movlw	0
  3145   001A1E  6E0E               	movwf	(___aomod@divisor+1)^0,c
  3146   001A20  0E00               	movlw	0
  3147   001A22  6E0F               	movwf	(___aomod@divisor+2)^0,c
  3148   001A24  0E00               	movlw	0
  3149   001A26  6E10               	movwf	(___aomod@divisor+3)^0,c
  3150   001A28  0E00               	movlw	0
  3151   001A2A  6E11               	movwf	(___aomod@divisor+4)^0,c
  3152   001A2C  0E00               	movlw	0
  3153   001A2E  6E12               	movwf	(___aomod@divisor+5)^0,c
  3154   001A30  0E00               	movlw	0
  3155   001A32  6E13               	movwf	(___aomod@divisor+6)^0,c
  3156   001A34  0E00               	movlw	0
  3157   001A36  6E14               	movwf	(___aomod@divisor+7)^0,c
  3158   001A38  EC73  F010         	call	___aomod	;wreg free
  3159   001A3C  C005  F02A         	movff	?___aomod,??_dtoa
  3160   001A40  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  3161   001A44  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  3162   001A48  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  3163   001A4C  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  3164   001A50  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  3165   001A54  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  3166   001A58  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  3167   001A5C  C02A  F017         	movff	??_dtoa,abs@a
  3168   001A60  C02B  F018         	movff	??_dtoa+1,abs@a+1
  3169   001A64  ECD5  F017         	call	_abs	;wreg free
  3170   001A68  5017               	movf	?_abs^0,w,c
  3171   001A6A  0F30               	addlw	48
  3172   001A6C  6EDF               	movwf	indf2,c
  3173   001A6E                     
  3174                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3175   001A6E  0634               	decf	dtoa@p^0,f,c
  3176   001A70  A0D8               	btfss	status,0,c
  3177   001A72  0635               	decf	(dtoa@p+1)^0,f,c
  3178   001A74                     
  3179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3180   001A74  0636               	decf	dtoa@w^0,f,c
  3181   001A76  A0D8               	btfss	status,0,c
  3182   001A78  0637               	decf	(dtoa@w+1)^0,f,c
  3183   001A7A                     
  3184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3185   001A7A  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3186   001A7E  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3187   001A82  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3188   001A86  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3189   001A8A  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3190   001A8E  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3191   001A92  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3192   001A96  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3193   001A9A  0E0A               	movlw	10
  3194   001A9C  6E0D               	movwf	___aodiv@divisor^0,c
  3195   001A9E  0E00               	movlw	0
  3196   001AA0  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3197   001AA2  0E00               	movlw	0
  3198   001AA4  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3199   001AA6  0E00               	movlw	0
  3200   001AA8  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3201   001AAA  0E00               	movlw	0
  3202   001AAC  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3203   001AAE  0E00               	movlw	0
  3204   001AB0  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3205   001AB2  0E00               	movlw	0
  3206   001AB4  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3207   001AB6  0E00               	movlw	0
  3208   001AB8  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3209   001ABA  ECF9  F00E         	call	___aodiv	;wreg free
  3210   001ABE  C005  F038         	movff	?___aodiv,dtoa@n
  3211   001AC2  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3212   001AC6  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3213   001ACA  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3214   001ACE  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3215   001AD2  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3216   001AD6  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3217   001ADA  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3218   001ADE                     l3724:
  3219                           
  3220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3221   001ADE  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3222   001AE0  EF7A  F00D         	goto	u1901
  3223   001AE4  5042               	movf	(dtoa@i+1)^0,w,c
  3224   001AE6  E108               	bnz	u1900
  3225   001AE8  0441               	decf	dtoa@i^0,w,c
  3226   001AEA  A0D8               	btfss	status,0,c
  3227   001AEC  EF7A  F00D         	goto	u1901
  3228   001AF0  EF7C  F00D         	goto	u1900
  3229   001AF4                     u1901:
  3230   001AF4  EF98  F00D         	goto	l3730
  3231   001AF8                     u1900:
  3232   001AF8  5038               	movf	dtoa@n^0,w,c
  3233   001AFA  1039               	iorwf	(dtoa@n+1)^0,w,c
  3234   001AFC  103A               	iorwf	(dtoa@n+2)^0,w,c
  3235   001AFE  103B               	iorwf	(dtoa@n+3)^0,w,c
  3236   001B00  103C               	iorwf	(dtoa@n+4)^0,w,c
  3237   001B02  103D               	iorwf	(dtoa@n+5)^0,w,c
  3238   001B04  103E               	iorwf	(dtoa@n+6)^0,w,c
  3239   001B06  103F               	iorwf	(dtoa@n+7)^0,w,c
  3240   001B08  A4D8               	btfss	status,2,c
  3241   001B0A  EF89  F00D         	goto	u1911
  3242   001B0E  EF8B  F00D         	goto	u1910
  3243   001B12                     u1911:
  3244   001B12  EFF3  F00C         	goto	l3714
  3245   001B16                     u1910:
  3246   001B16  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3247   001B18  EF98  F00D         	goto	u1920
  3248   001B1C  5035               	movf	(dtoa@p+1)^0,w,c
  3249   001B1E  E106               	bnz	u1921
  3250   001B20  0434               	decf	dtoa@p^0,w,c
  3251   001B22  B0D8               	btfsc	status,0,c
  3252   001B24  EF96  F00D         	goto	u1921
  3253   001B28  EF98  F00D         	goto	u1920
  3254   001B2C                     u1921:
  3255   001B2C  EFF3  F00C         	goto	l3714
  3256   001B30                     u1920:
  3257   001B30                     l3730:
  3258                           
  3259                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3260   001B30  5040               	movf	dtoa@s^0,w,c
  3261   001B32  B4D8               	btfsc	status,2,c
  3262   001B34  EF9E  F00D         	goto	u1931
  3263   001B38  EFA0  F00D         	goto	u1930
  3264   001B3C                     u1931:
  3265   001B3C  EFAB  F00D         	goto	l3736
  3266   001B40                     u1930:
  3267   001B40                     
  3268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3269   001B40  0641               	decf	dtoa@i^0,f,c
  3270   001B42  A0D8               	btfss	status,0,c
  3271   001B44  0642               	decf	(dtoa@i+1)^0,f,c
  3272   001B46                     
  3273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3274   001B46  0E50               	movlw	low _dbuf
  3275   001B48  2441               	addwf	dtoa@i^0,w,c
  3276   001B4A  6ED9               	movwf	fsr2l,c
  3277   001B4C  0E02               	movlw	high _dbuf
  3278   001B4E  2042               	addwfc	(dtoa@i+1)^0,w,c
  3279   001B50  6EDA               	movwf	fsr2h,c
  3280   001B52  C040  FFDF         	movff	dtoa@s,indf2
  3281   001B56                     l3736:
  3282                           
  3283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3284   001B56  C020  F015         	movff	dtoa@fp,pad@fp
  3285   001B5A  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3286   001B5E  0E50               	movlw	low _dbuf
  3287   001B60  2441               	addwf	dtoa@i^0,w,c
  3288   001B62  6E17               	movwf	pad@buf^0,c
  3289   001B64  0E02               	movlw	high _dbuf
  3290   001B66  2042               	addwfc	(dtoa@i+1)^0,w,c
  3291   001B68  6E18               	movwf	(pad@buf+1)^0,c
  3292   001B6A  C036  F019         	movff	dtoa@w,pad@p
  3293   001B6E  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3294   001B72  ECF4  F015         	call	_pad	;wreg free
  3295   001B76  0012               	return		;funcret
  3296   001B78                     __end_of_dtoa:
  3297                           	callstack 0
  3298                           
  3299 ;; *************** function _pad *****************
  3300 ;; Defined at:
  3301 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3304 ;;		 -> sprintf@f(11), 
  3305 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3306 ;;		 -> dbuf(32), 
  3307 ;;  p               2   24[COMRAM] int 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  w               2   29[COMRAM] int 
  3310 ;;  i               2   27[COMRAM] int 
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3320 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3324 ;;Total ram usage:       11 bytes
  3325 ;; Hardware stack levels used: 1
  3326 ;; Hardware stack levels required when called: 7
  3327 ;; This function calls:
  3328 ;;		_fputc
  3329 ;;		_fputs
  3330 ;; This function is called by:
  3331 ;;		_dtoa
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text12
  3336   002BE8                     __ptext12:
  3337                           	callstack 0
  3338   002BE8                     _pad:
  3339                           	callstack 19
  3340   002BE8                     
  3341                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3342   002BE8  BE1A               	btfsc	(pad@p+1)^0,7,c
  3343   002BEA  EFF9  F015         	goto	u1821
  3344   002BEE  EFFB  F015         	goto	u1820
  3345   002BF2                     u1821:
  3346   002BF2  EF01  F016         	goto	l3678
  3347   002BF6                     u1820:
  3348   002BF6  C019  F01E         	movff	pad@p,pad@w
  3349   002BFA  C01A  F01F         	movff	pad@p+1,pad@w+1
  3350   002BFE  EF05  F016         	goto	l1239
  3351   002C02                     l3678:
  3352   002C02  0E00               	movlw	0
  3353   002C04  6E1F               	movwf	(pad@w+1)^0,c
  3354   002C06  0E00               	movlw	0
  3355   002C08  6E1E               	movwf	pad@w^0,c
  3356   002C0A                     l1239:
  3357                           
  3358                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3359   002C0A  0E00               	movlw	0
  3360   002C0C  6E1D               	movwf	(pad@i+1)^0,c
  3361   002C0E  0E00               	movlw	0
  3362   002C10  6E1C               	movwf	pad@i^0,c
  3363                           
  3364                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3365   002C12  EF17  F016         	goto	l3684
  3366   002C16                     l3680:
  3367                           
  3368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3369   002C16  0E00               	movlw	0
  3370   002C18  6E06               	movwf	(fputc@c+1)^0,c
  3371   002C1A  0E20               	movlw	32
  3372   002C1C  6E05               	movwf	fputc@c^0,c
  3373   002C1E  C015  F007         	movff	pad@fp,fputc@fp
  3374   002C22  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3375   002C26  EC8E  F013         	call	_fputc	;wreg free
  3376   002C2A                     
  3377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3378   002C2A  4A1C               	infsnz	pad@i^0,f,c
  3379   002C2C  2A1D               	incf	(pad@i+1)^0,f,c
  3380   002C2E                     l3684:
  3381                           
  3382                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3383   002C2E  501E               	movf	pad@w^0,w,c
  3384   002C30  5C1C               	subwf	pad@i^0,w,c
  3385   002C32  501D               	movf	(pad@i+1)^0,w,c
  3386   002C34  0A80               	xorlw	128
  3387   002C36  6E1B               	movwf	??_pad^0,c
  3388   002C38  501F               	movf	(pad@w+1)^0,w,c
  3389   002C3A  0A80               	xorlw	128
  3390   002C3C  581B               	subwfb	??_pad^0,w,c
  3391   002C3E  A0D8               	btfss	status,0,c
  3392   002C40  EF24  F016         	goto	u1831
  3393   002C44  EF26  F016         	goto	u1830
  3394   002C48                     u1831:
  3395   002C48  EF0B  F016         	goto	l3680
  3396   002C4C                     u1830:
  3397   002C4C                     
  3398                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3399   002C4C  C017  F00E         	movff	pad@buf,fputs@s
  3400   002C50  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3401   002C54  C015  F010         	movff	pad@fp,fputs@fp
  3402   002C58  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3403   002C5C  EC92  F017         	call	_fputs	;wreg free
  3404   002C60  0012               	return		;funcret
  3405   002C62                     __end_of_pad:
  3406                           	callstack 0
  3407                           
  3408 ;; *************** function _fputs *****************
  3409 ;; Defined at:
  3410 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3413 ;;		 -> dbuf(32), 
  3414 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3415 ;;		 -> sprintf@f(11), 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  i               2   18[COMRAM] int 
  3418 ;;  c               1   17[COMRAM] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2   13[COMRAM] int 
  3421 ;; Registers used:
  3422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;Total ram usage:        7 bytes
  3433 ;; Hardware stack levels used: 1
  3434 ;; Hardware stack levels required when called: 6
  3435 ;; This function calls:
  3436 ;;		_fputc
  3437 ;; This function is called by:
  3438 ;;		_pad
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text13
  3443   002F24                     __ptext13:
  3444                           	callstack 0
  3445   002F24                     _fputs:
  3446                           	callstack 19
  3447   002F24  0E00               	movlw	0
  3448   002F26  6E14               	movwf	(fputs@i+1)^0,c
  3449   002F28  0E00               	movlw	0
  3450   002F2A  6E13               	movwf	fputs@i^0,c
  3451   002F2C  EFA3  F017         	goto	l3588
  3452   002F30                     l3584:
  3453   002F30  C012  F005         	movff	fputs@c,fputc@c
  3454   002F34  6A06               	clrf	(fputc@c+1)^0,c
  3455   002F36  C010  F007         	movff	fputs@fp,fputc@fp
  3456   002F3A  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3457   002F3E  EC8E  F013         	call	_fputc	;wreg free
  3458   002F42  4A13               	infsnz	fputs@i^0,f,c
  3459   002F44  2A14               	incf	(fputs@i+1)^0,f,c
  3460   002F46                     l3588:
  3461   002F46  5013               	movf	fputs@i^0,w,c
  3462   002F48  240E               	addwf	fputs@s^0,w,c
  3463   002F4A  6ED9               	movwf	fsr2l,c
  3464   002F4C  5014               	movf	(fputs@i+1)^0,w,c
  3465   002F4E  200F               	addwfc	(fputs@s+1)^0,w,c
  3466   002F50  6EDA               	movwf	fsr2h,c
  3467   002F52  50DF               	movf	indf2,w,c
  3468   002F54  6E12               	movwf	fputs@c^0,c
  3469   002F56  5012               	movf	fputs@c^0,w,c
  3470   002F58  A4D8               	btfss	status,2,c
  3471   002F5A  EFB1  F017         	goto	u1671
  3472   002F5E  EFB3  F017         	goto	u1670
  3473   002F62                     u1671:
  3474   002F62  EF98  F017         	goto	l3584
  3475   002F66                     u1670:
  3476   002F66  0012               	return		;funcret
  3477   002F68                     __end_of_fputs:
  3478                           	callstack 0
  3479                           
  3480 ;; *************** function _fputc *****************
  3481 ;; Defined at:
  3482 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  c               2    4[COMRAM] int 
  3485 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3486 ;;		 -> sprintf@f(11), 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  2    4[COMRAM] int 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;Total ram usage:        9 bytes
  3503 ;; Hardware stack levels used: 1
  3504 ;; Hardware stack levels required when called: 5
  3505 ;; This function calls:
  3506 ;;		_putch
  3507 ;; This function is called by:
  3508 ;;		_pad
  3509 ;;		_vfpfcnvrt
  3510 ;;		_fputs
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text14
  3515   00271C                     __ptext14:
  3516                           	callstack 0
  3517   00271C                     _fputc:
  3518                           	callstack 22
  3519   00271C  5007               	movf	fputc@fp^0,w,c
  3520   00271E  1008               	iorwf	(fputc@fp+1)^0,w,c
  3521   002720  B4D8               	btfsc	status,2,c
  3522   002722  EF95  F013         	goto	u1631
  3523   002726  EF97  F013         	goto	u1630
  3524   00272A                     u1631:
  3525   00272A  EFA0  F013         	goto	l3572
  3526   00272E                     u1630:
  3527   00272E  5007               	movf	fputc@fp^0,w,c
  3528   002730  1008               	iorwf	(fputc@fp+1)^0,w,c
  3529   002732  A4D8               	btfss	status,2,c
  3530   002734  EF9E  F013         	goto	u1641
  3531   002738  EFA0  F013         	goto	u1640
  3532   00273C                     u1641:
  3533   00273C  EFA5  F013         	goto	l3574
  3534   002740                     u1640:
  3535   002740                     l3572:
  3536   002740  5005               	movf	fputc@c^0,w,c
  3537   002742  EC2B  F019         	call	_putch
  3538   002746  EFF2  F013         	goto	l1287
  3539   00274A                     l3574:
  3540   00274A  EE20 F009          	lfsr	2,9
  3541   00274E  5007               	movf	fputc@fp^0,w,c
  3542   002750  26D9               	addwf	fsr2l,f,c
  3543   002752  5008               	movf	(fputc@fp+1)^0,w,c
  3544   002754  22DA               	addwfc	fsr2h,f,c
  3545   002756  50DE               	movf	postinc2,w,c
  3546   002758  10DE               	iorwf	postinc2,w,c
  3547   00275A  B4D8               	btfsc	status,2,c
  3548   00275C  EFB2  F013         	goto	u1651
  3549   002760  EFB4  F013         	goto	u1650
  3550   002764                     u1651:
  3551   002764  EFCF  F013         	goto	l3578
  3552   002768                     u1650:
  3553   002768  EE20 F009          	lfsr	2,9
  3554   00276C  5007               	movf	fputc@fp^0,w,c
  3555   00276E  26D9               	addwf	fsr2l,f,c
  3556   002770  5008               	movf	(fputc@fp+1)^0,w,c
  3557   002772  22DA               	addwfc	fsr2h,f,c
  3558   002774  EE10 F003          	lfsr	1,3
  3559   002778  5007               	movf	fputc@fp^0,w,c
  3560   00277A  26E1               	addwf	fsr1l,f,c
  3561   00277C  5008               	movf	(fputc@fp+1)^0,w,c
  3562   00277E  22E2               	addwfc	fsr1h,f,c
  3563   002780  50DE               	movf	postinc2,w,c
  3564   002782  5CE6               	subwf	postinc1,w,c
  3565   002784  50E6               	movf	postinc1,w,c
  3566   002786  0A80               	xorlw	128
  3567   002788  6E0D               	movwf	(??_fputc+4)^0,c
  3568   00278A  50DE               	movf	postinc2,w,c
  3569   00278C  0A80               	xorlw	128
  3570   00278E  580D               	subwfb	(??_fputc+4)^0,w,c
  3571   002790  B0D8               	btfsc	status,0,c
  3572   002792  EFCD  F013         	goto	u1661
  3573   002796  EFCF  F013         	goto	u1660
  3574   00279A                     u1661:
  3575   00279A  EFF2  F013         	goto	l1287
  3576   00279E                     u1660:
  3577   00279E                     l3578:
  3578   00279E  EE20 F003          	lfsr	2,3
  3579   0027A2  5007               	movf	fputc@fp^0,w,c
  3580   0027A4  26D9               	addwf	fsr2l,f,c
  3581   0027A6  5008               	movf	(fputc@fp+1)^0,w,c
  3582   0027A8  22DA               	addwfc	fsr2h,f,c
  3583   0027AA  CFDE F009          	movff	postinc2,??_fputc
  3584   0027AE  CFDD F00A          	movff	postdec2,??_fputc+1
  3585   0027B2  C007  FFD9         	movff	fputc@fp,fsr2l
  3586   0027B6  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3587   0027BA  CFDE F00B          	movff	postinc2,??_fputc+2
  3588   0027BE  CFDD F00C          	movff	postdec2,??_fputc+3
  3589   0027C2  5009               	movf	??_fputc^0,w,c
  3590   0027C4  240B               	addwf	(??_fputc+2)^0,w,c
  3591   0027C6  6ED9               	movwf	fsr2l,c
  3592   0027C8  500A               	movf	(??_fputc+1)^0,w,c
  3593   0027CA  200C               	addwfc	(??_fputc+3)^0,w,c
  3594   0027CC  6EDA               	movwf	fsr2h,c
  3595   0027CE  C005  FFDF         	movff	fputc@c,indf2
  3596   0027D2  EE20 F003          	lfsr	2,3
  3597   0027D6  5007               	movf	fputc@fp^0,w,c
  3598   0027D8  26D9               	addwf	fsr2l,f,c
  3599   0027DA  5008               	movf	(fputc@fp+1)^0,w,c
  3600   0027DC  22DA               	addwfc	fsr2h,f,c
  3601   0027DE  2ADE               	incf	postinc2,f,c
  3602   0027E0  0E00               	movlw	0
  3603   0027E2  22DD               	addwfc	postdec2,f,c
  3604   0027E4                     l1287:
  3605   0027E4  0012               	return		;funcret
  3606   0027E6                     __end_of_fputc:
  3607                           	callstack 0
  3608                           
  3609 ;; *************** function _putch *****************
  3610 ;; Defined at:
  3611 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  c               1    wreg     unsigned char 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  c               1    0[COMRAM] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used: 1
  3631 ;; Hardware stack levels required when called: 4
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_fputc
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text15
  3640   003256                     __ptext15:
  3641                           	callstack 0
  3642   003256                     _putch:
  3643                           	callstack 22
  3644   003256  0012               	return		;funcret
  3645   003258                     __end_of_putch:
  3646                           	callstack 0
  3647                           
  3648 ;; *************** function ___aomod *****************
  3649 ;; Defined at:
  3650 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  dividend        8    4[COMRAM] long long 
  3653 ;;  divisor         8   12[COMRAM] long long 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  sign            1   21[COMRAM] unsigned char 
  3656 ;;  counter         1   20[COMRAM] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  8    4[COMRAM] long long 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3666 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3670 ;;Total ram usage:       18 bytes
  3671 ;; Hardware stack levels used: 1
  3672 ;; Hardware stack levels required when called: 4
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_dtoa
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text16
  3681   0020E6                     __ptext16:
  3682                           	callstack 0
  3683   0020E6                     ___aomod:
  3684                           	callstack 22
  3685   0020E6  0E00               	movlw	0
  3686   0020E8  6E16               	movwf	___aomod@sign^0,c
  3687   0020EA  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3688   0020EC  EF7C  F010         	goto	u1760
  3689   0020F0  EF7A  F010         	goto	u1761
  3690   0020F4                     u1761:
  3691   0020F4  EF8E  F010         	goto	l3646
  3692   0020F8                     u1760:
  3693   0020F8  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3694   0020FA  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3695   0020FC  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3696   0020FE  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3697   002100  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3698   002102  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3699   002104  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3700   002106  6C05               	negf	___aomod@dividend^0,c
  3701   002108  0E00               	movlw	0
  3702   00210A  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3703   00210C  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3704   00210E  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3705   002110  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3706   002112  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3707   002114  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3708   002116  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3709   002118  0E01               	movlw	1
  3710   00211A  6E16               	movwf	___aomod@sign^0,c
  3711   00211C                     l3646:
  3712   00211C  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3713   00211E  EF95  F010         	goto	u1770
  3714   002122  EF93  F010         	goto	u1771
  3715   002126                     u1771:
  3716   002126  EFA5  F010         	goto	l3650
  3717   00212A                     u1770:
  3718   00212A  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3719   00212C  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3720   00212E  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3721   002130  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3722   002132  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3723   002134  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3724   002136  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3725   002138  6C0D               	negf	___aomod@divisor^0,c
  3726   00213A  0E00               	movlw	0
  3727   00213C  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3728   00213E  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3729   002140  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3730   002142  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3731   002144  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3732   002146  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3733   002148  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3734   00214A                     l3650:
  3735   00214A  500D               	movf	___aomod@divisor^0,w,c
  3736   00214C  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3737   00214E  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3738   002150  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3739   002152  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3740   002154  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3741   002156  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3742   002158  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3743   00215A  B4D8               	btfsc	status,2,c
  3744   00215C  EFB2  F010         	goto	u1781
  3745   002160  EFB4  F010         	goto	u1780
  3746   002164                     u1781:
  3747   002164  EFFC  F010         	goto	l3666
  3748   002168                     u1780:
  3749   002168  0E01               	movlw	1
  3750   00216A  6E15               	movwf	___aomod@counter^0,c
  3751   00216C  EFC2  F010         	goto	l3656
  3752   002170                     l3654:
  3753   002170  90D8               	bcf	status,0,c
  3754   002172  360D               	rlcf	___aomod@divisor^0,f,c
  3755   002174  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3756   002176  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3757   002178  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3758   00217A  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3759   00217C  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3760   00217E  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3761   002180  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3762   002182  2A15               	incf	___aomod@counter^0,f,c
  3763   002184                     l3656:
  3764   002184  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3765   002186  EFC7  F010         	goto	u1791
  3766   00218A  EFC9  F010         	goto	u1790
  3767   00218E                     u1791:
  3768   00218E  EFB8  F010         	goto	l3654
  3769   002192                     u1790:
  3770   002192                     l3658:
  3771   002192  500D               	movf	___aomod@divisor^0,w,c
  3772   002194  5C05               	subwf	___aomod@dividend^0,w,c
  3773   002196  500E               	movf	(___aomod@divisor+1)^0,w,c
  3774   002198  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3775   00219A  500F               	movf	(___aomod@divisor+2)^0,w,c
  3776   00219C  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3777   00219E  5010               	movf	(___aomod@divisor+3)^0,w,c
  3778   0021A0  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3779   0021A2  5011               	movf	(___aomod@divisor+4)^0,w,c
  3780   0021A4  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3781   0021A6  5012               	movf	(___aomod@divisor+5)^0,w,c
  3782   0021A8  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3783   0021AA  5013               	movf	(___aomod@divisor+6)^0,w,c
  3784   0021AC  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3785   0021AE  5014               	movf	(___aomod@divisor+7)^0,w,c
  3786   0021B0  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3787   0021B2  A0D8               	btfss	status,0,c
  3788   0021B4  EFDE  F010         	goto	u1801
  3789   0021B8  EFE0  F010         	goto	u1800
  3790   0021BC                     u1801:
  3791   0021BC  EFF0  F010         	goto	l3662
  3792   0021C0                     u1800:
  3793   0021C0  500D               	movf	___aomod@divisor^0,w,c
  3794   0021C2  5E05               	subwf	___aomod@dividend^0,f,c
  3795   0021C4  500E               	movf	(___aomod@divisor+1)^0,w,c
  3796   0021C6  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3797   0021C8  500F               	movf	(___aomod@divisor+2)^0,w,c
  3798   0021CA  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3799   0021CC  5010               	movf	(___aomod@divisor+3)^0,w,c
  3800   0021CE  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3801   0021D0  5011               	movf	(___aomod@divisor+4)^0,w,c
  3802   0021D2  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3803   0021D4  5012               	movf	(___aomod@divisor+5)^0,w,c
  3804   0021D6  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3805   0021D8  5013               	movf	(___aomod@divisor+6)^0,w,c
  3806   0021DA  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3807   0021DC  5014               	movf	(___aomod@divisor+7)^0,w,c
  3808   0021DE  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3809   0021E0                     l3662:
  3810   0021E0  90D8               	bcf	status,0,c
  3811   0021E2  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3812   0021E4  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3813   0021E6  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3814   0021E8  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3815   0021EA  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3816   0021EC  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3817   0021EE  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3818   0021F0  320D               	rrcf	___aomod@divisor^0,f,c
  3819   0021F2  2E15               	decfsz	___aomod@counter^0,f,c
  3820   0021F4  EFC9  F010         	goto	l3658
  3821   0021F8                     l3666:
  3822   0021F8  5016               	movf	___aomod@sign^0,w,c
  3823   0021FA  B4D8               	btfsc	status,2,c
  3824   0021FC  EF02  F011         	goto	u1811
  3825   002200  EF04  F011         	goto	u1810
  3826   002204                     u1811:
  3827   002204  EF14  F011         	goto	l3670
  3828   002208                     u1810:
  3829   002208  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3830   00220A  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3831   00220C  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3832   00220E  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3833   002210  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3834   002212  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3835   002214  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3836   002216  6C05               	negf	___aomod@dividend^0,c
  3837   002218  0E00               	movlw	0
  3838   00221A  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3839   00221C  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3840   00221E  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3841   002220  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3842   002222  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3843   002224  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3844   002226  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3845   002228                     l3670:
  3846   002228  C005  F005         	movff	___aomod@dividend,?___aomod
  3847   00222C  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3848   002230  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3849   002234  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3850   002238  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3851   00223C  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3852   002240  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3853   002244  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3854   002248  0012               	return		;funcret
  3855   00224A                     __end_of___aomod:
  3856                           	callstack 0
  3857                           
  3858 ;; *************** function ___aodiv *****************
  3859 ;; Defined at:
  3860 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  dividend        8    4[COMRAM] long long 
  3863 ;;  divisor         8   12[COMRAM] long long 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  quotient        8   22[COMRAM] long long 
  3866 ;;  sign            1   21[COMRAM] unsigned char 
  3867 ;;  counter         1   20[COMRAM] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  8    4[COMRAM] long long 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3877 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3880 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3881 ;;Total ram usage:       26 bytes
  3882 ;; Hardware stack levels used: 1
  3883 ;; Hardware stack levels required when called: 4
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_dtoa
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text17
  3892   001DF2                     __ptext17:
  3893                           	callstack 0
  3894   001DF2                     ___aodiv:
  3895                           	callstack 22
  3896   001DF2  0E00               	movlw	0
  3897   001DF4  6E16               	movwf	___aodiv@sign^0,c
  3898   001DF6  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3899   001DF8  EF02  F00F         	goto	u1690
  3900   001DFC  EF00  F00F         	goto	u1691
  3901   001E00                     u1691:
  3902   001E00  EF14  F00F         	goto	l3602
  3903   001E04                     u1690:
  3904   001E04  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3905   001E06  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3906   001E08  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3907   001E0A  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3908   001E0C  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3909   001E0E  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3910   001E10  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3911   001E12  6C0D               	negf	___aodiv@divisor^0,c
  3912   001E14  0E00               	movlw	0
  3913   001E16  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3914   001E18  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3915   001E1A  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3916   001E1C  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3917   001E1E  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3918   001E20  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3919   001E22  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3920   001E24  0E01               	movlw	1
  3921   001E26  6E16               	movwf	___aodiv@sign^0,c
  3922   001E28                     l3602:
  3923   001E28  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3924   001E2A  EF1B  F00F         	goto	u1700
  3925   001E2E  EF19  F00F         	goto	u1701
  3926   001E32                     u1701:
  3927   001E32  EF2D  F00F         	goto	l3608
  3928   001E36                     u1700:
  3929   001E36  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3930   001E38  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3931   001E3A  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3932   001E3C  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3933   001E3E  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3934   001E40  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3935   001E42  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3936   001E44  6C05               	negf	___aodiv@dividend^0,c
  3937   001E46  0E00               	movlw	0
  3938   001E48  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3939   001E4A  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3940   001E4C  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3941   001E4E  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3942   001E50  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3943   001E52  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3944   001E54  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3945   001E56  0E01               	movlw	1
  3946   001E58  1A16               	xorwf	___aodiv@sign^0,f,c
  3947   001E5A                     l3608:
  3948   001E5A  EE20  F017         	lfsr	2,___aodiv@quotient
  3949   001E5E  0E07               	movlw	7
  3950   001E60                     u1711:
  3951   001E60  6ADE               	clrf	postinc2,c
  3952   001E62  06E8               	decf	wreg,f,c
  3953   001E64  E2FD               	bc	u1711
  3954   001E66  500D               	movf	___aodiv@divisor^0,w,c
  3955   001E68  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3956   001E6A  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3957   001E6C  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3958   001E6E  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3959   001E70  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3960   001E72  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3961   001E74  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3962   001E76  B4D8               	btfsc	status,2,c
  3963   001E78  EF40  F00F         	goto	u1721
  3964   001E7C  EF42  F00F         	goto	u1720
  3965   001E80                     u1721:
  3966   001E80  EF94  F00F         	goto	l3630
  3967   001E84                     u1720:
  3968   001E84  0E01               	movlw	1
  3969   001E86  6E15               	movwf	___aodiv@counter^0,c
  3970   001E88  EF50  F00F         	goto	l3616
  3971   001E8C                     l3614:
  3972   001E8C  90D8               	bcf	status,0,c
  3973   001E8E  360D               	rlcf	___aodiv@divisor^0,f,c
  3974   001E90  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3975   001E92  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3976   001E94  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3977   001E96  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3978   001E98  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3979   001E9A  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3980   001E9C  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3981   001E9E  2A15               	incf	___aodiv@counter^0,f,c
  3982   001EA0                     l3616:
  3983   001EA0  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3984   001EA2  EF55  F00F         	goto	u1731
  3985   001EA6  EF57  F00F         	goto	u1730
  3986   001EAA                     u1731:
  3987   001EAA  EF46  F00F         	goto	l3614
  3988   001EAE                     u1730:
  3989   001EAE                     l3618:
  3990   001EAE  90D8               	bcf	status,0,c
  3991   001EB0  3617               	rlcf	___aodiv@quotient^0,f,c
  3992   001EB2  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3993   001EB4  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3994   001EB6  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3995   001EB8  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3996   001EBA  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3997   001EBC  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3998   001EBE  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3999   001EC0  500D               	movf	___aodiv@divisor^0,w,c
  4000   001EC2  5C05               	subwf	___aodiv@dividend^0,w,c
  4001   001EC4  500E               	movf	(___aodiv@divisor+1)^0,w,c
  4002   001EC6  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  4003   001EC8  500F               	movf	(___aodiv@divisor+2)^0,w,c
  4004   001ECA  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  4005   001ECC  5010               	movf	(___aodiv@divisor+3)^0,w,c
  4006   001ECE  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  4007   001ED0  5011               	movf	(___aodiv@divisor+4)^0,w,c
  4008   001ED2  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  4009   001ED4  5012               	movf	(___aodiv@divisor+5)^0,w,c
  4010   001ED6  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  4011   001ED8  5013               	movf	(___aodiv@divisor+6)^0,w,c
  4012   001EDA  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  4013   001EDC  5014               	movf	(___aodiv@divisor+7)^0,w,c
  4014   001EDE  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  4015   001EE0  A0D8               	btfss	status,0,c
  4016   001EE2  EF75  F00F         	goto	u1741
  4017   001EE6  EF77  F00F         	goto	u1740
  4018   001EEA                     u1741:
  4019   001EEA  EF88  F00F         	goto	l3626
  4020   001EEE                     u1740:
  4021   001EEE  500D               	movf	___aodiv@divisor^0,w,c
  4022   001EF0  5E05               	subwf	___aodiv@dividend^0,f,c
  4023   001EF2  500E               	movf	(___aodiv@divisor+1)^0,w,c
  4024   001EF4  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  4025   001EF6  500F               	movf	(___aodiv@divisor+2)^0,w,c
  4026   001EF8  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  4027   001EFA  5010               	movf	(___aodiv@divisor+3)^0,w,c
  4028   001EFC  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  4029   001EFE  5011               	movf	(___aodiv@divisor+4)^0,w,c
  4030   001F00  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  4031   001F02  5012               	movf	(___aodiv@divisor+5)^0,w,c
  4032   001F04  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  4033   001F06  5013               	movf	(___aodiv@divisor+6)^0,w,c
  4034   001F08  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  4035   001F0A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  4036   001F0C  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  4037   001F0E  8017               	bsf	___aodiv@quotient^0,0,c
  4038   001F10                     l3626:
  4039   001F10  90D8               	bcf	status,0,c
  4040   001F12  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  4041   001F14  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  4042   001F16  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  4043   001F18  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  4044   001F1A  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  4045   001F1C  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  4046   001F1E  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  4047   001F20  320D               	rrcf	___aodiv@divisor^0,f,c
  4048   001F22  2E15               	decfsz	___aodiv@counter^0,f,c
  4049   001F24  EF57  F00F         	goto	l3618
  4050   001F28                     l3630:
  4051   001F28  5016               	movf	___aodiv@sign^0,w,c
  4052   001F2A  B4D8               	btfsc	status,2,c
  4053   001F2C  EF9A  F00F         	goto	u1751
  4054   001F30  EF9C  F00F         	goto	u1750
  4055   001F34                     u1751:
  4056   001F34  EFAC  F00F         	goto	l3634
  4057   001F38                     u1750:
  4058   001F38  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  4059   001F3A  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  4060   001F3C  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  4061   001F3E  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  4062   001F40  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  4063   001F42  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  4064   001F44  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  4065   001F46  6C17               	negf	___aodiv@quotient^0,c
  4066   001F48  0E00               	movlw	0
  4067   001F4A  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  4068   001F4C  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  4069   001F4E  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  4070   001F50  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  4071   001F52  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  4072   001F54  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  4073   001F56  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  4074   001F58                     l3634:
  4075   001F58  C017  F005         	movff	___aodiv@quotient,?___aodiv
  4076   001F5C  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  4077   001F60  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  4078   001F64  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  4079   001F68  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  4080   001F6C  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  4081   001F70  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  4082   001F74  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  4083   001F78  0012               	return		;funcret
  4084   001F7A                     __end_of___aodiv:
  4085                           	callstack 0
  4086                           
  4087 ;; *************** function _sendStringSerial4 *****************
  4088 ;; Defined at:
  4089 ;;		line 39 in file "serial.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  string          2    5[COMRAM] PTR unsigned char 
  4092 ;;		 -> main@buf(150), 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used: 1
  4110 ;; Hardware stack levels required when called: 5
  4111 ;; This function calls:
  4112 ;;		_sendCharSerial4
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;;		_clear_read_calibration
  4116 ;;		_card_response
  4117 ;;		_card_response_easy
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text18
  4122   00305C                     __ptext18:
  4123                           	callstack 0
  4124   00305C                     _sendStringSerial4:
  4125                           	callstack 25
  4126   00305C                     
  4127                           ;serial.c: 40:  while(*string != 0) {
  4128   00305C  EF39  F018         	goto	l2956
  4129   003060                     l2952:
  4130                           
  4131                           ;serial.c: 41:         sendCharSerial4(*string++);
  4132   003060  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4133   003064  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4134   003068  50DF               	movf	indf2,w,c
  4135   00306A  ECDC  F018         	call	_sendCharSerial4
  4136   00306E  4A06               	infsnz	sendStringSerial4@string^0,f,c
  4137   003070  2A07               	incf	(sendStringSerial4@string+1)^0,f,c
  4138   003072                     l2956:
  4139                           
  4140                           ;serial.c: 40:  while(*string != 0) {
  4141   003072  C006  FFD9         	movff	sendStringSerial4@string,fsr2l
  4142   003076  C007  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4143   00307A  50DF               	movf	indf2,w,c
  4144   00307C  A4D8               	btfss	status,2,c
  4145   00307E  EF43  F018         	goto	u1411
  4146   003082  EF45  F018         	goto	u1410
  4147   003086                     u1411:
  4148   003086  EF30  F018         	goto	l2952
  4149   00308A                     u1410:
  4150   00308A  0012               	return		;funcret
  4151   00308C                     __end_of_sendStringSerial4:
  4152                           	callstack 0
  4153                           
  4154 ;; *************** function _sendCharSerial4 *****************
  4155 ;; Defined at:
  4156 ;;		line 32 in file "serial.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  charToSend      1    wreg     unsigned char 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  charToSend      1    4[COMRAM] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4174 ;;Total ram usage:        1 bytes
  4175 ;; Hardware stack levels used: 1
  4176 ;; Hardware stack levels required when called: 4
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_sendStringSerial4
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text19
  4185   0031B8                     __ptext19:
  4186                           	callstack 0
  4187   0031B8                     _sendCharSerial4:
  4188                           	callstack 25
  4189                           
  4190                           ;incstack = 0
  4191                           ;sendCharSerial4@charToSend stored from wreg
  4192   0031B8  6E05               	movwf	sendCharSerial4@charToSend^0,c
  4193   0031BA                     l430:
  4194   0031BA  010E               	movlb	14	; () banked
  4195   0031BC  A537               	btfss	55,2,b	;volatile
  4196   0031BE  EFE3  F018         	goto	u1321
  4197   0031C2  EFE5  F018         	goto	u1320
  4198   0031C6                     u1321:
  4199   0031C6  EFDD  F018         	goto	l430
  4200   0031CA                     u1320:
  4201   0031CA                     
  4202                           ; BSR set to: 14
  4203                           ;serial.c: 34:     TX4REG = charToSend;
  4204   0031CA  C005  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4205   0031CE                     
  4206                           ; BSR set to: 14
  4207   0031CE  0012               	return		;funcret
  4208   0031D0                     __end_of_sendCharSerial4:
  4209                           	callstack 0
  4210                           
  4211 ;; *************** function _normalise_readings *****************
  4212 ;; Defined at:
  4213 ;;		line 70 in file "colour_identify.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  buf             2   26[COMRAM] PTR unsigned char 
  4216 ;;		 -> main@buf(150), 
  4217 ;;  clear_read      2   28[COMRAM] unsigned int 
  4218 ;;  red_read        2   30[COMRAM] unsigned int 
  4219 ;;  green_read      2   32[COMRAM] unsigned int 
  4220 ;;  blue_read       2   34[COMRAM] unsigned int 
  4221 ;;  expected_val    2   36[COMRAM] PTR unsigned int [9]
  4222 ;;		 -> main@expected_values(72), 
  4223 ;;  normalised_v    2   38[COMRAM] PTR unsigned int [9]
  4224 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  difference      2   48[COMRAM] unsigned int 
  4227 ;;  i               1   50[COMRAM] enum E14551
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4237 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4239 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4240 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4241 ;;Total ram usage:       25 bytes
  4242 ;; Hardware stack levels used: 1
  4243 ;; Hardware stack levels required when called: 5
  4244 ;; This function calls:
  4245 ;;		___lwdiv
  4246 ;;		___wmul
  4247 ;;		_abs
  4248 ;; This function is called by:
  4249 ;;		_card_response
  4250 ;;		_card_response_easy
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text20
  4255   001616                     __ptext20:
  4256                           	callstack 0
  4257   001616                     _normalise_readings:
  4258                           	callstack 24
  4259   001616                     
  4260                           ;colour_identify.c: 77:     for(colour i = RED; i<= BLACK; i++){
  4261   001616  0E01               	movlw	1
  4262   001618  6E33               	movwf	normalise_readings@i^0,c
  4263   00161A                     l3798:
  4264                           
  4265                           ;colour_identify.c: 81:         unsigned int difference = abs(clear_read - expected_valu
      +                          es[CLEAR][i]);
  4266   00161A  5033               	movf	normalise_readings@i^0,w,c
  4267   00161C  0D02               	mullw	2
  4268   00161E  CFF3 F029          	movff	prodl,??_normalise_readings
  4269   001622  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4270   001626  5029               	movf	??_normalise_readings^0,w,c
  4271   001628  2425               	addwf	normalise_readings@expected_values^0,w,c
  4272   00162A  6ED9               	movwf	fsr2l,c
  4273   00162C  502A               	movf	(??_normalise_readings+1)^0,w,c
  4274   00162E  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4275   001630  6EDA               	movwf	fsr2h,c
  4276   001632  CFDE F02B          	movff	postinc2,??_normalise_readings+2
  4277   001636  CFDD F02C          	movff	postdec2,??_normalise_readings+3
  4278   00163A  502B               	movf	(??_normalise_readings+2)^0,w,c
  4279   00163C  5C1D               	subwf	normalise_readings@clear_read^0,w,c
  4280   00163E  6E17               	movwf	abs@a^0,c
  4281   001640  502C               	movf	(??_normalise_readings+3)^0,w,c
  4282   001642  581E               	subwfb	(normalise_readings@clear_read+1)^0,w,c
  4283   001644  6E18               	movwf	(abs@a+1)^0,c
  4284   001646  ECD5  F017         	call	_abs	;wreg free
  4285   00164A  C017  F031         	movff	?_abs,normalise_readings@difference
  4286   00164E  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4287                           
  4288                           ;colour_identify.c: 82:         normalised_values[CLEAR][i] = (difference*100) / expecte
      +                          d_values[CLEAR][i];
  4289   001652  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4290   001656  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4291   00165A  0E00               	movlw	0
  4292   00165C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4293   00165E  0E64               	movlw	100
  4294   001660  6E07               	movwf	___wmul@multiplicand^0,c
  4295   001662  EC98  F018         	call	___wmul	;wreg free
  4296   001666  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4297   00166A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4298   00166E  5033               	movf	normalise_readings@i^0,w,c
  4299   001670  0D02               	mullw	2
  4300   001672  CFF3 F029          	movff	prodl,??_normalise_readings
  4301   001676  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4302   00167A  5029               	movf	??_normalise_readings^0,w,c
  4303   00167C  2425               	addwf	normalise_readings@expected_values^0,w,c
  4304   00167E  6ED9               	movwf	fsr2l,c
  4305   001680  502A               	movf	(??_normalise_readings+1)^0,w,c
  4306   001682  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4307   001684  6EDA               	movwf	fsr2h,c
  4308   001686  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4309   00168A  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4310   00168E  EC31  F016         	call	___lwdiv	;wreg free
  4311   001692  5033               	movf	normalise_readings@i^0,w,c
  4312   001694  0D02               	mullw	2
  4313   001696  CFF3 F02B          	movff	prodl,??_normalise_readings+2
  4314   00169A  CFF4 F02C          	movff	prodh,??_normalise_readings+3
  4315   00169E  502B               	movf	(??_normalise_readings+2)^0,w,c
  4316   0016A0  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4317   0016A2  6ED9               	movwf	fsr2l,c
  4318   0016A4  502C               	movf	(??_normalise_readings+3)^0,w,c
  4319   0016A6  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4320   0016A8  6EDA               	movwf	fsr2h,c
  4321   0016AA  C00B  FFDE         	movff	?___lwdiv,postinc2
  4322   0016AE  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4323                           
  4324                           ;colour_identify.c: 85:         difference = abs(red_read - expected_values[RED][i]);
  4325   0016B2  5033               	movf	normalise_readings@i^0,w,c
  4326   0016B4  0D02               	mullw	2
  4327   0016B6  CFF3 F029          	movff	prodl,??_normalise_readings
  4328   0016BA  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4329   0016BE  5029               	movf	??_normalise_readings^0,w,c
  4330   0016C0  2425               	addwf	normalise_readings@expected_values^0,w,c
  4331   0016C2  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4332   0016C4  502A               	movf	(??_normalise_readings+1)^0,w,c
  4333   0016C6  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4334   0016C8  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4335   0016CA  0E12               	movlw	18
  4336   0016CC  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4337   0016CE  6ED9               	movwf	fsr2l,c
  4338   0016D0  0E00               	movlw	0
  4339   0016D2  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4340   0016D4  6EDA               	movwf	fsr2h,c
  4341   0016D6  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4342   0016DA  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4343   0016DE  502D               	movf	(??_normalise_readings+4)^0,w,c
  4344   0016E0  5C1F               	subwf	normalise_readings@red_read^0,w,c
  4345   0016E2  6E17               	movwf	abs@a^0,c
  4346   0016E4  502E               	movf	(??_normalise_readings+5)^0,w,c
  4347   0016E6  5820               	subwfb	(normalise_readings@red_read+1)^0,w,c
  4348   0016E8  6E18               	movwf	(abs@a+1)^0,c
  4349   0016EA  ECD5  F017         	call	_abs	;wreg free
  4350   0016EE  C017  F031         	movff	?_abs,normalise_readings@difference
  4351   0016F2  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4352                           
  4353                           ;colour_identify.c: 86:         normalised_values[RED][i] = (difference*100) / expected_
      +                          values[RED][i];
  4354   0016F6  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4355   0016FA  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4356   0016FE  0E00               	movlw	0
  4357   001700  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4358   001702  0E64               	movlw	100
  4359   001704  6E07               	movwf	___wmul@multiplicand^0,c
  4360   001706  EC98  F018         	call	___wmul	;wreg free
  4361   00170A  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4362   00170E  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4363   001712  5033               	movf	normalise_readings@i^0,w,c
  4364   001714  0D02               	mullw	2
  4365   001716  CFF3 F029          	movff	prodl,??_normalise_readings
  4366   00171A  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4367   00171E  5029               	movf	??_normalise_readings^0,w,c
  4368   001720  2425               	addwf	normalise_readings@expected_values^0,w,c
  4369   001722  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4370   001724  502A               	movf	(??_normalise_readings+1)^0,w,c
  4371   001726  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4372   001728  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4373   00172A  0E12               	movlw	18
  4374   00172C  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4375   00172E  6ED9               	movwf	fsr2l,c
  4376   001730  0E00               	movlw	0
  4377   001732  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4378   001734  6EDA               	movwf	fsr2h,c
  4379   001736  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4380   00173A  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4381   00173E  EC31  F016         	call	___lwdiv	;wreg free
  4382   001742  5033               	movf	normalise_readings@i^0,w,c
  4383   001744  0D02               	mullw	2
  4384   001746  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4385   00174A  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4386   00174E  502D               	movf	(??_normalise_readings+4)^0,w,c
  4387   001750  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4388   001752  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4389   001754  502E               	movf	(??_normalise_readings+5)^0,w,c
  4390   001756  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4391   001758  6E30               	movwf	(??_normalise_readings+7)^0,c
  4392   00175A  0E12               	movlw	18
  4393   00175C  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4394   00175E  6ED9               	movwf	fsr2l,c
  4395   001760  0E00               	movlw	0
  4396   001762  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4397   001764  6EDA               	movwf	fsr2h,c
  4398   001766  C00B  FFDE         	movff	?___lwdiv,postinc2
  4399   00176A  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4400                           
  4401                           ;colour_identify.c: 89:         difference = abs(green_read - expected_values[GREEN][i])
      +                          ;
  4402   00176E  5033               	movf	normalise_readings@i^0,w,c
  4403   001770  0D02               	mullw	2
  4404   001772  CFF3 F029          	movff	prodl,??_normalise_readings
  4405   001776  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4406   00177A  5029               	movf	??_normalise_readings^0,w,c
  4407   00177C  2425               	addwf	normalise_readings@expected_values^0,w,c
  4408   00177E  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4409   001780  502A               	movf	(??_normalise_readings+1)^0,w,c
  4410   001782  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4411   001784  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4412   001786  0E24               	movlw	36
  4413   001788  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4414   00178A  6ED9               	movwf	fsr2l,c
  4415   00178C  0E00               	movlw	0
  4416   00178E  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4417   001790  6EDA               	movwf	fsr2h,c
  4418   001792  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4419   001796  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4420   00179A  502D               	movf	(??_normalise_readings+4)^0,w,c
  4421   00179C  5C21               	subwf	normalise_readings@green_read^0,w,c
  4422   00179E  6E17               	movwf	abs@a^0,c
  4423   0017A0  502E               	movf	(??_normalise_readings+5)^0,w,c
  4424   0017A2  5822               	subwfb	(normalise_readings@green_read+1)^0,w,c
  4425   0017A4  6E18               	movwf	(abs@a+1)^0,c
  4426   0017A6  ECD5  F017         	call	_abs	;wreg free
  4427   0017AA  C017  F031         	movff	?_abs,normalise_readings@difference
  4428   0017AE  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4429                           
  4430                           ;colour_identify.c: 90:         normalised_values[GREEN][i] = (difference*100) / expecte
      +                          d_values[GREEN][i];
  4431   0017B2  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4432   0017B6  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4433   0017BA  0E00               	movlw	0
  4434   0017BC  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4435   0017BE  0E64               	movlw	100
  4436   0017C0  6E07               	movwf	___wmul@multiplicand^0,c
  4437   0017C2  EC98  F018         	call	___wmul	;wreg free
  4438   0017C6  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4439   0017CA  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4440   0017CE  5033               	movf	normalise_readings@i^0,w,c
  4441   0017D0  0D02               	mullw	2
  4442   0017D2  CFF3 F029          	movff	prodl,??_normalise_readings
  4443   0017D6  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4444   0017DA  5029               	movf	??_normalise_readings^0,w,c
  4445   0017DC  2425               	addwf	normalise_readings@expected_values^0,w,c
  4446   0017DE  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4447   0017E0  502A               	movf	(??_normalise_readings+1)^0,w,c
  4448   0017E2  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4449   0017E4  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4450   0017E6  0E24               	movlw	36
  4451   0017E8  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4452   0017EA  6ED9               	movwf	fsr2l,c
  4453   0017EC  0E00               	movlw	0
  4454   0017EE  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4455   0017F0  6EDA               	movwf	fsr2h,c
  4456   0017F2  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4457   0017F6  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4458   0017FA  EC31  F016         	call	___lwdiv	;wreg free
  4459   0017FE  5033               	movf	normalise_readings@i^0,w,c
  4460   001800  0D02               	mullw	2
  4461   001802  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4462   001806  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4463   00180A  502D               	movf	(??_normalise_readings+4)^0,w,c
  4464   00180C  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4465   00180E  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4466   001810  502E               	movf	(??_normalise_readings+5)^0,w,c
  4467   001812  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4468   001814  6E30               	movwf	(??_normalise_readings+7)^0,c
  4469   001816  0E24               	movlw	36
  4470   001818  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4471   00181A  6ED9               	movwf	fsr2l,c
  4472   00181C  0E00               	movlw	0
  4473   00181E  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4474   001820  6EDA               	movwf	fsr2h,c
  4475   001822  C00B  FFDE         	movff	?___lwdiv,postinc2
  4476   001826  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4477                           
  4478                           ;colour_identify.c: 93:         difference = abs(blue_read - expected_values[BLUE][i]);
  4479   00182A  5033               	movf	normalise_readings@i^0,w,c
  4480   00182C  0D02               	mullw	2
  4481   00182E  CFF3 F029          	movff	prodl,??_normalise_readings
  4482   001832  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4483   001836  5029               	movf	??_normalise_readings^0,w,c
  4484   001838  2425               	addwf	normalise_readings@expected_values^0,w,c
  4485   00183A  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4486   00183C  502A               	movf	(??_normalise_readings+1)^0,w,c
  4487   00183E  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4488   001840  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4489   001842  0E36               	movlw	54
  4490   001844  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4491   001846  6ED9               	movwf	fsr2l,c
  4492   001848  0E00               	movlw	0
  4493   00184A  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4494   00184C  6EDA               	movwf	fsr2h,c
  4495   00184E  CFDE F02D          	movff	postinc2,??_normalise_readings+4
  4496   001852  CFDD F02E          	movff	postdec2,??_normalise_readings+5
  4497   001856  502D               	movf	(??_normalise_readings+4)^0,w,c
  4498   001858  5C23               	subwf	normalise_readings@blue_read^0,w,c
  4499   00185A  6E17               	movwf	abs@a^0,c
  4500   00185C  502E               	movf	(??_normalise_readings+5)^0,w,c
  4501   00185E  5824               	subwfb	(normalise_readings@blue_read+1)^0,w,c
  4502   001860  6E18               	movwf	(abs@a+1)^0,c
  4503   001862  ECD5  F017         	call	_abs	;wreg free
  4504   001866  C017  F031         	movff	?_abs,normalise_readings@difference
  4505   00186A  C018  F032         	movff	?_abs+1,normalise_readings@difference+1
  4506                           
  4507                           ;colour_identify.c: 94:         normalised_values[BLUE][i] = (difference*100) / expected
      +                          _values[BLUE][i];
  4508   00186E  C031  F005         	movff	normalise_readings@difference,___wmul@multiplier
  4509   001872  C032  F006         	movff	normalise_readings@difference+1,___wmul@multiplier+1
  4510   001876  0E00               	movlw	0
  4511   001878  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4512   00187A  0E64               	movlw	100
  4513   00187C  6E07               	movwf	___wmul@multiplicand^0,c
  4514   00187E  EC98  F018         	call	___wmul	;wreg free
  4515   001882  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  4516   001886  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  4517   00188A  5033               	movf	normalise_readings@i^0,w,c
  4518   00188C  0D02               	mullw	2
  4519   00188E  CFF3 F029          	movff	prodl,??_normalise_readings
  4520   001892  CFF4 F02A          	movff	prodh,??_normalise_readings+1
  4521   001896  5029               	movf	??_normalise_readings^0,w,c
  4522   001898  2425               	addwf	normalise_readings@expected_values^0,w,c
  4523   00189A  6E2B               	movwf	(??_normalise_readings+2)^0,c
  4524   00189C  502A               	movf	(??_normalise_readings+1)^0,w,c
  4525   00189E  2026               	addwfc	(normalise_readings@expected_values+1)^0,w,c
  4526   0018A0  6E2C               	movwf	(??_normalise_readings+3)^0,c
  4527   0018A2  0E36               	movlw	54
  4528   0018A4  242B               	addwf	(??_normalise_readings+2)^0,w,c
  4529   0018A6  6ED9               	movwf	fsr2l,c
  4530   0018A8  0E00               	movlw	0
  4531   0018AA  202C               	addwfc	(??_normalise_readings+3)^0,w,c
  4532   0018AC  6EDA               	movwf	fsr2h,c
  4533   0018AE  CFDE F00D          	movff	postinc2,___lwdiv@divisor
  4534   0018B2  CFDD F00E          	movff	postdec2,___lwdiv@divisor+1
  4535   0018B6  EC31  F016         	call	___lwdiv	;wreg free
  4536   0018BA  5033               	movf	normalise_readings@i^0,w,c
  4537   0018BC  0D02               	mullw	2
  4538   0018BE  CFF3 F02D          	movff	prodl,??_normalise_readings+4
  4539   0018C2  CFF4 F02E          	movff	prodh,??_normalise_readings+5
  4540   0018C6  502D               	movf	(??_normalise_readings+4)^0,w,c
  4541   0018C8  2427               	addwf	normalise_readings@normalised_values^0,w,c
  4542   0018CA  6E2F               	movwf	(??_normalise_readings+6)^0,c
  4543   0018CC  502E               	movf	(??_normalise_readings+5)^0,w,c
  4544   0018CE  2028               	addwfc	(normalise_readings@normalised_values+1)^0,w,c
  4545   0018D0  6E30               	movwf	(??_normalise_readings+7)^0,c
  4546   0018D2  0E36               	movlw	54
  4547   0018D4  242F               	addwf	(??_normalise_readings+6)^0,w,c
  4548   0018D6  6ED9               	movwf	fsr2l,c
  4549   0018D8  0E00               	movlw	0
  4550   0018DA  2030               	addwfc	(??_normalise_readings+7)^0,w,c
  4551   0018DC  6EDA               	movwf	fsr2h,c
  4552   0018DE  C00B  FFDE         	movff	?___lwdiv,postinc2
  4553   0018E2  C00C  FFDD         	movff	?___lwdiv+1,postdec2
  4554   0018E6                     
  4555                           ;colour_identify.c: 95:     }
  4556   0018E6  2A33               	incf	normalise_readings@i^0,f,c
  4557   0018E8  0E09               	movlw	9
  4558   0018EA  6433               	cpfsgt	normalise_readings@i^0,c
  4559   0018EC  EF7A  F00C         	goto	u1981
  4560   0018F0  EF7C  F00C         	goto	u1980
  4561   0018F4                     u1981:
  4562   0018F4  EF0D  F00B         	goto	l3798
  4563   0018F8                     u1980:
  4564   0018F8  0012               	return		;funcret
  4565   0018FA                     __end_of_normalise_readings:
  4566                           	callstack 0
  4567                           
  4568 ;; *************** function _abs *****************
  4569 ;; Defined at:
  4570 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  a               2   22[COMRAM] int 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  2   22[COMRAM] int 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4587 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4588 ;;Total ram usage:        4 bytes
  4589 ;; Hardware stack levels used: 1
  4590 ;; Hardware stack levels required when called: 4
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_normalise_readings
  4595 ;;		_dtoa
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text21
  4600   002FAA                     __ptext21:
  4601                           	callstack 0
  4602   002FAA                     _abs:
  4603                           	callstack 22
  4604   002FAA  BE18               	btfsc	(abs@a+1)^0,7,c
  4605   002FAC  EFE2  F017         	goto	u1680
  4606   002FB0  5018               	movf	(abs@a+1)^0,w,c
  4607   002FB2  E106               	bnz	u1681
  4608   002FB4  0417               	decf	abs@a^0,w,c
  4609   002FB6  B0D8               	btfsc	status,0,c
  4610   002FB8  EFE0  F017         	goto	u1681
  4611   002FBC  EFE2  F017         	goto	u1680
  4612   002FC0                     u1681:
  4613   002FC0  EFF0  F017         	goto	l1207
  4614   002FC4                     u1680:
  4615   002FC4  C017  F019         	movff	abs@a,??_abs
  4616   002FC8  C018  F01A         	movff	abs@a+1,??_abs+1
  4617   002FCC  1E19               	comf	??_abs^0,f,c
  4618   002FCE  1E1A               	comf	(??_abs+1)^0,f,c
  4619   002FD0  4A19               	infsnz	??_abs^0,f,c
  4620   002FD2  2A1A               	incf	(??_abs+1)^0,f,c
  4621   002FD4  C019  F017         	movff	??_abs,?_abs
  4622   002FD8  C01A  F018         	movff	??_abs+1,?_abs+1
  4623   002FDC  EFF4  F017         	goto	l1210
  4624   002FE0                     l1207:
  4625   002FE0  C017  F017         	movff	abs@a,?_abs
  4626   002FE4  C018  F018         	movff	abs@a+1,?_abs+1
  4627   002FE8                     l1210:
  4628   002FE8  0012               	return		;funcret
  4629   002FEA                     __end_of_abs:
  4630                           	callstack 0
  4631                           
  4632 ;; *************** function _motor_response *****************
  4633 ;; Defined at:
  4634 ;;		line 124 in file "colour_identify.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  card            1    wreg     enum E14551
  4637 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  4638 ;;		 -> main@motorL(9), 
  4639 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  4640 ;;		 -> main@motorR(9), 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  card            1   37[COMRAM] enum E14551
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4656 ;;Total ram usage:        7 bytes
  4657 ;; Hardware stack levels used: 1
  4658 ;; Hardware stack levels required when called: 7
  4659 ;; This function calls:
  4660 ;;		_reverseFullSpeed
  4661 ;;		_stop
  4662 ;;		_turnLeft45
  4663 ;;		_turnRight45
  4664 ;; This function is called by:
  4665 ;;		_card_response
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text22
  4670   000E7A                     __ptext22:
  4671                           	callstack 0
  4672   000E7A                     _motor_response:
  4673                           	callstack 22
  4674                           
  4675                           ;incstack = 0
  4676                           ;motor_response@card stored from wreg
  4677   000E7A  6E26               	movwf	motor_response@card^0,c
  4678   000E7C                     
  4679                           ;colour_identify.c: 126:     switch (card){
  4680   000E7C  EF07  F009         	goto	l3124
  4681   000E80                     l3008:
  4682                           
  4683                           ;colour_identify.c: 128:             reverseFullSpeed(mL,mR);
  4684   000E80  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4685   000E84  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4686   000E88  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4687   000E8C  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4688   000E90  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4689   000E94                     
  4690                           ;colour_identify.c: 129:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4691   000E94  0E0D               	movlw	13
  4692   000E96  6E25               	movwf	(??_motor_response+1)^0,c
  4693   000E98  0E2D               	movlw	45
  4694   000E9A  6E24               	movwf	??_motor_response^0,c
  4695   000E9C  0ED8               	movlw	216
  4696   000E9E                     u2167:
  4697   000E9E  2EE8               	decfsz	wreg,f,c
  4698   000EA0  D7FE               	bra	u2167
  4699   000EA2  2E24               	decfsz	??_motor_response^0,f,c
  4700   000EA4  D7FC               	bra	u2167
  4701   000EA6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4702   000EA8  D7FA               	bra	u2167
  4703   000EAA                     l3012:
  4704                           
  4705                           ;colour_identify.c: 130:             turnRight45(mL,mR);
  4706   000EAA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4707   000EAE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4708   000EB2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4709   000EB6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4710   000EBA  ECF3  F013         	call	_turnRight45	;wreg free
  4711   000EBE                     
  4712                           ;colour_identify.c: 131:             stop(mL,mR);
  4713   000EBE  C020  F018         	movff	motor_response@mL,stop@mL
  4714   000EC2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4715   000EC6  C022  F01A         	movff	motor_response@mR,stop@mR
  4716   000ECA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4717   000ECE  EC6F  F015         	call	_stop	;wreg free
  4718   000ED2                     
  4719                           ;colour_identify.c: 132:             turnRight45(mL,mR);
  4720   000ED2  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4721   000ED6  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4722   000EDA  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4723   000EDE  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4724   000EE2  ECF3  F013         	call	_turnRight45	;wreg free
  4725   000EE6                     l3018:
  4726                           
  4727                           ;colour_identify.c: 133:             stop(mL,mR);
  4728   000EE6  C020  F018         	movff	motor_response@mL,stop@mL
  4729   000EEA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4730   000EEE  C022  F01A         	movff	motor_response@mR,stop@mR
  4731   000EF2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4732   000EF6  EC6F  F015         	call	_stop	;wreg free
  4733                           
  4734                           ;colour_identify.c: 134:             break;
  4735   000EFA  EF38  F009         	goto	l365
  4736   000EFE                     l3020:
  4737                           
  4738                           ;colour_identify.c: 136:             reverseFullSpeed(mL,mR);
  4739   000EFE  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4740   000F02  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4741   000F06  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4742   000F0A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4743   000F0E  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4744   000F12                     
  4745                           ;colour_identify.c: 137:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4746   000F12  0E0D               	movlw	13
  4747   000F14  6E25               	movwf	(??_motor_response+1)^0,c
  4748   000F16  0E2D               	movlw	45
  4749   000F18  6E24               	movwf	??_motor_response^0,c
  4750   000F1A  0ED8               	movlw	216
  4751   000F1C                     u2177:
  4752   000F1C  2EE8               	decfsz	wreg,f,c
  4753   000F1E  D7FE               	bra	u2177
  4754   000F20  2E24               	decfsz	??_motor_response^0,f,c
  4755   000F22  D7FC               	bra	u2177
  4756   000F24  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4757   000F26  D7FA               	bra	u2177
  4758   000F28                     l3024:
  4759                           
  4760                           ;colour_identify.c: 138:             turnLeft45(mL,mR);
  4761   000F28  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4762   000F2C  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4763   000F30  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4764   000F34  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4765   000F38  EC49  F014         	call	_turnLeft45	;wreg free
  4766   000F3C                     
  4767                           ;colour_identify.c: 139:             stop(mL,mR);
  4768   000F3C  C020  F018         	movff	motor_response@mL,stop@mL
  4769   000F40  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4770   000F44  C022  F01A         	movff	motor_response@mR,stop@mR
  4771   000F48  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4772   000F4C  EC6F  F015         	call	_stop	;wreg free
  4773   000F50                     
  4774                           ;colour_identify.c: 140:             turnLeft45(mL,mR);
  4775   000F50  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  4776   000F54  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  4777   000F58  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  4778   000F5C  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  4779   000F60  EC49  F014         	call	_turnLeft45	;wreg free
  4780   000F64  EF73  F007         	goto	l3018
  4781   000F68                     l3032:
  4782                           
  4783                           ;colour_identify.c: 144:             reverseFullSpeed(mL,mR);
  4784   000F68  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4785   000F6C  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4786   000F70  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4787   000F74  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4788   000F78  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4789   000F7C                     
  4790                           ;colour_identify.c: 145:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4791   000F7C  0E0D               	movlw	13
  4792   000F7E  6E25               	movwf	(??_motor_response+1)^0,c
  4793   000F80  0E2D               	movlw	45
  4794   000F82  6E24               	movwf	??_motor_response^0,c
  4795   000F84  0ED8               	movlw	216
  4796   000F86                     u2187:
  4797   000F86  2EE8               	decfsz	wreg,f,c
  4798   000F88  D7FE               	bra	u2187
  4799   000F8A  2E24               	decfsz	??_motor_response^0,f,c
  4800   000F8C  D7FC               	bra	u2187
  4801   000F8E  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4802   000F90  D7FA               	bra	u2187
  4803   000F92                     
  4804                           ;colour_identify.c: 146:             turnRight45(mL,mR);
  4805   000F92  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4806   000F96  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4807   000F9A  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4808   000F9E  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4809   000FA2  ECF3  F013         	call	_turnRight45	;wreg free
  4810   000FA6                     
  4811                           ;colour_identify.c: 147:             stop(mL,mR);
  4812   000FA6  C020  F018         	movff	motor_response@mL,stop@mL
  4813   000FAA  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4814   000FAE  C022  F01A         	movff	motor_response@mR,stop@mR
  4815   000FB2  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4816   000FB6  EC6F  F015         	call	_stop	;wreg free
  4817   000FBA                     l3040:
  4818                           
  4819                           ;colour_identify.c: 148:             turnRight45(mL,mR);
  4820   000FBA  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4821   000FBE  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4822   000FC2  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4823   000FC6  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4824   000FCA  ECF3  F013         	call	_turnRight45	;wreg free
  4825   000FCE                     
  4826                           ;colour_identify.c: 149:             stop(mL,mR);
  4827   000FCE  C020  F018         	movff	motor_response@mL,stop@mL
  4828   000FD2  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4829   000FD6  C022  F01A         	movff	motor_response@mR,stop@mR
  4830   000FDA  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4831   000FDE  EC6F  F015         	call	_stop	;wreg free
  4832   000FE2  EF55  F007         	goto	l3012
  4833   000FE6                     l3052:
  4834                           
  4835                           ;colour_identify.c: 156:             reverseFullSpeed(mL,mR);
  4836   000FE6  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4837   000FEA  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4838   000FEE  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4839   000FF2  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4840   000FF6  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4841   000FFA                     
  4842                           ;colour_identify.c: 157:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4843   000FFA  0E0D               	movlw	13
  4844   000FFC  6E25               	movwf	(??_motor_response+1)^0,c
  4845   000FFE  0E2D               	movlw	45
  4846   001000  6E24               	movwf	??_motor_response^0,c
  4847   001002  0ED8               	movlw	216
  4848   001004                     u2197:
  4849   001004  2EE8               	decfsz	wreg,f,c
  4850   001006  D7FE               	bra	u2197
  4851   001008  2E24               	decfsz	??_motor_response^0,f,c
  4852   00100A  D7FC               	bra	u2197
  4853   00100C  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4854   00100E  D7FA               	bra	u2197
  4855   001010                     
  4856                           ;colour_identify.c: 158:             stop(mL,mR);
  4857   001010  C020  F018         	movff	motor_response@mL,stop@mL
  4858   001014  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4859   001018  C022  F01A         	movff	motor_response@mR,stop@mR
  4860   00101C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4861   001020  EC6F  F015         	call	_stop	;wreg free
  4862                           
  4863                           ;colour_identify.c: 159:             _delay((unsigned long)((200)*(64000000/4000.0)));
  4864   001024  0E11               	movlw	17
  4865   001026  6E25               	movwf	(??_motor_response+1)^0,c
  4866   001028  0E3C               	movlw	60
  4867   00102A  6E24               	movwf	??_motor_response^0,c
  4868   00102C  0ECB               	movlw	203
  4869   00102E                     u2207:
  4870   00102E  2EE8               	decfsz	wreg,f,c
  4871   001030  D7FE               	bra	u2207
  4872   001032  2E24               	decfsz	??_motor_response^0,f,c
  4873   001034  D7FC               	bra	u2207
  4874   001036  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4875   001038  D7FA               	bra	u2207
  4876   00103A  F000               	nop	
  4877   00103C                     
  4878                           ;colour_identify.c: 160:             reverseFullSpeed(mL,mR);
  4879   00103C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4880   001040  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4881   001044  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4882   001048  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4883   00104C  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4884   001050                     
  4885                           ;colour_identify.c: 161:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4886   001050  0E29               	movlw	41
  4887   001052  6E25               	movwf	(??_motor_response+1)^0,c
  4888   001054  0E96               	movlw	150
  4889   001056  6E24               	movwf	??_motor_response^0,c
  4890   001058  0E7F               	movlw	127
  4891   00105A                     u2217:
  4892   00105A  2EE8               	decfsz	wreg,f,c
  4893   00105C  D7FE               	bra	u2217
  4894   00105E  2E24               	decfsz	??_motor_response^0,f,c
  4895   001060  D7FC               	bra	u2217
  4896   001062  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4897   001064  D7FA               	bra	u2217
  4898   001066  F000               	nop	
  4899                           
  4900                           ;colour_identify.c: 162:             stop(mL,mR);
  4901   001068  C020  F018         	movff	motor_response@mL,stop@mL
  4902   00106C  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4903   001070  C022  F01A         	movff	motor_response@mR,stop@mR
  4904   001074  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4905   001078  EC6F  F015         	call	_stop	;wreg free
  4906                           
  4907                           ;colour_identify.c: 163:             turnRight45(mL,mR);
  4908   00107C  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4909   001080  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4910   001084  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4911   001088  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4912   00108C  ECF3  F013         	call	_turnRight45	;wreg free
  4913                           
  4914                           ;colour_identify.c: 164:             stop(mL,mR);
  4915   001090  C020  F018         	movff	motor_response@mL,stop@mL
  4916   001094  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4917   001098  C022  F01A         	movff	motor_response@mR,stop@mR
  4918   00109C  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4919   0010A0  EC6F  F015         	call	_stop	;wreg free
  4920                           
  4921                           ;colour_identify.c: 165:             turnRight45(mL,mR);
  4922   0010A4  C020  F018         	movff	motor_response@mL,turnRight45@mL
  4923   0010A8  C021  F019         	movff	motor_response@mL+1,turnRight45@mL+1
  4924   0010AC  C022  F01A         	movff	motor_response@mR,turnRight45@mR
  4925   0010B0  C023  F01B         	movff	motor_response@mR+1,turnRight45@mR+1
  4926   0010B4  ECF3  F013         	call	_turnRight45	;wreg free
  4927                           
  4928                           ;colour_identify.c: 166:             stop(mL,mR);
  4929   0010B8  C020  F018         	movff	motor_response@mL,stop@mL
  4930   0010BC  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4931   0010C0  C022  F01A         	movff	motor_response@mR,stop@mR
  4932   0010C4  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4933   0010C8  EC6F  F015         	call	_stop	;wreg free
  4934                           
  4935                           ;colour_identify.c: 167:             break;
  4936   0010CC  EF38  F009         	goto	l365
  4937   0010D0                     l3062:
  4938                           
  4939                           ;colour_identify.c: 169:             reverseFullSpeed(mL,mR);
  4940   0010D0  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4941   0010D4  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4942   0010D8  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4943   0010DC  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4944   0010E0  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4945   0010E4                     
  4946                           ;colour_identify.c: 170:             _delay((unsigned long)((150)*(64000000/4000.0)));
  4947   0010E4  0E0D               	movlw	13
  4948   0010E6  6E25               	movwf	(??_motor_response+1)^0,c
  4949   0010E8  0E2D               	movlw	45
  4950   0010EA  6E24               	movwf	??_motor_response^0,c
  4951   0010EC  0ED8               	movlw	216
  4952   0010EE                     u2227:
  4953   0010EE  2EE8               	decfsz	wreg,f,c
  4954   0010F0  D7FE               	bra	u2227
  4955   0010F2  2E24               	decfsz	??_motor_response^0,f,c
  4956   0010F4  D7FC               	bra	u2227
  4957   0010F6  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4958   0010F8  D7FA               	bra	u2227
  4959   0010FA                     
  4960                           ;colour_identify.c: 171:             reverseFullSpeed(mL,mR);
  4961   0010FA  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4962   0010FE  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4963   001102  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4964   001106  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4965   00110A  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4966                           
  4967                           ;colour_identify.c: 172:             _delay((unsigned long)((500)*(64000000/4000.0)));
  4968   00110E  0E29               	movlw	41
  4969   001110  6E25               	movwf	(??_motor_response+1)^0,c
  4970   001112  0E96               	movlw	150
  4971   001114  6E24               	movwf	??_motor_response^0,c
  4972   001116  0E7F               	movlw	127
  4973   001118                     u2237:
  4974   001118  2EE8               	decfsz	wreg,f,c
  4975   00111A  D7FE               	bra	u2237
  4976   00111C  2E24               	decfsz	??_motor_response^0,f,c
  4977   00111E  D7FC               	bra	u2237
  4978   001120  2E25               	decfsz	(??_motor_response+1)^0,f,c
  4979   001122  D7FA               	bra	u2237
  4980   001124  F000               	nop	
  4981   001126                     l3068:
  4982                           
  4983                           ;colour_identify.c: 173:             stop(mL,mR);
  4984   001126  C020  F018         	movff	motor_response@mL,stop@mL
  4985   00112A  C021  F019         	movff	motor_response@mL+1,stop@mL+1
  4986   00112E  C022  F01A         	movff	motor_response@mR,stop@mR
  4987   001132  C023  F01B         	movff	motor_response@mR+1,stop@mR+1
  4988   001136  EC6F  F015         	call	_stop	;wreg free
  4989   00113A  EF94  F007         	goto	l3024
  4990   00113E                     l3078:
  4991                           
  4992                           ;colour_identify.c: 180:             reverseFullSpeed(mL,mR);
  4993   00113E  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  4994   001142  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  4995   001146  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  4996   00114A  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  4997   00114E  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  4998   001152                     
  4999                           ;colour_identify.c: 181:             _delay((unsigned long)((150)*(64000000/4000.0)));
  5000   001152  0E0D               	movlw	13
  5001   001154  6E25               	movwf	(??_motor_response+1)^0,c
  5002   001156  0E2D               	movlw	45
  5003   001158  6E24               	movwf	??_motor_response^0,c
  5004   00115A  0ED8               	movlw	216
  5005   00115C                     u2247:
  5006   00115C  2EE8               	decfsz	wreg,f,c
  5007   00115E  D7FE               	bra	u2247
  5008   001160  2E24               	decfsz	??_motor_response^0,f,c
  5009   001162  D7FC               	bra	u2247
  5010   001164  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5011   001166  D7FA               	bra	u2247
  5012   001168  EFDD  F007         	goto	l3040
  5013   00116C                     l3094:
  5014                           
  5015                           ;colour_identify.c: 190:             reverseFullSpeed(mL,mR);
  5016   00116C  C020  F018         	movff	motor_response@mL,reverseFullSpeed@mL
  5017   001170  C021  F019         	movff	motor_response@mL+1,reverseFullSpeed@mL+1
  5018   001174  C022  F01A         	movff	motor_response@mR,reverseFullSpeed@mR
  5019   001178  C023  F01B         	movff	motor_response@mR+1,reverseFullSpeed@mR+1
  5020   00117C  ECE5  F014         	call	_reverseFullSpeed	;wreg free
  5021   001180                     
  5022                           ;colour_identify.c: 191:             _delay((unsigned long)((150)*(64000000/4000.0)));
  5023   001180  0E0D               	movlw	13
  5024   001182  6E25               	movwf	(??_motor_response+1)^0,c
  5025   001184  0E2D               	movlw	45
  5026   001186  6E24               	movwf	??_motor_response^0,c
  5027   001188  0ED8               	movlw	216
  5028   00118A                     u2257:
  5029   00118A  2EE8               	decfsz	wreg,f,c
  5030   00118C  D7FE               	bra	u2257
  5031   00118E  2E24               	decfsz	??_motor_response^0,f,c
  5032   001190  D7FC               	bra	u2257
  5033   001192  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5034   001194  D7FA               	bra	u2257
  5035   001196                     
  5036                           ;colour_identify.c: 192:             turnLeft45(mL,mR);
  5037   001196  C020  F018         	movff	motor_response@mL,turnLeft45@mL
  5038   00119A  C021  F019         	movff	motor_response@mL+1,turnLeft45@mL+1
  5039   00119E  C022  F01A         	movff	motor_response@mR,turnLeft45@mR
  5040   0011A2  C023  F01B         	movff	motor_response@mR+1,turnLeft45@mR+1
  5041   0011A6  EC49  F014         	call	_turnLeft45	;wreg free
  5042   0011AA  EF93  F008         	goto	l3068
  5043   0011AE                     l362:
  5044                           
  5045                           ;colour_identify.c: 201:             LATDbits.LATD7=1;
  5046   0011AE  8E7C               	bsf	124,7,c	;volatile
  5047   0011B0                     
  5048                           ;colour_identify.c: 202:             _delay((unsigned long)((200)*(64000000/4000.0)));
  5049   0011B0  0E11               	movlw	17
  5050   0011B2  6E25               	movwf	(??_motor_response+1)^0,c
  5051   0011B4  0E3C               	movlw	60
  5052   0011B6  6E24               	movwf	??_motor_response^0,c
  5053   0011B8  0ECB               	movlw	203
  5054   0011BA                     u2267:
  5055   0011BA  2EE8               	decfsz	wreg,f,c
  5056   0011BC  D7FE               	bra	u2267
  5057   0011BE  2E24               	decfsz	??_motor_response^0,f,c
  5058   0011C0  D7FC               	bra	u2267
  5059   0011C2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5060   0011C4  D7FA               	bra	u2267
  5061   0011C6  F000               	nop	
  5062   0011C8                     
  5063                           ;colour_identify.c: 203:             LATDbits.LATD7=0;
  5064   0011C8  9E7C               	bcf	124,7,c	;volatile
  5065                           
  5066                           ;colour_identify.c: 204:             break;
  5067   0011CA  EF38  F009         	goto	l365
  5068   0011CE                     l363:
  5069                           
  5070                           ;colour_identify.c: 207:             LATHbits.LATH3=1;
  5071   0011CE  8680               	bsf	128,3,c	;volatile
  5072   0011D0                     
  5073                           ;colour_identify.c: 208:             _delay((unsigned long)((200)*(64000000/4000.0)));
  5074   0011D0  0E11               	movlw	17
  5075   0011D2  6E25               	movwf	(??_motor_response+1)^0,c
  5076   0011D4  0E3C               	movlw	60
  5077   0011D6  6E24               	movwf	??_motor_response^0,c
  5078   0011D8  0ECB               	movlw	203
  5079   0011DA                     u2277:
  5080   0011DA  2EE8               	decfsz	wreg,f,c
  5081   0011DC  D7FE               	bra	u2277
  5082   0011DE  2E24               	decfsz	??_motor_response^0,f,c
  5083   0011E0  D7FC               	bra	u2277
  5084   0011E2  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5085   0011E4  D7FA               	bra	u2277
  5086   0011E6  F000               	nop	
  5087   0011E8                     
  5088                           ;colour_identify.c: 209:             LATHbits.LATH3=0;
  5089   0011E8  9680               	bcf	128,3,c	;volatile
  5090                           
  5091                           ;colour_identify.c: 210:             break;
  5092   0011EA  EF38  F009         	goto	l365
  5093   0011EE                     l364:
  5094                           
  5095                           ;colour_identify.c: 212:             LATHbits.LATH1 = 1;
  5096   0011EE  8280               	bsf	128,1,c	;volatile
  5097   0011F0                     
  5098                           ;colour_identify.c: 213:             _delay((unsigned long)((500)*(64000000/4000.0)));
  5099   0011F0  0E29               	movlw	41
  5100   0011F2  6E25               	movwf	(??_motor_response+1)^0,c
  5101   0011F4  0E96               	movlw	150
  5102   0011F6  6E24               	movwf	??_motor_response^0,c
  5103   0011F8  0E7F               	movlw	127
  5104   0011FA                     u2287:
  5105   0011FA  2EE8               	decfsz	wreg,f,c
  5106   0011FC  D7FE               	bra	u2287
  5107   0011FE  2E24               	decfsz	??_motor_response^0,f,c
  5108   001200  D7FC               	bra	u2287
  5109   001202  2E25               	decfsz	(??_motor_response+1)^0,f,c
  5110   001204  D7FA               	bra	u2287
  5111   001206  F000               	nop	
  5112   001208                     
  5113                           ;colour_identify.c: 214:             LATHbits.LATH1 = 0;
  5114   001208  9280               	bcf	128,1,c	;volatile
  5115                           
  5116                           ;colour_identify.c: 215:             break;
  5117   00120A  EF38  F009         	goto	l365
  5118   00120E                     l3124:
  5119   00120E  5026               	movf	motor_response@card^0,w,c
  5120   001210  6E24               	movwf	??_motor_response^0,c
  5121   001212  6A25               	clrf	(??_motor_response+1)^0,c
  5122                           
  5123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5124                           ; Switch size 1, requested type "simple"
  5125                           ; Number of cases is 1, Range of values is 0 to 0
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte            4     3 (average)
  5129                           ;	Chosen strategy is simple_byte
  5130   001214  5025               	movf	(??_motor_response+1)^0,w,c
  5131   001216  0A00               	xorlw	0	; case 0
  5132   001218  B4D8               	btfsc	status,2,c
  5133   00121A  EF11  F009         	goto	l3990
  5134   00121E  EFF7  F008         	goto	l364
  5135   001222                     l3990:
  5136                           
  5137                           ; Switch size 1, requested type "simple"
  5138                           ; Number of cases is 9, Range of values is 1 to 9
  5139                           ; switch strategies available:
  5140                           ; Name         Instructions Cycles
  5141                           ; simple_byte           28    15 (average)
  5142                           ;	Chosen strategy is simple_byte
  5143   001222  5024               	movf	??_motor_response^0,w,c
  5144   001224  0A01               	xorlw	1	; case 1
  5145   001226  B4D8               	btfsc	status,2,c
  5146   001228  EF40  F007         	goto	l3008
  5147   00122C  0A03               	xorlw	3	; case 2
  5148   00122E  B4D8               	btfsc	status,2,c
  5149   001230  EF7F  F007         	goto	l3020
  5150   001234  0A01               	xorlw	1	; case 3
  5151   001236  B4D8               	btfsc	status,2,c
  5152   001238  EFB4  F007         	goto	l3032
  5153   00123C  0A07               	xorlw	7	; case 4
  5154   00123E  B4D8               	btfsc	status,2,c
  5155   001240  EFF3  F007         	goto	l3052
  5156   001244  0A01               	xorlw	1	; case 5
  5157   001246  B4D8               	btfsc	status,2,c
  5158   001248  EF68  F008         	goto	l3062
  5159   00124C  0A03               	xorlw	3	; case 6
  5160   00124E  B4D8               	btfsc	status,2,c
  5161   001250  EF9F  F008         	goto	l3078
  5162   001254  0A01               	xorlw	1	; case 7
  5163   001256  B4D8               	btfsc	status,2,c
  5164   001258  EFB6  F008         	goto	l3094
  5165   00125C  0A0F               	xorlw	15	; case 8
  5166   00125E  B4D8               	btfsc	status,2,c
  5167   001260  EFD7  F008         	goto	l362
  5168   001264  0A01               	xorlw	1	; case 9
  5169   001266  B4D8               	btfsc	status,2,c
  5170   001268  EFE7  F008         	goto	l363
  5171   00126C  EFF7  F008         	goto	l364
  5172   001270                     l365:
  5173   001270  0012               	return		;funcret
  5174   001272                     __end_of_motor_response:
  5175                           	callstack 0
  5176                           
  5177 ;; *************** function _turnRight45 *****************
  5178 ;; Defined at:
  5179 ;;		line 116 in file "dc_motor.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5182 ;;		 -> main@motorL(9), 
  5183 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5184 ;;		 -> main@motorR(9), 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  i               2   29[COMRAM] int 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5200 ;;Total ram usage:        8 bytes
  5201 ;; Hardware stack levels used: 1
  5202 ;; Hardware stack levels required when called: 6
  5203 ;; This function calls:
  5204 ;;		_setMotorPWM
  5205 ;; This function is called by:
  5206 ;;		_motor_response
  5207 ;;		_motor_response_easy
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text23
  5212   0027E6                     __ptext23:
  5213                           	callstack 0
  5214   0027E6                     _turnRight45:
  5215                           	callstack 22
  5216   0027E6                     
  5217                           ;dc_motor.c: 116: void turnRight45(DC_motor *mL, DC_motor *mR);dc_motor.c: 117: {;dc_mot
      +                          or.c: 118:     mL->direction=1;
  5218   0027E6  EE20 F001          	lfsr	2,1
  5219   0027EA  5018               	movf	turnRight45@mL^0,w,c
  5220   0027EC  26D9               	addwf	fsr2l,f,c
  5221   0027EE  5019               	movf	(turnRight45@mL+1)^0,w,c
  5222   0027F0  22DA               	addwfc	fsr2h,f,c
  5223   0027F2  0E01               	movlw	1
  5224   0027F4  6EDF               	movwf	indf2,c
  5225                           
  5226                           ;dc_motor.c: 119:     mR->direction=0;
  5227   0027F6  EE20 F001          	lfsr	2,1
  5228   0027FA  501A               	movf	turnRight45@mR^0,w,c
  5229   0027FC  26D9               	addwf	fsr2l,f,c
  5230   0027FE  501B               	movf	(turnRight45@mR+1)^0,w,c
  5231   002800  22DA               	addwfc	fsr2h,f,c
  5232   002802  0E00               	movlw	0
  5233   002804  6EDF               	movwf	indf2,c
  5234   002806                     
  5235                           ;dc_motor.c: 120:     for(int i=0;i<80;i+=10){
  5236   002806  0E00               	movlw	0
  5237   002808  6E1F               	movwf	(turnRight45@i+1)^0,c
  5238   00280A  0E00               	movlw	0
  5239   00280C  6E1E               	movwf	turnRight45@i^0,c
  5240   00280E                     l2796:
  5241                           
  5242                           ;dc_motor.c: 122:         mR->power=i;
  5243   00280E  C01A  FFD9         	movff	turnRight45@mR,fsr2l
  5244   002812  C01B  FFDA         	movff	turnRight45@mR+1,fsr2h
  5245   002816  C01E  FFDF         	movff	turnRight45@i,indf2
  5246                           
  5247                           ;dc_motor.c: 123:         mL->power=i;
  5248   00281A  C018  FFD9         	movff	turnRight45@mL,fsr2l
  5249   00281E  C019  FFDA         	movff	turnRight45@mL+1,fsr2h
  5250   002822  C01E  FFDF         	movff	turnRight45@i,indf2
  5251   002826                     
  5252                           ;dc_motor.c: 124:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5253   002826  0E02               	movlw	2
  5254   002828  6E1D               	movwf	(??_turnRight45+1)^0,c
  5255   00282A  0E38               	movlw	56
  5256   00282C  6E1C               	movwf	??_turnRight45^0,c
  5257   00282E  0EAD               	movlw	173
  5258   002830                     u2297:
  5259   002830  2EE8               	decfsz	wreg,f,c
  5260   002832  D7FE               	bra	u2297
  5261   002834  2E1C               	decfsz	??_turnRight45^0,f,c
  5262   002836  D7FC               	bra	u2297
  5263   002838  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5264   00283A  D7FA               	bra	u2297
  5265   00283C  F000               	nop	
  5266   00283E                     
  5267                           ;dc_motor.c: 125:         setMotorPWM(mL);
  5268   00283E  C018  F012         	movff	turnRight45@mL,setMotorPWM@m
  5269   002842  C019  F013         	movff	turnRight45@mL+1,setMotorPWM@m+1
  5270   002846  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5271   00284A                     
  5272                           ;dc_motor.c: 126:         setMotorPWM(mR);}
  5273   00284A  C01A  F012         	movff	turnRight45@mR,setMotorPWM@m
  5274   00284E  C01B  F013         	movff	turnRight45@mR+1,setMotorPWM@m+1
  5275   002852  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5276   002856  0E0A               	movlw	10
  5277   002858  261E               	addwf	turnRight45@i^0,f,c
  5278   00285A  0E00               	movlw	0
  5279   00285C  221F               	addwfc	(turnRight45@i+1)^0,f,c
  5280   00285E  BE1F               	btfsc	(turnRight45@i+1)^0,7,c
  5281   002860  EF3B  F014         	goto	u1301
  5282   002864  501F               	movf	(turnRight45@i+1)^0,w,c
  5283   002866  E109               	bnz	u1300
  5284   002868  0E50               	movlw	80
  5285   00286A  5C1E               	subwf	turnRight45@i^0,w,c
  5286   00286C  A0D8               	btfss	status,0,c
  5287   00286E  EF3B  F014         	goto	u1301
  5288   002872  EF3D  F014         	goto	u1300
  5289   002876                     u1301:
  5290   002876  EF07  F014         	goto	l2796
  5291   00287A                     u1300:
  5292   00287A                     
  5293                           ;dc_motor.c: 127:     _delay((unsigned long)((90)*(64000000/4000.0)));
  5294   00287A  0E08               	movlw	8
  5295   00287C  6E1D               	movwf	(??_turnRight45+1)^0,c
  5296   00287E  0E4F               	movlw	79
  5297   002880  6E1C               	movwf	??_turnRight45^0,c
  5298   002882  0E1A               	movlw	26
  5299   002884                     u2307:
  5300   002884  2EE8               	decfsz	wreg,f,c
  5301   002886  D7FE               	bra	u2307
  5302   002888  2E1C               	decfsz	??_turnRight45^0,f,c
  5303   00288A  D7FC               	bra	u2307
  5304   00288C  2E1D               	decfsz	(??_turnRight45+1)^0,f,c
  5305   00288E  D7FA               	bra	u2307
  5306   002890  0012               	return		;funcret
  5307   002892                     __end_of_turnRight45:
  5308                           	callstack 0
  5309                           
  5310 ;; *************** function _turnLeft45 *****************
  5311 ;; Defined at:
  5312 ;;		line 101 in file "dc_motor.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5315 ;;		 -> main@motorL(9), 
  5316 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5317 ;;		 -> main@motorR(9), 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  i               2   29[COMRAM] int 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5331 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5332 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5333 ;;Total ram usage:        8 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; Hardware stack levels required when called: 6
  5336 ;; This function calls:
  5337 ;;		_setMotorPWM
  5338 ;; This function is called by:
  5339 ;;		_motor_response
  5340 ;;		_motor_response_easy
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text24
  5345   002892                     __ptext24:
  5346                           	callstack 0
  5347   002892                     _turnLeft45:
  5348                           	callstack 22
  5349   002892                     
  5350                           ;dc_motor.c: 101: void turnLeft45(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     mL->direction=0;
  5351   002892  EE20 F001          	lfsr	2,1
  5352   002896  5018               	movf	turnLeft45@mL^0,w,c
  5353   002898  26D9               	addwf	fsr2l,f,c
  5354   00289A  5019               	movf	(turnLeft45@mL+1)^0,w,c
  5355   00289C  22DA               	addwfc	fsr2h,f,c
  5356   00289E  0E00               	movlw	0
  5357   0028A0  6EDF               	movwf	indf2,c
  5358                           
  5359                           ;dc_motor.c: 104:     mR->direction=1;
  5360   0028A2  EE20 F001          	lfsr	2,1
  5361   0028A6  501A               	movf	turnLeft45@mR^0,w,c
  5362   0028A8  26D9               	addwf	fsr2l,f,c
  5363   0028AA  501B               	movf	(turnLeft45@mR+1)^0,w,c
  5364   0028AC  22DA               	addwfc	fsr2h,f,c
  5365   0028AE  0E01               	movlw	1
  5366   0028B0  6EDF               	movwf	indf2,c
  5367   0028B2                     
  5368                           ;dc_motor.c: 105:     for(int i=0;i<80;i+=10){
  5369   0028B2  0E00               	movlw	0
  5370   0028B4  6E1F               	movwf	(turnLeft45@i+1)^0,c
  5371   0028B6  0E00               	movlw	0
  5372   0028B8  6E1E               	movwf	turnLeft45@i^0,c
  5373   0028BA                     l2774:
  5374                           
  5375                           ;dc_motor.c: 107:         mR->power=i;
  5376   0028BA  C01A  FFD9         	movff	turnLeft45@mR,fsr2l
  5377   0028BE  C01B  FFDA         	movff	turnLeft45@mR+1,fsr2h
  5378   0028C2  C01E  FFDF         	movff	turnLeft45@i,indf2
  5379                           
  5380                           ;dc_motor.c: 108:         mL->power=i;
  5381   0028C6  C018  FFD9         	movff	turnLeft45@mL,fsr2l
  5382   0028CA  C019  FFDA         	movff	turnLeft45@mL+1,fsr2h
  5383   0028CE  C01E  FFDF         	movff	turnLeft45@i,indf2
  5384   0028D2                     
  5385                           ;dc_motor.c: 109:         _delay((unsigned long)((15)*(64000000/4000.0)));
  5386   0028D2  0E02               	movlw	2
  5387   0028D4  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5388   0028D6  0E38               	movlw	56
  5389   0028D8  6E1C               	movwf	??_turnLeft45^0,c
  5390   0028DA  0EAD               	movlw	173
  5391   0028DC                     u2317:
  5392   0028DC  2EE8               	decfsz	wreg,f,c
  5393   0028DE  D7FE               	bra	u2317
  5394   0028E0  2E1C               	decfsz	??_turnLeft45^0,f,c
  5395   0028E2  D7FC               	bra	u2317
  5396   0028E4  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5397   0028E6  D7FA               	bra	u2317
  5398   0028E8  F000               	nop	
  5399   0028EA                     
  5400                           ;dc_motor.c: 110:         setMotorPWM(mL);
  5401   0028EA  C018  F012         	movff	turnLeft45@mL,setMotorPWM@m
  5402   0028EE  C019  F013         	movff	turnLeft45@mL+1,setMotorPWM@m+1
  5403   0028F2  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5404   0028F6                     
  5405                           ;dc_motor.c: 111:         setMotorPWM(mR);}
  5406   0028F6  C01A  F012         	movff	turnLeft45@mR,setMotorPWM@m
  5407   0028FA  C01B  F013         	movff	turnLeft45@mR+1,setMotorPWM@m+1
  5408   0028FE  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5409   002902  0E0A               	movlw	10
  5410   002904  261E               	addwf	turnLeft45@i^0,f,c
  5411   002906  0E00               	movlw	0
  5412   002908  221F               	addwfc	(turnLeft45@i+1)^0,f,c
  5413   00290A  BE1F               	btfsc	(turnLeft45@i+1)^0,7,c
  5414   00290C  EF91  F014         	goto	u1291
  5415   002910  501F               	movf	(turnLeft45@i+1)^0,w,c
  5416   002912  E109               	bnz	u1290
  5417   002914  0E50               	movlw	80
  5418   002916  5C1E               	subwf	turnLeft45@i^0,w,c
  5419   002918  A0D8               	btfss	status,0,c
  5420   00291A  EF91  F014         	goto	u1291
  5421   00291E  EF93  F014         	goto	u1290
  5422   002922                     u1291:
  5423   002922  EF5D  F014         	goto	l2774
  5424   002926                     u1290:
  5425   002926                     
  5426                           ;dc_motor.c: 112:     _delay((unsigned long)((90)*(64000000/4000.0)));
  5427   002926  0E08               	movlw	8
  5428   002928  6E1D               	movwf	(??_turnLeft45+1)^0,c
  5429   00292A  0E4F               	movlw	79
  5430   00292C  6E1C               	movwf	??_turnLeft45^0,c
  5431   00292E  0E1A               	movlw	26
  5432   002930                     u2327:
  5433   002930  2EE8               	decfsz	wreg,f,c
  5434   002932  D7FE               	bra	u2327
  5435   002934  2E1C               	decfsz	??_turnLeft45^0,f,c
  5436   002936  D7FC               	bra	u2327
  5437   002938  2E1D               	decfsz	(??_turnLeft45+1)^0,f,c
  5438   00293A  D7FA               	bra	u2327
  5439   00293C  0012               	return		;funcret
  5440   00293E                     __end_of_turnLeft45:
  5441                           	callstack 0
  5442                           
  5443 ;; *************** function _stop *****************
  5444 ;; Defined at:
  5445 ;;		line 84 in file "dc_motor.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5448 ;;		 -> main@motorL(9), 
  5449 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5450 ;;		 -> main@motorR(9), 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5465 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5466 ;;Total ram usage:        5 bytes
  5467 ;; Hardware stack levels used: 1
  5468 ;; Hardware stack levels required when called: 6
  5469 ;; This function calls:
  5470 ;;		_setMotorPWM
  5471 ;; This function is called by:
  5472 ;;		_main
  5473 ;;		_motor_response
  5474 ;;		_motor_response_easy
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text25
  5479   002ADE                     __ptext25:
  5480                           	callstack 0
  5481   002ADE                     _stop:
  5482                           	callstack 24
  5483   002ADE                     
  5484                           ;dc_motor.c: 84: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 85: {;dc_motor.c: 86:
      +                               while(mL->power !=0){
  5485   002ADE  EF84  F015         	goto	l2756
  5486   002AE2                     l2750:
  5487                           
  5488                           ;dc_motor.c: 87:         mL->power -=10;
  5489   002AE2  C018  FFD9         	movff	stop@mL,fsr2l
  5490   002AE6  C019  FFDA         	movff	stop@mL+1,fsr2h
  5491   002AEA  0E0A               	movlw	10
  5492   002AEC  5EDF               	subwf	indf2,f,c
  5493   002AEE                     
  5494                           ;dc_motor.c: 88:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5495   002AEE  0E2A               	movlw	42
  5496   002AF0  6E1C               	movwf	??_stop^0,c
  5497   002AF2  0E8E               	movlw	142
  5498   002AF4                     u2337:
  5499   002AF4  2EE8               	decfsz	wreg,f,c
  5500   002AF6  D7FE               	bra	u2337
  5501   002AF8  2E1C               	decfsz	??_stop^0,f,c
  5502   002AFA  D7FC               	bra	u2337
  5503   002AFC                     
  5504                           ;dc_motor.c: 89:         setMotorPWM(mL);
  5505   002AFC  C018  F012         	movff	stop@mL,setMotorPWM@m
  5506   002B00  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5507   002B04  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5508   002B08                     l2756:
  5509                           
  5510                           ;dc_motor.c: 86:     while(mL->power !=0){
  5511   002B08  C018  FFD9         	movff	stop@mL,fsr2l
  5512   002B0C  C019  FFDA         	movff	stop@mL+1,fsr2h
  5513   002B10  50DF               	movf	indf2,w,c
  5514   002B12  A4D8               	btfss	status,2,c
  5515   002B14  EF8E  F015         	goto	u1271
  5516   002B18  EF90  F015         	goto	u1270
  5517   002B1C                     u1271:
  5518   002B1C  EF71  F015         	goto	l2750
  5519   002B20                     u1270:
  5520   002B20  EFA5  F015         	goto	l2764
  5521   002B24                     l2758:
  5522                           
  5523                           ;dc_motor.c: 92:         mR->power -=10;
  5524   002B24  C01A  FFD9         	movff	stop@mR,fsr2l
  5525   002B28  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5526   002B2C  0E0A               	movlw	10
  5527   002B2E  5EDF               	subwf	indf2,f,c
  5528   002B30                     
  5529                           ;dc_motor.c: 93:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5530   002B30  0E2A               	movlw	42
  5531   002B32  6E1C               	movwf	??_stop^0,c
  5532   002B34  0E8E               	movlw	142
  5533   002B36                     u2347:
  5534   002B36  2EE8               	decfsz	wreg,f,c
  5535   002B38  D7FE               	bra	u2347
  5536   002B3A  2E1C               	decfsz	??_stop^0,f,c
  5537   002B3C  D7FC               	bra	u2347
  5538   002B3E                     
  5539                           ;dc_motor.c: 94:         setMotorPWM(mR);
  5540   002B3E  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5541   002B42  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5542   002B46  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5543   002B4A                     l2764:
  5544                           
  5545                           ;dc_motor.c: 91:     while(mR -> power !=0){
  5546   002B4A  C01A  FFD9         	movff	stop@mR,fsr2l
  5547   002B4E  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5548   002B52  50DF               	movf	indf2,w,c
  5549   002B54  A4D8               	btfss	status,2,c
  5550   002B56  EFAF  F015         	goto	u1281
  5551   002B5A  EFB1  F015         	goto	u1280
  5552   002B5E                     u1281:
  5553   002B5E  EF92  F015         	goto	l2758
  5554   002B62                     u1280:
  5555   002B62  0012               	return		;funcret
  5556   002B64                     __end_of_stop:
  5557                           	callstack 0
  5558                           
  5559 ;; *************** function _reverseFullSpeed *****************
  5560 ;; Defined at:
  5561 ;;		line 145 in file "dc_motor.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5564 ;;		 -> main@motorL(9), 
  5565 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5566 ;;		 -> main@motorR(9), 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  i               2   28[COMRAM] int 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;Total ram usage:        7 bytes
  5583 ;; Hardware stack levels used: 1
  5584 ;; Hardware stack levels required when called: 6
  5585 ;; This function calls:
  5586 ;;		_setMotorPWM
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;;		_motor_response
  5590 ;;		_motor_response_easy
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text26
  5595   0029CA                     __ptext26:
  5596                           	callstack 0
  5597   0029CA                     _reverseFullSpeed:
  5598                           	callstack 24
  5599   0029CA                     
  5600                           ;dc_motor.c: 145: void reverseFullSpeed(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;d
      +                          c_motor.c: 147:     mL->direction=0;
  5601   0029CA  EE20 F001          	lfsr	2,1
  5602   0029CE  5018               	movf	reverseFullSpeed@mL^0,w,c
  5603   0029D0  26D9               	addwf	fsr2l,f,c
  5604   0029D2  5019               	movf	(reverseFullSpeed@mL+1)^0,w,c
  5605   0029D4  22DA               	addwfc	fsr2h,f,c
  5606   0029D6  0E00               	movlw	0
  5607   0029D8  6EDF               	movwf	indf2,c
  5608                           
  5609                           ;dc_motor.c: 148:     mR->direction=0;
  5610   0029DA  EE20 F001          	lfsr	2,1
  5611   0029DE  501A               	movf	reverseFullSpeed@mR^0,w,c
  5612   0029E0  26D9               	addwf	fsr2l,f,c
  5613   0029E2  501B               	movf	(reverseFullSpeed@mR+1)^0,w,c
  5614   0029E4  22DA               	addwfc	fsr2h,f,c
  5615   0029E6  0E00               	movlw	0
  5616   0029E8  6EDF               	movwf	indf2,c
  5617   0029EA                     
  5618                           ;dc_motor.c: 149:     for(int i=0;i<60;i+=10){
  5619   0029EA  0E00               	movlw	0
  5620   0029EC  6E1E               	movwf	(reverseFullSpeed@i+1)^0,c
  5621   0029EE  0E00               	movlw	0
  5622   0029F0  6E1D               	movwf	reverseFullSpeed@i^0,c
  5623   0029F2                     l2818:
  5624                           
  5625                           ;dc_motor.c: 150:         mL->power=i;
  5626   0029F2  C018  FFD9         	movff	reverseFullSpeed@mL,fsr2l
  5627   0029F6  C019  FFDA         	movff	reverseFullSpeed@mL+1,fsr2h
  5628   0029FA  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5629                           
  5630                           ;dc_motor.c: 151:         mR->power=i;
  5631   0029FE  C01A  FFD9         	movff	reverseFullSpeed@mR,fsr2l
  5632   002A02  C01B  FFDA         	movff	reverseFullSpeed@mR+1,fsr2h
  5633   002A06  C01D  FFDF         	movff	reverseFullSpeed@i,indf2
  5634   002A0A                     
  5635                           ;dc_motor.c: 152:         setMotorPWM(mL);
  5636   002A0A  C018  F012         	movff	reverseFullSpeed@mL,setMotorPWM@m
  5637   002A0E  C019  F013         	movff	reverseFullSpeed@mL+1,setMotorPWM@m+1
  5638   002A12  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5639   002A16                     
  5640                           ;dc_motor.c: 153:         setMotorPWM(mR);
  5641   002A16  C01A  F012         	movff	reverseFullSpeed@mR,setMotorPWM@m
  5642   002A1A  C01B  F013         	movff	reverseFullSpeed@mR+1,setMotorPWM@m+1
  5643   002A1E  ECBD  F00F         	call	_setMotorPWM	;wreg free
  5644   002A22                     
  5645                           ;dc_motor.c: 154:         _delay((unsigned long)((10)*(64000000/4000.0)));
  5646   002A22  0ED0               	movlw	208
  5647   002A24  6E1C               	movwf	??_reverseFullSpeed^0,c
  5648   002A26  0ECA               	movlw	202
  5649   002A28                     u2357:
  5650   002A28  2EE8               	decfsz	wreg,f,c
  5651   002A2A  D7FE               	bra	u2357
  5652   002A2C  2E1C               	decfsz	??_reverseFullSpeed^0,f,c
  5653   002A2E  D7FC               	bra	u2357
  5654   002A30                     
  5655                           ;dc_motor.c: 155:     }
  5656   002A30  0E0A               	movlw	10
  5657   002A32  261D               	addwf	reverseFullSpeed@i^0,f,c
  5658   002A34  0E00               	movlw	0
  5659   002A36  221E               	addwfc	(reverseFullSpeed@i+1)^0,f,c
  5660   002A38  BE1E               	btfsc	(reverseFullSpeed@i+1)^0,7,c
  5661   002A3A  EF28  F015         	goto	u1311
  5662   002A3E  501E               	movf	(reverseFullSpeed@i+1)^0,w,c
  5663   002A40  E109               	bnz	u1310
  5664   002A42  0E3C               	movlw	60
  5665   002A44  5C1D               	subwf	reverseFullSpeed@i^0,w,c
  5666   002A46  A0D8               	btfss	status,0,c
  5667   002A48  EF28  F015         	goto	u1311
  5668   002A4C  EF2A  F015         	goto	u1310
  5669   002A50                     u1311:
  5670   002A50  EFF9  F014         	goto	l2818
  5671   002A54                     u1310:
  5672   002A54  0012               	return		;funcret
  5673   002A56                     __end_of_reverseFullSpeed:
  5674                           	callstack 0
  5675                           
  5676 ;; *************** function _setMotorPWM *****************
  5677 ;; Defined at:
  5678 ;;		line 61 in file "dc_motor.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5681 ;;		 -> main@motorR(9), main@motorL(9), 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  negDuty         1   22[COMRAM] unsigned char 
  5684 ;;  posDuty         1   21[COMRAM] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5698 ;;Total ram usage:        6 bytes
  5699 ;; Hardware stack levels used: 1
  5700 ;; Hardware stack levels required when called: 5
  5701 ;; This function calls:
  5702 ;;		___lwdiv
  5703 ;;		___wmul
  5704 ;; This function is called by:
  5705 ;;		_stop
  5706 ;;		_turnLeft45
  5707 ;;		_turnRight45
  5708 ;;		_fullSpeedAhead
  5709 ;;		_reverseFullSpeed
  5710 ;;		_main
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text27
  5715   001F7A                     __ptext27:
  5716                           	callstack 0
  5717   001F7A                     _setMotorPWM:
  5718                           	callstack 24
  5719   001F7A                     
  5720                           ;dc_motor.c: 61: void setMotorPWM(DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 65:     if(m->brakemode) {
  5721   001F7A  EE20 F002          	lfsr	2,2
  5722   001F7E  5012               	movf	setMotorPWM@m^0,w,c
  5723   001F80  26D9               	addwf	fsr2l,f,c
  5724   001F82  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5725   001F84  22DA               	addwfc	fsr2h,f,c
  5726   001F86  50DF               	movf	indf2,w,c
  5727   001F88  B4D8               	btfsc	status,2,c
  5728   001F8A  EFC9  F00F         	goto	u1221
  5729   001F8E  EFCB  F00F         	goto	u1220
  5730   001F92                     u1221:
  5731   001F92  EFFF  F00F         	goto	l2682
  5732   001F96                     u1220:
  5733   001F96                     
  5734                           ;dc_motor.c: 66:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5735   001F96  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5736   001F9A  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5737   001F9E  50DF               	movf	indf2,w,c
  5738   001FA0  6E14               	movwf	??_setMotorPWM^0,c
  5739   001FA2  5014               	movf	??_setMotorPWM^0,w,c
  5740   001FA4  6E05               	movwf	___wmul@multiplier^0,c
  5741   001FA6  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5742   001FA8  EE20 F003          	lfsr	2,3
  5743   001FAC  5012               	movf	setMotorPWM@m^0,w,c
  5744   001FAE  26D9               	addwf	fsr2l,f,c
  5745   001FB0  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5746   001FB2  22DA               	addwfc	fsr2h,f,c
  5747   001FB4  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5748   001FB8  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5749   001FBC  EC98  F018         	call	___wmul	;wreg free
  5750   001FC0  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5751   001FC4  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5752   001FC8  0E00               	movlw	0
  5753   001FCA  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5754   001FCC  0E64               	movlw	100
  5755   001FCE  6E0D               	movwf	___lwdiv@divisor^0,c
  5756   001FD0  EC31  F016         	call	___lwdiv	;wreg free
  5757   001FD4  EE20 F003          	lfsr	2,3
  5758   001FD8  5012               	movf	setMotorPWM@m^0,w,c
  5759   001FDA  26D9               	addwf	fsr2l,f,c
  5760   001FDC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5761   001FDE  22DA               	addwfc	fsr2h,f,c
  5762   001FE0  50DF               	movf	indf2,w,c
  5763   001FE2  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5764   001FE4  500B               	movf	?___lwdiv^0,w,c
  5765   001FE6  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5766   001FE8  6E16               	movwf	setMotorPWM@posDuty^0,c
  5767   001FEA                     
  5768                           ;dc_motor.c: 67:         negDuty=m->PWMperiod;
  5769   001FEA  EE20 F003          	lfsr	2,3
  5770   001FEE  5012               	movf	setMotorPWM@m^0,w,c
  5771   001FF0  26D9               	addwf	fsr2l,f,c
  5772   001FF2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5773   001FF4  22DA               	addwfc	fsr2h,f,c
  5774   001FF6  50DF               	movf	indf2,w,c
  5775   001FF8  6E17               	movwf	setMotorPWM@negDuty^0,c
  5776                           
  5777                           ;dc_motor.c: 68:     }
  5778   001FFA  EF22  F010         	goto	l2686
  5779   001FFE                     l2682:
  5780                           
  5781                           ;dc_motor.c: 70:         posDuty=0;
  5782   001FFE  0E00               	movlw	0
  5783   002000  6E16               	movwf	setMotorPWM@posDuty^0,c
  5784   002002                     
  5785                           ;dc_motor.c: 71:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5786   002002  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5787   002006  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5788   00200A  50DF               	movf	indf2,w,c
  5789   00200C  6E14               	movwf	??_setMotorPWM^0,c
  5790   00200E  5014               	movf	??_setMotorPWM^0,w,c
  5791   002010  6E05               	movwf	___wmul@multiplier^0,c
  5792   002012  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5793   002014  EE20 F003          	lfsr	2,3
  5794   002018  5012               	movf	setMotorPWM@m^0,w,c
  5795   00201A  26D9               	addwf	fsr2l,f,c
  5796   00201C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5797   00201E  22DA               	addwfc	fsr2h,f,c
  5798   002020  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5799   002024  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5800   002028  EC98  F018         	call	___wmul	;wreg free
  5801   00202C  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5802   002030  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5803   002034  0E00               	movlw	0
  5804   002036  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5805   002038  0E64               	movlw	100
  5806   00203A  6E0D               	movwf	___lwdiv@divisor^0,c
  5807   00203C  EC31  F016         	call	___lwdiv	;wreg free
  5808   002040  500B               	movf	?___lwdiv^0,w,c
  5809   002042  6E17               	movwf	setMotorPWM@negDuty^0,c
  5810   002044                     l2686:
  5811                           
  5812                           ;dc_motor.c: 74:     if (m->direction) {
  5813   002044  EE20 F001          	lfsr	2,1
  5814   002048  5012               	movf	setMotorPWM@m^0,w,c
  5815   00204A  26D9               	addwf	fsr2l,f,c
  5816   00204C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5817   00204E  22DA               	addwfc	fsr2h,f,c
  5818   002050  50DF               	movf	indf2,w,c
  5819   002052  B4D8               	btfsc	status,2,c
  5820   002054  EF2E  F010         	goto	u1231
  5821   002058  EF30  F010         	goto	u1230
  5822   00205C                     u1231:
  5823   00205C  EF52  F010         	goto	l2690
  5824   002060                     u1230:
  5825   002060                     
  5826                           ;dc_motor.c: 75:         *(m->posDutyHighByte)=posDuty;
  5827   002060  EE20 F005          	lfsr	2,5
  5828   002064  5012               	movf	setMotorPWM@m^0,w,c
  5829   002066  26D9               	addwf	fsr2l,f,c
  5830   002068  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5831   00206A  22DA               	addwfc	fsr2h,f,c
  5832   00206C  CFDE F014          	movff	postinc2,??_setMotorPWM
  5833   002070  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5834   002074  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5835   002078  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5836   00207C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5837                           
  5838                           ;dc_motor.c: 76:         *(m->negDutyHighByte)=negDuty;
  5839   002080  EE20 F007          	lfsr	2,7
  5840   002084  5012               	movf	setMotorPWM@m^0,w,c
  5841   002086  26D9               	addwf	fsr2l,f,c
  5842   002088  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5843   00208A  22DA               	addwfc	fsr2h,f,c
  5844   00208C  CFDE F014          	movff	postinc2,??_setMotorPWM
  5845   002090  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5846   002094  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5847   002098  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5848   00209C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5849                           
  5850                           ;dc_motor.c: 77:     } else {
  5851   0020A0  EF72  F010         	goto	l86
  5852   0020A4                     l2690:
  5853                           
  5854                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=negDuty;
  5855   0020A4  EE20 F005          	lfsr	2,5
  5856   0020A8  5012               	movf	setMotorPWM@m^0,w,c
  5857   0020AA  26D9               	addwf	fsr2l,f,c
  5858   0020AC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5859   0020AE  22DA               	addwfc	fsr2h,f,c
  5860   0020B0  CFDE F014          	movff	postinc2,??_setMotorPWM
  5861   0020B4  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5862   0020B8  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5863   0020BC  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5864   0020C0  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5865                           
  5866                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=posDuty;
  5867   0020C4  EE20 F007          	lfsr	2,7
  5868   0020C8  5012               	movf	setMotorPWM@m^0,w,c
  5869   0020CA  26D9               	addwf	fsr2l,f,c
  5870   0020CC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5871   0020CE  22DA               	addwfc	fsr2h,f,c
  5872   0020D0  CFDE F014          	movff	postinc2,??_setMotorPWM
  5873   0020D4  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5874   0020D8  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5875   0020DC  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5876   0020E0  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5877   0020E4                     l86:
  5878   0020E4  0012               	return		;funcret
  5879   0020E6                     __end_of_setMotorPWM:
  5880                           	callstack 0
  5881                           
  5882 ;; *************** function ___wmul *****************
  5883 ;; Defined at:
  5884 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  multiplier      2    4[COMRAM] unsigned int 
  5887 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  product         2    8[COMRAM] unsigned int 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2    4[COMRAM] unsigned int 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, prodl, prodh
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;Total ram usage:        6 bytes
  5904 ;; Hardware stack levels used: 1
  5905 ;; Hardware stack levels required when called: 4
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_setMotorPWM
  5910 ;;		_normalise_readings
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text28
  5915   003130                     __ptext28:
  5916                           	callstack 0
  5917   003130                     ___wmul:
  5918                           	callstack 24
  5919   003130  5005               	movf	___wmul@multiplier^0,w,c
  5920   003132  0207               	mulwf	___wmul@multiplicand^0,c
  5921   003134  CFF3 F009          	movff	prodl,___wmul@product
  5922   003138  CFF4 F00A          	movff	prodh,___wmul@product+1
  5923   00313C  5005               	movf	___wmul@multiplier^0,w,c
  5924   00313E  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5925   003140  50F3               	movf	243,w,c
  5926   003142  260A               	addwf	(___wmul@product+1)^0,f,c
  5927   003144  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5928   003146  0207               	mulwf	___wmul@multiplicand^0,c
  5929   003148  50F3               	movf	243,w,c
  5930   00314A  260A               	addwf	(___wmul@product+1)^0,f,c
  5931   00314C  C009  F005         	movff	___wmul@product,?___wmul
  5932   003150  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5933   003154  0012               	return		;funcret
  5934   003156                     __end_of___wmul:
  5935                           	callstack 0
  5936                           
  5937 ;; *************** function ___lwdiv *****************
  5938 ;; Defined at:
  5939 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  dividend        2   10[COMRAM] unsigned int 
  5942 ;;  divisor         2   12[COMRAM] unsigned int 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  quotient        2   14[COMRAM] unsigned int 
  5945 ;;  counter         1   16[COMRAM] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  2   10[COMRAM] unsigned int 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5956 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;Total ram usage:        7 bytes
  5960 ;; Hardware stack levels used: 1
  5961 ;; Hardware stack levels required when called: 4
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_setMotorPWM
  5966 ;;		_normalise_readings
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text29
  5971   002C62                     __ptext29:
  5972                           	callstack 0
  5973   002C62                     ___lwdiv:
  5974                           	callstack 24
  5975   002C62  0E00               	movlw	0
  5976   002C64  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5977   002C66  0E00               	movlw	0
  5978   002C68  6E0F               	movwf	___lwdiv@quotient^0,c
  5979   002C6A  500D               	movf	___lwdiv@divisor^0,w,c
  5980   002C6C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5981   002C6E  B4D8               	btfsc	status,2,c
  5982   002C70  EF3C  F016         	goto	u1071
  5983   002C74  EF3E  F016         	goto	u1070
  5984   002C78                     u1071:
  5985   002C78  EF66  F016         	goto	l1023
  5986   002C7C                     u1070:
  5987   002C7C  0E01               	movlw	1
  5988   002C7E  6E11               	movwf	___lwdiv@counter^0,c
  5989   002C80  EF46  F016         	goto	l2580
  5990   002C84                     l2578:
  5991   002C84  90D8               	bcf	status,0,c
  5992   002C86  360D               	rlcf	___lwdiv@divisor^0,f,c
  5993   002C88  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5994   002C8A  2A11               	incf	___lwdiv@counter^0,f,c
  5995   002C8C                     l2580:
  5996   002C8C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5997   002C8E  EF4B  F016         	goto	u1081
  5998   002C92  EF4D  F016         	goto	u1080
  5999   002C96                     u1081:
  6000   002C96  EF42  F016         	goto	l2578
  6001   002C9A                     u1080:
  6002   002C9A                     l2582:
  6003   002C9A  90D8               	bcf	status,0,c
  6004   002C9C  360F               	rlcf	___lwdiv@quotient^0,f,c
  6005   002C9E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6006   002CA0  500D               	movf	___lwdiv@divisor^0,w,c
  6007   002CA2  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6008   002CA4  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6009   002CA6  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6010   002CA8  A0D8               	btfss	status,0,c
  6011   002CAA  EF59  F016         	goto	u1091
  6012   002CAE  EF5B  F016         	goto	u1090
  6013   002CB2                     u1091:
  6014   002CB2  EF60  F016         	goto	l2590
  6015   002CB6                     u1090:
  6016   002CB6  500D               	movf	___lwdiv@divisor^0,w,c
  6017   002CB8  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6018   002CBA  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6019   002CBC  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6020   002CBE  800F               	bsf	___lwdiv@quotient^0,0,c
  6021   002CC0                     l2590:
  6022   002CC0  90D8               	bcf	status,0,c
  6023   002CC2  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6024   002CC4  320D               	rrcf	___lwdiv@divisor^0,f,c
  6025   002CC6  2E11               	decfsz	___lwdiv@counter^0,f,c
  6026   002CC8  EF4D  F016         	goto	l2582
  6027   002CCC                     l1023:
  6028   002CCC  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6029   002CD0  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6030   002CD4  0012               	return		;funcret
  6031   002CD6                     __end_of___lwdiv:
  6032                           	callstack 0
  6033                           
  6034 ;; *************** function _make_master_closeness *****************
  6035 ;; Defined at:
  6036 ;;		line 99 in file "colour_identify.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  buf             2    4[COMRAM] PTR unsigned char 
  6039 ;;		 -> main@buf(150), 
  6040 ;;  normalised_v    2    6[COMRAM] PTR unsigned int [9]
  6041 ;;		 -> card_response_easy@normalised_values(40), card_response@normalised_values(72), 
  6042 ;;  master_close    2    8[COMRAM] PTR unsigned int 
  6043 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  i               1   40[COMRAM] enum E14551
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      void 
  6048 ;; Registers used:
  6049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6055 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6057 ;;      Temps:         30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6058 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6059 ;;Total ram usage:       37 bytes
  6060 ;; Hardware stack levels used: 1
  6061 ;; Hardware stack levels required when called: 4
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_card_response
  6066 ;;		_card_response_easy
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text30
  6071   002610                     __ptext30:
  6072                           	callstack 0
  6073   002610                     _make_master_closeness:
  6074                           	callstack 25
  6075   002610                     
  6076                           ;colour_identify.c: 100:     for(colour i = RED; i<=BLACK; i++){
  6077   002610  0E01               	movlw	1
  6078   002612  6E29               	movwf	make_master_closeness@i^0,c
  6079   002614                     l2976:
  6080                           
  6081                           ;colour_identify.c: 102:         master_closeness[i] = (normalised_values[CLEAR][i] + no
      +                          rmalised_values[RED][i] + normalised_values[GREEN][i] + normalised_values[BLUE][i])/4;
  6082   002614  5029               	movf	make_master_closeness@i^0,w,c
  6083   002616  0D02               	mullw	2
  6084   002618  CFF3 F00B          	movff	prodl,??_make_master_closeness
  6085   00261C  CFF4 F00C          	movff	prodh,??_make_master_closeness+1
  6086   002620  500B               	movf	??_make_master_closeness^0,w,c
  6087   002622  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6088   002624  6E0D               	movwf	(??_make_master_closeness+2)^0,c
  6089   002626  500C               	movf	(??_make_master_closeness+1)^0,w,c
  6090   002628  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6091   00262A  6E0E               	movwf	(??_make_master_closeness+3)^0,c
  6092   00262C  0E36               	movlw	54
  6093   00262E  240D               	addwf	(??_make_master_closeness+2)^0,w,c
  6094   002630  6ED9               	movwf	fsr2l,c
  6095   002632  0E00               	movlw	0
  6096   002634  200E               	addwfc	(??_make_master_closeness+3)^0,w,c
  6097   002636  6EDA               	movwf	fsr2h,c
  6098   002638  CFDE F00F          	movff	postinc2,??_make_master_closeness+4
  6099   00263C  CFDD F010          	movff	postdec2,??_make_master_closeness+5
  6100   002640  5029               	movf	make_master_closeness@i^0,w,c
  6101   002642  0D02               	mullw	2
  6102   002644  CFF3 F011          	movff	prodl,??_make_master_closeness+6
  6103   002648  CFF4 F012          	movff	prodh,??_make_master_closeness+7
  6104   00264C  5011               	movf	(??_make_master_closeness+6)^0,w,c
  6105   00264E  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6106   002650  6E13               	movwf	(??_make_master_closeness+8)^0,c
  6107   002652  5012               	movf	(??_make_master_closeness+7)^0,w,c
  6108   002654  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6109   002656  6E14               	movwf	(??_make_master_closeness+9)^0,c
  6110   002658  0E24               	movlw	36
  6111   00265A  2413               	addwf	(??_make_master_closeness+8)^0,w,c
  6112   00265C  6ED9               	movwf	fsr2l,c
  6113   00265E  0E00               	movlw	0
  6114   002660  2014               	addwfc	(??_make_master_closeness+9)^0,w,c
  6115   002662  6EDA               	movwf	fsr2h,c
  6116   002664  CFDE F015          	movff	postinc2,??_make_master_closeness+10
  6117   002668  CFDD F016          	movff	postdec2,??_make_master_closeness+11
  6118   00266C  5029               	movf	make_master_closeness@i^0,w,c
  6119   00266E  0D02               	mullw	2
  6120   002670  CFF3 F017          	movff	prodl,??_make_master_closeness+12
  6121   002674  CFF4 F018          	movff	prodh,??_make_master_closeness+13
  6122   002678  5017               	movf	(??_make_master_closeness+12)^0,w,c
  6123   00267A  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6124   00267C  6E19               	movwf	(??_make_master_closeness+14)^0,c
  6125   00267E  5018               	movf	(??_make_master_closeness+13)^0,w,c
  6126   002680  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6127   002682  6E1A               	movwf	(??_make_master_closeness+15)^0,c
  6128   002684  0E12               	movlw	18
  6129   002686  2419               	addwf	(??_make_master_closeness+14)^0,w,c
  6130   002688  6ED9               	movwf	fsr2l,c
  6131   00268A  0E00               	movlw	0
  6132   00268C  201A               	addwfc	(??_make_master_closeness+15)^0,w,c
  6133   00268E  6EDA               	movwf	fsr2h,c
  6134   002690  CFDE F01B          	movff	postinc2,??_make_master_closeness+16
  6135   002694  CFDD F01C          	movff	postdec2,??_make_master_closeness+17
  6136   002698  5029               	movf	make_master_closeness@i^0,w,c
  6137   00269A  0D02               	mullw	2
  6138   00269C  CFF3 F01D          	movff	prodl,??_make_master_closeness+18
  6139   0026A0  CFF4 F01E          	movff	prodh,??_make_master_closeness+19
  6140   0026A4  501D               	movf	(??_make_master_closeness+18)^0,w,c
  6141   0026A6  2407               	addwf	make_master_closeness@normalised_values^0,w,c
  6142   0026A8  6ED9               	movwf	fsr2l,c
  6143   0026AA  501E               	movf	(??_make_master_closeness+19)^0,w,c
  6144   0026AC  2008               	addwfc	(make_master_closeness@normalised_values+1)^0,w,c
  6145   0026AE  6EDA               	movwf	fsr2h,c
  6146   0026B0  CFDE F01F          	movff	postinc2,??_make_master_closeness+20
  6147   0026B4  CFDD F020          	movff	postdec2,??_make_master_closeness+21
  6148   0026B8  501B               	movf	(??_make_master_closeness+16)^0,w,c
  6149   0026BA  241F               	addwf	(??_make_master_closeness+20)^0,w,c
  6150   0026BC  6E21               	movwf	(??_make_master_closeness+22)^0,c
  6151   0026BE  501C               	movf	(??_make_master_closeness+17)^0,w,c
  6152   0026C0  2020               	addwfc	(??_make_master_closeness+21)^0,w,c
  6153   0026C2  6E22               	movwf	(??_make_master_closeness+23)^0,c
  6154   0026C4  5015               	movf	(??_make_master_closeness+10)^0,w,c
  6155   0026C6  2421               	addwf	(??_make_master_closeness+22)^0,w,c
  6156   0026C8  6E23               	movwf	(??_make_master_closeness+24)^0,c
  6157   0026CA  5016               	movf	(??_make_master_closeness+11)^0,w,c
  6158   0026CC  2022               	addwfc	(??_make_master_closeness+23)^0,w,c
  6159   0026CE  6E24               	movwf	(??_make_master_closeness+25)^0,c
  6160   0026D0  500F               	movf	(??_make_master_closeness+4)^0,w,c
  6161   0026D2  2423               	addwf	(??_make_master_closeness+24)^0,w,c
  6162   0026D4  6E25               	movwf	(??_make_master_closeness+26)^0,c
  6163   0026D6  5010               	movf	(??_make_master_closeness+5)^0,w,c
  6164   0026D8  2024               	addwfc	(??_make_master_closeness+25)^0,w,c
  6165   0026DA  6E26               	movwf	(??_make_master_closeness+27)^0,c
  6166   0026DC  90D8               	bcf	status,0,c
  6167   0026DE  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6168   0026E0  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6169   0026E2  90D8               	bcf	status,0,c
  6170   0026E4  3226               	rrcf	(??_make_master_closeness+27)^0,f,c
  6171   0026E6  3225               	rrcf	(??_make_master_closeness+26)^0,f,c
  6172   0026E8  5029               	movf	make_master_closeness@i^0,w,c
  6173   0026EA  0D02               	mullw	2
  6174   0026EC  CFF3 F027          	movff	prodl,??_make_master_closeness+28
  6175   0026F0  CFF4 F028          	movff	prodh,??_make_master_closeness+29
  6176   0026F4  5027               	movf	(??_make_master_closeness+28)^0,w,c
  6177   0026F6  2409               	addwf	make_master_closeness@master_closeness^0,w,c
  6178   0026F8  6ED9               	movwf	fsr2l,c
  6179   0026FA  5028               	movf	(??_make_master_closeness+29)^0,w,c
  6180   0026FC  200A               	addwfc	(make_master_closeness@master_closeness+1)^0,w,c
  6181   0026FE  6EDA               	movwf	fsr2h,c
  6182   002700  C025  FFDE         	movff	??_make_master_closeness+26,postinc2
  6183   002704  C026  FFDD         	movff	??_make_master_closeness+27,postdec2
  6184   002708                     
  6185                           ;colour_identify.c: 107:     }
  6186   002708  2A29               	incf	make_master_closeness@i^0,f,c
  6187   00270A  0E09               	movlw	9
  6188   00270C  6429               	cpfsgt	make_master_closeness@i^0,c
  6189   00270E  EF8B  F013         	goto	u1431
  6190   002712  EF8D  F013         	goto	u1430
  6191   002716                     u1431:
  6192   002716  EF0A  F013         	goto	l2976
  6193   00271A                     u1430:
  6194   00271A  0012               	return		;funcret
  6195   00271C                     __end_of_make_master_closeness:
  6196                           	callstack 0
  6197                           
  6198 ;; *************** function _determine_card *****************
  6199 ;; Defined at:
  6200 ;;		line 110 in file "colour_identify.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  master_close    2    4[COMRAM] PTR unsigned int 
  6203 ;;		 -> card_response_easy@master_closeness(10), card_response@master_closeness(18), 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  i               1   13[COMRAM] enum E14551
  6206 ;;  current_smal    2   10[COMRAM] unsigned int 
  6207 ;;  predicted_co    1   12[COMRAM] enum E14551
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      enum E14551
  6210 ;; Registers used:
  6211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6219 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;Total ram usage:       10 bytes
  6222 ;; Hardware stack levels used: 1
  6223 ;; Hardware stack levels required when called: 4
  6224 ;; This function calls:
  6225 ;;		Nothing
  6226 ;; This function is called by:
  6227 ;;		_card_response
  6228 ;;		_card_response_easy
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text31
  6233   002B64                     __ptext31:
  6234                           	callstack 0
  6235   002B64                     _determine_card:
  6236                           	callstack 25
  6237   002B64                     
  6238                           ;colour_identify.c: 112:     colour predicted_colour = RED;
  6239   002B64  0E01               	movlw	1
  6240   002B66  6E0D               	movwf	determine_card@predicted_colour^0,c
  6241   002B68                     
  6242                           ;colour_identify.c: 113:     unsigned int current_smallest = master_closeness[RED];
  6243   002B68  EE20 F002          	lfsr	2,2
  6244   002B6C  5005               	movf	determine_card@master_closeness^0,w,c
  6245   002B6E  26D9               	addwf	fsr2l,f,c
  6246   002B70  5006               	movf	(determine_card@master_closeness+1)^0,w,c
  6247   002B72  22DA               	addwfc	fsr2h,f,c
  6248   002B74  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6249   002B78  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6250   002B7C                     
  6251                           ;colour_identify.c: 114:     for(colour i = GREEN; i<=BLACK; i++){
  6252   002B7C  0E02               	movlw	2
  6253   002B7E  6E0E               	movwf	determine_card@i^0,c
  6254   002B80                     l2992:
  6255                           
  6256                           ;colour_identify.c: 115:         if(master_closeness[i] < current_smallest){
  6257   002B80  500E               	movf	determine_card@i^0,w,c
  6258   002B82  0D02               	mullw	2
  6259   002B84  CFF3 F007          	movff	prodl,??_determine_card
  6260   002B88  CFF4 F008          	movff	prodh,??_determine_card+1
  6261   002B8C  5007               	movf	??_determine_card^0,w,c
  6262   002B8E  2405               	addwf	determine_card@master_closeness^0,w,c
  6263   002B90  6ED9               	movwf	fsr2l,c
  6264   002B92  5008               	movf	(??_determine_card+1)^0,w,c
  6265   002B94  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6266   002B96  6EDA               	movwf	fsr2h,c
  6267   002B98  500B               	movf	determine_card@current_smallest^0,w,c
  6268   002B9A  5CDE               	subwf	postinc2,w,c
  6269   002B9C  500C               	movf	(determine_card@current_smallest+1)^0,w,c
  6270   002B9E  58DE               	subwfb	postinc2,w,c
  6271   002BA0  B0D8               	btfsc	status,0,c
  6272   002BA2  EFD5  F015         	goto	u1441
  6273   002BA6  EFD7  F015         	goto	u1440
  6274   002BAA                     u1441:
  6275   002BAA  EFE9  F015         	goto	l2998
  6276   002BAE                     u1440:
  6277   002BAE                     
  6278                           ;colour_identify.c: 116:             current_smallest = master_closeness[i];
  6279   002BAE  500E               	movf	determine_card@i^0,w,c
  6280   002BB0  0D02               	mullw	2
  6281   002BB2  CFF3 F007          	movff	prodl,??_determine_card
  6282   002BB6  CFF4 F008          	movff	prodh,??_determine_card+1
  6283   002BBA  5007               	movf	??_determine_card^0,w,c
  6284   002BBC  2405               	addwf	determine_card@master_closeness^0,w,c
  6285   002BBE  6ED9               	movwf	fsr2l,c
  6286   002BC0  5008               	movf	(??_determine_card+1)^0,w,c
  6287   002BC2  2006               	addwfc	(determine_card@master_closeness+1)^0,w,c
  6288   002BC4  6EDA               	movwf	fsr2h,c
  6289   002BC6  CFDE F00B          	movff	postinc2,determine_card@current_smallest
  6290   002BCA  CFDD F00C          	movff	postdec2,determine_card@current_smallest+1
  6291   002BCE                     
  6292                           ;colour_identify.c: 117:             predicted_colour = i;
  6293   002BCE  C00E  F00D         	movff	determine_card@i,determine_card@predicted_colour
  6294   002BD2                     l2998:
  6295                           
  6296                           ;colour_identify.c: 119:     }
  6297   002BD2  2A0E               	incf	determine_card@i^0,f,c
  6298   002BD4  0E09               	movlw	9
  6299   002BD6  640E               	cpfsgt	determine_card@i^0,c
  6300   002BD8  EFF0  F015         	goto	u1451
  6301   002BDC  EFF2  F015         	goto	u1450
  6302   002BE0                     u1451:
  6303   002BE0  EFC0  F015         	goto	l2992
  6304   002BE4                     u1450:
  6305   002BE4                     
  6306                           ;colour_identify.c: 120:     return predicted_colour;
  6307   002BE4  500D               	movf	determine_card@predicted_colour^0,w,c
  6308   002BE6  0012               	return		;funcret
  6309   002BE8                     __end_of_determine_card:
  6310                           	callstack 0
  6311                           
  6312 ;; *************** function _collect_avg_readings *****************
  6313 ;; Defined at:
  6314 ;;		line 31 in file "colour_identify.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;  clear_read      2   15[COMRAM] PTR unsigned int 
  6317 ;;		 -> main@clear_read(2), 
  6318 ;;  red_read        2   17[COMRAM] PTR unsigned int 
  6319 ;;		 -> main@red_read(2), 
  6320 ;;  green_read      2   19[COMRAM] PTR unsigned int 
  6321 ;;		 -> main@green_read(2), 
  6322 ;;  blue_read       2   21[COMRAM] PTR unsigned int 
  6323 ;;		 -> main@blue_read(2), 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  i               2   33[COMRAM] int 
  6326 ;;  i               2   31[COMRAM] int 
  6327 ;;  i               2   29[COMRAM] int 
  6328 ;;  i               2   27[COMRAM] int 
  6329 ;;  i               2   25[COMRAM] int 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      void 
  6332 ;; Registers used:
  6333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6339 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6340 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6342 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6343 ;;Total ram usage:       20 bytes
  6344 ;; Hardware stack levels used: 1
  6345 ;; Hardware stack levels required when called: 7
  6346 ;; This function calls:
  6347 ;;		_color_read_Blue
  6348 ;;		_color_read_Clear
  6349 ;;		_color_read_Green
  6350 ;;		_color_read_Red
  6351 ;; This function is called by:
  6352 ;;		_main
  6353 ;;		_card_response
  6354 ;;		_card_response_easy
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text32
  6359   001B78                     __ptext32:
  6360                           	callstack 0
  6361   001B78                     _collect_avg_readings:
  6362                           	callstack 23
  6363   001B78                     
  6364                           ;colour_identify.c: 31: void collect_avg_readings(unsigned int *clear_read, unsigned int
      +                           *red_read, unsigned int *green_read, unsigned int *blue_read);colour_identify.c: 32: {;
      +                          colour_identify.c: 35:     for (int i = 0; i <= 500; i++){
  6365   001B78  0E00               	movlw	0
  6366   001B7A  6E1B               	movwf	(collect_avg_readings@i+1)^0,c
  6367   001B7C  0E00               	movlw	0
  6368   001B7E  6E1A               	movwf	collect_avg_readings@i^0,c
  6369   001B80                     l2868:
  6370                           
  6371                           ;colour_identify.c: 36:         *clear_read = color_read_Clear();
  6372   001B80  EC42  F017         	call	_color_read_Clear	;wreg free
  6373   001B84  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6374   001B88  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6375   001B8C  C009  FFDE         	movff	?_color_read_Clear,postinc2
  6376   001B90  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  6377                           
  6378                           ;colour_identify.c: 37:         *red_read = color_read_Red();
  6379   001B94  ECF2  F016         	call	_color_read_Red	;wreg free
  6380   001B98  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6381   001B9C  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6382   001BA0  C009  FFDE         	movff	?_color_read_Red,postinc2
  6383   001BA4  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  6384                           
  6385                           ;colour_identify.c: 38:         *green_read = color_read_Green();
  6386   001BA8  EC1A  F017         	call	_color_read_Green	;wreg free
  6387   001BAC  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6388   001BB0  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6389   001BB4  C009  FFDE         	movff	?_color_read_Green,postinc2
  6390   001BB8  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  6391                           
  6392                           ;colour_identify.c: 39:         *blue_read = color_read_Blue();
  6393   001BBC  EC6A  F017         	call	_color_read_Blue	;wreg free
  6394   001BC0  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6395   001BC4  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6396   001BC8  C009  FFDE         	movff	?_color_read_Blue,postinc2
  6397   001BCC  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  6398   001BD0                     
  6399                           ;colour_identify.c: 40:     }
  6400   001BD0  4A1A               	infsnz	collect_avg_readings@i^0,f,c
  6401   001BD2  2A1B               	incf	(collect_avg_readings@i+1)^0,f,c
  6402   001BD4  BE1B               	btfsc	(collect_avg_readings@i+1)^0,7,c
  6403   001BD6  EFF6  F00D         	goto	u1361
  6404   001BDA  0EF5               	movlw	245
  6405   001BDC  5C1A               	subwf	collect_avg_readings@i^0,w,c
  6406   001BDE  0E01               	movlw	1
  6407   001BE0  581B               	subwfb	(collect_avg_readings@i+1)^0,w,c
  6408   001BE2  A0D8               	btfss	status,0,c
  6409   001BE4  EFF6  F00D         	goto	u1361
  6410   001BE8  EFF8  F00D         	goto	u1360
  6411   001BEC                     u1361:
  6412   001BEC  EFC0  F00D         	goto	l2868
  6413   001BF0                     u1360:
  6414   001BF0                     
  6415                           ;colour_identify.c: 44:     for(int i = 0; i <= 2; i++){
  6416   001BF0  0E00               	movlw	0
  6417   001BF2  6E1D               	movwf	(collect_avg_readings@i_1602+1)^0,c
  6418   001BF4  0E00               	movlw	0
  6419   001BF6  6E1C               	movwf	collect_avg_readings@i_1602^0,c
  6420   001BF8                     l2880:
  6421                           
  6422                           ;colour_identify.c: 45:         *clear_read += color_read_Clear();
  6423   001BF8  EC42  F017         	call	_color_read_Clear	;wreg free
  6424   001BFC  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6425   001C00  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6426   001C04  5009               	movf	?_color_read_Clear^0,w,c
  6427   001C06  26DE               	addwf	postinc2,f,c
  6428   001C08  500A               	movf	(?_color_read_Clear+1)^0,w,c
  6429   001C0A  22DD               	addwfc	postdec2,f,c
  6430   001C0C                     
  6431                           ;colour_identify.c: 46:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6432   001C0C  0E11               	movlw	17
  6433   001C0E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6434   001C10  0E3C               	movlw	60
  6435   001C12  6E18               	movwf	??_collect_avg_readings^0,c
  6436   001C14  0ECB               	movlw	203
  6437   001C16                     u2367:
  6438   001C16  2EE8               	decfsz	wreg,f,c
  6439   001C18  D7FE               	bra	u2367
  6440   001C1A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6441   001C1C  D7FC               	bra	u2367
  6442   001C1E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6443   001C20  D7FA               	bra	u2367
  6444   001C22  F000               	nop	
  6445   001C24                     
  6446                           ;colour_identify.c: 47:     }
  6447   001C24  4A1C               	infsnz	collect_avg_readings@i_1602^0,f,c
  6448   001C26  2A1D               	incf	(collect_avg_readings@i_1602+1)^0,f,c
  6449   001C28  BE1D               	btfsc	(collect_avg_readings@i_1602+1)^0,7,c
  6450   001C2A  EF20  F00E         	goto	u1371
  6451   001C2E  501D               	movf	(collect_avg_readings@i_1602+1)^0,w,c
  6452   001C30  E109               	bnz	u1370
  6453   001C32  0E03               	movlw	3
  6454   001C34  5C1C               	subwf	collect_avg_readings@i_1602^0,w,c
  6455   001C36  A0D8               	btfss	status,0,c
  6456   001C38  EF20  F00E         	goto	u1371
  6457   001C3C  EF22  F00E         	goto	u1370
  6458   001C40                     u1371:
  6459   001C40  EFFC  F00D         	goto	l2880
  6460   001C44                     u1370:
  6461   001C44                     
  6462                           ;colour_identify.c: 48:     *clear_read = *clear_read/4;
  6463   001C44  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6464   001C48  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6465   001C4C  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6466   001C50  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6467   001C54  90D8               	bcf	status,0,c
  6468   001C56  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6469   001C58  3218               	rrcf	??_collect_avg_readings^0,f,c
  6470   001C5A  90D8               	bcf	status,0,c
  6471   001C5C  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6472   001C5E  3218               	rrcf	??_collect_avg_readings^0,f,c
  6473   001C60  C010  FFD9         	movff	collect_avg_readings@clear_read,fsr2l
  6474   001C64  C011  FFDA         	movff	collect_avg_readings@clear_read+1,fsr2h
  6475   001C68  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6476   001C6C  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6477   001C70                     
  6478                           ;colour_identify.c: 50:     for(int i = 0; i <= 2; i++){
  6479   001C70  0E00               	movlw	0
  6480   001C72  6E1F               	movwf	(collect_avg_readings@i_1603+1)^0,c
  6481   001C74  0E00               	movlw	0
  6482   001C76  6E1E               	movwf	collect_avg_readings@i_1603^0,c
  6483   001C78                     l2896:
  6484                           
  6485                           ;colour_identify.c: 51:         *red_read += color_read_Red();
  6486   001C78  ECF2  F016         	call	_color_read_Red	;wreg free
  6487   001C7C  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6488   001C80  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6489   001C84  5009               	movf	?_color_read_Red^0,w,c
  6490   001C86  26DE               	addwf	postinc2,f,c
  6491   001C88  500A               	movf	(?_color_read_Red+1)^0,w,c
  6492   001C8A  22DD               	addwfc	postdec2,f,c
  6493   001C8C                     
  6494                           ;colour_identify.c: 52:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6495   001C8C  0E11               	movlw	17
  6496   001C8E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6497   001C90  0E3C               	movlw	60
  6498   001C92  6E18               	movwf	??_collect_avg_readings^0,c
  6499   001C94  0ECB               	movlw	203
  6500   001C96                     u2377:
  6501   001C96  2EE8               	decfsz	wreg,f,c
  6502   001C98  D7FE               	bra	u2377
  6503   001C9A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6504   001C9C  D7FC               	bra	u2377
  6505   001C9E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6506   001CA0  D7FA               	bra	u2377
  6507   001CA2  F000               	nop	
  6508   001CA4                     
  6509                           ;colour_identify.c: 53:     }
  6510   001CA4  4A1E               	infsnz	collect_avg_readings@i_1603^0,f,c
  6511   001CA6  2A1F               	incf	(collect_avg_readings@i_1603+1)^0,f,c
  6512   001CA8  BE1F               	btfsc	(collect_avg_readings@i_1603+1)^0,7,c
  6513   001CAA  EF60  F00E         	goto	u1381
  6514   001CAE  501F               	movf	(collect_avg_readings@i_1603+1)^0,w,c
  6515   001CB0  E109               	bnz	u1380
  6516   001CB2  0E03               	movlw	3
  6517   001CB4  5C1E               	subwf	collect_avg_readings@i_1603^0,w,c
  6518   001CB6  A0D8               	btfss	status,0,c
  6519   001CB8  EF60  F00E         	goto	u1381
  6520   001CBC  EF62  F00E         	goto	u1380
  6521   001CC0                     u1381:
  6522   001CC0  EF3C  F00E         	goto	l2896
  6523   001CC4                     u1380:
  6524   001CC4                     
  6525                           ;colour_identify.c: 54:     *red_read = *red_read/4;
  6526   001CC4  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6527   001CC8  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6528   001CCC  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6529   001CD0  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6530   001CD4  90D8               	bcf	status,0,c
  6531   001CD6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6532   001CD8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6533   001CDA  90D8               	bcf	status,0,c
  6534   001CDC  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6535   001CDE  3218               	rrcf	??_collect_avg_readings^0,f,c
  6536   001CE0  C012  FFD9         	movff	collect_avg_readings@red_read,fsr2l
  6537   001CE4  C013  FFDA         	movff	collect_avg_readings@red_read+1,fsr2h
  6538   001CE8  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6539   001CEC  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6540   001CF0                     
  6541                           ;colour_identify.c: 56:     for(int i = 0; i <= 2; i++){
  6542   001CF0  0E00               	movlw	0
  6543   001CF2  6E21               	movwf	(collect_avg_readings@i_1604+1)^0,c
  6544   001CF4  0E00               	movlw	0
  6545   001CF6  6E20               	movwf	collect_avg_readings@i_1604^0,c
  6546   001CF8                     l2912:
  6547                           
  6548                           ;colour_identify.c: 57:         *green_read += color_read_Green();
  6549   001CF8  EC1A  F017         	call	_color_read_Green	;wreg free
  6550   001CFC  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6551   001D00  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6552   001D04  5009               	movf	?_color_read_Green^0,w,c
  6553   001D06  26DE               	addwf	postinc2,f,c
  6554   001D08  500A               	movf	(?_color_read_Green+1)^0,w,c
  6555   001D0A  22DD               	addwfc	postdec2,f,c
  6556   001D0C                     
  6557                           ;colour_identify.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6558   001D0C  0E11               	movlw	17
  6559   001D0E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6560   001D10  0E3C               	movlw	60
  6561   001D12  6E18               	movwf	??_collect_avg_readings^0,c
  6562   001D14  0ECB               	movlw	203
  6563   001D16                     u2387:
  6564   001D16  2EE8               	decfsz	wreg,f,c
  6565   001D18  D7FE               	bra	u2387
  6566   001D1A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6567   001D1C  D7FC               	bra	u2387
  6568   001D1E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6569   001D20  D7FA               	bra	u2387
  6570   001D22  F000               	nop	
  6571   001D24                     
  6572                           ;colour_identify.c: 59:     }
  6573   001D24  4A20               	infsnz	collect_avg_readings@i_1604^0,f,c
  6574   001D26  2A21               	incf	(collect_avg_readings@i_1604+1)^0,f,c
  6575   001D28  BE21               	btfsc	(collect_avg_readings@i_1604+1)^0,7,c
  6576   001D2A  EFA0  F00E         	goto	u1391
  6577   001D2E  5021               	movf	(collect_avg_readings@i_1604+1)^0,w,c
  6578   001D30  E109               	bnz	u1390
  6579   001D32  0E03               	movlw	3
  6580   001D34  5C20               	subwf	collect_avg_readings@i_1604^0,w,c
  6581   001D36  A0D8               	btfss	status,0,c
  6582   001D38  EFA0  F00E         	goto	u1391
  6583   001D3C  EFA2  F00E         	goto	u1390
  6584   001D40                     u1391:
  6585   001D40  EF7C  F00E         	goto	l2912
  6586   001D44                     u1390:
  6587   001D44                     
  6588                           ;colour_identify.c: 60:     *green_read = *green_read/4;
  6589   001D44  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6590   001D48  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6591   001D4C  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6592   001D50  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6593   001D54  90D8               	bcf	status,0,c
  6594   001D56  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6595   001D58  3218               	rrcf	??_collect_avg_readings^0,f,c
  6596   001D5A  90D8               	bcf	status,0,c
  6597   001D5C  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6598   001D5E  3218               	rrcf	??_collect_avg_readings^0,f,c
  6599   001D60  C014  FFD9         	movff	collect_avg_readings@green_read,fsr2l
  6600   001D64  C015  FFDA         	movff	collect_avg_readings@green_read+1,fsr2h
  6601   001D68  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6602   001D6C  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6603   001D70                     
  6604                           ;colour_identify.c: 62:     for(int i = 0; i <= 2; i++){
  6605   001D70  0E00               	movlw	0
  6606   001D72  6E23               	movwf	(collect_avg_readings@i_1605+1)^0,c
  6607   001D74  0E00               	movlw	0
  6608   001D76  6E22               	movwf	collect_avg_readings@i_1605^0,c
  6609   001D78                     l2928:
  6610                           
  6611                           ;colour_identify.c: 63:         *blue_read += color_read_Blue();
  6612   001D78  EC6A  F017         	call	_color_read_Blue	;wreg free
  6613   001D7C  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6614   001D80  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6615   001D84  5009               	movf	?_color_read_Blue^0,w,c
  6616   001D86  26DE               	addwf	postinc2,f,c
  6617   001D88  500A               	movf	(?_color_read_Blue+1)^0,w,c
  6618   001D8A  22DD               	addwfc	postdec2,f,c
  6619   001D8C                     
  6620                           ;colour_identify.c: 64:         _delay((unsigned long)((200)*(64000000/4000.0)));
  6621   001D8C  0E11               	movlw	17
  6622   001D8E  6E19               	movwf	(??_collect_avg_readings+1)^0,c
  6623   001D90  0E3C               	movlw	60
  6624   001D92  6E18               	movwf	??_collect_avg_readings^0,c
  6625   001D94  0ECB               	movlw	203
  6626   001D96                     u2397:
  6627   001D96  2EE8               	decfsz	wreg,f,c
  6628   001D98  D7FE               	bra	u2397
  6629   001D9A  2E18               	decfsz	??_collect_avg_readings^0,f,c
  6630   001D9C  D7FC               	bra	u2397
  6631   001D9E  2E19               	decfsz	(??_collect_avg_readings+1)^0,f,c
  6632   001DA0  D7FA               	bra	u2397
  6633   001DA2  F000               	nop	
  6634   001DA4                     
  6635                           ;colour_identify.c: 65:     }
  6636   001DA4  4A22               	infsnz	collect_avg_readings@i_1605^0,f,c
  6637   001DA6  2A23               	incf	(collect_avg_readings@i_1605+1)^0,f,c
  6638   001DA8  BE23               	btfsc	(collect_avg_readings@i_1605+1)^0,7,c
  6639   001DAA  EFE0  F00E         	goto	u1401
  6640   001DAE  5023               	movf	(collect_avg_readings@i_1605+1)^0,w,c
  6641   001DB0  E109               	bnz	u1400
  6642   001DB2  0E03               	movlw	3
  6643   001DB4  5C22               	subwf	collect_avg_readings@i_1605^0,w,c
  6644   001DB6  A0D8               	btfss	status,0,c
  6645   001DB8  EFE0  F00E         	goto	u1401
  6646   001DBC  EFE2  F00E         	goto	u1400
  6647   001DC0                     u1401:
  6648   001DC0  EFBC  F00E         	goto	l2928
  6649   001DC4                     u1400:
  6650   001DC4                     
  6651                           ;colour_identify.c: 66:     *blue_read = *blue_read/4;
  6652   001DC4  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6653   001DC8  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6654   001DCC  CFDE F018          	movff	postinc2,??_collect_avg_readings
  6655   001DD0  CFDD F019          	movff	postdec2,??_collect_avg_readings+1
  6656   001DD4  90D8               	bcf	status,0,c
  6657   001DD6  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6658   001DD8  3218               	rrcf	??_collect_avg_readings^0,f,c
  6659   001DDA  90D8               	bcf	status,0,c
  6660   001DDC  3219               	rrcf	(??_collect_avg_readings+1)^0,f,c
  6661   001DDE  3218               	rrcf	??_collect_avg_readings^0,f,c
  6662   001DE0  C016  FFD9         	movff	collect_avg_readings@blue_read,fsr2l
  6663   001DE4  C017  FFDA         	movff	collect_avg_readings@blue_read+1,fsr2h
  6664   001DE8  C018  FFDE         	movff	??_collect_avg_readings,postinc2
  6665   001DEC  C019  FFDD         	movff	??_collect_avg_readings+1,postdec2
  6666   001DF0  0012               	return		;funcret
  6667   001DF2                     __end_of_collect_avg_readings:
  6668                           	callstack 0
  6669                           
  6670 ;; *************** function _color_read_Red *****************
  6671 ;; Defined at:
  6672 ;;		line 29 in file "color.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  tmp             2   13[COMRAM] unsigned int 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  2    8[COMRAM] unsigned int 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6688 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6690 ;;Total ram usage:        7 bytes
  6691 ;; Hardware stack levels used: 1
  6692 ;; Hardware stack levels required when called: 6
  6693 ;; This function calls:
  6694 ;;		_I2C_2_Master_Read
  6695 ;;		_I2C_2_Master_RepStart
  6696 ;;		_I2C_2_Master_Start
  6697 ;;		_I2C_2_Master_Stop
  6698 ;;		_I2C_2_Master_Write
  6699 ;; This function is called by:
  6700 ;;		_collect_avg_readings
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text33
  6705   002DE4                     __ptext33:
  6706                           	callstack 0
  6707   002DE4                     _color_read_Red:
  6708                           	callstack 23
  6709   002DE4                     
  6710                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  6711   002DE4  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  6712                           
  6713                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  6714   002DE8  0E52               	movlw	82
  6715   002DEA  EC06  F019         	call	_I2C_2_Master_Write
  6716                           
  6717                           ;color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  6718   002DEE  0EB6               	movlw	182
  6719   002DF0  EC06  F019         	call	_I2C_2_Master_Write
  6720                           
  6721                           ;color.c: 35:  I2C_2_Master_RepStart();
  6722   002DF4  EC12  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6723                           
  6724                           ;color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  6725   002DF8  0E53               	movlw	83
  6726   002DFA  EC06  F019         	call	_I2C_2_Master_Write
  6727                           
  6728                           ;color.c: 37:  tmp=I2C_2_Master_Read(1);
  6729   002DFE  0E01               	movlw	1
  6730   002E00  ECB4  F017         	call	_I2C_2_Master_Read
  6731   002E04  6E0B               	movwf	??_color_read_Red^0,c
  6732   002E06  500B               	movf	??_color_read_Red^0,w,c
  6733   002E08  6E0E               	movwf	color_read_Red@tmp^0,c
  6734   002E0A  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  6735                           
  6736                           ;color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6737   002E0C  0E00               	movlw	0
  6738   002E0E  ECB4  F017         	call	_I2C_2_Master_Read
  6739   002E12  6E0B               	movwf	??_color_read_Red^0,c
  6740   002E14  500B               	movf	??_color_read_Red^0,w,c
  6741   002E16  6E0D               	movwf	(??_color_read_Red+2)^0,c
  6742   002E18  6A0C               	clrf	(??_color_read_Red+1)^0,c
  6743   002E1A  500E               	movf	color_read_Red@tmp^0,w,c
  6744   002E1C  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  6745   002E1E  6E0E               	movwf	color_read_Red@tmp^0,c
  6746   002E20  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  6747   002E22  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  6748   002E24  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  6749                           
  6750                           ;color.c: 39:  I2C_2_Master_Stop();
  6751   002E26  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  6752   002E2A                     
  6753                           ;color.c: 40:  return tmp;
  6754   002E2A  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  6755   002E2E  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6756   002E32  0012               	return		;funcret
  6757   002E34                     __end_of_color_read_Red:
  6758                           	callstack 0
  6759                           
  6760 ;; *************** function _color_read_Green *****************
  6761 ;; Defined at:
  6762 ;;		line 43 in file "color.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;		None
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  tmp             2   13[COMRAM] unsigned int 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  2    8[COMRAM] unsigned int 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6776 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6778 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6779 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6780 ;;Total ram usage:        7 bytes
  6781 ;; Hardware stack levels used: 1
  6782 ;; Hardware stack levels required when called: 6
  6783 ;; This function calls:
  6784 ;;		_I2C_2_Master_Read
  6785 ;;		_I2C_2_Master_RepStart
  6786 ;;		_I2C_2_Master_Start
  6787 ;;		_I2C_2_Master_Stop
  6788 ;;		_I2C_2_Master_Write
  6789 ;; This function is called by:
  6790 ;;		_collect_avg_readings
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text34
  6795   002E34                     __ptext34:
  6796                           	callstack 0
  6797   002E34                     _color_read_Green:
  6798                           	callstack 23
  6799   002E34                     
  6800                           ;color.c: 45:  unsigned int tmp;;color.c: 46:  I2C_2_Master_Start();
  6801   002E34  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  6802                           
  6803                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  6804   002E38  0E52               	movlw	82
  6805   002E3A  EC06  F019         	call	_I2C_2_Master_Write
  6806                           
  6807                           ;color.c: 48:  I2C_2_Master_Write(0xA0 | 0x18);
  6808   002E3E  0EB8               	movlw	184
  6809   002E40  EC06  F019         	call	_I2C_2_Master_Write
  6810                           
  6811                           ;color.c: 49:  I2C_2_Master_RepStart();
  6812   002E44  EC12  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6813                           
  6814                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x01);
  6815   002E48  0E53               	movlw	83
  6816   002E4A  EC06  F019         	call	_I2C_2_Master_Write
  6817                           
  6818                           ;color.c: 51:  tmp=I2C_2_Master_Read(1);
  6819   002E4E  0E01               	movlw	1
  6820   002E50  ECB4  F017         	call	_I2C_2_Master_Read
  6821   002E54  6E0B               	movwf	??_color_read_Green^0,c
  6822   002E56  500B               	movf	??_color_read_Green^0,w,c
  6823   002E58  6E0E               	movwf	color_read_Green@tmp^0,c
  6824   002E5A  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  6825                           
  6826                           ;color.c: 52:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6827   002E5C  0E00               	movlw	0
  6828   002E5E  ECB4  F017         	call	_I2C_2_Master_Read
  6829   002E62  6E0B               	movwf	??_color_read_Green^0,c
  6830   002E64  500B               	movf	??_color_read_Green^0,w,c
  6831   002E66  6E0D               	movwf	(??_color_read_Green+2)^0,c
  6832   002E68  6A0C               	clrf	(??_color_read_Green+1)^0,c
  6833   002E6A  500E               	movf	color_read_Green@tmp^0,w,c
  6834   002E6C  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  6835   002E6E  6E0E               	movwf	color_read_Green@tmp^0,c
  6836   002E70  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  6837   002E72  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  6838   002E74  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  6839                           
  6840                           ;color.c: 53:  I2C_2_Master_Stop();
  6841   002E76  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  6842   002E7A                     
  6843                           ;color.c: 54:  return tmp;
  6844   002E7A  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  6845   002E7E  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6846   002E82  0012               	return		;funcret
  6847   002E84                     __end_of_color_read_Green:
  6848                           	callstack 0
  6849                           
  6850 ;; *************** function _color_read_Clear *****************
  6851 ;; Defined at:
  6852 ;;		line 71 in file "color.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  tmp             2   13[COMRAM] unsigned int 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  2    8[COMRAM] unsigned int 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6868 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6869 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6870 ;;Total ram usage:        7 bytes
  6871 ;; Hardware stack levels used: 1
  6872 ;; Hardware stack levels required when called: 6
  6873 ;; This function calls:
  6874 ;;		_I2C_2_Master_Read
  6875 ;;		_I2C_2_Master_RepStart
  6876 ;;		_I2C_2_Master_Start
  6877 ;;		_I2C_2_Master_Stop
  6878 ;;		_I2C_2_Master_Write
  6879 ;; This function is called by:
  6880 ;;		_main
  6881 ;;		_clear_read_calibration
  6882 ;;		_collect_avg_readings
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text35
  6887   002E84                     __ptext35:
  6888                           	callstack 0
  6889   002E84                     _color_read_Clear:
  6890                           	callstack 24
  6891   002E84                     
  6892                           ;color.c: 73:  unsigned int tmp;;color.c: 74:  I2C_2_Master_Start();
  6893   002E84  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  6894                           
  6895                           ;color.c: 75:  I2C_2_Master_Write(0x52 | 0x00);
  6896   002E88  0E52               	movlw	82
  6897   002E8A  EC06  F019         	call	_I2C_2_Master_Write
  6898                           
  6899                           ;color.c: 76:  I2C_2_Master_Write(0xA0 | 0x14);
  6900   002E8E  0EB4               	movlw	180
  6901   002E90  EC06  F019         	call	_I2C_2_Master_Write
  6902                           
  6903                           ;color.c: 77:  I2C_2_Master_RepStart();
  6904   002E94  EC12  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6905                           
  6906                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x01);
  6907   002E98  0E53               	movlw	83
  6908   002E9A  EC06  F019         	call	_I2C_2_Master_Write
  6909                           
  6910                           ;color.c: 79:  tmp=I2C_2_Master_Read(1);
  6911   002E9E  0E01               	movlw	1
  6912   002EA0  ECB4  F017         	call	_I2C_2_Master_Read
  6913   002EA4  6E0B               	movwf	??_color_read_Clear^0,c
  6914   002EA6  500B               	movf	??_color_read_Clear^0,w,c
  6915   002EA8  6E0E               	movwf	color_read_Clear@tmp^0,c
  6916   002EAA  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  6917                           
  6918                           ;color.c: 80:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6919   002EAC  0E00               	movlw	0
  6920   002EAE  ECB4  F017         	call	_I2C_2_Master_Read
  6921   002EB2  6E0B               	movwf	??_color_read_Clear^0,c
  6922   002EB4  500B               	movf	??_color_read_Clear^0,w,c
  6923   002EB6  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  6924   002EB8  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  6925   002EBA  500E               	movf	color_read_Clear@tmp^0,w,c
  6926   002EBC  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  6927   002EBE  6E0E               	movwf	color_read_Clear@tmp^0,c
  6928   002EC0  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  6929   002EC2  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  6930   002EC4  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  6931                           
  6932                           ;color.c: 81:  I2C_2_Master_Stop();
  6933   002EC6  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  6934   002ECA                     
  6935                           ;color.c: 82:  return tmp;
  6936   002ECA  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  6937   002ECE  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6938   002ED2  0012               	return		;funcret
  6939   002ED4                     __end_of_color_read_Clear:
  6940                           	callstack 0
  6941                           
  6942 ;; *************** function _color_read_Blue *****************
  6943 ;; Defined at:
  6944 ;;		line 57 in file "color.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;  tmp             2   13[COMRAM] unsigned int 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  2    8[COMRAM] unsigned int 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6960 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6961 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6962 ;;Total ram usage:        7 bytes
  6963 ;; Hardware stack levels used: 1
  6964 ;; Hardware stack levels required when called: 6
  6965 ;; This function calls:
  6966 ;;		_I2C_2_Master_Read
  6967 ;;		_I2C_2_Master_RepStart
  6968 ;;		_I2C_2_Master_Start
  6969 ;;		_I2C_2_Master_Stop
  6970 ;;		_I2C_2_Master_Write
  6971 ;; This function is called by:
  6972 ;;		_collect_avg_readings
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           	psect	text36
  6977   002ED4                     __ptext36:
  6978                           	callstack 0
  6979   002ED4                     _color_read_Blue:
  6980                           	callstack 23
  6981   002ED4                     
  6982                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6983   002ED4  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  6984                           
  6985                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6986   002ED8  0E52               	movlw	82
  6987   002EDA  EC06  F019         	call	_I2C_2_Master_Write
  6988                           
  6989                           ;color.c: 62:  I2C_2_Master_Write(0xA0 | 0x1A);
  6990   002EDE  0EBA               	movlw	186
  6991   002EE0  EC06  F019         	call	_I2C_2_Master_Write
  6992                           
  6993                           ;color.c: 63:  I2C_2_Master_RepStart();
  6994   002EE4  EC12  F019         	call	_I2C_2_Master_RepStart	;wreg free
  6995                           
  6996                           ;color.c: 64:  I2C_2_Master_Write(0x52 | 0x01);
  6997   002EE8  0E53               	movlw	83
  6998   002EEA  EC06  F019         	call	_I2C_2_Master_Write
  6999                           
  7000                           ;color.c: 65:  tmp=I2C_2_Master_Read(1);
  7001   002EEE  0E01               	movlw	1
  7002   002EF0  ECB4  F017         	call	_I2C_2_Master_Read
  7003   002EF4  6E0B               	movwf	??_color_read_Blue^0,c
  7004   002EF6  500B               	movf	??_color_read_Blue^0,w,c
  7005   002EF8  6E0E               	movwf	color_read_Blue@tmp^0,c
  7006   002EFA  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  7007                           
  7008                           ;color.c: 66:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7009   002EFC  0E00               	movlw	0
  7010   002EFE  ECB4  F017         	call	_I2C_2_Master_Read
  7011   002F02  6E0B               	movwf	??_color_read_Blue^0,c
  7012   002F04  500B               	movf	??_color_read_Blue^0,w,c
  7013   002F06  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  7014   002F08  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  7015   002F0A  500E               	movf	color_read_Blue@tmp^0,w,c
  7016   002F0C  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  7017   002F0E  6E0E               	movwf	color_read_Blue@tmp^0,c
  7018   002F10  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  7019   002F12  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  7020   002F14  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  7021                           
  7022                           ;color.c: 67:  I2C_2_Master_Stop();
  7023   002F16  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  7024   002F1A                     
  7025                           ;color.c: 68:  return tmp;
  7026   002F1A  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  7027   002F1E  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  7028   002F22  0012               	return		;funcret
  7029   002F24                     __end_of_color_read_Blue:
  7030                           	callstack 0
  7031                           
  7032 ;; *************** function _I2C_2_Master_RepStart *****************
  7033 ;; Defined at:
  7034 ;;		line 33 in file "i2c.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;		None
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7052 ;;Total ram usage:        0 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 5
  7055 ;; This function calls:
  7056 ;;		_I2C_2_Master_Idle
  7057 ;; This function is called by:
  7058 ;;		_color_read_Red
  7059 ;;		_color_read_Green
  7060 ;;		_color_read_Blue
  7061 ;;		_color_read_Clear
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text37
  7066   003224                     __ptext37:
  7067                           	callstack 0
  7068   003224                     _I2C_2_Master_RepStart:
  7069                           	callstack 24
  7070   003224                     
  7071                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7072   003224  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7073   003228                     
  7074                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7075   003228  010E               	movlb	14	; () banked
  7076   00322A  83DA               	bsf	218,1,b	;volatile
  7077   00322C                     
  7078                           ; BSR set to: 14
  7079   00322C  0012               	return		;funcret
  7080   00322E                     __end_of_I2C_2_Master_RepStart:
  7081                           	callstack 0
  7082                           
  7083 ;; *************** function _I2C_2_Master_Read *****************
  7084 ;; Defined at:
  7085 ;;		line 51 in file "i2c.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  ack             1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  ack             1    6[COMRAM] unsigned char 
  7090 ;;  tmp             1    7[COMRAM] unsigned char 
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      unsigned char 
  7093 ;; Registers used:
  7094 ;;		wreg, status,2, status,0, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7103 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7104 ;;Total ram usage:        3 bytes
  7105 ;; Hardware stack levels used: 1
  7106 ;; Hardware stack levels required when called: 5
  7107 ;; This function calls:
  7108 ;;		_I2C_2_Master_Idle
  7109 ;; This function is called by:
  7110 ;;		_color_read_Red
  7111 ;;		_color_read_Green
  7112 ;;		_color_read_Blue
  7113 ;;		_color_read_Clear
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text38
  7118   002F68                     __ptext38:
  7119                           	callstack 0
  7120   002F68                     _I2C_2_Master_Read:
  7121                           	callstack 24
  7122                           
  7123                           ; BSR set to: 14
  7124                           ;incstack = 0
  7125                           ;I2C_2_Master_Read@ack stored from wreg
  7126   002F68  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  7127   002F6A                     
  7128                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7129   002F6A  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7130   002F6E                     
  7131                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7132   002F6E  010E               	movlb	14	; () banked
  7133   002F70  87DA               	bsf	218,3,b	;volatile
  7134                           
  7135                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7136   002F72  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7137   002F76                     
  7138                           ;i2c.c: 57:   tmp = SSP2BUF;
  7139   002F76  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  7140                           
  7141                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7142   002F7A  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7143   002F7E                     
  7144                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7145   002F7E  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  7146   002F80  B4D8               	btfsc	status,2,c
  7147   002F82  EFC5  F017         	goto	u1201
  7148   002F86  EFC9  F017         	goto	u1200
  7149   002F8A                     u1201:
  7150   002F8A  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7151   002F8C  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  7152   002F8E  EFCA  F017         	goto	u1218
  7153   002F92                     u1200:
  7154   002F92  6A06               	clrf	??_I2C_2_Master_Read^0,c
  7155   002F94                     u1218:
  7156   002F94  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  7157   002F96  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  7158   002F98  010E               	movlb	14	; () banked
  7159   002F9A  51DA               	movf	218,w,b	;volatile
  7160   002F9C  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7161   002F9E  0BDF               	andlw	-33
  7162   002FA0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  7163   002FA2  6FDA               	movwf	218,b	;volatile
  7164   002FA4                     
  7165                           ; BSR set to: 14
  7166                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7167   002FA4  89DA               	bsf	218,4,b	;volatile
  7168   002FA6                     
  7169                           ; BSR set to: 14
  7170                           ;i2c.c: 61:   return tmp;
  7171   002FA6  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  7172   002FA8                     
  7173                           ; BSR set to: 14
  7174   002FA8  0012               	return		;funcret
  7175   002FAA                     __end_of_I2C_2_Master_Read:
  7176                           	callstack 0
  7177                           
  7178 ;; *************** function _LEDSon_init *****************
  7179 ;; Defined at:
  7180 ;;		line 18 in file "LEDsOn.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;		None
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;		None
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  1    wreg      void 
  7187 ;; Registers used:
  7188 ;;		None
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7198 ;;Total ram usage:        0 bytes
  7199 ;; Hardware stack levels used: 1
  7200 ;; Hardware stack levels required when called: 4
  7201 ;; This function calls:
  7202 ;;		Nothing
  7203 ;; This function is called by:
  7204 ;;		_main
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           	psect	text39
  7209   003156                     __ptext39:
  7210                           	callstack 0
  7211   003156                     _LEDSon_init:
  7212                           	callstack 26
  7213   003156                     
  7214                           ;LEDsOn.c: 21:     TRISHbits.TRISH1 = 0;
  7215   003156  9288               	bcf	136,1,c	;volatile
  7216                           
  7217                           ;LEDsOn.c: 22:     TRISHbits.TRISH0 = 0;
  7218   003158  9088               	bcf	136,0,c	;volatile
  7219                           
  7220                           ;LEDsOn.c: 23:     TRISDbits.TRISD4 = 0;
  7221   00315A  9884               	bcf	132,4,c	;volatile
  7222                           
  7223                           ;LEDsOn.c: 24:     TRISDbits.TRISD3 = 0;
  7224   00315C  9684               	bcf	132,3,c	;volatile
  7225                           
  7226                           ;LEDsOn.c: 25:     TRISFbits.TRISF0 = 0;
  7227   00315E  9086               	bcf	134,0,c	;volatile
  7228                           
  7229                           ;LEDsOn.c: 28:     TRISGbits.TRISG1 = 0;
  7230   003160  9287               	bcf	135,1,c	;volatile
  7231                           
  7232                           ;LEDsOn.c: 29:     TRISFbits.TRISF7 = 0;
  7233   003162  9E86               	bcf	134,7,c	;volatile
  7234                           
  7235                           ;LEDsOn.c: 30:     TRISAbits.TRISA4 = 0;
  7236   003164  9881               	bcf	129,4,c	;volatile
  7237                           
  7238                           ;LEDsOn.c: 32:     LATFbits.LATF7 = 1;
  7239   003166  8E7E               	bsf	126,7,c	;volatile
  7240                           
  7241                           ;LEDsOn.c: 33:     LATGbits.LATG1 = 1;
  7242   003168  827F               	bsf	127,1,c	;volatile
  7243                           
  7244                           ;LEDsOn.c: 34:     LATAbits.LATA4 = 1;
  7245   00316A  8879               	bsf	121,4,c	;volatile
  7246                           
  7247                           ;LEDsOn.c: 37:     LATDbits.LATD4 = 0;
  7248   00316C  987C               	bcf	124,4,c	;volatile
  7249                           
  7250                           ;LEDsOn.c: 38:     LATHbits.LATH1 = 0;
  7251   00316E  9280               	bcf	128,1,c	;volatile
  7252                           
  7253                           ;LEDsOn.c: 39:     LATFbits.LATF0 = 0;
  7254   003170  907E               	bcf	126,0,c	;volatile
  7255                           
  7256                           ;LEDsOn.c: 40:     LATHbits.LATH0 = 0;
  7257   003172  9080               	bcf	128,0,c	;volatile
  7258                           
  7259                           ;LEDsOn.c: 41:     LATDbits.LATD3 = 0;
  7260   003174  967C               	bcf	124,3,c	;volatile
  7261   003176  0012               	return		;funcret
  7262   003178                     __end_of_LEDSon_init:
  7263                           	callstack 0
  7264                           
  7265 ;; *************** function _Interrupts_init *****************
  7266 ;; Defined at:
  7267 ;;		line 7 in file "interrupts.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used: 1
  7287 ;; Hardware stack levels required when called: 8
  7288 ;; This function calls:
  7289 ;;		_enable_color_interrupt
  7290 ;;		_set_interrupt_threshold
  7291 ;; This function is called by:
  7292 ;;		_main
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text40
  7297   002FEA                     __ptext40:
  7298                           	callstack 0
  7299   002FEA                     _Interrupts_init:
  7300                           	callstack 22
  7301   002FEA                     
  7302                           ;interrupts.c: 9:     enable_color_interrupt();
  7303   002FEA  ECFE  F018         	call	_enable_color_interrupt	;wreg free
  7304                           
  7305                           ;interrupts.c: 10:     set_interrupt_threshold(1, 2000, 0b0100);
  7306   002FEE  0E00               	movlw	0
  7307   002FF0  6E0A               	movwf	(set_interrupt_threshold@AILT+1)^0,c
  7308   002FF2  0E01               	movlw	1
  7309   002FF4  6E09               	movwf	set_interrupt_threshold@AILT^0,c
  7310   002FF6  0E07               	movlw	7
  7311   002FF8  6E0C               	movwf	(set_interrupt_threshold@AIHT+1)^0,c
  7312   002FFA  0ED0               	movlw	208
  7313   002FFC  6E0B               	movwf	set_interrupt_threshold@AIHT^0,c
  7314   002FFE  0E00               	movlw	0
  7315   003000  6E0E               	movwf	(set_interrupt_threshold@persistence+1)^0,c
  7316   003002  0E04               	movlw	4
  7317   003004  6E0D               	movwf	set_interrupt_threshold@persistence^0,c
  7318   003006  EC6B  F016         	call	_set_interrupt_threshold	;wreg free
  7319   00300A                     
  7320                           ;interrupts.c: 12:     TRISBbits.TRISB1 = 0;
  7321   00300A  9282               	bcf	130,1,c	;volatile
  7322   00300C                     
  7323                           ;interrupts.c: 13:     ANSELBbits.ANSELB1 = 0;
  7324   00300C  010E               	movlb	14	; () banked
  7325   00300E  939A               	bcf	154,1,b	;volatile
  7326   003010                     
  7327                           ; BSR set to: 14
  7328                           ;interrupts.c: 14:     INT1PPS=0x09;
  7329   003010  0E09               	movlw	9
  7330   003012  010D               	movlb	13	; () banked
  7331   003014  6FF1               	movwf	241,b	;volatile
  7332   003016                     
  7333                           ; BSR set to: 13
  7334                           ;interrupts.c: 15:     PIE0bits.INT1IE = 1;
  7335   003016  010E               	movlb	14	; () banked
  7336   003018  8329               	bsf	41,1,b	;volatile
  7337   00301A                     
  7338                           ; BSR set to: 14
  7339                           ;interrupts.c: 16:     IPR0bits.INT1IP = 1;
  7340   00301A  831F               	bsf	31,1,b	;volatile
  7341   00301C                     
  7342                           ; BSR set to: 14
  7343                           ;interrupts.c: 17:     INTCONbits.INT1EDG = 0;
  7344   00301C  92F2               	bcf	242,1,c	;volatile
  7345   00301E                     
  7346                           ; BSR set to: 14
  7347                           ;interrupts.c: 18:     INTCONbits.PEIE=1;
  7348   00301E  8CF2               	bsf	242,6,c	;volatile
  7349   003020                     
  7350                           ; BSR set to: 14
  7351                           ;interrupts.c: 19:     INTCONbits.IPEN = 1;
  7352   003020  8AF2               	bsf	242,5,c	;volatile
  7353   003022                     
  7354                           ; BSR set to: 14
  7355                           ;interrupts.c: 20:     INTCONbits.GIEL = 1;
  7356   003022  8CF2               	bsf	242,6,c	;volatile
  7357   003024                     
  7358                           ; BSR set to: 14
  7359                           ;interrupts.c: 21:     INTCONbits.GIEH=1;}
  7360   003024  8EF2               	bsf	242,7,c	;volatile
  7361   003026                     
  7362                           ; BSR set to: 14
  7363   003026  0012               	return		;funcret
  7364   003028                     __end_of_Interrupts_init:
  7365                           	callstack 0
  7366                           
  7367 ;; *************** function _set_interrupt_threshold *****************
  7368 ;; Defined at:
  7369 ;;		line 43 in file "interrupts.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  AILT            2    8[COMRAM] unsigned int 
  7372 ;;  AIHT            2   10[COMRAM] unsigned int 
  7373 ;;  persistence     2   12[COMRAM] unsigned int 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      void 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7385 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;Total ram usage:        8 bytes
  7390 ;; Hardware stack levels used: 1
  7391 ;; Hardware stack levels required when called: 7
  7392 ;; This function calls:
  7393 ;;		_color_writetoaddr
  7394 ;; This function is called by:
  7395 ;;		_Interrupts_init
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text41
  7400   002CD6                     __ptext41:
  7401                           	callstack 0
  7402   002CD6                     _set_interrupt_threshold:
  7403                           	callstack 22
  7404   002CD6                     
  7405                           ;interrupts.c: 45:     color_writetoaddr(0x0C, persistence);
  7406   002CD6  C00D  F007         	movff	set_interrupt_threshold@persistence,color_writetoaddr@value
  7407   002CDA  0E0C               	movlw	12
  7408   002CDC  ECCC  F018         	call	_color_writetoaddr
  7409                           
  7410                           ;interrupts.c: 46:     color_writetoaddr(0x05, AILT >> 8);
  7411   002CE0  500A               	movf	(set_interrupt_threshold@AILT+1)^0,w,c
  7412   002CE2  6E07               	movwf	color_writetoaddr@value^0,c
  7413   002CE4  0E05               	movlw	5
  7414   002CE6  ECCC  F018         	call	_color_writetoaddr
  7415   002CEA                     
  7416                           ;interrupts.c: 47:     color_writetoaddr(0x04, AILT && 0b0000000011111111);
  7417   002CEA  0E00               	movlw	0
  7418   002CEC  6E0F               	movwf	_set_interrupt_threshold$2093^0,c
  7419   002CEE  5009               	movf	set_interrupt_threshold@AILT^0,w,c
  7420   002CF0  100A               	iorwf	(set_interrupt_threshold@AILT+1)^0,w,c
  7421   002CF2  B4D8               	btfsc	status,2,c
  7422   002CF4  EF7E  F016         	goto	u1461
  7423   002CF8  EF80  F016         	goto	u1460
  7424   002CFC                     u1461:
  7425   002CFC  EF82  F016         	goto	l3140
  7426   002D00                     u1460:
  7427   002D00  0E01               	movlw	1
  7428   002D02  6E0F               	movwf	_set_interrupt_threshold$2093^0,c
  7429   002D04                     l3140:
  7430   002D04  C00F  F007         	movff	_set_interrupt_threshold$2093,color_writetoaddr@value
  7431   002D08  0E04               	movlw	4
  7432   002D0A  ECCC  F018         	call	_color_writetoaddr
  7433   002D0E                     
  7434                           ;interrupts.c: 48:     color_writetoaddr(0x07, AIHT >> 8);
  7435   002D0E  500C               	movf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7436   002D10  6E07               	movwf	color_writetoaddr@value^0,c
  7437   002D12  0E07               	movlw	7
  7438   002D14  ECCC  F018         	call	_color_writetoaddr
  7439                           
  7440                           ;interrupts.c: 49:     color_writetoaddr(0x06, AIHT && 0b0000000011111111);
  7441   002D18  0E00               	movlw	0
  7442   002D1A  6E10               	movwf	_set_interrupt_threshold$2094^0,c
  7443   002D1C  500B               	movf	set_interrupt_threshold@AIHT^0,w,c
  7444   002D1E  100C               	iorwf	(set_interrupt_threshold@AIHT+1)^0,w,c
  7445   002D20  B4D8               	btfsc	status,2,c
  7446   002D22  EF95  F016         	goto	u1471
  7447   002D26  EF97  F016         	goto	u1470
  7448   002D2A                     u1471:
  7449   002D2A  EF99  F016         	goto	l3148
  7450   002D2E                     u1470:
  7451   002D2E  0E01               	movlw	1
  7452   002D30  6E10               	movwf	_set_interrupt_threshold$2094^0,c
  7453   002D32                     l3148:
  7454   002D32  C010  F007         	movff	_set_interrupt_threshold$2094,color_writetoaddr@value
  7455   002D36  0E06               	movlw	6
  7456   002D38  ECCC  F018         	call	_color_writetoaddr
  7457   002D3C  0012               	return		;funcret
  7458   002D3E                     __end_of_set_interrupt_threshold:
  7459                           	callstack 0
  7460                           
  7461 ;; *************** function _enable_color_interrupt *****************
  7462 ;; Defined at:
  7463 ;;		line 38 in file "interrupts.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used: 1
  7483 ;; Hardware stack levels required when called: 7
  7484 ;; This function calls:
  7485 ;;		_clear_interrupt_flag
  7486 ;;		_color_writetoaddr
  7487 ;; This function is called by:
  7488 ;;		_Interrupts_init
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text42
  7493   0031FC                     __ptext42:
  7494                           	callstack 0
  7495   0031FC                     _enable_color_interrupt:
  7496                           	callstack 22
  7497   0031FC                     
  7498                           ;interrupts.c: 39:     clear_interrupt_flag();
  7499   0031FC  ECE8  F018         	call	_clear_interrupt_flag	;wreg free
  7500                           
  7501                           ;interrupts.c: 40:  color_writetoaddr(0x00, 0b10011);
  7502   003200  0E13               	movlw	19
  7503   003202  6E07               	movwf	color_writetoaddr@value^0,c
  7504   003204  0E00               	movlw	0
  7505   003206  ECCC  F018         	call	_color_writetoaddr
  7506   00320A  0012               	return		;funcret
  7507   00320C                     __end_of_enable_color_interrupt:
  7508                           	callstack 0
  7509                           
  7510 ;; *************** function _color_writetoaddr *****************
  7511 ;; Defined at:
  7512 ;;		line 21 in file "color.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  address         1    wreg     unsigned char 
  7515 ;;  value           1    6[COMRAM] unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  address         1    7[COMRAM] unsigned char 
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, status,2, status,0, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7527 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used: 1
  7533 ;; Hardware stack levels required when called: 6
  7534 ;; This function calls:
  7535 ;;		_I2C_2_Master_Start
  7536 ;;		_I2C_2_Master_Stop
  7537 ;;		_I2C_2_Master_Write
  7538 ;; This function is called by:
  7539 ;;		_color_click_init
  7540 ;;		_enable_color_interrupt
  7541 ;;		_set_interrupt_threshold
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text43
  7546   003198                     __ptext43:
  7547                           	callstack 0
  7548   003198                     _color_writetoaddr:
  7549                           	callstack 23
  7550                           
  7551                           ;incstack = 0
  7552                           ;color_writetoaddr@address stored from wreg
  7553   003198  6E08               	movwf	color_writetoaddr@address^0,c
  7554   00319A                     
  7555                           ;color.c: 22:     I2C_2_Master_Start();
  7556   00319A  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  7557                           
  7558                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  7559   00319E  0E52               	movlw	82
  7560   0031A0  EC06  F019         	call	_I2C_2_Master_Write
  7561                           
  7562                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  7563   0031A4  5008               	movf	color_writetoaddr@address^0,w,c
  7564   0031A6  0980               	iorlw	128
  7565   0031A8  EC06  F019         	call	_I2C_2_Master_Write
  7566                           
  7567                           ;color.c: 25:     I2C_2_Master_Write(value);
  7568   0031AC  5007               	movf	color_writetoaddr@value^0,w,c
  7569   0031AE  EC06  F019         	call	_I2C_2_Master_Write
  7570                           
  7571                           ;color.c: 26:     I2C_2_Master_Stop();
  7572   0031B2  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  7573   0031B6  0012               	return		;funcret
  7574   0031B8                     __end_of_color_writetoaddr:
  7575                           	callstack 0
  7576                           
  7577 ;; *************** function _clear_interrupt_flag *****************
  7578 ;; Defined at:
  7579 ;;		line 52 in file "interrupts.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;		None
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;		None
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      void 
  7586 ;; Registers used:
  7587 ;;		wreg, status,2, status,0, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 0/0
  7590 ;;		On exit  : 0/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;Total ram usage:        0 bytes
  7598 ;; Hardware stack levels used: 1
  7599 ;; Hardware stack levels required when called: 6
  7600 ;; This function calls:
  7601 ;;		_I2C_2_Master_Start
  7602 ;;		_I2C_2_Master_Stop
  7603 ;;		_I2C_2_Master_Write
  7604 ;; This function is called by:
  7605 ;;		_enable_color_interrupt
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text44
  7610   0031D0                     __ptext44:
  7611                           	callstack 0
  7612   0031D0                     _clear_interrupt_flag:
  7613                           	callstack 22
  7614   0031D0                     
  7615                           ;interrupts.c: 53:     I2C_2_Master_Start();
  7616   0031D0  EC1C  F019         	call	_I2C_2_Master_Start	;wreg free
  7617                           
  7618                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  7619   0031D4  0E52               	movlw	82
  7620   0031D6  EC06  F019         	call	_I2C_2_Master_Write
  7621                           
  7622                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  7623   0031DA  0EE6               	movlw	230
  7624   0031DC  EC06  F019         	call	_I2C_2_Master_Write
  7625                           
  7626                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  7627   0031E0  EC17  F019         	call	_I2C_2_Master_Stop	;wreg free
  7628   0031E4  0012               	return		;funcret
  7629   0031E6                     __end_of_clear_interrupt_flag:
  7630                           	callstack 0
  7631                           
  7632 ;; *************** function _I2C_2_Master_Write *****************
  7633 ;; Defined at:
  7634 ;;		line 45 in file "i2c.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  data_byte       1    wreg     unsigned char 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  data_byte       1    5[COMRAM] unsigned char 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      void 
  7641 ;; Registers used:
  7642 ;;		wreg, status,2, status,0, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;Total ram usage:        1 bytes
  7653 ;; Hardware stack levels used: 1
  7654 ;; Hardware stack levels required when called: 5
  7655 ;; This function calls:
  7656 ;;		_I2C_2_Master_Idle
  7657 ;; This function is called by:
  7658 ;;		_color_writetoaddr
  7659 ;;		_color_read_Red
  7660 ;;		_color_read_Green
  7661 ;;		_color_read_Blue
  7662 ;;		_color_read_Clear
  7663 ;;		_clear_interrupt_flag
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text45
  7668   00320C                     __ptext45:
  7669                           	callstack 0
  7670   00320C                     _I2C_2_Master_Write:
  7671                           	callstack 24
  7672                           
  7673                           ;incstack = 0
  7674                           ;I2C_2_Master_Write@data_byte stored from wreg
  7675   00320C  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  7676   00320E                     
  7677                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7678   00320E  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7679   003212                     
  7680                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7681   003212  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  7682   003216  0012               	return		;funcret
  7683   003218                     __end_of_I2C_2_Master_Write:
  7684                           	callstack 0
  7685                           
  7686 ;; *************** function _I2C_2_Master_Stop *****************
  7687 ;; Defined at:
  7688 ;;		line 39 in file "i2c.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used: 1
  7708 ;; Hardware stack levels required when called: 5
  7709 ;; This function calls:
  7710 ;;		_I2C_2_Master_Idle
  7711 ;; This function is called by:
  7712 ;;		_color_writetoaddr
  7713 ;;		_color_read_Red
  7714 ;;		_color_read_Green
  7715 ;;		_color_read_Blue
  7716 ;;		_color_read_Clear
  7717 ;;		_clear_interrupt_flag
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text46
  7722   00322E                     __ptext46:
  7723                           	callstack 0
  7724   00322E                     _I2C_2_Master_Stop:
  7725                           	callstack 24
  7726   00322E                     
  7727                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7728   00322E  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7729   003232                     
  7730                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7731   003232  010E               	movlb	14	; () banked
  7732   003234  85DA               	bsf	218,2,b	;volatile
  7733   003236                     
  7734                           ; BSR set to: 14
  7735   003236  0012               	return		;funcret
  7736   003238                     __end_of_I2C_2_Master_Stop:
  7737                           	callstack 0
  7738                           
  7739 ;; *************** function _I2C_2_Master_Start *****************
  7740 ;; Defined at:
  7741 ;;		line 27 in file "i2c.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7759 ;;Total ram usage:        0 bytes
  7760 ;; Hardware stack levels used: 1
  7761 ;; Hardware stack levels required when called: 5
  7762 ;; This function calls:
  7763 ;;		_I2C_2_Master_Idle
  7764 ;; This function is called by:
  7765 ;;		_color_writetoaddr
  7766 ;;		_color_read_Red
  7767 ;;		_color_read_Green
  7768 ;;		_color_read_Blue
  7769 ;;		_color_read_Clear
  7770 ;;		_clear_interrupt_flag
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           	psect	text47
  7775   003238                     __ptext47:
  7776                           	callstack 0
  7777   003238                     _I2C_2_Master_Start:
  7778                           	callstack 24
  7779   003238                     
  7780                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7781   003238  EC70  F018         	call	_I2C_2_Master_Idle	;wreg free
  7782   00323C                     
  7783                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7784   00323C  010E               	movlb	14	; () banked
  7785   00323E  81DA               	bsf	218,0,b	;volatile
  7786   003240                     
  7787                           ; BSR set to: 14
  7788   003240  0012               	return		;funcret
  7789   003242                     __end_of_I2C_2_Master_Start:
  7790                           	callstack 0
  7791                           
  7792 ;; *************** function _I2C_2_Master_Idle *****************
  7793 ;; Defined at:
  7794 ;;		line 22 in file "i2c.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, status,0
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7812 ;;Total ram usage:        1 bytes
  7813 ;; Hardware stack levels used: 1
  7814 ;; Hardware stack levels required when called: 4
  7815 ;; This function calls:
  7816 ;;		Nothing
  7817 ;; This function is called by:
  7818 ;;		_I2C_2_Master_Start
  7819 ;;		_I2C_2_Master_RepStart
  7820 ;;		_I2C_2_Master_Stop
  7821 ;;		_I2C_2_Master_Write
  7822 ;;		_I2C_2_Master_Read
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text48
  7827   0030E0                     __ptext48:
  7828                           	callstack 0
  7829   0030E0                     _I2C_2_Master_Idle:
  7830                           	callstack 24
  7831   0030E0                     l145:
  7832   0030E0  010E               	movlb	14	; () banked
  7833   0030E2  B5D8               	btfsc	216,2,b	;volatile
  7834   0030E4  EF76  F018         	goto	u1051
  7835   0030E8  EF78  F018         	goto	u1050
  7836   0030EC                     u1051:
  7837   0030EC  EF70  F018         	goto	l145
  7838   0030F0                     u1050:
  7839   0030F0                     
  7840                           ; BSR set to: 14
  7841   0030F0  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  7842   0030F4  0E1F               	movlw	31
  7843   0030F6  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  7844   0030F8  A4D8               	btfss	status,2,c
  7845   0030FA  EF81  F018         	goto	u1061
  7846   0030FE  EF83  F018         	goto	u1060
  7847   003102                     u1061:
  7848   003102  EF70  F018         	goto	l145
  7849   003106                     u1060:
  7850   003106                     
  7851                           ; BSR set to: 14
  7852   003106  0012               	return		;funcret
  7853   003108                     __end_of_I2C_2_Master_Idle:
  7854                           	callstack 0
  7855                           
  7856 ;; *************** function _HighISR *****************
  7857 ;; Defined at:
  7858 ;;		line 23 in file "interrupts.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg, status,2, status,0, cstack
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7874 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7875 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7876 ;;Total ram usage:        2 bytes
  7877 ;; Hardware stack levels used: 1
  7878 ;; Hardware stack levels required when called: 3
  7879 ;; This function calls:
  7880 ;;		i2_clear_interrupt_flag
  7881 ;; This function is called by:
  7882 ;;		Interrupt level 2
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	intcode
  7887   000008                     __pintcode:
  7888                           	callstack 0
  7889   000008                     _HighISR:
  7890                           	callstack 18
  7891                           
  7892                           ; BSR set to: 14
  7893                           ;incstack = 0
  7894   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7895   00000A                     
  7896                           ;interrupts.c: 26:     if(PIR0bits.INT1IF == 1&& response_in_progress == 0) {
  7897   00000A  010E               	movlb	14	; () banked
  7898   00000C  A333               	btfss	51,1,b	;volatile
  7899   00000E  EF0B  F000         	goto	i2u161_41
  7900   000012  EF0D  F000         	goto	i2u161_40
  7901   000016                     i2u161_41:
  7902   000016  EF39  F000         	goto	i2l516
  7903   00001A                     i2u161_40:
  7904   00001A                     
  7905                           ; BSR set to: 14
  7906   00001A  0100               	movlb	0	; () banked
  7907   00001C  51F4               	movf	_response_in_progress& (0+255),w,b
  7908   00001E  11F5               	iorwf	(_response_in_progress+1)& (0+255),w,b
  7909   000020  A4D8               	btfss	status,2,c
  7910   000022  EF15  F000         	goto	i2u162_41
  7911   000026  EF17  F000         	goto	i2u162_40
  7912   00002A                     i2u162_41:
  7913   00002A  EF39  F000         	goto	i2l516
  7914   00002E                     i2u162_40:
  7915   00002E                     
  7916                           ; BSR set to: 0
  7917                           ;interrupts.c: 27:         card_detected = 1;
  7918   00002E  0E00               	movlw	0
  7919   000030  6FF3               	movwf	(_card_detected+1)& (0+255),b
  7920   000032  0E01               	movlw	1
  7921   000034  6FF2               	movwf	_card_detected& (0+255),b
  7922   000036                     
  7923                           ; BSR set to: 0
  7924                           ;interrupts.c: 28:         LATDbits.LATD7=1;
  7925   000036  8E7C               	bsf	124,7,c	;volatile
  7926   000038                     
  7927                           ; BSR set to: 0
  7928                           ;interrupts.c: 29:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7929   000038  0E05               	movlw	5
  7930   00003A  6E04               	movwf	(??_HighISR+1)^0,c
  7931   00003C  0E0F               	movlw	15
  7932   00003E  6E03               	movwf	??_HighISR^0,c
  7933   000040  0EF1               	movlw	241
  7934   000042                     i2u240_47:
  7935   000042  2EE8               	decfsz	wreg,f,c
  7936   000044  D7FE               	bra	i2u240_47
  7937   000046  2E03               	decfsz	??_HighISR^0,f,c
  7938   000048  D7FC               	bra	i2u240_47
  7939   00004A  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7940   00004C  D7FA               	bra	i2u240_47
  7941   00004E  F000               	nop	
  7942   000050                     
  7943                           ;interrupts.c: 30:         LATDbits.LATD7=0;
  7944   000050  9E7C               	bcf	124,7,c	;volatile
  7945   000052                     
  7946                           ;interrupts.c: 31:         _delay((unsigned long)((50)*(64000000/4000.0)));
  7947   000052  0E05               	movlw	5
  7948   000054  6E04               	movwf	(??_HighISR+1)^0,c
  7949   000056  0E0F               	movlw	15
  7950   000058  6E03               	movwf	??_HighISR^0,c
  7951   00005A  0EF1               	movlw	241
  7952   00005C                     i2u241_47:
  7953   00005C  2EE8               	decfsz	wreg,f,c
  7954   00005E  D7FE               	bra	i2u241_47
  7955   000060  2E03               	decfsz	??_HighISR^0,f,c
  7956   000062  D7FC               	bra	i2u241_47
  7957   000064  2E04               	decfsz	(??_HighISR+1)^0,f,c
  7958   000066  D7FA               	bra	i2u241_47
  7959   000068  F000               	nop	
  7960   00006A                     
  7961                           ;interrupts.c: 32:         clear_interrupt_flag();
  7962   00006A  ECF3  F018         	call	i2_clear_interrupt_flag	;wreg free
  7963   00006E                     
  7964                           ;interrupts.c: 33:         PIR0bits.INT1IF = 0;
  7965   00006E  010E               	movlb	14	; () banked
  7966   000070  9333               	bcf	51,1,b	;volatile
  7967   000072                     i2l516:
  7968   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7969   000074  0011               	retfie		f
  7970   000076                     __end_of_HighISR:
  7971                           	callstack 0
  7972                           
  7973 ;; *************** function i2_clear_interrupt_flag *****************
  7974 ;; Defined at:
  7975 ;;		line 52 in file "interrupts.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7993 ;;Total ram usage:        0 bytes
  7994 ;; Hardware stack levels used: 1
  7995 ;; Hardware stack levels required when called: 2
  7996 ;; This function calls:
  7997 ;;		i2_I2C_2_Master_Start
  7998 ;;		i2_I2C_2_Master_Stop
  7999 ;;		i2_I2C_2_Master_Write
  8000 ;; This function is called by:
  8001 ;;		_HighISR
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           	psect	text50
  8006   0031E6                     __ptext50:
  8007                           	callstack 0
  8008   0031E6                     i2_clear_interrupt_flag:
  8009                           	callstack 18
  8010   0031E6                     
  8011                           ;interrupts.c: 53:     I2C_2_Master_Start();
  8012   0031E6  EC26  F019         	call	i2_I2C_2_Master_Start	;wreg free
  8013                           
  8014                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  8015   0031EA  0E52               	movlw	82
  8016   0031EC  EC0C  F019         	call	i2_I2C_2_Master_Write
  8017                           
  8018                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  8019   0031F0  0EE6               	movlw	230
  8020   0031F2  EC0C  F019         	call	i2_I2C_2_Master_Write
  8021                           
  8022                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  8023   0031F6  EC21  F019         	call	i2_I2C_2_Master_Stop	;wreg free
  8024   0031FA  0012               	return		;funcret
  8025   0031FC                     __end_ofi2_clear_interrupt_flag:
  8026                           	callstack 0
  8027                           
  8028 ;; *************** function i2_I2C_2_Master_Write *****************
  8029 ;; Defined at:
  8030 ;;		line 45 in file "i2c.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  data_byte       1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  data_byte       1    1[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; Hardware stack levels required when called: 1
  8051 ;; This function calls:
  8052 ;;		i2_I2C_2_Master_Idle
  8053 ;; This function is called by:
  8054 ;;		i2_clear_interrupt_flag
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text51
  8059   003218                     __ptext51:
  8060                           	callstack 0
  8061   003218                     i2_I2C_2_Master_Write:
  8062                           	callstack 18
  8063                           
  8064                           ;incstack = 0
  8065                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  8066   003218  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  8067   00321A                     
  8068                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8069   00321A  EC84  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8070   00321E                     
  8071                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8072   00321E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  8073   003222  0012               	return		;funcret
  8074   003224                     __end_ofi2_I2C_2_Master_Write:
  8075                           	callstack 0
  8076                           
  8077 ;; *************** function i2_I2C_2_Master_Stop *****************
  8078 ;; Defined at:
  8079 ;;		line 39 in file "i2c.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;		None
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;		None
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8097 ;;Total ram usage:        0 bytes
  8098 ;; Hardware stack levels used: 1
  8099 ;; Hardware stack levels required when called: 1
  8100 ;; This function calls:
  8101 ;;		i2_I2C_2_Master_Idle
  8102 ;; This function is called by:
  8103 ;;		i2_clear_interrupt_flag
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text52
  8108   003242                     __ptext52:
  8109                           	callstack 0
  8110   003242                     i2_I2C_2_Master_Stop:
  8111                           	callstack 18
  8112   003242                     
  8113                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8114   003242  EC84  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8115   003246                     
  8116                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8117   003246  010E               	movlb	14	; () banked
  8118   003248  85DA               	bsf	218,2,b	;volatile
  8119   00324A                     
  8120                           ; BSR set to: 14
  8121   00324A  0012               	return		;funcret
  8122   00324C                     __end_ofi2_I2C_2_Master_Stop:
  8123                           	callstack 0
  8124                           
  8125 ;; *************** function i2_I2C_2_Master_Start *****************
  8126 ;; Defined at:
  8127 ;;		line 27 in file "i2c.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      void 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2, status,0, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8145 ;;Total ram usage:        0 bytes
  8146 ;; Hardware stack levels used: 1
  8147 ;; Hardware stack levels required when called: 1
  8148 ;; This function calls:
  8149 ;;		i2_I2C_2_Master_Idle
  8150 ;; This function is called by:
  8151 ;;		i2_clear_interrupt_flag
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text53
  8156   00324C                     __ptext53:
  8157                           	callstack 0
  8158   00324C                     i2_I2C_2_Master_Start:
  8159                           	callstack 18
  8160   00324C                     
  8161                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8162   00324C  EC84  F018         	call	i2_I2C_2_Master_Idle	;wreg free
  8163   003250                     
  8164                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8165   003250  010E               	movlb	14	; () banked
  8166   003252  81DA               	bsf	218,0,b	;volatile
  8167   003254                     
  8168                           ; BSR set to: 14
  8169   003254  0012               	return		;funcret
  8170   003256                     __end_ofi2_I2C_2_Master_Start:
  8171                           	callstack 0
  8172                           
  8173 ;; *************** function i2_I2C_2_Master_Idle *****************
  8174 ;; Defined at:
  8175 ;;		line 22 in file "i2c.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;		None
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;		None
  8180 ;; Return value:  Size  Location     Type
  8181 ;;                  1    wreg      void 
  8182 ;; Registers used:
  8183 ;;		wreg, status,2, status,0
  8184 ;; Tracked objects:
  8185 ;;		On entry : 0/0
  8186 ;;		On exit  : 0/0
  8187 ;;		Unchanged: 0/0
  8188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8193 ;;Total ram usage:        1 bytes
  8194 ;; Hardware stack levels used: 1
  8195 ;; This function calls:
  8196 ;;		Nothing
  8197 ;; This function is called by:
  8198 ;;		i2_I2C_2_Master_Start
  8199 ;;		i2_I2C_2_Master_Stop
  8200 ;;		i2_I2C_2_Master_Write
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text54
  8205   003108                     __ptext54:
  8206                           	callstack 0
  8207   003108                     i2_I2C_2_Master_Idle:
  8208                           	callstack 18
  8209   003108                     i2l145:
  8210   003108  010E               	movlb	14	; () banked
  8211   00310A  B5D8               	btfsc	216,2,b	;volatile
  8212   00310C  EF8A  F018         	goto	i2u134_41
  8213   003110  EF8C  F018         	goto	i2u134_40
  8214   003114                     i2u134_41:
  8215   003114  EF84  F018         	goto	i2l145
  8216   003118                     i2u134_40:
  8217   003118                     
  8218                           ; BSR set to: 14
  8219   003118  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8220   00311C  0E1F               	movlw	31
  8221   00311E  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8222   003120  A4D8               	btfss	status,2,c
  8223   003122  EF95  F018         	goto	i2u135_41
  8224   003126  EF97  F018         	goto	i2u135_40
  8225   00312A                     i2u135_41:
  8226   00312A  EF84  F018         	goto	i2l145
  8227   00312E                     i2u135_40:
  8228   00312E                     
  8229                           ; BSR set to: 14
  8230   00312E  0012               	return		;funcret
  8231   003130                     __end_ofi2_I2C_2_Master_Idle:
  8232                           	callstack 0
  8233                           
  8234                           	psect	rparam
  8235   000000                     
  8236                           	psect	temp
  8237   00005B                     btemp:
  8238                           	callstack 0
  8239   00005B                     	ds	1
  8240   000000                     int$flags	set	btemp
  8241   000000                     wtemp8	set	btemp+1
  8242   000000                     ttemp5	set	btemp+1
  8243   000000                     ttemp6	set	btemp+4
  8244   000000                     ttemp7	set	btemp+8
  8245                           
  8246                           	psect	idloc
  8247                           
  8248                           ;Config register IDLOC0 @ 0x200000
  8249                           ;	unspecified, using default values
  8250   200000                     	org	2097152
  8251   200000  0FFF               	dw	4095
  8252                           
  8253                           ;Config register IDLOC1 @ 0x200002
  8254                           ;	unspecified, using default values
  8255   200002                     	org	2097154
  8256   200002  0FFF               	dw	4095
  8257                           
  8258                           ;Config register IDLOC2 @ 0x200004
  8259                           ;	unspecified, using default values
  8260   200004                     	org	2097156
  8261   200004  0FFF               	dw	4095
  8262                           
  8263                           ;Config register IDLOC3 @ 0x200006
  8264                           ;	unspecified, using default values
  8265   200006                     	org	2097158
  8266   200006  0FFF               	dw	4095
  8267                           
  8268                           ;Config register IDLOC4 @ 0x200008
  8269                           ;	unspecified, using default values
  8270   200008                     	org	2097160
  8271   200008  0FFF               	dw	4095
  8272                           
  8273                           ;Config register IDLOC5 @ 0x20000A
  8274                           ;	unspecified, using default values
  8275   20000A                     	org	2097162
  8276   20000A  0FFF               	dw	4095
  8277                           
  8278                           ;Config register IDLOC6 @ 0x20000C
  8279                           ;	unspecified, using default values
  8280   20000C                     	org	2097164
  8281   20000C  0FFF               	dw	4095
  8282                           
  8283                           ;Config register IDLOC7 @ 0x20000E
  8284                           ;	unspecified, using default values
  8285   20000E                     	org	2097166
  8286   20000E  0FFF               	dw	4095
  8287                           
  8288                           	psect	config
  8289                           
  8290                           ;Config register CONFIG1L @ 0x300000
  8291                           ;	External Oscillator mode Selection bits
  8292                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8293                           ;	Power-up default value for COSC bits
  8294                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8295   300000                     	org	3145728
  8296   300000  AA                 	db	170
  8297                           
  8298                           ;Config register CONFIG1H @ 0x300001
  8299                           ;	unspecified, using default values
  8300                           ;	Clock Out Enable bit
  8301                           ;	CLKOUTEN = 0x1, unprogrammed default
  8302                           ;	Clock Switch Enable bit
  8303                           ;	CSWEN = 0x1, unprogrammed default
  8304                           ;	Fail-Safe Clock Monitor Enable bit
  8305                           ;	FCMEN = 0x1, unprogrammed default
  8306   300001                     	org	3145729
  8307   300001  FF                 	db	255
  8308                           
  8309                           ;Config register CONFIG2L @ 0x300002
  8310                           ;	unspecified, using default values
  8311                           ;	Master Clear Enable bit
  8312                           ;	MCLRE = 0x1, unprogrammed default
  8313                           ;	Power-up Timer Enable bit
  8314                           ;	PWRTE = 0x1, unprogrammed default
  8315                           ;	Low-power BOR enable bit
  8316                           ;	LPBOREN = 0x1, unprogrammed default
  8317                           ;	Brown-out Reset Enable bits
  8318                           ;	BOREN = 0x3, unprogrammed default
  8319   300002                     	org	3145730
  8320   300002  FF                 	db	255
  8321                           
  8322                           ;Config register CONFIG2H @ 0x300003
  8323                           ;	unspecified, using default values
  8324                           ;	Brown Out Reset Voltage selection bits
  8325                           ;	BORV = 0x3, unprogrammed default
  8326                           ;	ZCD Disable bit
  8327                           ;	ZCD = 0x1, unprogrammed default
  8328                           ;	PPSLOCK bit One-Way Set Enable bit
  8329                           ;	PPS1WAY = 0x1, unprogrammed default
  8330                           ;	Stack Full/Underflow Reset Enable bit
  8331                           ;	STVREN = 0x1, unprogrammed default
  8332                           ;	Debugger Enable bit
  8333                           ;	DEBUG = 0x1, unprogrammed default
  8334                           ;	Extended Instruction Set Enable bit
  8335                           ;	XINST = 0x1, unprogrammed default
  8336   300003                     	org	3145731
  8337   300003  FF                 	db	255
  8338                           
  8339                           ;Config register CONFIG3L @ 0x300004
  8340                           ;	WDT Period Select bits
  8341                           ;	WDTCPS = 0x1F, unprogrammed default
  8342                           ;	WDT operating mode
  8343                           ;	WDTE = OFF, WDT Disabled
  8344   300004                     	org	3145732
  8345   300004  9F                 	db	159
  8346                           
  8347                           ;Config register CONFIG3H @ 0x300005
  8348                           ;	unspecified, using default values
  8349                           ;	WDT Window Select bits
  8350                           ;	WDTCWS = 0x7, unprogrammed default
  8351                           ;	WDT input clock selector
  8352                           ;	WDTCCS = 0x7, unprogrammed default
  8353   300005                     	org	3145733
  8354   300005  FF                 	db	255
  8355                           
  8356                           ;Config register CONFIG4L @ 0x300006
  8357                           ;	unspecified, using default values
  8358                           ;	Write Protection Block 0
  8359                           ;	WRT0 = 0x1, unprogrammed default
  8360                           ;	Write Protection Block 1
  8361                           ;	WRT1 = 0x1, unprogrammed default
  8362                           ;	Write Protection Block 2
  8363                           ;	WRT2 = 0x1, unprogrammed default
  8364                           ;	Write Protection Block 3
  8365                           ;	WRT3 = 0x1, unprogrammed default
  8366                           ;	Write Protection Block 3
  8367                           ;	WRT4 = 0x1, unprogrammed default
  8368                           ;	Write Protection Block 3
  8369                           ;	WRT5 = 0x1, unprogrammed default
  8370                           ;	Write Protection Block 3
  8371                           ;	WRT6 = 0x1, unprogrammed default
  8372                           ;	Write Protection Block 3
  8373                           ;	WRT7 = 0x1, unprogrammed default
  8374   300006                     	org	3145734
  8375   300006  FF                 	db	255
  8376                           
  8377                           ;Config register CONFIG4H @ 0x300007
  8378                           ;	unspecified, using default values
  8379                           ;	Configuration Register Write Protection bit
  8380                           ;	WRTC = 0x1, unprogrammed default
  8381                           ;	Boot Block Write Protection bit
  8382                           ;	WRTB = 0x1, unprogrammed default
  8383                           ;	Data EEPROM Write Protection bit
  8384                           ;	WRTD = 0x1, unprogrammed default
  8385                           ;	Scanner Enable bit
  8386                           ;	SCANE = 0x1, unprogrammed default
  8387                           ;	Low Voltage Programming Enable bit
  8388                           ;	LVP = 0x1, unprogrammed default
  8389   300007                     	org	3145735
  8390   300007  FF                 	db	255
  8391                           
  8392                           ;Config register CONFIG5L @ 0x300008
  8393                           ;	unspecified, using default values
  8394                           ;	UserNVM Program Memory Code Protection bit
  8395                           ;	CP = 0x1, unprogrammed default
  8396                           ;	DataNVM Memory Code Protection bit
  8397                           ;	CPD = 0x1, unprogrammed default
  8398   300008                     	org	3145736
  8399   300008  FF                 	db	255
  8400                           
  8401                           ;Config register CONFIG5H @ 0x300009
  8402                           ;	unspecified, using default values
  8403   300009                     	org	3145737
  8404   300009  FF                 	db	255
  8405                           
  8406                           ;Config register CONFIG6L @ 0x30000A
  8407                           ;	unspecified, using default values
  8408                           ;	Table Read Protection Block 0
  8409                           ;	EBTR0 = 0x1, unprogrammed default
  8410                           ;	Table Read Protection Block 1
  8411                           ;	EBTR1 = 0x1, unprogrammed default
  8412                           ;	Table Read Protection Block 2
  8413                           ;	EBTR2 = 0x1, unprogrammed default
  8414                           ;	Table Read Protection Block 3
  8415                           ;	EBTR3 = 0x1, unprogrammed default
  8416                           ;	Table Read Protection Block 4
  8417                           ;	EBTR4 = 0x1, unprogrammed default
  8418                           ;	Table Read Protection Block 5
  8419                           ;	EBTR5 = 0x1, unprogrammed default
  8420                           ;	Table Read Protection Block 6
  8421                           ;	EBTR6 = 0x1, unprogrammed default
  8422                           ;	Table Read Protection Block 7
  8423                           ;	EBTR7 = 0x1, unprogrammed default
  8424   30000A                     	org	3145738
  8425   30000A  FF                 	db	255
  8426                           
  8427                           ;Config register CONFIG6H @ 0x30000B
  8428                           ;	unspecified, using default values
  8429                           ;	Boot Block Table Read Protection bit
  8430                           ;	EBTRB = 0x1, unprogrammed default
  8431   30000B                     	org	3145739
  8432   30000B  FF                 	db	255
  8433                           tosu	equ	0xFFF
  8434                           tosh	equ	0xFFE
  8435                           tosl	equ	0xFFD
  8436                           stkptr	equ	0xFFC
  8437                           pclatu	equ	0xFFB
  8438                           pclath	equ	0xFFA
  8439                           pcl	equ	0xFF9
  8440                           tblptru	equ	0xFF8
  8441                           tblptrh	equ	0xFF7
  8442                           tblptrl	equ	0xFF6
  8443                           tablat	equ	0xFF5
  8444                           prodh	equ	0xFF4
  8445                           prodl	equ	0xFF3
  8446                           indf0	equ	0xFEF
  8447                           postinc0	equ	0xFEE
  8448                           postdec0	equ	0xFED
  8449                           preinc0	equ	0xFEC
  8450                           plusw0	equ	0xFEB
  8451                           fsr0h	equ	0xFEA
  8452                           fsr0l	equ	0xFE9
  8453                           wreg	equ	0xFE8
  8454                           indf1	equ	0xFE7
  8455                           postinc1	equ	0xFE6
  8456                           postdec1	equ	0xFE5
  8457                           preinc1	equ	0xFE4
  8458                           plusw1	equ	0xFE3
  8459                           fsr1h	equ	0xFE2
  8460                           fsr1l	equ	0xFE1
  8461                           bsr	equ	0xFE0
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           postdec2	equ	0xFDD
  8465                           preinc2	equ	0xFDC
  8466                           plusw2	equ	0xFDB
  8467                           fsr2h	equ	0xFDA
  8468                           fsr2l	equ	0xFD9
  8469                           status	equ	0xFD8

Data Sizes:
    Strings     119
    Constant    0
    Data        0
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    142     151
    BANK1           256    252     252
    BANK2           256      0     112
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    make_master_closeness@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    normalise_readings@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2584$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK2[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_6(CODE[10]), STR_5(CODE[36]), STR_4(CODE[10]), STR_3(CODE[36]), 
		 -> STR_2(CODE[23]), STR_1(CODE[50]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2535$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2535$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    card_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    card_response@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    card_response@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    card_response@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    card_response@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    card_response@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    card_response@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    determine_card@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    make_master_closeness@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    make_master_closeness@master_closeness	PTR unsigned int  size(2) Largest target is 18
		 -> card_response_easy@master_closeness(COMRAM[10]), card_response@master_closeness(BANK0[18]), 

    normalise_readings@normalised_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> card_response_easy@normalised_values(COMRAM[40]), card_response@normalised_values(BANK0[72]), 

    normalise_readings@expected_values	PTR unsigned int [9] size(2) Largest target is 72
		 -> main@expected_values(BANK1[72]), 

    collect_avg_readings@blue_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@blue_read(BANK1[2]), 

    collect_avg_readings@green_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@green_read(BANK1[2]), 

    collect_avg_readings@red_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@red_read(BANK1[2]), 

    collect_avg_readings@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    clear_read_calibration@clear_read_check	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read_check(BANK1[2]), 

    clear_read_calibration@buf	PTR unsigned char  size(2) Largest target is 150
		 -> main@buf(BANK1[150]), 

    clear_read_calibration@clear_read	PTR unsigned int  size(2) Largest target is 2
		 -> main@clear_read(BANK1[2]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverseFullSpeed@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    reverseFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnRight45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnRight45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    turnLeft45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S525DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhhhllllll[1]), CCPR2H(BITBIGSFRhhllll[1]), 

    S525DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhhhllllll[1]), CCPR1H(BITBIGSFRhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _sendStringSerial4->_sendCharSerial4
    _normalise_readings->_abs
    _abs->___aomod
    _motor_response->_turnLeft45
    _motor_response->_turnRight45
    _turnRight45->_setMotorPWM
    _turnLeft45->_setMotorPWM
    _stop->_setMotorPWM
    _reverseFullSpeed->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _collect_avg_readings->_color_read_Blue
    _collect_avg_readings->_color_read_Clear
    _collect_avg_readings->_color_read_Green
    _collect_avg_readings->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _Interrupts_init->_set_interrupt_threshold
    _set_interrupt_threshold->_color_writetoaddr
    _enable_color_interrupt->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _clear_interrupt_flag->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    i2_clear_interrupt_flag->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_card_response
    _clear_read_calibration->_sprintf
    _card_response->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               414   414      0   90703
                                            140 BANK0      2     2      0
                                              0 BANK1    252   252      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _LEDSon_init
                      _card_response
             _clear_read_calibration
               _collect_avg_readings
                   _color_click_init
                   _color_read_Clear
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _initUSART4
                   _reverseFullSpeed
                  _sendStringSerial4
                        _setMotorPWM
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       7     3      4    3507
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_read_calibration                              14     8      6    9897
                                             33 BANK0     14     8      6
                   _color_read_Clear
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _card_response                                      107    91     16   44451
                                             33 BANK0    107    91     16
               _collect_avg_readings
                     _determine_card
              _make_master_closeness
                     _motor_response
                 _normalise_readings
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    15     14    8576
                                              6 BANK0     27    13     14
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7190
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    6729
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5162
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     523
                                              5 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _normalise_readings                                  25    11     14    4588
                                             26 COMRAM    25    11     14
                            ___lwdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     543
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_response                                       7     3      4   26104
                                             31 COMRAM     7     3      4
                   _reverseFullSpeed
                               _stop
                         _turnLeft45
                        _turnRight45
 ---------------------------------------------------------------------------------
 (3) _turnRight45                                          8     4      4    5787
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _turnLeft45                                           8     4      4    4571
                                             23 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    8129
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _reverseFullSpeed                                     7     3      4    5331
                                             23 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2981
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     963
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     750
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _make_master_closeness                               37    31      6     722
                                              4 COMRAM    37    31      6
 ---------------------------------------------------------------------------------
 (2) _determine_card                                      10     8      2     378
                                              4 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _collect_avg_readings                                20    12      8    1946
                                             15 COMRAM    20    12      8
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _LEDSon_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0    1908
             _enable_color_interrupt
            _set_interrupt_threshold
 ---------------------------------------------------------------------------------
 (2) _set_interrupt_threshold                              8     2      6    1136
                                              8 COMRAM     8     2      6
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _enable_color_interrupt                               0     0      0     772
               _clear_interrupt_flag
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _clear_interrupt_flag                                 0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
             i2_clear_interrupt_flag
 ---------------------------------------------------------------------------------
 (11) i2_clear_interrupt_flag                              0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (13) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
     _enable_color_interrupt
       _clear_interrupt_flag
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _set_interrupt_threshold
       _color_writetoaddr
   _LEDSon_init
   _card_response
     _collect_avg_readings
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _determine_card
     _make_master_closeness
     _motor_response
       _reverseFullSpeed
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft45
         _setMotorPWM
       _turnRight45
         _setMotorPWM
     _normalise_readings
       ___lwdiv
       ___wmul
       _abs
         ___aomod (ARG)
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
   _clear_read_calibration
     _color_read_Clear
     _sendStringSerial4
     _sprintf
   _collect_avg_readings
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_Clear
   _fullSpeedAhead
     _setMotorPWM
   _initDCmotorsPWM
   _initUSART4
   _reverseFullSpeed
   _sendStringSerial4
   _setMotorPWM
   _sprintf
   _stop

 _HighISR (ROOT)
   i2_clear_interrupt_flag
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      65        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      70       9       43.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FC      FC       7       98.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRllhhhh     52      0       0      41        0.0%
BITBIGSFRllhhhl     37      0       0      43        0.0%
BITBIGSFRhhhl       32      0       0      33        0.0%
BITBIGSFRllllhl     2A      0       0      55        0.0%
BITBIGSFRllllll     23      0       0      62        0.0%
BITBIGSFRllhhhl     20      0       0      46        0.0%
BITBIGSFRhhlllh     17      0       0      37        0.0%
BITBIGSFRllhhhl     11      0       0      49        0.0%
BITBIGSFRllhhl      11      0       0      50        0.0%
BITBIGSFRhhlhh       E      0       0      34        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllhhhl      C      0       0      48        0.0%
BITBIGSFRllhhhl      C      0       0      47        0.0%
BITBIGSFRllllhl      9      0       0      59        0.0%
BITBIGSFRllhhhl      8      0       0      44        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRllllhh      6      0       0      54        0.0%
BITBIGSFRllllhl      5      0       0      57        0.0%
BITBIGSFRlllhl       5      0       0      53        0.0%
BITBIGSFRhhllll      5      0       0      38        0.0%
BITBIGSFRllllhl      3      0       0      56        0.0%
BITBIGSFRllllhl      3      0       0      58        0.0%
BITBIGSFRlllhh       3      0       0      52        0.0%
BITBIGSFRllhhhh      2      0       0      40        0.0%
BITBIGSFRllhhhl      2      0       0      42        0.0%
BITBIGSFRhhllh       2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      63        0.0%
BITBIGSFRllhhhh      1      0       0      39        0.0%
BITBIGSFRllllhl      1      0       0      60        0.0%
BITBIGSFRllhhhl      1      0       0      45        0.0%
BITBIGSFRhhlhl       1      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D      64        0.0%
DATA                 0      0     25D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 11:10:16 2022

clear_read_calibration@clear_read_check 0085                          _color_read_Red 2DE4  
                       _color_read_Blue 2ED4                                      l22 31B6  
                                    l31 2F22                                      l25 2E32  
                                    l34 2ED2                                      l19 305A  
                                    l28 2E82                                      l86 20E4  
                                    l95 2B62                                      l79 2ADC  
                   ___wmul@multiplicand 0007                        _color_read_Clear 2E84  
                      _color_read_Green 2E34                       ??_Interrupts_init 0011  
                                   l100 293C                                     l110 29C8  
                                   l105 2890                                     l115 2A54  
                                   l142 30DE                                     l151 3240  
                                   l160 3216                                     l240 1336  
                                   l145 30E0                                     l321 260E  
                                   l241 14C2                                     l154 322C  
                                   l242 14C0                                     l163 2FA8  
                                   l148 3106                                     l244 14EE  
                                   l157 3236                                     l421 3196  
                                   l237 14BA                                     l510 3026  
                                   l334 1DF0                                     l350 2BE6  
                                   l430 31BA                                     l238 1328  
                                   l239 1326                                     l344 271A  
                                   l433 31CE                                     l274 3176  
                                   l362 11AE                                     l363 11CE  
                                   l339 18F8                                     l532 3154  
                                   l364 11EE                                     l365 1270  
                                   l526 2D3C                                     l519 320A  
                                   l439 308A                                     l368 24F4  
                                   l529 31E4                                     l646 1F78  
                                   l659 2248     normalise_readings@normalised_values 0027  
                      ??_motor_response 0024                                     _abs 2FAA  
                                   _pad 2BE8                   __end_of_card_response 24F6  
                                   prod 000FF3                                     wreg 000FE8  
              ??_clear_read_calibration 0087                                    l1030 2CD4  
                                  l1023 2CCC                                    l1210 2FE8  
                                  ?_abs 0017                                    l1207 2FE0  
                                  l3000 2BD4                                    l1217 2DE2  
                                  l3002 2BE4                                    l3010 0E94  
                                  l1250 198E                                    l1243 2C60  
                                  l1251 19D4                                    l3020 0EFE  
                                  l3012 0EAA                                    l3110 11B0  
                                  l3022 0F12                                    l3014 0EBE  
                                  l3006 0E7C                                    l1262 1B76  
                                  l1239 2C0A                                    l3120 1208  
                                  l3112 11C8                                    l3040 0FBA  
                                  l3032 0F68                                    l3024 0F28  
                                  l3016 0ED2                                    l3008 0E80  
                                  l1248 1986                                    l3130 31FC  
                                  l3114 11D0                                    l3042 0FCE  
                                  l3034 0F7C                                    l3026 0F3C  
                                  l3018 0EE6                                    l3210 29A4  
                                  l3202 2966                                    l1275 2D90  
                                  l3140 2D04                                    l3132 2CD6  
                                  l3116 11E8                                    l3060 1050  
                                  l3052 0FE6                                    l3036 0F92  
                                  l3028 0F50                                    l3124 120E  
                                  l3212 29AC                                    l3204 297E  
                                  l3220 3184                                    l1269 23A6  
                                  l3142 2D0E                                    l3134 2CEA  
                                  l3230 2FEA                                    l3214 3156  
                                  l3118 11F0                                    l3062 10D0  
                                  l3054 0FFA                                    l3038 0FA6  
                                  l3206 298A                                    l3222 3186  
                                  l1287 27E4                                    l1295 2F66  
                                  l3144 2D1C                                    l3136 2CEE  
                                  l3240 301A                                    l3232 300A  
                                  l3080 1152                                    l3064 10E4  
                                  l3056 1010                                    l3208 2996  
                                  l3224 3190                                    l3216 3178  
                                  l3146 2D2E                                    l3138 2D00  
                                  l3250 3024                                    l3242 301C  
                                  l3234 300C                                    l3066 10FA  
                                  l3058 103C                                    l1298 3256  
                                  l3170 3050                                    l3162 3028  
                                  l3226 3192                                    l3218 3182  
                                  l3148 2D32                                    l3244 301E  
                                  l3236 3010                                    l3068 1126  
                                  l3164 302C                                    l3180 2AB6  
                                  l3172 2A56                                    l3228 3194  
                                  l3246 3020                                    l3238 3016  
                                  l3094 116C                                    l3078 113E  
                                  l3166 3036                                    l3190 2AD0  
                                  l3182 2AB8                                    l3174 2A5E  
                                  l3248 3022                                    l2800 283E  
                                  l3096 1180                                    l3600 1E24  
                                  l3168 3046                                    l3192 2ADA  
                                  l3184 2AC2                                    l3176 2A88  
                                  l2562 30E0                                    l2650 320E  
                                  l2722 319A                                    l2730 2E34  
                                  l2810 29CA                                    l2802 284A  
                                  l3098 1196                                    l3610 1E66  
                                  l3602 1E28                                    l3194 293E  
                                  l3186 2AC4                                    l3178 2AAC  
                                  l2564 30F0                                    l2652 3212  
                                  l2660 3228                                    l2732 2E7A  
                                  l2724 2DE4                                    l2900 1CA4  
                                  l2580 2C8C                                    l2572 2C62  
                                  l2820 2A0A                                    l2812 29EA  
                                  l2804 2856                                    l3620 1EC0  
                                  l3612 1E84                                    l3604 1E36  
                                  l3700 1996                                    l3196 295E  
                                  l3188 2ACE                                    l2646 3238  
                                  l2654 322E                                    l2670 2FA4  
                                  l2662 2F6A                                    l2742 2E84  
                                  l2726 2E2A                                    l2902 1CA8  
                                  l2590 2CC0                                    l2582 2C9A  
                                  l2574 2C6A                                    l2566 3130  
                                  l2822 2A16                                    l2750 2AE2  
                                  l2806 285E                                    l2830 31BA  
                                  l3622 1EEE                                    l3614 1E8C  
                                  l3630 1F28                                    l3606 1E56  
                                  l3710 19D0                                    l3702 19A6  
                                  l2648 323C                                    l2656 3232  
                                  l2672 2FA6                                    l2664 2F6E  
                                  l2736 2ED4                                    l2744 2ECA  
                                  l2920 1D44                                    l2912 1CF8  
                                  l2904 1CC4                                    l2592 2CC6  
                                  l2584 2CA0                                    l2576 2C7C  
                                  l2568 314C                                    l2680 1FEA  
                                  l2824 2A22                                    l2760 2B30  
                                  l2752 2AEE                                    l2808 287A  
                                  l3800 18E6                                    l2832 31CA  
                                  l3632 1F38                                    l3624 1F0E  
                                  l3616 1EA0                                    l3608 1E5A  
                                  l3640 20EA                                    l3720 1A74  
                                  l3712 19DC                                    l3704 19AC  
                                  l2834 31D0                                    l2666 2F76  
                                  l2658 3224                                    l2738 2F1A  
                                  l2930 1D8C                                    l2922 1D70  
                                  l2914 1D0C                                    l2906 1CF0  
                                  l2586 2CB6                                    l2578 2C84  
                                  l2690 20A4                                    l2682 1FFE  
                                  l2826 2A30                                    l2818 29F2  
                                  l2762 2B3E                                    l2754 2AFC  
                                  l3802 18E8                                    l3634 1F58  
                                  l3626 1F10                                    l3618 1EAE  
                                  l3650 214A                                    l3642 20F8  
                                  l3570 272E                                    l3730 1B30  
                                  l3722 1A7A                                    l3714 19E6  
                                  l3706 19BC                                    l3810 2500  
                                  l2850 30B6                                    l2668 2F7E  
                                  l2932 1DA4                                    l2916 1D24  
                                  l2588 2CBE                                    l2684 2002  
                                  l2676 1F7A                                    l2828 2A38  
                                  l2764 2B4A                                    l2756 2B08  
                                  l2748 2ADE                                    l2780 28F6  
                                  l3628 1F22                                    l3660 21C0  
                                  l3652 2168                                    l3644 2118  
                                  l3572 2740                                    l3732 1B40  
                                  l3716 19EC                                    l3724 1ADE  
                                  l3708 19C8                                    l3740 224A  
                                  l3812 2514                                    l3804 24F6  
                                  l2860 30CC                                    l2852 30C0  
                                  l3900 1350                                    l2934 1DA8  
                                  l2918 1D28                                    l2870 1BD0  
                                  l2862 1B78                                    l2686 2044  
                                  l2678 1F96                                    l2758 2B24  
                                  l2782 2902                                    l2774 28BA  
                                  l2766 2892                                    l2790 2806  
                                  l3590 2FAA                                    l2950 305C  
                                  l3670 2228                                    l3662 21E0  
                                  l3654 2170                                    l3646 211C  
                                  l3638 20E6                                    l3574 274A  
                                  l3582 2F24                                    l3734 1B46  
                                  l3726 1AF8                                    l3718 1A6E  
                                  l3750 22A2                                    l3742 2272  
                                  l3830 258C                                    l3822 253E  
                                  l3814 251A                                    l2854 30C6  
                                  l3910 13E4                                    l3902 1364  
                                  ?_pad 0015                                    l2936 1DC4  
                                  l2928 1D78                                    l2880 1BF8  
                                  l2872 1BD4                                    l2688 2060  
                                  l2784 290A                                    l2776 28D2  
                                  l2768 28B2                                    l3592 2FC4  
                                  l2952 3060                                    l3664 21F2  
                                  l3656 2184                                    l3648 212A  
                                  l3576 2768                                    l3568 271C  
                                  l3584 2F30                                    l3680 2C16  
                                  l3736 1B56                                    l3728 1B16  
                                  l3760 2368                                    l3752 22C2  
                                  l3744 2280                                    l3840 23A8  
                                  l3832 25B8                                    l3824 2552  
                                  l3816 2536                                    l2856 30C8  
                                  l3920 149A                                    l3912 13FE  
                                  l3904 1392                                    l2890 1C70  
                                  l2882 1C0C                                    l2874 1BF0  
                                  l2970 2610                                    l2786 2926  
                                  l2778 28EA                                    l2954 306E  
                                  l3594 1DF2                                    l3658 2192  
                                  l3666 21F8                                    l3578 279E  
                                  l3586 2F42                                    l3682 2C2A  
                                  l3674 2BE8                                    l3690 191A  
                                  l3754 22E2                                    l3746 228E  
                                  l3770 2D3E                                    l3850 24A6  
                                  l3842 23CC                                    l3834 25D4  
                                  l3826 256A                                    l2858 30CA  
                                  l3930 1510                                    l3922 14A6  
                                  l3914 141E                                    l3906 13AC  
                                  l2884 1C24                                    l2868 1B80  
                                  l2980 270A                                    l2796 280E  
                                  l2788 27E6                                    l2956 3072  
                                  l3596 1DF6                                    l3668 2208  
                                  l3588 2F46                                    l3684 2C2E  
                                  l3676 2BF6                                    l3692 192E  
                                  l3756 2338                                    l3748 2292  
                                  l3764 237A                                    l3772 2D4A  
                                  l3780 2D92                                    l3852 24B6  
                                  l3844 2422                                    l3836 25E0  
                                  l3828 2570                                    l3940 1590  
                                  l3932 151C                                    l3924 14AA  
                                  l3916 143E                                    l3908 13C0  
                                  l3860 1276                                    l2886 1C28  
                                  l2982 2B64                                    l2798 2826  
                                  l3598 1E04                                    l3686 2C4C  
                                  l3678 2C02                                    l3694 193E  
                                  l3774 2D66                                    l3782 2DA4  
                                  l3854 24D0                                    l3846 242E  
                                  l3838 23A8                                    l3942 15A4  
                                  l3934 1534                                    l3926 14D0  
                                  l3918 145E                                    l3870 128A  
                                  l3862 127A                                    l2896 1C78  
                                  l2888 1C44                                    l2992 2B80  
                                  l2984 2B68                                    l2976 2614  
                                  l3792 1616                                    l3696 195E  
                                  l3688 18FA                                    l3776 2D86  
                                  l3784 2DAC                                    l3856 24DC  
                                  l3848 248A                                    l3944 15B6  
                                  l3936 1548                                    l3928 14FC  
                                  l3880 12B2                                    l3872 128C  
                                  l3864 127E                                    l2898 1C8C  
                                  l2994 2BAE                                    l2986 2B7C  
                                  l2978 2708                                    l3698 197A  
                                  l3786 2DB4                                    l3946 15FC  
                                  l3938 1562                                    l3890 12E6  
                                  l3882 12C4                                    l3874 1290  
                                  l3866 1282                                    l3858 1272  
                                  l2996 2BCE                                    l3788 2DD0  
                                  l3892 131C                                    l3884 12CC  
                                  l3876 12A2                                    l3868 1286  
                                  l2998 2BD2                                    l3990 1222  
                                  l3798 161A                                    l3886 12D4  
                                  l3878 12AA                                    l3888 12DA  
                                  l3898 1338                                    STR_1 0E01  
                                  STR_2 0E57                                    STR_3 0E33  
                                  STR_4 0E6E                                    u1200 2F92  
                                  u2000 258C                                    u1201 2F8A  
                                  u2001 2588                                    u1050 30F0  
                                  u2010 1336                                    u1051 30EC  
                                  u2011 1332                                    u1060 3106  
                                  u1220 1F96                                    u1300 287A  
                                  u2020 14BA                            ?_LEDSon_init 0001  
                                  u1061 3102                                    u1221 1F92  
                                  u1301 2876                                    u2021 14B6  
                                  u1070 2C7C                                    u1230 2060  
                                  u1310 2A54                                    u2030 14D0  
                                  u1071 2C78                                    u1231 205C  
                                  u1311 2A50                                    u2031 14CC  
                                  u1400 1DC4                                    u1080 2C9A  
                                  u1320 31CA                                    u2040 14FC  
                                  u1401 1DC0                                    u1081 2C96  
                                  u1321 31C6                                    u2041 14F8  
                                  u1218 2F94                                    u1090 2CB6  
                                  u1410 308A                                    u2050 1534  
                                  u1091 2CB2                                    u1411 3086  
                                  u2107 1582                                    u2051 1530  
                                  u2117 15AC                                    u1430 271A  
                                  u1270 2B20                                    u1431 2716  
                                  u1271 2B1C                                    u2207 102E  
                                  u2127 1604                                    u1360 1BF0  
                                  u1440 2BAE                                    u1280 2B62  
                          _BAUD4CONbits 000EE9                                    u1361 1BEC  
                                  u1441 2BAA                                    u1281 2B5E  
                                  u2217 105A                                    u2137 299C  
                                  u1370 1C44                                    u1450 2BE4  
                                  u1290 2926                                    u1371 1C40  
                                  u1451 2BE0                                    u1291 2922  
                                  u2307 2884                                    u2227 10EE  
                                  u2147 303C                                    u2067 1344  
                                  u1460 2D00                                    u1380 1CC4  
                                  u1700 1E36                                    u1461 2CFC  
                                  u1381 1CC0                                    u2317 28DC  
                                  u2237 1118                                    u1701 1E32  
                                  u2157 255E                                    u2077 1370  
                                  u1470 2D2E                                    u1390 1D44  
                                  u1630 272E                                    u1471 2D2A  
                                  u1391 1D40                                    u2327 2930  
                                  u2247 115C                                    u2167 0E9E  
                                  u1711 1E60                                    u1631 272A  
                                  u2087 139E                                    u1720 1E84  
                                  u1800 21C0                                    u1640 2740  
                                  u1480 29C8                                    u2337 2AF4  
                                  u2257 118A                                    u2177 0F1C  
                                  u1721 1E80                                    u1801 21BC  
                                  u1641 273C                                    u1481 29C4  
                                  u2097 1554                                    u1730 1EAE  
                                  u1810 2208                                    u1650 2768  
                                  _T2PR 000FBC                                    u2347 2B36  
                                  u2267 11BA                                    u2187 0F86  
                                  u1731 1EAA                                    u1811 2204  
                                  u1651 2764                                    u1740 1EEE  
                                  u1660 279E                                    u1820 2BF6  
                                  u1900 1AF8                                    u2357 2A28  
                                  u2277 11DA                                    u2197 1004  
                                  u1741 1EEA                                    u1661 279A  
                                  u1821 2BF2                                    u1901 1AF4  
                                  u1750 1F38                                    u1670 2F66  
                                  u1830 2C4C                                    u1910 1B16  
                                  u2367 1C16                                    u2287 11FA  
                                  u1751 1F34                                    u1671 2F62  
                                  u1831 2C48                                    u1911 1B12  
                                  u1680 2FC4                                    u1760 20F8  
                                  u1920 1B30                                    u1840 192A  
                                  u2377 1C96                                    u2297 2830  
                                  u1681 2FC0                                    u1761 20F4  
                                  u1921 1B2C                                    u1841 1924  
                                  u1690 1E04                                    u1770 212A  
                                  u1930 1B40                                    u1850 192C  
                                  u2387 1D16                                    u1691 1E00  
                                  u1771 2126                                    u1931 1B3C  
                                  u1780 2168                                    u1860 193E  
                                  u1940 2272                                    u2397 1D96  
                                  u1781 2164                                    u1861 193A  
                                  u1941 226E                                    u1790 2192  
                                  u1870 197A                                    u1950 22C2  
                                  u1791 218E                                    u1871 1976  
                                  u1951 22BE                                    u1880 19A6  
                                  u1960 22E2                                    u1881 19A2  
                                  u1961 22DE                                    u1890 19BC  
                                  u1970 2D86                                    u1891 19B8  
                                  u1971 2D82                                    u1980 18F8  
                                  u1981 18F4                                    u1990 2536  
                                  u1991 2532              normalise_readings@red_read 001F  
                                  abs@a 0017                                    _dbuf 0250  
                                  _main 1272                                    _dtoa 18FA  
                                  _prec 00F0                                    pad@i 001C  
                                  pad@p 0019                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                                    pad@w 001E  
                                  fsr2l 000FD9                                    btemp 005B  
                                  _stop 2ADE                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0076  
      clear_read_calibration@clear_read 0083                         card_response@mL 008D  
                       card_response@mR 008F                  __end_of_color_read_Red 2E34  
                       __end_of_HighISR 0076                    _response_in_progress 00F4  
           normalise_readings@blue_read 0023                            ___param_bank 000000  
                                 ??_abs 0019                                   ??_pad 001B  
                           _turnRight45 27E6                         __end_of___aodiv 1F7A  
                                 ?_main 0001                                   ?_dtoa 0020  
                       __end_of___aomod 224A                                   ?_stop 0018  
                       __end_of___lwdiv 2CD6                                   i2l151 3254  
                                 i2l160 3222                                   i2l145 3108  
                                 i2l148 312E                                   i2l157 324A  
                                 i2l516 0072                                   i2l529 31FA  
                          vfpfcnvrt@fmt 0045                 ?_enable_color_interrupt 0001  
                          main@red_read 01E1                 __end_of_sendCharSerial4 31D0  
            __end_of_I2C_2_Master_Start 3242              __end_of_I2C_2_Master_Write 3218  
                                 _flags 00F6                                   _fputc 271C  
                                 _fputs 2F24                                   pad@fp 0015  
        determine_card@master_closeness 0005                 ??_make_master_closeness 000B  
                                 _width 00EE                                   _putch 3256  
                                 main@i 01E7                                   dtoa@d 0022  
                                 dtoa@i 0041                                   dtoa@n 0038  
                                 dtoa@p 0034                                   dtoa@s 0040  
                                 dtoa@w 0036                     normalise_readings@i 0033  
                                 tablat 000FF5                                   ttemp5 005C  
                                 ttemp6 005F                                   ttemp7 0063  
                                 status 000FD8                                   wtemp8 005C  
                       __end_of_sprintf 2DE4          card_response@normalised_values 0091  
                      card_response@buf 0081                 __end_of_color_read_Blue 2F24  
                 _I2C_2_Master_RepStart 3224                         ?_color_read_Red 0009  
                       __initialization 308C                            __end_of_main 1616  
                          __end_of_dtoa 1B78                            __end_of_stop 2B64  
        __end_of_enable_color_interrupt 320C                                  ??_main 00EC  
                                ??_dtoa 002A                                  ??_stop 001C  
                         __activetblptr 000003                           main@blue_read 01E5  
                  main@clear_read_check 01DF               clear_read_calibration@buf 0081  
                          ?_setMotorPWM 0012                                  ?_fputc 0005  
                                ?_fputs 000E                                  _CCPR1H 000FAA  
                                _CCPR2H 000FA6                                  _CCPR3H 000F25  
                                _CCPR4H 000F21            collect_avg_readings@red_read 0012  
                                ?_putch 0001                                  _RC0PPS 000E62  
                                _RC4REG 000EE3                                  _RE2PPS 000E74  
                                _RD5PPS 000E6F                                  _RC7PPS 000E69  
                                _RD6PPS 000E70                                  _RE4PPS 000E76  
                                i2l3150 324C                                  i2l3152 3250  
                                i2l3160 321E                                  i2l3154 3242  
                                i2l3156 3246                                  i2l3158 321A  
                                i2l3530 000A                                  i2l3380 31E6  
                                i2l3540 0050                                  i2l3532 001A  
                                i2l3542 0052                                  i2l3534 002E  
                                i2l3544 006A                                  i2l3536 0036  
                                i2l3546 006E                                  i2l3538 0038  
                                i2l2846 3108                                  i2l2848 3118  
                                _RG6PPS 000E88                               ??_HighISR 0003  
              __end_of_color_click_init 305C                  make_master_closeness@i 0029  
                                _RX4PPS 000E15                                  _TX4REG 000EE4  
                          _CCPTMRS0bits 000FAD                            vfprintf@cfmt 0055  
                             ??___aodiv 0015                               ??___aomod 0015  
                                ___wmul 3130                      _normalise_readings 1616  
                             ??___lwdiv 000F                                  clear_0 3092  
                                clear_1 309E                                  isa$std 000001  
                                pad@buf 0017                                  dtoa@fp 0020  
          __end_of_clear_interrupt_flag 31E6                     ?_normalise_readings 001B  
                                fputc@c 0005                                  fputs@c 0012  
                                fputs@i 0013                                  fputs@s 000E  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                      ?_sendCharSerial4 0001                                  putch@c 0001  
                      __end_of_vfprintf 2D92                                  stop@mL 0018  
                                stop@mR 001A                       ??_initDCmotorsPWM 0005  
                             ??_sprintf 0057                 ?i2_clear_interrupt_flag 0001  
                     card_response@card 00EB                              __accesstop 0060  
               __end_of__initialization 30AC                __end_of_color_read_Clear 2ED4  
                       fullSpeedAhead@i 001D                __end_of_color_read_Green 2E84  
                ?_I2C_2_Master_RepStart 0001                    ??_normalise_readings 0029  
                         ___rparam_used 000001                        ?_color_read_Blue 0009  
                       _Interrupts_init 2FEA            __end_of_collect_avg_readings 1DF2  
                        __pcstackCOMRAM 0001                  _clear_read_calibration 24F6  
                      _reverseFullSpeed 29CA              collect_avg_readings@i_1602 001C  
            collect_avg_readings@i_1603 001E              collect_avg_readings@i_1604 0020  
            collect_avg_readings@i_1605 0022                 _set_interrupt_threshold 2CD6  
                         __end_of_fputc 27E6                           __end_of_fputs 2F68  
                         __end_of_putch 3258                          main@clear_read 01E8  
        __end_ofi2_clear_interrupt_flag 31FC                                 ??_fputc 0009  
                               ??_fputs 0012                                 ??_putch 0005  
                            __pbssBANK0 00EE                              __pbssBANK2 0200  
                     _color_writetoaddr 3198                            _T2CLKCONbits 000FBF  
                      motor_response@mL 0020                        motor_response@mR 0022  
                    ?_color_writetoaddr 0007                                 ?___wmul 0005  
                    motor_response@card 0026                            ?_turnRight45 0018  
                   ??_color_writetoaddr 0008                                 _INT1PPS 000DF1  
                        main@green_read 01E3                                 _SP4BRGH 000EE6  
                               _SP4BRGL 000EE5                                 _SSP2ADD 000ED6  
                               _SSP2BUF 000ED5             set_interrupt_threshold@AIHT 000B  
           set_interrupt_threshold@AILT 0009                 __end_of_Interrupts_init 3028  
        collect_avg_readings@clear_read 0010                  color_writetoaddr@value 0007  
                      ??_color_read_Red 000B           __end_of_make_master_closeness 271C  
                               _HighISR 0008          determine_card@predicted_colour 000D  
             __end_of_color_writetoaddr 31B8                    _clear_interrupt_flag 31D0  
                    _I2C_2_Master_Start 3238                              _initUSART4 3178  
                   i2_I2C_2_Master_Idle 3108                      _I2C_2_Master_Write 320C  
                               __Hparam 0000                     i2_I2C_2_Master_Stop 3242  
                               __Lparam 0000                       color_read_Red@tmp 000E  
             ??_set_interrupt_threshold 000F  make_master_closeness@normalised_values 0007  
               sendStringSerial4@string 0006                       reverseFullSpeed@i 001D  
                               ___aodiv 1DF2                                 ___aomod 20E6  
                   ?_I2C_2_Master_Start 0001                                 ___lwdiv 2C62  
                   ?_I2C_2_Master_Write 0001                               ?_vfprintf 0060  
                          __psmallconst 0E00                            turnLeft45@mL 0018  
                          turnLeft45@mR 001A                                 __pcinit 308C  
                               __ramtop 0E00                                 __ptext0 1272  
                               __ptext1 3178                                 __ptext2 2A56  
                               __ptext3 293E                                 __ptext4 3028  
                               __ptext5 30B6                                 __ptext6 24F6  
                               __ptext7 23A8                                 __ptext8 2D92  
                               __ptext9 2D3E                    ?i2_I2C_2_Master_Idle 0001  
                             _T2CONbits 000FBD                    ?i2_I2C_2_Master_Stop 0001  
                             _T2HLTbits 000FBE                           _RxBufWriteCnt 005A  
                  _collect_avg_readings 1B78                                 main@buf 0100  
                               _sprintf 2D92                    ??_I2C_2_Master_Start 0006  
                  ??_I2C_2_Master_Write 0006                    end_of_initialization 30AC  
        collect_avg_readings@green_read 0014                   normalise_readings@buf 001B  
                               fputc@fp 0007                                 fputs@fp 0010  
                     ?_color_click_init 0001                            turnRight45@i 001E  
                 ?_clear_interrupt_flag 0001                      ??_color_click_init 0009  
                         _card_detected 00F2                       __end_of_vfpfcnvrt 23A8  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                      vfpfcnvrt@convarg 004B                              ??_vfprintf 0055  
                       _initDCmotorsPWM 2A56                               _PORTFbits 000F8E  
                    setMotorPWM@negDuty 0017                   ??i2_I2C_2_Master_Idle 0001  
                 ??i2_I2C_2_Master_Stop 0002       normalise_readings@expected_values 0025  
       __end_of_set_interrupt_threshold 2D3E                           _card_response 23A8  
                             _TRISAbits 000F81                      setMotorPWM@posDuty 0016  
                             _TRISBbits 000F82                               _TRISCbits 000F83  
                             _TRISDbits 000F84                               _TRISEbits 000F85  
                             _TRISFbits 000F86                               _TRISGbits 000F87  
                             _TRISHbits 000F88                   ?_collect_avg_readings 0010  
              __end_of_reverseFullSpeed 2A56                        fullSpeedAhead@mL 0018  
                      fullSpeedAhead@mR 001A                     main@expected_values 0196  
              color_writetoaddr@address 0008                 ??_I2C_2_Master_RepStart 0006  
                      ?_Interrupts_init 0001                             _CCP1CONbits 000FAB  
                     ?_color_read_Clear 0009                            _EUSART4RXbuf 023C  
                          _EUSART4TXbuf 0200                             _CCP2CONbits 000FA7  
                     ?_color_read_Green 0009                             _CCP3CONbits 000F26  
                           ?_initUSART4 0001                 ?_clear_read_calibration 0081  
                           _CCP4CONbits 000F22               sendCharSerial4@charToSend 0005  
                            main@motorL 01EA                              main@motorR 01F3  
                    ??_color_read_Clear 000B                      ??_color_read_Green 000B  
                            _turnLeft45 2892                          _fullSpeedAhead 293E  
                           vfpfcnvrt@ap 0047                             vfpfcnvrt@cp 0053  
                           vfpfcnvrt@fp 0043                          __end_of___wmul 3156  
                       determine_card@i 000E                          ?_card_response 0081  
                   color_read_Clear@tmp 000E                     start_initialization 308C  
                           __end_of_abs 2FEA                             __end_of_pad 2C62  
                         _TxBufWriteCnt 0058                           ??_LEDSon_init 0005  
                ??_clear_interrupt_flag 0007          __end_of_clear_read_calibration 2610  
                   color_read_Green@tmp 000E                 __end_of_initDCmotorsPWM 2ADE  
                           vfprintf@fmt 0062                  __end_of_fullSpeedAhead 29CA  
              ??_enable_color_interrupt 0009                                ??___wmul 0009  
         i2I2C_2_Master_Write@data_byte 0002                          _determine_card 2B64  
          __end_ofi2_I2C_2_Master_Start 3256            __end_ofi2_I2C_2_Master_Write 3224  
                           __pbssCOMRAM 0057                  ??_collect_avg_readings 0018  
                         __pcstackBANK0 0060                           __pcstackBANK1 0100  
                      ___aodiv@dividend 0005                 clear_read_calibration@i 008B  
                        _motor_response 0E7A                                ?_HighISR 0001  
                   __end_of_LEDSon_init 3178                        ___lwdiv@dividend 000B  
                             _dtoa$2612 0032                             ?_turnLeft45 0018  
                       ?_fullSpeedAhead 0018                               __pintcode 0008  
                              ?___aodiv 0005                                ?___aomod 0005  
                      ___aodiv@quotient 0017                  __end_of_determine_card 2BE8  
                              ?___lwdiv 000B                    I2C_2_Master_Read@ack 0007  
                       ??_card_response 0057                    I2C_2_Master_Read@tmp 0008  
                           __smallconst 0E00                       _I2C_2_Master_Idle 30E0  
                     _I2C_2_Master_Init 30B6                       _I2C_2_Master_Read 2F68  
                     _I2C_2_Master_Stop 322E                            _RxBufReadCnt 0059  
          normalise_readings@clear_read 001D            normalise_readings@difference 0031  
                    ?_I2C_2_Master_Idle 0001                      ?_I2C_2_Master_Init 0001  
                    ?_I2C_2_Master_Read 0001                           ??_setMotorPWM 0014  
                    ?_I2C_2_Master_Stop 0001                        ___lwdiv@quotient 000F  
                __end_of_motor_response 1272                             turnLeft45@i 001E  
                              ?_sprintf 0066            clear_read_calibration@i_1591 008D  
                     _sendStringSerial4 305C                     ??_I2C_2_Master_Idle 0005  
                   ??_I2C_2_Master_Init 0005                     ??_I2C_2_Master_Read 0006  
    set_interrupt_threshold@persistence 000D                          ___wmul@product 0009  
                              _LATAbits 000F79                     ??_I2C_2_Master_Stop 0006  
                              _LATDbits 000F7C                                _LATFbits 000F7E  
                              _LATGbits 000F7F                                _LATHbits 000F80  
                              _IPR0bits 000E1F                                _PIE0bits 000E29  
                    ?_sendStringSerial4 0006                                _PIE4bits 000E2D  
                 _make_master_closeness 2610                                i2u134_40 3118  
                              i2u134_41 3114                                i2u135_40 312E  
                              i2u135_41 312A                                i2u240_47 0042  
                              i2u161_40 001A                                i2u161_41 0016  
                              i2u241_47 005C                                i2u162_40 002E  
                              i2u162_41 002A                                _PIR0bits 000E33  
                              _PIR4bits 000E37                        ?_initDCmotorsPWM 0001  
                     ??_sendCharSerial4 0005                make_master_closeness@buf 0005  
                              _SSP2CON2 000EDA                     ??_sendStringSerial4 0008  
                              _SSP2STAT 000ED8                         ?_determine_card 0005  
                             _vfpfcnvrt 224A               __end_of_I2C_2_Master_Idle 3108  
             __end_of_I2C_2_Master_Init 30E0               __end_of_I2C_2_Master_Read 2FAA  
                     ___wmul@multiplier 0005               __end_of_I2C_2_Master_Stop 3238  
              ??i2_clear_interrupt_flag 0003                            setMotorPWM@m 0012  
           I2C_2_Master_Write@data_byte 0006            normalise_readings@green_read 0021  
                     ??_color_read_Blue 000B                            _TxBufReadCnt 0057  
                       ?_motor_response 0020                       ?_reverseFullSpeed 0018  
             __end_of_sendStringSerial4 308C                             _LEDSon_init 3156  
                    ??_reverseFullSpeed 001C           __end_of_I2C_2_Master_RepStart 322E  
                    color_read_Blue@tmp 000E                ?_set_interrupt_threshold 0009  
                   __end_of_setMotorPWM 20E6                            ??_initUSART4 0005  
                  i2_I2C_2_Master_Start 324C                    i2_I2C_2_Master_Write 3218  
                              __Hrparam 0000                              vfprintf@ap 0064  
                              __Lrparam 0000                              vfprintf@fp 0060  
 make_master_closeness@master_closeness 0009             __end_ofi2_I2C_2_Master_Idle 3130  
                    reverseFullSpeed@mL 0018                      reverseFullSpeed@mR 001A  
           __end_ofi2_I2C_2_Master_Stop 324C                              ?_vfpfcnvrt 0043  
                       ___aodiv@divisor 000D                         ___aodiv@counter 0015  
                            _ANSELBbits 000E9A                              _ANSELDbits 000EA7  
                            _ANSELFbits 000EB4                              sprintf@fmt 0068  
                       ___lwdiv@divisor 000D                      __end_of_initUSART4 3198  
                       ___lwdiv@counter 0011                                __ptext10 224A  
                              __ptext11 18FA                                __ptext20 1616  
                              __ptext12 2BE8                                __ptext21 2FAA  
                              __ptext13 2F24                  _enable_color_interrupt 31FC  
                              __ptext30 2610                                __ptext22 0E7A  
                              __ptext14 271C                                __ptext31 2B64  
                              __ptext23 27E6                                __ptext15 3256  
                              __ptext40 2FEA                                __ptext32 1B78  
                              __ptext24 2892                                __ptext16 20E6  
                              __ptext41 2CD6                                __ptext33 2DE4  
                              __ptext25 2ADE                                __ptext17 1DF2  
                              __ptext50 31E6                                __ptext42 31FC  
                              __ptext34 2E34                                __ptext26 29CA  
                              __ptext18 305C                                __ptext51 3218  
                              __ptext43 3198                                __ptext35 2E84  
                              __ptext27 1F7A                                __ptext19 31B8  
                              __ptext52 3242                                __ptext44 31D0  
                              __ptext36 2ED4                                __ptext28 3130  
                              __ptext53 324C                                __ptext45 320C  
                              __ptext37 3224                                __ptext29 2C62  
                              __ptext54 3108                                __ptext46 322E  
                              __ptext38 2F68                                __ptext47 3238  
                              __ptext39 3156                                __ptext48 30E0  
                          _SSP2CON1bits 000ED9                            _SSP2CON2bits 000EDA  
                ?_make_master_closeness 0005                   ?i2_I2C_2_Master_Start 0001  
                 ?i2_I2C_2_Master_Write 0001                                isa$xinst 000000  
               card_response@clear_read 0083                              _RC4STAbits 000EE7  
                              int$flags 005B                                _vfprintf 2D3E  
                         ??_turnRight45 001C                        ___aomod@dividend 0005  
                 collect_avg_readings@i 001A                              _INTCONbits 000FF2  
          _set_interrupt_threshold$2093 000F            _set_interrupt_threshold$2094 0010  
                           _setMotorPWM 1F7A           collect_avg_readings@blue_read 0016  
                         turnRight45@mL 0018                           turnRight45@mR 001A  
                              intlevel2 0000                               sprintf@ap 0074  
            __end_of_normalise_readings 18FA            card_response@expected_values 008B  
                      ??_fullSpeedAhead 001C                 card_response@green_read 0087  
                          ??_turnLeft45 001C          determine_card@current_smallest 000B  
                       ___aomod@divisor 000D                             ??_vfpfcnvrt 0049  
                       ___aomod@counter 0015                  card_response@blue_read 0089  
                      _color_click_init 3028           card_response@master_closeness 00D9  
                              sprintf@f 0076                                sprintf@s 0066  
                            _SSP2DATPPS 000E1D                              _SSP2CLKPPS 000E1C  
                   __end_of_turnRight45 2892                      __end_of_turnLeft45 293E  
                            _TX4STAbits 000EE8                            ___aodiv@sign 0016  
                       _sendCharSerial4 31B8                  ??i2_I2C_2_Master_Start 0002  
                ??i2_I2C_2_Master_Write 0002                  i2_clear_interrupt_flag 31E6  
                 card_response@red_read 0085                            ___aomod@sign 0016  
                      ??_determine_card 0007                            main@PWMcycle 01DE  
